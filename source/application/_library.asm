;
;	This file is automatically generated
;
; ************************************************************************************************
; ************************************************************************************************
;
;		Name:		api.asm
;		Purpose:	Compiler API Interface
;		Created:	9th October 2023
;		Reviewed: 	No
;		Author:		Paul Robson (paul@robsons.org.uk)
;
; ************************************************************************************************
; ************************************************************************************************

; ************************************************************************************************
;
;									API Entry point
;
; ************************************************************************************************

		.section code

CompilerAPI:
		cmp 	#BLC_OPENIN
		beq 	_CAOpenIn
		cmp 	#BLC_CLOSEIN
		beq 	_CACloseIn
		cmp 	#BLC_READIN
		beq 	_CARead
		cmp 	#BLC_RESETOUT
		beq 	_CAResetOut
		cmp 	#BLC_CLOSEOUT
		beq 	_CACloseOut
		cmp 	#BLC_WRITEOUT
		beq 	_CAWriteByte
		cmp 	#BLC_PRINTCHAR
		beq 	_CAPrintScreen
		.debug

; ************************************************************************************************
;
;									Open source file for reading
;
; ************************************************************************************************

_CAOpenIn:	
		ldy 	#SourceFile >> 8 			; name of file
		ldx 	#SourceFile & $FF		
		jsr 	IOOpenRead 					; open file
		jsr 	IOReadByte 					; skip the 2 byte load address header
		jsr 	IOReadByte
		rts

; ************************************************************************************************
;
;									Close read source file
;
; ************************************************************************************************

_CACloseIn:
		jmp 	IOReadClose

; ************************************************************************************************
;
;								Code is stored from free memory onwards
;
; ************************************************************************************************

_CAResetOut:
		.set16 	objPtr,FreeMemory
		rts

_CACloseOut:
		rts

; ************************************************************************************************
;
;									Write byte A to free memory
;
; ************************************************************************************************

_CAWriteByte:
		txa
		sta 	(objPtr)
		inc 	objPtr
		bne 	_HWOWBNoCarry
		inc 	objPtr+1
_HWOWBNoCarry:		
		rts

; ************************************************************************************************
;
;								Print character to screen
;
; ************************************************************************************************
		
_CAPrintScreen:
		txa
		jmp 	$FFD2

; ************************************************************************************************
;
;									  Read line
;
; ************************************************************************************************

_CARead:
		jsr 	IOReadByte 				; copy the address of next into the buffer
		sta 	SourceLine+0
		jsr 	IOReadByte
		sta 	SourceLine+1
		;
		ora 	sourceLine				; if both were zero, exit with CC (e.g. fail)
		clc
		beq		_CARExit

		jsr 	IOReadByte 				; read the line # into the buffer.
		sta 	SourceLine+2
		jsr 	IOReadByte
		sta 	SourceLine+3
		;
		ldx 	#4 						; read the body of the line.
_CAReadLine:
		jsr 	IOReadByte 				; now keep copying to EOL
		sta 	SourceLine,x
		inx
		cmp 	#0
		bne 	_CAReadLine
		;		
		sec 							; read a line okay
		ldy 	#SourceLine >> 8
		ldx 	#SourceLine & $FF
_CARExit:		
		rts


;;		ldy 	#ObjectFile >> 8
;		ldx 	#ObjectFile & $FF		
;		jsr 	IOOpenWrite
;		lda 	#12
;		jsr 	IOWriteByte
;		lda 	#13
;		jsr 	IOWriteByte
;		jsr 	IOWriteClose
				
		.send code

		.section storage
SourceLine: 								; line for source code storage
		.fill 	256		
		.send storage

; ************************************************************************************************
;
;									Changes and Updates
;
; ************************************************************************************************
;
;		Date			Notes
;		==== 			=====
;
; ************************************************************************************************

; ************************************************************************************************
; ************************************************************************************************
;
;		Name:		object.asm
;		Purpose:	Write object code out.
;		Created:	9th October 2023
;		Reviewed: 	No
;		Author:		Paul Robson (paul@robsons.org.uk)
;
; ************************************************************************************************
; ************************************************************************************************

		.section code

; ************************************************************************************************
;
;									Write object code out.
;
; ************************************************************************************************

WriteObjectCode:
		jsr 	PatchOutCompile 			; makes it run the runtime on reload								

		ldy 	#ObjectFile >> 8
		ldx 	#ObjectFile & $FF				
		jsr 	IOOpenWrite 				; open write

		lda 	#1 							; write out the load address $0801
		jsr 	IOWriteByte
		lda 	#8
		jsr 	IOWriteByte

		.set16 	zTemp0,StartBasicProgram 	; now write out the whole lot as far as objPtr
_WOCLoop:
		lda 	(zTemp0) 					; write code
		jsr 	IOWriteByte
		inc 	zTemp0 						; advance pointer
		bne 	_WOCSkip
		inc 	zTemp0+1
_WOCSkip:
		lda 	zTemp0 						; check end
		cmp 	objPtr
		bne 	_WOCLoop
		lda 	zTemp0+1
		cmp 	objPtr+1
		bne 	_WOCLoop
		jsr 	IOWriteClose 				; close the file.
		rts

		.send code

		.section storage
		.send storage

; ************************************************************************************************
;
;									Changes and Updates
;
; ************************************************************************************************
;
;		Date			Notes
;		==== 			=====
;
; ************************************************************************************************
; ************************************************************************************************
; ************************************************************************************************
;
;		Name:		read.asm
;		Purpose:	Read file code.
;		Created:	9th October 2023
;		Reviewed: 	No
;		Author:		Paul Robson (paul@robsons.org.uk)
;
; ************************************************************************************************
; ************************************************************************************************

		.section code

; ************************************************************************************************
;
;								 Open sequential file for Read
; 									   YX = ASCIIZ name
;
; ************************************************************************************************

IOOpenRead:
		lda 	#'R' 						; read.
		jsr 	IOSetFileName 				; set up name/LFS
		ldx	 	#3 							; use file 3 for reading
		jsr 	$FFC6 						; CHKIN
		rts

; ************************************************************************************************
;
;									Read A from input file
;
;			    If read,  A=Byte and Carry Clear, else A = Error and Carry Set
;
; ************************************************************************************************

IOReadByte:
		phx 					
		phy
		jsr 	$FFB7 						; read ST
		sec
		bne 	_IORExit
		jsr 	$FFCF 						; read a byte
		clc 								; status OK.
_IORExit:		
		ply
		plx
		rts

; ************************************************************************************************
;
;							    Close files (use the same code)
;
; ************************************************************************************************

IOReadClose:
IOWriteClose:
		lda 	#3 							; CLOSE# 3
		jsr 	$FFC3
		jsr 	$FFCC 						; CLRCHN
		rts

; ************************************************************************************************
;
;				 Set LFS, Name and Open File. YX = Filename (ASCIIZ) A = R/W
;
; ************************************************************************************************

IOSetFileName:
		pha 								; save R/W
		stx 	zTemp0
		sty 	zTemp0+1
		ldy 	#$FF 						; copy name given
_IOSCopy:
		iny 								; pre-increment copy
		lda 	(zTemp0),y
		sta 	IONameBuffer,y
		bne 	_IOSCopy
		;
		sta 	IONameBuffer+4,y
		lda 	#',' 						; append ,S,[R|W]
		sta 	IONameBuffer+0,y
		sta 	IONameBuffer+2,y
		lda 	#'S'
		sta 	IONameBuffer+1,y
		pla 								; write R/W out
		sta 	IONameBuffer+3,y

		tya 								; length of name to A
		clc
		adc 	#4 							; we added 4 characters.
 								
		ldx 	#IONameBuffer & $FF			; name address to YX
		ldy 	#IONameBuffer >> 8

	    jsr 	$FFBD          				; call SETNAM

    	lda 	#3 							; set LFS to 3,8,3
		ldx 	#8
		ldy 	#3
		jsr 	$FFBA		

		jsr 	$FFC0 						; OPEN
		rts

		.send code

		.section storage
IONameBuffer:
		.fill 	64		
		.send storage

; ************************************************************************************************
;
;									Changes and Updates
;
; ************************************************************************************************
;
;		Date			Notes
;		==== 			=====
;
; ************************************************************************************************
; ************************************************************************************************
; ************************************************************************************************
;
;		Name:		start.asm
;		Purpose:	Start actual compilation.
;		Created:	9th October 2023
;		Reviewed: 	No
;		Author:		Paul Robson (paul@robsons.org.uk)
;
; ************************************************************************************************
; ************************************************************************************************

		.section code

; ************************************************************************************************
;
;									Compile the code from disk
;
; ************************************************************************************************

CompileCode:
		ldx 	#0
_Prompt:lda 	Prompt,x
		jsr 	$FFD2
		inx
		cmp 	#0
		bne 	_Prompt

		ldx 	#APIDesc & $FF
		ldy 	#APIDesc >> 8
		jsr 	StartCompiler
		jsr 	WriteObjectCode
		lda 	#"O"
		jsr 	$FFD2
		lda 	#"K"
		jsr 	$FFD2
		rts

; ************************************************************************************************
;
;									API Setup for the compiler
;
; ************************************************************************************************

APIDesc:
		.word 	CompilerAPI 				; the compiler API Implementeation
		.byte 	$80 						; start of workspace for compiler $8000
		.byte 	$9F							; end of workspace for compiler $9F00

; ************************************************************************************************
;
;									File names for the compiler
;
; ************************************************************************************************

ObjectFile:
		.text 	'OBJECT.PRG',0		
SourceFile:
		.text 	'SOURCE.PRG',0					
Prompt:
		.text 	'*** BLITZ (ALPHA 14-10-23) ***',13,13
		.text 	'BUGS -> HTTPS://GITHUB.COM/PAULSCOTTROBSON/BLITZ-COMPILER',13,13,0								

		.send code

		.section storage
		.send storage

; ************************************************************************************************
;
;									Changes and Updates
;
; ************************************************************************************************
;
;		Date			Notes
;		==== 			=====
;
; ************************************************************************************************
; ************************************************************************************************
; ************************************************************************************************
;
;		Name:		write.asm
;		Purpose:	Write file code
;		Created:	9th October 2023
;		Reviewed: 	No
;		Author:		Paul Robson (paul@robsons.org.uk)
;
; ************************************************************************************************
; ************************************************************************************************

		.section code

; ************************************************************************************************
;
;								Open sequential file for Write.
; 									   YX = ASCIIZ name
;
; ************************************************************************************************

IOOpenWrite:
		lda 	#'W'			 			; write
		jsr 	IOSetFileName 				; set up name/LFS
		ldx	 	#3 							; use file 3 for writing
		jsr 	$FFC9 						; CHKOUT
		rts

; ************************************************************************************************
;
;									Write A to output file
;
; ************************************************************************************************

IOWriteByte:		
		pha
		phx
		phy
		jsr 	$FFD2
		ply
		plx
		pla
		rts

		.send code

; ************************************************************************************************
;
;									Changes and Updates
;
; ************************************************************************************************
;
;		Date			Notes
;		==== 			=====
;
; ************************************************************************************************
