
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass -c -Wall -o build/code.prg -L build/code.lst -l build/code.lbl testing/testing.asm /home/paulr/Projects/blitz-compiler/documents/../bin/common.library /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library
; Sat Oct  7 05:44:52 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: testing/testing.asm

.1000					WrapperBoot:
.1000	a2 ff		ldx #$ff			ldx 	#255
.1002	20 0b 10	jsr $100b			jsr 	TestScript
.1005	86 28		stx $28				stx 	zTemp0
.1007	4c ff ff	jmp $ffff			jmp 	$FFFF
.100a					ErrorHandler:
>100a	db						.byte 	$DB 						; causes a break in the emulator
.100b					TestScript:

;******  Processing file: testing/generated/testcode.dat

.100b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -47749
>100e	85 ba 00 00				.dword	$0000ba85
>1012	00 80					.byte	$00,$80
.1014	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -4874
>1017	0a 13 00 00				.dword	$0000130a
>101b	00 80					.byte	$00,$80
.101d	20 96 51	jsr $5196		jsr	FloatAdd
.1020	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -52623
>1023	8f cd 00 00				.dword	$0000cd8f
>1027	00 80					.byte	$00,$80
.1029	20 57 52	jsr $5257		jsr	FloatCompare
.102c	20 21 52	jsr $5221		jsr	CompareEqual
.102f	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1032	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -47749
>1035	85 ba 00 00				.dword	$0000ba85
>1039	00 80					.byte	$00,$80
.103b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -4874
>103e	0a 13 00 00				.dword	$0000130a
>1042	00 80					.byte	$00,$80
.1044	20 90 51	jsr $5190		jsr	FloatSubtract
.1047	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -42875
>104a	7b a7 00 00				.dword	$0000a77b
>104e	00 80					.byte	$00,$80
.1050	20 57 52	jsr $5257		jsr	FloatCompare
.1053	20 21 52	jsr $5221		jsr	CompareEqual
.1056	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1059	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -47749
>105c	85 ba 00 00				.dword	$0000ba85
>1060	00 80					.byte	$00,$80
.1062	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -4874
>1065	0a 13 00 00				.dword	$0000130a
>1069	00 80					.byte	$00,$80
.106b	20 32 54	jsr $5432		jsr	FloatMultiply
.106e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 232728626
>1071	32 28 df 0d				.dword	$0ddf2832
>1075	00 00					.byte	$00,$00
.1077	20 57 52	jsr $5257		jsr	FloatCompare
.107a	20 21 52	jsr $5221		jsr	CompareEqual
.107d	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1080	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -47749
>1083	85 ba 00 00				.dword	$0000ba85
>1087	00 80					.byte	$00,$80
.1089	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -4874
>108c	0a 13 00 00				.dword	$0000130a
>1090	00 80					.byte	$00,$80
.1092	20 bb 52	jsr $52bb		jsr	FloatDivide
.1095	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 9.79667624
>1098	cb 97 5f 4e				.dword	$4e5f97cb
>109c	e5 00					.byte	$e5,$00
.109e	20 57 52	jsr $5257		jsr	FloatCompare
.10a1	20 21 52	jsr $5221		jsr	CompareEqual
.10a4	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.10a7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -4874
>10aa	0a 13 00 00				.dword	$0000130a
>10ae	00 80					.byte	$00,$80
.10b0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -4874
>10b3	0a 13 00 00				.dword	$0000130a
>10b7	00 80					.byte	$00,$80
.10b9	20 57 52	jsr $5257		jsr	FloatCompare
.10bc	20 21 52	jsr $5221		jsr	CompareEqual
.10bf	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>10c2	01 00 00 00				.dword	$00000001
>10c6	00 80					.byte	$00,$80
.10c8	20 57 52	jsr $5257		jsr	FloatCompare
.10cb	20 21 52	jsr $5221		jsr	CompareEqual
.10ce	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.10d1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -4874
>10d4	0a 13 00 00				.dword	$0000130a
>10d8	00 80					.byte	$00,$80
.10da	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -4874
>10dd	0a 13 00 00				.dword	$0000130a
>10e1	00 80					.byte	$00,$80
.10e3	20 57 52	jsr $5257		jsr	FloatCompare
.10e6	20 31 52	jsr $5231		jsr	CompareNotEqual
.10e9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>10ec	00 00 00 00				.dword	$00000000
>10f0	00 00					.byte	$00,$00
.10f2	20 57 52	jsr $5257		jsr	FloatCompare
.10f5	20 21 52	jsr $5221		jsr	CompareEqual
.10f8	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.10fb	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -4874
>10fe	0a 13 00 00				.dword	$0000130a
>1102	00 80					.byte	$00,$80
.1104	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -4874
>1107	0a 13 00 00				.dword	$0000130a
>110b	00 80					.byte	$00,$80
.110d	20 57 52	jsr $5257		jsr	FloatCompare
.1110	20 3f 52	jsr $523f		jsr	CompareGreater
.1113	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>1116	00 00 00 00				.dword	$00000000
>111a	00 00					.byte	$00,$00
.111c	20 57 52	jsr $5257		jsr	FloatCompare
.111f	20 21 52	jsr $5221		jsr	CompareEqual
.1122	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1125	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -4874
>1128	0a 13 00 00				.dword	$0000130a
>112c	00 80					.byte	$00,$80
.112e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -4874
>1131	0a 13 00 00				.dword	$0000130a
>1135	00 80					.byte	$00,$80
.1137	20 57 52	jsr $5257		jsr	FloatCompare
.113a	20 4f 52	jsr $524f		jsr	CompareGreaterEqual
.113d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>1140	01 00 00 00				.dword	$00000001
>1144	00 80					.byte	$00,$80
.1146	20 57 52	jsr $5257		jsr	FloatCompare
.1149	20 21 52	jsr $5221		jsr	CompareEqual
.114c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.114f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -4874
>1152	0a 13 00 00				.dword	$0000130a
>1156	00 80					.byte	$00,$80
.1158	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -4874
>115b	0a 13 00 00				.dword	$0000130a
>115f	00 80					.byte	$00,$80
.1161	20 57 52	jsr $5257		jsr	FloatCompare
.1164	20 37 52	jsr $5237		jsr	CompareLess
.1167	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>116a	00 00 00 00				.dword	$00000000
>116e	00 00					.byte	$00,$00
.1170	20 57 52	jsr $5257		jsr	FloatCompare
.1173	20 21 52	jsr $5221		jsr	CompareEqual
.1176	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1179	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -4874
>117c	0a 13 00 00				.dword	$0000130a
>1180	00 80					.byte	$00,$80
.1182	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -4874
>1185	0a 13 00 00				.dword	$0000130a
>1189	00 80					.byte	$00,$80
.118b	20 57 52	jsr $5257		jsr	FloatCompare
.118e	20 47 52	jsr $5247		jsr	CompareLessEqual
.1191	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>1194	01 00 00 00				.dword	$00000001
>1198	00 80					.byte	$00,$80
.119a	20 57 52	jsr $5257		jsr	FloatCompare
.119d	20 21 52	jsr $5221		jsr	CompareEqual
.11a0	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.11a3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 47.8673362
>11a6	7e 13 bc 5f				.dword	$5fbc137e
>11aa	e7 00					.byte	$e7,$00
.11ac	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 11.29164979
>11af	7c 4c 55 5a				.dword	$5a554c7c
>11b3	e5 00					.byte	$e5,$00
.11b5	20 96 51	jsr $5196		jsr	FloatAdd
.11b8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 59.15898599
>11bb	9d 66 51 76				.dword	$7651669d
>11bf	e7 00					.byte	$e7,$00
.11c1	20 57 52	jsr $5257		jsr	FloatCompare
.11c4	20 21 52	jsr $5221		jsr	CompareEqual
.11c7	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.11ca	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 47.8673362
>11cd	7e 13 bc 5f				.dword	$5fbc137e
>11d1	e7 00					.byte	$e7,$00
.11d3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 11.29164979
>11d6	7c 4c 55 5a				.dword	$5a554c7c
>11da	e5 00					.byte	$e5,$00
.11dc	20 90 51	jsr $5190		jsr	FloatSubtract
.11df	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 36.5756864
>11e2	5e c0 26 49				.dword	$4926c05e
>11e6	e7 00					.byte	$e7,$00
.11e8	20 57 52	jsr $5257		jsr	FloatCompare
.11eb	20 21 52	jsr $5221		jsr	CompareEqual
.11ee	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.11f1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 47.8673362
>11f4	7e 13 bc 5f				.dword	$5fbc137e
>11f8	e7 00					.byte	$e7,$00
.11fa	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 11.29164979
>11fd	7c 4c 55 5a				.dword	$5a554c7c
>1201	e5 00					.byte	$e5,$00
.1203	20 32 54	jsr $5432		jsr	FloatMultiply
.1206	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 540.50119686
>1209	ce 09 90 43				.dword	$439009ce
>120d	eb 00					.byte	$eb,$00
.120f	20 57 52	jsr $5257		jsr	FloatCompare
.1212	20 21 52	jsr $5221		jsr	CompareEqual
.1215	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1218	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 47.8673362
>121b	7e 13 bc 5f				.dword	$5fbc137e
>121f	e7 00					.byte	$e7,$00
.1221	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 11.29164979
>1224	7c 4c 55 5a				.dword	$5a554c7c
>1228	e5 00					.byte	$e5,$00
.122a	20 bb 52	jsr $52bb		jsr	FloatDivide
.122d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 4.23918002
>1230	6e ae d3 43				.dword	$43d3ae6e
>1234	e4 00					.byte	$e4,$00
.1236	20 57 52	jsr $5257		jsr	FloatCompare
.1239	20 21 52	jsr $5221		jsr	CompareEqual
.123c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.123f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -51.59423342
>1242	5d 3f 30 67				.dword	$67303f5d
>1246	e7 80					.byte	$e7,$80
.1248	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -51.59423342
>124b	5d 3f 30 67				.dword	$67303f5d
>124f	e7 80					.byte	$e7,$80
.1251	20 57 52	jsr $5257		jsr	FloatCompare
.1254	20 3f 52	jsr $523f		jsr	CompareGreater
.1257	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>125a	00 00 00 00				.dword	$00000000
>125e	00 00					.byte	$00,$00
.1260	20 57 52	jsr $5257		jsr	FloatCompare
.1263	20 21 52	jsr $5221		jsr	CompareEqual
.1266	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1269	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -51.59423342
>126c	5d 3f 30 67				.dword	$67303f5d
>1270	e7 80					.byte	$e7,$80
.1272	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -51.59423342
>1275	5d 3f 30 67				.dword	$67303f5d
>1279	e7 80					.byte	$e7,$80
.127b	20 57 52	jsr $5257		jsr	FloatCompare
.127e	20 4f 52	jsr $524f		jsr	CompareGreaterEqual
.1281	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>1284	01 00 00 00				.dword	$00000001
>1288	00 80					.byte	$00,$80
.128a	20 57 52	jsr $5257		jsr	FloatCompare
.128d	20 21 52	jsr $5221		jsr	CompareEqual
.1290	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1293	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -51.59423342
>1296	5d 3f 30 67				.dword	$67303f5d
>129a	e7 80					.byte	$e7,$80
.129c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -51.59423342
>129f	5d 3f 30 67				.dword	$67303f5d
>12a3	e7 80					.byte	$e7,$80
.12a5	20 57 52	jsr $5257		jsr	FloatCompare
.12a8	20 37 52	jsr $5237		jsr	CompareLess
.12ab	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>12ae	00 00 00 00				.dword	$00000000
>12b2	00 00					.byte	$00,$00
.12b4	20 57 52	jsr $5257		jsr	FloatCompare
.12b7	20 21 52	jsr $5221		jsr	CompareEqual
.12ba	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.12bd	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -51.59423342
>12c0	5d 3f 30 67				.dword	$67303f5d
>12c4	e7 80					.byte	$e7,$80
.12c6	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -51.59423342
>12c9	5d 3f 30 67				.dword	$67303f5d
>12cd	e7 80					.byte	$e7,$80
.12cf	20 57 52	jsr $5257		jsr	FloatCompare
.12d2	20 47 52	jsr $5247		jsr	CompareLessEqual
.12d5	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>12d8	01 00 00 00				.dword	$00000001
>12dc	00 80					.byte	$00,$80
.12de	20 57 52	jsr $5257		jsr	FloatCompare
.12e1	20 21 52	jsr $5221		jsr	CompareEqual
.12e4	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.12e7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -51.59423342
>12ea	5d 3f 30 67				.dword	$67303f5d
>12ee	e7 80					.byte	$e7,$80
.12f0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -51.59423342
>12f3	5d 3f 30 67				.dword	$67303f5d
>12f7	e7 80					.byte	$e7,$80
.12f9	20 57 52	jsr $5257		jsr	FloatCompare
.12fc	20 21 52	jsr $5221		jsr	CompareEqual
.12ff	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>1302	01 00 00 00				.dword	$00000001
>1306	00 80					.byte	$00,$80
.1308	20 57 52	jsr $5257		jsr	FloatCompare
.130b	20 21 52	jsr $5221		jsr	CompareEqual
.130e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1311	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -51.59423342
>1314	5d 3f 30 67				.dword	$67303f5d
>1318	e7 80					.byte	$e7,$80
.131a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -51.59423342
>131d	5d 3f 30 67				.dword	$67303f5d
>1321	e7 80					.byte	$e7,$80
.1323	20 57 52	jsr $5257		jsr	FloatCompare
.1326	20 31 52	jsr $5231		jsr	CompareNotEqual
.1329	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>132c	00 00 00 00				.dword	$00000000
>1330	00 00					.byte	$00,$00
.1332	20 57 52	jsr $5257		jsr	FloatCompare
.1335	20 21 52	jsr $5221		jsr	CompareEqual
.1338	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.133b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 21506
>133e	02 54 00 00				.dword	$00005402
>1342	00 00					.byte	$00,$00
.1344	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -334
>1347	4e 01 00 00				.dword	$0000014e
>134b	00 80					.byte	$00,$80
.134d	20 96 51	jsr $5196		jsr	FloatAdd
.1350	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 21172
>1353	b4 52 00 00				.dword	$000052b4
>1357	00 00					.byte	$00,$00
.1359	20 57 52	jsr $5257		jsr	FloatCompare
.135c	20 21 52	jsr $5221		jsr	CompareEqual
.135f	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1362	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 21506
>1365	02 54 00 00				.dword	$00005402
>1369	00 00					.byte	$00,$00
.136b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -334
>136e	4e 01 00 00				.dword	$0000014e
>1372	00 80					.byte	$00,$80
.1374	20 90 51	jsr $5190		jsr	FloatSubtract
.1377	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 21840
>137a	50 55 00 00				.dword	$00005550
>137e	00 00					.byte	$00,$00
.1380	20 57 52	jsr $5257		jsr	FloatCompare
.1383	20 21 52	jsr $5221		jsr	CompareEqual
.1386	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1389	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 21506
>138c	02 54 00 00				.dword	$00005402
>1390	00 00					.byte	$00,$00
.1392	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -334
>1395	4e 01 00 00				.dword	$0000014e
>1399	00 80					.byte	$00,$80
.139b	20 32 54	jsr $5432		jsr	FloatMultiply
.139e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -7183004
>13a1	9c 9a 6d 00				.dword	$006d9a9c
>13a5	00 80					.byte	$00,$80
.13a7	20 57 52	jsr $5257		jsr	FloatCompare
.13aa	20 21 52	jsr $5221		jsr	CompareEqual
.13ad	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.13b0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 21506
>13b3	02 54 00 00				.dword	$00005402
>13b7	00 00					.byte	$00,$00
.13b9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -334
>13bc	4e 01 00 00				.dword	$0000014e
>13c0	00 80					.byte	$00,$80
.13c2	20 bb 52	jsr $52bb		jsr	FloatDivide
.13c5	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -64.38922156
>13c8	06 a4 63 40				.dword	$4063a406
>13cc	e8 80					.byte	$e8,$80
.13ce	20 57 52	jsr $5257		jsr	FloatCompare
.13d1	20 21 52	jsr $5221		jsr	CompareEqual
.13d4	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.13d7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -334
>13da	4e 01 00 00				.dword	$0000014e
>13de	00 80					.byte	$00,$80
.13e0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -334
>13e3	4e 01 00 00				.dword	$0000014e
>13e7	00 80					.byte	$00,$80
.13e9	20 57 52	jsr $5257		jsr	FloatCompare
.13ec	20 21 52	jsr $5221		jsr	CompareEqual
.13ef	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>13f2	01 00 00 00				.dword	$00000001
>13f6	00 80					.byte	$00,$80
.13f8	20 57 52	jsr $5257		jsr	FloatCompare
.13fb	20 21 52	jsr $5221		jsr	CompareEqual
.13fe	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1401	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -334
>1404	4e 01 00 00				.dword	$0000014e
>1408	00 80					.byte	$00,$80
.140a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -334
>140d	4e 01 00 00				.dword	$0000014e
>1411	00 80					.byte	$00,$80
.1413	20 57 52	jsr $5257		jsr	FloatCompare
.1416	20 31 52	jsr $5231		jsr	CompareNotEqual
.1419	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>141c	00 00 00 00				.dword	$00000000
>1420	00 00					.byte	$00,$00
.1422	20 57 52	jsr $5257		jsr	FloatCompare
.1425	20 21 52	jsr $5221		jsr	CompareEqual
.1428	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.142b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -334
>142e	4e 01 00 00				.dword	$0000014e
>1432	00 80					.byte	$00,$80
.1434	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -334
>1437	4e 01 00 00				.dword	$0000014e
>143b	00 80					.byte	$00,$80
.143d	20 57 52	jsr $5257		jsr	FloatCompare
.1440	20 3f 52	jsr $523f		jsr	CompareGreater
.1443	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>1446	00 00 00 00				.dword	$00000000
>144a	00 00					.byte	$00,$00
.144c	20 57 52	jsr $5257		jsr	FloatCompare
.144f	20 21 52	jsr $5221		jsr	CompareEqual
.1452	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1455	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -334
>1458	4e 01 00 00				.dword	$0000014e
>145c	00 80					.byte	$00,$80
.145e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -334
>1461	4e 01 00 00				.dword	$0000014e
>1465	00 80					.byte	$00,$80
.1467	20 57 52	jsr $5257		jsr	FloatCompare
.146a	20 4f 52	jsr $524f		jsr	CompareGreaterEqual
.146d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>1470	01 00 00 00				.dword	$00000001
>1474	00 80					.byte	$00,$80
.1476	20 57 52	jsr $5257		jsr	FloatCompare
.1479	20 21 52	jsr $5221		jsr	CompareEqual
.147c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.147f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -334
>1482	4e 01 00 00				.dword	$0000014e
>1486	00 80					.byte	$00,$80
.1488	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -334
>148b	4e 01 00 00				.dword	$0000014e
>148f	00 80					.byte	$00,$80
.1491	20 57 52	jsr $5257		jsr	FloatCompare
.1494	20 37 52	jsr $5237		jsr	CompareLess
.1497	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>149a	00 00 00 00				.dword	$00000000
>149e	00 00					.byte	$00,$00
.14a0	20 57 52	jsr $5257		jsr	FloatCompare
.14a3	20 21 52	jsr $5221		jsr	CompareEqual
.14a6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.14a9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -334
>14ac	4e 01 00 00				.dword	$0000014e
>14b0	00 80					.byte	$00,$80
.14b2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -334
>14b5	4e 01 00 00				.dword	$0000014e
>14b9	00 80					.byte	$00,$80
.14bb	20 57 52	jsr $5257		jsr	FloatCompare
.14be	20 47 52	jsr $5247		jsr	CompareLessEqual
.14c1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>14c4	01 00 00 00				.dword	$00000001
>14c8	00 80					.byte	$00,$80
.14ca	20 57 52	jsr $5257		jsr	FloatCompare
.14cd	20 21 52	jsr $5221		jsr	CompareEqual
.14d0	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.14d3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -10.037418
>14d6	cf a1 4c 50				.dword	$504ca1cf
>14da	e5 80					.byte	$e5,$80
.14dc	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 60.21738074
>14df	87 4c 6f 78				.dword	$786f4c87
>14e3	e7 00					.byte	$e7,$00
.14e5	20 96 51	jsr $5196		jsr	FloatAdd
.14e8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 50.17996274
>14eb	14 24 5c 64				.dword	$645c2414
>14ef	e7 00					.byte	$e7,$00
.14f1	20 57 52	jsr $5257		jsr	FloatCompare
.14f4	20 21 52	jsr $5221		jsr	CompareEqual
.14f7	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.14fa	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -10.037418
>14fd	cf a1 4c 50				.dword	$504ca1cf
>1501	e5 80					.byte	$e5,$80
.1503	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 60.21738074
>1506	87 4c 6f 78				.dword	$786f4c87
>150a	e7 00					.byte	$e7,$00
.150c	20 90 51	jsr $5190		jsr	FloatSubtract
.150f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -70.25479874
>1512	7d 3a 41 46				.dword	$46413a7d
>1516	e8 80					.byte	$e8,$80
.1518	20 57 52	jsr $5257		jsr	FloatCompare
.151b	20 21 52	jsr $5221		jsr	CompareEqual
.151e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1521	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -10.037418
>1524	cf a1 4c 50				.dword	$504ca1cf
>1528	e5 80					.byte	$e5,$80
.152a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 60.21738074
>152d	87 4c 6f 78				.dword	$786f4c87
>1531	e7 00					.byte	$e7,$00
.1533	20 32 54	jsr $5432		jsr	FloatMultiply
.1536	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -604.42702113
>1539	28 aa 8d 4b				.dword	$4b8daa28
>153d	eb 80					.byte	$eb,$80
.153f	20 57 52	jsr $5257		jsr	FloatCompare
.1542	20 21 52	jsr $5221		jsr	CompareEqual
.1545	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1548	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -10.037418
>154b	cf a1 4c 50				.dword	$504ca1cf
>154f	e5 80					.byte	$e5,$80
.1551	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 60.21738074
>1554	87 4c 6f 78				.dword	$786f4c87
>1558	e7 00					.byte	$e7,$00
.155a	20 bb 52	jsr $52bb		jsr	FloatDivide
.155d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -0.16668639
>1560	23 eb 57 55				.dword	$5557eb23
>1564	df 80					.byte	$df,$80
.1566	20 57 52	jsr $5257		jsr	FloatCompare
.1569	20 21 52	jsr $5221		jsr	CompareEqual
.156c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.156f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -38.54231797
>1572	b3 aa 15 4d				.dword	$4d15aab3
>1576	e7 80					.byte	$e7,$80
.1578	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -38.54231797
>157b	b3 aa 15 4d				.dword	$4d15aab3
>157f	e7 80					.byte	$e7,$80
.1581	20 57 52	jsr $5257		jsr	FloatCompare
.1584	20 3f 52	jsr $523f		jsr	CompareGreater
.1587	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>158a	00 00 00 00				.dword	$00000000
>158e	00 00					.byte	$00,$00
.1590	20 57 52	jsr $5257		jsr	FloatCompare
.1593	20 21 52	jsr $5221		jsr	CompareEqual
.1596	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1599	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -38.54231797
>159c	b3 aa 15 4d				.dword	$4d15aab3
>15a0	e7 80					.byte	$e7,$80
.15a2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -38.54231797
>15a5	b3 aa 15 4d				.dword	$4d15aab3
>15a9	e7 80					.byte	$e7,$80
.15ab	20 57 52	jsr $5257		jsr	FloatCompare
.15ae	20 4f 52	jsr $524f		jsr	CompareGreaterEqual
.15b1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>15b4	01 00 00 00				.dword	$00000001
>15b8	00 80					.byte	$00,$80
.15ba	20 57 52	jsr $5257		jsr	FloatCompare
.15bd	20 21 52	jsr $5221		jsr	CompareEqual
.15c0	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.15c3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -38.54231797
>15c6	b3 aa 15 4d				.dword	$4d15aab3
>15ca	e7 80					.byte	$e7,$80
.15cc	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -38.54231797
>15cf	b3 aa 15 4d				.dword	$4d15aab3
>15d3	e7 80					.byte	$e7,$80
.15d5	20 57 52	jsr $5257		jsr	FloatCompare
.15d8	20 37 52	jsr $5237		jsr	CompareLess
.15db	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>15de	00 00 00 00				.dword	$00000000
>15e2	00 00					.byte	$00,$00
.15e4	20 57 52	jsr $5257		jsr	FloatCompare
.15e7	20 21 52	jsr $5221		jsr	CompareEqual
.15ea	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.15ed	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -38.54231797
>15f0	b3 aa 15 4d				.dword	$4d15aab3
>15f4	e7 80					.byte	$e7,$80
.15f6	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -38.54231797
>15f9	b3 aa 15 4d				.dword	$4d15aab3
>15fd	e7 80					.byte	$e7,$80
.15ff	20 57 52	jsr $5257		jsr	FloatCompare
.1602	20 47 52	jsr $5247		jsr	CompareLessEqual
.1605	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>1608	01 00 00 00				.dword	$00000001
>160c	00 80					.byte	$00,$80
.160e	20 57 52	jsr $5257		jsr	FloatCompare
.1611	20 21 52	jsr $5221		jsr	CompareEqual
.1614	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1617	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -38.54231797
>161a	b3 aa 15 4d				.dword	$4d15aab3
>161e	e7 80					.byte	$e7,$80
.1620	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -38.54231797
>1623	b3 aa 15 4d				.dword	$4d15aab3
>1627	e7 80					.byte	$e7,$80
.1629	20 57 52	jsr $5257		jsr	FloatCompare
.162c	20 21 52	jsr $5221		jsr	CompareEqual
.162f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>1632	01 00 00 00				.dword	$00000001
>1636	00 80					.byte	$00,$80
.1638	20 57 52	jsr $5257		jsr	FloatCompare
.163b	20 21 52	jsr $5221		jsr	CompareEqual
.163e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1641	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -38.54231797
>1644	b3 aa 15 4d				.dword	$4d15aab3
>1648	e7 80					.byte	$e7,$80
.164a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -38.54231797
>164d	b3 aa 15 4d				.dword	$4d15aab3
>1651	e7 80					.byte	$e7,$80
.1653	20 57 52	jsr $5257		jsr	FloatCompare
.1656	20 31 52	jsr $5231		jsr	CompareNotEqual
.1659	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>165c	00 00 00 00				.dword	$00000000
>1660	00 00					.byte	$00,$00
.1662	20 57 52	jsr $5257		jsr	FloatCompare
.1665	20 21 52	jsr $5221		jsr	CompareEqual
.1668	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.166b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -32529
>166e	11 7f 00 00				.dword	$00007f11
>1672	00 80					.byte	$00,$80
.1674	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -24864
>1677	20 61 00 00				.dword	$00006120
>167b	00 80					.byte	$00,$80
.167d	20 96 51	jsr $5196		jsr	FloatAdd
.1680	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -57393
>1683	31 e0 00 00				.dword	$0000e031
>1687	00 80					.byte	$00,$80
.1689	20 57 52	jsr $5257		jsr	FloatCompare
.168c	20 21 52	jsr $5221		jsr	CompareEqual
.168f	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1692	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -32529
>1695	11 7f 00 00				.dword	$00007f11
>1699	00 80					.byte	$00,$80
.169b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -24864
>169e	20 61 00 00				.dword	$00006120
>16a2	00 80					.byte	$00,$80
.16a4	20 90 51	jsr $5190		jsr	FloatSubtract
.16a7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -7665
>16aa	f1 1d 00 00				.dword	$00001df1
>16ae	00 80					.byte	$00,$80
.16b0	20 57 52	jsr $5257		jsr	FloatCompare
.16b3	20 21 52	jsr $5221		jsr	CompareEqual
.16b6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.16b9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -32529
>16bc	11 7f 00 00				.dword	$00007f11
>16c0	00 80					.byte	$00,$80
.16c2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -24864
>16c5	20 61 00 00				.dword	$00006120
>16c9	00 80					.byte	$00,$80
.16cb	20 32 54	jsr $5432		jsr	FloatMultiply
.16ce	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 808801056
>16d1	20 53 35 30				.dword	$30355320
>16d5	00 00					.byte	$00,$00
.16d7	20 57 52	jsr $5257		jsr	FloatCompare
.16da	20 21 52	jsr $5221		jsr	CompareEqual
.16dd	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.16e0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -32529
>16e3	11 7f 00 00				.dword	$00007f11
>16e7	00 80					.byte	$00,$80
.16e9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -24864
>16ec	20 61 00 00				.dword	$00006120
>16f0	00 80					.byte	$00,$80
.16f2	20 bb 52	jsr $52bb		jsr	FloatDivide
.16f5	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 1.30827703
>16f8	94 cf ba 53				.dword	$53bacf94
>16fc	e2 00					.byte	$e2,$00
.16fe	20 57 52	jsr $5257		jsr	FloatCompare
.1701	20 21 52	jsr $5221		jsr	CompareEqual
.1704	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1707	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -24864
>170a	20 61 00 00				.dword	$00006120
>170e	00 80					.byte	$00,$80
.1710	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -24864
>1713	20 61 00 00				.dword	$00006120
>1717	00 80					.byte	$00,$80
.1719	20 57 52	jsr $5257		jsr	FloatCompare
.171c	20 21 52	jsr $5221		jsr	CompareEqual
.171f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>1722	01 00 00 00				.dword	$00000001
>1726	00 80					.byte	$00,$80
.1728	20 57 52	jsr $5257		jsr	FloatCompare
.172b	20 21 52	jsr $5221		jsr	CompareEqual
.172e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1731	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -24864
>1734	20 61 00 00				.dword	$00006120
>1738	00 80					.byte	$00,$80
.173a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -24864
>173d	20 61 00 00				.dword	$00006120
>1741	00 80					.byte	$00,$80
.1743	20 57 52	jsr $5257		jsr	FloatCompare
.1746	20 31 52	jsr $5231		jsr	CompareNotEqual
.1749	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>174c	00 00 00 00				.dword	$00000000
>1750	00 00					.byte	$00,$00
.1752	20 57 52	jsr $5257		jsr	FloatCompare
.1755	20 21 52	jsr $5221		jsr	CompareEqual
.1758	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.175b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -24864
>175e	20 61 00 00				.dword	$00006120
>1762	00 80					.byte	$00,$80
.1764	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -24864
>1767	20 61 00 00				.dword	$00006120
>176b	00 80					.byte	$00,$80
.176d	20 57 52	jsr $5257		jsr	FloatCompare
.1770	20 3f 52	jsr $523f		jsr	CompareGreater
.1773	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>1776	00 00 00 00				.dword	$00000000
>177a	00 00					.byte	$00,$00
.177c	20 57 52	jsr $5257		jsr	FloatCompare
.177f	20 21 52	jsr $5221		jsr	CompareEqual
.1782	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1785	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -24864
>1788	20 61 00 00				.dword	$00006120
>178c	00 80					.byte	$00,$80
.178e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -24864
>1791	20 61 00 00				.dword	$00006120
>1795	00 80					.byte	$00,$80
.1797	20 57 52	jsr $5257		jsr	FloatCompare
.179a	20 4f 52	jsr $524f		jsr	CompareGreaterEqual
.179d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>17a0	01 00 00 00				.dword	$00000001
>17a4	00 80					.byte	$00,$80
.17a6	20 57 52	jsr $5257		jsr	FloatCompare
.17a9	20 21 52	jsr $5221		jsr	CompareEqual
.17ac	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.17af	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -24864
>17b2	20 61 00 00				.dword	$00006120
>17b6	00 80					.byte	$00,$80
.17b8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -24864
>17bb	20 61 00 00				.dword	$00006120
>17bf	00 80					.byte	$00,$80
.17c1	20 57 52	jsr $5257		jsr	FloatCompare
.17c4	20 37 52	jsr $5237		jsr	CompareLess
.17c7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>17ca	00 00 00 00				.dword	$00000000
>17ce	00 00					.byte	$00,$00
.17d0	20 57 52	jsr $5257		jsr	FloatCompare
.17d3	20 21 52	jsr $5221		jsr	CompareEqual
.17d6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.17d9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -24864
>17dc	20 61 00 00				.dword	$00006120
>17e0	00 80					.byte	$00,$80
.17e2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -24864
>17e5	20 61 00 00				.dword	$00006120
>17e9	00 80					.byte	$00,$80
.17eb	20 57 52	jsr $5257		jsr	FloatCompare
.17ee	20 47 52	jsr $5247		jsr	CompareLessEqual
.17f1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>17f4	01 00 00 00				.dword	$00000001
>17f8	00 80					.byte	$00,$80
.17fa	20 57 52	jsr $5257		jsr	FloatCompare
.17fd	20 21 52	jsr $5221		jsr	CompareEqual
.1800	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1803	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -10.13995303
>1806	b2 9f 1e 51				.dword	$511e9fb2
>180a	e5 80					.byte	$e5,$80
.180c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -45.19697092
>180f	5f d9 64 5a				.dword	$5a64d95f
>1813	e7 80					.byte	$e7,$80
.1815	20 96 51	jsr $5196		jsr	FloatAdd
.1818	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -55.33692395
>181b	4c 81 ac 6e				.dword	$6eac814c
>181f	e7 80					.byte	$e7,$80
.1821	20 57 52	jsr $5257		jsr	FloatCompare
.1824	20 21 52	jsr $5221		jsr	CompareEqual
.1827	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.182a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -10.13995303
>182d	b2 9f 1e 51				.dword	$511e9fb2
>1831	e5 80					.byte	$e5,$80
.1833	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -45.19697092
>1836	5f d9 64 5a				.dword	$5a64d95f
>183a	e7 80					.byte	$e7,$80
.183c	20 90 51	jsr $5190		jsr	FloatSubtract
.183f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 35.0570179
>1842	73 31 1d 46				.dword	$461d3173
>1846	e7 00					.byte	$e7,$00
.1848	20 57 52	jsr $5257		jsr	FloatCompare
.184b	20 21 52	jsr $5221		jsr	CompareEqual
.184e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1851	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -10.13995303
>1854	b2 9f 1e 51				.dword	$511e9fb2
>1858	e5 80					.byte	$e5,$80
.185a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -45.19697092
>185d	5f d9 64 5a				.dword	$5a64d95f
>1861	e7 80					.byte	$e7,$80
.1863	20 32 54	jsr $5432		jsr	FloatMultiply
.1866	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 458.29516204
>1869	ef e3 92 72				.dword	$7292e3ef
>186d	ea 00					.byte	$ea,$00
.186f	20 57 52	jsr $5257		jsr	FloatCompare
.1872	20 21 52	jsr $5221		jsr	CompareEqual
.1875	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1878	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -10.13995303
>187b	b2 9f 1e 51				.dword	$511e9fb2
>187f	e5 80					.byte	$e5,$80
.1881	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -45.19697092
>1884	5f d9 64 5a				.dword	$5a64d95f
>1888	e7 80					.byte	$e7,$80
.188a	20 bb 52	jsr $52bb		jsr	FloatDivide
.188d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0.22435028
>1890	37 0a de 72				.dword	$72de0a37
>1894	df 00					.byte	$df,$00
.1896	20 57 52	jsr $5257		jsr	FloatCompare
.1899	20 21 52	jsr $5221		jsr	CompareEqual
.189c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.189f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 51.44812505
>18a2	a6 70 e5 66				.dword	$66e570a6
>18a6	e7 00					.byte	$e7,$00
.18a8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 51.44812505
>18ab	a6 70 e5 66				.dword	$66e570a6
>18af	e7 00					.byte	$e7,$00
.18b1	20 57 52	jsr $5257		jsr	FloatCompare
.18b4	20 3f 52	jsr $523f		jsr	CompareGreater
.18b7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>18ba	00 00 00 00				.dword	$00000000
>18be	00 00					.byte	$00,$00
.18c0	20 57 52	jsr $5257		jsr	FloatCompare
.18c3	20 21 52	jsr $5221		jsr	CompareEqual
.18c6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.18c9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 51.44812505
>18cc	a6 70 e5 66				.dword	$66e570a6
>18d0	e7 00					.byte	$e7,$00
.18d2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 51.44812505
>18d5	a6 70 e5 66				.dword	$66e570a6
>18d9	e7 00					.byte	$e7,$00
.18db	20 57 52	jsr $5257		jsr	FloatCompare
.18de	20 4f 52	jsr $524f		jsr	CompareGreaterEqual
.18e1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>18e4	01 00 00 00				.dword	$00000001
>18e8	00 80					.byte	$00,$80
.18ea	20 57 52	jsr $5257		jsr	FloatCompare
.18ed	20 21 52	jsr $5221		jsr	CompareEqual
.18f0	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.18f3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 51.44812505
>18f6	a6 70 e5 66				.dword	$66e570a6
>18fa	e7 00					.byte	$e7,$00
.18fc	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 51.44812505
>18ff	a6 70 e5 66				.dword	$66e570a6
>1903	e7 00					.byte	$e7,$00
.1905	20 57 52	jsr $5257		jsr	FloatCompare
.1908	20 37 52	jsr $5237		jsr	CompareLess
.190b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>190e	00 00 00 00				.dword	$00000000
>1912	00 00					.byte	$00,$00
.1914	20 57 52	jsr $5257		jsr	FloatCompare
.1917	20 21 52	jsr $5221		jsr	CompareEqual
.191a	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.191d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 51.44812505
>1920	a6 70 e5 66				.dword	$66e570a6
>1924	e7 00					.byte	$e7,$00
.1926	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 51.44812505
>1929	a6 70 e5 66				.dword	$66e570a6
>192d	e7 00					.byte	$e7,$00
.192f	20 57 52	jsr $5257		jsr	FloatCompare
.1932	20 47 52	jsr $5247		jsr	CompareLessEqual
.1935	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>1938	01 00 00 00				.dword	$00000001
>193c	00 80					.byte	$00,$80
.193e	20 57 52	jsr $5257		jsr	FloatCompare
.1941	20 21 52	jsr $5221		jsr	CompareEqual
.1944	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1947	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 51.44812505
>194a	a6 70 e5 66				.dword	$66e570a6
>194e	e7 00					.byte	$e7,$00
.1950	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 51.44812505
>1953	a6 70 e5 66				.dword	$66e570a6
>1957	e7 00					.byte	$e7,$00
.1959	20 57 52	jsr $5257		jsr	FloatCompare
.195c	20 21 52	jsr $5221		jsr	CompareEqual
.195f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>1962	01 00 00 00				.dword	$00000001
>1966	00 80					.byte	$00,$80
.1968	20 57 52	jsr $5257		jsr	FloatCompare
.196b	20 21 52	jsr $5221		jsr	CompareEqual
.196e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1971	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 51.44812505
>1974	a6 70 e5 66				.dword	$66e570a6
>1978	e7 00					.byte	$e7,$00
.197a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 51.44812505
>197d	a6 70 e5 66				.dword	$66e570a6
>1981	e7 00					.byte	$e7,$00
.1983	20 57 52	jsr $5257		jsr	FloatCompare
.1986	20 31 52	jsr $5231		jsr	CompareNotEqual
.1989	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>198c	00 00 00 00				.dword	$00000000
>1990	00 00					.byte	$00,$00
.1992	20 57 52	jsr $5257		jsr	FloatCompare
.1995	20 21 52	jsr $5221		jsr	CompareEqual
.1998	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.199b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 34547
>199e	f3 86 00 00				.dword	$000086f3
>19a2	00 00					.byte	$00,$00
.19a4	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 43744
>19a7	e0 aa 00 00				.dword	$0000aae0
>19ab	00 00					.byte	$00,$00
.19ad	20 96 51	jsr $5196		jsr	FloatAdd
.19b0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 78291
>19b3	d3 31 01 00				.dword	$000131d3
>19b7	00 00					.byte	$00,$00
.19b9	20 57 52	jsr $5257		jsr	FloatCompare
.19bc	20 21 52	jsr $5221		jsr	CompareEqual
.19bf	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.19c2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 34547
>19c5	f3 86 00 00				.dword	$000086f3
>19c9	00 00					.byte	$00,$00
.19cb	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 43744
>19ce	e0 aa 00 00				.dword	$0000aae0
>19d2	00 00					.byte	$00,$00
.19d4	20 90 51	jsr $5190		jsr	FloatSubtract
.19d7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -9197
>19da	ed 23 00 00				.dword	$000023ed
>19de	00 80					.byte	$00,$80
.19e0	20 57 52	jsr $5257		jsr	FloatCompare
.19e3	20 21 52	jsr $5221		jsr	CompareEqual
.19e6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.19e9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 34547
>19ec	f3 86 00 00				.dword	$000086f3
>19f0	00 00					.byte	$00,$00
.19f2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 43744
>19f5	e0 aa 00 00				.dword	$0000aae0
>19f9	00 00					.byte	$00,$00
.19fb	20 32 54	jsr $5432		jsr	FloatMultiply
.19fe	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 1511223968
>1a01	a0 72 13 5a				.dword	$5a1372a0
>1a05	00 00					.byte	$00,$00
.1a07	20 57 52	jsr $5257		jsr	FloatCompare
.1a0a	20 21 52	jsr $5221		jsr	CompareEqual
.1a0d	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1a10	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 34547
>1a13	f3 86 00 00				.dword	$000086f3
>1a17	00 00					.byte	$00,$00
.1a19	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 43744
>1a1c	e0 aa 00 00				.dword	$0000aae0
>1a20	00 00					.byte	$00,$00
.1a22	20 bb 52	jsr $52bb		jsr	FloatDivide
.1a25	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0.78975402
>1a28	e4 a8 16 65				.dword	$6516a8e4
>1a2c	e1 00					.byte	$e1,$00
.1a2e	20 57 52	jsr $5257		jsr	FloatCompare
.1a31	20 21 52	jsr $5221		jsr	CompareEqual
.1a34	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1a37	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 43744
>1a3a	e0 aa 00 00				.dword	$0000aae0
>1a3e	00 00					.byte	$00,$00
.1a40	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 43744
>1a43	e0 aa 00 00				.dword	$0000aae0
>1a47	00 00					.byte	$00,$00
.1a49	20 57 52	jsr $5257		jsr	FloatCompare
.1a4c	20 21 52	jsr $5221		jsr	CompareEqual
.1a4f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>1a52	01 00 00 00				.dword	$00000001
>1a56	00 80					.byte	$00,$80
.1a58	20 57 52	jsr $5257		jsr	FloatCompare
.1a5b	20 21 52	jsr $5221		jsr	CompareEqual
.1a5e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1a61	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 43744
>1a64	e0 aa 00 00				.dword	$0000aae0
>1a68	00 00					.byte	$00,$00
.1a6a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 43744
>1a6d	e0 aa 00 00				.dword	$0000aae0
>1a71	00 00					.byte	$00,$00
.1a73	20 57 52	jsr $5257		jsr	FloatCompare
.1a76	20 31 52	jsr $5231		jsr	CompareNotEqual
.1a79	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>1a7c	00 00 00 00				.dword	$00000000
>1a80	00 00					.byte	$00,$00
.1a82	20 57 52	jsr $5257		jsr	FloatCompare
.1a85	20 21 52	jsr $5221		jsr	CompareEqual
.1a88	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1a8b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 43744
>1a8e	e0 aa 00 00				.dword	$0000aae0
>1a92	00 00					.byte	$00,$00
.1a94	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 43744
>1a97	e0 aa 00 00				.dword	$0000aae0
>1a9b	00 00					.byte	$00,$00
.1a9d	20 57 52	jsr $5257		jsr	FloatCompare
.1aa0	20 3f 52	jsr $523f		jsr	CompareGreater
.1aa3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>1aa6	00 00 00 00				.dword	$00000000
>1aaa	00 00					.byte	$00,$00
.1aac	20 57 52	jsr $5257		jsr	FloatCompare
.1aaf	20 21 52	jsr $5221		jsr	CompareEqual
.1ab2	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1ab5	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 43744
>1ab8	e0 aa 00 00				.dword	$0000aae0
>1abc	00 00					.byte	$00,$00
.1abe	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 43744
>1ac1	e0 aa 00 00				.dword	$0000aae0
>1ac5	00 00					.byte	$00,$00
.1ac7	20 57 52	jsr $5257		jsr	FloatCompare
.1aca	20 4f 52	jsr $524f		jsr	CompareGreaterEqual
.1acd	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>1ad0	01 00 00 00				.dword	$00000001
>1ad4	00 80					.byte	$00,$80
.1ad6	20 57 52	jsr $5257		jsr	FloatCompare
.1ad9	20 21 52	jsr $5221		jsr	CompareEqual
.1adc	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1adf	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 43744
>1ae2	e0 aa 00 00				.dword	$0000aae0
>1ae6	00 00					.byte	$00,$00
.1ae8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 43744
>1aeb	e0 aa 00 00				.dword	$0000aae0
>1aef	00 00					.byte	$00,$00
.1af1	20 57 52	jsr $5257		jsr	FloatCompare
.1af4	20 37 52	jsr $5237		jsr	CompareLess
.1af7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>1afa	00 00 00 00				.dword	$00000000
>1afe	00 00					.byte	$00,$00
.1b00	20 57 52	jsr $5257		jsr	FloatCompare
.1b03	20 21 52	jsr $5221		jsr	CompareEqual
.1b06	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1b09	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 43744
>1b0c	e0 aa 00 00				.dword	$0000aae0
>1b10	00 00					.byte	$00,$00
.1b12	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 43744
>1b15	e0 aa 00 00				.dword	$0000aae0
>1b19	00 00					.byte	$00,$00
.1b1b	20 57 52	jsr $5257		jsr	FloatCompare
.1b1e	20 47 52	jsr $5247		jsr	CompareLessEqual
.1b21	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>1b24	01 00 00 00				.dword	$00000001
>1b28	00 80					.byte	$00,$80
.1b2a	20 57 52	jsr $5257		jsr	FloatCompare
.1b2d	20 21 52	jsr $5221		jsr	CompareEqual
.1b30	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1b33	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 17.2635458
>1b36	f3 de 0d 45				.dword	$450ddef3
>1b3a	e6 00					.byte	$e6,$00
.1b3c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 47.62646797
>1b3f	69 c0 40 5f				.dword	$5f40c069
>1b43	e7 00					.byte	$e7,$00
.1b45	20 96 51	jsr $5196		jsr	FloatAdd
.1b48	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 64.89001377
>1b4b	f1 d7 e3 40				.dword	$40e3d7f1
>1b4f	e8 00					.byte	$e8,$00
.1b51	20 57 52	jsr $5257		jsr	FloatCompare
.1b54	20 21 52	jsr $5221		jsr	CompareEqual
.1b57	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1b5a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 17.2635458
>1b5d	f3 de 0d 45				.dword	$450ddef3
>1b61	e6 00					.byte	$e6,$00
.1b63	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 47.62646797
>1b66	69 c0 40 5f				.dword	$5f40c069
>1b6a	e7 00					.byte	$e7,$00
.1b6c	20 90 51	jsr $5190		jsr	FloatSubtract
.1b6f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -30.36292217
>1b72	df a1 73 79				.dword	$7973a1df
>1b76	e6 80					.byte	$e6,$80
.1b78	20 57 52	jsr $5257		jsr	FloatCompare
.1b7b	20 21 52	jsr $5221		jsr	CompareEqual
.1b7e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1b81	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 17.2635458
>1b84	f3 de 0d 45				.dword	$450ddef3
>1b88	e6 00					.byte	$e6,$00
.1b8a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 47.62646797
>1b8d	69 c0 40 5f				.dword	$5f40c069
>1b91	e7 00					.byte	$e7,$00
.1b93	20 32 54	jsr $5432		jsr	FloatMultiply
.1b96	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 822.20171109
>1b99	6b 74 c6 66				.dword	$66c6746b
>1b9d	eb 00					.byte	$eb,$00
.1b9f	20 57 52	jsr $5257		jsr	FloatCompare
.1ba2	20 21 52	jsr $5221		jsr	CompareEqual
.1ba5	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1ba8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 17.2635458
>1bab	f3 de 0d 45				.dword	$450ddef3
>1baf	e6 00					.byte	$e6,$00
.1bb1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 47.62646797
>1bb4	69 c0 40 5f				.dword	$5f40c069
>1bb8	e7 00					.byte	$e7,$00
.1bba	20 bb 52	jsr $52bb		jsr	FloatDivide
.1bbd	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0.36247798
>1bc0	5e 5b cb 5c				.dword	$5ccb5b5e
>1bc4	e0 00					.byte	$e0,$00
.1bc6	20 57 52	jsr $5257		jsr	FloatCompare
.1bc9	20 21 52	jsr $5221		jsr	CompareEqual
.1bcc	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1bcf	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 42.38681461
>1bd2	91 0c c6 54				.dword	$54c60c91
>1bd6	e7 00					.byte	$e7,$00
.1bd8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 42.38681461
>1bdb	91 0c c6 54				.dword	$54c60c91
>1bdf	e7 00					.byte	$e7,$00
.1be1	20 57 52	jsr $5257		jsr	FloatCompare
.1be4	20 3f 52	jsr $523f		jsr	CompareGreater
.1be7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>1bea	00 00 00 00				.dword	$00000000
>1bee	00 00					.byte	$00,$00
.1bf0	20 57 52	jsr $5257		jsr	FloatCompare
.1bf3	20 21 52	jsr $5221		jsr	CompareEqual
.1bf6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1bf9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 42.38681461
>1bfc	91 0c c6 54				.dword	$54c60c91
>1c00	e7 00					.byte	$e7,$00
.1c02	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 42.38681461
>1c05	91 0c c6 54				.dword	$54c60c91
>1c09	e7 00					.byte	$e7,$00
.1c0b	20 57 52	jsr $5257		jsr	FloatCompare
.1c0e	20 4f 52	jsr $524f		jsr	CompareGreaterEqual
.1c11	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>1c14	01 00 00 00				.dword	$00000001
>1c18	00 80					.byte	$00,$80
.1c1a	20 57 52	jsr $5257		jsr	FloatCompare
.1c1d	20 21 52	jsr $5221		jsr	CompareEqual
.1c20	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1c23	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 42.38681461
>1c26	91 0c c6 54				.dword	$54c60c91
>1c2a	e7 00					.byte	$e7,$00
.1c2c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 42.38681461
>1c2f	91 0c c6 54				.dword	$54c60c91
>1c33	e7 00					.byte	$e7,$00
.1c35	20 57 52	jsr $5257		jsr	FloatCompare
.1c38	20 37 52	jsr $5237		jsr	CompareLess
.1c3b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>1c3e	00 00 00 00				.dword	$00000000
>1c42	00 00					.byte	$00,$00
.1c44	20 57 52	jsr $5257		jsr	FloatCompare
.1c47	20 21 52	jsr $5221		jsr	CompareEqual
.1c4a	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1c4d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 42.38681461
>1c50	91 0c c6 54				.dword	$54c60c91
>1c54	e7 00					.byte	$e7,$00
.1c56	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 42.38681461
>1c59	91 0c c6 54				.dword	$54c60c91
>1c5d	e7 00					.byte	$e7,$00
.1c5f	20 57 52	jsr $5257		jsr	FloatCompare
.1c62	20 47 52	jsr $5247		jsr	CompareLessEqual
.1c65	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>1c68	01 00 00 00				.dword	$00000001
>1c6c	00 80					.byte	$00,$80
.1c6e	20 57 52	jsr $5257		jsr	FloatCompare
.1c71	20 21 52	jsr $5221		jsr	CompareEqual
.1c74	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1c77	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 42.38681461
>1c7a	91 0c c6 54				.dword	$54c60c91
>1c7e	e7 00					.byte	$e7,$00
.1c80	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 42.38681461
>1c83	91 0c c6 54				.dword	$54c60c91
>1c87	e7 00					.byte	$e7,$00
.1c89	20 57 52	jsr $5257		jsr	FloatCompare
.1c8c	20 21 52	jsr $5221		jsr	CompareEqual
.1c8f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>1c92	01 00 00 00				.dword	$00000001
>1c96	00 80					.byte	$00,$80
.1c98	20 57 52	jsr $5257		jsr	FloatCompare
.1c9b	20 21 52	jsr $5221		jsr	CompareEqual
.1c9e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1ca1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 42.38681461
>1ca4	91 0c c6 54				.dword	$54c60c91
>1ca8	e7 00					.byte	$e7,$00
.1caa	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 42.38681461
>1cad	91 0c c6 54				.dword	$54c60c91
>1cb1	e7 00					.byte	$e7,$00
.1cb3	20 57 52	jsr $5257		jsr	FloatCompare
.1cb6	20 31 52	jsr $5231		jsr	CompareNotEqual
.1cb9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>1cbc	00 00 00 00				.dword	$00000000
>1cc0	00 00					.byte	$00,$00
.1cc2	20 57 52	jsr $5257		jsr	FloatCompare
.1cc5	20 21 52	jsr $5221		jsr	CompareEqual
.1cc8	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1ccb	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 24135
>1cce	47 5e 00 00				.dword	$00005e47
>1cd2	00 00					.byte	$00,$00
.1cd4	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -14574
>1cd7	ee 38 00 00				.dword	$000038ee
>1cdb	00 80					.byte	$00,$80
.1cdd	20 96 51	jsr $5196		jsr	FloatAdd
.1ce0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 9561
>1ce3	59 25 00 00				.dword	$00002559
>1ce7	00 00					.byte	$00,$00
.1ce9	20 57 52	jsr $5257		jsr	FloatCompare
.1cec	20 21 52	jsr $5221		jsr	CompareEqual
.1cef	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1cf2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 24135
>1cf5	47 5e 00 00				.dword	$00005e47
>1cf9	00 00					.byte	$00,$00
.1cfb	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -14574
>1cfe	ee 38 00 00				.dword	$000038ee
>1d02	00 80					.byte	$00,$80
.1d04	20 90 51	jsr $5190		jsr	FloatSubtract
.1d07	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 38709
>1d0a	35 97 00 00				.dword	$00009735
>1d0e	00 00					.byte	$00,$00
.1d10	20 57 52	jsr $5257		jsr	FloatCompare
.1d13	20 21 52	jsr $5221		jsr	CompareEqual
.1d16	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1d19	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 24135
>1d1c	47 5e 00 00				.dword	$00005e47
>1d20	00 00					.byte	$00,$00
.1d22	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -14574
>1d25	ee 38 00 00				.dword	$000038ee
>1d29	00 80					.byte	$00,$80
.1d2b	20 32 54	jsr $5432		jsr	FloatMultiply
.1d2e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -351743490
>1d31	02 2e f7 14				.dword	$14f72e02
>1d35	00 80					.byte	$00,$80
.1d37	20 57 52	jsr $5257		jsr	FloatCompare
.1d3a	20 21 52	jsr $5221		jsr	CompareEqual
.1d3d	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1d40	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 24135
>1d43	47 5e 00 00				.dword	$00005e47
>1d47	00 00					.byte	$00,$00
.1d49	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -14574
>1d4c	ee 38 00 00				.dword	$000038ee
>1d50	00 80					.byte	$00,$80
.1d52	20 bb 52	jsr $52bb		jsr	FloatDivide
.1d55	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1.65603129
>1d58	aa 6a fc 69				.dword	$69fc6aaa
>1d5c	e2 80					.byte	$e2,$80
.1d5e	20 57 52	jsr $5257		jsr	FloatCompare
.1d61	20 21 52	jsr $5221		jsr	CompareEqual
.1d64	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1d67	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -14574
>1d6a	ee 38 00 00				.dword	$000038ee
>1d6e	00 80					.byte	$00,$80
.1d70	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -14574
>1d73	ee 38 00 00				.dword	$000038ee
>1d77	00 80					.byte	$00,$80
.1d79	20 57 52	jsr $5257		jsr	FloatCompare
.1d7c	20 21 52	jsr $5221		jsr	CompareEqual
.1d7f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>1d82	01 00 00 00				.dword	$00000001
>1d86	00 80					.byte	$00,$80
.1d88	20 57 52	jsr $5257		jsr	FloatCompare
.1d8b	20 21 52	jsr $5221		jsr	CompareEqual
.1d8e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1d91	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -14574
>1d94	ee 38 00 00				.dword	$000038ee
>1d98	00 80					.byte	$00,$80
.1d9a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -14574
>1d9d	ee 38 00 00				.dword	$000038ee
>1da1	00 80					.byte	$00,$80
.1da3	20 57 52	jsr $5257		jsr	FloatCompare
.1da6	20 31 52	jsr $5231		jsr	CompareNotEqual
.1da9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>1dac	00 00 00 00				.dword	$00000000
>1db0	00 00					.byte	$00,$00
.1db2	20 57 52	jsr $5257		jsr	FloatCompare
.1db5	20 21 52	jsr $5221		jsr	CompareEqual
.1db8	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1dbb	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -14574
>1dbe	ee 38 00 00				.dword	$000038ee
>1dc2	00 80					.byte	$00,$80
.1dc4	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -14574
>1dc7	ee 38 00 00				.dword	$000038ee
>1dcb	00 80					.byte	$00,$80
.1dcd	20 57 52	jsr $5257		jsr	FloatCompare
.1dd0	20 3f 52	jsr $523f		jsr	CompareGreater
.1dd3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>1dd6	00 00 00 00				.dword	$00000000
>1dda	00 00					.byte	$00,$00
.1ddc	20 57 52	jsr $5257		jsr	FloatCompare
.1ddf	20 21 52	jsr $5221		jsr	CompareEqual
.1de2	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1de5	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -14574
>1de8	ee 38 00 00				.dword	$000038ee
>1dec	00 80					.byte	$00,$80
.1dee	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -14574
>1df1	ee 38 00 00				.dword	$000038ee
>1df5	00 80					.byte	$00,$80
.1df7	20 57 52	jsr $5257		jsr	FloatCompare
.1dfa	20 4f 52	jsr $524f		jsr	CompareGreaterEqual
.1dfd	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>1e00	01 00 00 00				.dword	$00000001
>1e04	00 80					.byte	$00,$80
.1e06	20 57 52	jsr $5257		jsr	FloatCompare
.1e09	20 21 52	jsr $5221		jsr	CompareEqual
.1e0c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1e0f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -14574
>1e12	ee 38 00 00				.dword	$000038ee
>1e16	00 80					.byte	$00,$80
.1e18	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -14574
>1e1b	ee 38 00 00				.dword	$000038ee
>1e1f	00 80					.byte	$00,$80
.1e21	20 57 52	jsr $5257		jsr	FloatCompare
.1e24	20 37 52	jsr $5237		jsr	CompareLess
.1e27	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>1e2a	00 00 00 00				.dword	$00000000
>1e2e	00 00					.byte	$00,$00
.1e30	20 57 52	jsr $5257		jsr	FloatCompare
.1e33	20 21 52	jsr $5221		jsr	CompareEqual
.1e36	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1e39	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -14574
>1e3c	ee 38 00 00				.dword	$000038ee
>1e40	00 80					.byte	$00,$80
.1e42	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -14574
>1e45	ee 38 00 00				.dword	$000038ee
>1e49	00 80					.byte	$00,$80
.1e4b	20 57 52	jsr $5257		jsr	FloatCompare
.1e4e	20 47 52	jsr $5247		jsr	CompareLessEqual
.1e51	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>1e54	01 00 00 00				.dword	$00000001
>1e58	00 80					.byte	$00,$80
.1e5a	20 57 52	jsr $5257		jsr	FloatCompare
.1e5d	20 21 52	jsr $5221		jsr	CompareEqual
.1e60	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1e63	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 76.89228153
>1e66	90 6c e4 4c				.dword	$4ce46c90
>1e6a	e8 00					.byte	$e8,$00
.1e6c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 71.98048109
>1e6f	cf 00 fb 47				.dword	$47fb00cf
>1e73	e8 00					.byte	$e8,$00
.1e75	20 96 51	jsr $5196		jsr	FloatAdd
.1e78	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 148.87276261
>1e7b	af b6 6f 4a				.dword	$4a6fb6af
>1e7f	e9 00					.byte	$e9,$00
.1e81	20 57 52	jsr $5257		jsr	FloatCompare
.1e84	20 21 52	jsr $5221		jsr	CompareEqual
.1e87	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1e8a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 76.89228153
>1e8d	90 6c e4 4c				.dword	$4ce46c90
>1e91	e8 00					.byte	$e8,$00
.1e93	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 71.98048109
>1e96	cf 00 fb 47				.dword	$47fb00cf
>1e9a	e8 00					.byte	$e8,$00
.1e9c	20 90 51	jsr $5190		jsr	FloatSubtract
.1e9f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 4.91180044
>1ea2	0f bc 96 4e				.dword	$4e96bc0f
>1ea6	e4 00					.byte	$e4,$00
.1ea8	20 57 52	jsr $5257		jsr	FloatCompare
.1eab	20 21 52	jsr $5221		jsr	CompareEqual
.1eae	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1eb1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 76.89228153
>1eb4	90 6c e4 4c				.dword	$4ce46c90
>1eb8	e8 00					.byte	$e8,$00
.1eba	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 71.98048109
>1ebd	cf 00 fb 47				.dword	$47fb00cf
>1ec1	e8 00					.byte	$e8,$00
.1ec3	20 32 54	jsr $5432		jsr	FloatMultiply
.1ec6	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 5534.74341623
>1ec9	42 f9 7a 56				.dword	$567af942
>1ecd	ee 00					.byte	$ee,$00
.1ecf	20 57 52	jsr $5257		jsr	FloatCompare
.1ed2	20 21 52	jsr $5221		jsr	CompareEqual
.1ed5	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1ed8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 76.89228153
>1edb	90 6c e4 4c				.dword	$4ce46c90
>1edf	e8 00					.byte	$e8,$00
.1ee1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 71.98048109
>1ee4	cf 00 fb 47				.dword	$47fb00cf
>1ee8	e8 00					.byte	$e8,$00
.1eea	20 bb 52	jsr $52bb		jsr	FloatDivide
.1eed	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 1.06823795
>1ef0	b5 02 5e 44				.dword	$445e02b5
>1ef4	e2 00					.byte	$e2,$00
.1ef6	20 57 52	jsr $5257		jsr	FloatCompare
.1ef9	20 21 52	jsr $5221		jsr	CompareEqual
.1efc	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1eff	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -16.34891067
>1f02	d7 48 65 41				.dword	$416548d7
>1f06	e6 80					.byte	$e6,$80
.1f08	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -40.06317324
>1f0b	3e 58 20 50				.dword	$5020583e
>1f0f	e7 80					.byte	$e7,$80
.1f11	20 57 52	jsr $5257		jsr	FloatCompare
.1f14	20 3f 52	jsr $523f		jsr	CompareGreater
.1f17	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>1f1a	01 00 00 00				.dword	$00000001
>1f1e	00 80					.byte	$00,$80
.1f20	20 57 52	jsr $5257		jsr	FloatCompare
.1f23	20 21 52	jsr $5221		jsr	CompareEqual
.1f26	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1f29	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -16.34891067
>1f2c	d7 48 65 41				.dword	$416548d7
>1f30	e6 80					.byte	$e6,$80
.1f32	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -40.06317324
>1f35	3e 58 20 50				.dword	$5020583e
>1f39	e7 80					.byte	$e7,$80
.1f3b	20 57 52	jsr $5257		jsr	FloatCompare
.1f3e	20 4f 52	jsr $524f		jsr	CompareGreaterEqual
.1f41	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>1f44	01 00 00 00				.dword	$00000001
>1f48	00 80					.byte	$00,$80
.1f4a	20 57 52	jsr $5257		jsr	FloatCompare
.1f4d	20 21 52	jsr $5221		jsr	CompareEqual
.1f50	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1f53	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -16.34891067
>1f56	d7 48 65 41				.dword	$416548d7
>1f5a	e6 80					.byte	$e6,$80
.1f5c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -40.06317324
>1f5f	3e 58 20 50				.dword	$5020583e
>1f63	e7 80					.byte	$e7,$80
.1f65	20 57 52	jsr $5257		jsr	FloatCompare
.1f68	20 37 52	jsr $5237		jsr	CompareLess
.1f6b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>1f6e	00 00 00 00				.dword	$00000000
>1f72	00 00					.byte	$00,$00
.1f74	20 57 52	jsr $5257		jsr	FloatCompare
.1f77	20 21 52	jsr $5221		jsr	CompareEqual
.1f7a	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1f7d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -16.34891067
>1f80	d7 48 65 41				.dword	$416548d7
>1f84	e6 80					.byte	$e6,$80
.1f86	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -40.06317324
>1f89	3e 58 20 50				.dword	$5020583e
>1f8d	e7 80					.byte	$e7,$80
.1f8f	20 57 52	jsr $5257		jsr	FloatCompare
.1f92	20 47 52	jsr $5247		jsr	CompareLessEqual
.1f95	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>1f98	00 00 00 00				.dword	$00000000
>1f9c	00 00					.byte	$00,$00
.1f9e	20 57 52	jsr $5257		jsr	FloatCompare
.1fa1	20 21 52	jsr $5221		jsr	CompareEqual
.1fa4	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1fa7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -16.34891067
>1faa	d7 48 65 41				.dword	$416548d7
>1fae	e6 80					.byte	$e6,$80
.1fb0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -40.06317324
>1fb3	3e 58 20 50				.dword	$5020583e
>1fb7	e7 80					.byte	$e7,$80
.1fb9	20 57 52	jsr $5257		jsr	FloatCompare
.1fbc	20 21 52	jsr $5221		jsr	CompareEqual
.1fbf	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>1fc2	00 00 00 00				.dword	$00000000
>1fc6	00 00					.byte	$00,$00
.1fc8	20 57 52	jsr $5257		jsr	FloatCompare
.1fcb	20 21 52	jsr $5221		jsr	CompareEqual
.1fce	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1fd1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -16.34891067
>1fd4	d7 48 65 41				.dword	$416548d7
>1fd8	e6 80					.byte	$e6,$80
.1fda	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -40.06317324
>1fdd	3e 58 20 50				.dword	$5020583e
>1fe1	e7 80					.byte	$e7,$80
.1fe3	20 57 52	jsr $5257		jsr	FloatCompare
.1fe6	20 31 52	jsr $5231		jsr	CompareNotEqual
.1fe9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>1fec	01 00 00 00				.dword	$00000001
>1ff0	00 80					.byte	$00,$80
.1ff2	20 57 52	jsr $5257		jsr	FloatCompare
.1ff5	20 21 52	jsr $5221		jsr	CompareEqual
.1ff8	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1ffb	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 12568
>1ffe	18 31 00 00				.dword	$00003118
>2002	00 00					.byte	$00,$00
.2004	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -34347
>2007	2b 86 00 00				.dword	$0000862b
>200b	00 80					.byte	$00,$80
.200d	20 96 51	jsr $5196		jsr	FloatAdd
.2010	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -21779
>2013	13 55 00 00				.dword	$00005513
>2017	00 80					.byte	$00,$80
.2019	20 57 52	jsr $5257		jsr	FloatCompare
.201c	20 21 52	jsr $5221		jsr	CompareEqual
.201f	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2022	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 12568
>2025	18 31 00 00				.dword	$00003118
>2029	00 00					.byte	$00,$00
.202b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -34347
>202e	2b 86 00 00				.dword	$0000862b
>2032	00 80					.byte	$00,$80
.2034	20 90 51	jsr $5190		jsr	FloatSubtract
.2037	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 46915
>203a	43 b7 00 00				.dword	$0000b743
>203e	00 00					.byte	$00,$00
.2040	20 57 52	jsr $5257		jsr	FloatCompare
.2043	20 21 52	jsr $5221		jsr	CompareEqual
.2046	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2049	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 12568
>204c	18 31 00 00				.dword	$00003118
>2050	00 00					.byte	$00,$00
.2052	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -34347
>2055	2b 86 00 00				.dword	$0000862b
>2059	00 80					.byte	$00,$80
.205b	20 32 54	jsr $5432		jsr	FloatMultiply
.205e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -431673096
>2061	08 cf ba 19				.dword	$19bacf08
>2065	00 80					.byte	$00,$80
.2067	20 57 52	jsr $5257		jsr	FloatCompare
.206a	20 21 52	jsr $5221		jsr	CompareEqual
.206d	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2070	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 12568
>2073	18 31 00 00				.dword	$00003118
>2077	00 00					.byte	$00,$00
.2079	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -34347
>207c	2b 86 00 00				.dword	$0000862b
>2080	00 80					.byte	$00,$80
.2082	20 bb 52	jsr $52bb		jsr	FloatDivide
.2085	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -0.3659126
>2088	ba 72 ac 5d				.dword	$5dac72ba
>208c	e0 80					.byte	$e0,$80
.208e	20 57 52	jsr $5257		jsr	FloatCompare
.2091	20 21 52	jsr $5221		jsr	CompareEqual
.2094	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2097	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -34347
>209a	2b 86 00 00				.dword	$0000862b
>209e	00 80					.byte	$00,$80
.20a0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -34347
>20a3	2b 86 00 00				.dword	$0000862b
>20a7	00 80					.byte	$00,$80
.20a9	20 57 52	jsr $5257		jsr	FloatCompare
.20ac	20 21 52	jsr $5221		jsr	CompareEqual
.20af	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>20b2	01 00 00 00				.dword	$00000001
>20b6	00 80					.byte	$00,$80
.20b8	20 57 52	jsr $5257		jsr	FloatCompare
.20bb	20 21 52	jsr $5221		jsr	CompareEqual
.20be	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.20c1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -34347
>20c4	2b 86 00 00				.dword	$0000862b
>20c8	00 80					.byte	$00,$80
.20ca	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -34347
>20cd	2b 86 00 00				.dword	$0000862b
>20d1	00 80					.byte	$00,$80
.20d3	20 57 52	jsr $5257		jsr	FloatCompare
.20d6	20 31 52	jsr $5231		jsr	CompareNotEqual
.20d9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>20dc	00 00 00 00				.dword	$00000000
>20e0	00 00					.byte	$00,$00
.20e2	20 57 52	jsr $5257		jsr	FloatCompare
.20e5	20 21 52	jsr $5221		jsr	CompareEqual
.20e8	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.20eb	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -34347
>20ee	2b 86 00 00				.dword	$0000862b
>20f2	00 80					.byte	$00,$80
.20f4	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -34347
>20f7	2b 86 00 00				.dword	$0000862b
>20fb	00 80					.byte	$00,$80
.20fd	20 57 52	jsr $5257		jsr	FloatCompare
.2100	20 3f 52	jsr $523f		jsr	CompareGreater
.2103	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>2106	00 00 00 00				.dword	$00000000
>210a	00 00					.byte	$00,$00
.210c	20 57 52	jsr $5257		jsr	FloatCompare
.210f	20 21 52	jsr $5221		jsr	CompareEqual
.2112	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2115	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -34347
>2118	2b 86 00 00				.dword	$0000862b
>211c	00 80					.byte	$00,$80
.211e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -34347
>2121	2b 86 00 00				.dword	$0000862b
>2125	00 80					.byte	$00,$80
.2127	20 57 52	jsr $5257		jsr	FloatCompare
.212a	20 4f 52	jsr $524f		jsr	CompareGreaterEqual
.212d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>2130	01 00 00 00				.dword	$00000001
>2134	00 80					.byte	$00,$80
.2136	20 57 52	jsr $5257		jsr	FloatCompare
.2139	20 21 52	jsr $5221		jsr	CompareEqual
.213c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.213f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -34347
>2142	2b 86 00 00				.dword	$0000862b
>2146	00 80					.byte	$00,$80
.2148	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -34347
>214b	2b 86 00 00				.dword	$0000862b
>214f	00 80					.byte	$00,$80
.2151	20 57 52	jsr $5257		jsr	FloatCompare
.2154	20 37 52	jsr $5237		jsr	CompareLess
.2157	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>215a	00 00 00 00				.dword	$00000000
>215e	00 00					.byte	$00,$00
.2160	20 57 52	jsr $5257		jsr	FloatCompare
.2163	20 21 52	jsr $5221		jsr	CompareEqual
.2166	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2169	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -34347
>216c	2b 86 00 00				.dword	$0000862b
>2170	00 80					.byte	$00,$80
.2172	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -34347
>2175	2b 86 00 00				.dword	$0000862b
>2179	00 80					.byte	$00,$80
.217b	20 57 52	jsr $5257		jsr	FloatCompare
.217e	20 47 52	jsr $5247		jsr	CompareLessEqual
.2181	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>2184	01 00 00 00				.dword	$00000001
>2188	00 80					.byte	$00,$80
.218a	20 57 52	jsr $5257		jsr	FloatCompare
.218d	20 21 52	jsr $5221		jsr	CompareEqual
.2190	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2193	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 10.46610513
>2196	54 95 ba 53				.dword	$53ba9554
>219a	e5 00					.byte	$e5,$00
.219c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 53.66218515
>219f	ef 09 53 6b				.dword	$6b5309ef
>21a3	e7 00					.byte	$e7,$00
.21a5	20 96 51	jsr $5196		jsr	FloatAdd
.21a8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 64.12829027
>21ab	a2 d7 20 40				.dword	$4020d7a2
>21af	e8 00					.byte	$e8,$00
.21b1	20 57 52	jsr $5257		jsr	FloatCompare
.21b4	20 21 52	jsr $5221		jsr	CompareEqual
.21b7	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.21ba	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 10.46610513
>21bd	54 95 ba 53				.dword	$53ba9554
>21c1	e5 00					.byte	$e5,$00
.21c3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 53.66218515
>21c6	ef 09 53 6b				.dword	$6b5309ef
>21ca	e7 00					.byte	$e7,$00
.21cc	20 90 51	jsr $5190		jsr	FloatSubtract
.21cf	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -43.19608002
>21d2	9a 64 64 56				.dword	$5664649a
>21d6	e7 80					.byte	$e7,$80
.21d8	20 57 52	jsr $5257		jsr	FloatCompare
.21db	20 21 52	jsr $5221		jsr	CompareEqual
.21de	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.21e1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 10.46610513
>21e4	54 95 ba 53				.dword	$53ba9554
>21e8	e5 00					.byte	$e5,$00
.21ea	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 53.66218515
>21ed	ef 09 53 6b				.dword	$6b5309ef
>21f1	e7 00					.byte	$e7,$00
.21f3	20 32 54	jsr $5432		jsr	FloatMultiply
.21f6	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 561.63407107
>21f9	4f 4a 34 46				.dword	$46344a4f
>21fd	eb 00					.byte	$eb,$00
.21ff	20 57 52	jsr $5257		jsr	FloatCompare
.2202	20 21 52	jsr $5221		jsr	CompareEqual
.2205	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2208	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 10.46610513
>220b	54 95 ba 53				.dword	$53ba9554
>220f	e5 00					.byte	$e5,$00
.2211	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 53.66218515
>2214	ef 09 53 6b				.dword	$6b5309ef
>2218	e7 00					.byte	$e7,$00
.221a	20 bb 52	jsr $52bb		jsr	FloatDivide
.221d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0.19503688
>2220	ba df db 63				.dword	$63dbdfba
>2224	df 00					.byte	$df,$00
.2226	20 57 52	jsr $5257		jsr	FloatCompare
.2229	20 21 52	jsr $5221		jsr	CompareEqual
.222c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.222f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -9.66186118
>2232	e0 7d 4b 4d				.dword	$4d4b7de0
>2236	e5 80					.byte	$e5,$80
.2238	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -9.66186118
>223b	e0 7d 4b 4d				.dword	$4d4b7de0
>223f	e5 80					.byte	$e5,$80
.2241	20 57 52	jsr $5257		jsr	FloatCompare
.2244	20 3f 52	jsr $523f		jsr	CompareGreater
.2247	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>224a	00 00 00 00				.dword	$00000000
>224e	00 00					.byte	$00,$00
.2250	20 57 52	jsr $5257		jsr	FloatCompare
.2253	20 21 52	jsr $5221		jsr	CompareEqual
.2256	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2259	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -9.66186118
>225c	e0 7d 4b 4d				.dword	$4d4b7de0
>2260	e5 80					.byte	$e5,$80
.2262	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -9.66186118
>2265	e0 7d 4b 4d				.dword	$4d4b7de0
>2269	e5 80					.byte	$e5,$80
.226b	20 57 52	jsr $5257		jsr	FloatCompare
.226e	20 4f 52	jsr $524f		jsr	CompareGreaterEqual
.2271	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>2274	01 00 00 00				.dword	$00000001
>2278	00 80					.byte	$00,$80
.227a	20 57 52	jsr $5257		jsr	FloatCompare
.227d	20 21 52	jsr $5221		jsr	CompareEqual
.2280	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2283	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -9.66186118
>2286	e0 7d 4b 4d				.dword	$4d4b7de0
>228a	e5 80					.byte	$e5,$80
.228c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -9.66186118
>228f	e0 7d 4b 4d				.dword	$4d4b7de0
>2293	e5 80					.byte	$e5,$80
.2295	20 57 52	jsr $5257		jsr	FloatCompare
.2298	20 37 52	jsr $5237		jsr	CompareLess
.229b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>229e	00 00 00 00				.dword	$00000000
>22a2	00 00					.byte	$00,$00
.22a4	20 57 52	jsr $5257		jsr	FloatCompare
.22a7	20 21 52	jsr $5221		jsr	CompareEqual
.22aa	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.22ad	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -9.66186118
>22b0	e0 7d 4b 4d				.dword	$4d4b7de0
>22b4	e5 80					.byte	$e5,$80
.22b6	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -9.66186118
>22b9	e0 7d 4b 4d				.dword	$4d4b7de0
>22bd	e5 80					.byte	$e5,$80
.22bf	20 57 52	jsr $5257		jsr	FloatCompare
.22c2	20 47 52	jsr $5247		jsr	CompareLessEqual
.22c5	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>22c8	01 00 00 00				.dword	$00000001
>22cc	00 80					.byte	$00,$80
.22ce	20 57 52	jsr $5257		jsr	FloatCompare
.22d1	20 21 52	jsr $5221		jsr	CompareEqual
.22d4	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.22d7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -9.66186118
>22da	e0 7d 4b 4d				.dword	$4d4b7de0
>22de	e5 80					.byte	$e5,$80
.22e0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -9.66186118
>22e3	e0 7d 4b 4d				.dword	$4d4b7de0
>22e7	e5 80					.byte	$e5,$80
.22e9	20 57 52	jsr $5257		jsr	FloatCompare
.22ec	20 21 52	jsr $5221		jsr	CompareEqual
.22ef	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>22f2	01 00 00 00				.dword	$00000001
>22f6	00 80					.byte	$00,$80
.22f8	20 57 52	jsr $5257		jsr	FloatCompare
.22fb	20 21 52	jsr $5221		jsr	CompareEqual
.22fe	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2301	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -9.66186118
>2304	e0 7d 4b 4d				.dword	$4d4b7de0
>2308	e5 80					.byte	$e5,$80
.230a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -9.66186118
>230d	e0 7d 4b 4d				.dword	$4d4b7de0
>2311	e5 80					.byte	$e5,$80
.2313	20 57 52	jsr $5257		jsr	FloatCompare
.2316	20 31 52	jsr $5231		jsr	CompareNotEqual
.2319	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>231c	00 00 00 00				.dword	$00000000
>2320	00 00					.byte	$00,$00
.2322	20 57 52	jsr $5257		jsr	FloatCompare
.2325	20 21 52	jsr $5221		jsr	CompareEqual
.2328	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.232b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -44005
>232e	e5 ab 00 00				.dword	$0000abe5
>2332	00 80					.byte	$00,$80
.2334	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -29575
>2337	87 73 00 00				.dword	$00007387
>233b	00 80					.byte	$00,$80
.233d	20 96 51	jsr $5196		jsr	FloatAdd
.2340	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -73580
>2343	6c 1f 01 00				.dword	$00011f6c
>2347	00 80					.byte	$00,$80
.2349	20 57 52	jsr $5257		jsr	FloatCompare
.234c	20 21 52	jsr $5221		jsr	CompareEqual
.234f	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2352	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -44005
>2355	e5 ab 00 00				.dword	$0000abe5
>2359	00 80					.byte	$00,$80
.235b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -29575
>235e	87 73 00 00				.dword	$00007387
>2362	00 80					.byte	$00,$80
.2364	20 90 51	jsr $5190		jsr	FloatSubtract
.2367	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -14430
>236a	5e 38 00 00				.dword	$0000385e
>236e	00 80					.byte	$00,$80
.2370	20 57 52	jsr $5257		jsr	FloatCompare
.2373	20 21 52	jsr $5221		jsr	CompareEqual
.2376	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2379	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -44005
>237c	e5 ab 00 00				.dword	$0000abe5
>2380	00 80					.byte	$00,$80
.2382	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -29575
>2385	87 73 00 00				.dword	$00007387
>2389	00 80					.byte	$00,$80
.238b	20 32 54	jsr $5432		jsr	FloatMultiply
.238e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 1301447875
>2391	c3 84 92 4d				.dword	$4d9284c3
>2395	00 00					.byte	$00,$00
.2397	20 57 52	jsr $5257		jsr	FloatCompare
.239a	20 21 52	jsr $5221		jsr	CompareEqual
.239d	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.23a0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -44005
>23a3	e5 ab 00 00				.dword	$0000abe5
>23a7	00 80					.byte	$00,$80
.23a9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -29575
>23ac	87 73 00 00				.dword	$00007387
>23b0	00 80					.byte	$00,$80
.23b2	20 bb 52	jsr $52bb		jsr	FloatDivide
.23b5	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 1.48791209
>23b8	a1 f3 39 5f				.dword	$5f39f3a1
>23bc	e2 00					.byte	$e2,$00
.23be	20 57 52	jsr $5257		jsr	FloatCompare
.23c1	20 21 52	jsr $5221		jsr	CompareEqual
.23c4	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.23c7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -29575
>23ca	87 73 00 00				.dword	$00007387
>23ce	00 80					.byte	$00,$80
.23d0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -29575
>23d3	87 73 00 00				.dword	$00007387
>23d7	00 80					.byte	$00,$80
.23d9	20 57 52	jsr $5257		jsr	FloatCompare
.23dc	20 21 52	jsr $5221		jsr	CompareEqual
.23df	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>23e2	01 00 00 00				.dword	$00000001
>23e6	00 80					.byte	$00,$80
.23e8	20 57 52	jsr $5257		jsr	FloatCompare
.23eb	20 21 52	jsr $5221		jsr	CompareEqual
.23ee	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.23f1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -29575
>23f4	87 73 00 00				.dword	$00007387
>23f8	00 80					.byte	$00,$80
.23fa	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -29575
>23fd	87 73 00 00				.dword	$00007387
>2401	00 80					.byte	$00,$80
.2403	20 57 52	jsr $5257		jsr	FloatCompare
.2406	20 31 52	jsr $5231		jsr	CompareNotEqual
.2409	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>240c	00 00 00 00				.dword	$00000000
>2410	00 00					.byte	$00,$00
.2412	20 57 52	jsr $5257		jsr	FloatCompare
.2415	20 21 52	jsr $5221		jsr	CompareEqual
.2418	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.241b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -29575
>241e	87 73 00 00				.dword	$00007387
>2422	00 80					.byte	$00,$80
.2424	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -29575
>2427	87 73 00 00				.dword	$00007387
>242b	00 80					.byte	$00,$80
.242d	20 57 52	jsr $5257		jsr	FloatCompare
.2430	20 3f 52	jsr $523f		jsr	CompareGreater
.2433	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>2436	00 00 00 00				.dword	$00000000
>243a	00 00					.byte	$00,$00
.243c	20 57 52	jsr $5257		jsr	FloatCompare
.243f	20 21 52	jsr $5221		jsr	CompareEqual
.2442	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2445	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -29575
>2448	87 73 00 00				.dword	$00007387
>244c	00 80					.byte	$00,$80
.244e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -29575
>2451	87 73 00 00				.dword	$00007387
>2455	00 80					.byte	$00,$80
.2457	20 57 52	jsr $5257		jsr	FloatCompare
.245a	20 4f 52	jsr $524f		jsr	CompareGreaterEqual
.245d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>2460	01 00 00 00				.dword	$00000001
>2464	00 80					.byte	$00,$80
.2466	20 57 52	jsr $5257		jsr	FloatCompare
.2469	20 21 52	jsr $5221		jsr	CompareEqual
.246c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.246f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -29575
>2472	87 73 00 00				.dword	$00007387
>2476	00 80					.byte	$00,$80
.2478	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -29575
>247b	87 73 00 00				.dword	$00007387
>247f	00 80					.byte	$00,$80
.2481	20 57 52	jsr $5257		jsr	FloatCompare
.2484	20 37 52	jsr $5237		jsr	CompareLess
.2487	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>248a	00 00 00 00				.dword	$00000000
>248e	00 00					.byte	$00,$00
.2490	20 57 52	jsr $5257		jsr	FloatCompare
.2493	20 21 52	jsr $5221		jsr	CompareEqual
.2496	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2499	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -29575
>249c	87 73 00 00				.dword	$00007387
>24a0	00 80					.byte	$00,$80
.24a2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -29575
>24a5	87 73 00 00				.dword	$00007387
>24a9	00 80					.byte	$00,$80
.24ab	20 57 52	jsr $5257		jsr	FloatCompare
.24ae	20 47 52	jsr $5247		jsr	CompareLessEqual
.24b1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>24b4	01 00 00 00				.dword	$00000001
>24b8	00 80					.byte	$00,$80
.24ba	20 57 52	jsr $5257		jsr	FloatCompare
.24bd	20 21 52	jsr $5221		jsr	CompareEqual
.24c0	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.24c3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -64.75216652
>24c6	fc 8d c0 40				.dword	$40c08dfc
>24ca	e8 80					.byte	$e8,$80
.24cc	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -2.02283956
>24cf	07 1a bb 40				.dword	$40bb1a07
>24d3	e3 80					.byte	$e3,$80
.24d5	20 96 51	jsr $5196		jsr	FloatAdd
.24d8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -66.77500607
>24db	cc 66 c6 42				.dword	$42c666cc
>24df	e8 80					.byte	$e8,$80
.24e1	20 57 52	jsr $5257		jsr	FloatCompare
.24e4	20 21 52	jsr $5221		jsr	CompareEqual
.24e7	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.24ea	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -64.75216652
>24ed	fc 8d c0 40				.dword	$40c08dfc
>24f1	e8 80					.byte	$e8,$80
.24f3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -2.02283956
>24f6	07 1a bb 40				.dword	$40bb1a07
>24fa	e3 80					.byte	$e3,$80
.24fc	20 90 51	jsr $5190		jsr	FloatSubtract
.24ff	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -62.72932696
>2502	58 6a 75 7d				.dword	$7d756a58
>2506	e7 80					.byte	$e7,$80
.2508	20 57 52	jsr $5257		jsr	FloatCompare
.250b	20 21 52	jsr $5221		jsr	CompareEqual
.250e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2511	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -64.75216652
>2514	fc 8d c0 40				.dword	$40c08dfc
>2518	e8 80					.byte	$e8,$80
.251a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -2.02283956
>251d	07 1a bb 40				.dword	$40bb1a07
>2521	e3 80					.byte	$e3,$80
.2523	20 32 54	jsr $5432		jsr	FloatMultiply
.2526	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 130.98324378
>2529	ef da 7d 41				.dword	$417ddaef
>252d	e9 00					.byte	$e9,$00
.252f	20 57 52	jsr $5257		jsr	FloatCompare
.2532	20 21 52	jsr $5221		jsr	CompareEqual
.2535	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2538	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -64.75216652
>253b	fc 8d c0 40				.dword	$40c08dfc
>253f	e8 80					.byte	$e8,$80
.2541	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -2.02283956
>2544	07 1a bb 40				.dword	$40bb1a07
>2548	e3 80					.byte	$e3,$80
.254a	20 bb 52	jsr $52bb		jsr	FloatDivide
.254d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 32.01053011
>2550	34 64 05 40				.dword	$40056434
>2554	e7 00					.byte	$e7,$00
.2556	20 57 52	jsr $5257		jsr	FloatCompare
.2559	20 21 52	jsr $5221		jsr	CompareEqual
.255c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.255f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -36.78658784
>2562	a4 bb 92 49				.dword	$4992bba4
>2566	e7 80					.byte	$e7,$80
.2568	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -36.78658784
>256b	a4 bb 92 49				.dword	$4992bba4
>256f	e7 80					.byte	$e7,$80
.2571	20 57 52	jsr $5257		jsr	FloatCompare
.2574	20 3f 52	jsr $523f		jsr	CompareGreater
.2577	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>257a	00 00 00 00				.dword	$00000000
>257e	00 00					.byte	$00,$00
.2580	20 57 52	jsr $5257		jsr	FloatCompare
.2583	20 21 52	jsr $5221		jsr	CompareEqual
.2586	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2589	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -36.78658784
>258c	a4 bb 92 49				.dword	$4992bba4
>2590	e7 80					.byte	$e7,$80
.2592	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -36.78658784
>2595	a4 bb 92 49				.dword	$4992bba4
>2599	e7 80					.byte	$e7,$80
.259b	20 57 52	jsr $5257		jsr	FloatCompare
.259e	20 4f 52	jsr $524f		jsr	CompareGreaterEqual
.25a1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>25a4	01 00 00 00				.dword	$00000001
>25a8	00 80					.byte	$00,$80
.25aa	20 57 52	jsr $5257		jsr	FloatCompare
.25ad	20 21 52	jsr $5221		jsr	CompareEqual
.25b0	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.25b3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -36.78658784
>25b6	a4 bb 92 49				.dword	$4992bba4
>25ba	e7 80					.byte	$e7,$80
.25bc	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -36.78658784
>25bf	a4 bb 92 49				.dword	$4992bba4
>25c3	e7 80					.byte	$e7,$80
.25c5	20 57 52	jsr $5257		jsr	FloatCompare
.25c8	20 37 52	jsr $5237		jsr	CompareLess
.25cb	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>25ce	00 00 00 00				.dword	$00000000
>25d2	00 00					.byte	$00,$00
.25d4	20 57 52	jsr $5257		jsr	FloatCompare
.25d7	20 21 52	jsr $5221		jsr	CompareEqual
.25da	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.25dd	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -36.78658784
>25e0	a4 bb 92 49				.dword	$4992bba4
>25e4	e7 80					.byte	$e7,$80
.25e6	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -36.78658784
>25e9	a4 bb 92 49				.dword	$4992bba4
>25ed	e7 80					.byte	$e7,$80
.25ef	20 57 52	jsr $5257		jsr	FloatCompare
.25f2	20 47 52	jsr $5247		jsr	CompareLessEqual
.25f5	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>25f8	01 00 00 00				.dword	$00000001
>25fc	00 80					.byte	$00,$80
.25fe	20 57 52	jsr $5257		jsr	FloatCompare
.2601	20 21 52	jsr $5221		jsr	CompareEqual
.2604	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2607	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -36.78658784
>260a	a4 bb 92 49				.dword	$4992bba4
>260e	e7 80					.byte	$e7,$80
.2610	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -36.78658784
>2613	a4 bb 92 49				.dword	$4992bba4
>2617	e7 80					.byte	$e7,$80
.2619	20 57 52	jsr $5257		jsr	FloatCompare
.261c	20 21 52	jsr $5221		jsr	CompareEqual
.261f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>2622	01 00 00 00				.dword	$00000001
>2626	00 80					.byte	$00,$80
.2628	20 57 52	jsr $5257		jsr	FloatCompare
.262b	20 21 52	jsr $5221		jsr	CompareEqual
.262e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2631	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -36.78658784
>2634	a4 bb 92 49				.dword	$4992bba4
>2638	e7 80					.byte	$e7,$80
.263a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -36.78658784
>263d	a4 bb 92 49				.dword	$4992bba4
>2641	e7 80					.byte	$e7,$80
.2643	20 57 52	jsr $5257		jsr	FloatCompare
.2646	20 31 52	jsr $5231		jsr	CompareNotEqual
.2649	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>264c	00 00 00 00				.dword	$00000000
>2650	00 00					.byte	$00,$00
.2652	20 57 52	jsr $5257		jsr	FloatCompare
.2655	20 21 52	jsr $5221		jsr	CompareEqual
.2658	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.265b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 44834
>265e	22 af 00 00				.dword	$0000af22
>2662	00 00					.byte	$00,$00
.2664	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -11335
>2667	47 2c 00 00				.dword	$00002c47
>266b	00 80					.byte	$00,$80
.266d	20 96 51	jsr $5196		jsr	FloatAdd
.2670	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 33499
>2673	db 82 00 00				.dword	$000082db
>2677	00 00					.byte	$00,$00
.2679	20 57 52	jsr $5257		jsr	FloatCompare
.267c	20 21 52	jsr $5221		jsr	CompareEqual
.267f	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2682	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 44834
>2685	22 af 00 00				.dword	$0000af22
>2689	00 00					.byte	$00,$00
.268b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -11335
>268e	47 2c 00 00				.dword	$00002c47
>2692	00 80					.byte	$00,$80
.2694	20 90 51	jsr $5190		jsr	FloatSubtract
.2697	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 56169
>269a	69 db 00 00				.dword	$0000db69
>269e	00 00					.byte	$00,$00
.26a0	20 57 52	jsr $5257		jsr	FloatCompare
.26a3	20 21 52	jsr $5221		jsr	CompareEqual
.26a6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.26a9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 44834
>26ac	22 af 00 00				.dword	$0000af22
>26b0	00 00					.byte	$00,$00
.26b2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -11335
>26b5	47 2c 00 00				.dword	$00002c47
>26b9	00 80					.byte	$00,$80
.26bb	20 32 54	jsr $5432		jsr	FloatMultiply
.26be	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -508193390
>26c1	6e 6a 4a 1e				.dword	$1e4a6a6e
>26c5	00 80					.byte	$00,$80
.26c7	20 57 52	jsr $5257		jsr	FloatCompare
.26ca	20 21 52	jsr $5221		jsr	CompareEqual
.26cd	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.26d0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 44834
>26d3	22 af 00 00				.dword	$0000af22
>26d7	00 00					.byte	$00,$00
.26d9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -11335
>26dc	47 2c 00 00				.dword	$00002c47
>26e0	00 80					.byte	$00,$80
.26e2	20 bb 52	jsr $52bb		jsr	FloatDivide
.26e5	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -3.95535951
>26e8	1b 4e 92 7e				.dword	$7e924e1b
>26ec	e3 80					.byte	$e3,$80
.26ee	20 57 52	jsr $5257		jsr	FloatCompare
.26f1	20 21 52	jsr $5221		jsr	CompareEqual
.26f4	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.26f7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 44834
>26fa	22 af 00 00				.dword	$0000af22
>26fe	00 00					.byte	$00,$00
.2700	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -11335
>2703	47 2c 00 00				.dword	$00002c47
>2707	00 80					.byte	$00,$80
.2709	20 57 52	jsr $5257		jsr	FloatCompare
.270c	20 21 52	jsr $5221		jsr	CompareEqual
.270f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>2712	00 00 00 00				.dword	$00000000
>2716	00 00					.byte	$00,$00
.2718	20 57 52	jsr $5257		jsr	FloatCompare
.271b	20 21 52	jsr $5221		jsr	CompareEqual
.271e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2721	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 44834
>2724	22 af 00 00				.dword	$0000af22
>2728	00 00					.byte	$00,$00
.272a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -11335
>272d	47 2c 00 00				.dword	$00002c47
>2731	00 80					.byte	$00,$80
.2733	20 57 52	jsr $5257		jsr	FloatCompare
.2736	20 31 52	jsr $5231		jsr	CompareNotEqual
.2739	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>273c	01 00 00 00				.dword	$00000001
>2740	00 80					.byte	$00,$80
.2742	20 57 52	jsr $5257		jsr	FloatCompare
.2745	20 21 52	jsr $5221		jsr	CompareEqual
.2748	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.274b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 44834
>274e	22 af 00 00				.dword	$0000af22
>2752	00 00					.byte	$00,$00
.2754	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -11335
>2757	47 2c 00 00				.dword	$00002c47
>275b	00 80					.byte	$00,$80
.275d	20 57 52	jsr $5257		jsr	FloatCompare
.2760	20 3f 52	jsr $523f		jsr	CompareGreater
.2763	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>2766	01 00 00 00				.dword	$00000001
>276a	00 80					.byte	$00,$80
.276c	20 57 52	jsr $5257		jsr	FloatCompare
.276f	20 21 52	jsr $5221		jsr	CompareEqual
.2772	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2775	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 44834
>2778	22 af 00 00				.dword	$0000af22
>277c	00 00					.byte	$00,$00
.277e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -11335
>2781	47 2c 00 00				.dword	$00002c47
>2785	00 80					.byte	$00,$80
.2787	20 57 52	jsr $5257		jsr	FloatCompare
.278a	20 4f 52	jsr $524f		jsr	CompareGreaterEqual
.278d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>2790	01 00 00 00				.dword	$00000001
>2794	00 80					.byte	$00,$80
.2796	20 57 52	jsr $5257		jsr	FloatCompare
.2799	20 21 52	jsr $5221		jsr	CompareEqual
.279c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.279f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 44834
>27a2	22 af 00 00				.dword	$0000af22
>27a6	00 00					.byte	$00,$00
.27a8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -11335
>27ab	47 2c 00 00				.dword	$00002c47
>27af	00 80					.byte	$00,$80
.27b1	20 57 52	jsr $5257		jsr	FloatCompare
.27b4	20 37 52	jsr $5237		jsr	CompareLess
.27b7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>27ba	00 00 00 00				.dword	$00000000
>27be	00 00					.byte	$00,$00
.27c0	20 57 52	jsr $5257		jsr	FloatCompare
.27c3	20 21 52	jsr $5221		jsr	CompareEqual
.27c6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.27c9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 44834
>27cc	22 af 00 00				.dword	$0000af22
>27d0	00 00					.byte	$00,$00
.27d2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -11335
>27d5	47 2c 00 00				.dword	$00002c47
>27d9	00 80					.byte	$00,$80
.27db	20 57 52	jsr $5257		jsr	FloatCompare
.27de	20 47 52	jsr $5247		jsr	CompareLessEqual
.27e1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>27e4	00 00 00 00				.dword	$00000000
>27e8	00 00					.byte	$00,$00
.27ea	20 57 52	jsr $5257		jsr	FloatCompare
.27ed	20 21 52	jsr $5221		jsr	CompareEqual
.27f0	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.27f3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 42.01806107
>27f6	4d 3f 09 54				.dword	$54093f4d
>27fa	e7 00					.byte	$e7,$00
.27fc	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 6.39102616
>27ff	a6 a4 41 66				.dword	$6641a4a6
>2803	e4 00					.byte	$e4,$00
.2805	20 96 51	jsr $5196		jsr	FloatAdd
.2808	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 48.40908723
>280b	e2 73 d1 60				.dword	$60d173e2
>280f	e7 00					.byte	$e7,$00
.2811	20 57 52	jsr $5257		jsr	FloatCompare
.2814	20 21 52	jsr $5221		jsr	CompareEqual
.2817	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.281a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 42.01806107
>281d	4d 3f 09 54				.dword	$54093f4d
>2821	e7 00					.byte	$e7,$00
.2823	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 6.39102616
>2826	a6 a4 41 66				.dword	$6641a4a6
>282a	e4 00					.byte	$e4,$00
.282c	20 90 51	jsr $5190		jsr	FloatSubtract
.282f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 35.62703491
>2832	b8 0a 41 47				.dword	$47410ab8
>2836	e7 00					.byte	$e7,$00
.2838	20 57 52	jsr $5257		jsr	FloatCompare
.283b	20 21 52	jsr $5221		jsr	CompareEqual
.283e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2841	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 42.01806107
>2844	4d 3f 09 54				.dword	$54093f4d
>2848	e7 00					.byte	$e7,$00
.284a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 6.39102616
>284d	a6 a4 41 66				.dword	$6641a4a6
>2851	e4 00					.byte	$e4,$00
.2853	20 32 54	jsr $5432		jsr	FloatMultiply
.2856	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 268.53852748
>2859	3c 77 22 43				.dword	$4322773c
>285d	ea 00					.byte	$ea,$00
.285f	20 57 52	jsr $5257		jsr	FloatCompare
.2862	20 21 52	jsr $5221		jsr	CompareEqual
.2865	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2868	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 42.01806107
>286b	4d 3f 09 54				.dword	$54093f4d
>286f	e7 00					.byte	$e7,$00
.2871	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 6.39102616
>2874	a6 a4 41 66				.dword	$6641a4a6
>2878	e4 00					.byte	$e4,$00
.287a	20 bb 52	jsr $52bb		jsr	FloatDivide
.287d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 6.57454062
>2880	81 51 31 69				.dword	$69315181
>2884	e4 00					.byte	$e4,$00
.2886	20 57 52	jsr $5257		jsr	FloatCompare
.2889	20 21 52	jsr $5221		jsr	CompareEqual
.288c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.288f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 38.40106909
>2892	ee 58 cd 4c				.dword	$4ccd58ee
>2896	e7 00					.byte	$e7,$00
.2898	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 38.40106909
>289b	ee 58 cd 4c				.dword	$4ccd58ee
>289f	e7 00					.byte	$e7,$00
.28a1	20 57 52	jsr $5257		jsr	FloatCompare
.28a4	20 3f 52	jsr $523f		jsr	CompareGreater
.28a7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>28aa	00 00 00 00				.dword	$00000000
>28ae	00 00					.byte	$00,$00
.28b0	20 57 52	jsr $5257		jsr	FloatCompare
.28b3	20 21 52	jsr $5221		jsr	CompareEqual
.28b6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.28b9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 38.40106909
>28bc	ee 58 cd 4c				.dword	$4ccd58ee
>28c0	e7 00					.byte	$e7,$00
.28c2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 38.40106909
>28c5	ee 58 cd 4c				.dword	$4ccd58ee
>28c9	e7 00					.byte	$e7,$00
.28cb	20 57 52	jsr $5257		jsr	FloatCompare
.28ce	20 4f 52	jsr $524f		jsr	CompareGreaterEqual
.28d1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>28d4	01 00 00 00				.dword	$00000001
>28d8	00 80					.byte	$00,$80
.28da	20 57 52	jsr $5257		jsr	FloatCompare
.28dd	20 21 52	jsr $5221		jsr	CompareEqual
.28e0	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.28e3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 38.40106909
>28e6	ee 58 cd 4c				.dword	$4ccd58ee
>28ea	e7 00					.byte	$e7,$00
.28ec	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 38.40106909
>28ef	ee 58 cd 4c				.dword	$4ccd58ee
>28f3	e7 00					.byte	$e7,$00
.28f5	20 57 52	jsr $5257		jsr	FloatCompare
.28f8	20 37 52	jsr $5237		jsr	CompareLess
.28fb	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>28fe	00 00 00 00				.dword	$00000000
>2902	00 00					.byte	$00,$00
.2904	20 57 52	jsr $5257		jsr	FloatCompare
.2907	20 21 52	jsr $5221		jsr	CompareEqual
.290a	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.290d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 38.40106909
>2910	ee 58 cd 4c				.dword	$4ccd58ee
>2914	e7 00					.byte	$e7,$00
.2916	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 38.40106909
>2919	ee 58 cd 4c				.dword	$4ccd58ee
>291d	e7 00					.byte	$e7,$00
.291f	20 57 52	jsr $5257		jsr	FloatCompare
.2922	20 47 52	jsr $5247		jsr	CompareLessEqual
.2925	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>2928	01 00 00 00				.dword	$00000001
>292c	00 80					.byte	$00,$80
.292e	20 57 52	jsr $5257		jsr	FloatCompare
.2931	20 21 52	jsr $5221		jsr	CompareEqual
.2934	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2937	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 38.40106909
>293a	ee 58 cd 4c				.dword	$4ccd58ee
>293e	e7 00					.byte	$e7,$00
.2940	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 38.40106909
>2943	ee 58 cd 4c				.dword	$4ccd58ee
>2947	e7 00					.byte	$e7,$00
.2949	20 57 52	jsr $5257		jsr	FloatCompare
.294c	20 21 52	jsr $5221		jsr	CompareEqual
.294f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>2952	01 00 00 00				.dword	$00000001
>2956	00 80					.byte	$00,$80
.2958	20 57 52	jsr $5257		jsr	FloatCompare
.295b	20 21 52	jsr $5221		jsr	CompareEqual
.295e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2961	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 38.40106909
>2964	ee 58 cd 4c				.dword	$4ccd58ee
>2968	e7 00					.byte	$e7,$00
.296a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 38.40106909
>296d	ee 58 cd 4c				.dword	$4ccd58ee
>2971	e7 00					.byte	$e7,$00
.2973	20 57 52	jsr $5257		jsr	FloatCompare
.2976	20 31 52	jsr $5231		jsr	CompareNotEqual
.2979	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>297c	00 00 00 00				.dword	$00000000
>2980	00 00					.byte	$00,$00
.2982	20 57 52	jsr $5257		jsr	FloatCompare
.2985	20 21 52	jsr $5221		jsr	CompareEqual
.2988	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.298b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 35145
>298e	49 89 00 00				.dword	$00008949
>2992	00 00					.byte	$00,$00
.2994	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -9937
>2997	d1 26 00 00				.dword	$000026d1
>299b	00 80					.byte	$00,$80
.299d	20 96 51	jsr $5196		jsr	FloatAdd
.29a0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 25208
>29a3	78 62 00 00				.dword	$00006278
>29a7	00 00					.byte	$00,$00
.29a9	20 57 52	jsr $5257		jsr	FloatCompare
.29ac	20 21 52	jsr $5221		jsr	CompareEqual
.29af	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.29b2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 35145
>29b5	49 89 00 00				.dword	$00008949
>29b9	00 00					.byte	$00,$00
.29bb	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -9937
>29be	d1 26 00 00				.dword	$000026d1
>29c2	00 80					.byte	$00,$80
.29c4	20 90 51	jsr $5190		jsr	FloatSubtract
.29c7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 45082
>29ca	1a b0 00 00				.dword	$0000b01a
>29ce	00 00					.byte	$00,$00
.29d0	20 57 52	jsr $5257		jsr	FloatCompare
.29d3	20 21 52	jsr $5221		jsr	CompareEqual
.29d6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.29d9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 35145
>29dc	49 89 00 00				.dword	$00008949
>29e0	00 00					.byte	$00,$00
.29e2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -9937
>29e5	d1 26 00 00				.dword	$000026d1
>29e9	00 80					.byte	$00,$80
.29eb	20 32 54	jsr $5432		jsr	FloatMultiply
.29ee	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -349235865
>29f1	99 ea d0 14				.dword	$14d0ea99
>29f5	00 80					.byte	$00,$80
.29f7	20 57 52	jsr $5257		jsr	FloatCompare
.29fa	20 21 52	jsr $5221		jsr	CompareEqual
.29fd	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2a00	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 35145
>2a03	49 89 00 00				.dword	$00008949
>2a07	00 00					.byte	$00,$00
.2a09	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -9937
>2a0c	d1 26 00 00				.dword	$000026d1
>2a10	00 80					.byte	$00,$80
.2a12	20 bb 52	jsr $52bb		jsr	FloatDivide
.2a15	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -3.53678172
>2a18	dc 50 2d 71				.dword	$712d50dc
>2a1c	e3 80					.byte	$e3,$80
.2a1e	20 57 52	jsr $5257		jsr	FloatCompare
.2a21	20 21 52	jsr $5221		jsr	CompareEqual
.2a24	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2a27	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 35145
>2a2a	49 89 00 00				.dword	$00008949
>2a2e	00 00					.byte	$00,$00
.2a30	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -9937
>2a33	d1 26 00 00				.dword	$000026d1
>2a37	00 80					.byte	$00,$80
.2a39	20 57 52	jsr $5257		jsr	FloatCompare
.2a3c	20 21 52	jsr $5221		jsr	CompareEqual
.2a3f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>2a42	00 00 00 00				.dword	$00000000
>2a46	00 00					.byte	$00,$00
.2a48	20 57 52	jsr $5257		jsr	FloatCompare
.2a4b	20 21 52	jsr $5221		jsr	CompareEqual
.2a4e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2a51	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 35145
>2a54	49 89 00 00				.dword	$00008949
>2a58	00 00					.byte	$00,$00
.2a5a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -9937
>2a5d	d1 26 00 00				.dword	$000026d1
>2a61	00 80					.byte	$00,$80
.2a63	20 57 52	jsr $5257		jsr	FloatCompare
.2a66	20 31 52	jsr $5231		jsr	CompareNotEqual
.2a69	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>2a6c	01 00 00 00				.dword	$00000001
>2a70	00 80					.byte	$00,$80
.2a72	20 57 52	jsr $5257		jsr	FloatCompare
.2a75	20 21 52	jsr $5221		jsr	CompareEqual
.2a78	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2a7b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 35145
>2a7e	49 89 00 00				.dword	$00008949
>2a82	00 00					.byte	$00,$00
.2a84	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -9937
>2a87	d1 26 00 00				.dword	$000026d1
>2a8b	00 80					.byte	$00,$80
.2a8d	20 57 52	jsr $5257		jsr	FloatCompare
.2a90	20 3f 52	jsr $523f		jsr	CompareGreater
.2a93	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>2a96	01 00 00 00				.dword	$00000001
>2a9a	00 80					.byte	$00,$80
.2a9c	20 57 52	jsr $5257		jsr	FloatCompare
.2a9f	20 21 52	jsr $5221		jsr	CompareEqual
.2aa2	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2aa5	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 35145
>2aa8	49 89 00 00				.dword	$00008949
>2aac	00 00					.byte	$00,$00
.2aae	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -9937
>2ab1	d1 26 00 00				.dword	$000026d1
>2ab5	00 80					.byte	$00,$80
.2ab7	20 57 52	jsr $5257		jsr	FloatCompare
.2aba	20 4f 52	jsr $524f		jsr	CompareGreaterEqual
.2abd	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>2ac0	01 00 00 00				.dword	$00000001
>2ac4	00 80					.byte	$00,$80
.2ac6	20 57 52	jsr $5257		jsr	FloatCompare
.2ac9	20 21 52	jsr $5221		jsr	CompareEqual
.2acc	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2acf	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 35145
>2ad2	49 89 00 00				.dword	$00008949
>2ad6	00 00					.byte	$00,$00
.2ad8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -9937
>2adb	d1 26 00 00				.dword	$000026d1
>2adf	00 80					.byte	$00,$80
.2ae1	20 57 52	jsr $5257		jsr	FloatCompare
.2ae4	20 37 52	jsr $5237		jsr	CompareLess
.2ae7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>2aea	00 00 00 00				.dword	$00000000
>2aee	00 00					.byte	$00,$00
.2af0	20 57 52	jsr $5257		jsr	FloatCompare
.2af3	20 21 52	jsr $5221		jsr	CompareEqual
.2af6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2af9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 35145
>2afc	49 89 00 00				.dword	$00008949
>2b00	00 00					.byte	$00,$00
.2b02	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -9937
>2b05	d1 26 00 00				.dword	$000026d1
>2b09	00 80					.byte	$00,$80
.2b0b	20 57 52	jsr $5257		jsr	FloatCompare
.2b0e	20 47 52	jsr $5247		jsr	CompareLessEqual
.2b11	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>2b14	00 00 00 00				.dword	$00000000
>2b18	00 00					.byte	$00,$00
.2b1a	20 57 52	jsr $5257		jsr	FloatCompare
.2b1d	20 21 52	jsr $5221		jsr	CompareEqual
.2b20	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2b23	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -74.12837126
>2b26	f0 dc 20 4a				.dword	$4a20dcf0
>2b2a	e8 80					.byte	$e8,$80
.2b2c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -76.17866688
>2b2f	1d bd 2d 4c				.dword	$4c2dbd1d
>2b33	e8 80					.byte	$e8,$80
.2b35	20 96 51	jsr $5196		jsr	FloatAdd
.2b38	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -150.30703815
>2b3b	07 4d 27 4b				.dword	$4b274d07
>2b3f	e9 80					.byte	$e9,$80
.2b41	20 57 52	jsr $5257		jsr	FloatCompare
.2b44	20 21 52	jsr $5221		jsr	CompareEqual
.2b47	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2b4a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -74.12837126
>2b4d	f0 dc 20 4a				.dword	$4a20dcf0
>2b51	e8 80					.byte	$e8,$80
.2b53	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -76.17866688
>2b56	1d bd 2d 4c				.dword	$4c2dbd1d
>2b5a	e8 80					.byte	$e8,$80
.2b5c	20 90 51	jsr $5190		jsr	FloatSubtract
.2b5f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 2.05029562
>2b62	8f 05 9c 41				.dword	$419c058f
>2b66	e3 00					.byte	$e3,$00
.2b68	20 57 52	jsr $5257		jsr	FloatCompare
.2b6b	20 21 52	jsr $5221		jsr	CompareEqual
.2b6e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2b71	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -74.12837126
>2b74	f0 dc 20 4a				.dword	$4a20dcf0
>2b78	e8 80					.byte	$e8,$80
.2b7a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -76.17866688
>2b7d	1d bd 2d 4c				.dword	$4c2dbd1d
>2b81	e8 80					.byte	$e8,$80
.2b83	20 32 54	jsr $5432		jsr	FloatMultiply
.2b86	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 5647.00050109
>2b89	83 00 3c 58				.dword	$583c0083
>2b8d	ee 00					.byte	$ee,$00
.2b8f	20 57 52	jsr $5257		jsr	FloatCompare
.2b92	20 21 52	jsr $5221		jsr	CompareEqual
.2b95	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2b98	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -74.12837126
>2b9b	f0 dc 20 4a				.dword	$4a20dcf0
>2b9f	e8 80					.byte	$e8,$80
.2ba1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -76.17866688
>2ba4	1d bd 2d 4c				.dword	$4c2dbd1d
>2ba8	e8 80					.byte	$e8,$80
.2baa	20 bb 52	jsr $52bb		jsr	FloatDivide
.2bad	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0.9730857
>2bb0	7d 12 8e 7c				.dword	$7c8e127d
>2bb4	e1 00					.byte	$e1,$00
.2bb6	20 57 52	jsr $5257		jsr	FloatCompare
.2bb9	20 21 52	jsr $5221		jsr	CompareEqual
.2bbc	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2bbf	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -7.07240625
>2bc2	75 93 28 71				.dword	$71289375
>2bc6	e4 80					.byte	$e4,$80
.2bc8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -7.07240625
>2bcb	75 93 28 71				.dword	$71289375
>2bcf	e4 80					.byte	$e4,$80
.2bd1	20 57 52	jsr $5257		jsr	FloatCompare
.2bd4	20 3f 52	jsr $523f		jsr	CompareGreater
.2bd7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>2bda	00 00 00 00				.dword	$00000000
>2bde	00 00					.byte	$00,$00
.2be0	20 57 52	jsr $5257		jsr	FloatCompare
.2be3	20 21 52	jsr $5221		jsr	CompareEqual
.2be6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2be9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -7.07240625
>2bec	75 93 28 71				.dword	$71289375
>2bf0	e4 80					.byte	$e4,$80
.2bf2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -7.07240625
>2bf5	75 93 28 71				.dword	$71289375
>2bf9	e4 80					.byte	$e4,$80
.2bfb	20 57 52	jsr $5257		jsr	FloatCompare
.2bfe	20 4f 52	jsr $524f		jsr	CompareGreaterEqual
.2c01	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>2c04	01 00 00 00				.dword	$00000001
>2c08	00 80					.byte	$00,$80
.2c0a	20 57 52	jsr $5257		jsr	FloatCompare
.2c0d	20 21 52	jsr $5221		jsr	CompareEqual
.2c10	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2c13	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -7.07240625
>2c16	75 93 28 71				.dword	$71289375
>2c1a	e4 80					.byte	$e4,$80
.2c1c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -7.07240625
>2c1f	75 93 28 71				.dword	$71289375
>2c23	e4 80					.byte	$e4,$80
.2c25	20 57 52	jsr $5257		jsr	FloatCompare
.2c28	20 37 52	jsr $5237		jsr	CompareLess
.2c2b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>2c2e	00 00 00 00				.dword	$00000000
>2c32	00 00					.byte	$00,$00
.2c34	20 57 52	jsr $5257		jsr	FloatCompare
.2c37	20 21 52	jsr $5221		jsr	CompareEqual
.2c3a	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2c3d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -7.07240625
>2c40	75 93 28 71				.dword	$71289375
>2c44	e4 80					.byte	$e4,$80
.2c46	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -7.07240625
>2c49	75 93 28 71				.dword	$71289375
>2c4d	e4 80					.byte	$e4,$80
.2c4f	20 57 52	jsr $5257		jsr	FloatCompare
.2c52	20 47 52	jsr $5247		jsr	CompareLessEqual
.2c55	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>2c58	01 00 00 00				.dword	$00000001
>2c5c	00 80					.byte	$00,$80
.2c5e	20 57 52	jsr $5257		jsr	FloatCompare
.2c61	20 21 52	jsr $5221		jsr	CompareEqual
.2c64	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2c67	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -7.07240625
>2c6a	75 93 28 71				.dword	$71289375
>2c6e	e4 80					.byte	$e4,$80
.2c70	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -7.07240625
>2c73	75 93 28 71				.dword	$71289375
>2c77	e4 80					.byte	$e4,$80
.2c79	20 57 52	jsr $5257		jsr	FloatCompare
.2c7c	20 21 52	jsr $5221		jsr	CompareEqual
.2c7f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>2c82	01 00 00 00				.dword	$00000001
>2c86	00 80					.byte	$00,$80
.2c88	20 57 52	jsr $5257		jsr	FloatCompare
.2c8b	20 21 52	jsr $5221		jsr	CompareEqual
.2c8e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2c91	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -7.07240625
>2c94	75 93 28 71				.dword	$71289375
>2c98	e4 80					.byte	$e4,$80
.2c9a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -7.07240625
>2c9d	75 93 28 71				.dword	$71289375
>2ca1	e4 80					.byte	$e4,$80
.2ca3	20 57 52	jsr $5257		jsr	FloatCompare
.2ca6	20 31 52	jsr $5231		jsr	CompareNotEqual
.2ca9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>2cac	00 00 00 00				.dword	$00000000
>2cb0	00 00					.byte	$00,$00
.2cb2	20 57 52	jsr $5257		jsr	FloatCompare
.2cb5	20 21 52	jsr $5221		jsr	CompareEqual
.2cb8	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2cbb	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 10187
>2cbe	cb 27 00 00				.dword	$000027cb
>2cc2	00 00					.byte	$00,$00
.2cc4	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -7972
>2cc7	24 1f 00 00				.dword	$00001f24
>2ccb	00 80					.byte	$00,$80
.2ccd	20 96 51	jsr $5196		jsr	FloatAdd
.2cd0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 2215
>2cd3	a7 08 00 00				.dword	$000008a7
>2cd7	00 00					.byte	$00,$00
.2cd9	20 57 52	jsr $5257		jsr	FloatCompare
.2cdc	20 21 52	jsr $5221		jsr	CompareEqual
.2cdf	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2ce2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 10187
>2ce5	cb 27 00 00				.dword	$000027cb
>2ce9	00 00					.byte	$00,$00
.2ceb	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -7972
>2cee	24 1f 00 00				.dword	$00001f24
>2cf2	00 80					.byte	$00,$80
.2cf4	20 90 51	jsr $5190		jsr	FloatSubtract
.2cf7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 18159
>2cfa	ef 46 00 00				.dword	$000046ef
>2cfe	00 00					.byte	$00,$00
.2d00	20 57 52	jsr $5257		jsr	FloatCompare
.2d03	20 21 52	jsr $5221		jsr	CompareEqual
.2d06	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2d09	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 10187
>2d0c	cb 27 00 00				.dword	$000027cb
>2d10	00 00					.byte	$00,$00
.2d12	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -7972
>2d15	24 1f 00 00				.dword	$00001f24
>2d19	00 80					.byte	$00,$80
.2d1b	20 32 54	jsr $5432		jsr	FloatMultiply
.2d1e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -81210764
>2d21	8c 2d d7 04				.dword	$04d72d8c
>2d25	00 80					.byte	$00,$80
.2d27	20 57 52	jsr $5257		jsr	FloatCompare
.2d2a	20 21 52	jsr $5221		jsr	CompareEqual
.2d2d	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2d30	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 10187
>2d33	cb 27 00 00				.dword	$000027cb
>2d37	00 00					.byte	$00,$00
.2d39	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -7972
>2d3c	24 1f 00 00				.dword	$00001f24
>2d40	00 80					.byte	$00,$80
.2d42	20 bb 52	jsr $52bb		jsr	FloatDivide
.2d45	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1.27784747
>2d48	c1 40 c8 51				.dword	$51c840c1
>2d4c	e2 80					.byte	$e2,$80
.2d4e	20 57 52	jsr $5257		jsr	FloatCompare
.2d51	20 21 52	jsr $5221		jsr	CompareEqual
.2d54	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2d57	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -7972
>2d5a	24 1f 00 00				.dword	$00001f24
>2d5e	00 80					.byte	$00,$80
.2d60	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -7972
>2d63	24 1f 00 00				.dword	$00001f24
>2d67	00 80					.byte	$00,$80
.2d69	20 57 52	jsr $5257		jsr	FloatCompare
.2d6c	20 21 52	jsr $5221		jsr	CompareEqual
.2d6f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>2d72	01 00 00 00				.dword	$00000001
>2d76	00 80					.byte	$00,$80
.2d78	20 57 52	jsr $5257		jsr	FloatCompare
.2d7b	20 21 52	jsr $5221		jsr	CompareEqual
.2d7e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2d81	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -7972
>2d84	24 1f 00 00				.dword	$00001f24
>2d88	00 80					.byte	$00,$80
.2d8a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -7972
>2d8d	24 1f 00 00				.dword	$00001f24
>2d91	00 80					.byte	$00,$80
.2d93	20 57 52	jsr $5257		jsr	FloatCompare
.2d96	20 31 52	jsr $5231		jsr	CompareNotEqual
.2d99	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>2d9c	00 00 00 00				.dword	$00000000
>2da0	00 00					.byte	$00,$00
.2da2	20 57 52	jsr $5257		jsr	FloatCompare
.2da5	20 21 52	jsr $5221		jsr	CompareEqual
.2da8	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2dab	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -7972
>2dae	24 1f 00 00				.dword	$00001f24
>2db2	00 80					.byte	$00,$80
.2db4	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -7972
>2db7	24 1f 00 00				.dword	$00001f24
>2dbb	00 80					.byte	$00,$80
.2dbd	20 57 52	jsr $5257		jsr	FloatCompare
.2dc0	20 3f 52	jsr $523f		jsr	CompareGreater
.2dc3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>2dc6	00 00 00 00				.dword	$00000000
>2dca	00 00					.byte	$00,$00
.2dcc	20 57 52	jsr $5257		jsr	FloatCompare
.2dcf	20 21 52	jsr $5221		jsr	CompareEqual
.2dd2	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2dd5	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -7972
>2dd8	24 1f 00 00				.dword	$00001f24
>2ddc	00 80					.byte	$00,$80
.2dde	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -7972
>2de1	24 1f 00 00				.dword	$00001f24
>2de5	00 80					.byte	$00,$80
.2de7	20 57 52	jsr $5257		jsr	FloatCompare
.2dea	20 4f 52	jsr $524f		jsr	CompareGreaterEqual
.2ded	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>2df0	01 00 00 00				.dword	$00000001
>2df4	00 80					.byte	$00,$80
.2df6	20 57 52	jsr $5257		jsr	FloatCompare
.2df9	20 21 52	jsr $5221		jsr	CompareEqual
.2dfc	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2dff	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -7972
>2e02	24 1f 00 00				.dword	$00001f24
>2e06	00 80					.byte	$00,$80
.2e08	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -7972
>2e0b	24 1f 00 00				.dword	$00001f24
>2e0f	00 80					.byte	$00,$80
.2e11	20 57 52	jsr $5257		jsr	FloatCompare
.2e14	20 37 52	jsr $5237		jsr	CompareLess
.2e17	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>2e1a	00 00 00 00				.dword	$00000000
>2e1e	00 00					.byte	$00,$00
.2e20	20 57 52	jsr $5257		jsr	FloatCompare
.2e23	20 21 52	jsr $5221		jsr	CompareEqual
.2e26	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2e29	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -7972
>2e2c	24 1f 00 00				.dword	$00001f24
>2e30	00 80					.byte	$00,$80
.2e32	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -7972
>2e35	24 1f 00 00				.dword	$00001f24
>2e39	00 80					.byte	$00,$80
.2e3b	20 57 52	jsr $5257		jsr	FloatCompare
.2e3e	20 47 52	jsr $5247		jsr	CompareLessEqual
.2e41	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>2e44	01 00 00 00				.dword	$00000001
>2e48	00 80					.byte	$00,$80
.2e4a	20 57 52	jsr $5257		jsr	FloatCompare
.2e4d	20 21 52	jsr $5221		jsr	CompareEqual
.2e50	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2e53	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -17.68308091
>2e56	90 79 bb 46				.dword	$46bb7990
>2e5a	e6 80					.byte	$e6,$80
.2e5c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -35.41459464
>2e5f	c0 45 d4 46				.dword	$46d445c0
>2e63	e7 80					.byte	$e7,$80
.2e65	20 96 51	jsr $5196		jsr	FloatAdd
.2e68	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -53.09767555
>2e6b	88 02 32 6a				.dword	$6a320288
>2e6f	e7 80					.byte	$e7,$80
.2e71	20 57 52	jsr $5257		jsr	FloatCompare
.2e74	20 21 52	jsr $5221		jsr	CompareEqual
.2e77	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2e7a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -17.68308091
>2e7d	90 79 bb 46				.dword	$46bb7990
>2e81	e6 80					.byte	$e6,$80
.2e83	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -35.41459464
>2e86	c0 45 d4 46				.dword	$46d445c0
>2e8a	e7 80					.byte	$e7,$80
.2e8c	20 90 51	jsr $5190		jsr	FloatSubtract
.2e8f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 17.73151373
>2e92	ef 11 ed 46				.dword	$46ed11ef
>2e96	e6 00					.byte	$e6,$00
.2e98	20 57 52	jsr $5257		jsr	FloatCompare
.2e9b	20 21 52	jsr $5221		jsr	CompareEqual
.2e9e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2ea1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -17.68308091
>2ea4	90 79 bb 46				.dword	$46bb7990
>2ea8	e6 80					.byte	$e6,$80
.2eaa	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -35.41459464
>2ead	c0 45 d4 46				.dword	$46d445c0
>2eb1	e7 80					.byte	$e7,$80
.2eb3	20 32 54	jsr $5432		jsr	FloatMultiply
.2eb6	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 626.2391424
>2eb9	0e a7 47 4e				.dword	$4e47a70e
>2ebd	eb 00					.byte	$eb,$00
.2ebf	20 57 52	jsr $5257		jsr	FloatCompare
.2ec2	20 21 52	jsr $5221		jsr	CompareEqual
.2ec5	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2ec8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -17.68308091
>2ecb	90 79 bb 46				.dword	$46bb7990
>2ecf	e6 80					.byte	$e6,$80
.2ed1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -35.41459464
>2ed4	c0 45 d4 46				.dword	$46d445c0
>2ed8	e7 80					.byte	$e7,$80
.2eda	20 bb 52	jsr $52bb		jsr	FloatDivide
.2edd	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0.4993162
>2ee0	bd 2f d3 7f				.dword	$7fd32fbd
>2ee4	e0 00					.byte	$e0,$00
.2ee6	20 57 52	jsr $5257		jsr	FloatCompare
.2ee9	20 21 52	jsr $5221		jsr	CompareEqual
.2eec	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2eef	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 51.93010448
>2ef2	a8 36 dc 67				.dword	$67dc36a8
>2ef6	e7 00					.byte	$e7,$00
.2ef8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 51.93010448
>2efb	a8 36 dc 67				.dword	$67dc36a8
>2eff	e7 00					.byte	$e7,$00
.2f01	20 57 52	jsr $5257		jsr	FloatCompare
.2f04	20 3f 52	jsr $523f		jsr	CompareGreater
.2f07	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>2f0a	00 00 00 00				.dword	$00000000
>2f0e	00 00					.byte	$00,$00
.2f10	20 57 52	jsr $5257		jsr	FloatCompare
.2f13	20 21 52	jsr $5221		jsr	CompareEqual
.2f16	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2f19	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 51.93010448
>2f1c	a8 36 dc 67				.dword	$67dc36a8
>2f20	e7 00					.byte	$e7,$00
.2f22	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 51.93010448
>2f25	a8 36 dc 67				.dword	$67dc36a8
>2f29	e7 00					.byte	$e7,$00
.2f2b	20 57 52	jsr $5257		jsr	FloatCompare
.2f2e	20 4f 52	jsr $524f		jsr	CompareGreaterEqual
.2f31	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>2f34	01 00 00 00				.dword	$00000001
>2f38	00 80					.byte	$00,$80
.2f3a	20 57 52	jsr $5257		jsr	FloatCompare
.2f3d	20 21 52	jsr $5221		jsr	CompareEqual
.2f40	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2f43	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 51.93010448
>2f46	a8 36 dc 67				.dword	$67dc36a8
>2f4a	e7 00					.byte	$e7,$00
.2f4c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 51.93010448
>2f4f	a8 36 dc 67				.dword	$67dc36a8
>2f53	e7 00					.byte	$e7,$00
.2f55	20 57 52	jsr $5257		jsr	FloatCompare
.2f58	20 37 52	jsr $5237		jsr	CompareLess
.2f5b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>2f5e	00 00 00 00				.dword	$00000000
>2f62	00 00					.byte	$00,$00
.2f64	20 57 52	jsr $5257		jsr	FloatCompare
.2f67	20 21 52	jsr $5221		jsr	CompareEqual
.2f6a	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2f6d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 51.93010448
>2f70	a8 36 dc 67				.dword	$67dc36a8
>2f74	e7 00					.byte	$e7,$00
.2f76	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 51.93010448
>2f79	a8 36 dc 67				.dword	$67dc36a8
>2f7d	e7 00					.byte	$e7,$00
.2f7f	20 57 52	jsr $5257		jsr	FloatCompare
.2f82	20 47 52	jsr $5247		jsr	CompareLessEqual
.2f85	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>2f88	01 00 00 00				.dword	$00000001
>2f8c	00 80					.byte	$00,$80
.2f8e	20 57 52	jsr $5257		jsr	FloatCompare
.2f91	20 21 52	jsr $5221		jsr	CompareEqual
.2f94	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2f97	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 51.93010448
>2f9a	a8 36 dc 67				.dword	$67dc36a8
>2f9e	e7 00					.byte	$e7,$00
.2fa0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 51.93010448
>2fa3	a8 36 dc 67				.dword	$67dc36a8
>2fa7	e7 00					.byte	$e7,$00
.2fa9	20 57 52	jsr $5257		jsr	FloatCompare
.2fac	20 21 52	jsr $5221		jsr	CompareEqual
.2faf	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>2fb2	01 00 00 00				.dword	$00000001
>2fb6	00 80					.byte	$00,$80
.2fb8	20 57 52	jsr $5257		jsr	FloatCompare
.2fbb	20 21 52	jsr $5221		jsr	CompareEqual
.2fbe	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2fc1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 51.93010448
>2fc4	a8 36 dc 67				.dword	$67dc36a8
>2fc8	e7 00					.byte	$e7,$00
.2fca	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 51.93010448
>2fcd	a8 36 dc 67				.dword	$67dc36a8
>2fd1	e7 00					.byte	$e7,$00
.2fd3	20 57 52	jsr $5257		jsr	FloatCompare
.2fd6	20 31 52	jsr $5231		jsr	CompareNotEqual
.2fd9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>2fdc	00 00 00 00				.dword	$00000000
>2fe0	00 00					.byte	$00,$00
.2fe2	20 57 52	jsr $5257		jsr	FloatCompare
.2fe5	20 21 52	jsr $5221		jsr	CompareEqual
.2fe8	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2feb	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 3930
>2fee	5a 0f 00 00				.dword	$00000f5a
>2ff2	00 00					.byte	$00,$00
.2ff4	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -24534
>2ff7	d6 5f 00 00				.dword	$00005fd6
>2ffb	00 80					.byte	$00,$80
.2ffd	20 96 51	jsr $5196		jsr	FloatAdd
.3000	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -20604
>3003	7c 50 00 00				.dword	$0000507c
>3007	00 80					.byte	$00,$80
.3009	20 57 52	jsr $5257		jsr	FloatCompare
.300c	20 21 52	jsr $5221		jsr	CompareEqual
.300f	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3012	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 3930
>3015	5a 0f 00 00				.dword	$00000f5a
>3019	00 00					.byte	$00,$00
.301b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -24534
>301e	d6 5f 00 00				.dword	$00005fd6
>3022	00 80					.byte	$00,$80
.3024	20 90 51	jsr $5190		jsr	FloatSubtract
.3027	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 28464
>302a	30 6f 00 00				.dword	$00006f30
>302e	00 00					.byte	$00,$00
.3030	20 57 52	jsr $5257		jsr	FloatCompare
.3033	20 21 52	jsr $5221		jsr	CompareEqual
.3036	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3039	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 3930
>303c	5a 0f 00 00				.dword	$00000f5a
>3040	00 00					.byte	$00,$00
.3042	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -24534
>3045	d6 5f 00 00				.dword	$00005fd6
>3049	00 80					.byte	$00,$80
.304b	20 32 54	jsr $5432		jsr	FloatMultiply
.304e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -96418620
>3051	3c 3b bf 05				.dword	$05bf3b3c
>3055	00 80					.byte	$00,$80
.3057	20 57 52	jsr $5257		jsr	FloatCompare
.305a	20 21 52	jsr $5221		jsr	CompareEqual
.305d	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3060	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 3930
>3063	5a 0f 00 00				.dword	$00000f5a
>3067	00 00					.byte	$00,$00
.3069	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -24534
>306c	d6 5f 00 00				.dword	$00005fd6
>3070	00 80					.byte	$00,$80
.3072	20 bb 52	jsr $52bb		jsr	FloatDivide
.3075	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -0.16018586
>3078	8c e1 03 52				.dword	$5203e18c
>307c	df 80					.byte	$df,$80
.307e	20 57 52	jsr $5257		jsr	FloatCompare
.3081	20 21 52	jsr $5221		jsr	CompareEqual
.3084	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3087	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -24534
>308a	d6 5f 00 00				.dword	$00005fd6
>308e	00 80					.byte	$00,$80
.3090	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -24534
>3093	d6 5f 00 00				.dword	$00005fd6
>3097	00 80					.byte	$00,$80
.3099	20 57 52	jsr $5257		jsr	FloatCompare
.309c	20 21 52	jsr $5221		jsr	CompareEqual
.309f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>30a2	01 00 00 00				.dword	$00000001
>30a6	00 80					.byte	$00,$80
.30a8	20 57 52	jsr $5257		jsr	FloatCompare
.30ab	20 21 52	jsr $5221		jsr	CompareEqual
.30ae	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.30b1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -24534
>30b4	d6 5f 00 00				.dword	$00005fd6
>30b8	00 80					.byte	$00,$80
.30ba	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -24534
>30bd	d6 5f 00 00				.dword	$00005fd6
>30c1	00 80					.byte	$00,$80
.30c3	20 57 52	jsr $5257		jsr	FloatCompare
.30c6	20 31 52	jsr $5231		jsr	CompareNotEqual
.30c9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>30cc	00 00 00 00				.dword	$00000000
>30d0	00 00					.byte	$00,$00
.30d2	20 57 52	jsr $5257		jsr	FloatCompare
.30d5	20 21 52	jsr $5221		jsr	CompareEqual
.30d8	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.30db	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -24534
>30de	d6 5f 00 00				.dword	$00005fd6
>30e2	00 80					.byte	$00,$80
.30e4	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -24534
>30e7	d6 5f 00 00				.dword	$00005fd6
>30eb	00 80					.byte	$00,$80
.30ed	20 57 52	jsr $5257		jsr	FloatCompare
.30f0	20 3f 52	jsr $523f		jsr	CompareGreater
.30f3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>30f6	00 00 00 00				.dword	$00000000
>30fa	00 00					.byte	$00,$00
.30fc	20 57 52	jsr $5257		jsr	FloatCompare
.30ff	20 21 52	jsr $5221		jsr	CompareEqual
.3102	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3105	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -24534
>3108	d6 5f 00 00				.dword	$00005fd6
>310c	00 80					.byte	$00,$80
.310e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -24534
>3111	d6 5f 00 00				.dword	$00005fd6
>3115	00 80					.byte	$00,$80
.3117	20 57 52	jsr $5257		jsr	FloatCompare
.311a	20 4f 52	jsr $524f		jsr	CompareGreaterEqual
.311d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>3120	01 00 00 00				.dword	$00000001
>3124	00 80					.byte	$00,$80
.3126	20 57 52	jsr $5257		jsr	FloatCompare
.3129	20 21 52	jsr $5221		jsr	CompareEqual
.312c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.312f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -24534
>3132	d6 5f 00 00				.dword	$00005fd6
>3136	00 80					.byte	$00,$80
.3138	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -24534
>313b	d6 5f 00 00				.dword	$00005fd6
>313f	00 80					.byte	$00,$80
.3141	20 57 52	jsr $5257		jsr	FloatCompare
.3144	20 37 52	jsr $5237		jsr	CompareLess
.3147	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>314a	00 00 00 00				.dword	$00000000
>314e	00 00					.byte	$00,$00
.3150	20 57 52	jsr $5257		jsr	FloatCompare
.3153	20 21 52	jsr $5221		jsr	CompareEqual
.3156	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3159	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -24534
>315c	d6 5f 00 00				.dword	$00005fd6
>3160	00 80					.byte	$00,$80
.3162	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -24534
>3165	d6 5f 00 00				.dword	$00005fd6
>3169	00 80					.byte	$00,$80
.316b	20 57 52	jsr $5257		jsr	FloatCompare
.316e	20 47 52	jsr $5247		jsr	CompareLessEqual
.3171	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>3174	01 00 00 00				.dword	$00000001
>3178	00 80					.byte	$00,$80
.317a	20 57 52	jsr $5257		jsr	FloatCompare
.317d	20 21 52	jsr $5221		jsr	CompareEqual
.3180	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3183	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 56.32574715
>3186	55 c8 a6 70				.dword	$70a6c855
>318a	e7 00					.byte	$e7,$00
.318c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 73.89973273
>318f	e2 54 e6 49				.dword	$49e654e2
>3193	e8 00					.byte	$e8,$00
.3195	20 96 51	jsr $5196		jsr	FloatAdd
.3198	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 130.22547987
>319b	86 dc 1c 41				.dword	$411cdc86
>319f	e9 00					.byte	$e9,$00
.31a1	20 57 52	jsr $5257		jsr	FloatCompare
.31a4	20 21 52	jsr $5221		jsr	CompareEqual
.31a7	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.31aa	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 56.32574715
>31ad	55 c8 a6 70				.dword	$70a6c855
>31b1	e7 00					.byte	$e7,$00
.31b3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 73.89973273
>31b6	e2 54 e6 49				.dword	$49e654e2
>31ba	e8 00					.byte	$e8,$00
.31bc	20 90 51	jsr $5190		jsr	FloatSubtract
.31bf	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -17.57398558
>31c2	e0 c2 4b 46				.dword	$464bc2e0
>31c6	e6 80					.byte	$e6,$80
.31c8	20 57 52	jsr $5257		jsr	FloatCompare
.31cb	20 21 52	jsr $5221		jsr	CompareEqual
.31ce	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.31d1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 56.32574715
>31d4	55 c8 a6 70				.dword	$70a6c855
>31d8	e7 00					.byte	$e7,$00
.31da	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 73.89973273
>31dd	e2 54 e6 49				.dword	$49e654e2
>31e1	e8 00					.byte	$e8,$00
.31e3	20 32 54	jsr $5432		jsr	FloatMultiply
.31e6	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 4162.45765976
>31e9	a5 d4 09 41				.dword	$4109d4a5
>31ed	ee 00					.byte	$ee,$00
.31ef	20 57 52	jsr $5257		jsr	FloatCompare
.31f2	20 21 52	jsr $5221		jsr	CompareEqual
.31f5	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.31f8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 56.32574715
>31fb	55 c8 a6 70				.dword	$70a6c855
>31ff	e7 00					.byte	$e7,$00
.3201	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 73.89973273
>3204	e2 54 e6 49				.dword	$49e654e2
>3208	e8 00					.byte	$e8,$00
.320a	20 bb 52	jsr $52bb		jsr	FloatDivide
.320d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0.76219149
>3210	a1 7d 8f 61				.dword	$618f7da1
>3214	e1 00					.byte	$e1,$00
.3216	20 57 52	jsr $5257		jsr	FloatCompare
.3219	20 21 52	jsr $5221		jsr	CompareEqual
.321c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.321f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -29.09184417
>3222	66 0c 5e 74				.dword	$745e0c66
>3226	e6 80					.byte	$e6,$80
.3228	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -29.09184417
>322b	66 0c 5e 74				.dword	$745e0c66
>322f	e6 80					.byte	$e6,$80
.3231	20 57 52	jsr $5257		jsr	FloatCompare
.3234	20 3f 52	jsr $523f		jsr	CompareGreater
.3237	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>323a	00 00 00 00				.dword	$00000000
>323e	00 00					.byte	$00,$00
.3240	20 57 52	jsr $5257		jsr	FloatCompare
.3243	20 21 52	jsr $5221		jsr	CompareEqual
.3246	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3249	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -29.09184417
>324c	66 0c 5e 74				.dword	$745e0c66
>3250	e6 80					.byte	$e6,$80
.3252	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -29.09184417
>3255	66 0c 5e 74				.dword	$745e0c66
>3259	e6 80					.byte	$e6,$80
.325b	20 57 52	jsr $5257		jsr	FloatCompare
.325e	20 4f 52	jsr $524f		jsr	CompareGreaterEqual
.3261	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>3264	01 00 00 00				.dword	$00000001
>3268	00 80					.byte	$00,$80
.326a	20 57 52	jsr $5257		jsr	FloatCompare
.326d	20 21 52	jsr $5221		jsr	CompareEqual
.3270	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3273	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -29.09184417
>3276	66 0c 5e 74				.dword	$745e0c66
>327a	e6 80					.byte	$e6,$80
.327c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -29.09184417
>327f	66 0c 5e 74				.dword	$745e0c66
>3283	e6 80					.byte	$e6,$80
.3285	20 57 52	jsr $5257		jsr	FloatCompare
.3288	20 37 52	jsr $5237		jsr	CompareLess
.328b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>328e	00 00 00 00				.dword	$00000000
>3292	00 00					.byte	$00,$00
.3294	20 57 52	jsr $5257		jsr	FloatCompare
.3297	20 21 52	jsr $5221		jsr	CompareEqual
.329a	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.329d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -29.09184417
>32a0	66 0c 5e 74				.dword	$745e0c66
>32a4	e6 80					.byte	$e6,$80
.32a6	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -29.09184417
>32a9	66 0c 5e 74				.dword	$745e0c66
>32ad	e6 80					.byte	$e6,$80
.32af	20 57 52	jsr $5257		jsr	FloatCompare
.32b2	20 47 52	jsr $5247		jsr	CompareLessEqual
.32b5	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>32b8	01 00 00 00				.dword	$00000001
>32bc	00 80					.byte	$00,$80
.32be	20 57 52	jsr $5257		jsr	FloatCompare
.32c1	20 21 52	jsr $5221		jsr	CompareEqual
.32c4	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.32c7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -29.09184417
>32ca	66 0c 5e 74				.dword	$745e0c66
>32ce	e6 80					.byte	$e6,$80
.32d0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -29.09184417
>32d3	66 0c 5e 74				.dword	$745e0c66
>32d7	e6 80					.byte	$e6,$80
.32d9	20 57 52	jsr $5257		jsr	FloatCompare
.32dc	20 21 52	jsr $5221		jsr	CompareEqual
.32df	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>32e2	01 00 00 00				.dword	$00000001
>32e6	00 80					.byte	$00,$80
.32e8	20 57 52	jsr $5257		jsr	FloatCompare
.32eb	20 21 52	jsr $5221		jsr	CompareEqual
.32ee	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.32f1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -29.09184417
>32f4	66 0c 5e 74				.dword	$745e0c66
>32f8	e6 80					.byte	$e6,$80
.32fa	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -29.09184417
>32fd	66 0c 5e 74				.dword	$745e0c66
>3301	e6 80					.byte	$e6,$80
.3303	20 57 52	jsr $5257		jsr	FloatCompare
.3306	20 31 52	jsr $5231		jsr	CompareNotEqual
.3309	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>330c	00 00 00 00				.dword	$00000000
>3310	00 00					.byte	$00,$00
.3312	20 57 52	jsr $5257		jsr	FloatCompare
.3315	20 21 52	jsr $5221		jsr	CompareEqual
.3318	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.331b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 31108
>331e	84 79 00 00				.dword	$00007984
>3322	00 00					.byte	$00,$00
.3324	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -46583
>3327	f7 b5 00 00				.dword	$0000b5f7
>332b	00 80					.byte	$00,$80
.332d	20 96 51	jsr $5196		jsr	FloatAdd
.3330	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -15475
>3333	73 3c 00 00				.dword	$00003c73
>3337	00 80					.byte	$00,$80
.3339	20 57 52	jsr $5257		jsr	FloatCompare
.333c	20 21 52	jsr $5221		jsr	CompareEqual
.333f	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3342	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 31108
>3345	84 79 00 00				.dword	$00007984
>3349	00 00					.byte	$00,$00
.334b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -46583
>334e	f7 b5 00 00				.dword	$0000b5f7
>3352	00 80					.byte	$00,$80
.3354	20 90 51	jsr $5190		jsr	FloatSubtract
.3357	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 77691
>335a	7b 2f 01 00				.dword	$00012f7b
>335e	00 00					.byte	$00,$00
.3360	20 57 52	jsr $5257		jsr	FloatCompare
.3363	20 21 52	jsr $5221		jsr	CompareEqual
.3366	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3369	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 31108
>336c	84 79 00 00				.dword	$00007984
>3370	00 00					.byte	$00,$00
.3372	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -46583
>3375	f7 b5 00 00				.dword	$0000b5f7
>3379	00 80					.byte	$00,$80
.337b	20 32 54	jsr $5432		jsr	FloatMultiply
.337e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1449103964
>3381	5c 92 5f 56				.dword	$565f925c
>3385	00 80					.byte	$00,$80
.3387	20 57 52	jsr $5257		jsr	FloatCompare
.338a	20 21 52	jsr $5221		jsr	CompareEqual
.338d	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3390	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 31108
>3393	84 79 00 00				.dword	$00007984
>3397	00 00					.byte	$00,$00
.3399	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -46583
>339c	f7 b5 00 00				.dword	$0000b5f7
>33a0	00 80					.byte	$00,$80
.33a2	20 bb 52	jsr $52bb		jsr	FloatDivide
.33a5	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -0.66779727
>33a8	86 61 7a 55				.dword	$557a6186
>33ac	e1 80					.byte	$e1,$80
.33ae	20 57 52	jsr $5257		jsr	FloatCompare
.33b1	20 21 52	jsr $5221		jsr	CompareEqual
.33b4	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.33b7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -46583
>33ba	f7 b5 00 00				.dword	$0000b5f7
>33be	00 80					.byte	$00,$80
.33c0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -46583
>33c3	f7 b5 00 00				.dword	$0000b5f7
>33c7	00 80					.byte	$00,$80
.33c9	20 57 52	jsr $5257		jsr	FloatCompare
.33cc	20 21 52	jsr $5221		jsr	CompareEqual
.33cf	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>33d2	01 00 00 00				.dword	$00000001
>33d6	00 80					.byte	$00,$80
.33d8	20 57 52	jsr $5257		jsr	FloatCompare
.33db	20 21 52	jsr $5221		jsr	CompareEqual
.33de	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.33e1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -46583
>33e4	f7 b5 00 00				.dword	$0000b5f7
>33e8	00 80					.byte	$00,$80
.33ea	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -46583
>33ed	f7 b5 00 00				.dword	$0000b5f7
>33f1	00 80					.byte	$00,$80
.33f3	20 57 52	jsr $5257		jsr	FloatCompare
.33f6	20 31 52	jsr $5231		jsr	CompareNotEqual
.33f9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>33fc	00 00 00 00				.dword	$00000000
>3400	00 00					.byte	$00,$00
.3402	20 57 52	jsr $5257		jsr	FloatCompare
.3405	20 21 52	jsr $5221		jsr	CompareEqual
.3408	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.340b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -46583
>340e	f7 b5 00 00				.dword	$0000b5f7
>3412	00 80					.byte	$00,$80
.3414	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -46583
>3417	f7 b5 00 00				.dword	$0000b5f7
>341b	00 80					.byte	$00,$80
.341d	20 57 52	jsr $5257		jsr	FloatCompare
.3420	20 3f 52	jsr $523f		jsr	CompareGreater
.3423	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>3426	00 00 00 00				.dword	$00000000
>342a	00 00					.byte	$00,$00
.342c	20 57 52	jsr $5257		jsr	FloatCompare
.342f	20 21 52	jsr $5221		jsr	CompareEqual
.3432	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3435	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -46583
>3438	f7 b5 00 00				.dword	$0000b5f7
>343c	00 80					.byte	$00,$80
.343e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -46583
>3441	f7 b5 00 00				.dword	$0000b5f7
>3445	00 80					.byte	$00,$80
.3447	20 57 52	jsr $5257		jsr	FloatCompare
.344a	20 4f 52	jsr $524f		jsr	CompareGreaterEqual
.344d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>3450	01 00 00 00				.dword	$00000001
>3454	00 80					.byte	$00,$80
.3456	20 57 52	jsr $5257		jsr	FloatCompare
.3459	20 21 52	jsr $5221		jsr	CompareEqual
.345c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.345f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -46583
>3462	f7 b5 00 00				.dword	$0000b5f7
>3466	00 80					.byte	$00,$80
.3468	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -46583
>346b	f7 b5 00 00				.dword	$0000b5f7
>346f	00 80					.byte	$00,$80
.3471	20 57 52	jsr $5257		jsr	FloatCompare
.3474	20 37 52	jsr $5237		jsr	CompareLess
.3477	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>347a	00 00 00 00				.dword	$00000000
>347e	00 00					.byte	$00,$00
.3480	20 57 52	jsr $5257		jsr	FloatCompare
.3483	20 21 52	jsr $5221		jsr	CompareEqual
.3486	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3489	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -46583
>348c	f7 b5 00 00				.dword	$0000b5f7
>3490	00 80					.byte	$00,$80
.3492	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -46583
>3495	f7 b5 00 00				.dword	$0000b5f7
>3499	00 80					.byte	$00,$80
.349b	20 57 52	jsr $5257		jsr	FloatCompare
.349e	20 47 52	jsr $5247		jsr	CompareLessEqual
.34a1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>34a4	01 00 00 00				.dword	$00000001
>34a8	00 80					.byte	$00,$80
.34aa	20 57 52	jsr $5257		jsr	FloatCompare
.34ad	20 21 52	jsr $5221		jsr	CompareEqual
.34b0	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.34b3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -3.59212764
>34b6	aa b5 f2 72				.dword	$72f2b5aa
>34ba	e3 80					.byte	$e3,$80
.34bc	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 59.82157609
>34bf	9f a5 a4 77				.dword	$77a4a59f
>34c3	e7 00					.byte	$e7,$00
.34c5	20 96 51	jsr $5196		jsr	FloatAdd
.34c8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 56.22944845
>34cb	44 7a 75 70				.dword	$70757a44
>34cf	e7 00					.byte	$e7,$00
.34d1	20 57 52	jsr $5257		jsr	FloatCompare
.34d4	20 21 52	jsr $5221		jsr	CompareEqual
.34d7	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.34da	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -3.59212764
>34dd	aa b5 f2 72				.dword	$72f2b5aa
>34e1	e3 80					.byte	$e3,$80
.34e3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 59.82157609
>34e6	9f a5 a4 77				.dword	$77a4a59f
>34ea	e7 00					.byte	$e7,$00
.34ec	20 90 51	jsr $5190		jsr	FloatSubtract
.34ef	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -63.41370373
>34f2	fa d0 d3 7e				.dword	$7ed3d0fa
>34f6	e7 80					.byte	$e7,$80
.34f8	20 57 52	jsr $5257		jsr	FloatCompare
.34fb	20 21 52	jsr $5221		jsr	CompareEqual
.34fe	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3501	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -3.59212764
>3504	aa b5 f2 72				.dword	$72f2b5aa
>3508	e3 80					.byte	$e3,$80
.350a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 59.82157609
>350d	9f a5 a4 77				.dword	$77a4a59f
>3511	e7 00					.byte	$e7,$00
.3513	20 32 54	jsr $5432		jsr	FloatMultiply
.3516	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -214.88673709
>3519	9a 80 71 6b				.dword	$6b71809a
>351d	e9 80					.byte	$e9,$80
.351f	20 57 52	jsr $5257		jsr	FloatCompare
.3522	20 21 52	jsr $5221		jsr	CompareEqual
.3525	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3528	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -3.59212764
>352b	aa b5 f2 72				.dword	$72f2b5aa
>352f	e3 80					.byte	$e3,$80
.3531	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 59.82157609
>3534	9f a5 a4 77				.dword	$77a4a59f
>3538	e7 00					.byte	$e7,$00
.353a	20 bb 52	jsr $52bb		jsr	FloatDivide
.353d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -0.06004736
>3540	3b 1c fa 7a				.dword	$7afa1c3b
>3544	dd 80					.byte	$dd,$80
.3546	20 57 52	jsr $5257		jsr	FloatCompare
.3549	20 21 52	jsr $5221		jsr	CompareEqual
.354c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.354f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 73.71175184
>3552	5e 35 b6 49				.dword	$49b6355e
>3556	e8 00					.byte	$e8,$00
.3558	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 73.71175184
>355b	5e 35 b6 49				.dword	$49b6355e
>355f	e8 00					.byte	$e8,$00
.3561	20 57 52	jsr $5257		jsr	FloatCompare
.3564	20 3f 52	jsr $523f		jsr	CompareGreater
.3567	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>356a	00 00 00 00				.dword	$00000000
>356e	00 00					.byte	$00,$00
.3570	20 57 52	jsr $5257		jsr	FloatCompare
.3573	20 21 52	jsr $5221		jsr	CompareEqual
.3576	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3579	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 73.71175184
>357c	5e 35 b6 49				.dword	$49b6355e
>3580	e8 00					.byte	$e8,$00
.3582	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 73.71175184
>3585	5e 35 b6 49				.dword	$49b6355e
>3589	e8 00					.byte	$e8,$00
.358b	20 57 52	jsr $5257		jsr	FloatCompare
.358e	20 4f 52	jsr $524f		jsr	CompareGreaterEqual
.3591	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>3594	01 00 00 00				.dword	$00000001
>3598	00 80					.byte	$00,$80
.359a	20 57 52	jsr $5257		jsr	FloatCompare
.359d	20 21 52	jsr $5221		jsr	CompareEqual
.35a0	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.35a3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 73.71175184
>35a6	5e 35 b6 49				.dword	$49b6355e
>35aa	e8 00					.byte	$e8,$00
.35ac	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 73.71175184
>35af	5e 35 b6 49				.dword	$49b6355e
>35b3	e8 00					.byte	$e8,$00
.35b5	20 57 52	jsr $5257		jsr	FloatCompare
.35b8	20 37 52	jsr $5237		jsr	CompareLess
.35bb	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>35be	00 00 00 00				.dword	$00000000
>35c2	00 00					.byte	$00,$00
.35c4	20 57 52	jsr $5257		jsr	FloatCompare
.35c7	20 21 52	jsr $5221		jsr	CompareEqual
.35ca	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.35cd	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 73.71175184
>35d0	5e 35 b6 49				.dword	$49b6355e
>35d4	e8 00					.byte	$e8,$00
.35d6	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 73.71175184
>35d9	5e 35 b6 49				.dword	$49b6355e
>35dd	e8 00					.byte	$e8,$00
.35df	20 57 52	jsr $5257		jsr	FloatCompare
.35e2	20 47 52	jsr $5247		jsr	CompareLessEqual
.35e5	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>35e8	01 00 00 00				.dword	$00000001
>35ec	00 80					.byte	$00,$80
.35ee	20 57 52	jsr $5257		jsr	FloatCompare
.35f1	20 21 52	jsr $5221		jsr	CompareEqual
.35f4	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.35f7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 73.71175184
>35fa	5e 35 b6 49				.dword	$49b6355e
>35fe	e8 00					.byte	$e8,$00
.3600	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 73.71175184
>3603	5e 35 b6 49				.dword	$49b6355e
>3607	e8 00					.byte	$e8,$00
.3609	20 57 52	jsr $5257		jsr	FloatCompare
.360c	20 21 52	jsr $5221		jsr	CompareEqual
.360f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>3612	01 00 00 00				.dword	$00000001
>3616	00 80					.byte	$00,$80
.3618	20 57 52	jsr $5257		jsr	FloatCompare
.361b	20 21 52	jsr $5221		jsr	CompareEqual
.361e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3621	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 73.71175184
>3624	5e 35 b6 49				.dword	$49b6355e
>3628	e8 00					.byte	$e8,$00
.362a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 73.71175184
>362d	5e 35 b6 49				.dword	$49b6355e
>3631	e8 00					.byte	$e8,$00
.3633	20 57 52	jsr $5257		jsr	FloatCompare
.3636	20 31 52	jsr $5231		jsr	CompareNotEqual
.3639	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>363c	00 00 00 00				.dword	$00000000
>3640	00 00					.byte	$00,$00
.3642	20 57 52	jsr $5257		jsr	FloatCompare
.3645	20 21 52	jsr $5221		jsr	CompareEqual
.3648	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.364b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 21763
>364e	03 55 00 00				.dword	$00005503
>3652	00 00					.byte	$00,$00
.3654	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1134
>3657	6e 04 00 00				.dword	$0000046e
>365b	00 80					.byte	$00,$80
.365d	20 96 51	jsr $5196		jsr	FloatAdd
.3660	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 20629
>3663	95 50 00 00				.dword	$00005095
>3667	00 00					.byte	$00,$00
.3669	20 57 52	jsr $5257		jsr	FloatCompare
.366c	20 21 52	jsr $5221		jsr	CompareEqual
.366f	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3672	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 21763
>3675	03 55 00 00				.dword	$00005503
>3679	00 00					.byte	$00,$00
.367b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1134
>367e	6e 04 00 00				.dword	$0000046e
>3682	00 80					.byte	$00,$80
.3684	20 90 51	jsr $5190		jsr	FloatSubtract
.3687	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 22897
>368a	71 59 00 00				.dword	$00005971
>368e	00 00					.byte	$00,$00
.3690	20 57 52	jsr $5257		jsr	FloatCompare
.3693	20 21 52	jsr $5221		jsr	CompareEqual
.3696	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3699	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 21763
>369c	03 55 00 00				.dword	$00005503
>36a0	00 00					.byte	$00,$00
.36a2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1134
>36a5	6e 04 00 00				.dword	$0000046e
>36a9	00 80					.byte	$00,$80
.36ab	20 32 54	jsr $5432		jsr	FloatMultiply
.36ae	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -24679242
>36b1	4a 93 78 01				.dword	$0178934a
>36b5	00 80					.byte	$00,$80
.36b7	20 57 52	jsr $5257		jsr	FloatCompare
.36ba	20 21 52	jsr $5221		jsr	CompareEqual
.36bd	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.36c0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 21763
>36c3	03 55 00 00				.dword	$00005503
>36c7	00 00					.byte	$00,$00
.36c9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1134
>36cc	6e 04 00 00				.dword	$0000046e
>36d0	00 80					.byte	$00,$80
.36d2	20 bb 52	jsr $52bb		jsr	FloatDivide
.36d5	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -19.19135802
>36d8	5b f3 c3 4c				.dword	$4cc3f35b
>36dc	e6 80					.byte	$e6,$80
.36de	20 57 52	jsr $5257		jsr	FloatCompare
.36e1	20 21 52	jsr $5221		jsr	CompareEqual
.36e4	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.36e7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1134
>36ea	6e 04 00 00				.dword	$0000046e
>36ee	00 80					.byte	$00,$80
.36f0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1134
>36f3	6e 04 00 00				.dword	$0000046e
>36f7	00 80					.byte	$00,$80
.36f9	20 57 52	jsr $5257		jsr	FloatCompare
.36fc	20 21 52	jsr $5221		jsr	CompareEqual
.36ff	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>3702	01 00 00 00				.dword	$00000001
>3706	00 80					.byte	$00,$80
.3708	20 57 52	jsr $5257		jsr	FloatCompare
.370b	20 21 52	jsr $5221		jsr	CompareEqual
.370e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3711	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1134
>3714	6e 04 00 00				.dword	$0000046e
>3718	00 80					.byte	$00,$80
.371a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1134
>371d	6e 04 00 00				.dword	$0000046e
>3721	00 80					.byte	$00,$80
.3723	20 57 52	jsr $5257		jsr	FloatCompare
.3726	20 31 52	jsr $5231		jsr	CompareNotEqual
.3729	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>372c	00 00 00 00				.dword	$00000000
>3730	00 00					.byte	$00,$00
.3732	20 57 52	jsr $5257		jsr	FloatCompare
.3735	20 21 52	jsr $5221		jsr	CompareEqual
.3738	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.373b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1134
>373e	6e 04 00 00				.dword	$0000046e
>3742	00 80					.byte	$00,$80
.3744	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1134
>3747	6e 04 00 00				.dword	$0000046e
>374b	00 80					.byte	$00,$80
.374d	20 57 52	jsr $5257		jsr	FloatCompare
.3750	20 3f 52	jsr $523f		jsr	CompareGreater
.3753	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>3756	00 00 00 00				.dword	$00000000
>375a	00 00					.byte	$00,$00
.375c	20 57 52	jsr $5257		jsr	FloatCompare
.375f	20 21 52	jsr $5221		jsr	CompareEqual
.3762	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3765	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1134
>3768	6e 04 00 00				.dword	$0000046e
>376c	00 80					.byte	$00,$80
.376e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1134
>3771	6e 04 00 00				.dword	$0000046e
>3775	00 80					.byte	$00,$80
.3777	20 57 52	jsr $5257		jsr	FloatCompare
.377a	20 4f 52	jsr $524f		jsr	CompareGreaterEqual
.377d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>3780	01 00 00 00				.dword	$00000001
>3784	00 80					.byte	$00,$80
.3786	20 57 52	jsr $5257		jsr	FloatCompare
.3789	20 21 52	jsr $5221		jsr	CompareEqual
.378c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.378f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1134
>3792	6e 04 00 00				.dword	$0000046e
>3796	00 80					.byte	$00,$80
.3798	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1134
>379b	6e 04 00 00				.dword	$0000046e
>379f	00 80					.byte	$00,$80
.37a1	20 57 52	jsr $5257		jsr	FloatCompare
.37a4	20 37 52	jsr $5237		jsr	CompareLess
.37a7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>37aa	00 00 00 00				.dword	$00000000
>37ae	00 00					.byte	$00,$00
.37b0	20 57 52	jsr $5257		jsr	FloatCompare
.37b3	20 21 52	jsr $5221		jsr	CompareEqual
.37b6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.37b9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1134
>37bc	6e 04 00 00				.dword	$0000046e
>37c0	00 80					.byte	$00,$80
.37c2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1134
>37c5	6e 04 00 00				.dword	$0000046e
>37c9	00 80					.byte	$00,$80
.37cb	20 57 52	jsr $5257		jsr	FloatCompare
.37ce	20 47 52	jsr $5247		jsr	CompareLessEqual
.37d1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>37d4	01 00 00 00				.dword	$00000001
>37d8	00 80					.byte	$00,$80
.37da	20 57 52	jsr $5257		jsr	FloatCompare
.37dd	20 21 52	jsr $5221		jsr	CompareEqual
.37e0	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.37e3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -26.81558273
>37e6	1f 28 43 6b				.dword	$6b43281f
>37ea	e6 80					.byte	$e6,$80
.37ec	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -47.20733781
>37ef	2e 28 6a 5e				.dword	$5e6a282e
>37f3	e7 80					.byte	$e7,$80
.37f5	20 96 51	jsr $5196		jsr	FloatAdd
.37f8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -74.02292055
>37fb	1f de 05 4a				.dword	$4a05de1f
>37ff	e8 80					.byte	$e8,$80
.3801	20 57 52	jsr $5257		jsr	FloatCompare
.3804	20 21 52	jsr $5221		jsr	CompareEqual
.3807	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.380a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -26.81558273
>380d	1f 28 43 6b				.dword	$6b43281f
>3811	e6 80					.byte	$e6,$80
.3813	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -47.20733781
>3816	2e 28 6a 5e				.dword	$5e6a282e
>381a	e7 80					.byte	$e7,$80
.381c	20 90 51	jsr $5190		jsr	FloatSubtract
.381f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 20.39175508
>3822	3e 28 91 51				.dword	$5191283e
>3826	e6 00					.byte	$e6,$00
.3828	20 57 52	jsr $5257		jsr	FloatCompare
.382b	20 21 52	jsr $5221		jsr	CompareEqual
.382e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3831	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -26.81558273
>3834	1f 28 43 6b				.dword	$6b43281f
>3838	e6 80					.byte	$e6,$80
.383a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -47.20733781
>383d	2e 28 6a 5e				.dword	$5e6a282e
>3841	e7 80					.byte	$e7,$80
.3843	20 32 54	jsr $5432		jsr	FloatMultiply
.3846	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 1265.89227276
>3849	c0 46 1e 4f				.dword	$4f1e46c0
>384d	ec 00					.byte	$ec,$00
.384f	20 57 52	jsr $5257		jsr	FloatCompare
.3852	20 21 52	jsr $5221		jsr	CompareEqual
.3855	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3858	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -26.81558273
>385b	1f 28 43 6b				.dword	$6b43281f
>385f	e6 80					.byte	$e6,$80
.3861	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -47.20733781
>3864	2e 28 6a 5e				.dword	$5e6a282e
>3868	e7 80					.byte	$e7,$80
.386a	20 bb 52	jsr $52bb		jsr	FloatDivide
.386d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0.56803844
>3870	cd 7b b5 48				.dword	$48b57bcd
>3874	e1 00					.byte	$e1,$00
.3876	20 57 52	jsr $5257		jsr	FloatCompare
.3879	20 21 52	jsr $5221		jsr	CompareEqual
.387c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.387f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -7.13387867
>3882	f6 5d 24 72				.dword	$72245df6
>3886	e4 80					.byte	$e4,$80
.3888	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -7.13387867
>388b	f6 5d 24 72				.dword	$72245df6
>388f	e4 80					.byte	$e4,$80
.3891	20 57 52	jsr $5257		jsr	FloatCompare
.3894	20 3f 52	jsr $523f		jsr	CompareGreater
.3897	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>389a	00 00 00 00				.dword	$00000000
>389e	00 00					.byte	$00,$00
.38a0	20 57 52	jsr $5257		jsr	FloatCompare
.38a3	20 21 52	jsr $5221		jsr	CompareEqual
.38a6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.38a9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -7.13387867
>38ac	f6 5d 24 72				.dword	$72245df6
>38b0	e4 80					.byte	$e4,$80
.38b2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -7.13387867
>38b5	f6 5d 24 72				.dword	$72245df6
>38b9	e4 80					.byte	$e4,$80
.38bb	20 57 52	jsr $5257		jsr	FloatCompare
.38be	20 4f 52	jsr $524f		jsr	CompareGreaterEqual
.38c1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>38c4	01 00 00 00				.dword	$00000001
>38c8	00 80					.byte	$00,$80
.38ca	20 57 52	jsr $5257		jsr	FloatCompare
.38cd	20 21 52	jsr $5221		jsr	CompareEqual
.38d0	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.38d3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -7.13387867
>38d6	f6 5d 24 72				.dword	$72245df6
>38da	e4 80					.byte	$e4,$80
.38dc	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -7.13387867
>38df	f6 5d 24 72				.dword	$72245df6
>38e3	e4 80					.byte	$e4,$80
.38e5	20 57 52	jsr $5257		jsr	FloatCompare
.38e8	20 37 52	jsr $5237		jsr	CompareLess
.38eb	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>38ee	00 00 00 00				.dword	$00000000
>38f2	00 00					.byte	$00,$00
.38f4	20 57 52	jsr $5257		jsr	FloatCompare
.38f7	20 21 52	jsr $5221		jsr	CompareEqual
.38fa	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.38fd	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -7.13387867
>3900	f6 5d 24 72				.dword	$72245df6
>3904	e4 80					.byte	$e4,$80
.3906	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -7.13387867
>3909	f6 5d 24 72				.dword	$72245df6
>390d	e4 80					.byte	$e4,$80
.390f	20 57 52	jsr $5257		jsr	FloatCompare
.3912	20 47 52	jsr $5247		jsr	CompareLessEqual
.3915	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>3918	01 00 00 00				.dword	$00000001
>391c	00 80					.byte	$00,$80
.391e	20 57 52	jsr $5257		jsr	FloatCompare
.3921	20 21 52	jsr $5221		jsr	CompareEqual
.3924	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3927	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -7.13387867
>392a	f6 5d 24 72				.dword	$72245df6
>392e	e4 80					.byte	$e4,$80
.3930	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -7.13387867
>3933	f6 5d 24 72				.dword	$72245df6
>3937	e4 80					.byte	$e4,$80
.3939	20 57 52	jsr $5257		jsr	FloatCompare
.393c	20 21 52	jsr $5221		jsr	CompareEqual
.393f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>3942	01 00 00 00				.dword	$00000001
>3946	00 80					.byte	$00,$80
.3948	20 57 52	jsr $5257		jsr	FloatCompare
.394b	20 21 52	jsr $5221		jsr	CompareEqual
.394e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3951	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -7.13387867
>3954	f6 5d 24 72				.dword	$72245df6
>3958	e4 80					.byte	$e4,$80
.395a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -7.13387867
>395d	f6 5d 24 72				.dword	$72245df6
>3961	e4 80					.byte	$e4,$80
.3963	20 57 52	jsr $5257		jsr	FloatCompare
.3966	20 31 52	jsr $5231		jsr	CompareNotEqual
.3969	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>396c	00 00 00 00				.dword	$00000000
>3970	00 00					.byte	$00,$00
.3972	20 57 52	jsr $5257		jsr	FloatCompare
.3975	20 21 52	jsr $5221		jsr	CompareEqual
.3978	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.397b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 31718
>397e	e6 7b 00 00				.dword	$00007be6
>3982	00 00					.byte	$00,$00
.3984	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 41002
>3987	2a a0 00 00				.dword	$0000a02a
>398b	00 00					.byte	$00,$00
.398d	20 96 51	jsr $5196		jsr	FloatAdd
.3990	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 72720
>3993	10 1c 01 00				.dword	$00011c10
>3997	00 00					.byte	$00,$00
.3999	20 57 52	jsr $5257		jsr	FloatCompare
.399c	20 21 52	jsr $5221		jsr	CompareEqual
.399f	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.39a2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 31718
>39a5	e6 7b 00 00				.dword	$00007be6
>39a9	00 00					.byte	$00,$00
.39ab	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 41002
>39ae	2a a0 00 00				.dword	$0000a02a
>39b2	00 00					.byte	$00,$00
.39b4	20 90 51	jsr $5190		jsr	FloatSubtract
.39b7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -9284
>39ba	44 24 00 00				.dword	$00002444
>39be	00 80					.byte	$00,$80
.39c0	20 57 52	jsr $5257		jsr	FloatCompare
.39c3	20 21 52	jsr $5221		jsr	CompareEqual
.39c6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.39c9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 31718
>39cc	e6 7b 00 00				.dword	$00007be6
>39d0	00 00					.byte	$00,$00
.39d2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 41002
>39d5	2a a0 00 00				.dword	$0000a02a
>39d9	00 00					.byte	$00,$00
.39db	20 32 54	jsr $5432		jsr	FloatMultiply
.39de	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 1300501436
>39e1	bc 13 84 4d				.dword	$4d8413bc
>39e5	00 00					.byte	$00,$00
.39e7	20 57 52	jsr $5257		jsr	FloatCompare
.39ea	20 21 52	jsr $5221		jsr	CompareEqual
.39ed	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.39f0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 31718
>39f3	e6 7b 00 00				.dword	$00007be6
>39f7	00 00					.byte	$00,$00
.39f9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 41002
>39fc	2a a0 00 00				.dword	$0000a02a
>3a00	00 00					.byte	$00,$00
.3a02	20 bb 52	jsr $52bb		jsr	FloatDivide
.3a05	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0.77357202
>3a08	70 68 04 63				.dword	$63046870
>3a0c	e1 00					.byte	$e1,$00
.3a0e	20 57 52	jsr $5257		jsr	FloatCompare
.3a11	20 21 52	jsr $5221		jsr	CompareEqual
.3a14	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3a17	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 41002
>3a1a	2a a0 00 00				.dword	$0000a02a
>3a1e	00 00					.byte	$00,$00
.3a20	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 41002
>3a23	2a a0 00 00				.dword	$0000a02a
>3a27	00 00					.byte	$00,$00
.3a29	20 57 52	jsr $5257		jsr	FloatCompare
.3a2c	20 21 52	jsr $5221		jsr	CompareEqual
.3a2f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>3a32	01 00 00 00				.dword	$00000001
>3a36	00 80					.byte	$00,$80
.3a38	20 57 52	jsr $5257		jsr	FloatCompare
.3a3b	20 21 52	jsr $5221		jsr	CompareEqual
.3a3e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3a41	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 41002
>3a44	2a a0 00 00				.dword	$0000a02a
>3a48	00 00					.byte	$00,$00
.3a4a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 41002
>3a4d	2a a0 00 00				.dword	$0000a02a
>3a51	00 00					.byte	$00,$00
.3a53	20 57 52	jsr $5257		jsr	FloatCompare
.3a56	20 31 52	jsr $5231		jsr	CompareNotEqual
.3a59	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>3a5c	00 00 00 00				.dword	$00000000
>3a60	00 00					.byte	$00,$00
.3a62	20 57 52	jsr $5257		jsr	FloatCompare
.3a65	20 21 52	jsr $5221		jsr	CompareEqual
.3a68	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3a6b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 41002
>3a6e	2a a0 00 00				.dword	$0000a02a
>3a72	00 00					.byte	$00,$00
.3a74	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 41002
>3a77	2a a0 00 00				.dword	$0000a02a
>3a7b	00 00					.byte	$00,$00
.3a7d	20 57 52	jsr $5257		jsr	FloatCompare
.3a80	20 3f 52	jsr $523f		jsr	CompareGreater
.3a83	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>3a86	00 00 00 00				.dword	$00000000
>3a8a	00 00					.byte	$00,$00
.3a8c	20 57 52	jsr $5257		jsr	FloatCompare
.3a8f	20 21 52	jsr $5221		jsr	CompareEqual
.3a92	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3a95	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 41002
>3a98	2a a0 00 00				.dword	$0000a02a
>3a9c	00 00					.byte	$00,$00
.3a9e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 41002
>3aa1	2a a0 00 00				.dword	$0000a02a
>3aa5	00 00					.byte	$00,$00
.3aa7	20 57 52	jsr $5257		jsr	FloatCompare
.3aaa	20 4f 52	jsr $524f		jsr	CompareGreaterEqual
.3aad	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>3ab0	01 00 00 00				.dword	$00000001
>3ab4	00 80					.byte	$00,$80
.3ab6	20 57 52	jsr $5257		jsr	FloatCompare
.3ab9	20 21 52	jsr $5221		jsr	CompareEqual
.3abc	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3abf	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 41002
>3ac2	2a a0 00 00				.dword	$0000a02a
>3ac6	00 00					.byte	$00,$00
.3ac8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 41002
>3acb	2a a0 00 00				.dword	$0000a02a
>3acf	00 00					.byte	$00,$00
.3ad1	20 57 52	jsr $5257		jsr	FloatCompare
.3ad4	20 37 52	jsr $5237		jsr	CompareLess
.3ad7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>3ada	00 00 00 00				.dword	$00000000
>3ade	00 00					.byte	$00,$00
.3ae0	20 57 52	jsr $5257		jsr	FloatCompare
.3ae3	20 21 52	jsr $5221		jsr	CompareEqual
.3ae6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3ae9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 41002
>3aec	2a a0 00 00				.dword	$0000a02a
>3af0	00 00					.byte	$00,$00
.3af2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 41002
>3af5	2a a0 00 00				.dword	$0000a02a
>3af9	00 00					.byte	$00,$00
.3afb	20 57 52	jsr $5257		jsr	FloatCompare
.3afe	20 47 52	jsr $5247		jsr	CompareLessEqual
.3b01	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>3b04	01 00 00 00				.dword	$00000001
>3b08	00 80					.byte	$00,$80
.3b0a	20 57 52	jsr $5257		jsr	FloatCompare
.3b0d	20 21 52	jsr $5221		jsr	CompareEqual
.3b10	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3b13	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 66.39888232
>3b16	27 1d 66 42				.dword	$42661d27
>3b1a	e8 00					.byte	$e8,$00
.3b1c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -17.05499312
>3b1f	1e 50 38 44				.dword	$4438501e
>3b23	e6 80					.byte	$e6,$80
.3b25	20 96 51	jsr $5196		jsr	FloatAdd
.3b28	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 49.3438892
>3b2b	3f 12 b0 62				.dword	$62b0123f
>3b2f	e7 00					.byte	$e7,$00
.3b31	20 57 52	jsr $5257		jsr	FloatCompare
.3b34	20 21 52	jsr $5221		jsr	CompareEqual
.3b37	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3b3a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 66.39888232
>3b3d	27 1d 66 42				.dword	$42661d27
>3b41	e8 00					.byte	$e8,$00
.3b43	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -17.05499312
>3b46	1e 50 38 44				.dword	$4438501e
>3b4a	e6 80					.byte	$e6,$80
.3b4c	20 90 51	jsr $5190		jsr	FloatSubtract
.3b4f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 83.45387544
>3b52	2e 31 74 53				.dword	$5374312e
>3b56	e8 00					.byte	$e8,$00
.3b58	20 57 52	jsr $5257		jsr	FloatCompare
.3b5b	20 21 52	jsr $5221		jsr	CompareEqual
.3b5e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3b61	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 66.39888232
>3b64	27 1d 66 42				.dword	$42661d27
>3b68	e8 00					.byte	$e8,$00
.3b6a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -17.05499312
>3b6d	1e 50 38 44				.dword	$4438501e
>3b71	e6 80					.byte	$e6,$80
.3b73	20 32 54	jsr $5432		jsr	FloatMultiply
.3b76	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1132.43248085
>3b79	71 eb c6 46				.dword	$46c6eb71
>3b7d	ec 80					.byte	$ec,$80
.3b7f	20 57 52	jsr $5257		jsr	FloatCompare
.3b82	20 21 52	jsr $5221		jsr	CompareEqual
.3b85	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3b88	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 66.39888232
>3b8b	27 1d 66 42				.dword	$42661d27
>3b8f	e8 00					.byte	$e8,$00
.3b91	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -17.05499312
>3b94	1e 50 38 44				.dword	$4438501e
>3b98	e6 80					.byte	$e6,$80
.3b9a	20 bb 52	jsr $52bb		jsr	FloatDivide
.3b9d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -3.89322246
>3ba0	45 47 95 7c				.dword	$7c954745
>3ba4	e3 80					.byte	$e3,$80
.3ba6	20 57 52	jsr $5257		jsr	FloatCompare
.3ba9	20 21 52	jsr $5221		jsr	CompareEqual
.3bac	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3baf	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -45.81380092
>3bb2	84 aa a0 5b				.dword	$5ba0aa84
>3bb6	e7 80					.byte	$e7,$80
.3bb8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -60.9392565
>3bbb	3a e6 e0 79				.dword	$79e0e63a
>3bbf	e7 80					.byte	$e7,$80
.3bc1	20 57 52	jsr $5257		jsr	FloatCompare
.3bc4	20 3f 52	jsr $523f		jsr	CompareGreater
.3bc7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>3bca	01 00 00 00				.dword	$00000001
>3bce	00 80					.byte	$00,$80
.3bd0	20 57 52	jsr $5257		jsr	FloatCompare
.3bd3	20 21 52	jsr $5221		jsr	CompareEqual
.3bd6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3bd9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -45.81380092
>3bdc	84 aa a0 5b				.dword	$5ba0aa84
>3be0	e7 80					.byte	$e7,$80
.3be2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -60.9392565
>3be5	3a e6 e0 79				.dword	$79e0e63a
>3be9	e7 80					.byte	$e7,$80
.3beb	20 57 52	jsr $5257		jsr	FloatCompare
.3bee	20 4f 52	jsr $524f		jsr	CompareGreaterEqual
.3bf1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>3bf4	01 00 00 00				.dword	$00000001
>3bf8	00 80					.byte	$00,$80
.3bfa	20 57 52	jsr $5257		jsr	FloatCompare
.3bfd	20 21 52	jsr $5221		jsr	CompareEqual
.3c00	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3c03	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -45.81380092
>3c06	84 aa a0 5b				.dword	$5ba0aa84
>3c0a	e7 80					.byte	$e7,$80
.3c0c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -60.9392565
>3c0f	3a e6 e0 79				.dword	$79e0e63a
>3c13	e7 80					.byte	$e7,$80
.3c15	20 57 52	jsr $5257		jsr	FloatCompare
.3c18	20 37 52	jsr $5237		jsr	CompareLess
.3c1b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>3c1e	00 00 00 00				.dword	$00000000
>3c22	00 00					.byte	$00,$00
.3c24	20 57 52	jsr $5257		jsr	FloatCompare
.3c27	20 21 52	jsr $5221		jsr	CompareEqual
.3c2a	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3c2d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -45.81380092
>3c30	84 aa a0 5b				.dword	$5ba0aa84
>3c34	e7 80					.byte	$e7,$80
.3c36	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -60.9392565
>3c39	3a e6 e0 79				.dword	$79e0e63a
>3c3d	e7 80					.byte	$e7,$80
.3c3f	20 57 52	jsr $5257		jsr	FloatCompare
.3c42	20 47 52	jsr $5247		jsr	CompareLessEqual
.3c45	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>3c48	00 00 00 00				.dword	$00000000
>3c4c	00 00					.byte	$00,$00
.3c4e	20 57 52	jsr $5257		jsr	FloatCompare
.3c51	20 21 52	jsr $5221		jsr	CompareEqual
.3c54	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3c57	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -45.81380092
>3c5a	84 aa a0 5b				.dword	$5ba0aa84
>3c5e	e7 80					.byte	$e7,$80
.3c60	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -60.9392565
>3c63	3a e6 e0 79				.dword	$79e0e63a
>3c67	e7 80					.byte	$e7,$80
.3c69	20 57 52	jsr $5257		jsr	FloatCompare
.3c6c	20 21 52	jsr $5221		jsr	CompareEqual
.3c6f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>3c72	00 00 00 00				.dword	$00000000
>3c76	00 00					.byte	$00,$00
.3c78	20 57 52	jsr $5257		jsr	FloatCompare
.3c7b	20 21 52	jsr $5221		jsr	CompareEqual
.3c7e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3c81	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -45.81380092
>3c84	84 aa a0 5b				.dword	$5ba0aa84
>3c88	e7 80					.byte	$e7,$80
.3c8a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -60.9392565
>3c8d	3a e6 e0 79				.dword	$79e0e63a
>3c91	e7 80					.byte	$e7,$80
.3c93	20 57 52	jsr $5257		jsr	FloatCompare
.3c96	20 31 52	jsr $5231		jsr	CompareNotEqual
.3c99	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>3c9c	01 00 00 00				.dword	$00000001
>3ca0	00 80					.byte	$00,$80
.3ca2	20 57 52	jsr $5257		jsr	FloatCompare
.3ca5	20 21 52	jsr $5221		jsr	CompareEqual
.3ca8	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3cab	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -3028
>3cae	d4 0b 00 00				.dword	$00000bd4
>3cb2	00 80					.byte	$00,$80
.3cb4	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 2827
>3cb7	0b 0b 00 00				.dword	$00000b0b
>3cbb	00 00					.byte	$00,$00
.3cbd	20 96 51	jsr $5196		jsr	FloatAdd
.3cc0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -201
>3cc3	c9 00 00 00				.dword	$000000c9
>3cc7	00 80					.byte	$00,$80
.3cc9	20 57 52	jsr $5257		jsr	FloatCompare
.3ccc	20 21 52	jsr $5221		jsr	CompareEqual
.3ccf	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3cd2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -3028
>3cd5	d4 0b 00 00				.dword	$00000bd4
>3cd9	00 80					.byte	$00,$80
.3cdb	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 2827
>3cde	0b 0b 00 00				.dword	$00000b0b
>3ce2	00 00					.byte	$00,$00
.3ce4	20 90 51	jsr $5190		jsr	FloatSubtract
.3ce7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -5855
>3cea	df 16 00 00				.dword	$000016df
>3cee	00 80					.byte	$00,$80
.3cf0	20 57 52	jsr $5257		jsr	FloatCompare
.3cf3	20 21 52	jsr $5221		jsr	CompareEqual
.3cf6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3cf9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -3028
>3cfc	d4 0b 00 00				.dword	$00000bd4
>3d00	00 80					.byte	$00,$80
.3d02	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 2827
>3d05	0b 0b 00 00				.dword	$00000b0b
>3d09	00 00					.byte	$00,$00
.3d0b	20 32 54	jsr $5432		jsr	FloatMultiply
.3d0e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -8560156
>3d11	1c 9e 82 00				.dword	$00829e1c
>3d15	00 80					.byte	$00,$80
.3d17	20 57 52	jsr $5257		jsr	FloatCompare
.3d1a	20 21 52	jsr $5221		jsr	CompareEqual
.3d1d	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3d20	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -3028
>3d23	d4 0b 00 00				.dword	$00000bd4
>3d27	00 80					.byte	$00,$80
.3d29	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 2827
>3d2c	0b 0b 00 00				.dword	$00000b0b
>3d30	00 00					.byte	$00,$00
.3d32	20 bb 52	jsr $52bb		jsr	FloatDivide
.3d35	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1.07110011
>3d38	7a e7 8c 44				.dword	$448ce77a
>3d3c	e2 80					.byte	$e2,$80
.3d3e	20 57 52	jsr $5257		jsr	FloatCompare
.3d41	20 21 52	jsr $5221		jsr	CompareEqual
.3d44	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3d47	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -3028
>3d4a	d4 0b 00 00				.dword	$00000bd4
>3d4e	00 80					.byte	$00,$80
.3d50	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 2827
>3d53	0b 0b 00 00				.dword	$00000b0b
>3d57	00 00					.byte	$00,$00
.3d59	20 57 52	jsr $5257		jsr	FloatCompare
.3d5c	20 21 52	jsr $5221		jsr	CompareEqual
.3d5f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>3d62	00 00 00 00				.dword	$00000000
>3d66	00 00					.byte	$00,$00
.3d68	20 57 52	jsr $5257		jsr	FloatCompare
.3d6b	20 21 52	jsr $5221		jsr	CompareEqual
.3d6e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3d71	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -3028
>3d74	d4 0b 00 00				.dword	$00000bd4
>3d78	00 80					.byte	$00,$80
.3d7a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 2827
>3d7d	0b 0b 00 00				.dword	$00000b0b
>3d81	00 00					.byte	$00,$00
.3d83	20 57 52	jsr $5257		jsr	FloatCompare
.3d86	20 31 52	jsr $5231		jsr	CompareNotEqual
.3d89	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>3d8c	01 00 00 00				.dword	$00000001
>3d90	00 80					.byte	$00,$80
.3d92	20 57 52	jsr $5257		jsr	FloatCompare
.3d95	20 21 52	jsr $5221		jsr	CompareEqual
.3d98	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3d9b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -3028
>3d9e	d4 0b 00 00				.dword	$00000bd4
>3da2	00 80					.byte	$00,$80
.3da4	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 2827
>3da7	0b 0b 00 00				.dword	$00000b0b
>3dab	00 00					.byte	$00,$00
.3dad	20 57 52	jsr $5257		jsr	FloatCompare
.3db0	20 3f 52	jsr $523f		jsr	CompareGreater
.3db3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>3db6	00 00 00 00				.dword	$00000000
>3dba	00 00					.byte	$00,$00
.3dbc	20 57 52	jsr $5257		jsr	FloatCompare
.3dbf	20 21 52	jsr $5221		jsr	CompareEqual
.3dc2	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3dc5	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -3028
>3dc8	d4 0b 00 00				.dword	$00000bd4
>3dcc	00 80					.byte	$00,$80
.3dce	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 2827
>3dd1	0b 0b 00 00				.dword	$00000b0b
>3dd5	00 00					.byte	$00,$00
.3dd7	20 57 52	jsr $5257		jsr	FloatCompare
.3dda	20 4f 52	jsr $524f		jsr	CompareGreaterEqual
.3ddd	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>3de0	00 00 00 00				.dword	$00000000
>3de4	00 00					.byte	$00,$00
.3de6	20 57 52	jsr $5257		jsr	FloatCompare
.3de9	20 21 52	jsr $5221		jsr	CompareEqual
.3dec	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3def	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -3028
>3df2	d4 0b 00 00				.dword	$00000bd4
>3df6	00 80					.byte	$00,$80
.3df8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 2827
>3dfb	0b 0b 00 00				.dword	$00000b0b
>3dff	00 00					.byte	$00,$00
.3e01	20 57 52	jsr $5257		jsr	FloatCompare
.3e04	20 37 52	jsr $5237		jsr	CompareLess
.3e07	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>3e0a	01 00 00 00				.dword	$00000001
>3e0e	00 80					.byte	$00,$80
.3e10	20 57 52	jsr $5257		jsr	FloatCompare
.3e13	20 21 52	jsr $5221		jsr	CompareEqual
.3e16	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3e19	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -3028
>3e1c	d4 0b 00 00				.dword	$00000bd4
>3e20	00 80					.byte	$00,$80
.3e22	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 2827
>3e25	0b 0b 00 00				.dword	$00000b0b
>3e29	00 00					.byte	$00,$00
.3e2b	20 57 52	jsr $5257		jsr	FloatCompare
.3e2e	20 47 52	jsr $5247		jsr	CompareLessEqual
.3e31	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>3e34	01 00 00 00				.dword	$00000001
>3e38	00 80					.byte	$00,$80
.3e3a	20 57 52	jsr $5257		jsr	FloatCompare
.3e3d	20 21 52	jsr $5221		jsr	CompareEqual
.3e40	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3e43	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 77.79663076
>3e46	fe ef cb 4d				.dword	$4dcbeffe
>3e4a	e8 00					.byte	$e8,$00
.3e4c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 2.05321131
>3e4f	35 e8 b3 41				.dword	$41b3e835
>3e53	e3 00					.byte	$e3,$00
.3e55	20 96 51	jsr $5196		jsr	FloatAdd
.3e58	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 79.84984207
>3e5b	40 8f d9 4f				.dword	$4fd98f40
>3e5f	e8 00					.byte	$e8,$00
.3e61	20 57 52	jsr $5257		jsr	FloatCompare
.3e64	20 21 52	jsr $5221		jsr	CompareEqual
.3e67	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3e6a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 77.79663076
>3e6d	fe ef cb 4d				.dword	$4dcbeffe
>3e71	e8 00					.byte	$e8,$00
.3e73	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 2.05321131
>3e76	35 e8 b3 41				.dword	$41b3e835
>3e7a	e3 00					.byte	$e3,$00
.3e7c	20 90 51	jsr $5190		jsr	FloatSubtract
.3e7f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 75.74341945
>3e82	bd 50 be 4b				.dword	$4bbe50bd
>3e86	e8 00					.byte	$e8,$00
.3e88	20 57 52	jsr $5257		jsr	FloatCompare
.3e8b	20 21 52	jsr $5221		jsr	CompareEqual
.3e8e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3e91	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 77.79663076
>3e94	fe ef cb 4d				.dword	$4dcbeffe
>3e98	e8 00					.byte	$e8,$00
.3e9a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 2.05321131
>3e9d	35 e8 b3 41				.dword	$41b3e835
>3ea1	e3 00					.byte	$e3,$00
.3ea3	20 32 54	jsr $5432		jsr	FloatMultiply
.3ea6	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 159.73292188
>3ea9	62 d0 dd 4f				.dword	$4fddd062
>3ead	e9 00					.byte	$e9,$00
.3eaf	20 57 52	jsr $5257		jsr	FloatCompare
.3eb2	20 21 52	jsr $5221		jsr	CompareEqual
.3eb5	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3eb8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 77.79663076
>3ebb	fe ef cb 4d				.dword	$4dcbeffe
>3ebf	e8 00					.byte	$e8,$00
.3ec1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 2.05321131
>3ec4	35 e8 b3 41				.dword	$41b3e835
>3ec8	e3 00					.byte	$e3,$00
.3eca	20 bb 52	jsr $52bb		jsr	FloatDivide
.3ecd	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 37.89022129
>3ed0	16 cb c7 4b				.dword	$4bc7cb16
>3ed4	e7 00					.byte	$e7,$00
.3ed6	20 57 52	jsr $5257		jsr	FloatCompare
.3ed9	20 21 52	jsr $5221		jsr	CompareEqual
.3edc	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3edf	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -77.82603061
>3ee2	be 76 d3 4d				.dword	$4dd376be
>3ee6	e8 80					.byte	$e8,$80
.3ee8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -77.82603061
>3eeb	be 76 d3 4d				.dword	$4dd376be
>3eef	e8 80					.byte	$e8,$80
.3ef1	20 57 52	jsr $5257		jsr	FloatCompare
.3ef4	20 3f 52	jsr $523f		jsr	CompareGreater
.3ef7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>3efa	00 00 00 00				.dword	$00000000
>3efe	00 00					.byte	$00,$00
.3f00	20 57 52	jsr $5257		jsr	FloatCompare
.3f03	20 21 52	jsr $5221		jsr	CompareEqual
.3f06	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3f09	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -77.82603061
>3f0c	be 76 d3 4d				.dword	$4dd376be
>3f10	e8 80					.byte	$e8,$80
.3f12	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -77.82603061
>3f15	be 76 d3 4d				.dword	$4dd376be
>3f19	e8 80					.byte	$e8,$80
.3f1b	20 57 52	jsr $5257		jsr	FloatCompare
.3f1e	20 4f 52	jsr $524f		jsr	CompareGreaterEqual
.3f21	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>3f24	01 00 00 00				.dword	$00000001
>3f28	00 80					.byte	$00,$80
.3f2a	20 57 52	jsr $5257		jsr	FloatCompare
.3f2d	20 21 52	jsr $5221		jsr	CompareEqual
.3f30	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3f33	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -77.82603061
>3f36	be 76 d3 4d				.dword	$4dd376be
>3f3a	e8 80					.byte	$e8,$80
.3f3c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -77.82603061
>3f3f	be 76 d3 4d				.dword	$4dd376be
>3f43	e8 80					.byte	$e8,$80
.3f45	20 57 52	jsr $5257		jsr	FloatCompare
.3f48	20 37 52	jsr $5237		jsr	CompareLess
.3f4b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>3f4e	00 00 00 00				.dword	$00000000
>3f52	00 00					.byte	$00,$00
.3f54	20 57 52	jsr $5257		jsr	FloatCompare
.3f57	20 21 52	jsr $5221		jsr	CompareEqual
.3f5a	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3f5d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -77.82603061
>3f60	be 76 d3 4d				.dword	$4dd376be
>3f64	e8 80					.byte	$e8,$80
.3f66	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -77.82603061
>3f69	be 76 d3 4d				.dword	$4dd376be
>3f6d	e8 80					.byte	$e8,$80
.3f6f	20 57 52	jsr $5257		jsr	FloatCompare
.3f72	20 47 52	jsr $5247		jsr	CompareLessEqual
.3f75	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>3f78	01 00 00 00				.dword	$00000001
>3f7c	00 80					.byte	$00,$80
.3f7e	20 57 52	jsr $5257		jsr	FloatCompare
.3f81	20 21 52	jsr $5221		jsr	CompareEqual
.3f84	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3f87	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -77.82603061
>3f8a	be 76 d3 4d				.dword	$4dd376be
>3f8e	e8 80					.byte	$e8,$80
.3f90	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -77.82603061
>3f93	be 76 d3 4d				.dword	$4dd376be
>3f97	e8 80					.byte	$e8,$80
.3f99	20 57 52	jsr $5257		jsr	FloatCompare
.3f9c	20 21 52	jsr $5221		jsr	CompareEqual
.3f9f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>3fa2	01 00 00 00				.dword	$00000001
>3fa6	00 80					.byte	$00,$80
.3fa8	20 57 52	jsr $5257		jsr	FloatCompare
.3fab	20 21 52	jsr $5221		jsr	CompareEqual
.3fae	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3fb1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -77.82603061
>3fb4	be 76 d3 4d				.dword	$4dd376be
>3fb8	e8 80					.byte	$e8,$80
.3fba	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -77.82603061
>3fbd	be 76 d3 4d				.dword	$4dd376be
>3fc1	e8 80					.byte	$e8,$80
.3fc3	20 57 52	jsr $5257		jsr	FloatCompare
.3fc6	20 31 52	jsr $5231		jsr	CompareNotEqual
.3fc9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>3fcc	00 00 00 00				.dword	$00000000
>3fd0	00 00					.byte	$00,$00
.3fd2	20 57 52	jsr $5257		jsr	FloatCompare
.3fd5	20 21 52	jsr $5221		jsr	CompareEqual
.3fd8	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3fdb	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -33328
>3fde	30 82 00 00				.dword	$00008230
>3fe2	00 80					.byte	$00,$80
.3fe4	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 26305
>3fe7	c1 66 00 00				.dword	$000066c1
>3feb	00 00					.byte	$00,$00
.3fed	20 96 51	jsr $5196		jsr	FloatAdd
.3ff0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -7023
>3ff3	6f 1b 00 00				.dword	$00001b6f
>3ff7	00 80					.byte	$00,$80
.3ff9	20 57 52	jsr $5257		jsr	FloatCompare
.3ffc	20 21 52	jsr $5221		jsr	CompareEqual
.3fff	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4002	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -33328
>4005	30 82 00 00				.dword	$00008230
>4009	00 80					.byte	$00,$80
.400b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 26305
>400e	c1 66 00 00				.dword	$000066c1
>4012	00 00					.byte	$00,$00
.4014	20 90 51	jsr $5190		jsr	FloatSubtract
.4017	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -59633
>401a	f1 e8 00 00				.dword	$0000e8f1
>401e	00 80					.byte	$00,$80
.4020	20 57 52	jsr $5257		jsr	FloatCompare
.4023	20 21 52	jsr $5221		jsr	CompareEqual
.4026	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4029	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -33328
>402c	30 82 00 00				.dword	$00008230
>4030	00 80					.byte	$00,$80
.4032	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 26305
>4035	c1 66 00 00				.dword	$000066c1
>4039	00 00					.byte	$00,$00
.403b	20 32 54	jsr $5432		jsr	FloatMultiply
.403e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -876693040
>4041	30 46 41 34				.dword	$34414630
>4045	00 80					.byte	$00,$80
.4047	20 57 52	jsr $5257		jsr	FloatCompare
.404a	20 21 52	jsr $5221		jsr	CompareEqual
.404d	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4050	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -33328
>4053	30 82 00 00				.dword	$00008230
>4057	00 80					.byte	$00,$80
.4059	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 26305
>405c	c1 66 00 00				.dword	$000066c1
>4060	00 00					.byte	$00,$00
.4062	20 bb 52	jsr $52bb		jsr	FloatDivide
.4065	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1.26698346
>4068	cb 41 16 51				.dword	$511641cb
>406c	e2 80					.byte	$e2,$80
.406e	20 57 52	jsr $5257		jsr	FloatCompare
.4071	20 21 52	jsr $5221		jsr	CompareEqual
.4074	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4077	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 26305
>407a	c1 66 00 00				.dword	$000066c1
>407e	00 00					.byte	$00,$00
.4080	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 26305
>4083	c1 66 00 00				.dword	$000066c1
>4087	00 00					.byte	$00,$00
.4089	20 57 52	jsr $5257		jsr	FloatCompare
.408c	20 21 52	jsr $5221		jsr	CompareEqual
.408f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>4092	01 00 00 00				.dword	$00000001
>4096	00 80					.byte	$00,$80
.4098	20 57 52	jsr $5257		jsr	FloatCompare
.409b	20 21 52	jsr $5221		jsr	CompareEqual
.409e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.40a1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 26305
>40a4	c1 66 00 00				.dword	$000066c1
>40a8	00 00					.byte	$00,$00
.40aa	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 26305
>40ad	c1 66 00 00				.dword	$000066c1
>40b1	00 00					.byte	$00,$00
.40b3	20 57 52	jsr $5257		jsr	FloatCompare
.40b6	20 31 52	jsr $5231		jsr	CompareNotEqual
.40b9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>40bc	00 00 00 00				.dword	$00000000
>40c0	00 00					.byte	$00,$00
.40c2	20 57 52	jsr $5257		jsr	FloatCompare
.40c5	20 21 52	jsr $5221		jsr	CompareEqual
.40c8	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.40cb	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 26305
>40ce	c1 66 00 00				.dword	$000066c1
>40d2	00 00					.byte	$00,$00
.40d4	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 26305
>40d7	c1 66 00 00				.dword	$000066c1
>40db	00 00					.byte	$00,$00
.40dd	20 57 52	jsr $5257		jsr	FloatCompare
.40e0	20 3f 52	jsr $523f		jsr	CompareGreater
.40e3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>40e6	00 00 00 00				.dword	$00000000
>40ea	00 00					.byte	$00,$00
.40ec	20 57 52	jsr $5257		jsr	FloatCompare
.40ef	20 21 52	jsr $5221		jsr	CompareEqual
.40f2	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.40f5	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 26305
>40f8	c1 66 00 00				.dword	$000066c1
>40fc	00 00					.byte	$00,$00
.40fe	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 26305
>4101	c1 66 00 00				.dword	$000066c1
>4105	00 00					.byte	$00,$00
.4107	20 57 52	jsr $5257		jsr	FloatCompare
.410a	20 4f 52	jsr $524f		jsr	CompareGreaterEqual
.410d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>4110	01 00 00 00				.dword	$00000001
>4114	00 80					.byte	$00,$80
.4116	20 57 52	jsr $5257		jsr	FloatCompare
.4119	20 21 52	jsr $5221		jsr	CompareEqual
.411c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.411f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 26305
>4122	c1 66 00 00				.dword	$000066c1
>4126	00 00					.byte	$00,$00
.4128	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 26305
>412b	c1 66 00 00				.dword	$000066c1
>412f	00 00					.byte	$00,$00
.4131	20 57 52	jsr $5257		jsr	FloatCompare
.4134	20 37 52	jsr $5237		jsr	CompareLess
.4137	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>413a	00 00 00 00				.dword	$00000000
>413e	00 00					.byte	$00,$00
.4140	20 57 52	jsr $5257		jsr	FloatCompare
.4143	20 21 52	jsr $5221		jsr	CompareEqual
.4146	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4149	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 26305
>414c	c1 66 00 00				.dword	$000066c1
>4150	00 00					.byte	$00,$00
.4152	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 26305
>4155	c1 66 00 00				.dword	$000066c1
>4159	00 00					.byte	$00,$00
.415b	20 57 52	jsr $5257		jsr	FloatCompare
.415e	20 47 52	jsr $5247		jsr	CompareLessEqual
.4161	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>4164	01 00 00 00				.dword	$00000001
>4168	00 80					.byte	$00,$80
.416a	20 57 52	jsr $5257		jsr	FloatCompare
.416d	20 21 52	jsr $5221		jsr	CompareEqual
.4170	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4173	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -15.99117194
>4176	8e eb ed 7f				.dword	$7fedeb8e
>417a	e5 80					.byte	$e5,$80
.417c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -75.49987851
>417f	0a f8 7f 4b				.dword	$4b7ff80a
>4183	e8 80					.byte	$e8,$80
.4185	20 96 51	jsr $5196		jsr	FloatAdd
.4188	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -91.49105046
>418b	7c b5 7d 5b				.dword	$5b7db57c
>418f	e8 80					.byte	$e8,$80
.4191	20 57 52	jsr $5257		jsr	FloatCompare
.4194	20 21 52	jsr $5221		jsr	CompareEqual
.4197	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.419a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -15.99117194
>419d	8e eb ed 7f				.dword	$7fedeb8e
>41a1	e5 80					.byte	$e5,$80
.41a3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -75.49987851
>41a6	0a f8 7f 4b				.dword	$4b7ff80a
>41aa	e8 80					.byte	$e8,$80
.41ac	20 90 51	jsr $5190		jsr	FloatSubtract
.41af	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 59.50870657
>41b2	30 75 04 77				.dword	$77047530
>41b6	e7 00					.byte	$e7,$00
.41b8	20 57 52	jsr $5257		jsr	FloatCompare
.41bb	20 21 52	jsr $5221		jsr	CompareEqual
.41be	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.41c1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -15.99117194
>41c4	8e eb ed 7f				.dword	$7fedeb8e
>41c8	e5 80					.byte	$e5,$80
.41ca	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -75.49987851
>41cd	0a f8 7f 4b				.dword	$4b7ff80a
>41d1	e8 80					.byte	$e8,$80
.41d3	20 32 54	jsr $5432		jsr	FloatMultiply
.41d6	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 1207.3315391
>41d9	fc 4d 75 4b				.dword	$4b754dfc
>41dd	ec 00					.byte	$ec,$00
.41df	20 57 52	jsr $5257		jsr	FloatCompare
.41e2	20 21 52	jsr $5221		jsr	CompareEqual
.41e5	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.41e8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -15.99117194
>41eb	8e eb ed 7f				.dword	$7fedeb8e
>41ef	e5 80					.byte	$e5,$80
.41f1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -75.49987851
>41f4	0a f8 7f 4b				.dword	$4b7ff80a
>41f8	e8 80					.byte	$e8,$80
.41fa	20 bb 52	jsr $52bb		jsr	FloatDivide
.41fd	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0.21180394
>4200	e7 90 71 6c				.dword	$6c7190e7
>4204	df 00					.byte	$df,$00
.4206	20 57 52	jsr $5257		jsr	FloatCompare
.4209	20 21 52	jsr $5221		jsr	CompareEqual
.420c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.420f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 54.99238681
>4212	20 1a fc 6d				.dword	$6dfc1a20
>4216	e7 00					.byte	$e7,$00
.4218	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 54.99238681
>421b	20 1a fc 6d				.dword	$6dfc1a20
>421f	e7 00					.byte	$e7,$00
.4221	20 57 52	jsr $5257		jsr	FloatCompare
.4224	20 3f 52	jsr $523f		jsr	CompareGreater
.4227	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>422a	00 00 00 00				.dword	$00000000
>422e	00 00					.byte	$00,$00
.4230	20 57 52	jsr $5257		jsr	FloatCompare
.4233	20 21 52	jsr $5221		jsr	CompareEqual
.4236	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4239	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 54.99238681
>423c	20 1a fc 6d				.dword	$6dfc1a20
>4240	e7 00					.byte	$e7,$00
.4242	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 54.99238681
>4245	20 1a fc 6d				.dword	$6dfc1a20
>4249	e7 00					.byte	$e7,$00
.424b	20 57 52	jsr $5257		jsr	FloatCompare
.424e	20 4f 52	jsr $524f		jsr	CompareGreaterEqual
.4251	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>4254	01 00 00 00				.dword	$00000001
>4258	00 80					.byte	$00,$80
.425a	20 57 52	jsr $5257		jsr	FloatCompare
.425d	20 21 52	jsr $5221		jsr	CompareEqual
.4260	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4263	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 54.99238681
>4266	20 1a fc 6d				.dword	$6dfc1a20
>426a	e7 00					.byte	$e7,$00
.426c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 54.99238681
>426f	20 1a fc 6d				.dword	$6dfc1a20
>4273	e7 00					.byte	$e7,$00
.4275	20 57 52	jsr $5257		jsr	FloatCompare
.4278	20 37 52	jsr $5237		jsr	CompareLess
.427b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>427e	00 00 00 00				.dword	$00000000
>4282	00 00					.byte	$00,$00
.4284	20 57 52	jsr $5257		jsr	FloatCompare
.4287	20 21 52	jsr $5221		jsr	CompareEqual
.428a	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.428d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 54.99238681
>4290	20 1a fc 6d				.dword	$6dfc1a20
>4294	e7 00					.byte	$e7,$00
.4296	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 54.99238681
>4299	20 1a fc 6d				.dword	$6dfc1a20
>429d	e7 00					.byte	$e7,$00
.429f	20 57 52	jsr $5257		jsr	FloatCompare
.42a2	20 47 52	jsr $5247		jsr	CompareLessEqual
.42a5	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>42a8	01 00 00 00				.dword	$00000001
>42ac	00 80					.byte	$00,$80
.42ae	20 57 52	jsr $5257		jsr	FloatCompare
.42b1	20 21 52	jsr $5221		jsr	CompareEqual
.42b4	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.42b7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 54.99238681
>42ba	20 1a fc 6d				.dword	$6dfc1a20
>42be	e7 00					.byte	$e7,$00
.42c0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 54.99238681
>42c3	20 1a fc 6d				.dword	$6dfc1a20
>42c7	e7 00					.byte	$e7,$00
.42c9	20 57 52	jsr $5257		jsr	FloatCompare
.42cc	20 21 52	jsr $5221		jsr	CompareEqual
.42cf	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>42d2	01 00 00 00				.dword	$00000001
>42d6	00 80					.byte	$00,$80
.42d8	20 57 52	jsr $5257		jsr	FloatCompare
.42db	20 21 52	jsr $5221		jsr	CompareEqual
.42de	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.42e1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 54.99238681
>42e4	20 1a fc 6d				.dword	$6dfc1a20
>42e8	e7 00					.byte	$e7,$00
.42ea	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 54.99238681
>42ed	20 1a fc 6d				.dword	$6dfc1a20
>42f1	e7 00					.byte	$e7,$00
.42f3	20 57 52	jsr $5257		jsr	FloatCompare
.42f6	20 31 52	jsr $5231		jsr	CompareNotEqual
.42f9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>42fc	00 00 00 00				.dword	$00000000
>4300	00 00					.byte	$00,$00
.4302	20 57 52	jsr $5257		jsr	FloatCompare
.4305	20 21 52	jsr $5221		jsr	CompareEqual
.4308	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.430b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -3699
>430e	73 0e 00 00				.dword	$00000e73
>4312	00 80					.byte	$00,$80
.4314	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7069
>4317	9d 1b 00 00				.dword	$00001b9d
>431b	00 00					.byte	$00,$00
.431d	20 96 51	jsr $5196		jsr	FloatAdd
.4320	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 3370
>4323	2a 0d 00 00				.dword	$00000d2a
>4327	00 00					.byte	$00,$00
.4329	20 57 52	jsr $5257		jsr	FloatCompare
.432c	20 21 52	jsr $5221		jsr	CompareEqual
.432f	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4332	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -3699
>4335	73 0e 00 00				.dword	$00000e73
>4339	00 80					.byte	$00,$80
.433b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7069
>433e	9d 1b 00 00				.dword	$00001b9d
>4342	00 00					.byte	$00,$00
.4344	20 90 51	jsr $5190		jsr	FloatSubtract
.4347	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -10768
>434a	10 2a 00 00				.dword	$00002a10
>434e	00 80					.byte	$00,$80
.4350	20 57 52	jsr $5257		jsr	FloatCompare
.4353	20 21 52	jsr $5221		jsr	CompareEqual
.4356	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4359	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -3699
>435c	73 0e 00 00				.dword	$00000e73
>4360	00 80					.byte	$00,$80
.4362	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7069
>4365	9d 1b 00 00				.dword	$00001b9d
>4369	00 00					.byte	$00,$00
.436b	20 32 54	jsr $5432		jsr	FloatMultiply
.436e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -26148231
>4371	87 fd 8e 01				.dword	$018efd87
>4375	00 80					.byte	$00,$80
.4377	20 57 52	jsr $5257		jsr	FloatCompare
.437a	20 21 52	jsr $5221		jsr	CompareEqual
.437d	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4380	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -3699
>4383	73 0e 00 00				.dword	$00000e73
>4387	00 80					.byte	$00,$80
.4389	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7069
>438c	9d 1b 00 00				.dword	$00001b9d
>4390	00 00					.byte	$00,$00
.4392	20 bb 52	jsr $52bb		jsr	FloatDivide
.4395	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -0.52327062
>4398	1c 88 fa 42				.dword	$42fa881c
>439c	e1 80					.byte	$e1,$80
.439e	20 57 52	jsr $5257		jsr	FloatCompare
.43a1	20 21 52	jsr $5221		jsr	CompareEqual
.43a4	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.43a7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7069
>43aa	9d 1b 00 00				.dword	$00001b9d
>43ae	00 00					.byte	$00,$00
.43b0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7069
>43b3	9d 1b 00 00				.dword	$00001b9d
>43b7	00 00					.byte	$00,$00
.43b9	20 57 52	jsr $5257		jsr	FloatCompare
.43bc	20 21 52	jsr $5221		jsr	CompareEqual
.43bf	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>43c2	01 00 00 00				.dword	$00000001
>43c6	00 80					.byte	$00,$80
.43c8	20 57 52	jsr $5257		jsr	FloatCompare
.43cb	20 21 52	jsr $5221		jsr	CompareEqual
.43ce	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.43d1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7069
>43d4	9d 1b 00 00				.dword	$00001b9d
>43d8	00 00					.byte	$00,$00
.43da	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7069
>43dd	9d 1b 00 00				.dword	$00001b9d
>43e1	00 00					.byte	$00,$00
.43e3	20 57 52	jsr $5257		jsr	FloatCompare
.43e6	20 31 52	jsr $5231		jsr	CompareNotEqual
.43e9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>43ec	00 00 00 00				.dword	$00000000
>43f0	00 00					.byte	$00,$00
.43f2	20 57 52	jsr $5257		jsr	FloatCompare
.43f5	20 21 52	jsr $5221		jsr	CompareEqual
.43f8	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.43fb	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7069
>43fe	9d 1b 00 00				.dword	$00001b9d
>4402	00 00					.byte	$00,$00
.4404	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7069
>4407	9d 1b 00 00				.dword	$00001b9d
>440b	00 00					.byte	$00,$00
.440d	20 57 52	jsr $5257		jsr	FloatCompare
.4410	20 3f 52	jsr $523f		jsr	CompareGreater
.4413	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>4416	00 00 00 00				.dword	$00000000
>441a	00 00					.byte	$00,$00
.441c	20 57 52	jsr $5257		jsr	FloatCompare
.441f	20 21 52	jsr $5221		jsr	CompareEqual
.4422	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4425	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7069
>4428	9d 1b 00 00				.dword	$00001b9d
>442c	00 00					.byte	$00,$00
.442e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7069
>4431	9d 1b 00 00				.dword	$00001b9d
>4435	00 00					.byte	$00,$00
.4437	20 57 52	jsr $5257		jsr	FloatCompare
.443a	20 4f 52	jsr $524f		jsr	CompareGreaterEqual
.443d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>4440	01 00 00 00				.dword	$00000001
>4444	00 80					.byte	$00,$80
.4446	20 57 52	jsr $5257		jsr	FloatCompare
.4449	20 21 52	jsr $5221		jsr	CompareEqual
.444c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.444f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7069
>4452	9d 1b 00 00				.dword	$00001b9d
>4456	00 00					.byte	$00,$00
.4458	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7069
>445b	9d 1b 00 00				.dword	$00001b9d
>445f	00 00					.byte	$00,$00
.4461	20 57 52	jsr $5257		jsr	FloatCompare
.4464	20 37 52	jsr $5237		jsr	CompareLess
.4467	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>446a	00 00 00 00				.dword	$00000000
>446e	00 00					.byte	$00,$00
.4470	20 57 52	jsr $5257		jsr	FloatCompare
.4473	20 21 52	jsr $5221		jsr	CompareEqual
.4476	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4479	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7069
>447c	9d 1b 00 00				.dword	$00001b9d
>4480	00 00					.byte	$00,$00
.4482	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7069
>4485	9d 1b 00 00				.dword	$00001b9d
>4489	00 00					.byte	$00,$00
.448b	20 57 52	jsr $5257		jsr	FloatCompare
.448e	20 47 52	jsr $5247		jsr	CompareLessEqual
.4491	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>4494	01 00 00 00				.dword	$00000001
>4498	00 80					.byte	$00,$80
.449a	20 57 52	jsr $5257		jsr	FloatCompare
.449d	20 21 52	jsr $5221		jsr	CompareEqual
.44a0	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.44a3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -34.34340326
>44a6	8d d2 af 44				.dword	$44afd28d
>44aa	e7 80					.byte	$e7,$80
.44ac	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 4.25026322
>44af	02 14 01 44				.dword	$44011402
>44b3	e4 00					.byte	$e4,$00
.44b5	20 96 51	jsr $5196		jsr	FloatAdd
.44b8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -30.09314003
>44bb	1a 60 5f 78				.dword	$785f601a
>44bf	e6 80					.byte	$e6,$80
.44c1	20 57 52	jsr $5257		jsr	FloatCompare
.44c4	20 21 52	jsr $5221		jsr	CompareEqual
.44c7	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.44ca	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -34.34340326
>44cd	8d d2 af 44				.dword	$44afd28d
>44d1	e7 80					.byte	$e7,$80
.44d3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 4.25026322
>44d6	02 14 01 44				.dword	$44011402
>44da	e4 00					.byte	$e4,$00
.44dc	20 90 51	jsr $5190		jsr	FloatSubtract
.44df	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -38.59366648
>44e2	0e f5 2f 4d				.dword	$4d2ff50e
>44e6	e7 80					.byte	$e7,$80
.44e8	20 57 52	jsr $5257		jsr	FloatCompare
.44eb	20 21 52	jsr $5221		jsr	CompareEqual
.44ee	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.44f1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -34.34340326
>44f4	8d d2 af 44				.dword	$44afd28d
>44f8	e7 80					.byte	$e7,$80
.44fa	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 4.25026322
>44fd	02 14 01 44				.dword	$44011402
>4501	e4 00					.byte	$e4,$00
.4503	20 32 54	jsr $5432		jsr	FloatMultiply
.4506	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -145.96850377
>4509	ee f7 fb 48				.dword	$48fbf7ee
>450d	e9 80					.byte	$e9,$80
.450f	20 57 52	jsr $5257		jsr	FloatCompare
.4512	20 21 52	jsr $5221		jsr	CompareEqual
.4515	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4518	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -34.34340326
>451b	8d d2 af 44				.dword	$44afd28d
>451f	e7 80					.byte	$e7,$80
.4521	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 4.25026322
>4524	02 14 01 44				.dword	$44011402
>4528	e4 00					.byte	$e4,$00
.452a	20 bb 52	jsr $52bb		jsr	FloatDivide
.452d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -8.08030032
>4530	7f 74 a4 40				.dword	$40a4747f
>4534	e5 80					.byte	$e5,$80
.4536	20 57 52	jsr $5257		jsr	FloatCompare
.4539	20 21 52	jsr $5221		jsr	CompareEqual
.453c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.453f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 6.17137766
>4542	80 f6 bd 62				.dword	$62bdf680
>4546	e4 00					.byte	$e4,$00
.4548	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 6.17137766
>454b	80 f6 bd 62				.dword	$62bdf680
>454f	e4 00					.byte	$e4,$00
.4551	20 57 52	jsr $5257		jsr	FloatCompare
.4554	20 3f 52	jsr $523f		jsr	CompareGreater
.4557	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>455a	00 00 00 00				.dword	$00000000
>455e	00 00					.byte	$00,$00
.4560	20 57 52	jsr $5257		jsr	FloatCompare
.4563	20 21 52	jsr $5221		jsr	CompareEqual
.4566	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4569	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 6.17137766
>456c	80 f6 bd 62				.dword	$62bdf680
>4570	e4 00					.byte	$e4,$00
.4572	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 6.17137766
>4575	80 f6 bd 62				.dword	$62bdf680
>4579	e4 00					.byte	$e4,$00
.457b	20 57 52	jsr $5257		jsr	FloatCompare
.457e	20 4f 52	jsr $524f		jsr	CompareGreaterEqual
.4581	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>4584	01 00 00 00				.dword	$00000001
>4588	00 80					.byte	$00,$80
.458a	20 57 52	jsr $5257		jsr	FloatCompare
.458d	20 21 52	jsr $5221		jsr	CompareEqual
.4590	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4593	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 6.17137766
>4596	80 f6 bd 62				.dword	$62bdf680
>459a	e4 00					.byte	$e4,$00
.459c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 6.17137766
>459f	80 f6 bd 62				.dword	$62bdf680
>45a3	e4 00					.byte	$e4,$00
.45a5	20 57 52	jsr $5257		jsr	FloatCompare
.45a8	20 37 52	jsr $5237		jsr	CompareLess
.45ab	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>45ae	00 00 00 00				.dword	$00000000
>45b2	00 00					.byte	$00,$00
.45b4	20 57 52	jsr $5257		jsr	FloatCompare
.45b7	20 21 52	jsr $5221		jsr	CompareEqual
.45ba	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.45bd	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 6.17137766
>45c0	80 f6 bd 62				.dword	$62bdf680
>45c4	e4 00					.byte	$e4,$00
.45c6	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 6.17137766
>45c9	80 f6 bd 62				.dword	$62bdf680
>45cd	e4 00					.byte	$e4,$00
.45cf	20 57 52	jsr $5257		jsr	FloatCompare
.45d2	20 47 52	jsr $5247		jsr	CompareLessEqual
.45d5	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>45d8	01 00 00 00				.dword	$00000001
>45dc	00 80					.byte	$00,$80
.45de	20 57 52	jsr $5257		jsr	FloatCompare
.45e1	20 21 52	jsr $5221		jsr	CompareEqual
.45e4	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.45e7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 6.17137766
>45ea	80 f6 bd 62				.dword	$62bdf680
>45ee	e4 00					.byte	$e4,$00
.45f0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 6.17137766
>45f3	80 f6 bd 62				.dword	$62bdf680
>45f7	e4 00					.byte	$e4,$00
.45f9	20 57 52	jsr $5257		jsr	FloatCompare
.45fc	20 21 52	jsr $5221		jsr	CompareEqual
.45ff	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>4602	01 00 00 00				.dword	$00000001
>4606	00 80					.byte	$00,$80
.4608	20 57 52	jsr $5257		jsr	FloatCompare
.460b	20 21 52	jsr $5221		jsr	CompareEqual
.460e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4611	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 6.17137766
>4614	80 f6 bd 62				.dword	$62bdf680
>4618	e4 00					.byte	$e4,$00
.461a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 6.17137766
>461d	80 f6 bd 62				.dword	$62bdf680
>4621	e4 00					.byte	$e4,$00
.4623	20 57 52	jsr $5257		jsr	FloatCompare
.4626	20 31 52	jsr $5231		jsr	CompareNotEqual
.4629	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>462c	00 00 00 00				.dword	$00000000
>4630	00 00					.byte	$00,$00
.4632	20 57 52	jsr $5257		jsr	FloatCompare
.4635	20 21 52	jsr $5221		jsr	CompareEqual
.4638	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.463b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 18734
>463e	2e 49 00 00				.dword	$0000492e
>4642	00 00					.byte	$00,$00
.4644	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -48272
>4647	90 bc 00 00				.dword	$0000bc90
>464b	00 80					.byte	$00,$80
.464d	20 96 51	jsr $5196		jsr	FloatAdd
.4650	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -29538
>4653	62 73 00 00				.dword	$00007362
>4657	00 80					.byte	$00,$80
.4659	20 57 52	jsr $5257		jsr	FloatCompare
.465c	20 21 52	jsr $5221		jsr	CompareEqual
.465f	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4662	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 18734
>4665	2e 49 00 00				.dword	$0000492e
>4669	00 00					.byte	$00,$00
.466b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -48272
>466e	90 bc 00 00				.dword	$0000bc90
>4672	00 80					.byte	$00,$80
.4674	20 90 51	jsr $5190		jsr	FloatSubtract
.4677	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 67006
>467a	be 05 01 00				.dword	$000105be
>467e	00 00					.byte	$00,$00
.4680	20 57 52	jsr $5257		jsr	FloatCompare
.4683	20 21 52	jsr $5221		jsr	CompareEqual
.4686	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4689	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 18734
>468c	2e 49 00 00				.dword	$0000492e
>4690	00 00					.byte	$00,$00
.4692	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -48272
>4695	90 bc 00 00				.dword	$0000bc90
>4699	00 80					.byte	$00,$80
.469b	20 32 54	jsr $5432		jsr	FloatMultiply
.469e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -904327648
>46a1	e0 f1 e6 35				.dword	$35e6f1e0
>46a5	00 80					.byte	$00,$80
.46a7	20 57 52	jsr $5257		jsr	FloatCompare
.46aa	20 21 52	jsr $5221		jsr	CompareEqual
.46ad	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.46b0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 18734
>46b3	2e 49 00 00				.dword	$0000492e
>46b7	00 00					.byte	$00,$00
.46b9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -48272
>46bc	90 bc 00 00				.dword	$0000bc90
>46c0	00 80					.byte	$00,$80
.46c2	20 bb 52	jsr $52bb		jsr	FloatDivide
.46c5	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -0.38809248
>46c8	5d 07 5a 63				.dword	$635a075d
>46cc	e0 80					.byte	$e0,$80
.46ce	20 57 52	jsr $5257		jsr	FloatCompare
.46d1	20 21 52	jsr $5221		jsr	CompareEqual
.46d4	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.46d7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -48272
>46da	90 bc 00 00				.dword	$0000bc90
>46de	00 80					.byte	$00,$80
.46e0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -48272
>46e3	90 bc 00 00				.dword	$0000bc90
>46e7	00 80					.byte	$00,$80
.46e9	20 57 52	jsr $5257		jsr	FloatCompare
.46ec	20 21 52	jsr $5221		jsr	CompareEqual
.46ef	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>46f2	01 00 00 00				.dword	$00000001
>46f6	00 80					.byte	$00,$80
.46f8	20 57 52	jsr $5257		jsr	FloatCompare
.46fb	20 21 52	jsr $5221		jsr	CompareEqual
.46fe	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4701	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -48272
>4704	90 bc 00 00				.dword	$0000bc90
>4708	00 80					.byte	$00,$80
.470a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -48272
>470d	90 bc 00 00				.dword	$0000bc90
>4711	00 80					.byte	$00,$80
.4713	20 57 52	jsr $5257		jsr	FloatCompare
.4716	20 31 52	jsr $5231		jsr	CompareNotEqual
.4719	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>471c	00 00 00 00				.dword	$00000000
>4720	00 00					.byte	$00,$00
.4722	20 57 52	jsr $5257		jsr	FloatCompare
.4725	20 21 52	jsr $5221		jsr	CompareEqual
.4728	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.472b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -48272
>472e	90 bc 00 00				.dword	$0000bc90
>4732	00 80					.byte	$00,$80
.4734	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -48272
>4737	90 bc 00 00				.dword	$0000bc90
>473b	00 80					.byte	$00,$80
.473d	20 57 52	jsr $5257		jsr	FloatCompare
.4740	20 3f 52	jsr $523f		jsr	CompareGreater
.4743	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>4746	00 00 00 00				.dword	$00000000
>474a	00 00					.byte	$00,$00
.474c	20 57 52	jsr $5257		jsr	FloatCompare
.474f	20 21 52	jsr $5221		jsr	CompareEqual
.4752	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4755	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -48272
>4758	90 bc 00 00				.dword	$0000bc90
>475c	00 80					.byte	$00,$80
.475e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -48272
>4761	90 bc 00 00				.dword	$0000bc90
>4765	00 80					.byte	$00,$80
.4767	20 57 52	jsr $5257		jsr	FloatCompare
.476a	20 4f 52	jsr $524f		jsr	CompareGreaterEqual
.476d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>4770	01 00 00 00				.dword	$00000001
>4774	00 80					.byte	$00,$80
.4776	20 57 52	jsr $5257		jsr	FloatCompare
.4779	20 21 52	jsr $5221		jsr	CompareEqual
.477c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.477f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -48272
>4782	90 bc 00 00				.dword	$0000bc90
>4786	00 80					.byte	$00,$80
.4788	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -48272
>478b	90 bc 00 00				.dword	$0000bc90
>478f	00 80					.byte	$00,$80
.4791	20 57 52	jsr $5257		jsr	FloatCompare
.4794	20 37 52	jsr $5237		jsr	CompareLess
.4797	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>479a	00 00 00 00				.dword	$00000000
>479e	00 00					.byte	$00,$00
.47a0	20 57 52	jsr $5257		jsr	FloatCompare
.47a3	20 21 52	jsr $5221		jsr	CompareEqual
.47a6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.47a9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -48272
>47ac	90 bc 00 00				.dword	$0000bc90
>47b0	00 80					.byte	$00,$80
.47b2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -48272
>47b5	90 bc 00 00				.dword	$0000bc90
>47b9	00 80					.byte	$00,$80
.47bb	20 57 52	jsr $5257		jsr	FloatCompare
.47be	20 47 52	jsr $5247		jsr	CompareLessEqual
.47c1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>47c4	01 00 00 00				.dword	$00000001
>47c8	00 80					.byte	$00,$80
.47ca	20 57 52	jsr $5257		jsr	FloatCompare
.47cd	20 21 52	jsr $5221		jsr	CompareEqual
.47d0	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.47d3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 42.70049405
>47d6	28 a7 66 55				.dword	$5566a728
>47da	e7 00					.byte	$e7,$00
.47dc	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 9.68648255
>47df	90 ea 7d 4d				.dword	$4d7dea90
>47e3	e5 00					.byte	$e5,$00
.47e5	20 96 51	jsr $5196		jsr	FloatAdd
.47e8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 52.38697659
>47eb	cc 21 c6 68				.dword	$68c621cc
>47ef	e7 00					.byte	$e7,$00
.47f1	20 57 52	jsr $5257		jsr	FloatCompare
.47f4	20 21 52	jsr $5221		jsr	CompareEqual
.47f7	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.47fa	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 42.70049405
>47fd	28 a7 66 55				.dword	$5566a728
>4801	e7 00					.byte	$e7,$00
.4803	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 9.68648255
>4806	90 ea 7d 4d				.dword	$4d7dea90
>480a	e5 00					.byte	$e5,$00
.480c	20 90 51	jsr $5190		jsr	FloatSubtract
.480f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 33.0140115
>4812	84 2c 07 42				.dword	$42072c84
>4816	e7 00					.byte	$e7,$00
.4818	20 57 52	jsr $5257		jsr	FloatCompare
.481b	20 21 52	jsr $5221		jsr	CompareEqual
.481e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4821	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 42.70049405
>4824	28 a7 66 55				.dword	$5566a728
>4828	e7 00					.byte	$e7,$00
.482a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 9.68648255
>482d	90 ea 7d 4d				.dword	$4d7dea90
>4831	e5 00					.byte	$e5,$00
.4833	20 32 54	jsr $5432		jsr	FloatMultiply
.4836	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 413.61759031
>4839	9a 86 67 67				.dword	$6767869a
>483d	ea 00					.byte	$ea,$00
.483f	20 57 52	jsr $5257		jsr	FloatCompare
.4842	20 21 52	jsr $5221		jsr	CompareEqual
.4845	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4848	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 42.70049405
>484b	28 a7 66 55				.dword	$5566a728
>484f	e7 00					.byte	$e7,$00
.4851	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 9.68648255
>4854	90 ea 7d 4d				.dword	$4d7dea90
>4858	e5 00					.byte	$e5,$00
.485a	20 bb 52	jsr $52bb		jsr	FloatDivide
.485d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 4.40825592
>4860	5c 37 88 46				.dword	$4688375c
>4864	e4 00					.byte	$e4,$00
.4866	20 57 52	jsr $5257		jsr	FloatCompare
.4869	20 21 52	jsr $5221		jsr	CompareEqual
.486c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.486f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -63.0149834
>4872	e7 ab 07 7e				.dword	$7e07abe7
>4876	e7 80					.byte	$e7,$80
.4878	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -63.0149834
>487b	e7 ab 07 7e				.dword	$7e07abe7
>487f	e7 80					.byte	$e7,$80
.4881	20 57 52	jsr $5257		jsr	FloatCompare
.4884	20 3f 52	jsr $523f		jsr	CompareGreater
.4887	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>488a	00 00 00 00				.dword	$00000000
>488e	00 00					.byte	$00,$00
.4890	20 57 52	jsr $5257		jsr	FloatCompare
.4893	20 21 52	jsr $5221		jsr	CompareEqual
.4896	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4899	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -63.0149834
>489c	e7 ab 07 7e				.dword	$7e07abe7
>48a0	e7 80					.byte	$e7,$80
.48a2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -63.0149834
>48a5	e7 ab 07 7e				.dword	$7e07abe7
>48a9	e7 80					.byte	$e7,$80
.48ab	20 57 52	jsr $5257		jsr	FloatCompare
.48ae	20 4f 52	jsr $524f		jsr	CompareGreaterEqual
.48b1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>48b4	01 00 00 00				.dword	$00000001
>48b8	00 80					.byte	$00,$80
.48ba	20 57 52	jsr $5257		jsr	FloatCompare
.48bd	20 21 52	jsr $5221		jsr	CompareEqual
.48c0	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.48c3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -63.0149834
>48c6	e7 ab 07 7e				.dword	$7e07abe7
>48ca	e7 80					.byte	$e7,$80
.48cc	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -63.0149834
>48cf	e7 ab 07 7e				.dword	$7e07abe7
>48d3	e7 80					.byte	$e7,$80
.48d5	20 57 52	jsr $5257		jsr	FloatCompare
.48d8	20 37 52	jsr $5237		jsr	CompareLess
.48db	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>48de	00 00 00 00				.dword	$00000000
>48e2	00 00					.byte	$00,$00
.48e4	20 57 52	jsr $5257		jsr	FloatCompare
.48e7	20 21 52	jsr $5221		jsr	CompareEqual
.48ea	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.48ed	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -63.0149834
>48f0	e7 ab 07 7e				.dword	$7e07abe7
>48f4	e7 80					.byte	$e7,$80
.48f6	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -63.0149834
>48f9	e7 ab 07 7e				.dword	$7e07abe7
>48fd	e7 80					.byte	$e7,$80
.48ff	20 57 52	jsr $5257		jsr	FloatCompare
.4902	20 47 52	jsr $5247		jsr	CompareLessEqual
.4905	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>4908	01 00 00 00				.dword	$00000001
>490c	00 80					.byte	$00,$80
.490e	20 57 52	jsr $5257		jsr	FloatCompare
.4911	20 21 52	jsr $5221		jsr	CompareEqual
.4914	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4917	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -63.0149834
>491a	e7 ab 07 7e				.dword	$7e07abe7
>491e	e7 80					.byte	$e7,$80
.4920	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -63.0149834
>4923	e7 ab 07 7e				.dword	$7e07abe7
>4927	e7 80					.byte	$e7,$80
.4929	20 57 52	jsr $5257		jsr	FloatCompare
.492c	20 21 52	jsr $5221		jsr	CompareEqual
.492f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>4932	01 00 00 00				.dword	$00000001
>4936	00 80					.byte	$00,$80
.4938	20 57 52	jsr $5257		jsr	FloatCompare
.493b	20 21 52	jsr $5221		jsr	CompareEqual
.493e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4941	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -63.0149834
>4944	e7 ab 07 7e				.dword	$7e07abe7
>4948	e7 80					.byte	$e7,$80
.494a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -63.0149834
>494d	e7 ab 07 7e				.dword	$7e07abe7
>4951	e7 80					.byte	$e7,$80
.4953	20 57 52	jsr $5257		jsr	FloatCompare
.4956	20 31 52	jsr $5231		jsr	CompareNotEqual
.4959	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>495c	00 00 00 00				.dword	$00000000
>4960	00 00					.byte	$00,$00
.4962	20 57 52	jsr $5257		jsr	FloatCompare
.4965	20 21 52	jsr $5221		jsr	CompareEqual
.4968	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.496b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 22428
>496e	9c 57 00 00				.dword	$0000579c
>4972	00 00					.byte	$00,$00
.4974	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -23715
>4977	a3 5c 00 00				.dword	$00005ca3
>497b	00 80					.byte	$00,$80
.497d	20 96 51	jsr $5196		jsr	FloatAdd
.4980	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1287
>4983	07 05 00 00				.dword	$00000507
>4987	00 80					.byte	$00,$80
.4989	20 57 52	jsr $5257		jsr	FloatCompare
.498c	20 21 52	jsr $5221		jsr	CompareEqual
.498f	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4992	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 22428
>4995	9c 57 00 00				.dword	$0000579c
>4999	00 00					.byte	$00,$00
.499b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -23715
>499e	a3 5c 00 00				.dword	$00005ca3
>49a2	00 80					.byte	$00,$80
.49a4	20 90 51	jsr $5190		jsr	FloatSubtract
.49a7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 46143
>49aa	3f b4 00 00				.dword	$0000b43f
>49ae	00 00					.byte	$00,$00
.49b0	20 57 52	jsr $5257		jsr	FloatCompare
.49b3	20 21 52	jsr $5221		jsr	CompareEqual
.49b6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.49b9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 22428
>49bc	9c 57 00 00				.dword	$0000579c
>49c0	00 00					.byte	$00,$00
.49c2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -23715
>49c5	a3 5c 00 00				.dword	$00005ca3
>49c9	00 80					.byte	$00,$80
.49cb	20 32 54	jsr $5432		jsr	FloatMultiply
.49ce	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -531880020
>49d1	54 d8 b3 1f				.dword	$1fb3d854
>49d5	00 80					.byte	$00,$80
.49d7	20 57 52	jsr $5257		jsr	FloatCompare
.49da	20 21 52	jsr $5221		jsr	CompareEqual
.49dd	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.49e0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 22428
>49e3	9c 57 00 00				.dword	$0000579c
>49e7	00 00					.byte	$00,$00
.49e9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -23715
>49ec	a3 5c 00 00				.dword	$00005ca3
>49f0	00 80					.byte	$00,$80
.49f2	20 bb 52	jsr $52bb		jsr	FloatDivide
.49f5	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -0.94573055
>49f8	dc b2 0d 79				.dword	$790db2dc
>49fc	e1 80					.byte	$e1,$80
.49fe	20 57 52	jsr $5257		jsr	FloatCompare
.4a01	20 21 52	jsr $5221		jsr	CompareEqual
.4a04	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4a07	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -23715
>4a0a	a3 5c 00 00				.dword	$00005ca3
>4a0e	00 80					.byte	$00,$80
.4a10	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -23715
>4a13	a3 5c 00 00				.dword	$00005ca3
>4a17	00 80					.byte	$00,$80
.4a19	20 57 52	jsr $5257		jsr	FloatCompare
.4a1c	20 21 52	jsr $5221		jsr	CompareEqual
.4a1f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>4a22	01 00 00 00				.dword	$00000001
>4a26	00 80					.byte	$00,$80
.4a28	20 57 52	jsr $5257		jsr	FloatCompare
.4a2b	20 21 52	jsr $5221		jsr	CompareEqual
.4a2e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4a31	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -23715
>4a34	a3 5c 00 00				.dword	$00005ca3
>4a38	00 80					.byte	$00,$80
.4a3a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -23715
>4a3d	a3 5c 00 00				.dword	$00005ca3
>4a41	00 80					.byte	$00,$80
.4a43	20 57 52	jsr $5257		jsr	FloatCompare
.4a46	20 31 52	jsr $5231		jsr	CompareNotEqual
.4a49	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>4a4c	00 00 00 00				.dword	$00000000
>4a50	00 00					.byte	$00,$00
.4a52	20 57 52	jsr $5257		jsr	FloatCompare
.4a55	20 21 52	jsr $5221		jsr	CompareEqual
.4a58	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4a5b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -23715
>4a5e	a3 5c 00 00				.dword	$00005ca3
>4a62	00 80					.byte	$00,$80
.4a64	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -23715
>4a67	a3 5c 00 00				.dword	$00005ca3
>4a6b	00 80					.byte	$00,$80
.4a6d	20 57 52	jsr $5257		jsr	FloatCompare
.4a70	20 3f 52	jsr $523f		jsr	CompareGreater
.4a73	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>4a76	00 00 00 00				.dword	$00000000
>4a7a	00 00					.byte	$00,$00
.4a7c	20 57 52	jsr $5257		jsr	FloatCompare
.4a7f	20 21 52	jsr $5221		jsr	CompareEqual
.4a82	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4a85	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -23715
>4a88	a3 5c 00 00				.dword	$00005ca3
>4a8c	00 80					.byte	$00,$80
.4a8e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -23715
>4a91	a3 5c 00 00				.dword	$00005ca3
>4a95	00 80					.byte	$00,$80
.4a97	20 57 52	jsr $5257		jsr	FloatCompare
.4a9a	20 4f 52	jsr $524f		jsr	CompareGreaterEqual
.4a9d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>4aa0	01 00 00 00				.dword	$00000001
>4aa4	00 80					.byte	$00,$80
.4aa6	20 57 52	jsr $5257		jsr	FloatCompare
.4aa9	20 21 52	jsr $5221		jsr	CompareEqual
.4aac	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4aaf	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -23715
>4ab2	a3 5c 00 00				.dword	$00005ca3
>4ab6	00 80					.byte	$00,$80
.4ab8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -23715
>4abb	a3 5c 00 00				.dword	$00005ca3
>4abf	00 80					.byte	$00,$80
.4ac1	20 57 52	jsr $5257		jsr	FloatCompare
.4ac4	20 37 52	jsr $5237		jsr	CompareLess
.4ac7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>4aca	00 00 00 00				.dword	$00000000
>4ace	00 00					.byte	$00,$00
.4ad0	20 57 52	jsr $5257		jsr	FloatCompare
.4ad3	20 21 52	jsr $5221		jsr	CompareEqual
.4ad6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4ad9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -23715
>4adc	a3 5c 00 00				.dword	$00005ca3
>4ae0	00 80					.byte	$00,$80
.4ae2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -23715
>4ae5	a3 5c 00 00				.dword	$00005ca3
>4ae9	00 80					.byte	$00,$80
.4aeb	20 57 52	jsr $5257		jsr	FloatCompare
.4aee	20 47 52	jsr $5247		jsr	CompareLessEqual
.4af1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>4af4	01 00 00 00				.dword	$00000001
>4af8	00 80					.byte	$00,$80
.4afa	20 57 52	jsr $5257		jsr	FloatCompare
.4afd	20 21 52	jsr $5221		jsr	CompareEqual
.4b00	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4b03	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 49.01474042
>4b06	0e 8c 07 62				.dword	$62078c0e
>4b0a	e7 00					.byte	$e7,$00
.4b0c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 58.21187333
>4b0f	a9 7a 6c 74				.dword	$746c7aa9
>4b13	e7 00					.byte	$e7,$00
.4b15	20 96 51	jsr $5196		jsr	FloatAdd
.4b18	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 107.22661375
>4b1b	5c 03 3a 6b				.dword	$6b3a035c
>4b1f	e8 00					.byte	$e8,$00
.4b21	20 57 52	jsr $5257		jsr	FloatCompare
.4b24	20 21 52	jsr $5221		jsr	CompareEqual
.4b27	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4b2a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 49.01474042
>4b2d	0e 8c 07 62				.dword	$62078c0e
>4b31	e7 00					.byte	$e7,$00
.4b33	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 58.21187333
>4b36	a9 7a 6c 74				.dword	$746c7aa9
>4b3a	e7 00					.byte	$e7,$00
.4b3c	20 90 51	jsr $5190		jsr	FloatSubtract
.4b3f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -9.19713291
>4b42	6b ba 93 49				.dword	$4993ba6b
>4b46	e5 80					.byte	$e5,$80
.4b48	20 57 52	jsr $5257		jsr	FloatCompare
.4b4b	20 21 52	jsr $5221		jsr	CompareEqual
.4b4e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4b51	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 49.01474042
>4b54	0e 8c 07 62				.dword	$62078c0e
>4b58	e7 00					.byte	$e7,$00
.4b5a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 58.21187333
>4b5d	a9 7a 6c 74				.dword	$746c7aa9
>4b61	e7 00					.byte	$e7,$00
.4b63	20 32 54	jsr $5432		jsr	FloatMultiply
.4b66	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 2853.23986077
>4b69	3c eb 29 59				.dword	$5929eb3c
>4b6d	ed 00					.byte	$ed,$00
.4b6f	20 57 52	jsr $5257		jsr	FloatCompare
.4b72	20 21 52	jsr $5221		jsr	CompareEqual
.4b75	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4b78	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 49.01474042
>4b7b	0e 8c 07 62				.dword	$62078c0e
>4b7f	e7 00					.byte	$e7,$00
.4b81	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 58.21187333
>4b84	a9 7a 6c 74				.dword	$746c7aa9
>4b88	e7 00					.byte	$e7,$00
.4b8a	20 bb 52	jsr $52bb		jsr	FloatDivide
.4b8d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0.84200589
>4b90	58 d9 c6 6b				.dword	$6bc6d958
>4b94	e1 00					.byte	$e1,$00
.4b96	20 57 52	jsr $5257		jsr	FloatCompare
.4b99	20 21 52	jsr $5221		jsr	CompareEqual
.4b9c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4b9f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -68.90710294
>4ba2	e6 37 e8 44				.dword	$44e837e6
>4ba6	e8 80					.byte	$e8,$80
.4ba8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -68.90710294
>4bab	e6 37 e8 44				.dword	$44e837e6
>4baf	e8 80					.byte	$e8,$80
.4bb1	20 57 52	jsr $5257		jsr	FloatCompare
.4bb4	20 3f 52	jsr $523f		jsr	CompareGreater
.4bb7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>4bba	00 00 00 00				.dword	$00000000
>4bbe	00 00					.byte	$00,$00
.4bc0	20 57 52	jsr $5257		jsr	FloatCompare
.4bc3	20 21 52	jsr $5221		jsr	CompareEqual
.4bc6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4bc9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -68.90710294
>4bcc	e6 37 e8 44				.dword	$44e837e6
>4bd0	e8 80					.byte	$e8,$80
.4bd2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -68.90710294
>4bd5	e6 37 e8 44				.dword	$44e837e6
>4bd9	e8 80					.byte	$e8,$80
.4bdb	20 57 52	jsr $5257		jsr	FloatCompare
.4bde	20 4f 52	jsr $524f		jsr	CompareGreaterEqual
.4be1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>4be4	01 00 00 00				.dword	$00000001
>4be8	00 80					.byte	$00,$80
.4bea	20 57 52	jsr $5257		jsr	FloatCompare
.4bed	20 21 52	jsr $5221		jsr	CompareEqual
.4bf0	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4bf3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -68.90710294
>4bf6	e6 37 e8 44				.dword	$44e837e6
>4bfa	e8 80					.byte	$e8,$80
.4bfc	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -68.90710294
>4bff	e6 37 e8 44				.dword	$44e837e6
>4c03	e8 80					.byte	$e8,$80
.4c05	20 57 52	jsr $5257		jsr	FloatCompare
.4c08	20 37 52	jsr $5237		jsr	CompareLess
.4c0b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>4c0e	00 00 00 00				.dword	$00000000
>4c12	00 00					.byte	$00,$00
.4c14	20 57 52	jsr $5257		jsr	FloatCompare
.4c17	20 21 52	jsr $5221		jsr	CompareEqual
.4c1a	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4c1d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -68.90710294
>4c20	e6 37 e8 44				.dword	$44e837e6
>4c24	e8 80					.byte	$e8,$80
.4c26	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -68.90710294
>4c29	e6 37 e8 44				.dword	$44e837e6
>4c2d	e8 80					.byte	$e8,$80
.4c2f	20 57 52	jsr $5257		jsr	FloatCompare
.4c32	20 47 52	jsr $5247		jsr	CompareLessEqual
.4c35	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>4c38	01 00 00 00				.dword	$00000001
>4c3c	00 80					.byte	$00,$80
.4c3e	20 57 52	jsr $5257		jsr	FloatCompare
.4c41	20 21 52	jsr $5221		jsr	CompareEqual
.4c44	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4c47	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -68.90710294
>4c4a	e6 37 e8 44				.dword	$44e837e6
>4c4e	e8 80					.byte	$e8,$80
.4c50	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -68.90710294
>4c53	e6 37 e8 44				.dword	$44e837e6
>4c57	e8 80					.byte	$e8,$80
.4c59	20 57 52	jsr $5257		jsr	FloatCompare
.4c5c	20 21 52	jsr $5221		jsr	CompareEqual
.4c5f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>4c62	01 00 00 00				.dword	$00000001
>4c66	00 80					.byte	$00,$80
.4c68	20 57 52	jsr $5257		jsr	FloatCompare
.4c6b	20 21 52	jsr $5221		jsr	CompareEqual
.4c6e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4c71	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -68.90710294
>4c74	e6 37 e8 44				.dword	$44e837e6
>4c78	e8 80					.byte	$e8,$80
.4c7a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -68.90710294
>4c7d	e6 37 e8 44				.dword	$44e837e6
>4c81	e8 80					.byte	$e8,$80
.4c83	20 57 52	jsr $5257		jsr	FloatCompare
.4c86	20 31 52	jsr $5231		jsr	CompareNotEqual
.4c89	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>4c8c	00 00 00 00				.dword	$00000000
>4c90	00 00					.byte	$00,$00
.4c92	20 57 52	jsr $5257		jsr	FloatCompare
.4c95	20 21 52	jsr $5221		jsr	CompareEqual
.4c98	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4c9b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -43772
>4c9e	fc aa 00 00				.dword	$0000aafc
>4ca2	00 80					.byte	$00,$80
.4ca4	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 9392
>4ca7	b0 24 00 00				.dword	$000024b0
>4cab	00 00					.byte	$00,$00
.4cad	20 96 51	jsr $5196		jsr	FloatAdd
.4cb0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -34380
>4cb3	4c 86 00 00				.dword	$0000864c
>4cb7	00 80					.byte	$00,$80
.4cb9	20 57 52	jsr $5257		jsr	FloatCompare
.4cbc	20 21 52	jsr $5221		jsr	CompareEqual
.4cbf	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4cc2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -43772
>4cc5	fc aa 00 00				.dword	$0000aafc
>4cc9	00 80					.byte	$00,$80
.4ccb	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 9392
>4cce	b0 24 00 00				.dword	$000024b0
>4cd2	00 00					.byte	$00,$00
.4cd4	20 90 51	jsr $5190		jsr	FloatSubtract
.4cd7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -53164
>4cda	ac cf 00 00				.dword	$0000cfac
>4cde	00 80					.byte	$00,$80
.4ce0	20 57 52	jsr $5257		jsr	FloatCompare
.4ce3	20 21 52	jsr $5221		jsr	CompareEqual
.4ce6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4ce9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -43772
>4cec	fc aa 00 00				.dword	$0000aafc
>4cf0	00 80					.byte	$00,$80
.4cf2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 9392
>4cf5	b0 24 00 00				.dword	$000024b0
>4cf9	00 00					.byte	$00,$00
.4cfb	20 32 54	jsr $5432		jsr	FloatMultiply
.4cfe	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -411106624
>4d01	40 fd 80 18				.dword	$1880fd40
>4d05	00 80					.byte	$00,$80
.4d07	20 57 52	jsr $5257		jsr	FloatCompare
.4d0a	20 21 52	jsr $5221		jsr	CompareEqual
.4d0d	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4d10	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -43772
>4d13	fc aa 00 00				.dword	$0000aafc
>4d17	00 80					.byte	$00,$80
.4d19	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 9392
>4d1c	b0 24 00 00				.dword	$000024b0
>4d20	00 00					.byte	$00,$00
.4d22	20 bb 52	jsr $52bb		jsr	FloatDivide
.4d25	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -4.66056218
>4d28	a6 a9 91 4a				.dword	$4a91a9a6
>4d2c	e4 80					.byte	$e4,$80
.4d2e	20 57 52	jsr $5257		jsr	FloatCompare
.4d31	20 21 52	jsr $5221		jsr	CompareEqual
.4d34	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4d37	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 9392
>4d3a	b0 24 00 00				.dword	$000024b0
>4d3e	00 00					.byte	$00,$00
.4d40	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 9392
>4d43	b0 24 00 00				.dword	$000024b0
>4d47	00 00					.byte	$00,$00
.4d49	20 57 52	jsr $5257		jsr	FloatCompare
.4d4c	20 21 52	jsr $5221		jsr	CompareEqual
.4d4f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>4d52	01 00 00 00				.dword	$00000001
>4d56	00 80					.byte	$00,$80
.4d58	20 57 52	jsr $5257		jsr	FloatCompare
.4d5b	20 21 52	jsr $5221		jsr	CompareEqual
.4d5e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4d61	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 9392
>4d64	b0 24 00 00				.dword	$000024b0
>4d68	00 00					.byte	$00,$00
.4d6a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 9392
>4d6d	b0 24 00 00				.dword	$000024b0
>4d71	00 00					.byte	$00,$00
.4d73	20 57 52	jsr $5257		jsr	FloatCompare
.4d76	20 31 52	jsr $5231		jsr	CompareNotEqual
.4d79	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>4d7c	00 00 00 00				.dword	$00000000
>4d80	00 00					.byte	$00,$00
.4d82	20 57 52	jsr $5257		jsr	FloatCompare
.4d85	20 21 52	jsr $5221		jsr	CompareEqual
.4d88	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4d8b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 9392
>4d8e	b0 24 00 00				.dword	$000024b0
>4d92	00 00					.byte	$00,$00
.4d94	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 9392
>4d97	b0 24 00 00				.dword	$000024b0
>4d9b	00 00					.byte	$00,$00
.4d9d	20 57 52	jsr $5257		jsr	FloatCompare
.4da0	20 3f 52	jsr $523f		jsr	CompareGreater
.4da3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>4da6	00 00 00 00				.dword	$00000000
>4daa	00 00					.byte	$00,$00
.4dac	20 57 52	jsr $5257		jsr	FloatCompare
.4daf	20 21 52	jsr $5221		jsr	CompareEqual
.4db2	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4db5	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 9392
>4db8	b0 24 00 00				.dword	$000024b0
>4dbc	00 00					.byte	$00,$00
.4dbe	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 9392
>4dc1	b0 24 00 00				.dword	$000024b0
>4dc5	00 00					.byte	$00,$00
.4dc7	20 57 52	jsr $5257		jsr	FloatCompare
.4dca	20 4f 52	jsr $524f		jsr	CompareGreaterEqual
.4dcd	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>4dd0	01 00 00 00				.dword	$00000001
>4dd4	00 80					.byte	$00,$80
.4dd6	20 57 52	jsr $5257		jsr	FloatCompare
.4dd9	20 21 52	jsr $5221		jsr	CompareEqual
.4ddc	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4ddf	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 9392
>4de2	b0 24 00 00				.dword	$000024b0
>4de6	00 00					.byte	$00,$00
.4de8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 9392
>4deb	b0 24 00 00				.dword	$000024b0
>4def	00 00					.byte	$00,$00
.4df1	20 57 52	jsr $5257		jsr	FloatCompare
.4df4	20 37 52	jsr $5237		jsr	CompareLess
.4df7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>4dfa	00 00 00 00				.dword	$00000000
>4dfe	00 00					.byte	$00,$00
.4e00	20 57 52	jsr $5257		jsr	FloatCompare
.4e03	20 21 52	jsr $5221		jsr	CompareEqual
.4e06	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4e09	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 9392
>4e0c	b0 24 00 00				.dword	$000024b0
>4e10	00 00					.byte	$00,$00
.4e12	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 9392
>4e15	b0 24 00 00				.dword	$000024b0
>4e19	00 00					.byte	$00,$00
.4e1b	20 57 52	jsr $5257		jsr	FloatCompare
.4e1e	20 47 52	jsr $5247		jsr	CompareLessEqual
.4e21	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>4e24	01 00 00 00				.dword	$00000001
>4e28	00 80					.byte	$00,$80
.4e2a	20 57 52	jsr $5257		jsr	FloatCompare
.4e2d	20 21 52	jsr $5221		jsr	CompareEqual
.4e30	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4e33	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 33.49226533
>4e36	34 0a fc 42				.dword	$42fc0a34
>4e3a	e7 00					.byte	$e7,$00
.4e3c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -68.19284037
>4e3f	fd 5d 31 44				.dword	$44315dfd
>4e43	e8 80					.byte	$e8,$80
.4e45	20 96 51	jsr $5196		jsr	FloatAdd
.4e48	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -34.70057504
>4e4b	c6 b1 66 45				.dword	$4566b1c6
>4e4f	e7 80					.byte	$e7,$80
.4e51	20 57 52	jsr $5257		jsr	FloatCompare
.4e54	20 21 52	jsr $5221		jsr	CompareEqual
.4e57	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4e5a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 33.49226533
>4e5d	34 0a fc 42				.dword	$42fc0a34
>4e61	e7 00					.byte	$e7,$00
.4e63	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -68.19284037
>4e66	fd 5d 31 44				.dword	$44315dfd
>4e6a	e8 80					.byte	$e8,$80
.4e6c	20 90 51	jsr $5190		jsr	FloatSubtract
.4e6f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 101.68510569
>4e72	16 63 af 65				.dword	$65af6316
>4e76	e8 00					.byte	$e8,$00
.4e78	20 57 52	jsr $5257		jsr	FloatCompare
.4e7b	20 21 52	jsr $5221		jsr	CompareEqual
.4e7e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4e81	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 33.49226533
>4e84	34 0a fc 42				.dword	$42fc0a34
>4e88	e7 00					.byte	$e7,$00
.4e8a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -68.19284037
>4e8d	fd 5d 31 44				.dword	$44315dfd
>4e91	e8 80					.byte	$e8,$80
.4e93	20 32 54	jsr $5432		jsr	FloatMultiply
.4e96	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -2283.93270298
>4e99	2d 76 5f 47				.dword	$475f762d
>4e9d	ed 80					.byte	$ed,$80
.4e9f	20 57 52	jsr $5257		jsr	FloatCompare
.4ea2	20 21 52	jsr $5221		jsr	CompareEqual
.4ea5	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4ea8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 33.49226533
>4eab	34 0a fc 42				.dword	$42fc0a34
>4eaf	e7 00					.byte	$e7,$00
.4eb1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -68.19284037
>4eb4	fd 5d 31 44				.dword	$44315dfd
>4eb8	e8 80					.byte	$e8,$80
.4eba	20 bb 52	jsr $52bb		jsr	FloatDivide
.4ebd	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -0.49114049
>4ec0	16 62 bb 7d				.dword	$7dbb6216
>4ec4	e0 80					.byte	$e0,$80
.4ec6	20 57 52	jsr $5257		jsr	FloatCompare
.4ec9	20 21 52	jsr $5221		jsr	CompareEqual
.4ecc	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4ecf	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -10.33076861
>4ed2	03 6a a5 52				.dword	$52a56a03
>4ed6	e5 80					.byte	$e5,$80
.4ed8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -10.33076861
>4edb	03 6a a5 52				.dword	$52a56a03
>4edf	e5 80					.byte	$e5,$80
.4ee1	20 57 52	jsr $5257		jsr	FloatCompare
.4ee4	20 3f 52	jsr $523f		jsr	CompareGreater
.4ee7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>4eea	00 00 00 00				.dword	$00000000
>4eee	00 00					.byte	$00,$00
.4ef0	20 57 52	jsr $5257		jsr	FloatCompare
.4ef3	20 21 52	jsr $5221		jsr	CompareEqual
.4ef6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4ef9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -10.33076861
>4efc	03 6a a5 52				.dword	$52a56a03
>4f00	e5 80					.byte	$e5,$80
.4f02	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -10.33076861
>4f05	03 6a a5 52				.dword	$52a56a03
>4f09	e5 80					.byte	$e5,$80
.4f0b	20 57 52	jsr $5257		jsr	FloatCompare
.4f0e	20 4f 52	jsr $524f		jsr	CompareGreaterEqual
.4f11	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>4f14	01 00 00 00				.dword	$00000001
>4f18	00 80					.byte	$00,$80
.4f1a	20 57 52	jsr $5257		jsr	FloatCompare
.4f1d	20 21 52	jsr $5221		jsr	CompareEqual
.4f20	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4f23	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -10.33076861
>4f26	03 6a a5 52				.dword	$52a56a03
>4f2a	e5 80					.byte	$e5,$80
.4f2c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -10.33076861
>4f2f	03 6a a5 52				.dword	$52a56a03
>4f33	e5 80					.byte	$e5,$80
.4f35	20 57 52	jsr $5257		jsr	FloatCompare
.4f38	20 37 52	jsr $5237		jsr	CompareLess
.4f3b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>4f3e	00 00 00 00				.dword	$00000000
>4f42	00 00					.byte	$00,$00
.4f44	20 57 52	jsr $5257		jsr	FloatCompare
.4f47	20 21 52	jsr $5221		jsr	CompareEqual
.4f4a	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4f4d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -10.33076861
>4f50	03 6a a5 52				.dword	$52a56a03
>4f54	e5 80					.byte	$e5,$80
.4f56	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -10.33076861
>4f59	03 6a a5 52				.dword	$52a56a03
>4f5d	e5 80					.byte	$e5,$80
.4f5f	20 57 52	jsr $5257		jsr	FloatCompare
.4f62	20 47 52	jsr $5247		jsr	CompareLessEqual
.4f65	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>4f68	01 00 00 00				.dword	$00000001
>4f6c	00 80					.byte	$00,$80
.4f6e	20 57 52	jsr $5257		jsr	FloatCompare
.4f71	20 21 52	jsr $5221		jsr	CompareEqual
.4f74	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4f77	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -10.33076861
>4f7a	03 6a a5 52				.dword	$52a56a03
>4f7e	e5 80					.byte	$e5,$80
.4f80	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -10.33076861
>4f83	03 6a a5 52				.dword	$52a56a03
>4f87	e5 80					.byte	$e5,$80
.4f89	20 57 52	jsr $5257		jsr	FloatCompare
.4f8c	20 21 52	jsr $5221		jsr	CompareEqual
.4f8f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>4f92	01 00 00 00				.dword	$00000001
>4f96	00 80					.byte	$00,$80
.4f98	20 57 52	jsr $5257		jsr	FloatCompare
.4f9b	20 21 52	jsr $5221		jsr	CompareEqual
.4f9e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4fa1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -10.33076861
>4fa4	03 6a a5 52				.dword	$52a56a03
>4fa8	e5 80					.byte	$e5,$80
.4faa	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -10.33076861
>4fad	03 6a a5 52				.dword	$52a56a03
>4fb1	e5 80					.byte	$e5,$80
.4fb3	20 57 52	jsr $5257		jsr	FloatCompare
.4fb6	20 31 52	jsr $5231		jsr	CompareNotEqual
.4fb9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>4fbc	00 00 00 00				.dword	$00000000
>4fc0	00 00					.byte	$00,$00
.4fc2	20 57 52	jsr $5257		jsr	FloatCompare
.4fc5	20 21 52	jsr $5221		jsr	CompareEqual
.4fc8	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck

;******  Return to file: testing/testing.asm

.4fcb	60		rts				rts
.4fcc					FPAssertCheck:
.4fcc	e0 00		cpx #$00			cpx 	#0
.4fce	d0 06		bne $4fd6			bne 	_FPACFail
.4fd0	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.4fd2	f0 02		beq $4fd6			beq 	_FPACFail
.4fd4	ca		dex				dex
.4fd5	60		rts				rts
.4fd6					_FPACFail:
>4fd6	db						.byte 	$DB 						; causes a break in the emulator
.4fd7	80 fd		bra $4fd6			bra 	_FPACFail
.4fd9					FPAbs:
.4fd9	74 2e		stz $2e,x			stz 	NSStatus,x
.4fdb	60		rts				rts
.4fdc					FPPushConstant:
.4fdc	e8		inx				inx
.4fdd	68		pla				pla
.4fde	7a		ply				ply
.4fdf	85 28		sta $28				sta 	zTemp0
.4fe1	84 29		sty $29				sty 	zTemp0+1
.4fe3	a0 01		ldy #$01			ldy 	#1
.4fe5	b1 28		lda ($28),y			lda 	(zTemp0),y
.4fe7	95 3a		sta $3a,x			sta 	NSMantissa0,x
.4fe9	c8		iny				iny
.4fea	b1 28		lda ($28),y			lda 	(zTemp0),y
.4fec	95 46		sta $46,x			sta 	NSMantissa1,x
.4fee	c8		iny				iny
.4fef	b1 28		lda ($28),y			lda 	(zTemp0),y
.4ff1	95 52		sta $52,x			sta 	NSMantissa2,x
.4ff3	c8		iny				iny
.4ff4	b1 28		lda ($28),y			lda 	(zTemp0),y
.4ff6	95 5e		sta $5e,x			sta 	NSMantissa3,x
.4ff8	c8		iny				iny
.4ff9	b1 28		lda ($28),y			lda 	(zTemp0),y
.4ffb	95 6a		sta $6a,x			sta 	NSExponent,x
.4ffd	c8		iny				iny
.4ffe	b1 28		lda ($28),y			lda 	(zTemp0),y
.5000	95 2e		sta $2e,x			sta 	NSStatus,x
.5002	a5 28		lda $28				lda 	zTemp0
.5004	a4 29		ldy $29				ldy 	zTemp0+1
.5006	18		clc				clc
.5007	69 06		adc #$06			adc 	#6
.5009	90 01		bcc $500c			bcc 	_FPPCNoCarry
.500b	c8		iny				iny
.500c					_FPPCNoCarry:
.500c	5a		phy				phy
.500d	48		pha				pha
.500e	60		rts				rts

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/common.library

=$80					C64_END                  = $80 ; $80 end
=$81					C64_FOR                  = $81 ; $81 for
=$82					C64_NEXT                 = $82 ; $82 next
=$83					C64_DATA                 = $83 ; $83 data
=$84					C64_INPUTHASH            = $84 ; $84 input#
=$85					C64_INPUT                = $85 ; $85 input
=$86					C64_DIM                  = $86 ; $86 dim
=$87					C64_READ                 = $87 ; $87 read
=$88					C64_LET                  = $88 ; $88 let
=$89					C64_GOTO                 = $89 ; $89 goto
=$8a					C64_RUN                  = $8a ; $8a run
=$8b					C64_IF                   = $8b ; $8b if
=$8c					C64_RESTORE              = $8c ; $8c restore
=$8d					C64_GOSUB                = $8d ; $8d gosub
=$8e					C64_RETURN               = $8e ; $8e return
=$8f					C64_REM                  = $8f ; $8f rem
=$90					C64_STOP                 = $90 ; $90 stop
=$91					C64_ON                   = $91 ; $91 on
=$92					C64_WAIT                 = $92 ; $92 wait
=$93					C64_LOAD                 = $93 ; $93 load
=$94					C64_SAVE                 = $94 ; $94 save
=$95					C64_VERIFY               = $95 ; $95 verify
=$96					C64_DEF                  = $96 ; $96 def
=$97					C64_POKE                 = $97 ; $97 poke
=$98					C64_PRINTHASH            = $98 ; $98 print#
=$99					C64_PRINT                = $99 ; $99 print
=$9a					C64_CONT                 = $9a ; $9a cont
=$9b					C64_LIST                 = $9b ; $9b list
=$9c					C64_CLR                  = $9c ; $9c clr
=$9d					C64_CMD                  = $9d ; $9d cmd
=$9e					C64_SYS                  = $9e ; $9e sys
=$9f					C64_OPEN                 = $9f ; $9f open
=$a0					C64_CLOSE                = $a0 ; $a0 close
=$a1					C64_GET                  = $a1 ; $a1 get
=$a2					C64_NEW                  = $a2 ; $a2 new
=$a3					C64_TABLB                = $a3 ; $a3 tab(
=$a4					C64_TO                   = $a4 ; $a4 to
=$a5					C64_FN                   = $a5 ; $a5 fn
=$a6					C64_SPCLB                = $a6 ; $a6 spc(
=$a7					C64_THEN                 = $a7 ; $a7 then
=$a8					C64_NOT                  = $a8 ; $a8 not
=$a9					C64_STEP                 = $a9 ; $a9 step
=$aa					C64_PLUS                 = $aa ; $aa +
=$ab					C64_MINUS                = $ab ; $ab -
=$ac					C64_TIMES                = $ac ; $ac *
=$ad					C64_DIVIDE               = $ad ; $ad /
=$ae					C64_POWER                = $ae ; $ae ^
=$af					C64_AND                  = $af ; $af and
=$b0					C64_OR                   = $b0 ; $b0 or
=$b1					C64_GREATER              = $b1 ; $b1 >
=$b2					C64_EQUAL                = $b2 ; $b2 =
=$b3					C64_LESS                 = $b3 ; $b3 <
=$b4					C64_SGN                  = $b4 ; $b4 sgn
=$b5					C64_INT                  = $b5 ; $b5 int
=$b6					C64_ABS                  = $b6 ; $b6 abs
=$b7					C64_USR                  = $b7 ; $b7 usr
=$b8					C64_FRE                  = $b8 ; $b8 fre
=$b9					C64_POS                  = $b9 ; $b9 pos
=$ba					C64_SQR                  = $ba ; $ba sqr
=$bb					C64_RND                  = $bb ; $bb rnd
=$bc					C64_LOG                  = $bc ; $bc log
=$bd					C64_EXP                  = $bd ; $bd exp
=$be					C64_COS                  = $be ; $be cos
=$bf					C64_SIN                  = $bf ; $bf sin
=$c0					C64_TAN                  = $c0 ; $c0 tan
=$c1					C64_ATN                  = $c1 ; $c1 atn
=$c2					C64_PEEK                 = $c2 ; $c2 peek
=$c3					C64_LEN                  = $c3 ; $c3 len
=$c4					C64_STRDOLLAR            = $c4 ; $c4 str$
=$c5					C64_VAL                  = $c5 ; $c5 val
=$c6					C64_ASC                  = $c6 ; $c6 asc
=$c7					C64_CHRDOLLAR            = $c7 ; $c7 chr$
=$c8					C64_LEFTDOLLAR           = $c8 ; $c8 left$
=$c9					C64_RIGHTDOLLAR          = $c9 ; $c9 right$
=$ca					C64_MIDDOLLAR            = $ca ; $ca mid$
=$cb					C64_GO                   = $cb ; $cb go
=$ce80					C64_MON                  = $ce80 ; $ce80 mon
=$ce81					C64_DOS                  = $ce81 ; $ce81 dos
=$ce82					C64_OLD                  = $ce82 ; $ce82 old
=$ce83					C64_GEOS                 = $ce83 ; $ce83 geos
=$ce84					C64_VPOKE                = $ce84 ; $ce84 vpoke
=$ce85					C64_VLOAD                = $ce85 ; $ce85 vload
=$ce86					C64_SCREEN               = $ce86 ; $ce86 screen
=$ce87					C64_PSET                 = $ce87 ; $ce87 pset
=$ce88					C64_LINE                 = $ce88 ; $ce88 line
=$ce89					C64_FRAME                = $ce89 ; $ce89 frame
=$ce8a					C64_RECT                 = $ce8a ; $ce8a rect
=$ce8b					C64_CHAR                 = $ce8b ; $ce8b char
=$ce8c					C64_MOUSE                = $ce8c ; $ce8c mouse
=$ce8d					C64_COLOR                = $ce8d ; $ce8d color
=$ce8e					C64_TEST                 = $ce8e ; $ce8e test
=$ce8f					C64_RESET                = $ce8f ; $ce8f reset
=$ce90					C64_CLS                  = $ce90 ; $ce90 cls
=$ce91					C64_CODEX                = $ce91 ; $ce91 codex
=$ce92					C64_LOCATE               = $ce92 ; $ce92 locate
=$ce93					C64_BOOT                 = $ce93 ; $ce93 boot
=$ce94					C64_KEYMAP               = $ce94 ; $ce94 keymap
=$ce95					C64_BLOAD                = $ce95 ; $ce95 bload
=$ce96					C64_BVLOAD               = $ce96 ; $ce96 bvload
=$ce97					C64_BVERIFY              = $ce97 ; $ce97 bverify
=$ce98					C64_BANK                 = $ce98 ; $ce98 bank
=$ce99					C64_FMINIT               = $ce99 ; $ce99 fminit
=$ce9a					C64_FMNOTE               = $ce9a ; $ce9a fmnote
=$ce9b					C64_FMDRUM               = $ce9b ; $ce9b fmdrum
=$ce9c					C64_FMINST               = $ce9c ; $ce9c fminst
=$ce9d					C64_FMVIB                = $ce9d ; $ce9d fmvib
=$ce9e					C64_FMFREQ               = $ce9e ; $ce9e fmfreq
=$ce9f					C64_FMVOL                = $ce9f ; $ce9f fmvol
=$cea0					C64_FMPAN                = $cea0 ; $cea0 fmpan
=$cea1					C64_FMPLAY               = $cea1 ; $cea1 fmplay
=$cea2					C64_FMCHORD              = $cea2 ; $cea2 fmchord
=$cea3					C64_FMPOKE               = $cea3 ; $cea3 fmpoke
=$cea4					C64_PSGINIT              = $cea4 ; $cea4 psginit
=$cea5					C64_PSGNOTE              = $cea5 ; $cea5 psgnote
=$cea6					C64_PSGVOL               = $cea6 ; $cea6 psgvol
=$cea7					C64_PSGWAV               = $cea7 ; $cea7 psgwav
=$cea8					C64_PSGFREQ              = $cea8 ; $cea8 psgfreq
=$cea9					C64_PSGPAN               = $cea9 ; $cea9 psgpan
=$ceaa					C64_PSGPLAY              = $ceaa ; $ceaa psgplay
=$ceab					C64_PSGCHORD             = $ceab ; $ceab psgchord
=$ceac					C64_REBOOT               = $ceac ; $ceac reboot
=$cead					C64_POWEROFF             = $cead ; $cead poweroff
=$ceae					C64_I2CPOKE              = $ceae ; $ceae i2cpoke
=$ceaf					C64_SLEEP                = $ceaf ; $ceaf sleep
=$ceb0					C64_BSAVE                = $ceb0 ; $ceb0 bsave
=$ceb1					C64_MENU                 = $ceb1 ; $ceb1 menu
=$ceb2					C64_REN                  = $ceb2 ; $ceb2 ren
=$ceb3					C64_LINPUT               = $ceb3 ; $ceb3 linput
=$ceb4					C64_LINPUTHASH           = $ceb4 ; $ceb4 linput#
=$ceb5					C64_BINPUTHASH           = $ceb5 ; $ceb5 binput#
=$ceb6					C64_HELP                 = $ceb6 ; $ceb6 help
=$ced0					C64_VPEEK                = $ced0 ; $ced0 vpeek
=$ced1					C64_MX                   = $ced1 ; $ced1 mx
=$ced2					C64_MY                   = $ced2 ; $ced2 my
=$ced3					C64_MB                   = $ced3 ; $ced3 mb
=$ced4					C64_JOY                  = $ced4 ; $ced4 joy
=$ced5					C64_HEXDOLLAR            = $ced5 ; $ced5 hex$
=$ced6					C64_BINDOLLAR            = $ced6 ; $ced6 bin$
=$ced7					C64_I2CPEEK              = $ced7 ; $ced7 i2cpeek
=$ced8					C64_POINTER              = $ced8 ; $ced8 pointer
=$ced9					C64_STRPTR               = $ced9 ; $ced9 strptr
=$ceda					C64_RPTDOLLAR            = $ceda ; $ceda rpt$
=$1000					CodeStart = $1000
=$22					ZeroPageMandatory = $22
=$400					MemoryStorage = $400
.0022					codePtr:
>0022							.fill 	2
.0024					codePage:
>0024							.fill 	1
.0025					objPtr:
>0025							.fill 	2
.0027					objPage:
>0027							.fill 	1
.0028					zTemp0:
>0028							.fill 	2
.002a					zTemp1:
>002a							.fill 	2
.002c					zTemp2:
>002c							.fill 	2
=$80					PCD_STARTBINARY = $80
=$8d					PCD_ENDBINARY = $8d
=$8d					PCD_STARTCOMMAND = $8d
=$ca					PCD_ENDCOMMAND = $ca
=$ca					PCD_STARTSYSTEM = $ca
=$d5					PCD_ENDSYSTEM = $d5
=$80					PCD_PLUS             = $80 ; +
=$81					PCD_MINUS            = $81 ; -
=$82					PCD_TIMES            = $82 ; *
=$83					PCD_DIVIDE           = $83 ; /
=$84					PCD_POWER            = $84 ; ^
=$85					PCD_AND              = $85 ; and
=$86					PCD_OR               = $86 ; or
=$87					PCD_GREATER          = $87 ; >
=$88					PCD_EQUAL            = $88 ; =
=$89					PCD_LESS             = $89 ; <
=$8a					PCD_GREATEREQUAL     = $8a ; >=
=$8b					PCD_LESSGREATER      = $8b ; <>
=$8c					PCD_LESSEQUAL        = $8c ; <=
=$8d					PCD_ABS              = $8d ; abs
=$8e					PCD_ARRAY            = $8e ; array
=$8f					PCD_ASC              = $8f ; asc
=$90					PCD_ASSERT           = $90 ; assert
=$91					PCD_BINDOLLAR        = $91 ; bin$
=$92					PCD_PRINTCMD_CHR     = $92 ; print.chr
=$93					PCD_CHRDOLLAR        = $93 ; chr$
=$94					PCD_SCMD_CMP         = $94 ; s.cmp
=$95					PCD_FOR              = $95 ; for
=$96					PCD_FRE              = $96 ; fre
=$97					PCD_GET              = $97 ; get
=$98					PCD_RETURN           = $98 ; return
=$99					PCD_PSET             = $99 ; pset
=$9a					PCD_LINE             = $9a ; line
=$9b					PCD_RECT             = $9b ; rect
=$9c					PCD_FRAME            = $9c ; frame
=$9d					PCD_CHAR             = $9d ; char
=$9e					PCD_HEXDOLLAR        = $9e ; hex$
=$9f					PCD_INPUT            = $9f ; input
=$a0					PCD_INPUTDOLLAR      = $a0 ; input$
=$a1					PCD_INPUTCMD_START   = $a1 ; input.start
=$a2					PCD_LEN              = $a2 ; len
=$a3					PCD_FCMD_CMP         = $a3 ; f.cmp
=$a4					PCD_INTCMD_DIV       = $a4 ; int.div
=$a5					PCD_NEGATE           = $a5 ; negate
=$a6					PCD_NEWCMD_LINE      = $a6 ; new.line
=$a7					PCD_NEXT             = $a7 ; next
=$a8					PCD_NOT              = $a8 ; not
=$a9					PCD_ON               = $a9 ; on
=$aa					PCD_MOREON           = $aa ; moreon
=$ab					PCD_PEEK             = $ab ; peek
=$ac					PCD_POKE             = $ac ; poke
=$ad					PCD_POS              = $ad ; pos
=$ae					PCD_GETCHANNEL       = $ae ; getchannel
=$af					PCD_SETCHANNEL       = $af ; setchannel
=$b0					PCD_PRINTCMD_N       = $b0 ; print.n
=$b1					PCD_PRINTCMD_S       = $b1 ; print.s
=$b2					PCD_READ             = $b2 ; read
=$b3					PCD_READDOLLAR       = $b3 ; read$
=$b4					PCD_RND              = $b4 ; rnd
=$b5					PCD_CONCAT           = $b5 ; concat
=$b6					PCD_SGN              = $b6 ; sgn
=$b7					PCD_PRINTCMD_TAB     = $b7 ; print.tab
=$b8					PCD_PRINTCMD_POS     = $b8 ; print.pos
=$b9					PCD_PRINTCMD_SPC     = $b9 ; print.spc
=$ba					PCD_STRDOLLAR        = $ba ; str$
=$bb					PCD_LEFTDOLLAR       = $bb ; left$
=$bc					PCD_RIGHTDOLLAR      = $bc ; right$
=$bd					PCD_MIDDOLLAR        = $bd ; mid$
=$be					PCD_SWAP             = $be ; swap
=$bf					PCD_TI               = $bf ; ti
=$c0					PCD_TIDOLLAR         = $c0 ; ti$
=$c1					PCD_USR              = $c1 ; usr
=$c2					PCD_VAL              = $c2 ; val
=$c3					PCD_CLOSE            = $c3 ; close
=$c4					PCD_EXIT             = $c4 ; exit
=$c5					PCD_DEBUG            = $c5 ; debug
=$c6					PCD_OPEN             = $c6 ; open
=$c7					PCD_SCREEN           = $c7 ; screen
=$c8					PCD_VPOKE            = $c8 ; vpoke
=$c9					PCD_VPEEK            = $c9 ; vpeek
=$ca					PCD_CMD_SHIFT        = $ca ; .shift
=$cb					PCD_CMD_BYTE         = $cb ; .byte
=$cc					PCD_CMD_WORD         = $cc ; .word
=$cd					PCD_CMD_FLOAT        = $cd ; .float
=$ce					PCD_CMD_STRING       = $ce ; .string
=$cf					PCD_CMD_DATA         = $cf ; .data
=$d0					PCD_CMD_GOTO         = $d0 ; .goto
=$d1					PCD_CMD_GOSUB        = $d1 ; .gosub
=$d2					PCD_CMD_GOTOCMD_Z    = $d2 ; .goto.z
=$d3					PCD_CMD_GOTOCMD_NZ   = $d3 ; .goto.nz
=$d4					PCD_CMD_VARSPACE     = $d4 ; .varspace
=$ca80					PCD_CLR              = $ca80 ; clr
=$ca81					PCD_DIM              = $ca81 ; dim
=$ca82					PCD_END              = $ca82 ; end
=$ca83					PCD_JOY              = $ca83 ; joy
=$ca84					PCD_INT              = $ca84 ; int
=$ca85					PCD_SQR              = $ca85 ; sqr
=$ca86					PCD_LOG              = $ca86 ; log
=$ca87					PCD_EXP              = $ca87 ; exp
=$ca88					PCD_COS              = $ca88 ; cos
=$ca89					PCD_SIN              = $ca89 ; sin
=$ca8a					PCD_TAN              = $ca8a ; tan
=$ca8b					PCD_ATN              = $ca8b ; atn
=$ca8c					PCD_MOUSE            = $ca8c ; mouse
=$ca8d					PCD_MB               = $ca8d ; mb
=$ca8e					PCD_MX               = $ca8e ; mx
=$ca8f					PCD_MY               = $ca8f ; my
=$ca90					PCD_RESTORE          = $ca90 ; restore
=$ca91					PCD_STOP             = $ca91 ; stop
=$ca92					PCD_SYS              = $ca92 ; sys
=$ca93					PCD_TIDOLLARCMD_WRITE = $ca93 ; ti$.write
=$ca94					PCD_WAIT             = $ca94 ; wait
=$ca95					PCD_I2CPOKE          = $ca95 ; i2cpoke
=$ca96					PCD_I2CPEEK          = $ca96 ; i2cpeek
=$ca97					PCD_BANK             = $ca97 ; bank
=$ca98					PCD_SLEEP            = $ca98 ; sleep
=$ca99					PCD_FMINIT           = $ca99 ; fminit
=$ca9a					PCD_FMNOTE           = $ca9a ; fmnote
=$ca9b					PCD_FMDRUM           = $ca9b ; fmdrum
=$ca9c					PCD_FMINST           = $ca9c ; fminst
=$ca9d					PCD_FMVIB            = $ca9d ; fmvib
=$ca9e					PCD_FMFREQ           = $ca9e ; fmfreq
=$ca9f					PCD_FMVOL            = $ca9f ; fmvol
=$caa0					PCD_FMPAN            = $caa0 ; fmpan
=$caa1					PCD_FMPLAY           = $caa1 ; fmplay
=$caa2					PCD_FMCHORD          = $caa2 ; fmchord
=$caa3					PCD_FMPOKE           = $caa3 ; fmpoke
=$caa4					PCD_PSGINIT          = $caa4 ; psginit
=$caa5					PCD_PSGNOTE          = $caa5 ; psgnote
=$caa6					PCD_PSGVOL           = $caa6 ; psgvol
=$caa7					PCD_PSGWAV           = $caa7 ; psgwav
=$caa8					PCD_PSGFREQ          = $caa8 ; psgfreq
=$caa9					PCD_PSGPAN           = $caa9 ; psgpan
=$caaa					PCD_PSGPLAY          = $caaa ; psgplay
=$caab					PCD_PSGCHORD         = $caab ; psgchord
=$caac					PCD_CLS              = $caac ; cls
=$caad					PCD_LOCATE           = $caad ; locate
=$caae					PCD_COLOR            = $caae ; color
.500f					ErrorV_range:
.500f	20 0a 10	jsr $100a		jsr	ErrorHandler
>5012	4f 55 54 20 4f 46 20 52			.text	"OUT OF RANGE",0
>501a	41 4e 47 45 00
.501f					ErrorV_value:
.501f	20 0a 10	jsr $100a		jsr	ErrorHandler
>5022	42 41 44 20 56 41 4c 55			.text	"BAD VALUE",0
>502a	45 00
.502c					ErrorV_syntax:
.502c	20 0a 10	jsr $100a		jsr	ErrorHandler
>502f	53 59 4e 54 41 58 20 45			.text	"SYNTAX ERROR",0
>5037	52 52 4f 52 00
.503c					ErrorV_type:
.503c	20 0a 10	jsr $100a		jsr	ErrorHandler
>503f	54 59 50 45 20 4d 49 53			.text	"TYPE MISMATCH",0
>5047	4d 41 54 43 48 00
.504d					ErrorV_unimplemented:
.504d	20 0a 10	jsr $100a		jsr	ErrorHandler
>5050	4e 4f 54 20 49 4d 50 4c			.text	"NOT IMPLEMENTED",0
>5058	45 4d 45 4e 54 45 44 00
.5060					ErrorV_assert:
.5060	20 0a 10	jsr $100a		jsr	ErrorHandler
>5063	41 53 53 45 52 54 20 46			.text	"ASSERT FAIL",0
>506b	41 49 4c 00
.506f					ErrorV_line:
.506f	20 0a 10	jsr $100a		jsr	ErrorHandler
>5072	55 4e 4b 4e 4f 57 4e 20			.text	"UNKNOWN LINE NUMBER",0
>507a	4c 49 4e 45 20 4e 55 4d 42 45 52 00
.5086					ErrorV_internal:
.5086	20 0a 10	jsr $100a		jsr	ErrorHandler
>5089	49 4e 54 45 52 4e 41 4c			.text	"INTERNAL ERROR",0
>5091	20 45 52 52 4f 52 00
.5098					ErrorV_divzero:
.5098	20 0a 10	jsr $100a		jsr	ErrorHandler
>509b	44 49 56 49 44 45 20 42			.text	"DIVIDE BY ZERO",0
>50a3	59 20 5a 45 52 4f 00
.50aa					ErrorV_structure:
.50aa	20 0a 10	jsr $100a		jsr	ErrorHandler
>50ad	53 54 52 55 43 54 55 52			.text	"STRUCTURE IMBALANCE",0
>50b5	45 20 49 4d 42 41 4c 41 4e 43 45 00
.50c1					ErrorV_stop:
.50c1	20 0a 10	jsr $100a		jsr	ErrorHandler
>50c4	50 52 4f 47 52 41 4d 20			.text	"PROGRAM STOPPED",0
>50cc	53 54 4f 50 50 45 44 00
.50d4					ErrorV_data:
.50d4	20 0a 10	jsr $100a		jsr	ErrorHandler
>50d7	4f 55 54 20 4f 46 20 44			.text	"OUT OF DATA",0
>50df	41 54 41 00
.50e3					ErrorV_undeclared:
.50e3	20 0a 10	jsr $100a		jsr	ErrorHandler
>50e6	55 4e 4b 4e 4f 57 4e 20			.text	"UNKNOWN ARRAY",0
>50ee	41 52 52 41 59 00
.50f4					ErrorV_redefine:
.50f4	20 0a 10	jsr $100a		jsr	ErrorHandler
>50f7	41 52 52 41 59 20 52 45			.text	"ARRAY REDEFINED",0
>50ff	44 45 46 49 4e 45 44 00
.5107					ErrorV_index:
.5107	20 0a 10	jsr $100a		jsr	ErrorHandler
>510a	42 41 44 20 41 52 52 41			.text	"BAD ARRAY INDEX",0
>5112	59 20 49 4e 44 45 58 00
.511a					ErrorV_memory:
.511a	20 0a 10	jsr $100a		jsr	ErrorHandler
>511d	4f 55 54 20 4f 46 20 4d			.text	"OUT OF MEMORY",0
>5125	45 4d 4f 52 59 00
.512b					ErrorV_channel:
.512b	20 0a 10	jsr $100a		jsr	ErrorHandler
>512e	49 4e 50 55 54 2f 4f 55			.text	"INPUT/OUTPUT ERROR",0
>5136	54 50 55 54 20 45 52 52 4f 52 00
.5141					MoveObjectForward:
.5141	b2 25		lda ($25)			lda 	(objPtr) 					; get next
.5143	c9 ff		cmp #$ff			cmp 	#$FF
.5145	f0 36		beq $517d			beq 	_MOFEnd
.5147	c9 40		cmp #$40			cmp 	#$40 						; 00-3F
.5149	90 24		bcc $516f			bcc 	_MOFAdvance1 				; forward 1
.514b	a0 02		ldy #$02			ldy 	#2 							; 40-6F
.514d	c9 70		cmp #$70			cmp 	#$70 						; forward 2
.514f	90 20		bcc $5171			bcc 	_MOFAdvanceY
.5151	c9 ca		cmp #$ca			cmp 	#PCD_STARTSYSTEM 			; 70 - System tokens.
.5153	90 1a		bcc $516f			bcc 	_MOFAdvance1 				; forward 1
.5155	a8		tay				tay 								; read the size.
.5156	b9 bb 50	lda $50bb,y			lda 	MOFSizeTable-PCD_STARTSYSTEM,y
.5159	a8		tay				tay
.515a	c8		iny				iny 								; add 1 for the system token.
.515b	d0 14		bne $5171			bne 	_MOFAdvanceY 				; if 0, was $FF thus a string/data skip.
.515d	a0 01		ldy #$01			ldy 	#1 							; get length byte
.515f	b1 25		lda ($25),y			lda 	(objPtr),y
.5161	a8		tay				tay 								; into Y.
.5162	18		clc				clc
.5163	a5 25		lda $25				lda 	objPtr						; add 2 to the object pointer
.5165	69 02		adc #$02			adc 	#2
.5167	85 25		sta $25				sta 	objPtr
.5169	90 02		bcc $516d			bcc 	_MOFNoCarry1
.516b	e6 26		inc $26				inc 	objPtr+1
.516d					_MOFNoCarry1:
.516d	80 02		bra $5171			bra 	_MOFAdvanceY
.516f					_MOFAdvance1:
.516f	a0 01		ldy #$01			ldy 	#1
.5171					_MOFAdvanceY:
.5171	98		tya				tya 								; add X to objPtr
.5172	18		clc				clc
.5173	65 25		adc $25				adc 	objPtr
.5175	85 25		sta $25				sta 	objPtr
.5177	90 02		bcc $517b			bcc 	_MOFNoCarry2
.5179	e6 26		inc $26				inc 	objPtr+1
.517b					_MOFNoCarry2:
.517b	18		clc				clc 								; not completed.
.517c	60		rts				rts
.517d					_MOFEnd:
.517d	e6 25		inc $25				inc 	objPtr
.517f	d0 02		bne $5183			bne 	_MOFENoCarry
.5181	e6 26		inc $26				inc 	objPtr+1
.5183					_MOFENoCarry:
.5183	38		sec				sec
.5184	60		rts				rts
.5185					MOFSizeTable:
>5185	01					.byte	1         	; $ca .shift
>5186	01					.byte	1         	; $cb .byte
>5187	02					.byte	2         	; $cc .word
>5188	05					.byte	5         	; $cd .float
>5189	ff					.byte	255       	; $ce .string
>518a	ff					.byte	255       	; $cf .data
>518b	03					.byte	3         	; $d0 .goto
>518c	03					.byte	3         	; $d1 .gosub
>518d	03					.byte	3         	; $d2 .goto.z
>518e	03					.byte	3         	; $d3 .goto.nz
>518f	02					.byte	2         	; $d4 .varspace

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library

=12					MathStackSize = 12
=$40					NSSString = $40 							; string vs typemask
=$00					NSSIFloat = $00 							; ifloat vs typemask
=$20					NSSIInt16 = $20								; when set, a reference is a 16 bit reference (e.g. a%)
=$40					NSSTypeMask = $40
=$80					NSSArray = $80  							; array (in variable code)
.002e					NSStatus:
>002e							.fill 	MathStackSize
.003a					NSMantissa0:
>003a							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0046					NSMantissa1:
>0046							.fill 	MathStackSize
.0052					NSMantissa2:
>0052							.fill 	MathStackSize
.005e					NSMantissa3:
>005e							.fill 	MathStackSize
.006a					NSExponent:
>006a							.fill 	MathStackSize
.0400					numberBuffer:
>0400							.fill 	34
.5190					FloatSubtract:
.5190	b5 2e		lda $2e,x			lda 	NSStatus,x 					; negate top of stack
.5192	49 80		eor #$80			eor 	#$80
.5194	95 2e		sta $2e,x			sta 	NSStatus,x					; and fall through.
.5196					FloatAdd:
.5196	ca		dex				dex
.5197	b5 6a		lda $6a,x			lda 	NSExponent,x 				; can use optimised.
.5199	15 6b		ora $6b,x			ora 	NSExponent+1,x
.519b	15 5e		ora $5e,x			ora 	NSMantissa3,x
.519d	15 5f		ora $5f,x			ora 	NSMantissa3+1,x
.519f	d0 04		bne $51a5			bne 	_FAUseFloat
.51a1	20 32 55	jsr $5532			jsr 	FloatInt32Add 				; use the int32 one.
.51a4	60		rts				rts
.51a5					_FAUseFloat:
.51a5	20 c7 54	jsr $54c7			jsr 	FloatNormalise 				; normalise S[X]
.51a8	f0 51		beq $51fb			beq 	_FAReturn1
.51aa	e8		inx				inx 								; normalise S[X+1]
.51ab	20 c7 54	jsr $54c7			jsr 	FloatNormalise
.51ae	ca		dex				dex
.51af	c9 00		cmp #$00			cmp 	#0
.51b1	f0 60		beq $5213			beq 	_FAExit 					; if so, just return A
.51b3	b5 6a		lda $6a,x			lda 	NSExponent,x 				; are the exponents the same ?
.51b5	d5 6b		cmp $6b,x			cmp 	NSExponent+1,x
.51b7	f0 18		beq $51d1			beq 	_FAExponentsEqual
.51b9	b5 6a		lda $6a,x			lda 	NSExponent,x 				; work out the larger exponent
.51bb	a8		tay				tay
.51bc	38		sec				sec 								; do a signed comparison of the exponents.
.51bd	f5 6b		sbc $6b,x			sbc 	NSExponent+1,x
.51bf	50 02		bvc $51c3			bvc 	_FANoSignedChange
.51c1	49 80		eor #$80			eor 	#$80
.51c3					_FANoSignedChange:
.51c3	29 80		and #$80			and 	#$80
.51c5	10 02		bpl $51c9			bpl 	_FAHaveMax
.51c7	b4 6b		ldy $6b,x			ldy 	NSExponent+1,x
.51c9					_FAHaveMax:
.51c9	20 14 52	jsr $5214			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.51cc	e8		inx				inx
.51cd	20 14 52	jsr $5214			jsr 	_FAShiftToExponent
.51d0	ca		dex				dex
.51d1					_FAExponentsEqual:
.51d1	b5 2e		lda $2e,x			lda 	NSStatus,x 					; are the signs the same
.51d3	55 2f		eor $2f,x			eor 	NSStatus+1,x
.51d5	30 0e		bmi $51e5			bmi 	_FADifferentSigns
.51d7	20 fe 54	jsr $54fe			jsr 	FloatAddTopTwoStack 		; do the add of the mantissae
.51da	b5 5e		lda $5e,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.51dc	10 35		bpl $5213			bpl 	_FAExit 					; if no, we are done.
.51de	20 8b 57	jsr $578b			jsr 	FloatShiftRight 				; shift A right, renormalising it.
.51e1	f6 6a		inc $6a,x			inc 	NSExponent,x 				; bump the exponent and exit
.51e3	80 2e		bra $5213			bra 	_FAExit
.51e5					_FADifferentSigns:
.51e5	20 18 55	jsr $5518			jsr 	FloatSubTopTwoStack 		; subtract mantissa B from A
.51e8	b5 5e		lda $5e,x			lda 	NSMantissa3,x 				; is the result negative ?
.51ea	10 06		bpl $51f2			bpl 	_FACheckZero 				; if no, check for -0
.51ec	20 34 57	jsr $5734			jsr 	FloatNegate 					; netate result
.51ef	20 3b 57	jsr $573b			jsr 	FloatNegateMantissa 			; negate (2'c) the mantissa
.51f2					_FACheckZero:
.51f2	20 94 57	jsr $5794			jsr 	FloatIsZero	 				; check for -0
.51f5	d0 1c		bne $5213			bne 	_FAExit
.51f7	74 2e		stz $2e,x			stz 	NSStatus,x
.51f9	80 18		bra $5213			bra 	_FAExit
.51fb					_FAReturn1:
.51fb	b5 3b		lda $3b,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.51fd	95 3a		sta $3a,x			sta 	NSMantissa0,x
.51ff	b5 47		lda $47,x			lda 	NSMantissa1+1,x
.5201	95 46		sta $46,x			sta 	NSMantissa1,x
.5203	b5 53		lda $53,x			lda 	NSMantissa2+1,x
.5205	95 52		sta $52,x			sta 	NSMantissa2,x
.5207	b5 5f		lda $5f,x			lda 	NSMantissa3+1,x
.5209	95 5e		sta $5e,x			sta 	NSMantissa3,x
.520b	b5 6b		lda $6b,x			lda 	NSExponent+1,x
.520d	95 6a		sta $6a,x			sta 	NSExponent,x
.520f	b5 2f		lda $2f,x			lda 	NSStatus+1,x
.5211	95 2e		sta $2e,x			sta 	NSStatus,x
.5213					_FAExit:
.5213	60		rts				rts
.5214					_FAShiftToExponent:
.5214					_FAShiftToExponent2:
.5214	98		tya				tya 								; compare Y to exponent
.5215	d5 6a		cmp $6a,x			cmp 	NSExponent,x 				; reached the exponent required ?
.5217	f0 07		beq $5220			beq 	_FASEExit 					; exit if so.
.5219	20 8b 57	jsr $578b			jsr 	FloatShiftRight	 			; shift the mantissa right
.521c	f6 6a		inc $6a,x			inc 	NSExponent,x 				; increment exponent
.521e	80 f4		bra $5214			bra 	_FAShiftToExponent2
.5220					_FASEExit:
.5220	60		rts				rts
.5221					CompareEqual:
.5221	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.5223	d0 09		bne $522e			bne 	ReturnFalse
.5225					ReturnTrue:
.5225	a9 01		lda #$01			lda 	#1
.5227	95 3a		sta $3a,x			sta 	NSMantissa0,x
.5229	a9 80		lda #$80			lda 	#$80
.522b	95 2e		sta $2e,x			sta 	NSStatus,x
.522d	60		rts				rts
.522e					ReturnFalse:
.522e	74 3a		stz $3a,x			stz 	NSMantissa0,x
.5230	60		rts				rts
.5231					CompareNotEqual:
.5231	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.5233	d0 f0		bne $5225			bne 	ReturnTrue
.5235	80 f7		bra $522e			bra 	ReturnFalse
.5237					CompareLess:
.5237	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.5239	c9 ff		cmp #$ff			cmp 	#$FF
.523b	f0 e8		beq $5225			beq 	ReturnTrue
.523d	80 ef		bra $522e			bra 	ReturnFalse
.523f					CompareGreater:
.523f	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.5241	c9 01		cmp #$01			cmp 	#$01
.5243	f0 e0		beq $5225			beq 	ReturnTrue
.5245	80 e7		bra $522e			bra 	ReturnFalse
.5247					CompareLessEqual:
.5247	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.5249	c9 01		cmp #$01			cmp 	#$01
.524b	d0 d8		bne $5225			bne 	ReturnTrue
.524d	80 df		bra $522e			bra 	ReturnFalse
.524f					CompareGreaterEqual:
.524f	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.5251	c9 ff		cmp #$ff			cmp 	#$FF
.5253	d0 d0		bne $5225			bne 	ReturnTrue
.5255	80 d7		bra $522e			bra 	ReturnFalse
.5257					FloatCompare:
.5257	b5 6a		lda $6a,x			lda 	NSExponent,x 				; float comparison.
.5259	15 69		ora $69,x			ora 	NSExponent-1,x 				; integer if both integer.
.525b	48		pha				pha
.525c	20 90 51	jsr $5190			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.525f	68		pla				pla
.5260	d0 0c		bne $526e			bne 	_FCCompareFloat
.5262	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.5264	15 46		ora $46,x			ora 	NSMantissa1,x
.5266	15 52		ora $52,x			ora 	NSMantissa2,x
.5268	15 5e		ora $5e,x			ora 	NSMantissa3,x
.526a	f0 14		beq $5280			beq 	_FCExit 					; if zero, return zero
.526c	80 0a		bra $5278			bra 	_FCSign
.526e					_FCCompareFloat:
.526e	b5 46		lda $46,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.5270	29 f0		and #$f0			and 	#$F0
.5272	15 52		ora $52,x			ora 	NSMantissa2,x
.5274	15 5e		ora $5e,x			ora 	NSMantissa3,x
.5276	f0 08		beq $5280			beq 	_FCExit 					; zero, so approximately identical
.5278					_FCSign:
.5278	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.527a	34 2e		bit $2e,x			bit 	NSStatus,x
.527c	10 02		bpl $5280			bpl 	_FCExit
.527e					_FCNegative:
.527e	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.5280					_FCExit:
.5280	20 74 57	jsr $5774			jsr 	FloatSetByte 				; set the result 255,0,1
.5283	60		rts				rts
.5284					FloatScalarTable:
>5284	66 66 66 66				.dword $66666666 ; 0.1
>5288	de					.byte $de
>5289	1f 85 eb 51				.dword $51eb851f ; 0.01
>528d	db					.byte $db
>528e	4c 37 89 41				.dword $4189374c ; 0.001
>5292	d8					.byte $d8
>5293	ac 8b db 68				.dword $68db8bac ; 0.0001
>5297	d4					.byte $d4
>5298	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>529c	d1					.byte $d1
>529d	83 de 1b 43				.dword $431bde83 ; 1e-06
>52a1	ce					.byte $ce
>52a2	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>52a6	ca					.byte $ca
>52a7	89 3b e6 55				.dword $55e63b89 ; 1e-08
>52ab	c7					.byte $c7
>52ac	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>52b0	c4					.byte $c4
>52b1	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>52b5	c0					.byte $c0
>52b6	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>52ba	bd					.byte $bd
.52bb					FloatDivide:
.52bb	48		pha				pha
.52bc	20 c7 54	jsr $54c7			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.52bf	ca		dex				dex
.52c0	c9 00		cmp #$00			cmp 	#0
.52c2	f0 1e		beq $52e2			beq 	_FDZero
.52c4	20 c7 54	jsr $54c7			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.52c7	f0 16		beq $52df			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.52c9	20 2a 53	jsr $532a			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.52cc	20 f7 52	jsr $52f7			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.52cf	20 c7 54	jsr $54c7			jsr		FloatNormalise 				; renormalise
.52d2	20 bd 54	jsr $54bd			jsr 	FloatCalculateSign 			; calculate result sign
.52d5	b5 6a		lda $6a,x			lda 	NSExponent,x 				; calculate exponent
.52d7	38		sec				sec
.52d8	f5 6b		sbc $6b,x			sbc 	NSExponent+1,x
.52da	38		sec				sec
.52db	e9 1e		sbc #$1e			sbc 	#30
.52dd	95 6a		sta $6a,x			sta 	NSExponent,x
.52df					_FDExit:
.52df	68		pla				pla
.52e0	18		clc				clc
.52e1	60		rts				rts
.52e2					_FDZero:
.52e2	68		pla				pla
.52e3	38		sec				sec
.52e4	60		rts				rts
.52e5					DivideInt32:
.52e5	20 ad 53	jsr $53ad			jsr 	FloatIntegerPart 			; make both integers
.52e8	ca		dex				dex
.52e9	20 ad 53	jsr $53ad			jsr 	FloatIntegerPart
.52ec	20 08 53	jsr $5308			jsr 	Int32Divide 				; divide
.52ef	20 f7 52	jsr $52f7			jsr 	NSMCopyPlusTwoToZero 		; copy result
.52f2	20 bd 54	jsr $54bd			jsr 	FloatCalculateSign 			; calculate result sign
.52f5	18		clc				clc
.52f6	60		rts				rts
.52f7					NSMCopyPlusTwoToZero:
.52f7	b5 3c		lda $3c,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.52f9	95 3a		sta $3a,x			sta 	NSMantissa0,x
.52fb	b5 48		lda $48,x			lda 	NSMantissa1+2,x
.52fd	95 46		sta $46,x			sta 	NSMantissa1,x
.52ff	b5 54		lda $54,x			lda 	NSMantissa2+2,x
.5301	95 52		sta $52,x			sta 	NSMantissa2,x
.5303	b5 60		lda $60,x			lda 	NSMantissa3+2,x
.5305	95 5e		sta $5e,x			sta 	NSMantissa3,x
.5307	60		rts				rts
.5308					Int32Divide:
.5308	48		pha				pha 								; save AXY
.5309	5a		phy				phy
.530a	20 55 57	jsr $5755			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.530d	20 6e 57	jsr $576e			jsr 	FloatSetZeroMantissaOnly 	; set S[X] to zero
.5310	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.5312					_I32DivideLoop:
.5312	e8		inx				inx
.5313	e8		inx				inx
.5314	20 81 57	jsr $5781			jsr 	FloatShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.5317	ca		dex				dex
.5318	ca		dex				dex
.5319	20 82 57	jsr $5782			jsr 	FloatRotateLeft
.531c	20 48 53	jsr $5348			jsr 	FloatDivideCheck 			; check if subtract possible
.531f	90 02		bcc $5323			bcc 	_I32DivideNoCarryIn
.5321	f6 3c		inc $3c,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.5323					_I32DivideNoCarryIn:
.5323	88		dey				dey 								; loop round till division completed.
.5324	d0 ec		bne $5312			bne 	_I32DivideLoop
.5326	7a		ply				ply 								; restore AXY and exit
.5327	68		pla				pla
.5328	18		clc				clc
.5329	60		rts				rts
.532a					Int32ShiftDivide:
.532a	48		pha				pha 								; save AY
.532b	5a		phy				phy
.532c	e8		inx				inx 								; clear S[X+2]
.532d	e8		inx				inx
.532e	20 72 57	jsr $5772			jsr 	FloatSetZero
.5331	ca		dex				dex
.5332	ca		dex				dex
.5333	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.5335					_I32SDLoop:
.5335	20 48 53	jsr $5348			jsr 	FloatDivideCheck 			; check if subtract possible
.5338	e8		inx				inx
.5339	e8		inx				inx
.533a	20 82 57	jsr $5782			jsr 	FloatRotateLeft				; shift 64 bit FPA left, rotating carry in
.533d	ca		dex				dex
.533e	ca		dex				dex
.533f	20 82 57	jsr $5782			jsr 	FloatRotateLeft
.5342	88		dey				dey 	 							; do 31 times
.5343	d0 f0		bne $5335			bne 	_I32SDLoop
.5345	7a		ply				ply 								; restore AY and exit
.5346	68		pla				pla
.5347	60		rts				rts
.5348					FloatDivideCheck:
.5348	20 18 55	jsr $5518			jsr 	FloatSubTopTwoStack 		; subtract Stack[X+1] from Stack[X+0]
.534b	b0 04		bcs $5351			bcs 	_DCSExit 					; if carry set, then could do, exit
.534d	20 fe 54	jsr $54fe			jsr 	FloatAddTopTwoStack 		; add it back in
.5350	18		clc				clc 								; and return False
.5351					_DCSExit:
.5351	60		rts				rts
.5352					FloatFractionalPart:
.5352	5a		phy				phy
.5353	b5 2e		lda $2e,x			lda 	NSStatus,x 					; take absolute value
.5355	29 7f		and #$7f			and 	#$7F
.5357	95 2e		sta $2e,x			sta 	NSStatus,x
.5359	20 c7 54	jsr $54c7			jsr 	FloatNormalise
.535c	b5 6a		lda $6a,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.535e	38		sec				sec
.535f	e9 e0		sbc #$e0			sbc 	#$E0
.5361	90 29		bcc $538c			bcc 	_FFPExit 					; already fractional
.5363	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.5365	b0 22		bcs $5389			bcs 	_FFPZero
.5367	a8		tay				tay 								; put count to do in Y
.5368	b5 5e		lda $5e,x			lda 	NSMantissa3,x 				; do each in turn.
.536a	20 91 53	jsr $5391			jsr 	_FFPPartial
.536d	95 5e		sta $5e,x			sta 	NSMantissa3,x
.536f	b5 52		lda $52,x			lda 	NSMantissa2,x
.5371	20 91 53	jsr $5391			jsr 	_FFPPartial
.5374	95 52		sta $52,x			sta 	NSMantissa2,x
.5376	b5 46		lda $46,x			lda 	NSMantissa1,x
.5378	20 91 53	jsr $5391			jsr 	_FFPPartial
.537b	95 46		sta $46,x			sta 	NSMantissa1,x
.537d	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.537f	20 91 53	jsr $5391			jsr 	_FFPPartial
.5382	95 3a		sta $3a,x			sta 	NSMantissa0,x
.5384	20 94 57	jsr $5794			jsr 	FloatIsZero 					; zeroed check.
.5387	d0 03		bne $538c			bne 	_FFPExit
.5389					_FFPZero:
.5389	20 72 57	jsr $5772			jsr 	FloatSetZero
.538c					_FFPExit:
.538c	20 c7 54	jsr $54c7			jsr 	FloatNormalise
.538f	7a		ply				ply
.5390	60		rts				rts
.5391					_FFPPartial:
.5391	c0 00		cpy #$00			cpy 	#0 							; no more to do
.5393	f0 17		beq $53ac			beq 	_FFFPPExit
.5395	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.5397	b0 0c		bcs $53a5			bcs 	_FFFPPWholeByte
.5399	5a		phy				phy
.539a					_FFFPPLeft:
.539a	0a		asl a				asl 	a
.539b	88		dey				dey
.539c	d0 fc		bne $539a			bne 	_FFFPPLeft
.539e	7a		ply				ply
.539f					_FFFPPRight:
.539f	4a		lsr a				lsr 	a
.53a0	88		dey				dey
.53a1	d0 fc		bne $539f			bne 	_FFFPPRight
.53a3	80 07		bra $53ac			bra 	_FFFPPExit
.53a5					_FFFPPWholeByte:
.53a5	98		tya				tya 								; subtract 8 from count
.53a6	38		sec				sec
.53a7	e9 08		sbc #$08			sbc 	#8
.53a9	a8		tay				tay
.53aa	a9 00		lda #$00			lda 	#0 							; and clear all
.53ac					_FFFPPExit:
.53ac	60		rts				rts
.53ad					FloatIntegerPart:
.53ad	48		pha				pha
.53ae	b5 6a		lda $6a,x			lda 	NSExponent,x 				; is it integer already ?
.53b0	f0 1d		beq $53cf			beq 	_FIPExit 					; if so do nothing
.53b2	20 94 57	jsr $5794			jsr 	FloatIsZero 				; is it zero ?
.53b5	f0 15		beq $53cc			beq 	_FIPZero 					; if so return zero.
.53b7	20 c7 54	jsr $54c7			jsr 	FloatNormalise 				; normalise
.53ba	f0 10		beq $53cc			beq 	_FIPZero 					; normalised to zero, exit zero
.53bc					_FIPShift:
.53bc	b5 6a		lda $6a,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.53be	10 07		bpl $53c7			bpl 	_FIPCheckZero
.53c0	20 8b 57	jsr $578b			jsr 	FloatShiftRight 			; shift mantissa right
.53c3	f6 6a		inc $6a,x			inc 	NSExponent,x 				; bump exponent
.53c5	80 f5		bra $53bc			bra 	_FIPShift
.53c7					_FIPCheckZero:
.53c7	20 94 57	jsr $5794			jsr 	FloatIsZero 				; avoid -0 problem
.53ca	d0 03		bne $53cf			bne 	_FIPExit 					; set to zero if mantissa zero.
.53cc					_FIPZero:
.53cc	20 72 57	jsr $5772			jsr 	FloatSetZero
.53cf					_FIPExit:
.53cf	68		pla				pla
.53d0	60		rts				rts
.53d1					FloatIntegerPartDown:
.53d1	48		pha				pha
.53d2	5a		phy				phy
.53d3	b5 6a		lda $6a,x			lda 	NSExponent,x 				; is it integer already ?
.53d5	f0 36		beq $540d			beq 	_FIPExit 					; if so do nothing
.53d7	20 94 57	jsr $5794			jsr 	FloatIsZero 				; is it zero ?
.53da	f0 2e		beq $540a			beq 	_FIPZero 					; if so return zero.
.53dc	20 c7 54	jsr $54c7			jsr 	FloatNormalise 				; normalise
.53df	f0 29		beq $540a			beq 	_FIPZero 					; normalised to zero, exit zero
.53e1	a0 00		ldy #$00			ldy 	#0 							; reset the count of bits.
.53e3					_FIPShift:
.53e3	b5 6a		lda $6a,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.53e5	10 0a		bpl $53f1			bpl 	_FIPCheckDown
.53e7	20 8b 57	jsr $578b			jsr 	FloatShiftRight 			; shift mantissa right
.53ea	90 01		bcc $53ed			bcc 	_FIPNoFrac 					; shifted a zero out ?
.53ec	c8		iny				iny
.53ed					_FIPNoFrac:
.53ed	f6 6a		inc $6a,x			inc 	NSExponent,x 				; bump exponent
.53ef	80 f2		bra $53e3			bra 	_FIPShift
.53f1					_FIPCheckDown:
.53f1	c0 00		cpy #$00			cpy 	#0 							; were there any fractional bits.
.53f3	f0 10		beq $5405			beq 	_FIPCheckZero
.53f5	34 2e		bit $2e,x			bit 	NSStatus,x 					; +ve
.53f7	10 0c		bpl $5405			bpl 	_FIPCheckZero
.53f9	e8		inx				inx 								; -ve so round *down*.
.53fa	a9 01		lda #$01			lda 	#1
.53fc	20 74 57	jsr $5774			jsr 	FloatSetByte
.53ff	20 34 57	jsr $5734			jsr 	FloatNegate
.5402	20 96 51	jsr $5196			jsr 	FloatAdd
.5405					_FIPCheckZero:
.5405	20 94 57	jsr $5794			jsr 	FloatIsZero 				; avoid -0 problem
.5408	d0 03		bne $540d			bne 	_FIPExit 					; set to zero if mantissa zero.
.540a					_FIPZero:
.540a	20 72 57	jsr $5772			jsr 	FloatSetZero
.540d					_FIPExit:
.540d	7a		ply				ply
.540e	68		pla				pla
.540f	60		rts				rts
.5410					FloatInt8Multiply:
.5410	5a		phy				phy
.5411	b5 3a		lda $3a,x			lda 	NSMantissa0,x 				; right shifted multiplier in Y
.5413	a8		tay				tay
.5414	74 3a		stz $3a,x			stz 	NSMantissa0,x 				; zero the result (already 8 bit constant)
.5416					_FI8MLoop:
.5416	98		tya				tya 								; shift right shifter right into carry
.5417	4a		lsr a				lsr 	a
.5418	a8		tay				tay
.5419	90 0d		bcc $5428			bcc 	_FI8MNoAdd
.541b	18		clc				clc
.541c	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.541e	75 3b		adc $3b,x			adc 	NSMantissa0+1,x
.5420	95 3a		sta $3a,x			sta 	NSMantissa0,x
.5422	b5 46		lda $46,x			lda 	NSMantissa1,x
.5424	75 47		adc $47,x			adc 	NSMantissa1+1,x
.5426	95 46		sta $46,x			sta 	NSMantissa1,x
.5428					_FI8MNoAdd:
.5428	16 3b		asl $3b,x			asl 	NSMantissa0+1,x 			; shift adder left
.542a	36 47		rol $47,x			rol 	NSMantissa1+1,x
.542c	c0 00		cpy #$00			cpy 	#0
.542e	d0 e6		bne $5416			bne 	_FI8MLoop 					; until right shifter zero.
.5430	7a		ply				ply
.5431	60		rts				rts
.5432					FloatMultiply:
.5432	ca		dex				dex
.5433	b5 6a		lda $6a,x			lda 	NSExponent,x 				; can use optimised ?
.5435	15 6b		ora $6b,x			ora 	NSExponent+1,x
.5437	15 5e		ora $5e,x			ora 	NSMantissa3,x
.5439	15 5f		ora $5f,x			ora 	NSMantissa3+1,x
.543b	d0 21		bne $545e			bne 	_FMUseFloat
.543d	b5 2e		lda $2e,x			lda 	NSStatus,x 					; check if it is 8 bit unsigned
.543f	15 2f		ora $2f,x			ora 	NSStatus+1,x
.5441	29 80		and #$80			and 	#$80
.5443	15 5e		ora $5e,x			ora 	NSMantissa3,x
.5445	15 52		ora $52,x			ora 	NSMantissa2,x
.5447	15 46		ora $46,x			ora 	NSMantissa1,x
.5449	15 5f		ora $5f,x			ora 	NSMantissa3+1,x
.544b	15 53		ora $53,x			ora 	NSMantissa2+1,x
.544d	15 47		ora $47,x			ora 	NSMantissa1+1,x
.544f	d0 04		bne $5455			bne 	_FMInt32
.5451	20 10 54	jsr $5410			jsr 	FloatInt8Multiply 			; use fast 8x8 multiply.
.5454	60		rts				rts
.5455					_FMInt32:
.5455	20 7f 54	jsr $547f			jsr 	FloatMultiplyShort			; use the int32 one.
.5458	18		clc				clc 								; fix it up if gone out of range
.5459	75 6a		adc $6a,x			adc 	NSExponent,x
.545b	95 6a		sta $6a,x			sta 	NSExponent,x
.545d	60		rts				rts
.545e					_FMUseFloat:
.545e	20 c7 54	jsr $54c7			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.5461	f0 18		beq $547b			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.5463	e8		inx				inx
.5464	20 c7 54	jsr $54c7			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.5467	ca		dex				dex
.5468	c9 00		cmp #$00			cmp 	#0
.546a	f0 0c		beq $5478			beq 	_FDSetZero
.546c	20 7f 54	jsr $547f			jsr 	FloatMultiplyShort 			; calculate the result.
.546f	75 6a		adc $6a,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.5471	18		clc				clc
.5472	75 6b		adc $6b,x			adc 	NSExponent+1,x
.5474	95 6a		sta $6a,x			sta 	NSExponent,x
.5476	80 03		bra $547b			bra 	_FDExit
.5478					_FDSetZero:
.5478	20 72 57	jsr $5772			jsr 	FloatSetZero 				; return 0
.547b					_FDExit:
.547b	20 c7 54	jsr $54c7			jsr 	FloatNormalise 				; normalise the result
.547e	60		rts				rts
.547f					FloatMultiplyShort:
.547f	5a		phy				phy 								; save Y
.5480	20 55 57	jsr $5755			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.5483	20 6e 57	jsr $576e			jsr 	FloatSetZeroMantissaOnly 	; set mantissa S[X] to zero
.5486	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.5488					_I32MLoop:
.5488	b5 3c		lda $3c,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.548a	15 48		ora $48,x			ora 	NSMantissa1+2,x
.548c	15 54		ora $54,x			ora 	NSMantissa2+2,x
.548e	15 60		ora $60,x			ora 	NSMantissa3+2,x
.5490	f0 25		beq $54b7			beq 	_I32MExit 					; exit if zero
.5492	b5 3c		lda $3c,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.5494	29 01		and #$01			and 	#1
.5496	f0 0d		beq $54a5			beq 	_I32MNoAdd
.5498	20 fe 54	jsr $54fe			jsr 	FloatAddTopTwoStack 		; if so add S[X+1] to S[X+0]
.549b	b5 5e		lda $5e,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.549d	10 06		bpl $54a5			bpl 	_I32MNoAdd
.549f					_I32ShiftRight:
.549f	20 8b 57	jsr $578b			jsr 	FloatShiftRight 			; shift S[X] right
.54a2	c8		iny				iny 								; increment shift count
.54a3	80 09		bra $54ae			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.54a5					_I32MNoAdd:
.54a5	34 5f		bit $5f,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.54a7	70 f6		bvs $549f			bvs 	_I32ShiftRight 				; instead.
.54a9	e8		inx				inx
.54aa	20 81 57	jsr $5781			jsr 	FloatShiftLeft 				; shift additive S[X+1] left
.54ad	ca		dex				dex
.54ae					_I32MShiftUpper:
.54ae	e8		inx				inx 								; shift S[X+2] right
.54af	e8		inx				inx
.54b0	20 8b 57	jsr $578b			jsr 	FloatShiftRight
.54b3	ca		dex				dex
.54b4	ca		dex				dex
.54b5	80 d1		bra $5488			bra 	_I32MLoop 					; try again.
.54b7					_I32MExit:
.54b7	20 bd 54	jsr $54bd			jsr 	FloatCalculateSign
.54ba	98		tya				tya 								; shift in A
.54bb	7a		ply				ply 								; restore Y and exit
.54bc	60		rts				rts
.54bd					FloatCalculateSign:
.54bd	b5 2e		lda $2e,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.54bf	16 2e		asl $2e,x			asl 	NSStatus,x 					; shift result left
.54c1	55 2f		eor $2f,x			eor 	NSStatus+1,x
.54c3	0a		asl a				asl 	a 							; shift bit 7 into carry
.54c4	76 2e		ror $2e,x			ror 	NSStatus,x 					; shift right into status byte.
.54c6	60		rts				rts
.54c7					FloatNormalise:
.54c7	20 94 57	jsr $5794			jsr 	FloatIsZero 				; if zero exit
.54ca	d0 07		bne $54d3			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.54cc	16 2e		asl $2e,x			asl 	NSStatus,x 					; clear the sign bit.
.54ce	76 2e		ror $2e,x			ror 	NSStatus,x 					; (no -0)
.54d0	a9 00		lda #$00			lda 	#0 							; set Z flag
.54d2	60		rts				rts
.54d3					_NSNormaliseOptimise:
.54d3	b5 5e		lda $5e,x			lda 	NSMantissa3,x 				; upper byte zero ?
.54d5	d0 19		bne $54f0			bne 	_NSNormaliseLoop
.54d7	b5 52		lda $52,x			lda 	NSMantissa2,x 				; byte normalise
.54d9	30 15		bmi $54f0			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.54db	95 5e		sta $5e,x			sta 	NSMantissa3,x
.54dd	b5 46		lda $46,x			lda 	NSMantissa1,x
.54df	95 52		sta $52,x			sta 	NSMantissa2,x
.54e1	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.54e3	95 46		sta $46,x			sta 	NSMantissa1,x
.54e5	74 3a		stz $3a,x			stz 	NSMantissa0,x
.54e7	b5 6a		lda $6a,x			lda 	NSExponent,x
.54e9	38		sec				sec
.54ea	e9 08		sbc #$08			sbc 	#8
.54ec	95 6a		sta $6a,x			sta 	NSExponent,x
.54ee	80 e3		bra $54d3			bra 	_NSNormaliseOptimise
.54f0					_NSNormaliseLoop:
.54f0	34 5e		bit $5e,x			bit 	NSMantissa3,x 				; bit 30 set ?
.54f2	70 07		bvs $54fb			bvs 	_NSNExit 					; exit if so with Z flag clear
.54f4	20 81 57	jsr $5781			jsr 	FloatShiftLeft 				; shift mantissa left
.54f7	d6 6a		dec $6a,x			dec 	NSExponent,x 				; adjust exponent
.54f9	80 f5		bra $54f0			bra 	_NSNormaliseLoop
.54fb					_NSNExit:
.54fb	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.54fd	60		rts				rts
.54fe					FloatAddTopTwoStack:
.54fe	18		clc				clc
.54ff	b5 3a		lda $3a,x			lda		NSMantissa0,x
.5501	75 3b		adc $3b,x			adc 		NSMantissa0+1,x
.5503	95 3a		sta $3a,x			sta 	NSMantissa0,x
.5505	b5 46		lda $46,x			lda		NSMantissa1,x
.5507	75 47		adc $47,x			adc 		NSMantissa1+1,x
.5509	95 46		sta $46,x			sta 	NSMantissa1,x
.550b	b5 52		lda $52,x			lda		NSMantissa2,x
.550d	75 53		adc $53,x			adc 		NSMantissa2+1,x
.550f	95 52		sta $52,x			sta 	NSMantissa2,x
.5511	b5 5e		lda $5e,x			lda		NSMantissa3,x
.5513	75 5f		adc $5f,x			adc 		NSMantissa3+1,x
.5515	95 5e		sta $5e,x			sta 	NSMantissa3,x
.5517	60		rts				rts
.5518					FloatSubTopTwoStack:
.5518	38		sec				sec
.5519	b5 3a		lda $3a,x			lda		NSMantissa0,x
.551b	f5 3b		sbc $3b,x			sbc 		NSMantissa0+1,x
.551d	95 3a		sta $3a,x			sta 	NSMantissa0,x
.551f	b5 46		lda $46,x			lda		NSMantissa1,x
.5521	f5 47		sbc $47,x			sbc 		NSMantissa1+1,x
.5523	95 46		sta $46,x			sta 	NSMantissa1,x
.5525	b5 52		lda $52,x			lda		NSMantissa2,x
.5527	f5 53		sbc $53,x			sbc 		NSMantissa2+1,x
.5529	95 52		sta $52,x			sta 	NSMantissa2,x
.552b	b5 5e		lda $5e,x			lda		NSMantissa3,x
.552d	f5 5f		sbc $5f,x			sbc 		NSMantissa3+1,x
.552f	95 5e		sta $5e,x			sta 	NSMantissa3,x
.5531	60		rts				rts
.5532					FloatInt32Add:
.5532	b5 2e		lda $2e,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.5534	55 2f		eor $2f,x			eor 	NSStatus+1,x
.5536	30 04		bmi $553c			bmi 	_DiffSigns
.5538	20 fe 54	jsr $54fe			jsr		FloatAddTopTwoStack
.553b	60		rts				rts
.553c					_DiffSigns:
.553c	20 18 55	jsr $5518			jsr 	FloatSubTopTwoStack 		; do a physical subtraction
.553f	34 5e		bit $5e,x			bit 	NSMantissa3,x 				; result is +ve, okay
.5541	10 07		bpl $554a			bpl 	_AddExit
.5543	b5 2f		lda $2f,x			lda 	NSStatus+1,x 				; sign is that of 11th value
.5545	95 2e		sta $2e,x			sta 	NSStatus,x
.5547	20 3b 57	jsr $573b			jsr 	FloatNegateMantissa 		; negate the mantissa and exit
.554a					_AddExit:
.554a	20 94 57	jsr $5794			jsr 	FloatIsZero 				; check for -0
.554d	d0 02		bne $5551			bne 	_AddNonZero
.554f	74 2e		stz $2e,x			stz 	NSStatus,x
.5551					_AddNonZero:
.5551	60		rts				rts
=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.5552					FloatEncodeStart:
.5552	38		sec				sec
.5553	80 01		bra $5556			bra 	FloatEncodeContinue+1
.5555					FloatEncodeContinue:
.5555	18		clc				clc
.5556					FloatEncode:
.5556	08		php				php 								; save reset flag.
.5557	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.5559	f0 15		beq $5570			beq 	_ENIsOkay
.555b	c9 30		cmp #$30			cmp 	#"0"
.555d	90 04		bcc $5563			bcc 	_ENBadNumber
.555f	c9 3a		cmp #$3a			cmp 	#"9"+1
.5561	90 0d		bcc $5570			bcc 	_ENIsOkay
.5563					_ENBadNumber:
.5563	28		plp				plp 								; throw saved reset
.5564	ad 22 04	lda $0422			lda 	encodeState 				; if in decimal mode, construct final number
.5567	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.5569	d0 03		bne $556e			bne 	_ENFail
.556b	4c e8 55	jmp $55e8			jmp 	_ENConstructFinal
.556e					_ENFail:
.556e	18		clc				clc 								; not allowed
.556f	60		rts				rts
.5570					_ENIsOkay:
.5570	28		plp				plp 								; are we restarting
.5571	90 15		bcc $5588			bcc 	_ENNoRestart
.5573					_ENStartEncode:
.5573	c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.5575	f0 0c		beq $5583			beq 	_ENFirstDP
.5577	29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.5579	20 74 57	jsr $5774			jsr 	FloatSetByte 				; in single byte mode.
.557c	a9 01		lda #$01			lda 	#ESTA_Low
.557e					_ENExitChange:
.557e	8d 22 04	sta $0422			sta 	encodeState 				; save new state
.5581	38		sec				sec
.5582	60		rts				rts
.5583					_ENFirstDP:
.5583	20 72 57	jsr $5772			jsr 	FloatSetZero 				; clear integer part
.5586	80 3c		bra $55c4			bra 	_ESTASwitchFloat			; go straight to float and exi
.5588					_ENNoRestart:
.5588	48		pha				pha 								; save digit or DP on stack.
.5589	ad 22 04	lda $0422			lda 	encodeState 				; get current state
.558c	c9 01		cmp #$01			cmp 	#ESTA_Low
.558e	f0 09		beq $5599			beq  	_ESTALowState
.5590	c9 02		cmp #$02			cmp 	#ESTA_High
.5592	f0 26		beq $55ba			beq 	_ESTAHighState
.5594	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.5596	f0 38		beq $55d0			beq 	_ESTADecimalState
>5598	db						.byte 	$DB 						; causes a break in the emulator
.5599					_ESTALowState:
.5599	68		pla				pla 								; get value back
.559a	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.559c	f0 26		beq $55c4			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.559e	29 0f		and #$0f			and 	#15 						; make digit
.55a0	8d 23 04	sta $0423			sta 	digitTemp 					; save it.
.55a3	b5 3a		lda $3a,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.55a5	0a		asl a				asl 	a
.55a6	0a		asl a				asl 	a
.55a7	75 3a		adc $3a,x			adc 	NSMantissa0,x
.55a9	0a		asl a				asl 	a
.55aa	6d 23 04	adc $0423			adc 	digitTemp
.55ad	95 3a		sta $3a,x			sta 	NSMantissa0,x
.55af	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.55b1	90 05		bcc $55b8			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.55b3	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.55b5	8d 22 04	sta $0422			sta 	encodeState
.55b8					_ESTANoSwitch:
.55b8	38		sec				sec
.55b9	60		rts				rts
.55ba					_ESTAHighState:
.55ba	68		pla				pla 								; get value back
.55bb	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.55bd	f0 05		beq $55c4			beq 	_ESTASwitchFloat
.55bf	20 1a 56	jsr $561a			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.55c2	38		sec				sec
.55c3	60		rts				rts
.55c4					_ESTASwitchFloat:
.55c4	9c 24 04	stz $0424			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.55c7	e8		inx				inx 								; zero the decimal additive.
.55c8	20 72 57	jsr $5772			jsr 	FloatSetZero
.55cb	ca		dex				dex
.55cc	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.55ce	80 ae		bra $557e			bra 	_ENExitChange
.55d0					_ESTADecimalState:
.55d0	68		pla				pla 								; digit.
.55d1	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 11th decimal point.
.55d3	f0 99		beq $556e			beq 	_ENFail
.55d5	e8		inx				inx 								; put digit into fractional part of X+1
.55d6	20 1a 56	jsr $561a			jsr 	ESTAShiftDigitIntoMantissa
.55d9	ca		dex				dex
.55da	ee 24 04	inc $0424			inc 	decimalCount 				; bump the count of decimals
.55dd	ad 24 04	lda $0424			lda 	decimalCount 				; too many decimal digits.
.55e0	c9 0b		cmp #$0b			cmp 	#11
.55e2	f0 02		beq $55e6			beq 	_ESTADSFail
.55e4	38		sec				sec
.55e5	60		rts				rts
.55e6					_ESTADSFail:
.55e6	18		clc				clc
.55e7	60		rts				rts
.55e8					_ENConstructFinal:
.55e8	ad 24 04	lda $0424			lda 	decimalCount 				; get decimal count
.55eb	f0 2b		beq $5618			beq 	_ENCFExit 					; no decimals
.55ed	5a		phy				phy
.55ee	0a		asl a				asl 	a 							; x 4 and CLC
.55ef	0a		asl a				asl 	a
.55f0	6d 24 04	adc $0424			adc 	decimalCount
.55f3	a8		tay				tay
.55f4	b9 7f 52	lda $527f,y			lda 	FloatScalarTable-5,y 		; copy decimal scalar to X+2
.55f7	95 3c		sta $3c,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.55f9	b9 80 52	lda $5280,y			lda 	FloatScalarTable-5+1,y
.55fc	95 48		sta $48,x			sta 	NSMantissa1+2,x
.55fe	b9 81 52	lda $5281,y			lda 	FloatScalarTable-5+2,y
.5601	95 54		sta $54,x			sta 	NSMantissa2+2,x
.5603	b9 82 52	lda $5282,y			lda 	FloatScalarTable-5+3,y
.5606	95 60		sta $60,x			sta 	NSMantissa3+2,x
.5608	b9 83 52	lda $5283,y			lda 	FloatScalarTable-5+4,y
.560b	95 6c		sta $6c,x			sta 	NSExponent+2,x
.560d	74 30		stz $30,x			stz 	NSStatus+2,x 				; make +ve
.560f	e8		inx				inx 								; multiply decimal const by decimal scalar
.5610	e8		inx				inx
.5611	20 32 54	jsr $5432			jsr 	FloatMultiply
.5614	20 96 51	jsr $5196			jsr 	FloatAdd 					; add to integer part.
.5617	7a		ply				ply
.5618					_ENCFExit:
.5618	18		clc				clc 								; reject the digit.
.5619	60		rts				rts
.561a					ESTAShiftDigitIntoMantissa:
.561a	29 0f		and #$0f			and 	#15 						; save digit
.561c	48		pha				pha
.561d	b5 5e		lda $5e,x			lda 	NSMantissa3,x 				; push mantissa on stack
.561f	48		pha				pha
.5620	b5 52		lda $52,x			lda 	NSMantissa2,x
.5622	48		pha				pha
.5623	b5 46		lda $46,x			lda 	NSMantissa1,x
.5625	48		pha				pha
.5626	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.5628	48		pha				pha
.5629	20 81 57	jsr $5781			jsr 	FloatShiftLeft 				; x 2
.562c	20 81 57	jsr $5781			jsr 	FloatShiftLeft 				; x 4
.562f	18		clc				clc 								; pop mantissa and add
.5630	68		pla				pla
.5631	75 3a		adc $3a,x			adc 	NSMantissa0,x
.5633	95 3a		sta $3a,x			sta 	NSMantissa0,x
.5635	68		pla				pla
.5636	75 46		adc $46,x			adc 	NSMantissa1,x
.5638	95 46		sta $46,x			sta 	NSMantissa1,x
.563a	68		pla				pla
.563b	75 52		adc $52,x			adc 	NSMantissa2,x
.563d	95 52		sta $52,x			sta 	NSMantissa2,x
.563f	68		pla				pla
.5640	75 5e		adc $5e,x			adc 	NSMantissa3,x
.5642	95 5e		sta $5e,x			sta 	NSMantissa3,x 				; x 5
.5644	20 81 57	jsr $5781			jsr 	FloatShiftLeft 				; x 10
.5647	68		pla				pla 								; add digit
.5648	18		clc				clc
.5649	75 3a		adc $3a,x			adc 	NSMantissa0,x
.564b	95 3a		sta $3a,x			sta 	NSMantissa0,x
.564d	90 0a		bcc $5659			bcc 	_ESTASDExit
.564f	f6 46		inc $46,x			inc 	NSMantissa1,x
.5651	d0 06		bne $5659			bne 	_ESTASDExit
.5653	f6 52		inc $52,x			inc 	NSMantissa2,x
.5655	d0 02		bne $5659			bne 	_ESTASDExit
.5657	f6 5e		inc $5e,x			inc 	NSMantissa3,x
.5659					_ESTASDExit:
.5659	60		rts				rts
.0422					encodeState:
>0422							.fill 	1
.0423					digitTemp:
>0423							.fill 	1
.0424					decimalCount:
>0424							.fill 	1
.565a					FloatToString:
.565a	da		phx				phx
.565b	5a		phy				phy 								; save code position
.565c	8d 25 04	sta $0425			sta 	decimalPlaces	 			; save number of DPs.
.565f	9c 26 04	stz $0426			stz 	dbOffset 					; offset into decimal buffer = start.
.5662	b5 2e		lda $2e,x			lda 	NSStatus,x  				; is it -ve.
.5664	10 08		bpl $566e			bpl 	_CNTSNotNegative
.5666	29 7f		and #$7f			and 	#$7F 						; make +ve
.5668	95 2e		sta $2e,x			sta 	NSStatus,x
.566a	a9 2d		lda #$2d			lda 	#"-"
.566c	80 02		bra $5670			bra 	_CNTMain
.566e					_CNTSNotNegative:
.566e	a9 20		lda #$20			lda 	#" "
.5670					_CNTMain:
.5670	20 d2 56	jsr $56d2			jsr 	WriteDecimalBuffer
.5673	b5 6a		lda $6a,x			lda 	NSExponent,x 				; check if decimal
.5675	f0 0d		beq $5684			beq 	_CNTSNotFloat
.5677	e8		inx				inx 								; round up so we don't get too many 6.999999
.5678	a9 01		lda #$01			lda 	#1
.567a	20 74 57	jsr $5774			jsr 	FloatSetByte
.567d	b5 69		lda $69,x			lda		NSExponent-1,x
.567f	95 6a		sta $6a,x			sta 	NSExponent,x
.5681	20 96 51	jsr $5196			jsr 	FloatAdd
.5684					_CNTSNotFloat:
.5684	20 b4 56	jsr $56b4			jsr 	MakePlusTwoString 			; do the integer part.
.5687	20 52 53	jsr $5352			jsr 	FloatFractionalPart 		; get the fractional part
.568a	20 c7 54	jsr $54c7			jsr 	FloatNormalise					; normalise , exit if zero
.568d	f0 22		beq $56b1			beq 	_CNTSExit
.568f	a9 2e		lda #$2e			lda 	#"."
.5691	20 d2 56	jsr $56d2			jsr 	WriteDecimalBuffer 			; write decimal place
.5694					_CNTSDecimal:
.5694	ce 25 04	dec $0425			dec 	decimalPlaces 				; done all the decimals
.5697	30 18		bmi $56b1			bmi 	_CNTSExit
.5699	e8		inx				inx 								; x 10.0
.569a	a9 0a		lda #$0a			lda 	#10
.569c	20 74 57	jsr $5774			jsr 	FloatSetByte
.569f	20 32 54	jsr $5432			jsr 	FloatMultiply
.56a2	20 b4 56	jsr $56b4			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.56a5	20 52 53	jsr $5352			jsr 	FloatFractionalPart 		; get the fractional part
.56a8	20 c7 54	jsr $54c7			jsr 	FloatNormalise 				; normalise it.
.56ab	b5 6a		lda $6a,x			lda 	NSExponent,x 				; gone to zero, exit.
.56ad	c9 d0		cmp #$d0			cmp 	#$D0 						; very small remainder, so don't bother.
.56af	b0 e3		bcs $5694			bcs 	_CNTSDecimal 				; keep going.
.56b1					_CNTSExit:
.56b1	7a		ply				ply
.56b2	fa		plx				plx
.56b3	60		rts				rts
.56b4					MakePlusTwoString:
.56b4	da		phx				phx
.56b5	20 55 57	jsr $5755			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.56b8	e8		inx				inx 								; access it
.56b9	e8		inx				inx
.56ba	20 ad 53	jsr $53ad			jsr 	FloatIntegerPart 			; make it an integer
.56bd	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.56bf	20 f1 56	jsr $56f1			jsr 	ConvertInt32
.56c2	a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.56c4					_MPTSCopy:
.56c4	bd 00 04	lda $0400,x			lda 	numberBuffer,x
.56c7	20 d2 56	jsr $56d2			jsr 	WriteDecimalBuffer
.56ca	e8		inx				inx
.56cb	bd 00 04	lda $0400,x			lda 	numberBuffer,x
.56ce	d0 f4		bne $56c4			bne 	_MPTSCopy
.56d0	fa		plx				plx
.56d1	60		rts				rts
.56d2					WriteDecimalBuffer:
.56d2	da		phx				phx
.56d3	ae 26 04	ldx $0426			ldx 	dbOffset
.56d6	9d 27 04	sta $0427,x			sta 	decimalBuffer,x
.56d9	9e 28 04	stz $0428,x			stz 	decimalBuffer+1,x
.56dc	ee 26 04	inc $0426			inc 	dbOffset
.56df	fa		plx				plx
.56e0	60		rts				rts
.0425					decimalPlaces:
>0425							.fill 	1
.0426					dbOffset:
>0426							.fill 	1
.0427					decimalBuffer:
>0427							.fill 	32
.56e1					ConvertInt16:
.56e1	85 3a		sta $3a				sta 	NSMantissa0 				; set up as 32 bit conversion
.56e3	86 46		stx $46				stx 	NSMantissa1
.56e5	64 52		stz $52				stz 	NSMantissa2
.56e7	64 5e		stz $5e				stz 	NSMantissa3
.56e9	64 2e		stz $2e				stz 	NSStatus 					; positive integer
.56eb	a2 00		ldx #$00			ldx 	#0 							; stack level
.56ed	a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.56ef	80 00		bra $56f1			bra 	ConvertInt32
.56f1					ConvertInt32:
.56f1	5a		phy				phy
.56f2	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.56f4	24 2e		bit $2e				bit 	NSStatus 					; output a - if not negative.
.56f6	10 08		bpl $5700			bpl 	_CI32NotNeg
.56f8	48		pha				pha
.56f9	a9 2d		lda #$2d			lda 	#'-'
.56fb	99 00 04	sta $0400,y			sta 	numberBuffer,y
.56fe	c8		iny				iny
.56ff	68		pla				pla
.5700					_CI32NotNeg:
.5700	20 0e 57	jsr $570e			jsr 	_CI32DivideConvert 			; recursive conversion
.5703	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.5705	99 00 04	sta $0400,y			sta 	numberBuffer,y
.5708	7a		ply				ply
.5709	a2 04		ldx #$04			ldx 	#numberBuffer >> 8 			; return address in XA
.570b	a9 00		lda #$00			lda 	#numberBuffer & $FF
.570d	60		rts				rts
.570e					_CI32DivideConvert:
.570e	e8		inx				inx 								; write to next slot up
.570f	20 74 57	jsr $5774			jsr 	FloatSetByte 		 		; write the base out.
.5712	ca		dex				dex
.5713	20 08 53	jsr $5308			jsr 	Int32Divide 				; divide
.5716	b5 3a		lda $3a,x			lda 	NSMantissa0,x 				; save remainder
.5718	48		pha				pha
.5719	20 f7 52	jsr $52f7			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.571c	20 94 57	jsr $5794			jsr 	FloatIsZero 				; is it zero ?
.571f	f0 05		beq $5726			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.5721	b5 3b		lda $3b,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.5723	20 0e 57	jsr $570e			jsr 	_CI32DivideConvert 			; and recusrively call.
.5726					_CI32NoRecurse:
.5726	68		pla				pla 								; remainder
.5727	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.5729	90 02		bcc $572d			bcc 	_CI32NotHex
.572b	69 26		adc #$26			adc 	#6+32
.572d					_CI32NotHex:
.572d	69 30		adc #$30			adc 	#48
.572f	99 00 04	sta $0400,y			sta 	numberBuffer,y 				; write out and exit
.5732	c8		iny				iny
.5733	60		rts				rts
.5734					FloatNegate:
.5734	b5 2e		lda $2e,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.5736	49 80		eor #$80			eor 	#$80  						; toggle the negative flag
.5738	95 2e		sta $2e,x			sta 	NSStatus,x
.573a	60		rts				rts
.573b					FloatNegateMantissa:
.573b	38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.573c	a9 00		lda #$00			lda 	#0
.573e	f5 3a		sbc $3a,x			sbc 	NSMantissa0,x
.5740	95 3a		sta $3a,x			sta 	NSMantissa0,x
.5742	a9 00		lda #$00			lda 	#0
.5744	f5 46		sbc $46,x			sbc 	NSMantissa1,x
.5746	95 46		sta $46,x			sta 	NSMantissa1,x
.5748	a9 00		lda #$00			lda 	#0
.574a	f5 52		sbc $52,x			sbc 	NSMantissa2,x
.574c	95 52		sta $52,x			sta 	NSMantissa2,x
.574e	a9 00		lda #$00			lda 	#0
.5750	f5 5e		sbc $5e,x			sbc 	NSMantissa3,x
.5752	95 5e		sta $5e,x			sta 	NSMantissa3,x
.5754	60		rts				rts
.5755					FloatShiftUpTwo:
.5755	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.5757	95 3c		sta $3c,x			sta 	NSMantissa0+2,x
.5759	b5 46		lda $46,x			lda 	NSMantissa1,x
.575b	95 48		sta $48,x			sta 	NSMantissa1+2,x
.575d	b5 52		lda $52,x			lda 	NSMantissa2,x
.575f	95 54		sta $54,x			sta 	NSMantissa2+2,x
.5761	b5 5e		lda $5e,x			lda 	NSMantissa3,x
.5763	95 60		sta $60,x			sta 	NSMantissa3+2,x
.5765	b5 6a		lda $6a,x			lda 	NSExponent,x
.5767	95 6c		sta $6c,x			sta 	NSExponent+2,x
.5769	b5 2e		lda $2e,x			lda 	NSStatus,x
.576b	95 30		sta $30,x			sta 	NSStatus+2,x
.576d	60		rts				rts
.576e					FloatSetZeroMantissaOnly:
.576e	74 3a		stz $3a,x			stz 	NSMantissa0,x
.5770	80 08		bra $577a			bra 	FloatZero13
.5772					FloatSetZero:
.5772	a9 00		lda #$00			lda 	#0
.5774					FloatSetByte:
.5774	74 6a		stz $6a,x			stz 	NSExponent,x 				; zero exponent, as +ve integer value.
.5776					FloatSetMantissa:
.5776	95 3a		sta $3a,x			sta 	NSMantissa0,x 				; zero mantissa
.5778	74 2e		stz $2e,x			stz 	NSStatus,x
.577a					FloatZero13:
.577a	74 46		stz $46,x			stz 	NSMantissa1,x
.577c	74 52		stz $52,x			stz 	NSMantissa2,x
.577e	74 5e		stz $5e,x			stz 	NSMantissa3,x
.5780	60		rts				rts
.5781					FloatShiftLeft:
.5781	18		clc				clc
.5782					FloatRotateLeft:
.5782	36 3a		rol $3a,x			rol 	NSMantissa0,x
.5784	36 46		rol $46,x			rol		NSMantissa1,x
.5786	36 52		rol $52,x			rol		NSMantissa2,x
.5788	36 5e		rol $5e,x			rol		NSMantissa3,x
.578a	60		rts				rts
.578b					FloatShiftRight:
.578b	56 5e		lsr $5e,x			lsr 	NSMantissa3,x
.578d	76 52		ror $52,x			ror		NSMantissa2,x
.578f	76 46		ror $46,x			ror		NSMantissa1,x
.5791	76 3a		ror $3a,x			ror		NSMantissa0,x
.5793	60		rts				rts
.5794					FloatIsZero:
.5794	b5 5e		lda $5e,x			lda 	NSMantissa3,x
.5796	15 52		ora $52,x			ora		NSMantissa2,x
.5798	15 46		ora $46,x			ora		NSMantissa1,x
.579a	15 3a		ora $3a,x			ora		NSMantissa0,x
.579c	60		rts				rts

;******  End of listing
