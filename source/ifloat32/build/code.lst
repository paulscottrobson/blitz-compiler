
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass -c -Wall -o build/code.prg -L build/code.lst -l build/code.lbl /home/paulr/Projects/blitz-compiler/documents/../source/common-source/wrapper.asm testing/testing.asm /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library
; Thu Oct  5 06:27:50 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../source/common-source/wrapper.asm

=$1000					CodeStart = $1000
=$22					ZeroPageMandatory = $22
=$400					MemoryStorage = $400
.1000	a2 ff		ldx #$ff			ldx 	#$FF
.1002	9a		txs				txs
.1003	4c 06 10	jmp $1006			jmp 	WrapperBoot
.0022					codePtr:
>0022							.fill 	2
.0024					codePage:
>0024							.fill 	1
.0025					objPtr:
>0025							.fill 	2
.0027					objPage:
>0027							.fill 	1
.0028					zTemp0:
>0028							.fill 	2
.002a					zTemp1:
>002a							.fill 	2
.002c					zTemp2:
>002c							.fill 	2

;******  Processing input file: testing/testing.asm

.1006					WrapperBoot:
.1006	a2 ff		ldx #$ff			ldx 	#255
.1008	20 11 10	jsr $1011			jsr 	TestScript
.100b	86 28		stx $28				stx 	zTemp0
.100d	4c ff ff	jmp $ffff			jmp 	$FFFF
.1010					ErrorHandler:
>1010	db						.byte 	$DB 						; causes a break in the emulator
.1011					TestScript:

;******  Processing file: testing/generated/testcode.dat

.1011	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 13115
>1014	3b 33 00 00				.dword	$0000333b
>1018	00 00					.byte	$00,$00
.101a	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 33654
>101d	76 83 00 00				.dword	$00008376
>1021	00 00					.byte	$00,$00
.1023	20 1b 50	jsr $501b		jsr	FloatAdd
.1026	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 46769
>1029	b1 b6 00 00				.dword	$0000b6b1
>102d	00 00					.byte	$00,$00
.102f	20 dc 50	jsr $50dc		jsr	FloatCompare
.1032	20 a6 50	jsr $50a6		jsr	CompareEqual
.1035	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1038	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 13115
>103b	3b 33 00 00				.dword	$0000333b
>103f	00 00					.byte	$00,$00
.1041	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 33654
>1044	76 83 00 00				.dword	$00008376
>1048	00 00					.byte	$00,$00
.104a	20 15 50	jsr $5015		jsr	FloatSubtract
.104d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -20539
>1050	3b 50 00 00				.dword	$0000503b
>1054	00 80					.byte	$00,$80
.1056	20 dc 50	jsr $50dc		jsr	FloatCompare
.1059	20 a6 50	jsr $50a6		jsr	CompareEqual
.105c	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.105f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 13115
>1062	3b 33 00 00				.dword	$0000333b
>1066	00 00					.byte	$00,$00
.1068	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 33654
>106b	76 83 00 00				.dword	$00008376
>106f	00 00					.byte	$00,$00
.1071	20 b7 52	jsr $52b7		jsr	FloatMultiply
.1074	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 441372210
>1077	32 ce 4e 1a				.dword	$1a4ece32
>107b	00 00					.byte	$00,$00
.107d	20 dc 50	jsr $50dc		jsr	FloatCompare
.1080	20 a6 50	jsr $50a6		jsr	CompareEqual
.1083	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1086	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 13115
>1089	3b 33 00 00				.dword	$0000333b
>108d	00 00					.byte	$00,$00
.108f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 33654
>1092	76 83 00 00				.dword	$00008376
>1096	00 00					.byte	$00,$00
.1098	20 40 51	jsr $5140		jsr	FloatDivide
.109b	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0.38970108
>109e	32 73 c3 63				.dword	$63c37332
>10a2	e0 00					.byte	$e0,$00
.10a4	20 dc 50	jsr $50dc		jsr	FloatCompare
.10a7	20 a6 50	jsr $50a6		jsr	CompareEqual
.10aa	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.10ad	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 33654
>10b0	76 83 00 00				.dword	$00008376
>10b4	00 00					.byte	$00,$00
.10b6	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 33654
>10b9	76 83 00 00				.dword	$00008376
>10bd	00 00					.byte	$00,$00
.10bf	20 dc 50	jsr $50dc		jsr	FloatCompare
.10c2	20 a6 50	jsr $50a6		jsr	CompareEqual
.10c5	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>10c8	01 00 00 00				.dword	$00000001
>10cc	00 80					.byte	$00,$80
.10ce	20 dc 50	jsr $50dc		jsr	FloatCompare
.10d1	20 a6 50	jsr $50a6		jsr	CompareEqual
.10d4	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.10d7	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 33654
>10da	76 83 00 00				.dword	$00008376
>10de	00 00					.byte	$00,$00
.10e0	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 33654
>10e3	76 83 00 00				.dword	$00008376
>10e7	00 00					.byte	$00,$00
.10e9	20 dc 50	jsr $50dc		jsr	FloatCompare
.10ec	20 b6 50	jsr $50b6		jsr	CompareNotEqual
.10ef	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>10f2	00 00 00 00				.dword	$00000000
>10f6	00 00					.byte	$00,$00
.10f8	20 dc 50	jsr $50dc		jsr	FloatCompare
.10fb	20 a6 50	jsr $50a6		jsr	CompareEqual
.10fe	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1101	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 33654
>1104	76 83 00 00				.dword	$00008376
>1108	00 00					.byte	$00,$00
.110a	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 33654
>110d	76 83 00 00				.dword	$00008376
>1111	00 00					.byte	$00,$00
.1113	20 dc 50	jsr $50dc		jsr	FloatCompare
.1116	20 c4 50	jsr $50c4		jsr	CompareGreater
.1119	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>111c	00 00 00 00				.dword	$00000000
>1120	00 00					.byte	$00,$00
.1122	20 dc 50	jsr $50dc		jsr	FloatCompare
.1125	20 a6 50	jsr $50a6		jsr	CompareEqual
.1128	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.112b	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 33654
>112e	76 83 00 00				.dword	$00008376
>1132	00 00					.byte	$00,$00
.1134	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 33654
>1137	76 83 00 00				.dword	$00008376
>113b	00 00					.byte	$00,$00
.113d	20 dc 50	jsr $50dc		jsr	FloatCompare
.1140	20 d4 50	jsr $50d4		jsr	CompareGreaterEqual
.1143	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>1146	01 00 00 00				.dword	$00000001
>114a	00 80					.byte	$00,$80
.114c	20 dc 50	jsr $50dc		jsr	FloatCompare
.114f	20 a6 50	jsr $50a6		jsr	CompareEqual
.1152	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1155	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 33654
>1158	76 83 00 00				.dword	$00008376
>115c	00 00					.byte	$00,$00
.115e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 33654
>1161	76 83 00 00				.dword	$00008376
>1165	00 00					.byte	$00,$00
.1167	20 dc 50	jsr $50dc		jsr	FloatCompare
.116a	20 bc 50	jsr $50bc		jsr	CompareLess
.116d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>1170	00 00 00 00				.dword	$00000000
>1174	00 00					.byte	$00,$00
.1176	20 dc 50	jsr $50dc		jsr	FloatCompare
.1179	20 a6 50	jsr $50a6		jsr	CompareEqual
.117c	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.117f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 33654
>1182	76 83 00 00				.dword	$00008376
>1186	00 00					.byte	$00,$00
.1188	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 33654
>118b	76 83 00 00				.dword	$00008376
>118f	00 00					.byte	$00,$00
.1191	20 dc 50	jsr $50dc		jsr	FloatCompare
.1194	20 cc 50	jsr $50cc		jsr	CompareLessEqual
.1197	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>119a	01 00 00 00				.dword	$00000001
>119e	00 80					.byte	$00,$80
.11a0	20 dc 50	jsr $50dc		jsr	FloatCompare
.11a3	20 a6 50	jsr $50a6		jsr	CompareEqual
.11a6	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.11a9	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -22.08082935
>11ac	ee c4 52 58				.dword	$5852c4ee
>11b0	e6 80					.byte	$e6,$80
.11b2	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 23.97060015
>11b5	01 e5 e1 5f				.dword	$5fe1e501
>11b9	e6 00					.byte	$e6,$00
.11bb	20 1b 50	jsr $501b		jsr	FloatAdd
.11be	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 1.88977079
>11c1	2f 01 f2 78				.dword	$78f2012f
>11c5	e2 00					.byte	$e2,$00
.11c7	20 dc 50	jsr $50dc		jsr	FloatCompare
.11ca	20 a6 50	jsr $50a6		jsr	CompareEqual
.11cd	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.11d0	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -22.08082935
>11d3	ee c4 52 58				.dword	$5852c4ee
>11d7	e6 80					.byte	$e6,$80
.11d9	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 23.97060015
>11dc	01 e5 e1 5f				.dword	$5fe1e501
>11e0	e6 00					.byte	$e6,$00
.11e2	20 15 50	jsr $5015		jsr	FloatSubtract
.11e5	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -46.0514295
>11e8	f8 54 1a 5c				.dword	$5c1a54f8
>11ec	e7 80					.byte	$e7,$80
.11ee	20 dc 50	jsr $50dc		jsr	FloatCompare
.11f1	20 a6 50	jsr $50a6		jsr	CompareEqual
.11f4	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.11f7	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -22.08082935
>11fa	ee c4 52 58				.dword	$5852c4ee
>11fe	e6 80					.byte	$e6,$80
.1200	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 23.97060015
>1203	01 e5 e1 5f				.dword	$5fe1e501
>1207	e6 00					.byte	$e6,$00
.1209	20 b7 52	jsr $52b7		jsr	FloatMultiply
.120c	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -529.29073127
>120f	ac 4d 29 42				.dword	$42294dac
>1213	eb 80					.byte	$eb,$80
.1215	20 dc 50	jsr $50dc		jsr	FloatCompare
.1218	20 a6 50	jsr $50a6		jsr	CompareEqual
.121b	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.121e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -22.08082935
>1221	ee c4 52 58				.dword	$5852c4ee
>1225	e6 80					.byte	$e6,$80
.1227	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 23.97060015
>122a	01 e5 e1 5f				.dword	$5fe1e501
>122e	e6 00					.byte	$e6,$00
.1230	20 40 51	jsr $5140		jsr	FloatDivide
.1233	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -0.92116298
>1236	25 ab e8 75				.dword	$75e8ab25
>123a	e1 80					.byte	$e1,$80
.123c	20 dc 50	jsr $50dc		jsr	FloatCompare
.123f	20 a6 50	jsr $50a6		jsr	CompareEqual
.1242	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1245	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 9.39977322
>1248	4d bc 32 4b				.dword	$4b32bc4d
>124c	e5 00					.byte	$e5,$00
.124e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 9.39977322
>1251	4d bc 32 4b				.dword	$4b32bc4d
>1255	e5 00					.byte	$e5,$00
.1257	20 dc 50	jsr $50dc		jsr	FloatCompare
.125a	20 c4 50	jsr $50c4		jsr	CompareGreater
.125d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>1260	00 00 00 00				.dword	$00000000
>1264	00 00					.byte	$00,$00
.1266	20 dc 50	jsr $50dc		jsr	FloatCompare
.1269	20 a6 50	jsr $50a6		jsr	CompareEqual
.126c	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.126f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 9.39977322
>1272	4d bc 32 4b				.dword	$4b32bc4d
>1276	e5 00					.byte	$e5,$00
.1278	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 9.39977322
>127b	4d bc 32 4b				.dword	$4b32bc4d
>127f	e5 00					.byte	$e5,$00
.1281	20 dc 50	jsr $50dc		jsr	FloatCompare
.1284	20 d4 50	jsr $50d4		jsr	CompareGreaterEqual
.1287	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>128a	01 00 00 00				.dword	$00000001
>128e	00 80					.byte	$00,$80
.1290	20 dc 50	jsr $50dc		jsr	FloatCompare
.1293	20 a6 50	jsr $50a6		jsr	CompareEqual
.1296	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1299	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 9.39977322
>129c	4d bc 32 4b				.dword	$4b32bc4d
>12a0	e5 00					.byte	$e5,$00
.12a2	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 9.39977322
>12a5	4d bc 32 4b				.dword	$4b32bc4d
>12a9	e5 00					.byte	$e5,$00
.12ab	20 dc 50	jsr $50dc		jsr	FloatCompare
.12ae	20 bc 50	jsr $50bc		jsr	CompareLess
.12b1	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>12b4	00 00 00 00				.dword	$00000000
>12b8	00 00					.byte	$00,$00
.12ba	20 dc 50	jsr $50dc		jsr	FloatCompare
.12bd	20 a6 50	jsr $50a6		jsr	CompareEqual
.12c0	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.12c3	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 9.39977322
>12c6	4d bc 32 4b				.dword	$4b32bc4d
>12ca	e5 00					.byte	$e5,$00
.12cc	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 9.39977322
>12cf	4d bc 32 4b				.dword	$4b32bc4d
>12d3	e5 00					.byte	$e5,$00
.12d5	20 dc 50	jsr $50dc		jsr	FloatCompare
.12d8	20 cc 50	jsr $50cc		jsr	CompareLessEqual
.12db	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>12de	01 00 00 00				.dword	$00000001
>12e2	00 80					.byte	$00,$80
.12e4	20 dc 50	jsr $50dc		jsr	FloatCompare
.12e7	20 a6 50	jsr $50a6		jsr	CompareEqual
.12ea	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.12ed	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 9.39977322
>12f0	4d bc 32 4b				.dword	$4b32bc4d
>12f4	e5 00					.byte	$e5,$00
.12f6	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 9.39977322
>12f9	4d bc 32 4b				.dword	$4b32bc4d
>12fd	e5 00					.byte	$e5,$00
.12ff	20 dc 50	jsr $50dc		jsr	FloatCompare
.1302	20 a6 50	jsr $50a6		jsr	CompareEqual
.1305	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>1308	01 00 00 00				.dword	$00000001
>130c	00 80					.byte	$00,$80
.130e	20 dc 50	jsr $50dc		jsr	FloatCompare
.1311	20 a6 50	jsr $50a6		jsr	CompareEqual
.1314	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1317	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 9.39977322
>131a	4d bc 32 4b				.dword	$4b32bc4d
>131e	e5 00					.byte	$e5,$00
.1320	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 9.39977322
>1323	4d bc 32 4b				.dword	$4b32bc4d
>1327	e5 00					.byte	$e5,$00
.1329	20 dc 50	jsr $50dc		jsr	FloatCompare
.132c	20 b6 50	jsr $50b6		jsr	CompareNotEqual
.132f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>1332	00 00 00 00				.dword	$00000000
>1336	00 00					.byte	$00,$00
.1338	20 dc 50	jsr $50dc		jsr	FloatCompare
.133b	20 a6 50	jsr $50a6		jsr	CompareEqual
.133e	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1341	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -7598
>1344	ae 1d 00 00				.dword	$00001dae
>1348	00 80					.byte	$00,$80
.134a	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 7877
>134d	c5 1e 00 00				.dword	$00001ec5
>1351	00 00					.byte	$00,$00
.1353	20 1b 50	jsr $501b		jsr	FloatAdd
.1356	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 279
>1359	17 01 00 00				.dword	$00000117
>135d	00 00					.byte	$00,$00
.135f	20 dc 50	jsr $50dc		jsr	FloatCompare
.1362	20 a6 50	jsr $50a6		jsr	CompareEqual
.1365	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1368	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -7598
>136b	ae 1d 00 00				.dword	$00001dae
>136f	00 80					.byte	$00,$80
.1371	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 7877
>1374	c5 1e 00 00				.dword	$00001ec5
>1378	00 00					.byte	$00,$00
.137a	20 15 50	jsr $5015		jsr	FloatSubtract
.137d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -15475
>1380	73 3c 00 00				.dword	$00003c73
>1384	00 80					.byte	$00,$80
.1386	20 dc 50	jsr $50dc		jsr	FloatCompare
.1389	20 a6 50	jsr $50a6		jsr	CompareEqual
.138c	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.138f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -7598
>1392	ae 1d 00 00				.dword	$00001dae
>1396	00 80					.byte	$00,$80
.1398	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 7877
>139b	c5 1e 00 00				.dword	$00001ec5
>139f	00 00					.byte	$00,$00
.13a1	20 b7 52	jsr $52b7		jsr	FloatMultiply
.13a4	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -59849446
>13a7	e6 3a 91 03				.dword	$03913ae6
>13ab	00 80					.byte	$00,$80
.13ad	20 dc 50	jsr $50dc		jsr	FloatCompare
.13b0	20 a6 50	jsr $50a6		jsr	CompareEqual
.13b3	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.13b6	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -7598
>13b9	ae 1d 00 00				.dword	$00001dae
>13bd	00 80					.byte	$00,$80
.13bf	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 7877
>13c2	c5 1e 00 00				.dword	$00001ec5
>13c6	00 00					.byte	$00,$00
.13c8	20 40 51	jsr $5140		jsr	FloatDivide
.13cb	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -0.96458042
>13ce	07 5f 77 7b				.dword	$7b775f07
>13d2	e1 80					.byte	$e1,$80
.13d4	20 dc 50	jsr $50dc		jsr	FloatCompare
.13d7	20 a6 50	jsr $50a6		jsr	CompareEqual
.13da	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.13dd	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 7877
>13e0	c5 1e 00 00				.dword	$00001ec5
>13e4	00 00					.byte	$00,$00
.13e6	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 7877
>13e9	c5 1e 00 00				.dword	$00001ec5
>13ed	00 00					.byte	$00,$00
.13ef	20 dc 50	jsr $50dc		jsr	FloatCompare
.13f2	20 a6 50	jsr $50a6		jsr	CompareEqual
.13f5	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>13f8	01 00 00 00				.dword	$00000001
>13fc	00 80					.byte	$00,$80
.13fe	20 dc 50	jsr $50dc		jsr	FloatCompare
.1401	20 a6 50	jsr $50a6		jsr	CompareEqual
.1404	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1407	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 7877
>140a	c5 1e 00 00				.dword	$00001ec5
>140e	00 00					.byte	$00,$00
.1410	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 7877
>1413	c5 1e 00 00				.dword	$00001ec5
>1417	00 00					.byte	$00,$00
.1419	20 dc 50	jsr $50dc		jsr	FloatCompare
.141c	20 b6 50	jsr $50b6		jsr	CompareNotEqual
.141f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>1422	00 00 00 00				.dword	$00000000
>1426	00 00					.byte	$00,$00
.1428	20 dc 50	jsr $50dc		jsr	FloatCompare
.142b	20 a6 50	jsr $50a6		jsr	CompareEqual
.142e	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1431	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 7877
>1434	c5 1e 00 00				.dword	$00001ec5
>1438	00 00					.byte	$00,$00
.143a	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 7877
>143d	c5 1e 00 00				.dword	$00001ec5
>1441	00 00					.byte	$00,$00
.1443	20 dc 50	jsr $50dc		jsr	FloatCompare
.1446	20 c4 50	jsr $50c4		jsr	CompareGreater
.1449	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>144c	00 00 00 00				.dword	$00000000
>1450	00 00					.byte	$00,$00
.1452	20 dc 50	jsr $50dc		jsr	FloatCompare
.1455	20 a6 50	jsr $50a6		jsr	CompareEqual
.1458	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.145b	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 7877
>145e	c5 1e 00 00				.dword	$00001ec5
>1462	00 00					.byte	$00,$00
.1464	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 7877
>1467	c5 1e 00 00				.dword	$00001ec5
>146b	00 00					.byte	$00,$00
.146d	20 dc 50	jsr $50dc		jsr	FloatCompare
.1470	20 d4 50	jsr $50d4		jsr	CompareGreaterEqual
.1473	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>1476	01 00 00 00				.dword	$00000001
>147a	00 80					.byte	$00,$80
.147c	20 dc 50	jsr $50dc		jsr	FloatCompare
.147f	20 a6 50	jsr $50a6		jsr	CompareEqual
.1482	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1485	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 7877
>1488	c5 1e 00 00				.dword	$00001ec5
>148c	00 00					.byte	$00,$00
.148e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 7877
>1491	c5 1e 00 00				.dword	$00001ec5
>1495	00 00					.byte	$00,$00
.1497	20 dc 50	jsr $50dc		jsr	FloatCompare
.149a	20 bc 50	jsr $50bc		jsr	CompareLess
.149d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>14a0	00 00 00 00				.dword	$00000000
>14a4	00 00					.byte	$00,$00
.14a6	20 dc 50	jsr $50dc		jsr	FloatCompare
.14a9	20 a6 50	jsr $50a6		jsr	CompareEqual
.14ac	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.14af	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 7877
>14b2	c5 1e 00 00				.dword	$00001ec5
>14b6	00 00					.byte	$00,$00
.14b8	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 7877
>14bb	c5 1e 00 00				.dword	$00001ec5
>14bf	00 00					.byte	$00,$00
.14c1	20 dc 50	jsr $50dc		jsr	FloatCompare
.14c4	20 cc 50	jsr $50cc		jsr	CompareLessEqual
.14c7	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>14ca	01 00 00 00				.dword	$00000001
>14ce	00 80					.byte	$00,$80
.14d0	20 dc 50	jsr $50dc		jsr	FloatCompare
.14d3	20 a6 50	jsr $50a6		jsr	CompareEqual
.14d6	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.14d9	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0.68696849
>14dc	5f 95 ee 57				.dword	$57ee955f
>14e0	e1 00					.byte	$e1,$00
.14e2	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -62.62727788
>14e5	91 2a 41 7d				.dword	$7d412a91
>14e9	e7 80					.byte	$e7,$80
.14eb	20 1b 50	jsr $501b		jsr	FloatAdd
.14ee	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -61.94030939
>14f1	3b 70 e1 7b				.dword	$7be1703b
>14f5	e7 80					.byte	$e7,$80
.14f7	20 dc 50	jsr $50dc		jsr	FloatCompare
.14fa	20 a6 50	jsr $50a6		jsr	CompareEqual
.14fd	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1500	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0.68696849
>1503	5f 95 ee 57				.dword	$57ee955f
>1507	e1 00					.byte	$e1,$00
.1509	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -62.62727788
>150c	91 2a 41 7d				.dword	$7d412a91
>1510	e7 80					.byte	$e7,$80
.1512	20 15 50	jsr $5015		jsr	FloatSubtract
.1515	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 63.31424638
>1518	e7 e4 a0 7e				.dword	$7ea0e4e7
>151c	e7 00					.byte	$e7,$00
.151e	20 dc 50	jsr $50dc		jsr	FloatCompare
.1521	20 a6 50	jsr $50a6		jsr	CompareEqual
.1524	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1527	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0.68696849
>152a	5f 95 ee 57				.dword	$57ee955f
>152e	e1 00					.byte	$e1,$00
.1530	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -62.62727788
>1533	91 2a 41 7d				.dword	$7d412a91
>1537	e7 80					.byte	$e7,$80
.1539	20 b7 52	jsr $52b7		jsr	FloatMultiply
.153c	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -43.02296679
>153f	4e c2 0b 56				.dword	$560bc24e
>1543	e7 80					.byte	$e7,$80
.1545	20 dc 50	jsr $50dc		jsr	FloatCompare
.1548	20 a6 50	jsr $50a6		jsr	CompareEqual
.154b	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.154e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0.68696849
>1551	5f 95 ee 57				.dword	$57ee955f
>1555	e1 00					.byte	$e1,$00
.1557	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -62.62727788
>155a	91 2a 41 7d				.dword	$7d412a91
>155e	e7 80					.byte	$e7,$80
.1560	20 40 51	jsr $5140		jsr	FloatDivide
.1563	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -0.01096916
>1566	ef fe db 59				.dword	$59dbfeef
>156a	db 80					.byte	$db,$80
.156c	20 dc 50	jsr $50dc		jsr	FloatCompare
.156f	20 a6 50	jsr $50a6		jsr	CompareEqual
.1572	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1575	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -48.14165384
>1578	da 86 48 60				.dword	$604886da
>157c	e7 80					.byte	$e7,$80
.157e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -48.14165384
>1581	da 86 48 60				.dword	$604886da
>1585	e7 80					.byte	$e7,$80
.1587	20 dc 50	jsr $50dc		jsr	FloatCompare
.158a	20 c4 50	jsr $50c4		jsr	CompareGreater
.158d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>1590	00 00 00 00				.dword	$00000000
>1594	00 00					.byte	$00,$00
.1596	20 dc 50	jsr $50dc		jsr	FloatCompare
.1599	20 a6 50	jsr $50a6		jsr	CompareEqual
.159c	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.159f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -48.14165384
>15a2	da 86 48 60				.dword	$604886da
>15a6	e7 80					.byte	$e7,$80
.15a8	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -48.14165384
>15ab	da 86 48 60				.dword	$604886da
>15af	e7 80					.byte	$e7,$80
.15b1	20 dc 50	jsr $50dc		jsr	FloatCompare
.15b4	20 d4 50	jsr $50d4		jsr	CompareGreaterEqual
.15b7	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>15ba	01 00 00 00				.dword	$00000001
>15be	00 80					.byte	$00,$80
.15c0	20 dc 50	jsr $50dc		jsr	FloatCompare
.15c3	20 a6 50	jsr $50a6		jsr	CompareEqual
.15c6	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.15c9	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -48.14165384
>15cc	da 86 48 60				.dword	$604886da
>15d0	e7 80					.byte	$e7,$80
.15d2	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -48.14165384
>15d5	da 86 48 60				.dword	$604886da
>15d9	e7 80					.byte	$e7,$80
.15db	20 dc 50	jsr $50dc		jsr	FloatCompare
.15de	20 bc 50	jsr $50bc		jsr	CompareLess
.15e1	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>15e4	00 00 00 00				.dword	$00000000
>15e8	00 00					.byte	$00,$00
.15ea	20 dc 50	jsr $50dc		jsr	FloatCompare
.15ed	20 a6 50	jsr $50a6		jsr	CompareEqual
.15f0	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.15f3	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -48.14165384
>15f6	da 86 48 60				.dword	$604886da
>15fa	e7 80					.byte	$e7,$80
.15fc	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -48.14165384
>15ff	da 86 48 60				.dword	$604886da
>1603	e7 80					.byte	$e7,$80
.1605	20 dc 50	jsr $50dc		jsr	FloatCompare
.1608	20 cc 50	jsr $50cc		jsr	CompareLessEqual
.160b	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>160e	01 00 00 00				.dword	$00000001
>1612	00 80					.byte	$00,$80
.1614	20 dc 50	jsr $50dc		jsr	FloatCompare
.1617	20 a6 50	jsr $50a6		jsr	CompareEqual
.161a	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.161d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -48.14165384
>1620	da 86 48 60				.dword	$604886da
>1624	e7 80					.byte	$e7,$80
.1626	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -48.14165384
>1629	da 86 48 60				.dword	$604886da
>162d	e7 80					.byte	$e7,$80
.162f	20 dc 50	jsr $50dc		jsr	FloatCompare
.1632	20 a6 50	jsr $50a6		jsr	CompareEqual
.1635	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>1638	01 00 00 00				.dword	$00000001
>163c	00 80					.byte	$00,$80
.163e	20 dc 50	jsr $50dc		jsr	FloatCompare
.1641	20 a6 50	jsr $50a6		jsr	CompareEqual
.1644	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1647	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -48.14165384
>164a	da 86 48 60				.dword	$604886da
>164e	e7 80					.byte	$e7,$80
.1650	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -48.14165384
>1653	da 86 48 60				.dword	$604886da
>1657	e7 80					.byte	$e7,$80
.1659	20 dc 50	jsr $50dc		jsr	FloatCompare
.165c	20 b6 50	jsr $50b6		jsr	CompareNotEqual
.165f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>1662	00 00 00 00				.dword	$00000000
>1666	00 00					.byte	$00,$00
.1668	20 dc 50	jsr $50dc		jsr	FloatCompare
.166b	20 a6 50	jsr $50a6		jsr	CompareEqual
.166e	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1671	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 34650
>1674	5a 87 00 00				.dword	$0000875a
>1678	00 00					.byte	$00,$00
.167a	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -3244
>167d	ac 0c 00 00				.dword	$00000cac
>1681	00 80					.byte	$00,$80
.1683	20 1b 50	jsr $501b		jsr	FloatAdd
.1686	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 31406
>1689	ae 7a 00 00				.dword	$00007aae
>168d	00 00					.byte	$00,$00
.168f	20 dc 50	jsr $50dc		jsr	FloatCompare
.1692	20 a6 50	jsr $50a6		jsr	CompareEqual
.1695	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1698	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 34650
>169b	5a 87 00 00				.dword	$0000875a
>169f	00 00					.byte	$00,$00
.16a1	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -3244
>16a4	ac 0c 00 00				.dword	$00000cac
>16a8	00 80					.byte	$00,$80
.16aa	20 15 50	jsr $5015		jsr	FloatSubtract
.16ad	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 37894
>16b0	06 94 00 00				.dword	$00009406
>16b4	00 00					.byte	$00,$00
.16b6	20 dc 50	jsr $50dc		jsr	FloatCompare
.16b9	20 a6 50	jsr $50a6		jsr	CompareEqual
.16bc	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.16bf	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 34650
>16c2	5a 87 00 00				.dword	$0000875a
>16c6	00 00					.byte	$00,$00
.16c8	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -3244
>16cb	ac 0c 00 00				.dword	$00000cac
>16cf	00 80					.byte	$00,$80
.16d1	20 b7 52	jsr $52b7		jsr	FloatMultiply
.16d4	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -112404600
>16d7	78 28 b3 06				.dword	$06b32878
>16db	00 80					.byte	$00,$80
.16dd	20 dc 50	jsr $50dc		jsr	FloatCompare
.16e0	20 a6 50	jsr $50a6		jsr	CompareEqual
.16e3	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.16e6	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 34650
>16e9	5a 87 00 00				.dword	$0000875a
>16ed	00 00					.byte	$00,$00
.16ef	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -3244
>16f2	ac 0c 00 00				.dword	$00000cac
>16f6	00 80					.byte	$00,$80
.16f8	20 40 51	jsr $5140		jsr	FloatDivide
.16fb	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -10.68125771
>16fe	3e 37 73 55				.dword	$5573373e
>1702	e5 80					.byte	$e5,$80
.1704	20 dc 50	jsr $50dc		jsr	FloatCompare
.1707	20 a6 50	jsr $50a6		jsr	CompareEqual
.170a	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.170d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 34650
>1710	5a 87 00 00				.dword	$0000875a
>1714	00 00					.byte	$00,$00
.1716	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -3244
>1719	ac 0c 00 00				.dword	$00000cac
>171d	00 80					.byte	$00,$80
.171f	20 dc 50	jsr $50dc		jsr	FloatCompare
.1722	20 a6 50	jsr $50a6		jsr	CompareEqual
.1725	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>1728	00 00 00 00				.dword	$00000000
>172c	00 00					.byte	$00,$00
.172e	20 dc 50	jsr $50dc		jsr	FloatCompare
.1731	20 a6 50	jsr $50a6		jsr	CompareEqual
.1734	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1737	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 34650
>173a	5a 87 00 00				.dword	$0000875a
>173e	00 00					.byte	$00,$00
.1740	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -3244
>1743	ac 0c 00 00				.dword	$00000cac
>1747	00 80					.byte	$00,$80
.1749	20 dc 50	jsr $50dc		jsr	FloatCompare
.174c	20 b6 50	jsr $50b6		jsr	CompareNotEqual
.174f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>1752	01 00 00 00				.dword	$00000001
>1756	00 80					.byte	$00,$80
.1758	20 dc 50	jsr $50dc		jsr	FloatCompare
.175b	20 a6 50	jsr $50a6		jsr	CompareEqual
.175e	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1761	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 34650
>1764	5a 87 00 00				.dword	$0000875a
>1768	00 00					.byte	$00,$00
.176a	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -3244
>176d	ac 0c 00 00				.dword	$00000cac
>1771	00 80					.byte	$00,$80
.1773	20 dc 50	jsr $50dc		jsr	FloatCompare
.1776	20 c4 50	jsr $50c4		jsr	CompareGreater
.1779	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>177c	01 00 00 00				.dword	$00000001
>1780	00 80					.byte	$00,$80
.1782	20 dc 50	jsr $50dc		jsr	FloatCompare
.1785	20 a6 50	jsr $50a6		jsr	CompareEqual
.1788	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.178b	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 34650
>178e	5a 87 00 00				.dword	$0000875a
>1792	00 00					.byte	$00,$00
.1794	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -3244
>1797	ac 0c 00 00				.dword	$00000cac
>179b	00 80					.byte	$00,$80
.179d	20 dc 50	jsr $50dc		jsr	FloatCompare
.17a0	20 d4 50	jsr $50d4		jsr	CompareGreaterEqual
.17a3	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>17a6	01 00 00 00				.dword	$00000001
>17aa	00 80					.byte	$00,$80
.17ac	20 dc 50	jsr $50dc		jsr	FloatCompare
.17af	20 a6 50	jsr $50a6		jsr	CompareEqual
.17b2	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.17b5	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 34650
>17b8	5a 87 00 00				.dword	$0000875a
>17bc	00 00					.byte	$00,$00
.17be	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -3244
>17c1	ac 0c 00 00				.dword	$00000cac
>17c5	00 80					.byte	$00,$80
.17c7	20 dc 50	jsr $50dc		jsr	FloatCompare
.17ca	20 bc 50	jsr $50bc		jsr	CompareLess
.17cd	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>17d0	00 00 00 00				.dword	$00000000
>17d4	00 00					.byte	$00,$00
.17d6	20 dc 50	jsr $50dc		jsr	FloatCompare
.17d9	20 a6 50	jsr $50a6		jsr	CompareEqual
.17dc	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.17df	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 34650
>17e2	5a 87 00 00				.dword	$0000875a
>17e6	00 00					.byte	$00,$00
.17e8	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -3244
>17eb	ac 0c 00 00				.dword	$00000cac
>17ef	00 80					.byte	$00,$80
.17f1	20 dc 50	jsr $50dc		jsr	FloatCompare
.17f4	20 cc 50	jsr $50cc		jsr	CompareLessEqual
.17f7	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>17fa	00 00 00 00				.dword	$00000000
>17fe	00 00					.byte	$00,$00
.1800	20 dc 50	jsr $50dc		jsr	FloatCompare
.1803	20 a6 50	jsr $50a6		jsr	CompareEqual
.1806	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1809	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 52.55997408
>180c	ec b4 1e 69				.dword	$691eb4ec
>1810	e7 00					.byte	$e7,$00
.1812	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -65.06163441
>1815	46 c7 0f 41				.dword	$410fc746
>1819	e8 80					.byte	$e8,$80
.181b	20 1b 50	jsr $501b		jsr	FloatAdd
.181e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -12.50166032
>1821	7c 66 03 64				.dword	$6403667c
>1825	e5 80					.byte	$e5,$80
.1827	20 dc 50	jsr $50dc		jsr	FloatCompare
.182a	20 a6 50	jsr $50a6		jsr	CompareEqual
.182d	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1830	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 52.55997408
>1833	ec b4 1e 69				.dword	$691eb4ec
>1837	e7 00					.byte	$e7,$00
.1839	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -65.06163441
>183c	46 c7 0f 41				.dword	$410fc746
>1840	e8 80					.byte	$e8,$80
.1842	20 15 50	jsr $5015		jsr	FloatSubtract
.1845	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 117.62160849
>1848	bc 21 9f 75				.dword	$759f21bc
>184c	e8 00					.byte	$e8,$00
.184e	20 dc 50	jsr $50dc		jsr	FloatCompare
.1851	20 a6 50	jsr $50a6		jsr	CompareEqual
.1854	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1857	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 52.55997408
>185a	ec b4 1e 69				.dword	$691eb4ec
>185e	e7 00					.byte	$e7,$00
.1860	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -65.06163441
>1863	46 c7 0f 41				.dword	$410fc746
>1867	e8 80					.byte	$e8,$80
.1869	20 b7 52	jsr $52b7		jsr	FloatMultiply
.186c	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -3419.63781812
>186f	40 1a dd 6a				.dword	$6add1a40
>1873	ed 80					.byte	$ed,$80
.1875	20 dc 50	jsr $50dc		jsr	FloatCompare
.1878	20 a6 50	jsr $50a6		jsr	CompareEqual
.187b	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.187e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 52.55997408
>1881	ec b4 1e 69				.dword	$691eb4ec
>1885	e7 00					.byte	$e7,$00
.1887	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -65.06163441
>188a	46 c7 0f 41				.dword	$410fc746
>188e	e8 80					.byte	$e8,$80
.1890	20 40 51	jsr $5140		jsr	FloatDivide
.1893	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -0.80784897
>1896	55 98 67 67				.dword	$67679855
>189a	e1 80					.byte	$e1,$80
.189c	20 dc 50	jsr $50dc		jsr	FloatCompare
.189f	20 a6 50	jsr $50a6		jsr	CompareEqual
.18a2	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.18a5	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 46.22985341
>18a8	59 af 75 5c				.dword	$5c75af59
>18ac	e7 00					.byte	$e7,$00
.18ae	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 46.22985341
>18b1	59 af 75 5c				.dword	$5c75af59
>18b5	e7 00					.byte	$e7,$00
.18b7	20 dc 50	jsr $50dc		jsr	FloatCompare
.18ba	20 c4 50	jsr $50c4		jsr	CompareGreater
.18bd	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>18c0	00 00 00 00				.dword	$00000000
>18c4	00 00					.byte	$00,$00
.18c6	20 dc 50	jsr $50dc		jsr	FloatCompare
.18c9	20 a6 50	jsr $50a6		jsr	CompareEqual
.18cc	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.18cf	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 46.22985341
>18d2	59 af 75 5c				.dword	$5c75af59
>18d6	e7 00					.byte	$e7,$00
.18d8	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 46.22985341
>18db	59 af 75 5c				.dword	$5c75af59
>18df	e7 00					.byte	$e7,$00
.18e1	20 dc 50	jsr $50dc		jsr	FloatCompare
.18e4	20 d4 50	jsr $50d4		jsr	CompareGreaterEqual
.18e7	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>18ea	01 00 00 00				.dword	$00000001
>18ee	00 80					.byte	$00,$80
.18f0	20 dc 50	jsr $50dc		jsr	FloatCompare
.18f3	20 a6 50	jsr $50a6		jsr	CompareEqual
.18f6	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.18f9	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 46.22985341
>18fc	59 af 75 5c				.dword	$5c75af59
>1900	e7 00					.byte	$e7,$00
.1902	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 46.22985341
>1905	59 af 75 5c				.dword	$5c75af59
>1909	e7 00					.byte	$e7,$00
.190b	20 dc 50	jsr $50dc		jsr	FloatCompare
.190e	20 bc 50	jsr $50bc		jsr	CompareLess
.1911	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>1914	00 00 00 00				.dword	$00000000
>1918	00 00					.byte	$00,$00
.191a	20 dc 50	jsr $50dc		jsr	FloatCompare
.191d	20 a6 50	jsr $50a6		jsr	CompareEqual
.1920	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1923	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 46.22985341
>1926	59 af 75 5c				.dword	$5c75af59
>192a	e7 00					.byte	$e7,$00
.192c	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 46.22985341
>192f	59 af 75 5c				.dword	$5c75af59
>1933	e7 00					.byte	$e7,$00
.1935	20 dc 50	jsr $50dc		jsr	FloatCompare
.1938	20 cc 50	jsr $50cc		jsr	CompareLessEqual
.193b	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>193e	01 00 00 00				.dword	$00000001
>1942	00 80					.byte	$00,$80
.1944	20 dc 50	jsr $50dc		jsr	FloatCompare
.1947	20 a6 50	jsr $50a6		jsr	CompareEqual
.194a	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.194d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 46.22985341
>1950	59 af 75 5c				.dword	$5c75af59
>1954	e7 00					.byte	$e7,$00
.1956	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 46.22985341
>1959	59 af 75 5c				.dword	$5c75af59
>195d	e7 00					.byte	$e7,$00
.195f	20 dc 50	jsr $50dc		jsr	FloatCompare
.1962	20 a6 50	jsr $50a6		jsr	CompareEqual
.1965	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>1968	01 00 00 00				.dword	$00000001
>196c	00 80					.byte	$00,$80
.196e	20 dc 50	jsr $50dc		jsr	FloatCompare
.1971	20 a6 50	jsr $50a6		jsr	CompareEqual
.1974	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1977	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 46.22985341
>197a	59 af 75 5c				.dword	$5c75af59
>197e	e7 00					.byte	$e7,$00
.1980	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 46.22985341
>1983	59 af 75 5c				.dword	$5c75af59
>1987	e7 00					.byte	$e7,$00
.1989	20 dc 50	jsr $50dc		jsr	FloatCompare
.198c	20 b6 50	jsr $50b6		jsr	CompareNotEqual
.198f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>1992	00 00 00 00				.dword	$00000000
>1996	00 00					.byte	$00,$00
.1998	20 dc 50	jsr $50dc		jsr	FloatCompare
.199b	20 a6 50	jsr $50a6		jsr	CompareEqual
.199e	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.19a1	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 34331
>19a4	1b 86 00 00				.dword	$0000861b
>19a8	00 00					.byte	$00,$00
.19aa	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 2609
>19ad	31 0a 00 00				.dword	$00000a31
>19b1	00 00					.byte	$00,$00
.19b3	20 1b 50	jsr $501b		jsr	FloatAdd
.19b6	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 36940
>19b9	4c 90 00 00				.dword	$0000904c
>19bd	00 00					.byte	$00,$00
.19bf	20 dc 50	jsr $50dc		jsr	FloatCompare
.19c2	20 a6 50	jsr $50a6		jsr	CompareEqual
.19c5	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.19c8	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 34331
>19cb	1b 86 00 00				.dword	$0000861b
>19cf	00 00					.byte	$00,$00
.19d1	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 2609
>19d4	31 0a 00 00				.dword	$00000a31
>19d8	00 00					.byte	$00,$00
.19da	20 15 50	jsr $5015		jsr	FloatSubtract
.19dd	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 31722
>19e0	ea 7b 00 00				.dword	$00007bea
>19e4	00 00					.byte	$00,$00
.19e6	20 dc 50	jsr $50dc		jsr	FloatCompare
.19e9	20 a6 50	jsr $50a6		jsr	CompareEqual
.19ec	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.19ef	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 34331
>19f2	1b 86 00 00				.dword	$0000861b
>19f6	00 00					.byte	$00,$00
.19f8	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 2609
>19fb	31 0a 00 00				.dword	$00000a31
>19ff	00 00					.byte	$00,$00
.1a01	20 b7 52	jsr $52b7		jsr	FloatMultiply
.1a04	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 89569579
>1a07	2b b9 56 05				.dword	$0556b92b
>1a0b	00 00					.byte	$00,$00
.1a0d	20 dc 50	jsr $50dc		jsr	FloatCompare
.1a10	20 a6 50	jsr $50a6		jsr	CompareEqual
.1a13	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1a16	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 34331
>1a19	1b 86 00 00				.dword	$0000861b
>1a1d	00 00					.byte	$00,$00
.1a1f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 2609
>1a22	31 0a 00 00				.dword	$00000a31
>1a26	00 00					.byte	$00,$00
.1a28	20 40 51	jsr $5140		jsr	FloatDivide
.1a2b	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 13.15868149
>1a2e	cd fa 44 69				.dword	$6944facd
>1a32	e5 00					.byte	$e5,$00
.1a34	20 dc 50	jsr $50dc		jsr	FloatCompare
.1a37	20 a6 50	jsr $50a6		jsr	CompareEqual
.1a3a	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1a3d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 2609
>1a40	31 0a 00 00				.dword	$00000a31
>1a44	00 00					.byte	$00,$00
.1a46	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 2609
>1a49	31 0a 00 00				.dword	$00000a31
>1a4d	00 00					.byte	$00,$00
.1a4f	20 dc 50	jsr $50dc		jsr	FloatCompare
.1a52	20 a6 50	jsr $50a6		jsr	CompareEqual
.1a55	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>1a58	01 00 00 00				.dword	$00000001
>1a5c	00 80					.byte	$00,$80
.1a5e	20 dc 50	jsr $50dc		jsr	FloatCompare
.1a61	20 a6 50	jsr $50a6		jsr	CompareEqual
.1a64	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1a67	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 2609
>1a6a	31 0a 00 00				.dword	$00000a31
>1a6e	00 00					.byte	$00,$00
.1a70	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 2609
>1a73	31 0a 00 00				.dword	$00000a31
>1a77	00 00					.byte	$00,$00
.1a79	20 dc 50	jsr $50dc		jsr	FloatCompare
.1a7c	20 b6 50	jsr $50b6		jsr	CompareNotEqual
.1a7f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>1a82	00 00 00 00				.dword	$00000000
>1a86	00 00					.byte	$00,$00
.1a88	20 dc 50	jsr $50dc		jsr	FloatCompare
.1a8b	20 a6 50	jsr $50a6		jsr	CompareEqual
.1a8e	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1a91	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 2609
>1a94	31 0a 00 00				.dword	$00000a31
>1a98	00 00					.byte	$00,$00
.1a9a	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 2609
>1a9d	31 0a 00 00				.dword	$00000a31
>1aa1	00 00					.byte	$00,$00
.1aa3	20 dc 50	jsr $50dc		jsr	FloatCompare
.1aa6	20 c4 50	jsr $50c4		jsr	CompareGreater
.1aa9	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>1aac	00 00 00 00				.dword	$00000000
>1ab0	00 00					.byte	$00,$00
.1ab2	20 dc 50	jsr $50dc		jsr	FloatCompare
.1ab5	20 a6 50	jsr $50a6		jsr	CompareEqual
.1ab8	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1abb	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 2609
>1abe	31 0a 00 00				.dword	$00000a31
>1ac2	00 00					.byte	$00,$00
.1ac4	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 2609
>1ac7	31 0a 00 00				.dword	$00000a31
>1acb	00 00					.byte	$00,$00
.1acd	20 dc 50	jsr $50dc		jsr	FloatCompare
.1ad0	20 d4 50	jsr $50d4		jsr	CompareGreaterEqual
.1ad3	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>1ad6	01 00 00 00				.dword	$00000001
>1ada	00 80					.byte	$00,$80
.1adc	20 dc 50	jsr $50dc		jsr	FloatCompare
.1adf	20 a6 50	jsr $50a6		jsr	CompareEqual
.1ae2	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1ae5	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 2609
>1ae8	31 0a 00 00				.dword	$00000a31
>1aec	00 00					.byte	$00,$00
.1aee	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 2609
>1af1	31 0a 00 00				.dword	$00000a31
>1af5	00 00					.byte	$00,$00
.1af7	20 dc 50	jsr $50dc		jsr	FloatCompare
.1afa	20 bc 50	jsr $50bc		jsr	CompareLess
.1afd	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>1b00	00 00 00 00				.dword	$00000000
>1b04	00 00					.byte	$00,$00
.1b06	20 dc 50	jsr $50dc		jsr	FloatCompare
.1b09	20 a6 50	jsr $50a6		jsr	CompareEqual
.1b0c	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1b0f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 2609
>1b12	31 0a 00 00				.dword	$00000a31
>1b16	00 00					.byte	$00,$00
.1b18	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 2609
>1b1b	31 0a 00 00				.dword	$00000a31
>1b1f	00 00					.byte	$00,$00
.1b21	20 dc 50	jsr $50dc		jsr	FloatCompare
.1b24	20 cc 50	jsr $50cc		jsr	CompareLessEqual
.1b27	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>1b2a	01 00 00 00				.dword	$00000001
>1b2e	00 80					.byte	$00,$80
.1b30	20 dc 50	jsr $50dc		jsr	FloatCompare
.1b33	20 a6 50	jsr $50a6		jsr	CompareEqual
.1b36	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1b39	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 72.86199077
>1b3c	6d ab dc 48				.dword	$48dcab6d
>1b40	e8 00					.byte	$e8,$00
.1b42	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 58.10221106
>1b45	02 55 34 74				.dword	$74345502
>1b49	e7 00					.byte	$e7,$00
.1b4b	20 1b 50	jsr $501b		jsr	FloatAdd
.1b4e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 130.96420183
>1b51	f7 6a 7b 41				.dword	$417b6af7
>1b55	e9 00					.byte	$e9,$00
.1b57	20 dc 50	jsr $50dc		jsr	FloatCompare
.1b5a	20 a6 50	jsr $50a6		jsr	CompareEqual
.1b5d	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1b60	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 72.86199077
>1b63	6d ab dc 48				.dword	$48dcab6d
>1b67	e8 00					.byte	$e8,$00
.1b69	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 58.10221106
>1b6c	02 55 34 74				.dword	$74345502
>1b70	e7 00					.byte	$e7,$00
.1b72	20 15 50	jsr $5015		jsr	FloatSubtract
.1b75	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 14.7597797
>1b78	61 07 14 76				.dword	$76140761
>1b7c	e5 00					.byte	$e5,$00
.1b7e	20 dc 50	jsr $50dc		jsr	FloatCompare
.1b81	20 a6 50	jsr $50a6		jsr	CompareEqual
.1b84	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1b87	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 72.86199077
>1b8a	6d ab dc 48				.dword	$48dcab6d
>1b8e	e8 00					.byte	$e8,$00
.1b90	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 58.10221106
>1b93	02 55 34 74				.dword	$74345502
>1b97	e7 00					.byte	$e7,$00
.1b99	20 b7 52	jsr $52b7		jsr	FloatMultiply
.1b9c	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 4233.44276604
>1b9f	64 c5 25 42				.dword	$4225c564
>1ba3	ee 00					.byte	$ee,$00
.1ba5	20 dc 50	jsr $50dc		jsr	FloatCompare
.1ba8	20 a6 50	jsr $50a6		jsr	CompareEqual
.1bab	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1bae	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 72.86199077
>1bb1	6d ab dc 48				.dword	$48dcab6d
>1bb5	e8 00					.byte	$e8,$00
.1bb7	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 58.10221106
>1bba	02 55 34 74				.dword	$74345502
>1bbe	e7 00					.byte	$e7,$00
.1bc0	20 40 51	jsr $5140		jsr	FloatDivide
.1bc3	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 1.25403129
>1bc6	75 0c 42 50				.dword	$50420c75
>1bca	e2 00					.byte	$e2,$00
.1bcc	20 dc 50	jsr $50dc		jsr	FloatCompare
.1bcf	20 a6 50	jsr $50a6		jsr	CompareEqual
.1bd2	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1bd5	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 3.50060744
>1bd8	e5 f9 04 70				.dword	$7004f9e5
>1bdc	e3 00					.byte	$e3,$00
.1bde	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 3.50060744
>1be1	e5 f9 04 70				.dword	$7004f9e5
>1be5	e3 00					.byte	$e3,$00
.1be7	20 dc 50	jsr $50dc		jsr	FloatCompare
.1bea	20 c4 50	jsr $50c4		jsr	CompareGreater
.1bed	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>1bf0	00 00 00 00				.dword	$00000000
>1bf4	00 00					.byte	$00,$00
.1bf6	20 dc 50	jsr $50dc		jsr	FloatCompare
.1bf9	20 a6 50	jsr $50a6		jsr	CompareEqual
.1bfc	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1bff	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 3.50060744
>1c02	e5 f9 04 70				.dword	$7004f9e5
>1c06	e3 00					.byte	$e3,$00
.1c08	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 3.50060744
>1c0b	e5 f9 04 70				.dword	$7004f9e5
>1c0f	e3 00					.byte	$e3,$00
.1c11	20 dc 50	jsr $50dc		jsr	FloatCompare
.1c14	20 d4 50	jsr $50d4		jsr	CompareGreaterEqual
.1c17	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>1c1a	01 00 00 00				.dword	$00000001
>1c1e	00 80					.byte	$00,$80
.1c20	20 dc 50	jsr $50dc		jsr	FloatCompare
.1c23	20 a6 50	jsr $50a6		jsr	CompareEqual
.1c26	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1c29	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 3.50060744
>1c2c	e5 f9 04 70				.dword	$7004f9e5
>1c30	e3 00					.byte	$e3,$00
.1c32	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 3.50060744
>1c35	e5 f9 04 70				.dword	$7004f9e5
>1c39	e3 00					.byte	$e3,$00
.1c3b	20 dc 50	jsr $50dc		jsr	FloatCompare
.1c3e	20 bc 50	jsr $50bc		jsr	CompareLess
.1c41	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>1c44	00 00 00 00				.dword	$00000000
>1c48	00 00					.byte	$00,$00
.1c4a	20 dc 50	jsr $50dc		jsr	FloatCompare
.1c4d	20 a6 50	jsr $50a6		jsr	CompareEqual
.1c50	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1c53	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 3.50060744
>1c56	e5 f9 04 70				.dword	$7004f9e5
>1c5a	e3 00					.byte	$e3,$00
.1c5c	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 3.50060744
>1c5f	e5 f9 04 70				.dword	$7004f9e5
>1c63	e3 00					.byte	$e3,$00
.1c65	20 dc 50	jsr $50dc		jsr	FloatCompare
.1c68	20 cc 50	jsr $50cc		jsr	CompareLessEqual
.1c6b	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>1c6e	01 00 00 00				.dword	$00000001
>1c72	00 80					.byte	$00,$80
.1c74	20 dc 50	jsr $50dc		jsr	FloatCompare
.1c77	20 a6 50	jsr $50a6		jsr	CompareEqual
.1c7a	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1c7d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 3.50060744
>1c80	e5 f9 04 70				.dword	$7004f9e5
>1c84	e3 00					.byte	$e3,$00
.1c86	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 3.50060744
>1c89	e5 f9 04 70				.dword	$7004f9e5
>1c8d	e3 00					.byte	$e3,$00
.1c8f	20 dc 50	jsr $50dc		jsr	FloatCompare
.1c92	20 a6 50	jsr $50a6		jsr	CompareEqual
.1c95	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>1c98	01 00 00 00				.dword	$00000001
>1c9c	00 80					.byte	$00,$80
.1c9e	20 dc 50	jsr $50dc		jsr	FloatCompare
.1ca1	20 a6 50	jsr $50a6		jsr	CompareEqual
.1ca4	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1ca7	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 3.50060744
>1caa	e5 f9 04 70				.dword	$7004f9e5
>1cae	e3 00					.byte	$e3,$00
.1cb0	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 3.50060744
>1cb3	e5 f9 04 70				.dword	$7004f9e5
>1cb7	e3 00					.byte	$e3,$00
.1cb9	20 dc 50	jsr $50dc		jsr	FloatCompare
.1cbc	20 b6 50	jsr $50b6		jsr	CompareNotEqual
.1cbf	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>1cc2	00 00 00 00				.dword	$00000000
>1cc6	00 00					.byte	$00,$00
.1cc8	20 dc 50	jsr $50dc		jsr	FloatCompare
.1ccb	20 a6 50	jsr $50a6		jsr	CompareEqual
.1cce	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1cd1	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -6163
>1cd4	13 18 00 00				.dword	$00001813
>1cd8	00 80					.byte	$00,$80
.1cda	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -34256
>1cdd	d0 85 00 00				.dword	$000085d0
>1ce1	00 80					.byte	$00,$80
.1ce3	20 1b 50	jsr $501b		jsr	FloatAdd
.1ce6	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -40419
>1ce9	e3 9d 00 00				.dword	$00009de3
>1ced	00 80					.byte	$00,$80
.1cef	20 dc 50	jsr $50dc		jsr	FloatCompare
.1cf2	20 a6 50	jsr $50a6		jsr	CompareEqual
.1cf5	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1cf8	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -6163
>1cfb	13 18 00 00				.dword	$00001813
>1cff	00 80					.byte	$00,$80
.1d01	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -34256
>1d04	d0 85 00 00				.dword	$000085d0
>1d08	00 80					.byte	$00,$80
.1d0a	20 15 50	jsr $5015		jsr	FloatSubtract
.1d0d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 28093
>1d10	bd 6d 00 00				.dword	$00006dbd
>1d14	00 00					.byte	$00,$00
.1d16	20 dc 50	jsr $50dc		jsr	FloatCompare
.1d19	20 a6 50	jsr $50a6		jsr	CompareEqual
.1d1c	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1d1f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -6163
>1d22	13 18 00 00				.dword	$00001813
>1d26	00 80					.byte	$00,$80
.1d28	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -34256
>1d2b	d0 85 00 00				.dword	$000085d0
>1d2f	00 80					.byte	$00,$80
.1d31	20 b7 52	jsr $52b7		jsr	FloatMultiply
.1d34	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 211119728
>1d37	70 6e 95 0c				.dword	$0c956e70
>1d3b	00 00					.byte	$00,$00
.1d3d	20 dc 50	jsr $50dc		jsr	FloatCompare
.1d40	20 a6 50	jsr $50a6		jsr	CompareEqual
.1d43	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1d46	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -6163
>1d49	13 18 00 00				.dword	$00001813
>1d4d	00 80					.byte	$00,$80
.1d4f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -34256
>1d52	d0 85 00 00				.dword	$000085d0
>1d56	00 80					.byte	$00,$80
.1d58	20 40 51	jsr $5140		jsr	FloatDivide
.1d5b	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0.17991009
>1d5e	e2 2c 1d 5c				.dword	$5c1d2ce2
>1d62	df 00					.byte	$df,$00
.1d64	20 dc 50	jsr $50dc		jsr	FloatCompare
.1d67	20 a6 50	jsr $50a6		jsr	CompareEqual
.1d6a	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1d6d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -34256
>1d70	d0 85 00 00				.dword	$000085d0
>1d74	00 80					.byte	$00,$80
.1d76	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -34256
>1d79	d0 85 00 00				.dword	$000085d0
>1d7d	00 80					.byte	$00,$80
.1d7f	20 dc 50	jsr $50dc		jsr	FloatCompare
.1d82	20 a6 50	jsr $50a6		jsr	CompareEqual
.1d85	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>1d88	01 00 00 00				.dword	$00000001
>1d8c	00 80					.byte	$00,$80
.1d8e	20 dc 50	jsr $50dc		jsr	FloatCompare
.1d91	20 a6 50	jsr $50a6		jsr	CompareEqual
.1d94	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1d97	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -34256
>1d9a	d0 85 00 00				.dword	$000085d0
>1d9e	00 80					.byte	$00,$80
.1da0	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -34256
>1da3	d0 85 00 00				.dword	$000085d0
>1da7	00 80					.byte	$00,$80
.1da9	20 dc 50	jsr $50dc		jsr	FloatCompare
.1dac	20 b6 50	jsr $50b6		jsr	CompareNotEqual
.1daf	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>1db2	00 00 00 00				.dword	$00000000
>1db6	00 00					.byte	$00,$00
.1db8	20 dc 50	jsr $50dc		jsr	FloatCompare
.1dbb	20 a6 50	jsr $50a6		jsr	CompareEqual
.1dbe	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1dc1	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -34256
>1dc4	d0 85 00 00				.dword	$000085d0
>1dc8	00 80					.byte	$00,$80
.1dca	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -34256
>1dcd	d0 85 00 00				.dword	$000085d0
>1dd1	00 80					.byte	$00,$80
.1dd3	20 dc 50	jsr $50dc		jsr	FloatCompare
.1dd6	20 c4 50	jsr $50c4		jsr	CompareGreater
.1dd9	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>1ddc	00 00 00 00				.dword	$00000000
>1de0	00 00					.byte	$00,$00
.1de2	20 dc 50	jsr $50dc		jsr	FloatCompare
.1de5	20 a6 50	jsr $50a6		jsr	CompareEqual
.1de8	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1deb	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -34256
>1dee	d0 85 00 00				.dword	$000085d0
>1df2	00 80					.byte	$00,$80
.1df4	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -34256
>1df7	d0 85 00 00				.dword	$000085d0
>1dfb	00 80					.byte	$00,$80
.1dfd	20 dc 50	jsr $50dc		jsr	FloatCompare
.1e00	20 d4 50	jsr $50d4		jsr	CompareGreaterEqual
.1e03	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>1e06	01 00 00 00				.dword	$00000001
>1e0a	00 80					.byte	$00,$80
.1e0c	20 dc 50	jsr $50dc		jsr	FloatCompare
.1e0f	20 a6 50	jsr $50a6		jsr	CompareEqual
.1e12	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1e15	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -34256
>1e18	d0 85 00 00				.dword	$000085d0
>1e1c	00 80					.byte	$00,$80
.1e1e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -34256
>1e21	d0 85 00 00				.dword	$000085d0
>1e25	00 80					.byte	$00,$80
.1e27	20 dc 50	jsr $50dc		jsr	FloatCompare
.1e2a	20 bc 50	jsr $50bc		jsr	CompareLess
.1e2d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>1e30	00 00 00 00				.dword	$00000000
>1e34	00 00					.byte	$00,$00
.1e36	20 dc 50	jsr $50dc		jsr	FloatCompare
.1e39	20 a6 50	jsr $50a6		jsr	CompareEqual
.1e3c	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1e3f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -34256
>1e42	d0 85 00 00				.dword	$000085d0
>1e46	00 80					.byte	$00,$80
.1e48	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -34256
>1e4b	d0 85 00 00				.dword	$000085d0
>1e4f	00 80					.byte	$00,$80
.1e51	20 dc 50	jsr $50dc		jsr	FloatCompare
.1e54	20 cc 50	jsr $50cc		jsr	CompareLessEqual
.1e57	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>1e5a	01 00 00 00				.dword	$00000001
>1e5e	00 80					.byte	$00,$80
.1e60	20 dc 50	jsr $50dc		jsr	FloatCompare
.1e63	20 a6 50	jsr $50a6		jsr	CompareEqual
.1e66	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1e69	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -23.58921195
>1e6c	61 5a 5b 5e				.dword	$5e5b5a61
>1e70	e6 80					.byte	$e6,$80
.1e72	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 5.79355309
>1e75	ba 64 b2 5c				.dword	$5cb264ba
>1e79	e4 00					.byte	$e4,$00
.1e7b	20 1b 50	jsr $501b		jsr	FloatAdd
.1e7e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -17.79565886
>1e81	32 c1 2e 47				.dword	$472ec132
>1e85	e6 80					.byte	$e6,$80
.1e87	20 dc 50	jsr $50dc		jsr	FloatCompare
.1e8a	20 a6 50	jsr $50a6		jsr	CompareEqual
.1e8d	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1e90	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -23.58921195
>1e93	61 5a 5b 5e				.dword	$5e5b5a61
>1e97	e6 80					.byte	$e6,$80
.1e99	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 5.79355309
>1e9c	ba 64 b2 5c				.dword	$5cb264ba
>1ea0	e4 00					.byte	$e4,$00
.1ea2	20 15 50	jsr $5015		jsr	FloatSubtract
.1ea5	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -29.38276504
>1ea8	8f f3 87 75				.dword	$7587f38f
>1eac	e6 80					.byte	$e6,$80
.1eae	20 dc 50	jsr $50dc		jsr	FloatCompare
.1eb1	20 a6 50	jsr $50a6		jsr	CompareEqual
.1eb4	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1eb7	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -23.58921195
>1eba	61 5a 5b 5e				.dword	$5e5b5a61
>1ebe	e6 80					.byte	$e6,$80
.1ec0	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 5.79355309
>1ec3	ba 64 b2 5c				.dword	$5cb264ba
>1ec7	e4 00					.byte	$e4,$00
.1ec9	20 b7 52	jsr $52b7		jsr	FloatMultiply
.1ecc	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -136.6653518
>1ecf	3f 2a 55 44				.dword	$44552a3f
>1ed3	e9 80					.byte	$e9,$80
.1ed5	20 dc 50	jsr $50dc		jsr	FloatCompare
.1ed8	20 a6 50	jsr $50a6		jsr	CompareEqual
.1edb	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1ede	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -23.58921195
>1ee1	61 5a 5b 5e				.dword	$5e5b5a61
>1ee5	e6 80					.byte	$e6,$80
.1ee7	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 5.79355309
>1eea	ba 64 b2 5c				.dword	$5cb264ba
>1eee	e4 00					.byte	$e4,$00
.1ef0	20 40 51	jsr $5140		jsr	FloatDivide
.1ef3	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -4.07163128
>1ef6	d7 66 25 41				.dword	$412566d7
>1efa	e4 80					.byte	$e4,$80
.1efc	20 dc 50	jsr $50dc		jsr	FloatCompare
.1eff	20 a6 50	jsr $50a6		jsr	CompareEqual
.1f02	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1f05	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -77.44099781
>1f08	3c e5 70 4d				.dword	$4d70e53c
>1f0c	e8 80					.byte	$e8,$80
.1f0e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -77.44099781
>1f11	3c e5 70 4d				.dword	$4d70e53c
>1f15	e8 80					.byte	$e8,$80
.1f17	20 dc 50	jsr $50dc		jsr	FloatCompare
.1f1a	20 c4 50	jsr $50c4		jsr	CompareGreater
.1f1d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>1f20	00 00 00 00				.dword	$00000000
>1f24	00 00					.byte	$00,$00
.1f26	20 dc 50	jsr $50dc		jsr	FloatCompare
.1f29	20 a6 50	jsr $50a6		jsr	CompareEqual
.1f2c	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1f2f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -77.44099781
>1f32	3c e5 70 4d				.dword	$4d70e53c
>1f36	e8 80					.byte	$e8,$80
.1f38	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -77.44099781
>1f3b	3c e5 70 4d				.dword	$4d70e53c
>1f3f	e8 80					.byte	$e8,$80
.1f41	20 dc 50	jsr $50dc		jsr	FloatCompare
.1f44	20 d4 50	jsr $50d4		jsr	CompareGreaterEqual
.1f47	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>1f4a	01 00 00 00				.dword	$00000001
>1f4e	00 80					.byte	$00,$80
.1f50	20 dc 50	jsr $50dc		jsr	FloatCompare
.1f53	20 a6 50	jsr $50a6		jsr	CompareEqual
.1f56	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1f59	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -77.44099781
>1f5c	3c e5 70 4d				.dword	$4d70e53c
>1f60	e8 80					.byte	$e8,$80
.1f62	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -77.44099781
>1f65	3c e5 70 4d				.dword	$4d70e53c
>1f69	e8 80					.byte	$e8,$80
.1f6b	20 dc 50	jsr $50dc		jsr	FloatCompare
.1f6e	20 bc 50	jsr $50bc		jsr	CompareLess
.1f71	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>1f74	00 00 00 00				.dword	$00000000
>1f78	00 00					.byte	$00,$00
.1f7a	20 dc 50	jsr $50dc		jsr	FloatCompare
.1f7d	20 a6 50	jsr $50a6		jsr	CompareEqual
.1f80	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1f83	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -77.44099781
>1f86	3c e5 70 4d				.dword	$4d70e53c
>1f8a	e8 80					.byte	$e8,$80
.1f8c	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -77.44099781
>1f8f	3c e5 70 4d				.dword	$4d70e53c
>1f93	e8 80					.byte	$e8,$80
.1f95	20 dc 50	jsr $50dc		jsr	FloatCompare
.1f98	20 cc 50	jsr $50cc		jsr	CompareLessEqual
.1f9b	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>1f9e	01 00 00 00				.dword	$00000001
>1fa2	00 80					.byte	$00,$80
.1fa4	20 dc 50	jsr $50dc		jsr	FloatCompare
.1fa7	20 a6 50	jsr $50a6		jsr	CompareEqual
.1faa	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1fad	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -77.44099781
>1fb0	3c e5 70 4d				.dword	$4d70e53c
>1fb4	e8 80					.byte	$e8,$80
.1fb6	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -77.44099781
>1fb9	3c e5 70 4d				.dword	$4d70e53c
>1fbd	e8 80					.byte	$e8,$80
.1fbf	20 dc 50	jsr $50dc		jsr	FloatCompare
.1fc2	20 a6 50	jsr $50a6		jsr	CompareEqual
.1fc5	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>1fc8	01 00 00 00				.dword	$00000001
>1fcc	00 80					.byte	$00,$80
.1fce	20 dc 50	jsr $50dc		jsr	FloatCompare
.1fd1	20 a6 50	jsr $50a6		jsr	CompareEqual
.1fd4	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.1fd7	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -77.44099781
>1fda	3c e5 70 4d				.dword	$4d70e53c
>1fde	e8 80					.byte	$e8,$80
.1fe0	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -77.44099781
>1fe3	3c e5 70 4d				.dword	$4d70e53c
>1fe7	e8 80					.byte	$e8,$80
.1fe9	20 dc 50	jsr $50dc		jsr	FloatCompare
.1fec	20 b6 50	jsr $50b6		jsr	CompareNotEqual
.1fef	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>1ff2	00 00 00 00				.dword	$00000000
>1ff6	00 00					.byte	$00,$00
.1ff8	20 dc 50	jsr $50dc		jsr	FloatCompare
.1ffb	20 a6 50	jsr $50a6		jsr	CompareEqual
.1ffe	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2001	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 31166
>2004	be 79 00 00				.dword	$000079be
>2008	00 00					.byte	$00,$00
.200a	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -30498
>200d	22 77 00 00				.dword	$00007722
>2011	00 80					.byte	$00,$80
.2013	20 1b 50	jsr $501b		jsr	FloatAdd
.2016	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 668
>2019	9c 02 00 00				.dword	$0000029c
>201d	00 00					.byte	$00,$00
.201f	20 dc 50	jsr $50dc		jsr	FloatCompare
.2022	20 a6 50	jsr $50a6		jsr	CompareEqual
.2025	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2028	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 31166
>202b	be 79 00 00				.dword	$000079be
>202f	00 00					.byte	$00,$00
.2031	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -30498
>2034	22 77 00 00				.dword	$00007722
>2038	00 80					.byte	$00,$80
.203a	20 15 50	jsr $5015		jsr	FloatSubtract
.203d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 61664
>2040	e0 f0 00 00				.dword	$0000f0e0
>2044	00 00					.byte	$00,$00
.2046	20 dc 50	jsr $50dc		jsr	FloatCompare
.2049	20 a6 50	jsr $50a6		jsr	CompareEqual
.204c	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.204f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 31166
>2052	be 79 00 00				.dword	$000079be
>2056	00 00					.byte	$00,$00
.2058	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -30498
>205b	22 77 00 00				.dword	$00007722
>205f	00 80					.byte	$00,$80
.2061	20 b7 52	jsr $52b7		jsr	FloatMultiply
.2064	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -950500668
>2067	3c 7d a7 38				.dword	$38a77d3c
>206b	00 80					.byte	$00,$80
.206d	20 dc 50	jsr $50dc		jsr	FloatCompare
.2070	20 a6 50	jsr $50a6		jsr	CompareEqual
.2073	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2076	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 31166
>2079	be 79 00 00				.dword	$000079be
>207d	00 00					.byte	$00,$00
.207f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -30498
>2082	22 77 00 00				.dword	$00007722
>2086	00 80					.byte	$00,$80
.2088	20 40 51	jsr $5140		jsr	FloatDivide
.208b	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1.02190308
>208e	2d dc 66 41				.dword	$4166dc2d
>2092	e2 80					.byte	$e2,$80
.2094	20 dc 50	jsr $50dc		jsr	FloatCompare
.2097	20 a6 50	jsr $50a6		jsr	CompareEqual
.209a	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.209d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 31166
>20a0	be 79 00 00				.dword	$000079be
>20a4	00 00					.byte	$00,$00
.20a6	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -30498
>20a9	22 77 00 00				.dword	$00007722
>20ad	00 80					.byte	$00,$80
.20af	20 dc 50	jsr $50dc		jsr	FloatCompare
.20b2	20 a6 50	jsr $50a6		jsr	CompareEqual
.20b5	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>20b8	00 00 00 00				.dword	$00000000
>20bc	00 00					.byte	$00,$00
.20be	20 dc 50	jsr $50dc		jsr	FloatCompare
.20c1	20 a6 50	jsr $50a6		jsr	CompareEqual
.20c4	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.20c7	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 31166
>20ca	be 79 00 00				.dword	$000079be
>20ce	00 00					.byte	$00,$00
.20d0	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -30498
>20d3	22 77 00 00				.dword	$00007722
>20d7	00 80					.byte	$00,$80
.20d9	20 dc 50	jsr $50dc		jsr	FloatCompare
.20dc	20 b6 50	jsr $50b6		jsr	CompareNotEqual
.20df	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>20e2	01 00 00 00				.dword	$00000001
>20e6	00 80					.byte	$00,$80
.20e8	20 dc 50	jsr $50dc		jsr	FloatCompare
.20eb	20 a6 50	jsr $50a6		jsr	CompareEqual
.20ee	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.20f1	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 31166
>20f4	be 79 00 00				.dword	$000079be
>20f8	00 00					.byte	$00,$00
.20fa	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -30498
>20fd	22 77 00 00				.dword	$00007722
>2101	00 80					.byte	$00,$80
.2103	20 dc 50	jsr $50dc		jsr	FloatCompare
.2106	20 c4 50	jsr $50c4		jsr	CompareGreater
.2109	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>210c	01 00 00 00				.dword	$00000001
>2110	00 80					.byte	$00,$80
.2112	20 dc 50	jsr $50dc		jsr	FloatCompare
.2115	20 a6 50	jsr $50a6		jsr	CompareEqual
.2118	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.211b	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 31166
>211e	be 79 00 00				.dword	$000079be
>2122	00 00					.byte	$00,$00
.2124	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -30498
>2127	22 77 00 00				.dword	$00007722
>212b	00 80					.byte	$00,$80
.212d	20 dc 50	jsr $50dc		jsr	FloatCompare
.2130	20 d4 50	jsr $50d4		jsr	CompareGreaterEqual
.2133	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>2136	01 00 00 00				.dword	$00000001
>213a	00 80					.byte	$00,$80
.213c	20 dc 50	jsr $50dc		jsr	FloatCompare
.213f	20 a6 50	jsr $50a6		jsr	CompareEqual
.2142	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2145	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 31166
>2148	be 79 00 00				.dword	$000079be
>214c	00 00					.byte	$00,$00
.214e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -30498
>2151	22 77 00 00				.dword	$00007722
>2155	00 80					.byte	$00,$80
.2157	20 dc 50	jsr $50dc		jsr	FloatCompare
.215a	20 bc 50	jsr $50bc		jsr	CompareLess
.215d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>2160	00 00 00 00				.dword	$00000000
>2164	00 00					.byte	$00,$00
.2166	20 dc 50	jsr $50dc		jsr	FloatCompare
.2169	20 a6 50	jsr $50a6		jsr	CompareEqual
.216c	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.216f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 31166
>2172	be 79 00 00				.dword	$000079be
>2176	00 00					.byte	$00,$00
.2178	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -30498
>217b	22 77 00 00				.dword	$00007722
>217f	00 80					.byte	$00,$80
.2181	20 dc 50	jsr $50dc		jsr	FloatCompare
.2184	20 cc 50	jsr $50cc		jsr	CompareLessEqual
.2187	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>218a	00 00 00 00				.dword	$00000000
>218e	00 00					.byte	$00,$00
.2190	20 dc 50	jsr $50dc		jsr	FloatCompare
.2193	20 a6 50	jsr $50a6		jsr	CompareEqual
.2196	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2199	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -35.02202964
>219c	78 47 0b 46				.dword	$460b4778
>21a0	e7 80					.byte	$e7,$80
.21a2	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 62.50457601
>21a5	c9 57 02 7d				.dword	$7d0257c9
>21a9	e7 00					.byte	$e7,$00
.21ab	20 1b 50	jsr $501b		jsr	FloatAdd
.21ae	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 27.48254637
>21b1	a3 20 ee 6d				.dword	$6dee20a3
>21b5	e6 00					.byte	$e6,$00
.21b7	20 dc 50	jsr $50dc		jsr	FloatCompare
.21ba	20 a6 50	jsr $50a6		jsr	CompareEqual
.21bd	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.21c0	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -35.02202964
>21c3	78 47 0b 46				.dword	$460b4778
>21c7	e7 80					.byte	$e7,$80
.21c9	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 62.50457601
>21cc	c9 57 02 7d				.dword	$7d0257c9
>21d0	e7 00					.byte	$e7,$00
.21d2	20 15 50	jsr $5015		jsr	FloatSubtract
.21d5	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -97.52660565
>21d8	a1 cf 86 61				.dword	$6186cfa1
>21dc	e8 80					.byte	$e8,$80
.21de	20 dc 50	jsr $50dc		jsr	FloatCompare
.21e1	20 a6 50	jsr $50a6		jsr	CompareEqual
.21e4	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.21e7	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -35.02202964
>21ea	78 47 0b 46				.dword	$460b4778
>21ee	e7 80					.byte	$e7,$80
.21f0	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 62.50457601
>21f3	c9 57 02 7d				.dword	$7d0257c9
>21f7	e7 00					.byte	$e7,$00
.21f9	20 b7 52	jsr $52b7		jsr	FloatMultiply
.21fc	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -2189.03711385
>21ff	02 4c 68 44				.dword	$44684c02
>2203	ed 80					.byte	$ed,$80
.2205	20 dc 50	jsr $50dc		jsr	FloatCompare
.2208	20 a6 50	jsr $50a6		jsr	CompareEqual
.220b	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.220e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -35.02202964
>2211	78 47 0b 46				.dword	$460b4778
>2215	e7 80					.byte	$e7,$80
.2217	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 62.50457601
>221a	c9 57 02 7d				.dword	$7d0257c9
>221e	e7 00					.byte	$e7,$00
.2220	20 40 51	jsr $5140		jsr	FloatDivide
.2223	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -0.56031145
>2226	1d 49 b8 47				.dword	$47b8491d
>222a	e1 80					.byte	$e1,$80
.222c	20 dc 50	jsr $50dc		jsr	FloatCompare
.222f	20 a6 50	jsr $50a6		jsr	CompareEqual
.2232	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2235	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -17.1906536
>2238	b3 3a c3 44				.dword	$44c33ab3
>223c	e6 80					.byte	$e6,$80
.223e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -17.1906536
>2241	b3 3a c3 44				.dword	$44c33ab3
>2245	e6 80					.byte	$e6,$80
.2247	20 dc 50	jsr $50dc		jsr	FloatCompare
.224a	20 c4 50	jsr $50c4		jsr	CompareGreater
.224d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>2250	00 00 00 00				.dword	$00000000
>2254	00 00					.byte	$00,$00
.2256	20 dc 50	jsr $50dc		jsr	FloatCompare
.2259	20 a6 50	jsr $50a6		jsr	CompareEqual
.225c	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.225f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -17.1906536
>2262	b3 3a c3 44				.dword	$44c33ab3
>2266	e6 80					.byte	$e6,$80
.2268	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -17.1906536
>226b	b3 3a c3 44				.dword	$44c33ab3
>226f	e6 80					.byte	$e6,$80
.2271	20 dc 50	jsr $50dc		jsr	FloatCompare
.2274	20 d4 50	jsr $50d4		jsr	CompareGreaterEqual
.2277	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>227a	01 00 00 00				.dword	$00000001
>227e	00 80					.byte	$00,$80
.2280	20 dc 50	jsr $50dc		jsr	FloatCompare
.2283	20 a6 50	jsr $50a6		jsr	CompareEqual
.2286	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2289	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -17.1906536
>228c	b3 3a c3 44				.dword	$44c33ab3
>2290	e6 80					.byte	$e6,$80
.2292	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -17.1906536
>2295	b3 3a c3 44				.dword	$44c33ab3
>2299	e6 80					.byte	$e6,$80
.229b	20 dc 50	jsr $50dc		jsr	FloatCompare
.229e	20 bc 50	jsr $50bc		jsr	CompareLess
.22a1	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>22a4	00 00 00 00				.dword	$00000000
>22a8	00 00					.byte	$00,$00
.22aa	20 dc 50	jsr $50dc		jsr	FloatCompare
.22ad	20 a6 50	jsr $50a6		jsr	CompareEqual
.22b0	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.22b3	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -17.1906536
>22b6	b3 3a c3 44				.dword	$44c33ab3
>22ba	e6 80					.byte	$e6,$80
.22bc	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -17.1906536
>22bf	b3 3a c3 44				.dword	$44c33ab3
>22c3	e6 80					.byte	$e6,$80
.22c5	20 dc 50	jsr $50dc		jsr	FloatCompare
.22c8	20 cc 50	jsr $50cc		jsr	CompareLessEqual
.22cb	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>22ce	01 00 00 00				.dword	$00000001
>22d2	00 80					.byte	$00,$80
.22d4	20 dc 50	jsr $50dc		jsr	FloatCompare
.22d7	20 a6 50	jsr $50a6		jsr	CompareEqual
.22da	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.22dd	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -17.1906536
>22e0	b3 3a c3 44				.dword	$44c33ab3
>22e4	e6 80					.byte	$e6,$80
.22e6	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -17.1906536
>22e9	b3 3a c3 44				.dword	$44c33ab3
>22ed	e6 80					.byte	$e6,$80
.22ef	20 dc 50	jsr $50dc		jsr	FloatCompare
.22f2	20 a6 50	jsr $50a6		jsr	CompareEqual
.22f5	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>22f8	01 00 00 00				.dword	$00000001
>22fc	00 80					.byte	$00,$80
.22fe	20 dc 50	jsr $50dc		jsr	FloatCompare
.2301	20 a6 50	jsr $50a6		jsr	CompareEqual
.2304	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2307	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -17.1906536
>230a	b3 3a c3 44				.dword	$44c33ab3
>230e	e6 80					.byte	$e6,$80
.2310	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -17.1906536
>2313	b3 3a c3 44				.dword	$44c33ab3
>2317	e6 80					.byte	$e6,$80
.2319	20 dc 50	jsr $50dc		jsr	FloatCompare
.231c	20 b6 50	jsr $50b6		jsr	CompareNotEqual
.231f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>2322	00 00 00 00				.dword	$00000000
>2326	00 00					.byte	$00,$00
.2328	20 dc 50	jsr $50dc		jsr	FloatCompare
.232b	20 a6 50	jsr $50a6		jsr	CompareEqual
.232e	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2331	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 17060
>2334	a4 42 00 00				.dword	$000042a4
>2338	00 00					.byte	$00,$00
.233a	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 41276
>233d	3c a1 00 00				.dword	$0000a13c
>2341	00 00					.byte	$00,$00
.2343	20 1b 50	jsr $501b		jsr	FloatAdd
.2346	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 58336
>2349	e0 e3 00 00				.dword	$0000e3e0
>234d	00 00					.byte	$00,$00
.234f	20 dc 50	jsr $50dc		jsr	FloatCompare
.2352	20 a6 50	jsr $50a6		jsr	CompareEqual
.2355	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2358	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 17060
>235b	a4 42 00 00				.dword	$000042a4
>235f	00 00					.byte	$00,$00
.2361	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 41276
>2364	3c a1 00 00				.dword	$0000a13c
>2368	00 00					.byte	$00,$00
.236a	20 15 50	jsr $5015		jsr	FloatSubtract
.236d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -24216
>2370	98 5e 00 00				.dword	$00005e98
>2374	00 80					.byte	$00,$80
.2376	20 dc 50	jsr $50dc		jsr	FloatCompare
.2379	20 a6 50	jsr $50a6		jsr	CompareEqual
.237c	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.237f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 17060
>2382	a4 42 00 00				.dword	$000042a4
>2386	00 00					.byte	$00,$00
.2388	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 41276
>238b	3c a1 00 00				.dword	$0000a13c
>238f	00 00					.byte	$00,$00
.2391	20 b7 52	jsr $52b7		jsr	FloatMultiply
.2394	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 704168560
>2397	70 c2 f8 29				.dword	$29f8c270
>239b	00 00					.byte	$00,$00
.239d	20 dc 50	jsr $50dc		jsr	FloatCompare
.23a0	20 a6 50	jsr $50a6		jsr	CompareEqual
.23a3	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.23a6	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 17060
>23a9	a4 42 00 00				.dword	$000042a4
>23ad	00 00					.byte	$00,$00
.23af	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 41276
>23b2	3c a1 00 00				.dword	$0000a13c
>23b6	00 00					.byte	$00,$00
.23b8	20 40 51	jsr $5140		jsr	FloatDivide
.23bb	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0.41331524
>23be	0f 07 cf 69				.dword	$69cf070f
>23c2	e0 00					.byte	$e0,$00
.23c4	20 dc 50	jsr $50dc		jsr	FloatCompare
.23c7	20 a6 50	jsr $50a6		jsr	CompareEqual
.23ca	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.23cd	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 41276
>23d0	3c a1 00 00				.dword	$0000a13c
>23d4	00 00					.byte	$00,$00
.23d6	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 41276
>23d9	3c a1 00 00				.dword	$0000a13c
>23dd	00 00					.byte	$00,$00
.23df	20 dc 50	jsr $50dc		jsr	FloatCompare
.23e2	20 a6 50	jsr $50a6		jsr	CompareEqual
.23e5	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>23e8	01 00 00 00				.dword	$00000001
>23ec	00 80					.byte	$00,$80
.23ee	20 dc 50	jsr $50dc		jsr	FloatCompare
.23f1	20 a6 50	jsr $50a6		jsr	CompareEqual
.23f4	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.23f7	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 41276
>23fa	3c a1 00 00				.dword	$0000a13c
>23fe	00 00					.byte	$00,$00
.2400	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 41276
>2403	3c a1 00 00				.dword	$0000a13c
>2407	00 00					.byte	$00,$00
.2409	20 dc 50	jsr $50dc		jsr	FloatCompare
.240c	20 b6 50	jsr $50b6		jsr	CompareNotEqual
.240f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>2412	00 00 00 00				.dword	$00000000
>2416	00 00					.byte	$00,$00
.2418	20 dc 50	jsr $50dc		jsr	FloatCompare
.241b	20 a6 50	jsr $50a6		jsr	CompareEqual
.241e	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2421	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 41276
>2424	3c a1 00 00				.dword	$0000a13c
>2428	00 00					.byte	$00,$00
.242a	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 41276
>242d	3c a1 00 00				.dword	$0000a13c
>2431	00 00					.byte	$00,$00
.2433	20 dc 50	jsr $50dc		jsr	FloatCompare
.2436	20 c4 50	jsr $50c4		jsr	CompareGreater
.2439	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>243c	00 00 00 00				.dword	$00000000
>2440	00 00					.byte	$00,$00
.2442	20 dc 50	jsr $50dc		jsr	FloatCompare
.2445	20 a6 50	jsr $50a6		jsr	CompareEqual
.2448	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.244b	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 41276
>244e	3c a1 00 00				.dword	$0000a13c
>2452	00 00					.byte	$00,$00
.2454	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 41276
>2457	3c a1 00 00				.dword	$0000a13c
>245b	00 00					.byte	$00,$00
.245d	20 dc 50	jsr $50dc		jsr	FloatCompare
.2460	20 d4 50	jsr $50d4		jsr	CompareGreaterEqual
.2463	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>2466	01 00 00 00				.dword	$00000001
>246a	00 80					.byte	$00,$80
.246c	20 dc 50	jsr $50dc		jsr	FloatCompare
.246f	20 a6 50	jsr $50a6		jsr	CompareEqual
.2472	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2475	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 41276
>2478	3c a1 00 00				.dword	$0000a13c
>247c	00 00					.byte	$00,$00
.247e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 41276
>2481	3c a1 00 00				.dword	$0000a13c
>2485	00 00					.byte	$00,$00
.2487	20 dc 50	jsr $50dc		jsr	FloatCompare
.248a	20 bc 50	jsr $50bc		jsr	CompareLess
.248d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>2490	00 00 00 00				.dword	$00000000
>2494	00 00					.byte	$00,$00
.2496	20 dc 50	jsr $50dc		jsr	FloatCompare
.2499	20 a6 50	jsr $50a6		jsr	CompareEqual
.249c	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.249f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 41276
>24a2	3c a1 00 00				.dword	$0000a13c
>24a6	00 00					.byte	$00,$00
.24a8	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 41276
>24ab	3c a1 00 00				.dword	$0000a13c
>24af	00 00					.byte	$00,$00
.24b1	20 dc 50	jsr $50dc		jsr	FloatCompare
.24b4	20 cc 50	jsr $50cc		jsr	CompareLessEqual
.24b7	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>24ba	01 00 00 00				.dword	$00000001
>24be	00 80					.byte	$00,$80
.24c0	20 dc 50	jsr $50dc		jsr	FloatCompare
.24c3	20 a6 50	jsr $50a6		jsr	CompareEqual
.24c6	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.24c9	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -74.25560865
>24cc	92 6f 41 4a				.dword	$4a416f92
>24d0	e8 80					.byte	$e8,$80
.24d2	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 64.36438001
>24d5	02 48 5d 40				.dword	$405d4802
>24d9	e8 00					.byte	$e8,$00
.24db	20 1b 50	jsr $501b		jsr	FloatAdd
.24de	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -9.89122864
>24e1	7b 3c 21 4f				.dword	$4f213c7b
>24e5	e5 80					.byte	$e5,$80
.24e7	20 dc 50	jsr $50dc		jsr	FloatCompare
.24ea	20 a6 50	jsr $50a6		jsr	CompareEqual
.24ed	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.24f0	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -74.25560865
>24f3	92 6f 41 4a				.dword	$4a416f92
>24f7	e8 80					.byte	$e8,$80
.24f9	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 64.36438001
>24fc	02 48 5d 40				.dword	$405d4802
>2500	e8 00					.byte	$e8,$00
.2502	20 15 50	jsr $5015		jsr	FloatSubtract
.2505	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -138.61998866
>2508	ca 5b 4f 45				.dword	$454f5bca
>250c	e9 80					.byte	$e9,$80
.250e	20 dc 50	jsr $50dc		jsr	FloatCompare
.2511	20 a6 50	jsr $50a6		jsr	CompareEqual
.2514	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2517	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -74.25560865
>251a	92 6f 41 4a				.dword	$4a416f92
>251e	e8 80					.byte	$e8,$80
.2520	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 64.36438001
>2523	02 48 5d 40				.dword	$405d4802
>2527	e8 00					.byte	$e8,$00
.2529	20 b7 52	jsr $52b7		jsr	FloatMultiply
.252c	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -4779.41621311
>252f	34 aa ad 4a				.dword	$4aadaa34
>2533	ee 80					.byte	$ee,$80
.2535	20 dc 50	jsr $50dc		jsr	FloatCompare
.2538	20 a6 50	jsr $50a6		jsr	CompareEqual
.253b	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.253e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -74.25560865
>2541	92 6f 41 4a				.dword	$4a416f92
>2545	e8 80					.byte	$e8,$80
.2547	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 64.36438001
>254a	02 48 5d 40				.dword	$405d4802
>254e	e8 00					.byte	$e8,$00
.2550	20 40 51	jsr $5140		jsr	FloatDivide
.2553	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1.15367551
>2556	ce d1 d5 49				.dword	$49d5d1ce
>255a	e2 80					.byte	$e2,$80
.255c	20 dc 50	jsr $50dc		jsr	FloatCompare
.255f	20 a6 50	jsr $50a6		jsr	CompareEqual
.2562	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2565	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 53.10180611
>2568	ee 1f 34 6a				.dword	$6a341fee
>256c	e7 00					.byte	$e7,$00
.256e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 23.44836802
>2571	fc 20 cb 5d				.dword	$5dcb20fc
>2575	e6 00					.byte	$e6,$00
.2577	20 dc 50	jsr $50dc		jsr	FloatCompare
.257a	20 c4 50	jsr $50c4		jsr	CompareGreater
.257d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>2580	01 00 00 00				.dword	$00000001
>2584	00 80					.byte	$00,$80
.2586	20 dc 50	jsr $50dc		jsr	FloatCompare
.2589	20 a6 50	jsr $50a6		jsr	CompareEqual
.258c	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.258f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 53.10180611
>2592	ee 1f 34 6a				.dword	$6a341fee
>2596	e7 00					.byte	$e7,$00
.2598	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 23.44836802
>259b	fc 20 cb 5d				.dword	$5dcb20fc
>259f	e6 00					.byte	$e6,$00
.25a1	20 dc 50	jsr $50dc		jsr	FloatCompare
.25a4	20 d4 50	jsr $50d4		jsr	CompareGreaterEqual
.25a7	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>25aa	01 00 00 00				.dword	$00000001
>25ae	00 80					.byte	$00,$80
.25b0	20 dc 50	jsr $50dc		jsr	FloatCompare
.25b3	20 a6 50	jsr $50a6		jsr	CompareEqual
.25b6	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.25b9	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 53.10180611
>25bc	ee 1f 34 6a				.dword	$6a341fee
>25c0	e7 00					.byte	$e7,$00
.25c2	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 23.44836802
>25c5	fc 20 cb 5d				.dword	$5dcb20fc
>25c9	e6 00					.byte	$e6,$00
.25cb	20 dc 50	jsr $50dc		jsr	FloatCompare
.25ce	20 bc 50	jsr $50bc		jsr	CompareLess
.25d1	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>25d4	00 00 00 00				.dword	$00000000
>25d8	00 00					.byte	$00,$00
.25da	20 dc 50	jsr $50dc		jsr	FloatCompare
.25dd	20 a6 50	jsr $50a6		jsr	CompareEqual
.25e0	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.25e3	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 53.10180611
>25e6	ee 1f 34 6a				.dword	$6a341fee
>25ea	e7 00					.byte	$e7,$00
.25ec	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 23.44836802
>25ef	fc 20 cb 5d				.dword	$5dcb20fc
>25f3	e6 00					.byte	$e6,$00
.25f5	20 dc 50	jsr $50dc		jsr	FloatCompare
.25f8	20 cc 50	jsr $50cc		jsr	CompareLessEqual
.25fb	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>25fe	00 00 00 00				.dword	$00000000
>2602	00 00					.byte	$00,$00
.2604	20 dc 50	jsr $50dc		jsr	FloatCompare
.2607	20 a6 50	jsr $50a6		jsr	CompareEqual
.260a	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.260d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 53.10180611
>2610	ee 1f 34 6a				.dword	$6a341fee
>2614	e7 00					.byte	$e7,$00
.2616	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 23.44836802
>2619	fc 20 cb 5d				.dword	$5dcb20fc
>261d	e6 00					.byte	$e6,$00
.261f	20 dc 50	jsr $50dc		jsr	FloatCompare
.2622	20 a6 50	jsr $50a6		jsr	CompareEqual
.2625	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>2628	00 00 00 00				.dword	$00000000
>262c	00 00					.byte	$00,$00
.262e	20 dc 50	jsr $50dc		jsr	FloatCompare
.2631	20 a6 50	jsr $50a6		jsr	CompareEqual
.2634	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2637	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 53.10180611
>263a	ee 1f 34 6a				.dword	$6a341fee
>263e	e7 00					.byte	$e7,$00
.2640	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 23.44836802
>2643	fc 20 cb 5d				.dword	$5dcb20fc
>2647	e6 00					.byte	$e6,$00
.2649	20 dc 50	jsr $50dc		jsr	FloatCompare
.264c	20 b6 50	jsr $50b6		jsr	CompareNotEqual
.264f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>2652	01 00 00 00				.dword	$00000001
>2656	00 80					.byte	$00,$80
.2658	20 dc 50	jsr $50dc		jsr	FloatCompare
.265b	20 a6 50	jsr $50a6		jsr	CompareEqual
.265e	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2661	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 6325
>2664	b5 18 00 00				.dword	$000018b5
>2668	00 00					.byte	$00,$00
.266a	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -37993
>266d	69 94 00 00				.dword	$00009469
>2671	00 80					.byte	$00,$80
.2673	20 1b 50	jsr $501b		jsr	FloatAdd
.2676	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -31668
>2679	b4 7b 00 00				.dword	$00007bb4
>267d	00 80					.byte	$00,$80
.267f	20 dc 50	jsr $50dc		jsr	FloatCompare
.2682	20 a6 50	jsr $50a6		jsr	CompareEqual
.2685	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2688	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 6325
>268b	b5 18 00 00				.dword	$000018b5
>268f	00 00					.byte	$00,$00
.2691	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -37993
>2694	69 94 00 00				.dword	$00009469
>2698	00 80					.byte	$00,$80
.269a	20 15 50	jsr $5015		jsr	FloatSubtract
.269d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 44318
>26a0	1e ad 00 00				.dword	$0000ad1e
>26a4	00 00					.byte	$00,$00
.26a6	20 dc 50	jsr $50dc		jsr	FloatCompare
.26a9	20 a6 50	jsr $50a6		jsr	CompareEqual
.26ac	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.26af	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 6325
>26b2	b5 18 00 00				.dword	$000018b5
>26b6	00 00					.byte	$00,$00
.26b8	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -37993
>26bb	69 94 00 00				.dword	$00009469
>26bf	00 80					.byte	$00,$80
.26c1	20 b7 52	jsr $52b7		jsr	FloatMultiply
.26c4	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -240305725
>26c7	3d c6 52 0e				.dword	$0e52c63d
>26cb	00 80					.byte	$00,$80
.26cd	20 dc 50	jsr $50dc		jsr	FloatCompare
.26d0	20 a6 50	jsr $50a6		jsr	CompareEqual
.26d3	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.26d6	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 6325
>26d9	b5 18 00 00				.dword	$000018b5
>26dd	00 00					.byte	$00,$00
.26df	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -37993
>26e2	69 94 00 00				.dword	$00009469
>26e6	00 80					.byte	$00,$80
.26e8	20 40 51	jsr $5140		jsr	FloatDivide
.26eb	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -0.16647804
>26ee	13 9c 3c 55				.dword	$553c9c13
>26f2	df 80					.byte	$df,$80
.26f4	20 dc 50	jsr $50dc		jsr	FloatCompare
.26f7	20 a6 50	jsr $50a6		jsr	CompareEqual
.26fa	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.26fd	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 6325
>2700	b5 18 00 00				.dword	$000018b5
>2704	00 00					.byte	$00,$00
.2706	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -37993
>2709	69 94 00 00				.dword	$00009469
>270d	00 80					.byte	$00,$80
.270f	20 dc 50	jsr $50dc		jsr	FloatCompare
.2712	20 a6 50	jsr $50a6		jsr	CompareEqual
.2715	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>2718	00 00 00 00				.dword	$00000000
>271c	00 00					.byte	$00,$00
.271e	20 dc 50	jsr $50dc		jsr	FloatCompare
.2721	20 a6 50	jsr $50a6		jsr	CompareEqual
.2724	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2727	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 6325
>272a	b5 18 00 00				.dword	$000018b5
>272e	00 00					.byte	$00,$00
.2730	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -37993
>2733	69 94 00 00				.dword	$00009469
>2737	00 80					.byte	$00,$80
.2739	20 dc 50	jsr $50dc		jsr	FloatCompare
.273c	20 b6 50	jsr $50b6		jsr	CompareNotEqual
.273f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>2742	01 00 00 00				.dword	$00000001
>2746	00 80					.byte	$00,$80
.2748	20 dc 50	jsr $50dc		jsr	FloatCompare
.274b	20 a6 50	jsr $50a6		jsr	CompareEqual
.274e	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2751	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 6325
>2754	b5 18 00 00				.dword	$000018b5
>2758	00 00					.byte	$00,$00
.275a	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -37993
>275d	69 94 00 00				.dword	$00009469
>2761	00 80					.byte	$00,$80
.2763	20 dc 50	jsr $50dc		jsr	FloatCompare
.2766	20 c4 50	jsr $50c4		jsr	CompareGreater
.2769	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>276c	01 00 00 00				.dword	$00000001
>2770	00 80					.byte	$00,$80
.2772	20 dc 50	jsr $50dc		jsr	FloatCompare
.2775	20 a6 50	jsr $50a6		jsr	CompareEqual
.2778	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.277b	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 6325
>277e	b5 18 00 00				.dword	$000018b5
>2782	00 00					.byte	$00,$00
.2784	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -37993
>2787	69 94 00 00				.dword	$00009469
>278b	00 80					.byte	$00,$80
.278d	20 dc 50	jsr $50dc		jsr	FloatCompare
.2790	20 d4 50	jsr $50d4		jsr	CompareGreaterEqual
.2793	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>2796	01 00 00 00				.dword	$00000001
>279a	00 80					.byte	$00,$80
.279c	20 dc 50	jsr $50dc		jsr	FloatCompare
.279f	20 a6 50	jsr $50a6		jsr	CompareEqual
.27a2	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.27a5	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 6325
>27a8	b5 18 00 00				.dword	$000018b5
>27ac	00 00					.byte	$00,$00
.27ae	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -37993
>27b1	69 94 00 00				.dword	$00009469
>27b5	00 80					.byte	$00,$80
.27b7	20 dc 50	jsr $50dc		jsr	FloatCompare
.27ba	20 bc 50	jsr $50bc		jsr	CompareLess
.27bd	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>27c0	00 00 00 00				.dword	$00000000
>27c4	00 00					.byte	$00,$00
.27c6	20 dc 50	jsr $50dc		jsr	FloatCompare
.27c9	20 a6 50	jsr $50a6		jsr	CompareEqual
.27cc	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.27cf	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 6325
>27d2	b5 18 00 00				.dword	$000018b5
>27d6	00 00					.byte	$00,$00
.27d8	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -37993
>27db	69 94 00 00				.dword	$00009469
>27df	00 80					.byte	$00,$80
.27e1	20 dc 50	jsr $50dc		jsr	FloatCompare
.27e4	20 cc 50	jsr $50cc		jsr	CompareLessEqual
.27e7	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>27ea	00 00 00 00				.dword	$00000000
>27ee	00 00					.byte	$00,$00
.27f0	20 dc 50	jsr $50dc		jsr	FloatCompare
.27f3	20 a6 50	jsr $50a6		jsr	CompareEqual
.27f6	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.27f9	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 61.97554062
>27fc	0f 7a f3 7b				.dword	$7bf37a0f
>2800	e7 00					.byte	$e7,$00
.2802	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 56.37790556
>2805	d6 7c c1 70				.dword	$70c17cd6
>2809	e7 00					.byte	$e7,$00
.280b	20 1b 50	jsr $501b		jsr	FloatAdd
.280e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 118.35344618
>2811	73 7b 5a 76				.dword	$765a7b73
>2815	e8 00					.byte	$e8,$00
.2817	20 dc 50	jsr $50dc		jsr	FloatCompare
.281a	20 a6 50	jsr $50a6		jsr	CompareEqual
.281d	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2820	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 61.97554062
>2823	0f 7a f3 7b				.dword	$7bf37a0f
>2827	e7 00					.byte	$e7,$00
.2829	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 56.37790556
>282c	d6 7c c1 70				.dword	$70c17cd6
>2830	e7 00					.byte	$e7,$00
.2832	20 15 50	jsr $5015		jsr	FloatSubtract
.2835	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 5.59763505
>2838	c5 e9 8f 59				.dword	$598fe9c5
>283c	e4 00					.byte	$e4,$00
.283e	20 dc 50	jsr $50dc		jsr	FloatCompare
.2841	20 a6 50	jsr $50a6		jsr	CompareEqual
.2844	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2847	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 61.97554062
>284a	0f 7a f3 7b				.dword	$7bf37a0f
>284e	e7 00					.byte	$e7,$00
.2850	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 56.37790556
>2853	d6 7c c1 70				.dword	$70c17cd6
>2857	e7 00					.byte	$e7,$00
.2859	20 b7 52	jsr $52b7		jsr	FloatMultiply
.285c	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 3494.0511762
>285f	cf 68 30 6d				.dword	$6d3068cf
>2863	ed 00					.byte	$ed,$00
.2865	20 dc 50	jsr $50dc		jsr	FloatCompare
.2868	20 a6 50	jsr $50a6		jsr	CompareEqual
.286b	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.286e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 61.97554062
>2871	0f 7a f3 7b				.dword	$7bf37a0f
>2875	e7 00					.byte	$e7,$00
.2877	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 56.37790556
>287a	d6 7c c1 70				.dword	$70c17cd6
>287e	e7 00					.byte	$e7,$00
.2880	20 40 51	jsr $5140		jsr	FloatDivide
.2883	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 1.09928774
>2886	f7 ba 5a 46				.dword	$465abaf7
>288a	e2 00					.byte	$e2,$00
.288c	20 dc 50	jsr $50dc		jsr	FloatCompare
.288f	20 a6 50	jsr $50a6		jsr	CompareEqual
.2892	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2895	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -46.06131044
>2898	15 64 1f 5c				.dword	$5c1f6415
>289c	e7 80					.byte	$e7,$80
.289e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -46.06131044
>28a1	15 64 1f 5c				.dword	$5c1f6415
>28a5	e7 80					.byte	$e7,$80
.28a7	20 dc 50	jsr $50dc		jsr	FloatCompare
.28aa	20 c4 50	jsr $50c4		jsr	CompareGreater
.28ad	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>28b0	00 00 00 00				.dword	$00000000
>28b4	00 00					.byte	$00,$00
.28b6	20 dc 50	jsr $50dc		jsr	FloatCompare
.28b9	20 a6 50	jsr $50a6		jsr	CompareEqual
.28bc	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.28bf	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -46.06131044
>28c2	15 64 1f 5c				.dword	$5c1f6415
>28c6	e7 80					.byte	$e7,$80
.28c8	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -46.06131044
>28cb	15 64 1f 5c				.dword	$5c1f6415
>28cf	e7 80					.byte	$e7,$80
.28d1	20 dc 50	jsr $50dc		jsr	FloatCompare
.28d4	20 d4 50	jsr $50d4		jsr	CompareGreaterEqual
.28d7	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>28da	01 00 00 00				.dword	$00000001
>28de	00 80					.byte	$00,$80
.28e0	20 dc 50	jsr $50dc		jsr	FloatCompare
.28e3	20 a6 50	jsr $50a6		jsr	CompareEqual
.28e6	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.28e9	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -46.06131044
>28ec	15 64 1f 5c				.dword	$5c1f6415
>28f0	e7 80					.byte	$e7,$80
.28f2	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -46.06131044
>28f5	15 64 1f 5c				.dword	$5c1f6415
>28f9	e7 80					.byte	$e7,$80
.28fb	20 dc 50	jsr $50dc		jsr	FloatCompare
.28fe	20 bc 50	jsr $50bc		jsr	CompareLess
.2901	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>2904	00 00 00 00				.dword	$00000000
>2908	00 00					.byte	$00,$00
.290a	20 dc 50	jsr $50dc		jsr	FloatCompare
.290d	20 a6 50	jsr $50a6		jsr	CompareEqual
.2910	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2913	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -46.06131044
>2916	15 64 1f 5c				.dword	$5c1f6415
>291a	e7 80					.byte	$e7,$80
.291c	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -46.06131044
>291f	15 64 1f 5c				.dword	$5c1f6415
>2923	e7 80					.byte	$e7,$80
.2925	20 dc 50	jsr $50dc		jsr	FloatCompare
.2928	20 cc 50	jsr $50cc		jsr	CompareLessEqual
.292b	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>292e	01 00 00 00				.dword	$00000001
>2932	00 80					.byte	$00,$80
.2934	20 dc 50	jsr $50dc		jsr	FloatCompare
.2937	20 a6 50	jsr $50a6		jsr	CompareEqual
.293a	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.293d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -46.06131044
>2940	15 64 1f 5c				.dword	$5c1f6415
>2944	e7 80					.byte	$e7,$80
.2946	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -46.06131044
>2949	15 64 1f 5c				.dword	$5c1f6415
>294d	e7 80					.byte	$e7,$80
.294f	20 dc 50	jsr $50dc		jsr	FloatCompare
.2952	20 a6 50	jsr $50a6		jsr	CompareEqual
.2955	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>2958	01 00 00 00				.dword	$00000001
>295c	00 80					.byte	$00,$80
.295e	20 dc 50	jsr $50dc		jsr	FloatCompare
.2961	20 a6 50	jsr $50a6		jsr	CompareEqual
.2964	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2967	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -46.06131044
>296a	15 64 1f 5c				.dword	$5c1f6415
>296e	e7 80					.byte	$e7,$80
.2970	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -46.06131044
>2973	15 64 1f 5c				.dword	$5c1f6415
>2977	e7 80					.byte	$e7,$80
.2979	20 dc 50	jsr $50dc		jsr	FloatCompare
.297c	20 b6 50	jsr $50b6		jsr	CompareNotEqual
.297f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>2982	00 00 00 00				.dword	$00000000
>2986	00 00					.byte	$00,$00
.2988	20 dc 50	jsr $50dc		jsr	FloatCompare
.298b	20 a6 50	jsr $50a6		jsr	CompareEqual
.298e	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2991	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -26590
>2994	de 67 00 00				.dword	$000067de
>2998	00 80					.byte	$00,$80
.299a	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 6974
>299d	3e 1b 00 00				.dword	$00001b3e
>29a1	00 00					.byte	$00,$00
.29a3	20 1b 50	jsr $501b		jsr	FloatAdd
.29a6	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -19616
>29a9	a0 4c 00 00				.dword	$00004ca0
>29ad	00 80					.byte	$00,$80
.29af	20 dc 50	jsr $50dc		jsr	FloatCompare
.29b2	20 a6 50	jsr $50a6		jsr	CompareEqual
.29b5	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.29b8	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -26590
>29bb	de 67 00 00				.dword	$000067de
>29bf	00 80					.byte	$00,$80
.29c1	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 6974
>29c4	3e 1b 00 00				.dword	$00001b3e
>29c8	00 00					.byte	$00,$00
.29ca	20 15 50	jsr $5015		jsr	FloatSubtract
.29cd	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -33564
>29d0	1c 83 00 00				.dword	$0000831c
>29d4	00 80					.byte	$00,$80
.29d6	20 dc 50	jsr $50dc		jsr	FloatCompare
.29d9	20 a6 50	jsr $50a6		jsr	CompareEqual
.29dc	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.29df	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -26590
>29e2	de 67 00 00				.dword	$000067de
>29e6	00 80					.byte	$00,$80
.29e8	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 6974
>29eb	3e 1b 00 00				.dword	$00001b3e
>29ef	00 00					.byte	$00,$00
.29f1	20 b7 52	jsr $52b7		jsr	FloatMultiply
.29f4	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -185438660
>29f7	c4 91 0d 0b				.dword	$0b0d91c4
>29fb	00 80					.byte	$00,$80
.29fd	20 dc 50	jsr $50dc		jsr	FloatCompare
.2a00	20 a6 50	jsr $50a6		jsr	CompareEqual
.2a03	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2a06	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -26590
>2a09	de 67 00 00				.dword	$000067de
>2a0d	00 80					.byte	$00,$80
.2a0f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 6974
>2a12	3e 1b 00 00				.dword	$00001b3e
>2a16	00 00					.byte	$00,$00
.2a18	20 40 51	jsr $5140		jsr	FloatDivide
.2a1b	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -3.81273301
>2a1e	a8 e8 01 7a				.dword	$7a01e8a8
>2a22	e3 80					.byte	$e3,$80
.2a24	20 dc 50	jsr $50dc		jsr	FloatCompare
.2a27	20 a6 50	jsr $50a6		jsr	CompareEqual
.2a2a	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2a2d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 6974
>2a30	3e 1b 00 00				.dword	$00001b3e
>2a34	00 00					.byte	$00,$00
.2a36	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 6974
>2a39	3e 1b 00 00				.dword	$00001b3e
>2a3d	00 00					.byte	$00,$00
.2a3f	20 dc 50	jsr $50dc		jsr	FloatCompare
.2a42	20 a6 50	jsr $50a6		jsr	CompareEqual
.2a45	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>2a48	01 00 00 00				.dword	$00000001
>2a4c	00 80					.byte	$00,$80
.2a4e	20 dc 50	jsr $50dc		jsr	FloatCompare
.2a51	20 a6 50	jsr $50a6		jsr	CompareEqual
.2a54	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2a57	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 6974
>2a5a	3e 1b 00 00				.dword	$00001b3e
>2a5e	00 00					.byte	$00,$00
.2a60	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 6974
>2a63	3e 1b 00 00				.dword	$00001b3e
>2a67	00 00					.byte	$00,$00
.2a69	20 dc 50	jsr $50dc		jsr	FloatCompare
.2a6c	20 b6 50	jsr $50b6		jsr	CompareNotEqual
.2a6f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>2a72	00 00 00 00				.dword	$00000000
>2a76	00 00					.byte	$00,$00
.2a78	20 dc 50	jsr $50dc		jsr	FloatCompare
.2a7b	20 a6 50	jsr $50a6		jsr	CompareEqual
.2a7e	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2a81	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 6974
>2a84	3e 1b 00 00				.dword	$00001b3e
>2a88	00 00					.byte	$00,$00
.2a8a	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 6974
>2a8d	3e 1b 00 00				.dword	$00001b3e
>2a91	00 00					.byte	$00,$00
.2a93	20 dc 50	jsr $50dc		jsr	FloatCompare
.2a96	20 c4 50	jsr $50c4		jsr	CompareGreater
.2a99	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>2a9c	00 00 00 00				.dword	$00000000
>2aa0	00 00					.byte	$00,$00
.2aa2	20 dc 50	jsr $50dc		jsr	FloatCompare
.2aa5	20 a6 50	jsr $50a6		jsr	CompareEqual
.2aa8	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2aab	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 6974
>2aae	3e 1b 00 00				.dword	$00001b3e
>2ab2	00 00					.byte	$00,$00
.2ab4	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 6974
>2ab7	3e 1b 00 00				.dword	$00001b3e
>2abb	00 00					.byte	$00,$00
.2abd	20 dc 50	jsr $50dc		jsr	FloatCompare
.2ac0	20 d4 50	jsr $50d4		jsr	CompareGreaterEqual
.2ac3	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>2ac6	01 00 00 00				.dword	$00000001
>2aca	00 80					.byte	$00,$80
.2acc	20 dc 50	jsr $50dc		jsr	FloatCompare
.2acf	20 a6 50	jsr $50a6		jsr	CompareEqual
.2ad2	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2ad5	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 6974
>2ad8	3e 1b 00 00				.dword	$00001b3e
>2adc	00 00					.byte	$00,$00
.2ade	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 6974
>2ae1	3e 1b 00 00				.dword	$00001b3e
>2ae5	00 00					.byte	$00,$00
.2ae7	20 dc 50	jsr $50dc		jsr	FloatCompare
.2aea	20 bc 50	jsr $50bc		jsr	CompareLess
.2aed	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>2af0	00 00 00 00				.dword	$00000000
>2af4	00 00					.byte	$00,$00
.2af6	20 dc 50	jsr $50dc		jsr	FloatCompare
.2af9	20 a6 50	jsr $50a6		jsr	CompareEqual
.2afc	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2aff	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 6974
>2b02	3e 1b 00 00				.dword	$00001b3e
>2b06	00 00					.byte	$00,$00
.2b08	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 6974
>2b0b	3e 1b 00 00				.dword	$00001b3e
>2b0f	00 00					.byte	$00,$00
.2b11	20 dc 50	jsr $50dc		jsr	FloatCompare
.2b14	20 cc 50	jsr $50cc		jsr	CompareLessEqual
.2b17	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>2b1a	01 00 00 00				.dword	$00000001
>2b1e	00 80					.byte	$00,$80
.2b20	20 dc 50	jsr $50dc		jsr	FloatCompare
.2b23	20 a6 50	jsr $50a6		jsr	CompareEqual
.2b26	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2b29	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -35.86879404
>2b2c	93 d2 bc 47				.dword	$47bcd293
>2b30	e7 80					.byte	$e7,$80
.2b32	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 77.48853973
>2b35	f1 10 7d 4d				.dword	$4d7d10f1
>2b39	e8 00					.byte	$e8,$00
.2b3b	20 1b 50	jsr $501b		jsr	FloatAdd
.2b3e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 41.61974569
>2b41	4f 4f 3d 53				.dword	$533d4f4f
>2b45	e7 00					.byte	$e7,$00
.2b47	20 dc 50	jsr $50dc		jsr	FloatCompare
.2b4a	20 a6 50	jsr $50a6		jsr	CompareEqual
.2b4d	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2b50	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -35.86879404
>2b53	93 d2 bc 47				.dword	$47bcd293
>2b57	e7 80					.byte	$e7,$80
.2b59	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 77.48853973
>2b5c	f1 10 7d 4d				.dword	$4d7d10f1
>2b60	e8 00					.byte	$e8,$00
.2b62	20 15 50	jsr $5015		jsr	FloatSubtract
.2b65	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -113.35733377
>2b68	3a 7a 5b 71				.dword	$715b7a3a
>2b6c	e8 80					.byte	$e8,$80
.2b6e	20 dc 50	jsr $50dc		jsr	FloatCompare
.2b71	20 a6 50	jsr $50a6		jsr	CompareEqual
.2b74	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2b77	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -35.86879404
>2b7a	93 d2 bc 47				.dword	$47bcd293
>2b7e	e7 80					.byte	$e7,$80
.2b80	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 77.48853973
>2b83	f1 10 7d 4d				.dword	$4d7d10f1
>2b87	e8 00					.byte	$e8,$00
.2b89	20 b7 52	jsr $52b7		jsr	FloatMultiply
.2b8c	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -2779.42047183
>2b8f	20 5d db 56				.dword	$56db5d20
>2b93	ed 80					.byte	$ed,$80
.2b95	20 dc 50	jsr $50dc		jsr	FloatCompare
.2b98	20 a6 50	jsr $50a6		jsr	CompareEqual
.2b9b	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2b9e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -35.86879404
>2ba1	93 d2 bc 47				.dword	$47bcd293
>2ba5	e7 80					.byte	$e7,$80
.2ba7	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 77.48853973
>2baa	f1 10 7d 4d				.dword	$4d7d10f1
>2bae	e8 00					.byte	$e8,$00
.2bb0	20 40 51	jsr $5140		jsr	FloatDivide
.2bb3	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -0.4628916
>2bb6	5c 10 80 76				.dword	$7680105c
>2bba	e0 80					.byte	$e0,$80
.2bbc	20 dc 50	jsr $50dc		jsr	FloatCompare
.2bbf	20 a6 50	jsr $50a6		jsr	CompareEqual
.2bc2	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2bc5	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -42.07378311
>2bc8	e6 c6 25 54				.dword	$5425c6e6
>2bcc	e7 80					.byte	$e7,$80
.2bce	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 68.13201587
>2bd1	cb cb 21 44				.dword	$4421cbcb
>2bd5	e8 00					.byte	$e8,$00
.2bd7	20 dc 50	jsr $50dc		jsr	FloatCompare
.2bda	20 c4 50	jsr $50c4		jsr	CompareGreater
.2bdd	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>2be0	00 00 00 00				.dword	$00000000
>2be4	00 00					.byte	$00,$00
.2be6	20 dc 50	jsr $50dc		jsr	FloatCompare
.2be9	20 a6 50	jsr $50a6		jsr	CompareEqual
.2bec	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2bef	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -42.07378311
>2bf2	e6 c6 25 54				.dword	$5425c6e6
>2bf6	e7 80					.byte	$e7,$80
.2bf8	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 68.13201587
>2bfb	cb cb 21 44				.dword	$4421cbcb
>2bff	e8 00					.byte	$e8,$00
.2c01	20 dc 50	jsr $50dc		jsr	FloatCompare
.2c04	20 d4 50	jsr $50d4		jsr	CompareGreaterEqual
.2c07	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>2c0a	00 00 00 00				.dword	$00000000
>2c0e	00 00					.byte	$00,$00
.2c10	20 dc 50	jsr $50dc		jsr	FloatCompare
.2c13	20 a6 50	jsr $50a6		jsr	CompareEqual
.2c16	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2c19	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -42.07378311
>2c1c	e6 c6 25 54				.dword	$5425c6e6
>2c20	e7 80					.byte	$e7,$80
.2c22	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 68.13201587
>2c25	cb cb 21 44				.dword	$4421cbcb
>2c29	e8 00					.byte	$e8,$00
.2c2b	20 dc 50	jsr $50dc		jsr	FloatCompare
.2c2e	20 bc 50	jsr $50bc		jsr	CompareLess
.2c31	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>2c34	01 00 00 00				.dword	$00000001
>2c38	00 80					.byte	$00,$80
.2c3a	20 dc 50	jsr $50dc		jsr	FloatCompare
.2c3d	20 a6 50	jsr $50a6		jsr	CompareEqual
.2c40	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2c43	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -42.07378311
>2c46	e6 c6 25 54				.dword	$5425c6e6
>2c4a	e7 80					.byte	$e7,$80
.2c4c	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 68.13201587
>2c4f	cb cb 21 44				.dword	$4421cbcb
>2c53	e8 00					.byte	$e8,$00
.2c55	20 dc 50	jsr $50dc		jsr	FloatCompare
.2c58	20 cc 50	jsr $50cc		jsr	CompareLessEqual
.2c5b	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>2c5e	01 00 00 00				.dword	$00000001
>2c62	00 80					.byte	$00,$80
.2c64	20 dc 50	jsr $50dc		jsr	FloatCompare
.2c67	20 a6 50	jsr $50a6		jsr	CompareEqual
.2c6a	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2c6d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -42.07378311
>2c70	e6 c6 25 54				.dword	$5425c6e6
>2c74	e7 80					.byte	$e7,$80
.2c76	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 68.13201587
>2c79	cb cb 21 44				.dword	$4421cbcb
>2c7d	e8 00					.byte	$e8,$00
.2c7f	20 dc 50	jsr $50dc		jsr	FloatCompare
.2c82	20 a6 50	jsr $50a6		jsr	CompareEqual
.2c85	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>2c88	00 00 00 00				.dword	$00000000
>2c8c	00 00					.byte	$00,$00
.2c8e	20 dc 50	jsr $50dc		jsr	FloatCompare
.2c91	20 a6 50	jsr $50a6		jsr	CompareEqual
.2c94	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2c97	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -42.07378311
>2c9a	e6 c6 25 54				.dword	$5425c6e6
>2c9e	e7 80					.byte	$e7,$80
.2ca0	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 68.13201587
>2ca3	cb cb 21 44				.dword	$4421cbcb
>2ca7	e8 00					.byte	$e8,$00
.2ca9	20 dc 50	jsr $50dc		jsr	FloatCompare
.2cac	20 b6 50	jsr $50b6		jsr	CompareNotEqual
.2caf	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>2cb2	01 00 00 00				.dword	$00000001
>2cb6	00 80					.byte	$00,$80
.2cb8	20 dc 50	jsr $50dc		jsr	FloatCompare
.2cbb	20 a6 50	jsr $50a6		jsr	CompareEqual
.2cbe	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2cc1	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 26459
>2cc4	5b 67 00 00				.dword	$0000675b
>2cc8	00 00					.byte	$00,$00
.2cca	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -14436
>2ccd	64 38 00 00				.dword	$00003864
>2cd1	00 80					.byte	$00,$80
.2cd3	20 1b 50	jsr $501b		jsr	FloatAdd
.2cd6	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 12023
>2cd9	f7 2e 00 00				.dword	$00002ef7
>2cdd	00 00					.byte	$00,$00
.2cdf	20 dc 50	jsr $50dc		jsr	FloatCompare
.2ce2	20 a6 50	jsr $50a6		jsr	CompareEqual
.2ce5	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2ce8	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 26459
>2ceb	5b 67 00 00				.dword	$0000675b
>2cef	00 00					.byte	$00,$00
.2cf1	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -14436
>2cf4	64 38 00 00				.dword	$00003864
>2cf8	00 80					.byte	$00,$80
.2cfa	20 15 50	jsr $5015		jsr	FloatSubtract
.2cfd	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 40895
>2d00	bf 9f 00 00				.dword	$00009fbf
>2d04	00 00					.byte	$00,$00
.2d06	20 dc 50	jsr $50dc		jsr	FloatCompare
.2d09	20 a6 50	jsr $50a6		jsr	CompareEqual
.2d0c	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2d0f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 26459
>2d12	5b 67 00 00				.dword	$0000675b
>2d16	00 00					.byte	$00,$00
.2d18	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -14436
>2d1b	64 38 00 00				.dword	$00003864
>2d1f	00 80					.byte	$00,$80
.2d21	20 b7 52	jsr $52b7		jsr	FloatMultiply
.2d24	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -381962124
>2d27	8c 47 c4 16				.dword	$16c4478c
>2d2b	00 80					.byte	$00,$80
.2d2d	20 dc 50	jsr $50dc		jsr	FloatCompare
.2d30	20 a6 50	jsr $50a6		jsr	CompareEqual
.2d33	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2d36	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 26459
>2d39	5b 67 00 00				.dword	$0000675b
>2d3d	00 00					.byte	$00,$00
.2d3f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -14436
>2d42	64 38 00 00				.dword	$00003864
>2d46	00 80					.byte	$00,$80
.2d48	20 40 51	jsr $5140		jsr	FloatDivide
.2d4b	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1.83284843
>2d4e	80 63 4d 75				.dword	$754d6380
>2d52	e2 80					.byte	$e2,$80
.2d54	20 dc 50	jsr $50dc		jsr	FloatCompare
.2d57	20 a6 50	jsr $50a6		jsr	CompareEqual
.2d5a	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2d5d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -14436
>2d60	64 38 00 00				.dword	$00003864
>2d64	00 80					.byte	$00,$80
.2d66	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -14436
>2d69	64 38 00 00				.dword	$00003864
>2d6d	00 80					.byte	$00,$80
.2d6f	20 dc 50	jsr $50dc		jsr	FloatCompare
.2d72	20 a6 50	jsr $50a6		jsr	CompareEqual
.2d75	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>2d78	01 00 00 00				.dword	$00000001
>2d7c	00 80					.byte	$00,$80
.2d7e	20 dc 50	jsr $50dc		jsr	FloatCompare
.2d81	20 a6 50	jsr $50a6		jsr	CompareEqual
.2d84	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2d87	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -14436
>2d8a	64 38 00 00				.dword	$00003864
>2d8e	00 80					.byte	$00,$80
.2d90	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -14436
>2d93	64 38 00 00				.dword	$00003864
>2d97	00 80					.byte	$00,$80
.2d99	20 dc 50	jsr $50dc		jsr	FloatCompare
.2d9c	20 b6 50	jsr $50b6		jsr	CompareNotEqual
.2d9f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>2da2	00 00 00 00				.dword	$00000000
>2da6	00 00					.byte	$00,$00
.2da8	20 dc 50	jsr $50dc		jsr	FloatCompare
.2dab	20 a6 50	jsr $50a6		jsr	CompareEqual
.2dae	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2db1	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -14436
>2db4	64 38 00 00				.dword	$00003864
>2db8	00 80					.byte	$00,$80
.2dba	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -14436
>2dbd	64 38 00 00				.dword	$00003864
>2dc1	00 80					.byte	$00,$80
.2dc3	20 dc 50	jsr $50dc		jsr	FloatCompare
.2dc6	20 c4 50	jsr $50c4		jsr	CompareGreater
.2dc9	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>2dcc	00 00 00 00				.dword	$00000000
>2dd0	00 00					.byte	$00,$00
.2dd2	20 dc 50	jsr $50dc		jsr	FloatCompare
.2dd5	20 a6 50	jsr $50a6		jsr	CompareEqual
.2dd8	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2ddb	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -14436
>2dde	64 38 00 00				.dword	$00003864
>2de2	00 80					.byte	$00,$80
.2de4	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -14436
>2de7	64 38 00 00				.dword	$00003864
>2deb	00 80					.byte	$00,$80
.2ded	20 dc 50	jsr $50dc		jsr	FloatCompare
.2df0	20 d4 50	jsr $50d4		jsr	CompareGreaterEqual
.2df3	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>2df6	01 00 00 00				.dword	$00000001
>2dfa	00 80					.byte	$00,$80
.2dfc	20 dc 50	jsr $50dc		jsr	FloatCompare
.2dff	20 a6 50	jsr $50a6		jsr	CompareEqual
.2e02	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2e05	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -14436
>2e08	64 38 00 00				.dword	$00003864
>2e0c	00 80					.byte	$00,$80
.2e0e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -14436
>2e11	64 38 00 00				.dword	$00003864
>2e15	00 80					.byte	$00,$80
.2e17	20 dc 50	jsr $50dc		jsr	FloatCompare
.2e1a	20 bc 50	jsr $50bc		jsr	CompareLess
.2e1d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>2e20	00 00 00 00				.dword	$00000000
>2e24	00 00					.byte	$00,$00
.2e26	20 dc 50	jsr $50dc		jsr	FloatCompare
.2e29	20 a6 50	jsr $50a6		jsr	CompareEqual
.2e2c	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2e2f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -14436
>2e32	64 38 00 00				.dword	$00003864
>2e36	00 80					.byte	$00,$80
.2e38	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -14436
>2e3b	64 38 00 00				.dword	$00003864
>2e3f	00 80					.byte	$00,$80
.2e41	20 dc 50	jsr $50dc		jsr	FloatCompare
.2e44	20 cc 50	jsr $50cc		jsr	CompareLessEqual
.2e47	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>2e4a	01 00 00 00				.dword	$00000001
>2e4e	00 80					.byte	$00,$80
.2e50	20 dc 50	jsr $50dc		jsr	FloatCompare
.2e53	20 a6 50	jsr $50a6		jsr	CompareEqual
.2e56	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2e59	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 38.01376853
>2e5c	ab 0c 07 4c				.dword	$4c070cab
>2e60	e7 00					.byte	$e7,$00
.2e62	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -19.20102049
>2e65	51 d8 cd 4c				.dword	$4ccdd851
>2e69	e6 80					.byte	$e6,$80
.2e6b	20 1b 50	jsr $501b		jsr	FloatAdd
.2e6e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 18.81274804
>2e71	06 41 40 4b				.dword	$4b404106
>2e75	e6 00					.byte	$e6,$00
.2e77	20 dc 50	jsr $50dc		jsr	FloatCompare
.2e7a	20 a6 50	jsr $50a6		jsr	CompareEqual
.2e7d	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2e80	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 38.01376853
>2e83	ab 0c 07 4c				.dword	$4c070cab
>2e87	e7 00					.byte	$e7,$00
.2e89	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -19.20102049
>2e8c	51 d8 cd 4c				.dword	$4ccdd851
>2e90	e6 80					.byte	$e6,$80
.2e92	20 15 50	jsr $5015		jsr	FloatSubtract
.2e95	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 57.21478902
>2e98	d4 f8 6d 72				.dword	$726df8d4
>2e9c	e7 00					.byte	$e7,$00
.2e9e	20 dc 50	jsr $50dc		jsr	FloatCompare
.2ea1	20 a6 50	jsr $50a6		jsr	CompareEqual
.2ea4	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2ea7	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 38.01376853
>2eaa	ab 0c 07 4c				.dword	$4c070cab
>2eae	e7 00					.byte	$e7,$00
.2eb0	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -19.20102049
>2eb3	51 d8 cd 4c				.dword	$4ccdd851
>2eb7	e6 80					.byte	$e6,$80
.2eb9	20 b7 52	jsr $52b7		jsr	FloatMultiply
.2ebc	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -729.90314842
>2ebf	98 e6 3c 5b				.dword	$5b3ce698
>2ec3	eb 80					.byte	$eb,$80
.2ec5	20 dc 50	jsr $50dc		jsr	FloatCompare
.2ec8	20 a6 50	jsr $50a6		jsr	CompareEqual
.2ecb	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2ece	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 38.01376853
>2ed1	ab 0c 07 4c				.dword	$4c070cab
>2ed5	e7 00					.byte	$e7,$00
.2ed7	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -19.20102049
>2eda	51 d8 cd 4c				.dword	$4ccdd851
>2ede	e6 80					.byte	$e6,$80
.2ee0	20 40 51	jsr $5140		jsr	FloatDivide
.2ee3	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1.97977855
>2ee6	17 b1 b4 7e				.dword	$7eb4b117
>2eea	e2 80					.byte	$e2,$80
.2eec	20 dc 50	jsr $50dc		jsr	FloatCompare
.2eef	20 a6 50	jsr $50a6		jsr	CompareEqual
.2ef2	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2ef5	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -8.2868713
>2ef8	2e 83 4b 42				.dword	$424b832e
>2efc	e5 80					.byte	$e5,$80
.2efe	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -8.2868713
>2f01	2e 83 4b 42				.dword	$424b832e
>2f05	e5 80					.byte	$e5,$80
.2f07	20 dc 50	jsr $50dc		jsr	FloatCompare
.2f0a	20 c4 50	jsr $50c4		jsr	CompareGreater
.2f0d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>2f10	00 00 00 00				.dword	$00000000
>2f14	00 00					.byte	$00,$00
.2f16	20 dc 50	jsr $50dc		jsr	FloatCompare
.2f19	20 a6 50	jsr $50a6		jsr	CompareEqual
.2f1c	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2f1f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -8.2868713
>2f22	2e 83 4b 42				.dword	$424b832e
>2f26	e5 80					.byte	$e5,$80
.2f28	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -8.2868713
>2f2b	2e 83 4b 42				.dword	$424b832e
>2f2f	e5 80					.byte	$e5,$80
.2f31	20 dc 50	jsr $50dc		jsr	FloatCompare
.2f34	20 d4 50	jsr $50d4		jsr	CompareGreaterEqual
.2f37	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>2f3a	01 00 00 00				.dword	$00000001
>2f3e	00 80					.byte	$00,$80
.2f40	20 dc 50	jsr $50dc		jsr	FloatCompare
.2f43	20 a6 50	jsr $50a6		jsr	CompareEqual
.2f46	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2f49	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -8.2868713
>2f4c	2e 83 4b 42				.dword	$424b832e
>2f50	e5 80					.byte	$e5,$80
.2f52	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -8.2868713
>2f55	2e 83 4b 42				.dword	$424b832e
>2f59	e5 80					.byte	$e5,$80
.2f5b	20 dc 50	jsr $50dc		jsr	FloatCompare
.2f5e	20 bc 50	jsr $50bc		jsr	CompareLess
.2f61	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>2f64	00 00 00 00				.dword	$00000000
>2f68	00 00					.byte	$00,$00
.2f6a	20 dc 50	jsr $50dc		jsr	FloatCompare
.2f6d	20 a6 50	jsr $50a6		jsr	CompareEqual
.2f70	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2f73	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -8.2868713
>2f76	2e 83 4b 42				.dword	$424b832e
>2f7a	e5 80					.byte	$e5,$80
.2f7c	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -8.2868713
>2f7f	2e 83 4b 42				.dword	$424b832e
>2f83	e5 80					.byte	$e5,$80
.2f85	20 dc 50	jsr $50dc		jsr	FloatCompare
.2f88	20 cc 50	jsr $50cc		jsr	CompareLessEqual
.2f8b	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>2f8e	01 00 00 00				.dword	$00000001
>2f92	00 80					.byte	$00,$80
.2f94	20 dc 50	jsr $50dc		jsr	FloatCompare
.2f97	20 a6 50	jsr $50a6		jsr	CompareEqual
.2f9a	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2f9d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -8.2868713
>2fa0	2e 83 4b 42				.dword	$424b832e
>2fa4	e5 80					.byte	$e5,$80
.2fa6	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -8.2868713
>2fa9	2e 83 4b 42				.dword	$424b832e
>2fad	e5 80					.byte	$e5,$80
.2faf	20 dc 50	jsr $50dc		jsr	FloatCompare
.2fb2	20 a6 50	jsr $50a6		jsr	CompareEqual
.2fb5	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>2fb8	01 00 00 00				.dword	$00000001
>2fbc	00 80					.byte	$00,$80
.2fbe	20 dc 50	jsr $50dc		jsr	FloatCompare
.2fc1	20 a6 50	jsr $50a6		jsr	CompareEqual
.2fc4	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2fc7	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -8.2868713
>2fca	2e 83 4b 42				.dword	$424b832e
>2fce	e5 80					.byte	$e5,$80
.2fd0	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -8.2868713
>2fd3	2e 83 4b 42				.dword	$424b832e
>2fd7	e5 80					.byte	$e5,$80
.2fd9	20 dc 50	jsr $50dc		jsr	FloatCompare
.2fdc	20 b6 50	jsr $50b6		jsr	CompareNotEqual
.2fdf	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>2fe2	00 00 00 00				.dword	$00000000
>2fe6	00 00					.byte	$00,$00
.2fe8	20 dc 50	jsr $50dc		jsr	FloatCompare
.2feb	20 a6 50	jsr $50a6		jsr	CompareEqual
.2fee	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.2ff1	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 8457
>2ff4	09 21 00 00				.dword	$00002109
>2ff8	00 00					.byte	$00,$00
.2ffa	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 29490
>2ffd	32 73 00 00				.dword	$00007332
>3001	00 00					.byte	$00,$00
.3003	20 1b 50	jsr $501b		jsr	FloatAdd
.3006	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 37947
>3009	3b 94 00 00				.dword	$0000943b
>300d	00 00					.byte	$00,$00
.300f	20 dc 50	jsr $50dc		jsr	FloatCompare
.3012	20 a6 50	jsr $50a6		jsr	CompareEqual
.3015	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3018	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 8457
>301b	09 21 00 00				.dword	$00002109
>301f	00 00					.byte	$00,$00
.3021	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 29490
>3024	32 73 00 00				.dword	$00007332
>3028	00 00					.byte	$00,$00
.302a	20 15 50	jsr $5015		jsr	FloatSubtract
.302d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -21033
>3030	29 52 00 00				.dword	$00005229
>3034	00 80					.byte	$00,$80
.3036	20 dc 50	jsr $50dc		jsr	FloatCompare
.3039	20 a6 50	jsr $50a6		jsr	CompareEqual
.303c	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.303f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 8457
>3042	09 21 00 00				.dword	$00002109
>3046	00 00					.byte	$00,$00
.3048	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 29490
>304b	32 73 00 00				.dword	$00007332
>304f	00 00					.byte	$00,$00
.3051	20 b7 52	jsr $52b7		jsr	FloatMultiply
.3054	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 249396930
>3057	c2 7e dd 0e				.dword	$0edd7ec2
>305b	00 00					.byte	$00,$00
.305d	20 dc 50	jsr $50dc		jsr	FloatCompare
.3060	20 a6 50	jsr $50a6		jsr	CompareEqual
.3063	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3066	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 8457
>3069	09 21 00 00				.dword	$00002109
>306d	00 00					.byte	$00,$00
.306f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 29490
>3072	32 73 00 00				.dword	$00007332
>3076	00 00					.byte	$00,$00
.3078	20 40 51	jsr $5140		jsr	FloatDivide
.307b	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0.28677518
>307e	23 19 6a 49				.dword	$496a1923
>3082	e0 00					.byte	$e0,$00
.3084	20 dc 50	jsr $50dc		jsr	FloatCompare
.3087	20 a6 50	jsr $50a6		jsr	CompareEqual
.308a	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.308d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 29490
>3090	32 73 00 00				.dword	$00007332
>3094	00 00					.byte	$00,$00
.3096	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 29490
>3099	32 73 00 00				.dword	$00007332
>309d	00 00					.byte	$00,$00
.309f	20 dc 50	jsr $50dc		jsr	FloatCompare
.30a2	20 a6 50	jsr $50a6		jsr	CompareEqual
.30a5	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>30a8	01 00 00 00				.dword	$00000001
>30ac	00 80					.byte	$00,$80
.30ae	20 dc 50	jsr $50dc		jsr	FloatCompare
.30b1	20 a6 50	jsr $50a6		jsr	CompareEqual
.30b4	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.30b7	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 29490
>30ba	32 73 00 00				.dword	$00007332
>30be	00 00					.byte	$00,$00
.30c0	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 29490
>30c3	32 73 00 00				.dword	$00007332
>30c7	00 00					.byte	$00,$00
.30c9	20 dc 50	jsr $50dc		jsr	FloatCompare
.30cc	20 b6 50	jsr $50b6		jsr	CompareNotEqual
.30cf	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>30d2	00 00 00 00				.dword	$00000000
>30d6	00 00					.byte	$00,$00
.30d8	20 dc 50	jsr $50dc		jsr	FloatCompare
.30db	20 a6 50	jsr $50a6		jsr	CompareEqual
.30de	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.30e1	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 29490
>30e4	32 73 00 00				.dword	$00007332
>30e8	00 00					.byte	$00,$00
.30ea	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 29490
>30ed	32 73 00 00				.dword	$00007332
>30f1	00 00					.byte	$00,$00
.30f3	20 dc 50	jsr $50dc		jsr	FloatCompare
.30f6	20 c4 50	jsr $50c4		jsr	CompareGreater
.30f9	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>30fc	00 00 00 00				.dword	$00000000
>3100	00 00					.byte	$00,$00
.3102	20 dc 50	jsr $50dc		jsr	FloatCompare
.3105	20 a6 50	jsr $50a6		jsr	CompareEqual
.3108	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.310b	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 29490
>310e	32 73 00 00				.dword	$00007332
>3112	00 00					.byte	$00,$00
.3114	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 29490
>3117	32 73 00 00				.dword	$00007332
>311b	00 00					.byte	$00,$00
.311d	20 dc 50	jsr $50dc		jsr	FloatCompare
.3120	20 d4 50	jsr $50d4		jsr	CompareGreaterEqual
.3123	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>3126	01 00 00 00				.dword	$00000001
>312a	00 80					.byte	$00,$80
.312c	20 dc 50	jsr $50dc		jsr	FloatCompare
.312f	20 a6 50	jsr $50a6		jsr	CompareEqual
.3132	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3135	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 29490
>3138	32 73 00 00				.dword	$00007332
>313c	00 00					.byte	$00,$00
.313e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 29490
>3141	32 73 00 00				.dword	$00007332
>3145	00 00					.byte	$00,$00
.3147	20 dc 50	jsr $50dc		jsr	FloatCompare
.314a	20 bc 50	jsr $50bc		jsr	CompareLess
.314d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>3150	00 00 00 00				.dword	$00000000
>3154	00 00					.byte	$00,$00
.3156	20 dc 50	jsr $50dc		jsr	FloatCompare
.3159	20 a6 50	jsr $50a6		jsr	CompareEqual
.315c	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.315f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 29490
>3162	32 73 00 00				.dword	$00007332
>3166	00 00					.byte	$00,$00
.3168	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 29490
>316b	32 73 00 00				.dword	$00007332
>316f	00 00					.byte	$00,$00
.3171	20 dc 50	jsr $50dc		jsr	FloatCompare
.3174	20 cc 50	jsr $50cc		jsr	CompareLessEqual
.3177	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>317a	01 00 00 00				.dword	$00000001
>317e	00 80					.byte	$00,$80
.3180	20 dc 50	jsr $50dc		jsr	FloatCompare
.3183	20 a6 50	jsr $50a6		jsr	CompareEqual
.3186	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3189	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -26.01814206
>318c	d5 93 12 68				.dword	$681293d5
>3190	e6 80					.byte	$e6,$80
.3192	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -2.88369644
>3195	c2 3d 47 5c				.dword	$5c473dc2
>3199	e3 80					.byte	$e3,$80
.319b	20 1b 50	jsr $501b		jsr	FloatAdd
.319e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -28.9018385
>31a1	8d 7b 9b 73				.dword	$739b7b8d
>31a5	e6 80					.byte	$e6,$80
.31a7	20 dc 50	jsr $50dc		jsr	FloatCompare
.31aa	20 a6 50	jsr $50a6		jsr	CompareEqual
.31ad	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.31b0	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -26.01814206
>31b3	d5 93 12 68				.dword	$681293d5
>31b7	e6 80					.byte	$e6,$80
.31b9	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -2.88369644
>31bc	c2 3d 47 5c				.dword	$5c473dc2
>31c0	e3 80					.byte	$e3,$80
.31c2	20 15 50	jsr $5015		jsr	FloatSubtract
.31c5	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -23.13444561
>31c8	1c ac 89 5c				.dword	$5c89ac1c
>31cc	e6 80					.byte	$e6,$80
.31ce	20 dc 50	jsr $50dc		jsr	FloatCompare
.31d1	20 a6 50	jsr $50a6		jsr	CompareEqual
.31d4	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.31d7	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -26.01814206
>31da	d5 93 12 68				.dword	$681293d5
>31de	e6 80					.byte	$e6,$80
.31e0	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -2.88369644
>31e3	c2 3d 47 5c				.dword	$5c473dc2
>31e7	e3 80					.byte	$e3,$80
.31e9	20 b7 52	jsr $52b7		jsr	FloatMultiply
.31ec	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 75.02842375
>31ef	c7 46 07 4b				.dword	$4b0746c7
>31f3	e8 00					.byte	$e8,$00
.31f5	20 dc 50	jsr $50dc		jsr	FloatCompare
.31f8	20 a6 50	jsr $50a6		jsr	CompareEqual
.31fb	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.31fe	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -26.01814206
>3201	d5 93 12 68				.dword	$681293d5
>3205	e6 80					.byte	$e6,$80
.3207	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -2.88369644
>320a	c2 3d 47 5c				.dword	$5c473dc2
>320e	e3 80					.byte	$e3,$80
.3210	20 40 51	jsr $5140		jsr	FloatDivide
.3213	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 9.02249684
>3216	d3 12 2e 48				.dword	$482e12d3
>321a	e5 00					.byte	$e5,$00
.321c	20 dc 50	jsr $50dc		jsr	FloatCompare
.321f	20 a6 50	jsr $50a6		jsr	CompareEqual
.3222	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3225	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -2.44464242
>3228	be 82 3a 4e				.dword	$4e3a82be
>322c	e3 80					.byte	$e3,$80
.322e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -2.44464242
>3231	be 82 3a 4e				.dword	$4e3a82be
>3235	e3 80					.byte	$e3,$80
.3237	20 dc 50	jsr $50dc		jsr	FloatCompare
.323a	20 c4 50	jsr $50c4		jsr	CompareGreater
.323d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>3240	00 00 00 00				.dword	$00000000
>3244	00 00					.byte	$00,$00
.3246	20 dc 50	jsr $50dc		jsr	FloatCompare
.3249	20 a6 50	jsr $50a6		jsr	CompareEqual
.324c	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.324f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -2.44464242
>3252	be 82 3a 4e				.dword	$4e3a82be
>3256	e3 80					.byte	$e3,$80
.3258	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -2.44464242
>325b	be 82 3a 4e				.dword	$4e3a82be
>325f	e3 80					.byte	$e3,$80
.3261	20 dc 50	jsr $50dc		jsr	FloatCompare
.3264	20 d4 50	jsr $50d4		jsr	CompareGreaterEqual
.3267	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>326a	01 00 00 00				.dword	$00000001
>326e	00 80					.byte	$00,$80
.3270	20 dc 50	jsr $50dc		jsr	FloatCompare
.3273	20 a6 50	jsr $50a6		jsr	CompareEqual
.3276	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3279	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -2.44464242
>327c	be 82 3a 4e				.dword	$4e3a82be
>3280	e3 80					.byte	$e3,$80
.3282	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -2.44464242
>3285	be 82 3a 4e				.dword	$4e3a82be
>3289	e3 80					.byte	$e3,$80
.328b	20 dc 50	jsr $50dc		jsr	FloatCompare
.328e	20 bc 50	jsr $50bc		jsr	CompareLess
.3291	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>3294	00 00 00 00				.dword	$00000000
>3298	00 00					.byte	$00,$00
.329a	20 dc 50	jsr $50dc		jsr	FloatCompare
.329d	20 a6 50	jsr $50a6		jsr	CompareEqual
.32a0	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.32a3	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -2.44464242
>32a6	be 82 3a 4e				.dword	$4e3a82be
>32aa	e3 80					.byte	$e3,$80
.32ac	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -2.44464242
>32af	be 82 3a 4e				.dword	$4e3a82be
>32b3	e3 80					.byte	$e3,$80
.32b5	20 dc 50	jsr $50dc		jsr	FloatCompare
.32b8	20 cc 50	jsr $50cc		jsr	CompareLessEqual
.32bb	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>32be	01 00 00 00				.dword	$00000001
>32c2	00 80					.byte	$00,$80
.32c4	20 dc 50	jsr $50dc		jsr	FloatCompare
.32c7	20 a6 50	jsr $50a6		jsr	CompareEqual
.32ca	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.32cd	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -2.44464242
>32d0	be 82 3a 4e				.dword	$4e3a82be
>32d4	e3 80					.byte	$e3,$80
.32d6	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -2.44464242
>32d9	be 82 3a 4e				.dword	$4e3a82be
>32dd	e3 80					.byte	$e3,$80
.32df	20 dc 50	jsr $50dc		jsr	FloatCompare
.32e2	20 a6 50	jsr $50a6		jsr	CompareEqual
.32e5	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>32e8	01 00 00 00				.dword	$00000001
>32ec	00 80					.byte	$00,$80
.32ee	20 dc 50	jsr $50dc		jsr	FloatCompare
.32f1	20 a6 50	jsr $50a6		jsr	CompareEqual
.32f4	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.32f7	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -2.44464242
>32fa	be 82 3a 4e				.dword	$4e3a82be
>32fe	e3 80					.byte	$e3,$80
.3300	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -2.44464242
>3303	be 82 3a 4e				.dword	$4e3a82be
>3307	e3 80					.byte	$e3,$80
.3309	20 dc 50	jsr $50dc		jsr	FloatCompare
.330c	20 b6 50	jsr $50b6		jsr	CompareNotEqual
.330f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>3312	00 00 00 00				.dword	$00000000
>3316	00 00					.byte	$00,$00
.3318	20 dc 50	jsr $50dc		jsr	FloatCompare
.331b	20 a6 50	jsr $50a6		jsr	CompareEqual
.331e	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3321	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 32983
>3324	d7 80 00 00				.dword	$000080d7
>3328	00 00					.byte	$00,$00
.332a	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 40187
>332d	fb 9c 00 00				.dword	$00009cfb
>3331	00 00					.byte	$00,$00
.3333	20 1b 50	jsr $501b		jsr	FloatAdd
.3336	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 73170
>3339	d2 1d 01 00				.dword	$00011dd2
>333d	00 00					.byte	$00,$00
.333f	20 dc 50	jsr $50dc		jsr	FloatCompare
.3342	20 a6 50	jsr $50a6		jsr	CompareEqual
.3345	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3348	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 32983
>334b	d7 80 00 00				.dword	$000080d7
>334f	00 00					.byte	$00,$00
.3351	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 40187
>3354	fb 9c 00 00				.dword	$00009cfb
>3358	00 00					.byte	$00,$00
.335a	20 15 50	jsr $5015		jsr	FloatSubtract
.335d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -7204
>3360	24 1c 00 00				.dword	$00001c24
>3364	00 80					.byte	$00,$80
.3366	20 dc 50	jsr $50dc		jsr	FloatCompare
.3369	20 a6 50	jsr $50a6		jsr	CompareEqual
.336c	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.336f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 32983
>3372	d7 80 00 00				.dword	$000080d7
>3376	00 00					.byte	$00,$00
.3378	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 40187
>337b	fb 9c 00 00				.dword	$00009cfb
>337f	00 00					.byte	$00,$00
.3381	20 b7 52	jsr $52b7		jsr	FloatMultiply
.3384	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 1325487821
>3387	cd 56 01 4f				.dword	$4f0156cd
>338b	00 00					.byte	$00,$00
.338d	20 dc 50	jsr $50dc		jsr	FloatCompare
.3390	20 a6 50	jsr $50a6		jsr	CompareEqual
.3393	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3396	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 32983
>3399	d7 80 00 00				.dword	$000080d7
>339d	00 00					.byte	$00,$00
.339f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 40187
>33a2	fb 9c 00 00				.dword	$00009cfb
>33a6	00 00					.byte	$00,$00
.33a8	20 40 51	jsr $5140		jsr	FloatDivide
.33ab	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0.82073805
>33ae	c6 f1 0d 69				.dword	$690df1c6
>33b2	e1 00					.byte	$e1,$00
.33b4	20 dc 50	jsr $50dc		jsr	FloatCompare
.33b7	20 a6 50	jsr $50a6		jsr	CompareEqual
.33ba	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.33bd	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 40187
>33c0	fb 9c 00 00				.dword	$00009cfb
>33c4	00 00					.byte	$00,$00
.33c6	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 40187
>33c9	fb 9c 00 00				.dword	$00009cfb
>33cd	00 00					.byte	$00,$00
.33cf	20 dc 50	jsr $50dc		jsr	FloatCompare
.33d2	20 a6 50	jsr $50a6		jsr	CompareEqual
.33d5	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>33d8	01 00 00 00				.dword	$00000001
>33dc	00 80					.byte	$00,$80
.33de	20 dc 50	jsr $50dc		jsr	FloatCompare
.33e1	20 a6 50	jsr $50a6		jsr	CompareEqual
.33e4	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.33e7	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 40187
>33ea	fb 9c 00 00				.dword	$00009cfb
>33ee	00 00					.byte	$00,$00
.33f0	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 40187
>33f3	fb 9c 00 00				.dword	$00009cfb
>33f7	00 00					.byte	$00,$00
.33f9	20 dc 50	jsr $50dc		jsr	FloatCompare
.33fc	20 b6 50	jsr $50b6		jsr	CompareNotEqual
.33ff	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>3402	00 00 00 00				.dword	$00000000
>3406	00 00					.byte	$00,$00
.3408	20 dc 50	jsr $50dc		jsr	FloatCompare
.340b	20 a6 50	jsr $50a6		jsr	CompareEqual
.340e	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3411	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 40187
>3414	fb 9c 00 00				.dword	$00009cfb
>3418	00 00					.byte	$00,$00
.341a	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 40187
>341d	fb 9c 00 00				.dword	$00009cfb
>3421	00 00					.byte	$00,$00
.3423	20 dc 50	jsr $50dc		jsr	FloatCompare
.3426	20 c4 50	jsr $50c4		jsr	CompareGreater
.3429	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>342c	00 00 00 00				.dword	$00000000
>3430	00 00					.byte	$00,$00
.3432	20 dc 50	jsr $50dc		jsr	FloatCompare
.3435	20 a6 50	jsr $50a6		jsr	CompareEqual
.3438	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.343b	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 40187
>343e	fb 9c 00 00				.dword	$00009cfb
>3442	00 00					.byte	$00,$00
.3444	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 40187
>3447	fb 9c 00 00				.dword	$00009cfb
>344b	00 00					.byte	$00,$00
.344d	20 dc 50	jsr $50dc		jsr	FloatCompare
.3450	20 d4 50	jsr $50d4		jsr	CompareGreaterEqual
.3453	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>3456	01 00 00 00				.dword	$00000001
>345a	00 80					.byte	$00,$80
.345c	20 dc 50	jsr $50dc		jsr	FloatCompare
.345f	20 a6 50	jsr $50a6		jsr	CompareEqual
.3462	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3465	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 40187
>3468	fb 9c 00 00				.dword	$00009cfb
>346c	00 00					.byte	$00,$00
.346e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 40187
>3471	fb 9c 00 00				.dword	$00009cfb
>3475	00 00					.byte	$00,$00
.3477	20 dc 50	jsr $50dc		jsr	FloatCompare
.347a	20 bc 50	jsr $50bc		jsr	CompareLess
.347d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>3480	00 00 00 00				.dword	$00000000
>3484	00 00					.byte	$00,$00
.3486	20 dc 50	jsr $50dc		jsr	FloatCompare
.3489	20 a6 50	jsr $50a6		jsr	CompareEqual
.348c	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.348f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 40187
>3492	fb 9c 00 00				.dword	$00009cfb
>3496	00 00					.byte	$00,$00
.3498	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 40187
>349b	fb 9c 00 00				.dword	$00009cfb
>349f	00 00					.byte	$00,$00
.34a1	20 dc 50	jsr $50dc		jsr	FloatCompare
.34a4	20 cc 50	jsr $50cc		jsr	CompareLessEqual
.34a7	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>34aa	01 00 00 00				.dword	$00000001
>34ae	00 80					.byte	$00,$80
.34b0	20 dc 50	jsr $50dc		jsr	FloatCompare
.34b3	20 a6 50	jsr $50a6		jsr	CompareEqual
.34b6	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.34b9	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -21.38025431
>34bc	63 61 85 55				.dword	$55856163
>34c0	e6 80					.byte	$e6,$80
.34c2	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 19.97918523
>34c5	88 af ea 4f				.dword	$4feaaf88
>34c9	e6 00					.byte	$e6,$00
.34cb	20 1b 50	jsr $501b		jsr	FloatAdd
.34ce	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1.40106909
>34d1	b0 1d ab 59				.dword	$59ab1db0
>34d5	e2 80					.byte	$e2,$80
.34d7	20 dc 50	jsr $50dc		jsr	FloatCompare
.34da	20 a6 50	jsr $50a6		jsr	CompareEqual
.34dd	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.34e0	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -21.38025431
>34e3	63 61 85 55				.dword	$55856163
>34e7	e6 80					.byte	$e6,$80
.34e9	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 19.97918523
>34ec	88 af ea 4f				.dword	$4feaaf88
>34f0	e6 00					.byte	$e6,$00
.34f2	20 15 50	jsr $5015		jsr	FloatSubtract
.34f5	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -41.35943954
>34f8	76 08 b8 52				.dword	$52b80876
>34fc	e7 80					.byte	$e7,$80
.34fe	20 dc 50	jsr $50dc		jsr	FloatCompare
.3501	20 a6 50	jsr $50a6		jsr	CompareEqual
.3504	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3507	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -21.38025431
>350a	63 61 85 55				.dword	$55856163
>350e	e6 80					.byte	$e6,$80
.3510	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 19.97918523
>3513	88 af ea 4f				.dword	$4feaaf88
>3517	e6 00					.byte	$e6,$00
.3519	20 b7 52	jsr $52b7		jsr	FloatMultiply
.351c	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -427.16006112
>351f	71 3e ca 6a				.dword	$6aca3e71
>3523	ea 80					.byte	$ea,$80
.3525	20 dc 50	jsr $50dc		jsr	FloatCompare
.3528	20 a6 50	jsr $50a6		jsr	CompareEqual
.352b	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.352e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -21.38025431
>3531	63 61 85 55				.dword	$55856163
>3535	e6 80					.byte	$e6,$80
.3537	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 19.97918523
>353a	88 af ea 4f				.dword	$4feaaf88
>353e	e6 00					.byte	$e6,$00
.3540	20 40 51	jsr $5140		jsr	FloatDivide
.3543	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1.07012644
>3546	9c f3 7c 44				.dword	$447cf39c
>354a	e2 80					.byte	$e2,$80
.354c	20 dc 50	jsr $50dc		jsr	FloatCompare
.354f	20 a6 50	jsr $50a6		jsr	CompareEqual
.3552	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3555	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 77.00955698
>3558	54 72 02 4d				.dword	$4d027254
>355c	e8 00					.byte	$e8,$00
.355e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 77.00955698
>3561	54 72 02 4d				.dword	$4d027254
>3565	e8 00					.byte	$e8,$00
.3567	20 dc 50	jsr $50dc		jsr	FloatCompare
.356a	20 c4 50	jsr $50c4		jsr	CompareGreater
.356d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>3570	00 00 00 00				.dword	$00000000
>3574	00 00					.byte	$00,$00
.3576	20 dc 50	jsr $50dc		jsr	FloatCompare
.3579	20 a6 50	jsr $50a6		jsr	CompareEqual
.357c	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.357f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 77.00955698
>3582	54 72 02 4d				.dword	$4d027254
>3586	e8 00					.byte	$e8,$00
.3588	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 77.00955698
>358b	54 72 02 4d				.dword	$4d027254
>358f	e8 00					.byte	$e8,$00
.3591	20 dc 50	jsr $50dc		jsr	FloatCompare
.3594	20 d4 50	jsr $50d4		jsr	CompareGreaterEqual
.3597	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>359a	01 00 00 00				.dword	$00000001
>359e	00 80					.byte	$00,$80
.35a0	20 dc 50	jsr $50dc		jsr	FloatCompare
.35a3	20 a6 50	jsr $50a6		jsr	CompareEqual
.35a6	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.35a9	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 77.00955698
>35ac	54 72 02 4d				.dword	$4d027254
>35b0	e8 00					.byte	$e8,$00
.35b2	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 77.00955698
>35b5	54 72 02 4d				.dword	$4d027254
>35b9	e8 00					.byte	$e8,$00
.35bb	20 dc 50	jsr $50dc		jsr	FloatCompare
.35be	20 bc 50	jsr $50bc		jsr	CompareLess
.35c1	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>35c4	00 00 00 00				.dword	$00000000
>35c8	00 00					.byte	$00,$00
.35ca	20 dc 50	jsr $50dc		jsr	FloatCompare
.35cd	20 a6 50	jsr $50a6		jsr	CompareEqual
.35d0	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.35d3	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 77.00955698
>35d6	54 72 02 4d				.dword	$4d027254
>35da	e8 00					.byte	$e8,$00
.35dc	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 77.00955698
>35df	54 72 02 4d				.dword	$4d027254
>35e3	e8 00					.byte	$e8,$00
.35e5	20 dc 50	jsr $50dc		jsr	FloatCompare
.35e8	20 cc 50	jsr $50cc		jsr	CompareLessEqual
.35eb	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>35ee	01 00 00 00				.dword	$00000001
>35f2	00 80					.byte	$00,$80
.35f4	20 dc 50	jsr $50dc		jsr	FloatCompare
.35f7	20 a6 50	jsr $50a6		jsr	CompareEqual
.35fa	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.35fd	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 77.00955698
>3600	54 72 02 4d				.dword	$4d027254
>3604	e8 00					.byte	$e8,$00
.3606	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 77.00955698
>3609	54 72 02 4d				.dword	$4d027254
>360d	e8 00					.byte	$e8,$00
.360f	20 dc 50	jsr $50dc		jsr	FloatCompare
.3612	20 a6 50	jsr $50a6		jsr	CompareEqual
.3615	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>3618	01 00 00 00				.dword	$00000001
>361c	00 80					.byte	$00,$80
.361e	20 dc 50	jsr $50dc		jsr	FloatCompare
.3621	20 a6 50	jsr $50a6		jsr	CompareEqual
.3624	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3627	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 77.00955698
>362a	54 72 02 4d				.dword	$4d027254
>362e	e8 00					.byte	$e8,$00
.3630	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 77.00955698
>3633	54 72 02 4d				.dword	$4d027254
>3637	e8 00					.byte	$e8,$00
.3639	20 dc 50	jsr $50dc		jsr	FloatCompare
.363c	20 b6 50	jsr $50b6		jsr	CompareNotEqual
.363f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>3642	00 00 00 00				.dword	$00000000
>3646	00 00					.byte	$00,$00
.3648	20 dc 50	jsr $50dc		jsr	FloatCompare
.364b	20 a6 50	jsr $50a6		jsr	CompareEqual
.364e	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3651	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 26846
>3654	de 68 00 00				.dword	$000068de
>3658	00 00					.byte	$00,$00
.365a	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -42997
>365d	f5 a7 00 00				.dword	$0000a7f5
>3661	00 80					.byte	$00,$80
.3663	20 1b 50	jsr $501b		jsr	FloatAdd
.3666	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -16151
>3669	17 3f 00 00				.dword	$00003f17
>366d	00 80					.byte	$00,$80
.366f	20 dc 50	jsr $50dc		jsr	FloatCompare
.3672	20 a6 50	jsr $50a6		jsr	CompareEqual
.3675	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3678	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 26846
>367b	de 68 00 00				.dword	$000068de
>367f	00 00					.byte	$00,$00
.3681	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -42997
>3684	f5 a7 00 00				.dword	$0000a7f5
>3688	00 80					.byte	$00,$80
.368a	20 15 50	jsr $5015		jsr	FloatSubtract
.368d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 69843
>3690	d3 10 01 00				.dword	$000110d3
>3694	00 00					.byte	$00,$00
.3696	20 dc 50	jsr $50dc		jsr	FloatCompare
.3699	20 a6 50	jsr $50a6		jsr	CompareEqual
.369c	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.369f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 26846
>36a2	de 68 00 00				.dword	$000068de
>36a6	00 00					.byte	$00,$00
.36a8	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -42997
>36ab	f5 a7 00 00				.dword	$0000a7f5
>36af	00 80					.byte	$00,$80
.36b1	20 b7 52	jsr $52b7		jsr	FloatMultiply
.36b4	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1154297462
>36b7	76 2e cd 44				.dword	$44cd2e76
>36bb	00 80					.byte	$00,$80
.36bd	20 dc 50	jsr $50dc		jsr	FloatCompare
.36c0	20 a6 50	jsr $50a6		jsr	CompareEqual
.36c3	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.36c6	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 26846
>36c9	de 68 00 00				.dword	$000068de
>36cd	00 00					.byte	$00,$00
.36cf	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -42997
>36d2	f5 a7 00 00				.dword	$0000a7f5
>36d6	00 80					.byte	$00,$80
.36d8	20 40 51	jsr $5140		jsr	FloatDivide
.36db	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -0.62436914
>36de	f6 53 eb 4f				.dword	$4feb53f6
>36e2	e1 80					.byte	$e1,$80
.36e4	20 dc 50	jsr $50dc		jsr	FloatCompare
.36e7	20 a6 50	jsr $50a6		jsr	CompareEqual
.36ea	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.36ed	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 26846
>36f0	de 68 00 00				.dword	$000068de
>36f4	00 00					.byte	$00,$00
.36f6	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -42997
>36f9	f5 a7 00 00				.dword	$0000a7f5
>36fd	00 80					.byte	$00,$80
.36ff	20 dc 50	jsr $50dc		jsr	FloatCompare
.3702	20 a6 50	jsr $50a6		jsr	CompareEqual
.3705	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>3708	00 00 00 00				.dword	$00000000
>370c	00 00					.byte	$00,$00
.370e	20 dc 50	jsr $50dc		jsr	FloatCompare
.3711	20 a6 50	jsr $50a6		jsr	CompareEqual
.3714	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3717	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 26846
>371a	de 68 00 00				.dword	$000068de
>371e	00 00					.byte	$00,$00
.3720	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -42997
>3723	f5 a7 00 00				.dword	$0000a7f5
>3727	00 80					.byte	$00,$80
.3729	20 dc 50	jsr $50dc		jsr	FloatCompare
.372c	20 b6 50	jsr $50b6		jsr	CompareNotEqual
.372f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>3732	01 00 00 00				.dword	$00000001
>3736	00 80					.byte	$00,$80
.3738	20 dc 50	jsr $50dc		jsr	FloatCompare
.373b	20 a6 50	jsr $50a6		jsr	CompareEqual
.373e	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3741	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 26846
>3744	de 68 00 00				.dword	$000068de
>3748	00 00					.byte	$00,$00
.374a	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -42997
>374d	f5 a7 00 00				.dword	$0000a7f5
>3751	00 80					.byte	$00,$80
.3753	20 dc 50	jsr $50dc		jsr	FloatCompare
.3756	20 c4 50	jsr $50c4		jsr	CompareGreater
.3759	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>375c	01 00 00 00				.dword	$00000001
>3760	00 80					.byte	$00,$80
.3762	20 dc 50	jsr $50dc		jsr	FloatCompare
.3765	20 a6 50	jsr $50a6		jsr	CompareEqual
.3768	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.376b	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 26846
>376e	de 68 00 00				.dword	$000068de
>3772	00 00					.byte	$00,$00
.3774	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -42997
>3777	f5 a7 00 00				.dword	$0000a7f5
>377b	00 80					.byte	$00,$80
.377d	20 dc 50	jsr $50dc		jsr	FloatCompare
.3780	20 d4 50	jsr $50d4		jsr	CompareGreaterEqual
.3783	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>3786	01 00 00 00				.dword	$00000001
>378a	00 80					.byte	$00,$80
.378c	20 dc 50	jsr $50dc		jsr	FloatCompare
.378f	20 a6 50	jsr $50a6		jsr	CompareEqual
.3792	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3795	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 26846
>3798	de 68 00 00				.dword	$000068de
>379c	00 00					.byte	$00,$00
.379e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -42997
>37a1	f5 a7 00 00				.dword	$0000a7f5
>37a5	00 80					.byte	$00,$80
.37a7	20 dc 50	jsr $50dc		jsr	FloatCompare
.37aa	20 bc 50	jsr $50bc		jsr	CompareLess
.37ad	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>37b0	00 00 00 00				.dword	$00000000
>37b4	00 00					.byte	$00,$00
.37b6	20 dc 50	jsr $50dc		jsr	FloatCompare
.37b9	20 a6 50	jsr $50a6		jsr	CompareEqual
.37bc	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.37bf	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 26846
>37c2	de 68 00 00				.dword	$000068de
>37c6	00 00					.byte	$00,$00
.37c8	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -42997
>37cb	f5 a7 00 00				.dword	$0000a7f5
>37cf	00 80					.byte	$00,$80
.37d1	20 dc 50	jsr $50dc		jsr	FloatCompare
.37d4	20 cc 50	jsr $50cc		jsr	CompareLessEqual
.37d7	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>37da	00 00 00 00				.dword	$00000000
>37de	00 00					.byte	$00,$00
.37e0	20 dc 50	jsr $50dc		jsr	FloatCompare
.37e3	20 a6 50	jsr $50a6		jsr	CompareEqual
.37e6	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.37e9	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -75.40455171
>37ec	b3 90 67 4b				.dword	$4b6790b3
>37f0	e8 80					.byte	$e8,$80
.37f2	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -52.56669636
>37f5	06 26 22 69				.dword	$69222606
>37f9	e7 80					.byte	$e7,$80
.37fb	20 1b 50	jsr $501b		jsr	FloatAdd
.37fe	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -127.97124808
>3801	b7 a3 f8 7f				.dword	$7ff8a3b7
>3805	e8 80					.byte	$e8,$80
.3807	20 dc 50	jsr $50dc		jsr	FloatCompare
.380a	20 a6 50	jsr $50a6		jsr	CompareEqual
.380d	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3810	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -75.40455171
>3813	b3 90 67 4b				.dword	$4b6790b3
>3817	e8 80					.byte	$e8,$80
.3819	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -52.56669636
>381c	06 26 22 69				.dword	$69222606
>3820	e7 80					.byte	$e7,$80
.3822	20 15 50	jsr $5015		jsr	FloatSubtract
.3825	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -22.83785535
>3828	c1 f6 59 5b				.dword	$5b59f6c1
>382c	e6 80					.byte	$e6,$80
.382e	20 dc 50	jsr $50dc		jsr	FloatCompare
.3831	20 a6 50	jsr $50a6		jsr	CompareEqual
.3834	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3837	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -75.40455171
>383a	b3 90 67 4b				.dword	$4b6790b3
>383e	e8 80					.byte	$e8,$80
.3840	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -52.56669636
>3843	06 26 22 69				.dword	$69222606
>3847	e7 80					.byte	$e7,$80
.3849	20 b7 52	jsr $52b7		jsr	FloatMultiply
.384c	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 3963.76817432
>384f	39 25 de 7b				.dword	$7bde2539
>3853	ed 00					.byte	$ed,$00
.3855	20 dc 50	jsr $50dc		jsr	FloatCompare
.3858	20 a6 50	jsr $50a6		jsr	CompareEqual
.385b	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.385e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -75.40455171
>3861	b3 90 67 4b				.dword	$4b6790b3
>3865	e8 80					.byte	$e8,$80
.3867	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -52.56669636
>386a	06 26 22 69				.dword	$69222606
>386e	e7 80					.byte	$e7,$80
.3870	20 40 51	jsr $5140		jsr	FloatDivide
.3873	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 1.43445483
>3876	a2 1b ce 5b				.dword	$5bce1ba2
>387a	e2 00					.byte	$e2,$00
.387c	20 dc 50	jsr $50dc		jsr	FloatCompare
.387f	20 a6 50	jsr $50a6		jsr	CompareEqual
.3882	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3885	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 38.36316514
>3888	c8 f0 b9 4c				.dword	$4cb9f0c8
>388c	e7 00					.byte	$e7,$00
.388e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 65.51607678
>3891	9c 1d 84 41				.dword	$41841d9c
>3895	e8 00					.byte	$e8,$00
.3897	20 dc 50	jsr $50dc		jsr	FloatCompare
.389a	20 c4 50	jsr $50c4		jsr	CompareGreater
.389d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>38a0	00 00 00 00				.dword	$00000000
>38a4	00 00					.byte	$00,$00
.38a6	20 dc 50	jsr $50dc		jsr	FloatCompare
.38a9	20 a6 50	jsr $50a6		jsr	CompareEqual
.38ac	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.38af	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 38.36316514
>38b2	c8 f0 b9 4c				.dword	$4cb9f0c8
>38b6	e7 00					.byte	$e7,$00
.38b8	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 65.51607678
>38bb	9c 1d 84 41				.dword	$41841d9c
>38bf	e8 00					.byte	$e8,$00
.38c1	20 dc 50	jsr $50dc		jsr	FloatCompare
.38c4	20 d4 50	jsr $50d4		jsr	CompareGreaterEqual
.38c7	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>38ca	00 00 00 00				.dword	$00000000
>38ce	00 00					.byte	$00,$00
.38d0	20 dc 50	jsr $50dc		jsr	FloatCompare
.38d3	20 a6 50	jsr $50a6		jsr	CompareEqual
.38d6	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.38d9	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 38.36316514
>38dc	c8 f0 b9 4c				.dword	$4cb9f0c8
>38e0	e7 00					.byte	$e7,$00
.38e2	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 65.51607678
>38e5	9c 1d 84 41				.dword	$41841d9c
>38e9	e8 00					.byte	$e8,$00
.38eb	20 dc 50	jsr $50dc		jsr	FloatCompare
.38ee	20 bc 50	jsr $50bc		jsr	CompareLess
.38f1	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>38f4	01 00 00 00				.dword	$00000001
>38f8	00 80					.byte	$00,$80
.38fa	20 dc 50	jsr $50dc		jsr	FloatCompare
.38fd	20 a6 50	jsr $50a6		jsr	CompareEqual
.3900	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3903	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 38.36316514
>3906	c8 f0 b9 4c				.dword	$4cb9f0c8
>390a	e7 00					.byte	$e7,$00
.390c	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 65.51607678
>390f	9c 1d 84 41				.dword	$41841d9c
>3913	e8 00					.byte	$e8,$00
.3915	20 dc 50	jsr $50dc		jsr	FloatCompare
.3918	20 cc 50	jsr $50cc		jsr	CompareLessEqual
.391b	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>391e	01 00 00 00				.dword	$00000001
>3922	00 80					.byte	$00,$80
.3924	20 dc 50	jsr $50dc		jsr	FloatCompare
.3927	20 a6 50	jsr $50a6		jsr	CompareEqual
.392a	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.392d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 38.36316514
>3930	c8 f0 b9 4c				.dword	$4cb9f0c8
>3934	e7 00					.byte	$e7,$00
.3936	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 65.51607678
>3939	9c 1d 84 41				.dword	$41841d9c
>393d	e8 00					.byte	$e8,$00
.393f	20 dc 50	jsr $50dc		jsr	FloatCompare
.3942	20 a6 50	jsr $50a6		jsr	CompareEqual
.3945	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>3948	00 00 00 00				.dword	$00000000
>394c	00 00					.byte	$00,$00
.394e	20 dc 50	jsr $50dc		jsr	FloatCompare
.3951	20 a6 50	jsr $50a6		jsr	CompareEqual
.3954	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3957	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 38.36316514
>395a	c8 f0 b9 4c				.dword	$4cb9f0c8
>395e	e7 00					.byte	$e7,$00
.3960	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 65.51607678
>3963	9c 1d 84 41				.dword	$41841d9c
>3967	e8 00					.byte	$e8,$00
.3969	20 dc 50	jsr $50dc		jsr	FloatCompare
.396c	20 b6 50	jsr $50b6		jsr	CompareNotEqual
.396f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>3972	01 00 00 00				.dword	$00000001
>3976	00 80					.byte	$00,$80
.3978	20 dc 50	jsr $50dc		jsr	FloatCompare
.397b	20 a6 50	jsr $50a6		jsr	CompareEqual
.397e	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3981	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 29384
>3984	c8 72 00 00				.dword	$000072c8
>3988	00 00					.byte	$00,$00
.398a	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -14335
>398d	ff 37 00 00				.dword	$000037ff
>3991	00 80					.byte	$00,$80
.3993	20 1b 50	jsr $501b		jsr	FloatAdd
.3996	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 15049
>3999	c9 3a 00 00				.dword	$00003ac9
>399d	00 00					.byte	$00,$00
.399f	20 dc 50	jsr $50dc		jsr	FloatCompare
.39a2	20 a6 50	jsr $50a6		jsr	CompareEqual
.39a5	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.39a8	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 29384
>39ab	c8 72 00 00				.dword	$000072c8
>39af	00 00					.byte	$00,$00
.39b1	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -14335
>39b4	ff 37 00 00				.dword	$000037ff
>39b8	00 80					.byte	$00,$80
.39ba	20 15 50	jsr $5015		jsr	FloatSubtract
.39bd	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 43719
>39c0	c7 aa 00 00				.dword	$0000aac7
>39c4	00 00					.byte	$00,$00
.39c6	20 dc 50	jsr $50dc		jsr	FloatCompare
.39c9	20 a6 50	jsr $50a6		jsr	CompareEqual
.39cc	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.39cf	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 29384
>39d2	c8 72 00 00				.dword	$000072c8
>39d6	00 00					.byte	$00,$00
.39d8	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -14335
>39db	ff 37 00 00				.dword	$000037ff
>39df	00 80					.byte	$00,$80
.39e1	20 b7 52	jsr $52b7		jsr	FloatMultiply
.39e4	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -421219640
>39e7	38 4d 1b 19				.dword	$191b4d38
>39eb	00 80					.byte	$00,$80
.39ed	20 dc 50	jsr $50dc		jsr	FloatCompare
.39f0	20 a6 50	jsr $50a6		jsr	CompareEqual
.39f3	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.39f6	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 29384
>39f9	c8 72 00 00				.dword	$000072c8
>39fd	00 00					.byte	$00,$00
.39ff	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -14335
>3a02	ff 37 00 00				.dword	$000037ff
>3a06	00 80					.byte	$00,$80
.3a08	20 40 51	jsr $5140		jsr	FloatDivide
.3a0b	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -2.04980816
>3a0e	48 07 98 41				.dword	$41980748
>3a12	e3 80					.byte	$e3,$80
.3a14	20 dc 50	jsr $50dc		jsr	FloatCompare
.3a17	20 a6 50	jsr $50a6		jsr	CompareEqual
.3a1a	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3a1d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -14335
>3a20	ff 37 00 00				.dword	$000037ff
>3a24	00 80					.byte	$00,$80
.3a26	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -14335
>3a29	ff 37 00 00				.dword	$000037ff
>3a2d	00 80					.byte	$00,$80
.3a2f	20 dc 50	jsr $50dc		jsr	FloatCompare
.3a32	20 a6 50	jsr $50a6		jsr	CompareEqual
.3a35	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>3a38	01 00 00 00				.dword	$00000001
>3a3c	00 80					.byte	$00,$80
.3a3e	20 dc 50	jsr $50dc		jsr	FloatCompare
.3a41	20 a6 50	jsr $50a6		jsr	CompareEqual
.3a44	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3a47	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -14335
>3a4a	ff 37 00 00				.dword	$000037ff
>3a4e	00 80					.byte	$00,$80
.3a50	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -14335
>3a53	ff 37 00 00				.dword	$000037ff
>3a57	00 80					.byte	$00,$80
.3a59	20 dc 50	jsr $50dc		jsr	FloatCompare
.3a5c	20 b6 50	jsr $50b6		jsr	CompareNotEqual
.3a5f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>3a62	00 00 00 00				.dword	$00000000
>3a66	00 00					.byte	$00,$00
.3a68	20 dc 50	jsr $50dc		jsr	FloatCompare
.3a6b	20 a6 50	jsr $50a6		jsr	CompareEqual
.3a6e	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3a71	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -14335
>3a74	ff 37 00 00				.dword	$000037ff
>3a78	00 80					.byte	$00,$80
.3a7a	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -14335
>3a7d	ff 37 00 00				.dword	$000037ff
>3a81	00 80					.byte	$00,$80
.3a83	20 dc 50	jsr $50dc		jsr	FloatCompare
.3a86	20 c4 50	jsr $50c4		jsr	CompareGreater
.3a89	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>3a8c	00 00 00 00				.dword	$00000000
>3a90	00 00					.byte	$00,$00
.3a92	20 dc 50	jsr $50dc		jsr	FloatCompare
.3a95	20 a6 50	jsr $50a6		jsr	CompareEqual
.3a98	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3a9b	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -14335
>3a9e	ff 37 00 00				.dword	$000037ff
>3aa2	00 80					.byte	$00,$80
.3aa4	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -14335
>3aa7	ff 37 00 00				.dword	$000037ff
>3aab	00 80					.byte	$00,$80
.3aad	20 dc 50	jsr $50dc		jsr	FloatCompare
.3ab0	20 d4 50	jsr $50d4		jsr	CompareGreaterEqual
.3ab3	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>3ab6	01 00 00 00				.dword	$00000001
>3aba	00 80					.byte	$00,$80
.3abc	20 dc 50	jsr $50dc		jsr	FloatCompare
.3abf	20 a6 50	jsr $50a6		jsr	CompareEqual
.3ac2	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3ac5	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -14335
>3ac8	ff 37 00 00				.dword	$000037ff
>3acc	00 80					.byte	$00,$80
.3ace	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -14335
>3ad1	ff 37 00 00				.dword	$000037ff
>3ad5	00 80					.byte	$00,$80
.3ad7	20 dc 50	jsr $50dc		jsr	FloatCompare
.3ada	20 bc 50	jsr $50bc		jsr	CompareLess
.3add	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>3ae0	00 00 00 00				.dword	$00000000
>3ae4	00 00					.byte	$00,$00
.3ae6	20 dc 50	jsr $50dc		jsr	FloatCompare
.3ae9	20 a6 50	jsr $50a6		jsr	CompareEqual
.3aec	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3aef	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -14335
>3af2	ff 37 00 00				.dword	$000037ff
>3af6	00 80					.byte	$00,$80
.3af8	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -14335
>3afb	ff 37 00 00				.dword	$000037ff
>3aff	00 80					.byte	$00,$80
.3b01	20 dc 50	jsr $50dc		jsr	FloatCompare
.3b04	20 cc 50	jsr $50cc		jsr	CompareLessEqual
.3b07	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>3b0a	01 00 00 00				.dword	$00000001
>3b0e	00 80					.byte	$00,$80
.3b10	20 dc 50	jsr $50dc		jsr	FloatCompare
.3b13	20 a6 50	jsr $50a6		jsr	CompareEqual
.3b16	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3b19	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -78.12739937
>3b1c	3f 9d 20 4e				.dword	$4e209d3f
>3b20	e8 80					.byte	$e8,$80
.3b22	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -80.81274804
>3b25	41 10 d0 50				.dword	$50d01041
>3b29	e8 80					.byte	$e8,$80
.3b2b	20 1b 50	jsr $501b		jsr	FloatAdd
.3b2e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -158.9401474
>3b31	c0 56 78 4f				.dword	$4f7856c0
>3b35	e9 80					.byte	$e9,$80
.3b37	20 dc 50	jsr $50dc		jsr	FloatCompare
.3b3a	20 a6 50	jsr $50a6		jsr	CompareEqual
.3b3d	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3b40	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -78.12739937
>3b43	3f 9d 20 4e				.dword	$4e209d3f
>3b47	e8 80					.byte	$e8,$80
.3b49	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -80.81274804
>3b4c	41 10 d0 50				.dword	$50d01041
>3b50	e8 80					.byte	$e8,$80
.3b52	20 15 50	jsr $5015		jsr	FloatSubtract
.3b55	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 2.68534867
>3b58	56 60 ee 55				.dword	$55ee6056
>3b5c	e3 00					.byte	$e3,$00
.3b5e	20 dc 50	jsr $50dc		jsr	FloatCompare
.3b61	20 a6 50	jsr $50a6		jsr	CompareEqual
.3b64	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3b67	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -78.12739937
>3b6a	3f 9d 20 4e				.dword	$4e209d3f
>3b6e	e8 80					.byte	$e8,$80
.3b70	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -80.81274804
>3b73	41 10 d0 50				.dword	$50d01041
>3b77	e8 80					.byte	$e8,$80
.3b79	20 b7 52	jsr $52b7		jsr	FloatMultiply
.3b7c	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 6313.68983985
>3b7f	65 c2 a6 62				.dword	$62a6c265
>3b83	ee 00					.byte	$ee,$00
.3b85	20 dc 50	jsr $50dc		jsr	FloatCompare
.3b88	20 a6 50	jsr $50a6		jsr	CompareEqual
.3b8b	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3b8e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -78.12739937
>3b91	3f 9d 20 4e				.dword	$4e209d3f
>3b95	e8 80					.byte	$e8,$80
.3b97	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -80.81274804
>3b9a	41 10 d0 50				.dword	$50d01041
>3b9e	e8 80					.byte	$e8,$80
.3ba0	20 40 51	jsr $5140		jsr	FloatDivide
.3ba3	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0.96677073
>3ba6	ae 24 bf 7b				.dword	$7bbf24ae
>3baa	e1 00					.byte	$e1,$00
.3bac	20 dc 50	jsr $50dc		jsr	FloatCompare
.3baf	20 a6 50	jsr $50a6		jsr	CompareEqual
.3bb2	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3bb5	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -7.26208796
>3bb8	25 83 31 74				.dword	$74318325
>3bbc	e4 80					.byte	$e4,$80
.3bbe	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -7.26208796
>3bc1	25 83 31 74				.dword	$74318325
>3bc5	e4 80					.byte	$e4,$80
.3bc7	20 dc 50	jsr $50dc		jsr	FloatCompare
.3bca	20 c4 50	jsr $50c4		jsr	CompareGreater
.3bcd	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>3bd0	00 00 00 00				.dword	$00000000
>3bd4	00 00					.byte	$00,$00
.3bd6	20 dc 50	jsr $50dc		jsr	FloatCompare
.3bd9	20 a6 50	jsr $50a6		jsr	CompareEqual
.3bdc	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3bdf	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -7.26208796
>3be2	25 83 31 74				.dword	$74318325
>3be6	e4 80					.byte	$e4,$80
.3be8	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -7.26208796
>3beb	25 83 31 74				.dword	$74318325
>3bef	e4 80					.byte	$e4,$80
.3bf1	20 dc 50	jsr $50dc		jsr	FloatCompare
.3bf4	20 d4 50	jsr $50d4		jsr	CompareGreaterEqual
.3bf7	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>3bfa	01 00 00 00				.dword	$00000001
>3bfe	00 80					.byte	$00,$80
.3c00	20 dc 50	jsr $50dc		jsr	FloatCompare
.3c03	20 a6 50	jsr $50a6		jsr	CompareEqual
.3c06	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3c09	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -7.26208796
>3c0c	25 83 31 74				.dword	$74318325
>3c10	e4 80					.byte	$e4,$80
.3c12	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -7.26208796
>3c15	25 83 31 74				.dword	$74318325
>3c19	e4 80					.byte	$e4,$80
.3c1b	20 dc 50	jsr $50dc		jsr	FloatCompare
.3c1e	20 bc 50	jsr $50bc		jsr	CompareLess
.3c21	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>3c24	00 00 00 00				.dword	$00000000
>3c28	00 00					.byte	$00,$00
.3c2a	20 dc 50	jsr $50dc		jsr	FloatCompare
.3c2d	20 a6 50	jsr $50a6		jsr	CompareEqual
.3c30	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3c33	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -7.26208796
>3c36	25 83 31 74				.dword	$74318325
>3c3a	e4 80					.byte	$e4,$80
.3c3c	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -7.26208796
>3c3f	25 83 31 74				.dword	$74318325
>3c43	e4 80					.byte	$e4,$80
.3c45	20 dc 50	jsr $50dc		jsr	FloatCompare
.3c48	20 cc 50	jsr $50cc		jsr	CompareLessEqual
.3c4b	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>3c4e	01 00 00 00				.dword	$00000001
>3c52	00 80					.byte	$00,$80
.3c54	20 dc 50	jsr $50dc		jsr	FloatCompare
.3c57	20 a6 50	jsr $50a6		jsr	CompareEqual
.3c5a	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3c5d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -7.26208796
>3c60	25 83 31 74				.dword	$74318325
>3c64	e4 80					.byte	$e4,$80
.3c66	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -7.26208796
>3c69	25 83 31 74				.dword	$74318325
>3c6d	e4 80					.byte	$e4,$80
.3c6f	20 dc 50	jsr $50dc		jsr	FloatCompare
.3c72	20 a6 50	jsr $50a6		jsr	CompareEqual
.3c75	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>3c78	01 00 00 00				.dword	$00000001
>3c7c	00 80					.byte	$00,$80
.3c7e	20 dc 50	jsr $50dc		jsr	FloatCompare
.3c81	20 a6 50	jsr $50a6		jsr	CompareEqual
.3c84	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3c87	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -7.26208796
>3c8a	25 83 31 74				.dword	$74318325
>3c8e	e4 80					.byte	$e4,$80
.3c90	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -7.26208796
>3c93	25 83 31 74				.dword	$74318325
>3c97	e4 80					.byte	$e4,$80
.3c99	20 dc 50	jsr $50dc		jsr	FloatCompare
.3c9c	20 b6 50	jsr $50b6		jsr	CompareNotEqual
.3c9f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>3ca2	00 00 00 00				.dword	$00000000
>3ca6	00 00					.byte	$00,$00
.3ca8	20 dc 50	jsr $50dc		jsr	FloatCompare
.3cab	20 a6 50	jsr $50a6		jsr	CompareEqual
.3cae	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3cb1	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 27727
>3cb4	4f 6c 00 00				.dword	$00006c4f
>3cb8	00 00					.byte	$00,$00
.3cba	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -36850
>3cbd	f2 8f 00 00				.dword	$00008ff2
>3cc1	00 80					.byte	$00,$80
.3cc3	20 1b 50	jsr $501b		jsr	FloatAdd
.3cc6	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -9123
>3cc9	a3 23 00 00				.dword	$000023a3
>3ccd	00 80					.byte	$00,$80
.3ccf	20 dc 50	jsr $50dc		jsr	FloatCompare
.3cd2	20 a6 50	jsr $50a6		jsr	CompareEqual
.3cd5	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3cd8	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 27727
>3cdb	4f 6c 00 00				.dword	$00006c4f
>3cdf	00 00					.byte	$00,$00
.3ce1	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -36850
>3ce4	f2 8f 00 00				.dword	$00008ff2
>3ce8	00 80					.byte	$00,$80
.3cea	20 15 50	jsr $5015		jsr	FloatSubtract
.3ced	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 64577
>3cf0	41 fc 00 00				.dword	$0000fc41
>3cf4	00 00					.byte	$00,$00
.3cf6	20 dc 50	jsr $50dc		jsr	FloatCompare
.3cf9	20 a6 50	jsr $50a6		jsr	CompareEqual
.3cfc	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3cff	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 27727
>3d02	4f 6c 00 00				.dword	$00006c4f
>3d06	00 00					.byte	$00,$00
.3d08	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -36850
>3d0b	f2 8f 00 00				.dword	$00008ff2
>3d0f	00 80					.byte	$00,$80
.3d11	20 b7 52	jsr $52b7		jsr	FloatMultiply
.3d14	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1021739950
>3d17	ae 83 e6 3c				.dword	$3ce683ae
>3d1b	00 80					.byte	$00,$80
.3d1d	20 dc 50	jsr $50dc		jsr	FloatCompare
.3d20	20 a6 50	jsr $50a6		jsr	CompareEqual
.3d23	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3d26	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 27727
>3d29	4f 6c 00 00				.dword	$00006c4f
>3d2d	00 00					.byte	$00,$00
.3d2f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -36850
>3d32	f2 8f 00 00				.dword	$00008ff2
>3d36	00 80					.byte	$00,$80
.3d38	20 40 51	jsr $5140		jsr	FloatDivide
.3d3b	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -0.75242877
>3d3e	00 96 4f 60				.dword	$604f9600
>3d42	e1 80					.byte	$e1,$80
.3d44	20 dc 50	jsr $50dc		jsr	FloatCompare
.3d47	20 a6 50	jsr $50a6		jsr	CompareEqual
.3d4a	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3d4d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 27727
>3d50	4f 6c 00 00				.dword	$00006c4f
>3d54	00 00					.byte	$00,$00
.3d56	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -36850
>3d59	f2 8f 00 00				.dword	$00008ff2
>3d5d	00 80					.byte	$00,$80
.3d5f	20 dc 50	jsr $50dc		jsr	FloatCompare
.3d62	20 a6 50	jsr $50a6		jsr	CompareEqual
.3d65	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>3d68	00 00 00 00				.dword	$00000000
>3d6c	00 00					.byte	$00,$00
.3d6e	20 dc 50	jsr $50dc		jsr	FloatCompare
.3d71	20 a6 50	jsr $50a6		jsr	CompareEqual
.3d74	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3d77	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 27727
>3d7a	4f 6c 00 00				.dword	$00006c4f
>3d7e	00 00					.byte	$00,$00
.3d80	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -36850
>3d83	f2 8f 00 00				.dword	$00008ff2
>3d87	00 80					.byte	$00,$80
.3d89	20 dc 50	jsr $50dc		jsr	FloatCompare
.3d8c	20 b6 50	jsr $50b6		jsr	CompareNotEqual
.3d8f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>3d92	01 00 00 00				.dword	$00000001
>3d96	00 80					.byte	$00,$80
.3d98	20 dc 50	jsr $50dc		jsr	FloatCompare
.3d9b	20 a6 50	jsr $50a6		jsr	CompareEqual
.3d9e	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3da1	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 27727
>3da4	4f 6c 00 00				.dword	$00006c4f
>3da8	00 00					.byte	$00,$00
.3daa	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -36850
>3dad	f2 8f 00 00				.dword	$00008ff2
>3db1	00 80					.byte	$00,$80
.3db3	20 dc 50	jsr $50dc		jsr	FloatCompare
.3db6	20 c4 50	jsr $50c4		jsr	CompareGreater
.3db9	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>3dbc	01 00 00 00				.dword	$00000001
>3dc0	00 80					.byte	$00,$80
.3dc2	20 dc 50	jsr $50dc		jsr	FloatCompare
.3dc5	20 a6 50	jsr $50a6		jsr	CompareEqual
.3dc8	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3dcb	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 27727
>3dce	4f 6c 00 00				.dword	$00006c4f
>3dd2	00 00					.byte	$00,$00
.3dd4	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -36850
>3dd7	f2 8f 00 00				.dword	$00008ff2
>3ddb	00 80					.byte	$00,$80
.3ddd	20 dc 50	jsr $50dc		jsr	FloatCompare
.3de0	20 d4 50	jsr $50d4		jsr	CompareGreaterEqual
.3de3	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>3de6	01 00 00 00				.dword	$00000001
>3dea	00 80					.byte	$00,$80
.3dec	20 dc 50	jsr $50dc		jsr	FloatCompare
.3def	20 a6 50	jsr $50a6		jsr	CompareEqual
.3df2	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3df5	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 27727
>3df8	4f 6c 00 00				.dword	$00006c4f
>3dfc	00 00					.byte	$00,$00
.3dfe	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -36850
>3e01	f2 8f 00 00				.dword	$00008ff2
>3e05	00 80					.byte	$00,$80
.3e07	20 dc 50	jsr $50dc		jsr	FloatCompare
.3e0a	20 bc 50	jsr $50bc		jsr	CompareLess
.3e0d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>3e10	00 00 00 00				.dword	$00000000
>3e14	00 00					.byte	$00,$00
.3e16	20 dc 50	jsr $50dc		jsr	FloatCompare
.3e19	20 a6 50	jsr $50a6		jsr	CompareEqual
.3e1c	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3e1f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 27727
>3e22	4f 6c 00 00				.dword	$00006c4f
>3e26	00 00					.byte	$00,$00
.3e28	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -36850
>3e2b	f2 8f 00 00				.dword	$00008ff2
>3e2f	00 80					.byte	$00,$80
.3e31	20 dc 50	jsr $50dc		jsr	FloatCompare
.3e34	20 cc 50	jsr $50cc		jsr	CompareLessEqual
.3e37	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>3e3a	00 00 00 00				.dword	$00000000
>3e3e	00 00					.byte	$00,$00
.3e40	20 dc 50	jsr $50dc		jsr	FloatCompare
.3e43	20 a6 50	jsr $50a6		jsr	CompareEqual
.3e46	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3e49	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 25.91107152
>3e4c	ef ef a4 67				.dword	$67a4efef
>3e50	e6 00					.byte	$e6,$00
.3e52	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -60.29302665
>3e55	97 07 96 78				.dword	$78960797
>3e59	e7 80					.byte	$e7,$80
.3e5b	20 1b 50	jsr $501b		jsr	FloatAdd
.3e5e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -34.38195513
>3e61	9f 8f c3 44				.dword	$44c38f9f
>3e65	e7 80					.byte	$e7,$80
.3e67	20 dc 50	jsr $50dc		jsr	FloatCompare
.3e6a	20 a6 50	jsr $50a6		jsr	CompareEqual
.3e6d	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3e70	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 25.91107152
>3e73	ef ef a4 67				.dword	$67a4efef
>3e77	e6 00					.byte	$e6,$00
.3e79	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -60.29302665
>3e7c	97 07 96 78				.dword	$78960797
>3e80	e7 80					.byte	$e7,$80
.3e82	20 15 50	jsr $5015		jsr	FloatSubtract
.3e85	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 86.20409816
>3e88	c7 3f 34 56				.dword	$56343fc7
>3e8c	e8 00					.byte	$e8,$00
.3e8e	20 dc 50	jsr $50dc		jsr	FloatCompare
.3e91	20 a6 50	jsr $50a6		jsr	CompareEqual
.3e94	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3e97	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 25.91107152
>3e9a	ef ef a4 67				.dword	$67a4efef
>3e9e	e6 00					.byte	$e6,$00
.3ea0	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -60.29302665
>3ea3	97 07 96 78				.dword	$78960797
>3ea7	e7 80					.byte	$e7,$80
.3ea9	20 b7 52	jsr $52b7		jsr	FloatMultiply
.3eac	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1562.25692531
>3eaf	5e 1c a4 61				.dword	$61a41c5e
>3eb3	ec 80					.byte	$ec,$80
.3eb5	20 dc 50	jsr $50dc		jsr	FloatCompare
.3eb8	20 a6 50	jsr $50a6		jsr	CompareEqual
.3ebb	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3ebe	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 25.91107152
>3ec1	ef ef a4 67				.dword	$67a4efef
>3ec5	e6 00					.byte	$e6,$00
.3ec7	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -60.29302665
>3eca	97 07 96 78				.dword	$78960797
>3ece	e7 80					.byte	$e7,$80
.3ed0	20 40 51	jsr $5140		jsr	FloatDivide
.3ed3	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -0.42975238
>3ed6	81 40 04 6e				.dword	$6e044081
>3eda	e0 80					.byte	$e0,$80
.3edc	20 dc 50	jsr $50dc		jsr	FloatCompare
.3edf	20 a6 50	jsr $50a6		jsr	CompareEqual
.3ee2	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3ee5	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -50.58896898
>3ee8	58 8d 2d 65				.dword	$652d8d58
>3eec	e7 80					.byte	$e7,$80
.3eee	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -50.58896898
>3ef1	58 8d 2d 65				.dword	$652d8d58
>3ef5	e7 80					.byte	$e7,$80
.3ef7	20 dc 50	jsr $50dc		jsr	FloatCompare
.3efa	20 c4 50	jsr $50c4		jsr	CompareGreater
.3efd	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>3f00	00 00 00 00				.dword	$00000000
>3f04	00 00					.byte	$00,$00
.3f06	20 dc 50	jsr $50dc		jsr	FloatCompare
.3f09	20 a6 50	jsr $50a6		jsr	CompareEqual
.3f0c	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3f0f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -50.58896898
>3f12	58 8d 2d 65				.dword	$652d8d58
>3f16	e7 80					.byte	$e7,$80
.3f18	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -50.58896898
>3f1b	58 8d 2d 65				.dword	$652d8d58
>3f1f	e7 80					.byte	$e7,$80
.3f21	20 dc 50	jsr $50dc		jsr	FloatCompare
.3f24	20 d4 50	jsr $50d4		jsr	CompareGreaterEqual
.3f27	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>3f2a	01 00 00 00				.dword	$00000001
>3f2e	00 80					.byte	$00,$80
.3f30	20 dc 50	jsr $50dc		jsr	FloatCompare
.3f33	20 a6 50	jsr $50a6		jsr	CompareEqual
.3f36	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3f39	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -50.58896898
>3f3c	58 8d 2d 65				.dword	$652d8d58
>3f40	e7 80					.byte	$e7,$80
.3f42	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -50.58896898
>3f45	58 8d 2d 65				.dword	$652d8d58
>3f49	e7 80					.byte	$e7,$80
.3f4b	20 dc 50	jsr $50dc		jsr	FloatCompare
.3f4e	20 bc 50	jsr $50bc		jsr	CompareLess
.3f51	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>3f54	00 00 00 00				.dword	$00000000
>3f58	00 00					.byte	$00,$00
.3f5a	20 dc 50	jsr $50dc		jsr	FloatCompare
.3f5d	20 a6 50	jsr $50a6		jsr	CompareEqual
.3f60	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3f63	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -50.58896898
>3f66	58 8d 2d 65				.dword	$652d8d58
>3f6a	e7 80					.byte	$e7,$80
.3f6c	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -50.58896898
>3f6f	58 8d 2d 65				.dword	$652d8d58
>3f73	e7 80					.byte	$e7,$80
.3f75	20 dc 50	jsr $50dc		jsr	FloatCompare
.3f78	20 cc 50	jsr $50cc		jsr	CompareLessEqual
.3f7b	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>3f7e	01 00 00 00				.dword	$00000001
>3f82	00 80					.byte	$00,$80
.3f84	20 dc 50	jsr $50dc		jsr	FloatCompare
.3f87	20 a6 50	jsr $50a6		jsr	CompareEqual
.3f8a	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3f8d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -50.58896898
>3f90	58 8d 2d 65				.dword	$652d8d58
>3f94	e7 80					.byte	$e7,$80
.3f96	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -50.58896898
>3f99	58 8d 2d 65				.dword	$652d8d58
>3f9d	e7 80					.byte	$e7,$80
.3f9f	20 dc 50	jsr $50dc		jsr	FloatCompare
.3fa2	20 a6 50	jsr $50a6		jsr	CompareEqual
.3fa5	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>3fa8	01 00 00 00				.dword	$00000001
>3fac	00 80					.byte	$00,$80
.3fae	20 dc 50	jsr $50dc		jsr	FloatCompare
.3fb1	20 a6 50	jsr $50a6		jsr	CompareEqual
.3fb4	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3fb7	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -50.58896898
>3fba	58 8d 2d 65				.dword	$652d8d58
>3fbe	e7 80					.byte	$e7,$80
.3fc0	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -50.58896898
>3fc3	58 8d 2d 65				.dword	$652d8d58
>3fc7	e7 80					.byte	$e7,$80
.3fc9	20 dc 50	jsr $50dc		jsr	FloatCompare
.3fcc	20 b6 50	jsr $50b6		jsr	CompareNotEqual
.3fcf	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>3fd2	00 00 00 00				.dword	$00000000
>3fd6	00 00					.byte	$00,$00
.3fd8	20 dc 50	jsr $50dc		jsr	FloatCompare
.3fdb	20 a6 50	jsr $50a6		jsr	CompareEqual
.3fde	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.3fe1	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -26646
>3fe4	16 68 00 00				.dword	$00006816
>3fe8	00 80					.byte	$00,$80
.3fea	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -34451
>3fed	93 86 00 00				.dword	$00008693
>3ff1	00 80					.byte	$00,$80
.3ff3	20 1b 50	jsr $501b		jsr	FloatAdd
.3ff6	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -61097
>3ff9	a9 ee 00 00				.dword	$0000eea9
>3ffd	00 80					.byte	$00,$80
.3fff	20 dc 50	jsr $50dc		jsr	FloatCompare
.4002	20 a6 50	jsr $50a6		jsr	CompareEqual
.4005	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4008	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -26646
>400b	16 68 00 00				.dword	$00006816
>400f	00 80					.byte	$00,$80
.4011	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -34451
>4014	93 86 00 00				.dword	$00008693
>4018	00 80					.byte	$00,$80
.401a	20 15 50	jsr $5015		jsr	FloatSubtract
.401d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 7805
>4020	7d 1e 00 00				.dword	$00001e7d
>4024	00 00					.byte	$00,$00
.4026	20 dc 50	jsr $50dc		jsr	FloatCompare
.4029	20 a6 50	jsr $50a6		jsr	CompareEqual
.402c	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.402f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -26646
>4032	16 68 00 00				.dword	$00006816
>4036	00 80					.byte	$00,$80
.4038	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -34451
>403b	93 86 00 00				.dword	$00008693
>403f	00 80					.byte	$00,$80
.4041	20 b7 52	jsr $52b7		jsr	FloatMultiply
.4044	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 917981346
>4047	a2 48 b7 36				.dword	$36b748a2
>404b	00 00					.byte	$00,$00
.404d	20 dc 50	jsr $50dc		jsr	FloatCompare
.4050	20 a6 50	jsr $50a6		jsr	CompareEqual
.4053	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4056	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -26646
>4059	16 68 00 00				.dword	$00006816
>405d	00 80					.byte	$00,$80
.405f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -34451
>4062	93 86 00 00				.dword	$00008693
>4066	00 80					.byte	$00,$80
.4068	20 40 51	jsr $5140		jsr	FloatDivide
.406b	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0.77344634
>406e	28 4a 00 63				.dword	$63004a28
>4072	e1 00					.byte	$e1,$00
.4074	20 dc 50	jsr $50dc		jsr	FloatCompare
.4077	20 a6 50	jsr $50a6		jsr	CompareEqual
.407a	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.407d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -34451
>4080	93 86 00 00				.dword	$00008693
>4084	00 80					.byte	$00,$80
.4086	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -34451
>4089	93 86 00 00				.dword	$00008693
>408d	00 80					.byte	$00,$80
.408f	20 dc 50	jsr $50dc		jsr	FloatCompare
.4092	20 a6 50	jsr $50a6		jsr	CompareEqual
.4095	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>4098	01 00 00 00				.dword	$00000001
>409c	00 80					.byte	$00,$80
.409e	20 dc 50	jsr $50dc		jsr	FloatCompare
.40a1	20 a6 50	jsr $50a6		jsr	CompareEqual
.40a4	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.40a7	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -34451
>40aa	93 86 00 00				.dword	$00008693
>40ae	00 80					.byte	$00,$80
.40b0	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -34451
>40b3	93 86 00 00				.dword	$00008693
>40b7	00 80					.byte	$00,$80
.40b9	20 dc 50	jsr $50dc		jsr	FloatCompare
.40bc	20 b6 50	jsr $50b6		jsr	CompareNotEqual
.40bf	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>40c2	00 00 00 00				.dword	$00000000
>40c6	00 00					.byte	$00,$00
.40c8	20 dc 50	jsr $50dc		jsr	FloatCompare
.40cb	20 a6 50	jsr $50a6		jsr	CompareEqual
.40ce	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.40d1	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -34451
>40d4	93 86 00 00				.dword	$00008693
>40d8	00 80					.byte	$00,$80
.40da	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -34451
>40dd	93 86 00 00				.dword	$00008693
>40e1	00 80					.byte	$00,$80
.40e3	20 dc 50	jsr $50dc		jsr	FloatCompare
.40e6	20 c4 50	jsr $50c4		jsr	CompareGreater
.40e9	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>40ec	00 00 00 00				.dword	$00000000
>40f0	00 00					.byte	$00,$00
.40f2	20 dc 50	jsr $50dc		jsr	FloatCompare
.40f5	20 a6 50	jsr $50a6		jsr	CompareEqual
.40f8	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.40fb	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -34451
>40fe	93 86 00 00				.dword	$00008693
>4102	00 80					.byte	$00,$80
.4104	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -34451
>4107	93 86 00 00				.dword	$00008693
>410b	00 80					.byte	$00,$80
.410d	20 dc 50	jsr $50dc		jsr	FloatCompare
.4110	20 d4 50	jsr $50d4		jsr	CompareGreaterEqual
.4113	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>4116	01 00 00 00				.dword	$00000001
>411a	00 80					.byte	$00,$80
.411c	20 dc 50	jsr $50dc		jsr	FloatCompare
.411f	20 a6 50	jsr $50a6		jsr	CompareEqual
.4122	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4125	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -34451
>4128	93 86 00 00				.dword	$00008693
>412c	00 80					.byte	$00,$80
.412e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -34451
>4131	93 86 00 00				.dword	$00008693
>4135	00 80					.byte	$00,$80
.4137	20 dc 50	jsr $50dc		jsr	FloatCompare
.413a	20 bc 50	jsr $50bc		jsr	CompareLess
.413d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>4140	00 00 00 00				.dword	$00000000
>4144	00 00					.byte	$00,$00
.4146	20 dc 50	jsr $50dc		jsr	FloatCompare
.4149	20 a6 50	jsr $50a6		jsr	CompareEqual
.414c	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.414f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -34451
>4152	93 86 00 00				.dword	$00008693
>4156	00 80					.byte	$00,$80
.4158	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -34451
>415b	93 86 00 00				.dword	$00008693
>415f	00 80					.byte	$00,$80
.4161	20 dc 50	jsr $50dc		jsr	FloatCompare
.4164	20 cc 50	jsr $50cc		jsr	CompareLessEqual
.4167	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>416a	01 00 00 00				.dword	$00000001
>416e	00 80					.byte	$00,$80
.4170	20 dc 50	jsr $50dc		jsr	FloatCompare
.4173	20 a6 50	jsr $50a6		jsr	CompareEqual
.4176	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4179	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 11.55462865
>417c	25 e1 6f 5c				.dword	$5c6fe125
>4180	e5 00					.byte	$e5,$00
.4182	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -15.32607111
>4185	2c cb 9b 7a				.dword	$7a9bcb2c
>4189	e5 80					.byte	$e5,$80
.418b	20 1b 50	jsr $501b		jsr	FloatAdd
.418e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -3.77144246
>4191	19 a8 af 78				.dword	$78afa819
>4195	e3 80					.byte	$e3,$80
.4197	20 dc 50	jsr $50dc		jsr	FloatCompare
.419a	20 a6 50	jsr $50a6		jsr	CompareEqual
.419d	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.41a0	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 11.55462865
>41a3	25 e1 6f 5c				.dword	$5c6fe125
>41a7	e5 00					.byte	$e5,$00
.41a9	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -15.32607111
>41ac	2c cb 9b 7a				.dword	$7a9bcb2c
>41b0	e5 80					.byte	$e5,$80
.41b2	20 15 50	jsr $5015		jsr	FloatSubtract
.41b5	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 26.88069977
>41b8	29 d6 85 6b				.dword	$6b85d629
>41bc	e6 00					.byte	$e6,$00
.41be	20 dc 50	jsr $50dc		jsr	FloatCompare
.41c1	20 a6 50	jsr $50a6		jsr	CompareEqual
.41c4	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.41c7	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 11.55462865
>41ca	25 e1 6f 5c				.dword	$5c6fe125
>41ce	e5 00					.byte	$e5,$00
.41d0	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -15.32607111
>41d3	2c cb 9b 7a				.dword	$7a9bcb2c
>41d7	e5 80					.byte	$e5,$80
.41d9	20 b7 52	jsr $52b7		jsr	FloatMultiply
.41dc	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -177.08706042
>41df	cc 24 8b 58				.dword	$588b24cc
>41e3	e9 80					.byte	$e9,$80
.41e5	20 dc 50	jsr $50dc		jsr	FloatCompare
.41e8	20 a6 50	jsr $50a6		jsr	CompareEqual
.41eb	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.41ee	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 11.55462865
>41f1	25 e1 6f 5c				.dword	$5c6fe125
>41f5	e5 00					.byte	$e5,$00
.41f7	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -15.32607111
>41fa	2c cb 9b 7a				.dword	$7a9bcb2c
>41fe	e5 80					.byte	$e5,$80
.4200	20 40 51	jsr $5140		jsr	FloatDivide
.4203	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -0.75391981
>4206	c0 71 80 60				.dword	$608071c0
>420a	e1 80					.byte	$e1,$80
.420c	20 dc 50	jsr $50dc		jsr	FloatCompare
.420f	20 a6 50	jsr $50a6		jsr	CompareEqual
.4212	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4215	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 44.10496477
>4218	f1 bd 35 58				.dword	$5835bdf1
>421c	e7 00					.byte	$e7,$00
.421e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 44.10496477
>4221	f1 bd 35 58				.dword	$5835bdf1
>4225	e7 00					.byte	$e7,$00
.4227	20 dc 50	jsr $50dc		jsr	FloatCompare
.422a	20 c4 50	jsr $50c4		jsr	CompareGreater
.422d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>4230	00 00 00 00				.dword	$00000000
>4234	00 00					.byte	$00,$00
.4236	20 dc 50	jsr $50dc		jsr	FloatCompare
.4239	20 a6 50	jsr $50a6		jsr	CompareEqual
.423c	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.423f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 44.10496477
>4242	f1 bd 35 58				.dword	$5835bdf1
>4246	e7 00					.byte	$e7,$00
.4248	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 44.10496477
>424b	f1 bd 35 58				.dword	$5835bdf1
>424f	e7 00					.byte	$e7,$00
.4251	20 dc 50	jsr $50dc		jsr	FloatCompare
.4254	20 d4 50	jsr $50d4		jsr	CompareGreaterEqual
.4257	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>425a	01 00 00 00				.dword	$00000001
>425e	00 80					.byte	$00,$80
.4260	20 dc 50	jsr $50dc		jsr	FloatCompare
.4263	20 a6 50	jsr $50a6		jsr	CompareEqual
.4266	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4269	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 44.10496477
>426c	f1 bd 35 58				.dword	$5835bdf1
>4270	e7 00					.byte	$e7,$00
.4272	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 44.10496477
>4275	f1 bd 35 58				.dword	$5835bdf1
>4279	e7 00					.byte	$e7,$00
.427b	20 dc 50	jsr $50dc		jsr	FloatCompare
.427e	20 bc 50	jsr $50bc		jsr	CompareLess
.4281	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>4284	00 00 00 00				.dword	$00000000
>4288	00 00					.byte	$00,$00
.428a	20 dc 50	jsr $50dc		jsr	FloatCompare
.428d	20 a6 50	jsr $50a6		jsr	CompareEqual
.4290	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4293	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 44.10496477
>4296	f1 bd 35 58				.dword	$5835bdf1
>429a	e7 00					.byte	$e7,$00
.429c	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 44.10496477
>429f	f1 bd 35 58				.dword	$5835bdf1
>42a3	e7 00					.byte	$e7,$00
.42a5	20 dc 50	jsr $50dc		jsr	FloatCompare
.42a8	20 cc 50	jsr $50cc		jsr	CompareLessEqual
.42ab	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>42ae	01 00 00 00				.dword	$00000001
>42b2	00 80					.byte	$00,$80
.42b4	20 dc 50	jsr $50dc		jsr	FloatCompare
.42b7	20 a6 50	jsr $50a6		jsr	CompareEqual
.42ba	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.42bd	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 44.10496477
>42c0	f1 bd 35 58				.dword	$5835bdf1
>42c4	e7 00					.byte	$e7,$00
.42c6	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 44.10496477
>42c9	f1 bd 35 58				.dword	$5835bdf1
>42cd	e7 00					.byte	$e7,$00
.42cf	20 dc 50	jsr $50dc		jsr	FloatCompare
.42d2	20 a6 50	jsr $50a6		jsr	CompareEqual
.42d5	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>42d8	01 00 00 00				.dword	$00000001
>42dc	00 80					.byte	$00,$80
.42de	20 dc 50	jsr $50dc		jsr	FloatCompare
.42e1	20 a6 50	jsr $50a6		jsr	CompareEqual
.42e4	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.42e7	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 44.10496477
>42ea	f1 bd 35 58				.dword	$5835bdf1
>42ee	e7 00					.byte	$e7,$00
.42f0	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 44.10496477
>42f3	f1 bd 35 58				.dword	$5835bdf1
>42f7	e7 00					.byte	$e7,$00
.42f9	20 dc 50	jsr $50dc		jsr	FloatCompare
.42fc	20 b6 50	jsr $50b6		jsr	CompareNotEqual
.42ff	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>4302	00 00 00 00				.dword	$00000000
>4306	00 00					.byte	$00,$00
.4308	20 dc 50	jsr $50dc		jsr	FloatCompare
.430b	20 a6 50	jsr $50a6		jsr	CompareEqual
.430e	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4311	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 37733
>4314	65 93 00 00				.dword	$00009365
>4318	00 00					.byte	$00,$00
.431a	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 11783
>431d	07 2e 00 00				.dword	$00002e07
>4321	00 00					.byte	$00,$00
.4323	20 1b 50	jsr $501b		jsr	FloatAdd
.4326	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 49516
>4329	6c c1 00 00				.dword	$0000c16c
>432d	00 00					.byte	$00,$00
.432f	20 dc 50	jsr $50dc		jsr	FloatCompare
.4332	20 a6 50	jsr $50a6		jsr	CompareEqual
.4335	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4338	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 37733
>433b	65 93 00 00				.dword	$00009365
>433f	00 00					.byte	$00,$00
.4341	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 11783
>4344	07 2e 00 00				.dword	$00002e07
>4348	00 00					.byte	$00,$00
.434a	20 15 50	jsr $5015		jsr	FloatSubtract
.434d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 25950
>4350	5e 65 00 00				.dword	$0000655e
>4354	00 00					.byte	$00,$00
.4356	20 dc 50	jsr $50dc		jsr	FloatCompare
.4359	20 a6 50	jsr $50a6		jsr	CompareEqual
.435c	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.435f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 37733
>4362	65 93 00 00				.dword	$00009365
>4366	00 00					.byte	$00,$00
.4368	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 11783
>436b	07 2e 00 00				.dword	$00002e07
>436f	00 00					.byte	$00,$00
.4371	20 b7 52	jsr $52b7		jsr	FloatMultiply
.4374	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 444607939
>4377	c3 2d 80 1a				.dword	$1a802dc3
>437b	00 00					.byte	$00,$00
.437d	20 dc 50	jsr $50dc		jsr	FloatCompare
.4380	20 a6 50	jsr $50a6		jsr	CompareEqual
.4383	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4386	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 37733
>4389	65 93 00 00				.dword	$00009365
>438d	00 00					.byte	$00,$00
.438f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 11783
>4392	07 2e 00 00				.dword	$00002e07
>4396	00 00					.byte	$00,$00
.4398	20 40 51	jsr $5140		jsr	FloatDivide
.439b	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 3.20232538
>439e	13 73 79 66				.dword	$66797313
>43a2	e3 00					.byte	$e3,$00
.43a4	20 dc 50	jsr $50dc		jsr	FloatCompare
.43a7	20 a6 50	jsr $50a6		jsr	CompareEqual
.43aa	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.43ad	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 11783
>43b0	07 2e 00 00				.dword	$00002e07
>43b4	00 00					.byte	$00,$00
.43b6	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 11783
>43b9	07 2e 00 00				.dword	$00002e07
>43bd	00 00					.byte	$00,$00
.43bf	20 dc 50	jsr $50dc		jsr	FloatCompare
.43c2	20 a6 50	jsr $50a6		jsr	CompareEqual
.43c5	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>43c8	01 00 00 00				.dword	$00000001
>43cc	00 80					.byte	$00,$80
.43ce	20 dc 50	jsr $50dc		jsr	FloatCompare
.43d1	20 a6 50	jsr $50a6		jsr	CompareEqual
.43d4	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.43d7	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 11783
>43da	07 2e 00 00				.dword	$00002e07
>43de	00 00					.byte	$00,$00
.43e0	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 11783
>43e3	07 2e 00 00				.dword	$00002e07
>43e7	00 00					.byte	$00,$00
.43e9	20 dc 50	jsr $50dc		jsr	FloatCompare
.43ec	20 b6 50	jsr $50b6		jsr	CompareNotEqual
.43ef	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>43f2	00 00 00 00				.dword	$00000000
>43f6	00 00					.byte	$00,$00
.43f8	20 dc 50	jsr $50dc		jsr	FloatCompare
.43fb	20 a6 50	jsr $50a6		jsr	CompareEqual
.43fe	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4401	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 11783
>4404	07 2e 00 00				.dword	$00002e07
>4408	00 00					.byte	$00,$00
.440a	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 11783
>440d	07 2e 00 00				.dword	$00002e07
>4411	00 00					.byte	$00,$00
.4413	20 dc 50	jsr $50dc		jsr	FloatCompare
.4416	20 c4 50	jsr $50c4		jsr	CompareGreater
.4419	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>441c	00 00 00 00				.dword	$00000000
>4420	00 00					.byte	$00,$00
.4422	20 dc 50	jsr $50dc		jsr	FloatCompare
.4425	20 a6 50	jsr $50a6		jsr	CompareEqual
.4428	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.442b	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 11783
>442e	07 2e 00 00				.dword	$00002e07
>4432	00 00					.byte	$00,$00
.4434	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 11783
>4437	07 2e 00 00				.dword	$00002e07
>443b	00 00					.byte	$00,$00
.443d	20 dc 50	jsr $50dc		jsr	FloatCompare
.4440	20 d4 50	jsr $50d4		jsr	CompareGreaterEqual
.4443	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>4446	01 00 00 00				.dword	$00000001
>444a	00 80					.byte	$00,$80
.444c	20 dc 50	jsr $50dc		jsr	FloatCompare
.444f	20 a6 50	jsr $50a6		jsr	CompareEqual
.4452	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4455	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 11783
>4458	07 2e 00 00				.dword	$00002e07
>445c	00 00					.byte	$00,$00
.445e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 11783
>4461	07 2e 00 00				.dword	$00002e07
>4465	00 00					.byte	$00,$00
.4467	20 dc 50	jsr $50dc		jsr	FloatCompare
.446a	20 bc 50	jsr $50bc		jsr	CompareLess
.446d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>4470	00 00 00 00				.dword	$00000000
>4474	00 00					.byte	$00,$00
.4476	20 dc 50	jsr $50dc		jsr	FloatCompare
.4479	20 a6 50	jsr $50a6		jsr	CompareEqual
.447c	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.447f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 11783
>4482	07 2e 00 00				.dword	$00002e07
>4486	00 00					.byte	$00,$00
.4488	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 11783
>448b	07 2e 00 00				.dword	$00002e07
>448f	00 00					.byte	$00,$00
.4491	20 dc 50	jsr $50dc		jsr	FloatCompare
.4494	20 cc 50	jsr $50cc		jsr	CompareLessEqual
.4497	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>449a	01 00 00 00				.dword	$00000001
>449e	00 80					.byte	$00,$80
.44a0	20 dc 50	jsr $50dc		jsr	FloatCompare
.44a3	20 a6 50	jsr $50a6		jsr	CompareEqual
.44a6	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.44a9	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 41.05345428
>44ac	5c 5e 1b 52				.dword	$521b5e5c
>44b0	e7 00					.byte	$e7,$00
.44b2	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -37.58216571
>44b5	a0 11 2a 4b				.dword	$4b2a11a0
>44b9	e7 80					.byte	$e7,$80
.44bb	20 1b 50	jsr $501b		jsr	FloatAdd
.44be	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 3.47128857
>44c1	c4 cb 14 6f				.dword	$6f14cbc4
>44c5	e3 00					.byte	$e3,$00
.44c7	20 dc 50	jsr $50dc		jsr	FloatCompare
.44ca	20 a6 50	jsr $50a6		jsr	CompareEqual
.44cd	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.44d0	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 41.05345428
>44d3	5c 5e 1b 52				.dword	$521b5e5c
>44d7	e7 00					.byte	$e7,$00
.44d9	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -37.58216571
>44dc	a0 11 2a 4b				.dword	$4b2a11a0
>44e0	e7 80					.byte	$e7,$80
.44e2	20 15 50	jsr $5015		jsr	FloatSubtract
.44e5	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 78.63561999
>44e8	fe b7 a2 4e				.dword	$4ea2b7fe
>44ec	e8 00					.byte	$e8,$00
.44ee	20 dc 50	jsr $50dc		jsr	FloatCompare
.44f1	20 a6 50	jsr $50a6		jsr	CompareEqual
.44f4	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.44f7	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 41.05345428
>44fa	5c 5e 1b 52				.dword	$521b5e5c
>44fe	e7 00					.byte	$e7,$00
.4500	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -37.58216571
>4503	a0 11 2a 4b				.dword	$4b2a11a0
>4507	e7 80					.byte	$e7,$80
.4509	20 b7 52	jsr $52b7		jsr	FloatMultiply
.450c	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1542.87772166
>450f	26 0b 6e 60				.dword	$606e0b26
>4513	ec 80					.byte	$ec,$80
.4515	20 dc 50	jsr $50dc		jsr	FloatCompare
.4518	20 a6 50	jsr $50a6		jsr	CompareEqual
.451b	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.451e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 41.05345428
>4521	5c 5e 1b 52				.dword	$521b5e5c
>4525	e7 00					.byte	$e7,$00
.4527	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -37.58216571
>452a	a0 11 2a 4b				.dword	$4b2a11a0
>452e	e7 80					.byte	$e7,$80
.4530	20 40 51	jsr $5140		jsr	FloatDivide
.4533	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1.09236531
>4536	30 50 e9 45				.dword	$45e95030
>453a	e2 80					.byte	$e2,$80
.453c	20 dc 50	jsr $50dc		jsr	FloatCompare
.453f	20 a6 50	jsr $50a6		jsr	CompareEqual
.4542	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4545	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 8.22985341
>4548	62 bd d6 41				.dword	$41d6bd62
>454c	e5 00					.byte	$e5,$00
.454e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 8.22985341
>4551	62 bd d6 41				.dword	$41d6bd62
>4555	e5 00					.byte	$e5,$00
.4557	20 dc 50	jsr $50dc		jsr	FloatCompare
.455a	20 c4 50	jsr $50c4		jsr	CompareGreater
.455d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>4560	00 00 00 00				.dword	$00000000
>4564	00 00					.byte	$00,$00
.4566	20 dc 50	jsr $50dc		jsr	FloatCompare
.4569	20 a6 50	jsr $50a6		jsr	CompareEqual
.456c	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.456f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 8.22985341
>4572	62 bd d6 41				.dword	$41d6bd62
>4576	e5 00					.byte	$e5,$00
.4578	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 8.22985341
>457b	62 bd d6 41				.dword	$41d6bd62
>457f	e5 00					.byte	$e5,$00
.4581	20 dc 50	jsr $50dc		jsr	FloatCompare
.4584	20 d4 50	jsr $50d4		jsr	CompareGreaterEqual
.4587	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>458a	01 00 00 00				.dword	$00000001
>458e	00 80					.byte	$00,$80
.4590	20 dc 50	jsr $50dc		jsr	FloatCompare
.4593	20 a6 50	jsr $50a6		jsr	CompareEqual
.4596	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4599	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 8.22985341
>459c	62 bd d6 41				.dword	$41d6bd62
>45a0	e5 00					.byte	$e5,$00
.45a2	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 8.22985341
>45a5	62 bd d6 41				.dword	$41d6bd62
>45a9	e5 00					.byte	$e5,$00
.45ab	20 dc 50	jsr $50dc		jsr	FloatCompare
.45ae	20 bc 50	jsr $50bc		jsr	CompareLess
.45b1	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>45b4	00 00 00 00				.dword	$00000000
>45b8	00 00					.byte	$00,$00
.45ba	20 dc 50	jsr $50dc		jsr	FloatCompare
.45bd	20 a6 50	jsr $50a6		jsr	CompareEqual
.45c0	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.45c3	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 8.22985341
>45c6	62 bd d6 41				.dword	$41d6bd62
>45ca	e5 00					.byte	$e5,$00
.45cc	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 8.22985341
>45cf	62 bd d6 41				.dword	$41d6bd62
>45d3	e5 00					.byte	$e5,$00
.45d5	20 dc 50	jsr $50dc		jsr	FloatCompare
.45d8	20 cc 50	jsr $50cc		jsr	CompareLessEqual
.45db	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>45de	01 00 00 00				.dword	$00000001
>45e2	00 80					.byte	$00,$80
.45e4	20 dc 50	jsr $50dc		jsr	FloatCompare
.45e7	20 a6 50	jsr $50a6		jsr	CompareEqual
.45ea	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.45ed	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 8.22985341
>45f0	62 bd d6 41				.dword	$41d6bd62
>45f4	e5 00					.byte	$e5,$00
.45f6	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 8.22985341
>45f9	62 bd d6 41				.dword	$41d6bd62
>45fd	e5 00					.byte	$e5,$00
.45ff	20 dc 50	jsr $50dc		jsr	FloatCompare
.4602	20 a6 50	jsr $50a6		jsr	CompareEqual
.4605	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>4608	01 00 00 00				.dword	$00000001
>460c	00 80					.byte	$00,$80
.460e	20 dc 50	jsr $50dc		jsr	FloatCompare
.4611	20 a6 50	jsr $50a6		jsr	CompareEqual
.4614	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4617	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 8.22985341
>461a	62 bd d6 41				.dword	$41d6bd62
>461e	e5 00					.byte	$e5,$00
.4620	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 8.22985341
>4623	62 bd d6 41				.dword	$41d6bd62
>4627	e5 00					.byte	$e5,$00
.4629	20 dc 50	jsr $50dc		jsr	FloatCompare
.462c	20 b6 50	jsr $50b6		jsr	CompareNotEqual
.462f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>4632	00 00 00 00				.dword	$00000000
>4636	00 00					.byte	$00,$00
.4638	20 dc 50	jsr $50dc		jsr	FloatCompare
.463b	20 a6 50	jsr $50a6		jsr	CompareEqual
.463e	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4641	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 10081
>4644	61 27 00 00				.dword	$00002761
>4648	00 00					.byte	$00,$00
.464a	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -39590
>464d	a6 9a 00 00				.dword	$00009aa6
>4651	00 80					.byte	$00,$80
.4653	20 1b 50	jsr $501b		jsr	FloatAdd
.4656	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -29509
>4659	45 73 00 00				.dword	$00007345
>465d	00 80					.byte	$00,$80
.465f	20 dc 50	jsr $50dc		jsr	FloatCompare
.4662	20 a6 50	jsr $50a6		jsr	CompareEqual
.4665	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4668	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 10081
>466b	61 27 00 00				.dword	$00002761
>466f	00 00					.byte	$00,$00
.4671	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -39590
>4674	a6 9a 00 00				.dword	$00009aa6
>4678	00 80					.byte	$00,$80
.467a	20 15 50	jsr $5015		jsr	FloatSubtract
.467d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 49671
>4680	07 c2 00 00				.dword	$0000c207
>4684	00 00					.byte	$00,$00
.4686	20 dc 50	jsr $50dc		jsr	FloatCompare
.4689	20 a6 50	jsr $50a6		jsr	CompareEqual
.468c	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.468f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 10081
>4692	61 27 00 00				.dword	$00002761
>4696	00 00					.byte	$00,$00
.4698	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -39590
>469b	a6 9a 00 00				.dword	$00009aa6
>469f	00 80					.byte	$00,$80
.46a1	20 b7 52	jsr $52b7		jsr	FloatMultiply
.46a4	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -399106790
>46a7	e6 e2 c9 17				.dword	$17c9e2e6
>46ab	00 80					.byte	$00,$80
.46ad	20 dc 50	jsr $50dc		jsr	FloatCompare
.46b0	20 a6 50	jsr $50a6		jsr	CompareEqual
.46b3	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.46b6	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 10081
>46b9	61 27 00 00				.dword	$00002761
>46bd	00 00					.byte	$00,$00
.46bf	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -39590
>46c2	a6 9a 00 00				.dword	$00009aa6
>46c6	00 80					.byte	$00,$80
.46c8	20 40 51	jsr $5140		jsr	FloatDivide
.46cb	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -0.25463501
>46ce	90 c2 2f 41				.dword	$412fc290
>46d2	e0 80					.byte	$e0,$80
.46d4	20 dc 50	jsr $50dc		jsr	FloatCompare
.46d7	20 a6 50	jsr $50a6		jsr	CompareEqual
.46da	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.46dd	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -39590
>46e0	a6 9a 00 00				.dword	$00009aa6
>46e4	00 80					.byte	$00,$80
.46e6	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -39590
>46e9	a6 9a 00 00				.dword	$00009aa6
>46ed	00 80					.byte	$00,$80
.46ef	20 dc 50	jsr $50dc		jsr	FloatCompare
.46f2	20 a6 50	jsr $50a6		jsr	CompareEqual
.46f5	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>46f8	01 00 00 00				.dword	$00000001
>46fc	00 80					.byte	$00,$80
.46fe	20 dc 50	jsr $50dc		jsr	FloatCompare
.4701	20 a6 50	jsr $50a6		jsr	CompareEqual
.4704	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4707	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -39590
>470a	a6 9a 00 00				.dword	$00009aa6
>470e	00 80					.byte	$00,$80
.4710	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -39590
>4713	a6 9a 00 00				.dword	$00009aa6
>4717	00 80					.byte	$00,$80
.4719	20 dc 50	jsr $50dc		jsr	FloatCompare
.471c	20 b6 50	jsr $50b6		jsr	CompareNotEqual
.471f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>4722	00 00 00 00				.dword	$00000000
>4726	00 00					.byte	$00,$00
.4728	20 dc 50	jsr $50dc		jsr	FloatCompare
.472b	20 a6 50	jsr $50a6		jsr	CompareEqual
.472e	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4731	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -39590
>4734	a6 9a 00 00				.dword	$00009aa6
>4738	00 80					.byte	$00,$80
.473a	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -39590
>473d	a6 9a 00 00				.dword	$00009aa6
>4741	00 80					.byte	$00,$80
.4743	20 dc 50	jsr $50dc		jsr	FloatCompare
.4746	20 c4 50	jsr $50c4		jsr	CompareGreater
.4749	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>474c	00 00 00 00				.dword	$00000000
>4750	00 00					.byte	$00,$00
.4752	20 dc 50	jsr $50dc		jsr	FloatCompare
.4755	20 a6 50	jsr $50a6		jsr	CompareEqual
.4758	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.475b	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -39590
>475e	a6 9a 00 00				.dword	$00009aa6
>4762	00 80					.byte	$00,$80
.4764	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -39590
>4767	a6 9a 00 00				.dword	$00009aa6
>476b	00 80					.byte	$00,$80
.476d	20 dc 50	jsr $50dc		jsr	FloatCompare
.4770	20 d4 50	jsr $50d4		jsr	CompareGreaterEqual
.4773	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>4776	01 00 00 00				.dword	$00000001
>477a	00 80					.byte	$00,$80
.477c	20 dc 50	jsr $50dc		jsr	FloatCompare
.477f	20 a6 50	jsr $50a6		jsr	CompareEqual
.4782	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4785	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -39590
>4788	a6 9a 00 00				.dword	$00009aa6
>478c	00 80					.byte	$00,$80
.478e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -39590
>4791	a6 9a 00 00				.dword	$00009aa6
>4795	00 80					.byte	$00,$80
.4797	20 dc 50	jsr $50dc		jsr	FloatCompare
.479a	20 bc 50	jsr $50bc		jsr	CompareLess
.479d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>47a0	00 00 00 00				.dword	$00000000
>47a4	00 00					.byte	$00,$00
.47a6	20 dc 50	jsr $50dc		jsr	FloatCompare
.47a9	20 a6 50	jsr $50a6		jsr	CompareEqual
.47ac	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.47af	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -39590
>47b2	a6 9a 00 00				.dword	$00009aa6
>47b6	00 80					.byte	$00,$80
.47b8	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -39590
>47bb	a6 9a 00 00				.dword	$00009aa6
>47bf	00 80					.byte	$00,$80
.47c1	20 dc 50	jsr $50dc		jsr	FloatCompare
.47c4	20 cc 50	jsr $50cc		jsr	CompareLessEqual
.47c7	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>47ca	01 00 00 00				.dword	$00000001
>47ce	00 80					.byte	$00,$80
.47d0	20 dc 50	jsr $50dc		jsr	FloatCompare
.47d3	20 a6 50	jsr $50a6		jsr	CompareEqual
.47d6	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.47d9	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 32.59787803
>47dc	12 1d 32 41				.dword	$41321d12
>47e0	e7 00					.byte	$e7,$00
.47e2	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -6.57025998
>47e5	ee c8 1f 69				.dword	$691fc8ee
>47e9	e4 80					.byte	$e4,$80
.47eb	20 1b 50	jsr $501b		jsr	FloatAdd
.47ee	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 26.02761804
>47f1	e7 47 1c 68				.dword	$681c47e7
>47f5	e6 00					.byte	$e6,$00
.47f7	20 dc 50	jsr $50dc		jsr	FloatCompare
.47fa	20 a6 50	jsr $50a6		jsr	CompareEqual
.47fd	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4800	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 32.59787803
>4803	12 1d 32 41				.dword	$41321d12
>4807	e7 00					.byte	$e7,$00
.4809	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -6.57025998
>480c	ee c8 1f 69				.dword	$691fc8ee
>4810	e4 80					.byte	$e4,$80
.4812	20 15 50	jsr $5015		jsr	FloatSubtract
.4815	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 39.16813801
>4818	2f 16 56 4e				.dword	$4e56162f
>481c	e7 00					.byte	$e7,$00
.481e	20 dc 50	jsr $50dc		jsr	FloatCompare
.4821	20 a6 50	jsr $50a6		jsr	CompareEqual
.4824	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4827	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 32.59787803
>482a	12 1d 32 41				.dword	$41321d12
>482e	e7 00					.byte	$e7,$00
.4830	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -6.57025998
>4833	ee c8 1f 69				.dword	$691fc8ee
>4837	e4 80					.byte	$e4,$80
.4839	20 b7 52	jsr $52b7		jsr	FloatMultiply
.483c	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -214.17653351
>483f	a6 98 16 6b				.dword	$6b1698a6
>4843	e9 80					.byte	$e9,$80
.4845	20 dc 50	jsr $50dc		jsr	FloatCompare
.4848	20 a6 50	jsr $50a6		jsr	CompareEqual
.484b	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.484e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 32.59787803
>4851	12 1d 32 41				.dword	$41321d12
>4855	e7 00					.byte	$e7,$00
.4857	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -6.57025998
>485a	ee c8 1f 69				.dword	$691fc8ee
>485e	e4 80					.byte	$e4,$80
.4860	20 40 51	jsr $5140		jsr	FloatDivide
.4863	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -4.96142894
>4866	50 03 62 4f				.dword	$4f620350
>486a	e4 80					.byte	$e4,$80
.486c	20 dc 50	jsr $50dc		jsr	FloatCompare
.486f	20 a6 50	jsr $50a6		jsr	CompareEqual
.4872	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4875	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -21.11476472
>4878	e2 84 75 54				.dword	$547584e2
>487c	e6 80					.byte	$e6,$80
.487e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 67.49769175
>4881	ba 68 7f 43				.dword	$437f68ba
>4885	e8 00					.byte	$e8,$00
.4887	20 dc 50	jsr $50dc		jsr	FloatCompare
.488a	20 c4 50	jsr $50c4		jsr	CompareGreater
.488d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>4890	00 00 00 00				.dword	$00000000
>4894	00 00					.byte	$00,$00
.4896	20 dc 50	jsr $50dc		jsr	FloatCompare
.4899	20 a6 50	jsr $50a6		jsr	CompareEqual
.489c	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.489f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -21.11476472
>48a2	e2 84 75 54				.dword	$547584e2
>48a6	e6 80					.byte	$e6,$80
.48a8	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 67.49769175
>48ab	ba 68 7f 43				.dword	$437f68ba
>48af	e8 00					.byte	$e8,$00
.48b1	20 dc 50	jsr $50dc		jsr	FloatCompare
.48b4	20 d4 50	jsr $50d4		jsr	CompareGreaterEqual
.48b7	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>48ba	00 00 00 00				.dword	$00000000
>48be	00 00					.byte	$00,$00
.48c0	20 dc 50	jsr $50dc		jsr	FloatCompare
.48c3	20 a6 50	jsr $50a6		jsr	CompareEqual
.48c6	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.48c9	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -21.11476472
>48cc	e2 84 75 54				.dword	$547584e2
>48d0	e6 80					.byte	$e6,$80
.48d2	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 67.49769175
>48d5	ba 68 7f 43				.dword	$437f68ba
>48d9	e8 00					.byte	$e8,$00
.48db	20 dc 50	jsr $50dc		jsr	FloatCompare
.48de	20 bc 50	jsr $50bc		jsr	CompareLess
.48e1	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>48e4	01 00 00 00				.dword	$00000001
>48e8	00 80					.byte	$00,$80
.48ea	20 dc 50	jsr $50dc		jsr	FloatCompare
.48ed	20 a6 50	jsr $50a6		jsr	CompareEqual
.48f0	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.48f3	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -21.11476472
>48f6	e2 84 75 54				.dword	$547584e2
>48fa	e6 80					.byte	$e6,$80
.48fc	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 67.49769175
>48ff	ba 68 7f 43				.dword	$437f68ba
>4903	e8 00					.byte	$e8,$00
.4905	20 dc 50	jsr $50dc		jsr	FloatCompare
.4908	20 cc 50	jsr $50cc		jsr	CompareLessEqual
.490b	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>490e	01 00 00 00				.dword	$00000001
>4912	00 80					.byte	$00,$80
.4914	20 dc 50	jsr $50dc		jsr	FloatCompare
.4917	20 a6 50	jsr $50a6		jsr	CompareEqual
.491a	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.491d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -21.11476472
>4920	e2 84 75 54				.dword	$547584e2
>4924	e6 80					.byte	$e6,$80
.4926	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 67.49769175
>4929	ba 68 7f 43				.dword	$437f68ba
>492d	e8 00					.byte	$e8,$00
.492f	20 dc 50	jsr $50dc		jsr	FloatCompare
.4932	20 a6 50	jsr $50a6		jsr	CompareEqual
.4935	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>4938	00 00 00 00				.dword	$00000000
>493c	00 00					.byte	$00,$00
.493e	20 dc 50	jsr $50dc		jsr	FloatCompare
.4941	20 a6 50	jsr $50a6		jsr	CompareEqual
.4944	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4947	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -21.11476472
>494a	e2 84 75 54				.dword	$547584e2
>494e	e6 80					.byte	$e6,$80
.4950	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 67.49769175
>4953	ba 68 7f 43				.dword	$437f68ba
>4957	e8 00					.byte	$e8,$00
.4959	20 dc 50	jsr $50dc		jsr	FloatCompare
.495c	20 b6 50	jsr $50b6		jsr	CompareNotEqual
.495f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>4962	01 00 00 00				.dword	$00000001
>4966	00 80					.byte	$00,$80
.4968	20 dc 50	jsr $50dc		jsr	FloatCompare
.496b	20 a6 50	jsr $50a6		jsr	CompareEqual
.496e	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4971	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 47612
>4974	fc b9 00 00				.dword	$0000b9fc
>4978	00 00					.byte	$00,$00
.497a	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -48670
>497d	1e be 00 00				.dword	$0000be1e
>4981	00 80					.byte	$00,$80
.4983	20 1b 50	jsr $501b		jsr	FloatAdd
.4986	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1058
>4989	22 04 00 00				.dword	$00000422
>498d	00 80					.byte	$00,$80
.498f	20 dc 50	jsr $50dc		jsr	FloatCompare
.4992	20 a6 50	jsr $50a6		jsr	CompareEqual
.4995	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4998	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 47612
>499b	fc b9 00 00				.dword	$0000b9fc
>499f	00 00					.byte	$00,$00
.49a1	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -48670
>49a4	1e be 00 00				.dword	$0000be1e
>49a8	00 80					.byte	$00,$80
.49aa	20 15 50	jsr $5015		jsr	FloatSubtract
.49ad	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 96282
>49b0	1a 78 01 00				.dword	$0001781a
>49b4	00 00					.byte	$00,$00
.49b6	20 dc 50	jsr $50dc		jsr	FloatCompare
.49b9	20 a6 50	jsr $50a6		jsr	CompareEqual
.49bc	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.49bf	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 47612
>49c2	fc b9 00 00				.dword	$0000b9fc
>49c6	00 00					.byte	$00,$00
.49c8	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -48670
>49cb	1e be 00 00				.dword	$0000be1e
>49cf	00 80					.byte	$00,$80
.49d1	20 b7 52	jsr $52b7		jsr	FloatMultiply
.49d4	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -2317276040
>49d7	c4 69 0f 45				.dword	$450f69c4
>49db	01 80					.byte	$01,$80
.49dd	20 dc 50	jsr $50dc		jsr	FloatCompare
.49e0	20 a6 50	jsr $50a6		jsr	CompareEqual
.49e3	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.49e6	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 47612
>49e9	fc b9 00 00				.dword	$0000b9fc
>49ed	00 00					.byte	$00,$00
.49ef	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -48670
>49f2	1e be 00 00				.dword	$0000be1e
>49f6	00 80					.byte	$00,$80
.49f8	20 40 51	jsr $5140		jsr	FloatDivide
.49fb	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -0.97826176
>49fe	6d ae 37 7d				.dword	$7d37ae6d
>4a02	e1 80					.byte	$e1,$80
.4a04	20 dc 50	jsr $50dc		jsr	FloatCompare
.4a07	20 a6 50	jsr $50a6		jsr	CompareEqual
.4a0a	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4a0d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -48670
>4a10	1e be 00 00				.dword	$0000be1e
>4a14	00 80					.byte	$00,$80
.4a16	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -48670
>4a19	1e be 00 00				.dword	$0000be1e
>4a1d	00 80					.byte	$00,$80
.4a1f	20 dc 50	jsr $50dc		jsr	FloatCompare
.4a22	20 a6 50	jsr $50a6		jsr	CompareEqual
.4a25	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>4a28	01 00 00 00				.dword	$00000001
>4a2c	00 80					.byte	$00,$80
.4a2e	20 dc 50	jsr $50dc		jsr	FloatCompare
.4a31	20 a6 50	jsr $50a6		jsr	CompareEqual
.4a34	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4a37	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -48670
>4a3a	1e be 00 00				.dword	$0000be1e
>4a3e	00 80					.byte	$00,$80
.4a40	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -48670
>4a43	1e be 00 00				.dword	$0000be1e
>4a47	00 80					.byte	$00,$80
.4a49	20 dc 50	jsr $50dc		jsr	FloatCompare
.4a4c	20 b6 50	jsr $50b6		jsr	CompareNotEqual
.4a4f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>4a52	00 00 00 00				.dword	$00000000
>4a56	00 00					.byte	$00,$00
.4a58	20 dc 50	jsr $50dc		jsr	FloatCompare
.4a5b	20 a6 50	jsr $50a6		jsr	CompareEqual
.4a5e	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4a61	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -48670
>4a64	1e be 00 00				.dword	$0000be1e
>4a68	00 80					.byte	$00,$80
.4a6a	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -48670
>4a6d	1e be 00 00				.dword	$0000be1e
>4a71	00 80					.byte	$00,$80
.4a73	20 dc 50	jsr $50dc		jsr	FloatCompare
.4a76	20 c4 50	jsr $50c4		jsr	CompareGreater
.4a79	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>4a7c	00 00 00 00				.dword	$00000000
>4a80	00 00					.byte	$00,$00
.4a82	20 dc 50	jsr $50dc		jsr	FloatCompare
.4a85	20 a6 50	jsr $50a6		jsr	CompareEqual
.4a88	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4a8b	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -48670
>4a8e	1e be 00 00				.dword	$0000be1e
>4a92	00 80					.byte	$00,$80
.4a94	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -48670
>4a97	1e be 00 00				.dword	$0000be1e
>4a9b	00 80					.byte	$00,$80
.4a9d	20 dc 50	jsr $50dc		jsr	FloatCompare
.4aa0	20 d4 50	jsr $50d4		jsr	CompareGreaterEqual
.4aa3	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>4aa6	01 00 00 00				.dword	$00000001
>4aaa	00 80					.byte	$00,$80
.4aac	20 dc 50	jsr $50dc		jsr	FloatCompare
.4aaf	20 a6 50	jsr $50a6		jsr	CompareEqual
.4ab2	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4ab5	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -48670
>4ab8	1e be 00 00				.dword	$0000be1e
>4abc	00 80					.byte	$00,$80
.4abe	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -48670
>4ac1	1e be 00 00				.dword	$0000be1e
>4ac5	00 80					.byte	$00,$80
.4ac7	20 dc 50	jsr $50dc		jsr	FloatCompare
.4aca	20 bc 50	jsr $50bc		jsr	CompareLess
.4acd	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>4ad0	00 00 00 00				.dword	$00000000
>4ad4	00 00					.byte	$00,$00
.4ad6	20 dc 50	jsr $50dc		jsr	FloatCompare
.4ad9	20 a6 50	jsr $50a6		jsr	CompareEqual
.4adc	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4adf	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -48670
>4ae2	1e be 00 00				.dword	$0000be1e
>4ae6	00 80					.byte	$00,$80
.4ae8	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -48670
>4aeb	1e be 00 00				.dword	$0000be1e
>4aef	00 80					.byte	$00,$80
.4af1	20 dc 50	jsr $50dc		jsr	FloatCompare
.4af4	20 cc 50	jsr $50cc		jsr	CompareLessEqual
.4af7	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>4afa	01 00 00 00				.dword	$00000001
>4afe	00 80					.byte	$00,$80
.4b00	20 dc 50	jsr $50dc		jsr	FloatCompare
.4b03	20 a6 50	jsr $50a6		jsr	CompareEqual
.4b06	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4b09	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 32.63578197
>4b0c	37 85 45 41				.dword	$41458537
>4b10	e7 00					.byte	$e7,$00
.4b12	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 10.31902486
>4b15	e8 5c 8d 52				.dword	$528d5ce8
>4b19	e5 00					.byte	$e5,$00
.4b1b	20 1b 50	jsr $501b		jsr	FloatAdd
.4b1e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 42.95480684
>4b21	71 dc e8 55				.dword	$55e8dc71
>4b25	e7 00					.byte	$e7,$00
.4b27	20 dc 50	jsr $50dc		jsr	FloatCompare
.4b2a	20 a6 50	jsr $50a6		jsr	CompareEqual
.4b2d	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4b30	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 32.63578197
>4b33	37 85 45 41				.dword	$41458537
>4b37	e7 00					.byte	$e7,$00
.4b39	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 10.31902486
>4b3c	e8 5c 8d 52				.dword	$528d5ce8
>4b40	e5 00					.byte	$e5,$00
.4b42	20 15 50	jsr $5015		jsr	FloatSubtract
.4b45	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 22.31675711
>4b48	fa 5b 44 59				.dword	$59445bfa
>4b4c	e6 00					.byte	$e6,$00
.4b4e	20 dc 50	jsr $50dc		jsr	FloatCompare
.4b51	20 a6 50	jsr $50a6		jsr	CompareEqual
.4b54	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4b57	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 32.63578197
>4b5a	37 85 45 41				.dword	$41458537
>4b5e	e7 00					.byte	$e7,$00
.4b60	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 10.31902486
>4b63	e8 5c 8d 52				.dword	$528d5ce8
>4b67	e5 00					.byte	$e5,$00
.4b69	20 b7 52	jsr $52b7		jsr	FloatMultiply
.4b6c	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 336.76944563
>4b6f	99 3e 31 54				.dword	$54313e99
>4b73	ea 00					.byte	$ea,$00
.4b75	20 dc 50	jsr $50dc		jsr	FloatCompare
.4b78	20 a6 50	jsr $50a6		jsr	CompareEqual
.4b7b	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4b7e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 32.63578197
>4b81	37 85 45 41				.dword	$41458537
>4b85	e7 00					.byte	$e7,$00
.4b87	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 10.31902486
>4b8a	e8 5c 8d 52				.dword	$528d5ce8
>4b8e	e5 00					.byte	$e5,$00
.4b90	20 40 51	jsr $5140		jsr	FloatDivide
.4b93	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 3.16268082
>4b96	68 ae 34 65				.dword	$6534ae68
>4b9a	e3 00					.byte	$e3,$00
.4b9c	20 dc 50	jsr $50dc		jsr	FloatCompare
.4b9f	20 a6 50	jsr $50a6		jsr	CompareEqual
.4ba2	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4ba5	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -12.30420345
>4ba8	38 02 6f 62				.dword	$626f0238
>4bac	e5 80					.byte	$e5,$80
.4bae	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -12.30420345
>4bb1	38 02 6f 62				.dword	$626f0238
>4bb5	e5 80					.byte	$e5,$80
.4bb7	20 dc 50	jsr $50dc		jsr	FloatCompare
.4bba	20 c4 50	jsr $50c4		jsr	CompareGreater
.4bbd	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>4bc0	00 00 00 00				.dword	$00000000
>4bc4	00 00					.byte	$00,$00
.4bc6	20 dc 50	jsr $50dc		jsr	FloatCompare
.4bc9	20 a6 50	jsr $50a6		jsr	CompareEqual
.4bcc	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4bcf	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -12.30420345
>4bd2	38 02 6f 62				.dword	$626f0238
>4bd6	e5 80					.byte	$e5,$80
.4bd8	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -12.30420345
>4bdb	38 02 6f 62				.dword	$626f0238
>4bdf	e5 80					.byte	$e5,$80
.4be1	20 dc 50	jsr $50dc		jsr	FloatCompare
.4be4	20 d4 50	jsr $50d4		jsr	CompareGreaterEqual
.4be7	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>4bea	01 00 00 00				.dword	$00000001
>4bee	00 80					.byte	$00,$80
.4bf0	20 dc 50	jsr $50dc		jsr	FloatCompare
.4bf3	20 a6 50	jsr $50a6		jsr	CompareEqual
.4bf6	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4bf9	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -12.30420345
>4bfc	38 02 6f 62				.dword	$626f0238
>4c00	e5 80					.byte	$e5,$80
.4c02	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -12.30420345
>4c05	38 02 6f 62				.dword	$626f0238
>4c09	e5 80					.byte	$e5,$80
.4c0b	20 dc 50	jsr $50dc		jsr	FloatCompare
.4c0e	20 bc 50	jsr $50bc		jsr	CompareLess
.4c11	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>4c14	00 00 00 00				.dword	$00000000
>4c18	00 00					.byte	$00,$00
.4c1a	20 dc 50	jsr $50dc		jsr	FloatCompare
.4c1d	20 a6 50	jsr $50a6		jsr	CompareEqual
.4c20	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4c23	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -12.30420345
>4c26	38 02 6f 62				.dword	$626f0238
>4c2a	e5 80					.byte	$e5,$80
.4c2c	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -12.30420345
>4c2f	38 02 6f 62				.dword	$626f0238
>4c33	e5 80					.byte	$e5,$80
.4c35	20 dc 50	jsr $50dc		jsr	FloatCompare
.4c38	20 cc 50	jsr $50cc		jsr	CompareLessEqual
.4c3b	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>4c3e	01 00 00 00				.dword	$00000001
>4c42	00 80					.byte	$00,$80
.4c44	20 dc 50	jsr $50dc		jsr	FloatCompare
.4c47	20 a6 50	jsr $50a6		jsr	CompareEqual
.4c4a	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4c4d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -12.30420345
>4c50	38 02 6f 62				.dword	$626f0238
>4c54	e5 80					.byte	$e5,$80
.4c56	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -12.30420345
>4c59	38 02 6f 62				.dword	$626f0238
>4c5d	e5 80					.byte	$e5,$80
.4c5f	20 dc 50	jsr $50dc		jsr	FloatCompare
.4c62	20 a6 50	jsr $50a6		jsr	CompareEqual
.4c65	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>4c68	01 00 00 00				.dword	$00000001
>4c6c	00 80					.byte	$00,$80
.4c6e	20 dc 50	jsr $50dc		jsr	FloatCompare
.4c71	20 a6 50	jsr $50a6		jsr	CompareEqual
.4c74	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4c77	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -12.30420345
>4c7a	38 02 6f 62				.dword	$626f0238
>4c7e	e5 80					.byte	$e5,$80
.4c80	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -12.30420345
>4c83	38 02 6f 62				.dword	$626f0238
>4c87	e5 80					.byte	$e5,$80
.4c89	20 dc 50	jsr $50dc		jsr	FloatCompare
.4c8c	20 b6 50	jsr $50b6		jsr	CompareNotEqual
.4c8f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>4c92	00 00 00 00				.dword	$00000000
>4c96	00 00					.byte	$00,$00
.4c98	20 dc 50	jsr $50dc		jsr	FloatCompare
.4c9b	20 a6 50	jsr $50a6		jsr	CompareEqual
.4c9e	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4ca1	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 47521
>4ca4	a1 b9 00 00				.dword	$0000b9a1
>4ca8	00 00					.byte	$00,$00
.4caa	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 15433
>4cad	49 3c 00 00				.dword	$00003c49
>4cb1	00 00					.byte	$00,$00
.4cb3	20 1b 50	jsr $501b		jsr	FloatAdd
.4cb6	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 62954
>4cb9	ea f5 00 00				.dword	$0000f5ea
>4cbd	00 00					.byte	$00,$00
.4cbf	20 dc 50	jsr $50dc		jsr	FloatCompare
.4cc2	20 a6 50	jsr $50a6		jsr	CompareEqual
.4cc5	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4cc8	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 47521
>4ccb	a1 b9 00 00				.dword	$0000b9a1
>4ccf	00 00					.byte	$00,$00
.4cd1	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 15433
>4cd4	49 3c 00 00				.dword	$00003c49
>4cd8	00 00					.byte	$00,$00
.4cda	20 15 50	jsr $5015		jsr	FloatSubtract
.4cdd	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 32088
>4ce0	58 7d 00 00				.dword	$00007d58
>4ce4	00 00					.byte	$00,$00
.4ce6	20 dc 50	jsr $50dc		jsr	FloatCompare
.4ce9	20 a6 50	jsr $50a6		jsr	CompareEqual
.4cec	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4cef	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 47521
>4cf2	a1 b9 00 00				.dword	$0000b9a1
>4cf6	00 00					.byte	$00,$00
.4cf8	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 15433
>4cfb	49 3c 00 00				.dword	$00003c49
>4cff	00 00					.byte	$00,$00
.4d01	20 b7 52	jsr $52b7		jsr	FloatMultiply
.4d04	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 733391593
>4d07	e9 aa b6 2b				.dword	$2bb6aae9
>4d0b	00 00					.byte	$00,$00
.4d0d	20 dc 50	jsr $50dc		jsr	FloatCompare
.4d10	20 a6 50	jsr $50a6		jsr	CompareEqual
.4d13	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4d16	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 47521
>4d19	a1 b9 00 00				.dword	$0000b9a1
>4d1d	00 00					.byte	$00,$00
.4d1f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 15433
>4d22	49 3c 00 00				.dword	$00003c49
>4d26	00 00					.byte	$00,$00
.4d28	20 40 51	jsr $5140		jsr	FloatDivide
.4d2b	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 3.07918098
>4d2e	8d a6 88 62				.dword	$6288a68d
>4d32	e3 00					.byte	$e3,$00
.4d34	20 dc 50	jsr $50dc		jsr	FloatCompare
.4d37	20 a6 50	jsr $50a6		jsr	CompareEqual
.4d3a	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4d3d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 47521
>4d40	a1 b9 00 00				.dword	$0000b9a1
>4d44	00 00					.byte	$00,$00
.4d46	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 15433
>4d49	49 3c 00 00				.dword	$00003c49
>4d4d	00 00					.byte	$00,$00
.4d4f	20 dc 50	jsr $50dc		jsr	FloatCompare
.4d52	20 a6 50	jsr $50a6		jsr	CompareEqual
.4d55	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>4d58	00 00 00 00				.dword	$00000000
>4d5c	00 00					.byte	$00,$00
.4d5e	20 dc 50	jsr $50dc		jsr	FloatCompare
.4d61	20 a6 50	jsr $50a6		jsr	CompareEqual
.4d64	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4d67	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 47521
>4d6a	a1 b9 00 00				.dword	$0000b9a1
>4d6e	00 00					.byte	$00,$00
.4d70	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 15433
>4d73	49 3c 00 00				.dword	$00003c49
>4d77	00 00					.byte	$00,$00
.4d79	20 dc 50	jsr $50dc		jsr	FloatCompare
.4d7c	20 b6 50	jsr $50b6		jsr	CompareNotEqual
.4d7f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>4d82	01 00 00 00				.dword	$00000001
>4d86	00 80					.byte	$00,$80
.4d88	20 dc 50	jsr $50dc		jsr	FloatCompare
.4d8b	20 a6 50	jsr $50a6		jsr	CompareEqual
.4d8e	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4d91	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 47521
>4d94	a1 b9 00 00				.dword	$0000b9a1
>4d98	00 00					.byte	$00,$00
.4d9a	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 15433
>4d9d	49 3c 00 00				.dword	$00003c49
>4da1	00 00					.byte	$00,$00
.4da3	20 dc 50	jsr $50dc		jsr	FloatCompare
.4da6	20 c4 50	jsr $50c4		jsr	CompareGreater
.4da9	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>4dac	01 00 00 00				.dword	$00000001
>4db0	00 80					.byte	$00,$80
.4db2	20 dc 50	jsr $50dc		jsr	FloatCompare
.4db5	20 a6 50	jsr $50a6		jsr	CompareEqual
.4db8	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4dbb	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 47521
>4dbe	a1 b9 00 00				.dword	$0000b9a1
>4dc2	00 00					.byte	$00,$00
.4dc4	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 15433
>4dc7	49 3c 00 00				.dword	$00003c49
>4dcb	00 00					.byte	$00,$00
.4dcd	20 dc 50	jsr $50dc		jsr	FloatCompare
.4dd0	20 d4 50	jsr $50d4		jsr	CompareGreaterEqual
.4dd3	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>4dd6	01 00 00 00				.dword	$00000001
>4dda	00 80					.byte	$00,$80
.4ddc	20 dc 50	jsr $50dc		jsr	FloatCompare
.4ddf	20 a6 50	jsr $50a6		jsr	CompareEqual
.4de2	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4de5	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 47521
>4de8	a1 b9 00 00				.dword	$0000b9a1
>4dec	00 00					.byte	$00,$00
.4dee	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 15433
>4df1	49 3c 00 00				.dword	$00003c49
>4df5	00 00					.byte	$00,$00
.4df7	20 dc 50	jsr $50dc		jsr	FloatCompare
.4dfa	20 bc 50	jsr $50bc		jsr	CompareLess
.4dfd	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>4e00	00 00 00 00				.dword	$00000000
>4e04	00 00					.byte	$00,$00
.4e06	20 dc 50	jsr $50dc		jsr	FloatCompare
.4e09	20 a6 50	jsr $50a6		jsr	CompareEqual
.4e0c	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4e0f	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 47521
>4e12	a1 b9 00 00				.dword	$0000b9a1
>4e16	00 00					.byte	$00,$00
.4e18	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 15433
>4e1b	49 3c 00 00				.dword	$00003c49
>4e1f	00 00					.byte	$00,$00
.4e21	20 dc 50	jsr $50dc		jsr	FloatCompare
.4e24	20 cc 50	jsr $50cc		jsr	CompareLessEqual
.4e27	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>4e2a	00 00 00 00				.dword	$00000000
>4e2e	00 00					.byte	$00,$00
.4e30	20 dc 50	jsr $50dc		jsr	FloatCompare
.4e33	20 a6 50	jsr $50a6		jsr	CompareEqual
.4e36	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4e39	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -17.84222888
>4e3c	3f 71 5e 47				.dword	$475e713f
>4e40	e6 80					.byte	$e6,$80
.4e42	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -14.20223536
>4e45	93 2d 9e 71				.dword	$719e2d93
>4e49	e5 80					.byte	$e5,$80
.4e4b	20 1b 50	jsr $501b		jsr	FloatAdd
.4e4e	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -32.04446424
>4e51	04 c4 16 40				.dword	$4016c404
>4e55	e7 80					.byte	$e7,$80
.4e57	20 dc 50	jsr $50dc		jsr	FloatCompare
.4e5a	20 a6 50	jsr $50a6		jsr	CompareEqual
.4e5d	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4e60	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -17.84222888
>4e63	3f 71 5e 47				.dword	$475e713f
>4e67	e6 80					.byte	$e6,$80
.4e69	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -14.20223536
>4e6c	93 2d 9e 71				.dword	$719e2d93
>4e70	e5 80					.byte	$e5,$80
.4e72	20 15 50	jsr $5015		jsr	FloatSubtract
.4e75	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -3.63999352
>4e78	b1 d3 7a 74				.dword	$747ad3b1
>4e7c	e3 80					.byte	$e3,$80
.4e7e	20 dc 50	jsr $50dc		jsr	FloatCompare
.4e81	20 a6 50	jsr $50a6		jsr	CompareEqual
.4e84	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4e87	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -17.84222888
>4e8a	3f 71 5e 47				.dword	$475e713f
>4e8e	e6 80					.byte	$e6,$80
.4e90	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -14.20223536
>4e93	93 2d 9e 71				.dword	$719e2d93
>4e97	e5 80					.byte	$e5,$80
.4e99	20 b7 52	jsr $52b7		jsr	FloatMultiply
.4e9c	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 253.39953394
>4e9f	ee 23 b3 7e				.dword	$7eb323ee
>4ea3	e9 00					.byte	$e9,$00
.4ea5	20 dc 50	jsr $50dc		jsr	FloatCompare
.4ea8	20 a6 50	jsr $50a6		jsr	CompareEqual
.4eab	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4eae	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -17.84222888
>4eb1	3f 71 5e 47				.dword	$475e713f
>4eb5	e6 80					.byte	$e6,$80
.4eb7	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -14.20223536
>4eba	93 2d 9e 71				.dword	$719e2d93
>4ebe	e5 80					.byte	$e5,$80
.4ec0	20 40 51	jsr $5140		jsr	FloatDivide
.4ec3	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 1.25629723
>4ec6	7f 2c 67 50				.dword	$50672c7f
>4eca	e2 00					.byte	$e2,$00
.4ecc	20 dc 50	jsr $50dc		jsr	FloatCompare
.4ecf	20 a6 50	jsr $50a6		jsr	CompareEqual
.4ed2	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4ed5	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -52.10261602
>4ed8	16 8a 34 68				.dword	$68348a16
>4edc	e7 80					.byte	$e7,$80
.4ede	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 11.38802948
>4ee1	33 af 1a 5b				.dword	$5b1aaf33
>4ee5	e5 00					.byte	$e5,$00
.4ee7	20 dc 50	jsr $50dc		jsr	FloatCompare
.4eea	20 c4 50	jsr $50c4		jsr	CompareGreater
.4eed	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>4ef0	00 00 00 00				.dword	$00000000
>4ef4	00 00					.byte	$00,$00
.4ef6	20 dc 50	jsr $50dc		jsr	FloatCompare
.4ef9	20 a6 50	jsr $50a6		jsr	CompareEqual
.4efc	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4eff	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -52.10261602
>4f02	16 8a 34 68				.dword	$68348a16
>4f06	e7 80					.byte	$e7,$80
.4f08	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 11.38802948
>4f0b	33 af 1a 5b				.dword	$5b1aaf33
>4f0f	e5 00					.byte	$e5,$00
.4f11	20 dc 50	jsr $50dc		jsr	FloatCompare
.4f14	20 d4 50	jsr $50d4		jsr	CompareGreaterEqual
.4f17	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>4f1a	00 00 00 00				.dword	$00000000
>4f1e	00 00					.byte	$00,$00
.4f20	20 dc 50	jsr $50dc		jsr	FloatCompare
.4f23	20 a6 50	jsr $50a6		jsr	CompareEqual
.4f26	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4f29	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -52.10261602
>4f2c	16 8a 34 68				.dword	$68348a16
>4f30	e7 80					.byte	$e7,$80
.4f32	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 11.38802948
>4f35	33 af 1a 5b				.dword	$5b1aaf33
>4f39	e5 00					.byte	$e5,$00
.4f3b	20 dc 50	jsr $50dc		jsr	FloatCompare
.4f3e	20 bc 50	jsr $50bc		jsr	CompareLess
.4f41	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>4f44	01 00 00 00				.dword	$00000001
>4f48	00 80					.byte	$00,$80
.4f4a	20 dc 50	jsr $50dc		jsr	FloatCompare
.4f4d	20 a6 50	jsr $50a6		jsr	CompareEqual
.4f50	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4f53	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -52.10261602
>4f56	16 8a 34 68				.dword	$68348a16
>4f5a	e7 80					.byte	$e7,$80
.4f5c	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 11.38802948
>4f5f	33 af 1a 5b				.dword	$5b1aaf33
>4f63	e5 00					.byte	$e5,$00
.4f65	20 dc 50	jsr $50dc		jsr	FloatCompare
.4f68	20 cc 50	jsr $50cc		jsr	CompareLessEqual
.4f6b	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>4f6e	01 00 00 00				.dword	$00000001
>4f72	00 80					.byte	$00,$80
.4f74	20 dc 50	jsr $50dc		jsr	FloatCompare
.4f77	20 a6 50	jsr $50a6		jsr	CompareEqual
.4f7a	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4f7d	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -52.10261602
>4f80	16 8a 34 68				.dword	$68348a16
>4f84	e7 80					.byte	$e7,$80
.4f86	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 11.38802948
>4f89	33 af 1a 5b				.dword	$5b1aaf33
>4f8d	e5 00					.byte	$e5,$00
.4f8f	20 dc 50	jsr $50dc		jsr	FloatCompare
.4f92	20 a6 50	jsr $50a6		jsr	CompareEqual
.4f95	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 0
>4f98	00 00 00 00				.dword	$00000000
>4f9c	00 00					.byte	$00,$00
.4f9e	20 dc 50	jsr $50dc		jsr	FloatCompare
.4fa1	20 a6 50	jsr $50a6		jsr	CompareEqual
.4fa4	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck
.4fa7	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -52.10261602
>4faa	16 8a 34 68				.dword	$68348a16
>4fae	e7 80					.byte	$e7,$80
.4fb0	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; 11.38802948
>4fb3	33 af 1a 5b				.dword	$5b1aaf33
>4fb7	e5 00					.byte	$e5,$00
.4fb9	20 dc 50	jsr $50dc		jsr	FloatCompare
.4fbc	20 b6 50	jsr $50b6		jsr	CompareNotEqual
.4fbf	20 e2 4f	jsr $4fe2		jsr	FPPushConstant	; -1
>4fc2	01 00 00 00				.dword	$00000001
>4fc6	00 80					.byte	$00,$80
.4fc8	20 dc 50	jsr $50dc		jsr	FloatCompare
.4fcb	20 a6 50	jsr $50a6		jsr	CompareEqual
.4fce	20 d2 4f	jsr $4fd2		jsr	FPAssertCheck

;******  Return to file: testing/testing.asm

.4fd1	60		rts				rts
.4fd2					FPAssertCheck:
.4fd2	e0 00		cpx #$00			cpx 	#0
.4fd4	d0 06		bne $4fdc			bne 	_FPACFail
.4fd6	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.4fd8	f0 02		beq $4fdc			beq 	_FPACFail
.4fda	ca		dex				dex
.4fdb	60		rts				rts
.4fdc					_FPACFail:
>4fdc	db						.byte 	$DB 						; causes a break in the emulator
.4fdd	80 fd		bra $4fdc			bra 	_FPACFail
.4fdf					FPAbs:
.4fdf	74 2e		stz $2e,x			stz 	NSStatus,x
.4fe1	60		rts				rts
.4fe2					FPPushConstant:
.4fe2	e8		inx				inx
.4fe3	68		pla				pla
.4fe4	7a		ply				ply
.4fe5	85 28		sta $28				sta 	zTemp0
.4fe7	84 29		sty $29				sty 	zTemp0+1
.4fe9	a0 01		ldy #$01			ldy 	#1
.4feb	b1 28		lda ($28),y			lda 	(zTemp0),y
.4fed	95 3a		sta $3a,x			sta 	NSMantissa0,x
.4fef	c8		iny				iny
.4ff0	b1 28		lda ($28),y			lda 	(zTemp0),y
.4ff2	95 46		sta $46,x			sta 	NSMantissa1,x
.4ff4	c8		iny				iny
.4ff5	b1 28		lda ($28),y			lda 	(zTemp0),y
.4ff7	95 52		sta $52,x			sta 	NSMantissa2,x
.4ff9	c8		iny				iny
.4ffa	b1 28		lda ($28),y			lda 	(zTemp0),y
.4ffc	95 5e		sta $5e,x			sta 	NSMantissa3,x
.4ffe	c8		iny				iny
.4fff	b1 28		lda ($28),y			lda 	(zTemp0),y
.5001	95 6a		sta $6a,x			sta 	NSExponent,x
.5003	c8		iny				iny
.5004	b1 28		lda ($28),y			lda 	(zTemp0),y
.5006	95 2e		sta $2e,x			sta 	NSStatus,x
.5008	a5 28		lda $28				lda 	zTemp0
.500a	a4 29		ldy $29				ldy 	zTemp0+1
.500c	18		clc				clc
.500d	69 06		adc #$06			adc 	#6
.500f	90 01		bcc $5012			bcc 	_FPPCNoCarry
.5011	c8		iny				iny
.5012					_FPPCNoCarry:
.5012	5a		phy				phy
.5013	48		pha				pha
.5014	60		rts				rts

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library

=12					MathStackSize = 12
=$40					NSSString = $40 							; string vs typemask
=$00					NSSIFloat = $00 							; ifloat vs typemask
=$20					NSSIInt16 = $20								; when set, a reference is a 16 bit reference (e.g. a%)
=$40					NSSTypeMask = $40
=$80					NSSArray = $80  							; array (in variable code)
.002e					NSStatus:
>002e							.fill 	MathStackSize
.003a					NSMantissa0:
>003a							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0046					NSMantissa1:
>0046							.fill 	MathStackSize
.0052					NSMantissa2:
>0052							.fill 	MathStackSize
.005e					NSMantissa3:
>005e							.fill 	MathStackSize
.006a					NSExponent:
>006a							.fill 	MathStackSize
.0400					numberBuffer:
>0400							.fill 	34
.5015					FloatSubtract:
.5015	b5 2e		lda $2e,x			lda 	NSStatus,x 					; negate top of stack
.5017	49 80		eor #$80			eor 	#$80
.5019	95 2e		sta $2e,x			sta 	NSStatus,x					; and fall through.
.501b					FloatAdd:
.501b	ca		dex				dex
.501c	b5 6a		lda $6a,x			lda 	NSExponent,x 				; can use optimised.
.501e	15 6b		ora $6b,x			ora 	NSExponent+1,x
.5020	15 5e		ora $5e,x			ora 	NSMantissa3,x
.5022	15 5f		ora $5f,x			ora 	NSMantissa3+1,x
.5024	d0 04		bne $502a			bne 	_FAUseFloat
.5026	20 b7 53	jsr $53b7			jsr 	FloatInt32Add 				; use the int32 one.
.5029	60		rts				rts
.502a					_FAUseFloat:
.502a	20 4c 53	jsr $534c			jsr 	FloatNormalise 				; normalise S[X]
.502d	f0 51		beq $5080			beq 	_FAReturn1
.502f	e8		inx				inx 								; normalise S[X+1]
.5030	20 4c 53	jsr $534c			jsr 	FloatNormalise
.5033	ca		dex				dex
.5034	c9 00		cmp #$00			cmp 	#0
.5036	f0 60		beq $5098			beq 	_FAExit 					; if so, just return A
.5038	b5 6a		lda $6a,x			lda 	NSExponent,x 				; are the exponents the same ?
.503a	d5 6b		cmp $6b,x			cmp 	NSExponent+1,x
.503c	f0 18		beq $5056			beq 	_FAExponentsEqual
.503e	b5 6a		lda $6a,x			lda 	NSExponent,x 				; work out the larger exponent
.5040	a8		tay				tay
.5041	38		sec				sec 								; do a signed comparison of the exponents.
.5042	f5 6b		sbc $6b,x			sbc 	NSExponent+1,x
.5044	50 02		bvc $5048			bvc 	_FANoSignedChange
.5046	49 80		eor #$80			eor 	#$80
.5048					_FANoSignedChange:
.5048	29 80		and #$80			and 	#$80
.504a	10 02		bpl $504e			bpl 	_FAHaveMax
.504c	b4 6b		ldy $6b,x			ldy 	NSExponent+1,x
.504e					_FAHaveMax:
.504e	20 99 50	jsr $5099			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.5051	e8		inx				inx
.5052	20 99 50	jsr $5099			jsr 	_FAShiftToExponent
.5055	ca		dex				dex
.5056					_FAExponentsEqual:
.5056	b5 2e		lda $2e,x			lda 	NSStatus,x 					; are the signs the same
.5058	55 2f		eor $2f,x			eor 	NSStatus+1,x
.505a	30 0e		bmi $506a			bmi 	_FADifferentSigns
.505c	20 83 53	jsr $5383			jsr 	FloatAddTopTwoStack 		; do the add of the mantissae
.505f	b5 5e		lda $5e,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.5061	10 35		bpl $5098			bpl 	_FAExit 					; if no, we are done.
.5063	20 10 56	jsr $5610			jsr 	FloatShiftRight 				; shift A right, renormalising it.
.5066	f6 6a		inc $6a,x			inc 	NSExponent,x 				; bump the exponent and exit
.5068	80 2e		bra $5098			bra 	_FAExit
.506a					_FADifferentSigns:
.506a	20 9d 53	jsr $539d			jsr 	FloatSubTopTwoStack 		; subtract mantissa B from A
.506d	b5 5e		lda $5e,x			lda 	NSMantissa3,x 				; is the result negative ?
.506f	10 06		bpl $5077			bpl 	_FACheckZero 				; if no, check for -0
.5071	20 b9 55	jsr $55b9			jsr 	FloatNegate 					; netate result
.5074	20 c0 55	jsr $55c0			jsr 	FloatNegateMantissa 			; negate (2'c) the mantissa
.5077					_FACheckZero:
.5077	20 19 56	jsr $5619			jsr 	FloatIsZero	 				; check for -0
.507a	d0 1c		bne $5098			bne 	_FAExit
.507c	74 2e		stz $2e,x			stz 	NSStatus,x
.507e	80 18		bra $5098			bra 	_FAExit
.5080					_FAReturn1:
.5080	b5 3b		lda $3b,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.5082	95 3a		sta $3a,x			sta 	NSMantissa0,x
.5084	b5 47		lda $47,x			lda 	NSMantissa1+1,x
.5086	95 46		sta $46,x			sta 	NSMantissa1,x
.5088	b5 53		lda $53,x			lda 	NSMantissa2+1,x
.508a	95 52		sta $52,x			sta 	NSMantissa2,x
.508c	b5 5f		lda $5f,x			lda 	NSMantissa3+1,x
.508e	95 5e		sta $5e,x			sta 	NSMantissa3,x
.5090	b5 6b		lda $6b,x			lda 	NSExponent+1,x
.5092	95 6a		sta $6a,x			sta 	NSExponent,x
.5094	b5 2f		lda $2f,x			lda 	NSStatus+1,x
.5096	95 2e		sta $2e,x			sta 	NSStatus,x
.5098					_FAExit:
.5098	60		rts				rts
.5099					_FAShiftToExponent:
.5099					_FAShiftToExponent2:
.5099	98		tya				tya 								; compare Y to exponent
.509a	d5 6a		cmp $6a,x			cmp 	NSExponent,x 				; reached the exponent required ?
.509c	f0 07		beq $50a5			beq 	_FASEExit 					; exit if so.
.509e	20 10 56	jsr $5610			jsr 	FloatShiftRight	 			; shift the mantissa right
.50a1	f6 6a		inc $6a,x			inc 	NSExponent,x 				; increment exponent
.50a3	80 f4		bra $5099			bra 	_FAShiftToExponent2
.50a5					_FASEExit:
.50a5	60		rts				rts
.50a6					CompareEqual:
.50a6	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.50a8	d0 09		bne $50b3			bne 	ReturnFalse
.50aa					ReturnTrue:
.50aa	a9 01		lda #$01			lda 	#1
.50ac	95 3a		sta $3a,x			sta 	NSMantissa0,x
.50ae	a9 80		lda #$80			lda 	#$80
.50b0	95 2e		sta $2e,x			sta 	NSStatus,x
.50b2	60		rts				rts
.50b3					ReturnFalse:
.50b3	74 3a		stz $3a,x			stz 	NSMantissa0,x
.50b5	60		rts				rts
.50b6					CompareNotEqual:
.50b6	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.50b8	d0 f0		bne $50aa			bne 	ReturnTrue
.50ba	80 f7		bra $50b3			bra 	ReturnFalse
.50bc					CompareLess:
.50bc	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.50be	c9 ff		cmp #$ff			cmp 	#$FF
.50c0	f0 e8		beq $50aa			beq 	ReturnTrue
.50c2	80 ef		bra $50b3			bra 	ReturnFalse
.50c4					CompareGreater:
.50c4	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.50c6	c9 01		cmp #$01			cmp 	#$01
.50c8	f0 e0		beq $50aa			beq 	ReturnTrue
.50ca	80 e7		bra $50b3			bra 	ReturnFalse
.50cc					CompareLessEqual:
.50cc	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.50ce	c9 01		cmp #$01			cmp 	#$01
.50d0	d0 d8		bne $50aa			bne 	ReturnTrue
.50d2	80 df		bra $50b3			bra 	ReturnFalse
.50d4					CompareGreaterEqual:
.50d4	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.50d6	c9 ff		cmp #$ff			cmp 	#$FF
.50d8	d0 d0		bne $50aa			bne 	ReturnTrue
.50da	80 d7		bra $50b3			bra 	ReturnFalse
.50dc					FloatCompare:
.50dc	b5 6a		lda $6a,x			lda 	NSExponent,x 				; float comparison.
.50de	15 69		ora $69,x			ora 	NSExponent-1,x 				; integer if both integer.
.50e0	48		pha				pha
.50e1	20 15 50	jsr $5015			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.50e4	68		pla				pla
.50e5	d0 0c		bne $50f3			bne 	_FCCompareFloat
.50e7	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.50e9	15 46		ora $46,x			ora 	NSMantissa1,x
.50eb	15 52		ora $52,x			ora 	NSMantissa2,x
.50ed	15 5e		ora $5e,x			ora 	NSMantissa3,x
.50ef	f0 14		beq $5105			beq 	_FCExit 					; if zero, return zero
.50f1	80 0a		bra $50fd			bra 	_FCSign
.50f3					_FCCompareFloat:
.50f3	b5 46		lda $46,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.50f5	29 f0		and #$f0			and 	#$F0
.50f7	15 52		ora $52,x			ora 	NSMantissa2,x
.50f9	15 5e		ora $5e,x			ora 	NSMantissa3,x
.50fb	f0 08		beq $5105			beq 	_FCExit 					; zero, so approximately identical
.50fd					_FCSign:
.50fd	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.50ff	34 2e		bit $2e,x			bit 	NSStatus,x
.5101	10 02		bpl $5105			bpl 	_FCExit
.5103					_FCNegative:
.5103	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.5105					_FCExit:
.5105	20 f9 55	jsr $55f9			jsr 	FloatSetByte 				; set the result 255,0,1
.5108	60		rts				rts
.5109					FloatScalarTable:
>5109	66 66 66 66				.dword $66666666 ; 0.1
>510d	de					.byte $de
>510e	1f 85 eb 51				.dword $51eb851f ; 0.01
>5112	db					.byte $db
>5113	4c 37 89 41				.dword $4189374c ; 0.001
>5117	d8					.byte $d8
>5118	ac 8b db 68				.dword $68db8bac ; 0.0001
>511c	d4					.byte $d4
>511d	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>5121	d1					.byte $d1
>5122	83 de 1b 43				.dword $431bde83 ; 1e-06
>5126	ce					.byte $ce
>5127	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>512b	ca					.byte $ca
>512c	89 3b e6 55				.dword $55e63b89 ; 1e-08
>5130	c7					.byte $c7
>5131	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>5135	c4					.byte $c4
>5136	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>513a	c0					.byte $c0
>513b	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>513f	bd					.byte $bd
.5140					FloatDivide:
.5140	48		pha				pha
.5141	20 4c 53	jsr $534c			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.5144	ca		dex				dex
.5145	c9 00		cmp #$00			cmp 	#0
.5147	f0 1e		beq $5167			beq 	_FDZero
.5149	20 4c 53	jsr $534c			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.514c	f0 16		beq $5164			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.514e	20 af 51	jsr $51af			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.5151	20 7c 51	jsr $517c			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.5154	20 4c 53	jsr $534c			jsr		FloatNormalise 				; renormalise
.5157	20 42 53	jsr $5342			jsr 	FloatCalculateSign 			; calculate result sign
.515a	b5 6a		lda $6a,x			lda 	NSExponent,x 				; calculate exponent
.515c	38		sec				sec
.515d	f5 6b		sbc $6b,x			sbc 	NSExponent+1,x
.515f	38		sec				sec
.5160	e9 1e		sbc #$1e			sbc 	#30
.5162	95 6a		sta $6a,x			sta 	NSExponent,x
.5164					_FDExit:
.5164	68		pla				pla
.5165	18		clc				clc
.5166	60		rts				rts
.5167					_FDZero:
.5167	68		pla				pla
.5168	38		sec				sec
.5169	60		rts				rts
.516a					DivideInt32:
.516a	20 32 52	jsr $5232			jsr 	FloatIntegerPart 			; make both integers
.516d	ca		dex				dex
.516e	20 32 52	jsr $5232			jsr 	FloatIntegerPart
.5171	20 8d 51	jsr $518d			jsr 	Int32Divide 				; divide
.5174	20 7c 51	jsr $517c			jsr 	NSMCopyPlusTwoToZero 		; copy result
.5177	20 42 53	jsr $5342			jsr 	FloatCalculateSign 			; calculate result sign
.517a	18		clc				clc
.517b	60		rts				rts
.517c					NSMCopyPlusTwoToZero:
.517c	b5 3c		lda $3c,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.517e	95 3a		sta $3a,x			sta 	NSMantissa0,x
.5180	b5 48		lda $48,x			lda 	NSMantissa1+2,x
.5182	95 46		sta $46,x			sta 	NSMantissa1,x
.5184	b5 54		lda $54,x			lda 	NSMantissa2+2,x
.5186	95 52		sta $52,x			sta 	NSMantissa2,x
.5188	b5 60		lda $60,x			lda 	NSMantissa3+2,x
.518a	95 5e		sta $5e,x			sta 	NSMantissa3,x
.518c	60		rts				rts
.518d					Int32Divide:
.518d	48		pha				pha 								; save AXY
.518e	5a		phy				phy
.518f	20 da 55	jsr $55da			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.5192	20 f3 55	jsr $55f3			jsr 	FloatSetZeroMantissaOnly 	; set S[X] to zero
.5195	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.5197					_I32DivideLoop:
.5197	e8		inx				inx
.5198	e8		inx				inx
.5199	20 06 56	jsr $5606			jsr 	FloatShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.519c	ca		dex				dex
.519d	ca		dex				dex
.519e	20 07 56	jsr $5607			jsr 	FloatRotateLeft
.51a1	20 cd 51	jsr $51cd			jsr 	FloatDivideCheck 			; check if subtract possible
.51a4	90 02		bcc $51a8			bcc 	_I32DivideNoCarryIn
.51a6	f6 3c		inc $3c,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.51a8					_I32DivideNoCarryIn:
.51a8	88		dey				dey 								; loop round till division completed.
.51a9	d0 ec		bne $5197			bne 	_I32DivideLoop
.51ab	7a		ply				ply 								; restore AXY and exit
.51ac	68		pla				pla
.51ad	18		clc				clc
.51ae	60		rts				rts
.51af					Int32ShiftDivide:
.51af	48		pha				pha 								; save AY
.51b0	5a		phy				phy
.51b1	e8		inx				inx 								; clear S[X+2]
.51b2	e8		inx				inx
.51b3	20 f7 55	jsr $55f7			jsr 	FloatSetZero
.51b6	ca		dex				dex
.51b7	ca		dex				dex
.51b8	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.51ba					_I32SDLoop:
.51ba	20 cd 51	jsr $51cd			jsr 	FloatDivideCheck 			; check if subtract possible
.51bd	e8		inx				inx
.51be	e8		inx				inx
.51bf	20 07 56	jsr $5607			jsr 	FloatRotateLeft				; shift 64 bit FPA left, rotating carry in
.51c2	ca		dex				dex
.51c3	ca		dex				dex
.51c4	20 07 56	jsr $5607			jsr 	FloatRotateLeft
.51c7	88		dey				dey 	 							; do 31 times
.51c8	d0 f0		bne $51ba			bne 	_I32SDLoop
.51ca	7a		ply				ply 								; restore AY and exit
.51cb	68		pla				pla
.51cc	60		rts				rts
.51cd					FloatDivideCheck:
.51cd	20 9d 53	jsr $539d			jsr 	FloatSubTopTwoStack 		; subtract Stack[X+1] from Stack[X+0]
.51d0	b0 04		bcs $51d6			bcs 	_DCSExit 					; if carry set, then could do, exit
.51d2	20 83 53	jsr $5383			jsr 	FloatAddTopTwoStack 		; add it back in
.51d5	18		clc				clc 								; and return False
.51d6					_DCSExit:
.51d6	60		rts				rts
.51d7					FloatFractionalPart:
.51d7	5a		phy				phy
.51d8	b5 2e		lda $2e,x			lda 	NSStatus,x 					; take absolute value
.51da	29 7f		and #$7f			and 	#$7F
.51dc	95 2e		sta $2e,x			sta 	NSStatus,x
.51de	20 4c 53	jsr $534c			jsr 	FloatNormalise
.51e1	b5 6a		lda $6a,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.51e3	38		sec				sec
.51e4	e9 e0		sbc #$e0			sbc 	#$E0
.51e6	90 29		bcc $5211			bcc 	_FFPExit 					; already fractional
.51e8	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.51ea	b0 22		bcs $520e			bcs 	_FFPZero
.51ec	a8		tay				tay 								; put count to do in Y
.51ed	b5 5e		lda $5e,x			lda 	NSMantissa3,x 				; do each in turn.
.51ef	20 16 52	jsr $5216			jsr 	_FFPPartial
.51f2	95 5e		sta $5e,x			sta 	NSMantissa3,x
.51f4	b5 52		lda $52,x			lda 	NSMantissa2,x
.51f6	20 16 52	jsr $5216			jsr 	_FFPPartial
.51f9	95 52		sta $52,x			sta 	NSMantissa2,x
.51fb	b5 46		lda $46,x			lda 	NSMantissa1,x
.51fd	20 16 52	jsr $5216			jsr 	_FFPPartial
.5200	95 46		sta $46,x			sta 	NSMantissa1,x
.5202	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.5204	20 16 52	jsr $5216			jsr 	_FFPPartial
.5207	95 3a		sta $3a,x			sta 	NSMantissa0,x
.5209	20 19 56	jsr $5619			jsr 	FloatIsZero 					; zeroed check.
.520c	d0 03		bne $5211			bne 	_FFPExit
.520e					_FFPZero:
.520e	20 f7 55	jsr $55f7			jsr 	FloatSetZero
.5211					_FFPExit:
.5211	20 4c 53	jsr $534c			jsr 	FloatNormalise
.5214	7a		ply				ply
.5215	60		rts				rts
.5216					_FFPPartial:
.5216	c0 00		cpy #$00			cpy 	#0 							; no more to do
.5218	f0 17		beq $5231			beq 	_FFFPPExit
.521a	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.521c	b0 0c		bcs $522a			bcs 	_FFFPPWholeByte
.521e	5a		phy				phy
.521f					_FFFPPLeft:
.521f	0a		asl a				asl 	a
.5220	88		dey				dey
.5221	d0 fc		bne $521f			bne 	_FFFPPLeft
.5223	7a		ply				ply
.5224					_FFFPPRight:
.5224	4a		lsr a				lsr 	a
.5225	88		dey				dey
.5226	d0 fc		bne $5224			bne 	_FFFPPRight
.5228	80 07		bra $5231			bra 	_FFFPPExit
.522a					_FFFPPWholeByte:
.522a	98		tya				tya 								; subtract 8 from count
.522b	38		sec				sec
.522c	e9 08		sbc #$08			sbc 	#8
.522e	a8		tay				tay
.522f	a9 00		lda #$00			lda 	#0 							; and clear all
.5231					_FFFPPExit:
.5231	60		rts				rts
.5232					FloatIntegerPart:
.5232	48		pha				pha
.5233	b5 6a		lda $6a,x			lda 	NSExponent,x 				; is it integer already ?
.5235	f0 1d		beq $5254			beq 	_FIPExit 					; if so do nothing
.5237	20 19 56	jsr $5619			jsr 	FloatIsZero 				; is it zero ?
.523a	f0 15		beq $5251			beq 	_FIPZero 					; if so return zero.
.523c	20 4c 53	jsr $534c			jsr 	FloatNormalise 				; normalise
.523f	f0 10		beq $5251			beq 	_FIPZero 					; normalised to zero, exit zero
.5241					_FIPShift:
.5241	b5 6a		lda $6a,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.5243	10 07		bpl $524c			bpl 	_FIPCheckZero
.5245	20 10 56	jsr $5610			jsr 	FloatShiftRight 			; shift mantissa right
.5248	f6 6a		inc $6a,x			inc 	NSExponent,x 				; bump exponent
.524a	80 f5		bra $5241			bra 	_FIPShift
.524c					_FIPCheckZero:
.524c	20 19 56	jsr $5619			jsr 	FloatIsZero 				; avoid -0 problem
.524f	d0 03		bne $5254			bne 	_FIPExit 					; set to zero if mantissa zero.
.5251					_FIPZero:
.5251	20 f7 55	jsr $55f7			jsr 	FloatSetZero
.5254					_FIPExit:
.5254	68		pla				pla
.5255	60		rts				rts
.5256					FloatIntegerPartDown:
.5256	48		pha				pha
.5257	5a		phy				phy
.5258	b5 6a		lda $6a,x			lda 	NSExponent,x 				; is it integer already ?
.525a	f0 36		beq $5292			beq 	_FIPExit 					; if so do nothing
.525c	20 19 56	jsr $5619			jsr 	FloatIsZero 				; is it zero ?
.525f	f0 2e		beq $528f			beq 	_FIPZero 					; if so return zero.
.5261	20 4c 53	jsr $534c			jsr 	FloatNormalise 				; normalise
.5264	f0 29		beq $528f			beq 	_FIPZero 					; normalised to zero, exit zero
.5266	a0 00		ldy #$00			ldy 	#0 							; reset the count of bits.
.5268					_FIPShift:
.5268	b5 6a		lda $6a,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.526a	10 0a		bpl $5276			bpl 	_FIPCheckDown
.526c	20 10 56	jsr $5610			jsr 	FloatShiftRight 			; shift mantissa right
.526f	90 01		bcc $5272			bcc 	_FIPNoFrac 					; shifted a zero out ?
.5271	c8		iny				iny
.5272					_FIPNoFrac:
.5272	f6 6a		inc $6a,x			inc 	NSExponent,x 				; bump exponent
.5274	80 f2		bra $5268			bra 	_FIPShift
.5276					_FIPCheckDown:
.5276	c0 00		cpy #$00			cpy 	#0 							; were there any fractional bits.
.5278	f0 10		beq $528a			beq 	_FIPCheckZero
.527a	34 2e		bit $2e,x			bit 	NSStatus,x 					; +ve
.527c	10 0c		bpl $528a			bpl 	_FIPCheckZero
.527e	e8		inx				inx 								; -ve so round *down*.
.527f	a9 01		lda #$01			lda 	#1
.5281	20 f9 55	jsr $55f9			jsr 	FloatSetByte
.5284	20 b9 55	jsr $55b9			jsr 	FloatNegate
.5287	20 1b 50	jsr $501b			jsr 	FloatAdd
.528a					_FIPCheckZero:
.528a	20 19 56	jsr $5619			jsr 	FloatIsZero 				; avoid -0 problem
.528d	d0 03		bne $5292			bne 	_FIPExit 					; set to zero if mantissa zero.
.528f					_FIPZero:
.528f	20 f7 55	jsr $55f7			jsr 	FloatSetZero
.5292					_FIPExit:
.5292	7a		ply				ply
.5293	68		pla				pla
.5294	60		rts				rts
.5295					FloatInt8Multiply:
.5295	5a		phy				phy
.5296	b5 3a		lda $3a,x			lda 	NSMantissa0,x 				; right shifted multiplier in Y
.5298	a8		tay				tay
.5299	74 3a		stz $3a,x			stz 	NSMantissa0,x 				; zero the result (already 8 bit constant)
.529b					_FI8MLoop:
.529b	98		tya				tya 								; shift right shifter right into carry
.529c	4a		lsr a				lsr 	a
.529d	a8		tay				tay
.529e	90 0d		bcc $52ad			bcc 	_FI8MNoAdd
.52a0	18		clc				clc
.52a1	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.52a3	75 3b		adc $3b,x			adc 	NSMantissa0+1,x
.52a5	95 3a		sta $3a,x			sta 	NSMantissa0,x
.52a7	b5 46		lda $46,x			lda 	NSMantissa1,x
.52a9	75 47		adc $47,x			adc 	NSMantissa1+1,x
.52ab	95 46		sta $46,x			sta 	NSMantissa1,x
.52ad					_FI8MNoAdd:
.52ad	16 3b		asl $3b,x			asl 	NSMantissa0+1,x 			; shift adder left
.52af	36 47		rol $47,x			rol 	NSMantissa1+1,x
.52b1	c0 00		cpy #$00			cpy 	#0
.52b3	d0 e6		bne $529b			bne 	_FI8MLoop 					; until right shifter zero.
.52b5	7a		ply				ply
.52b6	60		rts				rts
.52b7					FloatMultiply:
.52b7	ca		dex				dex
.52b8	b5 6a		lda $6a,x			lda 	NSExponent,x 				; can use optimised ?
.52ba	15 6b		ora $6b,x			ora 	NSExponent+1,x
.52bc	15 5e		ora $5e,x			ora 	NSMantissa3,x
.52be	15 5f		ora $5f,x			ora 	NSMantissa3+1,x
.52c0	d0 21		bne $52e3			bne 	_FMUseFloat
.52c2	b5 2e		lda $2e,x			lda 	NSStatus,x 					; check if it is 8 bit unsigned
.52c4	15 2f		ora $2f,x			ora 	NSStatus+1,x
.52c6	29 80		and #$80			and 	#$80
.52c8	15 5e		ora $5e,x			ora 	NSMantissa3,x
.52ca	15 52		ora $52,x			ora 	NSMantissa2,x
.52cc	15 46		ora $46,x			ora 	NSMantissa1,x
.52ce	15 5f		ora $5f,x			ora 	NSMantissa3+1,x
.52d0	15 53		ora $53,x			ora 	NSMantissa2+1,x
.52d2	15 47		ora $47,x			ora 	NSMantissa1+1,x
.52d4	d0 04		bne $52da			bne 	_FMInt32
.52d6	20 95 52	jsr $5295			jsr 	FloatInt8Multiply 			; use fast 8x8 multiply.
.52d9	60		rts				rts
.52da					_FMInt32:
.52da	20 04 53	jsr $5304			jsr 	FloatMultiplyShort			; use the int32 one.
.52dd	18		clc				clc 								; fix it up if gone out of range
.52de	75 6a		adc $6a,x			adc 	NSExponent,x
.52e0	95 6a		sta $6a,x			sta 	NSExponent,x
.52e2	60		rts				rts
.52e3					_FMUseFloat:
.52e3	20 4c 53	jsr $534c			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.52e6	f0 18		beq $5300			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.52e8	e8		inx				inx
.52e9	20 4c 53	jsr $534c			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.52ec	ca		dex				dex
.52ed	c9 00		cmp #$00			cmp 	#0
.52ef	f0 0c		beq $52fd			beq 	_FDSetZero
.52f1	20 04 53	jsr $5304			jsr 	FloatMultiplyShort 			; calculate the result.
.52f4	75 6a		adc $6a,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.52f6	18		clc				clc
.52f7	75 6b		adc $6b,x			adc 	NSExponent+1,x
.52f9	95 6a		sta $6a,x			sta 	NSExponent,x
.52fb	80 03		bra $5300			bra 	_FDExit
.52fd					_FDSetZero:
.52fd	20 f7 55	jsr $55f7			jsr 	FloatSetZero 				; return 0
.5300					_FDExit:
.5300	20 4c 53	jsr $534c			jsr 	FloatNormalise 				; normalise the result
.5303	60		rts				rts
.5304					FloatMultiplyShort:
.5304	5a		phy				phy 								; save Y
.5305	20 da 55	jsr $55da			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.5308	20 f3 55	jsr $55f3			jsr 	FloatSetZeroMantissaOnly 	; set mantissa S[X] to zero
.530b	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.530d					_I32MLoop:
.530d	b5 3c		lda $3c,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.530f	15 48		ora $48,x			ora 	NSMantissa1+2,x
.5311	15 54		ora $54,x			ora 	NSMantissa2+2,x
.5313	15 60		ora $60,x			ora 	NSMantissa3+2,x
.5315	f0 25		beq $533c			beq 	_I32MExit 					; exit if zero
.5317	b5 3c		lda $3c,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.5319	29 01		and #$01			and 	#1
.531b	f0 0d		beq $532a			beq 	_I32MNoAdd
.531d	20 83 53	jsr $5383			jsr 	FloatAddTopTwoStack 		; if so add S[X+1] to S[X+0]
.5320	b5 5e		lda $5e,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.5322	10 06		bpl $532a			bpl 	_I32MNoAdd
.5324					_I32ShiftRight:
.5324	20 10 56	jsr $5610			jsr 	FloatShiftRight 			; shift S[X] right
.5327	c8		iny				iny 								; increment shift count
.5328	80 09		bra $5333			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.532a					_I32MNoAdd:
.532a	34 5f		bit $5f,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.532c	70 f6		bvs $5324			bvs 	_I32ShiftRight 				; instead.
.532e	e8		inx				inx
.532f	20 06 56	jsr $5606			jsr 	FloatShiftLeft 				; shift additive S[X+1] left
.5332	ca		dex				dex
.5333					_I32MShiftUpper:
.5333	e8		inx				inx 								; shift S[X+2] right
.5334	e8		inx				inx
.5335	20 10 56	jsr $5610			jsr 	FloatShiftRight
.5338	ca		dex				dex
.5339	ca		dex				dex
.533a	80 d1		bra $530d			bra 	_I32MLoop 					; try again.
.533c					_I32MExit:
.533c	20 42 53	jsr $5342			jsr 	FloatCalculateSign
.533f	98		tya				tya 								; shift in A
.5340	7a		ply				ply 								; restore Y and exit
.5341	60		rts				rts
.5342					FloatCalculateSign:
.5342	b5 2e		lda $2e,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.5344	16 2e		asl $2e,x			asl 	NSStatus,x 					; shift result left
.5346	55 2f		eor $2f,x			eor 	NSStatus+1,x
.5348	0a		asl a				asl 	a 							; shift bit 7 into carry
.5349	76 2e		ror $2e,x			ror 	NSStatus,x 					; shift right into status byte.
.534b	60		rts				rts
.534c					FloatNormalise:
.534c	20 19 56	jsr $5619			jsr 	FloatIsZero 				; if zero exit
.534f	d0 07		bne $5358			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.5351	16 2e		asl $2e,x			asl 	NSStatus,x 					; clear the sign bit.
.5353	76 2e		ror $2e,x			ror 	NSStatus,x 					; (no -0)
.5355	a9 00		lda #$00			lda 	#0 							; set Z flag
.5357	60		rts				rts
.5358					_NSNormaliseOptimise:
.5358	b5 5e		lda $5e,x			lda 	NSMantissa3,x 				; upper byte zero ?
.535a	d0 19		bne $5375			bne 	_NSNormaliseLoop
.535c	b5 52		lda $52,x			lda 	NSMantissa2,x 				; byte normalise
.535e	30 15		bmi $5375			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.5360	95 5e		sta $5e,x			sta 	NSMantissa3,x
.5362	b5 46		lda $46,x			lda 	NSMantissa1,x
.5364	95 52		sta $52,x			sta 	NSMantissa2,x
.5366	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.5368	95 46		sta $46,x			sta 	NSMantissa1,x
.536a	74 3a		stz $3a,x			stz 	NSMantissa0,x
.536c	b5 6a		lda $6a,x			lda 	NSExponent,x
.536e	38		sec				sec
.536f	e9 08		sbc #$08			sbc 	#8
.5371	95 6a		sta $6a,x			sta 	NSExponent,x
.5373	80 e3		bra $5358			bra 	_NSNormaliseOptimise
.5375					_NSNormaliseLoop:
.5375	34 5e		bit $5e,x			bit 	NSMantissa3,x 				; bit 30 set ?
.5377	70 07		bvs $5380			bvs 	_NSNExit 					; exit if so with Z flag clear
.5379	20 06 56	jsr $5606			jsr 	FloatShiftLeft 				; shift mantissa left
.537c	d6 6a		dec $6a,x			dec 	NSExponent,x 				; adjust exponent
.537e	80 f5		bra $5375			bra 	_NSNormaliseLoop
.5380					_NSNExit:
.5380	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.5382	60		rts				rts
.5383					FloatAddTopTwoStack:
.5383	18		clc				clc
.5384	b5 3a		lda $3a,x			lda		NSMantissa0,x
.5386	75 3b		adc $3b,x			adc 		NSMantissa0+1,x
.5388	95 3a		sta $3a,x			sta 	NSMantissa0,x
.538a	b5 46		lda $46,x			lda		NSMantissa1,x
.538c	75 47		adc $47,x			adc 		NSMantissa1+1,x
.538e	95 46		sta $46,x			sta 	NSMantissa1,x
.5390	b5 52		lda $52,x			lda		NSMantissa2,x
.5392	75 53		adc $53,x			adc 		NSMantissa2+1,x
.5394	95 52		sta $52,x			sta 	NSMantissa2,x
.5396	b5 5e		lda $5e,x			lda		NSMantissa3,x
.5398	75 5f		adc $5f,x			adc 		NSMantissa3+1,x
.539a	95 5e		sta $5e,x			sta 	NSMantissa3,x
.539c	60		rts				rts
.539d					FloatSubTopTwoStack:
.539d	38		sec				sec
.539e	b5 3a		lda $3a,x			lda		NSMantissa0,x
.53a0	f5 3b		sbc $3b,x			sbc 		NSMantissa0+1,x
.53a2	95 3a		sta $3a,x			sta 	NSMantissa0,x
.53a4	b5 46		lda $46,x			lda		NSMantissa1,x
.53a6	f5 47		sbc $47,x			sbc 		NSMantissa1+1,x
.53a8	95 46		sta $46,x			sta 	NSMantissa1,x
.53aa	b5 52		lda $52,x			lda		NSMantissa2,x
.53ac	f5 53		sbc $53,x			sbc 		NSMantissa2+1,x
.53ae	95 52		sta $52,x			sta 	NSMantissa2,x
.53b0	b5 5e		lda $5e,x			lda		NSMantissa3,x
.53b2	f5 5f		sbc $5f,x			sbc 		NSMantissa3+1,x
.53b4	95 5e		sta $5e,x			sta 	NSMantissa3,x
.53b6	60		rts				rts
.53b7					FloatInt32Add:
.53b7	b5 2e		lda $2e,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.53b9	55 2f		eor $2f,x			eor 	NSStatus+1,x
.53bb	30 04		bmi $53c1			bmi 	_DiffSigns
.53bd	20 83 53	jsr $5383			jsr		FloatAddTopTwoStack
.53c0	60		rts				rts
.53c1					_DiffSigns:
.53c1	20 9d 53	jsr $539d			jsr 	FloatSubTopTwoStack 		; do a physical subtraction
.53c4	34 5e		bit $5e,x			bit 	NSMantissa3,x 				; result is +ve, okay
.53c6	10 07		bpl $53cf			bpl 	_AddExit
.53c8	b5 2f		lda $2f,x			lda 	NSStatus+1,x 				; sign is that of 11th value
.53ca	95 2e		sta $2e,x			sta 	NSStatus,x
.53cc	20 c0 55	jsr $55c0			jsr 	FloatNegateMantissa 		; negate the mantissa and exit
.53cf					_AddExit:
.53cf	20 19 56	jsr $5619			jsr 	FloatIsZero 				; check for -0
.53d2	d0 02		bne $53d6			bne 	_AddNonZero
.53d4	74 2e		stz $2e,x			stz 	NSStatus,x
.53d6					_AddNonZero:
.53d6	60		rts				rts
=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.53d7					FloatEncodeStart:
.53d7	38		sec				sec
.53d8	80 01		bra $53db			bra 	FloatEncodeContinue+1
.53da					FloatEncodeContinue:
.53da	18		clc				clc
.53db					FloatEncode:
.53db	08		php				php 								; save reset flag.
.53dc	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.53de	f0 15		beq $53f5			beq 	_ENIsOkay
.53e0	c9 30		cmp #$30			cmp 	#"0"
.53e2	90 04		bcc $53e8			bcc 	_ENBadNumber
.53e4	c9 3a		cmp #$3a			cmp 	#"9"+1
.53e6	90 0d		bcc $53f5			bcc 	_ENIsOkay
.53e8					_ENBadNumber:
.53e8	28		plp				plp 								; throw saved reset
.53e9	ad 22 04	lda $0422			lda 	encodeState 				; if in decimal mode, construct final number
.53ec	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.53ee	d0 03		bne $53f3			bne 	_ENFail
.53f0	4c 6d 54	jmp $546d			jmp 	_ENConstructFinal
.53f3					_ENFail:
.53f3	18		clc				clc 								; not allowed
.53f4	60		rts				rts
.53f5					_ENIsOkay:
.53f5	28		plp				plp 								; are we restarting
.53f6	90 15		bcc $540d			bcc 	_ENNoRestart
.53f8					_ENStartEncode:
.53f8	c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.53fa	f0 0c		beq $5408			beq 	_ENFirstDP
.53fc	29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.53fe	20 f9 55	jsr $55f9			jsr 	FloatSetByte 				; in single byte mode.
.5401	a9 01		lda #$01			lda 	#ESTA_Low
.5403					_ENExitChange:
.5403	8d 22 04	sta $0422			sta 	encodeState 				; save new state
.5406	38		sec				sec
.5407	60		rts				rts
.5408					_ENFirstDP:
.5408	20 f7 55	jsr $55f7			jsr 	FloatSetZero 				; clear integer part
.540b	80 3c		bra $5449			bra 	_ESTASwitchFloat			; go straight to float and exi
.540d					_ENNoRestart:
.540d	48		pha				pha 								; save digit or DP on stack.
.540e	ad 22 04	lda $0422			lda 	encodeState 				; get current state
.5411	c9 01		cmp #$01			cmp 	#ESTA_Low
.5413	f0 09		beq $541e			beq  	_ESTALowState
.5415	c9 02		cmp #$02			cmp 	#ESTA_High
.5417	f0 26		beq $543f			beq 	_ESTAHighState
.5419	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.541b	f0 38		beq $5455			beq 	_ESTADecimalState
>541d	db						.byte 	$DB 						; causes a break in the emulator
.541e					_ESTALowState:
.541e	68		pla				pla 								; get value back
.541f	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.5421	f0 26		beq $5449			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.5423	29 0f		and #$0f			and 	#15 						; make digit
.5425	8d 23 04	sta $0423			sta 	digitTemp 					; save it.
.5428	b5 3a		lda $3a,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.542a	0a		asl a				asl 	a
.542b	0a		asl a				asl 	a
.542c	75 3a		adc $3a,x			adc 	NSMantissa0,x
.542e	0a		asl a				asl 	a
.542f	6d 23 04	adc $0423			adc 	digitTemp
.5432	95 3a		sta $3a,x			sta 	NSMantissa0,x
.5434	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.5436	90 05		bcc $543d			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.5438	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.543a	8d 22 04	sta $0422			sta 	encodeState
.543d					_ESTANoSwitch:
.543d	38		sec				sec
.543e	60		rts				rts
.543f					_ESTAHighState:
.543f	68		pla				pla 								; get value back
.5440	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.5442	f0 05		beq $5449			beq 	_ESTASwitchFloat
.5444	20 9f 54	jsr $549f			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.5447	38		sec				sec
.5448	60		rts				rts
.5449					_ESTASwitchFloat:
.5449	9c 24 04	stz $0424			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.544c	e8		inx				inx 								; zero the decimal additive.
.544d	20 f7 55	jsr $55f7			jsr 	FloatSetZero
.5450	ca		dex				dex
.5451	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.5453	80 ae		bra $5403			bra 	_ENExitChange
.5455					_ESTADecimalState:
.5455	68		pla				pla 								; digit.
.5456	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 11th decimal point.
.5458	f0 99		beq $53f3			beq 	_ENFail
.545a	e8		inx				inx 								; put digit into fractional part of X+1
.545b	20 9f 54	jsr $549f			jsr 	ESTAShiftDigitIntoMantissa
.545e	ca		dex				dex
.545f	ee 24 04	inc $0424			inc 	decimalCount 				; bump the count of decimals
.5462	ad 24 04	lda $0424			lda 	decimalCount 				; too many decimal digits.
.5465	c9 0b		cmp #$0b			cmp 	#11
.5467	f0 02		beq $546b			beq 	_ESTADSFail
.5469	38		sec				sec
.546a	60		rts				rts
.546b					_ESTADSFail:
.546b	18		clc				clc
.546c	60		rts				rts
.546d					_ENConstructFinal:
.546d	ad 24 04	lda $0424			lda 	decimalCount 				; get decimal count
.5470	f0 2b		beq $549d			beq 	_ENCFExit 					; no decimals
.5472	5a		phy				phy
.5473	0a		asl a				asl 	a 							; x 4 and CLC
.5474	0a		asl a				asl 	a
.5475	6d 24 04	adc $0424			adc 	decimalCount
.5478	a8		tay				tay
.5479	b9 04 51	lda $5104,y			lda 	FloatScalarTable-5,y 		; copy decimal scalar to X+2
.547c	95 3c		sta $3c,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.547e	b9 05 51	lda $5105,y			lda 	FloatScalarTable-5+1,y
.5481	95 48		sta $48,x			sta 	NSMantissa1+2,x
.5483	b9 06 51	lda $5106,y			lda 	FloatScalarTable-5+2,y
.5486	95 54		sta $54,x			sta 	NSMantissa2+2,x
.5488	b9 07 51	lda $5107,y			lda 	FloatScalarTable-5+3,y
.548b	95 60		sta $60,x			sta 	NSMantissa3+2,x
.548d	b9 08 51	lda $5108,y			lda 	FloatScalarTable-5+4,y
.5490	95 6c		sta $6c,x			sta 	NSExponent+2,x
.5492	74 30		stz $30,x			stz 	NSStatus+2,x 				; make +ve
.5494	e8		inx				inx 								; multiply decimal const by decimal scalar
.5495	e8		inx				inx
.5496	20 b7 52	jsr $52b7			jsr 	FloatMultiply
.5499	20 1b 50	jsr $501b			jsr 	FloatAdd 					; add to integer part.
.549c	7a		ply				ply
.549d					_ENCFExit:
.549d	18		clc				clc 								; reject the digit.
.549e	60		rts				rts
.549f					ESTAShiftDigitIntoMantissa:
.549f	29 0f		and #$0f			and 	#15 						; save digit
.54a1	48		pha				pha
.54a2	b5 5e		lda $5e,x			lda 	NSMantissa3,x 				; push mantissa on stack
.54a4	48		pha				pha
.54a5	b5 52		lda $52,x			lda 	NSMantissa2,x
.54a7	48		pha				pha
.54a8	b5 46		lda $46,x			lda 	NSMantissa1,x
.54aa	48		pha				pha
.54ab	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.54ad	48		pha				pha
.54ae	20 06 56	jsr $5606			jsr 	FloatShiftLeft 				; x 2
.54b1	20 06 56	jsr $5606			jsr 	FloatShiftLeft 				; x 4
.54b4	18		clc				clc 								; pop mantissa and add
.54b5	68		pla				pla
.54b6	75 3a		adc $3a,x			adc 	NSMantissa0,x
.54b8	95 3a		sta $3a,x			sta 	NSMantissa0,x
.54ba	68		pla				pla
.54bb	75 46		adc $46,x			adc 	NSMantissa1,x
.54bd	95 46		sta $46,x			sta 	NSMantissa1,x
.54bf	68		pla				pla
.54c0	75 52		adc $52,x			adc 	NSMantissa2,x
.54c2	95 52		sta $52,x			sta 	NSMantissa2,x
.54c4	68		pla				pla
.54c5	75 5e		adc $5e,x			adc 	NSMantissa3,x
.54c7	95 5e		sta $5e,x			sta 	NSMantissa3,x 				; x 5
.54c9	20 06 56	jsr $5606			jsr 	FloatShiftLeft 				; x 10
.54cc	68		pla				pla 								; add digit
.54cd	18		clc				clc
.54ce	75 3a		adc $3a,x			adc 	NSMantissa0,x
.54d0	95 3a		sta $3a,x			sta 	NSMantissa0,x
.54d2	90 0a		bcc $54de			bcc 	_ESTASDExit
.54d4	f6 46		inc $46,x			inc 	NSMantissa1,x
.54d6	d0 06		bne $54de			bne 	_ESTASDExit
.54d8	f6 52		inc $52,x			inc 	NSMantissa2,x
.54da	d0 02		bne $54de			bne 	_ESTASDExit
.54dc	f6 5e		inc $5e,x			inc 	NSMantissa3,x
.54de					_ESTASDExit:
.54de	60		rts				rts
.0422					encodeState:
>0422							.fill 	1
.0423					digitTemp:
>0423							.fill 	1
.0424					decimalCount:
>0424							.fill 	1
.54df					FloatToString:
.54df	da		phx				phx
.54e0	5a		phy				phy 								; save code position
.54e1	8d 25 04	sta $0425			sta 	decimalPlaces	 			; save number of DPs.
.54e4	9c 26 04	stz $0426			stz 	dbOffset 					; offset into decimal buffer = start.
.54e7	b5 2e		lda $2e,x			lda 	NSStatus,x  				; is it -ve.
.54e9	10 08		bpl $54f3			bpl 	_CNTSNotNegative
.54eb	29 7f		and #$7f			and 	#$7F 						; make +ve
.54ed	95 2e		sta $2e,x			sta 	NSStatus,x
.54ef	a9 2d		lda #$2d			lda 	#"-"
.54f1	80 02		bra $54f5			bra 	_CNTMain
.54f3					_CNTSNotNegative:
.54f3	a9 20		lda #$20			lda 	#" "
.54f5					_CNTMain:
.54f5	20 57 55	jsr $5557			jsr 	WriteDecimalBuffer
.54f8	b5 6a		lda $6a,x			lda 	NSExponent,x 				; check if decimal
.54fa	f0 0d		beq $5509			beq 	_CNTSNotFloat
.54fc	e8		inx				inx 								; round up so we don't get too many 6.999999
.54fd	a9 01		lda #$01			lda 	#1
.54ff	20 f9 55	jsr $55f9			jsr 	FloatSetByte
.5502	b5 69		lda $69,x			lda		NSExponent-1,x
.5504	95 6a		sta $6a,x			sta 	NSExponent,x
.5506	20 1b 50	jsr $501b			jsr 	FloatAdd
.5509					_CNTSNotFloat:
.5509	20 39 55	jsr $5539			jsr 	MakePlusTwoString 			; do the integer part.
.550c	20 d7 51	jsr $51d7			jsr 	FloatFractionalPart 		; get the fractional part
.550f	20 4c 53	jsr $534c			jsr 	FloatNormalise					; normalise , exit if zero
.5512	f0 22		beq $5536			beq 	_CNTSExit
.5514	a9 2e		lda #$2e			lda 	#"."
.5516	20 57 55	jsr $5557			jsr 	WriteDecimalBuffer 			; write decimal place
.5519					_CNTSDecimal:
.5519	ce 25 04	dec $0425			dec 	decimalPlaces 				; done all the decimals
.551c	30 18		bmi $5536			bmi 	_CNTSExit
.551e	e8		inx				inx 								; x 10.0
.551f	a9 0a		lda #$0a			lda 	#10
.5521	20 f9 55	jsr $55f9			jsr 	FloatSetByte
.5524	20 b7 52	jsr $52b7			jsr 	FloatMultiply
.5527	20 39 55	jsr $5539			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.552a	20 d7 51	jsr $51d7			jsr 	FloatFractionalPart 		; get the fractional part
.552d	20 4c 53	jsr $534c			jsr 	FloatNormalise 				; normalise it.
.5530	b5 6a		lda $6a,x			lda 	NSExponent,x 				; gone to zero, exit.
.5532	c9 d0		cmp #$d0			cmp 	#$D0 						; very small remainder, so don't bother.
.5534	b0 e3		bcs $5519			bcs 	_CNTSDecimal 				; keep going.
.5536					_CNTSExit:
.5536	7a		ply				ply
.5537	fa		plx				plx
.5538	60		rts				rts
.5539					MakePlusTwoString:
.5539	da		phx				phx
.553a	20 da 55	jsr $55da			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.553d	e8		inx				inx 								; access it
.553e	e8		inx				inx
.553f	20 32 52	jsr $5232			jsr 	FloatIntegerPart 			; make it an integer
.5542	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.5544	20 76 55	jsr $5576			jsr 	ConvertInt32
.5547	a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.5549					_MPTSCopy:
.5549	bd 00 04	lda $0400,x			lda 	numberBuffer,x
.554c	20 57 55	jsr $5557			jsr 	WriteDecimalBuffer
.554f	e8		inx				inx
.5550	bd 00 04	lda $0400,x			lda 	numberBuffer,x
.5553	d0 f4		bne $5549			bne 	_MPTSCopy
.5555	fa		plx				plx
.5556	60		rts				rts
.5557					WriteDecimalBuffer:
.5557	da		phx				phx
.5558	ae 26 04	ldx $0426			ldx 	dbOffset
.555b	9d 27 04	sta $0427,x			sta 	decimalBuffer,x
.555e	9e 28 04	stz $0428,x			stz 	decimalBuffer+1,x
.5561	ee 26 04	inc $0426			inc 	dbOffset
.5564	fa		plx				plx
.5565	60		rts				rts
.0425					decimalPlaces:
>0425							.fill 	1
.0426					dbOffset:
>0426							.fill 	1
.0427					decimalBuffer:
>0427							.fill 	32
.5566					ConvertInt16:
.5566	85 3a		sta $3a				sta 	NSMantissa0 				; set up as 32 bit conversion
.5568	86 46		stx $46				stx 	NSMantissa1
.556a	64 52		stz $52				stz 	NSMantissa2
.556c	64 5e		stz $5e				stz 	NSMantissa3
.556e	64 2e		stz $2e				stz 	NSStatus 					; positive integer
.5570	a2 00		ldx #$00			ldx 	#0 							; stack level
.5572	a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.5574	80 00		bra $5576			bra 	ConvertInt32
.5576					ConvertInt32:
.5576	5a		phy				phy
.5577	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.5579	24 2e		bit $2e				bit 	NSStatus 					; output a - if not negative.
.557b	10 08		bpl $5585			bpl 	_CI32NotNeg
.557d	48		pha				pha
.557e	a9 2d		lda #$2d			lda 	#'-'
.5580	99 00 04	sta $0400,y			sta 	numberBuffer,y
.5583	c8		iny				iny
.5584	68		pla				pla
.5585					_CI32NotNeg:
.5585	20 93 55	jsr $5593			jsr 	_CI32DivideConvert 			; recursive conversion
.5588	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.558a	99 00 04	sta $0400,y			sta 	numberBuffer,y
.558d	7a		ply				ply
.558e	a2 04		ldx #$04			ldx 	#numberBuffer >> 8 			; return address in XA
.5590	a9 00		lda #$00			lda 	#numberBuffer & $FF
.5592	60		rts				rts
.5593					_CI32DivideConvert:
.5593	e8		inx				inx 								; write to next slot up
.5594	20 f9 55	jsr $55f9			jsr 	FloatSetByte 		 		; write the base out.
.5597	ca		dex				dex
.5598	20 8d 51	jsr $518d			jsr 	Int32Divide 				; divide
.559b	b5 3a		lda $3a,x			lda 	NSMantissa0,x 				; save remainder
.559d	48		pha				pha
.559e	20 7c 51	jsr $517c			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.55a1	20 19 56	jsr $5619			jsr 	FloatIsZero 				; is it zero ?
.55a4	f0 05		beq $55ab			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.55a6	b5 3b		lda $3b,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.55a8	20 93 55	jsr $5593			jsr 	_CI32DivideConvert 			; and recusrively call.
.55ab					_CI32NoRecurse:
.55ab	68		pla				pla 								; remainder
.55ac	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.55ae	90 02		bcc $55b2			bcc 	_CI32NotHex
.55b0	69 26		adc #$26			adc 	#6+32
.55b2					_CI32NotHex:
.55b2	69 30		adc #$30			adc 	#48
.55b4	99 00 04	sta $0400,y			sta 	numberBuffer,y 				; write out and exit
.55b7	c8		iny				iny
.55b8	60		rts				rts
.55b9					FloatNegate:
.55b9	b5 2e		lda $2e,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.55bb	49 80		eor #$80			eor 	#$80  						; toggle the negative flag
.55bd	95 2e		sta $2e,x			sta 	NSStatus,x
.55bf	60		rts				rts
.55c0					FloatNegateMantissa:
.55c0	38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.55c1	a9 00		lda #$00			lda 	#0
.55c3	f5 3a		sbc $3a,x			sbc 	NSMantissa0,x
.55c5	95 3a		sta $3a,x			sta 	NSMantissa0,x
.55c7	a9 00		lda #$00			lda 	#0
.55c9	f5 46		sbc $46,x			sbc 	NSMantissa1,x
.55cb	95 46		sta $46,x			sta 	NSMantissa1,x
.55cd	a9 00		lda #$00			lda 	#0
.55cf	f5 52		sbc $52,x			sbc 	NSMantissa2,x
.55d1	95 52		sta $52,x			sta 	NSMantissa2,x
.55d3	a9 00		lda #$00			lda 	#0
.55d5	f5 5e		sbc $5e,x			sbc 	NSMantissa3,x
.55d7	95 5e		sta $5e,x			sta 	NSMantissa3,x
.55d9	60		rts				rts
.55da					FloatShiftUpTwo:
.55da	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.55dc	95 3c		sta $3c,x			sta 	NSMantissa0+2,x
.55de	b5 46		lda $46,x			lda 	NSMantissa1,x
.55e0	95 48		sta $48,x			sta 	NSMantissa1+2,x
.55e2	b5 52		lda $52,x			lda 	NSMantissa2,x
.55e4	95 54		sta $54,x			sta 	NSMantissa2+2,x
.55e6	b5 5e		lda $5e,x			lda 	NSMantissa3,x
.55e8	95 60		sta $60,x			sta 	NSMantissa3+2,x
.55ea	b5 6a		lda $6a,x			lda 	NSExponent,x
.55ec	95 6c		sta $6c,x			sta 	NSExponent+2,x
.55ee	b5 2e		lda $2e,x			lda 	NSStatus,x
.55f0	95 30		sta $30,x			sta 	NSStatus+2,x
.55f2	60		rts				rts
.55f3					FloatSetZeroMantissaOnly:
.55f3	74 3a		stz $3a,x			stz 	NSMantissa0,x
.55f5	80 08		bra $55ff			bra 	FloatZero13
.55f7					FloatSetZero:
.55f7	a9 00		lda #$00			lda 	#0
.55f9					FloatSetByte:
.55f9	74 6a		stz $6a,x			stz 	NSExponent,x 				; zero exponent, as +ve integer value.
.55fb					FloatSetMantissa:
.55fb	95 3a		sta $3a,x			sta 	NSMantissa0,x 				; zero mantissa
.55fd	74 2e		stz $2e,x			stz 	NSStatus,x
.55ff					FloatZero13:
.55ff	74 46		stz $46,x			stz 	NSMantissa1,x
.5601	74 52		stz $52,x			stz 	NSMantissa2,x
.5603	74 5e		stz $5e,x			stz 	NSMantissa3,x
.5605	60		rts				rts
.5606					FloatShiftLeft:
.5606	18		clc				clc
.5607					FloatRotateLeft:
.5607	36 3a		rol $3a,x			rol 	NSMantissa0,x
.5609	36 46		rol $46,x			rol		NSMantissa1,x
.560b	36 52		rol $52,x			rol		NSMantissa2,x
.560d	36 5e		rol $5e,x			rol		NSMantissa3,x
.560f	60		rts				rts
.5610					FloatShiftRight:
.5610	56 5e		lsr $5e,x			lsr 	NSMantissa3,x
.5612	76 52		ror $52,x			ror		NSMantissa2,x
.5614	76 46		ror $46,x			ror		NSMantissa1,x
.5616	76 3a		ror $3a,x			ror		NSMantissa0,x
.5618	60		rts				rts
.5619					FloatIsZero:
.5619	b5 5e		lda $5e,x			lda 	NSMantissa3,x
.561b	15 52		ora $52,x			ora		NSMantissa2,x
.561d	15 46		ora $46,x			ora		NSMantissa1,x
.561f	15 3a		ora $3a,x			ora		NSMantissa0,x
.5621	60		rts				rts

;******  End of listing
