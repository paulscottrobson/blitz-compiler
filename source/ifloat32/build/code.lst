
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass -c -Wall -o build/code.prg -L build/code.lst -l build/code.lbl testing/testing.asm /home/paulr/Projects/blitz-compiler/documents/../bin/common.library /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library
; Sat Oct  7 05:33:11 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: testing/testing.asm

.1000					WrapperBoot:
.1000	a2 ff		ldx #$ff			ldx 	#255
.1002	20 0b 10	jsr $100b			jsr 	TestScript
.1005	86 28		stx $28				stx 	zTemp0
.1007	4c ff ff	jmp $ffff			jmp 	$FFFF
.100a					ErrorHandler:
>100a	db						.byte 	$DB 						; causes a break in the emulator
.100b					TestScript:

;******  Processing file: testing/generated/testcode.dat

.100b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 24129
>100e	41 5e 00 00				.dword	$00005e41
>1012	00 00					.byte	$00,$00
.1014	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -18554
>1017	7a 48 00 00				.dword	$0000487a
>101b	00 80					.byte	$00,$80
.101d	20 64 50	jsr $5064		jsr	FloatAdd
.1020	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 5575
>1023	c7 15 00 00				.dword	$000015c7
>1027	00 00					.byte	$00,$00
.1029	20 25 51	jsr $5125		jsr	FloatCompare
.102c	20 ef 50	jsr $50ef		jsr	CompareEqual
.102f	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1032	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 24129
>1035	41 5e 00 00				.dword	$00005e41
>1039	00 00					.byte	$00,$00
.103b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -18554
>103e	7a 48 00 00				.dword	$0000487a
>1042	00 80					.byte	$00,$80
.1044	20 5e 50	jsr $505e		jsr	FloatSubtract
.1047	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 42683
>104a	bb a6 00 00				.dword	$0000a6bb
>104e	00 00					.byte	$00,$00
.1050	20 25 51	jsr $5125		jsr	FloatCompare
.1053	20 ef 50	jsr $50ef		jsr	CompareEqual
.1056	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1059	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 24129
>105c	41 5e 00 00				.dword	$00005e41
>1060	00 00					.byte	$00,$00
.1062	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -18554
>1065	7a 48 00 00				.dword	$0000487a
>1069	00 80					.byte	$00,$80
.106b	20 00 53	jsr $5300		jsr	FloatMultiply
.106e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -447689466
>1071	fa 32 af 1a				.dword	$1aaf32fa
>1075	00 80					.byte	$00,$80
.1077	20 25 51	jsr $5125		jsr	FloatCompare
.107a	20 ef 50	jsr $50ef		jsr	CompareEqual
.107d	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1080	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 24129
>1083	41 5e 00 00				.dword	$00005e41
>1087	00 00					.byte	$00,$00
.1089	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -18554
>108c	7a 48 00 00				.dword	$0000487a
>1090	00 80					.byte	$00,$80
.1092	20 89 51	jsr $5189		jsr	FloatDivide
.1095	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1.30047429
>1098	84 f8 3a 53				.dword	$533af884
>109c	e2 80					.byte	$e2,$80
.109e	20 25 51	jsr $5125		jsr	FloatCompare
.10a1	20 ef 50	jsr $50ef		jsr	CompareEqual
.10a4	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.10a7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -18554
>10aa	7a 48 00 00				.dword	$0000487a
>10ae	00 80					.byte	$00,$80
.10b0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -18554
>10b3	7a 48 00 00				.dword	$0000487a
>10b7	00 80					.byte	$00,$80
.10b9	20 25 51	jsr $5125		jsr	FloatCompare
.10bc	20 ef 50	jsr $50ef		jsr	CompareEqual
.10bf	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>10c2	01 00 00 00				.dword	$00000001
>10c6	00 80					.byte	$00,$80
.10c8	20 25 51	jsr $5125		jsr	FloatCompare
.10cb	20 ef 50	jsr $50ef		jsr	CompareEqual
.10ce	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.10d1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -18554
>10d4	7a 48 00 00				.dword	$0000487a
>10d8	00 80					.byte	$00,$80
.10da	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -18554
>10dd	7a 48 00 00				.dword	$0000487a
>10e1	00 80					.byte	$00,$80
.10e3	20 25 51	jsr $5125		jsr	FloatCompare
.10e6	20 ff 50	jsr $50ff		jsr	CompareNotEqual
.10e9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>10ec	00 00 00 00				.dword	$00000000
>10f0	00 00					.byte	$00,$00
.10f2	20 25 51	jsr $5125		jsr	FloatCompare
.10f5	20 ef 50	jsr $50ef		jsr	CompareEqual
.10f8	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.10fb	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -18554
>10fe	7a 48 00 00				.dword	$0000487a
>1102	00 80					.byte	$00,$80
.1104	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -18554
>1107	7a 48 00 00				.dword	$0000487a
>110b	00 80					.byte	$00,$80
.110d	20 25 51	jsr $5125		jsr	FloatCompare
.1110	20 0d 51	jsr $510d		jsr	CompareGreater
.1113	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>1116	00 00 00 00				.dword	$00000000
>111a	00 00					.byte	$00,$00
.111c	20 25 51	jsr $5125		jsr	FloatCompare
.111f	20 ef 50	jsr $50ef		jsr	CompareEqual
.1122	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1125	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -18554
>1128	7a 48 00 00				.dword	$0000487a
>112c	00 80					.byte	$00,$80
.112e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -18554
>1131	7a 48 00 00				.dword	$0000487a
>1135	00 80					.byte	$00,$80
.1137	20 25 51	jsr $5125		jsr	FloatCompare
.113a	20 1d 51	jsr $511d		jsr	CompareGreaterEqual
.113d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>1140	01 00 00 00				.dword	$00000001
>1144	00 80					.byte	$00,$80
.1146	20 25 51	jsr $5125		jsr	FloatCompare
.1149	20 ef 50	jsr $50ef		jsr	CompareEqual
.114c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.114f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -18554
>1152	7a 48 00 00				.dword	$0000487a
>1156	00 80					.byte	$00,$80
.1158	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -18554
>115b	7a 48 00 00				.dword	$0000487a
>115f	00 80					.byte	$00,$80
.1161	20 25 51	jsr $5125		jsr	FloatCompare
.1164	20 05 51	jsr $5105		jsr	CompareLess
.1167	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>116a	00 00 00 00				.dword	$00000000
>116e	00 00					.byte	$00,$00
.1170	20 25 51	jsr $5125		jsr	FloatCompare
.1173	20 ef 50	jsr $50ef		jsr	CompareEqual
.1176	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1179	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -18554
>117c	7a 48 00 00				.dword	$0000487a
>1180	00 80					.byte	$00,$80
.1182	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -18554
>1185	7a 48 00 00				.dword	$0000487a
>1189	00 80					.byte	$00,$80
.118b	20 25 51	jsr $5125		jsr	FloatCompare
.118e	20 15 51	jsr $5115		jsr	CompareLessEqual
.1191	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>1194	01 00 00 00				.dword	$00000001
>1198	00 80					.byte	$00,$80
.119a	20 25 51	jsr $5125		jsr	FloatCompare
.119d	20 ef 50	jsr $50ef		jsr	CompareEqual
.11a0	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.11a3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 31.75880781
>11a6	ea 04 09 7f				.dword	$7f0904ea
>11aa	e6 00					.byte	$e6,$00
.11ac	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -71.747631
>11af	bf 64 bf 47				.dword	$47bf64bf
>11b3	e8 80					.byte	$e8,$80
.11b5	20 64 50	jsr $5064		jsr	FloatAdd
.11b8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -39.9888232
>11bb	09 47 fa 4f				.dword	$4ffa4709
>11bf	e7 80					.byte	$e7,$80
.11c1	20 25 51	jsr $5125		jsr	FloatCompare
.11c4	20 ef 50	jsr $50ef		jsr	CompareEqual
.11c7	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.11ca	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 31.75880781
>11cd	ea 04 09 7f				.dword	$7f0904ea
>11d1	e6 00					.byte	$e6,$00
.11d3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -71.747631
>11d6	bf 64 bf 47				.dword	$47bf64bf
>11da	e8 80					.byte	$e8,$80
.11dc	20 5e 50	jsr $505e		jsr	FloatSubtract
.11df	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 103.50643881
>11e2	f9 a5 81 67				.dword	$6781a5f9
>11e6	e8 00					.byte	$e8,$00
.11e8	20 25 51	jsr $5125		jsr	FloatCompare
.11eb	20 ef 50	jsr $50ef		jsr	CompareEqual
.11ee	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.11f1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 31.75880781
>11f4	ea 04 09 7f				.dword	$7f0904ea
>11f8	e6 00					.byte	$e6,$00
.11fa	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -71.747631
>11fd	bf 64 bf 47				.dword	$47bf64bf
>1201	e8 80					.byte	$e8,$80
.1203	20 00 53	jsr $5300		jsr	FloatMultiply
.1206	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -2278.61922369
>1209	2c f4 34 47				.dword	$4734f42c
>120d	ed 80					.byte	$ed,$80
.120f	20 25 51	jsr $5125		jsr	FloatCompare
.1212	20 ef 50	jsr $50ef		jsr	CompareEqual
.1215	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1218	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 31.75880781
>121b	ea 04 09 7f				.dword	$7f0904ea
>121f	e6 00					.byte	$e6,$00
.1221	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -71.747631
>1224	bf 64 bf 47				.dword	$47bf64bf
>1228	e8 80					.byte	$e8,$80
.122a	20 89 51	jsr $5189		jsr	FloatDivide
.122d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -0.44264608
>1230	e5 40 51 71				.dword	$715140e5
>1234	e0 80					.byte	$e0,$80
.1236	20 25 51	jsr $5125		jsr	FloatCompare
.1239	20 ef 50	jsr $50ef		jsr	CompareEqual
.123c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.123f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -19.74552523
>1242	f7 6a fb 4e				.dword	$4efb6af7
>1246	e6 80					.byte	$e6,$80
.1248	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -19.74552523
>124b	f7 6a fb 4e				.dword	$4efb6af7
>124f	e6 80					.byte	$e6,$80
.1251	20 25 51	jsr $5125		jsr	FloatCompare
.1254	20 0d 51	jsr $510d		jsr	CompareGreater
.1257	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>125a	00 00 00 00				.dword	$00000000
>125e	00 00					.byte	$00,$00
.1260	20 25 51	jsr $5125		jsr	FloatCompare
.1263	20 ef 50	jsr $50ef		jsr	CompareEqual
.1266	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1269	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -19.74552523
>126c	f7 6a fb 4e				.dword	$4efb6af7
>1270	e6 80					.byte	$e6,$80
.1272	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -19.74552523
>1275	f7 6a fb 4e				.dword	$4efb6af7
>1279	e6 80					.byte	$e6,$80
.127b	20 25 51	jsr $5125		jsr	FloatCompare
.127e	20 1d 51	jsr $511d		jsr	CompareGreaterEqual
.1281	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>1284	01 00 00 00				.dword	$00000001
>1288	00 80					.byte	$00,$80
.128a	20 25 51	jsr $5125		jsr	FloatCompare
.128d	20 ef 50	jsr $50ef		jsr	CompareEqual
.1290	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1293	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -19.74552523
>1296	f7 6a fb 4e				.dword	$4efb6af7
>129a	e6 80					.byte	$e6,$80
.129c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -19.74552523
>129f	f7 6a fb 4e				.dword	$4efb6af7
>12a3	e6 80					.byte	$e6,$80
.12a5	20 25 51	jsr $5125		jsr	FloatCompare
.12a8	20 05 51	jsr $5105		jsr	CompareLess
.12ab	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>12ae	00 00 00 00				.dword	$00000000
>12b2	00 00					.byte	$00,$00
.12b4	20 25 51	jsr $5125		jsr	FloatCompare
.12b7	20 ef 50	jsr $50ef		jsr	CompareEqual
.12ba	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.12bd	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -19.74552523
>12c0	f7 6a fb 4e				.dword	$4efb6af7
>12c4	e6 80					.byte	$e6,$80
.12c6	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -19.74552523
>12c9	f7 6a fb 4e				.dword	$4efb6af7
>12cd	e6 80					.byte	$e6,$80
.12cf	20 25 51	jsr $5125		jsr	FloatCompare
.12d2	20 15 51	jsr $5115		jsr	CompareLessEqual
.12d5	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>12d8	01 00 00 00				.dword	$00000001
>12dc	00 80					.byte	$00,$80
.12de	20 25 51	jsr $5125		jsr	FloatCompare
.12e1	20 ef 50	jsr $50ef		jsr	CompareEqual
.12e4	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.12e7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -19.74552523
>12ea	f7 6a fb 4e				.dword	$4efb6af7
>12ee	e6 80					.byte	$e6,$80
.12f0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -19.74552523
>12f3	f7 6a fb 4e				.dword	$4efb6af7
>12f7	e6 80					.byte	$e6,$80
.12f9	20 25 51	jsr $5125		jsr	FloatCompare
.12fc	20 ef 50	jsr $50ef		jsr	CompareEqual
.12ff	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>1302	01 00 00 00				.dword	$00000001
>1306	00 80					.byte	$00,$80
.1308	20 25 51	jsr $5125		jsr	FloatCompare
.130b	20 ef 50	jsr $50ef		jsr	CompareEqual
.130e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1311	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -19.74552523
>1314	f7 6a fb 4e				.dword	$4efb6af7
>1318	e6 80					.byte	$e6,$80
.131a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -19.74552523
>131d	f7 6a fb 4e				.dword	$4efb6af7
>1321	e6 80					.byte	$e6,$80
.1323	20 25 51	jsr $5125		jsr	FloatCompare
.1326	20 ff 50	jsr $50ff		jsr	CompareNotEqual
.1329	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>132c	00 00 00 00				.dword	$00000000
>1330	00 00					.byte	$00,$00
.1332	20 25 51	jsr $5125		jsr	FloatCompare
.1335	20 ef 50	jsr $50ef		jsr	CompareEqual
.1338	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.133b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 46600
>133e	08 b6 00 00				.dword	$0000b608
>1342	00 00					.byte	$00,$00
.1344	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 46201
>1347	79 b4 00 00				.dword	$0000b479
>134b	00 00					.byte	$00,$00
.134d	20 64 50	jsr $5064		jsr	FloatAdd
.1350	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 92801
>1353	81 6a 01 00				.dword	$00016a81
>1357	00 00					.byte	$00,$00
.1359	20 25 51	jsr $5125		jsr	FloatCompare
.135c	20 ef 50	jsr $50ef		jsr	CompareEqual
.135f	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1362	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 46600
>1365	08 b6 00 00				.dword	$0000b608
>1369	00 00					.byte	$00,$00
.136b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 46201
>136e	79 b4 00 00				.dword	$0000b479
>1372	00 00					.byte	$00,$00
.1374	20 5e 50	jsr $505e		jsr	FloatSubtract
.1377	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 399
>137a	8f 01 00 00				.dword	$0000018f
>137e	00 00					.byte	$00,$00
.1380	20 25 51	jsr $5125		jsr	FloatCompare
.1383	20 ef 50	jsr $50ef		jsr	CompareEqual
.1386	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1389	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 46600
>138c	08 b6 00 00				.dword	$0000b608
>1390	00 00					.byte	$00,$00
.1392	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 46201
>1395	79 b4 00 00				.dword	$0000b479
>1399	00 00					.byte	$00,$00
.139b	20 00 53	jsr $5300		jsr	FloatMultiply
.139e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 2152966600
>13a1	e4 d4 29 40				.dword	$4029d4e4
>13a5	01 00					.byte	$01,$00
.13a7	20 25 51	jsr $5125		jsr	FloatCompare
.13aa	20 ef 50	jsr $50ef		jsr	CompareEqual
.13ad	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.13b0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 46600
>13b3	08 b6 00 00				.dword	$0000b608
>13b7	00 00					.byte	$00,$00
.13b9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 46201
>13bc	79 b4 00 00				.dword	$0000b479
>13c0	00 00					.byte	$00,$00
.13c2	20 89 51	jsr $5189		jsr	FloatDivide
.13c5	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 1.00863618
>13c8	c4 7e 8d 40				.dword	$408d7ec4
>13cc	e2 00					.byte	$e2,$00
.13ce	20 25 51	jsr $5125		jsr	FloatCompare
.13d1	20 ef 50	jsr $50ef		jsr	CompareEqual
.13d4	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.13d7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 46201
>13da	79 b4 00 00				.dword	$0000b479
>13de	00 00					.byte	$00,$00
.13e0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 46201
>13e3	79 b4 00 00				.dword	$0000b479
>13e7	00 00					.byte	$00,$00
.13e9	20 25 51	jsr $5125		jsr	FloatCompare
.13ec	20 ef 50	jsr $50ef		jsr	CompareEqual
.13ef	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>13f2	01 00 00 00				.dword	$00000001
>13f6	00 80					.byte	$00,$80
.13f8	20 25 51	jsr $5125		jsr	FloatCompare
.13fb	20 ef 50	jsr $50ef		jsr	CompareEqual
.13fe	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1401	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 46201
>1404	79 b4 00 00				.dword	$0000b479
>1408	00 00					.byte	$00,$00
.140a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 46201
>140d	79 b4 00 00				.dword	$0000b479
>1411	00 00					.byte	$00,$00
.1413	20 25 51	jsr $5125		jsr	FloatCompare
.1416	20 ff 50	jsr $50ff		jsr	CompareNotEqual
.1419	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>141c	00 00 00 00				.dword	$00000000
>1420	00 00					.byte	$00,$00
.1422	20 25 51	jsr $5125		jsr	FloatCompare
.1425	20 ef 50	jsr $50ef		jsr	CompareEqual
.1428	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.142b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 46201
>142e	79 b4 00 00				.dword	$0000b479
>1432	00 00					.byte	$00,$00
.1434	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 46201
>1437	79 b4 00 00				.dword	$0000b479
>143b	00 00					.byte	$00,$00
.143d	20 25 51	jsr $5125		jsr	FloatCompare
.1440	20 0d 51	jsr $510d		jsr	CompareGreater
.1443	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>1446	00 00 00 00				.dword	$00000000
>144a	00 00					.byte	$00,$00
.144c	20 25 51	jsr $5125		jsr	FloatCompare
.144f	20 ef 50	jsr $50ef		jsr	CompareEqual
.1452	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1455	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 46201
>1458	79 b4 00 00				.dword	$0000b479
>145c	00 00					.byte	$00,$00
.145e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 46201
>1461	79 b4 00 00				.dword	$0000b479
>1465	00 00					.byte	$00,$00
.1467	20 25 51	jsr $5125		jsr	FloatCompare
.146a	20 1d 51	jsr $511d		jsr	CompareGreaterEqual
.146d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>1470	01 00 00 00				.dword	$00000001
>1474	00 80					.byte	$00,$80
.1476	20 25 51	jsr $5125		jsr	FloatCompare
.1479	20 ef 50	jsr $50ef		jsr	CompareEqual
.147c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.147f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 46201
>1482	79 b4 00 00				.dword	$0000b479
>1486	00 00					.byte	$00,$00
.1488	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 46201
>148b	79 b4 00 00				.dword	$0000b479
>148f	00 00					.byte	$00,$00
.1491	20 25 51	jsr $5125		jsr	FloatCompare
.1494	20 05 51	jsr $5105		jsr	CompareLess
.1497	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>149a	00 00 00 00				.dword	$00000000
>149e	00 00					.byte	$00,$00
.14a0	20 25 51	jsr $5125		jsr	FloatCompare
.14a3	20 ef 50	jsr $50ef		jsr	CompareEqual
.14a6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.14a9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 46201
>14ac	79 b4 00 00				.dword	$0000b479
>14b0	00 00					.byte	$00,$00
.14b2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 46201
>14b5	79 b4 00 00				.dword	$0000b479
>14b9	00 00					.byte	$00,$00
.14bb	20 25 51	jsr $5125		jsr	FloatCompare
.14be	20 15 51	jsr $5115		jsr	CompareLessEqual
.14c1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>14c4	01 00 00 00				.dword	$00000001
>14c8	00 80					.byte	$00,$80
.14ca	20 25 51	jsr $5125		jsr	FloatCompare
.14cd	20 ef 50	jsr $50ef		jsr	CompareEqual
.14d0	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.14d3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 68.96112416
>14d6	3c 0c f6 44				.dword	$44f60c3c
>14da	e8 00					.byte	$e8,$00
.14dc	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 25.62225642
>14df	c9 30 7d 66				.dword	$667d30c9
>14e3	e6 00					.byte	$e6,$00
.14e5	20 64 50	jsr $5064		jsr	FloatAdd
.14e8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 94.58338058
>14eb	6e 58 95 5e				.dword	$5e95586e
>14ef	e8 00					.byte	$e8,$00
.14f1	20 25 51	jsr $5125		jsr	FloatCompare
.14f4	20 ef 50	jsr $50ef		jsr	CompareEqual
.14f7	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.14fa	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 68.96112416
>14fd	3c 0c f6 44				.dword	$44f60c3c
>1501	e8 00					.byte	$e8,$00
.1503	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 25.62225642
>1506	c9 30 7d 66				.dword	$667d30c9
>150a	e6 00					.byte	$e6,$00
.150c	20 5e 50	jsr $505e		jsr	FloatSubtract
.150f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 43.33886774
>1512	13 80 ad 56				.dword	$56ad8013
>1516	e7 00					.byte	$e7,$00
.1518	20 25 51	jsr $5125		jsr	FloatCompare
.151b	20 ef 50	jsr $50ef		jsr	CompareEqual
.151e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1521	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 68.96112416
>1524	3c 0c f6 44				.dword	$44f60c3c
>1528	e8 00					.byte	$e8,$00
.152a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 25.62225642
>152d	c9 30 7d 66				.dword	$667d30c9
>1531	e6 00					.byte	$e6,$00
.1533	20 00 53	jsr $5300		jsr	FloatMultiply
.1536	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 1766.93960613
>1539	a0 08 6f 6e				.dword	$6e6f08a0
>153d	ec 00					.byte	$ec,$00
.153f	20 25 51	jsr $5125		jsr	FloatCompare
.1542	20 ef 50	jsr $50ef		jsr	CompareEqual
.1545	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1548	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 68.96112416
>154b	3c 0c f6 44				.dword	$44f60c3c
>154f	e8 00					.byte	$e8,$00
.1551	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 25.62225642
>1554	c9 30 7d 66				.dword	$667d30c9
>1558	e6 00					.byte	$e6,$00
.155a	20 89 51	jsr $5189		jsr	FloatDivide
.155d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 2.69145399
>1560	1e 64 20 56				.dword	$5620641e
>1564	e3 00					.byte	$e3,$00
.1566	20 25 51	jsr $5125		jsr	FloatCompare
.1569	20 ef 50	jsr $50ef		jsr	CompareEqual
.156c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.156f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 69.22045841
>1572	f6 6f 38 45				.dword	$45386ff6
>1576	e8 00					.byte	$e8,$00
.1578	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 69.22045841
>157b	f6 6f 38 45				.dword	$45386ff6
>157f	e8 00					.byte	$e8,$00
.1581	20 25 51	jsr $5125		jsr	FloatCompare
.1584	20 0d 51	jsr $510d		jsr	CompareGreater
.1587	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>158a	00 00 00 00				.dword	$00000000
>158e	00 00					.byte	$00,$00
.1590	20 25 51	jsr $5125		jsr	FloatCompare
.1593	20 ef 50	jsr $50ef		jsr	CompareEqual
.1596	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1599	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 69.22045841
>159c	f6 6f 38 45				.dword	$45386ff6
>15a0	e8 00					.byte	$e8,$00
.15a2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 69.22045841
>15a5	f6 6f 38 45				.dword	$45386ff6
>15a9	e8 00					.byte	$e8,$00
.15ab	20 25 51	jsr $5125		jsr	FloatCompare
.15ae	20 1d 51	jsr $511d		jsr	CompareGreaterEqual
.15b1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>15b4	01 00 00 00				.dword	$00000001
>15b8	00 80					.byte	$00,$80
.15ba	20 25 51	jsr $5125		jsr	FloatCompare
.15bd	20 ef 50	jsr $50ef		jsr	CompareEqual
.15c0	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.15c3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 69.22045841
>15c6	f6 6f 38 45				.dword	$45386ff6
>15ca	e8 00					.byte	$e8,$00
.15cc	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 69.22045841
>15cf	f6 6f 38 45				.dword	$45386ff6
>15d3	e8 00					.byte	$e8,$00
.15d5	20 25 51	jsr $5125		jsr	FloatCompare
.15d8	20 05 51	jsr $5105		jsr	CompareLess
.15db	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>15de	00 00 00 00				.dword	$00000000
>15e2	00 00					.byte	$00,$00
.15e4	20 25 51	jsr $5125		jsr	FloatCompare
.15e7	20 ef 50	jsr $50ef		jsr	CompareEqual
.15ea	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.15ed	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 69.22045841
>15f0	f6 6f 38 45				.dword	$45386ff6
>15f4	e8 00					.byte	$e8,$00
.15f6	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 69.22045841
>15f9	f6 6f 38 45				.dword	$45386ff6
>15fd	e8 00					.byte	$e8,$00
.15ff	20 25 51	jsr $5125		jsr	FloatCompare
.1602	20 15 51	jsr $5115		jsr	CompareLessEqual
.1605	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>1608	01 00 00 00				.dword	$00000001
>160c	00 80					.byte	$00,$80
.160e	20 25 51	jsr $5125		jsr	FloatCompare
.1611	20 ef 50	jsr $50ef		jsr	CompareEqual
.1614	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1617	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 69.22045841
>161a	f6 6f 38 45				.dword	$45386ff6
>161e	e8 00					.byte	$e8,$00
.1620	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 69.22045841
>1623	f6 6f 38 45				.dword	$45386ff6
>1627	e8 00					.byte	$e8,$00
.1629	20 25 51	jsr $5125		jsr	FloatCompare
.162c	20 ef 50	jsr $50ef		jsr	CompareEqual
.162f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>1632	01 00 00 00				.dword	$00000001
>1636	00 80					.byte	$00,$80
.1638	20 25 51	jsr $5125		jsr	FloatCompare
.163b	20 ef 50	jsr $50ef		jsr	CompareEqual
.163e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1641	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 69.22045841
>1644	f6 6f 38 45				.dword	$45386ff6
>1648	e8 00					.byte	$e8,$00
.164a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 69.22045841
>164d	f6 6f 38 45				.dword	$45386ff6
>1651	e8 00					.byte	$e8,$00
.1653	20 25 51	jsr $5125		jsr	FloatCompare
.1656	20 ff 50	jsr $50ff		jsr	CompareNotEqual
.1659	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>165c	00 00 00 00				.dword	$00000000
>1660	00 00					.byte	$00,$00
.1662	20 25 51	jsr $5125		jsr	FloatCompare
.1665	20 ef 50	jsr $50ef		jsr	CompareEqual
.1668	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.166b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -11449
>166e	b9 2c 00 00				.dword	$00002cb9
>1672	00 80					.byte	$00,$80
.1674	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -33030
>1677	06 81 00 00				.dword	$00008106
>167b	00 80					.byte	$00,$80
.167d	20 64 50	jsr $5064		jsr	FloatAdd
.1680	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -44479
>1683	bf ad 00 00				.dword	$0000adbf
>1687	00 80					.byte	$00,$80
.1689	20 25 51	jsr $5125		jsr	FloatCompare
.168c	20 ef 50	jsr $50ef		jsr	CompareEqual
.168f	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1692	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -11449
>1695	b9 2c 00 00				.dword	$00002cb9
>1699	00 80					.byte	$00,$80
.169b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -33030
>169e	06 81 00 00				.dword	$00008106
>16a2	00 80					.byte	$00,$80
.16a4	20 5e 50	jsr $505e		jsr	FloatSubtract
.16a7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 21581
>16aa	4d 54 00 00				.dword	$0000544d
>16ae	00 00					.byte	$00,$00
.16b0	20 25 51	jsr $5125		jsr	FloatCompare
.16b3	20 ef 50	jsr $50ef		jsr	CompareEqual
.16b6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.16b9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -11449
>16bc	b9 2c 00 00				.dword	$00002cb9
>16c0	00 80					.byte	$00,$80
.16c2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -33030
>16c5	06 81 00 00				.dword	$00008106
>16c9	00 80					.byte	$00,$80
.16cb	20 00 53	jsr $5300		jsr	FloatMultiply
.16ce	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 378160470
>16d1	56 45 8a 16				.dword	$168a4556
>16d5	00 00					.byte	$00,$00
.16d7	20 25 51	jsr $5125		jsr	FloatCompare
.16da	20 ef 50	jsr $50ef		jsr	CompareEqual
.16dd	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.16e0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -11449
>16e3	b9 2c 00 00				.dword	$00002cb9
>16e7	00 80					.byte	$00,$80
.16e9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -33030
>16ec	06 81 00 00				.dword	$00008106
>16f0	00 80					.byte	$00,$80
.16f2	20 89 51	jsr $5189		jsr	FloatDivide
.16f5	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0.34662428
>16f8	6b 5e bc 58				.dword	$58bc5e6b
>16fc	e0 00					.byte	$e0,$00
.16fe	20 25 51	jsr $5125		jsr	FloatCompare
.1701	20 ef 50	jsr $50ef		jsr	CompareEqual
.1704	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1707	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -33030
>170a	06 81 00 00				.dword	$00008106
>170e	00 80					.byte	$00,$80
.1710	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -33030
>1713	06 81 00 00				.dword	$00008106
>1717	00 80					.byte	$00,$80
.1719	20 25 51	jsr $5125		jsr	FloatCompare
.171c	20 ef 50	jsr $50ef		jsr	CompareEqual
.171f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>1722	01 00 00 00				.dword	$00000001
>1726	00 80					.byte	$00,$80
.1728	20 25 51	jsr $5125		jsr	FloatCompare
.172b	20 ef 50	jsr $50ef		jsr	CompareEqual
.172e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1731	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -33030
>1734	06 81 00 00				.dword	$00008106
>1738	00 80					.byte	$00,$80
.173a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -33030
>173d	06 81 00 00				.dword	$00008106
>1741	00 80					.byte	$00,$80
.1743	20 25 51	jsr $5125		jsr	FloatCompare
.1746	20 ff 50	jsr $50ff		jsr	CompareNotEqual
.1749	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>174c	00 00 00 00				.dword	$00000000
>1750	00 00					.byte	$00,$00
.1752	20 25 51	jsr $5125		jsr	FloatCompare
.1755	20 ef 50	jsr $50ef		jsr	CompareEqual
.1758	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.175b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -33030
>175e	06 81 00 00				.dword	$00008106
>1762	00 80					.byte	$00,$80
.1764	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -33030
>1767	06 81 00 00				.dword	$00008106
>176b	00 80					.byte	$00,$80
.176d	20 25 51	jsr $5125		jsr	FloatCompare
.1770	20 0d 51	jsr $510d		jsr	CompareGreater
.1773	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>1776	00 00 00 00				.dword	$00000000
>177a	00 00					.byte	$00,$00
.177c	20 25 51	jsr $5125		jsr	FloatCompare
.177f	20 ef 50	jsr $50ef		jsr	CompareEqual
.1782	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1785	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -33030
>1788	06 81 00 00				.dword	$00008106
>178c	00 80					.byte	$00,$80
.178e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -33030
>1791	06 81 00 00				.dword	$00008106
>1795	00 80					.byte	$00,$80
.1797	20 25 51	jsr $5125		jsr	FloatCompare
.179a	20 1d 51	jsr $511d		jsr	CompareGreaterEqual
.179d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>17a0	01 00 00 00				.dword	$00000001
>17a4	00 80					.byte	$00,$80
.17a6	20 25 51	jsr $5125		jsr	FloatCompare
.17a9	20 ef 50	jsr $50ef		jsr	CompareEqual
.17ac	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.17af	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -33030
>17b2	06 81 00 00				.dword	$00008106
>17b6	00 80					.byte	$00,$80
.17b8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -33030
>17bb	06 81 00 00				.dword	$00008106
>17bf	00 80					.byte	$00,$80
.17c1	20 25 51	jsr $5125		jsr	FloatCompare
.17c4	20 05 51	jsr $5105		jsr	CompareLess
.17c7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>17ca	00 00 00 00				.dword	$00000000
>17ce	00 00					.byte	$00,$00
.17d0	20 25 51	jsr $5125		jsr	FloatCompare
.17d3	20 ef 50	jsr $50ef		jsr	CompareEqual
.17d6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.17d9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -33030
>17dc	06 81 00 00				.dword	$00008106
>17e0	00 80					.byte	$00,$80
.17e2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -33030
>17e5	06 81 00 00				.dword	$00008106
>17e9	00 80					.byte	$00,$80
.17eb	20 25 51	jsr $5125		jsr	FloatCompare
.17ee	20 15 51	jsr $5115		jsr	CompareLessEqual
.17f1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>17f4	01 00 00 00				.dword	$00000001
>17f8	00 80					.byte	$00,$80
.17fa	20 25 51	jsr $5125		jsr	FloatCompare
.17fd	20 ef 50	jsr $50ef		jsr	CompareEqual
.1800	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1803	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -18.22021544
>1806	28 80 e1 48				.dword	$48e18028
>180a	e6 80					.byte	$e6,$80
.180c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -39.87057585
>180f	1e bc bd 4f				.dword	$4fbdbc1e
>1813	e7 80					.byte	$e7,$80
.1815	20 64 50	jsr $5064		jsr	FloatAdd
.1818	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -58.09079129
>181b	32 7c 2e 74				.dword	$742e7c32
>181f	e7 80					.byte	$e7,$80
.1821	20 25 51	jsr $5125		jsr	FloatCompare
.1824	20 ef 50	jsr $50ef		jsr	CompareEqual
.1827	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.182a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -18.22021544
>182d	28 80 e1 48				.dword	$48e18028
>1831	e6 80					.byte	$e6,$80
.1833	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -39.87057585
>1836	1e bc bd 4f				.dword	$4fbdbc1e
>183a	e7 80					.byte	$e7,$80
.183c	20 5e 50	jsr $505e		jsr	FloatSubtract
.183f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 21.65036041
>1842	14 f8 99 56				.dword	$5699f814
>1846	e6 00					.byte	$e6,$00
.1848	20 25 51	jsr $5125		jsr	FloatCompare
.184b	20 ef 50	jsr $50ef		jsr	CompareEqual
.184e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1851	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -18.22021544
>1854	28 80 e1 48				.dword	$48e18028
>1858	e6 80					.byte	$e6,$80
.185a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -39.87057585
>185d	1e bc bd 4f				.dword	$4fbdbc1e
>1861	e7 80					.byte	$e7,$80
.1863	20 00 53	jsr $5300		jsr	FloatMultiply
.1866	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 726.45048155
>1869	58 6a ce 5a				.dword	$5ace6a58
>186d	eb 00					.byte	$eb,$00
.186f	20 25 51	jsr $5125		jsr	FloatCompare
.1872	20 ef 50	jsr $50ef		jsr	CompareEqual
.1875	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1878	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -18.22021544
>187b	28 80 e1 48				.dword	$48e18028
>187f	e6 80					.byte	$e6,$80
.1881	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -39.87057585
>1884	1e bc bd 4f				.dword	$4fbdbc1e
>1888	e7 80					.byte	$e7,$80
.188a	20 89 51	jsr $5189		jsr	FloatDivide
.188d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0.45698401
>1890	72 e7 fc 74				.dword	$74fce772
>1894	e0 00					.byte	$e0,$00
.1896	20 25 51	jsr $5125		jsr	FloatCompare
.1899	20 ef 50	jsr $50ef		jsr	CompareEqual
.189c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.189f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 78.93990443
>18a2	94 9d f0 4e				.dword	$4ef09d94
>18a6	e8 00					.byte	$e8,$00
.18a8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 78.93990443
>18ab	94 9d f0 4e				.dword	$4ef09d94
>18af	e8 00					.byte	$e8,$00
.18b1	20 25 51	jsr $5125		jsr	FloatCompare
.18b4	20 0d 51	jsr $510d		jsr	CompareGreater
.18b7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>18ba	00 00 00 00				.dword	$00000000
>18be	00 00					.byte	$00,$00
.18c0	20 25 51	jsr $5125		jsr	FloatCompare
.18c3	20 ef 50	jsr $50ef		jsr	CompareEqual
.18c6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.18c9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 78.93990443
>18cc	94 9d f0 4e				.dword	$4ef09d94
>18d0	e8 00					.byte	$e8,$00
.18d2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 78.93990443
>18d5	94 9d f0 4e				.dword	$4ef09d94
>18d9	e8 00					.byte	$e8,$00
.18db	20 25 51	jsr $5125		jsr	FloatCompare
.18de	20 1d 51	jsr $511d		jsr	CompareGreaterEqual
.18e1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>18e4	01 00 00 00				.dword	$00000001
>18e8	00 80					.byte	$00,$80
.18ea	20 25 51	jsr $5125		jsr	FloatCompare
.18ed	20 ef 50	jsr $50ef		jsr	CompareEqual
.18f0	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.18f3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 78.93990443
>18f6	94 9d f0 4e				.dword	$4ef09d94
>18fa	e8 00					.byte	$e8,$00
.18fc	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 78.93990443
>18ff	94 9d f0 4e				.dword	$4ef09d94
>1903	e8 00					.byte	$e8,$00
.1905	20 25 51	jsr $5125		jsr	FloatCompare
.1908	20 05 51	jsr $5105		jsr	CompareLess
.190b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>190e	00 00 00 00				.dword	$00000000
>1912	00 00					.byte	$00,$00
.1914	20 25 51	jsr $5125		jsr	FloatCompare
.1917	20 ef 50	jsr $50ef		jsr	CompareEqual
.191a	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.191d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 78.93990443
>1920	94 9d f0 4e				.dword	$4ef09d94
>1924	e8 00					.byte	$e8,$00
.1926	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 78.93990443
>1929	94 9d f0 4e				.dword	$4ef09d94
>192d	e8 00					.byte	$e8,$00
.192f	20 25 51	jsr $5125		jsr	FloatCompare
.1932	20 15 51	jsr $5115		jsr	CompareLessEqual
.1935	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>1938	01 00 00 00				.dword	$00000001
>193c	00 80					.byte	$00,$80
.193e	20 25 51	jsr $5125		jsr	FloatCompare
.1941	20 ef 50	jsr $50ef		jsr	CompareEqual
.1944	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1947	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 78.93990443
>194a	94 9d f0 4e				.dword	$4ef09d94
>194e	e8 00					.byte	$e8,$00
.1950	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 78.93990443
>1953	94 9d f0 4e				.dword	$4ef09d94
>1957	e8 00					.byte	$e8,$00
.1959	20 25 51	jsr $5125		jsr	FloatCompare
.195c	20 ef 50	jsr $50ef		jsr	CompareEqual
.195f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>1962	01 00 00 00				.dword	$00000001
>1966	00 80					.byte	$00,$80
.1968	20 25 51	jsr $5125		jsr	FloatCompare
.196b	20 ef 50	jsr $50ef		jsr	CompareEqual
.196e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1971	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 78.93990443
>1974	94 9d f0 4e				.dword	$4ef09d94
>1978	e8 00					.byte	$e8,$00
.197a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 78.93990443
>197d	94 9d f0 4e				.dword	$4ef09d94
>1981	e8 00					.byte	$e8,$00
.1983	20 25 51	jsr $5125		jsr	FloatCompare
.1986	20 ff 50	jsr $50ff		jsr	CompareNotEqual
.1989	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>198c	00 00 00 00				.dword	$00000000
>1990	00 00					.byte	$00,$00
.1992	20 25 51	jsr $5125		jsr	FloatCompare
.1995	20 ef 50	jsr $50ef		jsr	CompareEqual
.1998	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.199b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 44470
>199e	b6 ad 00 00				.dword	$0000adb6
>19a2	00 00					.byte	$00,$00
.19a4	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -41789
>19a7	3d a3 00 00				.dword	$0000a33d
>19ab	00 80					.byte	$00,$80
.19ad	20 64 50	jsr $5064		jsr	FloatAdd
.19b0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 2681
>19b3	79 0a 00 00				.dword	$00000a79
>19b7	00 00					.byte	$00,$00
.19b9	20 25 51	jsr $5125		jsr	FloatCompare
.19bc	20 ef 50	jsr $50ef		jsr	CompareEqual
.19bf	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.19c2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 44470
>19c5	b6 ad 00 00				.dword	$0000adb6
>19c9	00 00					.byte	$00,$00
.19cb	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -41789
>19ce	3d a3 00 00				.dword	$0000a33d
>19d2	00 80					.byte	$00,$80
.19d4	20 5e 50	jsr $505e		jsr	FloatSubtract
.19d7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 86259
>19da	f3 50 01 00				.dword	$000150f3
>19de	00 00					.byte	$00,$00
.19e0	20 25 51	jsr $5125		jsr	FloatCompare
.19e3	20 ef 50	jsr $50ef		jsr	CompareEqual
.19e6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.19e9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 44470
>19ec	b6 ad 00 00				.dword	$0000adb6
>19f0	00 00					.byte	$00,$00
.19f2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -41789
>19f5	3d a3 00 00				.dword	$0000a33d
>19f9	00 80					.byte	$00,$80
.19fb	20 00 53	jsr $5300		jsr	FloatMultiply
.19fe	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1858356830
>1a01	5e 46 c4 6e				.dword	$6ec4465e
>1a05	00 80					.byte	$00,$80
.1a07	20 25 51	jsr $5125		jsr	FloatCompare
.1a0a	20 ef 50	jsr $50ef		jsr	CompareEqual
.1a0d	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1a10	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 44470
>1a13	b6 ad 00 00				.dword	$0000adb6
>1a17	00 00					.byte	$00,$00
.1a19	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -41789
>1a1c	3d a3 00 00				.dword	$0000a33d
>1a20	00 80					.byte	$00,$80
.1a22	20 89 51	jsr $5189		jsr	FloatDivide
.1a25	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1.06415564
>1a28	42 20 1b 44				.dword	$441b2042
>1a2c	e2 80					.byte	$e2,$80
.1a2e	20 25 51	jsr $5125		jsr	FloatCompare
.1a31	20 ef 50	jsr $50ef		jsr	CompareEqual
.1a34	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1a37	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -41789
>1a3a	3d a3 00 00				.dword	$0000a33d
>1a3e	00 80					.byte	$00,$80
.1a40	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -41789
>1a43	3d a3 00 00				.dword	$0000a33d
>1a47	00 80					.byte	$00,$80
.1a49	20 25 51	jsr $5125		jsr	FloatCompare
.1a4c	20 ef 50	jsr $50ef		jsr	CompareEqual
.1a4f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>1a52	01 00 00 00				.dword	$00000001
>1a56	00 80					.byte	$00,$80
.1a58	20 25 51	jsr $5125		jsr	FloatCompare
.1a5b	20 ef 50	jsr $50ef		jsr	CompareEqual
.1a5e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1a61	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -41789
>1a64	3d a3 00 00				.dword	$0000a33d
>1a68	00 80					.byte	$00,$80
.1a6a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -41789
>1a6d	3d a3 00 00				.dword	$0000a33d
>1a71	00 80					.byte	$00,$80
.1a73	20 25 51	jsr $5125		jsr	FloatCompare
.1a76	20 ff 50	jsr $50ff		jsr	CompareNotEqual
.1a79	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>1a7c	00 00 00 00				.dword	$00000000
>1a80	00 00					.byte	$00,$00
.1a82	20 25 51	jsr $5125		jsr	FloatCompare
.1a85	20 ef 50	jsr $50ef		jsr	CompareEqual
.1a88	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1a8b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -41789
>1a8e	3d a3 00 00				.dword	$0000a33d
>1a92	00 80					.byte	$00,$80
.1a94	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -41789
>1a97	3d a3 00 00				.dword	$0000a33d
>1a9b	00 80					.byte	$00,$80
.1a9d	20 25 51	jsr $5125		jsr	FloatCompare
.1aa0	20 0d 51	jsr $510d		jsr	CompareGreater
.1aa3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>1aa6	00 00 00 00				.dword	$00000000
>1aaa	00 00					.byte	$00,$00
.1aac	20 25 51	jsr $5125		jsr	FloatCompare
.1aaf	20 ef 50	jsr $50ef		jsr	CompareEqual
.1ab2	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1ab5	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -41789
>1ab8	3d a3 00 00				.dword	$0000a33d
>1abc	00 80					.byte	$00,$80
.1abe	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -41789
>1ac1	3d a3 00 00				.dword	$0000a33d
>1ac5	00 80					.byte	$00,$80
.1ac7	20 25 51	jsr $5125		jsr	FloatCompare
.1aca	20 1d 51	jsr $511d		jsr	CompareGreaterEqual
.1acd	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>1ad0	01 00 00 00				.dword	$00000001
>1ad4	00 80					.byte	$00,$80
.1ad6	20 25 51	jsr $5125		jsr	FloatCompare
.1ad9	20 ef 50	jsr $50ef		jsr	CompareEqual
.1adc	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1adf	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -41789
>1ae2	3d a3 00 00				.dword	$0000a33d
>1ae6	00 80					.byte	$00,$80
.1ae8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -41789
>1aeb	3d a3 00 00				.dword	$0000a33d
>1aef	00 80					.byte	$00,$80
.1af1	20 25 51	jsr $5125		jsr	FloatCompare
.1af4	20 05 51	jsr $5105		jsr	CompareLess
.1af7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>1afa	00 00 00 00				.dword	$00000000
>1afe	00 00					.byte	$00,$00
.1b00	20 25 51	jsr $5125		jsr	FloatCompare
.1b03	20 ef 50	jsr $50ef		jsr	CompareEqual
.1b06	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1b09	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -41789
>1b0c	3d a3 00 00				.dword	$0000a33d
>1b10	00 80					.byte	$00,$80
.1b12	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -41789
>1b15	3d a3 00 00				.dword	$0000a33d
>1b19	00 80					.byte	$00,$80
.1b1b	20 25 51	jsr $5125		jsr	FloatCompare
.1b1e	20 15 51	jsr $5115		jsr	CompareLessEqual
.1b21	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>1b24	01 00 00 00				.dword	$00000001
>1b28	00 80					.byte	$00,$80
.1b2a	20 25 51	jsr $5125		jsr	FloatCompare
.1b2d	20 ef 50	jsr $50ef		jsr	CompareEqual
.1b30	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1b33	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -40.58095084
>1b36	63 72 29 51				.dword	$51297263
>1b3a	e7 80					.byte	$e7,$80
.1b3c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 73.7251964
>1b3f	79 a6 b9 49				.dword	$49b9a679
>1b43	e8 00					.byte	$e8,$00
.1b45	20 64 50	jsr $5064		jsr	FloatAdd
.1b48	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 33.14424557
>1b4b	8e da 49 42				.dword	$4249da8e
>1b4f	e7 00					.byte	$e7,$00
.1b51	20 25 51	jsr $5125		jsr	FloatCompare
.1b54	20 ef 50	jsr $50ef		jsr	CompareEqual
.1b57	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1b5a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -40.58095084
>1b5d	63 72 29 51				.dword	$51297263
>1b61	e7 80					.byte	$e7,$80
.1b63	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 73.7251964
>1b66	79 a6 b9 49				.dword	$49b9a679
>1b6a	e8 00					.byte	$e8,$00
.1b6c	20 5e 50	jsr $505e		jsr	FloatSubtract
.1b6f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -114.30614724
>1b72	aa 5f 4e 72				.dword	$724e5faa
>1b76	e8 80					.byte	$e8,$80
.1b78	20 25 51	jsr $5125		jsr	FloatCompare
.1b7b	20 ef 50	jsr $50ef		jsr	CompareEqual
.1b7e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1b81	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -40.58095084
>1b84	63 72 29 51				.dword	$51297263
>1b88	e7 80					.byte	$e7,$80
.1b8a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 73.7251964
>1b8d	79 a6 b9 49				.dword	$49b9a679
>1b91	e8 00					.byte	$e8,$00
.1b93	20 00 53	jsr $5300		jsr	FloatMultiply
.1b96	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -2991.83857081
>1b99	65 b5 7e 5d				.dword	$5d7eb565
>1b9d	ed 80					.byte	$ed,$80
.1b9f	20 25 51	jsr $5125		jsr	FloatCompare
.1ba2	20 ef 50	jsr $50ef		jsr	CompareEqual
.1ba5	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1ba8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -40.58095084
>1bab	63 72 29 51				.dword	$51297263
>1baf	e7 80					.byte	$e7,$80
.1bb1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 73.7251964
>1bb4	79 a6 b9 49				.dword	$49b9a679
>1bb8	e8 00					.byte	$e8,$00
.1bba	20 89 51	jsr $5189		jsr	FloatDivide
.1bbd	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -0.5504353
>1bc0	f6 a9 74 46				.dword	$4674a9f6
>1bc4	e1 80					.byte	$e1,$80
.1bc6	20 25 51	jsr $5125		jsr	FloatCompare
.1bc9	20 ef 50	jsr $50ef		jsr	CompareEqual
.1bcc	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1bcf	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 18.33101158
>1bd2	b3 f4 52 49				.dword	$4952f4b3
>1bd6	e6 00					.byte	$e6,$00
.1bd8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 18.33101158
>1bdb	b3 f4 52 49				.dword	$4952f4b3
>1bdf	e6 00					.byte	$e6,$00
.1be1	20 25 51	jsr $5125		jsr	FloatCompare
.1be4	20 0d 51	jsr $510d		jsr	CompareGreater
.1be7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>1bea	00 00 00 00				.dword	$00000000
>1bee	00 00					.byte	$00,$00
.1bf0	20 25 51	jsr $5125		jsr	FloatCompare
.1bf3	20 ef 50	jsr $50ef		jsr	CompareEqual
.1bf6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1bf9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 18.33101158
>1bfc	b3 f4 52 49				.dword	$4952f4b3
>1c00	e6 00					.byte	$e6,$00
.1c02	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 18.33101158
>1c05	b3 f4 52 49				.dword	$4952f4b3
>1c09	e6 00					.byte	$e6,$00
.1c0b	20 25 51	jsr $5125		jsr	FloatCompare
.1c0e	20 1d 51	jsr $511d		jsr	CompareGreaterEqual
.1c11	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>1c14	01 00 00 00				.dword	$00000001
>1c18	00 80					.byte	$00,$80
.1c1a	20 25 51	jsr $5125		jsr	FloatCompare
.1c1d	20 ef 50	jsr $50ef		jsr	CompareEqual
.1c20	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1c23	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 18.33101158
>1c26	b3 f4 52 49				.dword	$4952f4b3
>1c2a	e6 00					.byte	$e6,$00
.1c2c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 18.33101158
>1c2f	b3 f4 52 49				.dword	$4952f4b3
>1c33	e6 00					.byte	$e6,$00
.1c35	20 25 51	jsr $5125		jsr	FloatCompare
.1c38	20 05 51	jsr $5105		jsr	CompareLess
.1c3b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>1c3e	00 00 00 00				.dword	$00000000
>1c42	00 00					.byte	$00,$00
.1c44	20 25 51	jsr $5125		jsr	FloatCompare
.1c47	20 ef 50	jsr $50ef		jsr	CompareEqual
.1c4a	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1c4d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 18.33101158
>1c50	b3 f4 52 49				.dword	$4952f4b3
>1c54	e6 00					.byte	$e6,$00
.1c56	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 18.33101158
>1c59	b3 f4 52 49				.dword	$4952f4b3
>1c5d	e6 00					.byte	$e6,$00
.1c5f	20 25 51	jsr $5125		jsr	FloatCompare
.1c62	20 15 51	jsr $5115		jsr	CompareLessEqual
.1c65	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>1c68	01 00 00 00				.dword	$00000001
>1c6c	00 80					.byte	$00,$80
.1c6e	20 25 51	jsr $5125		jsr	FloatCompare
.1c71	20 ef 50	jsr $50ef		jsr	CompareEqual
.1c74	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1c77	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 18.33101158
>1c7a	b3 f4 52 49				.dword	$4952f4b3
>1c7e	e6 00					.byte	$e6,$00
.1c80	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 18.33101158
>1c83	b3 f4 52 49				.dword	$4952f4b3
>1c87	e6 00					.byte	$e6,$00
.1c89	20 25 51	jsr $5125		jsr	FloatCompare
.1c8c	20 ef 50	jsr $50ef		jsr	CompareEqual
.1c8f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>1c92	01 00 00 00				.dword	$00000001
>1c96	00 80					.byte	$00,$80
.1c98	20 25 51	jsr $5125		jsr	FloatCompare
.1c9b	20 ef 50	jsr $50ef		jsr	CompareEqual
.1c9e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1ca1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 18.33101158
>1ca4	b3 f4 52 49				.dword	$4952f4b3
>1ca8	e6 00					.byte	$e6,$00
.1caa	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 18.33101158
>1cad	b3 f4 52 49				.dword	$4952f4b3
>1cb1	e6 00					.byte	$e6,$00
.1cb3	20 25 51	jsr $5125		jsr	FloatCompare
.1cb6	20 ff 50	jsr $50ff		jsr	CompareNotEqual
.1cb9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>1cbc	00 00 00 00				.dword	$00000000
>1cc0	00 00					.byte	$00,$00
.1cc2	20 25 51	jsr $5125		jsr	FloatCompare
.1cc5	20 ef 50	jsr $50ef		jsr	CompareEqual
.1cc8	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1ccb	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 2954
>1cce	8a 0b 00 00				.dword	$00000b8a
>1cd2	00 00					.byte	$00,$00
.1cd4	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 27838
>1cd7	be 6c 00 00				.dword	$00006cbe
>1cdb	00 00					.byte	$00,$00
.1cdd	20 64 50	jsr $5064		jsr	FloatAdd
.1ce0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 30792
>1ce3	48 78 00 00				.dword	$00007848
>1ce7	00 00					.byte	$00,$00
.1ce9	20 25 51	jsr $5125		jsr	FloatCompare
.1cec	20 ef 50	jsr $50ef		jsr	CompareEqual
.1cef	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1cf2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 2954
>1cf5	8a 0b 00 00				.dword	$00000b8a
>1cf9	00 00					.byte	$00,$00
.1cfb	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 27838
>1cfe	be 6c 00 00				.dword	$00006cbe
>1d02	00 00					.byte	$00,$00
.1d04	20 5e 50	jsr $505e		jsr	FloatSubtract
.1d07	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -24884
>1d0a	34 61 00 00				.dword	$00006134
>1d0e	00 80					.byte	$00,$80
.1d10	20 25 51	jsr $5125		jsr	FloatCompare
.1d13	20 ef 50	jsr $50ef		jsr	CompareEqual
.1d16	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1d19	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 2954
>1d1c	8a 0b 00 00				.dword	$00000b8a
>1d20	00 00					.byte	$00,$00
.1d22	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 27838
>1d25	be 6c 00 00				.dword	$00006cbe
>1d29	00 00					.byte	$00,$00
.1d2b	20 00 53	jsr $5300		jsr	FloatMultiply
.1d2e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 82233452
>1d31	6c c8 e6 04				.dword	$04e6c86c
>1d35	00 00					.byte	$00,$00
.1d37	20 25 51	jsr $5125		jsr	FloatCompare
.1d3a	20 ef 50	jsr $50ef		jsr	CompareEqual
.1d3d	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1d40	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 2954
>1d43	8a 0b 00 00				.dword	$00000b8a
>1d47	00 00					.byte	$00,$00
.1d49	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 27838
>1d4c	be 6c 00 00				.dword	$00006cbe
>1d50	00 00					.byte	$00,$00
.1d52	20 89 51	jsr $5189		jsr	FloatDivide
.1d55	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0.10611394
>1d58	f8 21 a9 6c				.dword	$6ca921f8
>1d5c	de 00					.byte	$de,$00
.1d5e	20 25 51	jsr $5125		jsr	FloatCompare
.1d61	20 ef 50	jsr $50ef		jsr	CompareEqual
.1d64	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1d67	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 27838
>1d6a	be 6c 00 00				.dword	$00006cbe
>1d6e	00 00					.byte	$00,$00
.1d70	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 27838
>1d73	be 6c 00 00				.dword	$00006cbe
>1d77	00 00					.byte	$00,$00
.1d79	20 25 51	jsr $5125		jsr	FloatCompare
.1d7c	20 ef 50	jsr $50ef		jsr	CompareEqual
.1d7f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>1d82	01 00 00 00				.dword	$00000001
>1d86	00 80					.byte	$00,$80
.1d88	20 25 51	jsr $5125		jsr	FloatCompare
.1d8b	20 ef 50	jsr $50ef		jsr	CompareEqual
.1d8e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1d91	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 27838
>1d94	be 6c 00 00				.dword	$00006cbe
>1d98	00 00					.byte	$00,$00
.1d9a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 27838
>1d9d	be 6c 00 00				.dword	$00006cbe
>1da1	00 00					.byte	$00,$00
.1da3	20 25 51	jsr $5125		jsr	FloatCompare
.1da6	20 ff 50	jsr $50ff		jsr	CompareNotEqual
.1da9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>1dac	00 00 00 00				.dword	$00000000
>1db0	00 00					.byte	$00,$00
.1db2	20 25 51	jsr $5125		jsr	FloatCompare
.1db5	20 ef 50	jsr $50ef		jsr	CompareEqual
.1db8	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1dbb	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 27838
>1dbe	be 6c 00 00				.dword	$00006cbe
>1dc2	00 00					.byte	$00,$00
.1dc4	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 27838
>1dc7	be 6c 00 00				.dword	$00006cbe
>1dcb	00 00					.byte	$00,$00
.1dcd	20 25 51	jsr $5125		jsr	FloatCompare
.1dd0	20 0d 51	jsr $510d		jsr	CompareGreater
.1dd3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>1dd6	00 00 00 00				.dword	$00000000
>1dda	00 00					.byte	$00,$00
.1ddc	20 25 51	jsr $5125		jsr	FloatCompare
.1ddf	20 ef 50	jsr $50ef		jsr	CompareEqual
.1de2	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1de5	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 27838
>1de8	be 6c 00 00				.dword	$00006cbe
>1dec	00 00					.byte	$00,$00
.1dee	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 27838
>1df1	be 6c 00 00				.dword	$00006cbe
>1df5	00 00					.byte	$00,$00
.1df7	20 25 51	jsr $5125		jsr	FloatCompare
.1dfa	20 1d 51	jsr $511d		jsr	CompareGreaterEqual
.1dfd	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>1e00	01 00 00 00				.dword	$00000001
>1e04	00 80					.byte	$00,$80
.1e06	20 25 51	jsr $5125		jsr	FloatCompare
.1e09	20 ef 50	jsr $50ef		jsr	CompareEqual
.1e0c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1e0f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 27838
>1e12	be 6c 00 00				.dword	$00006cbe
>1e16	00 00					.byte	$00,$00
.1e18	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 27838
>1e1b	be 6c 00 00				.dword	$00006cbe
>1e1f	00 00					.byte	$00,$00
.1e21	20 25 51	jsr $5125		jsr	FloatCompare
.1e24	20 05 51	jsr $5105		jsr	CompareLess
.1e27	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>1e2a	00 00 00 00				.dword	$00000000
>1e2e	00 00					.byte	$00,$00
.1e30	20 25 51	jsr $5125		jsr	FloatCompare
.1e33	20 ef 50	jsr $50ef		jsr	CompareEqual
.1e36	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1e39	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 27838
>1e3c	be 6c 00 00				.dword	$00006cbe
>1e40	00 00					.byte	$00,$00
.1e42	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 27838
>1e45	be 6c 00 00				.dword	$00006cbe
>1e49	00 00					.byte	$00,$00
.1e4b	20 25 51	jsr $5125		jsr	FloatCompare
.1e4e	20 15 51	jsr $5115		jsr	CompareLessEqual
.1e51	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>1e54	01 00 00 00				.dword	$00000001
>1e58	00 80					.byte	$00,$80
.1e5a	20 25 51	jsr $5125		jsr	FloatCompare
.1e5d	20 ef 50	jsr $50ef		jsr	CompareEqual
.1e60	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1e63	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -13.92662185
>1e66	b7 b8 69 6f				.dword	$6f69b8b7
>1e6a	e5 80					.byte	$e5,$80
.1e6c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -26.54507168
>1e6f	45 27 2e 6a				.dword	$6a2e2745
>1e73	e6 80					.byte	$e6,$80
.1e75	20 64 50	jsr $5064		jsr	FloatAdd
.1e78	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -40.47169353
>1e7b	d0 81 f1 50				.dword	$50f181d0
>1e7f	e7 80					.byte	$e7,$80
.1e81	20 25 51	jsr $5125		jsr	FloatCompare
.1e84	20 ef 50	jsr $50ef		jsr	CompareEqual
.1e87	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1e8a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -13.92662185
>1e8d	b7 b8 69 6f				.dword	$6f69b8b7
>1e91	e5 80					.byte	$e5,$80
.1e93	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -26.54507168
>1e96	45 27 2e 6a				.dword	$6a2e2745
>1e9a	e6 80					.byte	$e6,$80
.1e9c	20 5e 50	jsr $505e		jsr	FloatSubtract
.1e9f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 12.61844983
>1ea2	d3 95 f2 64				.dword	$64f295d3
>1ea6	e5 00					.byte	$e5,$00
.1ea8	20 25 51	jsr $5125		jsr	FloatCompare
.1eab	20 ef 50	jsr $50ef		jsr	CompareEqual
.1eae	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1eb1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -13.92662185
>1eb4	b7 b8 69 6f				.dword	$6f69b8b7
>1eb8	e5 80					.byte	$e5,$80
.1eba	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -26.54507168
>1ebd	45 27 2e 6a				.dword	$6a2e2745
>1ec1	e6 80					.byte	$e6,$80
.1ec3	20 00 53	jsr $5300		jsr	FloatMultiply
.1ec6	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 369.68317527
>1ec9	25 b9 6b 5c				.dword	$5c6bb925
>1ecd	ea 00					.byte	$ea,$00
.1ecf	20 25 51	jsr $5125		jsr	FloatCompare
.1ed2	20 ef 50	jsr $50ef		jsr	CompareEqual
.1ed5	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1ed8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -13.92662185
>1edb	b7 b8 69 6f				.dword	$6f69b8b7
>1edf	e5 80					.byte	$e5,$80
.1ee1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -26.54507168
>1ee4	45 27 2e 6a				.dword	$6a2e2745
>1ee8	e6 80					.byte	$e6,$80
.1eea	20 89 51	jsr $5189		jsr	FloatDivide
.1eed	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0.52464058
>1ef0	2b 6c 27 43				.dword	$43276c2b
>1ef4	e1 00					.byte	$e1,$00
.1ef6	20 25 51	jsr $5125		jsr	FloatCompare
.1ef9	20 ef 50	jsr $50ef		jsr	CompareEqual
.1efc	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1eff	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -62.36980643
>1f02	45 57 bd 7c				.dword	$7cbd5745
>1f06	e7 80					.byte	$e7,$80
.1f08	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -62.36980643
>1f0b	45 57 bd 7c				.dword	$7cbd5745
>1f0f	e7 80					.byte	$e7,$80
.1f11	20 25 51	jsr $5125		jsr	FloatCompare
.1f14	20 0d 51	jsr $510d		jsr	CompareGreater
.1f17	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>1f1a	00 00 00 00				.dword	$00000000
>1f1e	00 00					.byte	$00,$00
.1f20	20 25 51	jsr $5125		jsr	FloatCompare
.1f23	20 ef 50	jsr $50ef		jsr	CompareEqual
.1f26	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1f29	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -62.36980643
>1f2c	45 57 bd 7c				.dword	$7cbd5745
>1f30	e7 80					.byte	$e7,$80
.1f32	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -62.36980643
>1f35	45 57 bd 7c				.dword	$7cbd5745
>1f39	e7 80					.byte	$e7,$80
.1f3b	20 25 51	jsr $5125		jsr	FloatCompare
.1f3e	20 1d 51	jsr $511d		jsr	CompareGreaterEqual
.1f41	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>1f44	01 00 00 00				.dword	$00000001
>1f48	00 80					.byte	$00,$80
.1f4a	20 25 51	jsr $5125		jsr	FloatCompare
.1f4d	20 ef 50	jsr $50ef		jsr	CompareEqual
.1f50	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1f53	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -62.36980643
>1f56	45 57 bd 7c				.dword	$7cbd5745
>1f5a	e7 80					.byte	$e7,$80
.1f5c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -62.36980643
>1f5f	45 57 bd 7c				.dword	$7cbd5745
>1f63	e7 80					.byte	$e7,$80
.1f65	20 25 51	jsr $5125		jsr	FloatCompare
.1f68	20 05 51	jsr $5105		jsr	CompareLess
.1f6b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>1f6e	00 00 00 00				.dword	$00000000
>1f72	00 00					.byte	$00,$00
.1f74	20 25 51	jsr $5125		jsr	FloatCompare
.1f77	20 ef 50	jsr $50ef		jsr	CompareEqual
.1f7a	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1f7d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -62.36980643
>1f80	45 57 bd 7c				.dword	$7cbd5745
>1f84	e7 80					.byte	$e7,$80
.1f86	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -62.36980643
>1f89	45 57 bd 7c				.dword	$7cbd5745
>1f8d	e7 80					.byte	$e7,$80
.1f8f	20 25 51	jsr $5125		jsr	FloatCompare
.1f92	20 15 51	jsr $5115		jsr	CompareLessEqual
.1f95	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>1f98	01 00 00 00				.dword	$00000001
>1f9c	00 80					.byte	$00,$80
.1f9e	20 25 51	jsr $5125		jsr	FloatCompare
.1fa1	20 ef 50	jsr $50ef		jsr	CompareEqual
.1fa4	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1fa7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -62.36980643
>1faa	45 57 bd 7c				.dword	$7cbd5745
>1fae	e7 80					.byte	$e7,$80
.1fb0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -62.36980643
>1fb3	45 57 bd 7c				.dword	$7cbd5745
>1fb7	e7 80					.byte	$e7,$80
.1fb9	20 25 51	jsr $5125		jsr	FloatCompare
.1fbc	20 ef 50	jsr $50ef		jsr	CompareEqual
.1fbf	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>1fc2	01 00 00 00				.dword	$00000001
>1fc6	00 80					.byte	$00,$80
.1fc8	20 25 51	jsr $5125		jsr	FloatCompare
.1fcb	20 ef 50	jsr $50ef		jsr	CompareEqual
.1fce	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1fd1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -62.36980643
>1fd4	45 57 bd 7c				.dword	$7cbd5745
>1fd8	e7 80					.byte	$e7,$80
.1fda	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -62.36980643
>1fdd	45 57 bd 7c				.dword	$7cbd5745
>1fe1	e7 80					.byte	$e7,$80
.1fe3	20 25 51	jsr $5125		jsr	FloatCompare
.1fe6	20 ff 50	jsr $50ff		jsr	CompareNotEqual
.1fe9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>1fec	00 00 00 00				.dword	$00000000
>1ff0	00 00					.byte	$00,$00
.1ff2	20 25 51	jsr $5125		jsr	FloatCompare
.1ff5	20 ef 50	jsr $50ef		jsr	CompareEqual
.1ff8	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.1ffb	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -140
>1ffe	8c 00 00 00				.dword	$0000008c
>2002	00 80					.byte	$00,$80
.2004	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -16240
>2007	70 3f 00 00				.dword	$00003f70
>200b	00 80					.byte	$00,$80
.200d	20 64 50	jsr $5064		jsr	FloatAdd
.2010	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -16380
>2013	fc 3f 00 00				.dword	$00003ffc
>2017	00 80					.byte	$00,$80
.2019	20 25 51	jsr $5125		jsr	FloatCompare
.201c	20 ef 50	jsr $50ef		jsr	CompareEqual
.201f	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2022	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -140
>2025	8c 00 00 00				.dword	$0000008c
>2029	00 80					.byte	$00,$80
.202b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -16240
>202e	70 3f 00 00				.dword	$00003f70
>2032	00 80					.byte	$00,$80
.2034	20 5e 50	jsr $505e		jsr	FloatSubtract
.2037	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 16100
>203a	e4 3e 00 00				.dword	$00003ee4
>203e	00 00					.byte	$00,$00
.2040	20 25 51	jsr $5125		jsr	FloatCompare
.2043	20 ef 50	jsr $50ef		jsr	CompareEqual
.2046	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2049	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -140
>204c	8c 00 00 00				.dword	$0000008c
>2050	00 80					.byte	$00,$80
.2052	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -16240
>2055	70 3f 00 00				.dword	$00003f70
>2059	00 80					.byte	$00,$80
.205b	20 00 53	jsr $5300		jsr	FloatMultiply
.205e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 2273600
>2061	40 b1 22 00				.dword	$0022b140
>2065	00 00					.byte	$00,$00
.2067	20 25 51	jsr $5125		jsr	FloatCompare
.206a	20 ef 50	jsr $50ef		jsr	CompareEqual
.206d	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2070	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -140
>2073	8c 00 00 00				.dword	$0000008c
>2077	00 80					.byte	$00,$80
.2079	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -16240
>207c	70 3f 00 00				.dword	$00003f70
>2080	00 80					.byte	$00,$80
.2082	20 89 51	jsr $5189		jsr	FloatDivide
.2085	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0.00862069
>2088	b4 e5 9e 46				.dword	$469ee5b4
>208c	db 00					.byte	$db,$00
.208e	20 25 51	jsr $5125		jsr	FloatCompare
.2091	20 ef 50	jsr $50ef		jsr	CompareEqual
.2094	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2097	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -16240
>209a	70 3f 00 00				.dword	$00003f70
>209e	00 80					.byte	$00,$80
.20a0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -16240
>20a3	70 3f 00 00				.dword	$00003f70
>20a7	00 80					.byte	$00,$80
.20a9	20 25 51	jsr $5125		jsr	FloatCompare
.20ac	20 ef 50	jsr $50ef		jsr	CompareEqual
.20af	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>20b2	01 00 00 00				.dword	$00000001
>20b6	00 80					.byte	$00,$80
.20b8	20 25 51	jsr $5125		jsr	FloatCompare
.20bb	20 ef 50	jsr $50ef		jsr	CompareEqual
.20be	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.20c1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -16240
>20c4	70 3f 00 00				.dword	$00003f70
>20c8	00 80					.byte	$00,$80
.20ca	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -16240
>20cd	70 3f 00 00				.dword	$00003f70
>20d1	00 80					.byte	$00,$80
.20d3	20 25 51	jsr $5125		jsr	FloatCompare
.20d6	20 ff 50	jsr $50ff		jsr	CompareNotEqual
.20d9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>20dc	00 00 00 00				.dword	$00000000
>20e0	00 00					.byte	$00,$00
.20e2	20 25 51	jsr $5125		jsr	FloatCompare
.20e5	20 ef 50	jsr $50ef		jsr	CompareEqual
.20e8	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.20eb	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -16240
>20ee	70 3f 00 00				.dword	$00003f70
>20f2	00 80					.byte	$00,$80
.20f4	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -16240
>20f7	70 3f 00 00				.dword	$00003f70
>20fb	00 80					.byte	$00,$80
.20fd	20 25 51	jsr $5125		jsr	FloatCompare
.2100	20 0d 51	jsr $510d		jsr	CompareGreater
.2103	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>2106	00 00 00 00				.dword	$00000000
>210a	00 00					.byte	$00,$00
.210c	20 25 51	jsr $5125		jsr	FloatCompare
.210f	20 ef 50	jsr $50ef		jsr	CompareEqual
.2112	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2115	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -16240
>2118	70 3f 00 00				.dword	$00003f70
>211c	00 80					.byte	$00,$80
.211e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -16240
>2121	70 3f 00 00				.dword	$00003f70
>2125	00 80					.byte	$00,$80
.2127	20 25 51	jsr $5125		jsr	FloatCompare
.212a	20 1d 51	jsr $511d		jsr	CompareGreaterEqual
.212d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>2130	01 00 00 00				.dword	$00000001
>2134	00 80					.byte	$00,$80
.2136	20 25 51	jsr $5125		jsr	FloatCompare
.2139	20 ef 50	jsr $50ef		jsr	CompareEqual
.213c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.213f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -16240
>2142	70 3f 00 00				.dword	$00003f70
>2146	00 80					.byte	$00,$80
.2148	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -16240
>214b	70 3f 00 00				.dword	$00003f70
>214f	00 80					.byte	$00,$80
.2151	20 25 51	jsr $5125		jsr	FloatCompare
.2154	20 05 51	jsr $5105		jsr	CompareLess
.2157	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>215a	00 00 00 00				.dword	$00000000
>215e	00 00					.byte	$00,$00
.2160	20 25 51	jsr $5125		jsr	FloatCompare
.2163	20 ef 50	jsr $50ef		jsr	CompareEqual
.2166	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2169	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -16240
>216c	70 3f 00 00				.dword	$00003f70
>2170	00 80					.byte	$00,$80
.2172	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -16240
>2175	70 3f 00 00				.dword	$00003f70
>2179	00 80					.byte	$00,$80
.217b	20 25 51	jsr $5125		jsr	FloatCompare
.217e	20 15 51	jsr $5115		jsr	CompareLessEqual
.2181	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>2184	01 00 00 00				.dword	$00000001
>2188	00 80					.byte	$00,$80
.218a	20 25 51	jsr $5125		jsr	FloatCompare
.218d	20 ef 50	jsr $50ef		jsr	CompareEqual
.2190	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2193	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -73.02688912
>2196	35 e2 06 49				.dword	$4906e235
>219a	e8 80					.byte	$e8,$80
.219c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 45.52045031
>219f	77 78 0a 5b				.dword	$5b0a7877
>21a3	e7 00					.byte	$e7,$00
.21a5	20 64 50	jsr $5064		jsr	FloatAdd
.21a8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -27.50643881
>21ab	e5 97 06 6e				.dword	$6e0697e5
>21af	e6 80					.byte	$e6,$80
.21b1	20 25 51	jsr $5125		jsr	FloatCompare
.21b4	20 ef 50	jsr $50ef		jsr	CompareEqual
.21b7	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.21ba	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -73.02688912
>21bd	35 e2 06 49				.dword	$4906e235
>21c1	e8 80					.byte	$e8,$80
.21c3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 45.52045031
>21c6	77 78 0a 5b				.dword	$5b0a7877
>21ca	e7 00					.byte	$e7,$00
.21cc	20 5e 50	jsr $505e		jsr	FloatSubtract
.21cf	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -118.54733943
>21d2	70 1e 8c 76				.dword	$768c1e70
>21d6	e8 80					.byte	$e8,$80
.21d8	20 25 51	jsr $5125		jsr	FloatCompare
.21db	20 ef 50	jsr $50ef		jsr	CompareEqual
.21de	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.21e1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -73.02688912
>21e4	35 e2 06 49				.dword	$4906e235
>21e8	e8 80					.byte	$e8,$80
.21ea	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 45.52045031
>21ed	77 78 0a 5b				.dword	$5b0a7877
>21f1	e7 00					.byte	$e7,$00
.21f3	20 00 53	jsr $5300		jsr	FloatMultiply
.21f6	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -3324.21687774
>21f9	2a bc e1 67				.dword	$67e1bc2a
>21fd	ed 80					.byte	$ed,$80
.21ff	20 25 51	jsr $5125		jsr	FloatCompare
.2202	20 ef 50	jsr $50ef		jsr	CompareEqual
.2205	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2208	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -73.02688912
>220b	35 e2 06 49				.dword	$4906e235
>220f	e8 80					.byte	$e8,$80
.2211	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 45.52045031
>2214	77 78 0a 5b				.dword	$5b0a7877
>2218	e7 00					.byte	$e7,$00
.221a	20 89 51	jsr $5189		jsr	FloatDivide
.221d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1.60426553
>2220	54 49 ac 66				.dword	$66ac4954
>2224	e2 80					.byte	$e2,$80
.2226	20 25 51	jsr $5125		jsr	FloatCompare
.2229	20 ef 50	jsr $50ef		jsr	CompareEqual
.222c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.222f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -68.92160039
>2232	01 ee eb 44				.dword	$44ebee01
>2236	e8 80					.byte	$e8,$80
.2238	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -71.81242407
>223b	06 fb cf 47				.dword	$47cffb06
>223f	e8 80					.byte	$e8,$80
.2241	20 25 51	jsr $5125		jsr	FloatCompare
.2244	20 0d 51	jsr $510d		jsr	CompareGreater
.2247	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>224a	01 00 00 00				.dword	$00000001
>224e	00 80					.byte	$00,$80
.2250	20 25 51	jsr $5125		jsr	FloatCompare
.2253	20 ef 50	jsr $50ef		jsr	CompareEqual
.2256	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2259	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -68.92160039
>225c	01 ee eb 44				.dword	$44ebee01
>2260	e8 80					.byte	$e8,$80
.2262	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -71.81242407
>2265	06 fb cf 47				.dword	$47cffb06
>2269	e8 80					.byte	$e8,$80
.226b	20 25 51	jsr $5125		jsr	FloatCompare
.226e	20 1d 51	jsr $511d		jsr	CompareGreaterEqual
.2271	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>2274	01 00 00 00				.dword	$00000001
>2278	00 80					.byte	$00,$80
.227a	20 25 51	jsr $5125		jsr	FloatCompare
.227d	20 ef 50	jsr $50ef		jsr	CompareEqual
.2280	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2283	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -68.92160039
>2286	01 ee eb 44				.dword	$44ebee01
>228a	e8 80					.byte	$e8,$80
.228c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -71.81242407
>228f	06 fb cf 47				.dword	$47cffb06
>2293	e8 80					.byte	$e8,$80
.2295	20 25 51	jsr $5125		jsr	FloatCompare
.2298	20 05 51	jsr $5105		jsr	CompareLess
.229b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>229e	00 00 00 00				.dword	$00000000
>22a2	00 00					.byte	$00,$00
.22a4	20 25 51	jsr $5125		jsr	FloatCompare
.22a7	20 ef 50	jsr $50ef		jsr	CompareEqual
.22aa	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.22ad	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -68.92160039
>22b0	01 ee eb 44				.dword	$44ebee01
>22b4	e8 80					.byte	$e8,$80
.22b6	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -71.81242407
>22b9	06 fb cf 47				.dword	$47cffb06
>22bd	e8 80					.byte	$e8,$80
.22bf	20 25 51	jsr $5125		jsr	FloatCompare
.22c2	20 15 51	jsr $5115		jsr	CompareLessEqual
.22c5	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>22c8	00 00 00 00				.dword	$00000000
>22cc	00 00					.byte	$00,$00
.22ce	20 25 51	jsr $5125		jsr	FloatCompare
.22d1	20 ef 50	jsr $50ef		jsr	CompareEqual
.22d4	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.22d7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -68.92160039
>22da	01 ee eb 44				.dword	$44ebee01
>22de	e8 80					.byte	$e8,$80
.22e0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -71.81242407
>22e3	06 fb cf 47				.dword	$47cffb06
>22e7	e8 80					.byte	$e8,$80
.22e9	20 25 51	jsr $5125		jsr	FloatCompare
.22ec	20 ef 50	jsr $50ef		jsr	CompareEqual
.22ef	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>22f2	00 00 00 00				.dword	$00000000
>22f6	00 00					.byte	$00,$00
.22f8	20 25 51	jsr $5125		jsr	FloatCompare
.22fb	20 ef 50	jsr $50ef		jsr	CompareEqual
.22fe	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2301	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -68.92160039
>2304	01 ee eb 44				.dword	$44ebee01
>2308	e8 80					.byte	$e8,$80
.230a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -71.81242407
>230d	06 fb cf 47				.dword	$47cffb06
>2311	e8 80					.byte	$e8,$80
.2313	20 25 51	jsr $5125		jsr	FloatCompare
.2316	20 ff 50	jsr $50ff		jsr	CompareNotEqual
.2319	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>231c	01 00 00 00				.dword	$00000001
>2320	00 80					.byte	$00,$80
.2322	20 25 51	jsr $5125		jsr	FloatCompare
.2325	20 ef 50	jsr $50ef		jsr	CompareEqual
.2328	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.232b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -34397
>232e	5d 86 00 00				.dword	$0000865d
>2332	00 80					.byte	$00,$80
.2334	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7682
>2337	02 1e 00 00				.dword	$00001e02
>233b	00 00					.byte	$00,$00
.233d	20 64 50	jsr $5064		jsr	FloatAdd
.2340	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -26715
>2343	5b 68 00 00				.dword	$0000685b
>2347	00 80					.byte	$00,$80
.2349	20 25 51	jsr $5125		jsr	FloatCompare
.234c	20 ef 50	jsr $50ef		jsr	CompareEqual
.234f	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2352	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -34397
>2355	5d 86 00 00				.dword	$0000865d
>2359	00 80					.byte	$00,$80
.235b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7682
>235e	02 1e 00 00				.dword	$00001e02
>2362	00 00					.byte	$00,$00
.2364	20 5e 50	jsr $505e		jsr	FloatSubtract
.2367	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -42079
>236a	5f a4 00 00				.dword	$0000a45f
>236e	00 80					.byte	$00,$80
.2370	20 25 51	jsr $5125		jsr	FloatCompare
.2373	20 ef 50	jsr $50ef		jsr	CompareEqual
.2376	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2379	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -34397
>237c	5d 86 00 00				.dword	$0000865d
>2380	00 80					.byte	$00,$80
.2382	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7682
>2385	02 1e 00 00				.dword	$00001e02
>2389	00 00					.byte	$00,$00
.238b	20 00 53	jsr $5300		jsr	FloatMultiply
.238e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -264237754
>2391	ba f2 bf 0f				.dword	$0fbff2ba
>2395	00 80					.byte	$00,$80
.2397	20 25 51	jsr $5125		jsr	FloatCompare
.239a	20 ef 50	jsr $50ef		jsr	CompareEqual
.239d	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.23a0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -34397
>23a3	5d 86 00 00				.dword	$0000865d
>23a7	00 80					.byte	$00,$80
.23a9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7682
>23ac	02 1e 00 00				.dword	$00001e02
>23b0	00 00					.byte	$00,$00
.23b2	20 89 51	jsr $5189		jsr	FloatDivide
.23b5	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -4.47761
>23b8	62 4a a4 47				.dword	$47a44a62
>23bc	e4 80					.byte	$e4,$80
.23be	20 25 51	jsr $5125		jsr	FloatCompare
.23c1	20 ef 50	jsr $50ef		jsr	CompareEqual
.23c4	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.23c7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7682
>23ca	02 1e 00 00				.dword	$00001e02
>23ce	00 00					.byte	$00,$00
.23d0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7682
>23d3	02 1e 00 00				.dword	$00001e02
>23d7	00 00					.byte	$00,$00
.23d9	20 25 51	jsr $5125		jsr	FloatCompare
.23dc	20 ef 50	jsr $50ef		jsr	CompareEqual
.23df	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>23e2	01 00 00 00				.dword	$00000001
>23e6	00 80					.byte	$00,$80
.23e8	20 25 51	jsr $5125		jsr	FloatCompare
.23eb	20 ef 50	jsr $50ef		jsr	CompareEqual
.23ee	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.23f1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7682
>23f4	02 1e 00 00				.dword	$00001e02
>23f8	00 00					.byte	$00,$00
.23fa	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7682
>23fd	02 1e 00 00				.dword	$00001e02
>2401	00 00					.byte	$00,$00
.2403	20 25 51	jsr $5125		jsr	FloatCompare
.2406	20 ff 50	jsr $50ff		jsr	CompareNotEqual
.2409	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>240c	00 00 00 00				.dword	$00000000
>2410	00 00					.byte	$00,$00
.2412	20 25 51	jsr $5125		jsr	FloatCompare
.2415	20 ef 50	jsr $50ef		jsr	CompareEqual
.2418	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.241b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7682
>241e	02 1e 00 00				.dword	$00001e02
>2422	00 00					.byte	$00,$00
.2424	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7682
>2427	02 1e 00 00				.dword	$00001e02
>242b	00 00					.byte	$00,$00
.242d	20 25 51	jsr $5125		jsr	FloatCompare
.2430	20 0d 51	jsr $510d		jsr	CompareGreater
.2433	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>2436	00 00 00 00				.dword	$00000000
>243a	00 00					.byte	$00,$00
.243c	20 25 51	jsr $5125		jsr	FloatCompare
.243f	20 ef 50	jsr $50ef		jsr	CompareEqual
.2442	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2445	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7682
>2448	02 1e 00 00				.dword	$00001e02
>244c	00 00					.byte	$00,$00
.244e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7682
>2451	02 1e 00 00				.dword	$00001e02
>2455	00 00					.byte	$00,$00
.2457	20 25 51	jsr $5125		jsr	FloatCompare
.245a	20 1d 51	jsr $511d		jsr	CompareGreaterEqual
.245d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>2460	01 00 00 00				.dword	$00000001
>2464	00 80					.byte	$00,$80
.2466	20 25 51	jsr $5125		jsr	FloatCompare
.2469	20 ef 50	jsr $50ef		jsr	CompareEqual
.246c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.246f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7682
>2472	02 1e 00 00				.dword	$00001e02
>2476	00 00					.byte	$00,$00
.2478	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7682
>247b	02 1e 00 00				.dword	$00001e02
>247f	00 00					.byte	$00,$00
.2481	20 25 51	jsr $5125		jsr	FloatCompare
.2484	20 05 51	jsr $5105		jsr	CompareLess
.2487	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>248a	00 00 00 00				.dword	$00000000
>248e	00 00					.byte	$00,$00
.2490	20 25 51	jsr $5125		jsr	FloatCompare
.2493	20 ef 50	jsr $50ef		jsr	CompareEqual
.2496	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2499	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7682
>249c	02 1e 00 00				.dword	$00001e02
>24a0	00 00					.byte	$00,$00
.24a2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7682
>24a5	02 1e 00 00				.dword	$00001e02
>24a9	00 00					.byte	$00,$00
.24ab	20 25 51	jsr $5125		jsr	FloatCompare
.24ae	20 15 51	jsr $5115		jsr	CompareLessEqual
.24b1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>24b4	01 00 00 00				.dword	$00000001
>24b8	00 80					.byte	$00,$80
.24ba	20 25 51	jsr $5125		jsr	FloatCompare
.24bd	20 ef 50	jsr $50ef		jsr	CompareEqual
.24c0	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.24c3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -16.74447234
>24c6	f5 56 fa 42				.dword	$42fa56f5
>24ca	e6 80					.byte	$e6,$80
.24cc	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -25.82967522
>24cf	62 96 51 67				.dword	$67519662
>24d3	e6 80					.byte	$e6,$80
.24d5	20 64 50	jsr $5064		jsr	FloatAdd
.24d8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -42.57414757
>24db	ac f6 25 55				.dword	$5525f6ac
>24df	e7 80					.byte	$e7,$80
.24e1	20 25 51	jsr $5125		jsr	FloatCompare
.24e4	20 ef 50	jsr $50ef		jsr	CompareEqual
.24e7	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.24ea	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -16.74447234
>24ed	f5 56 fa 42				.dword	$42fa56f5
>24f1	e6 80					.byte	$e6,$80
.24f3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -25.82967522
>24f6	62 96 51 67				.dword	$67519662
>24fa	e6 80					.byte	$e6,$80
.24fc	20 5e 50	jsr $505e		jsr	FloatSubtract
.24ff	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 9.08520288
>2502	d9 7e ae 48				.dword	$48ae7ed9
>2506	e5 00					.byte	$e5,$00
.2508	20 25 51	jsr $5125		jsr	FloatCompare
.250b	20 ef 50	jsr $50ef		jsr	CompareEqual
.250e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2511	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -16.74447234
>2514	f5 56 fa 42				.dword	$42fa56f5
>2518	e6 80					.byte	$e6,$80
.251a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -25.82967522
>251d	62 96 51 67				.dword	$67519662
>2521	e6 80					.byte	$e6,$80
.2523	20 00 53	jsr $5300		jsr	FloatMultiply
.2526	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 432.50428239
>2529	2a 46 20 6c				.dword	$6c20462a
>252d	ea 00					.byte	$ea,$00
.252f	20 25 51	jsr $5125		jsr	FloatCompare
.2532	20 ef 50	jsr $50ef		jsr	CompareEqual
.2535	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2538	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -16.74447234
>253b	f5 56 fa 42				.dword	$42fa56f5
>253f	e6 80					.byte	$e6,$80
.2541	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -25.82967522
>2544	62 96 51 67				.dword	$67519662
>2548	e6 80					.byte	$e6,$80
.254a	20 89 51	jsr $5189		jsr	FloatDivide
.254d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0.64826492
>2550	4b 58 fa 52				.dword	$52fa584b
>2554	e1 00					.byte	$e1,$00
.2556	20 25 51	jsr $5125		jsr	FloatCompare
.2559	20 ef 50	jsr $50ef		jsr	CompareEqual
.255c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.255f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -80.79646878
>2562	61 e5 cb 50				.dword	$50cbe561
>2566	e8 80					.byte	$e8,$80
.2568	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -80.79646878
>256b	61 e5 cb 50				.dword	$50cbe561
>256f	e8 80					.byte	$e8,$80
.2571	20 25 51	jsr $5125		jsr	FloatCompare
.2574	20 0d 51	jsr $510d		jsr	CompareGreater
.2577	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>257a	00 00 00 00				.dword	$00000000
>257e	00 00					.byte	$00,$00
.2580	20 25 51	jsr $5125		jsr	FloatCompare
.2583	20 ef 50	jsr $50ef		jsr	CompareEqual
.2586	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2589	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -80.79646878
>258c	61 e5 cb 50				.dword	$50cbe561
>2590	e8 80					.byte	$e8,$80
.2592	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -80.79646878
>2595	61 e5 cb 50				.dword	$50cbe561
>2599	e8 80					.byte	$e8,$80
.259b	20 25 51	jsr $5125		jsr	FloatCompare
.259e	20 1d 51	jsr $511d		jsr	CompareGreaterEqual
.25a1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>25a4	01 00 00 00				.dword	$00000001
>25a8	00 80					.byte	$00,$80
.25aa	20 25 51	jsr $5125		jsr	FloatCompare
.25ad	20 ef 50	jsr $50ef		jsr	CompareEqual
.25b0	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.25b3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -80.79646878
>25b6	61 e5 cb 50				.dword	$50cbe561
>25ba	e8 80					.byte	$e8,$80
.25bc	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -80.79646878
>25bf	61 e5 cb 50				.dword	$50cbe561
>25c3	e8 80					.byte	$e8,$80
.25c5	20 25 51	jsr $5125		jsr	FloatCompare
.25c8	20 05 51	jsr $5105		jsr	CompareLess
.25cb	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>25ce	00 00 00 00				.dword	$00000000
>25d2	00 00					.byte	$00,$00
.25d4	20 25 51	jsr $5125		jsr	FloatCompare
.25d7	20 ef 50	jsr $50ef		jsr	CompareEqual
.25da	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.25dd	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -80.79646878
>25e0	61 e5 cb 50				.dword	$50cbe561
>25e4	e8 80					.byte	$e8,$80
.25e6	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -80.79646878
>25e9	61 e5 cb 50				.dword	$50cbe561
>25ed	e8 80					.byte	$e8,$80
.25ef	20 25 51	jsr $5125		jsr	FloatCompare
.25f2	20 15 51	jsr $5115		jsr	CompareLessEqual
.25f5	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>25f8	01 00 00 00				.dword	$00000001
>25fc	00 80					.byte	$00,$80
.25fe	20 25 51	jsr $5125		jsr	FloatCompare
.2601	20 ef 50	jsr $50ef		jsr	CompareEqual
.2604	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2607	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -80.79646878
>260a	61 e5 cb 50				.dword	$50cbe561
>260e	e8 80					.byte	$e8,$80
.2610	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -80.79646878
>2613	61 e5 cb 50				.dword	$50cbe561
>2617	e8 80					.byte	$e8,$80
.2619	20 25 51	jsr $5125		jsr	FloatCompare
.261c	20 ef 50	jsr $50ef		jsr	CompareEqual
.261f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>2622	01 00 00 00				.dword	$00000001
>2626	00 80					.byte	$00,$80
.2628	20 25 51	jsr $5125		jsr	FloatCompare
.262b	20 ef 50	jsr $50ef		jsr	CompareEqual
.262e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2631	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -80.79646878
>2634	61 e5 cb 50				.dword	$50cbe561
>2638	e8 80					.byte	$e8,$80
.263a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -80.79646878
>263d	61 e5 cb 50				.dword	$50cbe561
>2641	e8 80					.byte	$e8,$80
.2643	20 25 51	jsr $5125		jsr	FloatCompare
.2646	20 ff 50	jsr $50ff		jsr	CompareNotEqual
.2649	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>264c	00 00 00 00				.dword	$00000000
>2650	00 00					.byte	$00,$00
.2652	20 25 51	jsr $5125		jsr	FloatCompare
.2655	20 ef 50	jsr $50ef		jsr	CompareEqual
.2658	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.265b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -32208
>265e	d0 7d 00 00				.dword	$00007dd0
>2662	00 80					.byte	$00,$80
.2664	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -11738
>2667	da 2d 00 00				.dword	$00002dda
>266b	00 80					.byte	$00,$80
.266d	20 64 50	jsr $5064		jsr	FloatAdd
.2670	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -43946
>2673	aa ab 00 00				.dword	$0000abaa
>2677	00 80					.byte	$00,$80
.2679	20 25 51	jsr $5125		jsr	FloatCompare
.267c	20 ef 50	jsr $50ef		jsr	CompareEqual
.267f	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2682	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -32208
>2685	d0 7d 00 00				.dword	$00007dd0
>2689	00 80					.byte	$00,$80
.268b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -11738
>268e	da 2d 00 00				.dword	$00002dda
>2692	00 80					.byte	$00,$80
.2694	20 5e 50	jsr $505e		jsr	FloatSubtract
.2697	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -20470
>269a	f6 4f 00 00				.dword	$00004ff6
>269e	00 80					.byte	$00,$80
.26a0	20 25 51	jsr $5125		jsr	FloatCompare
.26a3	20 ef 50	jsr $50ef		jsr	CompareEqual
.26a6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.26a9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -32208
>26ac	d0 7d 00 00				.dword	$00007dd0
>26b0	00 80					.byte	$00,$80
.26b2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -11738
>26b5	da 2d 00 00				.dword	$00002dda
>26b9	00 80					.byte	$00,$80
.26bb	20 00 53	jsr $5300		jsr	FloatMultiply
.26be	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 378057504
>26c1	20 b3 88 16				.dword	$1688b320
>26c5	00 00					.byte	$00,$00
.26c7	20 25 51	jsr $5125		jsr	FloatCompare
.26ca	20 ef 50	jsr $50ef		jsr	CompareEqual
.26cd	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.26d0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -32208
>26d3	d0 7d 00 00				.dword	$00007dd0
>26d7	00 80					.byte	$00,$80
.26d9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -11738
>26dc	da 2d 00 00				.dword	$00002dda
>26e0	00 80					.byte	$00,$80
.26e2	20 89 51	jsr $5189		jsr	FloatDivide
.26e5	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 2.74390867
>26e8	8e 19 ce 57				.dword	$57ce198e
>26ec	e3 00					.byte	$e3,$00
.26ee	20 25 51	jsr $5125		jsr	FloatCompare
.26f1	20 ef 50	jsr $50ef		jsr	CompareEqual
.26f4	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.26f7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -11738
>26fa	da 2d 00 00				.dword	$00002dda
>26fe	00 80					.byte	$00,$80
.2700	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -11738
>2703	da 2d 00 00				.dword	$00002dda
>2707	00 80					.byte	$00,$80
.2709	20 25 51	jsr $5125		jsr	FloatCompare
.270c	20 ef 50	jsr $50ef		jsr	CompareEqual
.270f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>2712	01 00 00 00				.dword	$00000001
>2716	00 80					.byte	$00,$80
.2718	20 25 51	jsr $5125		jsr	FloatCompare
.271b	20 ef 50	jsr $50ef		jsr	CompareEqual
.271e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2721	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -11738
>2724	da 2d 00 00				.dword	$00002dda
>2728	00 80					.byte	$00,$80
.272a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -11738
>272d	da 2d 00 00				.dword	$00002dda
>2731	00 80					.byte	$00,$80
.2733	20 25 51	jsr $5125		jsr	FloatCompare
.2736	20 ff 50	jsr $50ff		jsr	CompareNotEqual
.2739	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>273c	00 00 00 00				.dword	$00000000
>2740	00 00					.byte	$00,$00
.2742	20 25 51	jsr $5125		jsr	FloatCompare
.2745	20 ef 50	jsr $50ef		jsr	CompareEqual
.2748	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.274b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -11738
>274e	da 2d 00 00				.dword	$00002dda
>2752	00 80					.byte	$00,$80
.2754	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -11738
>2757	da 2d 00 00				.dword	$00002dda
>275b	00 80					.byte	$00,$80
.275d	20 25 51	jsr $5125		jsr	FloatCompare
.2760	20 0d 51	jsr $510d		jsr	CompareGreater
.2763	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>2766	00 00 00 00				.dword	$00000000
>276a	00 00					.byte	$00,$00
.276c	20 25 51	jsr $5125		jsr	FloatCompare
.276f	20 ef 50	jsr $50ef		jsr	CompareEqual
.2772	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2775	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -11738
>2778	da 2d 00 00				.dword	$00002dda
>277c	00 80					.byte	$00,$80
.277e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -11738
>2781	da 2d 00 00				.dword	$00002dda
>2785	00 80					.byte	$00,$80
.2787	20 25 51	jsr $5125		jsr	FloatCompare
.278a	20 1d 51	jsr $511d		jsr	CompareGreaterEqual
.278d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>2790	01 00 00 00				.dword	$00000001
>2794	00 80					.byte	$00,$80
.2796	20 25 51	jsr $5125		jsr	FloatCompare
.2799	20 ef 50	jsr $50ef		jsr	CompareEqual
.279c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.279f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -11738
>27a2	da 2d 00 00				.dword	$00002dda
>27a6	00 80					.byte	$00,$80
.27a8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -11738
>27ab	da 2d 00 00				.dword	$00002dda
>27af	00 80					.byte	$00,$80
.27b1	20 25 51	jsr $5125		jsr	FloatCompare
.27b4	20 05 51	jsr $5105		jsr	CompareLess
.27b7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>27ba	00 00 00 00				.dword	$00000000
>27be	00 00					.byte	$00,$00
.27c0	20 25 51	jsr $5125		jsr	FloatCompare
.27c3	20 ef 50	jsr $50ef		jsr	CompareEqual
.27c6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.27c9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -11738
>27cc	da 2d 00 00				.dword	$00002dda
>27d0	00 80					.byte	$00,$80
.27d2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -11738
>27d5	da 2d 00 00				.dword	$00002dda
>27d9	00 80					.byte	$00,$80
.27db	20 25 51	jsr $5125		jsr	FloatCompare
.27de	20 15 51	jsr $5115		jsr	CompareLessEqual
.27e1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>27e4	01 00 00 00				.dword	$00000001
>27e8	00 80					.byte	$00,$80
.27ea	20 25 51	jsr $5125		jsr	FloatCompare
.27ed	20 ef 50	jsr $50ef		jsr	CompareEqual
.27f0	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.27f3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 39.6196647
>27f6	b1 44 3d 4f				.dword	$4f3d44b1
>27fa	e7 00					.byte	$e7,$00
.27fc	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 41.63796874
>27ff	d7 a3 46 53				.dword	$5346a3d7
>2803	e7 00					.byte	$e7,$00
.2805	20 64 50	jsr $5064		jsr	FloatAdd
.2808	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 81.25763343
>280b	44 f4 41 51				.dword	$5141f444
>280f	e8 00					.byte	$e8,$00
.2811	20 25 51	jsr $5125		jsr	FloatCompare
.2814	20 ef 50	jsr $50ef		jsr	CompareEqual
.2817	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.281a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 39.6196647
>281d	b1 44 3d 4f				.dword	$4f3d44b1
>2821	e7 00					.byte	$e7,$00
.2823	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 41.63796874
>2826	d7 a3 46 53				.dword	$5346a3d7
>282a	e7 00					.byte	$e7,$00
.282c	20 5e 50	jsr $505e		jsr	FloatSubtract
.282f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -2.01830404
>2832	5b f2 95 40				.dword	$4095f25b
>2836	e3 80					.byte	$e3,$80
.2838	20 25 51	jsr $5125		jsr	FloatCompare
.283b	20 ef 50	jsr $50ef		jsr	CompareEqual
.283e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2841	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 39.6196647
>2844	b1 44 3d 4f				.dword	$4f3d44b1
>2848	e7 00					.byte	$e7,$00
.284a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 41.63796874
>284d	d7 a3 46 53				.dword	$5346a3d7
>2851	e7 00					.byte	$e7,$00
.2853	20 00 53	jsr $5300		jsr	FloatMultiply
.2856	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 1649.68235999
>2859	f2 ea 1a 67				.dword	$671aeaf2
>285d	ec 00					.byte	$ec,$00
.285f	20 25 51	jsr $5125		jsr	FloatCompare
.2862	20 ef 50	jsr $50ef		jsr	CompareEqual
.2865	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2868	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 39.6196647
>286b	b1 44 3d 4f				.dword	$4f3d44b1
>286f	e7 00					.byte	$e7,$00
.2871	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 41.63796874
>2874	d7 a3 46 53				.dword	$5346a3d7
>2878	e7 00					.byte	$e7,$00
.287a	20 89 51	jsr $5189		jsr	FloatDivide
.287d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0.95152732
>2880	b0 a5 cb 79				.dword	$79cba5b0
>2884	e1 00					.byte	$e1,$00
.2886	20 25 51	jsr $5125		jsr	FloatCompare
.2889	20 ef 50	jsr $50ef		jsr	CompareEqual
.288c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.288f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -2.49032154
>2892	cc b6 b0 4f				.dword	$4fb0b6cc
>2896	e3 80					.byte	$e3,$80
.2898	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -2.49032154
>289b	cc b6 b0 4f				.dword	$4fb0b6cc
>289f	e3 80					.byte	$e3,$80
.28a1	20 25 51	jsr $5125		jsr	FloatCompare
.28a4	20 0d 51	jsr $510d		jsr	CompareGreater
.28a7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>28aa	00 00 00 00				.dword	$00000000
>28ae	00 00					.byte	$00,$00
.28b0	20 25 51	jsr $5125		jsr	FloatCompare
.28b3	20 ef 50	jsr $50ef		jsr	CompareEqual
.28b6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.28b9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -2.49032154
>28bc	cc b6 b0 4f				.dword	$4fb0b6cc
>28c0	e3 80					.byte	$e3,$80
.28c2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -2.49032154
>28c5	cc b6 b0 4f				.dword	$4fb0b6cc
>28c9	e3 80					.byte	$e3,$80
.28cb	20 25 51	jsr $5125		jsr	FloatCompare
.28ce	20 1d 51	jsr $511d		jsr	CompareGreaterEqual
.28d1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>28d4	01 00 00 00				.dword	$00000001
>28d8	00 80					.byte	$00,$80
.28da	20 25 51	jsr $5125		jsr	FloatCompare
.28dd	20 ef 50	jsr $50ef		jsr	CompareEqual
.28e0	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.28e3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -2.49032154
>28e6	cc b6 b0 4f				.dword	$4fb0b6cc
>28ea	e3 80					.byte	$e3,$80
.28ec	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -2.49032154
>28ef	cc b6 b0 4f				.dword	$4fb0b6cc
>28f3	e3 80					.byte	$e3,$80
.28f5	20 25 51	jsr $5125		jsr	FloatCompare
.28f8	20 05 51	jsr $5105		jsr	CompareLess
.28fb	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>28fe	00 00 00 00				.dword	$00000000
>2902	00 00					.byte	$00,$00
.2904	20 25 51	jsr $5125		jsr	FloatCompare
.2907	20 ef 50	jsr $50ef		jsr	CompareEqual
.290a	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.290d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -2.49032154
>2910	cc b6 b0 4f				.dword	$4fb0b6cc
>2914	e3 80					.byte	$e3,$80
.2916	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -2.49032154
>2919	cc b6 b0 4f				.dword	$4fb0b6cc
>291d	e3 80					.byte	$e3,$80
.291f	20 25 51	jsr $5125		jsr	FloatCompare
.2922	20 15 51	jsr $5115		jsr	CompareLessEqual
.2925	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>2928	01 00 00 00				.dword	$00000001
>292c	00 80					.byte	$00,$80
.292e	20 25 51	jsr $5125		jsr	FloatCompare
.2931	20 ef 50	jsr $50ef		jsr	CompareEqual
.2934	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2937	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -2.49032154
>293a	cc b6 b0 4f				.dword	$4fb0b6cc
>293e	e3 80					.byte	$e3,$80
.2940	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -2.49032154
>2943	cc b6 b0 4f				.dword	$4fb0b6cc
>2947	e3 80					.byte	$e3,$80
.2949	20 25 51	jsr $5125		jsr	FloatCompare
.294c	20 ef 50	jsr $50ef		jsr	CompareEqual
.294f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>2952	01 00 00 00				.dword	$00000001
>2956	00 80					.byte	$00,$80
.2958	20 25 51	jsr $5125		jsr	FloatCompare
.295b	20 ef 50	jsr $50ef		jsr	CompareEqual
.295e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2961	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -2.49032154
>2964	cc b6 b0 4f				.dword	$4fb0b6cc
>2968	e3 80					.byte	$e3,$80
.296a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -2.49032154
>296d	cc b6 b0 4f				.dword	$4fb0b6cc
>2971	e3 80					.byte	$e3,$80
.2973	20 25 51	jsr $5125		jsr	FloatCompare
.2976	20 ff 50	jsr $50ff		jsr	CompareNotEqual
.2979	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>297c	00 00 00 00				.dword	$00000000
>2980	00 00					.byte	$00,$00
.2982	20 25 51	jsr $5125		jsr	FloatCompare
.2985	20 ef 50	jsr $50ef		jsr	CompareEqual
.2988	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.298b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -19012
>298e	44 4a 00 00				.dword	$00004a44
>2992	00 80					.byte	$00,$80
.2994	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -27045
>2997	a5 69 00 00				.dword	$000069a5
>299b	00 80					.byte	$00,$80
.299d	20 64 50	jsr $5064		jsr	FloatAdd
.29a0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -46057
>29a3	e9 b3 00 00				.dword	$0000b3e9
>29a7	00 80					.byte	$00,$80
.29a9	20 25 51	jsr $5125		jsr	FloatCompare
.29ac	20 ef 50	jsr $50ef		jsr	CompareEqual
.29af	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.29b2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -19012
>29b5	44 4a 00 00				.dword	$00004a44
>29b9	00 80					.byte	$00,$80
.29bb	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -27045
>29be	a5 69 00 00				.dword	$000069a5
>29c2	00 80					.byte	$00,$80
.29c4	20 5e 50	jsr $505e		jsr	FloatSubtract
.29c7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 8033
>29ca	61 1f 00 00				.dword	$00001f61
>29ce	00 00					.byte	$00,$00
.29d0	20 25 51	jsr $5125		jsr	FloatCompare
.29d3	20 ef 50	jsr $50ef		jsr	CompareEqual
.29d6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.29d9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -19012
>29dc	44 4a 00 00				.dword	$00004a44
>29e0	00 80					.byte	$00,$80
.29e2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -27045
>29e5	a5 69 00 00				.dword	$000069a5
>29e9	00 80					.byte	$00,$80
.29eb	20 00 53	jsr $5300		jsr	FloatMultiply
.29ee	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 514179540
>29f1	d4 c1 a5 1e				.dword	$1ea5c1d4
>29f5	00 00					.byte	$00,$00
.29f7	20 25 51	jsr $5125		jsr	FloatCompare
.29fa	20 ef 50	jsr $50ef		jsr	CompareEqual
.29fd	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2a00	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -19012
>2a03	44 4a 00 00				.dword	$00004a44
>2a07	00 80					.byte	$00,$80
.2a09	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -27045
>2a0c	a5 69 00 00				.dword	$000069a5
>2a10	00 80					.byte	$00,$80
.2a12	20 89 51	jsr $5189		jsr	FloatDivide
.2a15	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0.70297652
>2a18	76 22 fb 59				.dword	$59fb2276
>2a1c	e1 00					.byte	$e1,$00
.2a1e	20 25 51	jsr $5125		jsr	FloatCompare
.2a21	20 ef 50	jsr $50ef		jsr	CompareEqual
.2a24	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2a27	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -27045
>2a2a	a5 69 00 00				.dword	$000069a5
>2a2e	00 80					.byte	$00,$80
.2a30	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -27045
>2a33	a5 69 00 00				.dword	$000069a5
>2a37	00 80					.byte	$00,$80
.2a39	20 25 51	jsr $5125		jsr	FloatCompare
.2a3c	20 ef 50	jsr $50ef		jsr	CompareEqual
.2a3f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>2a42	01 00 00 00				.dword	$00000001
>2a46	00 80					.byte	$00,$80
.2a48	20 25 51	jsr $5125		jsr	FloatCompare
.2a4b	20 ef 50	jsr $50ef		jsr	CompareEqual
.2a4e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2a51	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -27045
>2a54	a5 69 00 00				.dword	$000069a5
>2a58	00 80					.byte	$00,$80
.2a5a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -27045
>2a5d	a5 69 00 00				.dword	$000069a5
>2a61	00 80					.byte	$00,$80
.2a63	20 25 51	jsr $5125		jsr	FloatCompare
.2a66	20 ff 50	jsr $50ff		jsr	CompareNotEqual
.2a69	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>2a6c	00 00 00 00				.dword	$00000000
>2a70	00 00					.byte	$00,$00
.2a72	20 25 51	jsr $5125		jsr	FloatCompare
.2a75	20 ef 50	jsr $50ef		jsr	CompareEqual
.2a78	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2a7b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -27045
>2a7e	a5 69 00 00				.dword	$000069a5
>2a82	00 80					.byte	$00,$80
.2a84	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -27045
>2a87	a5 69 00 00				.dword	$000069a5
>2a8b	00 80					.byte	$00,$80
.2a8d	20 25 51	jsr $5125		jsr	FloatCompare
.2a90	20 0d 51	jsr $510d		jsr	CompareGreater
.2a93	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>2a96	00 00 00 00				.dword	$00000000
>2a9a	00 00					.byte	$00,$00
.2a9c	20 25 51	jsr $5125		jsr	FloatCompare
.2a9f	20 ef 50	jsr $50ef		jsr	CompareEqual
.2aa2	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2aa5	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -27045
>2aa8	a5 69 00 00				.dword	$000069a5
>2aac	00 80					.byte	$00,$80
.2aae	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -27045
>2ab1	a5 69 00 00				.dword	$000069a5
>2ab5	00 80					.byte	$00,$80
.2ab7	20 25 51	jsr $5125		jsr	FloatCompare
.2aba	20 1d 51	jsr $511d		jsr	CompareGreaterEqual
.2abd	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>2ac0	01 00 00 00				.dword	$00000001
>2ac4	00 80					.byte	$00,$80
.2ac6	20 25 51	jsr $5125		jsr	FloatCompare
.2ac9	20 ef 50	jsr $50ef		jsr	CompareEqual
.2acc	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2acf	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -27045
>2ad2	a5 69 00 00				.dword	$000069a5
>2ad6	00 80					.byte	$00,$80
.2ad8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -27045
>2adb	a5 69 00 00				.dword	$000069a5
>2adf	00 80					.byte	$00,$80
.2ae1	20 25 51	jsr $5125		jsr	FloatCompare
.2ae4	20 05 51	jsr $5105		jsr	CompareLess
.2ae7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>2aea	00 00 00 00				.dword	$00000000
>2aee	00 00					.byte	$00,$00
.2af0	20 25 51	jsr $5125		jsr	FloatCompare
.2af3	20 ef 50	jsr $50ef		jsr	CompareEqual
.2af6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2af9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -27045
>2afc	a5 69 00 00				.dword	$000069a5
>2b00	00 80					.byte	$00,$80
.2b02	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -27045
>2b05	a5 69 00 00				.dword	$000069a5
>2b09	00 80					.byte	$00,$80
.2b0b	20 25 51	jsr $5125		jsr	FloatCompare
.2b0e	20 15 51	jsr $5115		jsr	CompareLessEqual
.2b11	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>2b14	01 00 00 00				.dword	$00000001
>2b18	00 80					.byte	$00,$80
.2b1a	20 25 51	jsr $5125		jsr	FloatCompare
.2b1d	20 ef 50	jsr $50ef		jsr	CompareEqual
.2b20	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2b23	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -57.32299344
>2b26	65 5f a5 72				.dword	$72a55f65
>2b2a	e7 80					.byte	$e7,$80
.2b2c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 80.67935531
>2b2f	3b ea ad 50				.dword	$50adea3b
>2b33	e8 00					.byte	$e8,$00
.2b35	20 64 50	jsr $5064		jsr	FloatAdd
.2b38	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 23.35636187
>2b3b	20 ea 6c 5d				.dword	$5d6cea20
>2b3f	e6 00					.byte	$e6,$00
.2b41	20 25 51	jsr $5125		jsr	FloatCompare
.2b44	20 ef 50	jsr $50ef		jsr	CompareEqual
.2b47	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2b4a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -57.32299344
>2b4d	65 5f a5 72				.dword	$72a55f65
>2b51	e7 80					.byte	$e7,$80
.2b53	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 80.67935531
>2b56	3b ea ad 50				.dword	$50adea3b
>2b5a	e8 00					.byte	$e8,$00
.2b5c	20 5e 50	jsr $505e		jsr	FloatSubtract
.2b5f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -138.00234875
>2b62	f7 4c 00 45				.dword	$45004cf7
>2b66	e9 80					.byte	$e9,$80
.2b68	20 25 51	jsr $5125		jsr	FloatCompare
.2b6b	20 ef 50	jsr $50ef		jsr	CompareEqual
.2b6e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2b71	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -57.32299344
>2b74	65 5f a5 72				.dword	$72a55f65
>2b78	e7 80					.byte	$e7,$80
.2b7a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 80.67935531
>2b7d	3b ea ad 50				.dword	$50adea3b
>2b81	e8 00					.byte	$e8,$00
.2b83	20 00 53	jsr $5300		jsr	FloatMultiply
.2b86	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -4624.7821551
>2b89	ed 20 43 48				.dword	$484320ed
>2b8d	ee 80					.byte	$ee,$80
.2b8f	20 25 51	jsr $5125		jsr	FloatCompare
.2b92	20 ef 50	jsr $50ef		jsr	CompareEqual
.2b95	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2b98	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -57.32299344
>2b9b	65 5f a5 72				.dword	$72a55f65
>2b9f	e7 80					.byte	$e7,$80
.2ba1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 80.67935531
>2ba4	3b ea ad 50				.dword	$50adea3b
>2ba8	e8 00					.byte	$e8,$00
.2baa	20 89 51	jsr $5189		jsr	FloatDivide
.2bad	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -0.71050386
>2bb0	5d ca f1 5a				.dword	$5af1ca5d
>2bb4	e1 80					.byte	$e1,$80
.2bb6	20 25 51	jsr $5125		jsr	FloatCompare
.2bb9	20 ef 50	jsr $50ef		jsr	CompareEqual
.2bbc	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2bbf	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -18.02656516
>2bc2	e6 33 1b 48				.dword	$481b33e6
>2bc6	e6 80					.byte	$e6,$80
.2bc8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -18.02656516
>2bcb	e6 33 1b 48				.dword	$481b33e6
>2bcf	e6 80					.byte	$e6,$80
.2bd1	20 25 51	jsr $5125		jsr	FloatCompare
.2bd4	20 0d 51	jsr $510d		jsr	CompareGreater
.2bd7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>2bda	00 00 00 00				.dword	$00000000
>2bde	00 00					.byte	$00,$00
.2be0	20 25 51	jsr $5125		jsr	FloatCompare
.2be3	20 ef 50	jsr $50ef		jsr	CompareEqual
.2be6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2be9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -18.02656516
>2bec	e6 33 1b 48				.dword	$481b33e6
>2bf0	e6 80					.byte	$e6,$80
.2bf2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -18.02656516
>2bf5	e6 33 1b 48				.dword	$481b33e6
>2bf9	e6 80					.byte	$e6,$80
.2bfb	20 25 51	jsr $5125		jsr	FloatCompare
.2bfe	20 1d 51	jsr $511d		jsr	CompareGreaterEqual
.2c01	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>2c04	01 00 00 00				.dword	$00000001
>2c08	00 80					.byte	$00,$80
.2c0a	20 25 51	jsr $5125		jsr	FloatCompare
.2c0d	20 ef 50	jsr $50ef		jsr	CompareEqual
.2c10	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2c13	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -18.02656516
>2c16	e6 33 1b 48				.dword	$481b33e6
>2c1a	e6 80					.byte	$e6,$80
.2c1c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -18.02656516
>2c1f	e6 33 1b 48				.dword	$481b33e6
>2c23	e6 80					.byte	$e6,$80
.2c25	20 25 51	jsr $5125		jsr	FloatCompare
.2c28	20 05 51	jsr $5105		jsr	CompareLess
.2c2b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>2c2e	00 00 00 00				.dword	$00000000
>2c32	00 00					.byte	$00,$00
.2c34	20 25 51	jsr $5125		jsr	FloatCompare
.2c37	20 ef 50	jsr $50ef		jsr	CompareEqual
.2c3a	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2c3d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -18.02656516
>2c40	e6 33 1b 48				.dword	$481b33e6
>2c44	e6 80					.byte	$e6,$80
.2c46	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -18.02656516
>2c49	e6 33 1b 48				.dword	$481b33e6
>2c4d	e6 80					.byte	$e6,$80
.2c4f	20 25 51	jsr $5125		jsr	FloatCompare
.2c52	20 15 51	jsr $5115		jsr	CompareLessEqual
.2c55	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>2c58	01 00 00 00				.dword	$00000001
>2c5c	00 80					.byte	$00,$80
.2c5e	20 25 51	jsr $5125		jsr	FloatCompare
.2c61	20 ef 50	jsr $50ef		jsr	CompareEqual
.2c64	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2c67	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -18.02656516
>2c6a	e6 33 1b 48				.dword	$481b33e6
>2c6e	e6 80					.byte	$e6,$80
.2c70	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -18.02656516
>2c73	e6 33 1b 48				.dword	$481b33e6
>2c77	e6 80					.byte	$e6,$80
.2c79	20 25 51	jsr $5125		jsr	FloatCompare
.2c7c	20 ef 50	jsr $50ef		jsr	CompareEqual
.2c7f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>2c82	01 00 00 00				.dword	$00000001
>2c86	00 80					.byte	$00,$80
.2c88	20 25 51	jsr $5125		jsr	FloatCompare
.2c8b	20 ef 50	jsr $50ef		jsr	CompareEqual
.2c8e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2c91	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -18.02656516
>2c94	e6 33 1b 48				.dword	$481b33e6
>2c98	e6 80					.byte	$e6,$80
.2c9a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -18.02656516
>2c9d	e6 33 1b 48				.dword	$481b33e6
>2ca1	e6 80					.byte	$e6,$80
.2ca3	20 25 51	jsr $5125		jsr	FloatCompare
.2ca6	20 ff 50	jsr $50ff		jsr	CompareNotEqual
.2ca9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>2cac	00 00 00 00				.dword	$00000000
>2cb0	00 00					.byte	$00,$00
.2cb2	20 25 51	jsr $5125		jsr	FloatCompare
.2cb5	20 ef 50	jsr $50ef		jsr	CompareEqual
.2cb8	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2cbb	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -14170
>2cbe	5a 37 00 00				.dword	$0000375a
>2cc2	00 80					.byte	$00,$80
.2cc4	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -28887
>2cc7	d7 70 00 00				.dword	$000070d7
>2ccb	00 80					.byte	$00,$80
.2ccd	20 64 50	jsr $5064		jsr	FloatAdd
.2cd0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -43057
>2cd3	31 a8 00 00				.dword	$0000a831
>2cd7	00 80					.byte	$00,$80
.2cd9	20 25 51	jsr $5125		jsr	FloatCompare
.2cdc	20 ef 50	jsr $50ef		jsr	CompareEqual
.2cdf	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2ce2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -14170
>2ce5	5a 37 00 00				.dword	$0000375a
>2ce9	00 80					.byte	$00,$80
.2ceb	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -28887
>2cee	d7 70 00 00				.dword	$000070d7
>2cf2	00 80					.byte	$00,$80
.2cf4	20 5e 50	jsr $505e		jsr	FloatSubtract
.2cf7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 14717
>2cfa	7d 39 00 00				.dword	$0000397d
>2cfe	00 00					.byte	$00,$00
.2d00	20 25 51	jsr $5125		jsr	FloatCompare
.2d03	20 ef 50	jsr $50ef		jsr	CompareEqual
.2d06	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2d09	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -14170
>2d0c	5a 37 00 00				.dword	$0000375a
>2d10	00 80					.byte	$00,$80
.2d12	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -28887
>2d15	d7 70 00 00				.dword	$000070d7
>2d19	00 80					.byte	$00,$80
.2d1b	20 00 53	jsr $5300		jsr	FloatMultiply
.2d1e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 409328790
>2d21	96 dc 65 18				.dword	$1865dc96
>2d25	00 00					.byte	$00,$00
.2d27	20 25 51	jsr $5125		jsr	FloatCompare
.2d2a	20 ef 50	jsr $50ef		jsr	CompareEqual
.2d2d	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2d30	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -14170
>2d33	5a 37 00 00				.dword	$0000375a
>2d37	00 80					.byte	$00,$80
.2d39	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -28887
>2d3c	d7 70 00 00				.dword	$000070d7
>2d40	00 80					.byte	$00,$80
.2d42	20 89 51	jsr $5189		jsr	FloatDivide
.2d45	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0.49053207
>2d48	7e 82 93 7d				.dword	$7d93827e
>2d4c	e0 00					.byte	$e0,$00
.2d4e	20 25 51	jsr $5125		jsr	FloatCompare
.2d51	20 ef 50	jsr $50ef		jsr	CompareEqual
.2d54	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2d57	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -28887
>2d5a	d7 70 00 00				.dword	$000070d7
>2d5e	00 80					.byte	$00,$80
.2d60	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -28887
>2d63	d7 70 00 00				.dword	$000070d7
>2d67	00 80					.byte	$00,$80
.2d69	20 25 51	jsr $5125		jsr	FloatCompare
.2d6c	20 ef 50	jsr $50ef		jsr	CompareEqual
.2d6f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>2d72	01 00 00 00				.dword	$00000001
>2d76	00 80					.byte	$00,$80
.2d78	20 25 51	jsr $5125		jsr	FloatCompare
.2d7b	20 ef 50	jsr $50ef		jsr	CompareEqual
.2d7e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2d81	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -28887
>2d84	d7 70 00 00				.dword	$000070d7
>2d88	00 80					.byte	$00,$80
.2d8a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -28887
>2d8d	d7 70 00 00				.dword	$000070d7
>2d91	00 80					.byte	$00,$80
.2d93	20 25 51	jsr $5125		jsr	FloatCompare
.2d96	20 ff 50	jsr $50ff		jsr	CompareNotEqual
.2d99	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>2d9c	00 00 00 00				.dword	$00000000
>2da0	00 00					.byte	$00,$00
.2da2	20 25 51	jsr $5125		jsr	FloatCompare
.2da5	20 ef 50	jsr $50ef		jsr	CompareEqual
.2da8	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2dab	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -28887
>2dae	d7 70 00 00				.dword	$000070d7
>2db2	00 80					.byte	$00,$80
.2db4	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -28887
>2db7	d7 70 00 00				.dword	$000070d7
>2dbb	00 80					.byte	$00,$80
.2dbd	20 25 51	jsr $5125		jsr	FloatCompare
.2dc0	20 0d 51	jsr $510d		jsr	CompareGreater
.2dc3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>2dc6	00 00 00 00				.dword	$00000000
>2dca	00 00					.byte	$00,$00
.2dcc	20 25 51	jsr $5125		jsr	FloatCompare
.2dcf	20 ef 50	jsr $50ef		jsr	CompareEqual
.2dd2	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2dd5	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -28887
>2dd8	d7 70 00 00				.dword	$000070d7
>2ddc	00 80					.byte	$00,$80
.2dde	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -28887
>2de1	d7 70 00 00				.dword	$000070d7
>2de5	00 80					.byte	$00,$80
.2de7	20 25 51	jsr $5125		jsr	FloatCompare
.2dea	20 1d 51	jsr $511d		jsr	CompareGreaterEqual
.2ded	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>2df0	01 00 00 00				.dword	$00000001
>2df4	00 80					.byte	$00,$80
.2df6	20 25 51	jsr $5125		jsr	FloatCompare
.2df9	20 ef 50	jsr $50ef		jsr	CompareEqual
.2dfc	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2dff	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -28887
>2e02	d7 70 00 00				.dword	$000070d7
>2e06	00 80					.byte	$00,$80
.2e08	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -28887
>2e0b	d7 70 00 00				.dword	$000070d7
>2e0f	00 80					.byte	$00,$80
.2e11	20 25 51	jsr $5125		jsr	FloatCompare
.2e14	20 05 51	jsr $5105		jsr	CompareLess
.2e17	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>2e1a	00 00 00 00				.dword	$00000000
>2e1e	00 00					.byte	$00,$00
.2e20	20 25 51	jsr $5125		jsr	FloatCompare
.2e23	20 ef 50	jsr $50ef		jsr	CompareEqual
.2e26	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2e29	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -28887
>2e2c	d7 70 00 00				.dword	$000070d7
>2e30	00 80					.byte	$00,$80
.2e32	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -28887
>2e35	d7 70 00 00				.dword	$000070d7
>2e39	00 80					.byte	$00,$80
.2e3b	20 25 51	jsr $5125		jsr	FloatCompare
.2e3e	20 15 51	jsr $5115		jsr	CompareLessEqual
.2e41	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>2e44	01 00 00 00				.dword	$00000001
>2e48	00 80					.byte	$00,$80
.2e4a	20 25 51	jsr $5125		jsr	FloatCompare
.2e4d	20 ef 50	jsr $50ef		jsr	CompareEqual
.2e50	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2e53	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 72.81833644
>2e56	7f 7e d1 48				.dword	$48d17e7f
>2e5a	e8 00					.byte	$e8,$00
.2e5c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 32.01166275
>2e5f	a9 f8 05 40				.dword	$4005f8a9
>2e63	e7 00					.byte	$e7,$00
.2e65	20 64 50	jsr $5064		jsr	FloatAdd
.2e68	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 104.82999919
>2e6b	d4 7a d4 68				.dword	$68d47ad4
>2e6f	e8 00					.byte	$e8,$00
.2e71	20 25 51	jsr $5125		jsr	FloatCompare
.2e74	20 ef 50	jsr $50ef		jsr	CompareEqual
.2e77	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2e7a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 72.81833644
>2e7d	7f 7e d1 48				.dword	$48d17e7f
>2e81	e8 00					.byte	$e8,$00
.2e83	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 32.01166275
>2e86	a9 f8 05 40				.dword	$4005f8a9
>2e8a	e7 00					.byte	$e7,$00
.2e8c	20 5e 50	jsr $505e		jsr	FloatSubtract
.2e8f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 40.80667369
>2e92	55 04 9d 51				.dword	$519d0455
>2e96	e7 00					.byte	$e7,$00
.2e98	20 25 51	jsr $5125		jsr	FloatCompare
.2e9b	20 ef 50	jsr $50ef		jsr	CompareEqual
.2e9e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2ea1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 72.81833644
>2ea4	7f 7e d1 48				.dword	$48d17e7f
>2ea8	e8 00					.byte	$e8,$00
.2eaa	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 32.01166275
>2ead	a9 f8 05 40				.dword	$4005f8a9
>2eb1	e7 00					.byte	$e7,$00
.2eb3	20 00 53	jsr $5300		jsr	FloatMultiply
.2eb6	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 2331.03602822
>2eb9	c9 49 d8 48				.dword	$48d849c9
>2ebd	ed 00					.byte	$ed,$00
.2ebf	20 25 51	jsr $5125		jsr	FloatCompare
.2ec2	20 ef 50	jsr $50ef		jsr	CompareEqual
.2ec5	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2ec8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 72.81833644
>2ecb	7f 7e d1 48				.dword	$48d17e7f
>2ecf	e8 00					.byte	$e8,$00
.2ed1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 32.01166275
>2ed4	a9 f8 05 40				.dword	$4005f8a9
>2ed8	e7 00					.byte	$e7,$00
.2eda	20 89 51	jsr $5189		jsr	FloatDivide
.2edd	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 2.27474396
>2ee0	d8 b3 ca 48				.dword	$48cab3d8
>2ee4	e3 00					.byte	$e3,$00
.2ee6	20 25 51	jsr $5125		jsr	FloatCompare
.2ee9	20 ef 50	jsr $50ef		jsr	CompareEqual
.2eec	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2eef	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 43.39564267
>2ef2	ad 91 ca 56				.dword	$56ca91ad
>2ef6	e7 00					.byte	$e7,$00
.2ef8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 43.39564267
>2efb	ad 91 ca 56				.dword	$56ca91ad
>2eff	e7 00					.byte	$e7,$00
.2f01	20 25 51	jsr $5125		jsr	FloatCompare
.2f04	20 0d 51	jsr $510d		jsr	CompareGreater
.2f07	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>2f0a	00 00 00 00				.dword	$00000000
>2f0e	00 00					.byte	$00,$00
.2f10	20 25 51	jsr $5125		jsr	FloatCompare
.2f13	20 ef 50	jsr $50ef		jsr	CompareEqual
.2f16	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2f19	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 43.39564267
>2f1c	ad 91 ca 56				.dword	$56ca91ad
>2f20	e7 00					.byte	$e7,$00
.2f22	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 43.39564267
>2f25	ad 91 ca 56				.dword	$56ca91ad
>2f29	e7 00					.byte	$e7,$00
.2f2b	20 25 51	jsr $5125		jsr	FloatCompare
.2f2e	20 1d 51	jsr $511d		jsr	CompareGreaterEqual
.2f31	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>2f34	01 00 00 00				.dword	$00000001
>2f38	00 80					.byte	$00,$80
.2f3a	20 25 51	jsr $5125		jsr	FloatCompare
.2f3d	20 ef 50	jsr $50ef		jsr	CompareEqual
.2f40	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2f43	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 43.39564267
>2f46	ad 91 ca 56				.dword	$56ca91ad
>2f4a	e7 00					.byte	$e7,$00
.2f4c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 43.39564267
>2f4f	ad 91 ca 56				.dword	$56ca91ad
>2f53	e7 00					.byte	$e7,$00
.2f55	20 25 51	jsr $5125		jsr	FloatCompare
.2f58	20 05 51	jsr $5105		jsr	CompareLess
.2f5b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>2f5e	00 00 00 00				.dword	$00000000
>2f62	00 00					.byte	$00,$00
.2f64	20 25 51	jsr $5125		jsr	FloatCompare
.2f67	20 ef 50	jsr $50ef		jsr	CompareEqual
.2f6a	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2f6d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 43.39564267
>2f70	ad 91 ca 56				.dword	$56ca91ad
>2f74	e7 00					.byte	$e7,$00
.2f76	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 43.39564267
>2f79	ad 91 ca 56				.dword	$56ca91ad
>2f7d	e7 00					.byte	$e7,$00
.2f7f	20 25 51	jsr $5125		jsr	FloatCompare
.2f82	20 15 51	jsr $5115		jsr	CompareLessEqual
.2f85	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>2f88	01 00 00 00				.dword	$00000001
>2f8c	00 80					.byte	$00,$80
.2f8e	20 25 51	jsr $5125		jsr	FloatCompare
.2f91	20 ef 50	jsr $50ef		jsr	CompareEqual
.2f94	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2f97	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 43.39564267
>2f9a	ad 91 ca 56				.dword	$56ca91ad
>2f9e	e7 00					.byte	$e7,$00
.2fa0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 43.39564267
>2fa3	ad 91 ca 56				.dword	$56ca91ad
>2fa7	e7 00					.byte	$e7,$00
.2fa9	20 25 51	jsr $5125		jsr	FloatCompare
.2fac	20 ef 50	jsr $50ef		jsr	CompareEqual
.2faf	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>2fb2	01 00 00 00				.dword	$00000001
>2fb6	00 80					.byte	$00,$80
.2fb8	20 25 51	jsr $5125		jsr	FloatCompare
.2fbb	20 ef 50	jsr $50ef		jsr	CompareEqual
.2fbe	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2fc1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 43.39564267
>2fc4	ad 91 ca 56				.dword	$56ca91ad
>2fc8	e7 00					.byte	$e7,$00
.2fca	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 43.39564267
>2fcd	ad 91 ca 56				.dword	$56ca91ad
>2fd1	e7 00					.byte	$e7,$00
.2fd3	20 25 51	jsr $5125		jsr	FloatCompare
.2fd6	20 ff 50	jsr $50ff		jsr	CompareNotEqual
.2fd9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>2fdc	00 00 00 00				.dword	$00000000
>2fe0	00 00					.byte	$00,$00
.2fe2	20 25 51	jsr $5125		jsr	FloatCompare
.2fe5	20 ef 50	jsr $50ef		jsr	CompareEqual
.2fe8	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.2feb	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 1701
>2fee	a5 06 00 00				.dword	$000006a5
>2ff2	00 00					.byte	$00,$00
.2ff4	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -5947
>2ff7	3b 17 00 00				.dword	$0000173b
>2ffb	00 80					.byte	$00,$80
.2ffd	20 64 50	jsr $5064		jsr	FloatAdd
.3000	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -4246
>3003	96 10 00 00				.dword	$00001096
>3007	00 80					.byte	$00,$80
.3009	20 25 51	jsr $5125		jsr	FloatCompare
.300c	20 ef 50	jsr $50ef		jsr	CompareEqual
.300f	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3012	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 1701
>3015	a5 06 00 00				.dword	$000006a5
>3019	00 00					.byte	$00,$00
.301b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -5947
>301e	3b 17 00 00				.dword	$0000173b
>3022	00 80					.byte	$00,$80
.3024	20 5e 50	jsr $505e		jsr	FloatSubtract
.3027	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7648
>302a	e0 1d 00 00				.dword	$00001de0
>302e	00 00					.byte	$00,$00
.3030	20 25 51	jsr $5125		jsr	FloatCompare
.3033	20 ef 50	jsr $50ef		jsr	CompareEqual
.3036	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3039	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 1701
>303c	a5 06 00 00				.dword	$000006a5
>3040	00 00					.byte	$00,$00
.3042	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -5947
>3045	3b 17 00 00				.dword	$0000173b
>3049	00 80					.byte	$00,$80
.304b	20 00 53	jsr $5300		jsr	FloatMultiply
.304e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -10115847
>3051	07 5b 9a 00				.dword	$009a5b07
>3055	00 80					.byte	$00,$80
.3057	20 25 51	jsr $5125		jsr	FloatCompare
.305a	20 ef 50	jsr $50ef		jsr	CompareEqual
.305d	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3060	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 1701
>3063	a5 06 00 00				.dword	$000006a5
>3067	00 00					.byte	$00,$00
.3069	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -5947
>306c	3b 17 00 00				.dword	$0000173b
>3070	00 80					.byte	$00,$80
.3072	20 89 51	jsr $5189		jsr	FloatDivide
.3075	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -0.28602657
>3078	8c 09 39 49				.dword	$4939098c
>307c	e0 80					.byte	$e0,$80
.307e	20 25 51	jsr $5125		jsr	FloatCompare
.3081	20 ef 50	jsr $50ef		jsr	CompareEqual
.3084	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3087	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -5947
>308a	3b 17 00 00				.dword	$0000173b
>308e	00 80					.byte	$00,$80
.3090	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -5947
>3093	3b 17 00 00				.dword	$0000173b
>3097	00 80					.byte	$00,$80
.3099	20 25 51	jsr $5125		jsr	FloatCompare
.309c	20 ef 50	jsr $50ef		jsr	CompareEqual
.309f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>30a2	01 00 00 00				.dword	$00000001
>30a6	00 80					.byte	$00,$80
.30a8	20 25 51	jsr $5125		jsr	FloatCompare
.30ab	20 ef 50	jsr $50ef		jsr	CompareEqual
.30ae	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.30b1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -5947
>30b4	3b 17 00 00				.dword	$0000173b
>30b8	00 80					.byte	$00,$80
.30ba	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -5947
>30bd	3b 17 00 00				.dword	$0000173b
>30c1	00 80					.byte	$00,$80
.30c3	20 25 51	jsr $5125		jsr	FloatCompare
.30c6	20 ff 50	jsr $50ff		jsr	CompareNotEqual
.30c9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>30cc	00 00 00 00				.dword	$00000000
>30d0	00 00					.byte	$00,$00
.30d2	20 25 51	jsr $5125		jsr	FloatCompare
.30d5	20 ef 50	jsr $50ef		jsr	CompareEqual
.30d8	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.30db	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -5947
>30de	3b 17 00 00				.dword	$0000173b
>30e2	00 80					.byte	$00,$80
.30e4	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -5947
>30e7	3b 17 00 00				.dword	$0000173b
>30eb	00 80					.byte	$00,$80
.30ed	20 25 51	jsr $5125		jsr	FloatCompare
.30f0	20 0d 51	jsr $510d		jsr	CompareGreater
.30f3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>30f6	00 00 00 00				.dword	$00000000
>30fa	00 00					.byte	$00,$00
.30fc	20 25 51	jsr $5125		jsr	FloatCompare
.30ff	20 ef 50	jsr $50ef		jsr	CompareEqual
.3102	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3105	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -5947
>3108	3b 17 00 00				.dword	$0000173b
>310c	00 80					.byte	$00,$80
.310e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -5947
>3111	3b 17 00 00				.dword	$0000173b
>3115	00 80					.byte	$00,$80
.3117	20 25 51	jsr $5125		jsr	FloatCompare
.311a	20 1d 51	jsr $511d		jsr	CompareGreaterEqual
.311d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>3120	01 00 00 00				.dword	$00000001
>3124	00 80					.byte	$00,$80
.3126	20 25 51	jsr $5125		jsr	FloatCompare
.3129	20 ef 50	jsr $50ef		jsr	CompareEqual
.312c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.312f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -5947
>3132	3b 17 00 00				.dword	$0000173b
>3136	00 80					.byte	$00,$80
.3138	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -5947
>313b	3b 17 00 00				.dword	$0000173b
>313f	00 80					.byte	$00,$80
.3141	20 25 51	jsr $5125		jsr	FloatCompare
.3144	20 05 51	jsr $5105		jsr	CompareLess
.3147	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>314a	00 00 00 00				.dword	$00000000
>314e	00 00					.byte	$00,$00
.3150	20 25 51	jsr $5125		jsr	FloatCompare
.3153	20 ef 50	jsr $50ef		jsr	CompareEqual
.3156	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3159	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -5947
>315c	3b 17 00 00				.dword	$0000173b
>3160	00 80					.byte	$00,$80
.3162	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -5947
>3165	3b 17 00 00				.dword	$0000173b
>3169	00 80					.byte	$00,$80
.316b	20 25 51	jsr $5125		jsr	FloatCompare
.316e	20 15 51	jsr $5115		jsr	CompareLessEqual
.3171	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>3174	01 00 00 00				.dword	$00000001
>3178	00 80					.byte	$00,$80
.317a	20 25 51	jsr $5125		jsr	FloatCompare
.317d	20 ef 50	jsr $50ef		jsr	CompareEqual
.3180	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3183	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 29.81841743
>3186	38 0f 46 77				.dword	$77460f38
>318a	e6 00					.byte	$e6,$00
.318c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -16.63497206
>318f	1e 36 8a 42				.dword	$428a361e
>3193	e6 80					.byte	$e6,$80
.3195	20 64 50	jsr $5064		jsr	FloatAdd
.3198	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 13.18344537
>319b	35 b2 77 69				.dword	$6977b235
>319f	e5 00					.byte	$e5,$00
.31a1	20 25 51	jsr $5125		jsr	FloatCompare
.31a4	20 ef 50	jsr $50ef		jsr	CompareEqual
.31a7	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.31aa	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 29.81841743
>31ad	38 0f 46 77				.dword	$77460f38
>31b1	e6 00					.byte	$e6,$00
.31b3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -16.63497206
>31b6	1e 36 8a 42				.dword	$428a361e
>31ba	e6 80					.byte	$e6,$80
.31bc	20 5e 50	jsr $505e		jsr	FloatSubtract
.31bf	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 46.45338949
>31c2	ab 22 e8 5c				.dword	$5ce822ab
>31c6	e7 00					.byte	$e7,$00
.31c8	20 25 51	jsr $5125		jsr	FloatCompare
.31cb	20 ef 50	jsr $50ef		jsr	CompareEqual
.31ce	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.31d1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 29.81841743
>31d4	38 0f 46 77				.dword	$77460f38
>31d8	e6 00					.byte	$e6,$00
.31da	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -16.63497206
>31dd	1e 36 8a 42				.dword	$428a361e
>31e1	e6 80					.byte	$e6,$80
.31e3	20 00 53	jsr $5300		jsr	FloatMultiply
.31e6	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -496.02854075
>31e9	9d d3 01 7c				.dword	$7c01d39d
>31ed	ea 80					.byte	$ea,$80
.31ef	20 25 51	jsr $5125		jsr	FloatCompare
.31f2	20 ef 50	jsr $50ef		jsr	CompareEqual
.31f5	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.31f8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 29.81841743
>31fb	38 0f 46 77				.dword	$77460f38
>31ff	e6 00					.byte	$e6,$00
.3201	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -16.63497206
>3204	1e 36 8a 42				.dword	$428a361e
>3208	e6 80					.byte	$e6,$80
.320a	20 89 51	jsr $5189		jsr	FloatDivide
.320d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1.79251383
>3210	ed 8b b8 72				.dword	$72b88bed
>3214	e2 80					.byte	$e2,$80
.3216	20 25 51	jsr $5125		jsr	FloatCompare
.3219	20 ef 50	jsr $50ef		jsr	CompareEqual
.321c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.321f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -59.4261764
>3222	cb 33 da 76				.dword	$76da33cb
>3226	e7 80					.byte	$e7,$80
.3228	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -59.4261764
>322b	cb 33 da 76				.dword	$76da33cb
>322f	e7 80					.byte	$e7,$80
.3231	20 25 51	jsr $5125		jsr	FloatCompare
.3234	20 0d 51	jsr $510d		jsr	CompareGreater
.3237	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>323a	00 00 00 00				.dword	$00000000
>323e	00 00					.byte	$00,$00
.3240	20 25 51	jsr $5125		jsr	FloatCompare
.3243	20 ef 50	jsr $50ef		jsr	CompareEqual
.3246	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3249	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -59.4261764
>324c	cb 33 da 76				.dword	$76da33cb
>3250	e7 80					.byte	$e7,$80
.3252	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -59.4261764
>3255	cb 33 da 76				.dword	$76da33cb
>3259	e7 80					.byte	$e7,$80
.325b	20 25 51	jsr $5125		jsr	FloatCompare
.325e	20 1d 51	jsr $511d		jsr	CompareGreaterEqual
.3261	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>3264	01 00 00 00				.dword	$00000001
>3268	00 80					.byte	$00,$80
.326a	20 25 51	jsr $5125		jsr	FloatCompare
.326d	20 ef 50	jsr $50ef		jsr	CompareEqual
.3270	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3273	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -59.4261764
>3276	cb 33 da 76				.dword	$76da33cb
>327a	e7 80					.byte	$e7,$80
.327c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -59.4261764
>327f	cb 33 da 76				.dword	$76da33cb
>3283	e7 80					.byte	$e7,$80
.3285	20 25 51	jsr $5125		jsr	FloatCompare
.3288	20 05 51	jsr $5105		jsr	CompareLess
.328b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>328e	00 00 00 00				.dword	$00000000
>3292	00 00					.byte	$00,$00
.3294	20 25 51	jsr $5125		jsr	FloatCompare
.3297	20 ef 50	jsr $50ef		jsr	CompareEqual
.329a	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.329d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -59.4261764
>32a0	cb 33 da 76				.dword	$76da33cb
>32a4	e7 80					.byte	$e7,$80
.32a6	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -59.4261764
>32a9	cb 33 da 76				.dword	$76da33cb
>32ad	e7 80					.byte	$e7,$80
.32af	20 25 51	jsr $5125		jsr	FloatCompare
.32b2	20 15 51	jsr $5115		jsr	CompareLessEqual
.32b5	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>32b8	01 00 00 00				.dword	$00000001
>32bc	00 80					.byte	$00,$80
.32be	20 25 51	jsr $5125		jsr	FloatCompare
.32c1	20 ef 50	jsr $50ef		jsr	CompareEqual
.32c4	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.32c7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -59.4261764
>32ca	cb 33 da 76				.dword	$76da33cb
>32ce	e7 80					.byte	$e7,$80
.32d0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -59.4261764
>32d3	cb 33 da 76				.dword	$76da33cb
>32d7	e7 80					.byte	$e7,$80
.32d9	20 25 51	jsr $5125		jsr	FloatCompare
.32dc	20 ef 50	jsr $50ef		jsr	CompareEqual
.32df	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>32e2	01 00 00 00				.dword	$00000001
>32e6	00 80					.byte	$00,$80
.32e8	20 25 51	jsr $5125		jsr	FloatCompare
.32eb	20 ef 50	jsr $50ef		jsr	CompareEqual
.32ee	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.32f1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -59.4261764
>32f4	cb 33 da 76				.dword	$76da33cb
>32f8	e7 80					.byte	$e7,$80
.32fa	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -59.4261764
>32fd	cb 33 da 76				.dword	$76da33cb
>3301	e7 80					.byte	$e7,$80
.3303	20 25 51	jsr $5125		jsr	FloatCompare
.3306	20 ff 50	jsr $50ff		jsr	CompareNotEqual
.3309	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>330c	00 00 00 00				.dword	$00000000
>3310	00 00					.byte	$00,$00
.3312	20 25 51	jsr $5125		jsr	FloatCompare
.3315	20 ef 50	jsr $50ef		jsr	CompareEqual
.3318	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.331b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -49628
>331e	dc c1 00 00				.dword	$0000c1dc
>3322	00 80					.byte	$00,$80
.3324	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -25663
>3327	3f 64 00 00				.dword	$0000643f
>332b	00 80					.byte	$00,$80
.332d	20 64 50	jsr $5064		jsr	FloatAdd
.3330	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -75291
>3333	1b 26 01 00				.dword	$0001261b
>3337	00 80					.byte	$00,$80
.3339	20 25 51	jsr $5125		jsr	FloatCompare
.333c	20 ef 50	jsr $50ef		jsr	CompareEqual
.333f	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3342	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -49628
>3345	dc c1 00 00				.dword	$0000c1dc
>3349	00 80					.byte	$00,$80
.334b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -25663
>334e	3f 64 00 00				.dword	$0000643f
>3352	00 80					.byte	$00,$80
.3354	20 5e 50	jsr $505e		jsr	FloatSubtract
.3357	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -23965
>335a	9d 5d 00 00				.dword	$00005d9d
>335e	00 80					.byte	$00,$80
.3360	20 25 51	jsr $5125		jsr	FloatCompare
.3363	20 ef 50	jsr $50ef		jsr	CompareEqual
.3366	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3369	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -49628
>336c	dc c1 00 00				.dword	$0000c1dc
>3370	00 80					.byte	$00,$80
.3372	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -25663
>3375	3f 64 00 00				.dword	$0000643f
>3379	00 80					.byte	$00,$80
.337b	20 00 53	jsr $5300		jsr	FloatMultiply
.337e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 1273603364
>3381	24 a5 e9 4b				.dword	$4be9a524
>3385	00 00					.byte	$00,$00
.3387	20 25 51	jsr $5125		jsr	FloatCompare
.338a	20 ef 50	jsr $50ef		jsr	CompareEqual
.338d	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3390	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -49628
>3393	dc c1 00 00				.dword	$0000c1dc
>3397	00 80					.byte	$00,$80
.3399	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -25663
>339c	3f 64 00 00				.dword	$0000643f
>33a0	00 80					.byte	$00,$80
.33a2	20 89 51	jsr $5189		jsr	FloatDivide
.33a5	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 1.9338347
>33a8	9e f2 c3 7b				.dword	$7bc3f29e
>33ac	e2 00					.byte	$e2,$00
.33ae	20 25 51	jsr $5125		jsr	FloatCompare
.33b1	20 ef 50	jsr $50ef		jsr	CompareEqual
.33b4	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.33b7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -25663
>33ba	3f 64 00 00				.dword	$0000643f
>33be	00 80					.byte	$00,$80
.33c0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -25663
>33c3	3f 64 00 00				.dword	$0000643f
>33c7	00 80					.byte	$00,$80
.33c9	20 25 51	jsr $5125		jsr	FloatCompare
.33cc	20 ef 50	jsr $50ef		jsr	CompareEqual
.33cf	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>33d2	01 00 00 00				.dword	$00000001
>33d6	00 80					.byte	$00,$80
.33d8	20 25 51	jsr $5125		jsr	FloatCompare
.33db	20 ef 50	jsr $50ef		jsr	CompareEqual
.33de	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.33e1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -25663
>33e4	3f 64 00 00				.dword	$0000643f
>33e8	00 80					.byte	$00,$80
.33ea	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -25663
>33ed	3f 64 00 00				.dword	$0000643f
>33f1	00 80					.byte	$00,$80
.33f3	20 25 51	jsr $5125		jsr	FloatCompare
.33f6	20 ff 50	jsr $50ff		jsr	CompareNotEqual
.33f9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>33fc	00 00 00 00				.dword	$00000000
>3400	00 00					.byte	$00,$00
.3402	20 25 51	jsr $5125		jsr	FloatCompare
.3405	20 ef 50	jsr $50ef		jsr	CompareEqual
.3408	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.340b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -25663
>340e	3f 64 00 00				.dword	$0000643f
>3412	00 80					.byte	$00,$80
.3414	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -25663
>3417	3f 64 00 00				.dword	$0000643f
>341b	00 80					.byte	$00,$80
.341d	20 25 51	jsr $5125		jsr	FloatCompare
.3420	20 0d 51	jsr $510d		jsr	CompareGreater
.3423	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>3426	00 00 00 00				.dword	$00000000
>342a	00 00					.byte	$00,$00
.342c	20 25 51	jsr $5125		jsr	FloatCompare
.342f	20 ef 50	jsr $50ef		jsr	CompareEqual
.3432	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3435	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -25663
>3438	3f 64 00 00				.dword	$0000643f
>343c	00 80					.byte	$00,$80
.343e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -25663
>3441	3f 64 00 00				.dword	$0000643f
>3445	00 80					.byte	$00,$80
.3447	20 25 51	jsr $5125		jsr	FloatCompare
.344a	20 1d 51	jsr $511d		jsr	CompareGreaterEqual
.344d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>3450	01 00 00 00				.dword	$00000001
>3454	00 80					.byte	$00,$80
.3456	20 25 51	jsr $5125		jsr	FloatCompare
.3459	20 ef 50	jsr $50ef		jsr	CompareEqual
.345c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.345f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -25663
>3462	3f 64 00 00				.dword	$0000643f
>3466	00 80					.byte	$00,$80
.3468	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -25663
>346b	3f 64 00 00				.dword	$0000643f
>346f	00 80					.byte	$00,$80
.3471	20 25 51	jsr $5125		jsr	FloatCompare
.3474	20 05 51	jsr $5105		jsr	CompareLess
.3477	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>347a	00 00 00 00				.dword	$00000000
>347e	00 00					.byte	$00,$00
.3480	20 25 51	jsr $5125		jsr	FloatCompare
.3483	20 ef 50	jsr $50ef		jsr	CompareEqual
.3486	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3489	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -25663
>348c	3f 64 00 00				.dword	$0000643f
>3490	00 80					.byte	$00,$80
.3492	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -25663
>3495	3f 64 00 00				.dword	$0000643f
>3499	00 80					.byte	$00,$80
.349b	20 25 51	jsr $5125		jsr	FloatCompare
.349e	20 15 51	jsr $5115		jsr	CompareLessEqual
.34a1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>34a4	01 00 00 00				.dword	$00000001
>34a8	00 80					.byte	$00,$80
.34aa	20 25 51	jsr $5125		jsr	FloatCompare
.34ad	20 ef 50	jsr $50ef		jsr	CompareEqual
.34b0	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.34b3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -32.49493804
>34b6	85 68 fd 40				.dword	$40fd6885
>34ba	e7 80					.byte	$e7,$80
.34bc	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -65.33506115
>34bf	91 c6 55 41				.dword	$4155c691
>34c3	e8 80					.byte	$e8,$80
.34c5	20 64 50	jsr $5064		jsr	FloatAdd
.34c8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -97.82999919
>34cb	d4 7a d4 61				.dword	$61d47ad4
>34cf	e8 80					.byte	$e8,$80
.34d1	20 25 51	jsr $5125		jsr	FloatCompare
.34d4	20 ef 50	jsr $50ef		jsr	CompareEqual
.34d7	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.34da	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -32.49493804
>34dd	85 68 fd 40				.dword	$40fd6885
>34e1	e7 80					.byte	$e7,$80
.34e3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -65.33506115
>34e6	91 c6 55 41				.dword	$4155c691
>34ea	e8 80					.byte	$e8,$80
.34ec	20 5e 50	jsr $505e		jsr	FloatSubtract
.34ef	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 32.84012311
>34f2	9e 24 ae 41				.dword	$41ae249e
>34f6	e7 00					.byte	$e7,$00
.34f8	20 25 51	jsr $5125		jsr	FloatCompare
.34fb	20 ef 50	jsr $50ef		jsr	CompareEqual
.34fe	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3501	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -32.49493804
>3504	85 68 fd 40				.dword	$40fd6885
>3508	e7 80					.byte	$e7,$80
.350a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -65.33506115
>350d	91 c6 55 41				.dword	$4155c691
>3511	e8 80					.byte	$e8,$80
.3513	20 00 53	jsr $5300		jsr	FloatMultiply
.3516	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 2123.05876397
>3519	59 78 58 42				.dword	$42587859
>351d	ed 00					.byte	$ed,$00
.351f	20 25 51	jsr $5125		jsr	FloatCompare
.3522	20 ef 50	jsr $50ef		jsr	CompareEqual
.3525	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3528	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -32.49493804
>352b	85 68 fd 40				.dword	$40fd6885
>352f	e7 80					.byte	$e7,$80
.3531	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -65.33506115
>3534	91 c6 55 41				.dword	$4155c691
>3538	e8 80					.byte	$e8,$80
.353a	20 89 51	jsr $5189		jsr	FloatDivide
.353d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0.49735835
>3540	78 e0 52 7f				.dword	$7f52e078
>3544	e0 00					.byte	$e0,$00
.3546	20 25 51	jsr $5125		jsr	FloatCompare
.3549	20 ef 50	jsr $50ef		jsr	CompareEqual
.354c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.354f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -24.25933425
>3552	eb 8e 09 61				.dword	$61098eeb
>3556	e6 80					.byte	$e6,$80
.3558	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -25.61618207
>355b	6f f8 76 66				.dword	$6676f86f
>355f	e6 80					.byte	$e6,$80
.3561	20 25 51	jsr $5125		jsr	FloatCompare
.3564	20 0d 51	jsr $510d		jsr	CompareGreater
.3567	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>356a	01 00 00 00				.dword	$00000001
>356e	00 80					.byte	$00,$80
.3570	20 25 51	jsr $5125		jsr	FloatCompare
.3573	20 ef 50	jsr $50ef		jsr	CompareEqual
.3576	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3579	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -24.25933425
>357c	eb 8e 09 61				.dword	$61098eeb
>3580	e6 80					.byte	$e6,$80
.3582	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -25.61618207
>3585	6f f8 76 66				.dword	$6676f86f
>3589	e6 80					.byte	$e6,$80
.358b	20 25 51	jsr $5125		jsr	FloatCompare
.358e	20 1d 51	jsr $511d		jsr	CompareGreaterEqual
.3591	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>3594	01 00 00 00				.dword	$00000001
>3598	00 80					.byte	$00,$80
.359a	20 25 51	jsr $5125		jsr	FloatCompare
.359d	20 ef 50	jsr $50ef		jsr	CompareEqual
.35a0	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.35a3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -24.25933425
>35a6	eb 8e 09 61				.dword	$61098eeb
>35aa	e6 80					.byte	$e6,$80
.35ac	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -25.61618207
>35af	6f f8 76 66				.dword	$6676f86f
>35b3	e6 80					.byte	$e6,$80
.35b5	20 25 51	jsr $5125		jsr	FloatCompare
.35b8	20 05 51	jsr $5105		jsr	CompareLess
.35bb	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>35be	00 00 00 00				.dword	$00000000
>35c2	00 00					.byte	$00,$00
.35c4	20 25 51	jsr $5125		jsr	FloatCompare
.35c7	20 ef 50	jsr $50ef		jsr	CompareEqual
.35ca	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.35cd	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -24.25933425
>35d0	eb 8e 09 61				.dword	$61098eeb
>35d4	e6 80					.byte	$e6,$80
.35d6	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -25.61618207
>35d9	6f f8 76 66				.dword	$6676f86f
>35dd	e6 80					.byte	$e6,$80
.35df	20 25 51	jsr $5125		jsr	FloatCompare
.35e2	20 15 51	jsr $5115		jsr	CompareLessEqual
.35e5	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>35e8	00 00 00 00				.dword	$00000000
>35ec	00 00					.byte	$00,$00
.35ee	20 25 51	jsr $5125		jsr	FloatCompare
.35f1	20 ef 50	jsr $50ef		jsr	CompareEqual
.35f4	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.35f7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -24.25933425
>35fa	eb 8e 09 61				.dword	$61098eeb
>35fe	e6 80					.byte	$e6,$80
.3600	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -25.61618207
>3603	6f f8 76 66				.dword	$6676f86f
>3607	e6 80					.byte	$e6,$80
.3609	20 25 51	jsr $5125		jsr	FloatCompare
.360c	20 ef 50	jsr $50ef		jsr	CompareEqual
.360f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>3612	00 00 00 00				.dword	$00000000
>3616	00 00					.byte	$00,$00
.3618	20 25 51	jsr $5125		jsr	FloatCompare
.361b	20 ef 50	jsr $50ef		jsr	CompareEqual
.361e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3621	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -24.25933425
>3624	eb 8e 09 61				.dword	$61098eeb
>3628	e6 80					.byte	$e6,$80
.362a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -25.61618207
>362d	6f f8 76 66				.dword	$6676f86f
>3631	e6 80					.byte	$e6,$80
.3633	20 25 51	jsr $5125		jsr	FloatCompare
.3636	20 ff 50	jsr $50ff		jsr	CompareNotEqual
.3639	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>363c	01 00 00 00				.dword	$00000001
>3640	00 80					.byte	$00,$80
.3642	20 25 51	jsr $5125		jsr	FloatCompare
.3645	20 ef 50	jsr $50ef		jsr	CompareEqual
.3648	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.364b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -34458
>364e	9a 86 00 00				.dword	$0000869a
>3652	00 80					.byte	$00,$80
.3654	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -11335
>3657	47 2c 00 00				.dword	$00002c47
>365b	00 80					.byte	$00,$80
.365d	20 64 50	jsr $5064		jsr	FloatAdd
.3660	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -45793
>3663	e1 b2 00 00				.dword	$0000b2e1
>3667	00 80					.byte	$00,$80
.3669	20 25 51	jsr $5125		jsr	FloatCompare
.366c	20 ef 50	jsr $50ef		jsr	CompareEqual
.366f	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3672	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -34458
>3675	9a 86 00 00				.dword	$0000869a
>3679	00 80					.byte	$00,$80
.367b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -11335
>367e	47 2c 00 00				.dword	$00002c47
>3682	00 80					.byte	$00,$80
.3684	20 5e 50	jsr $505e		jsr	FloatSubtract
.3687	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -23123
>368a	53 5a 00 00				.dword	$00005a53
>368e	00 80					.byte	$00,$80
.3690	20 25 51	jsr $5125		jsr	FloatCompare
.3693	20 ef 50	jsr $50ef		jsr	CompareEqual
.3696	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3699	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -34458
>369c	9a 86 00 00				.dword	$0000869a
>36a0	00 80					.byte	$00,$80
.36a2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -11335
>36a5	47 2c 00 00				.dword	$00002c47
>36a9	00 80					.byte	$00,$80
.36ab	20 00 53	jsr $5300		jsr	FloatMultiply
.36ae	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 390581430
>36b1	b6 cc 47 17				.dword	$1747ccb6
>36b5	00 00					.byte	$00,$00
.36b7	20 25 51	jsr $5125		jsr	FloatCompare
.36ba	20 ef 50	jsr $50ef		jsr	CompareEqual
.36bd	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.36c0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -34458
>36c3	9a 86 00 00				.dword	$0000869a
>36c7	00 80					.byte	$00,$80
.36c9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -11335
>36cc	47 2c 00 00				.dword	$00002c47
>36d0	00 80					.byte	$00,$80
.36d2	20 89 51	jsr $5189		jsr	FloatDivide
.36d5	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 3.03996471
>36d8	12 64 47 61				.dword	$61476412
>36dc	e3 00					.byte	$e3,$00
.36de	20 25 51	jsr $5125		jsr	FloatCompare
.36e1	20 ef 50	jsr $50ef		jsr	CompareEqual
.36e4	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.36e7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -11335
>36ea	47 2c 00 00				.dword	$00002c47
>36ee	00 80					.byte	$00,$80
.36f0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -11335
>36f3	47 2c 00 00				.dword	$00002c47
>36f7	00 80					.byte	$00,$80
.36f9	20 25 51	jsr $5125		jsr	FloatCompare
.36fc	20 ef 50	jsr $50ef		jsr	CompareEqual
.36ff	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>3702	01 00 00 00				.dword	$00000001
>3706	00 80					.byte	$00,$80
.3708	20 25 51	jsr $5125		jsr	FloatCompare
.370b	20 ef 50	jsr $50ef		jsr	CompareEqual
.370e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3711	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -11335
>3714	47 2c 00 00				.dword	$00002c47
>3718	00 80					.byte	$00,$80
.371a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -11335
>371d	47 2c 00 00				.dword	$00002c47
>3721	00 80					.byte	$00,$80
.3723	20 25 51	jsr $5125		jsr	FloatCompare
.3726	20 ff 50	jsr $50ff		jsr	CompareNotEqual
.3729	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>372c	00 00 00 00				.dword	$00000000
>3730	00 00					.byte	$00,$00
.3732	20 25 51	jsr $5125		jsr	FloatCompare
.3735	20 ef 50	jsr $50ef		jsr	CompareEqual
.3738	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.373b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -11335
>373e	47 2c 00 00				.dword	$00002c47
>3742	00 80					.byte	$00,$80
.3744	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -11335
>3747	47 2c 00 00				.dword	$00002c47
>374b	00 80					.byte	$00,$80
.374d	20 25 51	jsr $5125		jsr	FloatCompare
.3750	20 0d 51	jsr $510d		jsr	CompareGreater
.3753	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>3756	00 00 00 00				.dword	$00000000
>375a	00 00					.byte	$00,$00
.375c	20 25 51	jsr $5125		jsr	FloatCompare
.375f	20 ef 50	jsr $50ef		jsr	CompareEqual
.3762	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3765	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -11335
>3768	47 2c 00 00				.dword	$00002c47
>376c	00 80					.byte	$00,$80
.376e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -11335
>3771	47 2c 00 00				.dword	$00002c47
>3775	00 80					.byte	$00,$80
.3777	20 25 51	jsr $5125		jsr	FloatCompare
.377a	20 1d 51	jsr $511d		jsr	CompareGreaterEqual
.377d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>3780	01 00 00 00				.dword	$00000001
>3784	00 80					.byte	$00,$80
.3786	20 25 51	jsr $5125		jsr	FloatCompare
.3789	20 ef 50	jsr $50ef		jsr	CompareEqual
.378c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.378f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -11335
>3792	47 2c 00 00				.dword	$00002c47
>3796	00 80					.byte	$00,$80
.3798	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -11335
>379b	47 2c 00 00				.dword	$00002c47
>379f	00 80					.byte	$00,$80
.37a1	20 25 51	jsr $5125		jsr	FloatCompare
.37a4	20 05 51	jsr $5105		jsr	CompareLess
.37a7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>37aa	00 00 00 00				.dword	$00000000
>37ae	00 00					.byte	$00,$00
.37b0	20 25 51	jsr $5125		jsr	FloatCompare
.37b3	20 ef 50	jsr $50ef		jsr	CompareEqual
.37b6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.37b9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -11335
>37bc	47 2c 00 00				.dword	$00002c47
>37c0	00 80					.byte	$00,$80
.37c2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -11335
>37c5	47 2c 00 00				.dword	$00002c47
>37c9	00 80					.byte	$00,$80
.37cb	20 25 51	jsr $5125		jsr	FloatCompare
.37ce	20 15 51	jsr $5115		jsr	CompareLessEqual
.37d1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>37d4	01 00 00 00				.dword	$00000001
>37d8	00 80					.byte	$00,$80
.37da	20 25 51	jsr $5125		jsr	FloatCompare
.37dd	20 ef 50	jsr $50ef		jsr	CompareEqual
.37e0	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.37e3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -28.0681947
>37e6	d5 d4 45 70				.dword	$7045d4d5
>37ea	e6 80					.byte	$e6,$80
.37ec	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -42.97246295
>37ef	aa e6 f1 55				.dword	$55f1e6aa
>37f3	e7 80					.byte	$e7,$80
.37f5	20 64 50	jsr $5064		jsr	FloatAdd
.37f8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -71.04065765
>37fb	8a 68 0a 47				.dword	$470a688a
>37ff	e8 80					.byte	$e8,$80
.3801	20 25 51	jsr $5125		jsr	FloatCompare
.3804	20 ef 50	jsr $50ef		jsr	CompareEqual
.3807	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.380a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -28.0681947
>380d	d5 d4 45 70				.dword	$7045d4d5
>3811	e6 80					.byte	$e6,$80
.3813	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -42.97246295
>3816	aa e6 f1 55				.dword	$55f1e6aa
>381a	e7 80					.byte	$e7,$80
.381c	20 5e 50	jsr $505e		jsr	FloatSubtract
.381f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 14.90426824
>3822	fd f0 3b 77				.dword	$773bf0fd
>3826	e5 00					.byte	$e5,$00
.3828	20 25 51	jsr $5125		jsr	FloatCompare
.382b	20 ef 50	jsr $50ef		jsr	CompareEqual
.382e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3831	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -28.0681947
>3834	d5 d4 45 70				.dword	$7045d4d5
>3838	e6 80					.byte	$e6,$80
.383a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -42.97246295
>383d	aa e6 f1 55				.dword	$55f1e6aa
>3841	e7 80					.byte	$e7,$80
.3843	20 00 53	jsr $5300		jsr	FloatMultiply
.3846	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 1206.15945686
>3849	23 8d 62 4b				.dword	$4b628d23
>384d	ec 00					.byte	$ec,$00
.384f	20 25 51	jsr $5125		jsr	FloatCompare
.3852	20 ef 50	jsr $50ef		jsr	CompareEqual
.3855	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3858	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -28.0681947
>385b	d5 d4 45 70				.dword	$7045d4d5
>385f	e6 80					.byte	$e6,$80
.3861	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -42.97246295
>3864	aa e6 f1 55				.dword	$55f1e6aa
>3868	e7 80					.byte	$e7,$80
.386a	20 89 51	jsr $5189		jsr	FloatDivide
.386d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0.653167
>3870	ec f9 9a 53				.dword	$539af9ec
>3874	e1 00					.byte	$e1,$00
.3876	20 25 51	jsr $5125		jsr	FloatCompare
.3879	20 ef 50	jsr $50ef		jsr	CompareEqual
.387c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.387f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -25.90831781
>3882	10 1e a2 67				.dword	$67a21e10
>3886	e6 80					.byte	$e6,$80
.3888	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -25.90831781
>388b	10 1e a2 67				.dword	$67a21e10
>388f	e6 80					.byte	$e6,$80
.3891	20 25 51	jsr $5125		jsr	FloatCompare
.3894	20 0d 51	jsr $510d		jsr	CompareGreater
.3897	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>389a	00 00 00 00				.dword	$00000000
>389e	00 00					.byte	$00,$00
.38a0	20 25 51	jsr $5125		jsr	FloatCompare
.38a3	20 ef 50	jsr $50ef		jsr	CompareEqual
.38a6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.38a9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -25.90831781
>38ac	10 1e a2 67				.dword	$67a21e10
>38b0	e6 80					.byte	$e6,$80
.38b2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -25.90831781
>38b5	10 1e a2 67				.dword	$67a21e10
>38b9	e6 80					.byte	$e6,$80
.38bb	20 25 51	jsr $5125		jsr	FloatCompare
.38be	20 1d 51	jsr $511d		jsr	CompareGreaterEqual
.38c1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>38c4	01 00 00 00				.dword	$00000001
>38c8	00 80					.byte	$00,$80
.38ca	20 25 51	jsr $5125		jsr	FloatCompare
.38cd	20 ef 50	jsr $50ef		jsr	CompareEqual
.38d0	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.38d3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -25.90831781
>38d6	10 1e a2 67				.dword	$67a21e10
>38da	e6 80					.byte	$e6,$80
.38dc	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -25.90831781
>38df	10 1e a2 67				.dword	$67a21e10
>38e3	e6 80					.byte	$e6,$80
.38e5	20 25 51	jsr $5125		jsr	FloatCompare
.38e8	20 05 51	jsr $5105		jsr	CompareLess
.38eb	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>38ee	00 00 00 00				.dword	$00000000
>38f2	00 00					.byte	$00,$00
.38f4	20 25 51	jsr $5125		jsr	FloatCompare
.38f7	20 ef 50	jsr $50ef		jsr	CompareEqual
.38fa	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.38fd	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -25.90831781
>3900	10 1e a2 67				.dword	$67a21e10
>3904	e6 80					.byte	$e6,$80
.3906	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -25.90831781
>3909	10 1e a2 67				.dword	$67a21e10
>390d	e6 80					.byte	$e6,$80
.390f	20 25 51	jsr $5125		jsr	FloatCompare
.3912	20 15 51	jsr $5115		jsr	CompareLessEqual
.3915	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>3918	01 00 00 00				.dword	$00000001
>391c	00 80					.byte	$00,$80
.391e	20 25 51	jsr $5125		jsr	FloatCompare
.3921	20 ef 50	jsr $50ef		jsr	CompareEqual
.3924	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3927	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -25.90831781
>392a	10 1e a2 67				.dword	$67a21e10
>392e	e6 80					.byte	$e6,$80
.3930	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -25.90831781
>3933	10 1e a2 67				.dword	$67a21e10
>3937	e6 80					.byte	$e6,$80
.3939	20 25 51	jsr $5125		jsr	FloatCompare
.393c	20 ef 50	jsr $50ef		jsr	CompareEqual
.393f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>3942	01 00 00 00				.dword	$00000001
>3946	00 80					.byte	$00,$80
.3948	20 25 51	jsr $5125		jsr	FloatCompare
.394b	20 ef 50	jsr $50ef		jsr	CompareEqual
.394e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3951	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -25.90831781
>3954	10 1e a2 67				.dword	$67a21e10
>3958	e6 80					.byte	$e6,$80
.395a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -25.90831781
>395d	10 1e a2 67				.dword	$67a21e10
>3961	e6 80					.byte	$e6,$80
.3963	20 25 51	jsr $5125		jsr	FloatCompare
.3966	20 ff 50	jsr $50ff		jsr	CompareNotEqual
.3969	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>396c	00 00 00 00				.dword	$00000000
>3970	00 00					.byte	$00,$00
.3972	20 25 51	jsr $5125		jsr	FloatCompare
.3975	20 ef 50	jsr $50ef		jsr	CompareEqual
.3978	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.397b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 10574
>397e	4e 29 00 00				.dword	$0000294e
>3982	00 00					.byte	$00,$00
.3984	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -22802
>3987	12 59 00 00				.dword	$00005912
>398b	00 80					.byte	$00,$80
.398d	20 64 50	jsr $5064		jsr	FloatAdd
.3990	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -12228
>3993	c4 2f 00 00				.dword	$00002fc4
>3997	00 80					.byte	$00,$80
.3999	20 25 51	jsr $5125		jsr	FloatCompare
.399c	20 ef 50	jsr $50ef		jsr	CompareEqual
.399f	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.39a2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 10574
>39a5	4e 29 00 00				.dword	$0000294e
>39a9	00 00					.byte	$00,$00
.39ab	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -22802
>39ae	12 59 00 00				.dword	$00005912
>39b2	00 80					.byte	$00,$80
.39b4	20 5e 50	jsr $505e		jsr	FloatSubtract
.39b7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 33376
>39ba	60 82 00 00				.dword	$00008260
>39be	00 00					.byte	$00,$00
.39c0	20 25 51	jsr $5125		jsr	FloatCompare
.39c3	20 ef 50	jsr $50ef		jsr	CompareEqual
.39c6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.39c9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 10574
>39cc	4e 29 00 00				.dword	$0000294e
>39d0	00 00					.byte	$00,$00
.39d2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -22802
>39d5	12 59 00 00				.dword	$00005912
>39d9	00 80					.byte	$00,$80
.39db	20 00 53	jsr $5300		jsr	FloatMultiply
.39de	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -241108348
>39e1	7c 05 5f 0e				.dword	$0e5f057c
>39e5	00 80					.byte	$00,$80
.39e7	20 25 51	jsr $5125		jsr	FloatCompare
.39ea	20 ef 50	jsr $50ef		jsr	CompareEqual
.39ed	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.39f0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 10574
>39f3	4e 29 00 00				.dword	$0000294e
>39f7	00 00					.byte	$00,$00
.39f9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -22802
>39fc	12 59 00 00				.dword	$00005912
>3a00	00 80					.byte	$00,$80
.3a02	20 89 51	jsr $5189		jsr	FloatDivide
.3a05	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -0.46373125
>3a08	59 17 b7 76				.dword	$76b71759
>3a0c	e0 80					.byte	$e0,$80
.3a0e	20 25 51	jsr $5125		jsr	FloatCompare
.3a11	20 ef 50	jsr $50ef		jsr	CompareEqual
.3a14	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3a17	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -22802
>3a1a	12 59 00 00				.dword	$00005912
>3a1e	00 80					.byte	$00,$80
.3a20	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -22802
>3a23	12 59 00 00				.dword	$00005912
>3a27	00 80					.byte	$00,$80
.3a29	20 25 51	jsr $5125		jsr	FloatCompare
.3a2c	20 ef 50	jsr $50ef		jsr	CompareEqual
.3a2f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>3a32	01 00 00 00				.dword	$00000001
>3a36	00 80					.byte	$00,$80
.3a38	20 25 51	jsr $5125		jsr	FloatCompare
.3a3b	20 ef 50	jsr $50ef		jsr	CompareEqual
.3a3e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3a41	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -22802
>3a44	12 59 00 00				.dword	$00005912
>3a48	00 80					.byte	$00,$80
.3a4a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -22802
>3a4d	12 59 00 00				.dword	$00005912
>3a51	00 80					.byte	$00,$80
.3a53	20 25 51	jsr $5125		jsr	FloatCompare
.3a56	20 ff 50	jsr $50ff		jsr	CompareNotEqual
.3a59	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>3a5c	00 00 00 00				.dword	$00000000
>3a60	00 00					.byte	$00,$00
.3a62	20 25 51	jsr $5125		jsr	FloatCompare
.3a65	20 ef 50	jsr $50ef		jsr	CompareEqual
.3a68	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3a6b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -22802
>3a6e	12 59 00 00				.dword	$00005912
>3a72	00 80					.byte	$00,$80
.3a74	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -22802
>3a77	12 59 00 00				.dword	$00005912
>3a7b	00 80					.byte	$00,$80
.3a7d	20 25 51	jsr $5125		jsr	FloatCompare
.3a80	20 0d 51	jsr $510d		jsr	CompareGreater
.3a83	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>3a86	00 00 00 00				.dword	$00000000
>3a8a	00 00					.byte	$00,$00
.3a8c	20 25 51	jsr $5125		jsr	FloatCompare
.3a8f	20 ef 50	jsr $50ef		jsr	CompareEqual
.3a92	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3a95	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -22802
>3a98	12 59 00 00				.dword	$00005912
>3a9c	00 80					.byte	$00,$80
.3a9e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -22802
>3aa1	12 59 00 00				.dword	$00005912
>3aa5	00 80					.byte	$00,$80
.3aa7	20 25 51	jsr $5125		jsr	FloatCompare
.3aaa	20 1d 51	jsr $511d		jsr	CompareGreaterEqual
.3aad	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>3ab0	01 00 00 00				.dword	$00000001
>3ab4	00 80					.byte	$00,$80
.3ab6	20 25 51	jsr $5125		jsr	FloatCompare
.3ab9	20 ef 50	jsr $50ef		jsr	CompareEqual
.3abc	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3abf	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -22802
>3ac2	12 59 00 00				.dword	$00005912
>3ac6	00 80					.byte	$00,$80
.3ac8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -22802
>3acb	12 59 00 00				.dword	$00005912
>3acf	00 80					.byte	$00,$80
.3ad1	20 25 51	jsr $5125		jsr	FloatCompare
.3ad4	20 05 51	jsr $5105		jsr	CompareLess
.3ad7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>3ada	00 00 00 00				.dword	$00000000
>3ade	00 00					.byte	$00,$00
.3ae0	20 25 51	jsr $5125		jsr	FloatCompare
.3ae3	20 ef 50	jsr $50ef		jsr	CompareEqual
.3ae6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3ae9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -22802
>3aec	12 59 00 00				.dword	$00005912
>3af0	00 80					.byte	$00,$80
.3af2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -22802
>3af5	12 59 00 00				.dword	$00005912
>3af9	00 80					.byte	$00,$80
.3afb	20 25 51	jsr $5125		jsr	FloatCompare
.3afe	20 15 51	jsr $5115		jsr	CompareLessEqual
.3b01	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>3b04	01 00 00 00				.dword	$00000001
>3b08	00 80					.byte	$00,$80
.3b0a	20 25 51	jsr $5125		jsr	FloatCompare
.3b0d	20 ef 50	jsr $50ef		jsr	CompareEqual
.3b10	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3b13	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 43.30460841
>3b16	a2 f5 9b 56				.dword	$569bf5a2
>3b1a	e7 00					.byte	$e7,$00
.3b1c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 40.72778813
>3b1f	a5 a0 74 51				.dword	$5174a0a5
>3b23	e7 00					.byte	$e7,$00
.3b25	20 64 50	jsr $5064		jsr	FloatAdd
.3b28	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 84.03239653
>3b2b	24 4b 08 54				.dword	$54084b24
>3b2f	e8 00					.byte	$e8,$00
.3b31	20 25 51	jsr $5125		jsr	FloatCompare
.3b34	20 ef 50	jsr $50ef		jsr	CompareEqual
.3b37	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3b3a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 43.30460841
>3b3d	a2 f5 9b 56				.dword	$569bf5a2
>3b41	e7 00					.byte	$e7,$00
.3b43	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 40.72778813
>3b46	a5 a0 74 51				.dword	$5174a0a5
>3b4a	e7 00					.byte	$e7,$00
.3b4c	20 5e 50	jsr $505e		jsr	FloatSubtract
.3b4f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 2.57682028
>3b52	ce 4f 75 52				.dword	$52754fce
>3b56	e3 00					.byte	$e3,$00
.3b58	20 25 51	jsr $5125		jsr	FloatCompare
.3b5b	20 ef 50	jsr $50ef		jsr	CompareEqual
.3b5e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3b61	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 43.30460841
>3b64	a2 f5 9b 56				.dword	$569bf5a2
>3b68	e7 00					.byte	$e7,$00
.3b6a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 40.72778813
>3b6d	a5 a0 74 51				.dword	$5174a0a5
>3b71	e7 00					.byte	$e7,$00
.3b73	20 00 53	jsr $5300		jsr	FloatMultiply
.3b76	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 1763.7009161
>3b79	f4 36 3b 6e				.dword	$6e3b36f4
>3b7d	ec 00					.byte	$ec,$00
.3b7f	20 25 51	jsr $5125		jsr	FloatCompare
.3b82	20 ef 50	jsr $50ef		jsr	CompareEqual
.3b85	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3b88	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 43.30460841
>3b8b	a2 f5 9b 56				.dword	$569bf5a2
>3b8f	e7 00					.byte	$e7,$00
.3b91	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 40.72778813
>3b94	a5 a0 74 51				.dword	$5174a0a5
>3b98	e7 00					.byte	$e7,$00
.3b9a	20 89 51	jsr $5189		jsr	FloatDivide
.3b9d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 1.06326934
>3ba0	d9 9a 0c 44				.dword	$440c9ad9
>3ba4	e2 00					.byte	$e2,$00
.3ba6	20 25 51	jsr $5125		jsr	FloatCompare
.3ba9	20 ef 50	jsr $50ef		jsr	CompareEqual
.3bac	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3baf	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -73.56248481
>3bb2	01 ff 8f 49				.dword	$498fff01
>3bb6	e8 80					.byte	$e8,$80
.3bb8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -73.56248481
>3bbb	01 ff 8f 49				.dword	$498fff01
>3bbf	e8 80					.byte	$e8,$80
.3bc1	20 25 51	jsr $5125		jsr	FloatCompare
.3bc4	20 0d 51	jsr $510d		jsr	CompareGreater
.3bc7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>3bca	00 00 00 00				.dword	$00000000
>3bce	00 00					.byte	$00,$00
.3bd0	20 25 51	jsr $5125		jsr	FloatCompare
.3bd3	20 ef 50	jsr $50ef		jsr	CompareEqual
.3bd6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3bd9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -73.56248481
>3bdc	01 ff 8f 49				.dword	$498fff01
>3be0	e8 80					.byte	$e8,$80
.3be2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -73.56248481
>3be5	01 ff 8f 49				.dword	$498fff01
>3be9	e8 80					.byte	$e8,$80
.3beb	20 25 51	jsr $5125		jsr	FloatCompare
.3bee	20 1d 51	jsr $511d		jsr	CompareGreaterEqual
.3bf1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>3bf4	01 00 00 00				.dword	$00000001
>3bf8	00 80					.byte	$00,$80
.3bfa	20 25 51	jsr $5125		jsr	FloatCompare
.3bfd	20 ef 50	jsr $50ef		jsr	CompareEqual
.3c00	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3c03	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -73.56248481
>3c06	01 ff 8f 49				.dword	$498fff01
>3c0a	e8 80					.byte	$e8,$80
.3c0c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -73.56248481
>3c0f	01 ff 8f 49				.dword	$498fff01
>3c13	e8 80					.byte	$e8,$80
.3c15	20 25 51	jsr $5125		jsr	FloatCompare
.3c18	20 05 51	jsr $5105		jsr	CompareLess
.3c1b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>3c1e	00 00 00 00				.dword	$00000000
>3c22	00 00					.byte	$00,$00
.3c24	20 25 51	jsr $5125		jsr	FloatCompare
.3c27	20 ef 50	jsr $50ef		jsr	CompareEqual
.3c2a	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3c2d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -73.56248481
>3c30	01 ff 8f 49				.dword	$498fff01
>3c34	e8 80					.byte	$e8,$80
.3c36	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -73.56248481
>3c39	01 ff 8f 49				.dword	$498fff01
>3c3d	e8 80					.byte	$e8,$80
.3c3f	20 25 51	jsr $5125		jsr	FloatCompare
.3c42	20 15 51	jsr $5115		jsr	CompareLessEqual
.3c45	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>3c48	01 00 00 00				.dword	$00000001
>3c4c	00 80					.byte	$00,$80
.3c4e	20 25 51	jsr $5125		jsr	FloatCompare
.3c51	20 ef 50	jsr $50ef		jsr	CompareEqual
.3c54	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3c57	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -73.56248481
>3c5a	01 ff 8f 49				.dword	$498fff01
>3c5e	e8 80					.byte	$e8,$80
.3c60	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -73.56248481
>3c63	01 ff 8f 49				.dword	$498fff01
>3c67	e8 80					.byte	$e8,$80
.3c69	20 25 51	jsr $5125		jsr	FloatCompare
.3c6c	20 ef 50	jsr $50ef		jsr	CompareEqual
.3c6f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>3c72	01 00 00 00				.dword	$00000001
>3c76	00 80					.byte	$00,$80
.3c78	20 25 51	jsr $5125		jsr	FloatCompare
.3c7b	20 ef 50	jsr $50ef		jsr	CompareEqual
.3c7e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3c81	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -73.56248481
>3c84	01 ff 8f 49				.dword	$498fff01
>3c88	e8 80					.byte	$e8,$80
.3c8a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -73.56248481
>3c8d	01 ff 8f 49				.dword	$498fff01
>3c91	e8 80					.byte	$e8,$80
.3c93	20 25 51	jsr $5125		jsr	FloatCompare
.3c96	20 ff 50	jsr $50ff		jsr	CompareNotEqual
.3c99	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>3c9c	00 00 00 00				.dword	$00000000
>3ca0	00 00					.byte	$00,$00
.3ca2	20 25 51	jsr $5125		jsr	FloatCompare
.3ca5	20 ef 50	jsr $50ef		jsr	CompareEqual
.3ca8	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3cab	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 27847
>3cae	c7 6c 00 00				.dword	$00006cc7
>3cb2	00 00					.byte	$00,$00
.3cb4	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -32175
>3cb7	af 7d 00 00				.dword	$00007daf
>3cbb	00 80					.byte	$00,$80
.3cbd	20 64 50	jsr $5064		jsr	FloatAdd
.3cc0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -4328
>3cc3	e8 10 00 00				.dword	$000010e8
>3cc7	00 80					.byte	$00,$80
.3cc9	20 25 51	jsr $5125		jsr	FloatCompare
.3ccc	20 ef 50	jsr $50ef		jsr	CompareEqual
.3ccf	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3cd2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 27847
>3cd5	c7 6c 00 00				.dword	$00006cc7
>3cd9	00 00					.byte	$00,$00
.3cdb	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -32175
>3cde	af 7d 00 00				.dword	$00007daf
>3ce2	00 80					.byte	$00,$80
.3ce4	20 5e 50	jsr $505e		jsr	FloatSubtract
.3ce7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 60022
>3cea	76 ea 00 00				.dword	$0000ea76
>3cee	00 00					.byte	$00,$00
.3cf0	20 25 51	jsr $5125		jsr	FloatCompare
.3cf3	20 ef 50	jsr $50ef		jsr	CompareEqual
.3cf6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3cf9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 27847
>3cfc	c7 6c 00 00				.dword	$00006cc7
>3d00	00 00					.byte	$00,$00
.3d02	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -32175
>3d05	af 7d 00 00				.dword	$00007daf
>3d09	00 80					.byte	$00,$80
.3d0b	20 00 53	jsr $5300		jsr	FloatMultiply
.3d0e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -895977225
>3d11	09 87 67 35				.dword	$35678709
>3d15	00 80					.byte	$00,$80
.3d17	20 25 51	jsr $5125		jsr	FloatCompare
.3d1a	20 ef 50	jsr $50ef		jsr	CompareEqual
.3d1d	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3d20	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 27847
>3d23	c7 6c 00 00				.dword	$00006cc7
>3d27	00 00					.byte	$00,$00
.3d29	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -32175
>3d2c	af 7d 00 00				.dword	$00007daf
>3d30	00 80					.byte	$00,$80
.3d32	20 89 51	jsr $5189		jsr	FloatDivide
.3d35	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -0.86548563
>3d38	ae 3b c8 6e				.dword	$6ec83bae
>3d3c	e1 80					.byte	$e1,$80
.3d3e	20 25 51	jsr $5125		jsr	FloatCompare
.3d41	20 ef 50	jsr $50ef		jsr	CompareEqual
.3d44	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3d47	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 27847
>3d4a	c7 6c 00 00				.dword	$00006cc7
>3d4e	00 00					.byte	$00,$00
.3d50	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -32175
>3d53	af 7d 00 00				.dword	$00007daf
>3d57	00 80					.byte	$00,$80
.3d59	20 25 51	jsr $5125		jsr	FloatCompare
.3d5c	20 ef 50	jsr $50ef		jsr	CompareEqual
.3d5f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>3d62	00 00 00 00				.dword	$00000000
>3d66	00 00					.byte	$00,$00
.3d68	20 25 51	jsr $5125		jsr	FloatCompare
.3d6b	20 ef 50	jsr $50ef		jsr	CompareEqual
.3d6e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3d71	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 27847
>3d74	c7 6c 00 00				.dword	$00006cc7
>3d78	00 00					.byte	$00,$00
.3d7a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -32175
>3d7d	af 7d 00 00				.dword	$00007daf
>3d81	00 80					.byte	$00,$80
.3d83	20 25 51	jsr $5125		jsr	FloatCompare
.3d86	20 ff 50	jsr $50ff		jsr	CompareNotEqual
.3d89	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>3d8c	01 00 00 00				.dword	$00000001
>3d90	00 80					.byte	$00,$80
.3d92	20 25 51	jsr $5125		jsr	FloatCompare
.3d95	20 ef 50	jsr $50ef		jsr	CompareEqual
.3d98	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3d9b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 27847
>3d9e	c7 6c 00 00				.dword	$00006cc7
>3da2	00 00					.byte	$00,$00
.3da4	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -32175
>3da7	af 7d 00 00				.dword	$00007daf
>3dab	00 80					.byte	$00,$80
.3dad	20 25 51	jsr $5125		jsr	FloatCompare
.3db0	20 0d 51	jsr $510d		jsr	CompareGreater
.3db3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>3db6	01 00 00 00				.dword	$00000001
>3dba	00 80					.byte	$00,$80
.3dbc	20 25 51	jsr $5125		jsr	FloatCompare
.3dbf	20 ef 50	jsr $50ef		jsr	CompareEqual
.3dc2	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3dc5	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 27847
>3dc8	c7 6c 00 00				.dword	$00006cc7
>3dcc	00 00					.byte	$00,$00
.3dce	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -32175
>3dd1	af 7d 00 00				.dword	$00007daf
>3dd5	00 80					.byte	$00,$80
.3dd7	20 25 51	jsr $5125		jsr	FloatCompare
.3dda	20 1d 51	jsr $511d		jsr	CompareGreaterEqual
.3ddd	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>3de0	01 00 00 00				.dword	$00000001
>3de4	00 80					.byte	$00,$80
.3de6	20 25 51	jsr $5125		jsr	FloatCompare
.3de9	20 ef 50	jsr $50ef		jsr	CompareEqual
.3dec	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3def	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 27847
>3df2	c7 6c 00 00				.dword	$00006cc7
>3df6	00 00					.byte	$00,$00
.3df8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -32175
>3dfb	af 7d 00 00				.dword	$00007daf
>3dff	00 80					.byte	$00,$80
.3e01	20 25 51	jsr $5125		jsr	FloatCompare
.3e04	20 05 51	jsr $5105		jsr	CompareLess
.3e07	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>3e0a	00 00 00 00				.dword	$00000000
>3e0e	00 00					.byte	$00,$00
.3e10	20 25 51	jsr $5125		jsr	FloatCompare
.3e13	20 ef 50	jsr $50ef		jsr	CompareEqual
.3e16	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3e19	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 27847
>3e1c	c7 6c 00 00				.dword	$00006cc7
>3e20	00 00					.byte	$00,$00
.3e22	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -32175
>3e25	af 7d 00 00				.dword	$00007daf
>3e29	00 80					.byte	$00,$80
.3e2b	20 25 51	jsr $5125		jsr	FloatCompare
.3e2e	20 15 51	jsr $5115		jsr	CompareLessEqual
.3e31	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>3e34	00 00 00 00				.dword	$00000000
>3e38	00 00					.byte	$00,$00
.3e3a	20 25 51	jsr $5125		jsr	FloatCompare
.3e3d	20 ef 50	jsr $50ef		jsr	CompareEqual
.3e40	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3e43	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -54.21284523
>3e46	0d fa 6c 6c				.dword	$6c6cfa0d
>3e4a	e7 80					.byte	$e7,$80
.3e4c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -34.61197052
>3e4f	33 54 39 45				.dword	$45395433
>3e53	e7 80					.byte	$e7,$80
.3e55	20 64 50	jsr $5064		jsr	FloatAdd
.3e58	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -88.82481574
>3e5b	20 27 d3 58				.dword	$58d32720
>3e5f	e8 80					.byte	$e8,$80
.3e61	20 25 51	jsr $5125		jsr	FloatCompare
.3e64	20 ef 50	jsr $50ef		jsr	CompareEqual
.3e67	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3e6a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -54.21284523
>3e6d	0d fa 6c 6c				.dword	$6c6cfa0d
>3e71	e7 80					.byte	$e7,$80
.3e73	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -34.61197052
>3e76	33 54 39 45				.dword	$45395433
>3e7a	e7 80					.byte	$e7,$80
.3e7c	20 5e 50	jsr $505e		jsr	FloatSubtract
.3e7f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -19.60087471
>3e82	b3 4b 67 4e				.dword	$4e674bb3
>3e86	e6 80					.byte	$e6,$80
.3e88	20 25 51	jsr $5125		jsr	FloatCompare
.3e8b	20 ef 50	jsr $50ef		jsr	CompareEqual
.3e8e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3e91	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -54.21284523
>3e94	0d fa 6c 6c				.dword	$6c6cfa0d
>3e98	e7 80					.byte	$e7,$80
.3e9a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -34.61197052
>3e9d	33 54 39 45				.dword	$45395433
>3ea1	e7 80					.byte	$e7,$80
.3ea3	20 00 53	jsr $5300		jsr	FloatMultiply
.3ea6	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 1876.41340071
>3ea9	4a 9d 46 75				.dword	$75469d4a
>3ead	ec 00					.byte	$ec,$00
.3eaf	20 25 51	jsr $5125		jsr	FloatCompare
.3eb2	20 ef 50	jsr $50ef		jsr	CompareEqual
.3eb5	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3eb8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -54.21284523
>3ebb	0d fa 6c 6c				.dword	$6c6cfa0d
>3ebf	e7 80					.byte	$e7,$80
.3ec1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -34.61197052
>3ec4	33 54 39 45				.dword	$45395433
>3ec8	e7 80					.byte	$e7,$80
.3eca	20 89 51	jsr $5189		jsr	FloatDivide
.3ecd	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 1.56630335
>3ed0	68 50 3e 64				.dword	$643e5068
>3ed4	e2 00					.byte	$e2,$00
.3ed6	20 25 51	jsr $5125		jsr	FloatCompare
.3ed9	20 ef 50	jsr $50ef		jsr	CompareEqual
.3edc	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3edf	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -60.81752652
>3ee2	d6 92 a2 79				.dword	$79a292d6
>3ee6	e7 80					.byte	$e7,$80
.3ee8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -60.81752652
>3eeb	d6 92 a2 79				.dword	$79a292d6
>3eef	e7 80					.byte	$e7,$80
.3ef1	20 25 51	jsr $5125		jsr	FloatCompare
.3ef4	20 0d 51	jsr $510d		jsr	CompareGreater
.3ef7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>3efa	00 00 00 00				.dword	$00000000
>3efe	00 00					.byte	$00,$00
.3f00	20 25 51	jsr $5125		jsr	FloatCompare
.3f03	20 ef 50	jsr $50ef		jsr	CompareEqual
.3f06	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3f09	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -60.81752652
>3f0c	d6 92 a2 79				.dword	$79a292d6
>3f10	e7 80					.byte	$e7,$80
.3f12	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -60.81752652
>3f15	d6 92 a2 79				.dword	$79a292d6
>3f19	e7 80					.byte	$e7,$80
.3f1b	20 25 51	jsr $5125		jsr	FloatCompare
.3f1e	20 1d 51	jsr $511d		jsr	CompareGreaterEqual
.3f21	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>3f24	01 00 00 00				.dword	$00000001
>3f28	00 80					.byte	$00,$80
.3f2a	20 25 51	jsr $5125		jsr	FloatCompare
.3f2d	20 ef 50	jsr $50ef		jsr	CompareEqual
.3f30	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3f33	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -60.81752652
>3f36	d6 92 a2 79				.dword	$79a292d6
>3f3a	e7 80					.byte	$e7,$80
.3f3c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -60.81752652
>3f3f	d6 92 a2 79				.dword	$79a292d6
>3f43	e7 80					.byte	$e7,$80
.3f45	20 25 51	jsr $5125		jsr	FloatCompare
.3f48	20 05 51	jsr $5105		jsr	CompareLess
.3f4b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>3f4e	00 00 00 00				.dword	$00000000
>3f52	00 00					.byte	$00,$00
.3f54	20 25 51	jsr $5125		jsr	FloatCompare
.3f57	20 ef 50	jsr $50ef		jsr	CompareEqual
.3f5a	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3f5d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -60.81752652
>3f60	d6 92 a2 79				.dword	$79a292d6
>3f64	e7 80					.byte	$e7,$80
.3f66	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -60.81752652
>3f69	d6 92 a2 79				.dword	$79a292d6
>3f6d	e7 80					.byte	$e7,$80
.3f6f	20 25 51	jsr $5125		jsr	FloatCompare
.3f72	20 15 51	jsr $5115		jsr	CompareLessEqual
.3f75	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>3f78	01 00 00 00				.dword	$00000001
>3f7c	00 80					.byte	$00,$80
.3f7e	20 25 51	jsr $5125		jsr	FloatCompare
.3f81	20 ef 50	jsr $50ef		jsr	CompareEqual
.3f84	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3f87	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -60.81752652
>3f8a	d6 92 a2 79				.dword	$79a292d6
>3f8e	e7 80					.byte	$e7,$80
.3f90	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -60.81752652
>3f93	d6 92 a2 79				.dword	$79a292d6
>3f97	e7 80					.byte	$e7,$80
.3f99	20 25 51	jsr $5125		jsr	FloatCompare
.3f9c	20 ef 50	jsr $50ef		jsr	CompareEqual
.3f9f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>3fa2	01 00 00 00				.dword	$00000001
>3fa6	00 80					.byte	$00,$80
.3fa8	20 25 51	jsr $5125		jsr	FloatCompare
.3fab	20 ef 50	jsr $50ef		jsr	CompareEqual
.3fae	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3fb1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -60.81752652
>3fb4	d6 92 a2 79				.dword	$79a292d6
>3fb8	e7 80					.byte	$e7,$80
.3fba	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -60.81752652
>3fbd	d6 92 a2 79				.dword	$79a292d6
>3fc1	e7 80					.byte	$e7,$80
.3fc3	20 25 51	jsr $5125		jsr	FloatCompare
.3fc6	20 ff 50	jsr $50ff		jsr	CompareNotEqual
.3fc9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>3fcc	00 00 00 00				.dword	$00000000
>3fd0	00 00					.byte	$00,$00
.3fd2	20 25 51	jsr $5125		jsr	FloatCompare
.3fd5	20 ef 50	jsr $50ef		jsr	CompareEqual
.3fd8	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.3fdb	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -16022
>3fde	96 3e 00 00				.dword	$00003e96
>3fe2	00 80					.byte	$00,$80
.3fe4	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -19950
>3fe7	ee 4d 00 00				.dword	$00004dee
>3feb	00 80					.byte	$00,$80
.3fed	20 64 50	jsr $5064		jsr	FloatAdd
.3ff0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -35972
>3ff3	84 8c 00 00				.dword	$00008c84
>3ff7	00 80					.byte	$00,$80
.3ff9	20 25 51	jsr $5125		jsr	FloatCompare
.3ffc	20 ef 50	jsr $50ef		jsr	CompareEqual
.3fff	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4002	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -16022
>4005	96 3e 00 00				.dword	$00003e96
>4009	00 80					.byte	$00,$80
.400b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -19950
>400e	ee 4d 00 00				.dword	$00004dee
>4012	00 80					.byte	$00,$80
.4014	20 5e 50	jsr $505e		jsr	FloatSubtract
.4017	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 3928
>401a	58 0f 00 00				.dword	$00000f58
>401e	00 00					.byte	$00,$00
.4020	20 25 51	jsr $5125		jsr	FloatCompare
.4023	20 ef 50	jsr $50ef		jsr	CompareEqual
.4026	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4029	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -16022
>402c	96 3e 00 00				.dword	$00003e96
>4030	00 80					.byte	$00,$80
.4032	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -19950
>4035	ee 4d 00 00				.dword	$00004dee
>4039	00 80					.byte	$00,$80
.403b	20 00 53	jsr $5300		jsr	FloatMultiply
.403e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 319638900
>4041	74 4d 0d 13				.dword	$130d4d74
>4045	00 00					.byte	$00,$00
.4047	20 25 51	jsr $5125		jsr	FloatCompare
.404a	20 ef 50	jsr $50ef		jsr	CompareEqual
.404d	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4050	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -16022
>4053	96 3e 00 00				.dword	$00003e96
>4057	00 80					.byte	$00,$80
.4059	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -19950
>405c	ee 4d 00 00				.dword	$00004dee
>4060	00 80					.byte	$00,$80
.4062	20 89 51	jsr $5189		jsr	FloatDivide
.4065	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0.80310777
>4068	44 3c cc 66				.dword	$66cc3c44
>406c	e1 00					.byte	$e1,$00
.406e	20 25 51	jsr $5125		jsr	FloatCompare
.4071	20 ef 50	jsr $50ef		jsr	CompareEqual
.4074	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4077	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -19950
>407a	ee 4d 00 00				.dword	$00004dee
>407e	00 80					.byte	$00,$80
.4080	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -19950
>4083	ee 4d 00 00				.dword	$00004dee
>4087	00 80					.byte	$00,$80
.4089	20 25 51	jsr $5125		jsr	FloatCompare
.408c	20 ef 50	jsr $50ef		jsr	CompareEqual
.408f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>4092	01 00 00 00				.dword	$00000001
>4096	00 80					.byte	$00,$80
.4098	20 25 51	jsr $5125		jsr	FloatCompare
.409b	20 ef 50	jsr $50ef		jsr	CompareEqual
.409e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.40a1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -19950
>40a4	ee 4d 00 00				.dword	$00004dee
>40a8	00 80					.byte	$00,$80
.40aa	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -19950
>40ad	ee 4d 00 00				.dword	$00004dee
>40b1	00 80					.byte	$00,$80
.40b3	20 25 51	jsr $5125		jsr	FloatCompare
.40b6	20 ff 50	jsr $50ff		jsr	CompareNotEqual
.40b9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>40bc	00 00 00 00				.dword	$00000000
>40c0	00 00					.byte	$00,$00
.40c2	20 25 51	jsr $5125		jsr	FloatCompare
.40c5	20 ef 50	jsr $50ef		jsr	CompareEqual
.40c8	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.40cb	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -19950
>40ce	ee 4d 00 00				.dword	$00004dee
>40d2	00 80					.byte	$00,$80
.40d4	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -19950
>40d7	ee 4d 00 00				.dword	$00004dee
>40db	00 80					.byte	$00,$80
.40dd	20 25 51	jsr $5125		jsr	FloatCompare
.40e0	20 0d 51	jsr $510d		jsr	CompareGreater
.40e3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>40e6	00 00 00 00				.dword	$00000000
>40ea	00 00					.byte	$00,$00
.40ec	20 25 51	jsr $5125		jsr	FloatCompare
.40ef	20 ef 50	jsr $50ef		jsr	CompareEqual
.40f2	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.40f5	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -19950
>40f8	ee 4d 00 00				.dword	$00004dee
>40fc	00 80					.byte	$00,$80
.40fe	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -19950
>4101	ee 4d 00 00				.dword	$00004dee
>4105	00 80					.byte	$00,$80
.4107	20 25 51	jsr $5125		jsr	FloatCompare
.410a	20 1d 51	jsr $511d		jsr	CompareGreaterEqual
.410d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>4110	01 00 00 00				.dword	$00000001
>4114	00 80					.byte	$00,$80
.4116	20 25 51	jsr $5125		jsr	FloatCompare
.4119	20 ef 50	jsr $50ef		jsr	CompareEqual
.411c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.411f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -19950
>4122	ee 4d 00 00				.dword	$00004dee
>4126	00 80					.byte	$00,$80
.4128	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -19950
>412b	ee 4d 00 00				.dword	$00004dee
>412f	00 80					.byte	$00,$80
.4131	20 25 51	jsr $5125		jsr	FloatCompare
.4134	20 05 51	jsr $5105		jsr	CompareLess
.4137	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>413a	00 00 00 00				.dword	$00000000
>413e	00 00					.byte	$00,$00
.4140	20 25 51	jsr $5125		jsr	FloatCompare
.4143	20 ef 50	jsr $50ef		jsr	CompareEqual
.4146	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4149	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -19950
>414c	ee 4d 00 00				.dword	$00004dee
>4150	00 80					.byte	$00,$80
.4152	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -19950
>4155	ee 4d 00 00				.dword	$00004dee
>4159	00 80					.byte	$00,$80
.415b	20 25 51	jsr $5125		jsr	FloatCompare
.415e	20 15 51	jsr $5115		jsr	CompareLessEqual
.4161	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>4164	01 00 00 00				.dword	$00000001
>4168	00 80					.byte	$00,$80
.416a	20 25 51	jsr $5125		jsr	FloatCompare
.416d	20 ef 50	jsr $50ef		jsr	CompareEqual
.4170	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4173	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 17.95675063
>4176	70 b6 d3 47				.dword	$47d3b670
>417a	e6 00					.byte	$e6,$00
.417c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 18.92257228
>417f	ca b6 b0 4b				.dword	$4bb0b6ca
>4183	e6 00					.byte	$e6,$00
.4185	20 64 50	jsr $5064		jsr	FloatAdd
.4188	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 36.87932291
>418b	9d 36 c2 49				.dword	$49c2369d
>418f	e7 00					.byte	$e7,$00
.4191	20 25 51	jsr $5125		jsr	FloatCompare
.4194	20 ef 50	jsr $50ef		jsr	CompareEqual
.4197	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.419a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 17.95675063
>419d	70 b6 d3 47				.dword	$47d3b670
>41a1	e6 00					.byte	$e6,$00
.41a3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 18.92257228
>41a6	ca b6 b0 4b				.dword	$4bb0b6ca
>41aa	e6 00					.byte	$e6,$00
.41ac	20 5e 50	jsr $505e		jsr	FloatSubtract
.41af	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -0.96582166
>41b2	4e 0b a0 7b				.dword	$7ba00b4e
>41b6	e1 80					.byte	$e1,$80
.41b8	20 25 51	jsr $5125		jsr	FloatCompare
.41bb	20 ef 50	jsr $50ef		jsr	CompareEqual
.41be	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.41c1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 17.95675063
>41c4	70 b6 d3 47				.dword	$47d3b670
>41c8	e6 00					.byte	$e6,$00
.41ca	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 18.92257228
>41cd	ca b6 b0 4b				.dword	$4bb0b6ca
>41d1	e6 00					.byte	$e6,$00
.41d3	20 00 53	jsr $5300		jsr	FloatMultiply
.41d6	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 339.78791175
>41d9	25 6d f2 54				.dword	$54f26d25
>41dd	ea 00					.byte	$ea,$00
.41df	20 25 51	jsr $5125		jsr	FloatCompare
.41e2	20 ef 50	jsr $50ef		jsr	CompareEqual
.41e5	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.41e8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 17.95675063
>41eb	70 b6 d3 47				.dword	$47d3b670
>41ef	e6 00					.byte	$e6,$00
.41f1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 18.92257228
>41f4	ca b6 b0 4b				.dword	$4bb0b6ca
>41f8	e6 00					.byte	$e6,$00
.41fa	20 89 51	jsr $5189		jsr	FloatDivide
.41fd	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0.94895928
>4200	68 7f 77 79				.dword	$79777f68
>4204	e1 00					.byte	$e1,$00
.4206	20 25 51	jsr $5125		jsr	FloatCompare
.4209	20 ef 50	jsr $50ef		jsr	CompareEqual
.420c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.420f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 69.85899409
>4212	09 e7 db 45				.dword	$45dbe709
>4216	e8 00					.byte	$e8,$00
.4218	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 69.85899409
>421b	09 e7 db 45				.dword	$45dbe709
>421f	e8 00					.byte	$e8,$00
.4221	20 25 51	jsr $5125		jsr	FloatCompare
.4224	20 0d 51	jsr $510d		jsr	CompareGreater
.4227	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>422a	00 00 00 00				.dword	$00000000
>422e	00 00					.byte	$00,$00
.4230	20 25 51	jsr $5125		jsr	FloatCompare
.4233	20 ef 50	jsr $50ef		jsr	CompareEqual
.4236	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4239	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 69.85899409
>423c	09 e7 db 45				.dword	$45dbe709
>4240	e8 00					.byte	$e8,$00
.4242	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 69.85899409
>4245	09 e7 db 45				.dword	$45dbe709
>4249	e8 00					.byte	$e8,$00
.424b	20 25 51	jsr $5125		jsr	FloatCompare
.424e	20 1d 51	jsr $511d		jsr	CompareGreaterEqual
.4251	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>4254	01 00 00 00				.dword	$00000001
>4258	00 80					.byte	$00,$80
.425a	20 25 51	jsr $5125		jsr	FloatCompare
.425d	20 ef 50	jsr $50ef		jsr	CompareEqual
.4260	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4263	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 69.85899409
>4266	09 e7 db 45				.dword	$45dbe709
>426a	e8 00					.byte	$e8,$00
.426c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 69.85899409
>426f	09 e7 db 45				.dword	$45dbe709
>4273	e8 00					.byte	$e8,$00
.4275	20 25 51	jsr $5125		jsr	FloatCompare
.4278	20 05 51	jsr $5105		jsr	CompareLess
.427b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>427e	00 00 00 00				.dword	$00000000
>4282	00 00					.byte	$00,$00
.4284	20 25 51	jsr $5125		jsr	FloatCompare
.4287	20 ef 50	jsr $50ef		jsr	CompareEqual
.428a	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.428d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 69.85899409
>4290	09 e7 db 45				.dword	$45dbe709
>4294	e8 00					.byte	$e8,$00
.4296	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 69.85899409
>4299	09 e7 db 45				.dword	$45dbe709
>429d	e8 00					.byte	$e8,$00
.429f	20 25 51	jsr $5125		jsr	FloatCompare
.42a2	20 15 51	jsr $5115		jsr	CompareLessEqual
.42a5	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>42a8	01 00 00 00				.dword	$00000001
>42ac	00 80					.byte	$00,$80
.42ae	20 25 51	jsr $5125		jsr	FloatCompare
.42b1	20 ef 50	jsr $50ef		jsr	CompareEqual
.42b4	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.42b7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 69.85899409
>42ba	09 e7 db 45				.dword	$45dbe709
>42be	e8 00					.byte	$e8,$00
.42c0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 69.85899409
>42c3	09 e7 db 45				.dword	$45dbe709
>42c7	e8 00					.byte	$e8,$00
.42c9	20 25 51	jsr $5125		jsr	FloatCompare
.42cc	20 ef 50	jsr $50ef		jsr	CompareEqual
.42cf	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>42d2	01 00 00 00				.dword	$00000001
>42d6	00 80					.byte	$00,$80
.42d8	20 25 51	jsr $5125		jsr	FloatCompare
.42db	20 ef 50	jsr $50ef		jsr	CompareEqual
.42de	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.42e1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 69.85899409
>42e4	09 e7 db 45				.dword	$45dbe709
>42e8	e8 00					.byte	$e8,$00
.42ea	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 69.85899409
>42ed	09 e7 db 45				.dword	$45dbe709
>42f1	e8 00					.byte	$e8,$00
.42f3	20 25 51	jsr $5125		jsr	FloatCompare
.42f6	20 ff 50	jsr $50ff		jsr	CompareNotEqual
.42f9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>42fc	00 00 00 00				.dword	$00000000
>4300	00 00					.byte	$00,$00
.4302	20 25 51	jsr $5125		jsr	FloatCompare
.4305	20 ef 50	jsr $50ef		jsr	CompareEqual
.4308	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.430b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -127
>430e	7f 00 00 00				.dword	$0000007f
>4312	00 80					.byte	$00,$80
.4314	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 4929
>4317	41 13 00 00				.dword	$00001341
>431b	00 00					.byte	$00,$00
.431d	20 64 50	jsr $5064		jsr	FloatAdd
.4320	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 4802
>4323	c2 12 00 00				.dword	$000012c2
>4327	00 00					.byte	$00,$00
.4329	20 25 51	jsr $5125		jsr	FloatCompare
.432c	20 ef 50	jsr $50ef		jsr	CompareEqual
.432f	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4332	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -127
>4335	7f 00 00 00				.dword	$0000007f
>4339	00 80					.byte	$00,$80
.433b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 4929
>433e	41 13 00 00				.dword	$00001341
>4342	00 00					.byte	$00,$00
.4344	20 5e 50	jsr $505e		jsr	FloatSubtract
.4347	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -5056
>434a	c0 13 00 00				.dword	$000013c0
>434e	00 80					.byte	$00,$80
.4350	20 25 51	jsr $5125		jsr	FloatCompare
.4353	20 ef 50	jsr $50ef		jsr	CompareEqual
.4356	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4359	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -127
>435c	7f 00 00 00				.dword	$0000007f
>4360	00 80					.byte	$00,$80
.4362	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 4929
>4365	41 13 00 00				.dword	$00001341
>4369	00 00					.byte	$00,$00
.436b	20 00 53	jsr $5300		jsr	FloatMultiply
.436e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -625983
>4371	3f 8d 09 00				.dword	$00098d3f
>4375	00 80					.byte	$00,$80
.4377	20 25 51	jsr $5125		jsr	FloatCompare
.437a	20 ef 50	jsr $50ef		jsr	CompareEqual
.437d	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4380	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -127
>4383	7f 00 00 00				.dword	$0000007f
>4387	00 80					.byte	$00,$80
.4389	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 4929
>438c	41 13 00 00				.dword	$00001341
>4390	00 00					.byte	$00,$00
.4392	20 89 51	jsr $5189		jsr	FloatDivide
.4395	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -0.02576588
>4398	bf 7b 89 69				.dword	$69897bbf
>439c	dc 80					.byte	$dc,$80
.439e	20 25 51	jsr $5125		jsr	FloatCompare
.43a1	20 ef 50	jsr $50ef		jsr	CompareEqual
.43a4	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.43a7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 4929
>43aa	41 13 00 00				.dword	$00001341
>43ae	00 00					.byte	$00,$00
.43b0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 4929
>43b3	41 13 00 00				.dword	$00001341
>43b7	00 00					.byte	$00,$00
.43b9	20 25 51	jsr $5125		jsr	FloatCompare
.43bc	20 ef 50	jsr $50ef		jsr	CompareEqual
.43bf	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>43c2	01 00 00 00				.dword	$00000001
>43c6	00 80					.byte	$00,$80
.43c8	20 25 51	jsr $5125		jsr	FloatCompare
.43cb	20 ef 50	jsr $50ef		jsr	CompareEqual
.43ce	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.43d1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 4929
>43d4	41 13 00 00				.dword	$00001341
>43d8	00 00					.byte	$00,$00
.43da	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 4929
>43dd	41 13 00 00				.dword	$00001341
>43e1	00 00					.byte	$00,$00
.43e3	20 25 51	jsr $5125		jsr	FloatCompare
.43e6	20 ff 50	jsr $50ff		jsr	CompareNotEqual
.43e9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>43ec	00 00 00 00				.dword	$00000000
>43f0	00 00					.byte	$00,$00
.43f2	20 25 51	jsr $5125		jsr	FloatCompare
.43f5	20 ef 50	jsr $50ef		jsr	CompareEqual
.43f8	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.43fb	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 4929
>43fe	41 13 00 00				.dword	$00001341
>4402	00 00					.byte	$00,$00
.4404	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 4929
>4407	41 13 00 00				.dword	$00001341
>440b	00 00					.byte	$00,$00
.440d	20 25 51	jsr $5125		jsr	FloatCompare
.4410	20 0d 51	jsr $510d		jsr	CompareGreater
.4413	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>4416	00 00 00 00				.dword	$00000000
>441a	00 00					.byte	$00,$00
.441c	20 25 51	jsr $5125		jsr	FloatCompare
.441f	20 ef 50	jsr $50ef		jsr	CompareEqual
.4422	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4425	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 4929
>4428	41 13 00 00				.dword	$00001341
>442c	00 00					.byte	$00,$00
.442e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 4929
>4431	41 13 00 00				.dword	$00001341
>4435	00 00					.byte	$00,$00
.4437	20 25 51	jsr $5125		jsr	FloatCompare
.443a	20 1d 51	jsr $511d		jsr	CompareGreaterEqual
.443d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>4440	01 00 00 00				.dword	$00000001
>4444	00 80					.byte	$00,$80
.4446	20 25 51	jsr $5125		jsr	FloatCompare
.4449	20 ef 50	jsr $50ef		jsr	CompareEqual
.444c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.444f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 4929
>4452	41 13 00 00				.dword	$00001341
>4456	00 00					.byte	$00,$00
.4458	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 4929
>445b	41 13 00 00				.dword	$00001341
>445f	00 00					.byte	$00,$00
.4461	20 25 51	jsr $5125		jsr	FloatCompare
.4464	20 05 51	jsr $5105		jsr	CompareLess
.4467	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>446a	00 00 00 00				.dword	$00000000
>446e	00 00					.byte	$00,$00
.4470	20 25 51	jsr $5125		jsr	FloatCompare
.4473	20 ef 50	jsr $50ef		jsr	CompareEqual
.4476	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4479	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 4929
>447c	41 13 00 00				.dword	$00001341
>4480	00 00					.byte	$00,$00
.4482	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 4929
>4485	41 13 00 00				.dword	$00001341
>4489	00 00					.byte	$00,$00
.448b	20 25 51	jsr $5125		jsr	FloatCompare
.448e	20 15 51	jsr $5115		jsr	CompareLessEqual
.4491	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>4494	01 00 00 00				.dword	$00000001
>4498	00 80					.byte	$00,$80
.449a	20 25 51	jsr $5125		jsr	FloatCompare
.449d	20 ef 50	jsr $50ef		jsr	CompareEqual
.44a0	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.44a3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 5.36535191
>44a6	3f 7b d8 55				.dword	$55d87b3f
>44aa	e4 00					.byte	$e4,$00
.44ac	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 42.50514295
>44af	19 a2 02 55				.dword	$5502a219
>44b3	e7 00					.byte	$e7,$00
.44b5	20 64 50	jsr $5064		jsr	FloatAdd
.44b8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 47.87049486
>44bb	81 b1 bd 5f				.dword	$5fbdb181
>44bf	e7 00					.byte	$e7,$00
.44c1	20 25 51	jsr $5125		jsr	FloatCompare
.44c4	20 ef 50	jsr $50ef		jsr	CompareEqual
.44c7	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.44ca	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 5.36535191
>44cd	3f 7b d8 55				.dword	$55d87b3f
>44d1	e4 00					.byte	$e4,$00
.44d3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 42.50514295
>44d6	19 a2 02 55				.dword	$5502a219
>44da	e7 00					.byte	$e7,$00
.44dc	20 5e 50	jsr $505e		jsr	FloatSubtract
.44df	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -37.13979104
>44e2	b1 92 47 4a				.dword	$4a4792b1
>44e6	e7 80					.byte	$e7,$80
.44e8	20 25 51	jsr $5125		jsr	FloatCompare
.44eb	20 ef 50	jsr $50ef		jsr	CompareEqual
.44ee	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.44f1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 5.36535191
>44f4	3f 7b d8 55				.dword	$55d87b3f
>44f8	e4 00					.byte	$e4,$00
.44fa	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 42.50514295
>44fd	19 a2 02 55				.dword	$5502a219
>4501	e7 00					.byte	$e7,$00
.4503	20 00 53	jsr $5300		jsr	FloatMultiply
.4506	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 228.0550498
>4509	df 0b 07 72				.dword	$72070bdf
>450d	e9 00					.byte	$e9,$00
.450f	20 25 51	jsr $5125		jsr	FloatCompare
.4512	20 ef 50	jsr $50ef		jsr	CompareEqual
.4515	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4518	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 5.36535191
>451b	3f 7b d8 55				.dword	$55d87b3f
>451f	e4 00					.byte	$e4,$00
.4521	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 42.50514295
>4524	19 a2 02 55				.dword	$5502a219
>4528	e7 00					.byte	$e7,$00
.452a	20 89 51	jsr $5189		jsr	FloatDivide
.452d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0.1262283
>4530	e9 fe a0 40				.dword	$40a0fee9
>4534	df 00					.byte	$df,$00
.4536	20 25 51	jsr $5125		jsr	FloatCompare
.4539	20 ef 50	jsr $50ef		jsr	CompareEqual
.453c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.453f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 41.62833077
>4542	92 b4 41 53				.dword	$5341b492
>4546	e7 00					.byte	$e7,$00
.4548	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 41.62833077
>454b	92 b4 41 53				.dword	$5341b492
>454f	e7 00					.byte	$e7,$00
.4551	20 25 51	jsr $5125		jsr	FloatCompare
.4554	20 0d 51	jsr $510d		jsr	CompareGreater
.4557	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>455a	00 00 00 00				.dword	$00000000
>455e	00 00					.byte	$00,$00
.4560	20 25 51	jsr $5125		jsr	FloatCompare
.4563	20 ef 50	jsr $50ef		jsr	CompareEqual
.4566	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4569	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 41.62833077
>456c	92 b4 41 53				.dword	$5341b492
>4570	e7 00					.byte	$e7,$00
.4572	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 41.62833077
>4575	92 b4 41 53				.dword	$5341b492
>4579	e7 00					.byte	$e7,$00
.457b	20 25 51	jsr $5125		jsr	FloatCompare
.457e	20 1d 51	jsr $511d		jsr	CompareGreaterEqual
.4581	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>4584	01 00 00 00				.dword	$00000001
>4588	00 80					.byte	$00,$80
.458a	20 25 51	jsr $5125		jsr	FloatCompare
.458d	20 ef 50	jsr $50ef		jsr	CompareEqual
.4590	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4593	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 41.62833077
>4596	92 b4 41 53				.dword	$5341b492
>459a	e7 00					.byte	$e7,$00
.459c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 41.62833077
>459f	92 b4 41 53				.dword	$5341b492
>45a3	e7 00					.byte	$e7,$00
.45a5	20 25 51	jsr $5125		jsr	FloatCompare
.45a8	20 05 51	jsr $5105		jsr	CompareLess
.45ab	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>45ae	00 00 00 00				.dword	$00000000
>45b2	00 00					.byte	$00,$00
.45b4	20 25 51	jsr $5125		jsr	FloatCompare
.45b7	20 ef 50	jsr $50ef		jsr	CompareEqual
.45ba	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.45bd	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 41.62833077
>45c0	92 b4 41 53				.dword	$5341b492
>45c4	e7 00					.byte	$e7,$00
.45c6	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 41.62833077
>45c9	92 b4 41 53				.dword	$5341b492
>45cd	e7 00					.byte	$e7,$00
.45cf	20 25 51	jsr $5125		jsr	FloatCompare
.45d2	20 15 51	jsr $5115		jsr	CompareLessEqual
.45d5	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>45d8	01 00 00 00				.dword	$00000001
>45dc	00 80					.byte	$00,$80
.45de	20 25 51	jsr $5125		jsr	FloatCompare
.45e1	20 ef 50	jsr $50ef		jsr	CompareEqual
.45e4	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.45e7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 41.62833077
>45ea	92 b4 41 53				.dword	$5341b492
>45ee	e7 00					.byte	$e7,$00
.45f0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 41.62833077
>45f3	92 b4 41 53				.dword	$5341b492
>45f7	e7 00					.byte	$e7,$00
.45f9	20 25 51	jsr $5125		jsr	FloatCompare
.45fc	20 ef 50	jsr $50ef		jsr	CompareEqual
.45ff	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>4602	01 00 00 00				.dword	$00000001
>4606	00 80					.byte	$00,$80
.4608	20 25 51	jsr $5125		jsr	FloatCompare
.460b	20 ef 50	jsr $50ef		jsr	CompareEqual
.460e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4611	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 41.62833077
>4614	92 b4 41 53				.dword	$5341b492
>4618	e7 00					.byte	$e7,$00
.461a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 41.62833077
>461d	92 b4 41 53				.dword	$5341b492
>4621	e7 00					.byte	$e7,$00
.4623	20 25 51	jsr $5125		jsr	FloatCompare
.4626	20 ff 50	jsr $50ff		jsr	CompareNotEqual
.4629	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>462c	00 00 00 00				.dword	$00000000
>4630	00 00					.byte	$00,$00
.4632	20 25 51	jsr $5125		jsr	FloatCompare
.4635	20 ef 50	jsr $50ef		jsr	CompareEqual
.4638	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.463b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -17840
>463e	b0 45 00 00				.dword	$000045b0
>4642	00 80					.byte	$00,$80
.4644	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -46377
>4647	29 b5 00 00				.dword	$0000b529
>464b	00 80					.byte	$00,$80
.464d	20 64 50	jsr $5064		jsr	FloatAdd
.4650	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -64217
>4653	d9 fa 00 00				.dword	$0000fad9
>4657	00 80					.byte	$00,$80
.4659	20 25 51	jsr $5125		jsr	FloatCompare
.465c	20 ef 50	jsr $50ef		jsr	CompareEqual
.465f	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4662	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -17840
>4665	b0 45 00 00				.dword	$000045b0
>4669	00 80					.byte	$00,$80
.466b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -46377
>466e	29 b5 00 00				.dword	$0000b529
>4672	00 80					.byte	$00,$80
.4674	20 5e 50	jsr $505e		jsr	FloatSubtract
.4677	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 28537
>467a	79 6f 00 00				.dword	$00006f79
>467e	00 00					.byte	$00,$00
.4680	20 25 51	jsr $5125		jsr	FloatCompare
.4683	20 ef 50	jsr $50ef		jsr	CompareEqual
.4686	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4689	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -17840
>468c	b0 45 00 00				.dword	$000045b0
>4690	00 80					.byte	$00,$80
.4692	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -46377
>4695	29 b5 00 00				.dword	$0000b529
>4699	00 80					.byte	$00,$80
.469b	20 00 53	jsr $5300		jsr	FloatMultiply
.469e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 827365680
>46a1	30 99 50 31				.dword	$31509930
>46a5	00 00					.byte	$00,$00
.46a7	20 25 51	jsr $5125		jsr	FloatCompare
.46aa	20 ef 50	jsr $50ef		jsr	CompareEqual
.46ad	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.46b0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -17840
>46b3	b0 45 00 00				.dword	$000045b0
>46b7	00 80					.byte	$00,$80
.46b9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -46377
>46bc	29 b5 00 00				.dword	$0000b529
>46c0	00 80					.byte	$00,$80
.46c2	20 89 51	jsr $5189		jsr	FloatDivide
.46c5	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0.38467344
>46c8	64 f5 79 62				.dword	$6279f564
>46cc	e0 00					.byte	$e0,$00
.46ce	20 25 51	jsr $5125		jsr	FloatCompare
.46d1	20 ef 50	jsr $50ef		jsr	CompareEqual
.46d4	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.46d7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -46377
>46da	29 b5 00 00				.dword	$0000b529
>46de	00 80					.byte	$00,$80
.46e0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -46377
>46e3	29 b5 00 00				.dword	$0000b529
>46e7	00 80					.byte	$00,$80
.46e9	20 25 51	jsr $5125		jsr	FloatCompare
.46ec	20 ef 50	jsr $50ef		jsr	CompareEqual
.46ef	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>46f2	01 00 00 00				.dword	$00000001
>46f6	00 80					.byte	$00,$80
.46f8	20 25 51	jsr $5125		jsr	FloatCompare
.46fb	20 ef 50	jsr $50ef		jsr	CompareEqual
.46fe	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4701	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -46377
>4704	29 b5 00 00				.dword	$0000b529
>4708	00 80					.byte	$00,$80
.470a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -46377
>470d	29 b5 00 00				.dword	$0000b529
>4711	00 80					.byte	$00,$80
.4713	20 25 51	jsr $5125		jsr	FloatCompare
.4716	20 ff 50	jsr $50ff		jsr	CompareNotEqual
.4719	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>471c	00 00 00 00				.dword	$00000000
>4720	00 00					.byte	$00,$00
.4722	20 25 51	jsr $5125		jsr	FloatCompare
.4725	20 ef 50	jsr $50ef		jsr	CompareEqual
.4728	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.472b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -46377
>472e	29 b5 00 00				.dword	$0000b529
>4732	00 80					.byte	$00,$80
.4734	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -46377
>4737	29 b5 00 00				.dword	$0000b529
>473b	00 80					.byte	$00,$80
.473d	20 25 51	jsr $5125		jsr	FloatCompare
.4740	20 0d 51	jsr $510d		jsr	CompareGreater
.4743	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>4746	00 00 00 00				.dword	$00000000
>474a	00 00					.byte	$00,$00
.474c	20 25 51	jsr $5125		jsr	FloatCompare
.474f	20 ef 50	jsr $50ef		jsr	CompareEqual
.4752	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4755	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -46377
>4758	29 b5 00 00				.dword	$0000b529
>475c	00 80					.byte	$00,$80
.475e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -46377
>4761	29 b5 00 00				.dword	$0000b529
>4765	00 80					.byte	$00,$80
.4767	20 25 51	jsr $5125		jsr	FloatCompare
.476a	20 1d 51	jsr $511d		jsr	CompareGreaterEqual
.476d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>4770	01 00 00 00				.dword	$00000001
>4774	00 80					.byte	$00,$80
.4776	20 25 51	jsr $5125		jsr	FloatCompare
.4779	20 ef 50	jsr $50ef		jsr	CompareEqual
.477c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.477f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -46377
>4782	29 b5 00 00				.dword	$0000b529
>4786	00 80					.byte	$00,$80
.4788	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -46377
>478b	29 b5 00 00				.dword	$0000b529
>478f	00 80					.byte	$00,$80
.4791	20 25 51	jsr $5125		jsr	FloatCompare
.4794	20 05 51	jsr $5105		jsr	CompareLess
.4797	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>479a	00 00 00 00				.dword	$00000000
>479e	00 00					.byte	$00,$00
.47a0	20 25 51	jsr $5125		jsr	FloatCompare
.47a3	20 ef 50	jsr $50ef		jsr	CompareEqual
.47a6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.47a9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -46377
>47ac	29 b5 00 00				.dword	$0000b529
>47b0	00 80					.byte	$00,$80
.47b2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -46377
>47b5	29 b5 00 00				.dword	$0000b529
>47b9	00 80					.byte	$00,$80
.47bb	20 25 51	jsr $5125		jsr	FloatCompare
.47be	20 15 51	jsr $5115		jsr	CompareLessEqual
.47c1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>47c4	01 00 00 00				.dword	$00000001
>47c8	00 80					.byte	$00,$80
.47ca	20 25 51	jsr $5125		jsr	FloatCompare
.47cd	20 ef 50	jsr $50ef		jsr	CompareEqual
.47d0	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.47d3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -49.42909209
>47d6	f5 b1 db 62				.dword	$62dbb1f5
>47da	e7 80					.byte	$e7,$80
.47dc	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 36.52207014
>47df	c7 4c 0b 49				.dword	$490b4cc7
>47e3	e7 00					.byte	$e7,$00
.47e5	20 64 50	jsr $5064		jsr	FloatAdd
.47e8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -12.90702195
>47eb	b9 94 41 67				.dword	$674194b9
>47ef	e5 80					.byte	$e5,$80
.47f1	20 25 51	jsr $5125		jsr	FloatCompare
.47f4	20 ef 50	jsr $50ef		jsr	CompareEqual
.47f7	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.47fa	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -49.42909209
>47fd	f5 b1 db 62				.dword	$62dbb1f5
>4801	e7 80					.byte	$e7,$80
.4803	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 36.52207014
>4806	c7 4c 0b 49				.dword	$490b4cc7
>480a	e7 00					.byte	$e7,$00
.480c	20 5e 50	jsr $505e		jsr	FloatSubtract
.480f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -85.95116223
>4812	5e 7f f3 55				.dword	$55f37f5e
>4816	e8 80					.byte	$e8,$80
.4818	20 25 51	jsr $5125		jsr	FloatCompare
.481b	20 ef 50	jsr $50ef		jsr	CompareEqual
.481e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4821	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -49.42909209
>4824	f5 b1 db 62				.dword	$62dbb1f5
>4828	e7 80					.byte	$e7,$80
.482a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 36.52207014
>482d	c7 4c 0b 49				.dword	$490b4cc7
>4831	e7 00					.byte	$e7,$00
.4833	20 00 53	jsr $5300		jsr	FloatMultiply
.4836	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1805.25276809
>4839	57 0b d4 70				.dword	$70d40b57
>483d	ec 80					.byte	$ec,$80
.483f	20 25 51	jsr $5125		jsr	FloatCompare
.4842	20 ef 50	jsr $50ef		jsr	CompareEqual
.4845	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4848	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -49.42909209
>484b	f5 b1 db 62				.dword	$62dbb1f5
>484f	e7 80					.byte	$e7,$80
.4851	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 36.52207014
>4854	c7 4c 0b 49				.dword	$490b4cc7
>4858	e7 00					.byte	$e7,$00
.485a	20 89 51	jsr $5189		jsr	FloatDivide
.485d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1.35340335
>4860	16 29 9e 56				.dword	$569e2916
>4864	e2 80					.byte	$e2,$80
.4866	20 25 51	jsr $5125		jsr	FloatCompare
.4869	20 ef 50	jsr $50ef		jsr	CompareEqual
.486c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.486f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -0.46529521
>4872	3e 96 1d 77				.dword	$771d963e
>4876	e0 80					.byte	$e0,$80
.4878	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -0.46529521
>487b	3e 96 1d 77				.dword	$771d963e
>487f	e0 80					.byte	$e0,$80
.4881	20 25 51	jsr $5125		jsr	FloatCompare
.4884	20 0d 51	jsr $510d		jsr	CompareGreater
.4887	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>488a	00 00 00 00				.dword	$00000000
>488e	00 00					.byte	$00,$00
.4890	20 25 51	jsr $5125		jsr	FloatCompare
.4893	20 ef 50	jsr $50ef		jsr	CompareEqual
.4896	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4899	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -0.46529521
>489c	3e 96 1d 77				.dword	$771d963e
>48a0	e0 80					.byte	$e0,$80
.48a2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -0.46529521
>48a5	3e 96 1d 77				.dword	$771d963e
>48a9	e0 80					.byte	$e0,$80
.48ab	20 25 51	jsr $5125		jsr	FloatCompare
.48ae	20 1d 51	jsr $511d		jsr	CompareGreaterEqual
.48b1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>48b4	01 00 00 00				.dword	$00000001
>48b8	00 80					.byte	$00,$80
.48ba	20 25 51	jsr $5125		jsr	FloatCompare
.48bd	20 ef 50	jsr $50ef		jsr	CompareEqual
.48c0	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.48c3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -0.46529521
>48c6	3e 96 1d 77				.dword	$771d963e
>48ca	e0 80					.byte	$e0,$80
.48cc	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -0.46529521
>48cf	3e 96 1d 77				.dword	$771d963e
>48d3	e0 80					.byte	$e0,$80
.48d5	20 25 51	jsr $5125		jsr	FloatCompare
.48d8	20 05 51	jsr $5105		jsr	CompareLess
.48db	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>48de	00 00 00 00				.dword	$00000000
>48e2	00 00					.byte	$00,$00
.48e4	20 25 51	jsr $5125		jsr	FloatCompare
.48e7	20 ef 50	jsr $50ef		jsr	CompareEqual
.48ea	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.48ed	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -0.46529521
>48f0	3e 96 1d 77				.dword	$771d963e
>48f4	e0 80					.byte	$e0,$80
.48f6	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -0.46529521
>48f9	3e 96 1d 77				.dword	$771d963e
>48fd	e0 80					.byte	$e0,$80
.48ff	20 25 51	jsr $5125		jsr	FloatCompare
.4902	20 15 51	jsr $5115		jsr	CompareLessEqual
.4905	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>4908	01 00 00 00				.dword	$00000001
>490c	00 80					.byte	$00,$80
.490e	20 25 51	jsr $5125		jsr	FloatCompare
.4911	20 ef 50	jsr $50ef		jsr	CompareEqual
.4914	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4917	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -0.46529521
>491a	3e 96 1d 77				.dword	$771d963e
>491e	e0 80					.byte	$e0,$80
.4920	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -0.46529521
>4923	3e 96 1d 77				.dword	$771d963e
>4927	e0 80					.byte	$e0,$80
.4929	20 25 51	jsr $5125		jsr	FloatCompare
.492c	20 ef 50	jsr $50ef		jsr	CompareEqual
.492f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>4932	01 00 00 00				.dword	$00000001
>4936	00 80					.byte	$00,$80
.4938	20 25 51	jsr $5125		jsr	FloatCompare
.493b	20 ef 50	jsr $50ef		jsr	CompareEqual
.493e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4941	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -0.46529521
>4944	3e 96 1d 77				.dword	$771d963e
>4948	e0 80					.byte	$e0,$80
.494a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -0.46529521
>494d	3e 96 1d 77				.dword	$771d963e
>4951	e0 80					.byte	$e0,$80
.4953	20 25 51	jsr $5125		jsr	FloatCompare
.4956	20 ff 50	jsr $50ff		jsr	CompareNotEqual
.4959	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>495c	00 00 00 00				.dword	$00000000
>4960	00 00					.byte	$00,$00
.4962	20 25 51	jsr $5125		jsr	FloatCompare
.4965	20 ef 50	jsr $50ef		jsr	CompareEqual
.4968	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.496b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 4367
>496e	0f 11 00 00				.dword	$0000110f
>4972	00 00					.byte	$00,$00
.4974	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 42671
>4977	af a6 00 00				.dword	$0000a6af
>497b	00 00					.byte	$00,$00
.497d	20 64 50	jsr $5064		jsr	FloatAdd
.4980	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 47038
>4983	be b7 00 00				.dword	$0000b7be
>4987	00 00					.byte	$00,$00
.4989	20 25 51	jsr $5125		jsr	FloatCompare
.498c	20 ef 50	jsr $50ef		jsr	CompareEqual
.498f	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4992	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 4367
>4995	0f 11 00 00				.dword	$0000110f
>4999	00 00					.byte	$00,$00
.499b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 42671
>499e	af a6 00 00				.dword	$0000a6af
>49a2	00 00					.byte	$00,$00
.49a4	20 5e 50	jsr $505e		jsr	FloatSubtract
.49a7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -38304
>49aa	a0 95 00 00				.dword	$000095a0
>49ae	00 80					.byte	$00,$80
.49b0	20 25 51	jsr $5125		jsr	FloatCompare
.49b3	20 ef 50	jsr $50ef		jsr	CompareEqual
.49b6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.49b9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 4367
>49bc	0f 11 00 00				.dword	$0000110f
>49c0	00 00					.byte	$00,$00
.49c2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 42671
>49c5	af a6 00 00				.dword	$0000a6af
>49c9	00 00					.byte	$00,$00
.49cb	20 00 53	jsr $5300		jsr	FloatMultiply
.49ce	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 186344257
>49d1	41 63 1b 0b				.dword	$0b1b6341
>49d5	00 00					.byte	$00,$00
.49d7	20 25 51	jsr $5125		jsr	FloatCompare
.49da	20 ef 50	jsr $50ef		jsr	CompareEqual
.49dd	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.49e0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 4367
>49e3	0f 11 00 00				.dword	$0000110f
>49e7	00 00					.byte	$00,$00
.49e9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 42671
>49ec	af a6 00 00				.dword	$0000a6af
>49f0	00 00					.byte	$00,$00
.49f2	20 89 51	jsr $5189		jsr	FloatDivide
.49f5	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0.10234117
>49f8	a9 1f cc 68				.dword	$68cc1fa9
>49fc	de 00					.byte	$de,$00
.49fe	20 25 51	jsr $5125		jsr	FloatCompare
.4a01	20 ef 50	jsr $50ef		jsr	CompareEqual
.4a04	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4a07	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 42671
>4a0a	af a6 00 00				.dword	$0000a6af
>4a0e	00 00					.byte	$00,$00
.4a10	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 42671
>4a13	af a6 00 00				.dword	$0000a6af
>4a17	00 00					.byte	$00,$00
.4a19	20 25 51	jsr $5125		jsr	FloatCompare
.4a1c	20 ef 50	jsr $50ef		jsr	CompareEqual
.4a1f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>4a22	01 00 00 00				.dword	$00000001
>4a26	00 80					.byte	$00,$80
.4a28	20 25 51	jsr $5125		jsr	FloatCompare
.4a2b	20 ef 50	jsr $50ef		jsr	CompareEqual
.4a2e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4a31	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 42671
>4a34	af a6 00 00				.dword	$0000a6af
>4a38	00 00					.byte	$00,$00
.4a3a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 42671
>4a3d	af a6 00 00				.dword	$0000a6af
>4a41	00 00					.byte	$00,$00
.4a43	20 25 51	jsr $5125		jsr	FloatCompare
.4a46	20 ff 50	jsr $50ff		jsr	CompareNotEqual
.4a49	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>4a4c	00 00 00 00				.dword	$00000000
>4a50	00 00					.byte	$00,$00
.4a52	20 25 51	jsr $5125		jsr	FloatCompare
.4a55	20 ef 50	jsr $50ef		jsr	CompareEqual
.4a58	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4a5b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 42671
>4a5e	af a6 00 00				.dword	$0000a6af
>4a62	00 00					.byte	$00,$00
.4a64	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 42671
>4a67	af a6 00 00				.dword	$0000a6af
>4a6b	00 00					.byte	$00,$00
.4a6d	20 25 51	jsr $5125		jsr	FloatCompare
.4a70	20 0d 51	jsr $510d		jsr	CompareGreater
.4a73	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>4a76	00 00 00 00				.dword	$00000000
>4a7a	00 00					.byte	$00,$00
.4a7c	20 25 51	jsr $5125		jsr	FloatCompare
.4a7f	20 ef 50	jsr $50ef		jsr	CompareEqual
.4a82	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4a85	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 42671
>4a88	af a6 00 00				.dword	$0000a6af
>4a8c	00 00					.byte	$00,$00
.4a8e	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 42671
>4a91	af a6 00 00				.dword	$0000a6af
>4a95	00 00					.byte	$00,$00
.4a97	20 25 51	jsr $5125		jsr	FloatCompare
.4a9a	20 1d 51	jsr $511d		jsr	CompareGreaterEqual
.4a9d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>4aa0	01 00 00 00				.dword	$00000001
>4aa4	00 80					.byte	$00,$80
.4aa6	20 25 51	jsr $5125		jsr	FloatCompare
.4aa9	20 ef 50	jsr $50ef		jsr	CompareEqual
.4aac	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4aaf	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 42671
>4ab2	af a6 00 00				.dword	$0000a6af
>4ab6	00 00					.byte	$00,$00
.4ab8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 42671
>4abb	af a6 00 00				.dword	$0000a6af
>4abf	00 00					.byte	$00,$00
.4ac1	20 25 51	jsr $5125		jsr	FloatCompare
.4ac4	20 05 51	jsr $5105		jsr	CompareLess
.4ac7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>4aca	00 00 00 00				.dword	$00000000
>4ace	00 00					.byte	$00,$00
.4ad0	20 25 51	jsr $5125		jsr	FloatCompare
.4ad3	20 ef 50	jsr $50ef		jsr	CompareEqual
.4ad6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4ad9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 42671
>4adc	af a6 00 00				.dword	$0000a6af
>4ae0	00 00					.byte	$00,$00
.4ae2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 42671
>4ae5	af a6 00 00				.dword	$0000a6af
>4ae9	00 00					.byte	$00,$00
.4aeb	20 25 51	jsr $5125		jsr	FloatCompare
.4aee	20 15 51	jsr $5115		jsr	CompareLessEqual
.4af1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>4af4	01 00 00 00				.dword	$00000001
>4af8	00 80					.byte	$00,$80
.4afa	20 25 51	jsr $5125		jsr	FloatCompare
.4afd	20 ef 50	jsr $50ef		jsr	CompareEqual
.4b00	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4b03	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 22.29594233
>4b06	82 0b 2f 59				.dword	$592f0b82
>4b0a	e6 00					.byte	$e6,$00
.4b0c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 12.97821333
>4b0f	83 61 d3 67				.dword	$67d36183
>4b13	e5 00					.byte	$e5,$00
.4b15	20 64 50	jsr $5064		jsr	FloatAdd
.4b18	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 35.27415567
>4b1b	22 5e 8c 46				.dword	$468c5e22
>4b1f	e7 00					.byte	$e7,$00
.4b21	20 25 51	jsr $5125		jsr	FloatCompare
.4b24	20 ef 50	jsr $50ef		jsr	CompareEqual
.4b27	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4b2a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 22.29594233
>4b2d	82 0b 2f 59				.dword	$592f0b82
>4b31	e6 00					.byte	$e6,$00
.4b33	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 12.97821333
>4b36	83 61 d3 67				.dword	$67d36183
>4b3a	e5 00					.byte	$e5,$00
.4b3c	20 5e 50	jsr $505e		jsr	FloatSubtract
.4b3f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 9.317729
>4b42	80 b5 8a 4a				.dword	$4a8ab580
>4b46	e5 00					.byte	$e5,$00
.4b48	20 25 51	jsr $5125		jsr	FloatCompare
.4b4b	20 ef 50	jsr $50ef		jsr	CompareEqual
.4b4e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4b51	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 22.29594233
>4b54	82 0b 2f 59				.dword	$592f0b82
>4b58	e6 00					.byte	$e6,$00
.4b5a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 12.97821333
>4b5d	83 61 d3 67				.dword	$67d36183
>4b61	e5 00					.byte	$e5,$00
.4b63	20 00 53	jsr $5300		jsr	FloatMultiply
.4b66	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 289.36149603
>4b69	c0 22 57 48				.dword	$485722c0
>4b6d	ea 00					.byte	$ea,$00
.4b6f	20 25 51	jsr $5125		jsr	FloatCompare
.4b72	20 ef 50	jsr $50ef		jsr	CompareEqual
.4b75	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4b78	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 22.29594233
>4b7b	82 0b 2f 59				.dword	$592f0b82
>4b7f	e6 00					.byte	$e6,$00
.4b81	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 12.97821333
>4b84	83 61 d3 67				.dword	$67d36183
>4b88	e5 00					.byte	$e5,$00
.4b8a	20 89 51	jsr $5189		jsr	FloatDivide
.4b8d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 1.7179516
>4b90	45 eb f2 6d				.dword	$6df2eb45
>4b94	e2 00					.byte	$e2,$00
.4b96	20 25 51	jsr $5125		jsr	FloatCompare
.4b99	20 ef 50	jsr $50ef		jsr	CompareEqual
.4b9c	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4b9f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -62.36405605
>4ba2	8e 65 ba 7c				.dword	$7cba658e
>4ba6	e7 80					.byte	$e7,$80
.4ba8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -62.36405605
>4bab	8e 65 ba 7c				.dword	$7cba658e
>4baf	e7 80					.byte	$e7,$80
.4bb1	20 25 51	jsr $5125		jsr	FloatCompare
.4bb4	20 0d 51	jsr $510d		jsr	CompareGreater
.4bb7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>4bba	00 00 00 00				.dword	$00000000
>4bbe	00 00					.byte	$00,$00
.4bc0	20 25 51	jsr $5125		jsr	FloatCompare
.4bc3	20 ef 50	jsr $50ef		jsr	CompareEqual
.4bc6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4bc9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -62.36405605
>4bcc	8e 65 ba 7c				.dword	$7cba658e
>4bd0	e7 80					.byte	$e7,$80
.4bd2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -62.36405605
>4bd5	8e 65 ba 7c				.dword	$7cba658e
>4bd9	e7 80					.byte	$e7,$80
.4bdb	20 25 51	jsr $5125		jsr	FloatCompare
.4bde	20 1d 51	jsr $511d		jsr	CompareGreaterEqual
.4be1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>4be4	01 00 00 00				.dword	$00000001
>4be8	00 80					.byte	$00,$80
.4bea	20 25 51	jsr $5125		jsr	FloatCompare
.4bed	20 ef 50	jsr $50ef		jsr	CompareEqual
.4bf0	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4bf3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -62.36405605
>4bf6	8e 65 ba 7c				.dword	$7cba658e
>4bfa	e7 80					.byte	$e7,$80
.4bfc	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -62.36405605
>4bff	8e 65 ba 7c				.dword	$7cba658e
>4c03	e7 80					.byte	$e7,$80
.4c05	20 25 51	jsr $5125		jsr	FloatCompare
.4c08	20 05 51	jsr $5105		jsr	CompareLess
.4c0b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>4c0e	00 00 00 00				.dword	$00000000
>4c12	00 00					.byte	$00,$00
.4c14	20 25 51	jsr $5125		jsr	FloatCompare
.4c17	20 ef 50	jsr $50ef		jsr	CompareEqual
.4c1a	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4c1d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -62.36405605
>4c20	8e 65 ba 7c				.dword	$7cba658e
>4c24	e7 80					.byte	$e7,$80
.4c26	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -62.36405605
>4c29	8e 65 ba 7c				.dword	$7cba658e
>4c2d	e7 80					.byte	$e7,$80
.4c2f	20 25 51	jsr $5125		jsr	FloatCompare
.4c32	20 15 51	jsr $5115		jsr	CompareLessEqual
.4c35	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>4c38	01 00 00 00				.dword	$00000001
>4c3c	00 80					.byte	$00,$80
.4c3e	20 25 51	jsr $5125		jsr	FloatCompare
.4c41	20 ef 50	jsr $50ef		jsr	CompareEqual
.4c44	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4c47	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -62.36405605
>4c4a	8e 65 ba 7c				.dword	$7cba658e
>4c4e	e7 80					.byte	$e7,$80
.4c50	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -62.36405605
>4c53	8e 65 ba 7c				.dword	$7cba658e
>4c57	e7 80					.byte	$e7,$80
.4c59	20 25 51	jsr $5125		jsr	FloatCompare
.4c5c	20 ef 50	jsr $50ef		jsr	CompareEqual
.4c5f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>4c62	01 00 00 00				.dword	$00000001
>4c66	00 80					.byte	$00,$80
.4c68	20 25 51	jsr $5125		jsr	FloatCompare
.4c6b	20 ef 50	jsr $50ef		jsr	CompareEqual
.4c6e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4c71	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -62.36405605
>4c74	8e 65 ba 7c				.dword	$7cba658e
>4c78	e7 80					.byte	$e7,$80
.4c7a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -62.36405605
>4c7d	8e 65 ba 7c				.dword	$7cba658e
>4c81	e7 80					.byte	$e7,$80
.4c83	20 25 51	jsr $5125		jsr	FloatCompare
.4c86	20 ff 50	jsr $50ff		jsr	CompareNotEqual
.4c89	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>4c8c	00 00 00 00				.dword	$00000000
>4c90	00 00					.byte	$00,$00
.4c92	20 25 51	jsr $5125		jsr	FloatCompare
.4c95	20 ef 50	jsr $50ef		jsr	CompareEqual
.4c98	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4c9b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -12822
>4c9e	16 32 00 00				.dword	$00003216
>4ca2	00 80					.byte	$00,$80
.4ca4	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7298
>4ca7	82 1c 00 00				.dword	$00001c82
>4cab	00 00					.byte	$00,$00
.4cad	20 64 50	jsr $5064		jsr	FloatAdd
.4cb0	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -5524
>4cb3	94 15 00 00				.dword	$00001594
>4cb7	00 80					.byte	$00,$80
.4cb9	20 25 51	jsr $5125		jsr	FloatCompare
.4cbc	20 ef 50	jsr $50ef		jsr	CompareEqual
.4cbf	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4cc2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -12822
>4cc5	16 32 00 00				.dword	$00003216
>4cc9	00 80					.byte	$00,$80
.4ccb	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7298
>4cce	82 1c 00 00				.dword	$00001c82
>4cd2	00 00					.byte	$00,$00
.4cd4	20 5e 50	jsr $505e		jsr	FloatSubtract
.4cd7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -20120
>4cda	98 4e 00 00				.dword	$00004e98
>4cde	00 80					.byte	$00,$80
.4ce0	20 25 51	jsr $5125		jsr	FloatCompare
.4ce3	20 ef 50	jsr $50ef		jsr	CompareEqual
.4ce6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4ce9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -12822
>4cec	16 32 00 00				.dword	$00003216
>4cf0	00 80					.byte	$00,$80
.4cf2	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7298
>4cf5	82 1c 00 00				.dword	$00001c82
>4cf9	00 00					.byte	$00,$00
.4cfb	20 00 53	jsr $5300		jsr	FloatMultiply
.4cfe	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -93574956
>4d01	2c d7 93 05				.dword	$0593d72c
>4d05	00 80					.byte	$00,$80
.4d07	20 25 51	jsr $5125		jsr	FloatCompare
.4d0a	20 ef 50	jsr $50ef		jsr	CompareEqual
.4d0d	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4d10	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -12822
>4d13	16 32 00 00				.dword	$00003216
>4d17	00 80					.byte	$00,$80
.4d19	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7298
>4d1c	82 1c 00 00				.dword	$00001c82
>4d20	00 00					.byte	$00,$00
.4d22	20 89 51	jsr $5189		jsr	FloatDivide
.4d25	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1.7569197
>4d28	53 5f 71 70				.dword	$70715f53
>4d2c	e2 80					.byte	$e2,$80
.4d2e	20 25 51	jsr $5125		jsr	FloatCompare
.4d31	20 ef 50	jsr $50ef		jsr	CompareEqual
.4d34	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4d37	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7298
>4d3a	82 1c 00 00				.dword	$00001c82
>4d3e	00 00					.byte	$00,$00
.4d40	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7298
>4d43	82 1c 00 00				.dword	$00001c82
>4d47	00 00					.byte	$00,$00
.4d49	20 25 51	jsr $5125		jsr	FloatCompare
.4d4c	20 ef 50	jsr $50ef		jsr	CompareEqual
.4d4f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>4d52	01 00 00 00				.dword	$00000001
>4d56	00 80					.byte	$00,$80
.4d58	20 25 51	jsr $5125		jsr	FloatCompare
.4d5b	20 ef 50	jsr $50ef		jsr	CompareEqual
.4d5e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4d61	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7298
>4d64	82 1c 00 00				.dword	$00001c82
>4d68	00 00					.byte	$00,$00
.4d6a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7298
>4d6d	82 1c 00 00				.dword	$00001c82
>4d71	00 00					.byte	$00,$00
.4d73	20 25 51	jsr $5125		jsr	FloatCompare
.4d76	20 ff 50	jsr $50ff		jsr	CompareNotEqual
.4d79	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>4d7c	00 00 00 00				.dword	$00000000
>4d80	00 00					.byte	$00,$00
.4d82	20 25 51	jsr $5125		jsr	FloatCompare
.4d85	20 ef 50	jsr $50ef		jsr	CompareEqual
.4d88	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4d8b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7298
>4d8e	82 1c 00 00				.dword	$00001c82
>4d92	00 00					.byte	$00,$00
.4d94	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7298
>4d97	82 1c 00 00				.dword	$00001c82
>4d9b	00 00					.byte	$00,$00
.4d9d	20 25 51	jsr $5125		jsr	FloatCompare
.4da0	20 0d 51	jsr $510d		jsr	CompareGreater
.4da3	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>4da6	00 00 00 00				.dword	$00000000
>4daa	00 00					.byte	$00,$00
.4dac	20 25 51	jsr $5125		jsr	FloatCompare
.4daf	20 ef 50	jsr $50ef		jsr	CompareEqual
.4db2	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4db5	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7298
>4db8	82 1c 00 00				.dword	$00001c82
>4dbc	00 00					.byte	$00,$00
.4dbe	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7298
>4dc1	82 1c 00 00				.dword	$00001c82
>4dc5	00 00					.byte	$00,$00
.4dc7	20 25 51	jsr $5125		jsr	FloatCompare
.4dca	20 1d 51	jsr $511d		jsr	CompareGreaterEqual
.4dcd	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>4dd0	01 00 00 00				.dword	$00000001
>4dd4	00 80					.byte	$00,$80
.4dd6	20 25 51	jsr $5125		jsr	FloatCompare
.4dd9	20 ef 50	jsr $50ef		jsr	CompareEqual
.4ddc	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4ddf	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7298
>4de2	82 1c 00 00				.dword	$00001c82
>4de6	00 00					.byte	$00,$00
.4de8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7298
>4deb	82 1c 00 00				.dword	$00001c82
>4def	00 00					.byte	$00,$00
.4df1	20 25 51	jsr $5125		jsr	FloatCompare
.4df4	20 05 51	jsr $5105		jsr	CompareLess
.4df7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>4dfa	00 00 00 00				.dword	$00000000
>4dfe	00 00					.byte	$00,$00
.4e00	20 25 51	jsr $5125		jsr	FloatCompare
.4e03	20 ef 50	jsr $50ef		jsr	CompareEqual
.4e06	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4e09	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7298
>4e0c	82 1c 00 00				.dword	$00001c82
>4e10	00 00					.byte	$00,$00
.4e12	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 7298
>4e15	82 1c 00 00				.dword	$00001c82
>4e19	00 00					.byte	$00,$00
.4e1b	20 25 51	jsr $5125		jsr	FloatCompare
.4e1e	20 15 51	jsr $5115		jsr	CompareLessEqual
.4e21	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>4e24	01 00 00 00				.dword	$00000001
>4e28	00 80					.byte	$00,$80
.4e2a	20 25 51	jsr $5125		jsr	FloatCompare
.4e2d	20 ef 50	jsr $50ef		jsr	CompareEqual
.4e30	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4e33	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -48.50400907
>4e36	7a 0d 02 61				.dword	$61020d7a
>4e3a	e7 80					.byte	$e7,$80
.4e3c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -47.93561189
>4e3f	86 08 df 5f				.dword	$5fdf0886
>4e43	e7 80					.byte	$e7,$80
.4e45	20 64 50	jsr $5064		jsr	FloatAdd
.4e48	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -96.43962096
>4e4b	00 8b 70 60				.dword	$60708b00
>4e4f	e8 80					.byte	$e8,$80
.4e51	20 25 51	jsr $5125		jsr	FloatCompare
.4e54	20 ef 50	jsr $50ef		jsr	CompareEqual
.4e57	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4e5a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -48.50400907
>4e5d	7a 0d 02 61				.dword	$61020d7a
>4e61	e7 80					.byte	$e7,$80
.4e63	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -47.93561189
>4e66	86 08 df 5f				.dword	$5fdf0886
>4e6a	e7 80					.byte	$e7,$80
.4e6c	20 5e 50	jsr $505e		jsr	FloatSubtract
.4e6f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -0.56839718
>4e72	22 3d c1 48				.dword	$48c13d22
>4e76	e1 80					.byte	$e1,$80
.4e78	20 25 51	jsr $5125		jsr	FloatCompare
.4e7b	20 ef 50	jsr $50ef		jsr	CompareEqual
.4e7e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4e81	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -48.50400907
>4e84	7a 0d 02 61				.dword	$61020d7a
>4e88	e7 80					.byte	$e7,$80
.4e8a	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -47.93561189
>4e8d	86 08 df 5f				.dword	$5fdf0886
>4e91	e7 80					.byte	$e7,$80
.4e93	20 00 53	jsr $5300		jsr	FloatMultiply
.4e96	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 2325.06935392
>4e99	09 8e a8 48				.dword	$48a88e09
>4e9d	ed 00					.byte	$ed,$00
.4e9f	20 25 51	jsr $5125		jsr	FloatCompare
.4ea2	20 ef 50	jsr $50ef		jsr	CompareEqual
.4ea5	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4ea8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -48.50400907
>4eab	7a 0d 02 61				.dword	$61020d7a
>4eaf	e7 80					.byte	$e7,$80
.4eb1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -47.93561189
>4eb4	86 08 df 5f				.dword	$5fdf0886
>4eb8	e7 80					.byte	$e7,$80
.4eba	20 89 51	jsr $5189		jsr	FloatDivide
.4ebd	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 1.01185751
>4ec0	00 46 c2 40				.dword	$40c24600
>4ec4	e2 00					.byte	$e2,$00
.4ec6	20 25 51	jsr $5125		jsr	FloatCompare
.4ec9	20 ef 50	jsr $50ef		jsr	CompareEqual
.4ecc	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4ecf	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -57.13679436
>4ed2	e9 09 46 72				.dword	$724609e9
>4ed6	e7 80					.byte	$e7,$80
.4ed8	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -57.13679436
>4edb	e9 09 46 72				.dword	$724609e9
>4edf	e7 80					.byte	$e7,$80
.4ee1	20 25 51	jsr $5125		jsr	FloatCompare
.4ee4	20 0d 51	jsr $510d		jsr	CompareGreater
.4ee7	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>4eea	00 00 00 00				.dword	$00000000
>4eee	00 00					.byte	$00,$00
.4ef0	20 25 51	jsr $5125		jsr	FloatCompare
.4ef3	20 ef 50	jsr $50ef		jsr	CompareEqual
.4ef6	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4ef9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -57.13679436
>4efc	e9 09 46 72				.dword	$724609e9
>4f00	e7 80					.byte	$e7,$80
.4f02	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -57.13679436
>4f05	e9 09 46 72				.dword	$724609e9
>4f09	e7 80					.byte	$e7,$80
.4f0b	20 25 51	jsr $5125		jsr	FloatCompare
.4f0e	20 1d 51	jsr $511d		jsr	CompareGreaterEqual
.4f11	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>4f14	01 00 00 00				.dword	$00000001
>4f18	00 80					.byte	$00,$80
.4f1a	20 25 51	jsr $5125		jsr	FloatCompare
.4f1d	20 ef 50	jsr $50ef		jsr	CompareEqual
.4f20	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4f23	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -57.13679436
>4f26	e9 09 46 72				.dword	$724609e9
>4f2a	e7 80					.byte	$e7,$80
.4f2c	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -57.13679436
>4f2f	e9 09 46 72				.dword	$724609e9
>4f33	e7 80					.byte	$e7,$80
.4f35	20 25 51	jsr $5125		jsr	FloatCompare
.4f38	20 05 51	jsr $5105		jsr	CompareLess
.4f3b	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>4f3e	00 00 00 00				.dword	$00000000
>4f42	00 00					.byte	$00,$00
.4f44	20 25 51	jsr $5125		jsr	FloatCompare
.4f47	20 ef 50	jsr $50ef		jsr	CompareEqual
.4f4a	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4f4d	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -57.13679436
>4f50	e9 09 46 72				.dword	$724609e9
>4f54	e7 80					.byte	$e7,$80
.4f56	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -57.13679436
>4f59	e9 09 46 72				.dword	$724609e9
>4f5d	e7 80					.byte	$e7,$80
.4f5f	20 25 51	jsr $5125		jsr	FloatCompare
.4f62	20 15 51	jsr $5115		jsr	CompareLessEqual
.4f65	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>4f68	01 00 00 00				.dword	$00000001
>4f6c	00 80					.byte	$00,$80
.4f6e	20 25 51	jsr $5125		jsr	FloatCompare
.4f71	20 ef 50	jsr $50ef		jsr	CompareEqual
.4f74	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4f77	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -57.13679436
>4f7a	e9 09 46 72				.dword	$724609e9
>4f7e	e7 80					.byte	$e7,$80
.4f80	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -57.13679436
>4f83	e9 09 46 72				.dword	$724609e9
>4f87	e7 80					.byte	$e7,$80
.4f89	20 25 51	jsr $5125		jsr	FloatCompare
.4f8c	20 ef 50	jsr $50ef		jsr	CompareEqual
.4f8f	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -1
>4f92	01 00 00 00				.dword	$00000001
>4f96	00 80					.byte	$00,$80
.4f98	20 25 51	jsr $5125		jsr	FloatCompare
.4f9b	20 ef 50	jsr $50ef		jsr	CompareEqual
.4f9e	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck
.4fa1	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -57.13679436
>4fa4	e9 09 46 72				.dword	$724609e9
>4fa8	e7 80					.byte	$e7,$80
.4faa	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; -57.13679436
>4fad	e9 09 46 72				.dword	$724609e9
>4fb1	e7 80					.byte	$e7,$80
.4fb3	20 25 51	jsr $5125		jsr	FloatCompare
.4fb6	20 ff 50	jsr $50ff		jsr	CompareNotEqual
.4fb9	20 dc 4f	jsr $4fdc		jsr	FPPushConstant	; 0
>4fbc	00 00 00 00				.dword	$00000000
>4fc0	00 00					.byte	$00,$00
.4fc2	20 25 51	jsr $5125		jsr	FloatCompare
.4fc5	20 ef 50	jsr $50ef		jsr	CompareEqual
.4fc8	20 cc 4f	jsr $4fcc		jsr	FPAssertCheck

;******  Return to file: testing/testing.asm

.4fcb	60		rts				rts
.4fcc					FPAssertCheck:
.4fcc	e0 00		cpx #$00			cpx 	#0
.4fce	d0 06		bne $4fd6			bne 	_FPACFail
.4fd0	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.4fd2	f0 02		beq $4fd6			beq 	_FPACFail
.4fd4	ca		dex				dex
.4fd5	60		rts				rts
.4fd6					_FPACFail:
>4fd6	db						.byte 	$DB 						; causes a break in the emulator
.4fd7	80 fd		bra $4fd6			bra 	_FPACFail
.4fd9					FPAbs:
.4fd9	74 2e		stz $2e,x			stz 	NSStatus,x
.4fdb	60		rts				rts
.4fdc					FPPushConstant:
.4fdc	e8		inx				inx
.4fdd	68		pla				pla
.4fde	7a		ply				ply
.4fdf	85 28		sta $28				sta 	zTemp0
.4fe1	84 29		sty $29				sty 	zTemp0+1
.4fe3	a0 01		ldy #$01			ldy 	#1
.4fe5	b1 28		lda ($28),y			lda 	(zTemp0),y
.4fe7	95 3a		sta $3a,x			sta 	NSMantissa0,x
.4fe9	c8		iny				iny
.4fea	b1 28		lda ($28),y			lda 	(zTemp0),y
.4fec	95 46		sta $46,x			sta 	NSMantissa1,x
.4fee	c8		iny				iny
.4fef	b1 28		lda ($28),y			lda 	(zTemp0),y
.4ff1	95 52		sta $52,x			sta 	NSMantissa2,x
.4ff3	c8		iny				iny
.4ff4	b1 28		lda ($28),y			lda 	(zTemp0),y
.4ff6	95 5e		sta $5e,x			sta 	NSMantissa3,x
.4ff8	c8		iny				iny
.4ff9	b1 28		lda ($28),y			lda 	(zTemp0),y
.4ffb	95 6a		sta $6a,x			sta 	NSExponent,x
.4ffd	c8		iny				iny
.4ffe	b1 28		lda ($28),y			lda 	(zTemp0),y
.5000	95 2e		sta $2e,x			sta 	NSStatus,x
.5002	a5 28		lda $28				lda 	zTemp0
.5004	a4 29		ldy $29				ldy 	zTemp0+1
.5006	18		clc				clc
.5007	69 06		adc #$06			adc 	#6
.5009	90 01		bcc $500c			bcc 	_FPPCNoCarry
.500b	c8		iny				iny
.500c					_FPPCNoCarry:
.500c	5a		phy				phy
.500d	48		pha				pha
.500e	60		rts				rts

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/common.library

=$1000					CodeStart = $1000
=$22					ZeroPageMandatory = $22
=$400					MemoryStorage = $400
.0022					codePtr:
>0022							.fill 	2
.0024					codePage:
>0024							.fill 	1
.0025					objPtr:
>0025							.fill 	2
.0027					objPage:
>0027							.fill 	1
.0028					zTemp0:
>0028							.fill 	2
.002a					zTemp1:
>002a							.fill 	2
.002c					zTemp2:
>002c							.fill 	2
=$80					PCD_STARTBINARY = $80
=$8d					PCD_ENDBINARY = $8d
=$8d					PCD_STARTCOMMAND = $8d
=$ca					PCD_ENDCOMMAND = $ca
=$ca					PCD_STARTSYSTEM = $ca
=$d5					PCD_ENDSYSTEM = $d5
=$80					PCD_PLUS             = $80 ; +
=$81					PCD_MINUS            = $81 ; -
=$82					PCD_TIMES            = $82 ; *
=$83					PCD_DIVIDE           = $83 ; /
=$84					PCD_POWER            = $84 ; ^
=$85					PCD_AND              = $85 ; and
=$86					PCD_OR               = $86 ; or
=$87					PCD_GREATER          = $87 ; >
=$88					PCD_EQUAL            = $88 ; =
=$89					PCD_LESS             = $89 ; <
=$8a					PCD_GREATEREQUAL     = $8a ; >=
=$8b					PCD_LESSGREATER      = $8b ; <>
=$8c					PCD_LESSEQUAL        = $8c ; <=
=$8d					PCD_ABS              = $8d ; abs
=$8e					PCD_ARRAY            = $8e ; array
=$8f					PCD_ASC              = $8f ; asc
=$90					PCD_ASSERT           = $90 ; assert
=$91					PCD_BINDOLLAR        = $91 ; bin$
=$92					PCD_PRINTCMD_CHR     = $92 ; print.chr
=$93					PCD_CHRDOLLAR        = $93 ; chr$
=$94					PCD_SCMD_CMP         = $94 ; s.cmp
=$95					PCD_FOR              = $95 ; for
=$96					PCD_FRE              = $96 ; fre
=$97					PCD_GET              = $97 ; get
=$98					PCD_RETURN           = $98 ; return
=$99					PCD_PSET             = $99 ; pset
=$9a					PCD_LINE             = $9a ; line
=$9b					PCD_RECT             = $9b ; rect
=$9c					PCD_FRAME            = $9c ; frame
=$9d					PCD_CHAR             = $9d ; char
=$9e					PCD_HEXDOLLAR        = $9e ; hex$
=$9f					PCD_INPUT            = $9f ; input
=$a0					PCD_INPUTDOLLAR      = $a0 ; input$
=$a1					PCD_INPUTCMD_START   = $a1 ; input.start
=$a2					PCD_LEN              = $a2 ; len
=$a3					PCD_FCMD_CMP         = $a3 ; f.cmp
=$a4					PCD_INTCMD_DIV       = $a4 ; int.div
=$a5					PCD_NEGATE           = $a5 ; negate
=$a6					PCD_NEWCMD_LINE      = $a6 ; new.line
=$a7					PCD_NEXT             = $a7 ; next
=$a8					PCD_NOT              = $a8 ; not
=$a9					PCD_ON               = $a9 ; on
=$aa					PCD_MOREON           = $aa ; moreon
=$ab					PCD_PEEK             = $ab ; peek
=$ac					PCD_POKE             = $ac ; poke
=$ad					PCD_POS              = $ad ; pos
=$ae					PCD_GETCHANNEL       = $ae ; getchannel
=$af					PCD_SETCHANNEL       = $af ; setchannel
=$b0					PCD_PRINTCMD_N       = $b0 ; print.n
=$b1					PCD_PRINTCMD_S       = $b1 ; print.s
=$b2					PCD_READ             = $b2 ; read
=$b3					PCD_READDOLLAR       = $b3 ; read$
=$b4					PCD_RND              = $b4 ; rnd
=$b5					PCD_CONCAT           = $b5 ; concat
=$b6					PCD_SGN              = $b6 ; sgn
=$b7					PCD_PRINTCMD_TAB     = $b7 ; print.tab
=$b8					PCD_PRINTCMD_POS     = $b8 ; print.pos
=$b9					PCD_PRINTCMD_SPC     = $b9 ; print.spc
=$ba					PCD_STRDOLLAR        = $ba ; str$
=$bb					PCD_LEFTDOLLAR       = $bb ; left$
=$bc					PCD_RIGHTDOLLAR      = $bc ; right$
=$bd					PCD_MIDDOLLAR        = $bd ; mid$
=$be					PCD_SWAP             = $be ; swap
=$bf					PCD_TI               = $bf ; ti
=$c0					PCD_TIDOLLAR         = $c0 ; ti$
=$c1					PCD_USR              = $c1 ; usr
=$c2					PCD_VAL              = $c2 ; val
=$c3					PCD_CLOSE            = $c3 ; close
=$c4					PCD_EXIT             = $c4 ; exit
=$c5					PCD_DEBUG            = $c5 ; debug
=$c6					PCD_OPEN             = $c6 ; open
=$c7					PCD_SCREEN           = $c7 ; screen
=$c8					PCD_VPOKE            = $c8 ; vpoke
=$c9					PCD_VPEEK            = $c9 ; vpeek
=$ca					PCD_CMD_SHIFT        = $ca ; .shift
=$cb					PCD_CMD_BYTE         = $cb ; .byte
=$cc					PCD_CMD_WORD         = $cc ; .word
=$cd					PCD_CMD_FLOAT        = $cd ; .float
=$ce					PCD_CMD_STRING       = $ce ; .string
=$cf					PCD_CMD_DATA         = $cf ; .data
=$d0					PCD_CMD_GOTO         = $d0 ; .goto
=$d1					PCD_CMD_GOSUB        = $d1 ; .gosub
=$d2					PCD_CMD_GOTOCMD_Z    = $d2 ; .goto.z
=$d3					PCD_CMD_GOTOCMD_NZ   = $d3 ; .goto.nz
=$d4					PCD_CMD_VARSPACE     = $d4 ; .varspace
=$ca80					PCD_CLR              = $ca80 ; clr
=$ca81					PCD_DIM              = $ca81 ; dim
=$ca82					PCD_END              = $ca82 ; end
=$ca83					PCD_JOY              = $ca83 ; joy
=$ca84					PCD_INT              = $ca84 ; int
=$ca85					PCD_SQR              = $ca85 ; sqr
=$ca86					PCD_LOG              = $ca86 ; log
=$ca87					PCD_EXP              = $ca87 ; exp
=$ca88					PCD_COS              = $ca88 ; cos
=$ca89					PCD_SIN              = $ca89 ; sin
=$ca8a					PCD_TAN              = $ca8a ; tan
=$ca8b					PCD_ATN              = $ca8b ; atn
=$ca8c					PCD_MOUSE            = $ca8c ; mouse
=$ca8d					PCD_MB               = $ca8d ; mb
=$ca8e					PCD_MX               = $ca8e ; mx
=$ca8f					PCD_MY               = $ca8f ; my
=$ca90					PCD_RESTORE          = $ca90 ; restore
=$ca91					PCD_STOP             = $ca91 ; stop
=$ca92					PCD_SYS              = $ca92 ; sys
=$ca93					PCD_TIDOLLARCMD_WRITE = $ca93 ; ti$.write
=$ca94					PCD_WAIT             = $ca94 ; wait
=$ca95					PCD_I2CPOKE          = $ca95 ; i2cpoke
=$ca96					PCD_I2CPEEK          = $ca96 ; i2cpeek
=$ca97					PCD_BANK             = $ca97 ; bank
=$ca98					PCD_SLEEP            = $ca98 ; sleep
=$ca99					PCD_FMINIT           = $ca99 ; fminit
=$ca9a					PCD_FMNOTE           = $ca9a ; fmnote
=$ca9b					PCD_FMDRUM           = $ca9b ; fmdrum
=$ca9c					PCD_FMINST           = $ca9c ; fminst
=$ca9d					PCD_FMVIB            = $ca9d ; fmvib
=$ca9e					PCD_FMFREQ           = $ca9e ; fmfreq
=$ca9f					PCD_FMVOL            = $ca9f ; fmvol
=$caa0					PCD_FMPAN            = $caa0 ; fmpan
=$caa1					PCD_FMPLAY           = $caa1 ; fmplay
=$caa2					PCD_FMCHORD          = $caa2 ; fmchord
=$caa3					PCD_FMPOKE           = $caa3 ; fmpoke
=$caa4					PCD_PSGINIT          = $caa4 ; psginit
=$caa5					PCD_PSGNOTE          = $caa5 ; psgnote
=$caa6					PCD_PSGVOL           = $caa6 ; psgvol
=$caa7					PCD_PSGWAV           = $caa7 ; psgwav
=$caa8					PCD_PSGFREQ          = $caa8 ; psgfreq
=$caa9					PCD_PSGPAN           = $caa9 ; psgpan
=$caaa					PCD_PSGPLAY          = $caaa ; psgplay
=$caab					PCD_PSGCHORD         = $caab ; psgchord
=$caac					PCD_CLS              = $caac ; cls
=$caad					PCD_LOCATE           = $caad ; locate
=$caae					PCD_COLOR            = $caae ; color
.500f					MoveObjectForward:
.500f	b2 25		lda ($25)			lda 	(objPtr) 					; get next
.5011	c9 ff		cmp #$ff			cmp 	#$FF
.5013	f0 36		beq $504b			beq 	_MOFEnd
.5015	c9 40		cmp #$40			cmp 	#$40 						; 00-3F
.5017	90 24		bcc $503d			bcc 	_MOFAdvance1 				; forward 1
.5019	a0 02		ldy #$02			ldy 	#2 							; 40-6F
.501b	c9 70		cmp #$70			cmp 	#$70 						; forward 2
.501d	90 20		bcc $503f			bcc 	_MOFAdvanceY
.501f	c9 ca		cmp #$ca			cmp 	#PCD_STARTSYSTEM 			; 70 - System tokens.
.5021	90 1a		bcc $503d			bcc 	_MOFAdvance1 				; forward 1
.5023	a8		tay				tay 								; read the size.
.5024	b9 89 4f	lda $4f89,y			lda 	MOFSizeTable-PCD_STARTSYSTEM,y
.5027	a8		tay				tay
.5028	c8		iny				iny 								; add 1 for the system token.
.5029	d0 14		bne $503f			bne 	_MOFAdvanceY 				; if 0, was $FF thus a string/data skip.
.502b	a0 01		ldy #$01			ldy 	#1 							; get length byte
.502d	b1 25		lda ($25),y			lda 	(objPtr),y
.502f	a8		tay				tay 								; into Y.
.5030	18		clc				clc
.5031	a5 25		lda $25				lda 	objPtr						; add 2 to the object pointer
.5033	69 02		adc #$02			adc 	#2
.5035	85 25		sta $25				sta 	objPtr
.5037	90 02		bcc $503b			bcc 	_MOFNoCarry1
.5039	e6 26		inc $26				inc 	objPtr+1
.503b					_MOFNoCarry1:
.503b	80 02		bra $503f			bra 	_MOFAdvanceY
.503d					_MOFAdvance1:
.503d	a0 01		ldy #$01			ldy 	#1
.503f					_MOFAdvanceY:
.503f	98		tya				tya 								; add X to objPtr
.5040	18		clc				clc
.5041	65 25		adc $25				adc 	objPtr
.5043	85 25		sta $25				sta 	objPtr
.5045	90 02		bcc $5049			bcc 	_MOFNoCarry2
.5047	e6 26		inc $26				inc 	objPtr+1
.5049					_MOFNoCarry2:
.5049	18		clc				clc 								; not completed.
.504a	60		rts				rts
.504b					_MOFEnd:
.504b	e6 25		inc $25				inc 	objPtr
.504d	d0 02		bne $5051			bne 	_MOFENoCarry
.504f	e6 26		inc $26				inc 	objPtr+1
.5051					_MOFENoCarry:
.5051	38		sec				sec
.5052	60		rts				rts
.5053					MOFSizeTable:
>5053	01					.byte	1         	; $ca .shift
>5054	01					.byte	1         	; $cb .byte
>5055	02					.byte	2         	; $cc .word
>5056	05					.byte	5         	; $cd .float
>5057	ff					.byte	255       	; $ce .string
>5058	ff					.byte	255       	; $cf .data
>5059	03					.byte	3         	; $d0 .goto
>505a	03					.byte	3         	; $d1 .gosub
>505b	03					.byte	3         	; $d2 .goto.z
>505c	03					.byte	3         	; $d3 .goto.nz
>505d	02					.byte	2         	; $d4 .varspace

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library

=12					MathStackSize = 12
=$40					NSSString = $40 							; string vs typemask
=$00					NSSIFloat = $00 							; ifloat vs typemask
=$20					NSSIInt16 = $20								; when set, a reference is a 16 bit reference (e.g. a%)
=$40					NSSTypeMask = $40
=$80					NSSArray = $80  							; array (in variable code)
.002e					NSStatus:
>002e							.fill 	MathStackSize
.003a					NSMantissa0:
>003a							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0046					NSMantissa1:
>0046							.fill 	MathStackSize
.0052					NSMantissa2:
>0052							.fill 	MathStackSize
.005e					NSMantissa3:
>005e							.fill 	MathStackSize
.006a					NSExponent:
>006a							.fill 	MathStackSize
.0400					numberBuffer:
>0400							.fill 	34
.505e					FloatSubtract:
.505e	b5 2e		lda $2e,x			lda 	NSStatus,x 					; negate top of stack
.5060	49 80		eor #$80			eor 	#$80
.5062	95 2e		sta $2e,x			sta 	NSStatus,x					; and fall through.
.5064					FloatAdd:
.5064	ca		dex				dex
.5065	b5 6a		lda $6a,x			lda 	NSExponent,x 				; can use optimised.
.5067	15 6b		ora $6b,x			ora 	NSExponent+1,x
.5069	15 5e		ora $5e,x			ora 	NSMantissa3,x
.506b	15 5f		ora $5f,x			ora 	NSMantissa3+1,x
.506d	d0 04		bne $5073			bne 	_FAUseFloat
.506f	20 00 54	jsr $5400			jsr 	FloatInt32Add 				; use the int32 one.
.5072	60		rts				rts
.5073					_FAUseFloat:
.5073	20 95 53	jsr $5395			jsr 	FloatNormalise 				; normalise S[X]
.5076	f0 51		beq $50c9			beq 	_FAReturn1
.5078	e8		inx				inx 								; normalise S[X+1]
.5079	20 95 53	jsr $5395			jsr 	FloatNormalise
.507c	ca		dex				dex
.507d	c9 00		cmp #$00			cmp 	#0
.507f	f0 60		beq $50e1			beq 	_FAExit 					; if so, just return A
.5081	b5 6a		lda $6a,x			lda 	NSExponent,x 				; are the exponents the same ?
.5083	d5 6b		cmp $6b,x			cmp 	NSExponent+1,x
.5085	f0 18		beq $509f			beq 	_FAExponentsEqual
.5087	b5 6a		lda $6a,x			lda 	NSExponent,x 				; work out the larger exponent
.5089	a8		tay				tay
.508a	38		sec				sec 								; do a signed comparison of the exponents.
.508b	f5 6b		sbc $6b,x			sbc 	NSExponent+1,x
.508d	50 02		bvc $5091			bvc 	_FANoSignedChange
.508f	49 80		eor #$80			eor 	#$80
.5091					_FANoSignedChange:
.5091	29 80		and #$80			and 	#$80
.5093	10 02		bpl $5097			bpl 	_FAHaveMax
.5095	b4 6b		ldy $6b,x			ldy 	NSExponent+1,x
.5097					_FAHaveMax:
.5097	20 e2 50	jsr $50e2			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.509a	e8		inx				inx
.509b	20 e2 50	jsr $50e2			jsr 	_FAShiftToExponent
.509e	ca		dex				dex
.509f					_FAExponentsEqual:
.509f	b5 2e		lda $2e,x			lda 	NSStatus,x 					; are the signs the same
.50a1	55 2f		eor $2f,x			eor 	NSStatus+1,x
.50a3	30 0e		bmi $50b3			bmi 	_FADifferentSigns
.50a5	20 cc 53	jsr $53cc			jsr 	FloatAddTopTwoStack 		; do the add of the mantissae
.50a8	b5 5e		lda $5e,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.50aa	10 35		bpl $50e1			bpl 	_FAExit 					; if no, we are done.
.50ac	20 59 56	jsr $5659			jsr 	FloatShiftRight 				; shift A right, renormalising it.
.50af	f6 6a		inc $6a,x			inc 	NSExponent,x 				; bump the exponent and exit
.50b1	80 2e		bra $50e1			bra 	_FAExit
.50b3					_FADifferentSigns:
.50b3	20 e6 53	jsr $53e6			jsr 	FloatSubTopTwoStack 		; subtract mantissa B from A
.50b6	b5 5e		lda $5e,x			lda 	NSMantissa3,x 				; is the result negative ?
.50b8	10 06		bpl $50c0			bpl 	_FACheckZero 				; if no, check for -0
.50ba	20 02 56	jsr $5602			jsr 	FloatNegate 					; netate result
.50bd	20 09 56	jsr $5609			jsr 	FloatNegateMantissa 			; negate (2'c) the mantissa
.50c0					_FACheckZero:
.50c0	20 62 56	jsr $5662			jsr 	FloatIsZero	 				; check for -0
.50c3	d0 1c		bne $50e1			bne 	_FAExit
.50c5	74 2e		stz $2e,x			stz 	NSStatus,x
.50c7	80 18		bra $50e1			bra 	_FAExit
.50c9					_FAReturn1:
.50c9	b5 3b		lda $3b,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.50cb	95 3a		sta $3a,x			sta 	NSMantissa0,x
.50cd	b5 47		lda $47,x			lda 	NSMantissa1+1,x
.50cf	95 46		sta $46,x			sta 	NSMantissa1,x
.50d1	b5 53		lda $53,x			lda 	NSMantissa2+1,x
.50d3	95 52		sta $52,x			sta 	NSMantissa2,x
.50d5	b5 5f		lda $5f,x			lda 	NSMantissa3+1,x
.50d7	95 5e		sta $5e,x			sta 	NSMantissa3,x
.50d9	b5 6b		lda $6b,x			lda 	NSExponent+1,x
.50db	95 6a		sta $6a,x			sta 	NSExponent,x
.50dd	b5 2f		lda $2f,x			lda 	NSStatus+1,x
.50df	95 2e		sta $2e,x			sta 	NSStatus,x
.50e1					_FAExit:
.50e1	60		rts				rts
.50e2					_FAShiftToExponent:
.50e2					_FAShiftToExponent2:
.50e2	98		tya				tya 								; compare Y to exponent
.50e3	d5 6a		cmp $6a,x			cmp 	NSExponent,x 				; reached the exponent required ?
.50e5	f0 07		beq $50ee			beq 	_FASEExit 					; exit if so.
.50e7	20 59 56	jsr $5659			jsr 	FloatShiftRight	 			; shift the mantissa right
.50ea	f6 6a		inc $6a,x			inc 	NSExponent,x 				; increment exponent
.50ec	80 f4		bra $50e2			bra 	_FAShiftToExponent2
.50ee					_FASEExit:
.50ee	60		rts				rts
.50ef					CompareEqual:
.50ef	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.50f1	d0 09		bne $50fc			bne 	ReturnFalse
.50f3					ReturnTrue:
.50f3	a9 01		lda #$01			lda 	#1
.50f5	95 3a		sta $3a,x			sta 	NSMantissa0,x
.50f7	a9 80		lda #$80			lda 	#$80
.50f9	95 2e		sta $2e,x			sta 	NSStatus,x
.50fb	60		rts				rts
.50fc					ReturnFalse:
.50fc	74 3a		stz $3a,x			stz 	NSMantissa0,x
.50fe	60		rts				rts
.50ff					CompareNotEqual:
.50ff	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.5101	d0 f0		bne $50f3			bne 	ReturnTrue
.5103	80 f7		bra $50fc			bra 	ReturnFalse
.5105					CompareLess:
.5105	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.5107	c9 ff		cmp #$ff			cmp 	#$FF
.5109	f0 e8		beq $50f3			beq 	ReturnTrue
.510b	80 ef		bra $50fc			bra 	ReturnFalse
.510d					CompareGreater:
.510d	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.510f	c9 01		cmp #$01			cmp 	#$01
.5111	f0 e0		beq $50f3			beq 	ReturnTrue
.5113	80 e7		bra $50fc			bra 	ReturnFalse
.5115					CompareLessEqual:
.5115	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.5117	c9 01		cmp #$01			cmp 	#$01
.5119	d0 d8		bne $50f3			bne 	ReturnTrue
.511b	80 df		bra $50fc			bra 	ReturnFalse
.511d					CompareGreaterEqual:
.511d	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.511f	c9 ff		cmp #$ff			cmp 	#$FF
.5121	d0 d0		bne $50f3			bne 	ReturnTrue
.5123	80 d7		bra $50fc			bra 	ReturnFalse
.5125					FloatCompare:
.5125	b5 6a		lda $6a,x			lda 	NSExponent,x 				; float comparison.
.5127	15 69		ora $69,x			ora 	NSExponent-1,x 				; integer if both integer.
.5129	48		pha				pha
.512a	20 5e 50	jsr $505e			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.512d	68		pla				pla
.512e	d0 0c		bne $513c			bne 	_FCCompareFloat
.5130	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.5132	15 46		ora $46,x			ora 	NSMantissa1,x
.5134	15 52		ora $52,x			ora 	NSMantissa2,x
.5136	15 5e		ora $5e,x			ora 	NSMantissa3,x
.5138	f0 14		beq $514e			beq 	_FCExit 					; if zero, return zero
.513a	80 0a		bra $5146			bra 	_FCSign
.513c					_FCCompareFloat:
.513c	b5 46		lda $46,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.513e	29 f0		and #$f0			and 	#$F0
.5140	15 52		ora $52,x			ora 	NSMantissa2,x
.5142	15 5e		ora $5e,x			ora 	NSMantissa3,x
.5144	f0 08		beq $514e			beq 	_FCExit 					; zero, so approximately identical
.5146					_FCSign:
.5146	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.5148	34 2e		bit $2e,x			bit 	NSStatus,x
.514a	10 02		bpl $514e			bpl 	_FCExit
.514c					_FCNegative:
.514c	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.514e					_FCExit:
.514e	20 42 56	jsr $5642			jsr 	FloatSetByte 				; set the result 255,0,1
.5151	60		rts				rts
.5152					FloatScalarTable:
>5152	66 66 66 66				.dword $66666666 ; 0.1
>5156	de					.byte $de
>5157	1f 85 eb 51				.dword $51eb851f ; 0.01
>515b	db					.byte $db
>515c	4c 37 89 41				.dword $4189374c ; 0.001
>5160	d8					.byte $d8
>5161	ac 8b db 68				.dword $68db8bac ; 0.0001
>5165	d4					.byte $d4
>5166	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>516a	d1					.byte $d1
>516b	83 de 1b 43				.dword $431bde83 ; 1e-06
>516f	ce					.byte $ce
>5170	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>5174	ca					.byte $ca
>5175	89 3b e6 55				.dword $55e63b89 ; 1e-08
>5179	c7					.byte $c7
>517a	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>517e	c4					.byte $c4
>517f	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>5183	c0					.byte $c0
>5184	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>5188	bd					.byte $bd
.5189					FloatDivide:
.5189	48		pha				pha
.518a	20 95 53	jsr $5395			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.518d	ca		dex				dex
.518e	c9 00		cmp #$00			cmp 	#0
.5190	f0 1e		beq $51b0			beq 	_FDZero
.5192	20 95 53	jsr $5395			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.5195	f0 16		beq $51ad			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.5197	20 f8 51	jsr $51f8			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.519a	20 c5 51	jsr $51c5			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.519d	20 95 53	jsr $5395			jsr		FloatNormalise 				; renormalise
.51a0	20 8b 53	jsr $538b			jsr 	FloatCalculateSign 			; calculate result sign
.51a3	b5 6a		lda $6a,x			lda 	NSExponent,x 				; calculate exponent
.51a5	38		sec				sec
.51a6	f5 6b		sbc $6b,x			sbc 	NSExponent+1,x
.51a8	38		sec				sec
.51a9	e9 1e		sbc #$1e			sbc 	#30
.51ab	95 6a		sta $6a,x			sta 	NSExponent,x
.51ad					_FDExit:
.51ad	68		pla				pla
.51ae	18		clc				clc
.51af	60		rts				rts
.51b0					_FDZero:
.51b0	68		pla				pla
.51b1	38		sec				sec
.51b2	60		rts				rts
.51b3					DivideInt32:
.51b3	20 7b 52	jsr $527b			jsr 	FloatIntegerPart 			; make both integers
.51b6	ca		dex				dex
.51b7	20 7b 52	jsr $527b			jsr 	FloatIntegerPart
.51ba	20 d6 51	jsr $51d6			jsr 	Int32Divide 				; divide
.51bd	20 c5 51	jsr $51c5			jsr 	NSMCopyPlusTwoToZero 		; copy result
.51c0	20 8b 53	jsr $538b			jsr 	FloatCalculateSign 			; calculate result sign
.51c3	18		clc				clc
.51c4	60		rts				rts
.51c5					NSMCopyPlusTwoToZero:
.51c5	b5 3c		lda $3c,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.51c7	95 3a		sta $3a,x			sta 	NSMantissa0,x
.51c9	b5 48		lda $48,x			lda 	NSMantissa1+2,x
.51cb	95 46		sta $46,x			sta 	NSMantissa1,x
.51cd	b5 54		lda $54,x			lda 	NSMantissa2+2,x
.51cf	95 52		sta $52,x			sta 	NSMantissa2,x
.51d1	b5 60		lda $60,x			lda 	NSMantissa3+2,x
.51d3	95 5e		sta $5e,x			sta 	NSMantissa3,x
.51d5	60		rts				rts
.51d6					Int32Divide:
.51d6	48		pha				pha 								; save AXY
.51d7	5a		phy				phy
.51d8	20 23 56	jsr $5623			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.51db	20 3c 56	jsr $563c			jsr 	FloatSetZeroMantissaOnly 	; set S[X] to zero
.51de	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.51e0					_I32DivideLoop:
.51e0	e8		inx				inx
.51e1	e8		inx				inx
.51e2	20 4f 56	jsr $564f			jsr 	FloatShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.51e5	ca		dex				dex
.51e6	ca		dex				dex
.51e7	20 50 56	jsr $5650			jsr 	FloatRotateLeft
.51ea	20 16 52	jsr $5216			jsr 	FloatDivideCheck 			; check if subtract possible
.51ed	90 02		bcc $51f1			bcc 	_I32DivideNoCarryIn
.51ef	f6 3c		inc $3c,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.51f1					_I32DivideNoCarryIn:
.51f1	88		dey				dey 								; loop round till division completed.
.51f2	d0 ec		bne $51e0			bne 	_I32DivideLoop
.51f4	7a		ply				ply 								; restore AXY and exit
.51f5	68		pla				pla
.51f6	18		clc				clc
.51f7	60		rts				rts
.51f8					Int32ShiftDivide:
.51f8	48		pha				pha 								; save AY
.51f9	5a		phy				phy
.51fa	e8		inx				inx 								; clear S[X+2]
.51fb	e8		inx				inx
.51fc	20 40 56	jsr $5640			jsr 	FloatSetZero
.51ff	ca		dex				dex
.5200	ca		dex				dex
.5201	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.5203					_I32SDLoop:
.5203	20 16 52	jsr $5216			jsr 	FloatDivideCheck 			; check if subtract possible
.5206	e8		inx				inx
.5207	e8		inx				inx
.5208	20 50 56	jsr $5650			jsr 	FloatRotateLeft				; shift 64 bit FPA left, rotating carry in
.520b	ca		dex				dex
.520c	ca		dex				dex
.520d	20 50 56	jsr $5650			jsr 	FloatRotateLeft
.5210	88		dey				dey 	 							; do 31 times
.5211	d0 f0		bne $5203			bne 	_I32SDLoop
.5213	7a		ply				ply 								; restore AY and exit
.5214	68		pla				pla
.5215	60		rts				rts
.5216					FloatDivideCheck:
.5216	20 e6 53	jsr $53e6			jsr 	FloatSubTopTwoStack 		; subtract Stack[X+1] from Stack[X+0]
.5219	b0 04		bcs $521f			bcs 	_DCSExit 					; if carry set, then could do, exit
.521b	20 cc 53	jsr $53cc			jsr 	FloatAddTopTwoStack 		; add it back in
.521e	18		clc				clc 								; and return False
.521f					_DCSExit:
.521f	60		rts				rts
.5220					FloatFractionalPart:
.5220	5a		phy				phy
.5221	b5 2e		lda $2e,x			lda 	NSStatus,x 					; take absolute value
.5223	29 7f		and #$7f			and 	#$7F
.5225	95 2e		sta $2e,x			sta 	NSStatus,x
.5227	20 95 53	jsr $5395			jsr 	FloatNormalise
.522a	b5 6a		lda $6a,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.522c	38		sec				sec
.522d	e9 e0		sbc #$e0			sbc 	#$E0
.522f	90 29		bcc $525a			bcc 	_FFPExit 					; already fractional
.5231	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.5233	b0 22		bcs $5257			bcs 	_FFPZero
.5235	a8		tay				tay 								; put count to do in Y
.5236	b5 5e		lda $5e,x			lda 	NSMantissa3,x 				; do each in turn.
.5238	20 5f 52	jsr $525f			jsr 	_FFPPartial
.523b	95 5e		sta $5e,x			sta 	NSMantissa3,x
.523d	b5 52		lda $52,x			lda 	NSMantissa2,x
.523f	20 5f 52	jsr $525f			jsr 	_FFPPartial
.5242	95 52		sta $52,x			sta 	NSMantissa2,x
.5244	b5 46		lda $46,x			lda 	NSMantissa1,x
.5246	20 5f 52	jsr $525f			jsr 	_FFPPartial
.5249	95 46		sta $46,x			sta 	NSMantissa1,x
.524b	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.524d	20 5f 52	jsr $525f			jsr 	_FFPPartial
.5250	95 3a		sta $3a,x			sta 	NSMantissa0,x
.5252	20 62 56	jsr $5662			jsr 	FloatIsZero 					; zeroed check.
.5255	d0 03		bne $525a			bne 	_FFPExit
.5257					_FFPZero:
.5257	20 40 56	jsr $5640			jsr 	FloatSetZero
.525a					_FFPExit:
.525a	20 95 53	jsr $5395			jsr 	FloatNormalise
.525d	7a		ply				ply
.525e	60		rts				rts
.525f					_FFPPartial:
.525f	c0 00		cpy #$00			cpy 	#0 							; no more to do
.5261	f0 17		beq $527a			beq 	_FFFPPExit
.5263	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.5265	b0 0c		bcs $5273			bcs 	_FFFPPWholeByte
.5267	5a		phy				phy
.5268					_FFFPPLeft:
.5268	0a		asl a				asl 	a
.5269	88		dey				dey
.526a	d0 fc		bne $5268			bne 	_FFFPPLeft
.526c	7a		ply				ply
.526d					_FFFPPRight:
.526d	4a		lsr a				lsr 	a
.526e	88		dey				dey
.526f	d0 fc		bne $526d			bne 	_FFFPPRight
.5271	80 07		bra $527a			bra 	_FFFPPExit
.5273					_FFFPPWholeByte:
.5273	98		tya				tya 								; subtract 8 from count
.5274	38		sec				sec
.5275	e9 08		sbc #$08			sbc 	#8
.5277	a8		tay				tay
.5278	a9 00		lda #$00			lda 	#0 							; and clear all
.527a					_FFFPPExit:
.527a	60		rts				rts
.527b					FloatIntegerPart:
.527b	48		pha				pha
.527c	b5 6a		lda $6a,x			lda 	NSExponent,x 				; is it integer already ?
.527e	f0 1d		beq $529d			beq 	_FIPExit 					; if so do nothing
.5280	20 62 56	jsr $5662			jsr 	FloatIsZero 				; is it zero ?
.5283	f0 15		beq $529a			beq 	_FIPZero 					; if so return zero.
.5285	20 95 53	jsr $5395			jsr 	FloatNormalise 				; normalise
.5288	f0 10		beq $529a			beq 	_FIPZero 					; normalised to zero, exit zero
.528a					_FIPShift:
.528a	b5 6a		lda $6a,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.528c	10 07		bpl $5295			bpl 	_FIPCheckZero
.528e	20 59 56	jsr $5659			jsr 	FloatShiftRight 			; shift mantissa right
.5291	f6 6a		inc $6a,x			inc 	NSExponent,x 				; bump exponent
.5293	80 f5		bra $528a			bra 	_FIPShift
.5295					_FIPCheckZero:
.5295	20 62 56	jsr $5662			jsr 	FloatIsZero 				; avoid -0 problem
.5298	d0 03		bne $529d			bne 	_FIPExit 					; set to zero if mantissa zero.
.529a					_FIPZero:
.529a	20 40 56	jsr $5640			jsr 	FloatSetZero
.529d					_FIPExit:
.529d	68		pla				pla
.529e	60		rts				rts
.529f					FloatIntegerPartDown:
.529f	48		pha				pha
.52a0	5a		phy				phy
.52a1	b5 6a		lda $6a,x			lda 	NSExponent,x 				; is it integer already ?
.52a3	f0 36		beq $52db			beq 	_FIPExit 					; if so do nothing
.52a5	20 62 56	jsr $5662			jsr 	FloatIsZero 				; is it zero ?
.52a8	f0 2e		beq $52d8			beq 	_FIPZero 					; if so return zero.
.52aa	20 95 53	jsr $5395			jsr 	FloatNormalise 				; normalise
.52ad	f0 29		beq $52d8			beq 	_FIPZero 					; normalised to zero, exit zero
.52af	a0 00		ldy #$00			ldy 	#0 							; reset the count of bits.
.52b1					_FIPShift:
.52b1	b5 6a		lda $6a,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.52b3	10 0a		bpl $52bf			bpl 	_FIPCheckDown
.52b5	20 59 56	jsr $5659			jsr 	FloatShiftRight 			; shift mantissa right
.52b8	90 01		bcc $52bb			bcc 	_FIPNoFrac 					; shifted a zero out ?
.52ba	c8		iny				iny
.52bb					_FIPNoFrac:
.52bb	f6 6a		inc $6a,x			inc 	NSExponent,x 				; bump exponent
.52bd	80 f2		bra $52b1			bra 	_FIPShift
.52bf					_FIPCheckDown:
.52bf	c0 00		cpy #$00			cpy 	#0 							; were there any fractional bits.
.52c1	f0 10		beq $52d3			beq 	_FIPCheckZero
.52c3	34 2e		bit $2e,x			bit 	NSStatus,x 					; +ve
.52c5	10 0c		bpl $52d3			bpl 	_FIPCheckZero
.52c7	e8		inx				inx 								; -ve so round *down*.
.52c8	a9 01		lda #$01			lda 	#1
.52ca	20 42 56	jsr $5642			jsr 	FloatSetByte
.52cd	20 02 56	jsr $5602			jsr 	FloatNegate
.52d0	20 64 50	jsr $5064			jsr 	FloatAdd
.52d3					_FIPCheckZero:
.52d3	20 62 56	jsr $5662			jsr 	FloatIsZero 				; avoid -0 problem
.52d6	d0 03		bne $52db			bne 	_FIPExit 					; set to zero if mantissa zero.
.52d8					_FIPZero:
.52d8	20 40 56	jsr $5640			jsr 	FloatSetZero
.52db					_FIPExit:
.52db	7a		ply				ply
.52dc	68		pla				pla
.52dd	60		rts				rts
.52de					FloatInt8Multiply:
.52de	5a		phy				phy
.52df	b5 3a		lda $3a,x			lda 	NSMantissa0,x 				; right shifted multiplier in Y
.52e1	a8		tay				tay
.52e2	74 3a		stz $3a,x			stz 	NSMantissa0,x 				; zero the result (already 8 bit constant)
.52e4					_FI8MLoop:
.52e4	98		tya				tya 								; shift right shifter right into carry
.52e5	4a		lsr a				lsr 	a
.52e6	a8		tay				tay
.52e7	90 0d		bcc $52f6			bcc 	_FI8MNoAdd
.52e9	18		clc				clc
.52ea	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.52ec	75 3b		adc $3b,x			adc 	NSMantissa0+1,x
.52ee	95 3a		sta $3a,x			sta 	NSMantissa0,x
.52f0	b5 46		lda $46,x			lda 	NSMantissa1,x
.52f2	75 47		adc $47,x			adc 	NSMantissa1+1,x
.52f4	95 46		sta $46,x			sta 	NSMantissa1,x
.52f6					_FI8MNoAdd:
.52f6	16 3b		asl $3b,x			asl 	NSMantissa0+1,x 			; shift adder left
.52f8	36 47		rol $47,x			rol 	NSMantissa1+1,x
.52fa	c0 00		cpy #$00			cpy 	#0
.52fc	d0 e6		bne $52e4			bne 	_FI8MLoop 					; until right shifter zero.
.52fe	7a		ply				ply
.52ff	60		rts				rts
.5300					FloatMultiply:
.5300	ca		dex				dex
.5301	b5 6a		lda $6a,x			lda 	NSExponent,x 				; can use optimised ?
.5303	15 6b		ora $6b,x			ora 	NSExponent+1,x
.5305	15 5e		ora $5e,x			ora 	NSMantissa3,x
.5307	15 5f		ora $5f,x			ora 	NSMantissa3+1,x
.5309	d0 21		bne $532c			bne 	_FMUseFloat
.530b	b5 2e		lda $2e,x			lda 	NSStatus,x 					; check if it is 8 bit unsigned
.530d	15 2f		ora $2f,x			ora 	NSStatus+1,x
.530f	29 80		and #$80			and 	#$80
.5311	15 5e		ora $5e,x			ora 	NSMantissa3,x
.5313	15 52		ora $52,x			ora 	NSMantissa2,x
.5315	15 46		ora $46,x			ora 	NSMantissa1,x
.5317	15 5f		ora $5f,x			ora 	NSMantissa3+1,x
.5319	15 53		ora $53,x			ora 	NSMantissa2+1,x
.531b	15 47		ora $47,x			ora 	NSMantissa1+1,x
.531d	d0 04		bne $5323			bne 	_FMInt32
.531f	20 de 52	jsr $52de			jsr 	FloatInt8Multiply 			; use fast 8x8 multiply.
.5322	60		rts				rts
.5323					_FMInt32:
.5323	20 4d 53	jsr $534d			jsr 	FloatMultiplyShort			; use the int32 one.
.5326	18		clc				clc 								; fix it up if gone out of range
.5327	75 6a		adc $6a,x			adc 	NSExponent,x
.5329	95 6a		sta $6a,x			sta 	NSExponent,x
.532b	60		rts				rts
.532c					_FMUseFloat:
.532c	20 95 53	jsr $5395			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.532f	f0 18		beq $5349			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.5331	e8		inx				inx
.5332	20 95 53	jsr $5395			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.5335	ca		dex				dex
.5336	c9 00		cmp #$00			cmp 	#0
.5338	f0 0c		beq $5346			beq 	_FDSetZero
.533a	20 4d 53	jsr $534d			jsr 	FloatMultiplyShort 			; calculate the result.
.533d	75 6a		adc $6a,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.533f	18		clc				clc
.5340	75 6b		adc $6b,x			adc 	NSExponent+1,x
.5342	95 6a		sta $6a,x			sta 	NSExponent,x
.5344	80 03		bra $5349			bra 	_FDExit
.5346					_FDSetZero:
.5346	20 40 56	jsr $5640			jsr 	FloatSetZero 				; return 0
.5349					_FDExit:
.5349	20 95 53	jsr $5395			jsr 	FloatNormalise 				; normalise the result
.534c	60		rts				rts
.534d					FloatMultiplyShort:
.534d	5a		phy				phy 								; save Y
.534e	20 23 56	jsr $5623			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.5351	20 3c 56	jsr $563c			jsr 	FloatSetZeroMantissaOnly 	; set mantissa S[X] to zero
.5354	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.5356					_I32MLoop:
.5356	b5 3c		lda $3c,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.5358	15 48		ora $48,x			ora 	NSMantissa1+2,x
.535a	15 54		ora $54,x			ora 	NSMantissa2+2,x
.535c	15 60		ora $60,x			ora 	NSMantissa3+2,x
.535e	f0 25		beq $5385			beq 	_I32MExit 					; exit if zero
.5360	b5 3c		lda $3c,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.5362	29 01		and #$01			and 	#1
.5364	f0 0d		beq $5373			beq 	_I32MNoAdd
.5366	20 cc 53	jsr $53cc			jsr 	FloatAddTopTwoStack 		; if so add S[X+1] to S[X+0]
.5369	b5 5e		lda $5e,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.536b	10 06		bpl $5373			bpl 	_I32MNoAdd
.536d					_I32ShiftRight:
.536d	20 59 56	jsr $5659			jsr 	FloatShiftRight 			; shift S[X] right
.5370	c8		iny				iny 								; increment shift count
.5371	80 09		bra $537c			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.5373					_I32MNoAdd:
.5373	34 5f		bit $5f,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.5375	70 f6		bvs $536d			bvs 	_I32ShiftRight 				; instead.
.5377	e8		inx				inx
.5378	20 4f 56	jsr $564f			jsr 	FloatShiftLeft 				; shift additive S[X+1] left
.537b	ca		dex				dex
.537c					_I32MShiftUpper:
.537c	e8		inx				inx 								; shift S[X+2] right
.537d	e8		inx				inx
.537e	20 59 56	jsr $5659			jsr 	FloatShiftRight
.5381	ca		dex				dex
.5382	ca		dex				dex
.5383	80 d1		bra $5356			bra 	_I32MLoop 					; try again.
.5385					_I32MExit:
.5385	20 8b 53	jsr $538b			jsr 	FloatCalculateSign
.5388	98		tya				tya 								; shift in A
.5389	7a		ply				ply 								; restore Y and exit
.538a	60		rts				rts
.538b					FloatCalculateSign:
.538b	b5 2e		lda $2e,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.538d	16 2e		asl $2e,x			asl 	NSStatus,x 					; shift result left
.538f	55 2f		eor $2f,x			eor 	NSStatus+1,x
.5391	0a		asl a				asl 	a 							; shift bit 7 into carry
.5392	76 2e		ror $2e,x			ror 	NSStatus,x 					; shift right into status byte.
.5394	60		rts				rts
.5395					FloatNormalise:
.5395	20 62 56	jsr $5662			jsr 	FloatIsZero 				; if zero exit
.5398	d0 07		bne $53a1			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.539a	16 2e		asl $2e,x			asl 	NSStatus,x 					; clear the sign bit.
.539c	76 2e		ror $2e,x			ror 	NSStatus,x 					; (no -0)
.539e	a9 00		lda #$00			lda 	#0 							; set Z flag
.53a0	60		rts				rts
.53a1					_NSNormaliseOptimise:
.53a1	b5 5e		lda $5e,x			lda 	NSMantissa3,x 				; upper byte zero ?
.53a3	d0 19		bne $53be			bne 	_NSNormaliseLoop
.53a5	b5 52		lda $52,x			lda 	NSMantissa2,x 				; byte normalise
.53a7	30 15		bmi $53be			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.53a9	95 5e		sta $5e,x			sta 	NSMantissa3,x
.53ab	b5 46		lda $46,x			lda 	NSMantissa1,x
.53ad	95 52		sta $52,x			sta 	NSMantissa2,x
.53af	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.53b1	95 46		sta $46,x			sta 	NSMantissa1,x
.53b3	74 3a		stz $3a,x			stz 	NSMantissa0,x
.53b5	b5 6a		lda $6a,x			lda 	NSExponent,x
.53b7	38		sec				sec
.53b8	e9 08		sbc #$08			sbc 	#8
.53ba	95 6a		sta $6a,x			sta 	NSExponent,x
.53bc	80 e3		bra $53a1			bra 	_NSNormaliseOptimise
.53be					_NSNormaliseLoop:
.53be	34 5e		bit $5e,x			bit 	NSMantissa3,x 				; bit 30 set ?
.53c0	70 07		bvs $53c9			bvs 	_NSNExit 					; exit if so with Z flag clear
.53c2	20 4f 56	jsr $564f			jsr 	FloatShiftLeft 				; shift mantissa left
.53c5	d6 6a		dec $6a,x			dec 	NSExponent,x 				; adjust exponent
.53c7	80 f5		bra $53be			bra 	_NSNormaliseLoop
.53c9					_NSNExit:
.53c9	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.53cb	60		rts				rts
.53cc					FloatAddTopTwoStack:
.53cc	18		clc				clc
.53cd	b5 3a		lda $3a,x			lda		NSMantissa0,x
.53cf	75 3b		adc $3b,x			adc 		NSMantissa0+1,x
.53d1	95 3a		sta $3a,x			sta 	NSMantissa0,x
.53d3	b5 46		lda $46,x			lda		NSMantissa1,x
.53d5	75 47		adc $47,x			adc 		NSMantissa1+1,x
.53d7	95 46		sta $46,x			sta 	NSMantissa1,x
.53d9	b5 52		lda $52,x			lda		NSMantissa2,x
.53db	75 53		adc $53,x			adc 		NSMantissa2+1,x
.53dd	95 52		sta $52,x			sta 	NSMantissa2,x
.53df	b5 5e		lda $5e,x			lda		NSMantissa3,x
.53e1	75 5f		adc $5f,x			adc 		NSMantissa3+1,x
.53e3	95 5e		sta $5e,x			sta 	NSMantissa3,x
.53e5	60		rts				rts
.53e6					FloatSubTopTwoStack:
.53e6	38		sec				sec
.53e7	b5 3a		lda $3a,x			lda		NSMantissa0,x
.53e9	f5 3b		sbc $3b,x			sbc 		NSMantissa0+1,x
.53eb	95 3a		sta $3a,x			sta 	NSMantissa0,x
.53ed	b5 46		lda $46,x			lda		NSMantissa1,x
.53ef	f5 47		sbc $47,x			sbc 		NSMantissa1+1,x
.53f1	95 46		sta $46,x			sta 	NSMantissa1,x
.53f3	b5 52		lda $52,x			lda		NSMantissa2,x
.53f5	f5 53		sbc $53,x			sbc 		NSMantissa2+1,x
.53f7	95 52		sta $52,x			sta 	NSMantissa2,x
.53f9	b5 5e		lda $5e,x			lda		NSMantissa3,x
.53fb	f5 5f		sbc $5f,x			sbc 		NSMantissa3+1,x
.53fd	95 5e		sta $5e,x			sta 	NSMantissa3,x
.53ff	60		rts				rts
.5400					FloatInt32Add:
.5400	b5 2e		lda $2e,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.5402	55 2f		eor $2f,x			eor 	NSStatus+1,x
.5404	30 04		bmi $540a			bmi 	_DiffSigns
.5406	20 cc 53	jsr $53cc			jsr		FloatAddTopTwoStack
.5409	60		rts				rts
.540a					_DiffSigns:
.540a	20 e6 53	jsr $53e6			jsr 	FloatSubTopTwoStack 		; do a physical subtraction
.540d	34 5e		bit $5e,x			bit 	NSMantissa3,x 				; result is +ve, okay
.540f	10 07		bpl $5418			bpl 	_AddExit
.5411	b5 2f		lda $2f,x			lda 	NSStatus+1,x 				; sign is that of 11th value
.5413	95 2e		sta $2e,x			sta 	NSStatus,x
.5415	20 09 56	jsr $5609			jsr 	FloatNegateMantissa 		; negate the mantissa and exit
.5418					_AddExit:
.5418	20 62 56	jsr $5662			jsr 	FloatIsZero 				; check for -0
.541b	d0 02		bne $541f			bne 	_AddNonZero
.541d	74 2e		stz $2e,x			stz 	NSStatus,x
.541f					_AddNonZero:
.541f	60		rts				rts
=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.5420					FloatEncodeStart:
.5420	38		sec				sec
.5421	80 01		bra $5424			bra 	FloatEncodeContinue+1
.5423					FloatEncodeContinue:
.5423	18		clc				clc
.5424					FloatEncode:
.5424	08		php				php 								; save reset flag.
.5425	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.5427	f0 15		beq $543e			beq 	_ENIsOkay
.5429	c9 30		cmp #$30			cmp 	#"0"
.542b	90 04		bcc $5431			bcc 	_ENBadNumber
.542d	c9 3a		cmp #$3a			cmp 	#"9"+1
.542f	90 0d		bcc $543e			bcc 	_ENIsOkay
.5431					_ENBadNumber:
.5431	28		plp				plp 								; throw saved reset
.5432	ad 22 04	lda $0422			lda 	encodeState 				; if in decimal mode, construct final number
.5435	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.5437	d0 03		bne $543c			bne 	_ENFail
.5439	4c b6 54	jmp $54b6			jmp 	_ENConstructFinal
.543c					_ENFail:
.543c	18		clc				clc 								; not allowed
.543d	60		rts				rts
.543e					_ENIsOkay:
.543e	28		plp				plp 								; are we restarting
.543f	90 15		bcc $5456			bcc 	_ENNoRestart
.5441					_ENStartEncode:
.5441	c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.5443	f0 0c		beq $5451			beq 	_ENFirstDP
.5445	29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.5447	20 42 56	jsr $5642			jsr 	FloatSetByte 				; in single byte mode.
.544a	a9 01		lda #$01			lda 	#ESTA_Low
.544c					_ENExitChange:
.544c	8d 22 04	sta $0422			sta 	encodeState 				; save new state
.544f	38		sec				sec
.5450	60		rts				rts
.5451					_ENFirstDP:
.5451	20 40 56	jsr $5640			jsr 	FloatSetZero 				; clear integer part
.5454	80 3c		bra $5492			bra 	_ESTASwitchFloat			; go straight to float and exi
.5456					_ENNoRestart:
.5456	48		pha				pha 								; save digit or DP on stack.
.5457	ad 22 04	lda $0422			lda 	encodeState 				; get current state
.545a	c9 01		cmp #$01			cmp 	#ESTA_Low
.545c	f0 09		beq $5467			beq  	_ESTALowState
.545e	c9 02		cmp #$02			cmp 	#ESTA_High
.5460	f0 26		beq $5488			beq 	_ESTAHighState
.5462	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.5464	f0 38		beq $549e			beq 	_ESTADecimalState
>5466	db						.byte 	$DB 						; causes a break in the emulator
.5467					_ESTALowState:
.5467	68		pla				pla 								; get value back
.5468	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.546a	f0 26		beq $5492			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.546c	29 0f		and #$0f			and 	#15 						; make digit
.546e	8d 23 04	sta $0423			sta 	digitTemp 					; save it.
.5471	b5 3a		lda $3a,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.5473	0a		asl a				asl 	a
.5474	0a		asl a				asl 	a
.5475	75 3a		adc $3a,x			adc 	NSMantissa0,x
.5477	0a		asl a				asl 	a
.5478	6d 23 04	adc $0423			adc 	digitTemp
.547b	95 3a		sta $3a,x			sta 	NSMantissa0,x
.547d	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.547f	90 05		bcc $5486			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.5481	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.5483	8d 22 04	sta $0422			sta 	encodeState
.5486					_ESTANoSwitch:
.5486	38		sec				sec
.5487	60		rts				rts
.5488					_ESTAHighState:
.5488	68		pla				pla 								; get value back
.5489	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.548b	f0 05		beq $5492			beq 	_ESTASwitchFloat
.548d	20 e8 54	jsr $54e8			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.5490	38		sec				sec
.5491	60		rts				rts
.5492					_ESTASwitchFloat:
.5492	9c 24 04	stz $0424			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.5495	e8		inx				inx 								; zero the decimal additive.
.5496	20 40 56	jsr $5640			jsr 	FloatSetZero
.5499	ca		dex				dex
.549a	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.549c	80 ae		bra $544c			bra 	_ENExitChange
.549e					_ESTADecimalState:
.549e	68		pla				pla 								; digit.
.549f	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 11th decimal point.
.54a1	f0 99		beq $543c			beq 	_ENFail
.54a3	e8		inx				inx 								; put digit into fractional part of X+1
.54a4	20 e8 54	jsr $54e8			jsr 	ESTAShiftDigitIntoMantissa
.54a7	ca		dex				dex
.54a8	ee 24 04	inc $0424			inc 	decimalCount 				; bump the count of decimals
.54ab	ad 24 04	lda $0424			lda 	decimalCount 				; too many decimal digits.
.54ae	c9 0b		cmp #$0b			cmp 	#11
.54b0	f0 02		beq $54b4			beq 	_ESTADSFail
.54b2	38		sec				sec
.54b3	60		rts				rts
.54b4					_ESTADSFail:
.54b4	18		clc				clc
.54b5	60		rts				rts
.54b6					_ENConstructFinal:
.54b6	ad 24 04	lda $0424			lda 	decimalCount 				; get decimal count
.54b9	f0 2b		beq $54e6			beq 	_ENCFExit 					; no decimals
.54bb	5a		phy				phy
.54bc	0a		asl a				asl 	a 							; x 4 and CLC
.54bd	0a		asl a				asl 	a
.54be	6d 24 04	adc $0424			adc 	decimalCount
.54c1	a8		tay				tay
.54c2	b9 4d 51	lda $514d,y			lda 	FloatScalarTable-5,y 		; copy decimal scalar to X+2
.54c5	95 3c		sta $3c,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.54c7	b9 4e 51	lda $514e,y			lda 	FloatScalarTable-5+1,y
.54ca	95 48		sta $48,x			sta 	NSMantissa1+2,x
.54cc	b9 4f 51	lda $514f,y			lda 	FloatScalarTable-5+2,y
.54cf	95 54		sta $54,x			sta 	NSMantissa2+2,x
.54d1	b9 50 51	lda $5150,y			lda 	FloatScalarTable-5+3,y
.54d4	95 60		sta $60,x			sta 	NSMantissa3+2,x
.54d6	b9 51 51	lda $5151,y			lda 	FloatScalarTable-5+4,y
.54d9	95 6c		sta $6c,x			sta 	NSExponent+2,x
.54db	74 30		stz $30,x			stz 	NSStatus+2,x 				; make +ve
.54dd	e8		inx				inx 								; multiply decimal const by decimal scalar
.54de	e8		inx				inx
.54df	20 00 53	jsr $5300			jsr 	FloatMultiply
.54e2	20 64 50	jsr $5064			jsr 	FloatAdd 					; add to integer part.
.54e5	7a		ply				ply
.54e6					_ENCFExit:
.54e6	18		clc				clc 								; reject the digit.
.54e7	60		rts				rts
.54e8					ESTAShiftDigitIntoMantissa:
.54e8	29 0f		and #$0f			and 	#15 						; save digit
.54ea	48		pha				pha
.54eb	b5 5e		lda $5e,x			lda 	NSMantissa3,x 				; push mantissa on stack
.54ed	48		pha				pha
.54ee	b5 52		lda $52,x			lda 	NSMantissa2,x
.54f0	48		pha				pha
.54f1	b5 46		lda $46,x			lda 	NSMantissa1,x
.54f3	48		pha				pha
.54f4	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.54f6	48		pha				pha
.54f7	20 4f 56	jsr $564f			jsr 	FloatShiftLeft 				; x 2
.54fa	20 4f 56	jsr $564f			jsr 	FloatShiftLeft 				; x 4
.54fd	18		clc				clc 								; pop mantissa and add
.54fe	68		pla				pla
.54ff	75 3a		adc $3a,x			adc 	NSMantissa0,x
.5501	95 3a		sta $3a,x			sta 	NSMantissa0,x
.5503	68		pla				pla
.5504	75 46		adc $46,x			adc 	NSMantissa1,x
.5506	95 46		sta $46,x			sta 	NSMantissa1,x
.5508	68		pla				pla
.5509	75 52		adc $52,x			adc 	NSMantissa2,x
.550b	95 52		sta $52,x			sta 	NSMantissa2,x
.550d	68		pla				pla
.550e	75 5e		adc $5e,x			adc 	NSMantissa3,x
.5510	95 5e		sta $5e,x			sta 	NSMantissa3,x 				; x 5
.5512	20 4f 56	jsr $564f			jsr 	FloatShiftLeft 				; x 10
.5515	68		pla				pla 								; add digit
.5516	18		clc				clc
.5517	75 3a		adc $3a,x			adc 	NSMantissa0,x
.5519	95 3a		sta $3a,x			sta 	NSMantissa0,x
.551b	90 0a		bcc $5527			bcc 	_ESTASDExit
.551d	f6 46		inc $46,x			inc 	NSMantissa1,x
.551f	d0 06		bne $5527			bne 	_ESTASDExit
.5521	f6 52		inc $52,x			inc 	NSMantissa2,x
.5523	d0 02		bne $5527			bne 	_ESTASDExit
.5525	f6 5e		inc $5e,x			inc 	NSMantissa3,x
.5527					_ESTASDExit:
.5527	60		rts				rts
.0422					encodeState:
>0422							.fill 	1
.0423					digitTemp:
>0423							.fill 	1
.0424					decimalCount:
>0424							.fill 	1
.5528					FloatToString:
.5528	da		phx				phx
.5529	5a		phy				phy 								; save code position
.552a	8d 25 04	sta $0425			sta 	decimalPlaces	 			; save number of DPs.
.552d	9c 26 04	stz $0426			stz 	dbOffset 					; offset into decimal buffer = start.
.5530	b5 2e		lda $2e,x			lda 	NSStatus,x  				; is it -ve.
.5532	10 08		bpl $553c			bpl 	_CNTSNotNegative
.5534	29 7f		and #$7f			and 	#$7F 						; make +ve
.5536	95 2e		sta $2e,x			sta 	NSStatus,x
.5538	a9 2d		lda #$2d			lda 	#"-"
.553a	80 02		bra $553e			bra 	_CNTMain
.553c					_CNTSNotNegative:
.553c	a9 20		lda #$20			lda 	#" "
.553e					_CNTMain:
.553e	20 a0 55	jsr $55a0			jsr 	WriteDecimalBuffer
.5541	b5 6a		lda $6a,x			lda 	NSExponent,x 				; check if decimal
.5543	f0 0d		beq $5552			beq 	_CNTSNotFloat
.5545	e8		inx				inx 								; round up so we don't get too many 6.999999
.5546	a9 01		lda #$01			lda 	#1
.5548	20 42 56	jsr $5642			jsr 	FloatSetByte
.554b	b5 69		lda $69,x			lda		NSExponent-1,x
.554d	95 6a		sta $6a,x			sta 	NSExponent,x
.554f	20 64 50	jsr $5064			jsr 	FloatAdd
.5552					_CNTSNotFloat:
.5552	20 82 55	jsr $5582			jsr 	MakePlusTwoString 			; do the integer part.
.5555	20 20 52	jsr $5220			jsr 	FloatFractionalPart 		; get the fractional part
.5558	20 95 53	jsr $5395			jsr 	FloatNormalise					; normalise , exit if zero
.555b	f0 22		beq $557f			beq 	_CNTSExit
.555d	a9 2e		lda #$2e			lda 	#"."
.555f	20 a0 55	jsr $55a0			jsr 	WriteDecimalBuffer 			; write decimal place
.5562					_CNTSDecimal:
.5562	ce 25 04	dec $0425			dec 	decimalPlaces 				; done all the decimals
.5565	30 18		bmi $557f			bmi 	_CNTSExit
.5567	e8		inx				inx 								; x 10.0
.5568	a9 0a		lda #$0a			lda 	#10
.556a	20 42 56	jsr $5642			jsr 	FloatSetByte
.556d	20 00 53	jsr $5300			jsr 	FloatMultiply
.5570	20 82 55	jsr $5582			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.5573	20 20 52	jsr $5220			jsr 	FloatFractionalPart 		; get the fractional part
.5576	20 95 53	jsr $5395			jsr 	FloatNormalise 				; normalise it.
.5579	b5 6a		lda $6a,x			lda 	NSExponent,x 				; gone to zero, exit.
.557b	c9 d0		cmp #$d0			cmp 	#$D0 						; very small remainder, so don't bother.
.557d	b0 e3		bcs $5562			bcs 	_CNTSDecimal 				; keep going.
.557f					_CNTSExit:
.557f	7a		ply				ply
.5580	fa		plx				plx
.5581	60		rts				rts
.5582					MakePlusTwoString:
.5582	da		phx				phx
.5583	20 23 56	jsr $5623			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.5586	e8		inx				inx 								; access it
.5587	e8		inx				inx
.5588	20 7b 52	jsr $527b			jsr 	FloatIntegerPart 			; make it an integer
.558b	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.558d	20 bf 55	jsr $55bf			jsr 	ConvertInt32
.5590	a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.5592					_MPTSCopy:
.5592	bd 00 04	lda $0400,x			lda 	numberBuffer,x
.5595	20 a0 55	jsr $55a0			jsr 	WriteDecimalBuffer
.5598	e8		inx				inx
.5599	bd 00 04	lda $0400,x			lda 	numberBuffer,x
.559c	d0 f4		bne $5592			bne 	_MPTSCopy
.559e	fa		plx				plx
.559f	60		rts				rts
.55a0					WriteDecimalBuffer:
.55a0	da		phx				phx
.55a1	ae 26 04	ldx $0426			ldx 	dbOffset
.55a4	9d 27 04	sta $0427,x			sta 	decimalBuffer,x
.55a7	9e 28 04	stz $0428,x			stz 	decimalBuffer+1,x
.55aa	ee 26 04	inc $0426			inc 	dbOffset
.55ad	fa		plx				plx
.55ae	60		rts				rts
.0425					decimalPlaces:
>0425							.fill 	1
.0426					dbOffset:
>0426							.fill 	1
.0427					decimalBuffer:
>0427							.fill 	32
.55af					ConvertInt16:
.55af	85 3a		sta $3a				sta 	NSMantissa0 				; set up as 32 bit conversion
.55b1	86 46		stx $46				stx 	NSMantissa1
.55b3	64 52		stz $52				stz 	NSMantissa2
.55b5	64 5e		stz $5e				stz 	NSMantissa3
.55b7	64 2e		stz $2e				stz 	NSStatus 					; positive integer
.55b9	a2 00		ldx #$00			ldx 	#0 							; stack level
.55bb	a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.55bd	80 00		bra $55bf			bra 	ConvertInt32
.55bf					ConvertInt32:
.55bf	5a		phy				phy
.55c0	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.55c2	24 2e		bit $2e				bit 	NSStatus 					; output a - if not negative.
.55c4	10 08		bpl $55ce			bpl 	_CI32NotNeg
.55c6	48		pha				pha
.55c7	a9 2d		lda #$2d			lda 	#'-'
.55c9	99 00 04	sta $0400,y			sta 	numberBuffer,y
.55cc	c8		iny				iny
.55cd	68		pla				pla
.55ce					_CI32NotNeg:
.55ce	20 dc 55	jsr $55dc			jsr 	_CI32DivideConvert 			; recursive conversion
.55d1	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.55d3	99 00 04	sta $0400,y			sta 	numberBuffer,y
.55d6	7a		ply				ply
.55d7	a2 04		ldx #$04			ldx 	#numberBuffer >> 8 			; return address in XA
.55d9	a9 00		lda #$00			lda 	#numberBuffer & $FF
.55db	60		rts				rts
.55dc					_CI32DivideConvert:
.55dc	e8		inx				inx 								; write to next slot up
.55dd	20 42 56	jsr $5642			jsr 	FloatSetByte 		 		; write the base out.
.55e0	ca		dex				dex
.55e1	20 d6 51	jsr $51d6			jsr 	Int32Divide 				; divide
.55e4	b5 3a		lda $3a,x			lda 	NSMantissa0,x 				; save remainder
.55e6	48		pha				pha
.55e7	20 c5 51	jsr $51c5			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.55ea	20 62 56	jsr $5662			jsr 	FloatIsZero 				; is it zero ?
.55ed	f0 05		beq $55f4			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.55ef	b5 3b		lda $3b,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.55f1	20 dc 55	jsr $55dc			jsr 	_CI32DivideConvert 			; and recusrively call.
.55f4					_CI32NoRecurse:
.55f4	68		pla				pla 								; remainder
.55f5	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.55f7	90 02		bcc $55fb			bcc 	_CI32NotHex
.55f9	69 26		adc #$26			adc 	#6+32
.55fb					_CI32NotHex:
.55fb	69 30		adc #$30			adc 	#48
.55fd	99 00 04	sta $0400,y			sta 	numberBuffer,y 				; write out and exit
.5600	c8		iny				iny
.5601	60		rts				rts
.5602					FloatNegate:
.5602	b5 2e		lda $2e,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.5604	49 80		eor #$80			eor 	#$80  						; toggle the negative flag
.5606	95 2e		sta $2e,x			sta 	NSStatus,x
.5608	60		rts				rts
.5609					FloatNegateMantissa:
.5609	38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.560a	a9 00		lda #$00			lda 	#0
.560c	f5 3a		sbc $3a,x			sbc 	NSMantissa0,x
.560e	95 3a		sta $3a,x			sta 	NSMantissa0,x
.5610	a9 00		lda #$00			lda 	#0
.5612	f5 46		sbc $46,x			sbc 	NSMantissa1,x
.5614	95 46		sta $46,x			sta 	NSMantissa1,x
.5616	a9 00		lda #$00			lda 	#0
.5618	f5 52		sbc $52,x			sbc 	NSMantissa2,x
.561a	95 52		sta $52,x			sta 	NSMantissa2,x
.561c	a9 00		lda #$00			lda 	#0
.561e	f5 5e		sbc $5e,x			sbc 	NSMantissa3,x
.5620	95 5e		sta $5e,x			sta 	NSMantissa3,x
.5622	60		rts				rts
.5623					FloatShiftUpTwo:
.5623	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.5625	95 3c		sta $3c,x			sta 	NSMantissa0+2,x
.5627	b5 46		lda $46,x			lda 	NSMantissa1,x
.5629	95 48		sta $48,x			sta 	NSMantissa1+2,x
.562b	b5 52		lda $52,x			lda 	NSMantissa2,x
.562d	95 54		sta $54,x			sta 	NSMantissa2+2,x
.562f	b5 5e		lda $5e,x			lda 	NSMantissa3,x
.5631	95 60		sta $60,x			sta 	NSMantissa3+2,x
.5633	b5 6a		lda $6a,x			lda 	NSExponent,x
.5635	95 6c		sta $6c,x			sta 	NSExponent+2,x
.5637	b5 2e		lda $2e,x			lda 	NSStatus,x
.5639	95 30		sta $30,x			sta 	NSStatus+2,x
.563b	60		rts				rts
.563c					FloatSetZeroMantissaOnly:
.563c	74 3a		stz $3a,x			stz 	NSMantissa0,x
.563e	80 08		bra $5648			bra 	FloatZero13
.5640					FloatSetZero:
.5640	a9 00		lda #$00			lda 	#0
.5642					FloatSetByte:
.5642	74 6a		stz $6a,x			stz 	NSExponent,x 				; zero exponent, as +ve integer value.
.5644					FloatSetMantissa:
.5644	95 3a		sta $3a,x			sta 	NSMantissa0,x 				; zero mantissa
.5646	74 2e		stz $2e,x			stz 	NSStatus,x
.5648					FloatZero13:
.5648	74 46		stz $46,x			stz 	NSMantissa1,x
.564a	74 52		stz $52,x			stz 	NSMantissa2,x
.564c	74 5e		stz $5e,x			stz 	NSMantissa3,x
.564e	60		rts				rts
.564f					FloatShiftLeft:
.564f	18		clc				clc
.5650					FloatRotateLeft:
.5650	36 3a		rol $3a,x			rol 	NSMantissa0,x
.5652	36 46		rol $46,x			rol		NSMantissa1,x
.5654	36 52		rol $52,x			rol		NSMantissa2,x
.5656	36 5e		rol $5e,x			rol		NSMantissa3,x
.5658	60		rts				rts
.5659					FloatShiftRight:
.5659	56 5e		lsr $5e,x			lsr 	NSMantissa3,x
.565b	76 52		ror $52,x			ror		NSMantissa2,x
.565d	76 46		ror $46,x			ror		NSMantissa1,x
.565f	76 3a		ror $3a,x			ror		NSMantissa0,x
.5661	60		rts				rts
.5662					FloatIsZero:
.5662	b5 5e		lda $5e,x			lda 	NSMantissa3,x
.5664	15 52		ora $52,x			ora		NSMantissa2,x
.5666	15 46		ora $46,x			ora		NSMantissa1,x
.5668	15 3a		ora $3a,x			ora		NSMantissa0,x
.566a	60		rts				rts

;******  End of listing
