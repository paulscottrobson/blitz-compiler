
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass -q -c -Wall -o build/code.prg -L build/code.lst -l build/code.lbl testing/testing.asm /home/paulr/Projects/blitz-compiler/documents/../bin/common.library /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library
; Mon Oct  9 06:43:16 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: testing/testing.asm

.0801					WrapperBoot:
.0801	a2 ff		ldx #$ff			ldx 	#255
.0803	20 0c 08	jsr $080c			jsr 	TestScript
.0806	86 26		stx $26				stx 	zTemp0
.0808	4c ff ff	jmp $ffff			jmp 	$FFFF
.080b					ErrorHandler:
>080b	db						.byte 	$DB 						; causes a break in the emulator
.080c					TestScript:

;******  Processing file: testing/generated/testcode.dat

.080c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -47749
>080f	85 ba 00 00				.dword	$0000ba85
>0813	00 80					.byte	$00,$80
.0815	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -4874
>0818	0a 13 00 00				.dword	$0000130a
>081c	00 80					.byte	$00,$80
.081e	20 a1 49	jsr $49a1		jsr	FloatAdd
.0821	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -52623
>0824	8f cd 00 00				.dword	$0000cd8f
>0828	00 80					.byte	$00,$80
.082a	20 62 4a	jsr $4a62		jsr	FloatCompare
.082d	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.0830	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.0833	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -47749
>0836	85 ba 00 00				.dword	$0000ba85
>083a	00 80					.byte	$00,$80
.083c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -4874
>083f	0a 13 00 00				.dword	$0000130a
>0843	00 80					.byte	$00,$80
.0845	20 9b 49	jsr $499b		jsr	FloatSubtract
.0848	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -42875
>084b	7b a7 00 00				.dword	$0000a77b
>084f	00 80					.byte	$00,$80
.0851	20 62 4a	jsr $4a62		jsr	FloatCompare
.0854	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.0857	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.085a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -47749
>085d	85 ba 00 00				.dword	$0000ba85
>0861	00 80					.byte	$00,$80
.0863	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -4874
>0866	0a 13 00 00				.dword	$0000130a
>086a	00 80					.byte	$00,$80
.086c	20 3d 4c	jsr $4c3d		jsr	FloatMultiply
.086f	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 232728626
>0872	32 28 df 0d				.dword	$0ddf2832
>0876	00 00					.byte	$00,$00
.0878	20 62 4a	jsr $4a62		jsr	FloatCompare
.087b	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.087e	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.0881	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -47749
>0884	85 ba 00 00				.dword	$0000ba85
>0888	00 80					.byte	$00,$80
.088a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -4874
>088d	0a 13 00 00				.dword	$0000130a
>0891	00 80					.byte	$00,$80
.0893	20 c6 4a	jsr $4ac6		jsr	FloatDivide
.0896	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 9.79667624
>0899	cb 97 5f 4e				.dword	$4e5f97cb
>089d	e5 00					.byte	$e5,$00
.089f	20 62 4a	jsr $4a62		jsr	FloatCompare
.08a2	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.08a5	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.08a8	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -4874
>08ab	0a 13 00 00				.dword	$0000130a
>08af	00 80					.byte	$00,$80
.08b1	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -4874
>08b4	0a 13 00 00				.dword	$0000130a
>08b8	00 80					.byte	$00,$80
.08ba	20 62 4a	jsr $4a62		jsr	FloatCompare
.08bd	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.08c0	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>08c3	01 00 00 00				.dword	$00000001
>08c7	00 80					.byte	$00,$80
.08c9	20 62 4a	jsr $4a62		jsr	FloatCompare
.08cc	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.08cf	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.08d2	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -4874
>08d5	0a 13 00 00				.dword	$0000130a
>08d9	00 80					.byte	$00,$80
.08db	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -4874
>08de	0a 13 00 00				.dword	$0000130a
>08e2	00 80					.byte	$00,$80
.08e4	20 62 4a	jsr $4a62		jsr	FloatCompare
.08e7	20 3c 4a	jsr $4a3c		jsr	CompareNotEqual
.08ea	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>08ed	00 00 00 00				.dword	$00000000
>08f1	00 00					.byte	$00,$00
.08f3	20 62 4a	jsr $4a62		jsr	FloatCompare
.08f6	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.08f9	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.08fc	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -4874
>08ff	0a 13 00 00				.dword	$0000130a
>0903	00 80					.byte	$00,$80
.0905	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -4874
>0908	0a 13 00 00				.dword	$0000130a
>090c	00 80					.byte	$00,$80
.090e	20 62 4a	jsr $4a62		jsr	FloatCompare
.0911	20 4a 4a	jsr $4a4a		jsr	CompareGreater
.0914	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>0917	00 00 00 00				.dword	$00000000
>091b	00 00					.byte	$00,$00
.091d	20 62 4a	jsr $4a62		jsr	FloatCompare
.0920	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.0923	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.0926	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -4874
>0929	0a 13 00 00				.dword	$0000130a
>092d	00 80					.byte	$00,$80
.092f	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -4874
>0932	0a 13 00 00				.dword	$0000130a
>0936	00 80					.byte	$00,$80
.0938	20 62 4a	jsr $4a62		jsr	FloatCompare
.093b	20 5a 4a	jsr $4a5a		jsr	CompareGreaterEqual
.093e	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>0941	01 00 00 00				.dword	$00000001
>0945	00 80					.byte	$00,$80
.0947	20 62 4a	jsr $4a62		jsr	FloatCompare
.094a	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.094d	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.0950	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -4874
>0953	0a 13 00 00				.dword	$0000130a
>0957	00 80					.byte	$00,$80
.0959	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -4874
>095c	0a 13 00 00				.dword	$0000130a
>0960	00 80					.byte	$00,$80
.0962	20 62 4a	jsr $4a62		jsr	FloatCompare
.0965	20 42 4a	jsr $4a42		jsr	CompareLess
.0968	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>096b	00 00 00 00				.dword	$00000000
>096f	00 00					.byte	$00,$00
.0971	20 62 4a	jsr $4a62		jsr	FloatCompare
.0974	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.0977	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.097a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -4874
>097d	0a 13 00 00				.dword	$0000130a
>0981	00 80					.byte	$00,$80
.0983	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -4874
>0986	0a 13 00 00				.dword	$0000130a
>098a	00 80					.byte	$00,$80
.098c	20 62 4a	jsr $4a62		jsr	FloatCompare
.098f	20 52 4a	jsr $4a52		jsr	CompareLessEqual
.0992	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>0995	01 00 00 00				.dword	$00000001
>0999	00 80					.byte	$00,$80
.099b	20 62 4a	jsr $4a62		jsr	FloatCompare
.099e	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.09a1	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.09a4	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 47.8673362
>09a7	7e 13 bc 5f				.dword	$5fbc137e
>09ab	e7 00					.byte	$e7,$00
.09ad	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 11.29164979
>09b0	7c 4c 55 5a				.dword	$5a554c7c
>09b4	e5 00					.byte	$e5,$00
.09b6	20 a1 49	jsr $49a1		jsr	FloatAdd
.09b9	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 59.15898599
>09bc	9d 66 51 76				.dword	$7651669d
>09c0	e7 00					.byte	$e7,$00
.09c2	20 62 4a	jsr $4a62		jsr	FloatCompare
.09c5	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.09c8	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.09cb	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 47.8673362
>09ce	7e 13 bc 5f				.dword	$5fbc137e
>09d2	e7 00					.byte	$e7,$00
.09d4	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 11.29164979
>09d7	7c 4c 55 5a				.dword	$5a554c7c
>09db	e5 00					.byte	$e5,$00
.09dd	20 9b 49	jsr $499b		jsr	FloatSubtract
.09e0	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 36.5756864
>09e3	5e c0 26 49				.dword	$4926c05e
>09e7	e7 00					.byte	$e7,$00
.09e9	20 62 4a	jsr $4a62		jsr	FloatCompare
.09ec	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.09ef	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.09f2	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 47.8673362
>09f5	7e 13 bc 5f				.dword	$5fbc137e
>09f9	e7 00					.byte	$e7,$00
.09fb	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 11.29164979
>09fe	7c 4c 55 5a				.dword	$5a554c7c
>0a02	e5 00					.byte	$e5,$00
.0a04	20 3d 4c	jsr $4c3d		jsr	FloatMultiply
.0a07	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 540.50119686
>0a0a	ce 09 90 43				.dword	$439009ce
>0a0e	eb 00					.byte	$eb,$00
.0a10	20 62 4a	jsr $4a62		jsr	FloatCompare
.0a13	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.0a16	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.0a19	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 47.8673362
>0a1c	7e 13 bc 5f				.dword	$5fbc137e
>0a20	e7 00					.byte	$e7,$00
.0a22	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 11.29164979
>0a25	7c 4c 55 5a				.dword	$5a554c7c
>0a29	e5 00					.byte	$e5,$00
.0a2b	20 c6 4a	jsr $4ac6		jsr	FloatDivide
.0a2e	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 4.23918002
>0a31	6e ae d3 43				.dword	$43d3ae6e
>0a35	e4 00					.byte	$e4,$00
.0a37	20 62 4a	jsr $4a62		jsr	FloatCompare
.0a3a	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.0a3d	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.0a40	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -51.59423342
>0a43	5d 3f 30 67				.dword	$67303f5d
>0a47	e7 80					.byte	$e7,$80
.0a49	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -51.59423342
>0a4c	5d 3f 30 67				.dword	$67303f5d
>0a50	e7 80					.byte	$e7,$80
.0a52	20 62 4a	jsr $4a62		jsr	FloatCompare
.0a55	20 4a 4a	jsr $4a4a		jsr	CompareGreater
.0a58	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>0a5b	00 00 00 00				.dword	$00000000
>0a5f	00 00					.byte	$00,$00
.0a61	20 62 4a	jsr $4a62		jsr	FloatCompare
.0a64	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.0a67	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.0a6a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -51.59423342
>0a6d	5d 3f 30 67				.dword	$67303f5d
>0a71	e7 80					.byte	$e7,$80
.0a73	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -51.59423342
>0a76	5d 3f 30 67				.dword	$67303f5d
>0a7a	e7 80					.byte	$e7,$80
.0a7c	20 62 4a	jsr $4a62		jsr	FloatCompare
.0a7f	20 5a 4a	jsr $4a5a		jsr	CompareGreaterEqual
.0a82	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>0a85	01 00 00 00				.dword	$00000001
>0a89	00 80					.byte	$00,$80
.0a8b	20 62 4a	jsr $4a62		jsr	FloatCompare
.0a8e	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.0a91	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.0a94	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -51.59423342
>0a97	5d 3f 30 67				.dword	$67303f5d
>0a9b	e7 80					.byte	$e7,$80
.0a9d	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -51.59423342
>0aa0	5d 3f 30 67				.dword	$67303f5d
>0aa4	e7 80					.byte	$e7,$80
.0aa6	20 62 4a	jsr $4a62		jsr	FloatCompare
.0aa9	20 42 4a	jsr $4a42		jsr	CompareLess
.0aac	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>0aaf	00 00 00 00				.dword	$00000000
>0ab3	00 00					.byte	$00,$00
.0ab5	20 62 4a	jsr $4a62		jsr	FloatCompare
.0ab8	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.0abb	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.0abe	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -51.59423342
>0ac1	5d 3f 30 67				.dword	$67303f5d
>0ac5	e7 80					.byte	$e7,$80
.0ac7	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -51.59423342
>0aca	5d 3f 30 67				.dword	$67303f5d
>0ace	e7 80					.byte	$e7,$80
.0ad0	20 62 4a	jsr $4a62		jsr	FloatCompare
.0ad3	20 52 4a	jsr $4a52		jsr	CompareLessEqual
.0ad6	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>0ad9	01 00 00 00				.dword	$00000001
>0add	00 80					.byte	$00,$80
.0adf	20 62 4a	jsr $4a62		jsr	FloatCompare
.0ae2	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.0ae5	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.0ae8	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -51.59423342
>0aeb	5d 3f 30 67				.dword	$67303f5d
>0aef	e7 80					.byte	$e7,$80
.0af1	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -51.59423342
>0af4	5d 3f 30 67				.dword	$67303f5d
>0af8	e7 80					.byte	$e7,$80
.0afa	20 62 4a	jsr $4a62		jsr	FloatCompare
.0afd	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.0b00	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>0b03	01 00 00 00				.dword	$00000001
>0b07	00 80					.byte	$00,$80
.0b09	20 62 4a	jsr $4a62		jsr	FloatCompare
.0b0c	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.0b0f	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.0b12	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -51.59423342
>0b15	5d 3f 30 67				.dword	$67303f5d
>0b19	e7 80					.byte	$e7,$80
.0b1b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -51.59423342
>0b1e	5d 3f 30 67				.dword	$67303f5d
>0b22	e7 80					.byte	$e7,$80
.0b24	20 62 4a	jsr $4a62		jsr	FloatCompare
.0b27	20 3c 4a	jsr $4a3c		jsr	CompareNotEqual
.0b2a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>0b2d	00 00 00 00				.dword	$00000000
>0b31	00 00					.byte	$00,$00
.0b33	20 62 4a	jsr $4a62		jsr	FloatCompare
.0b36	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.0b39	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.0b3c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 21506
>0b3f	02 54 00 00				.dword	$00005402
>0b43	00 00					.byte	$00,$00
.0b45	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -334
>0b48	4e 01 00 00				.dword	$0000014e
>0b4c	00 80					.byte	$00,$80
.0b4e	20 a1 49	jsr $49a1		jsr	FloatAdd
.0b51	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 21172
>0b54	b4 52 00 00				.dword	$000052b4
>0b58	00 00					.byte	$00,$00
.0b5a	20 62 4a	jsr $4a62		jsr	FloatCompare
.0b5d	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.0b60	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.0b63	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 21506
>0b66	02 54 00 00				.dword	$00005402
>0b6a	00 00					.byte	$00,$00
.0b6c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -334
>0b6f	4e 01 00 00				.dword	$0000014e
>0b73	00 80					.byte	$00,$80
.0b75	20 9b 49	jsr $499b		jsr	FloatSubtract
.0b78	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 21840
>0b7b	50 55 00 00				.dword	$00005550
>0b7f	00 00					.byte	$00,$00
.0b81	20 62 4a	jsr $4a62		jsr	FloatCompare
.0b84	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.0b87	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.0b8a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 21506
>0b8d	02 54 00 00				.dword	$00005402
>0b91	00 00					.byte	$00,$00
.0b93	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -334
>0b96	4e 01 00 00				.dword	$0000014e
>0b9a	00 80					.byte	$00,$80
.0b9c	20 3d 4c	jsr $4c3d		jsr	FloatMultiply
.0b9f	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -7183004
>0ba2	9c 9a 6d 00				.dword	$006d9a9c
>0ba6	00 80					.byte	$00,$80
.0ba8	20 62 4a	jsr $4a62		jsr	FloatCompare
.0bab	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.0bae	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.0bb1	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 21506
>0bb4	02 54 00 00				.dword	$00005402
>0bb8	00 00					.byte	$00,$00
.0bba	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -334
>0bbd	4e 01 00 00				.dword	$0000014e
>0bc1	00 80					.byte	$00,$80
.0bc3	20 c6 4a	jsr $4ac6		jsr	FloatDivide
.0bc6	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -64.38922156
>0bc9	06 a4 63 40				.dword	$4063a406
>0bcd	e8 80					.byte	$e8,$80
.0bcf	20 62 4a	jsr $4a62		jsr	FloatCompare
.0bd2	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.0bd5	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.0bd8	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -334
>0bdb	4e 01 00 00				.dword	$0000014e
>0bdf	00 80					.byte	$00,$80
.0be1	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -334
>0be4	4e 01 00 00				.dword	$0000014e
>0be8	00 80					.byte	$00,$80
.0bea	20 62 4a	jsr $4a62		jsr	FloatCompare
.0bed	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.0bf0	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>0bf3	01 00 00 00				.dword	$00000001
>0bf7	00 80					.byte	$00,$80
.0bf9	20 62 4a	jsr $4a62		jsr	FloatCompare
.0bfc	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.0bff	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.0c02	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -334
>0c05	4e 01 00 00				.dword	$0000014e
>0c09	00 80					.byte	$00,$80
.0c0b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -334
>0c0e	4e 01 00 00				.dword	$0000014e
>0c12	00 80					.byte	$00,$80
.0c14	20 62 4a	jsr $4a62		jsr	FloatCompare
.0c17	20 3c 4a	jsr $4a3c		jsr	CompareNotEqual
.0c1a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>0c1d	00 00 00 00				.dword	$00000000
>0c21	00 00					.byte	$00,$00
.0c23	20 62 4a	jsr $4a62		jsr	FloatCompare
.0c26	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.0c29	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.0c2c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -334
>0c2f	4e 01 00 00				.dword	$0000014e
>0c33	00 80					.byte	$00,$80
.0c35	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -334
>0c38	4e 01 00 00				.dword	$0000014e
>0c3c	00 80					.byte	$00,$80
.0c3e	20 62 4a	jsr $4a62		jsr	FloatCompare
.0c41	20 4a 4a	jsr $4a4a		jsr	CompareGreater
.0c44	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>0c47	00 00 00 00				.dword	$00000000
>0c4b	00 00					.byte	$00,$00
.0c4d	20 62 4a	jsr $4a62		jsr	FloatCompare
.0c50	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.0c53	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.0c56	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -334
>0c59	4e 01 00 00				.dword	$0000014e
>0c5d	00 80					.byte	$00,$80
.0c5f	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -334
>0c62	4e 01 00 00				.dword	$0000014e
>0c66	00 80					.byte	$00,$80
.0c68	20 62 4a	jsr $4a62		jsr	FloatCompare
.0c6b	20 5a 4a	jsr $4a5a		jsr	CompareGreaterEqual
.0c6e	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>0c71	01 00 00 00				.dword	$00000001
>0c75	00 80					.byte	$00,$80
.0c77	20 62 4a	jsr $4a62		jsr	FloatCompare
.0c7a	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.0c7d	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.0c80	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -334
>0c83	4e 01 00 00				.dword	$0000014e
>0c87	00 80					.byte	$00,$80
.0c89	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -334
>0c8c	4e 01 00 00				.dword	$0000014e
>0c90	00 80					.byte	$00,$80
.0c92	20 62 4a	jsr $4a62		jsr	FloatCompare
.0c95	20 42 4a	jsr $4a42		jsr	CompareLess
.0c98	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>0c9b	00 00 00 00				.dword	$00000000
>0c9f	00 00					.byte	$00,$00
.0ca1	20 62 4a	jsr $4a62		jsr	FloatCompare
.0ca4	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.0ca7	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.0caa	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -334
>0cad	4e 01 00 00				.dword	$0000014e
>0cb1	00 80					.byte	$00,$80
.0cb3	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -334
>0cb6	4e 01 00 00				.dword	$0000014e
>0cba	00 80					.byte	$00,$80
.0cbc	20 62 4a	jsr $4a62		jsr	FloatCompare
.0cbf	20 52 4a	jsr $4a52		jsr	CompareLessEqual
.0cc2	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>0cc5	01 00 00 00				.dword	$00000001
>0cc9	00 80					.byte	$00,$80
.0ccb	20 62 4a	jsr $4a62		jsr	FloatCompare
.0cce	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.0cd1	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.0cd4	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -10.037418
>0cd7	cf a1 4c 50				.dword	$504ca1cf
>0cdb	e5 80					.byte	$e5,$80
.0cdd	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 60.21738074
>0ce0	87 4c 6f 78				.dword	$786f4c87
>0ce4	e7 00					.byte	$e7,$00
.0ce6	20 a1 49	jsr $49a1		jsr	FloatAdd
.0ce9	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 50.17996274
>0cec	14 24 5c 64				.dword	$645c2414
>0cf0	e7 00					.byte	$e7,$00
.0cf2	20 62 4a	jsr $4a62		jsr	FloatCompare
.0cf5	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.0cf8	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.0cfb	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -10.037418
>0cfe	cf a1 4c 50				.dword	$504ca1cf
>0d02	e5 80					.byte	$e5,$80
.0d04	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 60.21738074
>0d07	87 4c 6f 78				.dword	$786f4c87
>0d0b	e7 00					.byte	$e7,$00
.0d0d	20 9b 49	jsr $499b		jsr	FloatSubtract
.0d10	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -70.25479874
>0d13	7d 3a 41 46				.dword	$46413a7d
>0d17	e8 80					.byte	$e8,$80
.0d19	20 62 4a	jsr $4a62		jsr	FloatCompare
.0d1c	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.0d1f	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.0d22	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -10.037418
>0d25	cf a1 4c 50				.dword	$504ca1cf
>0d29	e5 80					.byte	$e5,$80
.0d2b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 60.21738074
>0d2e	87 4c 6f 78				.dword	$786f4c87
>0d32	e7 00					.byte	$e7,$00
.0d34	20 3d 4c	jsr $4c3d		jsr	FloatMultiply
.0d37	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -604.42702113
>0d3a	28 aa 8d 4b				.dword	$4b8daa28
>0d3e	eb 80					.byte	$eb,$80
.0d40	20 62 4a	jsr $4a62		jsr	FloatCompare
.0d43	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.0d46	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.0d49	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -10.037418
>0d4c	cf a1 4c 50				.dword	$504ca1cf
>0d50	e5 80					.byte	$e5,$80
.0d52	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 60.21738074
>0d55	87 4c 6f 78				.dword	$786f4c87
>0d59	e7 00					.byte	$e7,$00
.0d5b	20 c6 4a	jsr $4ac6		jsr	FloatDivide
.0d5e	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -0.16668639
>0d61	23 eb 57 55				.dword	$5557eb23
>0d65	df 80					.byte	$df,$80
.0d67	20 62 4a	jsr $4a62		jsr	FloatCompare
.0d6a	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.0d6d	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.0d70	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -38.54231797
>0d73	b3 aa 15 4d				.dword	$4d15aab3
>0d77	e7 80					.byte	$e7,$80
.0d79	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -38.54231797
>0d7c	b3 aa 15 4d				.dword	$4d15aab3
>0d80	e7 80					.byte	$e7,$80
.0d82	20 62 4a	jsr $4a62		jsr	FloatCompare
.0d85	20 4a 4a	jsr $4a4a		jsr	CompareGreater
.0d88	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>0d8b	00 00 00 00				.dword	$00000000
>0d8f	00 00					.byte	$00,$00
.0d91	20 62 4a	jsr $4a62		jsr	FloatCompare
.0d94	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.0d97	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.0d9a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -38.54231797
>0d9d	b3 aa 15 4d				.dword	$4d15aab3
>0da1	e7 80					.byte	$e7,$80
.0da3	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -38.54231797
>0da6	b3 aa 15 4d				.dword	$4d15aab3
>0daa	e7 80					.byte	$e7,$80
.0dac	20 62 4a	jsr $4a62		jsr	FloatCompare
.0daf	20 5a 4a	jsr $4a5a		jsr	CompareGreaterEqual
.0db2	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>0db5	01 00 00 00				.dword	$00000001
>0db9	00 80					.byte	$00,$80
.0dbb	20 62 4a	jsr $4a62		jsr	FloatCompare
.0dbe	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.0dc1	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.0dc4	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -38.54231797
>0dc7	b3 aa 15 4d				.dword	$4d15aab3
>0dcb	e7 80					.byte	$e7,$80
.0dcd	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -38.54231797
>0dd0	b3 aa 15 4d				.dword	$4d15aab3
>0dd4	e7 80					.byte	$e7,$80
.0dd6	20 62 4a	jsr $4a62		jsr	FloatCompare
.0dd9	20 42 4a	jsr $4a42		jsr	CompareLess
.0ddc	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>0ddf	00 00 00 00				.dword	$00000000
>0de3	00 00					.byte	$00,$00
.0de5	20 62 4a	jsr $4a62		jsr	FloatCompare
.0de8	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.0deb	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.0dee	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -38.54231797
>0df1	b3 aa 15 4d				.dword	$4d15aab3
>0df5	e7 80					.byte	$e7,$80
.0df7	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -38.54231797
>0dfa	b3 aa 15 4d				.dword	$4d15aab3
>0dfe	e7 80					.byte	$e7,$80
.0e00	20 62 4a	jsr $4a62		jsr	FloatCompare
.0e03	20 52 4a	jsr $4a52		jsr	CompareLessEqual
.0e06	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>0e09	01 00 00 00				.dword	$00000001
>0e0d	00 80					.byte	$00,$80
.0e0f	20 62 4a	jsr $4a62		jsr	FloatCompare
.0e12	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.0e15	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.0e18	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -38.54231797
>0e1b	b3 aa 15 4d				.dword	$4d15aab3
>0e1f	e7 80					.byte	$e7,$80
.0e21	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -38.54231797
>0e24	b3 aa 15 4d				.dword	$4d15aab3
>0e28	e7 80					.byte	$e7,$80
.0e2a	20 62 4a	jsr $4a62		jsr	FloatCompare
.0e2d	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.0e30	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>0e33	01 00 00 00				.dword	$00000001
>0e37	00 80					.byte	$00,$80
.0e39	20 62 4a	jsr $4a62		jsr	FloatCompare
.0e3c	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.0e3f	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.0e42	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -38.54231797
>0e45	b3 aa 15 4d				.dword	$4d15aab3
>0e49	e7 80					.byte	$e7,$80
.0e4b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -38.54231797
>0e4e	b3 aa 15 4d				.dword	$4d15aab3
>0e52	e7 80					.byte	$e7,$80
.0e54	20 62 4a	jsr $4a62		jsr	FloatCompare
.0e57	20 3c 4a	jsr $4a3c		jsr	CompareNotEqual
.0e5a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>0e5d	00 00 00 00				.dword	$00000000
>0e61	00 00					.byte	$00,$00
.0e63	20 62 4a	jsr $4a62		jsr	FloatCompare
.0e66	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.0e69	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.0e6c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -32529
>0e6f	11 7f 00 00				.dword	$00007f11
>0e73	00 80					.byte	$00,$80
.0e75	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -24864
>0e78	20 61 00 00				.dword	$00006120
>0e7c	00 80					.byte	$00,$80
.0e7e	20 a1 49	jsr $49a1		jsr	FloatAdd
.0e81	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -57393
>0e84	31 e0 00 00				.dword	$0000e031
>0e88	00 80					.byte	$00,$80
.0e8a	20 62 4a	jsr $4a62		jsr	FloatCompare
.0e8d	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.0e90	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.0e93	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -32529
>0e96	11 7f 00 00				.dword	$00007f11
>0e9a	00 80					.byte	$00,$80
.0e9c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -24864
>0e9f	20 61 00 00				.dword	$00006120
>0ea3	00 80					.byte	$00,$80
.0ea5	20 9b 49	jsr $499b		jsr	FloatSubtract
.0ea8	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -7665
>0eab	f1 1d 00 00				.dword	$00001df1
>0eaf	00 80					.byte	$00,$80
.0eb1	20 62 4a	jsr $4a62		jsr	FloatCompare
.0eb4	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.0eb7	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.0eba	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -32529
>0ebd	11 7f 00 00				.dword	$00007f11
>0ec1	00 80					.byte	$00,$80
.0ec3	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -24864
>0ec6	20 61 00 00				.dword	$00006120
>0eca	00 80					.byte	$00,$80
.0ecc	20 3d 4c	jsr $4c3d		jsr	FloatMultiply
.0ecf	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 808801056
>0ed2	20 53 35 30				.dword	$30355320
>0ed6	00 00					.byte	$00,$00
.0ed8	20 62 4a	jsr $4a62		jsr	FloatCompare
.0edb	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.0ede	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.0ee1	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -32529
>0ee4	11 7f 00 00				.dword	$00007f11
>0ee8	00 80					.byte	$00,$80
.0eea	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -24864
>0eed	20 61 00 00				.dword	$00006120
>0ef1	00 80					.byte	$00,$80
.0ef3	20 c6 4a	jsr $4ac6		jsr	FloatDivide
.0ef6	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 1.30827703
>0ef9	94 cf ba 53				.dword	$53bacf94
>0efd	e2 00					.byte	$e2,$00
.0eff	20 62 4a	jsr $4a62		jsr	FloatCompare
.0f02	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.0f05	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.0f08	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -24864
>0f0b	20 61 00 00				.dword	$00006120
>0f0f	00 80					.byte	$00,$80
.0f11	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -24864
>0f14	20 61 00 00				.dword	$00006120
>0f18	00 80					.byte	$00,$80
.0f1a	20 62 4a	jsr $4a62		jsr	FloatCompare
.0f1d	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.0f20	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>0f23	01 00 00 00				.dword	$00000001
>0f27	00 80					.byte	$00,$80
.0f29	20 62 4a	jsr $4a62		jsr	FloatCompare
.0f2c	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.0f2f	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.0f32	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -24864
>0f35	20 61 00 00				.dword	$00006120
>0f39	00 80					.byte	$00,$80
.0f3b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -24864
>0f3e	20 61 00 00				.dword	$00006120
>0f42	00 80					.byte	$00,$80
.0f44	20 62 4a	jsr $4a62		jsr	FloatCompare
.0f47	20 3c 4a	jsr $4a3c		jsr	CompareNotEqual
.0f4a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>0f4d	00 00 00 00				.dword	$00000000
>0f51	00 00					.byte	$00,$00
.0f53	20 62 4a	jsr $4a62		jsr	FloatCompare
.0f56	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.0f59	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.0f5c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -24864
>0f5f	20 61 00 00				.dword	$00006120
>0f63	00 80					.byte	$00,$80
.0f65	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -24864
>0f68	20 61 00 00				.dword	$00006120
>0f6c	00 80					.byte	$00,$80
.0f6e	20 62 4a	jsr $4a62		jsr	FloatCompare
.0f71	20 4a 4a	jsr $4a4a		jsr	CompareGreater
.0f74	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>0f77	00 00 00 00				.dword	$00000000
>0f7b	00 00					.byte	$00,$00
.0f7d	20 62 4a	jsr $4a62		jsr	FloatCompare
.0f80	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.0f83	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.0f86	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -24864
>0f89	20 61 00 00				.dword	$00006120
>0f8d	00 80					.byte	$00,$80
.0f8f	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -24864
>0f92	20 61 00 00				.dword	$00006120
>0f96	00 80					.byte	$00,$80
.0f98	20 62 4a	jsr $4a62		jsr	FloatCompare
.0f9b	20 5a 4a	jsr $4a5a		jsr	CompareGreaterEqual
.0f9e	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>0fa1	01 00 00 00				.dword	$00000001
>0fa5	00 80					.byte	$00,$80
.0fa7	20 62 4a	jsr $4a62		jsr	FloatCompare
.0faa	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.0fad	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.0fb0	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -24864
>0fb3	20 61 00 00				.dword	$00006120
>0fb7	00 80					.byte	$00,$80
.0fb9	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -24864
>0fbc	20 61 00 00				.dword	$00006120
>0fc0	00 80					.byte	$00,$80
.0fc2	20 62 4a	jsr $4a62		jsr	FloatCompare
.0fc5	20 42 4a	jsr $4a42		jsr	CompareLess
.0fc8	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>0fcb	00 00 00 00				.dword	$00000000
>0fcf	00 00					.byte	$00,$00
.0fd1	20 62 4a	jsr $4a62		jsr	FloatCompare
.0fd4	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.0fd7	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.0fda	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -24864
>0fdd	20 61 00 00				.dword	$00006120
>0fe1	00 80					.byte	$00,$80
.0fe3	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -24864
>0fe6	20 61 00 00				.dword	$00006120
>0fea	00 80					.byte	$00,$80
.0fec	20 62 4a	jsr $4a62		jsr	FloatCompare
.0fef	20 52 4a	jsr $4a52		jsr	CompareLessEqual
.0ff2	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>0ff5	01 00 00 00				.dword	$00000001
>0ff9	00 80					.byte	$00,$80
.0ffb	20 62 4a	jsr $4a62		jsr	FloatCompare
.0ffe	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1001	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1004	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -10.13995303
>1007	b2 9f 1e 51				.dword	$511e9fb2
>100b	e5 80					.byte	$e5,$80
.100d	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -45.19697092
>1010	5f d9 64 5a				.dword	$5a64d95f
>1014	e7 80					.byte	$e7,$80
.1016	20 a1 49	jsr $49a1		jsr	FloatAdd
.1019	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -55.33692395
>101c	4c 81 ac 6e				.dword	$6eac814c
>1020	e7 80					.byte	$e7,$80
.1022	20 62 4a	jsr $4a62		jsr	FloatCompare
.1025	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1028	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.102b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -10.13995303
>102e	b2 9f 1e 51				.dword	$511e9fb2
>1032	e5 80					.byte	$e5,$80
.1034	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -45.19697092
>1037	5f d9 64 5a				.dword	$5a64d95f
>103b	e7 80					.byte	$e7,$80
.103d	20 9b 49	jsr $499b		jsr	FloatSubtract
.1040	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 35.0570179
>1043	73 31 1d 46				.dword	$461d3173
>1047	e7 00					.byte	$e7,$00
.1049	20 62 4a	jsr $4a62		jsr	FloatCompare
.104c	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.104f	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1052	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -10.13995303
>1055	b2 9f 1e 51				.dword	$511e9fb2
>1059	e5 80					.byte	$e5,$80
.105b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -45.19697092
>105e	5f d9 64 5a				.dword	$5a64d95f
>1062	e7 80					.byte	$e7,$80
.1064	20 3d 4c	jsr $4c3d		jsr	FloatMultiply
.1067	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 458.29516204
>106a	ef e3 92 72				.dword	$7292e3ef
>106e	ea 00					.byte	$ea,$00
.1070	20 62 4a	jsr $4a62		jsr	FloatCompare
.1073	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1076	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1079	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -10.13995303
>107c	b2 9f 1e 51				.dword	$511e9fb2
>1080	e5 80					.byte	$e5,$80
.1082	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -45.19697092
>1085	5f d9 64 5a				.dword	$5a64d95f
>1089	e7 80					.byte	$e7,$80
.108b	20 c6 4a	jsr $4ac6		jsr	FloatDivide
.108e	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0.22435028
>1091	37 0a de 72				.dword	$72de0a37
>1095	df 00					.byte	$df,$00
.1097	20 62 4a	jsr $4a62		jsr	FloatCompare
.109a	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.109d	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.10a0	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 51.44812505
>10a3	a6 70 e5 66				.dword	$66e570a6
>10a7	e7 00					.byte	$e7,$00
.10a9	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 51.44812505
>10ac	a6 70 e5 66				.dword	$66e570a6
>10b0	e7 00					.byte	$e7,$00
.10b2	20 62 4a	jsr $4a62		jsr	FloatCompare
.10b5	20 4a 4a	jsr $4a4a		jsr	CompareGreater
.10b8	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>10bb	00 00 00 00				.dword	$00000000
>10bf	00 00					.byte	$00,$00
.10c1	20 62 4a	jsr $4a62		jsr	FloatCompare
.10c4	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.10c7	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.10ca	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 51.44812505
>10cd	a6 70 e5 66				.dword	$66e570a6
>10d1	e7 00					.byte	$e7,$00
.10d3	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 51.44812505
>10d6	a6 70 e5 66				.dword	$66e570a6
>10da	e7 00					.byte	$e7,$00
.10dc	20 62 4a	jsr $4a62		jsr	FloatCompare
.10df	20 5a 4a	jsr $4a5a		jsr	CompareGreaterEqual
.10e2	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>10e5	01 00 00 00				.dword	$00000001
>10e9	00 80					.byte	$00,$80
.10eb	20 62 4a	jsr $4a62		jsr	FloatCompare
.10ee	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.10f1	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.10f4	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 51.44812505
>10f7	a6 70 e5 66				.dword	$66e570a6
>10fb	e7 00					.byte	$e7,$00
.10fd	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 51.44812505
>1100	a6 70 e5 66				.dword	$66e570a6
>1104	e7 00					.byte	$e7,$00
.1106	20 62 4a	jsr $4a62		jsr	FloatCompare
.1109	20 42 4a	jsr $4a42		jsr	CompareLess
.110c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>110f	00 00 00 00				.dword	$00000000
>1113	00 00					.byte	$00,$00
.1115	20 62 4a	jsr $4a62		jsr	FloatCompare
.1118	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.111b	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.111e	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 51.44812505
>1121	a6 70 e5 66				.dword	$66e570a6
>1125	e7 00					.byte	$e7,$00
.1127	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 51.44812505
>112a	a6 70 e5 66				.dword	$66e570a6
>112e	e7 00					.byte	$e7,$00
.1130	20 62 4a	jsr $4a62		jsr	FloatCompare
.1133	20 52 4a	jsr $4a52		jsr	CompareLessEqual
.1136	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>1139	01 00 00 00				.dword	$00000001
>113d	00 80					.byte	$00,$80
.113f	20 62 4a	jsr $4a62		jsr	FloatCompare
.1142	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1145	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1148	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 51.44812505
>114b	a6 70 e5 66				.dword	$66e570a6
>114f	e7 00					.byte	$e7,$00
.1151	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 51.44812505
>1154	a6 70 e5 66				.dword	$66e570a6
>1158	e7 00					.byte	$e7,$00
.115a	20 62 4a	jsr $4a62		jsr	FloatCompare
.115d	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1160	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>1163	01 00 00 00				.dword	$00000001
>1167	00 80					.byte	$00,$80
.1169	20 62 4a	jsr $4a62		jsr	FloatCompare
.116c	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.116f	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1172	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 51.44812505
>1175	a6 70 e5 66				.dword	$66e570a6
>1179	e7 00					.byte	$e7,$00
.117b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 51.44812505
>117e	a6 70 e5 66				.dword	$66e570a6
>1182	e7 00					.byte	$e7,$00
.1184	20 62 4a	jsr $4a62		jsr	FloatCompare
.1187	20 3c 4a	jsr $4a3c		jsr	CompareNotEqual
.118a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>118d	00 00 00 00				.dword	$00000000
>1191	00 00					.byte	$00,$00
.1193	20 62 4a	jsr $4a62		jsr	FloatCompare
.1196	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1199	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.119c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 34547
>119f	f3 86 00 00				.dword	$000086f3
>11a3	00 00					.byte	$00,$00
.11a5	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 43744
>11a8	e0 aa 00 00				.dword	$0000aae0
>11ac	00 00					.byte	$00,$00
.11ae	20 a1 49	jsr $49a1		jsr	FloatAdd
.11b1	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 78291
>11b4	d3 31 01 00				.dword	$000131d3
>11b8	00 00					.byte	$00,$00
.11ba	20 62 4a	jsr $4a62		jsr	FloatCompare
.11bd	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.11c0	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.11c3	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 34547
>11c6	f3 86 00 00				.dword	$000086f3
>11ca	00 00					.byte	$00,$00
.11cc	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 43744
>11cf	e0 aa 00 00				.dword	$0000aae0
>11d3	00 00					.byte	$00,$00
.11d5	20 9b 49	jsr $499b		jsr	FloatSubtract
.11d8	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -9197
>11db	ed 23 00 00				.dword	$000023ed
>11df	00 80					.byte	$00,$80
.11e1	20 62 4a	jsr $4a62		jsr	FloatCompare
.11e4	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.11e7	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.11ea	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 34547
>11ed	f3 86 00 00				.dword	$000086f3
>11f1	00 00					.byte	$00,$00
.11f3	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 43744
>11f6	e0 aa 00 00				.dword	$0000aae0
>11fa	00 00					.byte	$00,$00
.11fc	20 3d 4c	jsr $4c3d		jsr	FloatMultiply
.11ff	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 1511223968
>1202	a0 72 13 5a				.dword	$5a1372a0
>1206	00 00					.byte	$00,$00
.1208	20 62 4a	jsr $4a62		jsr	FloatCompare
.120b	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.120e	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1211	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 34547
>1214	f3 86 00 00				.dword	$000086f3
>1218	00 00					.byte	$00,$00
.121a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 43744
>121d	e0 aa 00 00				.dword	$0000aae0
>1221	00 00					.byte	$00,$00
.1223	20 c6 4a	jsr $4ac6		jsr	FloatDivide
.1226	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0.78975402
>1229	e4 a8 16 65				.dword	$6516a8e4
>122d	e1 00					.byte	$e1,$00
.122f	20 62 4a	jsr $4a62		jsr	FloatCompare
.1232	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1235	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1238	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 43744
>123b	e0 aa 00 00				.dword	$0000aae0
>123f	00 00					.byte	$00,$00
.1241	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 43744
>1244	e0 aa 00 00				.dword	$0000aae0
>1248	00 00					.byte	$00,$00
.124a	20 62 4a	jsr $4a62		jsr	FloatCompare
.124d	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1250	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>1253	01 00 00 00				.dword	$00000001
>1257	00 80					.byte	$00,$80
.1259	20 62 4a	jsr $4a62		jsr	FloatCompare
.125c	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.125f	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1262	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 43744
>1265	e0 aa 00 00				.dword	$0000aae0
>1269	00 00					.byte	$00,$00
.126b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 43744
>126e	e0 aa 00 00				.dword	$0000aae0
>1272	00 00					.byte	$00,$00
.1274	20 62 4a	jsr $4a62		jsr	FloatCompare
.1277	20 3c 4a	jsr $4a3c		jsr	CompareNotEqual
.127a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>127d	00 00 00 00				.dword	$00000000
>1281	00 00					.byte	$00,$00
.1283	20 62 4a	jsr $4a62		jsr	FloatCompare
.1286	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1289	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.128c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 43744
>128f	e0 aa 00 00				.dword	$0000aae0
>1293	00 00					.byte	$00,$00
.1295	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 43744
>1298	e0 aa 00 00				.dword	$0000aae0
>129c	00 00					.byte	$00,$00
.129e	20 62 4a	jsr $4a62		jsr	FloatCompare
.12a1	20 4a 4a	jsr $4a4a		jsr	CompareGreater
.12a4	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>12a7	00 00 00 00				.dword	$00000000
>12ab	00 00					.byte	$00,$00
.12ad	20 62 4a	jsr $4a62		jsr	FloatCompare
.12b0	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.12b3	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.12b6	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 43744
>12b9	e0 aa 00 00				.dword	$0000aae0
>12bd	00 00					.byte	$00,$00
.12bf	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 43744
>12c2	e0 aa 00 00				.dword	$0000aae0
>12c6	00 00					.byte	$00,$00
.12c8	20 62 4a	jsr $4a62		jsr	FloatCompare
.12cb	20 5a 4a	jsr $4a5a		jsr	CompareGreaterEqual
.12ce	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>12d1	01 00 00 00				.dword	$00000001
>12d5	00 80					.byte	$00,$80
.12d7	20 62 4a	jsr $4a62		jsr	FloatCompare
.12da	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.12dd	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.12e0	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 43744
>12e3	e0 aa 00 00				.dword	$0000aae0
>12e7	00 00					.byte	$00,$00
.12e9	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 43744
>12ec	e0 aa 00 00				.dword	$0000aae0
>12f0	00 00					.byte	$00,$00
.12f2	20 62 4a	jsr $4a62		jsr	FloatCompare
.12f5	20 42 4a	jsr $4a42		jsr	CompareLess
.12f8	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>12fb	00 00 00 00				.dword	$00000000
>12ff	00 00					.byte	$00,$00
.1301	20 62 4a	jsr $4a62		jsr	FloatCompare
.1304	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1307	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.130a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 43744
>130d	e0 aa 00 00				.dword	$0000aae0
>1311	00 00					.byte	$00,$00
.1313	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 43744
>1316	e0 aa 00 00				.dword	$0000aae0
>131a	00 00					.byte	$00,$00
.131c	20 62 4a	jsr $4a62		jsr	FloatCompare
.131f	20 52 4a	jsr $4a52		jsr	CompareLessEqual
.1322	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>1325	01 00 00 00				.dword	$00000001
>1329	00 80					.byte	$00,$80
.132b	20 62 4a	jsr $4a62		jsr	FloatCompare
.132e	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1331	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1334	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 17.2635458
>1337	f3 de 0d 45				.dword	$450ddef3
>133b	e6 00					.byte	$e6,$00
.133d	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 47.62646797
>1340	69 c0 40 5f				.dword	$5f40c069
>1344	e7 00					.byte	$e7,$00
.1346	20 a1 49	jsr $49a1		jsr	FloatAdd
.1349	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 64.89001377
>134c	f1 d7 e3 40				.dword	$40e3d7f1
>1350	e8 00					.byte	$e8,$00
.1352	20 62 4a	jsr $4a62		jsr	FloatCompare
.1355	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1358	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.135b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 17.2635458
>135e	f3 de 0d 45				.dword	$450ddef3
>1362	e6 00					.byte	$e6,$00
.1364	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 47.62646797
>1367	69 c0 40 5f				.dword	$5f40c069
>136b	e7 00					.byte	$e7,$00
.136d	20 9b 49	jsr $499b		jsr	FloatSubtract
.1370	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -30.36292217
>1373	df a1 73 79				.dword	$7973a1df
>1377	e6 80					.byte	$e6,$80
.1379	20 62 4a	jsr $4a62		jsr	FloatCompare
.137c	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.137f	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1382	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 17.2635458
>1385	f3 de 0d 45				.dword	$450ddef3
>1389	e6 00					.byte	$e6,$00
.138b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 47.62646797
>138e	69 c0 40 5f				.dword	$5f40c069
>1392	e7 00					.byte	$e7,$00
.1394	20 3d 4c	jsr $4c3d		jsr	FloatMultiply
.1397	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 822.20171109
>139a	6b 74 c6 66				.dword	$66c6746b
>139e	eb 00					.byte	$eb,$00
.13a0	20 62 4a	jsr $4a62		jsr	FloatCompare
.13a3	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.13a6	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.13a9	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 17.2635458
>13ac	f3 de 0d 45				.dword	$450ddef3
>13b0	e6 00					.byte	$e6,$00
.13b2	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 47.62646797
>13b5	69 c0 40 5f				.dword	$5f40c069
>13b9	e7 00					.byte	$e7,$00
.13bb	20 c6 4a	jsr $4ac6		jsr	FloatDivide
.13be	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0.36247798
>13c1	5e 5b cb 5c				.dword	$5ccb5b5e
>13c5	e0 00					.byte	$e0,$00
.13c7	20 62 4a	jsr $4a62		jsr	FloatCompare
.13ca	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.13cd	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.13d0	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 42.38681461
>13d3	91 0c c6 54				.dword	$54c60c91
>13d7	e7 00					.byte	$e7,$00
.13d9	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 42.38681461
>13dc	91 0c c6 54				.dword	$54c60c91
>13e0	e7 00					.byte	$e7,$00
.13e2	20 62 4a	jsr $4a62		jsr	FloatCompare
.13e5	20 4a 4a	jsr $4a4a		jsr	CompareGreater
.13e8	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>13eb	00 00 00 00				.dword	$00000000
>13ef	00 00					.byte	$00,$00
.13f1	20 62 4a	jsr $4a62		jsr	FloatCompare
.13f4	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.13f7	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.13fa	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 42.38681461
>13fd	91 0c c6 54				.dword	$54c60c91
>1401	e7 00					.byte	$e7,$00
.1403	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 42.38681461
>1406	91 0c c6 54				.dword	$54c60c91
>140a	e7 00					.byte	$e7,$00
.140c	20 62 4a	jsr $4a62		jsr	FloatCompare
.140f	20 5a 4a	jsr $4a5a		jsr	CompareGreaterEqual
.1412	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>1415	01 00 00 00				.dword	$00000001
>1419	00 80					.byte	$00,$80
.141b	20 62 4a	jsr $4a62		jsr	FloatCompare
.141e	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1421	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1424	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 42.38681461
>1427	91 0c c6 54				.dword	$54c60c91
>142b	e7 00					.byte	$e7,$00
.142d	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 42.38681461
>1430	91 0c c6 54				.dword	$54c60c91
>1434	e7 00					.byte	$e7,$00
.1436	20 62 4a	jsr $4a62		jsr	FloatCompare
.1439	20 42 4a	jsr $4a42		jsr	CompareLess
.143c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>143f	00 00 00 00				.dword	$00000000
>1443	00 00					.byte	$00,$00
.1445	20 62 4a	jsr $4a62		jsr	FloatCompare
.1448	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.144b	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.144e	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 42.38681461
>1451	91 0c c6 54				.dword	$54c60c91
>1455	e7 00					.byte	$e7,$00
.1457	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 42.38681461
>145a	91 0c c6 54				.dword	$54c60c91
>145e	e7 00					.byte	$e7,$00
.1460	20 62 4a	jsr $4a62		jsr	FloatCompare
.1463	20 52 4a	jsr $4a52		jsr	CompareLessEqual
.1466	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>1469	01 00 00 00				.dword	$00000001
>146d	00 80					.byte	$00,$80
.146f	20 62 4a	jsr $4a62		jsr	FloatCompare
.1472	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1475	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1478	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 42.38681461
>147b	91 0c c6 54				.dword	$54c60c91
>147f	e7 00					.byte	$e7,$00
.1481	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 42.38681461
>1484	91 0c c6 54				.dword	$54c60c91
>1488	e7 00					.byte	$e7,$00
.148a	20 62 4a	jsr $4a62		jsr	FloatCompare
.148d	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1490	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>1493	01 00 00 00				.dword	$00000001
>1497	00 80					.byte	$00,$80
.1499	20 62 4a	jsr $4a62		jsr	FloatCompare
.149c	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.149f	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.14a2	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 42.38681461
>14a5	91 0c c6 54				.dword	$54c60c91
>14a9	e7 00					.byte	$e7,$00
.14ab	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 42.38681461
>14ae	91 0c c6 54				.dword	$54c60c91
>14b2	e7 00					.byte	$e7,$00
.14b4	20 62 4a	jsr $4a62		jsr	FloatCompare
.14b7	20 3c 4a	jsr $4a3c		jsr	CompareNotEqual
.14ba	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>14bd	00 00 00 00				.dword	$00000000
>14c1	00 00					.byte	$00,$00
.14c3	20 62 4a	jsr $4a62		jsr	FloatCompare
.14c6	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.14c9	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.14cc	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 24135
>14cf	47 5e 00 00				.dword	$00005e47
>14d3	00 00					.byte	$00,$00
.14d5	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -14574
>14d8	ee 38 00 00				.dword	$000038ee
>14dc	00 80					.byte	$00,$80
.14de	20 a1 49	jsr $49a1		jsr	FloatAdd
.14e1	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 9561
>14e4	59 25 00 00				.dword	$00002559
>14e8	00 00					.byte	$00,$00
.14ea	20 62 4a	jsr $4a62		jsr	FloatCompare
.14ed	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.14f0	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.14f3	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 24135
>14f6	47 5e 00 00				.dword	$00005e47
>14fa	00 00					.byte	$00,$00
.14fc	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -14574
>14ff	ee 38 00 00				.dword	$000038ee
>1503	00 80					.byte	$00,$80
.1505	20 9b 49	jsr $499b		jsr	FloatSubtract
.1508	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 38709
>150b	35 97 00 00				.dword	$00009735
>150f	00 00					.byte	$00,$00
.1511	20 62 4a	jsr $4a62		jsr	FloatCompare
.1514	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1517	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.151a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 24135
>151d	47 5e 00 00				.dword	$00005e47
>1521	00 00					.byte	$00,$00
.1523	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -14574
>1526	ee 38 00 00				.dword	$000038ee
>152a	00 80					.byte	$00,$80
.152c	20 3d 4c	jsr $4c3d		jsr	FloatMultiply
.152f	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -351743490
>1532	02 2e f7 14				.dword	$14f72e02
>1536	00 80					.byte	$00,$80
.1538	20 62 4a	jsr $4a62		jsr	FloatCompare
.153b	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.153e	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1541	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 24135
>1544	47 5e 00 00				.dword	$00005e47
>1548	00 00					.byte	$00,$00
.154a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -14574
>154d	ee 38 00 00				.dword	$000038ee
>1551	00 80					.byte	$00,$80
.1553	20 c6 4a	jsr $4ac6		jsr	FloatDivide
.1556	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1.65603129
>1559	aa 6a fc 69				.dword	$69fc6aaa
>155d	e2 80					.byte	$e2,$80
.155f	20 62 4a	jsr $4a62		jsr	FloatCompare
.1562	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1565	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1568	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -14574
>156b	ee 38 00 00				.dword	$000038ee
>156f	00 80					.byte	$00,$80
.1571	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -14574
>1574	ee 38 00 00				.dword	$000038ee
>1578	00 80					.byte	$00,$80
.157a	20 62 4a	jsr $4a62		jsr	FloatCompare
.157d	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1580	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>1583	01 00 00 00				.dword	$00000001
>1587	00 80					.byte	$00,$80
.1589	20 62 4a	jsr $4a62		jsr	FloatCompare
.158c	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.158f	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1592	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -14574
>1595	ee 38 00 00				.dword	$000038ee
>1599	00 80					.byte	$00,$80
.159b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -14574
>159e	ee 38 00 00				.dword	$000038ee
>15a2	00 80					.byte	$00,$80
.15a4	20 62 4a	jsr $4a62		jsr	FloatCompare
.15a7	20 3c 4a	jsr $4a3c		jsr	CompareNotEqual
.15aa	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>15ad	00 00 00 00				.dword	$00000000
>15b1	00 00					.byte	$00,$00
.15b3	20 62 4a	jsr $4a62		jsr	FloatCompare
.15b6	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.15b9	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.15bc	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -14574
>15bf	ee 38 00 00				.dword	$000038ee
>15c3	00 80					.byte	$00,$80
.15c5	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -14574
>15c8	ee 38 00 00				.dword	$000038ee
>15cc	00 80					.byte	$00,$80
.15ce	20 62 4a	jsr $4a62		jsr	FloatCompare
.15d1	20 4a 4a	jsr $4a4a		jsr	CompareGreater
.15d4	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>15d7	00 00 00 00				.dword	$00000000
>15db	00 00					.byte	$00,$00
.15dd	20 62 4a	jsr $4a62		jsr	FloatCompare
.15e0	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.15e3	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.15e6	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -14574
>15e9	ee 38 00 00				.dword	$000038ee
>15ed	00 80					.byte	$00,$80
.15ef	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -14574
>15f2	ee 38 00 00				.dword	$000038ee
>15f6	00 80					.byte	$00,$80
.15f8	20 62 4a	jsr $4a62		jsr	FloatCompare
.15fb	20 5a 4a	jsr $4a5a		jsr	CompareGreaterEqual
.15fe	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>1601	01 00 00 00				.dword	$00000001
>1605	00 80					.byte	$00,$80
.1607	20 62 4a	jsr $4a62		jsr	FloatCompare
.160a	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.160d	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1610	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -14574
>1613	ee 38 00 00				.dword	$000038ee
>1617	00 80					.byte	$00,$80
.1619	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -14574
>161c	ee 38 00 00				.dword	$000038ee
>1620	00 80					.byte	$00,$80
.1622	20 62 4a	jsr $4a62		jsr	FloatCompare
.1625	20 42 4a	jsr $4a42		jsr	CompareLess
.1628	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>162b	00 00 00 00				.dword	$00000000
>162f	00 00					.byte	$00,$00
.1631	20 62 4a	jsr $4a62		jsr	FloatCompare
.1634	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1637	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.163a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -14574
>163d	ee 38 00 00				.dword	$000038ee
>1641	00 80					.byte	$00,$80
.1643	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -14574
>1646	ee 38 00 00				.dword	$000038ee
>164a	00 80					.byte	$00,$80
.164c	20 62 4a	jsr $4a62		jsr	FloatCompare
.164f	20 52 4a	jsr $4a52		jsr	CompareLessEqual
.1652	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>1655	01 00 00 00				.dword	$00000001
>1659	00 80					.byte	$00,$80
.165b	20 62 4a	jsr $4a62		jsr	FloatCompare
.165e	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1661	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1664	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 76.89228153
>1667	90 6c e4 4c				.dword	$4ce46c90
>166b	e8 00					.byte	$e8,$00
.166d	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 71.98048109
>1670	cf 00 fb 47				.dword	$47fb00cf
>1674	e8 00					.byte	$e8,$00
.1676	20 a1 49	jsr $49a1		jsr	FloatAdd
.1679	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 148.87276261
>167c	af b6 6f 4a				.dword	$4a6fb6af
>1680	e9 00					.byte	$e9,$00
.1682	20 62 4a	jsr $4a62		jsr	FloatCompare
.1685	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1688	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.168b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 76.89228153
>168e	90 6c e4 4c				.dword	$4ce46c90
>1692	e8 00					.byte	$e8,$00
.1694	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 71.98048109
>1697	cf 00 fb 47				.dword	$47fb00cf
>169b	e8 00					.byte	$e8,$00
.169d	20 9b 49	jsr $499b		jsr	FloatSubtract
.16a0	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 4.91180044
>16a3	0f bc 96 4e				.dword	$4e96bc0f
>16a7	e4 00					.byte	$e4,$00
.16a9	20 62 4a	jsr $4a62		jsr	FloatCompare
.16ac	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.16af	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.16b2	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 76.89228153
>16b5	90 6c e4 4c				.dword	$4ce46c90
>16b9	e8 00					.byte	$e8,$00
.16bb	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 71.98048109
>16be	cf 00 fb 47				.dword	$47fb00cf
>16c2	e8 00					.byte	$e8,$00
.16c4	20 3d 4c	jsr $4c3d		jsr	FloatMultiply
.16c7	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 5534.74341623
>16ca	42 f9 7a 56				.dword	$567af942
>16ce	ee 00					.byte	$ee,$00
.16d0	20 62 4a	jsr $4a62		jsr	FloatCompare
.16d3	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.16d6	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.16d9	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 76.89228153
>16dc	90 6c e4 4c				.dword	$4ce46c90
>16e0	e8 00					.byte	$e8,$00
.16e2	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 71.98048109
>16e5	cf 00 fb 47				.dword	$47fb00cf
>16e9	e8 00					.byte	$e8,$00
.16eb	20 c6 4a	jsr $4ac6		jsr	FloatDivide
.16ee	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 1.06823795
>16f1	b5 02 5e 44				.dword	$445e02b5
>16f5	e2 00					.byte	$e2,$00
.16f7	20 62 4a	jsr $4a62		jsr	FloatCompare
.16fa	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.16fd	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1700	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -16.34891067
>1703	d7 48 65 41				.dword	$416548d7
>1707	e6 80					.byte	$e6,$80
.1709	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -40.06317324
>170c	3e 58 20 50				.dword	$5020583e
>1710	e7 80					.byte	$e7,$80
.1712	20 62 4a	jsr $4a62		jsr	FloatCompare
.1715	20 4a 4a	jsr $4a4a		jsr	CompareGreater
.1718	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>171b	01 00 00 00				.dword	$00000001
>171f	00 80					.byte	$00,$80
.1721	20 62 4a	jsr $4a62		jsr	FloatCompare
.1724	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1727	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.172a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -16.34891067
>172d	d7 48 65 41				.dword	$416548d7
>1731	e6 80					.byte	$e6,$80
.1733	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -40.06317324
>1736	3e 58 20 50				.dword	$5020583e
>173a	e7 80					.byte	$e7,$80
.173c	20 62 4a	jsr $4a62		jsr	FloatCompare
.173f	20 5a 4a	jsr $4a5a		jsr	CompareGreaterEqual
.1742	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>1745	01 00 00 00				.dword	$00000001
>1749	00 80					.byte	$00,$80
.174b	20 62 4a	jsr $4a62		jsr	FloatCompare
.174e	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1751	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1754	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -16.34891067
>1757	d7 48 65 41				.dword	$416548d7
>175b	e6 80					.byte	$e6,$80
.175d	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -40.06317324
>1760	3e 58 20 50				.dword	$5020583e
>1764	e7 80					.byte	$e7,$80
.1766	20 62 4a	jsr $4a62		jsr	FloatCompare
.1769	20 42 4a	jsr $4a42		jsr	CompareLess
.176c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>176f	00 00 00 00				.dword	$00000000
>1773	00 00					.byte	$00,$00
.1775	20 62 4a	jsr $4a62		jsr	FloatCompare
.1778	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.177b	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.177e	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -16.34891067
>1781	d7 48 65 41				.dword	$416548d7
>1785	e6 80					.byte	$e6,$80
.1787	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -40.06317324
>178a	3e 58 20 50				.dword	$5020583e
>178e	e7 80					.byte	$e7,$80
.1790	20 62 4a	jsr $4a62		jsr	FloatCompare
.1793	20 52 4a	jsr $4a52		jsr	CompareLessEqual
.1796	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>1799	00 00 00 00				.dword	$00000000
>179d	00 00					.byte	$00,$00
.179f	20 62 4a	jsr $4a62		jsr	FloatCompare
.17a2	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.17a5	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.17a8	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -16.34891067
>17ab	d7 48 65 41				.dword	$416548d7
>17af	e6 80					.byte	$e6,$80
.17b1	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -40.06317324
>17b4	3e 58 20 50				.dword	$5020583e
>17b8	e7 80					.byte	$e7,$80
.17ba	20 62 4a	jsr $4a62		jsr	FloatCompare
.17bd	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.17c0	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>17c3	00 00 00 00				.dword	$00000000
>17c7	00 00					.byte	$00,$00
.17c9	20 62 4a	jsr $4a62		jsr	FloatCompare
.17cc	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.17cf	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.17d2	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -16.34891067
>17d5	d7 48 65 41				.dword	$416548d7
>17d9	e6 80					.byte	$e6,$80
.17db	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -40.06317324
>17de	3e 58 20 50				.dword	$5020583e
>17e2	e7 80					.byte	$e7,$80
.17e4	20 62 4a	jsr $4a62		jsr	FloatCompare
.17e7	20 3c 4a	jsr $4a3c		jsr	CompareNotEqual
.17ea	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>17ed	01 00 00 00				.dword	$00000001
>17f1	00 80					.byte	$00,$80
.17f3	20 62 4a	jsr $4a62		jsr	FloatCompare
.17f6	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.17f9	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.17fc	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 12568
>17ff	18 31 00 00				.dword	$00003118
>1803	00 00					.byte	$00,$00
.1805	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -34347
>1808	2b 86 00 00				.dword	$0000862b
>180c	00 80					.byte	$00,$80
.180e	20 a1 49	jsr $49a1		jsr	FloatAdd
.1811	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -21779
>1814	13 55 00 00				.dword	$00005513
>1818	00 80					.byte	$00,$80
.181a	20 62 4a	jsr $4a62		jsr	FloatCompare
.181d	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1820	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1823	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 12568
>1826	18 31 00 00				.dword	$00003118
>182a	00 00					.byte	$00,$00
.182c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -34347
>182f	2b 86 00 00				.dword	$0000862b
>1833	00 80					.byte	$00,$80
.1835	20 9b 49	jsr $499b		jsr	FloatSubtract
.1838	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 46915
>183b	43 b7 00 00				.dword	$0000b743
>183f	00 00					.byte	$00,$00
.1841	20 62 4a	jsr $4a62		jsr	FloatCompare
.1844	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1847	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.184a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 12568
>184d	18 31 00 00				.dword	$00003118
>1851	00 00					.byte	$00,$00
.1853	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -34347
>1856	2b 86 00 00				.dword	$0000862b
>185a	00 80					.byte	$00,$80
.185c	20 3d 4c	jsr $4c3d		jsr	FloatMultiply
.185f	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -431673096
>1862	08 cf ba 19				.dword	$19bacf08
>1866	00 80					.byte	$00,$80
.1868	20 62 4a	jsr $4a62		jsr	FloatCompare
.186b	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.186e	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1871	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 12568
>1874	18 31 00 00				.dword	$00003118
>1878	00 00					.byte	$00,$00
.187a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -34347
>187d	2b 86 00 00				.dword	$0000862b
>1881	00 80					.byte	$00,$80
.1883	20 c6 4a	jsr $4ac6		jsr	FloatDivide
.1886	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -0.3659126
>1889	ba 72 ac 5d				.dword	$5dac72ba
>188d	e0 80					.byte	$e0,$80
.188f	20 62 4a	jsr $4a62		jsr	FloatCompare
.1892	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1895	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1898	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -34347
>189b	2b 86 00 00				.dword	$0000862b
>189f	00 80					.byte	$00,$80
.18a1	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -34347
>18a4	2b 86 00 00				.dword	$0000862b
>18a8	00 80					.byte	$00,$80
.18aa	20 62 4a	jsr $4a62		jsr	FloatCompare
.18ad	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.18b0	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>18b3	01 00 00 00				.dword	$00000001
>18b7	00 80					.byte	$00,$80
.18b9	20 62 4a	jsr $4a62		jsr	FloatCompare
.18bc	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.18bf	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.18c2	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -34347
>18c5	2b 86 00 00				.dword	$0000862b
>18c9	00 80					.byte	$00,$80
.18cb	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -34347
>18ce	2b 86 00 00				.dword	$0000862b
>18d2	00 80					.byte	$00,$80
.18d4	20 62 4a	jsr $4a62		jsr	FloatCompare
.18d7	20 3c 4a	jsr $4a3c		jsr	CompareNotEqual
.18da	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>18dd	00 00 00 00				.dword	$00000000
>18e1	00 00					.byte	$00,$00
.18e3	20 62 4a	jsr $4a62		jsr	FloatCompare
.18e6	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.18e9	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.18ec	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -34347
>18ef	2b 86 00 00				.dword	$0000862b
>18f3	00 80					.byte	$00,$80
.18f5	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -34347
>18f8	2b 86 00 00				.dword	$0000862b
>18fc	00 80					.byte	$00,$80
.18fe	20 62 4a	jsr $4a62		jsr	FloatCompare
.1901	20 4a 4a	jsr $4a4a		jsr	CompareGreater
.1904	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>1907	00 00 00 00				.dword	$00000000
>190b	00 00					.byte	$00,$00
.190d	20 62 4a	jsr $4a62		jsr	FloatCompare
.1910	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1913	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1916	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -34347
>1919	2b 86 00 00				.dword	$0000862b
>191d	00 80					.byte	$00,$80
.191f	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -34347
>1922	2b 86 00 00				.dword	$0000862b
>1926	00 80					.byte	$00,$80
.1928	20 62 4a	jsr $4a62		jsr	FloatCompare
.192b	20 5a 4a	jsr $4a5a		jsr	CompareGreaterEqual
.192e	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>1931	01 00 00 00				.dword	$00000001
>1935	00 80					.byte	$00,$80
.1937	20 62 4a	jsr $4a62		jsr	FloatCompare
.193a	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.193d	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1940	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -34347
>1943	2b 86 00 00				.dword	$0000862b
>1947	00 80					.byte	$00,$80
.1949	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -34347
>194c	2b 86 00 00				.dword	$0000862b
>1950	00 80					.byte	$00,$80
.1952	20 62 4a	jsr $4a62		jsr	FloatCompare
.1955	20 42 4a	jsr $4a42		jsr	CompareLess
.1958	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>195b	00 00 00 00				.dword	$00000000
>195f	00 00					.byte	$00,$00
.1961	20 62 4a	jsr $4a62		jsr	FloatCompare
.1964	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1967	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.196a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -34347
>196d	2b 86 00 00				.dword	$0000862b
>1971	00 80					.byte	$00,$80
.1973	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -34347
>1976	2b 86 00 00				.dword	$0000862b
>197a	00 80					.byte	$00,$80
.197c	20 62 4a	jsr $4a62		jsr	FloatCompare
.197f	20 52 4a	jsr $4a52		jsr	CompareLessEqual
.1982	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>1985	01 00 00 00				.dword	$00000001
>1989	00 80					.byte	$00,$80
.198b	20 62 4a	jsr $4a62		jsr	FloatCompare
.198e	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1991	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1994	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 10.46610513
>1997	54 95 ba 53				.dword	$53ba9554
>199b	e5 00					.byte	$e5,$00
.199d	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 53.66218515
>19a0	ef 09 53 6b				.dword	$6b5309ef
>19a4	e7 00					.byte	$e7,$00
.19a6	20 a1 49	jsr $49a1		jsr	FloatAdd
.19a9	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 64.12829027
>19ac	a2 d7 20 40				.dword	$4020d7a2
>19b0	e8 00					.byte	$e8,$00
.19b2	20 62 4a	jsr $4a62		jsr	FloatCompare
.19b5	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.19b8	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.19bb	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 10.46610513
>19be	54 95 ba 53				.dword	$53ba9554
>19c2	e5 00					.byte	$e5,$00
.19c4	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 53.66218515
>19c7	ef 09 53 6b				.dword	$6b5309ef
>19cb	e7 00					.byte	$e7,$00
.19cd	20 9b 49	jsr $499b		jsr	FloatSubtract
.19d0	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -43.19608002
>19d3	9a 64 64 56				.dword	$5664649a
>19d7	e7 80					.byte	$e7,$80
.19d9	20 62 4a	jsr $4a62		jsr	FloatCompare
.19dc	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.19df	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.19e2	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 10.46610513
>19e5	54 95 ba 53				.dword	$53ba9554
>19e9	e5 00					.byte	$e5,$00
.19eb	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 53.66218515
>19ee	ef 09 53 6b				.dword	$6b5309ef
>19f2	e7 00					.byte	$e7,$00
.19f4	20 3d 4c	jsr $4c3d		jsr	FloatMultiply
.19f7	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 561.63407107
>19fa	4f 4a 34 46				.dword	$46344a4f
>19fe	eb 00					.byte	$eb,$00
.1a00	20 62 4a	jsr $4a62		jsr	FloatCompare
.1a03	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1a06	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1a09	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 10.46610513
>1a0c	54 95 ba 53				.dword	$53ba9554
>1a10	e5 00					.byte	$e5,$00
.1a12	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 53.66218515
>1a15	ef 09 53 6b				.dword	$6b5309ef
>1a19	e7 00					.byte	$e7,$00
.1a1b	20 c6 4a	jsr $4ac6		jsr	FloatDivide
.1a1e	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0.19503688
>1a21	ba df db 63				.dword	$63dbdfba
>1a25	df 00					.byte	$df,$00
.1a27	20 62 4a	jsr $4a62		jsr	FloatCompare
.1a2a	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1a2d	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1a30	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -9.66186118
>1a33	e0 7d 4b 4d				.dword	$4d4b7de0
>1a37	e5 80					.byte	$e5,$80
.1a39	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -9.66186118
>1a3c	e0 7d 4b 4d				.dword	$4d4b7de0
>1a40	e5 80					.byte	$e5,$80
.1a42	20 62 4a	jsr $4a62		jsr	FloatCompare
.1a45	20 4a 4a	jsr $4a4a		jsr	CompareGreater
.1a48	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>1a4b	00 00 00 00				.dword	$00000000
>1a4f	00 00					.byte	$00,$00
.1a51	20 62 4a	jsr $4a62		jsr	FloatCompare
.1a54	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1a57	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1a5a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -9.66186118
>1a5d	e0 7d 4b 4d				.dword	$4d4b7de0
>1a61	e5 80					.byte	$e5,$80
.1a63	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -9.66186118
>1a66	e0 7d 4b 4d				.dword	$4d4b7de0
>1a6a	e5 80					.byte	$e5,$80
.1a6c	20 62 4a	jsr $4a62		jsr	FloatCompare
.1a6f	20 5a 4a	jsr $4a5a		jsr	CompareGreaterEqual
.1a72	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>1a75	01 00 00 00				.dword	$00000001
>1a79	00 80					.byte	$00,$80
.1a7b	20 62 4a	jsr $4a62		jsr	FloatCompare
.1a7e	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1a81	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1a84	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -9.66186118
>1a87	e0 7d 4b 4d				.dword	$4d4b7de0
>1a8b	e5 80					.byte	$e5,$80
.1a8d	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -9.66186118
>1a90	e0 7d 4b 4d				.dword	$4d4b7de0
>1a94	e5 80					.byte	$e5,$80
.1a96	20 62 4a	jsr $4a62		jsr	FloatCompare
.1a99	20 42 4a	jsr $4a42		jsr	CompareLess
.1a9c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>1a9f	00 00 00 00				.dword	$00000000
>1aa3	00 00					.byte	$00,$00
.1aa5	20 62 4a	jsr $4a62		jsr	FloatCompare
.1aa8	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1aab	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1aae	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -9.66186118
>1ab1	e0 7d 4b 4d				.dword	$4d4b7de0
>1ab5	e5 80					.byte	$e5,$80
.1ab7	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -9.66186118
>1aba	e0 7d 4b 4d				.dword	$4d4b7de0
>1abe	e5 80					.byte	$e5,$80
.1ac0	20 62 4a	jsr $4a62		jsr	FloatCompare
.1ac3	20 52 4a	jsr $4a52		jsr	CompareLessEqual
.1ac6	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>1ac9	01 00 00 00				.dword	$00000001
>1acd	00 80					.byte	$00,$80
.1acf	20 62 4a	jsr $4a62		jsr	FloatCompare
.1ad2	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1ad5	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1ad8	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -9.66186118
>1adb	e0 7d 4b 4d				.dword	$4d4b7de0
>1adf	e5 80					.byte	$e5,$80
.1ae1	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -9.66186118
>1ae4	e0 7d 4b 4d				.dword	$4d4b7de0
>1ae8	e5 80					.byte	$e5,$80
.1aea	20 62 4a	jsr $4a62		jsr	FloatCompare
.1aed	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1af0	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>1af3	01 00 00 00				.dword	$00000001
>1af7	00 80					.byte	$00,$80
.1af9	20 62 4a	jsr $4a62		jsr	FloatCompare
.1afc	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1aff	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1b02	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -9.66186118
>1b05	e0 7d 4b 4d				.dword	$4d4b7de0
>1b09	e5 80					.byte	$e5,$80
.1b0b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -9.66186118
>1b0e	e0 7d 4b 4d				.dword	$4d4b7de0
>1b12	e5 80					.byte	$e5,$80
.1b14	20 62 4a	jsr $4a62		jsr	FloatCompare
.1b17	20 3c 4a	jsr $4a3c		jsr	CompareNotEqual
.1b1a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>1b1d	00 00 00 00				.dword	$00000000
>1b21	00 00					.byte	$00,$00
.1b23	20 62 4a	jsr $4a62		jsr	FloatCompare
.1b26	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1b29	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1b2c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -44005
>1b2f	e5 ab 00 00				.dword	$0000abe5
>1b33	00 80					.byte	$00,$80
.1b35	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -29575
>1b38	87 73 00 00				.dword	$00007387
>1b3c	00 80					.byte	$00,$80
.1b3e	20 a1 49	jsr $49a1		jsr	FloatAdd
.1b41	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -73580
>1b44	6c 1f 01 00				.dword	$00011f6c
>1b48	00 80					.byte	$00,$80
.1b4a	20 62 4a	jsr $4a62		jsr	FloatCompare
.1b4d	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1b50	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1b53	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -44005
>1b56	e5 ab 00 00				.dword	$0000abe5
>1b5a	00 80					.byte	$00,$80
.1b5c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -29575
>1b5f	87 73 00 00				.dword	$00007387
>1b63	00 80					.byte	$00,$80
.1b65	20 9b 49	jsr $499b		jsr	FloatSubtract
.1b68	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -14430
>1b6b	5e 38 00 00				.dword	$0000385e
>1b6f	00 80					.byte	$00,$80
.1b71	20 62 4a	jsr $4a62		jsr	FloatCompare
.1b74	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1b77	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1b7a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -44005
>1b7d	e5 ab 00 00				.dword	$0000abe5
>1b81	00 80					.byte	$00,$80
.1b83	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -29575
>1b86	87 73 00 00				.dword	$00007387
>1b8a	00 80					.byte	$00,$80
.1b8c	20 3d 4c	jsr $4c3d		jsr	FloatMultiply
.1b8f	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 1301447875
>1b92	c3 84 92 4d				.dword	$4d9284c3
>1b96	00 00					.byte	$00,$00
.1b98	20 62 4a	jsr $4a62		jsr	FloatCompare
.1b9b	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1b9e	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1ba1	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -44005
>1ba4	e5 ab 00 00				.dword	$0000abe5
>1ba8	00 80					.byte	$00,$80
.1baa	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -29575
>1bad	87 73 00 00				.dword	$00007387
>1bb1	00 80					.byte	$00,$80
.1bb3	20 c6 4a	jsr $4ac6		jsr	FloatDivide
.1bb6	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 1.48791209
>1bb9	a1 f3 39 5f				.dword	$5f39f3a1
>1bbd	e2 00					.byte	$e2,$00
.1bbf	20 62 4a	jsr $4a62		jsr	FloatCompare
.1bc2	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1bc5	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1bc8	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -29575
>1bcb	87 73 00 00				.dword	$00007387
>1bcf	00 80					.byte	$00,$80
.1bd1	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -29575
>1bd4	87 73 00 00				.dword	$00007387
>1bd8	00 80					.byte	$00,$80
.1bda	20 62 4a	jsr $4a62		jsr	FloatCompare
.1bdd	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1be0	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>1be3	01 00 00 00				.dword	$00000001
>1be7	00 80					.byte	$00,$80
.1be9	20 62 4a	jsr $4a62		jsr	FloatCompare
.1bec	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1bef	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1bf2	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -29575
>1bf5	87 73 00 00				.dword	$00007387
>1bf9	00 80					.byte	$00,$80
.1bfb	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -29575
>1bfe	87 73 00 00				.dword	$00007387
>1c02	00 80					.byte	$00,$80
.1c04	20 62 4a	jsr $4a62		jsr	FloatCompare
.1c07	20 3c 4a	jsr $4a3c		jsr	CompareNotEqual
.1c0a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>1c0d	00 00 00 00				.dword	$00000000
>1c11	00 00					.byte	$00,$00
.1c13	20 62 4a	jsr $4a62		jsr	FloatCompare
.1c16	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1c19	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1c1c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -29575
>1c1f	87 73 00 00				.dword	$00007387
>1c23	00 80					.byte	$00,$80
.1c25	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -29575
>1c28	87 73 00 00				.dword	$00007387
>1c2c	00 80					.byte	$00,$80
.1c2e	20 62 4a	jsr $4a62		jsr	FloatCompare
.1c31	20 4a 4a	jsr $4a4a		jsr	CompareGreater
.1c34	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>1c37	00 00 00 00				.dword	$00000000
>1c3b	00 00					.byte	$00,$00
.1c3d	20 62 4a	jsr $4a62		jsr	FloatCompare
.1c40	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1c43	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1c46	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -29575
>1c49	87 73 00 00				.dword	$00007387
>1c4d	00 80					.byte	$00,$80
.1c4f	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -29575
>1c52	87 73 00 00				.dword	$00007387
>1c56	00 80					.byte	$00,$80
.1c58	20 62 4a	jsr $4a62		jsr	FloatCompare
.1c5b	20 5a 4a	jsr $4a5a		jsr	CompareGreaterEqual
.1c5e	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>1c61	01 00 00 00				.dword	$00000001
>1c65	00 80					.byte	$00,$80
.1c67	20 62 4a	jsr $4a62		jsr	FloatCompare
.1c6a	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1c6d	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1c70	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -29575
>1c73	87 73 00 00				.dword	$00007387
>1c77	00 80					.byte	$00,$80
.1c79	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -29575
>1c7c	87 73 00 00				.dword	$00007387
>1c80	00 80					.byte	$00,$80
.1c82	20 62 4a	jsr $4a62		jsr	FloatCompare
.1c85	20 42 4a	jsr $4a42		jsr	CompareLess
.1c88	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>1c8b	00 00 00 00				.dword	$00000000
>1c8f	00 00					.byte	$00,$00
.1c91	20 62 4a	jsr $4a62		jsr	FloatCompare
.1c94	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1c97	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1c9a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -29575
>1c9d	87 73 00 00				.dword	$00007387
>1ca1	00 80					.byte	$00,$80
.1ca3	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -29575
>1ca6	87 73 00 00				.dword	$00007387
>1caa	00 80					.byte	$00,$80
.1cac	20 62 4a	jsr $4a62		jsr	FloatCompare
.1caf	20 52 4a	jsr $4a52		jsr	CompareLessEqual
.1cb2	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>1cb5	01 00 00 00				.dword	$00000001
>1cb9	00 80					.byte	$00,$80
.1cbb	20 62 4a	jsr $4a62		jsr	FloatCompare
.1cbe	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1cc1	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1cc4	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -64.75216652
>1cc7	fc 8d c0 40				.dword	$40c08dfc
>1ccb	e8 80					.byte	$e8,$80
.1ccd	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -2.02283956
>1cd0	07 1a bb 40				.dword	$40bb1a07
>1cd4	e3 80					.byte	$e3,$80
.1cd6	20 a1 49	jsr $49a1		jsr	FloatAdd
.1cd9	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -66.77500607
>1cdc	cc 66 c6 42				.dword	$42c666cc
>1ce0	e8 80					.byte	$e8,$80
.1ce2	20 62 4a	jsr $4a62		jsr	FloatCompare
.1ce5	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1ce8	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1ceb	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -64.75216652
>1cee	fc 8d c0 40				.dword	$40c08dfc
>1cf2	e8 80					.byte	$e8,$80
.1cf4	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -2.02283956
>1cf7	07 1a bb 40				.dword	$40bb1a07
>1cfb	e3 80					.byte	$e3,$80
.1cfd	20 9b 49	jsr $499b		jsr	FloatSubtract
.1d00	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -62.72932696
>1d03	58 6a 75 7d				.dword	$7d756a58
>1d07	e7 80					.byte	$e7,$80
.1d09	20 62 4a	jsr $4a62		jsr	FloatCompare
.1d0c	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1d0f	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1d12	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -64.75216652
>1d15	fc 8d c0 40				.dword	$40c08dfc
>1d19	e8 80					.byte	$e8,$80
.1d1b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -2.02283956
>1d1e	07 1a bb 40				.dword	$40bb1a07
>1d22	e3 80					.byte	$e3,$80
.1d24	20 3d 4c	jsr $4c3d		jsr	FloatMultiply
.1d27	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 130.98324378
>1d2a	ef da 7d 41				.dword	$417ddaef
>1d2e	e9 00					.byte	$e9,$00
.1d30	20 62 4a	jsr $4a62		jsr	FloatCompare
.1d33	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1d36	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1d39	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -64.75216652
>1d3c	fc 8d c0 40				.dword	$40c08dfc
>1d40	e8 80					.byte	$e8,$80
.1d42	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -2.02283956
>1d45	07 1a bb 40				.dword	$40bb1a07
>1d49	e3 80					.byte	$e3,$80
.1d4b	20 c6 4a	jsr $4ac6		jsr	FloatDivide
.1d4e	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 32.01053011
>1d51	34 64 05 40				.dword	$40056434
>1d55	e7 00					.byte	$e7,$00
.1d57	20 62 4a	jsr $4a62		jsr	FloatCompare
.1d5a	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1d5d	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1d60	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -36.78658784
>1d63	a4 bb 92 49				.dword	$4992bba4
>1d67	e7 80					.byte	$e7,$80
.1d69	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -36.78658784
>1d6c	a4 bb 92 49				.dword	$4992bba4
>1d70	e7 80					.byte	$e7,$80
.1d72	20 62 4a	jsr $4a62		jsr	FloatCompare
.1d75	20 4a 4a	jsr $4a4a		jsr	CompareGreater
.1d78	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>1d7b	00 00 00 00				.dword	$00000000
>1d7f	00 00					.byte	$00,$00
.1d81	20 62 4a	jsr $4a62		jsr	FloatCompare
.1d84	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1d87	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1d8a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -36.78658784
>1d8d	a4 bb 92 49				.dword	$4992bba4
>1d91	e7 80					.byte	$e7,$80
.1d93	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -36.78658784
>1d96	a4 bb 92 49				.dword	$4992bba4
>1d9a	e7 80					.byte	$e7,$80
.1d9c	20 62 4a	jsr $4a62		jsr	FloatCompare
.1d9f	20 5a 4a	jsr $4a5a		jsr	CompareGreaterEqual
.1da2	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>1da5	01 00 00 00				.dword	$00000001
>1da9	00 80					.byte	$00,$80
.1dab	20 62 4a	jsr $4a62		jsr	FloatCompare
.1dae	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1db1	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1db4	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -36.78658784
>1db7	a4 bb 92 49				.dword	$4992bba4
>1dbb	e7 80					.byte	$e7,$80
.1dbd	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -36.78658784
>1dc0	a4 bb 92 49				.dword	$4992bba4
>1dc4	e7 80					.byte	$e7,$80
.1dc6	20 62 4a	jsr $4a62		jsr	FloatCompare
.1dc9	20 42 4a	jsr $4a42		jsr	CompareLess
.1dcc	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>1dcf	00 00 00 00				.dword	$00000000
>1dd3	00 00					.byte	$00,$00
.1dd5	20 62 4a	jsr $4a62		jsr	FloatCompare
.1dd8	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1ddb	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1dde	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -36.78658784
>1de1	a4 bb 92 49				.dword	$4992bba4
>1de5	e7 80					.byte	$e7,$80
.1de7	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -36.78658784
>1dea	a4 bb 92 49				.dword	$4992bba4
>1dee	e7 80					.byte	$e7,$80
.1df0	20 62 4a	jsr $4a62		jsr	FloatCompare
.1df3	20 52 4a	jsr $4a52		jsr	CompareLessEqual
.1df6	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>1df9	01 00 00 00				.dword	$00000001
>1dfd	00 80					.byte	$00,$80
.1dff	20 62 4a	jsr $4a62		jsr	FloatCompare
.1e02	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1e05	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1e08	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -36.78658784
>1e0b	a4 bb 92 49				.dword	$4992bba4
>1e0f	e7 80					.byte	$e7,$80
.1e11	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -36.78658784
>1e14	a4 bb 92 49				.dword	$4992bba4
>1e18	e7 80					.byte	$e7,$80
.1e1a	20 62 4a	jsr $4a62		jsr	FloatCompare
.1e1d	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1e20	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>1e23	01 00 00 00				.dword	$00000001
>1e27	00 80					.byte	$00,$80
.1e29	20 62 4a	jsr $4a62		jsr	FloatCompare
.1e2c	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1e2f	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1e32	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -36.78658784
>1e35	a4 bb 92 49				.dword	$4992bba4
>1e39	e7 80					.byte	$e7,$80
.1e3b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -36.78658784
>1e3e	a4 bb 92 49				.dword	$4992bba4
>1e42	e7 80					.byte	$e7,$80
.1e44	20 62 4a	jsr $4a62		jsr	FloatCompare
.1e47	20 3c 4a	jsr $4a3c		jsr	CompareNotEqual
.1e4a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>1e4d	00 00 00 00				.dword	$00000000
>1e51	00 00					.byte	$00,$00
.1e53	20 62 4a	jsr $4a62		jsr	FloatCompare
.1e56	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1e59	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1e5c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 44834
>1e5f	22 af 00 00				.dword	$0000af22
>1e63	00 00					.byte	$00,$00
.1e65	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -11335
>1e68	47 2c 00 00				.dword	$00002c47
>1e6c	00 80					.byte	$00,$80
.1e6e	20 a1 49	jsr $49a1		jsr	FloatAdd
.1e71	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 33499
>1e74	db 82 00 00				.dword	$000082db
>1e78	00 00					.byte	$00,$00
.1e7a	20 62 4a	jsr $4a62		jsr	FloatCompare
.1e7d	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1e80	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1e83	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 44834
>1e86	22 af 00 00				.dword	$0000af22
>1e8a	00 00					.byte	$00,$00
.1e8c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -11335
>1e8f	47 2c 00 00				.dword	$00002c47
>1e93	00 80					.byte	$00,$80
.1e95	20 9b 49	jsr $499b		jsr	FloatSubtract
.1e98	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 56169
>1e9b	69 db 00 00				.dword	$0000db69
>1e9f	00 00					.byte	$00,$00
.1ea1	20 62 4a	jsr $4a62		jsr	FloatCompare
.1ea4	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1ea7	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1eaa	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 44834
>1ead	22 af 00 00				.dword	$0000af22
>1eb1	00 00					.byte	$00,$00
.1eb3	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -11335
>1eb6	47 2c 00 00				.dword	$00002c47
>1eba	00 80					.byte	$00,$80
.1ebc	20 3d 4c	jsr $4c3d		jsr	FloatMultiply
.1ebf	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -508193390
>1ec2	6e 6a 4a 1e				.dword	$1e4a6a6e
>1ec6	00 80					.byte	$00,$80
.1ec8	20 62 4a	jsr $4a62		jsr	FloatCompare
.1ecb	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1ece	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1ed1	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 44834
>1ed4	22 af 00 00				.dword	$0000af22
>1ed8	00 00					.byte	$00,$00
.1eda	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -11335
>1edd	47 2c 00 00				.dword	$00002c47
>1ee1	00 80					.byte	$00,$80
.1ee3	20 c6 4a	jsr $4ac6		jsr	FloatDivide
.1ee6	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -3.95535951
>1ee9	1b 4e 92 7e				.dword	$7e924e1b
>1eed	e3 80					.byte	$e3,$80
.1eef	20 62 4a	jsr $4a62		jsr	FloatCompare
.1ef2	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1ef5	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1ef8	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 44834
>1efb	22 af 00 00				.dword	$0000af22
>1eff	00 00					.byte	$00,$00
.1f01	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -11335
>1f04	47 2c 00 00				.dword	$00002c47
>1f08	00 80					.byte	$00,$80
.1f0a	20 62 4a	jsr $4a62		jsr	FloatCompare
.1f0d	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1f10	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>1f13	00 00 00 00				.dword	$00000000
>1f17	00 00					.byte	$00,$00
.1f19	20 62 4a	jsr $4a62		jsr	FloatCompare
.1f1c	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1f1f	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1f22	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 44834
>1f25	22 af 00 00				.dword	$0000af22
>1f29	00 00					.byte	$00,$00
.1f2b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -11335
>1f2e	47 2c 00 00				.dword	$00002c47
>1f32	00 80					.byte	$00,$80
.1f34	20 62 4a	jsr $4a62		jsr	FloatCompare
.1f37	20 3c 4a	jsr $4a3c		jsr	CompareNotEqual
.1f3a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>1f3d	01 00 00 00				.dword	$00000001
>1f41	00 80					.byte	$00,$80
.1f43	20 62 4a	jsr $4a62		jsr	FloatCompare
.1f46	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1f49	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1f4c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 44834
>1f4f	22 af 00 00				.dword	$0000af22
>1f53	00 00					.byte	$00,$00
.1f55	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -11335
>1f58	47 2c 00 00				.dword	$00002c47
>1f5c	00 80					.byte	$00,$80
.1f5e	20 62 4a	jsr $4a62		jsr	FloatCompare
.1f61	20 4a 4a	jsr $4a4a		jsr	CompareGreater
.1f64	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>1f67	01 00 00 00				.dword	$00000001
>1f6b	00 80					.byte	$00,$80
.1f6d	20 62 4a	jsr $4a62		jsr	FloatCompare
.1f70	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1f73	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1f76	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 44834
>1f79	22 af 00 00				.dword	$0000af22
>1f7d	00 00					.byte	$00,$00
.1f7f	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -11335
>1f82	47 2c 00 00				.dword	$00002c47
>1f86	00 80					.byte	$00,$80
.1f88	20 62 4a	jsr $4a62		jsr	FloatCompare
.1f8b	20 5a 4a	jsr $4a5a		jsr	CompareGreaterEqual
.1f8e	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>1f91	01 00 00 00				.dword	$00000001
>1f95	00 80					.byte	$00,$80
.1f97	20 62 4a	jsr $4a62		jsr	FloatCompare
.1f9a	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1f9d	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1fa0	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 44834
>1fa3	22 af 00 00				.dword	$0000af22
>1fa7	00 00					.byte	$00,$00
.1fa9	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -11335
>1fac	47 2c 00 00				.dword	$00002c47
>1fb0	00 80					.byte	$00,$80
.1fb2	20 62 4a	jsr $4a62		jsr	FloatCompare
.1fb5	20 42 4a	jsr $4a42		jsr	CompareLess
.1fb8	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>1fbb	00 00 00 00				.dword	$00000000
>1fbf	00 00					.byte	$00,$00
.1fc1	20 62 4a	jsr $4a62		jsr	FloatCompare
.1fc4	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1fc7	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1fca	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 44834
>1fcd	22 af 00 00				.dword	$0000af22
>1fd1	00 00					.byte	$00,$00
.1fd3	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -11335
>1fd6	47 2c 00 00				.dword	$00002c47
>1fda	00 80					.byte	$00,$80
.1fdc	20 62 4a	jsr $4a62		jsr	FloatCompare
.1fdf	20 52 4a	jsr $4a52		jsr	CompareLessEqual
.1fe2	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>1fe5	00 00 00 00				.dword	$00000000
>1fe9	00 00					.byte	$00,$00
.1feb	20 62 4a	jsr $4a62		jsr	FloatCompare
.1fee	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.1ff1	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.1ff4	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 42.01806107
>1ff7	4d 3f 09 54				.dword	$54093f4d
>1ffb	e7 00					.byte	$e7,$00
.1ffd	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 6.39102616
>2000	a6 a4 41 66				.dword	$6641a4a6
>2004	e4 00					.byte	$e4,$00
.2006	20 a1 49	jsr $49a1		jsr	FloatAdd
.2009	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 48.40908723
>200c	e2 73 d1 60				.dword	$60d173e2
>2010	e7 00					.byte	$e7,$00
.2012	20 62 4a	jsr $4a62		jsr	FloatCompare
.2015	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2018	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.201b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 42.01806107
>201e	4d 3f 09 54				.dword	$54093f4d
>2022	e7 00					.byte	$e7,$00
.2024	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 6.39102616
>2027	a6 a4 41 66				.dword	$6641a4a6
>202b	e4 00					.byte	$e4,$00
.202d	20 9b 49	jsr $499b		jsr	FloatSubtract
.2030	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 35.62703491
>2033	b8 0a 41 47				.dword	$47410ab8
>2037	e7 00					.byte	$e7,$00
.2039	20 62 4a	jsr $4a62		jsr	FloatCompare
.203c	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.203f	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2042	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 42.01806107
>2045	4d 3f 09 54				.dword	$54093f4d
>2049	e7 00					.byte	$e7,$00
.204b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 6.39102616
>204e	a6 a4 41 66				.dword	$6641a4a6
>2052	e4 00					.byte	$e4,$00
.2054	20 3d 4c	jsr $4c3d		jsr	FloatMultiply
.2057	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 268.53852748
>205a	3c 77 22 43				.dword	$4322773c
>205e	ea 00					.byte	$ea,$00
.2060	20 62 4a	jsr $4a62		jsr	FloatCompare
.2063	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2066	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2069	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 42.01806107
>206c	4d 3f 09 54				.dword	$54093f4d
>2070	e7 00					.byte	$e7,$00
.2072	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 6.39102616
>2075	a6 a4 41 66				.dword	$6641a4a6
>2079	e4 00					.byte	$e4,$00
.207b	20 c6 4a	jsr $4ac6		jsr	FloatDivide
.207e	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 6.57454062
>2081	81 51 31 69				.dword	$69315181
>2085	e4 00					.byte	$e4,$00
.2087	20 62 4a	jsr $4a62		jsr	FloatCompare
.208a	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.208d	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2090	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 38.40106909
>2093	ee 58 cd 4c				.dword	$4ccd58ee
>2097	e7 00					.byte	$e7,$00
.2099	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 38.40106909
>209c	ee 58 cd 4c				.dword	$4ccd58ee
>20a0	e7 00					.byte	$e7,$00
.20a2	20 62 4a	jsr $4a62		jsr	FloatCompare
.20a5	20 4a 4a	jsr $4a4a		jsr	CompareGreater
.20a8	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>20ab	00 00 00 00				.dword	$00000000
>20af	00 00					.byte	$00,$00
.20b1	20 62 4a	jsr $4a62		jsr	FloatCompare
.20b4	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.20b7	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.20ba	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 38.40106909
>20bd	ee 58 cd 4c				.dword	$4ccd58ee
>20c1	e7 00					.byte	$e7,$00
.20c3	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 38.40106909
>20c6	ee 58 cd 4c				.dword	$4ccd58ee
>20ca	e7 00					.byte	$e7,$00
.20cc	20 62 4a	jsr $4a62		jsr	FloatCompare
.20cf	20 5a 4a	jsr $4a5a		jsr	CompareGreaterEqual
.20d2	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>20d5	01 00 00 00				.dword	$00000001
>20d9	00 80					.byte	$00,$80
.20db	20 62 4a	jsr $4a62		jsr	FloatCompare
.20de	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.20e1	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.20e4	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 38.40106909
>20e7	ee 58 cd 4c				.dword	$4ccd58ee
>20eb	e7 00					.byte	$e7,$00
.20ed	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 38.40106909
>20f0	ee 58 cd 4c				.dword	$4ccd58ee
>20f4	e7 00					.byte	$e7,$00
.20f6	20 62 4a	jsr $4a62		jsr	FloatCompare
.20f9	20 42 4a	jsr $4a42		jsr	CompareLess
.20fc	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>20ff	00 00 00 00				.dword	$00000000
>2103	00 00					.byte	$00,$00
.2105	20 62 4a	jsr $4a62		jsr	FloatCompare
.2108	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.210b	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.210e	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 38.40106909
>2111	ee 58 cd 4c				.dword	$4ccd58ee
>2115	e7 00					.byte	$e7,$00
.2117	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 38.40106909
>211a	ee 58 cd 4c				.dword	$4ccd58ee
>211e	e7 00					.byte	$e7,$00
.2120	20 62 4a	jsr $4a62		jsr	FloatCompare
.2123	20 52 4a	jsr $4a52		jsr	CompareLessEqual
.2126	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>2129	01 00 00 00				.dword	$00000001
>212d	00 80					.byte	$00,$80
.212f	20 62 4a	jsr $4a62		jsr	FloatCompare
.2132	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2135	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2138	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 38.40106909
>213b	ee 58 cd 4c				.dword	$4ccd58ee
>213f	e7 00					.byte	$e7,$00
.2141	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 38.40106909
>2144	ee 58 cd 4c				.dword	$4ccd58ee
>2148	e7 00					.byte	$e7,$00
.214a	20 62 4a	jsr $4a62		jsr	FloatCompare
.214d	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2150	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>2153	01 00 00 00				.dword	$00000001
>2157	00 80					.byte	$00,$80
.2159	20 62 4a	jsr $4a62		jsr	FloatCompare
.215c	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.215f	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2162	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 38.40106909
>2165	ee 58 cd 4c				.dword	$4ccd58ee
>2169	e7 00					.byte	$e7,$00
.216b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 38.40106909
>216e	ee 58 cd 4c				.dword	$4ccd58ee
>2172	e7 00					.byte	$e7,$00
.2174	20 62 4a	jsr $4a62		jsr	FloatCompare
.2177	20 3c 4a	jsr $4a3c		jsr	CompareNotEqual
.217a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>217d	00 00 00 00				.dword	$00000000
>2181	00 00					.byte	$00,$00
.2183	20 62 4a	jsr $4a62		jsr	FloatCompare
.2186	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2189	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.218c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 35145
>218f	49 89 00 00				.dword	$00008949
>2193	00 00					.byte	$00,$00
.2195	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -9937
>2198	d1 26 00 00				.dword	$000026d1
>219c	00 80					.byte	$00,$80
.219e	20 a1 49	jsr $49a1		jsr	FloatAdd
.21a1	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 25208
>21a4	78 62 00 00				.dword	$00006278
>21a8	00 00					.byte	$00,$00
.21aa	20 62 4a	jsr $4a62		jsr	FloatCompare
.21ad	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.21b0	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.21b3	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 35145
>21b6	49 89 00 00				.dword	$00008949
>21ba	00 00					.byte	$00,$00
.21bc	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -9937
>21bf	d1 26 00 00				.dword	$000026d1
>21c3	00 80					.byte	$00,$80
.21c5	20 9b 49	jsr $499b		jsr	FloatSubtract
.21c8	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 45082
>21cb	1a b0 00 00				.dword	$0000b01a
>21cf	00 00					.byte	$00,$00
.21d1	20 62 4a	jsr $4a62		jsr	FloatCompare
.21d4	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.21d7	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.21da	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 35145
>21dd	49 89 00 00				.dword	$00008949
>21e1	00 00					.byte	$00,$00
.21e3	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -9937
>21e6	d1 26 00 00				.dword	$000026d1
>21ea	00 80					.byte	$00,$80
.21ec	20 3d 4c	jsr $4c3d		jsr	FloatMultiply
.21ef	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -349235865
>21f2	99 ea d0 14				.dword	$14d0ea99
>21f6	00 80					.byte	$00,$80
.21f8	20 62 4a	jsr $4a62		jsr	FloatCompare
.21fb	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.21fe	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2201	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 35145
>2204	49 89 00 00				.dword	$00008949
>2208	00 00					.byte	$00,$00
.220a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -9937
>220d	d1 26 00 00				.dword	$000026d1
>2211	00 80					.byte	$00,$80
.2213	20 c6 4a	jsr $4ac6		jsr	FloatDivide
.2216	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -3.53678172
>2219	dc 50 2d 71				.dword	$712d50dc
>221d	e3 80					.byte	$e3,$80
.221f	20 62 4a	jsr $4a62		jsr	FloatCompare
.2222	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2225	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2228	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 35145
>222b	49 89 00 00				.dword	$00008949
>222f	00 00					.byte	$00,$00
.2231	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -9937
>2234	d1 26 00 00				.dword	$000026d1
>2238	00 80					.byte	$00,$80
.223a	20 62 4a	jsr $4a62		jsr	FloatCompare
.223d	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2240	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>2243	00 00 00 00				.dword	$00000000
>2247	00 00					.byte	$00,$00
.2249	20 62 4a	jsr $4a62		jsr	FloatCompare
.224c	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.224f	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2252	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 35145
>2255	49 89 00 00				.dword	$00008949
>2259	00 00					.byte	$00,$00
.225b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -9937
>225e	d1 26 00 00				.dword	$000026d1
>2262	00 80					.byte	$00,$80
.2264	20 62 4a	jsr $4a62		jsr	FloatCompare
.2267	20 3c 4a	jsr $4a3c		jsr	CompareNotEqual
.226a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>226d	01 00 00 00				.dword	$00000001
>2271	00 80					.byte	$00,$80
.2273	20 62 4a	jsr $4a62		jsr	FloatCompare
.2276	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2279	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.227c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 35145
>227f	49 89 00 00				.dword	$00008949
>2283	00 00					.byte	$00,$00
.2285	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -9937
>2288	d1 26 00 00				.dword	$000026d1
>228c	00 80					.byte	$00,$80
.228e	20 62 4a	jsr $4a62		jsr	FloatCompare
.2291	20 4a 4a	jsr $4a4a		jsr	CompareGreater
.2294	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>2297	01 00 00 00				.dword	$00000001
>229b	00 80					.byte	$00,$80
.229d	20 62 4a	jsr $4a62		jsr	FloatCompare
.22a0	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.22a3	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.22a6	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 35145
>22a9	49 89 00 00				.dword	$00008949
>22ad	00 00					.byte	$00,$00
.22af	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -9937
>22b2	d1 26 00 00				.dword	$000026d1
>22b6	00 80					.byte	$00,$80
.22b8	20 62 4a	jsr $4a62		jsr	FloatCompare
.22bb	20 5a 4a	jsr $4a5a		jsr	CompareGreaterEqual
.22be	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>22c1	01 00 00 00				.dword	$00000001
>22c5	00 80					.byte	$00,$80
.22c7	20 62 4a	jsr $4a62		jsr	FloatCompare
.22ca	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.22cd	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.22d0	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 35145
>22d3	49 89 00 00				.dword	$00008949
>22d7	00 00					.byte	$00,$00
.22d9	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -9937
>22dc	d1 26 00 00				.dword	$000026d1
>22e0	00 80					.byte	$00,$80
.22e2	20 62 4a	jsr $4a62		jsr	FloatCompare
.22e5	20 42 4a	jsr $4a42		jsr	CompareLess
.22e8	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>22eb	00 00 00 00				.dword	$00000000
>22ef	00 00					.byte	$00,$00
.22f1	20 62 4a	jsr $4a62		jsr	FloatCompare
.22f4	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.22f7	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.22fa	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 35145
>22fd	49 89 00 00				.dword	$00008949
>2301	00 00					.byte	$00,$00
.2303	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -9937
>2306	d1 26 00 00				.dword	$000026d1
>230a	00 80					.byte	$00,$80
.230c	20 62 4a	jsr $4a62		jsr	FloatCompare
.230f	20 52 4a	jsr $4a52		jsr	CompareLessEqual
.2312	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>2315	00 00 00 00				.dword	$00000000
>2319	00 00					.byte	$00,$00
.231b	20 62 4a	jsr $4a62		jsr	FloatCompare
.231e	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2321	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2324	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -74.12837126
>2327	f0 dc 20 4a				.dword	$4a20dcf0
>232b	e8 80					.byte	$e8,$80
.232d	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -76.17866688
>2330	1d bd 2d 4c				.dword	$4c2dbd1d
>2334	e8 80					.byte	$e8,$80
.2336	20 a1 49	jsr $49a1		jsr	FloatAdd
.2339	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -150.30703815
>233c	07 4d 27 4b				.dword	$4b274d07
>2340	e9 80					.byte	$e9,$80
.2342	20 62 4a	jsr $4a62		jsr	FloatCompare
.2345	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2348	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.234b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -74.12837126
>234e	f0 dc 20 4a				.dword	$4a20dcf0
>2352	e8 80					.byte	$e8,$80
.2354	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -76.17866688
>2357	1d bd 2d 4c				.dword	$4c2dbd1d
>235b	e8 80					.byte	$e8,$80
.235d	20 9b 49	jsr $499b		jsr	FloatSubtract
.2360	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 2.05029562
>2363	8f 05 9c 41				.dword	$419c058f
>2367	e3 00					.byte	$e3,$00
.2369	20 62 4a	jsr $4a62		jsr	FloatCompare
.236c	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.236f	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2372	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -74.12837126
>2375	f0 dc 20 4a				.dword	$4a20dcf0
>2379	e8 80					.byte	$e8,$80
.237b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -76.17866688
>237e	1d bd 2d 4c				.dword	$4c2dbd1d
>2382	e8 80					.byte	$e8,$80
.2384	20 3d 4c	jsr $4c3d		jsr	FloatMultiply
.2387	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 5647.00050109
>238a	83 00 3c 58				.dword	$583c0083
>238e	ee 00					.byte	$ee,$00
.2390	20 62 4a	jsr $4a62		jsr	FloatCompare
.2393	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2396	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2399	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -74.12837126
>239c	f0 dc 20 4a				.dword	$4a20dcf0
>23a0	e8 80					.byte	$e8,$80
.23a2	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -76.17866688
>23a5	1d bd 2d 4c				.dword	$4c2dbd1d
>23a9	e8 80					.byte	$e8,$80
.23ab	20 c6 4a	jsr $4ac6		jsr	FloatDivide
.23ae	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0.9730857
>23b1	7d 12 8e 7c				.dword	$7c8e127d
>23b5	e1 00					.byte	$e1,$00
.23b7	20 62 4a	jsr $4a62		jsr	FloatCompare
.23ba	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.23bd	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.23c0	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -7.07240625
>23c3	75 93 28 71				.dword	$71289375
>23c7	e4 80					.byte	$e4,$80
.23c9	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -7.07240625
>23cc	75 93 28 71				.dword	$71289375
>23d0	e4 80					.byte	$e4,$80
.23d2	20 62 4a	jsr $4a62		jsr	FloatCompare
.23d5	20 4a 4a	jsr $4a4a		jsr	CompareGreater
.23d8	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>23db	00 00 00 00				.dword	$00000000
>23df	00 00					.byte	$00,$00
.23e1	20 62 4a	jsr $4a62		jsr	FloatCompare
.23e4	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.23e7	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.23ea	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -7.07240625
>23ed	75 93 28 71				.dword	$71289375
>23f1	e4 80					.byte	$e4,$80
.23f3	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -7.07240625
>23f6	75 93 28 71				.dword	$71289375
>23fa	e4 80					.byte	$e4,$80
.23fc	20 62 4a	jsr $4a62		jsr	FloatCompare
.23ff	20 5a 4a	jsr $4a5a		jsr	CompareGreaterEqual
.2402	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>2405	01 00 00 00				.dword	$00000001
>2409	00 80					.byte	$00,$80
.240b	20 62 4a	jsr $4a62		jsr	FloatCompare
.240e	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2411	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2414	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -7.07240625
>2417	75 93 28 71				.dword	$71289375
>241b	e4 80					.byte	$e4,$80
.241d	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -7.07240625
>2420	75 93 28 71				.dword	$71289375
>2424	e4 80					.byte	$e4,$80
.2426	20 62 4a	jsr $4a62		jsr	FloatCompare
.2429	20 42 4a	jsr $4a42		jsr	CompareLess
.242c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>242f	00 00 00 00				.dword	$00000000
>2433	00 00					.byte	$00,$00
.2435	20 62 4a	jsr $4a62		jsr	FloatCompare
.2438	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.243b	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.243e	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -7.07240625
>2441	75 93 28 71				.dword	$71289375
>2445	e4 80					.byte	$e4,$80
.2447	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -7.07240625
>244a	75 93 28 71				.dword	$71289375
>244e	e4 80					.byte	$e4,$80
.2450	20 62 4a	jsr $4a62		jsr	FloatCompare
.2453	20 52 4a	jsr $4a52		jsr	CompareLessEqual
.2456	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>2459	01 00 00 00				.dword	$00000001
>245d	00 80					.byte	$00,$80
.245f	20 62 4a	jsr $4a62		jsr	FloatCompare
.2462	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2465	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2468	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -7.07240625
>246b	75 93 28 71				.dword	$71289375
>246f	e4 80					.byte	$e4,$80
.2471	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -7.07240625
>2474	75 93 28 71				.dword	$71289375
>2478	e4 80					.byte	$e4,$80
.247a	20 62 4a	jsr $4a62		jsr	FloatCompare
.247d	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2480	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>2483	01 00 00 00				.dword	$00000001
>2487	00 80					.byte	$00,$80
.2489	20 62 4a	jsr $4a62		jsr	FloatCompare
.248c	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.248f	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2492	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -7.07240625
>2495	75 93 28 71				.dword	$71289375
>2499	e4 80					.byte	$e4,$80
.249b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -7.07240625
>249e	75 93 28 71				.dword	$71289375
>24a2	e4 80					.byte	$e4,$80
.24a4	20 62 4a	jsr $4a62		jsr	FloatCompare
.24a7	20 3c 4a	jsr $4a3c		jsr	CompareNotEqual
.24aa	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>24ad	00 00 00 00				.dword	$00000000
>24b1	00 00					.byte	$00,$00
.24b3	20 62 4a	jsr $4a62		jsr	FloatCompare
.24b6	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.24b9	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.24bc	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 10187
>24bf	cb 27 00 00				.dword	$000027cb
>24c3	00 00					.byte	$00,$00
.24c5	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -7972
>24c8	24 1f 00 00				.dword	$00001f24
>24cc	00 80					.byte	$00,$80
.24ce	20 a1 49	jsr $49a1		jsr	FloatAdd
.24d1	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 2215
>24d4	a7 08 00 00				.dword	$000008a7
>24d8	00 00					.byte	$00,$00
.24da	20 62 4a	jsr $4a62		jsr	FloatCompare
.24dd	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.24e0	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.24e3	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 10187
>24e6	cb 27 00 00				.dword	$000027cb
>24ea	00 00					.byte	$00,$00
.24ec	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -7972
>24ef	24 1f 00 00				.dword	$00001f24
>24f3	00 80					.byte	$00,$80
.24f5	20 9b 49	jsr $499b		jsr	FloatSubtract
.24f8	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 18159
>24fb	ef 46 00 00				.dword	$000046ef
>24ff	00 00					.byte	$00,$00
.2501	20 62 4a	jsr $4a62		jsr	FloatCompare
.2504	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2507	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.250a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 10187
>250d	cb 27 00 00				.dword	$000027cb
>2511	00 00					.byte	$00,$00
.2513	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -7972
>2516	24 1f 00 00				.dword	$00001f24
>251a	00 80					.byte	$00,$80
.251c	20 3d 4c	jsr $4c3d		jsr	FloatMultiply
.251f	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -81210764
>2522	8c 2d d7 04				.dword	$04d72d8c
>2526	00 80					.byte	$00,$80
.2528	20 62 4a	jsr $4a62		jsr	FloatCompare
.252b	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.252e	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2531	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 10187
>2534	cb 27 00 00				.dword	$000027cb
>2538	00 00					.byte	$00,$00
.253a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -7972
>253d	24 1f 00 00				.dword	$00001f24
>2541	00 80					.byte	$00,$80
.2543	20 c6 4a	jsr $4ac6		jsr	FloatDivide
.2546	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1.27784747
>2549	c1 40 c8 51				.dword	$51c840c1
>254d	e2 80					.byte	$e2,$80
.254f	20 62 4a	jsr $4a62		jsr	FloatCompare
.2552	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2555	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2558	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -7972
>255b	24 1f 00 00				.dword	$00001f24
>255f	00 80					.byte	$00,$80
.2561	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -7972
>2564	24 1f 00 00				.dword	$00001f24
>2568	00 80					.byte	$00,$80
.256a	20 62 4a	jsr $4a62		jsr	FloatCompare
.256d	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2570	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>2573	01 00 00 00				.dword	$00000001
>2577	00 80					.byte	$00,$80
.2579	20 62 4a	jsr $4a62		jsr	FloatCompare
.257c	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.257f	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2582	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -7972
>2585	24 1f 00 00				.dword	$00001f24
>2589	00 80					.byte	$00,$80
.258b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -7972
>258e	24 1f 00 00				.dword	$00001f24
>2592	00 80					.byte	$00,$80
.2594	20 62 4a	jsr $4a62		jsr	FloatCompare
.2597	20 3c 4a	jsr $4a3c		jsr	CompareNotEqual
.259a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>259d	00 00 00 00				.dword	$00000000
>25a1	00 00					.byte	$00,$00
.25a3	20 62 4a	jsr $4a62		jsr	FloatCompare
.25a6	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.25a9	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.25ac	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -7972
>25af	24 1f 00 00				.dword	$00001f24
>25b3	00 80					.byte	$00,$80
.25b5	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -7972
>25b8	24 1f 00 00				.dword	$00001f24
>25bc	00 80					.byte	$00,$80
.25be	20 62 4a	jsr $4a62		jsr	FloatCompare
.25c1	20 4a 4a	jsr $4a4a		jsr	CompareGreater
.25c4	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>25c7	00 00 00 00				.dword	$00000000
>25cb	00 00					.byte	$00,$00
.25cd	20 62 4a	jsr $4a62		jsr	FloatCompare
.25d0	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.25d3	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.25d6	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -7972
>25d9	24 1f 00 00				.dword	$00001f24
>25dd	00 80					.byte	$00,$80
.25df	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -7972
>25e2	24 1f 00 00				.dword	$00001f24
>25e6	00 80					.byte	$00,$80
.25e8	20 62 4a	jsr $4a62		jsr	FloatCompare
.25eb	20 5a 4a	jsr $4a5a		jsr	CompareGreaterEqual
.25ee	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>25f1	01 00 00 00				.dword	$00000001
>25f5	00 80					.byte	$00,$80
.25f7	20 62 4a	jsr $4a62		jsr	FloatCompare
.25fa	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.25fd	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2600	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -7972
>2603	24 1f 00 00				.dword	$00001f24
>2607	00 80					.byte	$00,$80
.2609	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -7972
>260c	24 1f 00 00				.dword	$00001f24
>2610	00 80					.byte	$00,$80
.2612	20 62 4a	jsr $4a62		jsr	FloatCompare
.2615	20 42 4a	jsr $4a42		jsr	CompareLess
.2618	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>261b	00 00 00 00				.dword	$00000000
>261f	00 00					.byte	$00,$00
.2621	20 62 4a	jsr $4a62		jsr	FloatCompare
.2624	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2627	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.262a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -7972
>262d	24 1f 00 00				.dword	$00001f24
>2631	00 80					.byte	$00,$80
.2633	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -7972
>2636	24 1f 00 00				.dword	$00001f24
>263a	00 80					.byte	$00,$80
.263c	20 62 4a	jsr $4a62		jsr	FloatCompare
.263f	20 52 4a	jsr $4a52		jsr	CompareLessEqual
.2642	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>2645	01 00 00 00				.dword	$00000001
>2649	00 80					.byte	$00,$80
.264b	20 62 4a	jsr $4a62		jsr	FloatCompare
.264e	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2651	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2654	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -17.68308091
>2657	90 79 bb 46				.dword	$46bb7990
>265b	e6 80					.byte	$e6,$80
.265d	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -35.41459464
>2660	c0 45 d4 46				.dword	$46d445c0
>2664	e7 80					.byte	$e7,$80
.2666	20 a1 49	jsr $49a1		jsr	FloatAdd
.2669	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -53.09767555
>266c	88 02 32 6a				.dword	$6a320288
>2670	e7 80					.byte	$e7,$80
.2672	20 62 4a	jsr $4a62		jsr	FloatCompare
.2675	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2678	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.267b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -17.68308091
>267e	90 79 bb 46				.dword	$46bb7990
>2682	e6 80					.byte	$e6,$80
.2684	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -35.41459464
>2687	c0 45 d4 46				.dword	$46d445c0
>268b	e7 80					.byte	$e7,$80
.268d	20 9b 49	jsr $499b		jsr	FloatSubtract
.2690	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 17.73151373
>2693	ef 11 ed 46				.dword	$46ed11ef
>2697	e6 00					.byte	$e6,$00
.2699	20 62 4a	jsr $4a62		jsr	FloatCompare
.269c	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.269f	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.26a2	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -17.68308091
>26a5	90 79 bb 46				.dword	$46bb7990
>26a9	e6 80					.byte	$e6,$80
.26ab	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -35.41459464
>26ae	c0 45 d4 46				.dword	$46d445c0
>26b2	e7 80					.byte	$e7,$80
.26b4	20 3d 4c	jsr $4c3d		jsr	FloatMultiply
.26b7	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 626.2391424
>26ba	0e a7 47 4e				.dword	$4e47a70e
>26be	eb 00					.byte	$eb,$00
.26c0	20 62 4a	jsr $4a62		jsr	FloatCompare
.26c3	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.26c6	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.26c9	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -17.68308091
>26cc	90 79 bb 46				.dword	$46bb7990
>26d0	e6 80					.byte	$e6,$80
.26d2	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -35.41459464
>26d5	c0 45 d4 46				.dword	$46d445c0
>26d9	e7 80					.byte	$e7,$80
.26db	20 c6 4a	jsr $4ac6		jsr	FloatDivide
.26de	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0.4993162
>26e1	bd 2f d3 7f				.dword	$7fd32fbd
>26e5	e0 00					.byte	$e0,$00
.26e7	20 62 4a	jsr $4a62		jsr	FloatCompare
.26ea	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.26ed	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.26f0	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 51.93010448
>26f3	a8 36 dc 67				.dword	$67dc36a8
>26f7	e7 00					.byte	$e7,$00
.26f9	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 51.93010448
>26fc	a8 36 dc 67				.dword	$67dc36a8
>2700	e7 00					.byte	$e7,$00
.2702	20 62 4a	jsr $4a62		jsr	FloatCompare
.2705	20 4a 4a	jsr $4a4a		jsr	CompareGreater
.2708	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>270b	00 00 00 00				.dword	$00000000
>270f	00 00					.byte	$00,$00
.2711	20 62 4a	jsr $4a62		jsr	FloatCompare
.2714	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2717	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.271a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 51.93010448
>271d	a8 36 dc 67				.dword	$67dc36a8
>2721	e7 00					.byte	$e7,$00
.2723	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 51.93010448
>2726	a8 36 dc 67				.dword	$67dc36a8
>272a	e7 00					.byte	$e7,$00
.272c	20 62 4a	jsr $4a62		jsr	FloatCompare
.272f	20 5a 4a	jsr $4a5a		jsr	CompareGreaterEqual
.2732	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>2735	01 00 00 00				.dword	$00000001
>2739	00 80					.byte	$00,$80
.273b	20 62 4a	jsr $4a62		jsr	FloatCompare
.273e	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2741	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2744	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 51.93010448
>2747	a8 36 dc 67				.dword	$67dc36a8
>274b	e7 00					.byte	$e7,$00
.274d	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 51.93010448
>2750	a8 36 dc 67				.dword	$67dc36a8
>2754	e7 00					.byte	$e7,$00
.2756	20 62 4a	jsr $4a62		jsr	FloatCompare
.2759	20 42 4a	jsr $4a42		jsr	CompareLess
.275c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>275f	00 00 00 00				.dword	$00000000
>2763	00 00					.byte	$00,$00
.2765	20 62 4a	jsr $4a62		jsr	FloatCompare
.2768	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.276b	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.276e	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 51.93010448
>2771	a8 36 dc 67				.dword	$67dc36a8
>2775	e7 00					.byte	$e7,$00
.2777	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 51.93010448
>277a	a8 36 dc 67				.dword	$67dc36a8
>277e	e7 00					.byte	$e7,$00
.2780	20 62 4a	jsr $4a62		jsr	FloatCompare
.2783	20 52 4a	jsr $4a52		jsr	CompareLessEqual
.2786	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>2789	01 00 00 00				.dword	$00000001
>278d	00 80					.byte	$00,$80
.278f	20 62 4a	jsr $4a62		jsr	FloatCompare
.2792	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2795	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2798	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 51.93010448
>279b	a8 36 dc 67				.dword	$67dc36a8
>279f	e7 00					.byte	$e7,$00
.27a1	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 51.93010448
>27a4	a8 36 dc 67				.dword	$67dc36a8
>27a8	e7 00					.byte	$e7,$00
.27aa	20 62 4a	jsr $4a62		jsr	FloatCompare
.27ad	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.27b0	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>27b3	01 00 00 00				.dword	$00000001
>27b7	00 80					.byte	$00,$80
.27b9	20 62 4a	jsr $4a62		jsr	FloatCompare
.27bc	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.27bf	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.27c2	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 51.93010448
>27c5	a8 36 dc 67				.dword	$67dc36a8
>27c9	e7 00					.byte	$e7,$00
.27cb	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 51.93010448
>27ce	a8 36 dc 67				.dword	$67dc36a8
>27d2	e7 00					.byte	$e7,$00
.27d4	20 62 4a	jsr $4a62		jsr	FloatCompare
.27d7	20 3c 4a	jsr $4a3c		jsr	CompareNotEqual
.27da	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>27dd	00 00 00 00				.dword	$00000000
>27e1	00 00					.byte	$00,$00
.27e3	20 62 4a	jsr $4a62		jsr	FloatCompare
.27e6	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.27e9	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.27ec	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 3930
>27ef	5a 0f 00 00				.dword	$00000f5a
>27f3	00 00					.byte	$00,$00
.27f5	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -24534
>27f8	d6 5f 00 00				.dword	$00005fd6
>27fc	00 80					.byte	$00,$80
.27fe	20 a1 49	jsr $49a1		jsr	FloatAdd
.2801	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -20604
>2804	7c 50 00 00				.dword	$0000507c
>2808	00 80					.byte	$00,$80
.280a	20 62 4a	jsr $4a62		jsr	FloatCompare
.280d	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2810	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2813	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 3930
>2816	5a 0f 00 00				.dword	$00000f5a
>281a	00 00					.byte	$00,$00
.281c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -24534
>281f	d6 5f 00 00				.dword	$00005fd6
>2823	00 80					.byte	$00,$80
.2825	20 9b 49	jsr $499b		jsr	FloatSubtract
.2828	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 28464
>282b	30 6f 00 00				.dword	$00006f30
>282f	00 00					.byte	$00,$00
.2831	20 62 4a	jsr $4a62		jsr	FloatCompare
.2834	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2837	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.283a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 3930
>283d	5a 0f 00 00				.dword	$00000f5a
>2841	00 00					.byte	$00,$00
.2843	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -24534
>2846	d6 5f 00 00				.dword	$00005fd6
>284a	00 80					.byte	$00,$80
.284c	20 3d 4c	jsr $4c3d		jsr	FloatMultiply
.284f	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -96418620
>2852	3c 3b bf 05				.dword	$05bf3b3c
>2856	00 80					.byte	$00,$80
.2858	20 62 4a	jsr $4a62		jsr	FloatCompare
.285b	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.285e	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2861	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 3930
>2864	5a 0f 00 00				.dword	$00000f5a
>2868	00 00					.byte	$00,$00
.286a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -24534
>286d	d6 5f 00 00				.dword	$00005fd6
>2871	00 80					.byte	$00,$80
.2873	20 c6 4a	jsr $4ac6		jsr	FloatDivide
.2876	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -0.16018586
>2879	8c e1 03 52				.dword	$5203e18c
>287d	df 80					.byte	$df,$80
.287f	20 62 4a	jsr $4a62		jsr	FloatCompare
.2882	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2885	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2888	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -24534
>288b	d6 5f 00 00				.dword	$00005fd6
>288f	00 80					.byte	$00,$80
.2891	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -24534
>2894	d6 5f 00 00				.dword	$00005fd6
>2898	00 80					.byte	$00,$80
.289a	20 62 4a	jsr $4a62		jsr	FloatCompare
.289d	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.28a0	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>28a3	01 00 00 00				.dword	$00000001
>28a7	00 80					.byte	$00,$80
.28a9	20 62 4a	jsr $4a62		jsr	FloatCompare
.28ac	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.28af	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.28b2	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -24534
>28b5	d6 5f 00 00				.dword	$00005fd6
>28b9	00 80					.byte	$00,$80
.28bb	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -24534
>28be	d6 5f 00 00				.dword	$00005fd6
>28c2	00 80					.byte	$00,$80
.28c4	20 62 4a	jsr $4a62		jsr	FloatCompare
.28c7	20 3c 4a	jsr $4a3c		jsr	CompareNotEqual
.28ca	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>28cd	00 00 00 00				.dword	$00000000
>28d1	00 00					.byte	$00,$00
.28d3	20 62 4a	jsr $4a62		jsr	FloatCompare
.28d6	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.28d9	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.28dc	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -24534
>28df	d6 5f 00 00				.dword	$00005fd6
>28e3	00 80					.byte	$00,$80
.28e5	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -24534
>28e8	d6 5f 00 00				.dword	$00005fd6
>28ec	00 80					.byte	$00,$80
.28ee	20 62 4a	jsr $4a62		jsr	FloatCompare
.28f1	20 4a 4a	jsr $4a4a		jsr	CompareGreater
.28f4	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>28f7	00 00 00 00				.dword	$00000000
>28fb	00 00					.byte	$00,$00
.28fd	20 62 4a	jsr $4a62		jsr	FloatCompare
.2900	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2903	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2906	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -24534
>2909	d6 5f 00 00				.dword	$00005fd6
>290d	00 80					.byte	$00,$80
.290f	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -24534
>2912	d6 5f 00 00				.dword	$00005fd6
>2916	00 80					.byte	$00,$80
.2918	20 62 4a	jsr $4a62		jsr	FloatCompare
.291b	20 5a 4a	jsr $4a5a		jsr	CompareGreaterEqual
.291e	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>2921	01 00 00 00				.dword	$00000001
>2925	00 80					.byte	$00,$80
.2927	20 62 4a	jsr $4a62		jsr	FloatCompare
.292a	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.292d	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2930	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -24534
>2933	d6 5f 00 00				.dword	$00005fd6
>2937	00 80					.byte	$00,$80
.2939	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -24534
>293c	d6 5f 00 00				.dword	$00005fd6
>2940	00 80					.byte	$00,$80
.2942	20 62 4a	jsr $4a62		jsr	FloatCompare
.2945	20 42 4a	jsr $4a42		jsr	CompareLess
.2948	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>294b	00 00 00 00				.dword	$00000000
>294f	00 00					.byte	$00,$00
.2951	20 62 4a	jsr $4a62		jsr	FloatCompare
.2954	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2957	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.295a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -24534
>295d	d6 5f 00 00				.dword	$00005fd6
>2961	00 80					.byte	$00,$80
.2963	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -24534
>2966	d6 5f 00 00				.dword	$00005fd6
>296a	00 80					.byte	$00,$80
.296c	20 62 4a	jsr $4a62		jsr	FloatCompare
.296f	20 52 4a	jsr $4a52		jsr	CompareLessEqual
.2972	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>2975	01 00 00 00				.dword	$00000001
>2979	00 80					.byte	$00,$80
.297b	20 62 4a	jsr $4a62		jsr	FloatCompare
.297e	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2981	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2984	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 56.32574715
>2987	55 c8 a6 70				.dword	$70a6c855
>298b	e7 00					.byte	$e7,$00
.298d	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 73.89973273
>2990	e2 54 e6 49				.dword	$49e654e2
>2994	e8 00					.byte	$e8,$00
.2996	20 a1 49	jsr $49a1		jsr	FloatAdd
.2999	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 130.22547987
>299c	86 dc 1c 41				.dword	$411cdc86
>29a0	e9 00					.byte	$e9,$00
.29a2	20 62 4a	jsr $4a62		jsr	FloatCompare
.29a5	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.29a8	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.29ab	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 56.32574715
>29ae	55 c8 a6 70				.dword	$70a6c855
>29b2	e7 00					.byte	$e7,$00
.29b4	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 73.89973273
>29b7	e2 54 e6 49				.dword	$49e654e2
>29bb	e8 00					.byte	$e8,$00
.29bd	20 9b 49	jsr $499b		jsr	FloatSubtract
.29c0	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -17.57398558
>29c3	e0 c2 4b 46				.dword	$464bc2e0
>29c7	e6 80					.byte	$e6,$80
.29c9	20 62 4a	jsr $4a62		jsr	FloatCompare
.29cc	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.29cf	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.29d2	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 56.32574715
>29d5	55 c8 a6 70				.dword	$70a6c855
>29d9	e7 00					.byte	$e7,$00
.29db	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 73.89973273
>29de	e2 54 e6 49				.dword	$49e654e2
>29e2	e8 00					.byte	$e8,$00
.29e4	20 3d 4c	jsr $4c3d		jsr	FloatMultiply
.29e7	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 4162.45765976
>29ea	a5 d4 09 41				.dword	$4109d4a5
>29ee	ee 00					.byte	$ee,$00
.29f0	20 62 4a	jsr $4a62		jsr	FloatCompare
.29f3	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.29f6	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.29f9	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 56.32574715
>29fc	55 c8 a6 70				.dword	$70a6c855
>2a00	e7 00					.byte	$e7,$00
.2a02	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 73.89973273
>2a05	e2 54 e6 49				.dword	$49e654e2
>2a09	e8 00					.byte	$e8,$00
.2a0b	20 c6 4a	jsr $4ac6		jsr	FloatDivide
.2a0e	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0.76219149
>2a11	a1 7d 8f 61				.dword	$618f7da1
>2a15	e1 00					.byte	$e1,$00
.2a17	20 62 4a	jsr $4a62		jsr	FloatCompare
.2a1a	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2a1d	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2a20	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -29.09184417
>2a23	66 0c 5e 74				.dword	$745e0c66
>2a27	e6 80					.byte	$e6,$80
.2a29	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -29.09184417
>2a2c	66 0c 5e 74				.dword	$745e0c66
>2a30	e6 80					.byte	$e6,$80
.2a32	20 62 4a	jsr $4a62		jsr	FloatCompare
.2a35	20 4a 4a	jsr $4a4a		jsr	CompareGreater
.2a38	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>2a3b	00 00 00 00				.dword	$00000000
>2a3f	00 00					.byte	$00,$00
.2a41	20 62 4a	jsr $4a62		jsr	FloatCompare
.2a44	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2a47	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2a4a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -29.09184417
>2a4d	66 0c 5e 74				.dword	$745e0c66
>2a51	e6 80					.byte	$e6,$80
.2a53	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -29.09184417
>2a56	66 0c 5e 74				.dword	$745e0c66
>2a5a	e6 80					.byte	$e6,$80
.2a5c	20 62 4a	jsr $4a62		jsr	FloatCompare
.2a5f	20 5a 4a	jsr $4a5a		jsr	CompareGreaterEqual
.2a62	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>2a65	01 00 00 00				.dword	$00000001
>2a69	00 80					.byte	$00,$80
.2a6b	20 62 4a	jsr $4a62		jsr	FloatCompare
.2a6e	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2a71	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2a74	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -29.09184417
>2a77	66 0c 5e 74				.dword	$745e0c66
>2a7b	e6 80					.byte	$e6,$80
.2a7d	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -29.09184417
>2a80	66 0c 5e 74				.dword	$745e0c66
>2a84	e6 80					.byte	$e6,$80
.2a86	20 62 4a	jsr $4a62		jsr	FloatCompare
.2a89	20 42 4a	jsr $4a42		jsr	CompareLess
.2a8c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>2a8f	00 00 00 00				.dword	$00000000
>2a93	00 00					.byte	$00,$00
.2a95	20 62 4a	jsr $4a62		jsr	FloatCompare
.2a98	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2a9b	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2a9e	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -29.09184417
>2aa1	66 0c 5e 74				.dword	$745e0c66
>2aa5	e6 80					.byte	$e6,$80
.2aa7	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -29.09184417
>2aaa	66 0c 5e 74				.dword	$745e0c66
>2aae	e6 80					.byte	$e6,$80
.2ab0	20 62 4a	jsr $4a62		jsr	FloatCompare
.2ab3	20 52 4a	jsr $4a52		jsr	CompareLessEqual
.2ab6	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>2ab9	01 00 00 00				.dword	$00000001
>2abd	00 80					.byte	$00,$80
.2abf	20 62 4a	jsr $4a62		jsr	FloatCompare
.2ac2	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2ac5	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2ac8	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -29.09184417
>2acb	66 0c 5e 74				.dword	$745e0c66
>2acf	e6 80					.byte	$e6,$80
.2ad1	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -29.09184417
>2ad4	66 0c 5e 74				.dword	$745e0c66
>2ad8	e6 80					.byte	$e6,$80
.2ada	20 62 4a	jsr $4a62		jsr	FloatCompare
.2add	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2ae0	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>2ae3	01 00 00 00				.dword	$00000001
>2ae7	00 80					.byte	$00,$80
.2ae9	20 62 4a	jsr $4a62		jsr	FloatCompare
.2aec	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2aef	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2af2	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -29.09184417
>2af5	66 0c 5e 74				.dword	$745e0c66
>2af9	e6 80					.byte	$e6,$80
.2afb	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -29.09184417
>2afe	66 0c 5e 74				.dword	$745e0c66
>2b02	e6 80					.byte	$e6,$80
.2b04	20 62 4a	jsr $4a62		jsr	FloatCompare
.2b07	20 3c 4a	jsr $4a3c		jsr	CompareNotEqual
.2b0a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>2b0d	00 00 00 00				.dword	$00000000
>2b11	00 00					.byte	$00,$00
.2b13	20 62 4a	jsr $4a62		jsr	FloatCompare
.2b16	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2b19	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2b1c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 31108
>2b1f	84 79 00 00				.dword	$00007984
>2b23	00 00					.byte	$00,$00
.2b25	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -46583
>2b28	f7 b5 00 00				.dword	$0000b5f7
>2b2c	00 80					.byte	$00,$80
.2b2e	20 a1 49	jsr $49a1		jsr	FloatAdd
.2b31	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -15475
>2b34	73 3c 00 00				.dword	$00003c73
>2b38	00 80					.byte	$00,$80
.2b3a	20 62 4a	jsr $4a62		jsr	FloatCompare
.2b3d	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2b40	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2b43	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 31108
>2b46	84 79 00 00				.dword	$00007984
>2b4a	00 00					.byte	$00,$00
.2b4c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -46583
>2b4f	f7 b5 00 00				.dword	$0000b5f7
>2b53	00 80					.byte	$00,$80
.2b55	20 9b 49	jsr $499b		jsr	FloatSubtract
.2b58	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 77691
>2b5b	7b 2f 01 00				.dword	$00012f7b
>2b5f	00 00					.byte	$00,$00
.2b61	20 62 4a	jsr $4a62		jsr	FloatCompare
.2b64	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2b67	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2b6a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 31108
>2b6d	84 79 00 00				.dword	$00007984
>2b71	00 00					.byte	$00,$00
.2b73	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -46583
>2b76	f7 b5 00 00				.dword	$0000b5f7
>2b7a	00 80					.byte	$00,$80
.2b7c	20 3d 4c	jsr $4c3d		jsr	FloatMultiply
.2b7f	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1449103964
>2b82	5c 92 5f 56				.dword	$565f925c
>2b86	00 80					.byte	$00,$80
.2b88	20 62 4a	jsr $4a62		jsr	FloatCompare
.2b8b	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2b8e	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2b91	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 31108
>2b94	84 79 00 00				.dword	$00007984
>2b98	00 00					.byte	$00,$00
.2b9a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -46583
>2b9d	f7 b5 00 00				.dword	$0000b5f7
>2ba1	00 80					.byte	$00,$80
.2ba3	20 c6 4a	jsr $4ac6		jsr	FloatDivide
.2ba6	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -0.66779727
>2ba9	86 61 7a 55				.dword	$557a6186
>2bad	e1 80					.byte	$e1,$80
.2baf	20 62 4a	jsr $4a62		jsr	FloatCompare
.2bb2	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2bb5	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2bb8	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -46583
>2bbb	f7 b5 00 00				.dword	$0000b5f7
>2bbf	00 80					.byte	$00,$80
.2bc1	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -46583
>2bc4	f7 b5 00 00				.dword	$0000b5f7
>2bc8	00 80					.byte	$00,$80
.2bca	20 62 4a	jsr $4a62		jsr	FloatCompare
.2bcd	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2bd0	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>2bd3	01 00 00 00				.dword	$00000001
>2bd7	00 80					.byte	$00,$80
.2bd9	20 62 4a	jsr $4a62		jsr	FloatCompare
.2bdc	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2bdf	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2be2	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -46583
>2be5	f7 b5 00 00				.dword	$0000b5f7
>2be9	00 80					.byte	$00,$80
.2beb	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -46583
>2bee	f7 b5 00 00				.dword	$0000b5f7
>2bf2	00 80					.byte	$00,$80
.2bf4	20 62 4a	jsr $4a62		jsr	FloatCompare
.2bf7	20 3c 4a	jsr $4a3c		jsr	CompareNotEqual
.2bfa	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>2bfd	00 00 00 00				.dword	$00000000
>2c01	00 00					.byte	$00,$00
.2c03	20 62 4a	jsr $4a62		jsr	FloatCompare
.2c06	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2c09	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2c0c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -46583
>2c0f	f7 b5 00 00				.dword	$0000b5f7
>2c13	00 80					.byte	$00,$80
.2c15	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -46583
>2c18	f7 b5 00 00				.dword	$0000b5f7
>2c1c	00 80					.byte	$00,$80
.2c1e	20 62 4a	jsr $4a62		jsr	FloatCompare
.2c21	20 4a 4a	jsr $4a4a		jsr	CompareGreater
.2c24	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>2c27	00 00 00 00				.dword	$00000000
>2c2b	00 00					.byte	$00,$00
.2c2d	20 62 4a	jsr $4a62		jsr	FloatCompare
.2c30	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2c33	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2c36	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -46583
>2c39	f7 b5 00 00				.dword	$0000b5f7
>2c3d	00 80					.byte	$00,$80
.2c3f	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -46583
>2c42	f7 b5 00 00				.dword	$0000b5f7
>2c46	00 80					.byte	$00,$80
.2c48	20 62 4a	jsr $4a62		jsr	FloatCompare
.2c4b	20 5a 4a	jsr $4a5a		jsr	CompareGreaterEqual
.2c4e	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>2c51	01 00 00 00				.dword	$00000001
>2c55	00 80					.byte	$00,$80
.2c57	20 62 4a	jsr $4a62		jsr	FloatCompare
.2c5a	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2c5d	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2c60	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -46583
>2c63	f7 b5 00 00				.dword	$0000b5f7
>2c67	00 80					.byte	$00,$80
.2c69	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -46583
>2c6c	f7 b5 00 00				.dword	$0000b5f7
>2c70	00 80					.byte	$00,$80
.2c72	20 62 4a	jsr $4a62		jsr	FloatCompare
.2c75	20 42 4a	jsr $4a42		jsr	CompareLess
.2c78	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>2c7b	00 00 00 00				.dword	$00000000
>2c7f	00 00					.byte	$00,$00
.2c81	20 62 4a	jsr $4a62		jsr	FloatCompare
.2c84	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2c87	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2c8a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -46583
>2c8d	f7 b5 00 00				.dword	$0000b5f7
>2c91	00 80					.byte	$00,$80
.2c93	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -46583
>2c96	f7 b5 00 00				.dword	$0000b5f7
>2c9a	00 80					.byte	$00,$80
.2c9c	20 62 4a	jsr $4a62		jsr	FloatCompare
.2c9f	20 52 4a	jsr $4a52		jsr	CompareLessEqual
.2ca2	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>2ca5	01 00 00 00				.dword	$00000001
>2ca9	00 80					.byte	$00,$80
.2cab	20 62 4a	jsr $4a62		jsr	FloatCompare
.2cae	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2cb1	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2cb4	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -3.59212764
>2cb7	aa b5 f2 72				.dword	$72f2b5aa
>2cbb	e3 80					.byte	$e3,$80
.2cbd	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 59.82157609
>2cc0	9f a5 a4 77				.dword	$77a4a59f
>2cc4	e7 00					.byte	$e7,$00
.2cc6	20 a1 49	jsr $49a1		jsr	FloatAdd
.2cc9	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 56.22944845
>2ccc	44 7a 75 70				.dword	$70757a44
>2cd0	e7 00					.byte	$e7,$00
.2cd2	20 62 4a	jsr $4a62		jsr	FloatCompare
.2cd5	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2cd8	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2cdb	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -3.59212764
>2cde	aa b5 f2 72				.dword	$72f2b5aa
>2ce2	e3 80					.byte	$e3,$80
.2ce4	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 59.82157609
>2ce7	9f a5 a4 77				.dword	$77a4a59f
>2ceb	e7 00					.byte	$e7,$00
.2ced	20 9b 49	jsr $499b		jsr	FloatSubtract
.2cf0	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -63.41370373
>2cf3	fa d0 d3 7e				.dword	$7ed3d0fa
>2cf7	e7 80					.byte	$e7,$80
.2cf9	20 62 4a	jsr $4a62		jsr	FloatCompare
.2cfc	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2cff	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2d02	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -3.59212764
>2d05	aa b5 f2 72				.dword	$72f2b5aa
>2d09	e3 80					.byte	$e3,$80
.2d0b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 59.82157609
>2d0e	9f a5 a4 77				.dword	$77a4a59f
>2d12	e7 00					.byte	$e7,$00
.2d14	20 3d 4c	jsr $4c3d		jsr	FloatMultiply
.2d17	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -214.88673709
>2d1a	9a 80 71 6b				.dword	$6b71809a
>2d1e	e9 80					.byte	$e9,$80
.2d20	20 62 4a	jsr $4a62		jsr	FloatCompare
.2d23	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2d26	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2d29	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -3.59212764
>2d2c	aa b5 f2 72				.dword	$72f2b5aa
>2d30	e3 80					.byte	$e3,$80
.2d32	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 59.82157609
>2d35	9f a5 a4 77				.dword	$77a4a59f
>2d39	e7 00					.byte	$e7,$00
.2d3b	20 c6 4a	jsr $4ac6		jsr	FloatDivide
.2d3e	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -0.06004736
>2d41	3b 1c fa 7a				.dword	$7afa1c3b
>2d45	dd 80					.byte	$dd,$80
.2d47	20 62 4a	jsr $4a62		jsr	FloatCompare
.2d4a	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2d4d	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2d50	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 73.71175184
>2d53	5e 35 b6 49				.dword	$49b6355e
>2d57	e8 00					.byte	$e8,$00
.2d59	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 73.71175184
>2d5c	5e 35 b6 49				.dword	$49b6355e
>2d60	e8 00					.byte	$e8,$00
.2d62	20 62 4a	jsr $4a62		jsr	FloatCompare
.2d65	20 4a 4a	jsr $4a4a		jsr	CompareGreater
.2d68	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>2d6b	00 00 00 00				.dword	$00000000
>2d6f	00 00					.byte	$00,$00
.2d71	20 62 4a	jsr $4a62		jsr	FloatCompare
.2d74	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2d77	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2d7a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 73.71175184
>2d7d	5e 35 b6 49				.dword	$49b6355e
>2d81	e8 00					.byte	$e8,$00
.2d83	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 73.71175184
>2d86	5e 35 b6 49				.dword	$49b6355e
>2d8a	e8 00					.byte	$e8,$00
.2d8c	20 62 4a	jsr $4a62		jsr	FloatCompare
.2d8f	20 5a 4a	jsr $4a5a		jsr	CompareGreaterEqual
.2d92	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>2d95	01 00 00 00				.dword	$00000001
>2d99	00 80					.byte	$00,$80
.2d9b	20 62 4a	jsr $4a62		jsr	FloatCompare
.2d9e	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2da1	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2da4	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 73.71175184
>2da7	5e 35 b6 49				.dword	$49b6355e
>2dab	e8 00					.byte	$e8,$00
.2dad	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 73.71175184
>2db0	5e 35 b6 49				.dword	$49b6355e
>2db4	e8 00					.byte	$e8,$00
.2db6	20 62 4a	jsr $4a62		jsr	FloatCompare
.2db9	20 42 4a	jsr $4a42		jsr	CompareLess
.2dbc	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>2dbf	00 00 00 00				.dword	$00000000
>2dc3	00 00					.byte	$00,$00
.2dc5	20 62 4a	jsr $4a62		jsr	FloatCompare
.2dc8	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2dcb	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2dce	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 73.71175184
>2dd1	5e 35 b6 49				.dword	$49b6355e
>2dd5	e8 00					.byte	$e8,$00
.2dd7	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 73.71175184
>2dda	5e 35 b6 49				.dword	$49b6355e
>2dde	e8 00					.byte	$e8,$00
.2de0	20 62 4a	jsr $4a62		jsr	FloatCompare
.2de3	20 52 4a	jsr $4a52		jsr	CompareLessEqual
.2de6	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>2de9	01 00 00 00				.dword	$00000001
>2ded	00 80					.byte	$00,$80
.2def	20 62 4a	jsr $4a62		jsr	FloatCompare
.2df2	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2df5	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2df8	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 73.71175184
>2dfb	5e 35 b6 49				.dword	$49b6355e
>2dff	e8 00					.byte	$e8,$00
.2e01	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 73.71175184
>2e04	5e 35 b6 49				.dword	$49b6355e
>2e08	e8 00					.byte	$e8,$00
.2e0a	20 62 4a	jsr $4a62		jsr	FloatCompare
.2e0d	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2e10	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>2e13	01 00 00 00				.dword	$00000001
>2e17	00 80					.byte	$00,$80
.2e19	20 62 4a	jsr $4a62		jsr	FloatCompare
.2e1c	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2e1f	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2e22	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 73.71175184
>2e25	5e 35 b6 49				.dword	$49b6355e
>2e29	e8 00					.byte	$e8,$00
.2e2b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 73.71175184
>2e2e	5e 35 b6 49				.dword	$49b6355e
>2e32	e8 00					.byte	$e8,$00
.2e34	20 62 4a	jsr $4a62		jsr	FloatCompare
.2e37	20 3c 4a	jsr $4a3c		jsr	CompareNotEqual
.2e3a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>2e3d	00 00 00 00				.dword	$00000000
>2e41	00 00					.byte	$00,$00
.2e43	20 62 4a	jsr $4a62		jsr	FloatCompare
.2e46	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2e49	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2e4c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 21763
>2e4f	03 55 00 00				.dword	$00005503
>2e53	00 00					.byte	$00,$00
.2e55	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1134
>2e58	6e 04 00 00				.dword	$0000046e
>2e5c	00 80					.byte	$00,$80
.2e5e	20 a1 49	jsr $49a1		jsr	FloatAdd
.2e61	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 20629
>2e64	95 50 00 00				.dword	$00005095
>2e68	00 00					.byte	$00,$00
.2e6a	20 62 4a	jsr $4a62		jsr	FloatCompare
.2e6d	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2e70	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2e73	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 21763
>2e76	03 55 00 00				.dword	$00005503
>2e7a	00 00					.byte	$00,$00
.2e7c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1134
>2e7f	6e 04 00 00				.dword	$0000046e
>2e83	00 80					.byte	$00,$80
.2e85	20 9b 49	jsr $499b		jsr	FloatSubtract
.2e88	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 22897
>2e8b	71 59 00 00				.dword	$00005971
>2e8f	00 00					.byte	$00,$00
.2e91	20 62 4a	jsr $4a62		jsr	FloatCompare
.2e94	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2e97	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2e9a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 21763
>2e9d	03 55 00 00				.dword	$00005503
>2ea1	00 00					.byte	$00,$00
.2ea3	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1134
>2ea6	6e 04 00 00				.dword	$0000046e
>2eaa	00 80					.byte	$00,$80
.2eac	20 3d 4c	jsr $4c3d		jsr	FloatMultiply
.2eaf	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -24679242
>2eb2	4a 93 78 01				.dword	$0178934a
>2eb6	00 80					.byte	$00,$80
.2eb8	20 62 4a	jsr $4a62		jsr	FloatCompare
.2ebb	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2ebe	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2ec1	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 21763
>2ec4	03 55 00 00				.dword	$00005503
>2ec8	00 00					.byte	$00,$00
.2eca	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1134
>2ecd	6e 04 00 00				.dword	$0000046e
>2ed1	00 80					.byte	$00,$80
.2ed3	20 c6 4a	jsr $4ac6		jsr	FloatDivide
.2ed6	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -19.19135802
>2ed9	5b f3 c3 4c				.dword	$4cc3f35b
>2edd	e6 80					.byte	$e6,$80
.2edf	20 62 4a	jsr $4a62		jsr	FloatCompare
.2ee2	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2ee5	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2ee8	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1134
>2eeb	6e 04 00 00				.dword	$0000046e
>2eef	00 80					.byte	$00,$80
.2ef1	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1134
>2ef4	6e 04 00 00				.dword	$0000046e
>2ef8	00 80					.byte	$00,$80
.2efa	20 62 4a	jsr $4a62		jsr	FloatCompare
.2efd	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2f00	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>2f03	01 00 00 00				.dword	$00000001
>2f07	00 80					.byte	$00,$80
.2f09	20 62 4a	jsr $4a62		jsr	FloatCompare
.2f0c	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2f0f	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2f12	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1134
>2f15	6e 04 00 00				.dword	$0000046e
>2f19	00 80					.byte	$00,$80
.2f1b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1134
>2f1e	6e 04 00 00				.dword	$0000046e
>2f22	00 80					.byte	$00,$80
.2f24	20 62 4a	jsr $4a62		jsr	FloatCompare
.2f27	20 3c 4a	jsr $4a3c		jsr	CompareNotEqual
.2f2a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>2f2d	00 00 00 00				.dword	$00000000
>2f31	00 00					.byte	$00,$00
.2f33	20 62 4a	jsr $4a62		jsr	FloatCompare
.2f36	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2f39	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2f3c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1134
>2f3f	6e 04 00 00				.dword	$0000046e
>2f43	00 80					.byte	$00,$80
.2f45	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1134
>2f48	6e 04 00 00				.dword	$0000046e
>2f4c	00 80					.byte	$00,$80
.2f4e	20 62 4a	jsr $4a62		jsr	FloatCompare
.2f51	20 4a 4a	jsr $4a4a		jsr	CompareGreater
.2f54	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>2f57	00 00 00 00				.dword	$00000000
>2f5b	00 00					.byte	$00,$00
.2f5d	20 62 4a	jsr $4a62		jsr	FloatCompare
.2f60	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2f63	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2f66	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1134
>2f69	6e 04 00 00				.dword	$0000046e
>2f6d	00 80					.byte	$00,$80
.2f6f	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1134
>2f72	6e 04 00 00				.dword	$0000046e
>2f76	00 80					.byte	$00,$80
.2f78	20 62 4a	jsr $4a62		jsr	FloatCompare
.2f7b	20 5a 4a	jsr $4a5a		jsr	CompareGreaterEqual
.2f7e	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>2f81	01 00 00 00				.dword	$00000001
>2f85	00 80					.byte	$00,$80
.2f87	20 62 4a	jsr $4a62		jsr	FloatCompare
.2f8a	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2f8d	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2f90	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1134
>2f93	6e 04 00 00				.dword	$0000046e
>2f97	00 80					.byte	$00,$80
.2f99	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1134
>2f9c	6e 04 00 00				.dword	$0000046e
>2fa0	00 80					.byte	$00,$80
.2fa2	20 62 4a	jsr $4a62		jsr	FloatCompare
.2fa5	20 42 4a	jsr $4a42		jsr	CompareLess
.2fa8	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>2fab	00 00 00 00				.dword	$00000000
>2faf	00 00					.byte	$00,$00
.2fb1	20 62 4a	jsr $4a62		jsr	FloatCompare
.2fb4	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2fb7	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2fba	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1134
>2fbd	6e 04 00 00				.dword	$0000046e
>2fc1	00 80					.byte	$00,$80
.2fc3	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1134
>2fc6	6e 04 00 00				.dword	$0000046e
>2fca	00 80					.byte	$00,$80
.2fcc	20 62 4a	jsr $4a62		jsr	FloatCompare
.2fcf	20 52 4a	jsr $4a52		jsr	CompareLessEqual
.2fd2	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>2fd5	01 00 00 00				.dword	$00000001
>2fd9	00 80					.byte	$00,$80
.2fdb	20 62 4a	jsr $4a62		jsr	FloatCompare
.2fde	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.2fe1	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.2fe4	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -26.81558273
>2fe7	1f 28 43 6b				.dword	$6b43281f
>2feb	e6 80					.byte	$e6,$80
.2fed	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -47.20733781
>2ff0	2e 28 6a 5e				.dword	$5e6a282e
>2ff4	e7 80					.byte	$e7,$80
.2ff6	20 a1 49	jsr $49a1		jsr	FloatAdd
.2ff9	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -74.02292055
>2ffc	1f de 05 4a				.dword	$4a05de1f
>3000	e8 80					.byte	$e8,$80
.3002	20 62 4a	jsr $4a62		jsr	FloatCompare
.3005	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3008	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.300b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -26.81558273
>300e	1f 28 43 6b				.dword	$6b43281f
>3012	e6 80					.byte	$e6,$80
.3014	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -47.20733781
>3017	2e 28 6a 5e				.dword	$5e6a282e
>301b	e7 80					.byte	$e7,$80
.301d	20 9b 49	jsr $499b		jsr	FloatSubtract
.3020	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 20.39175508
>3023	3e 28 91 51				.dword	$5191283e
>3027	e6 00					.byte	$e6,$00
.3029	20 62 4a	jsr $4a62		jsr	FloatCompare
.302c	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.302f	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3032	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -26.81558273
>3035	1f 28 43 6b				.dword	$6b43281f
>3039	e6 80					.byte	$e6,$80
.303b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -47.20733781
>303e	2e 28 6a 5e				.dword	$5e6a282e
>3042	e7 80					.byte	$e7,$80
.3044	20 3d 4c	jsr $4c3d		jsr	FloatMultiply
.3047	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 1265.89227276
>304a	c0 46 1e 4f				.dword	$4f1e46c0
>304e	ec 00					.byte	$ec,$00
.3050	20 62 4a	jsr $4a62		jsr	FloatCompare
.3053	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3056	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3059	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -26.81558273
>305c	1f 28 43 6b				.dword	$6b43281f
>3060	e6 80					.byte	$e6,$80
.3062	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -47.20733781
>3065	2e 28 6a 5e				.dword	$5e6a282e
>3069	e7 80					.byte	$e7,$80
.306b	20 c6 4a	jsr $4ac6		jsr	FloatDivide
.306e	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0.56803844
>3071	cd 7b b5 48				.dword	$48b57bcd
>3075	e1 00					.byte	$e1,$00
.3077	20 62 4a	jsr $4a62		jsr	FloatCompare
.307a	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.307d	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3080	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -7.13387867
>3083	f6 5d 24 72				.dword	$72245df6
>3087	e4 80					.byte	$e4,$80
.3089	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -7.13387867
>308c	f6 5d 24 72				.dword	$72245df6
>3090	e4 80					.byte	$e4,$80
.3092	20 62 4a	jsr $4a62		jsr	FloatCompare
.3095	20 4a 4a	jsr $4a4a		jsr	CompareGreater
.3098	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>309b	00 00 00 00				.dword	$00000000
>309f	00 00					.byte	$00,$00
.30a1	20 62 4a	jsr $4a62		jsr	FloatCompare
.30a4	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.30a7	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.30aa	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -7.13387867
>30ad	f6 5d 24 72				.dword	$72245df6
>30b1	e4 80					.byte	$e4,$80
.30b3	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -7.13387867
>30b6	f6 5d 24 72				.dword	$72245df6
>30ba	e4 80					.byte	$e4,$80
.30bc	20 62 4a	jsr $4a62		jsr	FloatCompare
.30bf	20 5a 4a	jsr $4a5a		jsr	CompareGreaterEqual
.30c2	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>30c5	01 00 00 00				.dword	$00000001
>30c9	00 80					.byte	$00,$80
.30cb	20 62 4a	jsr $4a62		jsr	FloatCompare
.30ce	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.30d1	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.30d4	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -7.13387867
>30d7	f6 5d 24 72				.dword	$72245df6
>30db	e4 80					.byte	$e4,$80
.30dd	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -7.13387867
>30e0	f6 5d 24 72				.dword	$72245df6
>30e4	e4 80					.byte	$e4,$80
.30e6	20 62 4a	jsr $4a62		jsr	FloatCompare
.30e9	20 42 4a	jsr $4a42		jsr	CompareLess
.30ec	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>30ef	00 00 00 00				.dword	$00000000
>30f3	00 00					.byte	$00,$00
.30f5	20 62 4a	jsr $4a62		jsr	FloatCompare
.30f8	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.30fb	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.30fe	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -7.13387867
>3101	f6 5d 24 72				.dword	$72245df6
>3105	e4 80					.byte	$e4,$80
.3107	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -7.13387867
>310a	f6 5d 24 72				.dword	$72245df6
>310e	e4 80					.byte	$e4,$80
.3110	20 62 4a	jsr $4a62		jsr	FloatCompare
.3113	20 52 4a	jsr $4a52		jsr	CompareLessEqual
.3116	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>3119	01 00 00 00				.dword	$00000001
>311d	00 80					.byte	$00,$80
.311f	20 62 4a	jsr $4a62		jsr	FloatCompare
.3122	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3125	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3128	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -7.13387867
>312b	f6 5d 24 72				.dword	$72245df6
>312f	e4 80					.byte	$e4,$80
.3131	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -7.13387867
>3134	f6 5d 24 72				.dword	$72245df6
>3138	e4 80					.byte	$e4,$80
.313a	20 62 4a	jsr $4a62		jsr	FloatCompare
.313d	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3140	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>3143	01 00 00 00				.dword	$00000001
>3147	00 80					.byte	$00,$80
.3149	20 62 4a	jsr $4a62		jsr	FloatCompare
.314c	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.314f	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3152	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -7.13387867
>3155	f6 5d 24 72				.dword	$72245df6
>3159	e4 80					.byte	$e4,$80
.315b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -7.13387867
>315e	f6 5d 24 72				.dword	$72245df6
>3162	e4 80					.byte	$e4,$80
.3164	20 62 4a	jsr $4a62		jsr	FloatCompare
.3167	20 3c 4a	jsr $4a3c		jsr	CompareNotEqual
.316a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>316d	00 00 00 00				.dword	$00000000
>3171	00 00					.byte	$00,$00
.3173	20 62 4a	jsr $4a62		jsr	FloatCompare
.3176	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3179	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.317c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 31718
>317f	e6 7b 00 00				.dword	$00007be6
>3183	00 00					.byte	$00,$00
.3185	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 41002
>3188	2a a0 00 00				.dword	$0000a02a
>318c	00 00					.byte	$00,$00
.318e	20 a1 49	jsr $49a1		jsr	FloatAdd
.3191	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 72720
>3194	10 1c 01 00				.dword	$00011c10
>3198	00 00					.byte	$00,$00
.319a	20 62 4a	jsr $4a62		jsr	FloatCompare
.319d	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.31a0	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.31a3	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 31718
>31a6	e6 7b 00 00				.dword	$00007be6
>31aa	00 00					.byte	$00,$00
.31ac	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 41002
>31af	2a a0 00 00				.dword	$0000a02a
>31b3	00 00					.byte	$00,$00
.31b5	20 9b 49	jsr $499b		jsr	FloatSubtract
.31b8	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -9284
>31bb	44 24 00 00				.dword	$00002444
>31bf	00 80					.byte	$00,$80
.31c1	20 62 4a	jsr $4a62		jsr	FloatCompare
.31c4	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.31c7	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.31ca	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 31718
>31cd	e6 7b 00 00				.dword	$00007be6
>31d1	00 00					.byte	$00,$00
.31d3	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 41002
>31d6	2a a0 00 00				.dword	$0000a02a
>31da	00 00					.byte	$00,$00
.31dc	20 3d 4c	jsr $4c3d		jsr	FloatMultiply
.31df	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 1300501436
>31e2	bc 13 84 4d				.dword	$4d8413bc
>31e6	00 00					.byte	$00,$00
.31e8	20 62 4a	jsr $4a62		jsr	FloatCompare
.31eb	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.31ee	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.31f1	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 31718
>31f4	e6 7b 00 00				.dword	$00007be6
>31f8	00 00					.byte	$00,$00
.31fa	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 41002
>31fd	2a a0 00 00				.dword	$0000a02a
>3201	00 00					.byte	$00,$00
.3203	20 c6 4a	jsr $4ac6		jsr	FloatDivide
.3206	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0.77357202
>3209	70 68 04 63				.dword	$63046870
>320d	e1 00					.byte	$e1,$00
.320f	20 62 4a	jsr $4a62		jsr	FloatCompare
.3212	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3215	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3218	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 41002
>321b	2a a0 00 00				.dword	$0000a02a
>321f	00 00					.byte	$00,$00
.3221	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 41002
>3224	2a a0 00 00				.dword	$0000a02a
>3228	00 00					.byte	$00,$00
.322a	20 62 4a	jsr $4a62		jsr	FloatCompare
.322d	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3230	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>3233	01 00 00 00				.dword	$00000001
>3237	00 80					.byte	$00,$80
.3239	20 62 4a	jsr $4a62		jsr	FloatCompare
.323c	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.323f	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3242	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 41002
>3245	2a a0 00 00				.dword	$0000a02a
>3249	00 00					.byte	$00,$00
.324b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 41002
>324e	2a a0 00 00				.dword	$0000a02a
>3252	00 00					.byte	$00,$00
.3254	20 62 4a	jsr $4a62		jsr	FloatCompare
.3257	20 3c 4a	jsr $4a3c		jsr	CompareNotEqual
.325a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>325d	00 00 00 00				.dword	$00000000
>3261	00 00					.byte	$00,$00
.3263	20 62 4a	jsr $4a62		jsr	FloatCompare
.3266	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3269	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.326c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 41002
>326f	2a a0 00 00				.dword	$0000a02a
>3273	00 00					.byte	$00,$00
.3275	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 41002
>3278	2a a0 00 00				.dword	$0000a02a
>327c	00 00					.byte	$00,$00
.327e	20 62 4a	jsr $4a62		jsr	FloatCompare
.3281	20 4a 4a	jsr $4a4a		jsr	CompareGreater
.3284	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>3287	00 00 00 00				.dword	$00000000
>328b	00 00					.byte	$00,$00
.328d	20 62 4a	jsr $4a62		jsr	FloatCompare
.3290	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3293	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3296	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 41002
>3299	2a a0 00 00				.dword	$0000a02a
>329d	00 00					.byte	$00,$00
.329f	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 41002
>32a2	2a a0 00 00				.dword	$0000a02a
>32a6	00 00					.byte	$00,$00
.32a8	20 62 4a	jsr $4a62		jsr	FloatCompare
.32ab	20 5a 4a	jsr $4a5a		jsr	CompareGreaterEqual
.32ae	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>32b1	01 00 00 00				.dword	$00000001
>32b5	00 80					.byte	$00,$80
.32b7	20 62 4a	jsr $4a62		jsr	FloatCompare
.32ba	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.32bd	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.32c0	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 41002
>32c3	2a a0 00 00				.dword	$0000a02a
>32c7	00 00					.byte	$00,$00
.32c9	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 41002
>32cc	2a a0 00 00				.dword	$0000a02a
>32d0	00 00					.byte	$00,$00
.32d2	20 62 4a	jsr $4a62		jsr	FloatCompare
.32d5	20 42 4a	jsr $4a42		jsr	CompareLess
.32d8	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>32db	00 00 00 00				.dword	$00000000
>32df	00 00					.byte	$00,$00
.32e1	20 62 4a	jsr $4a62		jsr	FloatCompare
.32e4	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.32e7	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.32ea	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 41002
>32ed	2a a0 00 00				.dword	$0000a02a
>32f1	00 00					.byte	$00,$00
.32f3	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 41002
>32f6	2a a0 00 00				.dword	$0000a02a
>32fa	00 00					.byte	$00,$00
.32fc	20 62 4a	jsr $4a62		jsr	FloatCompare
.32ff	20 52 4a	jsr $4a52		jsr	CompareLessEqual
.3302	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>3305	01 00 00 00				.dword	$00000001
>3309	00 80					.byte	$00,$80
.330b	20 62 4a	jsr $4a62		jsr	FloatCompare
.330e	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3311	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3314	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 66.39888232
>3317	27 1d 66 42				.dword	$42661d27
>331b	e8 00					.byte	$e8,$00
.331d	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -17.05499312
>3320	1e 50 38 44				.dword	$4438501e
>3324	e6 80					.byte	$e6,$80
.3326	20 a1 49	jsr $49a1		jsr	FloatAdd
.3329	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 49.3438892
>332c	3f 12 b0 62				.dword	$62b0123f
>3330	e7 00					.byte	$e7,$00
.3332	20 62 4a	jsr $4a62		jsr	FloatCompare
.3335	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3338	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.333b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 66.39888232
>333e	27 1d 66 42				.dword	$42661d27
>3342	e8 00					.byte	$e8,$00
.3344	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -17.05499312
>3347	1e 50 38 44				.dword	$4438501e
>334b	e6 80					.byte	$e6,$80
.334d	20 9b 49	jsr $499b		jsr	FloatSubtract
.3350	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 83.45387544
>3353	2e 31 74 53				.dword	$5374312e
>3357	e8 00					.byte	$e8,$00
.3359	20 62 4a	jsr $4a62		jsr	FloatCompare
.335c	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.335f	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3362	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 66.39888232
>3365	27 1d 66 42				.dword	$42661d27
>3369	e8 00					.byte	$e8,$00
.336b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -17.05499312
>336e	1e 50 38 44				.dword	$4438501e
>3372	e6 80					.byte	$e6,$80
.3374	20 3d 4c	jsr $4c3d		jsr	FloatMultiply
.3377	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1132.43248085
>337a	71 eb c6 46				.dword	$46c6eb71
>337e	ec 80					.byte	$ec,$80
.3380	20 62 4a	jsr $4a62		jsr	FloatCompare
.3383	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3386	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3389	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 66.39888232
>338c	27 1d 66 42				.dword	$42661d27
>3390	e8 00					.byte	$e8,$00
.3392	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -17.05499312
>3395	1e 50 38 44				.dword	$4438501e
>3399	e6 80					.byte	$e6,$80
.339b	20 c6 4a	jsr $4ac6		jsr	FloatDivide
.339e	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -3.89322246
>33a1	45 47 95 7c				.dword	$7c954745
>33a5	e3 80					.byte	$e3,$80
.33a7	20 62 4a	jsr $4a62		jsr	FloatCompare
.33aa	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.33ad	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.33b0	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -45.81380092
>33b3	84 aa a0 5b				.dword	$5ba0aa84
>33b7	e7 80					.byte	$e7,$80
.33b9	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -60.9392565
>33bc	3a e6 e0 79				.dword	$79e0e63a
>33c0	e7 80					.byte	$e7,$80
.33c2	20 62 4a	jsr $4a62		jsr	FloatCompare
.33c5	20 4a 4a	jsr $4a4a		jsr	CompareGreater
.33c8	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>33cb	01 00 00 00				.dword	$00000001
>33cf	00 80					.byte	$00,$80
.33d1	20 62 4a	jsr $4a62		jsr	FloatCompare
.33d4	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.33d7	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.33da	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -45.81380092
>33dd	84 aa a0 5b				.dword	$5ba0aa84
>33e1	e7 80					.byte	$e7,$80
.33e3	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -60.9392565
>33e6	3a e6 e0 79				.dword	$79e0e63a
>33ea	e7 80					.byte	$e7,$80
.33ec	20 62 4a	jsr $4a62		jsr	FloatCompare
.33ef	20 5a 4a	jsr $4a5a		jsr	CompareGreaterEqual
.33f2	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>33f5	01 00 00 00				.dword	$00000001
>33f9	00 80					.byte	$00,$80
.33fb	20 62 4a	jsr $4a62		jsr	FloatCompare
.33fe	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3401	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3404	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -45.81380092
>3407	84 aa a0 5b				.dword	$5ba0aa84
>340b	e7 80					.byte	$e7,$80
.340d	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -60.9392565
>3410	3a e6 e0 79				.dword	$79e0e63a
>3414	e7 80					.byte	$e7,$80
.3416	20 62 4a	jsr $4a62		jsr	FloatCompare
.3419	20 42 4a	jsr $4a42		jsr	CompareLess
.341c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>341f	00 00 00 00				.dword	$00000000
>3423	00 00					.byte	$00,$00
.3425	20 62 4a	jsr $4a62		jsr	FloatCompare
.3428	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.342b	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.342e	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -45.81380092
>3431	84 aa a0 5b				.dword	$5ba0aa84
>3435	e7 80					.byte	$e7,$80
.3437	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -60.9392565
>343a	3a e6 e0 79				.dword	$79e0e63a
>343e	e7 80					.byte	$e7,$80
.3440	20 62 4a	jsr $4a62		jsr	FloatCompare
.3443	20 52 4a	jsr $4a52		jsr	CompareLessEqual
.3446	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>3449	00 00 00 00				.dword	$00000000
>344d	00 00					.byte	$00,$00
.344f	20 62 4a	jsr $4a62		jsr	FloatCompare
.3452	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3455	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3458	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -45.81380092
>345b	84 aa a0 5b				.dword	$5ba0aa84
>345f	e7 80					.byte	$e7,$80
.3461	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -60.9392565
>3464	3a e6 e0 79				.dword	$79e0e63a
>3468	e7 80					.byte	$e7,$80
.346a	20 62 4a	jsr $4a62		jsr	FloatCompare
.346d	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3470	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>3473	00 00 00 00				.dword	$00000000
>3477	00 00					.byte	$00,$00
.3479	20 62 4a	jsr $4a62		jsr	FloatCompare
.347c	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.347f	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3482	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -45.81380092
>3485	84 aa a0 5b				.dword	$5ba0aa84
>3489	e7 80					.byte	$e7,$80
.348b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -60.9392565
>348e	3a e6 e0 79				.dword	$79e0e63a
>3492	e7 80					.byte	$e7,$80
.3494	20 62 4a	jsr $4a62		jsr	FloatCompare
.3497	20 3c 4a	jsr $4a3c		jsr	CompareNotEqual
.349a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>349d	01 00 00 00				.dword	$00000001
>34a1	00 80					.byte	$00,$80
.34a3	20 62 4a	jsr $4a62		jsr	FloatCompare
.34a6	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.34a9	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.34ac	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -3028
>34af	d4 0b 00 00				.dword	$00000bd4
>34b3	00 80					.byte	$00,$80
.34b5	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 2827
>34b8	0b 0b 00 00				.dword	$00000b0b
>34bc	00 00					.byte	$00,$00
.34be	20 a1 49	jsr $49a1		jsr	FloatAdd
.34c1	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -201
>34c4	c9 00 00 00				.dword	$000000c9
>34c8	00 80					.byte	$00,$80
.34ca	20 62 4a	jsr $4a62		jsr	FloatCompare
.34cd	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.34d0	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.34d3	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -3028
>34d6	d4 0b 00 00				.dword	$00000bd4
>34da	00 80					.byte	$00,$80
.34dc	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 2827
>34df	0b 0b 00 00				.dword	$00000b0b
>34e3	00 00					.byte	$00,$00
.34e5	20 9b 49	jsr $499b		jsr	FloatSubtract
.34e8	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -5855
>34eb	df 16 00 00				.dword	$000016df
>34ef	00 80					.byte	$00,$80
.34f1	20 62 4a	jsr $4a62		jsr	FloatCompare
.34f4	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.34f7	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.34fa	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -3028
>34fd	d4 0b 00 00				.dword	$00000bd4
>3501	00 80					.byte	$00,$80
.3503	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 2827
>3506	0b 0b 00 00				.dword	$00000b0b
>350a	00 00					.byte	$00,$00
.350c	20 3d 4c	jsr $4c3d		jsr	FloatMultiply
.350f	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -8560156
>3512	1c 9e 82 00				.dword	$00829e1c
>3516	00 80					.byte	$00,$80
.3518	20 62 4a	jsr $4a62		jsr	FloatCompare
.351b	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.351e	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3521	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -3028
>3524	d4 0b 00 00				.dword	$00000bd4
>3528	00 80					.byte	$00,$80
.352a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 2827
>352d	0b 0b 00 00				.dword	$00000b0b
>3531	00 00					.byte	$00,$00
.3533	20 c6 4a	jsr $4ac6		jsr	FloatDivide
.3536	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1.07110011
>3539	7a e7 8c 44				.dword	$448ce77a
>353d	e2 80					.byte	$e2,$80
.353f	20 62 4a	jsr $4a62		jsr	FloatCompare
.3542	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3545	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3548	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -3028
>354b	d4 0b 00 00				.dword	$00000bd4
>354f	00 80					.byte	$00,$80
.3551	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 2827
>3554	0b 0b 00 00				.dword	$00000b0b
>3558	00 00					.byte	$00,$00
.355a	20 62 4a	jsr $4a62		jsr	FloatCompare
.355d	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3560	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>3563	00 00 00 00				.dword	$00000000
>3567	00 00					.byte	$00,$00
.3569	20 62 4a	jsr $4a62		jsr	FloatCompare
.356c	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.356f	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3572	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -3028
>3575	d4 0b 00 00				.dword	$00000bd4
>3579	00 80					.byte	$00,$80
.357b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 2827
>357e	0b 0b 00 00				.dword	$00000b0b
>3582	00 00					.byte	$00,$00
.3584	20 62 4a	jsr $4a62		jsr	FloatCompare
.3587	20 3c 4a	jsr $4a3c		jsr	CompareNotEqual
.358a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>358d	01 00 00 00				.dword	$00000001
>3591	00 80					.byte	$00,$80
.3593	20 62 4a	jsr $4a62		jsr	FloatCompare
.3596	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3599	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.359c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -3028
>359f	d4 0b 00 00				.dword	$00000bd4
>35a3	00 80					.byte	$00,$80
.35a5	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 2827
>35a8	0b 0b 00 00				.dword	$00000b0b
>35ac	00 00					.byte	$00,$00
.35ae	20 62 4a	jsr $4a62		jsr	FloatCompare
.35b1	20 4a 4a	jsr $4a4a		jsr	CompareGreater
.35b4	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>35b7	00 00 00 00				.dword	$00000000
>35bb	00 00					.byte	$00,$00
.35bd	20 62 4a	jsr $4a62		jsr	FloatCompare
.35c0	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.35c3	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.35c6	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -3028
>35c9	d4 0b 00 00				.dword	$00000bd4
>35cd	00 80					.byte	$00,$80
.35cf	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 2827
>35d2	0b 0b 00 00				.dword	$00000b0b
>35d6	00 00					.byte	$00,$00
.35d8	20 62 4a	jsr $4a62		jsr	FloatCompare
.35db	20 5a 4a	jsr $4a5a		jsr	CompareGreaterEqual
.35de	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>35e1	00 00 00 00				.dword	$00000000
>35e5	00 00					.byte	$00,$00
.35e7	20 62 4a	jsr $4a62		jsr	FloatCompare
.35ea	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.35ed	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.35f0	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -3028
>35f3	d4 0b 00 00				.dword	$00000bd4
>35f7	00 80					.byte	$00,$80
.35f9	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 2827
>35fc	0b 0b 00 00				.dword	$00000b0b
>3600	00 00					.byte	$00,$00
.3602	20 62 4a	jsr $4a62		jsr	FloatCompare
.3605	20 42 4a	jsr $4a42		jsr	CompareLess
.3608	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>360b	01 00 00 00				.dword	$00000001
>360f	00 80					.byte	$00,$80
.3611	20 62 4a	jsr $4a62		jsr	FloatCompare
.3614	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3617	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.361a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -3028
>361d	d4 0b 00 00				.dword	$00000bd4
>3621	00 80					.byte	$00,$80
.3623	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 2827
>3626	0b 0b 00 00				.dword	$00000b0b
>362a	00 00					.byte	$00,$00
.362c	20 62 4a	jsr $4a62		jsr	FloatCompare
.362f	20 52 4a	jsr $4a52		jsr	CompareLessEqual
.3632	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>3635	01 00 00 00				.dword	$00000001
>3639	00 80					.byte	$00,$80
.363b	20 62 4a	jsr $4a62		jsr	FloatCompare
.363e	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3641	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3644	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 77.79663076
>3647	fe ef cb 4d				.dword	$4dcbeffe
>364b	e8 00					.byte	$e8,$00
.364d	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 2.05321131
>3650	35 e8 b3 41				.dword	$41b3e835
>3654	e3 00					.byte	$e3,$00
.3656	20 a1 49	jsr $49a1		jsr	FloatAdd
.3659	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 79.84984207
>365c	40 8f d9 4f				.dword	$4fd98f40
>3660	e8 00					.byte	$e8,$00
.3662	20 62 4a	jsr $4a62		jsr	FloatCompare
.3665	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3668	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.366b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 77.79663076
>366e	fe ef cb 4d				.dword	$4dcbeffe
>3672	e8 00					.byte	$e8,$00
.3674	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 2.05321131
>3677	35 e8 b3 41				.dword	$41b3e835
>367b	e3 00					.byte	$e3,$00
.367d	20 9b 49	jsr $499b		jsr	FloatSubtract
.3680	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 75.74341945
>3683	bd 50 be 4b				.dword	$4bbe50bd
>3687	e8 00					.byte	$e8,$00
.3689	20 62 4a	jsr $4a62		jsr	FloatCompare
.368c	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.368f	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3692	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 77.79663076
>3695	fe ef cb 4d				.dword	$4dcbeffe
>3699	e8 00					.byte	$e8,$00
.369b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 2.05321131
>369e	35 e8 b3 41				.dword	$41b3e835
>36a2	e3 00					.byte	$e3,$00
.36a4	20 3d 4c	jsr $4c3d		jsr	FloatMultiply
.36a7	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 159.73292188
>36aa	62 d0 dd 4f				.dword	$4fddd062
>36ae	e9 00					.byte	$e9,$00
.36b0	20 62 4a	jsr $4a62		jsr	FloatCompare
.36b3	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.36b6	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.36b9	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 77.79663076
>36bc	fe ef cb 4d				.dword	$4dcbeffe
>36c0	e8 00					.byte	$e8,$00
.36c2	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 2.05321131
>36c5	35 e8 b3 41				.dword	$41b3e835
>36c9	e3 00					.byte	$e3,$00
.36cb	20 c6 4a	jsr $4ac6		jsr	FloatDivide
.36ce	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 37.89022129
>36d1	16 cb c7 4b				.dword	$4bc7cb16
>36d5	e7 00					.byte	$e7,$00
.36d7	20 62 4a	jsr $4a62		jsr	FloatCompare
.36da	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.36dd	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.36e0	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -77.82603061
>36e3	be 76 d3 4d				.dword	$4dd376be
>36e7	e8 80					.byte	$e8,$80
.36e9	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -77.82603061
>36ec	be 76 d3 4d				.dword	$4dd376be
>36f0	e8 80					.byte	$e8,$80
.36f2	20 62 4a	jsr $4a62		jsr	FloatCompare
.36f5	20 4a 4a	jsr $4a4a		jsr	CompareGreater
.36f8	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>36fb	00 00 00 00				.dword	$00000000
>36ff	00 00					.byte	$00,$00
.3701	20 62 4a	jsr $4a62		jsr	FloatCompare
.3704	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3707	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.370a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -77.82603061
>370d	be 76 d3 4d				.dword	$4dd376be
>3711	e8 80					.byte	$e8,$80
.3713	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -77.82603061
>3716	be 76 d3 4d				.dword	$4dd376be
>371a	e8 80					.byte	$e8,$80
.371c	20 62 4a	jsr $4a62		jsr	FloatCompare
.371f	20 5a 4a	jsr $4a5a		jsr	CompareGreaterEqual
.3722	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>3725	01 00 00 00				.dword	$00000001
>3729	00 80					.byte	$00,$80
.372b	20 62 4a	jsr $4a62		jsr	FloatCompare
.372e	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3731	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3734	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -77.82603061
>3737	be 76 d3 4d				.dword	$4dd376be
>373b	e8 80					.byte	$e8,$80
.373d	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -77.82603061
>3740	be 76 d3 4d				.dword	$4dd376be
>3744	e8 80					.byte	$e8,$80
.3746	20 62 4a	jsr $4a62		jsr	FloatCompare
.3749	20 42 4a	jsr $4a42		jsr	CompareLess
.374c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>374f	00 00 00 00				.dword	$00000000
>3753	00 00					.byte	$00,$00
.3755	20 62 4a	jsr $4a62		jsr	FloatCompare
.3758	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.375b	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.375e	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -77.82603061
>3761	be 76 d3 4d				.dword	$4dd376be
>3765	e8 80					.byte	$e8,$80
.3767	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -77.82603061
>376a	be 76 d3 4d				.dword	$4dd376be
>376e	e8 80					.byte	$e8,$80
.3770	20 62 4a	jsr $4a62		jsr	FloatCompare
.3773	20 52 4a	jsr $4a52		jsr	CompareLessEqual
.3776	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>3779	01 00 00 00				.dword	$00000001
>377d	00 80					.byte	$00,$80
.377f	20 62 4a	jsr $4a62		jsr	FloatCompare
.3782	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3785	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3788	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -77.82603061
>378b	be 76 d3 4d				.dword	$4dd376be
>378f	e8 80					.byte	$e8,$80
.3791	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -77.82603061
>3794	be 76 d3 4d				.dword	$4dd376be
>3798	e8 80					.byte	$e8,$80
.379a	20 62 4a	jsr $4a62		jsr	FloatCompare
.379d	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.37a0	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>37a3	01 00 00 00				.dword	$00000001
>37a7	00 80					.byte	$00,$80
.37a9	20 62 4a	jsr $4a62		jsr	FloatCompare
.37ac	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.37af	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.37b2	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -77.82603061
>37b5	be 76 d3 4d				.dword	$4dd376be
>37b9	e8 80					.byte	$e8,$80
.37bb	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -77.82603061
>37be	be 76 d3 4d				.dword	$4dd376be
>37c2	e8 80					.byte	$e8,$80
.37c4	20 62 4a	jsr $4a62		jsr	FloatCompare
.37c7	20 3c 4a	jsr $4a3c		jsr	CompareNotEqual
.37ca	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>37cd	00 00 00 00				.dword	$00000000
>37d1	00 00					.byte	$00,$00
.37d3	20 62 4a	jsr $4a62		jsr	FloatCompare
.37d6	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.37d9	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.37dc	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -33328
>37df	30 82 00 00				.dword	$00008230
>37e3	00 80					.byte	$00,$80
.37e5	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 26305
>37e8	c1 66 00 00				.dword	$000066c1
>37ec	00 00					.byte	$00,$00
.37ee	20 a1 49	jsr $49a1		jsr	FloatAdd
.37f1	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -7023
>37f4	6f 1b 00 00				.dword	$00001b6f
>37f8	00 80					.byte	$00,$80
.37fa	20 62 4a	jsr $4a62		jsr	FloatCompare
.37fd	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3800	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3803	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -33328
>3806	30 82 00 00				.dword	$00008230
>380a	00 80					.byte	$00,$80
.380c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 26305
>380f	c1 66 00 00				.dword	$000066c1
>3813	00 00					.byte	$00,$00
.3815	20 9b 49	jsr $499b		jsr	FloatSubtract
.3818	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -59633
>381b	f1 e8 00 00				.dword	$0000e8f1
>381f	00 80					.byte	$00,$80
.3821	20 62 4a	jsr $4a62		jsr	FloatCompare
.3824	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3827	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.382a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -33328
>382d	30 82 00 00				.dword	$00008230
>3831	00 80					.byte	$00,$80
.3833	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 26305
>3836	c1 66 00 00				.dword	$000066c1
>383a	00 00					.byte	$00,$00
.383c	20 3d 4c	jsr $4c3d		jsr	FloatMultiply
.383f	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -876693040
>3842	30 46 41 34				.dword	$34414630
>3846	00 80					.byte	$00,$80
.3848	20 62 4a	jsr $4a62		jsr	FloatCompare
.384b	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.384e	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3851	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -33328
>3854	30 82 00 00				.dword	$00008230
>3858	00 80					.byte	$00,$80
.385a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 26305
>385d	c1 66 00 00				.dword	$000066c1
>3861	00 00					.byte	$00,$00
.3863	20 c6 4a	jsr $4ac6		jsr	FloatDivide
.3866	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1.26698346
>3869	cb 41 16 51				.dword	$511641cb
>386d	e2 80					.byte	$e2,$80
.386f	20 62 4a	jsr $4a62		jsr	FloatCompare
.3872	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3875	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3878	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 26305
>387b	c1 66 00 00				.dword	$000066c1
>387f	00 00					.byte	$00,$00
.3881	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 26305
>3884	c1 66 00 00				.dword	$000066c1
>3888	00 00					.byte	$00,$00
.388a	20 62 4a	jsr $4a62		jsr	FloatCompare
.388d	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3890	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>3893	01 00 00 00				.dword	$00000001
>3897	00 80					.byte	$00,$80
.3899	20 62 4a	jsr $4a62		jsr	FloatCompare
.389c	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.389f	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.38a2	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 26305
>38a5	c1 66 00 00				.dword	$000066c1
>38a9	00 00					.byte	$00,$00
.38ab	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 26305
>38ae	c1 66 00 00				.dword	$000066c1
>38b2	00 00					.byte	$00,$00
.38b4	20 62 4a	jsr $4a62		jsr	FloatCompare
.38b7	20 3c 4a	jsr $4a3c		jsr	CompareNotEqual
.38ba	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>38bd	00 00 00 00				.dword	$00000000
>38c1	00 00					.byte	$00,$00
.38c3	20 62 4a	jsr $4a62		jsr	FloatCompare
.38c6	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.38c9	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.38cc	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 26305
>38cf	c1 66 00 00				.dword	$000066c1
>38d3	00 00					.byte	$00,$00
.38d5	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 26305
>38d8	c1 66 00 00				.dword	$000066c1
>38dc	00 00					.byte	$00,$00
.38de	20 62 4a	jsr $4a62		jsr	FloatCompare
.38e1	20 4a 4a	jsr $4a4a		jsr	CompareGreater
.38e4	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>38e7	00 00 00 00				.dword	$00000000
>38eb	00 00					.byte	$00,$00
.38ed	20 62 4a	jsr $4a62		jsr	FloatCompare
.38f0	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.38f3	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.38f6	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 26305
>38f9	c1 66 00 00				.dword	$000066c1
>38fd	00 00					.byte	$00,$00
.38ff	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 26305
>3902	c1 66 00 00				.dword	$000066c1
>3906	00 00					.byte	$00,$00
.3908	20 62 4a	jsr $4a62		jsr	FloatCompare
.390b	20 5a 4a	jsr $4a5a		jsr	CompareGreaterEqual
.390e	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>3911	01 00 00 00				.dword	$00000001
>3915	00 80					.byte	$00,$80
.3917	20 62 4a	jsr $4a62		jsr	FloatCompare
.391a	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.391d	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3920	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 26305
>3923	c1 66 00 00				.dword	$000066c1
>3927	00 00					.byte	$00,$00
.3929	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 26305
>392c	c1 66 00 00				.dword	$000066c1
>3930	00 00					.byte	$00,$00
.3932	20 62 4a	jsr $4a62		jsr	FloatCompare
.3935	20 42 4a	jsr $4a42		jsr	CompareLess
.3938	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>393b	00 00 00 00				.dword	$00000000
>393f	00 00					.byte	$00,$00
.3941	20 62 4a	jsr $4a62		jsr	FloatCompare
.3944	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3947	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.394a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 26305
>394d	c1 66 00 00				.dword	$000066c1
>3951	00 00					.byte	$00,$00
.3953	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 26305
>3956	c1 66 00 00				.dword	$000066c1
>395a	00 00					.byte	$00,$00
.395c	20 62 4a	jsr $4a62		jsr	FloatCompare
.395f	20 52 4a	jsr $4a52		jsr	CompareLessEqual
.3962	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>3965	01 00 00 00				.dword	$00000001
>3969	00 80					.byte	$00,$80
.396b	20 62 4a	jsr $4a62		jsr	FloatCompare
.396e	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3971	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3974	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -15.99117194
>3977	8e eb ed 7f				.dword	$7fedeb8e
>397b	e5 80					.byte	$e5,$80
.397d	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -75.49987851
>3980	0a f8 7f 4b				.dword	$4b7ff80a
>3984	e8 80					.byte	$e8,$80
.3986	20 a1 49	jsr $49a1		jsr	FloatAdd
.3989	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -91.49105046
>398c	7c b5 7d 5b				.dword	$5b7db57c
>3990	e8 80					.byte	$e8,$80
.3992	20 62 4a	jsr $4a62		jsr	FloatCompare
.3995	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3998	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.399b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -15.99117194
>399e	8e eb ed 7f				.dword	$7fedeb8e
>39a2	e5 80					.byte	$e5,$80
.39a4	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -75.49987851
>39a7	0a f8 7f 4b				.dword	$4b7ff80a
>39ab	e8 80					.byte	$e8,$80
.39ad	20 9b 49	jsr $499b		jsr	FloatSubtract
.39b0	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 59.50870657
>39b3	30 75 04 77				.dword	$77047530
>39b7	e7 00					.byte	$e7,$00
.39b9	20 62 4a	jsr $4a62		jsr	FloatCompare
.39bc	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.39bf	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.39c2	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -15.99117194
>39c5	8e eb ed 7f				.dword	$7fedeb8e
>39c9	e5 80					.byte	$e5,$80
.39cb	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -75.49987851
>39ce	0a f8 7f 4b				.dword	$4b7ff80a
>39d2	e8 80					.byte	$e8,$80
.39d4	20 3d 4c	jsr $4c3d		jsr	FloatMultiply
.39d7	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 1207.3315391
>39da	fc 4d 75 4b				.dword	$4b754dfc
>39de	ec 00					.byte	$ec,$00
.39e0	20 62 4a	jsr $4a62		jsr	FloatCompare
.39e3	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.39e6	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.39e9	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -15.99117194
>39ec	8e eb ed 7f				.dword	$7fedeb8e
>39f0	e5 80					.byte	$e5,$80
.39f2	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -75.49987851
>39f5	0a f8 7f 4b				.dword	$4b7ff80a
>39f9	e8 80					.byte	$e8,$80
.39fb	20 c6 4a	jsr $4ac6		jsr	FloatDivide
.39fe	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0.21180394
>3a01	e7 90 71 6c				.dword	$6c7190e7
>3a05	df 00					.byte	$df,$00
.3a07	20 62 4a	jsr $4a62		jsr	FloatCompare
.3a0a	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3a0d	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3a10	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 54.99238681
>3a13	20 1a fc 6d				.dword	$6dfc1a20
>3a17	e7 00					.byte	$e7,$00
.3a19	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 54.99238681
>3a1c	20 1a fc 6d				.dword	$6dfc1a20
>3a20	e7 00					.byte	$e7,$00
.3a22	20 62 4a	jsr $4a62		jsr	FloatCompare
.3a25	20 4a 4a	jsr $4a4a		jsr	CompareGreater
.3a28	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>3a2b	00 00 00 00				.dword	$00000000
>3a2f	00 00					.byte	$00,$00
.3a31	20 62 4a	jsr $4a62		jsr	FloatCompare
.3a34	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3a37	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3a3a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 54.99238681
>3a3d	20 1a fc 6d				.dword	$6dfc1a20
>3a41	e7 00					.byte	$e7,$00
.3a43	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 54.99238681
>3a46	20 1a fc 6d				.dword	$6dfc1a20
>3a4a	e7 00					.byte	$e7,$00
.3a4c	20 62 4a	jsr $4a62		jsr	FloatCompare
.3a4f	20 5a 4a	jsr $4a5a		jsr	CompareGreaterEqual
.3a52	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>3a55	01 00 00 00				.dword	$00000001
>3a59	00 80					.byte	$00,$80
.3a5b	20 62 4a	jsr $4a62		jsr	FloatCompare
.3a5e	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3a61	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3a64	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 54.99238681
>3a67	20 1a fc 6d				.dword	$6dfc1a20
>3a6b	e7 00					.byte	$e7,$00
.3a6d	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 54.99238681
>3a70	20 1a fc 6d				.dword	$6dfc1a20
>3a74	e7 00					.byte	$e7,$00
.3a76	20 62 4a	jsr $4a62		jsr	FloatCompare
.3a79	20 42 4a	jsr $4a42		jsr	CompareLess
.3a7c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>3a7f	00 00 00 00				.dword	$00000000
>3a83	00 00					.byte	$00,$00
.3a85	20 62 4a	jsr $4a62		jsr	FloatCompare
.3a88	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3a8b	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3a8e	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 54.99238681
>3a91	20 1a fc 6d				.dword	$6dfc1a20
>3a95	e7 00					.byte	$e7,$00
.3a97	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 54.99238681
>3a9a	20 1a fc 6d				.dword	$6dfc1a20
>3a9e	e7 00					.byte	$e7,$00
.3aa0	20 62 4a	jsr $4a62		jsr	FloatCompare
.3aa3	20 52 4a	jsr $4a52		jsr	CompareLessEqual
.3aa6	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>3aa9	01 00 00 00				.dword	$00000001
>3aad	00 80					.byte	$00,$80
.3aaf	20 62 4a	jsr $4a62		jsr	FloatCompare
.3ab2	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3ab5	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3ab8	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 54.99238681
>3abb	20 1a fc 6d				.dword	$6dfc1a20
>3abf	e7 00					.byte	$e7,$00
.3ac1	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 54.99238681
>3ac4	20 1a fc 6d				.dword	$6dfc1a20
>3ac8	e7 00					.byte	$e7,$00
.3aca	20 62 4a	jsr $4a62		jsr	FloatCompare
.3acd	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3ad0	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>3ad3	01 00 00 00				.dword	$00000001
>3ad7	00 80					.byte	$00,$80
.3ad9	20 62 4a	jsr $4a62		jsr	FloatCompare
.3adc	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3adf	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3ae2	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 54.99238681
>3ae5	20 1a fc 6d				.dword	$6dfc1a20
>3ae9	e7 00					.byte	$e7,$00
.3aeb	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 54.99238681
>3aee	20 1a fc 6d				.dword	$6dfc1a20
>3af2	e7 00					.byte	$e7,$00
.3af4	20 62 4a	jsr $4a62		jsr	FloatCompare
.3af7	20 3c 4a	jsr $4a3c		jsr	CompareNotEqual
.3afa	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>3afd	00 00 00 00				.dword	$00000000
>3b01	00 00					.byte	$00,$00
.3b03	20 62 4a	jsr $4a62		jsr	FloatCompare
.3b06	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3b09	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3b0c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -3699
>3b0f	73 0e 00 00				.dword	$00000e73
>3b13	00 80					.byte	$00,$80
.3b15	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 7069
>3b18	9d 1b 00 00				.dword	$00001b9d
>3b1c	00 00					.byte	$00,$00
.3b1e	20 a1 49	jsr $49a1		jsr	FloatAdd
.3b21	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 3370
>3b24	2a 0d 00 00				.dword	$00000d2a
>3b28	00 00					.byte	$00,$00
.3b2a	20 62 4a	jsr $4a62		jsr	FloatCompare
.3b2d	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3b30	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3b33	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -3699
>3b36	73 0e 00 00				.dword	$00000e73
>3b3a	00 80					.byte	$00,$80
.3b3c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 7069
>3b3f	9d 1b 00 00				.dword	$00001b9d
>3b43	00 00					.byte	$00,$00
.3b45	20 9b 49	jsr $499b		jsr	FloatSubtract
.3b48	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -10768
>3b4b	10 2a 00 00				.dword	$00002a10
>3b4f	00 80					.byte	$00,$80
.3b51	20 62 4a	jsr $4a62		jsr	FloatCompare
.3b54	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3b57	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3b5a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -3699
>3b5d	73 0e 00 00				.dword	$00000e73
>3b61	00 80					.byte	$00,$80
.3b63	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 7069
>3b66	9d 1b 00 00				.dword	$00001b9d
>3b6a	00 00					.byte	$00,$00
.3b6c	20 3d 4c	jsr $4c3d		jsr	FloatMultiply
.3b6f	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -26148231
>3b72	87 fd 8e 01				.dword	$018efd87
>3b76	00 80					.byte	$00,$80
.3b78	20 62 4a	jsr $4a62		jsr	FloatCompare
.3b7b	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3b7e	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3b81	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -3699
>3b84	73 0e 00 00				.dword	$00000e73
>3b88	00 80					.byte	$00,$80
.3b8a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 7069
>3b8d	9d 1b 00 00				.dword	$00001b9d
>3b91	00 00					.byte	$00,$00
.3b93	20 c6 4a	jsr $4ac6		jsr	FloatDivide
.3b96	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -0.52327062
>3b99	1c 88 fa 42				.dword	$42fa881c
>3b9d	e1 80					.byte	$e1,$80
.3b9f	20 62 4a	jsr $4a62		jsr	FloatCompare
.3ba2	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3ba5	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3ba8	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 7069
>3bab	9d 1b 00 00				.dword	$00001b9d
>3baf	00 00					.byte	$00,$00
.3bb1	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 7069
>3bb4	9d 1b 00 00				.dword	$00001b9d
>3bb8	00 00					.byte	$00,$00
.3bba	20 62 4a	jsr $4a62		jsr	FloatCompare
.3bbd	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3bc0	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>3bc3	01 00 00 00				.dword	$00000001
>3bc7	00 80					.byte	$00,$80
.3bc9	20 62 4a	jsr $4a62		jsr	FloatCompare
.3bcc	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3bcf	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3bd2	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 7069
>3bd5	9d 1b 00 00				.dword	$00001b9d
>3bd9	00 00					.byte	$00,$00
.3bdb	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 7069
>3bde	9d 1b 00 00				.dword	$00001b9d
>3be2	00 00					.byte	$00,$00
.3be4	20 62 4a	jsr $4a62		jsr	FloatCompare
.3be7	20 3c 4a	jsr $4a3c		jsr	CompareNotEqual
.3bea	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>3bed	00 00 00 00				.dword	$00000000
>3bf1	00 00					.byte	$00,$00
.3bf3	20 62 4a	jsr $4a62		jsr	FloatCompare
.3bf6	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3bf9	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3bfc	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 7069
>3bff	9d 1b 00 00				.dword	$00001b9d
>3c03	00 00					.byte	$00,$00
.3c05	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 7069
>3c08	9d 1b 00 00				.dword	$00001b9d
>3c0c	00 00					.byte	$00,$00
.3c0e	20 62 4a	jsr $4a62		jsr	FloatCompare
.3c11	20 4a 4a	jsr $4a4a		jsr	CompareGreater
.3c14	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>3c17	00 00 00 00				.dword	$00000000
>3c1b	00 00					.byte	$00,$00
.3c1d	20 62 4a	jsr $4a62		jsr	FloatCompare
.3c20	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3c23	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3c26	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 7069
>3c29	9d 1b 00 00				.dword	$00001b9d
>3c2d	00 00					.byte	$00,$00
.3c2f	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 7069
>3c32	9d 1b 00 00				.dword	$00001b9d
>3c36	00 00					.byte	$00,$00
.3c38	20 62 4a	jsr $4a62		jsr	FloatCompare
.3c3b	20 5a 4a	jsr $4a5a		jsr	CompareGreaterEqual
.3c3e	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>3c41	01 00 00 00				.dword	$00000001
>3c45	00 80					.byte	$00,$80
.3c47	20 62 4a	jsr $4a62		jsr	FloatCompare
.3c4a	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3c4d	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3c50	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 7069
>3c53	9d 1b 00 00				.dword	$00001b9d
>3c57	00 00					.byte	$00,$00
.3c59	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 7069
>3c5c	9d 1b 00 00				.dword	$00001b9d
>3c60	00 00					.byte	$00,$00
.3c62	20 62 4a	jsr $4a62		jsr	FloatCompare
.3c65	20 42 4a	jsr $4a42		jsr	CompareLess
.3c68	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>3c6b	00 00 00 00				.dword	$00000000
>3c6f	00 00					.byte	$00,$00
.3c71	20 62 4a	jsr $4a62		jsr	FloatCompare
.3c74	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3c77	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3c7a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 7069
>3c7d	9d 1b 00 00				.dword	$00001b9d
>3c81	00 00					.byte	$00,$00
.3c83	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 7069
>3c86	9d 1b 00 00				.dword	$00001b9d
>3c8a	00 00					.byte	$00,$00
.3c8c	20 62 4a	jsr $4a62		jsr	FloatCompare
.3c8f	20 52 4a	jsr $4a52		jsr	CompareLessEqual
.3c92	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>3c95	01 00 00 00				.dword	$00000001
>3c99	00 80					.byte	$00,$80
.3c9b	20 62 4a	jsr $4a62		jsr	FloatCompare
.3c9e	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3ca1	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3ca4	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -34.34340326
>3ca7	8d d2 af 44				.dword	$44afd28d
>3cab	e7 80					.byte	$e7,$80
.3cad	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 4.25026322
>3cb0	02 14 01 44				.dword	$44011402
>3cb4	e4 00					.byte	$e4,$00
.3cb6	20 a1 49	jsr $49a1		jsr	FloatAdd
.3cb9	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -30.09314003
>3cbc	1a 60 5f 78				.dword	$785f601a
>3cc0	e6 80					.byte	$e6,$80
.3cc2	20 62 4a	jsr $4a62		jsr	FloatCompare
.3cc5	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3cc8	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3ccb	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -34.34340326
>3cce	8d d2 af 44				.dword	$44afd28d
>3cd2	e7 80					.byte	$e7,$80
.3cd4	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 4.25026322
>3cd7	02 14 01 44				.dword	$44011402
>3cdb	e4 00					.byte	$e4,$00
.3cdd	20 9b 49	jsr $499b		jsr	FloatSubtract
.3ce0	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -38.59366648
>3ce3	0e f5 2f 4d				.dword	$4d2ff50e
>3ce7	e7 80					.byte	$e7,$80
.3ce9	20 62 4a	jsr $4a62		jsr	FloatCompare
.3cec	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3cef	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3cf2	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -34.34340326
>3cf5	8d d2 af 44				.dword	$44afd28d
>3cf9	e7 80					.byte	$e7,$80
.3cfb	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 4.25026322
>3cfe	02 14 01 44				.dword	$44011402
>3d02	e4 00					.byte	$e4,$00
.3d04	20 3d 4c	jsr $4c3d		jsr	FloatMultiply
.3d07	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -145.96850377
>3d0a	ee f7 fb 48				.dword	$48fbf7ee
>3d0e	e9 80					.byte	$e9,$80
.3d10	20 62 4a	jsr $4a62		jsr	FloatCompare
.3d13	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3d16	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3d19	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -34.34340326
>3d1c	8d d2 af 44				.dword	$44afd28d
>3d20	e7 80					.byte	$e7,$80
.3d22	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 4.25026322
>3d25	02 14 01 44				.dword	$44011402
>3d29	e4 00					.byte	$e4,$00
.3d2b	20 c6 4a	jsr $4ac6		jsr	FloatDivide
.3d2e	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -8.08030032
>3d31	7f 74 a4 40				.dword	$40a4747f
>3d35	e5 80					.byte	$e5,$80
.3d37	20 62 4a	jsr $4a62		jsr	FloatCompare
.3d3a	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3d3d	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3d40	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 6.17137766
>3d43	80 f6 bd 62				.dword	$62bdf680
>3d47	e4 00					.byte	$e4,$00
.3d49	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 6.17137766
>3d4c	80 f6 bd 62				.dword	$62bdf680
>3d50	e4 00					.byte	$e4,$00
.3d52	20 62 4a	jsr $4a62		jsr	FloatCompare
.3d55	20 4a 4a	jsr $4a4a		jsr	CompareGreater
.3d58	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>3d5b	00 00 00 00				.dword	$00000000
>3d5f	00 00					.byte	$00,$00
.3d61	20 62 4a	jsr $4a62		jsr	FloatCompare
.3d64	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3d67	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3d6a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 6.17137766
>3d6d	80 f6 bd 62				.dword	$62bdf680
>3d71	e4 00					.byte	$e4,$00
.3d73	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 6.17137766
>3d76	80 f6 bd 62				.dword	$62bdf680
>3d7a	e4 00					.byte	$e4,$00
.3d7c	20 62 4a	jsr $4a62		jsr	FloatCompare
.3d7f	20 5a 4a	jsr $4a5a		jsr	CompareGreaterEqual
.3d82	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>3d85	01 00 00 00				.dword	$00000001
>3d89	00 80					.byte	$00,$80
.3d8b	20 62 4a	jsr $4a62		jsr	FloatCompare
.3d8e	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3d91	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3d94	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 6.17137766
>3d97	80 f6 bd 62				.dword	$62bdf680
>3d9b	e4 00					.byte	$e4,$00
.3d9d	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 6.17137766
>3da0	80 f6 bd 62				.dword	$62bdf680
>3da4	e4 00					.byte	$e4,$00
.3da6	20 62 4a	jsr $4a62		jsr	FloatCompare
.3da9	20 42 4a	jsr $4a42		jsr	CompareLess
.3dac	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>3daf	00 00 00 00				.dword	$00000000
>3db3	00 00					.byte	$00,$00
.3db5	20 62 4a	jsr $4a62		jsr	FloatCompare
.3db8	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3dbb	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3dbe	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 6.17137766
>3dc1	80 f6 bd 62				.dword	$62bdf680
>3dc5	e4 00					.byte	$e4,$00
.3dc7	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 6.17137766
>3dca	80 f6 bd 62				.dword	$62bdf680
>3dce	e4 00					.byte	$e4,$00
.3dd0	20 62 4a	jsr $4a62		jsr	FloatCompare
.3dd3	20 52 4a	jsr $4a52		jsr	CompareLessEqual
.3dd6	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>3dd9	01 00 00 00				.dword	$00000001
>3ddd	00 80					.byte	$00,$80
.3ddf	20 62 4a	jsr $4a62		jsr	FloatCompare
.3de2	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3de5	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3de8	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 6.17137766
>3deb	80 f6 bd 62				.dword	$62bdf680
>3def	e4 00					.byte	$e4,$00
.3df1	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 6.17137766
>3df4	80 f6 bd 62				.dword	$62bdf680
>3df8	e4 00					.byte	$e4,$00
.3dfa	20 62 4a	jsr $4a62		jsr	FloatCompare
.3dfd	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3e00	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>3e03	01 00 00 00				.dword	$00000001
>3e07	00 80					.byte	$00,$80
.3e09	20 62 4a	jsr $4a62		jsr	FloatCompare
.3e0c	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3e0f	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3e12	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 6.17137766
>3e15	80 f6 bd 62				.dword	$62bdf680
>3e19	e4 00					.byte	$e4,$00
.3e1b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 6.17137766
>3e1e	80 f6 bd 62				.dword	$62bdf680
>3e22	e4 00					.byte	$e4,$00
.3e24	20 62 4a	jsr $4a62		jsr	FloatCompare
.3e27	20 3c 4a	jsr $4a3c		jsr	CompareNotEqual
.3e2a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>3e2d	00 00 00 00				.dword	$00000000
>3e31	00 00					.byte	$00,$00
.3e33	20 62 4a	jsr $4a62		jsr	FloatCompare
.3e36	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3e39	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3e3c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 18734
>3e3f	2e 49 00 00				.dword	$0000492e
>3e43	00 00					.byte	$00,$00
.3e45	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -48272
>3e48	90 bc 00 00				.dword	$0000bc90
>3e4c	00 80					.byte	$00,$80
.3e4e	20 a1 49	jsr $49a1		jsr	FloatAdd
.3e51	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -29538
>3e54	62 73 00 00				.dword	$00007362
>3e58	00 80					.byte	$00,$80
.3e5a	20 62 4a	jsr $4a62		jsr	FloatCompare
.3e5d	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3e60	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3e63	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 18734
>3e66	2e 49 00 00				.dword	$0000492e
>3e6a	00 00					.byte	$00,$00
.3e6c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -48272
>3e6f	90 bc 00 00				.dword	$0000bc90
>3e73	00 80					.byte	$00,$80
.3e75	20 9b 49	jsr $499b		jsr	FloatSubtract
.3e78	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 67006
>3e7b	be 05 01 00				.dword	$000105be
>3e7f	00 00					.byte	$00,$00
.3e81	20 62 4a	jsr $4a62		jsr	FloatCompare
.3e84	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3e87	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3e8a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 18734
>3e8d	2e 49 00 00				.dword	$0000492e
>3e91	00 00					.byte	$00,$00
.3e93	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -48272
>3e96	90 bc 00 00				.dword	$0000bc90
>3e9a	00 80					.byte	$00,$80
.3e9c	20 3d 4c	jsr $4c3d		jsr	FloatMultiply
.3e9f	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -904327648
>3ea2	e0 f1 e6 35				.dword	$35e6f1e0
>3ea6	00 80					.byte	$00,$80
.3ea8	20 62 4a	jsr $4a62		jsr	FloatCompare
.3eab	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3eae	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3eb1	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 18734
>3eb4	2e 49 00 00				.dword	$0000492e
>3eb8	00 00					.byte	$00,$00
.3eba	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -48272
>3ebd	90 bc 00 00				.dword	$0000bc90
>3ec1	00 80					.byte	$00,$80
.3ec3	20 c6 4a	jsr $4ac6		jsr	FloatDivide
.3ec6	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -0.38809248
>3ec9	5d 07 5a 63				.dword	$635a075d
>3ecd	e0 80					.byte	$e0,$80
.3ecf	20 62 4a	jsr $4a62		jsr	FloatCompare
.3ed2	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3ed5	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3ed8	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -48272
>3edb	90 bc 00 00				.dword	$0000bc90
>3edf	00 80					.byte	$00,$80
.3ee1	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -48272
>3ee4	90 bc 00 00				.dword	$0000bc90
>3ee8	00 80					.byte	$00,$80
.3eea	20 62 4a	jsr $4a62		jsr	FloatCompare
.3eed	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3ef0	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>3ef3	01 00 00 00				.dword	$00000001
>3ef7	00 80					.byte	$00,$80
.3ef9	20 62 4a	jsr $4a62		jsr	FloatCompare
.3efc	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3eff	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3f02	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -48272
>3f05	90 bc 00 00				.dword	$0000bc90
>3f09	00 80					.byte	$00,$80
.3f0b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -48272
>3f0e	90 bc 00 00				.dword	$0000bc90
>3f12	00 80					.byte	$00,$80
.3f14	20 62 4a	jsr $4a62		jsr	FloatCompare
.3f17	20 3c 4a	jsr $4a3c		jsr	CompareNotEqual
.3f1a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>3f1d	00 00 00 00				.dword	$00000000
>3f21	00 00					.byte	$00,$00
.3f23	20 62 4a	jsr $4a62		jsr	FloatCompare
.3f26	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3f29	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3f2c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -48272
>3f2f	90 bc 00 00				.dword	$0000bc90
>3f33	00 80					.byte	$00,$80
.3f35	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -48272
>3f38	90 bc 00 00				.dword	$0000bc90
>3f3c	00 80					.byte	$00,$80
.3f3e	20 62 4a	jsr $4a62		jsr	FloatCompare
.3f41	20 4a 4a	jsr $4a4a		jsr	CompareGreater
.3f44	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>3f47	00 00 00 00				.dword	$00000000
>3f4b	00 00					.byte	$00,$00
.3f4d	20 62 4a	jsr $4a62		jsr	FloatCompare
.3f50	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3f53	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3f56	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -48272
>3f59	90 bc 00 00				.dword	$0000bc90
>3f5d	00 80					.byte	$00,$80
.3f5f	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -48272
>3f62	90 bc 00 00				.dword	$0000bc90
>3f66	00 80					.byte	$00,$80
.3f68	20 62 4a	jsr $4a62		jsr	FloatCompare
.3f6b	20 5a 4a	jsr $4a5a		jsr	CompareGreaterEqual
.3f6e	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>3f71	01 00 00 00				.dword	$00000001
>3f75	00 80					.byte	$00,$80
.3f77	20 62 4a	jsr $4a62		jsr	FloatCompare
.3f7a	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3f7d	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3f80	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -48272
>3f83	90 bc 00 00				.dword	$0000bc90
>3f87	00 80					.byte	$00,$80
.3f89	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -48272
>3f8c	90 bc 00 00				.dword	$0000bc90
>3f90	00 80					.byte	$00,$80
.3f92	20 62 4a	jsr $4a62		jsr	FloatCompare
.3f95	20 42 4a	jsr $4a42		jsr	CompareLess
.3f98	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>3f9b	00 00 00 00				.dword	$00000000
>3f9f	00 00					.byte	$00,$00
.3fa1	20 62 4a	jsr $4a62		jsr	FloatCompare
.3fa4	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3fa7	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3faa	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -48272
>3fad	90 bc 00 00				.dword	$0000bc90
>3fb1	00 80					.byte	$00,$80
.3fb3	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -48272
>3fb6	90 bc 00 00				.dword	$0000bc90
>3fba	00 80					.byte	$00,$80
.3fbc	20 62 4a	jsr $4a62		jsr	FloatCompare
.3fbf	20 52 4a	jsr $4a52		jsr	CompareLessEqual
.3fc2	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>3fc5	01 00 00 00				.dword	$00000001
>3fc9	00 80					.byte	$00,$80
.3fcb	20 62 4a	jsr $4a62		jsr	FloatCompare
.3fce	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3fd1	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3fd4	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 42.70049405
>3fd7	28 a7 66 55				.dword	$5566a728
>3fdb	e7 00					.byte	$e7,$00
.3fdd	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 9.68648255
>3fe0	90 ea 7d 4d				.dword	$4d7dea90
>3fe4	e5 00					.byte	$e5,$00
.3fe6	20 a1 49	jsr $49a1		jsr	FloatAdd
.3fe9	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 52.38697659
>3fec	cc 21 c6 68				.dword	$68c621cc
>3ff0	e7 00					.byte	$e7,$00
.3ff2	20 62 4a	jsr $4a62		jsr	FloatCompare
.3ff5	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.3ff8	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.3ffb	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 42.70049405
>3ffe	28 a7 66 55				.dword	$5566a728
>4002	e7 00					.byte	$e7,$00
.4004	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 9.68648255
>4007	90 ea 7d 4d				.dword	$4d7dea90
>400b	e5 00					.byte	$e5,$00
.400d	20 9b 49	jsr $499b		jsr	FloatSubtract
.4010	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 33.0140115
>4013	84 2c 07 42				.dword	$42072c84
>4017	e7 00					.byte	$e7,$00
.4019	20 62 4a	jsr $4a62		jsr	FloatCompare
.401c	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.401f	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.4022	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 42.70049405
>4025	28 a7 66 55				.dword	$5566a728
>4029	e7 00					.byte	$e7,$00
.402b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 9.68648255
>402e	90 ea 7d 4d				.dword	$4d7dea90
>4032	e5 00					.byte	$e5,$00
.4034	20 3d 4c	jsr $4c3d		jsr	FloatMultiply
.4037	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 413.61759031
>403a	9a 86 67 67				.dword	$6767869a
>403e	ea 00					.byte	$ea,$00
.4040	20 62 4a	jsr $4a62		jsr	FloatCompare
.4043	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.4046	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.4049	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 42.70049405
>404c	28 a7 66 55				.dword	$5566a728
>4050	e7 00					.byte	$e7,$00
.4052	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 9.68648255
>4055	90 ea 7d 4d				.dword	$4d7dea90
>4059	e5 00					.byte	$e5,$00
.405b	20 c6 4a	jsr $4ac6		jsr	FloatDivide
.405e	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 4.40825592
>4061	5c 37 88 46				.dword	$4688375c
>4065	e4 00					.byte	$e4,$00
.4067	20 62 4a	jsr $4a62		jsr	FloatCompare
.406a	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.406d	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.4070	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -63.0149834
>4073	e7 ab 07 7e				.dword	$7e07abe7
>4077	e7 80					.byte	$e7,$80
.4079	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -63.0149834
>407c	e7 ab 07 7e				.dword	$7e07abe7
>4080	e7 80					.byte	$e7,$80
.4082	20 62 4a	jsr $4a62		jsr	FloatCompare
.4085	20 4a 4a	jsr $4a4a		jsr	CompareGreater
.4088	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>408b	00 00 00 00				.dword	$00000000
>408f	00 00					.byte	$00,$00
.4091	20 62 4a	jsr $4a62		jsr	FloatCompare
.4094	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.4097	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.409a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -63.0149834
>409d	e7 ab 07 7e				.dword	$7e07abe7
>40a1	e7 80					.byte	$e7,$80
.40a3	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -63.0149834
>40a6	e7 ab 07 7e				.dword	$7e07abe7
>40aa	e7 80					.byte	$e7,$80
.40ac	20 62 4a	jsr $4a62		jsr	FloatCompare
.40af	20 5a 4a	jsr $4a5a		jsr	CompareGreaterEqual
.40b2	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>40b5	01 00 00 00				.dword	$00000001
>40b9	00 80					.byte	$00,$80
.40bb	20 62 4a	jsr $4a62		jsr	FloatCompare
.40be	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.40c1	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.40c4	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -63.0149834
>40c7	e7 ab 07 7e				.dword	$7e07abe7
>40cb	e7 80					.byte	$e7,$80
.40cd	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -63.0149834
>40d0	e7 ab 07 7e				.dword	$7e07abe7
>40d4	e7 80					.byte	$e7,$80
.40d6	20 62 4a	jsr $4a62		jsr	FloatCompare
.40d9	20 42 4a	jsr $4a42		jsr	CompareLess
.40dc	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>40df	00 00 00 00				.dword	$00000000
>40e3	00 00					.byte	$00,$00
.40e5	20 62 4a	jsr $4a62		jsr	FloatCompare
.40e8	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.40eb	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.40ee	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -63.0149834
>40f1	e7 ab 07 7e				.dword	$7e07abe7
>40f5	e7 80					.byte	$e7,$80
.40f7	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -63.0149834
>40fa	e7 ab 07 7e				.dword	$7e07abe7
>40fe	e7 80					.byte	$e7,$80
.4100	20 62 4a	jsr $4a62		jsr	FloatCompare
.4103	20 52 4a	jsr $4a52		jsr	CompareLessEqual
.4106	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>4109	01 00 00 00				.dword	$00000001
>410d	00 80					.byte	$00,$80
.410f	20 62 4a	jsr $4a62		jsr	FloatCompare
.4112	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.4115	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.4118	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -63.0149834
>411b	e7 ab 07 7e				.dword	$7e07abe7
>411f	e7 80					.byte	$e7,$80
.4121	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -63.0149834
>4124	e7 ab 07 7e				.dword	$7e07abe7
>4128	e7 80					.byte	$e7,$80
.412a	20 62 4a	jsr $4a62		jsr	FloatCompare
.412d	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.4130	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>4133	01 00 00 00				.dword	$00000001
>4137	00 80					.byte	$00,$80
.4139	20 62 4a	jsr $4a62		jsr	FloatCompare
.413c	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.413f	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.4142	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -63.0149834
>4145	e7 ab 07 7e				.dword	$7e07abe7
>4149	e7 80					.byte	$e7,$80
.414b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -63.0149834
>414e	e7 ab 07 7e				.dword	$7e07abe7
>4152	e7 80					.byte	$e7,$80
.4154	20 62 4a	jsr $4a62		jsr	FloatCompare
.4157	20 3c 4a	jsr $4a3c		jsr	CompareNotEqual
.415a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>415d	00 00 00 00				.dword	$00000000
>4161	00 00					.byte	$00,$00
.4163	20 62 4a	jsr $4a62		jsr	FloatCompare
.4166	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.4169	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.416c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 22428
>416f	9c 57 00 00				.dword	$0000579c
>4173	00 00					.byte	$00,$00
.4175	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -23715
>4178	a3 5c 00 00				.dword	$00005ca3
>417c	00 80					.byte	$00,$80
.417e	20 a1 49	jsr $49a1		jsr	FloatAdd
.4181	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1287
>4184	07 05 00 00				.dword	$00000507
>4188	00 80					.byte	$00,$80
.418a	20 62 4a	jsr $4a62		jsr	FloatCompare
.418d	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.4190	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.4193	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 22428
>4196	9c 57 00 00				.dword	$0000579c
>419a	00 00					.byte	$00,$00
.419c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -23715
>419f	a3 5c 00 00				.dword	$00005ca3
>41a3	00 80					.byte	$00,$80
.41a5	20 9b 49	jsr $499b		jsr	FloatSubtract
.41a8	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 46143
>41ab	3f b4 00 00				.dword	$0000b43f
>41af	00 00					.byte	$00,$00
.41b1	20 62 4a	jsr $4a62		jsr	FloatCompare
.41b4	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.41b7	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.41ba	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 22428
>41bd	9c 57 00 00				.dword	$0000579c
>41c1	00 00					.byte	$00,$00
.41c3	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -23715
>41c6	a3 5c 00 00				.dword	$00005ca3
>41ca	00 80					.byte	$00,$80
.41cc	20 3d 4c	jsr $4c3d		jsr	FloatMultiply
.41cf	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -531880020
>41d2	54 d8 b3 1f				.dword	$1fb3d854
>41d6	00 80					.byte	$00,$80
.41d8	20 62 4a	jsr $4a62		jsr	FloatCompare
.41db	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.41de	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.41e1	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 22428
>41e4	9c 57 00 00				.dword	$0000579c
>41e8	00 00					.byte	$00,$00
.41ea	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -23715
>41ed	a3 5c 00 00				.dword	$00005ca3
>41f1	00 80					.byte	$00,$80
.41f3	20 c6 4a	jsr $4ac6		jsr	FloatDivide
.41f6	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -0.94573055
>41f9	dc b2 0d 79				.dword	$790db2dc
>41fd	e1 80					.byte	$e1,$80
.41ff	20 62 4a	jsr $4a62		jsr	FloatCompare
.4202	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.4205	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.4208	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -23715
>420b	a3 5c 00 00				.dword	$00005ca3
>420f	00 80					.byte	$00,$80
.4211	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -23715
>4214	a3 5c 00 00				.dword	$00005ca3
>4218	00 80					.byte	$00,$80
.421a	20 62 4a	jsr $4a62		jsr	FloatCompare
.421d	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.4220	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>4223	01 00 00 00				.dword	$00000001
>4227	00 80					.byte	$00,$80
.4229	20 62 4a	jsr $4a62		jsr	FloatCompare
.422c	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.422f	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.4232	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -23715
>4235	a3 5c 00 00				.dword	$00005ca3
>4239	00 80					.byte	$00,$80
.423b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -23715
>423e	a3 5c 00 00				.dword	$00005ca3
>4242	00 80					.byte	$00,$80
.4244	20 62 4a	jsr $4a62		jsr	FloatCompare
.4247	20 3c 4a	jsr $4a3c		jsr	CompareNotEqual
.424a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>424d	00 00 00 00				.dword	$00000000
>4251	00 00					.byte	$00,$00
.4253	20 62 4a	jsr $4a62		jsr	FloatCompare
.4256	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.4259	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.425c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -23715
>425f	a3 5c 00 00				.dword	$00005ca3
>4263	00 80					.byte	$00,$80
.4265	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -23715
>4268	a3 5c 00 00				.dword	$00005ca3
>426c	00 80					.byte	$00,$80
.426e	20 62 4a	jsr $4a62		jsr	FloatCompare
.4271	20 4a 4a	jsr $4a4a		jsr	CompareGreater
.4274	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>4277	00 00 00 00				.dword	$00000000
>427b	00 00					.byte	$00,$00
.427d	20 62 4a	jsr $4a62		jsr	FloatCompare
.4280	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.4283	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.4286	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -23715
>4289	a3 5c 00 00				.dword	$00005ca3
>428d	00 80					.byte	$00,$80
.428f	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -23715
>4292	a3 5c 00 00				.dword	$00005ca3
>4296	00 80					.byte	$00,$80
.4298	20 62 4a	jsr $4a62		jsr	FloatCompare
.429b	20 5a 4a	jsr $4a5a		jsr	CompareGreaterEqual
.429e	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>42a1	01 00 00 00				.dword	$00000001
>42a5	00 80					.byte	$00,$80
.42a7	20 62 4a	jsr $4a62		jsr	FloatCompare
.42aa	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.42ad	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.42b0	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -23715
>42b3	a3 5c 00 00				.dword	$00005ca3
>42b7	00 80					.byte	$00,$80
.42b9	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -23715
>42bc	a3 5c 00 00				.dword	$00005ca3
>42c0	00 80					.byte	$00,$80
.42c2	20 62 4a	jsr $4a62		jsr	FloatCompare
.42c5	20 42 4a	jsr $4a42		jsr	CompareLess
.42c8	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>42cb	00 00 00 00				.dword	$00000000
>42cf	00 00					.byte	$00,$00
.42d1	20 62 4a	jsr $4a62		jsr	FloatCompare
.42d4	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.42d7	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.42da	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -23715
>42dd	a3 5c 00 00				.dword	$00005ca3
>42e1	00 80					.byte	$00,$80
.42e3	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -23715
>42e6	a3 5c 00 00				.dword	$00005ca3
>42ea	00 80					.byte	$00,$80
.42ec	20 62 4a	jsr $4a62		jsr	FloatCompare
.42ef	20 52 4a	jsr $4a52		jsr	CompareLessEqual
.42f2	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>42f5	01 00 00 00				.dword	$00000001
>42f9	00 80					.byte	$00,$80
.42fb	20 62 4a	jsr $4a62		jsr	FloatCompare
.42fe	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.4301	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.4304	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 49.01474042
>4307	0e 8c 07 62				.dword	$62078c0e
>430b	e7 00					.byte	$e7,$00
.430d	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 58.21187333
>4310	a9 7a 6c 74				.dword	$746c7aa9
>4314	e7 00					.byte	$e7,$00
.4316	20 a1 49	jsr $49a1		jsr	FloatAdd
.4319	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 107.22661375
>431c	5c 03 3a 6b				.dword	$6b3a035c
>4320	e8 00					.byte	$e8,$00
.4322	20 62 4a	jsr $4a62		jsr	FloatCompare
.4325	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.4328	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.432b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 49.01474042
>432e	0e 8c 07 62				.dword	$62078c0e
>4332	e7 00					.byte	$e7,$00
.4334	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 58.21187333
>4337	a9 7a 6c 74				.dword	$746c7aa9
>433b	e7 00					.byte	$e7,$00
.433d	20 9b 49	jsr $499b		jsr	FloatSubtract
.4340	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -9.19713291
>4343	6b ba 93 49				.dword	$4993ba6b
>4347	e5 80					.byte	$e5,$80
.4349	20 62 4a	jsr $4a62		jsr	FloatCompare
.434c	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.434f	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.4352	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 49.01474042
>4355	0e 8c 07 62				.dword	$62078c0e
>4359	e7 00					.byte	$e7,$00
.435b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 58.21187333
>435e	a9 7a 6c 74				.dword	$746c7aa9
>4362	e7 00					.byte	$e7,$00
.4364	20 3d 4c	jsr $4c3d		jsr	FloatMultiply
.4367	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 2853.23986077
>436a	3c eb 29 59				.dword	$5929eb3c
>436e	ed 00					.byte	$ed,$00
.4370	20 62 4a	jsr $4a62		jsr	FloatCompare
.4373	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.4376	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.4379	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 49.01474042
>437c	0e 8c 07 62				.dword	$62078c0e
>4380	e7 00					.byte	$e7,$00
.4382	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 58.21187333
>4385	a9 7a 6c 74				.dword	$746c7aa9
>4389	e7 00					.byte	$e7,$00
.438b	20 c6 4a	jsr $4ac6		jsr	FloatDivide
.438e	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0.84200589
>4391	58 d9 c6 6b				.dword	$6bc6d958
>4395	e1 00					.byte	$e1,$00
.4397	20 62 4a	jsr $4a62		jsr	FloatCompare
.439a	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.439d	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.43a0	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -68.90710294
>43a3	e6 37 e8 44				.dword	$44e837e6
>43a7	e8 80					.byte	$e8,$80
.43a9	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -68.90710294
>43ac	e6 37 e8 44				.dword	$44e837e6
>43b0	e8 80					.byte	$e8,$80
.43b2	20 62 4a	jsr $4a62		jsr	FloatCompare
.43b5	20 4a 4a	jsr $4a4a		jsr	CompareGreater
.43b8	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>43bb	00 00 00 00				.dword	$00000000
>43bf	00 00					.byte	$00,$00
.43c1	20 62 4a	jsr $4a62		jsr	FloatCompare
.43c4	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.43c7	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.43ca	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -68.90710294
>43cd	e6 37 e8 44				.dword	$44e837e6
>43d1	e8 80					.byte	$e8,$80
.43d3	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -68.90710294
>43d6	e6 37 e8 44				.dword	$44e837e6
>43da	e8 80					.byte	$e8,$80
.43dc	20 62 4a	jsr $4a62		jsr	FloatCompare
.43df	20 5a 4a	jsr $4a5a		jsr	CompareGreaterEqual
.43e2	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>43e5	01 00 00 00				.dword	$00000001
>43e9	00 80					.byte	$00,$80
.43eb	20 62 4a	jsr $4a62		jsr	FloatCompare
.43ee	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.43f1	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.43f4	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -68.90710294
>43f7	e6 37 e8 44				.dword	$44e837e6
>43fb	e8 80					.byte	$e8,$80
.43fd	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -68.90710294
>4400	e6 37 e8 44				.dword	$44e837e6
>4404	e8 80					.byte	$e8,$80
.4406	20 62 4a	jsr $4a62		jsr	FloatCompare
.4409	20 42 4a	jsr $4a42		jsr	CompareLess
.440c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>440f	00 00 00 00				.dword	$00000000
>4413	00 00					.byte	$00,$00
.4415	20 62 4a	jsr $4a62		jsr	FloatCompare
.4418	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.441b	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.441e	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -68.90710294
>4421	e6 37 e8 44				.dword	$44e837e6
>4425	e8 80					.byte	$e8,$80
.4427	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -68.90710294
>442a	e6 37 e8 44				.dword	$44e837e6
>442e	e8 80					.byte	$e8,$80
.4430	20 62 4a	jsr $4a62		jsr	FloatCompare
.4433	20 52 4a	jsr $4a52		jsr	CompareLessEqual
.4436	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>4439	01 00 00 00				.dword	$00000001
>443d	00 80					.byte	$00,$80
.443f	20 62 4a	jsr $4a62		jsr	FloatCompare
.4442	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.4445	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.4448	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -68.90710294
>444b	e6 37 e8 44				.dword	$44e837e6
>444f	e8 80					.byte	$e8,$80
.4451	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -68.90710294
>4454	e6 37 e8 44				.dword	$44e837e6
>4458	e8 80					.byte	$e8,$80
.445a	20 62 4a	jsr $4a62		jsr	FloatCompare
.445d	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.4460	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>4463	01 00 00 00				.dword	$00000001
>4467	00 80					.byte	$00,$80
.4469	20 62 4a	jsr $4a62		jsr	FloatCompare
.446c	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.446f	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.4472	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -68.90710294
>4475	e6 37 e8 44				.dword	$44e837e6
>4479	e8 80					.byte	$e8,$80
.447b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -68.90710294
>447e	e6 37 e8 44				.dword	$44e837e6
>4482	e8 80					.byte	$e8,$80
.4484	20 62 4a	jsr $4a62		jsr	FloatCompare
.4487	20 3c 4a	jsr $4a3c		jsr	CompareNotEqual
.448a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>448d	00 00 00 00				.dword	$00000000
>4491	00 00					.byte	$00,$00
.4493	20 62 4a	jsr $4a62		jsr	FloatCompare
.4496	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.4499	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.449c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -43772
>449f	fc aa 00 00				.dword	$0000aafc
>44a3	00 80					.byte	$00,$80
.44a5	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 9392
>44a8	b0 24 00 00				.dword	$000024b0
>44ac	00 00					.byte	$00,$00
.44ae	20 a1 49	jsr $49a1		jsr	FloatAdd
.44b1	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -34380
>44b4	4c 86 00 00				.dword	$0000864c
>44b8	00 80					.byte	$00,$80
.44ba	20 62 4a	jsr $4a62		jsr	FloatCompare
.44bd	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.44c0	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.44c3	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -43772
>44c6	fc aa 00 00				.dword	$0000aafc
>44ca	00 80					.byte	$00,$80
.44cc	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 9392
>44cf	b0 24 00 00				.dword	$000024b0
>44d3	00 00					.byte	$00,$00
.44d5	20 9b 49	jsr $499b		jsr	FloatSubtract
.44d8	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -53164
>44db	ac cf 00 00				.dword	$0000cfac
>44df	00 80					.byte	$00,$80
.44e1	20 62 4a	jsr $4a62		jsr	FloatCompare
.44e4	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.44e7	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.44ea	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -43772
>44ed	fc aa 00 00				.dword	$0000aafc
>44f1	00 80					.byte	$00,$80
.44f3	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 9392
>44f6	b0 24 00 00				.dword	$000024b0
>44fa	00 00					.byte	$00,$00
.44fc	20 3d 4c	jsr $4c3d		jsr	FloatMultiply
.44ff	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -411106624
>4502	40 fd 80 18				.dword	$1880fd40
>4506	00 80					.byte	$00,$80
.4508	20 62 4a	jsr $4a62		jsr	FloatCompare
.450b	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.450e	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.4511	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -43772
>4514	fc aa 00 00				.dword	$0000aafc
>4518	00 80					.byte	$00,$80
.451a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 9392
>451d	b0 24 00 00				.dword	$000024b0
>4521	00 00					.byte	$00,$00
.4523	20 c6 4a	jsr $4ac6		jsr	FloatDivide
.4526	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -4.66056218
>4529	a6 a9 91 4a				.dword	$4a91a9a6
>452d	e4 80					.byte	$e4,$80
.452f	20 62 4a	jsr $4a62		jsr	FloatCompare
.4532	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.4535	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.4538	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 9392
>453b	b0 24 00 00				.dword	$000024b0
>453f	00 00					.byte	$00,$00
.4541	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 9392
>4544	b0 24 00 00				.dword	$000024b0
>4548	00 00					.byte	$00,$00
.454a	20 62 4a	jsr $4a62		jsr	FloatCompare
.454d	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.4550	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>4553	01 00 00 00				.dword	$00000001
>4557	00 80					.byte	$00,$80
.4559	20 62 4a	jsr $4a62		jsr	FloatCompare
.455c	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.455f	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.4562	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 9392
>4565	b0 24 00 00				.dword	$000024b0
>4569	00 00					.byte	$00,$00
.456b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 9392
>456e	b0 24 00 00				.dword	$000024b0
>4572	00 00					.byte	$00,$00
.4574	20 62 4a	jsr $4a62		jsr	FloatCompare
.4577	20 3c 4a	jsr $4a3c		jsr	CompareNotEqual
.457a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>457d	00 00 00 00				.dword	$00000000
>4581	00 00					.byte	$00,$00
.4583	20 62 4a	jsr $4a62		jsr	FloatCompare
.4586	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.4589	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.458c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 9392
>458f	b0 24 00 00				.dword	$000024b0
>4593	00 00					.byte	$00,$00
.4595	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 9392
>4598	b0 24 00 00				.dword	$000024b0
>459c	00 00					.byte	$00,$00
.459e	20 62 4a	jsr $4a62		jsr	FloatCompare
.45a1	20 4a 4a	jsr $4a4a		jsr	CompareGreater
.45a4	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>45a7	00 00 00 00				.dword	$00000000
>45ab	00 00					.byte	$00,$00
.45ad	20 62 4a	jsr $4a62		jsr	FloatCompare
.45b0	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.45b3	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.45b6	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 9392
>45b9	b0 24 00 00				.dword	$000024b0
>45bd	00 00					.byte	$00,$00
.45bf	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 9392
>45c2	b0 24 00 00				.dword	$000024b0
>45c6	00 00					.byte	$00,$00
.45c8	20 62 4a	jsr $4a62		jsr	FloatCompare
.45cb	20 5a 4a	jsr $4a5a		jsr	CompareGreaterEqual
.45ce	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>45d1	01 00 00 00				.dword	$00000001
>45d5	00 80					.byte	$00,$80
.45d7	20 62 4a	jsr $4a62		jsr	FloatCompare
.45da	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.45dd	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.45e0	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 9392
>45e3	b0 24 00 00				.dword	$000024b0
>45e7	00 00					.byte	$00,$00
.45e9	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 9392
>45ec	b0 24 00 00				.dword	$000024b0
>45f0	00 00					.byte	$00,$00
.45f2	20 62 4a	jsr $4a62		jsr	FloatCompare
.45f5	20 42 4a	jsr $4a42		jsr	CompareLess
.45f8	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>45fb	00 00 00 00				.dword	$00000000
>45ff	00 00					.byte	$00,$00
.4601	20 62 4a	jsr $4a62		jsr	FloatCompare
.4604	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.4607	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.460a	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 9392
>460d	b0 24 00 00				.dword	$000024b0
>4611	00 00					.byte	$00,$00
.4613	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 9392
>4616	b0 24 00 00				.dword	$000024b0
>461a	00 00					.byte	$00,$00
.461c	20 62 4a	jsr $4a62		jsr	FloatCompare
.461f	20 52 4a	jsr $4a52		jsr	CompareLessEqual
.4622	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>4625	01 00 00 00				.dword	$00000001
>4629	00 80					.byte	$00,$80
.462b	20 62 4a	jsr $4a62		jsr	FloatCompare
.462e	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.4631	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.4634	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 33.49226533
>4637	34 0a fc 42				.dword	$42fc0a34
>463b	e7 00					.byte	$e7,$00
.463d	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -68.19284037
>4640	fd 5d 31 44				.dword	$44315dfd
>4644	e8 80					.byte	$e8,$80
.4646	20 a1 49	jsr $49a1		jsr	FloatAdd
.4649	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -34.70057504
>464c	c6 b1 66 45				.dword	$4566b1c6
>4650	e7 80					.byte	$e7,$80
.4652	20 62 4a	jsr $4a62		jsr	FloatCompare
.4655	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.4658	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.465b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 33.49226533
>465e	34 0a fc 42				.dword	$42fc0a34
>4662	e7 00					.byte	$e7,$00
.4664	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -68.19284037
>4667	fd 5d 31 44				.dword	$44315dfd
>466b	e8 80					.byte	$e8,$80
.466d	20 9b 49	jsr $499b		jsr	FloatSubtract
.4670	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 101.68510569
>4673	16 63 af 65				.dword	$65af6316
>4677	e8 00					.byte	$e8,$00
.4679	20 62 4a	jsr $4a62		jsr	FloatCompare
.467c	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.467f	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.4682	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 33.49226533
>4685	34 0a fc 42				.dword	$42fc0a34
>4689	e7 00					.byte	$e7,$00
.468b	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -68.19284037
>468e	fd 5d 31 44				.dword	$44315dfd
>4692	e8 80					.byte	$e8,$80
.4694	20 3d 4c	jsr $4c3d		jsr	FloatMultiply
.4697	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -2283.93270298
>469a	2d 76 5f 47				.dword	$475f762d
>469e	ed 80					.byte	$ed,$80
.46a0	20 62 4a	jsr $4a62		jsr	FloatCompare
.46a3	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.46a6	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.46a9	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 33.49226533
>46ac	34 0a fc 42				.dword	$42fc0a34
>46b0	e7 00					.byte	$e7,$00
.46b2	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -68.19284037
>46b5	fd 5d 31 44				.dword	$44315dfd
>46b9	e8 80					.byte	$e8,$80
.46bb	20 c6 4a	jsr $4ac6		jsr	FloatDivide
.46be	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -0.49114049
>46c1	16 62 bb 7d				.dword	$7dbb6216
>46c5	e0 80					.byte	$e0,$80
.46c7	20 62 4a	jsr $4a62		jsr	FloatCompare
.46ca	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.46cd	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.46d0	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -10.33076861
>46d3	03 6a a5 52				.dword	$52a56a03
>46d7	e5 80					.byte	$e5,$80
.46d9	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -10.33076861
>46dc	03 6a a5 52				.dword	$52a56a03
>46e0	e5 80					.byte	$e5,$80
.46e2	20 62 4a	jsr $4a62		jsr	FloatCompare
.46e5	20 4a 4a	jsr $4a4a		jsr	CompareGreater
.46e8	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>46eb	00 00 00 00				.dword	$00000000
>46ef	00 00					.byte	$00,$00
.46f1	20 62 4a	jsr $4a62		jsr	FloatCompare
.46f4	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.46f7	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.46fa	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -10.33076861
>46fd	03 6a a5 52				.dword	$52a56a03
>4701	e5 80					.byte	$e5,$80
.4703	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -10.33076861
>4706	03 6a a5 52				.dword	$52a56a03
>470a	e5 80					.byte	$e5,$80
.470c	20 62 4a	jsr $4a62		jsr	FloatCompare
.470f	20 5a 4a	jsr $4a5a		jsr	CompareGreaterEqual
.4712	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>4715	01 00 00 00				.dword	$00000001
>4719	00 80					.byte	$00,$80
.471b	20 62 4a	jsr $4a62		jsr	FloatCompare
.471e	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.4721	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.4724	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -10.33076861
>4727	03 6a a5 52				.dword	$52a56a03
>472b	e5 80					.byte	$e5,$80
.472d	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -10.33076861
>4730	03 6a a5 52				.dword	$52a56a03
>4734	e5 80					.byte	$e5,$80
.4736	20 62 4a	jsr $4a62		jsr	FloatCompare
.4739	20 42 4a	jsr $4a42		jsr	CompareLess
.473c	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>473f	00 00 00 00				.dword	$00000000
>4743	00 00					.byte	$00,$00
.4745	20 62 4a	jsr $4a62		jsr	FloatCompare
.4748	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.474b	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.474e	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -10.33076861
>4751	03 6a a5 52				.dword	$52a56a03
>4755	e5 80					.byte	$e5,$80
.4757	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -10.33076861
>475a	03 6a a5 52				.dword	$52a56a03
>475e	e5 80					.byte	$e5,$80
.4760	20 62 4a	jsr $4a62		jsr	FloatCompare
.4763	20 52 4a	jsr $4a52		jsr	CompareLessEqual
.4766	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>4769	01 00 00 00				.dword	$00000001
>476d	00 80					.byte	$00,$80
.476f	20 62 4a	jsr $4a62		jsr	FloatCompare
.4772	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.4775	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.4778	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -10.33076861
>477b	03 6a a5 52				.dword	$52a56a03
>477f	e5 80					.byte	$e5,$80
.4781	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -10.33076861
>4784	03 6a a5 52				.dword	$52a56a03
>4788	e5 80					.byte	$e5,$80
.478a	20 62 4a	jsr $4a62		jsr	FloatCompare
.478d	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.4790	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -1
>4793	01 00 00 00				.dword	$00000001
>4797	00 80					.byte	$00,$80
.4799	20 62 4a	jsr $4a62		jsr	FloatCompare
.479c	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.479f	20 cd 47	jsr $47cd		jsr	FPAssertCheck
.47a2	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -10.33076861
>47a5	03 6a a5 52				.dword	$52a56a03
>47a9	e5 80					.byte	$e5,$80
.47ab	20 dd 47	jsr $47dd		jsr	FPPushConstant	; -10.33076861
>47ae	03 6a a5 52				.dword	$52a56a03
>47b2	e5 80					.byte	$e5,$80
.47b4	20 62 4a	jsr $4a62		jsr	FloatCompare
.47b7	20 3c 4a	jsr $4a3c		jsr	CompareNotEqual
.47ba	20 dd 47	jsr $47dd		jsr	FPPushConstant	; 0
>47bd	00 00 00 00				.dword	$00000000
>47c1	00 00					.byte	$00,$00
.47c3	20 62 4a	jsr $4a62		jsr	FloatCompare
.47c6	20 2c 4a	jsr $4a2c		jsr	CompareEqual
.47c9	20 cd 47	jsr $47cd		jsr	FPAssertCheck

;******  Return to file: testing/testing.asm

.47cc	60		rts				rts
.47cd					FPAssertCheck:
.47cd	e0 00		cpx #$00			cpx 	#0
.47cf	d0 06		bne $47d7			bne 	_FPACFail
.47d1	b5 38		lda $38,x			lda 	NSMantissa0,x
.47d3	f0 02		beq $47d7			beq 	_FPACFail
.47d5	ca		dex				dex
.47d6	60		rts				rts
.47d7					_FPACFail:
>47d7	db						.byte 	$DB 						; causes a break in the emulator
.47d8	80 fd		bra $47d7			bra 	_FPACFail
.47da					FPAbs:
.47da	74 2c		stz $2c,x			stz 	NSStatus,x
.47dc	60		rts				rts
.47dd					FPPushConstant:
.47dd	e8		inx				inx
.47de	68		pla				pla
.47df	7a		ply				ply
.47e0	85 26		sta $26				sta 	zTemp0
.47e2	84 27		sty $27				sty 	zTemp0+1
.47e4	a0 01		ldy #$01			ldy 	#1
.47e6	b1 26		lda ($26),y			lda 	(zTemp0),y
.47e8	95 38		sta $38,x			sta 	NSMantissa0,x
.47ea	c8		iny				iny
.47eb	b1 26		lda ($26),y			lda 	(zTemp0),y
.47ed	95 44		sta $44,x			sta 	NSMantissa1,x
.47ef	c8		iny				iny
.47f0	b1 26		lda ($26),y			lda 	(zTemp0),y
.47f2	95 50		sta $50,x			sta 	NSMantissa2,x
.47f4	c8		iny				iny
.47f5	b1 26		lda ($26),y			lda 	(zTemp0),y
.47f7	95 5c		sta $5c,x			sta 	NSMantissa3,x
.47f9	c8		iny				iny
.47fa	b1 26		lda ($26),y			lda 	(zTemp0),y
.47fc	95 68		sta $68,x			sta 	NSExponent,x
.47fe	c8		iny				iny
.47ff	b1 26		lda ($26),y			lda 	(zTemp0),y
.4801	95 2c		sta $2c,x			sta 	NSStatus,x
.4803	a5 26		lda $26				lda 	zTemp0
.4805	a4 27		ldy $27				ldy 	zTemp0+1
.4807	18		clc				clc
.4808	69 06		adc #$06			adc 	#6
.480a	90 01		bcc $480d			bcc 	_FPPCNoCarry
.480c	c8		iny				iny
.480d					_FPPCNoCarry:
.480d	5a		phy				phy
.480e	48		pha				pha
.480f	60		rts				rts

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/common.library

=$80					C64_END                  = $80 ; $80 end
=$81					C64_FOR                  = $81 ; $81 for
=$82					C64_NEXT                 = $82 ; $82 next
=$83					C64_DATA                 = $83 ; $83 data
=$84					C64_INPUTHASH            = $84 ; $84 input#
=$85					C64_INPUT                = $85 ; $85 input
=$86					C64_DIM                  = $86 ; $86 dim
=$87					C64_READ                 = $87 ; $87 read
=$88					C64_LET                  = $88 ; $88 let
=$89					C64_GOTO                 = $89 ; $89 goto
=$8a					C64_RUN                  = $8a ; $8a run
=$8b					C64_IF                   = $8b ; $8b if
=$8c					C64_RESTORE              = $8c ; $8c restore
=$8d					C64_GOSUB                = $8d ; $8d gosub
=$8e					C64_RETURN               = $8e ; $8e return
=$8f					C64_REM                  = $8f ; $8f rem
=$90					C64_STOP                 = $90 ; $90 stop
=$91					C64_ON                   = $91 ; $91 on
=$92					C64_WAIT                 = $92 ; $92 wait
=$93					C64_LOAD                 = $93 ; $93 load
=$94					C64_SAVE                 = $94 ; $94 save
=$95					C64_VERIFY               = $95 ; $95 verify
=$96					C64_DEF                  = $96 ; $96 def
=$97					C64_POKE                 = $97 ; $97 poke
=$98					C64_PRINTHASH            = $98 ; $98 print#
=$99					C64_PRINT                = $99 ; $99 print
=$9a					C64_CONT                 = $9a ; $9a cont
=$9b					C64_LIST                 = $9b ; $9b list
=$9c					C64_CLR                  = $9c ; $9c clr
=$9d					C64_CMD                  = $9d ; $9d cmd
=$9e					C64_SYS                  = $9e ; $9e sys
=$9f					C64_OPEN                 = $9f ; $9f open
=$a0					C64_CLOSE                = $a0 ; $a0 close
=$a1					C64_GET                  = $a1 ; $a1 get
=$a2					C64_NEW                  = $a2 ; $a2 new
=$a3					C64_TABLB                = $a3 ; $a3 tab(
=$a4					C64_TO                   = $a4 ; $a4 to
=$a5					C64_FN                   = $a5 ; $a5 fn
=$a6					C64_SPCLB                = $a6 ; $a6 spc(
=$a7					C64_THEN                 = $a7 ; $a7 then
=$a8					C64_NOT                  = $a8 ; $a8 not
=$a9					C64_STEP                 = $a9 ; $a9 step
=$aa					C64_PLUS                 = $aa ; $aa +
=$ab					C64_MINUS                = $ab ; $ab -
=$ac					C64_TIMES                = $ac ; $ac *
=$ad					C64_DIVIDE               = $ad ; $ad /
=$ae					C64_POWER                = $ae ; $ae ^
=$af					C64_AND                  = $af ; $af and
=$b0					C64_OR                   = $b0 ; $b0 or
=$b1					C64_GREATER              = $b1 ; $b1 >
=$b2					C64_EQUAL                = $b2 ; $b2 =
=$b3					C64_LESS                 = $b3 ; $b3 <
=$b4					C64_SGN                  = $b4 ; $b4 sgn
=$b5					C64_INT                  = $b5 ; $b5 int
=$b6					C64_ABS                  = $b6 ; $b6 abs
=$b7					C64_USR                  = $b7 ; $b7 usr
=$b8					C64_FRE                  = $b8 ; $b8 fre
=$b9					C64_POS                  = $b9 ; $b9 pos
=$ba					C64_SQR                  = $ba ; $ba sqr
=$bb					C64_RND                  = $bb ; $bb rnd
=$bc					C64_LOG                  = $bc ; $bc log
=$bd					C64_EXP                  = $bd ; $bd exp
=$be					C64_COS                  = $be ; $be cos
=$bf					C64_SIN                  = $bf ; $bf sin
=$c0					C64_TAN                  = $c0 ; $c0 tan
=$c1					C64_ATN                  = $c1 ; $c1 atn
=$c2					C64_PEEK                 = $c2 ; $c2 peek
=$c3					C64_LEN                  = $c3 ; $c3 len
=$c4					C64_STRDOLLAR            = $c4 ; $c4 str$
=$c5					C64_VAL                  = $c5 ; $c5 val
=$c6					C64_ASC                  = $c6 ; $c6 asc
=$c7					C64_CHRDOLLAR            = $c7 ; $c7 chr$
=$c8					C64_LEFTDOLLAR           = $c8 ; $c8 left$
=$c9					C64_RIGHTDOLLAR          = $c9 ; $c9 right$
=$ca					C64_MIDDOLLAR            = $ca ; $ca mid$
=$cb					C64_GO                   = $cb ; $cb go
=$ce80					C64_MON                  = $ce80 ; $ce80 mon
=$ce81					C64_DOS                  = $ce81 ; $ce81 dos
=$ce82					C64_OLD                  = $ce82 ; $ce82 old
=$ce83					C64_GEOS                 = $ce83 ; $ce83 geos
=$ce84					C64_VPOKE                = $ce84 ; $ce84 vpoke
=$ce85					C64_VLOAD                = $ce85 ; $ce85 vload
=$ce86					C64_SCREEN               = $ce86 ; $ce86 screen
=$ce87					C64_PSET                 = $ce87 ; $ce87 pset
=$ce88					C64_LINE                 = $ce88 ; $ce88 line
=$ce89					C64_FRAME                = $ce89 ; $ce89 frame
=$ce8a					C64_RECT                 = $ce8a ; $ce8a rect
=$ce8b					C64_CHAR                 = $ce8b ; $ce8b char
=$ce8c					C64_MOUSE                = $ce8c ; $ce8c mouse
=$ce8d					C64_COLOR                = $ce8d ; $ce8d color
=$ce8e					C64_TEST                 = $ce8e ; $ce8e test
=$ce8f					C64_RESET                = $ce8f ; $ce8f reset
=$ce90					C64_CLS                  = $ce90 ; $ce90 cls
=$ce91					C64_CODEX                = $ce91 ; $ce91 codex
=$ce92					C64_LOCATE               = $ce92 ; $ce92 locate
=$ce93					C64_BOOT                 = $ce93 ; $ce93 boot
=$ce94					C64_KEYMAP               = $ce94 ; $ce94 keymap
=$ce95					C64_BLOAD                = $ce95 ; $ce95 bload
=$ce96					C64_BVLOAD               = $ce96 ; $ce96 bvload
=$ce97					C64_BVERIFY              = $ce97 ; $ce97 bverify
=$ce98					C64_BANK                 = $ce98 ; $ce98 bank
=$ce99					C64_FMINIT               = $ce99 ; $ce99 fminit
=$ce9a					C64_FMNOTE               = $ce9a ; $ce9a fmnote
=$ce9b					C64_FMDRUM               = $ce9b ; $ce9b fmdrum
=$ce9c					C64_FMINST               = $ce9c ; $ce9c fminst
=$ce9d					C64_FMVIB                = $ce9d ; $ce9d fmvib
=$ce9e					C64_FMFREQ               = $ce9e ; $ce9e fmfreq
=$ce9f					C64_FMVOL                = $ce9f ; $ce9f fmvol
=$cea0					C64_FMPAN                = $cea0 ; $cea0 fmpan
=$cea1					C64_FMPLAY               = $cea1 ; $cea1 fmplay
=$cea2					C64_FMCHORD              = $cea2 ; $cea2 fmchord
=$cea3					C64_FMPOKE               = $cea3 ; $cea3 fmpoke
=$cea4					C64_PSGINIT              = $cea4 ; $cea4 psginit
=$cea5					C64_PSGNOTE              = $cea5 ; $cea5 psgnote
=$cea6					C64_PSGVOL               = $cea6 ; $cea6 psgvol
=$cea7					C64_PSGWAV               = $cea7 ; $cea7 psgwav
=$cea8					C64_PSGFREQ              = $cea8 ; $cea8 psgfreq
=$cea9					C64_PSGPAN               = $cea9 ; $cea9 psgpan
=$ceaa					C64_PSGPLAY              = $ceaa ; $ceaa psgplay
=$ceab					C64_PSGCHORD             = $ceab ; $ceab psgchord
=$ceac					C64_REBOOT               = $ceac ; $ceac reboot
=$cead					C64_POWEROFF             = $cead ; $cead poweroff
=$ceae					C64_I2CPOKE              = $ceae ; $ceae i2cpoke
=$ceaf					C64_SLEEP                = $ceaf ; $ceaf sleep
=$ceb0					C64_BSAVE                = $ceb0 ; $ceb0 bsave
=$ceb1					C64_MENU                 = $ceb1 ; $ceb1 menu
=$ceb2					C64_REN                  = $ceb2 ; $ceb2 ren
=$ceb3					C64_LINPUT               = $ceb3 ; $ceb3 linput
=$ceb4					C64_LINPUTHASH           = $ceb4 ; $ceb4 linput#
=$ceb5					C64_BINPUTHASH           = $ceb5 ; $ceb5 binput#
=$ceb6					C64_HELP                 = $ceb6 ; $ceb6 help
=$ced0					C64_VPEEK                = $ced0 ; $ced0 vpeek
=$ced1					C64_MX                   = $ced1 ; $ced1 mx
=$ced2					C64_MY                   = $ced2 ; $ced2 my
=$ced3					C64_MB                   = $ced3 ; $ced3 mb
=$ced4					C64_JOY                  = $ced4 ; $ced4 joy
=$ced5					C64_HEXDOLLAR            = $ced5 ; $ced5 hex$
=$ced6					C64_BINDOLLAR            = $ced6 ; $ced6 bin$
=$ced7					C64_I2CPEEK              = $ced7 ; $ced7 i2cpeek
=$ced8					C64_POINTER              = $ced8 ; $ced8 pointer
=$ced9					C64_STRPTR               = $ced9 ; $ced9 strptr
=$ceda					C64_RPTDOLLAR            = $ceda ; $ceda rpt$
=$801					CodeStart = $801
=$22					ZeroPageMandatory = $22
=$400					MemoryStorage = $400
.0022					codePtr:
>0022							.fill 	2
.0024					objPtr:
>0024							.fill 	2
.0026					zTemp0:
>0026							.fill 	2
.0028					zTemp1:
>0028							.fill 	2
.002a					zTemp2:
>002a							.fill 	2
=$80					PCD_STARTBINARY = $80
=$8d					PCD_ENDBINARY = $8d
=$8d					PCD_STARTCOMMAND = $8d
=$ca					PCD_ENDCOMMAND = $ca
=$ca					PCD_STARTSYSTEM = $ca
=$d5					PCD_ENDSYSTEM = $d5
=$80					PCD_PLUS             = $80 ; +
=$81					PCD_MINUS            = $81 ; -
=$82					PCD_TIMES            = $82 ; *
=$83					PCD_DIVIDE           = $83 ; /
=$84					PCD_POWER            = $84 ; ^
=$85					PCD_AND              = $85 ; and
=$86					PCD_OR               = $86 ; or
=$87					PCD_GREATER          = $87 ; >
=$88					PCD_EQUAL            = $88 ; =
=$89					PCD_LESS             = $89 ; <
=$8a					PCD_GREATEREQUAL     = $8a ; >=
=$8b					PCD_LESSGREATER      = $8b ; <>
=$8c					PCD_LESSEQUAL        = $8c ; <=
=$8d					PCD_ABS              = $8d ; abs
=$8e					PCD_ARRAY            = $8e ; array
=$8f					PCD_ASC              = $8f ; asc
=$90					PCD_ASSERT           = $90 ; assert
=$91					PCD_BINDOLLAR        = $91 ; bin$
=$92					PCD_PRINTCMD_CHR     = $92 ; print.chr
=$93					PCD_CHRDOLLAR        = $93 ; chr$
=$94					PCD_SCMD_CMP         = $94 ; s.cmp
=$95					PCD_FOR              = $95 ; for
=$96					PCD_FRE              = $96 ; fre
=$97					PCD_GET              = $97 ; get
=$98					PCD_RETURN           = $98 ; return
=$99					PCD_PSET             = $99 ; pset
=$9a					PCD_LINE             = $9a ; line
=$9b					PCD_RECT             = $9b ; rect
=$9c					PCD_FRAME            = $9c ; frame
=$9d					PCD_CHAR             = $9d ; char
=$9e					PCD_HEXDOLLAR        = $9e ; hex$
=$9f					PCD_INPUT            = $9f ; input
=$a0					PCD_INPUTDOLLAR      = $a0 ; input$
=$a1					PCD_INPUTCMD_START   = $a1 ; input.start
=$a2					PCD_LEN              = $a2 ; len
=$a3					PCD_FCMD_CMP         = $a3 ; f.cmp
=$a4					PCD_INTCMD_DIV       = $a4 ; int.div
=$a5					PCD_NEGATE           = $a5 ; negate
=$a6					PCD_NEWCMD_LINE      = $a6 ; new.line
=$a7					PCD_NEXT             = $a7 ; next
=$a8					PCD_NOT              = $a8 ; not
=$a9					PCD_ON               = $a9 ; on
=$aa					PCD_MOREON           = $aa ; moreon
=$ab					PCD_PEEK             = $ab ; peek
=$ac					PCD_POKE             = $ac ; poke
=$ad					PCD_POS              = $ad ; pos
=$ae					PCD_GETCHANNEL       = $ae ; getchannel
=$af					PCD_SETCHANNEL       = $af ; setchannel
=$b0					PCD_PRINTCMD_N       = $b0 ; print.n
=$b1					PCD_PRINTCMD_S       = $b1 ; print.s
=$b2					PCD_READ             = $b2 ; read
=$b3					PCD_READDOLLAR       = $b3 ; read$
=$b4					PCD_RND              = $b4 ; rnd
=$b5					PCD_CONCAT           = $b5 ; concat
=$b6					PCD_SGN              = $b6 ; sgn
=$b7					PCD_PRINTCMD_TAB     = $b7 ; print.tab
=$b8					PCD_PRINTCMD_POS     = $b8 ; print.pos
=$b9					PCD_PRINTCMD_SPC     = $b9 ; print.spc
=$ba					PCD_STRDOLLAR        = $ba ; str$
=$bb					PCD_LEFTDOLLAR       = $bb ; left$
=$bc					PCD_RIGHTDOLLAR      = $bc ; right$
=$bd					PCD_MIDDOLLAR        = $bd ; mid$
=$be					PCD_SWAP             = $be ; swap
=$bf					PCD_TI               = $bf ; ti
=$c0					PCD_TIDOLLAR         = $c0 ; ti$
=$c1					PCD_USR              = $c1 ; usr
=$c2					PCD_VAL              = $c2 ; val
=$c3					PCD_CLOSE            = $c3 ; close
=$c4					PCD_EXIT             = $c4 ; exit
=$c5					PCD_DEBUG            = $c5 ; debug
=$c6					PCD_OPEN             = $c6 ; open
=$c7					PCD_SCREEN           = $c7 ; screen
=$c8					PCD_VPOKE            = $c8 ; vpoke
=$c9					PCD_VPEEK            = $c9 ; vpeek
=$ca					PCD_CMD_SHIFT        = $ca ; .shift
=$cb					PCD_CMD_BYTE         = $cb ; .byte
=$cc					PCD_CMD_WORD         = $cc ; .word
=$cd					PCD_CMD_FLOAT        = $cd ; .float
=$ce					PCD_CMD_STRING       = $ce ; .string
=$cf					PCD_CMD_DATA         = $cf ; .data
=$d0					PCD_CMD_GOTO         = $d0 ; .goto
=$d1					PCD_CMD_GOSUB        = $d1 ; .gosub
=$d2					PCD_CMD_GOTOCMD_Z    = $d2 ; .goto.z
=$d3					PCD_CMD_GOTOCMD_NZ   = $d3 ; .goto.nz
=$d4					PCD_CMD_VARSPACE     = $d4 ; .varspace
=$ca80					PCD_CLR              = $ca80 ; clr
=$ca81					PCD_DIM              = $ca81 ; dim
=$ca82					PCD_END              = $ca82 ; end
=$ca83					PCD_JOY              = $ca83 ; joy
=$ca84					PCD_INT              = $ca84 ; int
=$ca85					PCD_SQR              = $ca85 ; sqr
=$ca86					PCD_LOG              = $ca86 ; log
=$ca87					PCD_EXP              = $ca87 ; exp
=$ca88					PCD_COS              = $ca88 ; cos
=$ca89					PCD_SIN              = $ca89 ; sin
=$ca8a					PCD_TAN              = $ca8a ; tan
=$ca8b					PCD_ATN              = $ca8b ; atn
=$ca8c					PCD_MOUSE            = $ca8c ; mouse
=$ca8d					PCD_MB               = $ca8d ; mb
=$ca8e					PCD_MX               = $ca8e ; mx
=$ca8f					PCD_MY               = $ca8f ; my
=$ca90					PCD_RESTORE          = $ca90 ; restore
=$ca91					PCD_STOP             = $ca91 ; stop
=$ca92					PCD_SYS              = $ca92 ; sys
=$ca93					PCD_TIDOLLARCMD_WRITE = $ca93 ; ti$.write
=$ca94					PCD_WAIT             = $ca94 ; wait
=$ca95					PCD_I2CPOKE          = $ca95 ; i2cpoke
=$ca96					PCD_I2CPEEK          = $ca96 ; i2cpeek
=$ca97					PCD_BANK             = $ca97 ; bank
=$ca98					PCD_SLEEP            = $ca98 ; sleep
=$ca99					PCD_FMINIT           = $ca99 ; fminit
=$ca9a					PCD_FMNOTE           = $ca9a ; fmnote
=$ca9b					PCD_FMDRUM           = $ca9b ; fmdrum
=$ca9c					PCD_FMINST           = $ca9c ; fminst
=$ca9d					PCD_FMVIB            = $ca9d ; fmvib
=$ca9e					PCD_FMFREQ           = $ca9e ; fmfreq
=$ca9f					PCD_FMVOL            = $ca9f ; fmvol
=$caa0					PCD_FMPAN            = $caa0 ; fmpan
=$caa1					PCD_FMPLAY           = $caa1 ; fmplay
=$caa2					PCD_FMCHORD          = $caa2 ; fmchord
=$caa3					PCD_FMPOKE           = $caa3 ; fmpoke
=$caa4					PCD_PSGINIT          = $caa4 ; psginit
=$caa5					PCD_PSGNOTE          = $caa5 ; psgnote
=$caa6					PCD_PSGVOL           = $caa6 ; psgvol
=$caa7					PCD_PSGWAV           = $caa7 ; psgwav
=$caa8					PCD_PSGFREQ          = $caa8 ; psgfreq
=$caa9					PCD_PSGPAN           = $caa9 ; psgpan
=$caaa					PCD_PSGPLAY          = $caaa ; psgplay
=$caab					PCD_PSGCHORD         = $caab ; psgchord
=$caac					PCD_CLS              = $caac ; cls
=$caad					PCD_LOCATE           = $caad ; locate
=$caae					PCD_COLOR            = $caae ; color
.4810					SetErrorHandler:
.4810	8c 01 04	sty $0401			sty 	ErrorHandlerVector+1
.4813	8e 00 04	stx $0400			stx 	ErrorHandlerVector
.4816	60		rts				rts
.4817					CallErrorHandler:
.4817	6c 00 04	jmp ($0400)			jmp 	(ErrorHandlerVector)
.0400					ErrorHandlerVector:
>0400							.fill 	2
.481a					ErrorV_range:
.481a	20 17 48	jsr $4817		jsr	CallErrorHandler
>481d	4f 55 54 20 4f 46 20 52			.text	"OUT OF RANGE",0
>4825	41 4e 47 45 00
.482a					ErrorV_value:
.482a	20 17 48	jsr $4817		jsr	CallErrorHandler
>482d	42 41 44 20 56 41 4c 55			.text	"BAD VALUE",0
>4835	45 00
.4837					ErrorV_syntax:
.4837	20 17 48	jsr $4817		jsr	CallErrorHandler
>483a	53 59 4e 54 41 58 20 45			.text	"SYNTAX ERROR",0
>4842	52 52 4f 52 00
.4847					ErrorV_type:
.4847	20 17 48	jsr $4817		jsr	CallErrorHandler
>484a	54 59 50 45 20 4d 49 53			.text	"TYPE MISMATCH",0
>4852	4d 41 54 43 48 00
.4858					ErrorV_unimplemented:
.4858	20 17 48	jsr $4817		jsr	CallErrorHandler
>485b	4e 4f 54 20 49 4d 50 4c			.text	"NOT IMPLEMENTED",0
>4863	45 4d 45 4e 54 45 44 00
.486b					ErrorV_assert:
.486b	20 17 48	jsr $4817		jsr	CallErrorHandler
>486e	41 53 53 45 52 54 20 46			.text	"ASSERT FAIL",0
>4876	41 49 4c 00
.487a					ErrorV_line:
.487a	20 17 48	jsr $4817		jsr	CallErrorHandler
>487d	55 4e 4b 4e 4f 57 4e 20			.text	"UNKNOWN LINE NUMBER",0
>4885	4c 49 4e 45 20 4e 55 4d 42 45 52 00
.4891					ErrorV_internal:
.4891	20 17 48	jsr $4817		jsr	CallErrorHandler
>4894	49 4e 54 45 52 4e 41 4c			.text	"INTERNAL ERROR",0
>489c	20 45 52 52 4f 52 00
.48a3					ErrorV_divzero:
.48a3	20 17 48	jsr $4817		jsr	CallErrorHandler
>48a6	44 49 56 49 44 45 20 42			.text	"DIVIDE BY ZERO",0
>48ae	59 20 5a 45 52 4f 00
.48b5					ErrorV_structure:
.48b5	20 17 48	jsr $4817		jsr	CallErrorHandler
>48b8	53 54 52 55 43 54 55 52			.text	"STRUCTURE IMBALANCE",0
>48c0	45 20 49 4d 42 41 4c 41 4e 43 45 00
.48cc					ErrorV_stop:
.48cc	20 17 48	jsr $4817		jsr	CallErrorHandler
>48cf	50 52 4f 47 52 41 4d 20			.text	"PROGRAM STOPPED",0
>48d7	53 54 4f 50 50 45 44 00
.48df					ErrorV_data:
.48df	20 17 48	jsr $4817		jsr	CallErrorHandler
>48e2	4f 55 54 20 4f 46 20 44			.text	"OUT OF DATA",0
>48ea	41 54 41 00
.48ee					ErrorV_undeclared:
.48ee	20 17 48	jsr $4817		jsr	CallErrorHandler
>48f1	55 4e 4b 4e 4f 57 4e 20			.text	"UNKNOWN ARRAY",0
>48f9	41 52 52 41 59 00
.48ff					ErrorV_redefine:
.48ff	20 17 48	jsr $4817		jsr	CallErrorHandler
>4902	41 52 52 41 59 20 52 45			.text	"ARRAY REDEFINED",0
>490a	44 45 46 49 4e 45 44 00
.4912					ErrorV_index:
.4912	20 17 48	jsr $4817		jsr	CallErrorHandler
>4915	42 41 44 20 41 52 52 41			.text	"BAD ARRAY INDEX",0
>491d	59 20 49 4e 44 45 58 00
.4925					ErrorV_memory:
.4925	20 17 48	jsr $4817		jsr	CallErrorHandler
>4928	4f 55 54 20 4f 46 20 4d			.text	"OUT OF MEMORY",0
>4930	45 4d 4f 52 59 00
.4936					ErrorV_channel:
.4936	20 17 48	jsr $4817		jsr	CallErrorHandler
>4939	49 4e 50 55 54 2f 4f 55			.text	"INPUT/OUTPUT ERROR",0
>4941	54 50 55 54 20 45 52 52 4f 52 00
.494c					MoveObjectForward:
.494c	b2 24		lda ($24)			lda 	(objPtr) 					; get next
.494e	c9 ff		cmp #$ff			cmp 	#$FF
.4950	f0 36		beq $4988			beq 	_MOFEnd
.4952	c9 40		cmp #$40			cmp 	#$40 						; 00-3F
.4954	90 24		bcc $497a			bcc 	_MOFAdvance1 				; forward 1
.4956	a0 02		ldy #$02			ldy 	#2 							; 40-6F
.4958	c9 70		cmp #$70			cmp 	#$70 						; forward 2
.495a	90 20		bcc $497c			bcc 	_MOFAdvanceY
.495c	c9 ca		cmp #$ca			cmp 	#PCD_STARTSYSTEM 			; 70 - System tokens.
.495e	90 1a		bcc $497a			bcc 	_MOFAdvance1 				; forward 1
.4960	a8		tay				tay 								; read the size.
.4961	b9 c6 48	lda $48c6,y			lda 	MOFSizeTable-PCD_STARTSYSTEM,y
.4964	a8		tay				tay
.4965	c8		iny				iny 								; add 1 for the system token.
.4966	d0 14		bne $497c			bne 	_MOFAdvanceY 				; if 0, was $FF thus a string/data skip.
.4968	a0 01		ldy #$01			ldy 	#1 							; get length byte
.496a	b1 24		lda ($24),y			lda 	(objPtr),y
.496c	a8		tay				tay 								; into Y.
.496d	18		clc				clc
.496e	a5 24		lda $24				lda 	objPtr						; add 2 to the object pointer
.4970	69 02		adc #$02			adc 	#2
.4972	85 24		sta $24				sta 	objPtr
.4974	90 02		bcc $4978			bcc 	_MOFNoCarry1
.4976	e6 25		inc $25				inc 	objPtr+1
.4978					_MOFNoCarry1:
.4978	80 02		bra $497c			bra 	_MOFAdvanceY
.497a					_MOFAdvance1:
.497a	a0 01		ldy #$01			ldy 	#1
.497c					_MOFAdvanceY:
.497c	98		tya				tya 								; add Y to objPtr
.497d	18		clc				clc
.497e	65 24		adc $24				adc 	objPtr
.4980	85 24		sta $24				sta 	objPtr
.4982	90 02		bcc $4986			bcc 	_MOFNoCarry2
.4984	e6 25		inc $25				inc 	objPtr+1
.4986					_MOFNoCarry2:
.4986	18		clc				clc 								; not completed.
.4987	60		rts				rts
.4988					_MOFEnd:
.4988	e6 24		inc $24				inc 	objPtr
.498a	d0 02		bne $498e			bne 	_MOFENoCarry
.498c	e6 25		inc $25				inc 	objPtr+1
.498e					_MOFENoCarry:
.498e	38		sec				sec
.498f	60		rts				rts
.4990					MOFSizeTable:
>4990	01					.byte	1         	; $ca .shift
>4991	01					.byte	1         	; $cb .byte
>4992	02					.byte	2         	; $cc .word
>4993	05					.byte	5         	; $cd .float
>4994	ff					.byte	255       	; $ce .string
>4995	ff					.byte	255       	; $cf .data
>4996	02					.byte	2         	; $d0 .goto
>4997	02					.byte	2         	; $d1 .gosub
>4998	02					.byte	2         	; $d2 .goto.z
>4999	02					.byte	2         	; $d3 .goto.nz
>499a	02					.byte	2         	; $d4 .varspace

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library

=12					MathStackSize = 12
=$40					NSSString = $40 							; string vs typemask
=$00					NSSIFloat = $00 							; ifloat vs typemask
=$20					NSSIInt16 = $20								; when set, a reference is a 16 bit reference (e.g. a%)
=$40					NSSTypeMask = $40
=$80					NSSArray = $80  							; array (in variable code)
.002c					NSStatus:
>002c							.fill 	MathStackSize
.0038					NSMantissa0:
>0038							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0044					NSMantissa1:
>0044							.fill 	MathStackSize
.0050					NSMantissa2:
>0050							.fill 	MathStackSize
.005c					NSMantissa3:
>005c							.fill 	MathStackSize
.0068					NSExponent:
>0068							.fill 	MathStackSize
.0402					numberBuffer:
>0402							.fill 	34
.499b					FloatSubtract:
.499b	b5 2c		lda $2c,x			lda 	NSStatus,x 					; negate top of stack
.499d	49 80		eor #$80			eor 	#$80
.499f	95 2c		sta $2c,x			sta 	NSStatus,x					; and fall through.
.49a1					FloatAdd:
.49a1	ca		dex				dex
.49a2	b5 68		lda $68,x			lda 	NSExponent,x 				; can use optimised.
.49a4	15 69		ora $69,x			ora 	NSExponent+1,x
.49a6	15 5c		ora $5c,x			ora 	NSMantissa3,x
.49a8	15 5d		ora $5d,x			ora 	NSMantissa3+1,x
.49aa	d0 04		bne $49b0			bne 	_FAUseFloat
.49ac	20 3d 4d	jsr $4d3d			jsr 	FloatInt32Add 				; use the int32 one.
.49af	60		rts				rts
.49b0					_FAUseFloat:
.49b0	20 d2 4c	jsr $4cd2			jsr 	FloatNormalise 				; normalise S[X]
.49b3	f0 51		beq $4a06			beq 	_FAReturn1
.49b5	e8		inx				inx 								; normalise S[X+1]
.49b6	20 d2 4c	jsr $4cd2			jsr 	FloatNormalise
.49b9	ca		dex				dex
.49ba	c9 00		cmp #$00			cmp 	#0
.49bc	f0 60		beq $4a1e			beq 	_FAExit 					; if so, just return A
.49be	b5 68		lda $68,x			lda 	NSExponent,x 				; are the exponents the same ?
.49c0	d5 69		cmp $69,x			cmp 	NSExponent+1,x
.49c2	f0 18		beq $49dc			beq 	_FAExponentsEqual
.49c4	b5 68		lda $68,x			lda 	NSExponent,x 				; work out the larger exponent
.49c6	a8		tay				tay
.49c7	38		sec				sec 								; do a signed comparison of the exponents.
.49c8	f5 69		sbc $69,x			sbc 	NSExponent+1,x
.49ca	50 02		bvc $49ce			bvc 	_FANoSignedChange
.49cc	49 80		eor #$80			eor 	#$80
.49ce					_FANoSignedChange:
.49ce	29 80		and #$80			and 	#$80
.49d0	10 02		bpl $49d4			bpl 	_FAHaveMax
.49d2	b4 69		ldy $69,x			ldy 	NSExponent+1,x
.49d4					_FAHaveMax:
.49d4	20 1f 4a	jsr $4a1f			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.49d7	e8		inx				inx
.49d8	20 1f 4a	jsr $4a1f			jsr 	_FAShiftToExponent
.49db	ca		dex				dex
.49dc					_FAExponentsEqual:
.49dc	b5 2c		lda $2c,x			lda 	NSStatus,x 					; are the signs the same
.49de	55 2d		eor $2d,x			eor 	NSStatus+1,x
.49e0	30 0e		bmi $49f0			bmi 	_FADifferentSigns
.49e2	20 09 4d	jsr $4d09			jsr 	FloatAddTopTwoStack 		; do the add of the mantissae
.49e5	b5 5c		lda $5c,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.49e7	10 35		bpl $4a1e			bpl 	_FAExit 					; if no, we are done.
.49e9	20 96 4f	jsr $4f96			jsr 	FloatShiftRight 				; shift A right, renormalising it.
.49ec	f6 68		inc $68,x			inc 	NSExponent,x 				; bump the exponent and exit
.49ee	80 2e		bra $4a1e			bra 	_FAExit
.49f0					_FADifferentSigns:
.49f0	20 23 4d	jsr $4d23			jsr 	FloatSubTopTwoStack 		; subtract mantissa B from A
.49f3	b5 5c		lda $5c,x			lda 	NSMantissa3,x 				; is the result negative ?
.49f5	10 06		bpl $49fd			bpl 	_FACheckZero 				; if no, check for -0
.49f7	20 3f 4f	jsr $4f3f			jsr 	FloatNegate 					; netate result
.49fa	20 46 4f	jsr $4f46			jsr 	FloatNegateMantissa 			; negate (2'c) the mantissa
.49fd					_FACheckZero:
.49fd	20 9f 4f	jsr $4f9f			jsr 	FloatIsZero	 				; check for -0
.4a00	d0 1c		bne $4a1e			bne 	_FAExit
.4a02	74 2c		stz $2c,x			stz 	NSStatus,x
.4a04	80 18		bra $4a1e			bra 	_FAExit
.4a06					_FAReturn1:
.4a06	b5 39		lda $39,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.4a08	95 38		sta $38,x			sta 	NSMantissa0,x
.4a0a	b5 45		lda $45,x			lda 	NSMantissa1+1,x
.4a0c	95 44		sta $44,x			sta 	NSMantissa1,x
.4a0e	b5 51		lda $51,x			lda 	NSMantissa2+1,x
.4a10	95 50		sta $50,x			sta 	NSMantissa2,x
.4a12	b5 5d		lda $5d,x			lda 	NSMantissa3+1,x
.4a14	95 5c		sta $5c,x			sta 	NSMantissa3,x
.4a16	b5 69		lda $69,x			lda 	NSExponent+1,x
.4a18	95 68		sta $68,x			sta 	NSExponent,x
.4a1a	b5 2d		lda $2d,x			lda 	NSStatus+1,x
.4a1c	95 2c		sta $2c,x			sta 	NSStatus,x
.4a1e					_FAExit:
.4a1e	60		rts				rts
.4a1f					_FAShiftToExponent:
.4a1f					_FAShiftToExponent2:
.4a1f	98		tya				tya 								; compare Y to exponent
.4a20	d5 68		cmp $68,x			cmp 	NSExponent,x 				; reached the exponent required ?
.4a22	f0 07		beq $4a2b			beq 	_FASEExit 					; exit if so.
.4a24	20 96 4f	jsr $4f96			jsr 	FloatShiftRight	 			; shift the mantissa right
.4a27	f6 68		inc $68,x			inc 	NSExponent,x 				; increment exponent
.4a29	80 f4		bra $4a1f			bra 	_FAShiftToExponent2
.4a2b					_FASEExit:
.4a2b	60		rts				rts
.4a2c					CompareEqual:
.4a2c	b5 38		lda $38,x			lda 	NSMantissa0,x
.4a2e	d0 09		bne $4a39			bne 	ReturnFalse
.4a30					ReturnTrue:
.4a30	a9 01		lda #$01			lda 	#1
.4a32	95 38		sta $38,x			sta 	NSMantissa0,x
.4a34	a9 80		lda #$80			lda 	#$80
.4a36	95 2c		sta $2c,x			sta 	NSStatus,x
.4a38	60		rts				rts
.4a39					ReturnFalse:
.4a39	74 38		stz $38,x			stz 	NSMantissa0,x
.4a3b	60		rts				rts
.4a3c					CompareNotEqual:
.4a3c	b5 38		lda $38,x			lda 	NSMantissa0,x
.4a3e	d0 f0		bne $4a30			bne 	ReturnTrue
.4a40	80 f7		bra $4a39			bra 	ReturnFalse
.4a42					CompareLess:
.4a42	b5 38		lda $38,x			lda 	NSMantissa0,x
.4a44	c9 ff		cmp #$ff			cmp 	#$FF
.4a46	f0 e8		beq $4a30			beq 	ReturnTrue
.4a48	80 ef		bra $4a39			bra 	ReturnFalse
.4a4a					CompareGreater:
.4a4a	b5 38		lda $38,x			lda 	NSMantissa0,x
.4a4c	c9 01		cmp #$01			cmp 	#$01
.4a4e	f0 e0		beq $4a30			beq 	ReturnTrue
.4a50	80 e7		bra $4a39			bra 	ReturnFalse
.4a52					CompareLessEqual:
.4a52	b5 38		lda $38,x			lda 	NSMantissa0,x
.4a54	c9 01		cmp #$01			cmp 	#$01
.4a56	d0 d8		bne $4a30			bne 	ReturnTrue
.4a58	80 df		bra $4a39			bra 	ReturnFalse
.4a5a					CompareGreaterEqual:
.4a5a	b5 38		lda $38,x			lda 	NSMantissa0,x
.4a5c	c9 ff		cmp #$ff			cmp 	#$FF
.4a5e	d0 d0		bne $4a30			bne 	ReturnTrue
.4a60	80 d7		bra $4a39			bra 	ReturnFalse
.4a62					FloatCompare:
.4a62	b5 68		lda $68,x			lda 	NSExponent,x 				; float comparison.
.4a64	15 67		ora $67,x			ora 	NSExponent-1,x 				; integer if both integer.
.4a66	48		pha				pha
.4a67	20 9b 49	jsr $499b			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.4a6a	68		pla				pla
.4a6b	d0 0c		bne $4a79			bne 	_FCCompareFloat
.4a6d	b5 38		lda $38,x			lda 	NSMantissa0,x
.4a6f	15 44		ora $44,x			ora 	NSMantissa1,x
.4a71	15 50		ora $50,x			ora 	NSMantissa2,x
.4a73	15 5c		ora $5c,x			ora 	NSMantissa3,x
.4a75	f0 14		beq $4a8b			beq 	_FCExit 					; if zero, return zero
.4a77	80 0a		bra $4a83			bra 	_FCSign
.4a79					_FCCompareFloat:
.4a79	b5 44		lda $44,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.4a7b	29 f0		and #$f0			and 	#$F0
.4a7d	15 50		ora $50,x			ora 	NSMantissa2,x
.4a7f	15 5c		ora $5c,x			ora 	NSMantissa3,x
.4a81	f0 08		beq $4a8b			beq 	_FCExit 					; zero, so approximately identical
.4a83					_FCSign:
.4a83	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.4a85	34 2c		bit $2c,x			bit 	NSStatus,x
.4a87	10 02		bpl $4a8b			bpl 	_FCExit
.4a89					_FCNegative:
.4a89	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.4a8b					_FCExit:
.4a8b	20 7f 4f	jsr $4f7f			jsr 	FloatSetByte 				; set the result 255,0,1
.4a8e	60		rts				rts
.4a8f					FloatScalarTable:
>4a8f	66 66 66 66				.dword $66666666 ; 0.1
>4a93	de					.byte $de
>4a94	1f 85 eb 51				.dword $51eb851f ; 0.01
>4a98	db					.byte $db
>4a99	4c 37 89 41				.dword $4189374c ; 0.001
>4a9d	d8					.byte $d8
>4a9e	ac 8b db 68				.dword $68db8bac ; 0.0001
>4aa2	d4					.byte $d4
>4aa3	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>4aa7	d1					.byte $d1
>4aa8	83 de 1b 43				.dword $431bde83 ; 1e-06
>4aac	ce					.byte $ce
>4aad	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>4ab1	ca					.byte $ca
>4ab2	89 3b e6 55				.dword $55e63b89 ; 1e-08
>4ab6	c7					.byte $c7
>4ab7	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>4abb	c4					.byte $c4
>4abc	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>4ac0	c0					.byte $c0
>4ac1	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>4ac5	bd					.byte $bd
.4ac6					FloatDivide:
.4ac6	48		pha				pha
.4ac7	20 d2 4c	jsr $4cd2			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.4aca	ca		dex				dex
.4acb	c9 00		cmp #$00			cmp 	#0
.4acd	f0 1e		beq $4aed			beq 	_FDZero
.4acf	20 d2 4c	jsr $4cd2			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.4ad2	f0 16		beq $4aea			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.4ad4	20 35 4b	jsr $4b35			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.4ad7	20 02 4b	jsr $4b02			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.4ada	20 d2 4c	jsr $4cd2			jsr		FloatNormalise 				; renormalise
.4add	20 c8 4c	jsr $4cc8			jsr 	FloatCalculateSign 			; calculate result sign
.4ae0	b5 68		lda $68,x			lda 	NSExponent,x 				; calculate exponent
.4ae2	38		sec				sec
.4ae3	f5 69		sbc $69,x			sbc 	NSExponent+1,x
.4ae5	38		sec				sec
.4ae6	e9 1e		sbc #$1e			sbc 	#30
.4ae8	95 68		sta $68,x			sta 	NSExponent,x
.4aea					_FDExit:
.4aea	68		pla				pla
.4aeb	18		clc				clc
.4aec	60		rts				rts
.4aed					_FDZero:
.4aed	68		pla				pla
.4aee	38		sec				sec
.4aef	60		rts				rts
.4af0					DivideInt32:
.4af0	20 b8 4b	jsr $4bb8			jsr 	FloatIntegerPart 			; make both integers
.4af3	ca		dex				dex
.4af4	20 b8 4b	jsr $4bb8			jsr 	FloatIntegerPart
.4af7	20 13 4b	jsr $4b13			jsr 	Int32Divide 				; divide
.4afa	20 02 4b	jsr $4b02			jsr 	NSMCopyPlusTwoToZero 		; copy result
.4afd	20 c8 4c	jsr $4cc8			jsr 	FloatCalculateSign 			; calculate result sign
.4b00	18		clc				clc
.4b01	60		rts				rts
.4b02					NSMCopyPlusTwoToZero:
.4b02	b5 3a		lda $3a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.4b04	95 38		sta $38,x			sta 	NSMantissa0,x
.4b06	b5 46		lda $46,x			lda 	NSMantissa1+2,x
.4b08	95 44		sta $44,x			sta 	NSMantissa1,x
.4b0a	b5 52		lda $52,x			lda 	NSMantissa2+2,x
.4b0c	95 50		sta $50,x			sta 	NSMantissa2,x
.4b0e	b5 5e		lda $5e,x			lda 	NSMantissa3+2,x
.4b10	95 5c		sta $5c,x			sta 	NSMantissa3,x
.4b12	60		rts				rts
.4b13					Int32Divide:
.4b13	48		pha				pha 								; save AXY
.4b14	5a		phy				phy
.4b15	20 60 4f	jsr $4f60			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.4b18	20 79 4f	jsr $4f79			jsr 	FloatSetZeroMantissaOnly 	; set S[X] to zero
.4b1b	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.4b1d					_I32DivideLoop:
.4b1d	e8		inx				inx
.4b1e	e8		inx				inx
.4b1f	20 8c 4f	jsr $4f8c			jsr 	FloatShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.4b22	ca		dex				dex
.4b23	ca		dex				dex
.4b24	20 8d 4f	jsr $4f8d			jsr 	FloatRotateLeft
.4b27	20 53 4b	jsr $4b53			jsr 	FloatDivideCheck 			; check if subtract possible
.4b2a	90 02		bcc $4b2e			bcc 	_I32DivideNoCarryIn
.4b2c	f6 3a		inc $3a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.4b2e					_I32DivideNoCarryIn:
.4b2e	88		dey				dey 								; loop round till division completed.
.4b2f	d0 ec		bne $4b1d			bne 	_I32DivideLoop
.4b31	7a		ply				ply 								; restore AXY and exit
.4b32	68		pla				pla
.4b33	18		clc				clc
.4b34	60		rts				rts
.4b35					Int32ShiftDivide:
.4b35	48		pha				pha 								; save AY
.4b36	5a		phy				phy
.4b37	e8		inx				inx 								; clear S[X+2]
.4b38	e8		inx				inx
.4b39	20 7d 4f	jsr $4f7d			jsr 	FloatSetZero
.4b3c	ca		dex				dex
.4b3d	ca		dex				dex
.4b3e	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.4b40					_I32SDLoop:
.4b40	20 53 4b	jsr $4b53			jsr 	FloatDivideCheck 			; check if subtract possible
.4b43	e8		inx				inx
.4b44	e8		inx				inx
.4b45	20 8d 4f	jsr $4f8d			jsr 	FloatRotateLeft				; shift 64 bit FPA left, rotating carry in
.4b48	ca		dex				dex
.4b49	ca		dex				dex
.4b4a	20 8d 4f	jsr $4f8d			jsr 	FloatRotateLeft
.4b4d	88		dey				dey 	 							; do 31 times
.4b4e	d0 f0		bne $4b40			bne 	_I32SDLoop
.4b50	7a		ply				ply 								; restore AY and exit
.4b51	68		pla				pla
.4b52	60		rts				rts
.4b53					FloatDivideCheck:
.4b53	20 23 4d	jsr $4d23			jsr 	FloatSubTopTwoStack 		; subtract Stack[X+1] from Stack[X+0]
.4b56	b0 04		bcs $4b5c			bcs 	_DCSExit 					; if carry set, then could do, exit
.4b58	20 09 4d	jsr $4d09			jsr 	FloatAddTopTwoStack 		; add it back in
.4b5b	18		clc				clc 								; and return False
.4b5c					_DCSExit:
.4b5c	60		rts				rts
.4b5d					FloatFractionalPart:
.4b5d	5a		phy				phy
.4b5e	b5 2c		lda $2c,x			lda 	NSStatus,x 					; take absolute value
.4b60	29 7f		and #$7f			and 	#$7F
.4b62	95 2c		sta $2c,x			sta 	NSStatus,x
.4b64	20 d2 4c	jsr $4cd2			jsr 	FloatNormalise
.4b67	b5 68		lda $68,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.4b69	38		sec				sec
.4b6a	e9 e0		sbc #$e0			sbc 	#$E0
.4b6c	90 29		bcc $4b97			bcc 	_FFPExit 					; already fractional
.4b6e	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.4b70	b0 22		bcs $4b94			bcs 	_FFPZero
.4b72	a8		tay				tay 								; put count to do in Y
.4b73	b5 5c		lda $5c,x			lda 	NSMantissa3,x 				; do each in turn.
.4b75	20 9c 4b	jsr $4b9c			jsr 	_FFPPartial
.4b78	95 5c		sta $5c,x			sta 	NSMantissa3,x
.4b7a	b5 50		lda $50,x			lda 	NSMantissa2,x
.4b7c	20 9c 4b	jsr $4b9c			jsr 	_FFPPartial
.4b7f	95 50		sta $50,x			sta 	NSMantissa2,x
.4b81	b5 44		lda $44,x			lda 	NSMantissa1,x
.4b83	20 9c 4b	jsr $4b9c			jsr 	_FFPPartial
.4b86	95 44		sta $44,x			sta 	NSMantissa1,x
.4b88	b5 38		lda $38,x			lda 	NSMantissa0,x
.4b8a	20 9c 4b	jsr $4b9c			jsr 	_FFPPartial
.4b8d	95 38		sta $38,x			sta 	NSMantissa0,x
.4b8f	20 9f 4f	jsr $4f9f			jsr 	FloatIsZero 					; zeroed check.
.4b92	d0 03		bne $4b97			bne 	_FFPExit
.4b94					_FFPZero:
.4b94	20 7d 4f	jsr $4f7d			jsr 	FloatSetZero
.4b97					_FFPExit:
.4b97	20 d2 4c	jsr $4cd2			jsr 	FloatNormalise
.4b9a	7a		ply				ply
.4b9b	60		rts				rts
.4b9c					_FFPPartial:
.4b9c	c0 00		cpy #$00			cpy 	#0 							; no more to do
.4b9e	f0 17		beq $4bb7			beq 	_FFFPPExit
.4ba0	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.4ba2	b0 0c		bcs $4bb0			bcs 	_FFFPPWholeByte
.4ba4	5a		phy				phy
.4ba5					_FFFPPLeft:
.4ba5	0a		asl a				asl 	a
.4ba6	88		dey				dey
.4ba7	d0 fc		bne $4ba5			bne 	_FFFPPLeft
.4ba9	7a		ply				ply
.4baa					_FFFPPRight:
.4baa	4a		lsr a				lsr 	a
.4bab	88		dey				dey
.4bac	d0 fc		bne $4baa			bne 	_FFFPPRight
.4bae	80 07		bra $4bb7			bra 	_FFFPPExit
.4bb0					_FFFPPWholeByte:
.4bb0	98		tya				tya 								; subtract 8 from count
.4bb1	38		sec				sec
.4bb2	e9 08		sbc #$08			sbc 	#8
.4bb4	a8		tay				tay
.4bb5	a9 00		lda #$00			lda 	#0 							; and clear all
.4bb7					_FFFPPExit:
.4bb7	60		rts				rts
.4bb8					FloatIntegerPart:
.4bb8	48		pha				pha
.4bb9	b5 68		lda $68,x			lda 	NSExponent,x 				; is it integer already ?
.4bbb	f0 1d		beq $4bda			beq 	_FIPExit 					; if so do nothing
.4bbd	20 9f 4f	jsr $4f9f			jsr 	FloatIsZero 				; is it zero ?
.4bc0	f0 15		beq $4bd7			beq 	_FIPZero 					; if so return zero.
.4bc2	20 d2 4c	jsr $4cd2			jsr 	FloatNormalise 				; normalise
.4bc5	f0 10		beq $4bd7			beq 	_FIPZero 					; normalised to zero, exit zero
.4bc7					_FIPShift:
.4bc7	b5 68		lda $68,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.4bc9	10 07		bpl $4bd2			bpl 	_FIPCheckZero
.4bcb	20 96 4f	jsr $4f96			jsr 	FloatShiftRight 			; shift mantissa right
.4bce	f6 68		inc $68,x			inc 	NSExponent,x 				; bump exponent
.4bd0	80 f5		bra $4bc7			bra 	_FIPShift
.4bd2					_FIPCheckZero:
.4bd2	20 9f 4f	jsr $4f9f			jsr 	FloatIsZero 				; avoid -0 problem
.4bd5	d0 03		bne $4bda			bne 	_FIPExit 					; set to zero if mantissa zero.
.4bd7					_FIPZero:
.4bd7	20 7d 4f	jsr $4f7d			jsr 	FloatSetZero
.4bda					_FIPExit:
.4bda	68		pla				pla
.4bdb	60		rts				rts
.4bdc					FloatIntegerPartDown:
.4bdc	48		pha				pha
.4bdd	5a		phy				phy
.4bde	b5 68		lda $68,x			lda 	NSExponent,x 				; is it integer already ?
.4be0	f0 36		beq $4c18			beq 	_FIPExit 					; if so do nothing
.4be2	20 9f 4f	jsr $4f9f			jsr 	FloatIsZero 				; is it zero ?
.4be5	f0 2e		beq $4c15			beq 	_FIPZero 					; if so return zero.
.4be7	20 d2 4c	jsr $4cd2			jsr 	FloatNormalise 				; normalise
.4bea	f0 29		beq $4c15			beq 	_FIPZero 					; normalised to zero, exit zero
.4bec	a0 00		ldy #$00			ldy 	#0 							; reset the count of bits.
.4bee					_FIPShift:
.4bee	b5 68		lda $68,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.4bf0	10 0a		bpl $4bfc			bpl 	_FIPCheckDown
.4bf2	20 96 4f	jsr $4f96			jsr 	FloatShiftRight 			; shift mantissa right
.4bf5	90 01		bcc $4bf8			bcc 	_FIPNoFrac 					; shifted a zero out ?
.4bf7	c8		iny				iny
.4bf8					_FIPNoFrac:
.4bf8	f6 68		inc $68,x			inc 	NSExponent,x 				; bump exponent
.4bfa	80 f2		bra $4bee			bra 	_FIPShift
.4bfc					_FIPCheckDown:
.4bfc	c0 00		cpy #$00			cpy 	#0 							; were there any fractional bits.
.4bfe	f0 10		beq $4c10			beq 	_FIPCheckZero
.4c00	34 2c		bit $2c,x			bit 	NSStatus,x 					; +ve
.4c02	10 0c		bpl $4c10			bpl 	_FIPCheckZero
.4c04	e8		inx				inx 								; -ve so round *down*.
.4c05	a9 01		lda #$01			lda 	#1
.4c07	20 7f 4f	jsr $4f7f			jsr 	FloatSetByte
.4c0a	20 3f 4f	jsr $4f3f			jsr 	FloatNegate
.4c0d	20 a1 49	jsr $49a1			jsr 	FloatAdd
.4c10					_FIPCheckZero:
.4c10	20 9f 4f	jsr $4f9f			jsr 	FloatIsZero 				; avoid -0 problem
.4c13	d0 03		bne $4c18			bne 	_FIPExit 					; set to zero if mantissa zero.
.4c15					_FIPZero:
.4c15	20 7d 4f	jsr $4f7d			jsr 	FloatSetZero
.4c18					_FIPExit:
.4c18	7a		ply				ply
.4c19	68		pla				pla
.4c1a	60		rts				rts
.4c1b					FloatInt8Multiply:
.4c1b	5a		phy				phy
.4c1c	b5 38		lda $38,x			lda 	NSMantissa0,x 				; right shifted multiplier in Y
.4c1e	a8		tay				tay
.4c1f	74 38		stz $38,x			stz 	NSMantissa0,x 				; zero the result (already 8 bit constant)
.4c21					_FI8MLoop:
.4c21	98		tya				tya 								; shift right shifter right into carry
.4c22	4a		lsr a				lsr 	a
.4c23	a8		tay				tay
.4c24	90 0d		bcc $4c33			bcc 	_FI8MNoAdd
.4c26	18		clc				clc
.4c27	b5 38		lda $38,x			lda 	NSMantissa0,x
.4c29	75 39		adc $39,x			adc 	NSMantissa0+1,x
.4c2b	95 38		sta $38,x			sta 	NSMantissa0,x
.4c2d	b5 44		lda $44,x			lda 	NSMantissa1,x
.4c2f	75 45		adc $45,x			adc 	NSMantissa1+1,x
.4c31	95 44		sta $44,x			sta 	NSMantissa1,x
.4c33					_FI8MNoAdd:
.4c33	16 39		asl $39,x			asl 	NSMantissa0+1,x 			; shift adder left
.4c35	36 45		rol $45,x			rol 	NSMantissa1+1,x
.4c37	c0 00		cpy #$00			cpy 	#0
.4c39	d0 e6		bne $4c21			bne 	_FI8MLoop 					; until right shifter zero.
.4c3b	7a		ply				ply
.4c3c	60		rts				rts
.4c3d					FloatMultiply:
.4c3d	ca		dex				dex
.4c3e	b5 68		lda $68,x			lda 	NSExponent,x 				; can use optimised ?
.4c40	15 69		ora $69,x			ora 	NSExponent+1,x
.4c42	15 5c		ora $5c,x			ora 	NSMantissa3,x
.4c44	15 5d		ora $5d,x			ora 	NSMantissa3+1,x
.4c46	d0 21		bne $4c69			bne 	_FMUseFloat
.4c48	b5 2c		lda $2c,x			lda 	NSStatus,x 					; check if it is 8 bit unsigned
.4c4a	15 2d		ora $2d,x			ora 	NSStatus+1,x
.4c4c	29 80		and #$80			and 	#$80
.4c4e	15 5c		ora $5c,x			ora 	NSMantissa3,x
.4c50	15 50		ora $50,x			ora 	NSMantissa2,x
.4c52	15 44		ora $44,x			ora 	NSMantissa1,x
.4c54	15 5d		ora $5d,x			ora 	NSMantissa3+1,x
.4c56	15 51		ora $51,x			ora 	NSMantissa2+1,x
.4c58	15 45		ora $45,x			ora 	NSMantissa1+1,x
.4c5a	d0 04		bne $4c60			bne 	_FMInt32
.4c5c	20 1b 4c	jsr $4c1b			jsr 	FloatInt8Multiply 			; use fast 8x8 multiply.
.4c5f	60		rts				rts
.4c60					_FMInt32:
.4c60	20 8a 4c	jsr $4c8a			jsr 	FloatMultiplyShort			; use the int32 one.
.4c63	18		clc				clc 								; fix it up if gone out of range
.4c64	75 68		adc $68,x			adc 	NSExponent,x
.4c66	95 68		sta $68,x			sta 	NSExponent,x
.4c68	60		rts				rts
.4c69					_FMUseFloat:
.4c69	20 d2 4c	jsr $4cd2			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.4c6c	f0 18		beq $4c86			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.4c6e	e8		inx				inx
.4c6f	20 d2 4c	jsr $4cd2			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.4c72	ca		dex				dex
.4c73	c9 00		cmp #$00			cmp 	#0
.4c75	f0 0c		beq $4c83			beq 	_FDSetZero
.4c77	20 8a 4c	jsr $4c8a			jsr 	FloatMultiplyShort 			; calculate the result.
.4c7a	75 68		adc $68,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.4c7c	18		clc				clc
.4c7d	75 69		adc $69,x			adc 	NSExponent+1,x
.4c7f	95 68		sta $68,x			sta 	NSExponent,x
.4c81	80 03		bra $4c86			bra 	_FDExit
.4c83					_FDSetZero:
.4c83	20 7d 4f	jsr $4f7d			jsr 	FloatSetZero 				; return 0
.4c86					_FDExit:
.4c86	20 d2 4c	jsr $4cd2			jsr 	FloatNormalise 				; normalise the result
.4c89	60		rts				rts
.4c8a					FloatMultiplyShort:
.4c8a	5a		phy				phy 								; save Y
.4c8b	20 60 4f	jsr $4f60			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.4c8e	20 79 4f	jsr $4f79			jsr 	FloatSetZeroMantissaOnly 	; set mantissa S[X] to zero
.4c91	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.4c93					_I32MLoop:
.4c93	b5 3a		lda $3a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.4c95	15 46		ora $46,x			ora 	NSMantissa1+2,x
.4c97	15 52		ora $52,x			ora 	NSMantissa2+2,x
.4c99	15 5e		ora $5e,x			ora 	NSMantissa3+2,x
.4c9b	f0 25		beq $4cc2			beq 	_I32MExit 					; exit if zero
.4c9d	b5 3a		lda $3a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.4c9f	29 01		and #$01			and 	#1
.4ca1	f0 0d		beq $4cb0			beq 	_I32MNoAdd
.4ca3	20 09 4d	jsr $4d09			jsr 	FloatAddTopTwoStack 		; if so add S[X+1] to S[X+0]
.4ca6	b5 5c		lda $5c,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.4ca8	10 06		bpl $4cb0			bpl 	_I32MNoAdd
.4caa					_I32ShiftRight:
.4caa	20 96 4f	jsr $4f96			jsr 	FloatShiftRight 			; shift S[X] right
.4cad	c8		iny				iny 								; increment shift count
.4cae	80 09		bra $4cb9			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.4cb0					_I32MNoAdd:
.4cb0	34 5d		bit $5d,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.4cb2	70 f6		bvs $4caa			bvs 	_I32ShiftRight 				; instead.
.4cb4	e8		inx				inx
.4cb5	20 8c 4f	jsr $4f8c			jsr 	FloatShiftLeft 				; shift additive S[X+1] left
.4cb8	ca		dex				dex
.4cb9					_I32MShiftUpper:
.4cb9	e8		inx				inx 								; shift S[X+2] right
.4cba	e8		inx				inx
.4cbb	20 96 4f	jsr $4f96			jsr 	FloatShiftRight
.4cbe	ca		dex				dex
.4cbf	ca		dex				dex
.4cc0	80 d1		bra $4c93			bra 	_I32MLoop 					; try again.
.4cc2					_I32MExit:
.4cc2	20 c8 4c	jsr $4cc8			jsr 	FloatCalculateSign
.4cc5	98		tya				tya 								; shift in A
.4cc6	7a		ply				ply 								; restore Y and exit
.4cc7	60		rts				rts
.4cc8					FloatCalculateSign:
.4cc8	b5 2c		lda $2c,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.4cca	16 2c		asl $2c,x			asl 	NSStatus,x 					; shift result left
.4ccc	55 2d		eor $2d,x			eor 	NSStatus+1,x
.4cce	0a		asl a				asl 	a 							; shift bit 7 into carry
.4ccf	76 2c		ror $2c,x			ror 	NSStatus,x 					; shift right into status byte.
.4cd1	60		rts				rts
.4cd2					FloatNormalise:
.4cd2	20 9f 4f	jsr $4f9f			jsr 	FloatIsZero 				; if zero exit
.4cd5	d0 07		bne $4cde			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.4cd7	16 2c		asl $2c,x			asl 	NSStatus,x 					; clear the sign bit.
.4cd9	76 2c		ror $2c,x			ror 	NSStatus,x 					; (no -0)
.4cdb	a9 00		lda #$00			lda 	#0 							; set Z flag
.4cdd	60		rts				rts
.4cde					_NSNormaliseOptimise:
.4cde	b5 5c		lda $5c,x			lda 	NSMantissa3,x 				; upper byte zero ?
.4ce0	d0 19		bne $4cfb			bne 	_NSNormaliseLoop
.4ce2	b5 50		lda $50,x			lda 	NSMantissa2,x 				; byte normalise
.4ce4	30 15		bmi $4cfb			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.4ce6	95 5c		sta $5c,x			sta 	NSMantissa3,x
.4ce8	b5 44		lda $44,x			lda 	NSMantissa1,x
.4cea	95 50		sta $50,x			sta 	NSMantissa2,x
.4cec	b5 38		lda $38,x			lda 	NSMantissa0,x
.4cee	95 44		sta $44,x			sta 	NSMantissa1,x
.4cf0	74 38		stz $38,x			stz 	NSMantissa0,x
.4cf2	b5 68		lda $68,x			lda 	NSExponent,x
.4cf4	38		sec				sec
.4cf5	e9 08		sbc #$08			sbc 	#8
.4cf7	95 68		sta $68,x			sta 	NSExponent,x
.4cf9	80 e3		bra $4cde			bra 	_NSNormaliseOptimise
.4cfb					_NSNormaliseLoop:
.4cfb	34 5c		bit $5c,x			bit 	NSMantissa3,x 				; bit 30 set ?
.4cfd	70 07		bvs $4d06			bvs 	_NSNExit 					; exit if so with Z flag clear
.4cff	20 8c 4f	jsr $4f8c			jsr 	FloatShiftLeft 				; shift mantissa left
.4d02	d6 68		dec $68,x			dec 	NSExponent,x 				; adjust exponent
.4d04	80 f5		bra $4cfb			bra 	_NSNormaliseLoop
.4d06					_NSNExit:
.4d06	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.4d08	60		rts				rts
.4d09					FloatAddTopTwoStack:
.4d09	18		clc				clc
.4d0a	b5 38		lda $38,x			lda		NSMantissa0,x
.4d0c	75 39		adc $39,x			adc 		NSMantissa0+1,x
.4d0e	95 38		sta $38,x			sta 	NSMantissa0,x
.4d10	b5 44		lda $44,x			lda		NSMantissa1,x
.4d12	75 45		adc $45,x			adc 		NSMantissa1+1,x
.4d14	95 44		sta $44,x			sta 	NSMantissa1,x
.4d16	b5 50		lda $50,x			lda		NSMantissa2,x
.4d18	75 51		adc $51,x			adc 		NSMantissa2+1,x
.4d1a	95 50		sta $50,x			sta 	NSMantissa2,x
.4d1c	b5 5c		lda $5c,x			lda		NSMantissa3,x
.4d1e	75 5d		adc $5d,x			adc 		NSMantissa3+1,x
.4d20	95 5c		sta $5c,x			sta 	NSMantissa3,x
.4d22	60		rts				rts
.4d23					FloatSubTopTwoStack:
.4d23	38		sec				sec
.4d24	b5 38		lda $38,x			lda		NSMantissa0,x
.4d26	f5 39		sbc $39,x			sbc 		NSMantissa0+1,x
.4d28	95 38		sta $38,x			sta 	NSMantissa0,x
.4d2a	b5 44		lda $44,x			lda		NSMantissa1,x
.4d2c	f5 45		sbc $45,x			sbc 		NSMantissa1+1,x
.4d2e	95 44		sta $44,x			sta 	NSMantissa1,x
.4d30	b5 50		lda $50,x			lda		NSMantissa2,x
.4d32	f5 51		sbc $51,x			sbc 		NSMantissa2+1,x
.4d34	95 50		sta $50,x			sta 	NSMantissa2,x
.4d36	b5 5c		lda $5c,x			lda		NSMantissa3,x
.4d38	f5 5d		sbc $5d,x			sbc 		NSMantissa3+1,x
.4d3a	95 5c		sta $5c,x			sta 	NSMantissa3,x
.4d3c	60		rts				rts
.4d3d					FloatInt32Add:
.4d3d	b5 2c		lda $2c,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.4d3f	55 2d		eor $2d,x			eor 	NSStatus+1,x
.4d41	30 04		bmi $4d47			bmi 	_DiffSigns
.4d43	20 09 4d	jsr $4d09			jsr		FloatAddTopTwoStack
.4d46	60		rts				rts
.4d47					_DiffSigns:
.4d47	20 23 4d	jsr $4d23			jsr 	FloatSubTopTwoStack 		; do a physical subtraction
.4d4a	34 5c		bit $5c,x			bit 	NSMantissa3,x 				; result is +ve, okay
.4d4c	10 07		bpl $4d55			bpl 	_AddExit
.4d4e	b5 2d		lda $2d,x			lda 	NSStatus+1,x 				; sign is that of 11th value
.4d50	95 2c		sta $2c,x			sta 	NSStatus,x
.4d52	20 46 4f	jsr $4f46			jsr 	FloatNegateMantissa 		; negate the mantissa and exit
.4d55					_AddExit:
.4d55	20 9f 4f	jsr $4f9f			jsr 	FloatIsZero 				; check for -0
.4d58	d0 02		bne $4d5c			bne 	_AddNonZero
.4d5a	74 2c		stz $2c,x			stz 	NSStatus,x
.4d5c					_AddNonZero:
.4d5c	60		rts				rts
=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.4d5d					FloatEncodeStart:
.4d5d	38		sec				sec
.4d5e	80 01		bra $4d61			bra 	FloatEncodeContinue+1
.4d60					FloatEncodeContinue:
.4d60	18		clc				clc
.4d61					FloatEncode:
.4d61	08		php				php 								; save reset flag.
.4d62	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.4d64	f0 15		beq $4d7b			beq 	_ENIsOkay
.4d66	c9 30		cmp #$30			cmp 	#"0"
.4d68	90 04		bcc $4d6e			bcc 	_ENBadNumber
.4d6a	c9 3a		cmp #$3a			cmp 	#"9"+1
.4d6c	90 0d		bcc $4d7b			bcc 	_ENIsOkay
.4d6e					_ENBadNumber:
.4d6e	28		plp				plp 								; throw saved reset
.4d6f	ad 24 04	lda $0424			lda 	encodeState 				; if in decimal mode, construct final number
.4d72	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.4d74	d0 03		bne $4d79			bne 	_ENFail
.4d76	4c f3 4d	jmp $4df3			jmp 	_ENConstructFinal
.4d79					_ENFail:
.4d79	18		clc				clc 								; not allowed
.4d7a	60		rts				rts
.4d7b					_ENIsOkay:
.4d7b	28		plp				plp 								; are we restarting
.4d7c	90 15		bcc $4d93			bcc 	_ENNoRestart
.4d7e					_ENStartEncode:
.4d7e	c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.4d80	f0 0c		beq $4d8e			beq 	_ENFirstDP
.4d82	29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.4d84	20 7f 4f	jsr $4f7f			jsr 	FloatSetByte 				; in single byte mode.
.4d87	a9 01		lda #$01			lda 	#ESTA_Low
.4d89					_ENExitChange:
.4d89	8d 24 04	sta $0424			sta 	encodeState 				; save new state
.4d8c	38		sec				sec
.4d8d	60		rts				rts
.4d8e					_ENFirstDP:
.4d8e	20 7d 4f	jsr $4f7d			jsr 	FloatSetZero 				; clear integer part
.4d91	80 3c		bra $4dcf			bra 	_ESTASwitchFloat			; go straight to float and exi
.4d93					_ENNoRestart:
.4d93	48		pha				pha 								; save digit or DP on stack.
.4d94	ad 24 04	lda $0424			lda 	encodeState 				; get current state
.4d97	c9 01		cmp #$01			cmp 	#ESTA_Low
.4d99	f0 09		beq $4da4			beq  	_ESTALowState
.4d9b	c9 02		cmp #$02			cmp 	#ESTA_High
.4d9d	f0 26		beq $4dc5			beq 	_ESTAHighState
.4d9f	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.4da1	f0 38		beq $4ddb			beq 	_ESTADecimalState
>4da3	db						.byte 	$DB 						; causes a break in the emulator
.4da4					_ESTALowState:
.4da4	68		pla				pla 								; get value back
.4da5	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.4da7	f0 26		beq $4dcf			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.4da9	29 0f		and #$0f			and 	#15 						; make digit
.4dab	8d 25 04	sta $0425			sta 	digitTemp 					; save it.
.4dae	b5 38		lda $38,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.4db0	0a		asl a				asl 	a
.4db1	0a		asl a				asl 	a
.4db2	75 38		adc $38,x			adc 	NSMantissa0,x
.4db4	0a		asl a				asl 	a
.4db5	6d 25 04	adc $0425			adc 	digitTemp
.4db8	95 38		sta $38,x			sta 	NSMantissa0,x
.4dba	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.4dbc	90 05		bcc $4dc3			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.4dbe	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.4dc0	8d 24 04	sta $0424			sta 	encodeState
.4dc3					_ESTANoSwitch:
.4dc3	38		sec				sec
.4dc4	60		rts				rts
.4dc5					_ESTAHighState:
.4dc5	68		pla				pla 								; get value back
.4dc6	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.4dc8	f0 05		beq $4dcf			beq 	_ESTASwitchFloat
.4dca	20 25 4e	jsr $4e25			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.4dcd	38		sec				sec
.4dce	60		rts				rts
.4dcf					_ESTASwitchFloat:
.4dcf	9c 26 04	stz $0426			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.4dd2	e8		inx				inx 								; zero the decimal additive.
.4dd3	20 7d 4f	jsr $4f7d			jsr 	FloatSetZero
.4dd6	ca		dex				dex
.4dd7	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.4dd9	80 ae		bra $4d89			bra 	_ENExitChange
.4ddb					_ESTADecimalState:
.4ddb	68		pla				pla 								; digit.
.4ddc	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 11th decimal point.
.4dde	f0 99		beq $4d79			beq 	_ENFail
.4de0	e8		inx				inx 								; put digit into fractional part of X+1
.4de1	20 25 4e	jsr $4e25			jsr 	ESTAShiftDigitIntoMantissa
.4de4	ca		dex				dex
.4de5	ee 26 04	inc $0426			inc 	decimalCount 				; bump the count of decimals
.4de8	ad 26 04	lda $0426			lda 	decimalCount 				; too many decimal digits.
.4deb	c9 0b		cmp #$0b			cmp 	#11
.4ded	f0 02		beq $4df1			beq 	_ESTADSFail
.4def	38		sec				sec
.4df0	60		rts				rts
.4df1					_ESTADSFail:
.4df1	18		clc				clc
.4df2	60		rts				rts
.4df3					_ENConstructFinal:
.4df3	ad 26 04	lda $0426			lda 	decimalCount 				; get decimal count
.4df6	f0 2b		beq $4e23			beq 	_ENCFExit 					; no decimals
.4df8	5a		phy				phy
.4df9	0a		asl a				asl 	a 							; x 4 and CLC
.4dfa	0a		asl a				asl 	a
.4dfb	6d 26 04	adc $0426			adc 	decimalCount
.4dfe	a8		tay				tay
.4dff	b9 8a 4a	lda $4a8a,y			lda 	FloatScalarTable-5,y 		; copy decimal scalar to X+2
.4e02	95 3a		sta $3a,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.4e04	b9 8b 4a	lda $4a8b,y			lda 	FloatScalarTable-5+1,y
.4e07	95 46		sta $46,x			sta 	NSMantissa1+2,x
.4e09	b9 8c 4a	lda $4a8c,y			lda 	FloatScalarTable-5+2,y
.4e0c	95 52		sta $52,x			sta 	NSMantissa2+2,x
.4e0e	b9 8d 4a	lda $4a8d,y			lda 	FloatScalarTable-5+3,y
.4e11	95 5e		sta $5e,x			sta 	NSMantissa3+2,x
.4e13	b9 8e 4a	lda $4a8e,y			lda 	FloatScalarTable-5+4,y
.4e16	95 6a		sta $6a,x			sta 	NSExponent+2,x
.4e18	74 2e		stz $2e,x			stz 	NSStatus+2,x 				; make +ve
.4e1a	e8		inx				inx 								; multiply decimal const by decimal scalar
.4e1b	e8		inx				inx
.4e1c	20 3d 4c	jsr $4c3d			jsr 	FloatMultiply
.4e1f	20 a1 49	jsr $49a1			jsr 	FloatAdd 					; add to integer part.
.4e22	7a		ply				ply
.4e23					_ENCFExit:
.4e23	18		clc				clc 								; reject the digit.
.4e24	60		rts				rts
.4e25					ESTAShiftDigitIntoMantissa:
.4e25	29 0f		and #$0f			and 	#15 						; save digit
.4e27	48		pha				pha
.4e28	b5 5c		lda $5c,x			lda 	NSMantissa3,x 				; push mantissa on stack
.4e2a	48		pha				pha
.4e2b	b5 50		lda $50,x			lda 	NSMantissa2,x
.4e2d	48		pha				pha
.4e2e	b5 44		lda $44,x			lda 	NSMantissa1,x
.4e30	48		pha				pha
.4e31	b5 38		lda $38,x			lda 	NSMantissa0,x
.4e33	48		pha				pha
.4e34	20 8c 4f	jsr $4f8c			jsr 	FloatShiftLeft 				; x 2
.4e37	20 8c 4f	jsr $4f8c			jsr 	FloatShiftLeft 				; x 4
.4e3a	18		clc				clc 								; pop mantissa and add
.4e3b	68		pla				pla
.4e3c	75 38		adc $38,x			adc 	NSMantissa0,x
.4e3e	95 38		sta $38,x			sta 	NSMantissa0,x
.4e40	68		pla				pla
.4e41	75 44		adc $44,x			adc 	NSMantissa1,x
.4e43	95 44		sta $44,x			sta 	NSMantissa1,x
.4e45	68		pla				pla
.4e46	75 50		adc $50,x			adc 	NSMantissa2,x
.4e48	95 50		sta $50,x			sta 	NSMantissa2,x
.4e4a	68		pla				pla
.4e4b	75 5c		adc $5c,x			adc 	NSMantissa3,x
.4e4d	95 5c		sta $5c,x			sta 	NSMantissa3,x 				; x 5
.4e4f	20 8c 4f	jsr $4f8c			jsr 	FloatShiftLeft 				; x 10
.4e52	68		pla				pla 								; add digit
.4e53	18		clc				clc
.4e54	75 38		adc $38,x			adc 	NSMantissa0,x
.4e56	95 38		sta $38,x			sta 	NSMantissa0,x
.4e58	90 0a		bcc $4e64			bcc 	_ESTASDExit
.4e5a	f6 44		inc $44,x			inc 	NSMantissa1,x
.4e5c	d0 06		bne $4e64			bne 	_ESTASDExit
.4e5e	f6 50		inc $50,x			inc 	NSMantissa2,x
.4e60	d0 02		bne $4e64			bne 	_ESTASDExit
.4e62	f6 5c		inc $5c,x			inc 	NSMantissa3,x
.4e64					_ESTASDExit:
.4e64	60		rts				rts
.0424					encodeState:
>0424							.fill 	1
.0425					digitTemp:
>0425							.fill 	1
.0426					decimalCount:
>0426							.fill 	1
.4e65					FloatToString:
.4e65	da		phx				phx
.4e66	5a		phy				phy 								; save code position
.4e67	8d 27 04	sta $0427			sta 	decimalPlaces	 			; save number of DPs.
.4e6a	9c 28 04	stz $0428			stz 	dbOffset 					; offset into decimal buffer = start.
.4e6d	b5 2c		lda $2c,x			lda 	NSStatus,x  				; is it -ve.
.4e6f	10 08		bpl $4e79			bpl 	_CNTSNotNegative
.4e71	29 7f		and #$7f			and 	#$7F 						; make +ve
.4e73	95 2c		sta $2c,x			sta 	NSStatus,x
.4e75	a9 2d		lda #$2d			lda 	#"-"
.4e77	80 02		bra $4e7b			bra 	_CNTMain
.4e79					_CNTSNotNegative:
.4e79	a9 20		lda #$20			lda 	#" "
.4e7b					_CNTMain:
.4e7b	20 dd 4e	jsr $4edd			jsr 	WriteDecimalBuffer
.4e7e	b5 68		lda $68,x			lda 	NSExponent,x 				; check if decimal
.4e80	f0 0d		beq $4e8f			beq 	_CNTSNotFloat
.4e82	e8		inx				inx 								; round up so we don't get too many 6.999999
.4e83	a9 01		lda #$01			lda 	#1
.4e85	20 7f 4f	jsr $4f7f			jsr 	FloatSetByte
.4e88	b5 67		lda $67,x			lda		NSExponent-1,x
.4e8a	95 68		sta $68,x			sta 	NSExponent,x
.4e8c	20 a1 49	jsr $49a1			jsr 	FloatAdd
.4e8f					_CNTSNotFloat:
.4e8f	20 bf 4e	jsr $4ebf			jsr 	MakePlusTwoString 			; do the integer part.
.4e92	20 5d 4b	jsr $4b5d			jsr 	FloatFractionalPart 		; get the fractional part
.4e95	20 d2 4c	jsr $4cd2			jsr 	FloatNormalise					; normalise , exit if zero
.4e98	f0 22		beq $4ebc			beq 	_CNTSExit
.4e9a	a9 2e		lda #$2e			lda 	#"."
.4e9c	20 dd 4e	jsr $4edd			jsr 	WriteDecimalBuffer 			; write decimal place
.4e9f					_CNTSDecimal:
.4e9f	ce 27 04	dec $0427			dec 	decimalPlaces 				; done all the decimals
.4ea2	30 18		bmi $4ebc			bmi 	_CNTSExit
.4ea4	e8		inx				inx 								; x 10.0
.4ea5	a9 0a		lda #$0a			lda 	#10
.4ea7	20 7f 4f	jsr $4f7f			jsr 	FloatSetByte
.4eaa	20 3d 4c	jsr $4c3d			jsr 	FloatMultiply
.4ead	20 bf 4e	jsr $4ebf			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.4eb0	20 5d 4b	jsr $4b5d			jsr 	FloatFractionalPart 		; get the fractional part
.4eb3	20 d2 4c	jsr $4cd2			jsr 	FloatNormalise 				; normalise it.
.4eb6	b5 68		lda $68,x			lda 	NSExponent,x 				; gone to zero, exit.
.4eb8	c9 d0		cmp #$d0			cmp 	#$D0 						; very small remainder, so don't bother.
.4eba	b0 e3		bcs $4e9f			bcs 	_CNTSDecimal 				; keep going.
.4ebc					_CNTSExit:
.4ebc	7a		ply				ply
.4ebd	fa		plx				plx
.4ebe	60		rts				rts
.4ebf					MakePlusTwoString:
.4ebf	da		phx				phx
.4ec0	20 60 4f	jsr $4f60			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.4ec3	e8		inx				inx 								; access it
.4ec4	e8		inx				inx
.4ec5	20 b8 4b	jsr $4bb8			jsr 	FloatIntegerPart 			; make it an integer
.4ec8	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.4eca	20 fc 4e	jsr $4efc			jsr 	ConvertInt32
.4ecd	a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.4ecf					_MPTSCopy:
.4ecf	bd 02 04	lda $0402,x			lda 	numberBuffer,x
.4ed2	20 dd 4e	jsr $4edd			jsr 	WriteDecimalBuffer
.4ed5	e8		inx				inx
.4ed6	bd 02 04	lda $0402,x			lda 	numberBuffer,x
.4ed9	d0 f4		bne $4ecf			bne 	_MPTSCopy
.4edb	fa		plx				plx
.4edc	60		rts				rts
.4edd					WriteDecimalBuffer:
.4edd	da		phx				phx
.4ede	ae 28 04	ldx $0428			ldx 	dbOffset
.4ee1	9d 29 04	sta $0429,x			sta 	decimalBuffer,x
.4ee4	9e 2a 04	stz $042a,x			stz 	decimalBuffer+1,x
.4ee7	ee 28 04	inc $0428			inc 	dbOffset
.4eea	fa		plx				plx
.4eeb	60		rts				rts
.0427					decimalPlaces:
>0427							.fill 	1
.0428					dbOffset:
>0428							.fill 	1
.0429					decimalBuffer:
>0429							.fill 	32
.4eec					ConvertInt16:
.4eec	85 38		sta $38				sta 	NSMantissa0 				; set up as 32 bit conversion
.4eee	86 44		stx $44				stx 	NSMantissa1
.4ef0	64 50		stz $50				stz 	NSMantissa2
.4ef2	64 5c		stz $5c				stz 	NSMantissa3
.4ef4	64 2c		stz $2c				stz 	NSStatus 					; positive integer
.4ef6	a2 00		ldx #$00			ldx 	#0 							; stack level
.4ef8	a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.4efa	80 00		bra $4efc			bra 	ConvertInt32
.4efc					ConvertInt32:
.4efc	5a		phy				phy
.4efd	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.4eff	24 2c		bit $2c				bit 	NSStatus 					; output a - if not negative.
.4f01	10 08		bpl $4f0b			bpl 	_CI32NotNeg
.4f03	48		pha				pha
.4f04	a9 2d		lda #$2d			lda 	#'-'
.4f06	99 02 04	sta $0402,y			sta 	numberBuffer,y
.4f09	c8		iny				iny
.4f0a	68		pla				pla
.4f0b					_CI32NotNeg:
.4f0b	20 19 4f	jsr $4f19			jsr 	_CI32DivideConvert 			; recursive conversion
.4f0e	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.4f10	99 02 04	sta $0402,y			sta 	numberBuffer,y
.4f13	7a		ply				ply
.4f14	a2 04		ldx #$04			ldx 	#numberBuffer >> 8 			; return address in XA
.4f16	a9 02		lda #$02			lda 	#numberBuffer & $FF
.4f18	60		rts				rts
.4f19					_CI32DivideConvert:
.4f19	e8		inx				inx 								; write to next slot up
.4f1a	20 7f 4f	jsr $4f7f			jsr 	FloatSetByte 		 		; write the base out.
.4f1d	ca		dex				dex
.4f1e	20 13 4b	jsr $4b13			jsr 	Int32Divide 				; divide
.4f21	b5 38		lda $38,x			lda 	NSMantissa0,x 				; save remainder
.4f23	48		pha				pha
.4f24	20 02 4b	jsr $4b02			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.4f27	20 9f 4f	jsr $4f9f			jsr 	FloatIsZero 				; is it zero ?
.4f2a	f0 05		beq $4f31			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.4f2c	b5 39		lda $39,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.4f2e	20 19 4f	jsr $4f19			jsr 	_CI32DivideConvert 			; and recusrively call.
.4f31					_CI32NoRecurse:
.4f31	68		pla				pla 								; remainder
.4f32	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.4f34	90 02		bcc $4f38			bcc 	_CI32NotHex
.4f36	69 26		adc #$26			adc 	#6+32
.4f38					_CI32NotHex:
.4f38	69 30		adc #$30			adc 	#48
.4f3a	99 02 04	sta $0402,y			sta 	numberBuffer,y 				; write out and exit
.4f3d	c8		iny				iny
.4f3e	60		rts				rts
.4f3f					FloatNegate:
.4f3f	b5 2c		lda $2c,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.4f41	49 80		eor #$80			eor 	#$80  						; toggle the negative flag
.4f43	95 2c		sta $2c,x			sta 	NSStatus,x
.4f45	60		rts				rts
.4f46					FloatNegateMantissa:
.4f46	38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.4f47	a9 00		lda #$00			lda 	#0
.4f49	f5 38		sbc $38,x			sbc 	NSMantissa0,x
.4f4b	95 38		sta $38,x			sta 	NSMantissa0,x
.4f4d	a9 00		lda #$00			lda 	#0
.4f4f	f5 44		sbc $44,x			sbc 	NSMantissa1,x
.4f51	95 44		sta $44,x			sta 	NSMantissa1,x
.4f53	a9 00		lda #$00			lda 	#0
.4f55	f5 50		sbc $50,x			sbc 	NSMantissa2,x
.4f57	95 50		sta $50,x			sta 	NSMantissa2,x
.4f59	a9 00		lda #$00			lda 	#0
.4f5b	f5 5c		sbc $5c,x			sbc 	NSMantissa3,x
.4f5d	95 5c		sta $5c,x			sta 	NSMantissa3,x
.4f5f	60		rts				rts
.4f60					FloatShiftUpTwo:
.4f60	b5 38		lda $38,x			lda 	NSMantissa0,x
.4f62	95 3a		sta $3a,x			sta 	NSMantissa0+2,x
.4f64	b5 44		lda $44,x			lda 	NSMantissa1,x
.4f66	95 46		sta $46,x			sta 	NSMantissa1+2,x
.4f68	b5 50		lda $50,x			lda 	NSMantissa2,x
.4f6a	95 52		sta $52,x			sta 	NSMantissa2+2,x
.4f6c	b5 5c		lda $5c,x			lda 	NSMantissa3,x
.4f6e	95 5e		sta $5e,x			sta 	NSMantissa3+2,x
.4f70	b5 68		lda $68,x			lda 	NSExponent,x
.4f72	95 6a		sta $6a,x			sta 	NSExponent+2,x
.4f74	b5 2c		lda $2c,x			lda 	NSStatus,x
.4f76	95 2e		sta $2e,x			sta 	NSStatus+2,x
.4f78	60		rts				rts
.4f79					FloatSetZeroMantissaOnly:
.4f79	74 38		stz $38,x			stz 	NSMantissa0,x
.4f7b	80 08		bra $4f85			bra 	FloatZero13
.4f7d					FloatSetZero:
.4f7d	a9 00		lda #$00			lda 	#0
.4f7f					FloatSetByte:
.4f7f	74 68		stz $68,x			stz 	NSExponent,x 				; zero exponent, as +ve integer value.
.4f81					FloatSetMantissa:
.4f81	95 38		sta $38,x			sta 	NSMantissa0,x 				; zero mantissa
.4f83	74 2c		stz $2c,x			stz 	NSStatus,x
.4f85					FloatZero13:
.4f85	74 44		stz $44,x			stz 	NSMantissa1,x
.4f87	74 50		stz $50,x			stz 	NSMantissa2,x
.4f89	74 5c		stz $5c,x			stz 	NSMantissa3,x
.4f8b	60		rts				rts
.4f8c					FloatShiftLeft:
.4f8c	18		clc				clc
.4f8d					FloatRotateLeft:
.4f8d	36 38		rol $38,x			rol 	NSMantissa0,x
.4f8f	36 44		rol $44,x			rol		NSMantissa1,x
.4f91	36 50		rol $50,x			rol		NSMantissa2,x
.4f93	36 5c		rol $5c,x			rol		NSMantissa3,x
.4f95	60		rts				rts
.4f96					FloatShiftRight:
.4f96	56 5c		lsr $5c,x			lsr 	NSMantissa3,x
.4f98	76 50		ror $50,x			ror		NSMantissa2,x
.4f9a	76 44		ror $44,x			ror		NSMantissa1,x
.4f9c	76 38		ror $38,x			ror		NSMantissa0,x
.4f9e	60		rts				rts
.4f9f					FloatIsZero:
.4f9f	b5 5c		lda $5c,x			lda 	NSMantissa3,x
.4fa1	15 50		ora $50,x			ora		NSMantissa2,x
.4fa3	15 44		ora $44,x			ora		NSMantissa1,x
.4fa5	15 38		ora $38,x			ora		NSMantissa0,x
.4fa7	60		rts				rts

;******  End of listing
