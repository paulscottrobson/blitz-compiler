; ************************************************************************************************
; ************************************************************************************************
;
;		Name:		get.asm
;		Purpose:	Support functions.
;		Created:	15th April 2023
;		Reviewed: 	No
;		Author:		Paul Robson (paul@robsons.org.uk)
;
; ************************************************************************************************
; ************************************************************************************************

; ************************************************************************************************
;
;											Code Reads
;
; ************************************************************************************************

		.section code

; ************************************************************************************************
;
;										Examine next character
;
; ************************************************************************************************

LookNext:
		lda 	(srcPtr) 
		rts

; ************************************************************************************************
;
;								Examine next non space character
;
; ************************************************************************************************		

LookNextNonSpace:
		lda 	(srcPtr)
		cmp		#' '
		beq 	_LNNSkip
		cmp 	#0
		rts
_LNNSkip:
		jsr 	GetNext
		bra 	LookNextNonSpace
				
; ************************************************************************************************
;
;										Get next character
;
; ************************************************************************************************

GetNext:
		lda 	(srcPtr) 					; get next
		inc 	srcPtr
		bne 	_GNSkip
		inc 	srcPtr+1
_GNSkip:		
		cmp 	#0
		rts
		
; ************************************************************************************************
;
;								  Get next non-space character
;
; ************************************************************************************************

GetNextNonSpace:
		jsr 	GetNext
		cmp 	#' '
		beq 	GetNextNonSpace
		cmp 	#0
		rts

; ************************************************************************************************
;
;						   Check if digit (CS = true, CC = false)
;
; ************************************************************************************************

CharIsDigit:
		cmp 	#"0"
		bcc 	CCFalse
		cmp 	#"9"+1
		bcs 	CCFalse
CCTrue:
		sec
		rts
CCFalse:
		clc
		rts

; ************************************************************************************************
;
;						   Check if alpha (CS = true, CC = false)
;
; ************************************************************************************************

CharIsAlpha:
		cmp 	#"A"
		bcc 	CCFalse
		cmp 	#"Z"+1
		bcs 	CCFalse
		bra 	CCTrue

; ************************************************************************************************
;
;				Convert to hex-style, e.g. 0-9 => 0-9, A-Z 10-35, CS true, CC false
;
; ************************************************************************************************

ConvertHexStyle:
		sec
		sbc 	#"0" 						; check in range 0-9 first
		bcc 	CCFalse
		cmp 	#9+1
		bcc 	CCTrue
		;
		sec 								; shift into hex space A=>0 Z=>25
		sbc 	#"A"-"0"
		bcc 	CCFalse
		cmp 	#26 						; past Z ?
		bcs 	CCFalse
		adc 	#10 						; make valid quasi-hex 0-35
		bra 	CCTrue

		.send 	code

; ************************************************************************************************
;
;									Changes and Updates
;
; ************************************************************************************************
;
;		Date			Notes
;		==== 			=====
;
; ************************************************************************************************

