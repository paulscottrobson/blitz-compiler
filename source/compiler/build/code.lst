
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass -q -c -Wall -o build/code.prg -L build/code.lst -l build/code.lbl testing/testing.asm /home/paulr/Projects/blitz-compiler/documents/../bin/compiler.library /home/paulr/Projects/blitz-compiler/documents/../bin/common.library /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library testing/testend.asm
; Wed Oct 11 17:05:13 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: testing/testing.asm

=$8000					StartWorkSpace = $8000
=$9f00					EndWorkspace = $9F00
.0801					WrapperBoot:
.0801	a2 0d		ldx #$0d			ldx 	#APIDesc & $FF
.0803	a0 08		ldy #$08			ldy 	#APIDesc >> 8
.0805	20 77 09	jsr $0977			jsr 	StartCompiler
.0808					_WBError:
.0808	b0 fe		bcs $0808			bcs 	_WBError
.080a	4c ff ff	jmp $ffff			jmp 	$FFFF
.080d					APIDesc:
>080d	11 08						.word 	TestAPI 					; the testing API.
>080f	80						.byte 	StartWorkSpace >> 8 		; start of workspace for compiler
>0810	9f						.byte 	EndWorkspace >> 8 			; end of workspace for compiler

;******  Processing file: testing/api/api.asm

=$a000					PCodeMemory = $A000
.0811					TestAPI:
.0811	c9 00		cmp #$00			cmp 	#BLC_OPENIN
.0813	f0 19		beq $082e			beq 	_TAOpenIn
.0815	c9 01		cmp #$01			cmp 	#BLC_CLOSEIN
.0817	f0 1d		beq $0836			beq 	_TACloseIn
.0819	c9 02		cmp #$02			cmp 	#BLC_READIN
.081b	f0 1a		beq $0837			beq 	_TARead
.081d	c9 03		cmp #$03			cmp 	#BLC_RESETOUT
.081f	f0 19		beq $083a			beq 	_TAResetOut
.0821	c9 04		cmp #$04			cmp 	#BLC_CLOSEOUT
.0823	f0 22		beq $0847			beq 	_TACloseOut
.0825	c9 05		cmp #$05			cmp 	#BLC_WRITEOUT
.0827	f0 28		beq $0851			beq 	_TAWriteByte
.0829	c9 06		cmp #$06			cmp 	#BLC_PRINTCHAR
.082b	f0 2e		beq $085b			beq 	_TAPrintScreen
>082d	db						.byte 	$DB 						; causes a break in the emulator
.082e					_TAOpenIn:
.082e	a9 e9		lda #$e9			lda 	#((EndProgram+2) & $FF)
.0830	85 22		sta $22				sta 	0+srcInputPtr
.0832	a9 1e		lda #$1e			lda 	#((EndProgram+2) >> 8) & $FF
.0834	85 23		sta $23				sta 	1+srcInputPtr
.0836					_TACloseIn:
.0836	60		rts				rts
.0837					_TARead:
.0837	4c 5f 08	jmp $085f			jmp 	ReadNextLine
.083a					_TAResetOut:
.083a	a9 01		lda #$01			lda 	#1
.083c	85 00		sta $00				sta 	0
.083e	a9 00		lda #$00			lda 	#((PCodeMemory) & $FF)
.0840	85 28		sta $28				sta 	0+objPtr
.0842	a9 a0		lda #$a0			lda 	#((PCodeMemory) >> 8) & $FF
.0844	85 29		sta $29				sta 	1+objPtr
.0846	60		rts				rts
.0847					_TACloseOut:
.0847	a9 a0		lda #$a0			lda 	#PCodeMemory >> 8
.0849	a6 28		ldx $28				ldx 	objPtr
.084b	a4 29		ldy $29				ldy 	objPtr+1
.084d	20 84 08	jsr $0884			jsr 	APISaveMemory
.0850	60		rts				rts
.0851					_TAWriteByte:
.0851	8a		txa				txa
.0852	92 28		sta ($28)			sta 	(objPtr)
.0854	e6 28		inc $28				inc 	objPtr
.0856	d0 02		bne $085a			bne 	_HWOWBNoCarry
.0858	e6 29		inc $29				inc 	objPtr+1
.085a					_HWOWBNoCarry:
.085a	60		rts				rts
.085b					_TAPrintScreen:
.085b	8a		txa				txa
.085c	4c d2 ff	jmp $ffd2			jmp 	$FFD2
.0022					srcInputPtr:
>0022							.fill 	2

;******  Return to file: testing/testing.asm


;******  Processing file: testing/api/line.asm

.085f					ReadNextLine:
.085f	b2 22		lda ($22)			lda 	(srcInputPtr) 				; reached the end of the program (address link = $0000)
.0861	a0 01		ldy #$01			ldy 	#1
.0863	11 22		ora ($22),y			ora 	(srcInputPtr),y
.0865	d0 02		bne $0869			bne 	_RLAHaveData
.0867	18		clc				clc
.0868	60		rts				rts									; end of file.
.0869					_RLAHaveData:
.0869	a6 22		ldx $22				ldx 	srcInputPtr 				; remember the line start
.086b	a4 23		ldy $23				ldy 	srcInputPtr+1
.086d	5a		phy				phy
.086e	a0 04		ldy #$04			ldy 	#4 							; must be at least four bytes (address/line#)
.0870					_RNLRead:
.0870	b1 22		lda ($22),y			lda 	(srcInputPtr),y 			; find the end of the line.
.0872	c8		iny				iny
.0873	c9 00		cmp #$00			cmp 	#0
.0875	d0 f9		bne $0870			bne 	_RNLRead
.0877	98		tya				tya 								; advance src input pointer to next.
.0878	18		clc				clc
.0879	65 22		adc $22				adc 	srcInputPtr
.087b	85 22		sta $22				sta 	srcInputPtr
.087d	90 02		bcc $0881			bcc 	_RNLNoCarry
.087f	e6 23		inc $23				inc 	srcInputPtr+1
.0881					_RNLNoCarry:
.0881	7a		ply				ply 								; address of line now in YX.
.0882	38		sec				sec
.0883	60		rts				rts

;******  Return to file: testing/testing.asm


;******  Processing file: testing/api/save.asm

.0884					APISaveMemory:
.0884	da		phx				phx
.0885	5a		phy				phy
.0886	48		pha				pha
.0887	a9 00		lda #$00			lda 	#0 							; set LFS
.0889	a2 08		ldx #$08			ldx 	#8
.088b	a0 00		ldy #$00			ldy 	#0
.088d	20 ba ff	jsr $ffba			jsr 	$FFBA
.0890	a9 08		lda #$08			lda 	#8 							; set file name
.0892	a2 a6		ldx #$a6			ldx 	#SaveName & $FF
.0894	a0 08		ldy #$08			ldy 	#SaveName >> 8
.0896	20 bd ff	jsr $ffbd			jsr 	$FFBD
.0899	68		pla				pla 								; set up the start address.
.089a	85 2b		sta $2b				sta 	zTemp0+1
.089c	64 2a		stz $2a				stz 	zTemp0
.089e	a9 2a		lda #$2a			lda 	#zTemp0 					; from index.
.08a0	7a		ply				ply 								; end in YX
.08a1	fa		plx				plx
.08a2	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; write out.
.08a5	60		rts				rts
.08a6					SaveName:
>08a6	43 4f 44 45 2e 42 49 4e				.text 	"CODE.BIN"

;******  Return to file: testing/testing.asm


;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/compiler.library

=0					BLC_OPENIN = 0
=1					BLC_CLOSEIN = 1
=2					BLC_READIN = 2
=3					BLC_RESETOUT = 3
=4					BLC_CLOSEOUT = 4
=5					BLC_WRITEOUT = 5
=6					BLC_PRINTCHAR = 6
.0024					srcPtr:
>0024							.fill 	2
.0400					currentLineNumber:
>0400							.fill 	2
.08ae					InlineNonDecimal:
.08ae	a2 02		ldx #$02			ldx 	#2 							; get size in X
.08b0	c9 25		cmp #$25			cmp 	#"%"
.08b2	f0 02		beq $08b6			beq 	_INDBinary
.08b4	a2 10		ldx #$10			ldx 	#16
.08b6					_INDBinary:
.08b6	85 2c		sta $2c				sta 	zTemp1 						; size => zTemp1
.08b8	64 2d		stz $2d				stz 	zTemp1+1 					; count => zTemp1+1, at least 1 !
.08ba	64 2a		stz $2a				stz 	zTemp0 						; zero result
.08bc	64 2b		stz $2b				stz 	zTemp0+1
.08be					_INDLoop:
.08be	20 60 12	jsr $1260			jsr 	LookNext 					; check next character
.08c1	20 9c 12	jsr $129c			jsr 	ConvertHexStyle		 		; convert into range 0-35 for 0-9A-Z
.08c4	90 1f		bcc $08e5			bcc		_INDDone 					; didn't convert
.08c6	c5 2c		cmp $2c				cmp 	zTemp1 						; size too large ?
.08c8	b0 1b		bcs $08e5			bcs 	_INDDone
.08ca	20 f4 08	jsr $08f4			jsr 	_INDShift 					; x 2 or x 16
.08cd	e0 02		cpx #$02			cpx 	#2
.08cf	f0 09		beq $08da			beq 	_INDNotHex
.08d1	20 f4 08	jsr $08f4			jsr 	_INDShift
.08d4	20 f4 08	jsr $08f4			jsr 	_INDShift
.08d7	20 f4 08	jsr $08f4			jsr 	_INDShift
.08da					_INDNotHex:
.08da	05 2a		ora $2a				ora 	zTemp0 						; or digit into result
.08dc	85 2a		sta $2a				sta 	zTemp0
.08de	20 71 12	jsr $1271			jsr 	GetNext 					; consume
.08e1	e6 2d		inc $2d				inc 	zTemp1+1 					; bump count
.08e3	80 d9		bra $08be			bra 	_INDLoop
.08e5					_INDDone:
.08e5	a5 2d		lda $2d				lda 	zTemp1+1 					; done at least 1 ?
.08e7	f0 08		beq $08f1			beq 	_INDError
.08e9	a4 2b		ldy $2b				ldy 	zTemp0+1 					; push constant
.08eb	a5 2a		lda $2a				lda 	zTemp0
.08ed	20 16 0a	jsr $0a16			jsr 	PushIntegerYA
.08f0	60		rts				rts
.08f1					_INDError:
.08f1	4c 65 17	jmp $1765		jmp	ErrorV_syntax
.08f4					_INDShift:
.08f4	06 2a		asl $2a				asl 	zTemp0
.08f6	26 2b		rol $2b				rol 	zTemp0+1
.08f8	60		rts				rts
.08f9					GetLineNumber:
.08f9	ac 01 04	ldy $0401			ldy 	currentLineNumber+1
.08fc	ad 00 04	lda $0400			lda 	currentLineNumber
.08ff	60		rts				rts
.0900					WriteCodeByte:
.0900	48		pha				pha 								; save on stack
.0901	da		phx				phx
.0902	5a		phy				phy
.0903	aa		tax				tax
.0904	a9 05		lda #$05			lda 	#BLC_WRITEOUT
.0906	20 13 0a	jsr $0a13			jsr 	CallAPIHandler
.0909	7a		ply				ply 								; restore from stack
.090a	fa		plx				plx
.090b	68		pla				pla
.090c	60		rts				rts
.090d					PrintCharacter
.090d	48		pha				pha
.090e	da		phx				phx
.090f	5a		phy				phy
.0910	aa		tax				tax
.0911	a9 06		lda #$06			lda 	#BLC_PRINTCHAR
.0913	20 13 0a	jsr $0a13			jsr 	CallAPIHandler
.0916	7a		ply				ply
.0917	fa		plx				plx
.0918	68		pla				pla
.0919	60		rts				rts
.091a					ProcessNewLine:
.091a	86 2a		stx $2a				stx 	zTemp0 						; save address in zTemp0
.091c	84 2b		sty $2b				sty 	zTemp0+1
.091e	18		clc				clc 								; set the srcPtr to the start of the actual code (e.g. offset 4)
.091f	8a		txa				txa
.0920	69 04		adc #$04			adc 	#4
.0922	85 24		sta $24				sta 	srcPtr
.0924	98		tya				tya
.0925	69 00		adc #$00			adc 	#0
.0927	85 25		sta $25				sta 	srcPtr+1
.0929	a0 02		ldy #$02			ldy 	#2							; read and save line number
.092b	b1 2a		lda ($2a),y			lda 	(zTemp0),y
.092d	8d 00 04	sta $0400			sta 	currentLineNumber
.0930	c8		iny				iny
.0931	b1 2a		lda ($2a),y			lda 	(zTemp0),y
.0933	8d 01 04	sta $0401			sta 	currentLineNumber+1
.0936	60		rts				rts
.0937					BufferClear:
.0937	9c 02 04	stz $0402			stz 	bufferSize
.093a	60		rts				rts
.093b					BufferWrite:
.093b	da		phx				phx
.093c	ae 02 04	ldx $0402			ldx 	bufferSize
.093f	9d 03 04	sta $0403,x			sta 	dataBuffer,x
.0942	ee 02 04	inc $0402			inc 	bufferSize
.0945	fa		plx				plx
.0946	60		rts				rts
.0947					BufferOutput:
.0947	ad 02 04	lda $0402			lda 	bufferSize
.094a	20 00 09	jsr $0900			jsr 	WriteCodeByte
.094d	a2 00		ldx #$00			ldx 	#0
.094f					_BOLoop:
.094f	ec 02 04	cpx $0402			cpx 	bufferSize
.0952	f0 09		beq $095d			beq 	_BOExit
.0954	bd 03 04	lda $0403,x			lda 	dataBuffer,x
.0957	20 00 09	jsr $0900			jsr 	WriteCodeByte
.095a	e8		inx				inx
.095b	80 f2		bra $094f			bra 	_BOLoop
.095d					_BOExit:
.095d	60		rts				rts
.0402					bufferSize:
>0402							.fill 	1
.0403					dataBuffer:
>0403							.fill 	256
.095e					CheckNextComma:
.095e	a9 2c		lda #$2c			lda	 	#","
.0960	80 06		bra $0968			bra 	CheckNextA
.0962					CheckNextRParen:
.0962	a9 29		lda #$29			lda	 	#")"
.0964	80 02		bra $0968			bra 	CheckNextA
.0966					CheckNextLParen:
.0966	a9 28		lda #$28			lda 	#"("
.0968					CheckNextA:
.0968	8d 03 05	sta $0503			sta 	checkCharacter 				; save test character
.096b					_CNALoop:
.096b	20 7c 12	jsr $127c			jsr 	GetNextNonSpace 			; get next skipping spaces.
.096e	cd 03 05	cmp $0503			cmp 	checkCharacter 				; matches ?
.0971	f0 03		beq $0976			beq 	_CNAExit
.0973	4c 65 17	jmp $1765		jmp	ErrorV_syntax
.0976					_CNAExit:
.0976	60		rts				rts
.0503					checkCharacter:
>0503							.fill 	1
.0977					StartCompiler:
.0977	86 2a		stx $2a				stx 	zTemp0 						; access API
.0979	84 2b		sty $2b				sty 	zTemp0+1
.097b	a0 0b		ldy #$0b			ldy 	#CompilerErrorHandler >> 8 	; set error handler to compiler one.
.097d	a2 cf		ldx #$cf			ldx 	#CompilerErrorHandler & $FF
.097f	20 3e 17	jsr $173e			jsr 	SetErrorHandler
.0982	a0 01		ldy #$01			ldy 	#1 							; copy API vector
.0984	b2 2a		lda ($2a)			lda 	(zTemp0)
.0986	8d 05 05	sta $0505			sta 	APIVector
.0989	b1 2a		lda ($2a),y			lda 	(zTemp0),y
.098b	8d 06 05	sta $0506			sta 	APIVector+1
.098e	c8		iny				iny 								; copy data area range.
.098f	b1 2a		lda ($2a),y			lda 	(zTemp0),y
.0991	8d 07 05	sta $0507			sta 	compilerStartHigh
.0994	c8		iny				iny
.0995	b1 2a		lda ($2a),y			lda 	(zTemp0),y
.0997	8d 08 05	sta $0508			sta 	compilerEndHigh
.099a	ba		tsx				tsx 								; save stack pointer
.099b	8e 04 05	stx $0504			stx 	compilerSP
.099e	20 00 16	jsr $1600			jsr 	STRReset 					; reset storage (line#, variable)
.09a1	a9 00		lda #$00			lda 	#BLC_OPENIN					; reset data input
.09a3	20 13 0a	jsr $0a13			jsr 	CallAPIHandler
.09a6	a9 03		lda #$03			lda 	#BLC_RESETOUT 				; reset data output.
.09a8	20 13 0a	jsr $0a13			jsr 	CallAPIHandler
.09ab	a9 d5		lda #$d5			lda 	#PCD_CMD_VARSPACE
.09ad	20 00 09	jsr $0900			jsr 	WriteCodeByte
.09b0	a9 00		lda #$00			lda 	#0
.09b2	20 00 09	jsr $0900			jsr 	WriteCodeByte
.09b5	20 00 09	jsr $0900			jsr 	WriteCodeByte
.09b8					MainCompileLoop:
.09b8	a9 02		lda #$02			lda 	#BLC_READIN 				; read next line into the buffer.
.09ba	20 13 0a	jsr $0a13			jsr 	CallAPIHandler
.09bd	90 31		bcc $09f0			bcc 	SaveCodeAndExit 			; end of source.
.09bf	20 1a 09	jsr $091a			jsr 	ProcessNewLine 				; set up pointer and line number.
.09c2	20 f9 08	jsr $08f9			jsr 	GetLineNumber 				; get line #
.09c5	20 ea 13	jsr $13ea			jsr 	STRMarkLine 				; remember the code position and number of this line.
.09c8	a9 a6		lda #$a6			lda 	#PCD_NEWCMD_LINE 			; generate new command line
.09ca	20 00 09	jsr $0900			jsr 	WriteCodeByte
.09cd					_MCLSameLine:
.09cd	20 7c 12	jsr $127c			jsr 	GetNextNonSpace 			; get the first character.
.09d0	f0 e6		beq $09b8			beq 	MainCompileLoop 			; end of line, get next line.
.09d2	c9 3a		cmp #$3a			cmp 	#":"						; if : then loop back.
.09d4	f0 f7		beq $09cd			beq 	_MCLSameLine
.09d6	c9 00		cmp #$00			cmp 	#0 							; if ASCII then check for implied LET.
.09d8	10 0c		bpl $09e6			bpl 	_MCLCheckAssignment
.09da	a2 34		ldx #$34			ldx 	#CommandTables & $FF 		; do command tables.
.09dc	a0 0e		ldy #$0e			ldy 	#CommandTables >> 8
.09de	20 02 11	jsr $1102			jsr 	GeneratorProcess
.09e1	b0 ea		bcs $09cd			bcs 	_MCLSameLine 				; keep trying to compile the line.
.09e3					_MCLSyntax:
.09e3	4c 65 17	jmp $1765		jmp	ErrorV_syntax
.09e6					_MCLCheckAssignment:
.09e6	20 92 12	jsr $1292			jsr 	CharIsAlpha 				; if not alpha then syntax error
.09e9	90 f8		bcc $09e3			bcc 	_MCLSyntax
.09eb	20 b8 13	jsr $13b8			jsr 	CommandLETHaveFirst  		; LET first character, do assign
.09ee	80 dd		bra $09cd			bra		_MCLSameLine 				; loop back.
.09f0					SaveCodeAndExit:
.09f0	a9 01		lda #$01			lda 	#BLC_CLOSEIN				; finish input.
.09f2	20 13 0a	jsr $0a13			jsr 	CallAPIHandler
.09f5	a9 ff		lda #$ff			lda 	#$FF 						; fake line number $FFFF for forward THEN.
.09f7	a8		tay				tay
.09f8	20 ea 13	jsr $13ea			jsr 	STRMarkLine
.09fb	a9 c5		lda #$c5			lda 	#PCD_EXIT 					; add an END
.09fd	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0a00	a9 ff		lda #$ff			lda 	#$FF 						; add end marker
.0a02	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0a05	20 2c 0d	jsr $0d2c			jsr 	FixBranches 				; fix up GOTO/GOSUB etc.
.0a08	a9 04		lda #$04			lda 	#BLC_CLOSEOUT 				; close output store
.0a0a	20 13 0a	jsr $0a13			jsr 	CallAPIHandler
.0a0d	18		clc				clc 								; CC = success
.0a0e					ExitCompiler:
.0a0e	ae 04 05	ldx $0504			ldx 	compilerSP 					; reload SP and exit.
.0a11	9a		txs				txs
.0a12	60		rts				rts
.0a13					CallAPIHandler:
.0a13	6c 05 05	jmp ($0505)			jmp 	(APIVector)
.0504					compilerSP:
>0504							.fill 	1
.0505					APIVector:
>0505							.fill 	2
.0507					compilerStartHigh:
>0507							.fill 	1
.0508					compilerEndHigh:
>0508							.fill 	1
.0a16					PushIntegerYA:
.0a16	c0 00		cpy #$00			cpy 	#0 							; 0-255
.0a18	f0 0f		beq $0a29			beq 	PushIntegerA
.0a1a	48		pha				pha
.0a1b	a9 cd		lda #$cd			lda 	#PCD_CMD_WORD 				; send .word
.0a1d	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0a20	68		pla				pla 								; then LSB
.0a21	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0a24	98		tya				tya 								; then MSB
.0a25	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0a28	60		rts				rts
.0a29					PushIntegerA:
.0a29	c9 40		cmp #$40			cmp 	#64 						; if > 64 send byte as is
.0a2b	90 07		bcc $0a34			bcc 	_PIWriteA
.0a2d	48		pha				pha
.0a2e	a9 cc		lda #$cc			lda 	#PCD_CMD_BYTE 				; send .byte
.0a30	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0a33	68		pla				pla
.0a34					_PIWriteA:
.0a34	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0a37	60		rts				rts
.0a38					PushFloatCommand:
.0a38	a9 ce		lda #$ce			lda 	#PCD_CMD_FLOAT 				; write CMD_FLOAT
.0a3a	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0a3d	b5 6c		lda $6c,x			lda 	NSExponent,x 				; and the data
.0a3f	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0a42	b5 3c		lda $3c,x			lda 	NSMantissa0,x
.0a44	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0a47	b5 48		lda $48,x			lda 	NSMantissa1,x
.0a49	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0a4c	b5 54		lda $54,x			lda 	NSMantissa2,x
.0a4e	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0a51	b5 30		lda $30,x			lda 	NSStatus,x 					; with sign packed in byte 3 MSB
.0a53	29 80		and #$80			and 	#$80
.0a55	15 60		ora $60,x			ora 	NSMantissa3,x
.0a57	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0a5a	60		rts				rts
.0a5b					CreateVariableRecord:
.0a5b	48		pha				pha
.0a5c	ad 13 05	lda $0513			lda 	freeVariableMemory 		; push current free address on stack.
.0a5f	48		pha				pha
.0a60	ad 14 05	lda $0514			lda 	freeVariableMemory+1
.0a63	48		pha				pha
.0a64	ad 11 05	lda $0511			lda 	variableListEnd  		; copy end of list to zTemp0
.0a67	85 2a		sta $2a				sta 	zTemp0
.0a69	ad 12 05	lda $0512			lda 	variableListEnd+1
.0a6c	85 2b		sta $2b				sta 	zTemp0+1
.0a6e	a9 06		lda #$06			lda 	#6 						; default size if 6 (offset link 3 bytes)
.0a70	92 2a		sta ($2a)			sta 	(zTemp0)
.0a72	98		tya				tya
.0a73	a0 02		ldy #$02			ldy 	#2 						; write out the name.
.0a75	91 2a		sta ($2a),y			sta 	(zTemp0),y
.0a77	88		dey				dey
.0a78	8a		txa				txa
.0a79	91 2a		sta ($2a),y			sta 	(zTemp0),y
.0a7b	a0 03		ldy #$03			ldy 	#3 						; write out the address.
.0a7d	ad 13 05	lda $0513			lda 	freeVariableMemory
.0a80	91 2a		sta ($2a),y			sta 	(zTemp0),y
.0a82	c8		iny				iny
.0a83	ad 14 05	lda $0514			lda 	freeVariableMemory+1
.0a86	91 2a		sta ($2a),y			sta 	(zTemp0),y
.0a88	a0 06		ldy #$06			ldy 	#6 						; write EOL marker next record.
.0a8a	a9 00		lda #$00			lda 	#0
.0a8c	91 2a		sta ($2a),y			sta 	(zTemp0),y
.0a8e	18		clc				clc
.0a8f	b2 2a		lda ($2a)			lda 	(zTemp0) 				; add offset to variableListEnd
.0a91	6d 11 05	adc $0511			adc  	variableListEnd
.0a94	8d 11 05	sta $0511			sta 	variableListEnd
.0a97	90 03		bcc $0a9c			bcc 	_CVNoCarry2
.0a99	ee 12 05	inc $0512			inc 	variableListEnd+1
.0a9c					_CVNoCarry2:
.0a9c	7a		ply				ply
.0a9d	fa		plx				plx
.0a9e	68		pla				pla
.0a9f	60		rts				rts
.0aa0					SetVariableRecordToCodePosition:
.0aa0	48		pha				pha
.0aa1	5a		phy				phy
.0aa2	a0 03		ldy #$03			ldy 	#3
.0aa4	a5 29		lda $29				lda 	objPtr+1
.0aa6	91 2a		sta ($2a),y			sta 	(zTemp0),y
.0aa8	c8		iny				iny
.0aa9	a5 28		lda $28				lda 	objPtr
.0aab	91 2a		sta ($2a),y			sta 	(zTemp0),y
.0aad	7a		ply				ply
.0aae	68		pla				pla
.0aaf	60		rts				rts
.0ab0					AllocateBytesForType:
.0ab0	48		pha				pha
.0ab1	da		phx				phx
.0ab2	a2 02		ldx #$02			ldx 	#2 						; bytes to allocate
.0ab4	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16
.0ab6	c9 00		cmp #$00			cmp 	#NSSIFloat
.0ab8	d0 02		bne $0abc			bne 	_CVNotFloat
.0aba	a2 06		ldx #$06			ldx 	#6
.0abc					_CVNotFloat:
.0abc	8a		txa				txa 							; add 6 or 2 to the free memory pointer.
.0abd	18		clc				clc
.0abe	6d 13 05	adc $0513			adc 	freeVariableMemory
.0ac1	8d 13 05	sta $0513			sta 	freeVariableMemory
.0ac4	90 03		bcc $0ac9			bcc 	_CVNoCarry1
.0ac6	ee 14 05	inc $0514			inc 	freeVariableMemory+1
.0ac9					_CVNoCarry1:
.0ac9	fa		plx				plx
.0aca	68		pla				pla
.0acb	60		rts				rts
.0acc					CommandDATA:
.0acc	20 37 09	jsr $0937			jsr 	BufferClear 				; copy it to the buffer
.0acf	20 63 12	jsr $1263			jsr 	LookNextNonSpace
.0ad2					_CTDataLoop:
.0ad2	20 60 12	jsr $1260			jsr 	LookNext 					; reached EOL
.0ad5	f0 08		beq $0adf			beq 	_CTDataDone
.0ad7	20 3b 09	jsr $093b			jsr 	BufferWrite 				; write and consume
.0ada	20 71 12	jsr $1271			jsr 	GetNext
.0add	80 f3		bra $0ad2			bra 	_CTDataLoop
.0adf					_CTDataDone:
.0adf	a9 d0		lda #$d0			lda 	#PCD_CMD_DATA 				; output command and buffer
.0ae1	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0ae4	20 47 09	jsr $0947			jsr 	BufferOutput
.0ae7	60		rts				rts
.0ae8					CommandDEF:
.0ae8	a9 00		lda #$00			lda 	#0 							; constant 0 (for GOTOZ)
.0aea	20 29 0a	jsr $0a29			jsr 	PushIntegerA
.0aed	20 81 13	jsr $1381			jsr 	CompileGotoEOL 				; compile skip over DEF
.0af0	a9 a5		lda #$a5			lda 	#C64_FN
.0af2	20 68 09	jsr $0968			jsr 	CheckNextA
.0af5	20 7c 12	jsr $127c			jsr 	GetNextNonSpace				; get variable name w/type must be array e.g. DEF FNx(a)
.0af8	20 e1 12	jsr $12e1			jsr 	ExtractVariableName
.0afb	8a		txa				txa
.0afc	10 51		bpl $0b4f			bpl 	_CDError
.0afe	8a		txa				txa 								; convert to a function reference - bit 7:0 clear bit 7:1 set
.0aff	29 7f		and #$7f			and 	#$7F
.0b01	aa		tax				tax
.0b02	98		tya				tya
.0b03	09 80		ora #$80			ora 	#$80
.0b05	a8		tay				tay
.0b06	20 d0 0c	jsr $0cd0			jsr 	FindVariable				; does it already exist ?
.0b09	b0 44		bcs $0b4f			bcs 	_CDError 					; if so, that's an error.
.0b0b	20 5b 0a	jsr $0a5b			jsr 	CreateVariableRecord 		; create the record for it & put the data in it.
.0b0e	20 a0 0a	jsr $0aa0			jsr 	SetVariableRecordToCodePosition
.0b11	20 7c 12	jsr $127c			jsr 	GetNextNonSpace
.0b14	20 bd 15	jsr $15bd			jsr 	GetReferenceTerm 			; get var ref, not array
.0b17	c9 00		cmp #$00			cmp 	#0
.0b19	30 34		bmi $0b4f			bmi 	_CDError
.0b1b	8d 09 05	sta $0509			sta 	defType 					; save type
.0b1e	8e 0a 05	stx $050a			stx 	defVariable 				; save var ref
.0b21	8c 0b 05	sty $050b			sty 	defVariable+1
.0b24	29 40		and #$40			and 	#NSSString 					; only numbers.
.0b26	d0 27		bne $0b4f			bne 	_CDError
.0b28	20 62 09	jsr $0962			jsr 	CheckNextRParen 			; check )
.0b2b	a9 b2		lda #$b2			lda 	#C64_EQUAL
.0b2d	20 68 09	jsr $0968			jsr 	CheckNextA 					; check =
.0b30	18		clc				clc 								; if this is DEF FNxx(A), read A
.0b31	20 52 0b	jsr $0b52			jsr 	CDReadWriteVariable
.0b34	a9 bf		lda #$bf			lda 	#(PCD_SWAP) & $FF
.0b36	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0b39	38		sec				sec
.0b3a	20 52 0b	jsr $0b52			jsr 	CDReadWriteVariable 		; A is now updated
.0b3d	20 16 0c	jsr $0c16			jsr 	CompileExpressionAt0 		; the actual body of the function.
.0b40	a9 bf		lda #$bf			lda 	#(PCD_SWAP) & $FF
.0b42	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0b45	38		sec				sec
.0b46	20 52 0b	jsr $0b52			jsr 	CDReadWriteVariable 		; A is now reset to its old value
.0b49	a9 98		lda #$98			lda 	#(PCD_RETURN) & $FF
.0b4b	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0b4e	60		rts				rts
.0b4f					_CDError:
.0b4f	4c 65 17	jmp $1765		jmp	ErrorV_syntax
.0b52					CDReadWriteVariable:
.0b52	ac 0b 05	ldy $050b			ldy 	defVariable+1 				; set up YX
.0b55	ae 0a 05	ldx $050a			ldx 	defVariable
.0b58	ad 09 05	lda $0509			lda 	defType
.0b5b	20 6f 15	jsr $156f			jsr 	GetSetVariable
.0b5e	60		rts				rts
.0509					defType:
>0509							.fill 	1
.050a					defVariable:
>050a							.fill 	2
.0b5f					CommandDIM:
.0b5f	20 7c 12	jsr $127c			jsr 	GetNextNonSpace 			; get the first non space character
.0b62	20 e1 12	jsr $12e1			jsr 	ExtractVariableName 		; variable name to XY
.0b65	da		phx				phx 								; save name with type bits.
.0b66	e0 00		cpx #$00			cpx 	#0 							; check it is an array.
.0b68	10 37		bpl $0ba1			bpl 	_CDError
.0b6a	20 d0 0c	jsr $0cd0			jsr 	FindVariable	 			; see if already exist
.0b6d	b0 35		bcs $0ba4			bcs 	_CDRedefine 				; it still exists.
.0b6f	20 5b 0a	jsr $0a5b			jsr 	CreateVariableRecord 		; create the basic variable
.0b72	20 b0 0a	jsr $0ab0			jsr 	AllocateBytesForType 		; allocate memory for it
.0b75	68		pla				pla 								; restore type bits
.0b76	5a		phy				phy 								; save the address of the basic storage
.0b77	da		phx				phx
.0b78	48		pha				pha
.0b79	20 a7 0b	jsr $0ba7			jsr 	OutputIndexGroup 			; create an index group and generate them, preserving type data
.0b7c	68		pla				pla
.0b7d	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16 		; 2 bit type data
.0b7f	20 29 0a	jsr $0a29			jsr 	PushIntegerA 				; push that type data out.
.0b82	a9 cb		lda #$cb			lda 	#(PCD_DIM) >> 8
.0b84	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0b87	a9 81		lda #$81			lda 	#(PCD_DIM) & $FF
.0b89	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0b8c	fa		plx				plx 								; restore address
.0b8d	7a		ply				ply
.0b8e	a9 20		lda #$20			lda 	#NSSIFloat+NSSIInt16 		; pretend it is an int16 reference.
.0b90	38		sec				sec
.0b91	20 6f 15	jsr $156f			jsr 	GetSetVariable 				; store the address in the reference to the array structure.
.0b94	20 63 12	jsr $1263			jsr 	LookNextNonSpace 			; , follows ?
.0b97	c9 2c		cmp #$2c			cmp 	#","
.0b99	d0 05		bne $0ba0			bne 	_CDExit
.0b9b	20 71 12	jsr $1271			jsr 	GetNext 					; consume comma
.0b9e	80 bf		bra $0b5f			bra 	CommandDIM 					; do another DIM
.0ba0					_CDExit:
.0ba0	60		rts				rts
.0ba1					_CDError:
.0ba1	4c 65 17	jmp $1765		jmp	ErrorV_syntax
.0ba4					_CDRedefine:
.0ba4	4c 2d 18	jmp $182d		jmp	ErrorV_redefine
.0ba7					OutputIndexGroup:
.0ba7	9c 0c 05	stz $050c			stz 	IndexCount 					; count of number of indices.
.0baa					_OIGNext:
.0baa	20 16 0c	jsr $0c16			jsr 	CompileExpressionAt0 		; get a dimension
.0bad	29 40		and #$40			and 	#NSSTypeMask 				; check it is numeric
.0baf	c9 00		cmp #$00			cmp 	#NSSIFloat
.0bb1	d0 19		bne $0bcc			bne 	_OIGType
.0bb3	ee 0c 05	inc $050c			inc 	IndexCount 					; bump the counter.
.0bb6	20 63 12	jsr $1263			jsr 	LookNextNonSpace 			; does a , follow ?
.0bb9	c9 2c		cmp #$2c			cmp 	#","
.0bbb	d0 05		bne $0bc2			bne 	_OIGCheckEnd
.0bbd	20 71 12	jsr $1271			jsr 	GetNext 					; consume comma
.0bc0	80 e8		bra $0baa			bra 	_OIGNext 					; get next dimension
.0bc2					_OIGCheckEnd:
.0bc2	20 62 09	jsr $0962			jsr 	CheckNextRParen 			; check and consume )
.0bc5	ad 0c 05	lda $050c			lda 	IndexCount
.0bc8	20 29 0a	jsr $0a29			jsr 	PushIntegerA 				; compile the dimension count.
.0bcb	60		rts				rts
.0bcc					_OIGType:
.0bcc	4c 75 17	jmp $1775		jmp	ErrorV_type
.050c					IndexCount:
>050c							.fill 	1
.0bcf					CompilerErrorHandler:
.0bcf	68		pla				pla
.0bd0	7a		ply				ply
.0bd1	85 2a		sta $2a				sta 	zTemp0
.0bd3	84 2b		sty $2b				sty 	zTemp0+1
.0bd5	a2 00		ldx #$00			ldx 	#0 							; output msg to channel #0
.0bd7	a0 01		ldy #$01			ldy 	#1
.0bd9					_EHDisplayMsg:
.0bd9	b1 2a		lda ($2a),y			lda 	(zTemp0),y
.0bdb	20 0d 09	jsr $090d			jsr 	PrintCharacter
.0bde	c8		iny				iny
.0bdf	b1 2a		lda ($2a),y			lda 	(zTemp0),y
.0be1	d0 f6		bne $0bd9			bne 	_EHDisplayMsg
.0be3	a9 20		lda #$20			lda 	#32
.0be5	20 0d 09	jsr $090d			jsr 	PrintCharacter
.0be8	a9 40		lda #$40			lda 	#64
.0bea	20 0d 09	jsr $090d			jsr 	PrintCharacter
.0bed	a2 00		ldx #$00			ldx 	#0 							; convert line# to string
.0bef	20 be 1e	jsr $1ebe			jsr 	FloatSetByte
.0bf2	20 f9 08	jsr $08f9			jsr 	GetLineNumber
.0bf5	95 3c		sta $3c,x			sta 	NSMantissa0,x
.0bf7	98		tya				tya
.0bf8	95 48		sta $48,x			sta 	NSMantissa1,x
.0bfa	20 a4 1d	jsr $1da4			jsr 	FloatToString
.0bfd	a0 00		ldy #$00			ldy 	#0 							; display that string.
.0bff	a2 00		ldx #$00			ldx 	#0
.0c01					_EHDisplayLine:
.0c01	b9 3e 05	lda $053e,y			lda 	decimalBuffer,y
.0c04	20 0d 09	jsr $090d			jsr 	PrintCharacter
.0c07	c8		iny				iny
.0c08	b9 3e 05	lda $053e,y			lda 	decimalBuffer,y
.0c0b	d0 f4		bne $0c01			bne 	_EHDisplayLine
.0c0d	a9 0d		lda #$0d			lda 	#13
.0c0f	20 0d 09	jsr $090d			jsr 	PrintCharacter
.0c12	38		sec				sec 								; CS = error
.0c13	4c 0e 0a	jmp $0a0e			jmp 	ExitCompiler
.0c16					CompileExpressionAt0:
.0c16	a9 00		lda #$00			lda 	#0
.0c18					CompileExpressionAtA:
.0c18	48		pha				pha  								; save level
.0c19	20 28 16	jsr $1628			jsr 	CompileTerm 				; compile a term.
.0c1c	fa		plx				plx 								; get level back into X
.0c1d					_ECALoop:
.0c1d	48		pha				pha 								; save type on stack.
.0c1e	20 63 12	jsr $1263			jsr 	LookNextNonSpace 			; get the next character
.0c21	c9 aa		cmp #$aa			cmp 	#C64_PLUS 					; go to be + ... < in the C64 code.
.0c23	90 04		bcc $0c29			bcc 	_ECAExit
.0c25	c9 b4		cmp #$b4			cmp 	#C64_LESS+1
.0c27	90 02		bcc $0c2b			bcc 	_ECAHaveToken
.0c29					_ECAExit:
.0c29	68		pla				pla 								; throw type off stack
.0c2a	60		rts				rts
.0c2b					_ECAHaveToken:
.0c2b	86 2a		stx $2a				stx 	zTemp0 						; save current precedence in zTemp0
.0c2d	aa		tax				tax 								; X contains the operator token
.0c2e	bd 19 0c	lda $0c19,x			lda 	PrecedenceTable-C64_PLUS,x  ; read precedence.
.0c31	c5 2a		cmp $2a				cmp 	zTemp0 						; if < then exit
.0c33	90 f4		bcc $0c29			bcc 	_ECAExit
.0c35	85 2b		sta $2b				sta 	zTemp0+1 					; save the precedence of the operator.
.0c37	20 71 12	jsr $1271			jsr 	GetNext 					; consume the token.
.0c3a	e0 b1		cpx #$b1			cpx 	#C64_GREATER				; checks for < or > which could be two character tokens
.0c3c	f0 11		beq $0c4f			beq 	_ECAGreaterCheck
.0c3e	e0 b3		cpx #$b3			cpx 	#C64_LESS
.0c40	d0 1a		bne $0c5c			bne 	_ECAHaveFullToken
.0c42	20 60 12	jsr $1260			jsr 	LookNext 					; checks for < (<= or <>)
.0c45	c9 b1		cmp #$b1			cmp 	#C64_GREATER 				; <> is 2 on from <
.0c47	f0 0e		beq $0c57			beq	 	_ECAToNotEqual
.0c49	c9 b2		cmp #$b2			cmp 	#C64_EQUAL 					; <= is 3 on from <
.0c4b	d0 0f		bne $0c5c			bne 	_ECAHaveFullToken
.0c4d	80 07		bra $0c56			bra 	_ECAAddEqual
.0c4f					_ECAGreaterCheck:
.0c4f	20 60 12	jsr $1260			jsr 	LookNext
.0c52	c9 b2		cmp #$b2			cmp 	#C64_EQUAL
.0c54	d0 06		bne $0c5c			bne 	_ECAHaveFullToken
.0c56					_ECAAddEqual:
.0c56	e8		inx				inx 								; > => >= and < to <= is three tokens on.
.0c57					_ECAToNotEqual:
.0c57	e8		inx				inx
.0c58	e8		inx				inx
.0c59	20 71 12	jsr $1271			jsr 	GetNext 					; consume the = or > in >= <= <>
.0c5c					_ECAHaveFullToken:
.0c5c	e0 aa		cpx #$aa			cpx 	#C64_PLUS
.0c5e	d0 0a		bne $0c6a			bne 	_ECANotConcat
.0c60	68		pla				pla 								; get type back
.0c61	48		pha				pha
.0c62	29 40		and #$40			and 	#NSSTypeMask
.0c64	c9 40		cmp #$40			cmp 	#NSSString
.0c66	d0 02		bne $0c6a			bne 	_ECANotConcat
.0c68	a2 e0		ldx #$e0			ldx 	#(PCD_CONCAT-(PCD_PLUS-C64_PLUS)) & $FF
.0c6a					_ECANotConcat:
.0c6a	da		phx				phx 								; save operator on the stack
.0c6b	a6 2a		ldx $2a				ldx 	zTemp0 						; push current precedence on the stack
.0c6d	da		phx				phx
.0c6e	a5 2b		lda $2b				lda 	zTemp0+1 					; get precedence of operator
.0c70	1a		inc a				inc 	a
.0c71	20 18 0c	jsr $0c18			jsr 	CompileExpressionAtA 		; and compile at the next level up.
.0c74	85 2a		sta $2a				sta 	zTemp0 						; save type in zTemp0
.0c76	fa		plx				plx 								; restore current precedence in X
.0c77	68		pla				pla 								; restore operator
.0c78	85 2b		sta $2b				sta 	zTemp0+1 					; save it in zTemp0+1.
.0c7a	c9 b1		cmp #$b1			cmp 	#C64_GREATER 				; check for not compare
.0c7c	90 17		bcc $0c95			bcc 	_ECANotCompare
.0c7e	c9 b7		cmp #$b7			cmp 	#C64_GREATER+6
.0c80	b0 13		bcs $0c95			bcs 	_ECANotCompare
.0c82	7a		ply				ply 								; get type into Y
.0c83	5a		phy				phy
.0c84	48		pha				pha 								; save operator
.0c85	98		tya				tya 								; get type
.0c86	a0 94		ldy #$94			ldy 	#PCD_SCMD_CMP 				; Y is the token to use
.0c88	29 40		and #$40			and 	#NSSTypeMask
.0c8a	c9 40		cmp #$40			cmp 	#NSSString
.0c8c	f0 02		beq $0c90			beq 	_ECANotString
.0c8e	a0 a3		ldy #$a3			ldy 	#PCD_FCMD_CMP
.0c90					_ECANotString:
.0c90	98		tya				tya									; output token Y
.0c91	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0c94	68		pla				pla 								; restore operator.
.0c95					_ECANotCompare:
.0c95	18		clc				clc 								; convert to P-Code and compile.
.0c96	69 d6		adc #$d6			adc 	#(PCD_PLUS-C64_PLUS) & $FF 	; it might be invalid at this point
.0c98	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0c9b	68		pla				pla 								; type of current result
.0c9c	45 2a		eor $2a				eor 	zTemp0 						; check compatible with r-expr type
.0c9e	29 40		and #$40			and 	#NSSTypeMask 				; the types should be compatible, only interested in number vs float
.0ca0	d0 19		bne $0cbb			bne		_ECAType
.0ca2	a5 2a		lda $2a				lda 	zTemp0 						; get type back
.0ca4	c9 40		cmp #$40			cmp 	#NSSString 					; if it is a number, then all operators work.
.0ca6	d0 18		bne $0cc0			bne 	_ECAGoLoop
.0ca8	a5 2b		lda $2b				lda 	zTemp0+1 					; check operator is + or comparator
.0caa	c9 e0		cmp #$e0			cmp 	#(PCD_CONCAT-(PCD_PLUS-C64_PLUS)) & $FF
.0cac	f0 10		beq $0cbe			beq 	_ECAOkayString 				; (this is post conversion)
.0cae	c9 b1		cmp #$b1			cmp 	#C64_GREATER 				; must be a comparison then.
.0cb0	90 09		bcc $0cbb			bcc 	_ECAType
.0cb2	c9 b7		cmp #$b7			cmp 	#C64_LESS+1+3 				; the +3 is because of >= <= <>
.0cb4	b0 05		bcs $0cbb			bcs 	_ECAType
.0cb6	a9 00		lda #$00			lda 	#NSSIFloat 					; compare returns number.
.0cb8	4c 1d 0c	jmp $0c1d			jmp 	_ECALoop
.0cbb					_ECAType:
.0cbb	4c 75 17	jmp $1775		jmp	ErrorV_type
.0cbe					_ECAOkayString:
.0cbe	a9 40		lda #$40			lda 	#NSSString 					; current is string, go round again.
.0cc0					_ECAGoLoop:
.0cc0	4c 1d 0c	jmp $0c1d			jmp 	_ECALoop
.0cc3					PrecedenceTable:
>0cc3	03						.byte 	3 					; '+'
>0cc4	03						.byte 	3 					; '-'
>0cc5	04						.byte 	4 					; '*'
>0cc6	04						.byte 	4 					; '/'
>0cc7	05						.byte 	5 					; '^'
>0cc8	01						.byte 	1 					; 'and'
>0cc9	00						.byte 	0 					; 'or'
>0cca	02						.byte 	2 					; '>'
>0ccb	02						.byte 	2 					; '='
>0ccc	02						.byte 	2 					; '<'
>0ccd	02						.byte 	2 					; '>='
>0cce	02						.byte 	2 					; '<='
>0ccf	02						.byte 	2 					; '<>'
.0cd0					FindVariable:
.0cd0	86 2c		stx $2c				stx 	zTemp1 						; save name.
.0cd2	84 2d		sty $2d				sty 	zTemp1+1
.0cd4					_IVCheckSpecial:
.0cd4	c0 09		cpy #$09			cpy 	#$09	 					; both end $09 e.g. I
.0cd6	d0 18		bne $0cf0			bne 	_IVStandard
.0cd8	e0 14		cpx #$14			cpx 	#$14 						; TI is $14
.0cda	f0 0c		beq $0ce8			beq 	_IVTIFloat
.0cdc	e0 54		cpx #$54			cpx 	#$54 						; TI$ is $54
.0cde	d0 10		bne $0cf0			bne 	_IVStandard
.0ce0	a0 c0		ldy #$c0			ldy 	#$C0 						; TI$ returns string $C001
.0ce2	a2 01		ldx #$01			ldx 	#$01
.0ce4	a9 40		lda #$40			lda 	#NSSString
.0ce6	38		sec				sec
.0ce7	60		rts				rts
.0ce8					_IVTIFloat:
.0ce8	a0 80		ldy #$80			ldy 	#$80
.0cea	a2 00		ldx #$00			ldx 	#$00
.0cec	a9 00		lda #$00			lda 	#0
.0cee	38		sec				sec
.0cef	60		rts				rts
.0cf0					_IVStandard:
.0cf0	ad 07 05	lda $0507			lda 	compilerStartHigh			; start scanning from here.
.0cf3	85 2b		sta $2b				sta 	zTemp0+1
.0cf5	64 2a		stz $2a				stz 	zTemp0
.0cf7					_IVCheckLoop:
.0cf7	b2 2a		lda ($2a)			lda 	(zTemp0) 					; finished ?
.0cf9	f0 2b		beq $0d26			beq  	_IVNotFound 				; if so, return with CC.
.0cfb	a0 01		ldy #$01			ldy 	#1 							; match ?
.0cfd	b1 2a		lda ($2a),y			lda 	(zTemp0),y
.0cff	c5 2c		cmp $2c				cmp 	zTemp1
.0d01	d0 07		bne $0d0a			bne	 	_IVNext
.0d03	c8		iny				iny
.0d04	b1 2a		lda ($2a),y			lda 	(zTemp0),y
.0d06	c5 2d		cmp $2d				cmp 	zTemp1+1
.0d08	f0 0d		beq $0d17			beq 	_IVFound
.0d0a					_IVNext:
.0d0a	18		clc				clc
.0d0b	a5 2a		lda $2a				lda 	zTemp0
.0d0d	72 2a		adc ($2a)			adc 	(zTemp0)
.0d0f	85 2a		sta $2a				sta 	zTemp0
.0d11	90 e4		bcc $0cf7			bcc 	_IVCheckLoop
.0d13	e6 2b		inc $2b				inc 	zTemp0+1
.0d15	80 e0		bra $0cf7			bra 	_IVCheckLoop
.0d17					_IVFound:
.0d17	a0 03		ldy #$03			ldy 	#3 							; get address into YX
.0d19	b1 2a		lda ($2a),y			lda 	(zTemp0),y
.0d1b	aa		tax				tax
.0d1c	c8		iny				iny
.0d1d	b1 2a		lda ($2a),y			lda 	(zTemp0),y
.0d1f	48		pha				pha
.0d20	c8		iny				iny
.0d21	b1 2a		lda ($2a),y			lda 	(zTemp0),y
.0d23	7a		ply				ply
.0d24	38		sec				sec
.0d25	60		rts				rts
.0d26					_IVNotFound:
.0d26	a6 2c		ldx $2c				ldx 	zTemp1 						; get variable name back
.0d28	a4 2d		ldy $2d				ldy 	zTemp1+1
.0d2a	18		clc				clc
.0d2b	60		rts				rts
.0d2c					FixBranches:
.0d2c	a9 03		lda #$03			lda 	#BLC_RESETOUT				; back to the start of the *object* code.
.0d2e	20 13 0a	jsr $0a13			jsr 	CallAPIHandler
.0d31					_FBLoop:
.0d31	b2 28		lda ($28)			lda 	(objPtr) 					; get the next one.
.0d33	c9 d1		cmp #$d1			cmp 	#PCD_CMD_GOTO 				; found GOTO or GOSUB, patch up.
.0d35	f0 16		beq $0d4d			beq 	_FBFixGotoGosub
.0d37	c9 d2		cmp #$d2			cmp 	#PCD_CMD_GOSUB
.0d39	f0 12		beq $0d4d			beq 	_FBFixGotoGosub
.0d3b	c9 d4		cmp #$d4			cmp 	#PCD_CMD_GOTOCMD_NZ 		; patch the conditional GOTOs for Z/NZ TOS.
.0d3d	f0 0e		beq $0d4d			beq 	_FBFixGotoGosub
.0d3f	c9 d3		cmp #$d3			cmp 	#PCD_CMD_GOTOCMD_Z
.0d41	f0 0a		beq $0d4d			beq 	_FBFixGotoGosub
.0d43	c9 d5		cmp #$d5			cmp 	#PCD_CMD_VARSPACE
.0d45	f0 3b		beq $0d82			beq 	_FBFixVarSpace
.0d47					_FBNext:
.0d47	20 8b 18	jsr $188b			jsr 	MoveObjectForward 			; move forward in object code.
.0d4a	90 e5		bcc $0d31			bcc 	_FBLoop 					; not finished
.0d4c					_FBExit:
.0d4c	60		rts				rts
.0d4d					_FBFixGotoGosub:
.0d4d	a0 01		ldy #$01			ldy 	#1							; line number in YA
.0d4f	b1 28		lda ($28),y			lda 	(objPtr),y
.0d51	48		pha				pha
.0d52	c8		iny				iny
.0d53	b1 28		lda ($28),y			lda 	(objPtr),y
.0d55	a8		tay				tay
.0d56	68		pla				pla
.0d57	20 13 14	jsr $1413			jsr 	STRFindLine			 		; find where it is YA
.0d5a	90 08		bcc $0d64			bcc 	_FBFFound 					; not found, so must be >
.0d5c	48		pha				pha
.0d5d	b2 28		lda ($28)			lda 	(objPtr) 					; which is a fail if not CMD_GOTOCMD_Z
.0d5f	c9 d3		cmp #$d3			cmp 	#PCD_CMD_GOTOCMD_Z
.0d61	d0 0f		bne $0d72			bne 	_FBFFail
.0d63	68		pla				pla
.0d64					_FBFFound:
.0d64	20 63 14	jsr $1463			jsr 	STRMakeOffset 				; make it an offset from X:YA
.0d67	5a		phy				phy	 								; patch the GOTO/GOSUB
.0d68	a0 01		ldy #$01			ldy 	#1
.0d6a	91 28		sta ($28),y			sta 	(objPtr),y
.0d6c	c8		iny				iny
.0d6d	68		pla				pla
.0d6e	91 28		sta ($28),y			sta 	(objPtr),y
.0d70	80 d5		bra $0d47			bra 	_FBNext
.0d72					_FBFFail:
.0d72	a0 02		ldy #$02			ldy 	#2
.0d74	b1 28		lda ($28),y			lda 	(objPtr),y
.0d76	8d 00 04	sta $0400			sta 	currentLineNumber
.0d79	c8		iny				iny
.0d7a	b1 28		lda ($28),y			lda 	(objPtr),y
.0d7c	8d 01 04	sta $0401			sta 	currentLineNumber+1
.0d7f	4c a8 17	jmp $17a8		jmp	ErrorV_line
.0d82					_FBFixVarSpace:
.0d82	a0 01		ldy #$01			ldy 	#1
.0d84	ad 13 05	lda $0513			lda 	freeVariableMemory
.0d87	91 28		sta ($28),y			sta 	(objPtr),y
.0d89	c8		iny				iny
.0d8a	ad 14 05	lda $0514			lda 	freeVariableMemory+1
.0d8d	91 28		sta ($28),y			sta 	(objPtr),y
.0d8f	80 b6		bra $0d47			bra 	_FBNext
.0d91					CommandFOR:
.0d91	20 7c 12	jsr $127c			jsr 	GetNextNonSpace 			; first letter of index variable, should be.
.0d94	20 92 12	jsr $1292			jsr 	CharIsAlpha 				; if not alpha , error
.0d97	90 59		bcc $0df2			bcc 	_CFFail
.0d99	20 bd 15	jsr $15bd			jsr 	GetReferenceTerm 			; figure out the reference.
.0d9c	48		pha				pha 								; save type
.0d9d	29 40		and #$40			and 	#NSSTypeMask 				; check it is numeric
.0d9f	c9 00		cmp #$00			cmp 	#NSSIFloat
.0da1	d0 4f		bne $0df2			bne 	_CFFail
.0da3	5a		phy				phy 								; save reference on the stack
.0da4	da		phx				phx
.0da5	a9 b2		lda #$b2			lda 	#C64_EQUAL 					; check for equal.
.0da7	20 68 09	jsr $0968			jsr 	CheckNextA
.0daa	20 16 0c	jsr $0c16			jsr 	CompileExpressionAt0 		; initial value
.0dad	fa		plx				plx 								; get reference back.
.0dae	7a		ply				ply
.0daf	5a		phy				phy
.0db0	da		phx				phx
.0db1	38		sec				sec 								; set initial value.
.0db2	20 6f 15	jsr $156f			jsr 	GetSetVariable
.0db5	fa		plx				plx
.0db6	7a		ply				ply
.0db7	68		pla				pla
.0db8	29 20		and #$20			and 	#NSSIInt16
.0dba	f0 04		beq $0dc0			beq 	_CFNotInt16
.0dbc	98		tya				tya
.0dbd	09 80		ora #$80			ora 	#$80
.0dbf	a8		tay				tay
.0dc0					_CFNotInt16:
.0dc0	8a		txa				txa 								; reference in YA
.0dc1	20 16 0a	jsr $0a16			jsr 	PushIntegerYA
.0dc4	a9 a4		lda #$a4			lda 	#C64_TO
.0dc6	20 68 09	jsr $0968			jsr 	CheckNextA
.0dc9	20 16 0c	jsr $0c16			jsr 	CompileExpressionAt0 		; terminal value
.0dcc	29 40		and #$40			and 	#NSSTypeMask 				; check it is numeric
.0dce	c9 00		cmp #$00			cmp 	#NSSIFloat
.0dd0	d0 20		bne $0df2			bne 	_CFFail
.0dd2	20 63 12	jsr $1263			jsr 	LookNextNonSpace 			; followed by STEP
.0dd5	c9 a9		cmp #$a9			cmp 	#C64_STEP
.0dd7	d0 0e		bne $0de7			bne 	_CFNoStep
.0dd9	20 71 12	jsr $1271			jsr 	GetNext 					; consume it.
.0ddc	20 16 0c	jsr $0c16			jsr 	CompileExpressionAt0 		; terminal value
.0ddf	29 40		and #$40			and 	#NSSTypeMask 				; check it is numeric
.0de1	c9 00		cmp #$00			cmp 	#NSSIFloat
.0de3	d0 0d		bne $0df2			bne 	_CFFail
.0de5	80 05		bra $0dec			bra 	_CFParametersDone
.0de7					_CFNoStep:
.0de7	a9 01		lda #$01			lda 	#1 							; default STEP e.g. 1
.0de9	20 29 0a	jsr $0a29			jsr 	PushIntegerA
.0dec					_CFParametersDone:
.0dec	a9 95		lda #$95			lda 	#PCD_FOR  					; compile FOR word.
.0dee	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0df1	60		rts				rts
.0df2					_CFFail:
.0df2	4c 65 17	jmp $1765		jmp	ErrorV_syntax
.0df5					FNCompile:
.0df5	20 7c 12	jsr $127c			jsr 	GetNextNonSpace				; get variable name w/type must be array e.g. DEF FNx(a)
.0df8	20 e1 12	jsr $12e1			jsr 	ExtractVariableName
.0dfb	e0 00		cpx #$00			cpx 	#0
.0dfd	10 32		bpl $0e31			bpl 	_FNError
.0dff	8a		txa				txa 								; convert to a function reference - bit 7:0 clear bit 7:1 set
.0e00	29 7f		and #$7f			and 	#$7F
.0e02	aa		tax				tax
.0e03	98		tya				tya
.0e04	09 80		ora #$80			ora 	#$80
.0e06	a8		tay				tay
.0e07	20 d0 0c	jsr $0cd0			jsr 	FindVariable				; does it already exist ?
.0e0a	90 25		bcc $0e31			bcc 	_FNError 					; no.
.0e0c	20 63 14	jsr $1463			jsr 	STRMakeOffset 				; convert to a relative address.
.0e0f	c9 00		cmp #$00			cmp 	#0 							; fix up.
.0e11	d0 01		bne $0e14			bne 	_FNNoBorrow
.0e13	88		dey				dey
.0e14					_FNNoBorrow:
.0e14	3a		dec a				dec 	a
.0e15	5a		phy				phy 								; save location of routine on stack.
.0e16	48		pha				pha
.0e17	da		phx				phx
.0e18	20 16 0c	jsr $0c16			jsr 	CompileExpressionAt0
.0e1b	20 62 09	jsr $0962			jsr 	CheckNextRParen
.0e1e	a9 d2		lda #$d2			lda 	#PCD_CMD_GOSUB
.0e20	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0e23	68		pla				pla
.0e24	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0e27	68		pla				pla
.0e28	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0e2b	68		pla				pla
.0e2c	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0e2f	18		clc				clc
.0e30	60		rts				rts
.0e31					_FNError:
.0e31	4c 58 17	jmp $1758		jmp	ErrorV_value
.0e34					CommandTables:
>0e34	07 cb 00 03 3f 13 06			.byte	$07,$cb,$00,$03,CommandGOAlt & $FF,CommandGOAlt >> 8,$06
>0e3b	07 89 00 03 46 13 06			.byte	$07,$89,$00,$03,CommandGOTO & $FF,CommandGOTO >> 8,$06
>0e42	07 8d 00 03 39 13 06			.byte	$07,$8d,$00,$03,CommandGOSUB & $FF,CommandGOSUB >> 8,$06
>0e49	07 88 00 03 b5 13 06			.byte	$07,$88,$00,$03,CommandLET & $FF,CommandLET >> 8,$06
>0e50	07 85 00 03 95 13 06			.byte	$07,$85,$00,$03,CommandINPUT & $FF,CommandINPUT >> 8,$06
>0e57	07 84 00 04 a9 13 06			.byte	$07,$84,$00,$04,CommandINPUTStream & $FF,CommandINPUTStream >> 8,$06
>0e5e	07 99 00 03 ea 14 06			.byte	$07,$99,$00,$03,CommandPRINT & $FF,CommandPRINT >> 8,$06
>0e65	07 98 00 04 ea 14 06			.byte	$07,$98,$00,$04,CommandPRINT & $FF,CommandPRINT >> 8,$06
>0e6c	07 8f 00 03 f5 15 06			.byte	$07,$8f,$00,$03,CommandREM & $FF,CommandREM >> 8,$06
>0e73	07 81 00 03 91 0d 06			.byte	$07,$81,$00,$03,CommandFOR & $FF,CommandFOR >> 8,$06
>0e7a	07 82 00 03 6d 14 06			.byte	$07,$82,$00,$03,CommandNEXT & $FF,CommandNEXT >> 8,$06
>0e81	07 a1 00 03 b2 12 06			.byte	$07,$a1,$00,$03,CommandGET & $FF,CommandGET >> 8,$06
>0e88	07 83 00 03 cc 0a 06			.byte	$07,$83,$00,$03,CommandDATA & $FF,CommandDATA >> 8,$06
>0e8f	07 87 00 03 33 15 06			.byte	$07,$87,$00,$03,CommandREAD & $FF,CommandREAD >> 8,$06
>0e96	07 86 00 03 5f 0b 06			.byte	$07,$86,$00,$03,CommandDIM & $FF,CommandDIM >> 8,$06
>0e9d	07 96 00 03 e8 0a 06			.byte	$07,$96,$00,$03,CommandDEF & $FF,CommandDEF >> 8,$06
>0ea4	07 8b 00 e3 62 13 06			.byte	$07,$8b,$00,$e3,CommandIF & $FF,CommandIF >> 8,$06
>0eab	08 92 00 ea e3 c1 16 06			.byte	$08,$92,$00,$ea,$e3,CommandWAIT & $FF,CommandWAIT >> 8,$06
>0eb3	09 91 00 e1 a9 03 99 14			.byte	$09,$91,$00,$e1,169,$03,CommandON & $FF,CommandON >> 8,$06
>0ebb	06
>0ebc	07 9e 00 e2 cb 92 06			.byte	$07,$9e,$00,$e2,37579 & $FF,37579 >> 8,$06
>0ec3	07 97 00 ea e1 ad 06			.byte	$07,$97,$00,$ea,$e1,173,$06
>0eca	06 8e 00 10 98 06			.byte	$06,$8e,$00,$10,152,$06
>0ed0	07 90 00 20 cb 91 06			.byte	$07,$90,$00,$20,37323 & $FF,37323 >> 8,$06
>0ed7	07 80 00 20 cb 82 06			.byte	$07,$80,$00,$20,33483 & $FF,33483 >> 8,$06
>0ede	07 8c 00 20 cb 90 06			.byte	$07,$8c,$00,$20,37067 & $FF,37067 >> 8,$06
>0ee5	07 9d 00 e3 e7 16 06			.byte	$07,$9d,$00,$e3,CommandCMD & $FF,CommandCMD >> 8,$06
>0eec	0a 9f 00 ea e3 fa 16 10			.byte	$0a,$9f,$00,$ea,$e3,CommandOPEN & $FF,CommandOPEN >> 8,$10,199,$06
>0ef4	c7 06
>0ef6	06 a0 00 e1 c4 06			.byte	$06,$a0,$00,$e1,196,$06
>0efc	07 ce 90 20 cb ac 06			.byte	$07,$ce,$90,$20,44235 & $FF,44235 >> 8,$06
>0f03	0a ce 92 e3 2f 12 20 cb			.byte	$0a,$ce,$92,$e3,OptionalParameterCompile & $FF,OptionalParameterCompile >> 8,$20,44491 & $FF,44491 >> 8,$06
>0f0b	ad 06
>0f0d	0a ce 8d e3 2f 12 20 cb			.byte	$0a,$ce,$8d,$e3,OptionalParameterCompile & $FF,OptionalParameterCompile >> 8,$20,44747 & $FF,44747 >> 8,$06
>0f15	ae 06
>0f17	06 ce 86 e1 c8 06			.byte	$06,$ce,$86,$e1,200,$06
>0f1d	08 ce 84 ea ea e1 c9 06			.byte	$08,$ce,$84,$ea,$ea,$e1,201,$06
>0f25	07 ce af e2 cb 98 06			.byte	$07,$ce,$af,$e2,39115 & $FF,39115 >> 8,$06
>0f2c	07 ce 8c e2 cb 8c 06			.byte	$07,$ce,$8c,$e2,36043 & $FF,36043 >> 8,$06
>0f33	09 ce ae ea ea e2 cb 95			.byte	$09,$ce,$ae,$ea,$ea,$e2,38347 & $FF,38347 >> 8,$06
>0f3b	06
>0f3c	08 ce 87 ea ea e1 99 06			.byte	$08,$ce,$87,$ea,$ea,$e1,153,$06
>0f44	0a ce 88 ea ea ea ea e1			.byte	$0a,$ce,$88,$ea,$ea,$ea,$ea,$e1,154,$06
>0f4c	9a 06
>0f4e	0a ce 8a ea ea ea ea e1			.byte	$0a,$ce,$8a,$ea,$ea,$ea,$ea,$e1,155,$06
>0f56	9b 06
>0f58	0a ce 89 ea ea ea ea e1			.byte	$0a,$ce,$89,$ea,$ea,$ea,$ea,$e1,156,$06
>0f60	9c 06
>0f62	09 ce 8b ea ea ea f1 9d			.byte	$09,$ce,$8b,$ea,$ea,$ea,$f1,157,$06
>0f6a	06
>0f6b	07 ce 99 20 cb 99 06			.byte	$07,$ce,$99,$20,39371 & $FF,39371 >> 8,$06
>0f72	08 ce 9a ea e2 cb 9a 06			.byte	$08,$ce,$9a,$ea,$e2,39627 & $FF,39627 >> 8,$06
>0f7a	08 ce 9b ea e2 cb 9b 06			.byte	$08,$ce,$9b,$ea,$e2,39883 & $FF,39883 >> 8,$06
>0f82	08 ce 9c ea e2 cb 9c 06			.byte	$08,$ce,$9c,$ea,$e2,40139 & $FF,40139 >> 8,$06
>0f8a	08 ce 9d ea e2 cb 9d 06			.byte	$08,$ce,$9d,$ea,$e2,40395 & $FF,40395 >> 8,$06
>0f92	08 ce 9e ea e2 cb 9e 06			.byte	$08,$ce,$9e,$ea,$e2,40651 & $FF,40651 >> 8,$06
>0f9a	08 ce 9f ea e2 cb 9f 06			.byte	$08,$ce,$9f,$ea,$e2,40907 & $FF,40907 >> 8,$06
>0fa2	08 ce a0 ea e2 cb a0 06			.byte	$08,$ce,$a0,$ea,$e2,41163 & $FF,41163 >> 8,$06
>0faa	08 ce a1 ea f2 cb a1 06			.byte	$08,$ce,$a1,$ea,$f2,41419 & $FF,41419 >> 8,$06
>0fb2	08 ce a2 ea f2 cb a2 06			.byte	$08,$ce,$a2,$ea,$f2,41675 & $FF,41675 >> 8,$06
>0fba	08 ce a3 ea e2 cb a3 06			.byte	$08,$ce,$a3,$ea,$e2,41931 & $FF,41931 >> 8,$06
>0fc2	07 ce a4 20 cb a4 06			.byte	$07,$ce,$a4,$20,42187 & $FF,42187 >> 8,$06
>0fc9	08 ce a5 ea e2 cb a5 06			.byte	$08,$ce,$a5,$ea,$e2,42443 & $FF,42443 >> 8,$06
>0fd1	08 ce a6 ea e2 cb a6 06			.byte	$08,$ce,$a6,$ea,$e2,42699 & $FF,42699 >> 8,$06
>0fd9	08 ce a7 ea e2 cb a7 06			.byte	$08,$ce,$a7,$ea,$e2,42955 & $FF,42955 >> 8,$06
>0fe1	08 ce a8 ea e2 cb a8 06			.byte	$08,$ce,$a8,$ea,$e2,43211 & $FF,43211 >> 8,$06
>0fe9	08 ce a9 ea e2 cb a9 06			.byte	$08,$ce,$a9,$ea,$e2,43467 & $FF,43467 >> 8,$06
>0ff1	08 ce aa ea f2 cb aa 06			.byte	$08,$ce,$aa,$ea,$f2,43723 & $FF,43723 >> 8,$06
>0ff9	08 ce ab ea f2 cb ab 06			.byte	$08,$ce,$ab,$ea,$f2,43979 & $FF,43979 >> 8,$06
>1001	00						.byte 	0
.1002					UnaryTables:
>1002	07 b4 00 8e 91 b7 06			.byte	$07,$b4,$00,$8e,$91,183,$06
>1009	08 b5 00 8e 92 cb 84 06			.byte	$08,$b5,$00,$8e,$92,33995 & $FF,33995 >> 8,$06
>1011	07 b6 00 8e 91 8d 06			.byte	$07,$b6,$00,$8e,$91,141,$06
>1018	07 b7 00 8e 91 c2 06			.byte	$07,$b7,$00,$8e,$91,194,$06
>101f	07 b8 00 8e 91 96 06			.byte	$07,$b8,$00,$8e,$91,150,$06
>1026	07 b9 00 8e 91 ae 06			.byte	$07,$b9,$00,$8e,$91,174,$06
>102d	08 ba 00 8e 92 cb 85 06			.byte	$08,$ba,$00,$8e,$92,34251 & $FF,34251 >> 8,$06
>1035	07 bb 00 8e 91 b5 06			.byte	$07,$bb,$00,$8e,$91,181,$06
>103c	08 bc 00 8e 92 cb 86 06			.byte	$08,$bc,$00,$8e,$92,34507 & $FF,34507 >> 8,$06
>1044	08 bd 00 8e 92 cb 87 06			.byte	$08,$bd,$00,$8e,$92,34763 & $FF,34763 >> 8,$06
>104c	08 be 00 8e 92 cb 88 06			.byte	$08,$be,$00,$8e,$92,35019 & $FF,35019 >> 8,$06
>1054	08 bf 00 8e 92 cb 89 06			.byte	$08,$bf,$00,$8e,$92,35275 & $FF,35275 >> 8,$06
>105c	08 c0 00 8e 92 cb 8a 06			.byte	$08,$c0,$00,$8e,$92,35531 & $FF,35531 >> 8,$06
>1064	08 c1 00 8e 92 cb 8b 06			.byte	$08,$c1,$00,$8e,$92,35787 & $FF,35787 >> 8,$06
>106c	07 c2 00 8e 91 ab 06			.byte	$07,$c2,$00,$8e,$91,171,$06
>1073	07 c3 00 8f 91 a2 06			.byte	$07,$c3,$00,$8f,$91,162,$06
>107a	07 c4 00 8e 91 bb 07			.byte	$07,$c4,$00,$8e,$91,187,$07
>1081	07 c5 00 8f 91 c3 06			.byte	$07,$c5,$00,$8f,$91,195,$06
>1088	07 c6 00 8f 91 8f 06			.byte	$07,$c6,$00,$8f,$91,143,$06
>108f	07 c7 00 8e 91 93 07			.byte	$07,$c7,$00,$8e,$91,147,$07
>1096	08 c8 00 8f ae 91 bc 07			.byte	$08,$c8,$00,$8f,$ae,$91,188,$07
>109e	08 c9 00 8f ae 91 bd 07			.byte	$08,$c9,$00,$8f,$ae,$91,189,$07
>10a6	0b ca 00 8f ae 03 2f 12			.byte	$0b,$ca,$00,$8f,$ae,$03,OptionalParameterCompile & $FF,OptionalParameterCompile >> 8,$91,190,$07
>10ae	91 be 07
>10b1	07 a8 00 03 4e 12 06			.byte	$07,$a8,$00,$03,NotUnaryCompile & $FF,NotUnaryCompile >> 8,$06
>10b8	07 a5 00 03 f5 0d 06			.byte	$07,$a5,$00,$03,FNCompile & $FF,FNCompile >> 8,$06
>10bf	06 ff 00 10 ac 06			.byte	$06,$ff,$00,$10,172,$06
>10c5	07 ce d6 8e 91 91 07			.byte	$07,$ce,$d6,$8e,$91,145,$07
>10cc	07 ce d5 8e 91 9e 07			.byte	$07,$ce,$d5,$8e,$91,158,$07
>10d3	08 ce d0 8e ae 91 ca 06			.byte	$08,$ce,$d0,$8e,$ae,$91,202,$06
>10db	08 ce d4 8e 92 cb 83 06			.byte	$08,$ce,$d4,$8e,$92,33739 & $FF,33739 >> 8,$06
>10e3	07 ce d3 20 cb 8d 06			.byte	$07,$ce,$d3,$20,36299 & $FF,36299 >> 8,$06
>10ea	07 ce d1 20 cb 8e 06			.byte	$07,$ce,$d1,$20,36555 & $FF,36555 >> 8,$06
>10f1	07 ce d2 20 cb 8f 06			.byte	$07,$ce,$d2,$20,36811 & $FF,36811 >> 8,$06
>10f8	09 ce d7 8e ae 92 cb 96			.byte	$09,$ce,$d7,$8e,$ae,$92,38603 & $FF,38603 >> 8,$06
>1100	06
>1101	00						.byte 	0
.1102					GeneratorProcess:
.1102	86 2a		stx $2a				stx 	zTemp0 						; save generation pointer in zTemp0
.1104	84 2b		sty $2b				sty 	zTemp0+1
.1106	85 2c		sta $2c				sta 	zTemp1 						; first match token
.1108	64 2d		stz $2d				stz 	zTemp1+1
.110a	c9 ce		cmp #$ce			cmp 	#$CE 						; check if shift
.110c	d0 05		bne $1113			bne 	_GPNotShifted
.110e	20 71 12	jsr $1271			jsr 	GetNext 					; get the shifted token
.1111	85 2d		sta $2d				sta 	zTemp1+1 					; match CE xx
.1113					_GPNotShifted:
.1113					_GPSearch:
.1113	b2 2a		lda ($2a)			lda 	(zTemp0) 					; reached end ?
.1115	18		clc				clc
.1116	f0 2f		beq $1147			beq 	_GPExit
.1118	a0 01		ldy #$01			ldy 	#1 							; tokens match
.111a	b1 2a		lda ($2a),y			lda 	(zTemp0),y
.111c	c5 2c		cmp $2c				cmp 	zTemp1
.111e	d0 09		bne $1129			bne 	_GPNext
.1120	a5 2d		lda $2d				lda 	zTemp1+1 					; 2nd token ?
.1122	f0 12		beq $1136			beq 	_GPFound
.1124	c8		iny				iny 								; check match.
.1125	d1 2a		cmp ($2a),y			cmp 	(zTemp0),y
.1127	f0 0d		beq $1136			beq 	_GPFound
.1129					_GPNext:
.1129	18		clc				clc 								; follow to next
.112a	a5 2a		lda $2a				lda 	zTemp0
.112c	72 2a		adc ($2a)			adc 	(zTemp0)
.112e	85 2a		sta $2a				sta 	zTemp0
.1130	90 e1		bcc $1113			bcc 	_GPSearch
.1132	e6 2b		inc $2b				inc 	zTemp0+1
.1134	80 dd		bra $1113			bra 	_GPSearch
.1136					_GPFound:
.1136	18		clc				clc 								; skip to action bytes
.1137	a5 2a		lda $2a				lda 	zTemp0 						; <offset> <token lo> <token hi> first
.1139	69 03		adc #$03			adc 	#3
.113b	85 2a		sta $2a				sta 	zTemp0
.113d	90 02		bcc $1141			bcc 	_GPNoCarry
.113f	e6 2b		inc $2b				inc 	zTemp0+1
.1141					_GPNoCarry:
.1141					_GPLoop:
.1141	20 48 11	jsr $1148			jsr 	GeneratorExecute 			; execute one command
.1144	90 fb		bcc $1141			bcc 	_GPLoop 					; go back if not completed.
.1146	38		sec				sec 								; return with CS.
.1147					_GPExit:
.1147	60		rts				rts
.1148					GeneratorExecute:
.1148	20 f4 11	jsr $11f4			jsr 	_GEFetchZTemp0 				; get next.
.114b	48		pha				pha 								; split into 2 nibbles
.114c	4a		lsr a				lsr 	a
.114d	4a		lsr a				lsr 	a
.114e	4a		lsr a				lsr		a
.114f	4a		lsr a				lsr 	a
.1150	20 5a 11	jsr $115a			jsr 	_GEExecuteNibble 			; MSB first
.1153	68		pla				pla
.1154	b0 03		bcs $1159			bcs 	_GEHaveCompleted
.1156	20 5a 11	jsr $115a			jsr 	_GEExecuteNibble 			; LSB second
.1159					_GEHaveCompleted:
.1159	60		rts				rts
.115a					_GEExecuteNibble:
.115a	29 0f		and #$0f			and 	#$0F
.115c	0a		asl a				asl 	a
.115d	aa		tax				tax
.115e	7c 61 11	jmp ($1161,x)			jmp 	(_GEExecuteVectors,x)
.1161					_GEExecuteVectors:
>1161	81 11						.word 	_GEXNop 					; 0  (no operation)
>1163	89 11						.word 	_GEXToken1 					; 1  (compile 1 byte token)
>1165	83 11						.word 	_GEXToken2 					; 2  (compile 2 byte token)
>1167	d7 11						.word 	_GEXExecute 				; 3  (run arbitrary code)
>1169	ca 11						.word 	_GEXChannelExec 			; 4  (run arbitrary code with possible channel redirection)
>116b	81 11						.word 	_GEXNop 					; 5
>116d	91 11						.word 	_GEXExitNumber 				; 6  exit return ifloat32 type
>116f	95 11						.word 	_GEXExitString 				; 7  exit return string type
>1171	99 11						.word 	_GEXLParam 					; 8  check ( follows
>1173	9d 11						.word 	_GEXRParam 					; 9  check ) follows
>1175	a1 11						.word 	_GEXComma					; A  check , follows
>1177	81 11						.word 	_GEXNop 					; B
>1179	81 11						.word 	_GEXNop 					; C
>117b	81 11						.word 	_GEXNop 					; D
>117d	b1 11						.word 	_GEXNumber 					; E  compile get any number
>117f	bc 11						.word 	_GEXString 					; F  compile get any string
.1181					_GEXNop:
.1181	18		clc				clc
.1182	60		rts				rts
.1183					_GEXToken2:
.1183	20 f4 11	jsr $11f4			jsr 	_GEFetchZTemp0
.1186	20 00 09	jsr $0900			jsr 	WriteCodeByte
.1189					_GEXToken1:
.1189	20 f4 11	jsr $11f4			jsr 	_GEFetchZTemp0
.118c	20 00 09	jsr $0900			jsr 	WriteCodeByte
.118f	18		clc				clc
.1190	60		rts				rts
.1191					_GEXExitNumber:
.1191	a9 00		lda #$00			lda 	#NSSIFloat
.1193	38		sec				sec
.1194	60		rts				rts
.1195					_GEXExitString:
.1195	a9 40		lda #$40			lda 	#NSSString
.1197	38		sec				sec
.1198	60		rts				rts
.1199					_GEXLParam:
.1199	a9 28		lda #$28			lda 	#"("
.119b	80 06		bra $11a3			bra 	_GEXCheck
.119d					_GEXRParam:
.119d	a9 29		lda #$29			lda 	#")"
.119f	80 02		bra $11a3			bra 	_GEXCheck
.11a1					_GEXComma:
.11a1	a9 2c		lda #$2c			lda 	#","
.11a3					_GEXCheck:
.11a3	85 2e		sta $2e				sta 	zTemp2 						; save match
.11a5	20 7c 12	jsr $127c			jsr 	GetNextNonSpace 			; get next skipping spaces
.11a8	c5 2e		cmp $2e				cmp 	zTemp2 						; check matches.
.11aa	d0 02		bne $11ae			bne 	_GEXSyntax
.11ac	18		clc				clc
.11ad	60		rts				rts
.11ae					_GEXSyntax:
.11ae	4c 65 17	jmp $1765		jmp	ErrorV_syntax
.11b1					_GEXNumber:
.11b1	20 fd 11	jsr $11fd			jsr 	GEXCompileExpression 		; compile expression
.11b4	29 40		and #$40			and 	#NSSTypeMask
.11b6	c9 00		cmp #$00			cmp  	#NSSIFloat
.11b8	d0 0d		bne $11c7			bne 	_GEXType
.11ba	18		clc				clc
.11bb	60		rts				rts
.11bc					_GEXString:
.11bc	20 fd 11	jsr $11fd			jsr 	GEXCompileExpression 		; compile expression
.11bf	29 40		and #$40			and 	#NSSTypeMask
.11c1	c9 40		cmp #$40			cmp  	#NSSString
.11c3	d0 02		bne $11c7			bne 	_GEXType
.11c5	18		clc				clc
.11c6	60		rts				rts
.11c7					_GEXType:
.11c7	4c 75 17	jmp $1775		jmp	ErrorV_type
.11ca					_GEXChannelExec:
.11ca	20 0d 12	jsr $120d			jsr 	ChannelPrefix 				; set up default
.11cd	20 d7 11	jsr $11d7			jsr 	_GEXExecute
.11d0	08		php				php
.11d1	20 28 12	jsr $1228			jsr 	ChannelPostfix 				; replace default.
.11d4	28		plp				plp
.11d5	60		rts				rts
>11d6	db						.byte 	$DB 						; causes a break in the emulator
.11d7					_GEXExecute:
.11d7	20 f4 11	jsr $11f4			jsr 	_GEFetchZTemp0 				; get vector
.11da	85 2e		sta $2e				sta 	zTemp2
.11dc	20 f4 11	jsr $11f4			jsr 	_GEFetchZTemp0
.11df	85 2f		sta $2f				sta 	zTemp2+1
.11e1	a6 2a		ldx $2a				ldx 	zTemp0 						; push generation exec on to stack for reentrancy
.11e3	da		phx				phx
.11e4	a6 2b		ldx $2b				ldx 	zTemp0+1
.11e6	da		phx				phx
.11e7	20 f1 11	jsr $11f1			jsr 	_GECallZTemp2 				; execute code
.11ea	fa		plx				plx 								; recover generation exec
.11eb	86 2b		stx $2b				stx 	zTemp0+1
.11ed	fa		plx				plx
.11ee	86 2a		stx $2a				stx 	zTemp0
.11f0	60		rts				rts
.11f1					_GECallZTemp2:
.11f1	6c 2e 00	jmp ($002e)			jmp 	(zTemp2)
.11f4					_GEFetchZTemp0:
.11f4	b2 2a		lda ($2a)			lda 	(zTemp0)
.11f6	e6 2a		inc $2a				inc 	zTemp0
.11f8	d0 02		bne $11fc			bne 	_GEFZ0Skip
.11fa	e6 2b		inc $2b				inc 	zTemp0+1
.11fc					_GEFZ0Skip:
.11fc	60		rts				rts
.11fd					GEXCompileExpression:
.11fd	a6 2a		ldx $2a				ldx 	zTemp0 						; push generation exec on to stack for reentrancy
.11ff	da		phx				phx
.1200	a6 2b		ldx $2b				ldx 	zTemp0+1
.1202	da		phx				phx
.1203	20 16 0c	jsr $0c16			jsr 	CompileExpressionAt0 		; compile expression.
.1206	fa		plx				plx 								; recover generation exec
.1207	86 2b		stx $2b				stx 	zTemp0+1
.1209	fa		plx				plx
.120a	86 2a		stx $2a				stx 	zTemp0
.120c	60		rts				rts
.120d					ChannelPrefix:
.120d	a9 af		lda #$af			lda 	#PCD_GETCHANNEL				; set channel onto stack
.120f	20 00 09	jsr $0900			jsr 	WriteCodeByte
.1212	20 fd 11	jsr $11fd			jsr 	GEXCompileExpression 		; channel #
.1215	29 40		and #$40			and 	#NSSTypeMask
.1217	c9 00		cmp #$00			cmp 	#NSSIFloat
.1219	d0 0a		bne $1225			bne 	_CPXType
.121b	20 5e 09	jsr $095e			jsr 	CheckNextComma 				; check , follows.
.121e	a9 b0		lda #$b0			lda 	#PCD_SETCHANNEL				; set channel
.1220	20 00 09	jsr $0900			jsr 	WriteCodeByte
.1223	18		clc				clc
.1224	60		rts				rts
.1225					_CPXType:
.1225	4c 75 17	jmp $1775		jmp	ErrorV_type
.1228					ChannelPostfix:
.1228	a9 b0		lda #$b0			lda 	#PCD_SETCHANNEL				; set channel from TOS.
.122a	20 00 09	jsr $0900			jsr 	WriteCodeByte
.122d	18		clc				clc
.122e	60		rts				rts
.122f					OptionalParameterCompile:
.122f	20 63 12	jsr $1263			jsr 	LookNextNonSpace 			; what follows.
.1232	c9 2c		cmp #$2c			cmp 	#","
.1234	d0 0e		bne $1244			bne 	_MidDefault
.1236	20 71 12	jsr $1271			jsr 	GetNext 					; consume ,
.1239	20 16 0c	jsr $0c16			jsr 	CompileExpressionAt0
.123c	29 40		and #$40			and 	#NSSTypeMask
.123e	c9 00		cmp #$00			cmp 	#NSSIFloat
.1240	d0 09		bne $124b			bne 	MidFailType
.1242	80 05		bra $1249			bra 	_MidComplete
.1244					_MidDefault:
.1244	a9 ff		lda #$ff			lda 	#255 						; default of 255
.1246	20 29 0a	jsr $0a29			jsr 	PushIntegerA
.1249					_MidComplete:
.1249	18		clc				clc
.124a	60		rts				rts
.124b					MidFailType:
.124b	4c 75 17	jmp $1775		jmp	ErrorV_type
.124e					NotUnaryCompile:
.124e	ad cb 0c	lda $0ccb			lda 	PrecedenceTable+C64_EQUAL-C64_PLUS
.1251	20 18 0c	jsr $0c18			jsr 	CompileExpressionAtA 		; evaluate at that level
.1254	29 40		and #$40			and 	#NSSTypeMask 				; check compile returns number.
.1256	c9 00		cmp #$00			cmp 	#NSSIFloat
.1258	d0 f1		bne $124b			bne 	MidFailType
.125a	a9 a8		lda #$a8			lda 	#PCD_NOT 					; and NOT it.
.125c	20 00 09	jsr $0900			jsr 	WriteCodeByte
.125f	60		rts				rts
.1260					LookNext:
.1260	b2 24		lda ($24)			lda 	(srcPtr)
.1262	60		rts				rts
.1263					LookNextNonSpace:
.1263	b2 24		lda ($24)			lda 	(srcPtr)
.1265	c9 20		cmp #$20			cmp		#' '
.1267	f0 03		beq $126c			beq 	_LNNSkip
.1269	c9 00		cmp #$00			cmp 	#0
.126b	60		rts				rts
.126c					_LNNSkip:
.126c	20 71 12	jsr $1271			jsr 	GetNext
.126f	80 f2		bra $1263			bra 	LookNextNonSpace
.1271					GetNext:
.1271	b2 24		lda ($24)			lda 	(srcPtr) 					; get next
.1273	e6 24		inc $24				inc 	srcPtr
.1275	d0 02		bne $1279			bne 	_GNSkip
.1277	e6 25		inc $25				inc 	srcPtr+1
.1279					_GNSkip:
.1279	c9 00		cmp #$00			cmp 	#0
.127b	60		rts				rts
.127c					GetNextNonSpace:
.127c	20 71 12	jsr $1271			jsr 	GetNext
.127f	c9 20		cmp #$20			cmp 	#' '
.1281	f0 f9		beq $127c			beq 	GetNextNonSpace
.1283	c9 00		cmp #$00			cmp 	#0
.1285	60		rts				rts
.1286					CharIsDigit:
.1286	c9 30		cmp #$30			cmp 	#"0"
.1288	90 06		bcc $1290			bcc 	CCFalse
.128a	c9 3a		cmp #$3a			cmp 	#"9"+1
.128c	b0 02		bcs $1290			bcs 	CCFalse
.128e					CCTrue:
.128e	38		sec				sec
.128f	60		rts				rts
.1290					CCFalse:
.1290	18		clc				clc
.1291	60		rts				rts
.1292					CharIsAlpha:
.1292	c9 41		cmp #$41			cmp 	#"A"
.1294	90 fa		bcc $1290			bcc 	CCFalse
.1296	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1298	b0 f6		bcs $1290			bcs 	CCFalse
.129a	80 f2		bra $128e			bra 	CCTrue
.129c					ConvertHexStyle:
.129c	38		sec				sec
.129d	e9 30		sbc #$30			sbc 	#"0" 						; check in range 0-9 first
.129f	90 ef		bcc $1290			bcc 	CCFalse
.12a1	c9 0a		cmp #$0a			cmp 	#9+1
.12a3	90 e9		bcc $128e			bcc 	CCTrue
.12a5	38		sec				sec 								; shift into hex space A=>0 Z=>25
.12a6	e9 11		sbc #$11			sbc 	#"A"-"0"
.12a8	90 e6		bcc $1290			bcc 	CCFalse
.12aa	c9 1a		cmp #$1a			cmp 	#26 						; past Z ?
.12ac	b0 e2		bcs $1290			bcs 	CCFalse
.12ae	69 0a		adc #$0a			adc 	#10 						; make valid quasi-hex 0-35
.12b0	80 dc		bra $128e			bra 	CCTrue
.12b2					CommandGET:
.12b2	20 63 12	jsr $1263			jsr 	LookNextNonSpace 			; # follows ?
.12b5	c9 23		cmp #$23			cmp 	#"#"
.12b7	d0 0d		bne $12c6			bne 	CommandGetBody
.12b9	20 71 12	jsr $1271			jsr 	GetNext 					; consume #
.12bc	20 0d 12	jsr $120d			jsr 	ChannelPrefix 				; do it as GET#
.12bf	20 c6 12	jsr $12c6			jsr 	CommandGetBody
.12c2	20 28 12	jsr $1228			jsr 	ChannelPostfix
.12c5	60		rts				rts
.12c6					CommandGetBody:
.12c6	20 7c 12	jsr $127c			jsr 	GetNextNonSpace 			; get the first character
.12c9	20 bd 15	jsr $15bd			jsr 	GetReferenceTerm 			; identify variable to assign to
.12cc	48		pha				pha
.12cd	29 40		and #$40			and 	#NSSTypeMask 				; check if it is a string
.12cf	c9 40		cmp #$40			cmp 	#NSSString
.12d1	d0 0b		bne $12de			bne 	_CGType
.12d3	a9 97		lda #$97			lda 	#PCD_GET 					; compile GET
.12d5	20 00 09	jsr $0900			jsr 	WriteCodeByte
.12d8	38		sec				sec
.12d9	68		pla				pla
.12da	20 6f 15	jsr $156f			jsr		GetSetVariable
.12dd	60		rts				rts
.12de					_CGType:
.12de	4c 75 17	jmp $1775		jmp	ErrorV_type
.12e1					ExtractVariableName:
.12e1	20 92 12	jsr $1292			jsr 	CharIsAlpha
.12e4	90 50		bcc $1336			bcc 	_IVSyntax
.12e6	29 1f		and #$1f			and 	#31 						; reduce first character to 5 bits
.12e8	85 2c		sta $2c				sta 	zTemp1 						; we'll build it in zTemp1
.12ea	64 2d		stz $2d				stz 	zTemp1+1
.12ec	20 60 12	jsr $1260			jsr 	LookNext 					; is there a second character ?
.12ef	20 92 12	jsr $1292			jsr 	CharIsAlpha  				; must be alphanumeric
.12f2	b0 05		bcs $12f9			bcs 	_IVHasSecond
.12f4	20 86 12	jsr $1286			jsr 	CharIsDigit
.12f7	90 07		bcc $1300			bcc 	_IVCheckType
.12f9					_IVHasSecond:
.12f9	29 3f		and #$3f			and 	#63 						; 6 bit ASCII.
.12fb	85 2d		sta $2d				sta 	zTemp1+1
.12fd					_IVGetNextCheck:
.12fd	20 71 12	jsr $1271			jsr 	GetNext 					; consume it
.1300					_IVCheckType:
.1300	20 60 12	jsr $1260			jsr 	LookNext					; check if string follows.
.1303	20 92 12	jsr $1292			jsr 	CharIsAlpha
.1306	b0 f5		bcs $12fd			bcs 	_IVGetNextCheck
.1308	20 86 12	jsr $1286			jsr 	CharIsDigit
.130b	b0 f0		bcs $12fd			bcs 	_IVGetNextCheck
.130d	a2 40		ldx #$40			ldx 	#NSSString
.130f	c9 24		cmp #$24			cmp 	#"$"
.1311	f0 06		beq $1319			beq 	_IVHasType
.1313	a2 20		ldx #$20			ldx 	#NSSIInt16 					; check if short int follows e.g. 16 bit
.1315	c9 25		cmp #$25			cmp 	#"%"
.1317	d0 08		bne $1321			bne 	_IVCheckArray
.1319					_IVHasType:
.1319	8a		txa				txa 								; Or X into zTemp1
.131a	05 2c		ora $2c				ora 	zTemp1
.131c	85 2c		sta $2c				sta 	zTemp1
.131e	20 71 12	jsr $1271			jsr 	GetNext 					; consume it
.1321					_IVCheckArray:
.1321	20 60 12	jsr $1260			jsr 	LookNext 					; check if array follows
.1324	c9 28		cmp #$28			cmp 	#"("
.1326	d0 09		bne $1331			bne 	_IVNotArray
.1328	a5 2c		lda $2c				lda 	zTemp1 						; set array bit
.132a	09 80		ora #$80			ora 	#NSSArray
.132c	85 2c		sta $2c				sta 	zTemp1
.132e	20 71 12	jsr $1271			jsr 	GetNext 					; consume it
.1331					_IVNotArray:
.1331	a6 2c		ldx $2c				ldx 	zTemp1
.1333	a4 2d		ldy $2d				ldy 	zTemp1+1
.1335	60		rts				rts
.1336					_IVSyntax:
.1336	4c 65 17	jmp $1765		jmp	ErrorV_syntax
.1339					CommandGOSUB:
.1339	a9 d2		lda #$d2			lda 	#PCD_CMD_GOSUB
.133b	20 4c 13	jsr $134c			jsr 	CompileBranchCommand
.133e	60		rts				rts
.133f					CommandGOAlt:
.133f	a9 a4		lda #$a4			lda 	#C64_TO 					; GO TO alternative
.1341	20 68 09	jsr $0968			jsr 	CheckNextA
.1344	80 00		bra $1346			bra 	CommandGOTO
.1346					CommandGOTO:
.1346	a9 d1		lda #$d1			lda 	#PCD_CMD_GOTO
.1348	20 4c 13	jsr $134c			jsr 	CompileBranchCommand
.134b	60		rts				rts
.134c					CompileBranchCommand:
.134c	20 00 09	jsr $0900			jsr 	WriteCodeByte 				; write the command out.
.134f	20 7c 12	jsr $127c			jsr 	GetNextNonSpace
.1352	20 c5 14	jsr $14c5			jsr 	ParseConstant 				; get constant into YA
.1355	90 08		bcc $135f			bcc 	_CBCSyntax
.1357	20 00 09	jsr $0900			jsr 	WriteCodeByte				; and compile the actual line number
.135a	98		tya				tya
.135b	20 00 09	jsr $0900			jsr 	WriteCodeByte
.135e	60		rts				rts
.135f					_CBCSyntax:
.135f	4c 65 17	jmp $1765		jmp	ErrorV_syntax
.1362					CommandIF:
.1362	20 63 12	jsr $1263			jsr 	LookNextNonSpace 			; what follows the tests ?
.1365	c9 89		cmp #$89			cmp 	#C64_GOTO 					; IF .. GOTO
.1367	f0 0f		beq $1378			beq 	_CIGoto
.1369	a9 a7		lda #$a7			lda 	#C64_THEN 					; should be THEN
.136b	20 68 09	jsr $0968			jsr 	CheckNextA
.136e	20 63 12	jsr $1263			jsr 	LookNextNonSpace 			; THEN <number>
.1371	20 86 12	jsr $1286			jsr 	CharIsDigit
.1374	b0 05		bcs $137b			bcs 	_CIGoto2
.1376	80 09		bra $1381			bra 	CompileGotoEOL
.1378					_CIGoto:
.1378	20 71 12	jsr $1271			jsr 	GetNext
.137b					_CIGoto2:
.137b	a9 d4		lda #$d4			lda 	#PCD_CMD_GOTOCMD_NZ
.137d	20 4c 13	jsr $134c			jsr 	CompileBranchCommand
.1380	60		rts				rts
.1381					CompileGotoEOL:
.1381	a9 d3		lda #$d3			lda 	#PCD_CMD_GOTOCMD_Z
.1383	20 00 09	jsr $0900			jsr 	WriteCodeByte
.1386	20 f9 08	jsr $08f9			jsr 	GetLineNumber 				; Get the current line number => YA
.1389	1a		inc a				inc 	a 							; and branch to +1
.138a	d0 01		bne $138d			bne 	_CGENoCarry
.138c	c8		iny				iny
.138d					_CGENoCarry:
.138d	20 00 09	jsr $0900			jsr 	WriteCodeByte
.1390	98		tya				tya
.1391	20 00 09	jsr $0900			jsr 	WriteCodeByte
.1394	60		rts				rts
.1395					CommandINPUT:
.1395	20 63 12	jsr $1263			jsr 	LookNextNonSpace 			; check for "
.1398	c9 22		cmp #$22			cmp 	#'"'
.139a	d0 0d		bne $13a9			bne 	CommandINPUTStream
.139c	20 16 0c	jsr $0c16			jsr 	CompileExpressionAt0
.139f	a9 b2		lda #$b2			lda 	#(PCD_PRINTCMD_S) & $FF
.13a1	20 00 09	jsr $0900			jsr 	WriteCodeByte
.13a4	a9 2c		lda #$2c			lda 	#","
.13a6	20 5e 09	jsr $095e			jsr 	CheckNextComma
.13a9					CommandINPUTStream:
.13a9	a9 a1		lda #$a1			lda 	#(PCD_INPUTCMD_START) & $FF
.13ab	20 00 09	jsr $0900			jsr 	WriteCodeByte
.13ae	a2 9f		ldx #$9f			ldx 	#PCD_INPUT 					; do READ with Data from INPUT
.13b0	a0 a0		ldy #$a0			ldy 	#PCD_INPUTDOLLAR
.13b2	4c 37 15	jmp $1537			jmp 	CommandReadInputCommon
.13b5					CommandLET:
.13b5	20 7c 12	jsr $127c			jsr 	GetNextNonSpace 			; get the first character
.13b8					CommandLETHaveFirst:
.13b8	20 bd 15	jsr $15bd			jsr 	GetReferenceTerm 			; identify variable to assign to
.13bb	da		phx				phx 								; save target on the stack.
.13bc	5a		phy				phy
.13bd	48		pha				pha
.13be	a9 b2		lda #$b2			lda 	#C64_EQUAL 					; check next is =
.13c0	20 68 09	jsr $0968			jsr 	CheckNextA
.13c3	20 16 0c	jsr $0c16			jsr 	CompileExpressionAt0 		; evaluate the RHS.
.13c6	85 2a		sta $2a				sta 	zTemp0 						; save type returned
.13c8	68		pla				pla 								; get type of assignment
.13c9	48		pha				pha
.13ca	45 2a		eor $2a				eor 	zTemp0 						; compare using EOR
.13cc	29 40		and #$40			and 	#NSSTypeMask 				; so we can mask type as we only need n/s
.13ce	d0 17		bne $13e7			bne 	_CLType
.13d0	68		pla				pla 								; restore and compile save code
.13d1	7a		ply				ply
.13d2	fa		plx				plx
.13d3	c0 c0		cpy #$c0			cpy 	#$C0 						; is it TI$ = "xxxxx"
.13d5	f0 05		beq $13dc			beq 	_CLTIString
.13d7	38		sec				sec
.13d8	20 6f 15	jsr $156f			jsr		GetSetVariable
.13db	60		rts				rts
.13dc					_CLTIString:
.13dc	a9 cb		lda #$cb			lda 	#(PCD_TIDOLLARCMD_WRITE) >> 8
.13de	20 00 09	jsr $0900			jsr 	WriteCodeByte
.13e1	a9 93		lda #$93			lda 	#(PCD_TIDOLLARCMD_WRITE) & $FF
.13e3	20 00 09	jsr $0900			jsr 	WriteCodeByte
.13e6	60		rts				rts
.13e7					_CLType:
.13e7	4c 75 17	jmp $1775		jmp	ErrorV_type
.13ea					STRMarkLine:
.13ea	48		pha				pha
.13eb	38		sec				sec 								; allocate 4 bytes (line #,address)
.13ec	ad 0f 05	lda $050f			lda 	lineNumberTable 			; and copy to zTemp0
.13ef	e9 04		sbc #$04			sbc 	#4
.13f1	8d 0f 05	sta $050f			sta 	lineNumberTable
.13f4	85 2a		sta $2a				sta 	zTemp0
.13f6	ad 10 05	lda $0510			lda 	lineNumberTable+1
.13f9	e9 00		sbc #$00			sbc 	#0
.13fb	8d 10 05	sta $0510			sta 	lineNumberTable+1
.13fe	85 2b		sta $2b				sta 	zTemp0+1
.1400	68		pla				pla
.1401	92 2a		sta ($2a)			sta 	(zTemp0) 					; line # save it in +0,+1
.1403	98		tya				tya
.1404	a0 01		ldy #$01			ldy 	#1
.1406	91 2a		sta ($2a),y			sta 	(zTemp0),y
.1408	a5 28		lda $28				lda 	objPtr 						; save current address in +2,+3
.140a	c8		iny				iny
.140b	91 2a		sta ($2a),y			sta 	(zTemp0),y
.140d	a5 29		lda $29				lda 	objPtr+1
.140f	c8		iny				iny
.1410	91 2a		sta ($2a),y			sta 	(zTemp0),y
.1412	60		rts				rts
.1413					STRFindLine:
.1413	85 2a		sta $2a				sta 	zTemp0 						; zTemp0 line number being searched
.1415	84 2b		sty $2b				sty 	zTemp0+1
.1417	ad 08 05	lda $0508			lda 	compilerEndHigh 			; work backwards through table
.141a	85 2d		sta $2d				sta 	zTemp1+1
.141c	64 2c		stz $2c				stz 	zTemp1
.141e					_STRSearch:
.141e	20 55 14	jsr $1455			jsr 	_STRPrevLine 				; look at previous record.
.1421	a0 01		ldy #$01			ldy 	#1
.1423	b2 2c		lda ($2c)			lda 	(zTemp1) 					; check table line # >= target
.1425	c5 2a		cmp $2a				cmp 	zTemp0
.1427	b1 2c		lda ($2c),y			lda 	(zTemp1),y
.1429	e5 2b		sbc $2b				sbc 	zTemp0+1
.142b	b0 0b		bcs $1438			bcs 	_STRFound 					; >=
.142d					_STRNext:
.142d	a0 01		ldy #$01			ldy 	#1 							; should not be required !
.142f	b1 2c		lda ($2c),y			lda 	(zTemp1),y
.1431	c9 ff		cmp #$ff			cmp 	#$FF
.1433	d0 e9		bne $141e			bne 	_STRSearch
.1435	4c bf 17	jmp $17bf		jmp	ErrorV_internal
.1438					_STRFound:
.1438	b2 2c		lda ($2c)			lda 	(zTemp1) 					; set A = 0 if the same, 0 if different.
.143a	45 2a		eor $2a				eor 	zTemp0
.143c	d0 06		bne $1444			bne 	_STRDifferent
.143e	b2 2c		lda ($2c)			lda 	(zTemp1)
.1440	45 2a		eor $2a				eor 	zTemp0
.1442	f0 02		beq $1446			beq 	_STROut 					; if zero, exit with A = 0 and correct line.
.1444					_STRDifferent:
.1444	a9 ff		lda #$ff			lda 	#$FF
.1446					_STROut:
.1446	18		clc				clc  								; set carry if different, e.g. > rather than >=
.1447	69 ff		adc #$ff			adc 	#255
.1449	08		php				php
.144a	c8		iny				iny 								; address into YA
.144b	b1 2c		lda ($2c),y			lda 	(zTemp1),y
.144d	48		pha				pha
.144e	c8		iny				iny
.144f	b1 2c		lda ($2c),y			lda 	(zTemp1),y
.1451	a8		tay				tay
.1452	68		pla				pla
.1453	28		plp				plp
.1454	60		rts				rts
.1455					_STRPrevLine:
.1455	38		sec				sec 								; move backwards one entry.
.1456	a5 2c		lda $2c				lda 	zTemp1
.1458	e9 04		sbc #$04			sbc 	#4
.145a	85 2c		sta $2c				sta 	zTemp1
.145c	a5 2d		lda $2d				lda 	zTemp1+1
.145e	e9 00		sbc #$00			sbc 	#0
.1460	85 2d		sta $2d				sta 	zTemp1+1
.1462	60		rts				rts
.1463					STRMakeOffset:
.1463	18		clc				clc 								; borrow 1
.1464	e5 28		sbc $28				sbc 	objPtr
.1466	48		pha				pha
.1467	98		tya				tya
.1468	e5 29		sbc $29				sbc 	objPtr+1
.146a	a8		tay				tay
.146b	68		pla				pla
.146c	60		rts				rts
.146d					CommandNEXT:
.146d	20 63 12	jsr $1263			jsr 	LookNextNonSpace 			; first letter of index variable, should be.
.1470	20 92 12	jsr $1292			jsr 	CharIsAlpha 				; if not alpha , error
.1473	90 0c		bcc $1481			bcc 	_CNNoReferenceGiven
.1475	20 71 12	jsr $1271			jsr 	GetNext
.1478	20 bd 15	jsr $15bd			jsr 	GetReferenceTerm 			; figure out the reference.
.147b	8a		txa				txa 								; reference in YA
.147c	20 16 0a	jsr $0a16			jsr 	PushIntegerYA 				; write it out.
.147f	80 06		bra $1487			bra 	_CNParametersDone
.1481					_CNNoReferenceGiven:
.1481	a9 ff		lda #$ff			lda 	#255 						; write out -1 no
.1483	a8		tay				tay
.1484	20 16 0a	jsr $0a16			jsr 	PushIntegerYA 				; write it out.
.1487					_CNParametersDone:
.1487	a9 a7		lda #$a7			lda 	#PCD_NEXT  					; compile FOR word.
.1489	20 00 09	jsr $0900			jsr 	WriteCodeByte
.148c	20 63 12	jsr $1263			jsr 	LookNextNonSpace 			; look for ,
.148f	c9 2c		cmp #$2c			cmp 	#","
.1491	d0 05		bne $1498			bne 	_CNExit
.1493	20 71 12	jsr $1271			jsr 	GetNext 					; consume ,
.1496	80 d5		bra $146d			bra 	CommandNEXT 				; and go round.
.1498					_CNExit:
.1498	60		rts				rts
.1499					CommandON:
.1499	20 7c 12	jsr $127c			jsr 	GetNextNonSpace 			; GOTO / GOSUB must follow
.149c	48		pha				pha 								; save on stack
.149d	a2 d1		ldx #$d1			ldx 	#PCD_CMD_GOTO
.149f	c9 89		cmp #$89			cmp 	#C64_GOTO 					; must be GOTO/GOSUB
.14a1	f0 09		beq $14ac			beq 	_COCreateLoop
.14a3	a2 d2		ldx #$d2			ldx 	#PCD_CMD_GOSUB
.14a5	c9 8d		cmp #$8d			cmp 	#C64_GOSUB
.14a7	f0 03		beq $14ac			beq 	_COCreateLoop
.14a9	4c 65 17	jmp $1765		jmp	ErrorV_syntax
.14ac					_COCreateLoop:
.14ac	8a		txa				txa 								; compile a goto/gosub somewhere
.14ad	da		phx				phx
.14ae	20 4c 13	jsr $134c			jsr 	CompileBranchCommand
.14b1	fa		plx				plx
.14b2	20 63 12	jsr $1263			jsr 	LookNextNonSpace			; ',' follows
.14b5	c9 2c		cmp #$2c			cmp 	#","
.14b7	d0 0a		bne $14c3			bne 	_COComplete 				; if so, more line numbers
.14b9	a9 aa		lda #$aa			lda 	#PCD_MOREON 				; ON extends.
.14bb	20 00 09	jsr $0900			jsr 	WriteCodeByte
.14be	20 71 12	jsr $1271			jsr 	GetNext
.14c1	80 e9		bra $14ac			bra 	_COCreateLoop
.14c3					_COComplete:
.14c3	68		pla				pla 								; throw GOTO/GOSUB
.14c4	60		rts				rts
.14c5					ParseConstant:
.14c5	a2 00		ldx #$00			ldx 	#0
.14c7	20 9c 1c	jsr $1c9c			jsr 	FloatEncodeStart 			; send first
.14ca					_ParseLoop:
.14ca	20 60 12	jsr $1260			jsr 	LookNext 					; send subsequent
.14cd	20 9f 1c	jsr $1c9f			jsr 	FloatEncodeContinue
.14d0	90 05		bcc $14d7			bcc 	_ParseDone
.14d2	20 71 12	jsr $1271			jsr 	GetNext 					; consume it
.14d5	80 f3		bra $14ca			bra 	_ParseLoop
.14d7					_ParseDone:
.14d7	b5 30		lda $30,x			lda 	NSStatus,x 					; shouldn't be -ve ....
.14d9	29 80		and #$80			and 	#$80
.14db	15 6c		ora $6c,x			ora 	NSExponent,x 				; 16 bit int check
.14dd	15 54		ora $54,x			ora 	NSMantissa2,x
.14df	15 60		ora $60,x			ora 	NSMantissa3,x
.14e1	18		clc				clc
.14e2	d0 05		bne $14e9			bne 	_ParseExit 					; exit with CC if need float to compile
.14e4	b5 3c		lda $3c,x			lda 	NSMantissa0,x 				; read into YA.
.14e6	b4 48		ldy $48,x			ldy		NSMantissa1,x
.14e8	38		sec				sec
.14e9					_ParseExit:
.14e9	60		rts				rts
.14ea					CommandPRINT:
.14ea	20 63 12	jsr $1263			jsr 	LookNextNonSpace			; what follows ?
.14ed	c9 3b		cmp #$3b			cmp 	#";" 						; semicolon, check end of command
.14ef	f0 1f		beq $1510			beq 	_CPCheckEnd
.14f1	c9 2c		cmp #$2c			cmp 	#"," 						; , TAB and check end of command
.14f3	f0 16		beq $150b			beq 	_CPTabCheckEnd
.14f5	20 27 15	jsr $1527			jsr 	_CPAtEnd 					; check for : and EOL
.14f8	b0 22		bcs $151c			bcs 	_CPExitCR 					; exit with CR
.14fa	20 16 0c	jsr $0c16			jsr 	CompileExpressionAt0 		; so it is something to print
.14fd	a2 b2		ldx #$b2			ldx 	#PCD_PRINTCMD_S
.14ff	29 40		and #$40			and 	#NSSString 					; if string
.1501	d0 02		bne $1505			bne 	_CPOut
.1503	a2 b1		ldx #$b1			ldx 	#PCD_PRINTCMD_N
.1505					_CPOut:
.1505	8a		txa				txa 								; print that thing
.1506	20 00 09	jsr $0900			jsr 	WriteCodeByte
.1509	80 df		bra $14ea			bra 	CommandPRINT 				; and loop round/
.150b					_CPTabCheckEnd:
.150b	a9 b8		lda #$b8			lda 	#PCD_PRINTCMD_TAB 			; , next tab stop
.150d	20 00 09	jsr $0900			jsr 	WriteCodeByte
.1510					_CPCheckEnd:
.1510	20 71 12	jsr $1271			jsr 	GetNext 					; consume it.
.1513	20 63 12	jsr $1263			jsr 	LookNextNonSpace 			; what follows ?
.1516	20 27 15	jsr $1527			jsr 	_CPAtEnd 					; reached end
.1519	90 cf		bcc $14ea			bcc 	CommandPRINT 				; no, loop back
.151b	60		rts				rts
.151c					_CPExitCR:
.151c	a9 0d		lda #$0d			lda 	#13 						; code to print CR
.151e	20 29 0a	jsr $0a29			jsr 	PushIntegerA
.1521	a9 92		lda #$92			lda 	#PCD_PRINTCMD_CHR
.1523	20 00 09	jsr $0900			jsr 	WriteCodeByte
.1526	60		rts				rts
.1527					_CPAtEnd:
.1527	c9 00		cmp #$00			cmp 	#0
.1529	f0 06		beq $1531			beq 	_CPIsEnd
.152b	c9 3a		cmp #$3a			cmp 	#":"
.152d	f0 02		beq $1531			beq 	_CPIsEnd
.152f	18		clc				clc
.1530	60		rts				rts
.1531					_CPIsEnd:
.1531	38		sec				sec
.1532	60		rts				rts
.1533					CommandREAD:
.1533	a2 b3		ldx #$b3			ldx 	#PCD_READ
.1535	a0 b4		ldy #$b4			ldy 	#PCD_READDOLLAR
.1537					CommandReadInputCommon:
.1537	8e 0d 05	stx $050d			stx 	numberPCode
.153a	8c 0e 05	sty $050e			sty 	stringPCode
.153d					_CRLoop:
.153d	20 7c 12	jsr $127c			jsr 	GetNextNonSpace 			; first char of identifier
.1540	20 92 12	jsr $1292			jsr 	CharIsAlpha 				; check A-Z
.1543	90 27		bcc $156c			bcc 	_CRSyntax
.1545	20 bd 15	jsr $15bd			jsr 	GetReferenceTerm 			; get the variable.
.1548	48		pha				pha 								; save type.
.1549	29 40		and #$40			and 	#NSSTypeMask 				; is it a string ?
.154b	c9 40		cmp #$40			cmp 	#NSSString
.154d	f0 05		beq $1554			beq 	_CRString
.154f	ad 0d 05	lda $050d			lda 	numberPCode 				; output read/input
.1552	80 03		bra $1557			bra 	_CRHaveType
.1554					_CRString:
.1554	ad 0e 05	lda $050e			lda 	stringPCode					; output read$/input$
.1557					_CRHaveType:
.1557	20 00 09	jsr $0900			jsr 	WriteCodeByte 				; so we have one typed data item.
.155a	68		pla				pla 								; restore type
.155b	38		sec				sec  								; write update code.
.155c	20 6f 15	jsr $156f			jsr 	GetSetVariable
.155f	20 63 12	jsr $1263			jsr 	LookNextNonSpace 			; , follows ?
.1562	c9 2c		cmp #$2c			cmp 	#","
.1564	d0 05		bne $156b			bne 	_CRExit 					; if not, end of READ.
.1566	20 71 12	jsr $1271			jsr 	GetNext 					; consume comma
.1569	80 d2		bra $153d			bra 	_CRLoop 					; keep going
.156b					_CRExit:
.156b	60		rts				rts
.156c					_CRSyntax:
.156c	4c 65 17	jmp $1765		jmp	ErrorV_syntax
.050d					numberPCode:
>050d							.fill 	1
.050e					stringPCode:
>050e							.fill 	1
.156f					GetSetVariable:
.156f	08		php				php 								; save direction on stack
.1570	c0 00		cpy #$00			cpy 	#$00
.1572	30 21		bmi $1595			bmi 	_GSVReadWriteSpecial
.1574	c9 00		cmp #$00			cmp 	#$00
.1576	30 33		bmi $15ab			bmi 	_GSVArray
.1578	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16 		; get type bits
.157a	4a		lsr a				lsr 	a 							; divide by 2
.157b	09 40		ora #$40			ora 	#64 						; and set bit 6.
.157d	28		plp				plp
.157e	90 02		bcc $1582			bcc 	_GSVNotWrite
.1580	09 08		ora #$08			ora 	#8  						; set bit 3 if it is write.
.1582					_GSVNotWrite:
.1582	85 2a		sta $2a				sta 	zTemp0
.1584	98		tya				tya 	 							; shift X/Y right as the address stored is halved
.1585	4a		lsr a				lsr 	a
.1586	a8		tay				tay
.1587	8a		txa				txa
.1588	6a		ror a				ror 	a
.1589	aa		tax				tax
.158a	98		tya				tya 								; lower 3 bits of YX are ORed into the opcode
.158b	05 2a		ora $2a				ora 	zTemp0 						; which is the first byte of the opcode
.158d	20 00 09	jsr $0900			jsr 	WriteCodeByte
.1590	8a		txa				txa 								; and the lower 8 bits of YX are the second byte
.1591	20 00 09	jsr $0900			jsr 	WriteCodeByte
.1594	60		rts				rts
.1595					_GSVReadWriteSpecial:
.1595	28		plp				plp
.1596	b0 10		bcs $15a8			bcs 	_GSVSyntax
.1598	c0 c0		cpy #$c0			cpy 	#$C0 						; TI$ ?
.159a	f0 06		beq $15a2			beq 	_GSVRWString
.159c	a9 c0		lda #$c0			lda 	#(PCD_TI) & $FF
.159e	20 00 09	jsr $0900			jsr 	WriteCodeByte
.15a1	60		rts				rts
.15a2					_GSVRWString:
.15a2	a9 c1		lda #$c1			lda 	#(PCD_TIDOLLAR) & $FF
.15a4	20 00 09	jsr $0900			jsr 	WriteCodeByte
.15a7	60		rts				rts
.15a8					_GSVSyntax:
.15a8	4c 65 17	jmp $1765		jmp	ErrorV_syntax
.15ab					_GSVArray:
.15ab	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16 		; mask out 2 bits of type data
.15ad	4a		lsr a				lsr 	a		 					; shift from 5,6 to 0,1
.15ae	4a		lsr a				lsr 	a
.15af	4a		lsr a				lsr 	a
.15b0	4a		lsr a				lsr 	a
.15b1	4a		lsr a				lsr 	a
.15b2	28		plp				plp 								; if writing array then set bit 2.
.15b3	90 02		bcc $15b7			bcc 	_GSVANotWrite
.15b5	09 04		ora #$04			ora 	#4
.15b7					_GSVANotWrite:
.15b7	09 78		ora #$78			ora 	#$78 						; make a valid opcode.
.15b9	20 00 09	jsr $0900			jsr 	WriteCodeByte 				; and write it out
.15bc	60		rts				rts
.15bd					GetReferenceTerm:
.15bd	20 e1 12	jsr $12e1			jsr 	ExtractVariableName 		; get name & type info
.15c0	e0 00		cpx #$00			cpx 	#0 							; check for array handler
.15c2	30 10		bmi $15d4			bmi 	_GRTArray
.15c4	da		phx				phx 								; save type on stack
.15c5	20 d0 0c	jsr $0cd0			jsr 	FindVariable 				; find it
.15c8	b0 06		bcs $15d0			bcs 	_GRTNoCreate 				; create if required.
.15ca	20 5b 0a	jsr $0a5b			jsr 	CreateVariableRecord 		; create a variable.
.15cd	20 b0 0a	jsr $0ab0			jsr 	AllocateBytesForType 		; allocate memory for it
.15d0					_GRTNoCreate:
.15d0	68		pla				pla 								; get type back, strip out type information.
.15d1	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16
.15d3	60		rts				rts
.15d4					_GRTArray:
.15d4	da		phx				phx 								; save type information
.15d5	20 d0 0c	jsr $0cd0			jsr 	FindVariable 				; read its data, the base address in YX
.15d8	90 18		bcc $15f2			bcc 	_GRTUndeclared 				; undeclared array.
.15da	da		phx				phx 								; save base address
.15db	5a		phy				phy
.15dc	20 a7 0b	jsr $0ba7			jsr 	OutputIndexGroup 			; create an index group and generate them
.15df	7a		ply				ply 								; get the array base address into YX
.15e0	fa		plx				plx
.15e1	a9 20		lda #$20			lda 	#NSSIFloat+NSSIInt16 		; pretend it is an int16 reference.
.15e3	18		clc				clc
.15e4	20 6f 15	jsr $156f			jsr 	GetSetVariable 				; load the address of the array structure.
.15e7	a9 8e		lda #$8e			lda 	#(PCD_ARRAY) & $FF
.15e9	20 00 09	jsr $0900			jsr 	WriteCodeByte
.15ec	68		pla				pla 								; and the type data into A
.15ed	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16
.15ef	09 80		ora #$80			ora 	#$80 						; with the array flag set.
.15f1	60		rts				rts
.15f2					_GRTUndeclared:
.15f2	4c 1c 18	jmp $181c		jmp	ErrorV_undeclared
.15f5					CommandREM:
.15f5	20 60 12	jsr $1260			jsr 	LookNext
.15f8	f0 05		beq $15ff			beq 	_CRExit
.15fa	20 71 12	jsr $1271			jsr 	GetNext
.15fd	80 f6		bra $15f5			bra 	CommandREM
.15ff					_CRExit:
.15ff	60		rts				rts
.1600					STRReset:
.1600	ad 07 05	lda $0507			lda	 	compilerStartHigh 			; set up the two table pointers
.1603	8d 12 05	sta $0512			sta 	variableListEnd+1
.1606	9c 11 05	stz $0511			stz 	variableListEnd
.1609	ad 08 05	lda $0508			lda 	compilerEndHigh
.160c	8d 10 05	sta $0510			sta 	lineNumberTable+1
.160f	9c 0f 05	stz $050f			stz 	lineNumberTable
.1612	ad 11 05	lda $0511			lda 	variableListEnd
.1615	85 2b		sta $2b				sta 	zTemp0+1
.1617	64 2a		stz $2a				stz 	zTemp0
.1619	a9 00		lda #$00			lda 	#0
.161b	92 2a		sta ($2a)			sta 	(zTemp0)
.161d	a9 00		lda #$00			lda 	#((0) & $FF)
.161f	8d 13 05	sta $0513			sta 	0+freeVariableMemory
.1622	a9 00		lda #$00			lda 	#((0) >> 8) & $FF
.1624	8d 14 05	sta $0514			sta 	1+freeVariableMemory
.1627	60		rts				rts
.050f					lineNumberTable:
>050f							.fill 	2
.0511					variableListEnd:
>0511							.fill 	2
.0513					freeVariableMemory:
>0513							.fill 	2
.1628					CompileTerm:
.1628	20 7c 12	jsr $127c			jsr 	GetNextNonSpace 			; get first non space character.
.162b	30 72		bmi $169f			bmi 	_CTUnaryFunctions
.162d	20 86 12	jsr $1286			jsr 	CharIsDigit 				; found a number
.1630	b0 3a		bcs $166c			bcs 	_CTDigit
.1632	c9 2e		cmp #$2e			cmp 	#"."
.1634	f0 36		beq $166c			beq 	_CTDigit
.1636	c9 22		cmp #$22			cmp 	#'"' 						; found a string ?
.1638	f0 43		beq $167d			beq 	_CTString
.163a	c9 25		cmp #$25			cmp 	#"%"						; binary or hexadecimal ?
.163c	f0 28		beq $1666			beq 	_CTOtherBase
.163e	c9 24		cmp #$24			cmp 	#"$"
.1640	f0 24		beq $1666			beq 	_CTOtherBase
.1642	c9 28		cmp #$28			cmp 	#"(" 						; check parenthesis
.1644	f0 17		beq $165d			beq 	_CTBrackets
.1646	c9 41		cmp #$41			cmp 	#"A" 						; check variable/array ?
.1648	90 10		bcc $165a			bcc 	_CTSyntax
.164a	c9 5b		cmp #$5b			cmp 	#"Z"+1
.164c	b0 0c		bcs $165a			bcs 	_CTSyntax
.164e	20 bd 15	jsr $15bd			jsr 	GetReferenceTerm 			; figure out what it is.
.1651	48		pha				pha 								; save type on stack
.1652	18		clc				clc 								; read it
.1653	20 6f 15	jsr $156f			jsr 	GetSetVariable
.1656	68		pla				pla
.1657	29 40		and #$40			and 	#NSSTypeMask 				; reduce to basic type
.1659	60		rts				rts
.165a					_CTSyntax:
.165a	4c 65 17	jmp $1765		jmp	ErrorV_syntax
.165d					_CTBrackets:
.165d	20 16 0c	jsr $0c16			jsr 	CompileExpressionAt0
.1660	48		pha				pha
.1661	20 62 09	jsr $0962			jsr 	CheckNextRParen
.1664	68		pla				pla
.1665	60		rts				rts
.1666					_CTOtherBase:
.1666	20 ae 08	jsr $08ae			jsr 	InlineNonDecimal 			; non decimal constant handler
.1669	a9 00		lda #$00			lda 	#NSSIFloat					; return a iFloat32 integer
.166b	60		rts				rts
.166c					_CTDigit:
.166c	20 c5 14	jsr $14c5			jsr 	ParseConstant 				; parse out an number, first is in A already.
.166f	90 06		bcc $1677			bcc	 	_CTFloat 					; have a float or long int.
.1671	20 16 0a	jsr $0a16			jsr 	PushIntegerYA 				; code to push on stack
.1674	a9 00		lda #$00			lda 	#NSSIFloat					; return a iFloat32 integer
.1676	60		rts				rts
.1677					_CTFloat:
.1677	20 38 0a	jsr $0a38			jsr 	PushFloatCommand			; code to push float
.167a	a9 00		lda #$00			lda 	#NSSIFloat 					; return a iFloat32
.167c	60		rts				rts
.167d					_CTString:
.167d	20 37 09	jsr $0937			jsr 	BufferClear 				; copy it to the buffer
.1680					_CTStringLoop:
.1680	20 60 12	jsr $1260			jsr 	LookNext 					; reached EOL/EOS
.1683	f0 d5		beq $165a			beq 	_CTSyntax
.1685	c9 22		cmp #$22			cmp 	#'"'
.1687	f0 08		beq $1691			beq 	_CTStringDone
.1689	20 3b 09	jsr $093b			jsr 	BufferWrite 				; write and consume
.168c	20 71 12	jsr $1271			jsr 	GetNext
.168f	80 ef		bra $1680			bra 	_CTStringLoop
.1691					_CTStringDone:
.1691	20 71 12	jsr $1271			jsr 	GetNext 					; consume closing quote.
.1694	a9 cf		lda #$cf			lda 	#PCD_CMD_STRING 			; output command and buffer
.1696	20 00 09	jsr $0900			jsr 	WriteCodeByte
.1699	20 47 09	jsr $0947			jsr 	BufferOutput
.169c	a9 40		lda #$40			lda 	#NSSString 					; string type
.169e	60		rts				rts
.169f					_CTUnaryFunctions:
.169f	c9 ab		cmp #$ab			cmp 	#C64_MINUS 					; negation of term.
.16a1	f0 0a		beq $16ad			beq 	_CTNegation
.16a3	a2 02		ldx #$02			ldx 	#UnaryTables & $FF 			; check vs unary tables.
.16a5	a0 10		ldy #$10			ldy 	#UnaryTables >> 8
.16a7	20 02 11	jsr $1102			jsr 	GeneratorProcess
.16aa	90 ae		bcc $165a			bcc		_CTSyntax
.16ac	60		rts				rts
.16ad					_CTNegation:
.16ad	20 28 16	jsr $1628			jsr 	CompileTerm 				; compile a term.
.16b0	48		pha				pha
.16b1	29 40		and #$40			and 	#NSSTypeMask 				; if not an ifloat32 of some sort.
.16b3	c9 00		cmp #$00			cmp 	#NSSIFloat
.16b5	d0 07		bne $16be			bne 	_CTType 					; error
.16b7	a9 a5		lda #$a5			lda 	#PCD_NEGATE 				; compile negate
.16b9	20 00 09	jsr $0900			jsr 	WriteCodeByte
.16bc	68		pla				pla 								; return original type.
.16bd	60		rts				rts
.16be					_CTType:
.16be	4c 75 17	jmp $1775		jmp	ErrorV_type
.16c1					CommandWAIT:
.16c1	20 63 12	jsr $1263			jsr 	LookNextNonSpace
.16c4	c9 2c		cmp #$2c			cmp 	#","
.16c6	f0 10		beq $16d8			beq 	_CWThirdParameter
.16c8	a9 00		lda #$00			lda 	#0
.16ca	20 29 0a	jsr $0a29			jsr 	PushIntegerA
.16cd					_CWExit:
.16cd	a9 cb		lda #$cb			lda 	#(PCD_WAIT) >> 8
.16cf	20 00 09	jsr $0900			jsr 	WriteCodeByte
.16d2	a9 94		lda #$94			lda 	#(PCD_WAIT) & $FF
.16d4	20 00 09	jsr $0900			jsr 	WriteCodeByte
.16d7	60		rts				rts
.16d8					_CWThirdParameter:
.16d8	20 71 12	jsr $1271			jsr 	GetNext
.16db	20 18 0c	jsr $0c18			jsr 	CompileExpressionAtA
.16de	29 40		and #$40			and 	#NSSTypeMask
.16e0	c9 00		cmp #$00			cmp 	#NSSIFloat
.16e2	f0 e9		beq $16cd			beq 	_CWExit
.16e4	4c 75 17	jmp $1775		jmp	ErrorV_type
.16e7					CommandCMD:
.16e7	a9 b0		lda #$b0			lda 	#PCD_SETCHANNEL 			; set the channel to this now forever.
.16e9	20 00 09	jsr $0900			jsr 	WriteCodeByte
.16ec	20 63 12	jsr $1263			jsr 	LookNextNonSpace 			; followed by a , ?
.16ef	c9 2c		cmp #$2c			cmp 	#","
.16f1	d0 06		bne $16f9			bne 	_CCMDExit
.16f3	20 71 12	jsr $1271			jsr 	GetNext 					; consume comma.
.16f6	20 ea 14	jsr $14ea			jsr 	CommandPRINT 				; do the print code
.16f9					_CCMDExit:
.16f9	60		rts				rts
.16fa					CommandOPEN:
.16fa	20 63 12	jsr $1263			jsr 	LookNextNonSpace 			; followed by a , ?
.16fd	c9 2c		cmp #$2c			cmp 	#","
.16ff	d0 15		bne $1716			bne 	_COTwoDefaults
.1701	20 71 12	jsr $1271			jsr 	GetNext 					; consume comma
.1704	20 16 0c	jsr $0c16			jsr 	CompileExpressionAt0 		; what follows could be text or number.
.1707	29 40		and #$40			and 	#NSSString 					; if a number want a string to follow
.1709	f0 1e		beq $1729			beq 	_COThreeIntegers
.170b	a9 00		lda #$00			lda 	#0		 					; so we have n,n,$,0 so swap !
.170d	20 29 0a	jsr $0a29			jsr 	PushIntegerA
.1710	a9 bf		lda #$bf			lda 	#(PCD_SWAP) & $FF
.1712	20 00 09	jsr $0900			jsr 	WriteCodeByte
.1715	60		rts				rts
.1716					_COTwoDefaults:
.1716	a9 00		lda #$00			lda 	#0
.1718	20 29 0a	jsr $0a29			jsr 	PushIntegerA
.171b					_COCompileNullString:
.171b	a9 cf		lda #$cf			lda 	#(PCD_CMD_STRING) & $FF
.171d	20 00 09	jsr $0900			jsr 	WriteCodeByte
.1720	a9 00		lda #$00			lda 	#0
.1722	20 00 09	jsr $0900			jsr 	WriteCodeByte
.1725	20 00 09	jsr $0900			jsr 	WriteCodeByte
.1728	60		rts				rts
.1729					_COThreeIntegers:
.1729	20 63 12	jsr $1263			jsr 	LookNextNonSpace 			; is there a ,
.172c	c9 2c		cmp #$2c			cmp 	#","
.172e	d0 eb		bne $171b			bne 	_COCompileNullString 		; if not it is n,n,n so default filename.
.1730	20 71 12	jsr $1271			jsr 	GetNext
.1733	20 16 0c	jsr $0c16			jsr 	CompileExpressionAt0 		; should be a filename
.1736	29 40		and #$40			and 	#NSSString
.1738	f0 01		beq $173b			beq 	_COType
.173a	60		rts				rts
.173b					_COType:
.173b	4c 75 17	jmp $1775		jmp	ErrorV_type

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/common.library

=$80					C64_END                  = $80 ; $80 end
=$81					C64_FOR                  = $81 ; $81 for
=$82					C64_NEXT                 = $82 ; $82 next
=$83					C64_DATA                 = $83 ; $83 data
=$84					C64_INPUTHASH            = $84 ; $84 input#
=$85					C64_INPUT                = $85 ; $85 input
=$86					C64_DIM                  = $86 ; $86 dim
=$87					C64_READ                 = $87 ; $87 read
=$88					C64_LET                  = $88 ; $88 let
=$89					C64_GOTO                 = $89 ; $89 goto
=$8a					C64_RUN                  = $8a ; $8a run
=$8b					C64_IF                   = $8b ; $8b if
=$8c					C64_RESTORE              = $8c ; $8c restore
=$8d					C64_GOSUB                = $8d ; $8d gosub
=$8e					C64_RETURN               = $8e ; $8e return
=$8f					C64_REM                  = $8f ; $8f rem
=$90					C64_STOP                 = $90 ; $90 stop
=$91					C64_ON                   = $91 ; $91 on
=$92					C64_WAIT                 = $92 ; $92 wait
=$93					C64_LOAD                 = $93 ; $93 load
=$94					C64_SAVE                 = $94 ; $94 save
=$95					C64_VERIFY               = $95 ; $95 verify
=$96					C64_DEF                  = $96 ; $96 def
=$97					C64_POKE                 = $97 ; $97 poke
=$98					C64_PRINTHASH            = $98 ; $98 print#
=$99					C64_PRINT                = $99 ; $99 print
=$9a					C64_CONT                 = $9a ; $9a cont
=$9b					C64_LIST                 = $9b ; $9b list
=$9c					C64_CLR                  = $9c ; $9c clr
=$9d					C64_CMD                  = $9d ; $9d cmd
=$9e					C64_SYS                  = $9e ; $9e sys
=$9f					C64_OPEN                 = $9f ; $9f open
=$a0					C64_CLOSE                = $a0 ; $a0 close
=$a1					C64_GET                  = $a1 ; $a1 get
=$a2					C64_NEW                  = $a2 ; $a2 new
=$a3					C64_TABLB                = $a3 ; $a3 tab(
=$a4					C64_TO                   = $a4 ; $a4 to
=$a5					C64_FN                   = $a5 ; $a5 fn
=$a6					C64_SPCLB                = $a6 ; $a6 spc(
=$a7					C64_THEN                 = $a7 ; $a7 then
=$a8					C64_NOT                  = $a8 ; $a8 not
=$a9					C64_STEP                 = $a9 ; $a9 step
=$aa					C64_PLUS                 = $aa ; $aa +
=$ab					C64_MINUS                = $ab ; $ab -
=$ac					C64_TIMES                = $ac ; $ac *
=$ad					C64_DIVIDE               = $ad ; $ad /
=$ae					C64_POWER                = $ae ; $ae ^
=$af					C64_AND                  = $af ; $af and
=$b0					C64_OR                   = $b0 ; $b0 or
=$b1					C64_GREATER              = $b1 ; $b1 >
=$b2					C64_EQUAL                = $b2 ; $b2 =
=$b3					C64_LESS                 = $b3 ; $b3 <
=$b4					C64_SGN                  = $b4 ; $b4 sgn
=$b5					C64_INT                  = $b5 ; $b5 int
=$b6					C64_ABS                  = $b6 ; $b6 abs
=$b7					C64_USR                  = $b7 ; $b7 usr
=$b8					C64_FRE                  = $b8 ; $b8 fre
=$b9					C64_POS                  = $b9 ; $b9 pos
=$ba					C64_SQR                  = $ba ; $ba sqr
=$bb					C64_RND                  = $bb ; $bb rnd
=$bc					C64_LOG                  = $bc ; $bc log
=$bd					C64_EXP                  = $bd ; $bd exp
=$be					C64_COS                  = $be ; $be cos
=$bf					C64_SIN                  = $bf ; $bf sin
=$c0					C64_TAN                  = $c0 ; $c0 tan
=$c1					C64_ATN                  = $c1 ; $c1 atn
=$c2					C64_PEEK                 = $c2 ; $c2 peek
=$c3					C64_LEN                  = $c3 ; $c3 len
=$c4					C64_STRDOLLAR            = $c4 ; $c4 str$
=$c5					C64_VAL                  = $c5 ; $c5 val
=$c6					C64_ASC                  = $c6 ; $c6 asc
=$c7					C64_CHRDOLLAR            = $c7 ; $c7 chr$
=$c8					C64_LEFTDOLLAR           = $c8 ; $c8 left$
=$c9					C64_RIGHTDOLLAR          = $c9 ; $c9 right$
=$ca					C64_MIDDOLLAR            = $ca ; $ca mid$
=$cb					C64_GO                   = $cb ; $cb go
=$ff					C64_PI                   = $ff ; $ff pi
=$ce80					C64_MON                  = $ce80 ; $ce80 mon
=$ce81					C64_DOS                  = $ce81 ; $ce81 dos
=$ce82					C64_OLD                  = $ce82 ; $ce82 old
=$ce83					C64_GEOS                 = $ce83 ; $ce83 geos
=$ce84					C64_VPOKE                = $ce84 ; $ce84 vpoke
=$ce85					C64_VLOAD                = $ce85 ; $ce85 vload
=$ce86					C64_SCREEN               = $ce86 ; $ce86 screen
=$ce87					C64_PSET                 = $ce87 ; $ce87 pset
=$ce88					C64_LINE                 = $ce88 ; $ce88 line
=$ce89					C64_FRAME                = $ce89 ; $ce89 frame
=$ce8a					C64_RECT                 = $ce8a ; $ce8a rect
=$ce8b					C64_CHAR                 = $ce8b ; $ce8b char
=$ce8c					C64_MOUSE                = $ce8c ; $ce8c mouse
=$ce8d					C64_COLOR                = $ce8d ; $ce8d color
=$ce8e					C64_TEST                 = $ce8e ; $ce8e test
=$ce8f					C64_RESET                = $ce8f ; $ce8f reset
=$ce90					C64_CLS                  = $ce90 ; $ce90 cls
=$ce91					C64_CODEX                = $ce91 ; $ce91 codex
=$ce92					C64_LOCATE               = $ce92 ; $ce92 locate
=$ce93					C64_BOOT                 = $ce93 ; $ce93 boot
=$ce94					C64_KEYMAP               = $ce94 ; $ce94 keymap
=$ce95					C64_BLOAD                = $ce95 ; $ce95 bload
=$ce96					C64_BVLOAD               = $ce96 ; $ce96 bvload
=$ce97					C64_BVERIFY              = $ce97 ; $ce97 bverify
=$ce98					C64_BANK                 = $ce98 ; $ce98 bank
=$ce99					C64_FMINIT               = $ce99 ; $ce99 fminit
=$ce9a					C64_FMNOTE               = $ce9a ; $ce9a fmnote
=$ce9b					C64_FMDRUM               = $ce9b ; $ce9b fmdrum
=$ce9c					C64_FMINST               = $ce9c ; $ce9c fminst
=$ce9d					C64_FMVIB                = $ce9d ; $ce9d fmvib
=$ce9e					C64_FMFREQ               = $ce9e ; $ce9e fmfreq
=$ce9f					C64_FMVOL                = $ce9f ; $ce9f fmvol
=$cea0					C64_FMPAN                = $cea0 ; $cea0 fmpan
=$cea1					C64_FMPLAY               = $cea1 ; $cea1 fmplay
=$cea2					C64_FMCHORD              = $cea2 ; $cea2 fmchord
=$cea3					C64_FMPOKE               = $cea3 ; $cea3 fmpoke
=$cea4					C64_PSGINIT              = $cea4 ; $cea4 psginit
=$cea5					C64_PSGNOTE              = $cea5 ; $cea5 psgnote
=$cea6					C64_PSGVOL               = $cea6 ; $cea6 psgvol
=$cea7					C64_PSGWAV               = $cea7 ; $cea7 psgwav
=$cea8					C64_PSGFREQ              = $cea8 ; $cea8 psgfreq
=$cea9					C64_PSGPAN               = $cea9 ; $cea9 psgpan
=$ceaa					C64_PSGPLAY              = $ceaa ; $ceaa psgplay
=$ceab					C64_PSGCHORD             = $ceab ; $ceab psgchord
=$ceac					C64_REBOOT               = $ceac ; $ceac reboot
=$cead					C64_POWEROFF             = $cead ; $cead poweroff
=$ceae					C64_I2CPOKE              = $ceae ; $ceae i2cpoke
=$ceaf					C64_SLEEP                = $ceaf ; $ceaf sleep
=$ceb0					C64_BSAVE                = $ceb0 ; $ceb0 bsave
=$ceb1					C64_MENU                 = $ceb1 ; $ceb1 menu
=$ceb2					C64_REN                  = $ceb2 ; $ceb2 ren
=$ceb3					C64_LINPUT               = $ceb3 ; $ceb3 linput
=$ceb4					C64_LINPUTHASH           = $ceb4 ; $ceb4 linput#
=$ceb5					C64_BINPUTHASH           = $ceb5 ; $ceb5 binput#
=$ceb6					C64_HELP                 = $ceb6 ; $ceb6 help
=$ceb7					C64_BANNER               = $ceb7 ; $ceb7 banner
=$ceb8					C64_EXEC                 = $ceb8 ; $ceb8 exec
=$ceb9					C64_TILE                 = $ceb9 ; $ceb9 tile
=$ceba					C64_EDIT                 = $ceba ; $ceba edit
=$ced0					C64_VPEEK                = $ced0 ; $ced0 vpeek
=$ced1					C64_MX                   = $ced1 ; $ced1 mx
=$ced2					C64_MY                   = $ced2 ; $ced2 my
=$ced3					C64_MB                   = $ced3 ; $ced3 mb
=$ced4					C64_JOY                  = $ced4 ; $ced4 joy
=$ced5					C64_HEXDOLLAR            = $ced5 ; $ced5 hex$
=$ced6					C64_BINDOLLAR            = $ced6 ; $ced6 bin$
=$ced7					C64_I2CPEEK              = $ced7 ; $ced7 i2cpeek
=$ced8					C64_POINTER              = $ced8 ; $ced8 pointer
=$ced9					C64_STRPTR               = $ced9 ; $ced9 strptr
=$ceda					C64_RPTDOLLAR            = $ceda ; $ceda rpt$
=$cedb					C64_MWHEEL               = $cedb ; $cedb mwheel
=$801					CodeStart = $801
=$22					ZeroPageMandatory = $22
=$400					MemoryStorage = $400
.0026					codePtr:
>0026							.fill 	2
.0028					objPtr:
>0028							.fill 	2
.002a					zTemp0:
>002a							.fill 	2
.002c					zTemp1:
>002c							.fill 	2
.002e					zTemp2:
>002e							.fill 	2
=$80					PCD_STARTBINARY = $80
=$8d					PCD_ENDBINARY = $8d
=$8d					PCD_STARTCOMMAND = $8d
=$cb					PCD_ENDCOMMAND = $cb
=$cb					PCD_STARTSYSTEM = $cb
=$d6					PCD_ENDSYSTEM = $d6
=$80					PCD_PLUS             = $80 ; +
=$81					PCD_MINUS            = $81 ; -
=$82					PCD_TIMES            = $82 ; *
=$83					PCD_DIVIDE           = $83 ; /
=$84					PCD_POWER            = $84 ; ^
=$85					PCD_AND              = $85 ; and
=$86					PCD_OR               = $86 ; or
=$87					PCD_GREATER          = $87 ; >
=$88					PCD_EQUAL            = $88 ; =
=$89					PCD_LESS             = $89 ; <
=$8a					PCD_GREATEREQUAL     = $8a ; >=
=$8b					PCD_LESSGREATER      = $8b ; <>
=$8c					PCD_LESSEQUAL        = $8c ; <=
=$8d					PCD_ABS              = $8d ; abs
=$8e					PCD_ARRAY            = $8e ; array
=$8f					PCD_ASC              = $8f ; asc
=$90					PCD_ASSERT           = $90 ; assert
=$91					PCD_BINDOLLAR        = $91 ; bin$
=$92					PCD_PRINTCMD_CHR     = $92 ; print.chr
=$93					PCD_CHRDOLLAR        = $93 ; chr$
=$94					PCD_SCMD_CMP         = $94 ; s.cmp
=$95					PCD_FOR              = $95 ; for
=$96					PCD_FRE              = $96 ; fre
=$97					PCD_GET              = $97 ; get
=$98					PCD_RETURN           = $98 ; return
=$99					PCD_PSET             = $99 ; pset
=$9a					PCD_LINE             = $9a ; line
=$9b					PCD_RECT             = $9b ; rect
=$9c					PCD_FRAME            = $9c ; frame
=$9d					PCD_CHAR             = $9d ; char
=$9e					PCD_HEXDOLLAR        = $9e ; hex$
=$9f					PCD_INPUT            = $9f ; input
=$a0					PCD_INPUTDOLLAR      = $a0 ; input$
=$a1					PCD_INPUTCMD_START   = $a1 ; input.start
=$a2					PCD_LEN              = $a2 ; len
=$a3					PCD_FCMD_CMP         = $a3 ; f.cmp
=$a4					PCD_INTCMD_DIV       = $a4 ; int.div
=$a5					PCD_NEGATE           = $a5 ; negate
=$a6					PCD_NEWCMD_LINE      = $a6 ; new.line
=$a7					PCD_NEXT             = $a7 ; next
=$a8					PCD_NOT              = $a8 ; not
=$a9					PCD_ON               = $a9 ; on
=$aa					PCD_MOREON           = $aa ; moreon
=$ab					PCD_PEEK             = $ab ; peek
=$ac					PCD_PI               = $ac ; pi
=$ad					PCD_POKE             = $ad ; poke
=$ae					PCD_POS              = $ae ; pos
=$af					PCD_GETCHANNEL       = $af ; getchannel
=$b0					PCD_SETCHANNEL       = $b0 ; setchannel
=$b1					PCD_PRINTCMD_N       = $b1 ; print.n
=$b2					PCD_PRINTCMD_S       = $b2 ; print.s
=$b3					PCD_READ             = $b3 ; read
=$b4					PCD_READDOLLAR       = $b4 ; read$
=$b5					PCD_RND              = $b5 ; rnd
=$b6					PCD_CONCAT           = $b6 ; concat
=$b7					PCD_SGN              = $b7 ; sgn
=$b8					PCD_PRINTCMD_TAB     = $b8 ; print.tab
=$b9					PCD_PRINTCMD_POS     = $b9 ; print.pos
=$ba					PCD_PRINTCMD_SPC     = $ba ; print.spc
=$bb					PCD_STRDOLLAR        = $bb ; str$
=$bc					PCD_LEFTDOLLAR       = $bc ; left$
=$bd					PCD_RIGHTDOLLAR      = $bd ; right$
=$be					PCD_MIDDOLLAR        = $be ; mid$
=$bf					PCD_SWAP             = $bf ; swap
=$c0					PCD_TI               = $c0 ; ti
=$c1					PCD_TIDOLLAR         = $c1 ; ti$
=$c2					PCD_USR              = $c2 ; usr
=$c3					PCD_VAL              = $c3 ; val
=$c4					PCD_CLOSE            = $c4 ; close
=$c5					PCD_EXIT             = $c5 ; exit
=$c6					PCD_DEBUG            = $c6 ; debug
=$c7					PCD_OPEN             = $c7 ; open
=$c8					PCD_SCREEN           = $c8 ; screen
=$c9					PCD_VPOKE            = $c9 ; vpoke
=$ca					PCD_VPEEK            = $ca ; vpeek
=$cb					PCD_CMD_SHIFT        = $cb ; .shift
=$cc					PCD_CMD_BYTE         = $cc ; .byte
=$cd					PCD_CMD_WORD         = $cd ; .word
=$ce					PCD_CMD_FLOAT        = $ce ; .float
=$cf					PCD_CMD_STRING       = $cf ; .string
=$d0					PCD_CMD_DATA         = $d0 ; .data
=$d1					PCD_CMD_GOTO         = $d1 ; .goto
=$d2					PCD_CMD_GOSUB        = $d2 ; .gosub
=$d3					PCD_CMD_GOTOCMD_Z    = $d3 ; .goto.z
=$d4					PCD_CMD_GOTOCMD_NZ   = $d4 ; .goto.nz
=$d5					PCD_CMD_VARSPACE     = $d5 ; .varspace
=$cb80					PCD_CLR              = $cb80 ; clr
=$cb81					PCD_DIM              = $cb81 ; dim
=$cb82					PCD_END              = $cb82 ; end
=$cb83					PCD_JOY              = $cb83 ; joy
=$cb84					PCD_INT              = $cb84 ; int
=$cb85					PCD_SQR              = $cb85 ; sqr
=$cb86					PCD_LOG              = $cb86 ; log
=$cb87					PCD_EXP              = $cb87 ; exp
=$cb88					PCD_COS              = $cb88 ; cos
=$cb89					PCD_SIN              = $cb89 ; sin
=$cb8a					PCD_TAN              = $cb8a ; tan
=$cb8b					PCD_ATN              = $cb8b ; atn
=$cb8c					PCD_MOUSE            = $cb8c ; mouse
=$cb8d					PCD_MB               = $cb8d ; mb
=$cb8e					PCD_MX               = $cb8e ; mx
=$cb8f					PCD_MY               = $cb8f ; my
=$cb90					PCD_RESTORE          = $cb90 ; restore
=$cb91					PCD_STOP             = $cb91 ; stop
=$cb92					PCD_SYS              = $cb92 ; sys
=$cb93					PCD_TIDOLLARCMD_WRITE = $cb93 ; ti$.write
=$cb94					PCD_WAIT             = $cb94 ; wait
=$cb95					PCD_I2CPOKE          = $cb95 ; i2cpoke
=$cb96					PCD_I2CPEEK          = $cb96 ; i2cpeek
=$cb97					PCD_BANK             = $cb97 ; bank
=$cb98					PCD_SLEEP            = $cb98 ; sleep
=$cb99					PCD_FMINIT           = $cb99 ; fminit
=$cb9a					PCD_FMNOTE           = $cb9a ; fmnote
=$cb9b					PCD_FMDRUM           = $cb9b ; fmdrum
=$cb9c					PCD_FMINST           = $cb9c ; fminst
=$cb9d					PCD_FMVIB            = $cb9d ; fmvib
=$cb9e					PCD_FMFREQ           = $cb9e ; fmfreq
=$cb9f					PCD_FMVOL            = $cb9f ; fmvol
=$cba0					PCD_FMPAN            = $cba0 ; fmpan
=$cba1					PCD_FMPLAY           = $cba1 ; fmplay
=$cba2					PCD_FMCHORD          = $cba2 ; fmchord
=$cba3					PCD_FMPOKE           = $cba3 ; fmpoke
=$cba4					PCD_PSGINIT          = $cba4 ; psginit
=$cba5					PCD_PSGNOTE          = $cba5 ; psgnote
=$cba6					PCD_PSGVOL           = $cba6 ; psgvol
=$cba7					PCD_PSGWAV           = $cba7 ; psgwav
=$cba8					PCD_PSGFREQ          = $cba8 ; psgfreq
=$cba9					PCD_PSGPAN           = $cba9 ; psgpan
=$cbaa					PCD_PSGPLAY          = $cbaa ; psgplay
=$cbab					PCD_PSGCHORD         = $cbab ; psgchord
=$cbac					PCD_CLS              = $cbac ; cls
=$cbad					PCD_LOCATE           = $cbad ; locate
=$cbae					PCD_COLOR            = $cbae ; color
.173e					SetErrorHandler:
.173e	8c 16 05	sty $0516			sty 	ErrorHandlerVector+1
.1741	8e 15 05	stx $0515			stx 	ErrorHandlerVector
.1744	60		rts				rts
.1745					CallErrorHandler:
.1745	6c 15 05	jmp ($0515)			jmp 	(ErrorHandlerVector)
.0515					ErrorHandlerVector:
>0515							.fill 	2
.1748					ErrorV_range:
.1748	20 45 17	jsr $1745		jsr	CallErrorHandler
>174b	4f 55 54 20 4f 46 20 52			.text	"OUT OF RANGE",0
>1753	41 4e 47 45 00
.1758					ErrorV_value:
.1758	20 45 17	jsr $1745		jsr	CallErrorHandler
>175b	42 41 44 20 56 41 4c 55			.text	"BAD VALUE",0
>1763	45 00
.1765					ErrorV_syntax:
.1765	20 45 17	jsr $1745		jsr	CallErrorHandler
>1768	53 59 4e 54 41 58 20 45			.text	"SYNTAX ERROR",0
>1770	52 52 4f 52 00
.1775					ErrorV_type:
.1775	20 45 17	jsr $1745		jsr	CallErrorHandler
>1778	54 59 50 45 20 4d 49 53			.text	"TYPE MISMATCH",0
>1780	4d 41 54 43 48 00
.1786					ErrorV_unimplemented:
.1786	20 45 17	jsr $1745		jsr	CallErrorHandler
>1789	4e 4f 54 20 49 4d 50 4c			.text	"NOT IMPLEMENTED",0
>1791	45 4d 45 4e 54 45 44 00
.1799					ErrorV_assert:
.1799	20 45 17	jsr $1745		jsr	CallErrorHandler
>179c	41 53 53 45 52 54 20 46			.text	"ASSERT FAIL",0
>17a4	41 49 4c 00
.17a8					ErrorV_line:
.17a8	20 45 17	jsr $1745		jsr	CallErrorHandler
>17ab	55 4e 4b 4e 4f 57 4e 20			.text	"UNKNOWN LINE NUMBER",0
>17b3	4c 49 4e 45 20 4e 55 4d 42 45 52 00
.17bf					ErrorV_internal:
.17bf	20 45 17	jsr $1745		jsr	CallErrorHandler
>17c2	49 4e 54 45 52 4e 41 4c			.text	"INTERNAL ERROR",0
>17ca	20 45 52 52 4f 52 00
.17d1					ErrorV_divzero:
.17d1	20 45 17	jsr $1745		jsr	CallErrorHandler
>17d4	44 49 56 49 44 45 20 42			.text	"DIVIDE BY ZERO",0
>17dc	59 20 5a 45 52 4f 00
.17e3					ErrorV_structure:
.17e3	20 45 17	jsr $1745		jsr	CallErrorHandler
>17e6	53 54 52 55 43 54 55 52			.text	"STRUCTURE IMBALANCE",0
>17ee	45 20 49 4d 42 41 4c 41 4e 43 45 00
.17fa					ErrorV_stop:
.17fa	20 45 17	jsr $1745		jsr	CallErrorHandler
>17fd	50 52 4f 47 52 41 4d 20			.text	"PROGRAM STOPPED",0
>1805	53 54 4f 50 50 45 44 00
.180d					ErrorV_data:
.180d	20 45 17	jsr $1745		jsr	CallErrorHandler
>1810	4f 55 54 20 4f 46 20 44			.text	"OUT OF DATA",0
>1818	41 54 41 00
.181c					ErrorV_undeclared:
.181c	20 45 17	jsr $1745		jsr	CallErrorHandler
>181f	55 4e 4b 4e 4f 57 4e 20			.text	"UNKNOWN ARRAY",0
>1827	41 52 52 41 59 00
.182d					ErrorV_redefine:
.182d	20 45 17	jsr $1745		jsr	CallErrorHandler
>1830	41 52 52 41 59 20 52 45			.text	"ARRAY REDEFINED",0
>1838	44 45 46 49 4e 45 44 00
.1840					ErrorV_index:
.1840	20 45 17	jsr $1745		jsr	CallErrorHandler
>1843	42 41 44 20 41 52 52 41			.text	"BAD ARRAY INDEX",0
>184b	59 20 49 4e 44 45 58 00
.1853					ErrorV_memory:
.1853	20 45 17	jsr $1745		jsr	CallErrorHandler
>1856	4f 55 54 20 4f 46 20 4d			.text	"OUT OF MEMORY",0
>185e	45 4d 4f 52 59 00
.1864					ErrorV_channel:
.1864	20 45 17	jsr $1745		jsr	CallErrorHandler
>1867	49 4e 50 55 54 2f 4f 55			.text	"INPUT/OUTPUT ERROR",0
>186f	54 50 55 54 20 45 52 52 4f 52 00
.187a					ErrorV_break:
.187a	20 45 17	jsr $1745		jsr	CallErrorHandler
>187d	42 52 45 41 4b 20 50 52			.text	"BREAK PRESSED",0
>1885	45 53 53 45 44 00
.188b					MoveObjectForward:
.188b	b2 28		lda ($28)			lda 	(objPtr) 					; get next
.188d	c9 ff		cmp #$ff			cmp 	#$FF
.188f	f0 36		beq $18c7			beq 	_MOFEnd
.1891	c9 40		cmp #$40			cmp 	#$40 						; 00-3F
.1893	90 24		bcc $18b9			bcc 	_MOFAdvance1 				; forward 1
.1895	a0 02		ldy #$02			ldy 	#2 							; 40-6F
.1897	c9 70		cmp #$70			cmp 	#$70 						; forward 2
.1899	90 20		bcc $18bb			bcc 	_MOFAdvanceY
.189b	c9 cb		cmp #$cb			cmp 	#PCD_STARTSYSTEM 			; 70 - System tokens.
.189d	90 1a		bcc $18b9			bcc 	_MOFAdvance1 				; forward 1
.189f	a8		tay				tay 								; read the size.
.18a0	b9 04 18	lda $1804,y			lda 	MOFSizeTable-PCD_STARTSYSTEM,y
.18a3	a8		tay				tay
.18a4	c8		iny				iny 								; add 1 for the system token.
.18a5	d0 14		bne $18bb			bne 	_MOFAdvanceY 				; if 0, was $FF thus a string/data skip.
.18a7	a0 01		ldy #$01			ldy 	#1 							; get length byte
.18a9	b1 28		lda ($28),y			lda 	(objPtr),y
.18ab	a8		tay				tay 								; into Y.
.18ac	18		clc				clc
.18ad	a5 28		lda $28				lda 	objPtr						; add 2 to the object pointer
.18af	69 02		adc #$02			adc 	#2
.18b1	85 28		sta $28				sta 	objPtr
.18b3	90 02		bcc $18b7			bcc 	_MOFNoCarry1
.18b5	e6 29		inc $29				inc 	objPtr+1
.18b7					_MOFNoCarry1:
.18b7	80 02		bra $18bb			bra 	_MOFAdvanceY
.18b9					_MOFAdvance1:
.18b9	a0 01		ldy #$01			ldy 	#1
.18bb					_MOFAdvanceY:
.18bb	98		tya				tya 								; add Y to objPtr
.18bc	18		clc				clc
.18bd	65 28		adc $28				adc 	objPtr
.18bf	85 28		sta $28				sta 	objPtr
.18c1	90 02		bcc $18c5			bcc 	_MOFNoCarry2
.18c3	e6 29		inc $29				inc 	objPtr+1
.18c5					_MOFNoCarry2:
.18c5	18		clc				clc 								; not completed.
.18c6	60		rts				rts
.18c7					_MOFEnd:
.18c7	e6 28		inc $28				inc 	objPtr
.18c9	d0 02		bne $18cd			bne 	_MOFENoCarry
.18cb	e6 29		inc $29				inc 	objPtr+1
.18cd					_MOFENoCarry:
.18cd	38		sec				sec
.18ce	60		rts				rts
.18cf					MOFSizeTable:
>18cf	01					.byte	1         	; $cb .shift
>18d0	01					.byte	1         	; $cc .byte
>18d1	02					.byte	2         	; $cd .word
>18d2	05					.byte	5         	; $ce .float
>18d3	ff					.byte	255       	; $cf .string
>18d4	ff					.byte	255       	; $d0 .data
>18d5	02					.byte	2         	; $d1 .goto
>18d6	02					.byte	2         	; $d2 .gosub
>18d7	02					.byte	2         	; $d3 .goto.z
>18d8	02					.byte	2         	; $d4 .goto.nz
>18d9	02					.byte	2         	; $d5 .varspace

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library

=12					MathStackSize = 12
=$40					NSSString = $40 							; string vs typemask
=$00					NSSIFloat = $00 							; ifloat vs typemask
=$20					NSSIInt16 = $20								; when set, a reference is a 16 bit reference (e.g. a%)
=$40					NSSTypeMask = $40
=$80					NSSArray = $80  							; array (in variable code)
.0030					NSStatus:
>0030							.fill 	MathStackSize
.003c					NSMantissa0:
>003c							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0048					NSMantissa1:
>0048							.fill 	MathStackSize
.0054					NSMantissa2:
>0054							.fill 	MathStackSize
.0060					NSMantissa3:
>0060							.fill 	MathStackSize
.006c					NSExponent:
>006c							.fill 	MathStackSize
.0517					numberBuffer:
>0517							.fill 	34
.18da					FloatSubtract:
.18da	b5 30		lda $30,x			lda 	NSStatus,x 					; negate top of stack
.18dc	49 80		eor #$80			eor 	#$80
.18de	95 30		sta $30,x			sta 	NSStatus,x					; and fall through.
.18e0					FloatAdd:
.18e0	ca		dex				dex
.18e1	b5 6c		lda $6c,x			lda 	NSExponent,x 				; can use optimised.
.18e3	15 6d		ora $6d,x			ora 	NSExponent+1,x
.18e5	15 60		ora $60,x			ora 	NSMantissa3,x
.18e7	15 61		ora $61,x			ora 	NSMantissa3+1,x
.18e9	d0 04		bne $18ef			bne 	_FAUseFloat
.18eb	20 7c 1c	jsr $1c7c			jsr 	FloatInt32Add 				; use the int32 one.
.18ee	60		rts				rts
.18ef					_FAUseFloat:
.18ef	20 11 1c	jsr $1c11			jsr 	FloatNormalise 				; normalise S[X]
.18f2	f0 51		beq $1945			beq 	_FAReturn1
.18f4	e8		inx				inx 								; normalise S[X+1]
.18f5	20 11 1c	jsr $1c11			jsr 	FloatNormalise
.18f8	ca		dex				dex
.18f9	c9 00		cmp #$00			cmp 	#0
.18fb	f0 60		beq $195d			beq 	_FAExit 					; if so, just return A
.18fd	b5 6c		lda $6c,x			lda 	NSExponent,x 				; are the exponents the same ?
.18ff	d5 6d		cmp $6d,x			cmp 	NSExponent+1,x
.1901	f0 18		beq $191b			beq 	_FAExponentsEqual
.1903	b5 6c		lda $6c,x			lda 	NSExponent,x 				; work out the larger exponent
.1905	a8		tay				tay
.1906	38		sec				sec 								; do a signed comparison of the exponents.
.1907	f5 6d		sbc $6d,x			sbc 	NSExponent+1,x
.1909	50 02		bvc $190d			bvc 	_FANoSignedChange
.190b	49 80		eor #$80			eor 	#$80
.190d					_FANoSignedChange:
.190d	29 80		and #$80			and 	#$80
.190f	10 02		bpl $1913			bpl 	_FAHaveMax
.1911	b4 6d		ldy $6d,x			ldy 	NSExponent+1,x
.1913					_FAHaveMax:
.1913	20 5e 19	jsr $195e			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.1916	e8		inx				inx
.1917	20 5e 19	jsr $195e			jsr 	_FAShiftToExponent
.191a	ca		dex				dex
.191b					_FAExponentsEqual:
.191b	b5 30		lda $30,x			lda 	NSStatus,x 					; are the signs the same
.191d	55 31		eor $31,x			eor 	NSStatus+1,x
.191f	30 0e		bmi $192f			bmi 	_FADifferentSigns
.1921	20 48 1c	jsr $1c48			jsr 	FloatAddTopTwoStack 		; do the add of the mantissae
.1924	b5 60		lda $60,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.1926	10 35		bpl $195d			bpl 	_FAExit 					; if no, we are done.
.1928	20 d5 1e	jsr $1ed5			jsr 	FloatShiftRight 				; shift A right, renormalising it.
.192b	f6 6c		inc $6c,x			inc 	NSExponent,x 				; bump the exponent and exit
.192d	80 2e		bra $195d			bra 	_FAExit
.192f					_FADifferentSigns:
.192f	20 62 1c	jsr $1c62			jsr 	FloatSubTopTwoStack 		; subtract mantissa B from A
.1932	b5 60		lda $60,x			lda 	NSMantissa3,x 				; is the result negative ?
.1934	10 06		bpl $193c			bpl 	_FACheckZero 				; if no, check for -0
.1936	20 7e 1e	jsr $1e7e			jsr 	FloatNegate 					; netate result
.1939	20 85 1e	jsr $1e85			jsr 	FloatNegateMantissa 			; negate (2'c) the mantissa
.193c					_FACheckZero:
.193c	20 de 1e	jsr $1ede			jsr 	FloatIsZero	 				; check for -0
.193f	d0 1c		bne $195d			bne 	_FAExit
.1941	74 30		stz $30,x			stz 	NSStatus,x
.1943	80 18		bra $195d			bra 	_FAExit
.1945					_FAReturn1:
.1945	b5 3d		lda $3d,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.1947	95 3c		sta $3c,x			sta 	NSMantissa0,x
.1949	b5 49		lda $49,x			lda 	NSMantissa1+1,x
.194b	95 48		sta $48,x			sta 	NSMantissa1,x
.194d	b5 55		lda $55,x			lda 	NSMantissa2+1,x
.194f	95 54		sta $54,x			sta 	NSMantissa2,x
.1951	b5 61		lda $61,x			lda 	NSMantissa3+1,x
.1953	95 60		sta $60,x			sta 	NSMantissa3,x
.1955	b5 6d		lda $6d,x			lda 	NSExponent+1,x
.1957	95 6c		sta $6c,x			sta 	NSExponent,x
.1959	b5 31		lda $31,x			lda 	NSStatus+1,x
.195b	95 30		sta $30,x			sta 	NSStatus,x
.195d					_FAExit:
.195d	60		rts				rts
.195e					_FAShiftToExponent:
.195e					_FAShiftToExponent2:
.195e	98		tya				tya 								; compare Y to exponent
.195f	d5 6c		cmp $6c,x			cmp 	NSExponent,x 				; reached the exponent required ?
.1961	f0 07		beq $196a			beq 	_FASEExit 					; exit if so.
.1963	20 d5 1e	jsr $1ed5			jsr 	FloatShiftRight	 			; shift the mantissa right
.1966	f6 6c		inc $6c,x			inc 	NSExponent,x 				; increment exponent
.1968	80 f4		bra $195e			bra 	_FAShiftToExponent2
.196a					_FASEExit:
.196a	60		rts				rts
.196b					CompareEqual:
.196b	b5 3c		lda $3c,x			lda 	NSMantissa0,x
.196d	d0 09		bne $1978			bne 	ReturnFalse
.196f					ReturnTrue:
.196f	a9 01		lda #$01			lda 	#1
.1971	95 3c		sta $3c,x			sta 	NSMantissa0,x
.1973	a9 80		lda #$80			lda 	#$80
.1975	95 30		sta $30,x			sta 	NSStatus,x
.1977	60		rts				rts
.1978					ReturnFalse:
.1978	74 3c		stz $3c,x			stz 	NSMantissa0,x
.197a	60		rts				rts
.197b					CompareNotEqual:
.197b	b5 3c		lda $3c,x			lda 	NSMantissa0,x
.197d	d0 f0		bne $196f			bne 	ReturnTrue
.197f	80 f7		bra $1978			bra 	ReturnFalse
.1981					CompareLess:
.1981	b5 3c		lda $3c,x			lda 	NSMantissa0,x
.1983	c9 ff		cmp #$ff			cmp 	#$FF
.1985	f0 e8		beq $196f			beq 	ReturnTrue
.1987	80 ef		bra $1978			bra 	ReturnFalse
.1989					CompareGreater:
.1989	b5 3c		lda $3c,x			lda 	NSMantissa0,x
.198b	c9 01		cmp #$01			cmp 	#$01
.198d	f0 e0		beq $196f			beq 	ReturnTrue
.198f	80 e7		bra $1978			bra 	ReturnFalse
.1991					CompareLessEqual:
.1991	b5 3c		lda $3c,x			lda 	NSMantissa0,x
.1993	c9 01		cmp #$01			cmp 	#$01
.1995	d0 d8		bne $196f			bne 	ReturnTrue
.1997	80 df		bra $1978			bra 	ReturnFalse
.1999					CompareGreaterEqual:
.1999	b5 3c		lda $3c,x			lda 	NSMantissa0,x
.199b	c9 ff		cmp #$ff			cmp 	#$FF
.199d	d0 d0		bne $196f			bne 	ReturnTrue
.199f	80 d7		bra $1978			bra 	ReturnFalse
.19a1					FloatCompare:
.19a1	b5 6c		lda $6c,x			lda 	NSExponent,x 				; float comparison.
.19a3	15 6b		ora $6b,x			ora 	NSExponent-1,x 				; integer if both integer.
.19a5	48		pha				pha
.19a6	20 da 18	jsr $18da			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.19a9	68		pla				pla
.19aa	d0 0c		bne $19b8			bne 	_FCCompareFloat
.19ac	b5 3c		lda $3c,x			lda 	NSMantissa0,x
.19ae	15 48		ora $48,x			ora 	NSMantissa1,x
.19b0	15 54		ora $54,x			ora 	NSMantissa2,x
.19b2	15 60		ora $60,x			ora 	NSMantissa3,x
.19b4	f0 14		beq $19ca			beq 	_FCExit 					; if zero, return zero
.19b6	80 0a		bra $19c2			bra 	_FCSign
.19b8					_FCCompareFloat:
.19b8	b5 48		lda $48,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.19ba	29 f0		and #$f0			and 	#$F0
.19bc	15 54		ora $54,x			ora 	NSMantissa2,x
.19be	15 60		ora $60,x			ora 	NSMantissa3,x
.19c0	f0 08		beq $19ca			beq 	_FCExit 					; zero, so approximately identical
.19c2					_FCSign:
.19c2	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.19c4	34 30		bit $30,x			bit 	NSStatus,x
.19c6	10 02		bpl $19ca			bpl 	_FCExit
.19c8					_FCNegative:
.19c8	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.19ca					_FCExit:
.19ca	20 be 1e	jsr $1ebe			jsr 	FloatSetByte 				; set the result 255,0,1
.19cd	60		rts				rts
.19ce					FloatScalarTable:
>19ce	66 66 66 66				.dword $66666666 ; 0.1
>19d2	de					.byte $de
>19d3	1f 85 eb 51				.dword $51eb851f ; 0.01
>19d7	db					.byte $db
>19d8	4c 37 89 41				.dword $4189374c ; 0.001
>19dc	d8					.byte $d8
>19dd	ac 8b db 68				.dword $68db8bac ; 0.0001
>19e1	d4					.byte $d4
>19e2	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>19e6	d1					.byte $d1
>19e7	83 de 1b 43				.dword $431bde83 ; 1e-06
>19eb	ce					.byte $ce
>19ec	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>19f0	ca					.byte $ca
>19f1	89 3b e6 55				.dword $55e63b89 ; 1e-08
>19f5	c7					.byte $c7
>19f6	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>19fa	c4					.byte $c4
>19fb	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>19ff	c0					.byte $c0
>1a00	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>1a04	bd					.byte $bd
.1a05					FloatDivide:
.1a05	48		pha				pha
.1a06	20 11 1c	jsr $1c11			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.1a09	ca		dex				dex
.1a0a	c9 00		cmp #$00			cmp 	#0
.1a0c	f0 1e		beq $1a2c			beq 	_FDZero
.1a0e	20 11 1c	jsr $1c11			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.1a11	f0 16		beq $1a29			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.1a13	20 74 1a	jsr $1a74			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.1a16	20 41 1a	jsr $1a41			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.1a19	20 11 1c	jsr $1c11			jsr		FloatNormalise 				; renormalise
.1a1c	20 07 1c	jsr $1c07			jsr 	FloatCalculateSign 			; calculate result sign
.1a1f	b5 6c		lda $6c,x			lda 	NSExponent,x 				; calculate exponent
.1a21	38		sec				sec
.1a22	f5 6d		sbc $6d,x			sbc 	NSExponent+1,x
.1a24	38		sec				sec
.1a25	e9 1e		sbc #$1e			sbc 	#30
.1a27	95 6c		sta $6c,x			sta 	NSExponent,x
.1a29					_FDExit:
.1a29	68		pla				pla
.1a2a	18		clc				clc
.1a2b	60		rts				rts
.1a2c					_FDZero:
.1a2c	68		pla				pla
.1a2d	38		sec				sec
.1a2e	60		rts				rts
.1a2f					DivideInt32:
.1a2f	20 f7 1a	jsr $1af7			jsr 	FloatIntegerPart 			; make both integers
.1a32	ca		dex				dex
.1a33	20 f7 1a	jsr $1af7			jsr 	FloatIntegerPart
.1a36	20 52 1a	jsr $1a52			jsr 	Int32Divide 				; divide
.1a39	20 41 1a	jsr $1a41			jsr 	NSMCopyPlusTwoToZero 		; copy result
.1a3c	20 07 1c	jsr $1c07			jsr 	FloatCalculateSign 			; calculate result sign
.1a3f	18		clc				clc
.1a40	60		rts				rts
.1a41					NSMCopyPlusTwoToZero:
.1a41	b5 3e		lda $3e,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.1a43	95 3c		sta $3c,x			sta 	NSMantissa0,x
.1a45	b5 4a		lda $4a,x			lda 	NSMantissa1+2,x
.1a47	95 48		sta $48,x			sta 	NSMantissa1,x
.1a49	b5 56		lda $56,x			lda 	NSMantissa2+2,x
.1a4b	95 54		sta $54,x			sta 	NSMantissa2,x
.1a4d	b5 62		lda $62,x			lda 	NSMantissa3+2,x
.1a4f	95 60		sta $60,x			sta 	NSMantissa3,x
.1a51	60		rts				rts
.1a52					Int32Divide:
.1a52	48		pha				pha 								; save AXY
.1a53	5a		phy				phy
.1a54	20 9f 1e	jsr $1e9f			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.1a57	20 b8 1e	jsr $1eb8			jsr 	FloatSetZeroMantissaOnly 	; set S[X] to zero
.1a5a	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.1a5c					_I32DivideLoop:
.1a5c	e8		inx				inx
.1a5d	e8		inx				inx
.1a5e	20 cb 1e	jsr $1ecb			jsr 	FloatShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.1a61	ca		dex				dex
.1a62	ca		dex				dex
.1a63	20 cc 1e	jsr $1ecc			jsr 	FloatRotateLeft
.1a66	20 92 1a	jsr $1a92			jsr 	FloatDivideCheck 			; check if subtract possible
.1a69	90 02		bcc $1a6d			bcc 	_I32DivideNoCarryIn
.1a6b	f6 3e		inc $3e,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.1a6d					_I32DivideNoCarryIn:
.1a6d	88		dey				dey 								; loop round till division completed.
.1a6e	d0 ec		bne $1a5c			bne 	_I32DivideLoop
.1a70	7a		ply				ply 								; restore AXY and exit
.1a71	68		pla				pla
.1a72	18		clc				clc
.1a73	60		rts				rts
.1a74					Int32ShiftDivide:
.1a74	48		pha				pha 								; save AY
.1a75	5a		phy				phy
.1a76	e8		inx				inx 								; clear S[X+2]
.1a77	e8		inx				inx
.1a78	20 bc 1e	jsr $1ebc			jsr 	FloatSetZero
.1a7b	ca		dex				dex
.1a7c	ca		dex				dex
.1a7d	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.1a7f					_I32SDLoop:
.1a7f	20 92 1a	jsr $1a92			jsr 	FloatDivideCheck 			; check if subtract possible
.1a82	e8		inx				inx
.1a83	e8		inx				inx
.1a84	20 cc 1e	jsr $1ecc			jsr 	FloatRotateLeft				; shift 64 bit FPA left, rotating carry in
.1a87	ca		dex				dex
.1a88	ca		dex				dex
.1a89	20 cc 1e	jsr $1ecc			jsr 	FloatRotateLeft
.1a8c	88		dey				dey 	 							; do 31 times
.1a8d	d0 f0		bne $1a7f			bne 	_I32SDLoop
.1a8f	7a		ply				ply 								; restore AY and exit
.1a90	68		pla				pla
.1a91	60		rts				rts
.1a92					FloatDivideCheck:
.1a92	20 62 1c	jsr $1c62			jsr 	FloatSubTopTwoStack 		; subtract Stack[X+1] from Stack[X+0]
.1a95	b0 04		bcs $1a9b			bcs 	_DCSExit 					; if carry set, then could do, exit
.1a97	20 48 1c	jsr $1c48			jsr 	FloatAddTopTwoStack 		; add it back in
.1a9a	18		clc				clc 								; and return False
.1a9b					_DCSExit:
.1a9b	60		rts				rts
.1a9c					FloatFractionalPart:
.1a9c	5a		phy				phy
.1a9d	b5 30		lda $30,x			lda 	NSStatus,x 					; take absolute value
.1a9f	29 7f		and #$7f			and 	#$7F
.1aa1	95 30		sta $30,x			sta 	NSStatus,x
.1aa3	20 11 1c	jsr $1c11			jsr 	FloatNormalise
.1aa6	b5 6c		lda $6c,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.1aa8	38		sec				sec
.1aa9	e9 e0		sbc #$e0			sbc 	#$E0
.1aab	90 29		bcc $1ad6			bcc 	_FFPExit 					; already fractional
.1aad	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.1aaf	b0 22		bcs $1ad3			bcs 	_FFPZero
.1ab1	a8		tay				tay 								; put count to do in Y
.1ab2	b5 60		lda $60,x			lda 	NSMantissa3,x 				; do each in turn.
.1ab4	20 db 1a	jsr $1adb			jsr 	_FFPPartial
.1ab7	95 60		sta $60,x			sta 	NSMantissa3,x
.1ab9	b5 54		lda $54,x			lda 	NSMantissa2,x
.1abb	20 db 1a	jsr $1adb			jsr 	_FFPPartial
.1abe	95 54		sta $54,x			sta 	NSMantissa2,x
.1ac0	b5 48		lda $48,x			lda 	NSMantissa1,x
.1ac2	20 db 1a	jsr $1adb			jsr 	_FFPPartial
.1ac5	95 48		sta $48,x			sta 	NSMantissa1,x
.1ac7	b5 3c		lda $3c,x			lda 	NSMantissa0,x
.1ac9	20 db 1a	jsr $1adb			jsr 	_FFPPartial
.1acc	95 3c		sta $3c,x			sta 	NSMantissa0,x
.1ace	20 de 1e	jsr $1ede			jsr 	FloatIsZero 					; zeroed check.
.1ad1	d0 03		bne $1ad6			bne 	_FFPExit
.1ad3					_FFPZero:
.1ad3	20 bc 1e	jsr $1ebc			jsr 	FloatSetZero
.1ad6					_FFPExit:
.1ad6	20 11 1c	jsr $1c11			jsr 	FloatNormalise
.1ad9	7a		ply				ply
.1ada	60		rts				rts
.1adb					_FFPPartial:
.1adb	c0 00		cpy #$00			cpy 	#0 							; no more to do
.1add	f0 17		beq $1af6			beq 	_FFFPPExit
.1adf	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.1ae1	b0 0c		bcs $1aef			bcs 	_FFFPPWholeByte
.1ae3	5a		phy				phy
.1ae4					_FFFPPLeft:
.1ae4	0a		asl a				asl 	a
.1ae5	88		dey				dey
.1ae6	d0 fc		bne $1ae4			bne 	_FFFPPLeft
.1ae8	7a		ply				ply
.1ae9					_FFFPPRight:
.1ae9	4a		lsr a				lsr 	a
.1aea	88		dey				dey
.1aeb	d0 fc		bne $1ae9			bne 	_FFFPPRight
.1aed	80 07		bra $1af6			bra 	_FFFPPExit
.1aef					_FFFPPWholeByte:
.1aef	98		tya				tya 								; subtract 8 from count
.1af0	38		sec				sec
.1af1	e9 08		sbc #$08			sbc 	#8
.1af3	a8		tay				tay
.1af4	a9 00		lda #$00			lda 	#0 							; and clear all
.1af6					_FFFPPExit:
.1af6	60		rts				rts
.1af7					FloatIntegerPart:
.1af7	48		pha				pha
.1af8	b5 6c		lda $6c,x			lda 	NSExponent,x 				; is it integer already ?
.1afa	f0 1d		beq $1b19			beq 	_FIPExit 					; if so do nothing
.1afc	20 de 1e	jsr $1ede			jsr 	FloatIsZero 				; is it zero ?
.1aff	f0 15		beq $1b16			beq 	_FIPZero 					; if so return zero.
.1b01	20 11 1c	jsr $1c11			jsr 	FloatNormalise 				; normalise
.1b04	f0 10		beq $1b16			beq 	_FIPZero 					; normalised to zero, exit zero
.1b06					_FIPShift:
.1b06	b5 6c		lda $6c,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.1b08	10 07		bpl $1b11			bpl 	_FIPCheckZero
.1b0a	20 d5 1e	jsr $1ed5			jsr 	FloatShiftRight 			; shift mantissa right
.1b0d	f6 6c		inc $6c,x			inc 	NSExponent,x 				; bump exponent
.1b0f	80 f5		bra $1b06			bra 	_FIPShift
.1b11					_FIPCheckZero:
.1b11	20 de 1e	jsr $1ede			jsr 	FloatIsZero 				; avoid -0 problem
.1b14	d0 03		bne $1b19			bne 	_FIPExit 					; set to zero if mantissa zero.
.1b16					_FIPZero:
.1b16	20 bc 1e	jsr $1ebc			jsr 	FloatSetZero
.1b19					_FIPExit:
.1b19	68		pla				pla
.1b1a	60		rts				rts
.1b1b					FloatIntegerPartDown:
.1b1b	48		pha				pha
.1b1c	5a		phy				phy
.1b1d	b5 6c		lda $6c,x			lda 	NSExponent,x 				; is it integer already ?
.1b1f	f0 36		beq $1b57			beq 	_FIPExit 					; if so do nothing
.1b21	20 de 1e	jsr $1ede			jsr 	FloatIsZero 				; is it zero ?
.1b24	f0 2e		beq $1b54			beq 	_FIPZero 					; if so return zero.
.1b26	20 11 1c	jsr $1c11			jsr 	FloatNormalise 				; normalise
.1b29	f0 29		beq $1b54			beq 	_FIPZero 					; normalised to zero, exit zero
.1b2b	a0 00		ldy #$00			ldy 	#0 							; reset the count of bits.
.1b2d					_FIPShift:
.1b2d	b5 6c		lda $6c,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.1b2f	10 0a		bpl $1b3b			bpl 	_FIPCheckDown
.1b31	20 d5 1e	jsr $1ed5			jsr 	FloatShiftRight 			; shift mantissa right
.1b34	90 01		bcc $1b37			bcc 	_FIPNoFrac 					; shifted a zero out ?
.1b36	c8		iny				iny
.1b37					_FIPNoFrac:
.1b37	f6 6c		inc $6c,x			inc 	NSExponent,x 				; bump exponent
.1b39	80 f2		bra $1b2d			bra 	_FIPShift
.1b3b					_FIPCheckDown:
.1b3b	c0 00		cpy #$00			cpy 	#0 							; were there any fractional bits.
.1b3d	f0 10		beq $1b4f			beq 	_FIPCheckZero
.1b3f	34 30		bit $30,x			bit 	NSStatus,x 					; +ve
.1b41	10 0c		bpl $1b4f			bpl 	_FIPCheckZero
.1b43	e8		inx				inx 								; -ve so round *down*.
.1b44	a9 01		lda #$01			lda 	#1
.1b46	20 be 1e	jsr $1ebe			jsr 	FloatSetByte
.1b49	20 7e 1e	jsr $1e7e			jsr 	FloatNegate
.1b4c	20 e0 18	jsr $18e0			jsr 	FloatAdd
.1b4f					_FIPCheckZero:
.1b4f	20 de 1e	jsr $1ede			jsr 	FloatIsZero 				; avoid -0 problem
.1b52	d0 03		bne $1b57			bne 	_FIPExit 					; set to zero if mantissa zero.
.1b54					_FIPZero:
.1b54	20 bc 1e	jsr $1ebc			jsr 	FloatSetZero
.1b57					_FIPExit:
.1b57	7a		ply				ply
.1b58	68		pla				pla
.1b59	60		rts				rts
.1b5a					FloatInt8Multiply:
.1b5a	5a		phy				phy
.1b5b	b5 3c		lda $3c,x			lda 	NSMantissa0,x 				; right shifted multiplier in Y
.1b5d	a8		tay				tay
.1b5e	74 3c		stz $3c,x			stz 	NSMantissa0,x 				; zero the result (already 8 bit constant)
.1b60					_FI8MLoop:
.1b60	98		tya				tya 								; shift right shifter right into carry
.1b61	4a		lsr a				lsr 	a
.1b62	a8		tay				tay
.1b63	90 0d		bcc $1b72			bcc 	_FI8MNoAdd
.1b65	18		clc				clc
.1b66	b5 3c		lda $3c,x			lda 	NSMantissa0,x
.1b68	75 3d		adc $3d,x			adc 	NSMantissa0+1,x
.1b6a	95 3c		sta $3c,x			sta 	NSMantissa0,x
.1b6c	b5 48		lda $48,x			lda 	NSMantissa1,x
.1b6e	75 49		adc $49,x			adc 	NSMantissa1+1,x
.1b70	95 48		sta $48,x			sta 	NSMantissa1,x
.1b72					_FI8MNoAdd:
.1b72	16 3d		asl $3d,x			asl 	NSMantissa0+1,x 			; shift adder left
.1b74	36 49		rol $49,x			rol 	NSMantissa1+1,x
.1b76	c0 00		cpy #$00			cpy 	#0
.1b78	d0 e6		bne $1b60			bne 	_FI8MLoop 					; until right shifter zero.
.1b7a	7a		ply				ply
.1b7b	60		rts				rts
.1b7c					FloatMultiply:
.1b7c	ca		dex				dex
.1b7d	b5 6c		lda $6c,x			lda 	NSExponent,x 				; can use optimised ?
.1b7f	15 6d		ora $6d,x			ora 	NSExponent+1,x
.1b81	15 60		ora $60,x			ora 	NSMantissa3,x
.1b83	15 61		ora $61,x			ora 	NSMantissa3+1,x
.1b85	d0 21		bne $1ba8			bne 	_FMUseFloat
.1b87	b5 30		lda $30,x			lda 	NSStatus,x 					; check if it is 8 bit unsigned
.1b89	15 31		ora $31,x			ora 	NSStatus+1,x
.1b8b	29 80		and #$80			and 	#$80
.1b8d	15 60		ora $60,x			ora 	NSMantissa3,x
.1b8f	15 54		ora $54,x			ora 	NSMantissa2,x
.1b91	15 48		ora $48,x			ora 	NSMantissa1,x
.1b93	15 61		ora $61,x			ora 	NSMantissa3+1,x
.1b95	15 55		ora $55,x			ora 	NSMantissa2+1,x
.1b97	15 49		ora $49,x			ora 	NSMantissa1+1,x
.1b99	d0 04		bne $1b9f			bne 	_FMInt32
.1b9b	20 5a 1b	jsr $1b5a			jsr 	FloatInt8Multiply 			; use fast 8x8 multiply.
.1b9e	60		rts				rts
.1b9f					_FMInt32:
.1b9f	20 c9 1b	jsr $1bc9			jsr 	FloatMultiplyShort			; use the int32 one.
.1ba2	18		clc				clc 								; fix it up if gone out of range
.1ba3	75 6c		adc $6c,x			adc 	NSExponent,x
.1ba5	95 6c		sta $6c,x			sta 	NSExponent,x
.1ba7	60		rts				rts
.1ba8					_FMUseFloat:
.1ba8	20 11 1c	jsr $1c11			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.1bab	f0 18		beq $1bc5			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.1bad	e8		inx				inx
.1bae	20 11 1c	jsr $1c11			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.1bb1	ca		dex				dex
.1bb2	c9 00		cmp #$00			cmp 	#0
.1bb4	f0 0c		beq $1bc2			beq 	_FDSetZero
.1bb6	20 c9 1b	jsr $1bc9			jsr 	FloatMultiplyShort 			; calculate the result.
.1bb9	75 6c		adc $6c,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.1bbb	18		clc				clc
.1bbc	75 6d		adc $6d,x			adc 	NSExponent+1,x
.1bbe	95 6c		sta $6c,x			sta 	NSExponent,x
.1bc0	80 03		bra $1bc5			bra 	_FDExit
.1bc2					_FDSetZero:
.1bc2	20 bc 1e	jsr $1ebc			jsr 	FloatSetZero 				; return 0
.1bc5					_FDExit:
.1bc5	20 11 1c	jsr $1c11			jsr 	FloatNormalise 				; normalise the result
.1bc8	60		rts				rts
.1bc9					FloatMultiplyShort:
.1bc9	5a		phy				phy 								; save Y
.1bca	20 9f 1e	jsr $1e9f			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.1bcd	20 b8 1e	jsr $1eb8			jsr 	FloatSetZeroMantissaOnly 	; set mantissa S[X] to zero
.1bd0	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.1bd2					_I32MLoop:
.1bd2	b5 3e		lda $3e,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.1bd4	15 4a		ora $4a,x			ora 	NSMantissa1+2,x
.1bd6	15 56		ora $56,x			ora 	NSMantissa2+2,x
.1bd8	15 62		ora $62,x			ora 	NSMantissa3+2,x
.1bda	f0 25		beq $1c01			beq 	_I32MExit 					; exit if zero
.1bdc	b5 3e		lda $3e,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.1bde	29 01		and #$01			and 	#1
.1be0	f0 0d		beq $1bef			beq 	_I32MNoAdd
.1be2	20 48 1c	jsr $1c48			jsr 	FloatAddTopTwoStack 		; if so add S[X+1] to S[X+0]
.1be5	b5 60		lda $60,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.1be7	10 06		bpl $1bef			bpl 	_I32MNoAdd
.1be9					_I32ShiftRight:
.1be9	20 d5 1e	jsr $1ed5			jsr 	FloatShiftRight 			; shift S[X] right
.1bec	c8		iny				iny 								; increment shift count
.1bed	80 09		bra $1bf8			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.1bef					_I32MNoAdd:
.1bef	34 61		bit $61,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.1bf1	70 f6		bvs $1be9			bvs 	_I32ShiftRight 				; instead.
.1bf3	e8		inx				inx
.1bf4	20 cb 1e	jsr $1ecb			jsr 	FloatShiftLeft 				; shift additive S[X+1] left
.1bf7	ca		dex				dex
.1bf8					_I32MShiftUpper:
.1bf8	e8		inx				inx 								; shift S[X+2] right
.1bf9	e8		inx				inx
.1bfa	20 d5 1e	jsr $1ed5			jsr 	FloatShiftRight
.1bfd	ca		dex				dex
.1bfe	ca		dex				dex
.1bff	80 d1		bra $1bd2			bra 	_I32MLoop 					; try again.
.1c01					_I32MExit:
.1c01	20 07 1c	jsr $1c07			jsr 	FloatCalculateSign
.1c04	98		tya				tya 								; shift in A
.1c05	7a		ply				ply 								; restore Y and exit
.1c06	60		rts				rts
.1c07					FloatCalculateSign:
.1c07	b5 30		lda $30,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.1c09	16 30		asl $30,x			asl 	NSStatus,x 					; shift result left
.1c0b	55 31		eor $31,x			eor 	NSStatus+1,x
.1c0d	0a		asl a				asl 	a 							; shift bit 7 into carry
.1c0e	76 30		ror $30,x			ror 	NSStatus,x 					; shift right into status byte.
.1c10	60		rts				rts
.1c11					FloatNormalise:
.1c11	20 de 1e	jsr $1ede			jsr 	FloatIsZero 				; if zero exit
.1c14	d0 07		bne $1c1d			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.1c16	16 30		asl $30,x			asl 	NSStatus,x 					; clear the sign bit.
.1c18	76 30		ror $30,x			ror 	NSStatus,x 					; (no -0)
.1c1a	a9 00		lda #$00			lda 	#0 							; set Z flag
.1c1c	60		rts				rts
.1c1d					_NSNormaliseOptimise:
.1c1d	b5 60		lda $60,x			lda 	NSMantissa3,x 				; upper byte zero ?
.1c1f	d0 19		bne $1c3a			bne 	_NSNormaliseLoop
.1c21	b5 54		lda $54,x			lda 	NSMantissa2,x 				; byte normalise
.1c23	30 15		bmi $1c3a			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.1c25	95 60		sta $60,x			sta 	NSMantissa3,x
.1c27	b5 48		lda $48,x			lda 	NSMantissa1,x
.1c29	95 54		sta $54,x			sta 	NSMantissa2,x
.1c2b	b5 3c		lda $3c,x			lda 	NSMantissa0,x
.1c2d	95 48		sta $48,x			sta 	NSMantissa1,x
.1c2f	74 3c		stz $3c,x			stz 	NSMantissa0,x
.1c31	b5 6c		lda $6c,x			lda 	NSExponent,x
.1c33	38		sec				sec
.1c34	e9 08		sbc #$08			sbc 	#8
.1c36	95 6c		sta $6c,x			sta 	NSExponent,x
.1c38	80 e3		bra $1c1d			bra 	_NSNormaliseOptimise
.1c3a					_NSNormaliseLoop:
.1c3a	34 60		bit $60,x			bit 	NSMantissa3,x 				; bit 30 set ?
.1c3c	70 07		bvs $1c45			bvs 	_NSNExit 					; exit if so with Z flag clear
.1c3e	20 cb 1e	jsr $1ecb			jsr 	FloatShiftLeft 				; shift mantissa left
.1c41	d6 6c		dec $6c,x			dec 	NSExponent,x 				; adjust exponent
.1c43	80 f5		bra $1c3a			bra 	_NSNormaliseLoop
.1c45					_NSNExit:
.1c45	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.1c47	60		rts				rts
.1c48					FloatAddTopTwoStack:
.1c48	18		clc				clc
.1c49	b5 3c		lda $3c,x			lda		NSMantissa0,x
.1c4b	75 3d		adc $3d,x			adc 		NSMantissa0+1,x
.1c4d	95 3c		sta $3c,x			sta 	NSMantissa0,x
.1c4f	b5 48		lda $48,x			lda		NSMantissa1,x
.1c51	75 49		adc $49,x			adc 		NSMantissa1+1,x
.1c53	95 48		sta $48,x			sta 	NSMantissa1,x
.1c55	b5 54		lda $54,x			lda		NSMantissa2,x
.1c57	75 55		adc $55,x			adc 		NSMantissa2+1,x
.1c59	95 54		sta $54,x			sta 	NSMantissa2,x
.1c5b	b5 60		lda $60,x			lda		NSMantissa3,x
.1c5d	75 61		adc $61,x			adc 		NSMantissa3+1,x
.1c5f	95 60		sta $60,x			sta 	NSMantissa3,x
.1c61	60		rts				rts
.1c62					FloatSubTopTwoStack:
.1c62	38		sec				sec
.1c63	b5 3c		lda $3c,x			lda		NSMantissa0,x
.1c65	f5 3d		sbc $3d,x			sbc 		NSMantissa0+1,x
.1c67	95 3c		sta $3c,x			sta 	NSMantissa0,x
.1c69	b5 48		lda $48,x			lda		NSMantissa1,x
.1c6b	f5 49		sbc $49,x			sbc 		NSMantissa1+1,x
.1c6d	95 48		sta $48,x			sta 	NSMantissa1,x
.1c6f	b5 54		lda $54,x			lda		NSMantissa2,x
.1c71	f5 55		sbc $55,x			sbc 		NSMantissa2+1,x
.1c73	95 54		sta $54,x			sta 	NSMantissa2,x
.1c75	b5 60		lda $60,x			lda		NSMantissa3,x
.1c77	f5 61		sbc $61,x			sbc 		NSMantissa3+1,x
.1c79	95 60		sta $60,x			sta 	NSMantissa3,x
.1c7b	60		rts				rts
.1c7c					FloatInt32Add:
.1c7c	b5 30		lda $30,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.1c7e	55 31		eor $31,x			eor 	NSStatus+1,x
.1c80	30 04		bmi $1c86			bmi 	_DiffSigns
.1c82	20 48 1c	jsr $1c48			jsr		FloatAddTopTwoStack
.1c85	60		rts				rts
.1c86					_DiffSigns:
.1c86	20 62 1c	jsr $1c62			jsr 	FloatSubTopTwoStack 		; do a physical subtraction
.1c89	34 60		bit $60,x			bit 	NSMantissa3,x 				; result is +ve, okay
.1c8b	10 07		bpl $1c94			bpl 	_AddExit
.1c8d	b5 31		lda $31,x			lda 	NSStatus+1,x 				; sign is that of 11th value
.1c8f	95 30		sta $30,x			sta 	NSStatus,x
.1c91	20 85 1e	jsr $1e85			jsr 	FloatNegateMantissa 		; negate the mantissa and exit
.1c94					_AddExit:
.1c94	20 de 1e	jsr $1ede			jsr 	FloatIsZero 				; check for -0
.1c97	d0 02		bne $1c9b			bne 	_AddNonZero
.1c99	74 30		stz $30,x			stz 	NSStatus,x
.1c9b					_AddNonZero:
.1c9b	60		rts				rts
=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.1c9c					FloatEncodeStart:
.1c9c	38		sec				sec
.1c9d	80 01		bra $1ca0			bra 	FloatEncodeContinue+1
.1c9f					FloatEncodeContinue:
.1c9f	18		clc				clc
.1ca0					FloatEncode:
.1ca0	08		php				php 								; save reset flag.
.1ca1	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.1ca3	f0 15		beq $1cba			beq 	_ENIsOkay
.1ca5	c9 30		cmp #$30			cmp 	#"0"
.1ca7	90 04		bcc $1cad			bcc 	_ENBadNumber
.1ca9	c9 3a		cmp #$3a			cmp 	#"9"+1
.1cab	90 0d		bcc $1cba			bcc 	_ENIsOkay
.1cad					_ENBadNumber:
.1cad	28		plp				plp 								; throw saved reset
.1cae	ad 39 05	lda $0539			lda 	encodeState 				; if in decimal mode, construct final number
.1cb1	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.1cb3	d0 03		bne $1cb8			bne 	_ENFail
.1cb5	4c 32 1d	jmp $1d32			jmp 	_ENConstructFinal
.1cb8					_ENFail:
.1cb8	18		clc				clc 								; not allowed
.1cb9	60		rts				rts
.1cba					_ENIsOkay:
.1cba	28		plp				plp 								; are we restarting
.1cbb	90 15		bcc $1cd2			bcc 	_ENNoRestart
.1cbd					_ENStartEncode:
.1cbd	c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.1cbf	f0 0c		beq $1ccd			beq 	_ENFirstDP
.1cc1	29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.1cc3	20 be 1e	jsr $1ebe			jsr 	FloatSetByte 				; in single byte mode.
.1cc6	a9 01		lda #$01			lda 	#ESTA_Low
.1cc8					_ENExitChange:
.1cc8	8d 39 05	sta $0539			sta 	encodeState 				; save new state
.1ccb	38		sec				sec
.1ccc	60		rts				rts
.1ccd					_ENFirstDP:
.1ccd	20 bc 1e	jsr $1ebc			jsr 	FloatSetZero 				; clear integer part
.1cd0	80 3c		bra $1d0e			bra 	_ESTASwitchFloat			; go straight to float and exi
.1cd2					_ENNoRestart:
.1cd2	48		pha				pha 								; save digit or DP on stack.
.1cd3	ad 39 05	lda $0539			lda 	encodeState 				; get current state
.1cd6	c9 01		cmp #$01			cmp 	#ESTA_Low
.1cd8	f0 09		beq $1ce3			beq  	_ESTALowState
.1cda	c9 02		cmp #$02			cmp 	#ESTA_High
.1cdc	f0 26		beq $1d04			beq 	_ESTAHighState
.1cde	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.1ce0	f0 38		beq $1d1a			beq 	_ESTADecimalState
>1ce2	db						.byte 	$DB 						; causes a break in the emulator
.1ce3					_ESTALowState:
.1ce3	68		pla				pla 								; get value back
.1ce4	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.1ce6	f0 26		beq $1d0e			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.1ce8	29 0f		and #$0f			and 	#15 						; make digit
.1cea	8d 3a 05	sta $053a			sta 	digitTemp 					; save it.
.1ced	b5 3c		lda $3c,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.1cef	0a		asl a				asl 	a
.1cf0	0a		asl a				asl 	a
.1cf1	75 3c		adc $3c,x			adc 	NSMantissa0,x
.1cf3	0a		asl a				asl 	a
.1cf4	6d 3a 05	adc $053a			adc 	digitTemp
.1cf7	95 3c		sta $3c,x			sta 	NSMantissa0,x
.1cf9	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.1cfb	90 05		bcc $1d02			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.1cfd	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.1cff	8d 39 05	sta $0539			sta 	encodeState
.1d02					_ESTANoSwitch:
.1d02	38		sec				sec
.1d03	60		rts				rts
.1d04					_ESTAHighState:
.1d04	68		pla				pla 								; get value back
.1d05	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.1d07	f0 05		beq $1d0e			beq 	_ESTASwitchFloat
.1d09	20 64 1d	jsr $1d64			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.1d0c	38		sec				sec
.1d0d	60		rts				rts
.1d0e					_ESTASwitchFloat:
.1d0e	9c 3b 05	stz $053b			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.1d11	e8		inx				inx 								; zero the decimal additive.
.1d12	20 bc 1e	jsr $1ebc			jsr 	FloatSetZero
.1d15	ca		dex				dex
.1d16	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.1d18	80 ae		bra $1cc8			bra 	_ENExitChange
.1d1a					_ESTADecimalState:
.1d1a	68		pla				pla 								; digit.
.1d1b	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 11th decimal point.
.1d1d	f0 99		beq $1cb8			beq 	_ENFail
.1d1f	e8		inx				inx 								; put digit into fractional part of X+1
.1d20	20 64 1d	jsr $1d64			jsr 	ESTAShiftDigitIntoMantissa
.1d23	ca		dex				dex
.1d24	ee 3b 05	inc $053b			inc 	decimalCount 				; bump the count of decimals
.1d27	ad 3b 05	lda $053b			lda 	decimalCount 				; too many decimal digits.
.1d2a	c9 0b		cmp #$0b			cmp 	#11
.1d2c	f0 02		beq $1d30			beq 	_ESTADSFail
.1d2e	38		sec				sec
.1d2f	60		rts				rts
.1d30					_ESTADSFail:
.1d30	18		clc				clc
.1d31	60		rts				rts
.1d32					_ENConstructFinal:
.1d32	ad 3b 05	lda $053b			lda 	decimalCount 				; get decimal count
.1d35	f0 2b		beq $1d62			beq 	_ENCFExit 					; no decimals
.1d37	5a		phy				phy
.1d38	0a		asl a				asl 	a 							; x 4 and CLC
.1d39	0a		asl a				asl 	a
.1d3a	6d 3b 05	adc $053b			adc 	decimalCount
.1d3d	a8		tay				tay
.1d3e	b9 c9 19	lda $19c9,y			lda 	FloatScalarTable-5,y 		; copy decimal scalar to X+2
.1d41	95 3e		sta $3e,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.1d43	b9 ca 19	lda $19ca,y			lda 	FloatScalarTable-5+1,y
.1d46	95 4a		sta $4a,x			sta 	NSMantissa1+2,x
.1d48	b9 cb 19	lda $19cb,y			lda 	FloatScalarTable-5+2,y
.1d4b	95 56		sta $56,x			sta 	NSMantissa2+2,x
.1d4d	b9 cc 19	lda $19cc,y			lda 	FloatScalarTable-5+3,y
.1d50	95 62		sta $62,x			sta 	NSMantissa3+2,x
.1d52	b9 cd 19	lda $19cd,y			lda 	FloatScalarTable-5+4,y
.1d55	95 6e		sta $6e,x			sta 	NSExponent+2,x
.1d57	74 32		stz $32,x			stz 	NSStatus+2,x 				; make +ve
.1d59	e8		inx				inx 								; multiply decimal const by decimal scalar
.1d5a	e8		inx				inx
.1d5b	20 7c 1b	jsr $1b7c			jsr 	FloatMultiply
.1d5e	20 e0 18	jsr $18e0			jsr 	FloatAdd 					; add to integer part.
.1d61	7a		ply				ply
.1d62					_ENCFExit:
.1d62	18		clc				clc 								; reject the digit.
.1d63	60		rts				rts
.1d64					ESTAShiftDigitIntoMantissa:
.1d64	29 0f		and #$0f			and 	#15 						; save digit
.1d66	48		pha				pha
.1d67	b5 60		lda $60,x			lda 	NSMantissa3,x 				; push mantissa on stack
.1d69	48		pha				pha
.1d6a	b5 54		lda $54,x			lda 	NSMantissa2,x
.1d6c	48		pha				pha
.1d6d	b5 48		lda $48,x			lda 	NSMantissa1,x
.1d6f	48		pha				pha
.1d70	b5 3c		lda $3c,x			lda 	NSMantissa0,x
.1d72	48		pha				pha
.1d73	20 cb 1e	jsr $1ecb			jsr 	FloatShiftLeft 				; x 2
.1d76	20 cb 1e	jsr $1ecb			jsr 	FloatShiftLeft 				; x 4
.1d79	18		clc				clc 								; pop mantissa and add
.1d7a	68		pla				pla
.1d7b	75 3c		adc $3c,x			adc 	NSMantissa0,x
.1d7d	95 3c		sta $3c,x			sta 	NSMantissa0,x
.1d7f	68		pla				pla
.1d80	75 48		adc $48,x			adc 	NSMantissa1,x
.1d82	95 48		sta $48,x			sta 	NSMantissa1,x
.1d84	68		pla				pla
.1d85	75 54		adc $54,x			adc 	NSMantissa2,x
.1d87	95 54		sta $54,x			sta 	NSMantissa2,x
.1d89	68		pla				pla
.1d8a	75 60		adc $60,x			adc 	NSMantissa3,x
.1d8c	95 60		sta $60,x			sta 	NSMantissa3,x 				; x 5
.1d8e	20 cb 1e	jsr $1ecb			jsr 	FloatShiftLeft 				; x 10
.1d91	68		pla				pla 								; add digit
.1d92	18		clc				clc
.1d93	75 3c		adc $3c,x			adc 	NSMantissa0,x
.1d95	95 3c		sta $3c,x			sta 	NSMantissa0,x
.1d97	90 0a		bcc $1da3			bcc 	_ESTASDExit
.1d99	f6 48		inc $48,x			inc 	NSMantissa1,x
.1d9b	d0 06		bne $1da3			bne 	_ESTASDExit
.1d9d	f6 54		inc $54,x			inc 	NSMantissa2,x
.1d9f	d0 02		bne $1da3			bne 	_ESTASDExit
.1da1	f6 60		inc $60,x			inc 	NSMantissa3,x
.1da3					_ESTASDExit:
.1da3	60		rts				rts
.0539					encodeState:
>0539							.fill 	1
.053a					digitTemp:
>053a							.fill 	1
.053b					decimalCount:
>053b							.fill 	1
.1da4					FloatToString:
.1da4	da		phx				phx
.1da5	5a		phy				phy 								; save code position
.1da6	8d 3c 05	sta $053c			sta 	decimalPlaces	 			; save number of DPs.
.1da9	9c 3d 05	stz $053d			stz 	dbOffset 					; offset into decimal buffer = start.
.1dac	b5 30		lda $30,x			lda 	NSStatus,x  				; is it -ve.
.1dae	10 08		bpl $1db8			bpl 	_CNTSNotNegative
.1db0	29 7f		and #$7f			and 	#$7F 						; make +ve
.1db2	95 30		sta $30,x			sta 	NSStatus,x
.1db4	a9 2d		lda #$2d			lda 	#"-"
.1db6	80 02		bra $1dba			bra 	_CNTMain
.1db8					_CNTSNotNegative:
.1db8	a9 20		lda #$20			lda 	#" "
.1dba					_CNTMain:
.1dba	20 1c 1e	jsr $1e1c			jsr 	WriteDecimalBuffer
.1dbd	b5 6c		lda $6c,x			lda 	NSExponent,x 				; check if decimal
.1dbf	f0 0d		beq $1dce			beq 	_CNTSNotFloat
.1dc1	e8		inx				inx 								; round up so we don't get too many 6.999999
.1dc2	a9 01		lda #$01			lda 	#1
.1dc4	20 be 1e	jsr $1ebe			jsr 	FloatSetByte
.1dc7	b5 6b		lda $6b,x			lda		NSExponent-1,x
.1dc9	95 6c		sta $6c,x			sta 	NSExponent,x
.1dcb	20 e0 18	jsr $18e0			jsr 	FloatAdd
.1dce					_CNTSNotFloat:
.1dce	20 fe 1d	jsr $1dfe			jsr 	MakePlusTwoString 			; do the integer part.
.1dd1	20 9c 1a	jsr $1a9c			jsr 	FloatFractionalPart 		; get the fractional part
.1dd4	20 11 1c	jsr $1c11			jsr 	FloatNormalise					; normalise , exit if zero
.1dd7	f0 22		beq $1dfb			beq 	_CNTSExit
.1dd9	a9 2e		lda #$2e			lda 	#"."
.1ddb	20 1c 1e	jsr $1e1c			jsr 	WriteDecimalBuffer 			; write decimal place
.1dde					_CNTSDecimal:
.1dde	ce 3c 05	dec $053c			dec 	decimalPlaces 				; done all the decimals
.1de1	30 18		bmi $1dfb			bmi 	_CNTSExit
.1de3	e8		inx				inx 								; x 10.0
.1de4	a9 0a		lda #$0a			lda 	#10
.1de6	20 be 1e	jsr $1ebe			jsr 	FloatSetByte
.1de9	20 7c 1b	jsr $1b7c			jsr 	FloatMultiply
.1dec	20 fe 1d	jsr $1dfe			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.1def	20 9c 1a	jsr $1a9c			jsr 	FloatFractionalPart 		; get the fractional part
.1df2	20 11 1c	jsr $1c11			jsr 	FloatNormalise 				; normalise it.
.1df5	b5 6c		lda $6c,x			lda 	NSExponent,x 				; gone to zero, exit.
.1df7	c9 d0		cmp #$d0			cmp 	#$D0 						; very small remainder, so don't bother.
.1df9	b0 e3		bcs $1dde			bcs 	_CNTSDecimal 				; keep going.
.1dfb					_CNTSExit:
.1dfb	7a		ply				ply
.1dfc	fa		plx				plx
.1dfd	60		rts				rts
.1dfe					MakePlusTwoString:
.1dfe	da		phx				phx
.1dff	20 9f 1e	jsr $1e9f			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.1e02	e8		inx				inx 								; access it
.1e03	e8		inx				inx
.1e04	20 f7 1a	jsr $1af7			jsr 	FloatIntegerPart 			; make it an integer
.1e07	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.1e09	20 3b 1e	jsr $1e3b			jsr 	ConvertInt32
.1e0c	a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.1e0e					_MPTSCopy:
.1e0e	bd 17 05	lda $0517,x			lda 	numberBuffer,x
.1e11	20 1c 1e	jsr $1e1c			jsr 	WriteDecimalBuffer
.1e14	e8		inx				inx
.1e15	bd 17 05	lda $0517,x			lda 	numberBuffer,x
.1e18	d0 f4		bne $1e0e			bne 	_MPTSCopy
.1e1a	fa		plx				plx
.1e1b	60		rts				rts
.1e1c					WriteDecimalBuffer:
.1e1c	da		phx				phx
.1e1d	ae 3d 05	ldx $053d			ldx 	dbOffset
.1e20	9d 3e 05	sta $053e,x			sta 	decimalBuffer,x
.1e23	9e 3f 05	stz $053f,x			stz 	decimalBuffer+1,x
.1e26	ee 3d 05	inc $053d			inc 	dbOffset
.1e29	fa		plx				plx
.1e2a	60		rts				rts
.053c					decimalPlaces:
>053c							.fill 	1
.053d					dbOffset:
>053d							.fill 	1
.053e					decimalBuffer:
>053e							.fill 	32
.1e2b					ConvertInt16:
.1e2b	85 3c		sta $3c				sta 	NSMantissa0 				; set up as 32 bit conversion
.1e2d	86 48		stx $48				stx 	NSMantissa1
.1e2f	64 54		stz $54				stz 	NSMantissa2
.1e31	64 60		stz $60				stz 	NSMantissa3
.1e33	64 30		stz $30				stz 	NSStatus 					; positive integer
.1e35	a2 00		ldx #$00			ldx 	#0 							; stack level
.1e37	a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.1e39	80 00		bra $1e3b			bra 	ConvertInt32
.1e3b					ConvertInt32:
.1e3b	5a		phy				phy
.1e3c	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.1e3e	24 30		bit $30				bit 	NSStatus 					; output a - if not negative.
.1e40	10 08		bpl $1e4a			bpl 	_CI32NotNeg
.1e42	48		pha				pha
.1e43	a9 2d		lda #$2d			lda 	#'-'
.1e45	99 17 05	sta $0517,y			sta 	numberBuffer,y
.1e48	c8		iny				iny
.1e49	68		pla				pla
.1e4a					_CI32NotNeg:
.1e4a	20 58 1e	jsr $1e58			jsr 	_CI32DivideConvert 			; recursive conversion
.1e4d	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.1e4f	99 17 05	sta $0517,y			sta 	numberBuffer,y
.1e52	7a		ply				ply
.1e53	a2 05		ldx #$05			ldx 	#numberBuffer >> 8 			; return address in XA
.1e55	a9 17		lda #$17			lda 	#numberBuffer & $FF
.1e57	60		rts				rts
.1e58					_CI32DivideConvert:
.1e58	e8		inx				inx 								; write to next slot up
.1e59	20 be 1e	jsr $1ebe			jsr 	FloatSetByte 		 		; write the base out.
.1e5c	ca		dex				dex
.1e5d	20 52 1a	jsr $1a52			jsr 	Int32Divide 				; divide
.1e60	b5 3c		lda $3c,x			lda 	NSMantissa0,x 				; save remainder
.1e62	48		pha				pha
.1e63	20 41 1a	jsr $1a41			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.1e66	20 de 1e	jsr $1ede			jsr 	FloatIsZero 				; is it zero ?
.1e69	f0 05		beq $1e70			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.1e6b	b5 3d		lda $3d,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.1e6d	20 58 1e	jsr $1e58			jsr 	_CI32DivideConvert 			; and recusrively call.
.1e70					_CI32NoRecurse:
.1e70	68		pla				pla 								; remainder
.1e71	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.1e73	90 02		bcc $1e77			bcc 	_CI32NotHex
.1e75	69 26		adc #$26			adc 	#6+32
.1e77					_CI32NotHex:
.1e77	69 30		adc #$30			adc 	#48
.1e79	99 17 05	sta $0517,y			sta 	numberBuffer,y 				; write out and exit
.1e7c	c8		iny				iny
.1e7d	60		rts				rts
.1e7e					FloatNegate:
.1e7e	b5 30		lda $30,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.1e80	49 80		eor #$80			eor 	#$80  						; toggle the negative flag
.1e82	95 30		sta $30,x			sta 	NSStatus,x
.1e84	60		rts				rts
.1e85					FloatNegateMantissa:
.1e85	38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.1e86	a9 00		lda #$00			lda 	#0
.1e88	f5 3c		sbc $3c,x			sbc 	NSMantissa0,x
.1e8a	95 3c		sta $3c,x			sta 	NSMantissa0,x
.1e8c	a9 00		lda #$00			lda 	#0
.1e8e	f5 48		sbc $48,x			sbc 	NSMantissa1,x
.1e90	95 48		sta $48,x			sta 	NSMantissa1,x
.1e92	a9 00		lda #$00			lda 	#0
.1e94	f5 54		sbc $54,x			sbc 	NSMantissa2,x
.1e96	95 54		sta $54,x			sta 	NSMantissa2,x
.1e98	a9 00		lda #$00			lda 	#0
.1e9a	f5 60		sbc $60,x			sbc 	NSMantissa3,x
.1e9c	95 60		sta $60,x			sta 	NSMantissa3,x
.1e9e	60		rts				rts
.1e9f					FloatShiftUpTwo:
.1e9f	b5 3c		lda $3c,x			lda 	NSMantissa0,x
.1ea1	95 3e		sta $3e,x			sta 	NSMantissa0+2,x
.1ea3	b5 48		lda $48,x			lda 	NSMantissa1,x
.1ea5	95 4a		sta $4a,x			sta 	NSMantissa1+2,x
.1ea7	b5 54		lda $54,x			lda 	NSMantissa2,x
.1ea9	95 56		sta $56,x			sta 	NSMantissa2+2,x
.1eab	b5 60		lda $60,x			lda 	NSMantissa3,x
.1ead	95 62		sta $62,x			sta 	NSMantissa3+2,x
.1eaf	b5 6c		lda $6c,x			lda 	NSExponent,x
.1eb1	95 6e		sta $6e,x			sta 	NSExponent+2,x
.1eb3	b5 30		lda $30,x			lda 	NSStatus,x
.1eb5	95 32		sta $32,x			sta 	NSStatus+2,x
.1eb7	60		rts				rts
.1eb8					FloatSetZeroMantissaOnly:
.1eb8	74 3c		stz $3c,x			stz 	NSMantissa0,x
.1eba	80 08		bra $1ec4			bra 	FloatZero13
.1ebc					FloatSetZero:
.1ebc	a9 00		lda #$00			lda 	#0
.1ebe					FloatSetByte:
.1ebe	74 6c		stz $6c,x			stz 	NSExponent,x 				; zero exponent, as +ve integer value.
.1ec0					FloatSetMantissa:
.1ec0	95 3c		sta $3c,x			sta 	NSMantissa0,x 				; zero mantissa
.1ec2	74 30		stz $30,x			stz 	NSStatus,x
.1ec4					FloatZero13:
.1ec4	74 48		stz $48,x			stz 	NSMantissa1,x
.1ec6	74 54		stz $54,x			stz 	NSMantissa2,x
.1ec8	74 60		stz $60,x			stz 	NSMantissa3,x
.1eca	60		rts				rts
.1ecb					FloatShiftLeft:
.1ecb	18		clc				clc
.1ecc					FloatRotateLeft:
.1ecc	36 3c		rol $3c,x			rol 	NSMantissa0,x
.1ece	36 48		rol $48,x			rol		NSMantissa1,x
.1ed0	36 54		rol $54,x			rol		NSMantissa2,x
.1ed2	36 60		rol $60,x			rol		NSMantissa3,x
.1ed4	60		rts				rts
.1ed5					FloatShiftRight:
.1ed5	56 60		lsr $60,x			lsr 	NSMantissa3,x
.1ed7	76 54		ror $54,x			ror		NSMantissa2,x
.1ed9	76 48		ror $48,x			ror		NSMantissa1,x
.1edb	76 3c		ror $3c,x			ror		NSMantissa0,x
.1edd	60		rts				rts
.1ede					FloatIsZero:
.1ede	b5 60		lda $60,x			lda 	NSMantissa3,x
.1ee0	15 54		ora $54,x			ora		NSMantissa2,x
.1ee2	15 48		ora $48,x			ora		NSMantissa1,x
.1ee4	15 3c		ora $3c,x			ora		NSMantissa0,x
.1ee6	60		rts				rts

;******  Processing input file: testing/testend.asm

.1ee7					EndProgram:
>1ee7	01 08 18 08 64 00 99 20				.binary "code/tokenised.dat"
>1eef	22 48 45 4c 4c 4f 2c 20 57 4f 52 4c 44 20 21 22
>1eff	00 20 08 69 00 99 20 ff 00 26 08 6e 00 90 00 00
>1f0f	00

;******  End of listing
