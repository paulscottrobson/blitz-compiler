
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass -c -Wall -o build/code.prg -L build/code.lst -l build/code.lbl testing/testing.asm /home/paulr/Projects/blitz-compiler/documents/../bin/compiler.library /home/paulr/Projects/blitz-compiler/documents/../bin/common.library /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library testing/testend.asm
; Sat Oct  7 05:33:30 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: testing/testing.asm

=$8000					StartWorkSpace = $8000
=$9f00					EndWorkspace = $9F00
.1000					WrapperBoot:
.1000	a2 0a		ldx #$0a			ldx 	#APIDesc & $FF
.1002	a0 10		ldy #$10			ldy 	#APIDesc >> 8
.1004	20 ad 10	jsr $10ad			jsr 	StartCompiler
.1007	4c ff ff	jmp $ffff			jmp 	$FFFF
.100a					APIDesc:
>100a							.fill 	2
>100c	80						.byte 	StartWorkSpace >> 8 		; start of workspace for compiler
>100d	9f						.byte 	EndWorkspace >> 8 			; end of workspace for compiler

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/compiler.library

=$80					C64_END                  = $80 ; $80 end
=$81					C64_FOR                  = $81 ; $81 for
=$82					C64_NEXT                 = $82 ; $82 next
=$83					C64_DATA                 = $83 ; $83 data
=$84					C64_INPUTHASH            = $84 ; $84 input#
=$85					C64_INPUT                = $85 ; $85 input
=$86					C64_DIM                  = $86 ; $86 dim
=$87					C64_READ                 = $87 ; $87 read
=$88					C64_LET                  = $88 ; $88 let
=$89					C64_GOTO                 = $89 ; $89 goto
=$8a					C64_RUN                  = $8a ; $8a run
=$8b					C64_IF                   = $8b ; $8b if
=$8c					C64_RESTORE              = $8c ; $8c restore
=$8d					C64_GOSUB                = $8d ; $8d gosub
=$8e					C64_RETURN               = $8e ; $8e return
=$8f					C64_REM                  = $8f ; $8f rem
=$90					C64_STOP                 = $90 ; $90 stop
=$91					C64_ON                   = $91 ; $91 on
=$92					C64_WAIT                 = $92 ; $92 wait
=$93					C64_LOAD                 = $93 ; $93 load
=$94					C64_SAVE                 = $94 ; $94 save
=$95					C64_VERIFY               = $95 ; $95 verify
=$96					C64_DEF                  = $96 ; $96 def
=$97					C64_POKE                 = $97 ; $97 poke
=$98					C64_PRINTHASH            = $98 ; $98 print#
=$99					C64_PRINT                = $99 ; $99 print
=$9a					C64_CONT                 = $9a ; $9a cont
=$9b					C64_LIST                 = $9b ; $9b list
=$9c					C64_CLR                  = $9c ; $9c clr
=$9d					C64_CMD                  = $9d ; $9d cmd
=$9e					C64_SYS                  = $9e ; $9e sys
=$9f					C64_OPEN                 = $9f ; $9f open
=$a0					C64_CLOSE                = $a0 ; $a0 close
=$a1					C64_GET                  = $a1 ; $a1 get
=$a2					C64_NEW                  = $a2 ; $a2 new
=$a3					C64_TABLB                = $a3 ; $a3 tab(
=$a4					C64_TO                   = $a4 ; $a4 to
=$a5					C64_FN                   = $a5 ; $a5 fn
=$a6					C64_SPCLB                = $a6 ; $a6 spc(
=$a7					C64_THEN                 = $a7 ; $a7 then
=$a8					C64_NOT                  = $a8 ; $a8 not
=$a9					C64_STEP                 = $a9 ; $a9 step
=$aa					C64_PLUS                 = $aa ; $aa +
=$ab					C64_MINUS                = $ab ; $ab -
=$ac					C64_TIMES                = $ac ; $ac *
=$ad					C64_DIVIDE               = $ad ; $ad /
=$ae					C64_POWER                = $ae ; $ae ^
=$af					C64_AND                  = $af ; $af and
=$b0					C64_OR                   = $b0 ; $b0 or
=$b1					C64_GREATER              = $b1 ; $b1 >
=$b2					C64_EQUAL                = $b2 ; $b2 =
=$b3					C64_LESS                 = $b3 ; $b3 <
=$b4					C64_SGN                  = $b4 ; $b4 sgn
=$b5					C64_INT                  = $b5 ; $b5 int
=$b6					C64_ABS                  = $b6 ; $b6 abs
=$b7					C64_USR                  = $b7 ; $b7 usr
=$b8					C64_FRE                  = $b8 ; $b8 fre
=$b9					C64_POS                  = $b9 ; $b9 pos
=$ba					C64_SQR                  = $ba ; $ba sqr
=$bb					C64_RND                  = $bb ; $bb rnd
=$bc					C64_LOG                  = $bc ; $bc log
=$bd					C64_EXP                  = $bd ; $bd exp
=$be					C64_COS                  = $be ; $be cos
=$bf					C64_SIN                  = $bf ; $bf sin
=$c0					C64_TAN                  = $c0 ; $c0 tan
=$c1					C64_ATN                  = $c1 ; $c1 atn
=$c2					C64_PEEK                 = $c2 ; $c2 peek
=$c3					C64_LEN                  = $c3 ; $c3 len
=$c4					C64_STRDOLLAR            = $c4 ; $c4 str$
=$c5					C64_VAL                  = $c5 ; $c5 val
=$c6					C64_ASC                  = $c6 ; $c6 asc
=$c7					C64_CHRDOLLAR            = $c7 ; $c7 chr$
=$c8					C64_LEFTDOLLAR           = $c8 ; $c8 left$
=$c9					C64_RIGHTDOLLAR          = $c9 ; $c9 right$
=$ca					C64_MIDDOLLAR            = $ca ; $ca mid$
=$cb					C64_GO                   = $cb ; $cb go
=$ce80					C64_MON                  = $ce80 ; $ce80 mon
=$ce81					C64_DOS                  = $ce81 ; $ce81 dos
=$ce82					C64_OLD                  = $ce82 ; $ce82 old
=$ce83					C64_GEOS                 = $ce83 ; $ce83 geos
=$ce84					C64_VPOKE                = $ce84 ; $ce84 vpoke
=$ce85					C64_VLOAD                = $ce85 ; $ce85 vload
=$ce86					C64_SCREEN               = $ce86 ; $ce86 screen
=$ce87					C64_PSET                 = $ce87 ; $ce87 pset
=$ce88					C64_LINE                 = $ce88 ; $ce88 line
=$ce89					C64_FRAME                = $ce89 ; $ce89 frame
=$ce8a					C64_RECT                 = $ce8a ; $ce8a rect
=$ce8b					C64_CHAR                 = $ce8b ; $ce8b char
=$ce8c					C64_MOUSE                = $ce8c ; $ce8c mouse
=$ce8d					C64_COLOR                = $ce8d ; $ce8d color
=$ce8e					C64_TEST                 = $ce8e ; $ce8e test
=$ce8f					C64_RESET                = $ce8f ; $ce8f reset
=$ce90					C64_CLS                  = $ce90 ; $ce90 cls
=$ce91					C64_CODEX                = $ce91 ; $ce91 codex
=$ce92					C64_LOCATE               = $ce92 ; $ce92 locate
=$ce93					C64_BOOT                 = $ce93 ; $ce93 boot
=$ce94					C64_KEYMAP               = $ce94 ; $ce94 keymap
=$ce95					C64_BLOAD                = $ce95 ; $ce95 bload
=$ce96					C64_BVLOAD               = $ce96 ; $ce96 bvload
=$ce97					C64_BVERIFY              = $ce97 ; $ce97 bverify
=$ce98					C64_BANK                 = $ce98 ; $ce98 bank
=$ce99					C64_FMINIT               = $ce99 ; $ce99 fminit
=$ce9a					C64_FMNOTE               = $ce9a ; $ce9a fmnote
=$ce9b					C64_FMDRUM               = $ce9b ; $ce9b fmdrum
=$ce9c					C64_FMINST               = $ce9c ; $ce9c fminst
=$ce9d					C64_FMVIB                = $ce9d ; $ce9d fmvib
=$ce9e					C64_FMFREQ               = $ce9e ; $ce9e fmfreq
=$ce9f					C64_FMVOL                = $ce9f ; $ce9f fmvol
=$cea0					C64_FMPAN                = $cea0 ; $cea0 fmpan
=$cea1					C64_FMPLAY               = $cea1 ; $cea1 fmplay
=$cea2					C64_FMCHORD              = $cea2 ; $cea2 fmchord
=$cea3					C64_FMPOKE               = $cea3 ; $cea3 fmpoke
=$cea4					C64_PSGINIT              = $cea4 ; $cea4 psginit
=$cea5					C64_PSGNOTE              = $cea5 ; $cea5 psgnote
=$cea6					C64_PSGVOL               = $cea6 ; $cea6 psgvol
=$cea7					C64_PSGWAV               = $cea7 ; $cea7 psgwav
=$cea8					C64_PSGFREQ              = $cea8 ; $cea8 psgfreq
=$cea9					C64_PSGPAN               = $cea9 ; $cea9 psgpan
=$ceaa					C64_PSGPLAY              = $ceaa ; $ceaa psgplay
=$ceab					C64_PSGCHORD             = $ceab ; $ceab psgchord
=$ceac					C64_REBOOT               = $ceac ; $ceac reboot
=$cead					C64_POWEROFF             = $cead ; $cead poweroff
=$ceae					C64_I2CPOKE              = $ceae ; $ceae i2cpoke
=$ceaf					C64_SLEEP                = $ceaf ; $ceaf sleep
=$ceb0					C64_BSAVE                = $ceb0 ; $ceb0 bsave
=$ceb1					C64_MENU                 = $ceb1 ; $ceb1 menu
=$ceb2					C64_REN                  = $ceb2 ; $ceb2 ren
=$ceb3					C64_LINPUT               = $ceb3 ; $ceb3 linput
=$ceb4					C64_LINPUTHASH           = $ceb4 ; $ceb4 linput#
=$ceb5					C64_BINPUTHASH           = $ceb5 ; $ceb5 binput#
=$ceb6					C64_HELP                 = $ceb6 ; $ceb6 help
=$ced0					C64_VPEEK                = $ced0 ; $ced0 vpeek
=$ced1					C64_MX                   = $ced1 ; $ced1 mx
=$ced2					C64_MY                   = $ced2 ; $ced2 my
=$ced3					C64_MB                   = $ced3 ; $ced3 mb
=$ced4					C64_JOY                  = $ced4 ; $ced4 joy
=$ced5					C64_HEXDOLLAR            = $ced5 ; $ced5 hex$
=$ced6					C64_BINDOLLAR            = $ced6 ; $ced6 bin$
=$ced7					C64_I2CPEEK              = $ced7 ; $ced7 i2cpeek
=$ced8					C64_POINTER              = $ced8 ; $ced8 pointer
=$ced9					C64_STRPTR               = $ced9 ; $ced9 strptr
=$ceda					C64_RPTDOLLAR            = $ceda ; $ceda rpt$
.0022					srcPtr:
>0022							.fill 	2
.0400					sourceBuffer:
>0400							.fill 	256
.0500					currentLineNumber:
>0500							.fill 	2
=$4000					PCodeStart = $4000
.100e					InlineNonDecimal:
.100e	a2 02		ldx #$02			ldx 	#2 							; get size in X
.1010	c9 25		cmp #$25			cmp 	#"%"
.1012	f0 02		beq $1016			beq 	_INDBinary
.1014	a2 10		ldx #$10			ldx 	#16
.1016					_INDBinary:
.1016	85 2e		sta $2e				sta 	zTemp1 						; size => zTemp1
.1018	64 2f		stz $2f				stz 	zTemp1+1 					; count => zTemp1+1, at least 1 !
.101a	64 2c		stz $2c				stz 	zTemp0 						; zero result
.101c	64 2d		stz $2d				stz 	zTemp0+1
.101e					_INDLoop:
.101e	20 c9 1a	jsr $1ac9			jsr 	LookNext 					; check next character
.1021	20 05 1b	jsr $1b05			jsr 	ConvertHexStyle		 		; convert into range 0-35 for 0-9A-Z
.1024	90 1f		bcc $1045			bcc		_INDDone 					; didn't convert
.1026	c5 2e		cmp $2e				cmp 	zTemp1 						; size too large ?
.1028	b0 1b		bcs $1045			bcs 	_INDDone
.102a	20 54 10	jsr $1054			jsr 	_INDShift 					; x 2 or x 16
.102d	e0 02		cpx #$02			cpx 	#2
.102f	f0 09		beq $103a			beq 	_INDNotHex
.1031	20 54 10	jsr $1054			jsr 	_INDShift
.1034	20 54 10	jsr $1054			jsr 	_INDShift
.1037	20 54 10	jsr $1054			jsr 	_INDShift
.103a					_INDNotHex:
.103a	05 2c		ora $2c				ora 	zTemp0 						; or digit into result
.103c	85 2c		sta $2c				sta 	zTemp0
.103e	20 da 1a	jsr $1ada			jsr 	GetNext 					; consume
.1041	e6 2f		inc $2f				inc 	zTemp1+1 					; bump count
.1043	80 d9		bra $101e			bra 	_INDLoop
.1045					_INDDone:
.1045	a5 2f		lda $2f				lda 	zTemp1+1 					; done at least 1 ?
.1047	f0 08		beq $1051			beq 	_INDError
.1049	a4 2d		ldy $2d				ldy 	zTemp0+1 					; push constant
.104b	a5 2c		lda $2c				lda 	zTemp0
.104d	20 34 11	jsr $1134			jsr 	PushIntegerYA
.1050	60		rts				rts
.1051					_INDError:
.1051	4c 55 13	jmp $1355		jmp	ErrorV_syntax
.1054					_INDShift:
.1054	06 2c		asl $2c				asl 	zTemp0
.1056	26 2d		rol $2d				rol 	zTemp0+1
.1058	60		rts				rts
.1059					BufferClear:
.1059	9c 02 05	stz $0502			stz 	bufferSize
.105c	60		rts				rts
.105d					BufferWrite:
.105d	da		phx				phx
.105e	ae 02 05	ldx $0502			ldx 	bufferSize
.1061	9d 03 05	sta $0503,x			sta 	dataBuffer,x
.1064	ee 02 05	inc $0502			inc 	bufferSize
.1067	fa		plx				plx
.1068	60		rts				rts
.1069					BufferOutput:
.1069	ad 02 05	lda $0502			lda 	bufferSize
.106c	20 80 10	jsr $1080			jsr 	WriteCodeByte
.106f	a2 00		ldx #$00			ldx 	#0
.1071					_BOLoop:
.1071	ec 02 05	cpx $0502			cpx 	bufferSize
.1074	f0 09		beq $107f			beq 	_BOExit
.1076	bd 03 05	lda $0503,x			lda 	dataBuffer,x
.1079	20 80 10	jsr $1080			jsr 	WriteCodeByte
.107c	e8		inx				inx
.107d	80 f2		bra $1071			bra 	_BOLoop
.107f					_BOExit:
.107f	60		rts				rts
.0502					bufferSize:
>0502							.fill 	1
.0503					dataBuffer:
>0503							.fill 	256
.1080					WriteCodeByte:
.1080	48		pha				pha 								; save on stack
.1081	da		phx				phx
.1082	5a		phy				phy
.1083	20 a8 1f	jsr $1fa8			jsr 	OUTPUTWriteByte
.1086	7a		ply				ply 								; restore from stack
.1087	fa		plx				plx
.1088	68		pla				pla
.1089	60		rts				rts
.108a					CheckNextComma:
.108a	a9 2c		lda #$2c			lda	 	#","
.108c	80 06		bra $1094			bra 	CheckNextA
.108e					CheckNextRParen:
.108e	a9 29		lda #$29			lda	 	#")"
.1090	80 02		bra $1094			bra 	CheckNextA
.1092					CheckNextLParen:
.1092	a9 28		lda #$28			lda 	#"("
.1094					CheckNextA:
.1094	8d 03 06	sta $0603			sta 	checkCharacter 				; save test character
.1097					_CNALoop:
.1097	20 e5 1a	jsr $1ae5			jsr 	GetNextNonSpace 			; get next skipping spaces.
.109a	cd 03 06	cmp $0603			cmp 	checkCharacter 				; matches ?
.109d	f0 03		beq $10a2			beq 	_CNAExit
.109f	4c 55 13	jmp $1355		jmp	ErrorV_syntax
.10a2					_CNAExit:
.10a2	60		rts				rts
.0603					checkCharacter:
>0603							.fill 	1
.10a3					OUTPUTClose:
.10a3	a9 40		lda #$40			lda 	#(PCodeStart >> 8)
.10a5	a6 29		ldx $29				ldx 	objPtr
.10a7	a4 2a		ldy $2a				ldy 	objPtr+1
.10a9	20 12 20	jsr $2012			jsr 	XSaveMemory
.10ac	60		rts				rts
.10ad					StartCompiler:
.10ad	86 2c		stx $2c				stx 	zTemp0 						; access API
.10af	84 2d		sty $2d				sty 	zTemp0+1
.10b1	a0 01		ldy #$01			ldy 	#1 							; copy API vector
.10b3	b2 2c		lda ($2c)			lda 	(zTemp0)
.10b5	8d 05 06	sta $0605			sta 	APIVector
.10b8	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.10ba	8d 06 06	sta $0606			sta 	APIVector+1
.10bd	c8		iny				iny 								; copy data area range.
.10be	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.10c0	8d 07 06	sta $0607			sta 	compilerStartHigh
.10c3	c8		iny				iny
.10c4	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.10c6	8d 08 06	sta $0608			sta 	compilerEndHigh
.10c9	ba		tsx				tsx 								; save stack pointer
.10ca	8e 04 06	stx $0604			stx 	compilerSP
.10cd	20 c1 1e	jsr $1ec1			jsr 	STRReset 					; reset storage (line#, variable)
.10d0	20 55 16	jsr $1655			jsr 	INPUTOpen 					; reset data input
.10d3	20 7b 1d	jsr $1d7b			jsr 	OUTPUTOpen 					; reset data output.
.10d6	a9 d4		lda #$d4			lda 	#PCD_CMD_VARSPACE
.10d8	20 80 10	jsr $1080			jsr 	WriteCodeByte
.10db	a9 00		lda #$00			lda 	#0
.10dd	20 80 10	jsr $1080			jsr 	WriteCodeByte
.10e0	20 80 10	jsr $1080			jsr 	WriteCodeByte
.10e3					MainCompileLoop:
.10e3	20 5f 1c	jsr $1c5f			jsr 	ReadNextLine 				; read next line into the buffer.
.10e6	90 2e		bcc $1116			bcc 	SaveCodeAndExit 			; end of source.
.10e8	20 90 1c	jsr $1c90			jsr 	GetLineNumber 				; get line #
.10eb	20 97 1c	jsr $1c97			jsr 	STRMarkLine 				; remember the position and number of this line.
.10ee	a9 a6		lda #$a6			lda 	#PCD_NEWCMD_LINE 			; generate new command line
.10f0	20 80 10	jsr $1080			jsr 	WriteCodeByte
.10f3					_MCLSameLine:
.10f3	20 e5 1a	jsr $1ae5			jsr 	GetNextNonSpace 			; get the first character.
.10f6	f0 eb		beq $10e3			beq 	MainCompileLoop 			; end of line, get next line.
.10f8	c9 3a		cmp #$3a			cmp 	#":"						; if : then loop back.
.10fa	f0 f7		beq $10f3			beq 	_MCLSameLine
.10fc	c9 00		cmp #$00			cmp 	#0 							; if ASCII then check for implied LET.
.10fe	10 0c		bpl $110c			bpl 	_MCLCheckAssignment
.1100	a2 a6		ldx #$a6			ldx 	#CommandTables & $FF 		; do command tables.
.1102	a0 16		ldy #$16			ldy 	#CommandTables >> 8
.1104	20 6e 19	jsr $196e			jsr 	GeneratorProcess
.1107	b0 ea		bcs $10f3			bcs 	_MCLSameLine 				; keep trying to compile the line.
.1109					_MCLSyntax:
.1109	4c 55 13	jmp $1355		jmp	ErrorV_syntax
.110c					_MCLCheckAssignment:
.110c	20 fb 1a	jsr $1afb			jsr 	CharIsAlpha 				; if not alpha then syntax error
.110f	90 f8		bcc $1109			bcc 	_MCLSyntax
.1111	20 2d 1c	jsr $1c2d			jsr 	CommandLETHaveFirst  		; LET first character, do assign
.1114	80 dd		bra $10f3			bra		_MCLSameLine 				; loop back.
.1116					SaveCodeAndExit:
.1116	20 5d 16	jsr $165d			jsr 	INPUTClose 					; finish input.
.1119	a9 ff		lda #$ff			lda 	#$FF 						; fake line number $FFFF for forward THEN.
.111b	a8		tay				tay
.111c	20 97 1c	jsr $1c97			jsr 	STRMarkLine
.111f	a9 c4		lda #$c4			lda 	#PCD_EXIT 					; add an END
.1121	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1124	a9 ff		lda #$ff			lda 	#$FF 						; add end marker
.1126	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1129	20 80 15	jsr $1580			jsr 	FixBranches 				; fix up GOTO/GOSUB etc.
.112c	20 a3 10	jsr $10a3			jsr 	OUTPUTClose
.112f					ExitCompiler:
.112f	ae 04 06	ldx $0604			ldx 	compilerSP 					; reload SP and exit.
.1132	9a		txs				txs
.1133	60		rts				rts
.0604					compilerSP:
>0604							.fill 	1
.0605					APIVector:
>0605							.fill 	2
.0607					compilerStartHigh:
>0607							.fill 	1
.0608					compilerEndHigh:
>0608							.fill 	1
.1134					PushIntegerYA:
.1134	c0 00		cpy #$00			cpy 	#0 							; 0-255
.1136	f0 0f		beq $1147			beq 	PushIntegerA
.1138	48		pha				pha
.1139	a9 cc		lda #$cc			lda 	#PCD_CMD_WORD 				; send .word
.113b	20 80 10	jsr $1080			jsr 	WriteCodeByte
.113e	68		pla				pla 								; then LSB
.113f	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1142	98		tya				tya 								; then MSB
.1143	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1146	60		rts				rts
.1147					PushIntegerA:
.1147	c9 40		cmp #$40			cmp 	#64 						; if > 64 send byte as is
.1149	90 07		bcc $1152			bcc 	_PIWriteA
.114b	48		pha				pha
.114c	a9 cb		lda #$cb			lda 	#PCD_CMD_BYTE 				; send .byte
.114e	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1151	68		pla				pla
.1152					_PIWriteA:
.1152	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1155	60		rts				rts
.1156					PushFloat:
.1156	a9 cd		lda #$cd			lda 	#PCD_CMD_FLOAT 				; write CMD_FLOAT
.1158	20 80 10	jsr $1080			jsr 	WriteCodeByte
.115b	b5 6e		lda $6e,x			lda 	NSExponent,x 				; and the data
.115d	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1160	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.1162	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1165	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.1167	20 80 10	jsr $1080			jsr 	WriteCodeByte
.116a	b5 56		lda $56,x			lda 	NSMantissa2,x
.116c	20 80 10	jsr $1080			jsr 	WriteCodeByte
.116f	b5 32		lda $32,x			lda 	NSStatus,x 					; with sign packed in byte 3 MSB
.1171	29 80		and #$80			and 	#$80
.1173	15 62		ora $62,x			ora 	NSMantissa3,x
.1175	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1178	60		rts				rts
.1179					CreateVariableRecord:
.1179	48		pha				pha
.117a	ad 13 06	lda $0613			lda 	freeVariableMemory 		; push current free address on stack.
.117d	48		pha				pha
.117e	ad 14 06	lda $0614			lda 	freeVariableMemory+1
.1181	48		pha				pha
.1182	ad 11 06	lda $0611			lda 	variableListEnd  		; copy end of list to zTemp0
.1185	85 2c		sta $2c				sta 	zTemp0
.1187	ad 12 06	lda $0612			lda 	variableListEnd+1
.118a	85 2d		sta $2d				sta 	zTemp0+1
.118c	a9 06		lda #$06			lda 	#6 						; default size if 6 (offset link 3 bytes)
.118e	92 2c		sta ($2c)			sta 	(zTemp0)
.1190	98		tya				tya
.1191	a0 02		ldy #$02			ldy 	#2 						; write out the name.
.1193	91 2c		sta ($2c),y			sta 	(zTemp0),y
.1195	88		dey				dey
.1196	8a		txa				txa
.1197	91 2c		sta ($2c),y			sta 	(zTemp0),y
.1199	a0 03		ldy #$03			ldy 	#3 						; write out the address.
.119b	ad 13 06	lda $0613			lda 	freeVariableMemory
.119e	91 2c		sta ($2c),y			sta 	(zTemp0),y
.11a0	c8		iny				iny
.11a1	ad 14 06	lda $0614			lda 	freeVariableMemory+1
.11a4	91 2c		sta ($2c),y			sta 	(zTemp0),y
.11a6	a0 06		ldy #$06			ldy 	#6 						; write EOL marker next record.
.11a8	a9 00		lda #$00			lda 	#0
.11aa	91 2c		sta ($2c),y			sta 	(zTemp0),y
.11ac	18		clc				clc
.11ad	b2 2c		lda ($2c)			lda 	(zTemp0) 				; add offset to variableListEnd
.11af	6d 11 06	adc $0611			adc  	variableListEnd
.11b2	8d 11 06	sta $0611			sta 	variableListEnd
.11b5	90 03		bcc $11ba			bcc 	_CVNoCarry2
.11b7	ee 12 06	inc $0612			inc 	variableListEnd+1
.11ba					_CVNoCarry2:
.11ba	7a		ply				ply
.11bb	fa		plx				plx
.11bc	68		pla				pla
.11bd	60		rts				rts
.11be					SetVariableRecordToCodePosition:
.11be	48		pha				pha
.11bf	5a		phy				phy
.11c0	a5 2b		lda $2b				lda 	objPage
.11c2	a0 03		ldy #$03			ldy 	#3
.11c4	91 2c		sta ($2c),y			sta 	(zTemp0),y
.11c6	c8		iny				iny
.11c7	a5 2a		lda $2a				lda 	objPtr+1
.11c9	91 2c		sta ($2c),y			sta 	(zTemp0),y
.11cb	c8		iny				iny
.11cc	a5 29		lda $29				lda 	objPtr
.11ce	91 2c		sta ($2c),y			sta 	(zTemp0),y
.11d0	7a		ply				ply
.11d1	68		pla				pla
.11d2	60		rts				rts
.11d3					AllocateBytesForType:
.11d3	48		pha				pha
.11d4	da		phx				phx
.11d5	a2 02		ldx #$02			ldx 	#2 						; bytes to allocate
.11d7	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16
.11d9	c9 00		cmp #$00			cmp 	#NSSIFloat
.11db	d0 02		bne $11df			bne 	_CVNotFloat
.11dd	a2 06		ldx #$06			ldx 	#6
.11df					_CVNotFloat:
.11df	8a		txa				txa 							; add 6 or 2 to the free memory pointer.
.11e0	18		clc				clc
.11e1	6d 13 06	adc $0613			adc 	freeVariableMemory
.11e4	8d 13 06	sta $0613			sta 	freeVariableMemory
.11e7	90 03		bcc $11ec			bcc 	_CVNoCarry1
.11e9	ee 14 06	inc $0614			inc 	freeVariableMemory+1
.11ec					_CVNoCarry1:
.11ec	fa		plx				plx
.11ed	68		pla				pla
.11ee	60		rts				rts
.11ef					CommandDATA:
.11ef	20 59 10	jsr $1059			jsr 	BufferClear 				; copy it to the buffer
.11f2	20 cc 1a	jsr $1acc			jsr 	LookNextNonSpace
.11f5					_CTDataLoop:
.11f5	20 c9 1a	jsr $1ac9			jsr 	LookNext 					; reached EOL
.11f8	f0 08		beq $1202			beq 	_CTDataDone
.11fa	20 5d 10	jsr $105d			jsr 	BufferWrite 				; write and consume
.11fd	20 da 1a	jsr $1ada			jsr 	GetNext
.1200	80 f3		bra $11f5			bra 	_CTDataLoop
.1202					_CTDataDone:
.1202	a9 cf		lda #$cf			lda 	#PCD_CMD_DATA 				; output command and buffer
.1204	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1207	20 69 10	jsr $1069			jsr 	BufferOutput
.120a	60		rts				rts
.120b					CommandDEF:
.120b	a9 00		lda #$00			lda 	#0 							; constant 0 (for GOTOZ)
.120d	20 47 11	jsr $1147			jsr 	PushIntegerA
.1210	20 f1 1b	jsr $1bf1			jsr 	CompileGotoEOL 				; compile skip over DEF
.1213	a9 a5		lda #$a5			lda 	#C64_FN
.1215	20 94 10	jsr $1094			jsr 	CheckNextA
.1218	20 e5 1a	jsr $1ae5			jsr 	GetNextNonSpace				; get variable name w/type must be array e.g. DEF FNx(a)
.121b	20 4a 1b	jsr $1b4a			jsr 	ExtractVariableName
.121e	8a		txa				txa
.121f	10 51		bpl $1272			bpl 	_CDError
.1221	8a		txa				txa 								; convert to a function reference - bit 7:0 clear bit 7:1 set
.1222	29 7f		and #$7f			and 	#$7F
.1224	aa		tax				tax
.1225	98		tya				tya
.1226	09 80		ora #$80			ora 	#$80
.1228	a8		tay				tay
.1229	20 24 15	jsr $1524			jsr 	FindVariable				; does it already exist ?
.122c	b0 44		bcs $1272			bcs 	_CDError 					; if so, that's an error.
.122e	20 79 11	jsr $1179			jsr 	CreateVariableRecord 		; create the record for it & put the data in it.
.1231	20 be 11	jsr $11be			jsr 	SetVariableRecordToCodePosition
.1234	20 e5 1a	jsr $1ae5			jsr 	GetNextNonSpace
.1237	20 7e 1e	jsr $1e7e			jsr 	GetReferenceTerm 			; get var ref, not array
.123a	c9 00		cmp #$00			cmp 	#0
.123c	30 34		bmi $1272			bmi 	_CDError
.123e	8d 09 06	sta $0609			sta 	defType 					; save type
.1241	8e 0a 06	stx $060a			stx 	defVariable 				; save var ref
.1244	8c 0b 06	sty $060b			sty 	defVariable+1
.1247	29 40		and #$40			and 	#NSSString 					; only numbers.
.1249	d0 27		bne $1272			bne 	_CDError
.124b	20 8e 10	jsr $108e			jsr 	CheckNextRParen 			; check )
.124e	a9 b2		lda #$b2			lda 	#C64_EQUAL
.1250	20 94 10	jsr $1094			jsr 	CheckNextA 					; check =
.1253	18		clc				clc 								; if this is DEF FNxx(A), read A
.1254	20 75 12	jsr $1275			jsr 	CDReadWriteVariable
.1257	a9 be		lda #$be			lda 	#(PCD_SWAP) & $FF
.1259	20 80 10	jsr $1080			jsr 	WriteCodeByte
.125c	38		sec				sec
.125d	20 75 12	jsr $1275			jsr 	CDReadWriteVariable 		; A is now updated
.1260	20 6a 14	jsr $146a			jsr 	CompileExpressionAt0 		; the actual body of the function.
.1263	a9 be		lda #$be			lda 	#(PCD_SWAP) & $FF
.1265	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1268	38		sec				sec
.1269	20 75 12	jsr $1275			jsr 	CDReadWriteVariable 		; A is now reset to its old value
.126c	a9 98		lda #$98			lda 	#(PCD_RETURN) & $FF
.126e	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1271	60		rts				rts
.1272					_CDError:
.1272	4c 55 13	jmp $1355		jmp	ErrorV_syntax
.1275					CDReadWriteVariable:
.1275	ac 0b 06	ldy $060b			ldy 	defVariable+1 				; set up YX
.1278	ae 0a 06	ldx $060a			ldx 	defVariable
.127b	ad 09 06	lda $0609			lda 	defType
.127e	20 30 1e	jsr $1e30			jsr 	GetSetVariable
.1281	60		rts				rts
.0609					defType:
>0609							.fill 	1
.060a					defVariable:
>060a							.fill 	2
.1282					CommandDIM:
.1282	20 e5 1a	jsr $1ae5			jsr 	GetNextNonSpace 			; get the first non space character
.1285	20 4a 1b	jsr $1b4a			jsr 	ExtractVariableName 		; variable name to XY
.1288	da		phx				phx 								; save name with type bits.
.1289	e0 00		cpx #$00			cpx 	#0 							; check it is an array.
.128b	10 37		bpl $12c4			bpl 	_CDError
.128d	20 24 15	jsr $1524			jsr 	FindVariable	 			; see if already exist
.1290	b0 35		bcs $12c7			bcs 	_CDRedefine 				; it still exists.
.1292	20 79 11	jsr $1179			jsr 	CreateVariableRecord 		; create the basic variable
.1295	20 d3 11	jsr $11d3			jsr 	AllocateBytesForType 		; allocate memory for it
.1298	68		pla				pla 								; restore type bits
.1299	5a		phy				phy 								; save the address of the basic storage
.129a	da		phx				phx
.129b	48		pha				pha
.129c	20 ca 12	jsr $12ca			jsr 	OutputIndexGroup 			; create an index group and generate them, preserving type data
.129f	68		pla				pla
.12a0	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16 		; 2 bit type data
.12a2	20 47 11	jsr $1147			jsr 	PushIntegerA 				; push that type data out.
.12a5	a9 ca		lda #$ca			lda 	#(PCD_DIM) >> 8
.12a7	20 80 10	jsr $1080			jsr 	WriteCodeByte
.12aa	a9 81		lda #$81			lda 	#(PCD_DIM) & $FF
.12ac	20 80 10	jsr $1080			jsr 	WriteCodeByte
.12af	fa		plx				plx 								; restore address
.12b0	7a		ply				ply
.12b1	a9 20		lda #$20			lda 	#NSSIFloat+NSSIInt16 		; pretend it is an int16 reference.
.12b3	38		sec				sec
.12b4	20 30 1e	jsr $1e30			jsr 	GetSetVariable 				; store the address in the reference to the array structure.
.12b7	20 cc 1a	jsr $1acc			jsr 	LookNextNonSpace 			; , follows ?
.12ba	c9 2c		cmp #$2c			cmp 	#","
.12bc	d0 05		bne $12c3			bne 	_CDExit
.12be	20 da 1a	jsr $1ada			jsr 	GetNext 					; consume comma
.12c1	80 bf		bra $1282			bra 	CommandDIM 					; do another DIM
.12c3					_CDExit:
.12c3	60		rts				rts
.12c4					_CDError:
.12c4	4c 55 13	jmp $1355		jmp	ErrorV_syntax
.12c7					_CDRedefine:
.12c7	4c 1d 14	jmp $141d		jmp	ErrorV_redefine
.12ca					OutputIndexGroup:
.12ca	9c 0c 06	stz $060c			stz 	IndexCount 					; count of number of indices.
.12cd					_OIGNext:
.12cd	20 6a 14	jsr $146a			jsr 	CompileExpressionAt0 		; get a dimension
.12d0	29 40		and #$40			and 	#NSSTypeMask 				; check it is numeric
.12d2	c9 00		cmp #$00			cmp 	#NSSIFloat
.12d4	d0 19		bne $12ef			bne 	_OIGType
.12d6	ee 0c 06	inc $060c			inc 	IndexCount 					; bump the counter.
.12d9	20 cc 1a	jsr $1acc			jsr 	LookNextNonSpace 			; does a , follow ?
.12dc	c9 2c		cmp #$2c			cmp 	#","
.12de	d0 05		bne $12e5			bne 	_OIGCheckEnd
.12e0	20 da 1a	jsr $1ada			jsr 	GetNext 					; consume comma
.12e3	80 e8		bra $12cd			bra 	_OIGNext 					; get next dimension
.12e5					_OIGCheckEnd:
.12e5	20 8e 10	jsr $108e			jsr 	CheckNextRParen 			; check and consume )
.12e8	ad 0c 06	lda $060c			lda 	IndexCount
.12eb	20 47 11	jsr $1147			jsr 	PushIntegerA 				; compile the dimension count.
.12ee	60		rts				rts
.12ef					_OIGType:
.12ef	4c 65 13	jmp $1365		jmp	ErrorV_type
.060c					IndexCount:
>060c							.fill 	1
.12f2					ErrorHandler:
.12f2	68		pla				pla
.12f3	7a		ply				ply
.12f4	85 2c		sta $2c				sta 	zTemp0
.12f6	84 2d		sty $2d				sty 	zTemp0+1
.12f8	a2 00		ldx #$00			ldx 	#0 							; output msg to channel #0
.12fa	a0 01		ldy #$01			ldy 	#1
.12fc					_EHDisplayMsg:
.12fc	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.12fe	20 08 20	jsr $2008			jsr 	XPrintCharacter
.1301	c8		iny				iny
.1302	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.1304	d0 f6		bne $12fc			bne 	_EHDisplayMsg
.1306	a9 20		lda #$20			lda 	#32
.1308	20 08 20	jsr $2008			jsr 	XPrintCharacter
.130b	a9 40		lda #$40			lda 	#64
.130d	20 08 20	jsr $2008			jsr 	XPrintCharacter
.1310	a2 00		ldx #$00			ldx 	#0 							; convert line# to string
.1312	20 6f 26	jsr $266f			jsr 	FloatSetByte
.1315	20 90 1c	jsr $1c90			jsr 	GetLineNumber
.1318	95 3e		sta $3e,x			sta 	NSMantissa0,x
.131a	98		tya				tya
.131b	95 4a		sta $4a,x			sta 	NSMantissa1,x
.131d	20 55 25	jsr $2555			jsr 	FloatToString
.1320	a0 00		ldy #$00			ldy 	#0 							; display that string.
.1322	a2 00		ldx #$00			ldx 	#0
.1324					_EHDisplayLine:
.1324	b9 3c 06	lda $063c,y			lda 	decimalBuffer,y
.1327	20 08 20	jsr $2008			jsr 	XPrintCharacter
.132a	c8		iny				iny
.132b	b9 3c 06	lda $063c,y			lda 	decimalBuffer,y
.132e	d0 f4		bne $1324			bne 	_EHDisplayLine
.1330	a9 0d		lda #$0d			lda 	#13
.1332	20 08 20	jsr $2008			jsr 	XPrintCharacter
.1335	4c 2f 11	jmp $112f			jmp 	ExitCompiler
.1338					ErrorV_range:
.1338	20 f2 12	jsr $12f2		jsr	ErrorHandler
>133b	4f 55 54 20 4f 46 20 52			.text	"OUT OF RANGE",0
>1343	41 4e 47 45 00
.1348					ErrorV_value:
.1348	20 f2 12	jsr $12f2		jsr	ErrorHandler
>134b	42 41 44 20 56 41 4c 55			.text	"BAD VALUE",0
>1353	45 00
.1355					ErrorV_syntax:
.1355	20 f2 12	jsr $12f2		jsr	ErrorHandler
>1358	53 59 4e 54 41 58 20 45			.text	"SYNTAX ERROR",0
>1360	52 52 4f 52 00
.1365					ErrorV_type:
.1365	20 f2 12	jsr $12f2		jsr	ErrorHandler
>1368	54 59 50 45 20 4d 49 53			.text	"TYPE MISMATCH",0
>1370	4d 41 54 43 48 00
.1376					ErrorV_unimplemented:
.1376	20 f2 12	jsr $12f2		jsr	ErrorHandler
>1379	4e 4f 54 20 49 4d 50 4c			.text	"NOT IMPLEMENTED",0
>1381	45 4d 45 4e 54 45 44 00
.1389					ErrorV_assert:
.1389	20 f2 12	jsr $12f2		jsr	ErrorHandler
>138c	41 53 53 45 52 54 20 46			.text	"ASSERT FAIL",0
>1394	41 49 4c 00
.1398					ErrorV_line:
.1398	20 f2 12	jsr $12f2		jsr	ErrorHandler
>139b	55 4e 4b 4e 4f 57 4e 20			.text	"UNKNOWN LINE NUMBER",0
>13a3	4c 49 4e 45 20 4e 55 4d 42 45 52 00
.13af					ErrorV_internal:
.13af	20 f2 12	jsr $12f2		jsr	ErrorHandler
>13b2	49 4e 54 45 52 4e 41 4c			.text	"INTERNAL ERROR",0
>13ba	20 45 52 52 4f 52 00
.13c1					ErrorV_divzero:
.13c1	20 f2 12	jsr $12f2		jsr	ErrorHandler
>13c4	44 49 56 49 44 45 20 42			.text	"DIVIDE BY ZERO",0
>13cc	59 20 5a 45 52 4f 00
.13d3					ErrorV_structure:
.13d3	20 f2 12	jsr $12f2		jsr	ErrorHandler
>13d6	53 54 52 55 43 54 55 52			.text	"STRUCTURE IMBALANCE",0
>13de	45 20 49 4d 42 41 4c 41 4e 43 45 00
.13ea					ErrorV_stop:
.13ea	20 f2 12	jsr $12f2		jsr	ErrorHandler
>13ed	50 52 4f 47 52 41 4d 20			.text	"PROGRAM STOPPED",0
>13f5	53 54 4f 50 50 45 44 00
.13fd					ErrorV_data:
.13fd	20 f2 12	jsr $12f2		jsr	ErrorHandler
>1400	4f 55 54 20 4f 46 20 44			.text	"OUT OF DATA",0
>1408	41 54 41 00
.140c					ErrorV_undeclared:
.140c	20 f2 12	jsr $12f2		jsr	ErrorHandler
>140f	55 4e 4b 4e 4f 57 4e 20			.text	"UNKNOWN ARRAY",0
>1417	41 52 52 41 59 00
.141d					ErrorV_redefine:
.141d	20 f2 12	jsr $12f2		jsr	ErrorHandler
>1420	41 52 52 41 59 20 52 45			.text	"ARRAY REDEFINED",0
>1428	44 45 46 49 4e 45 44 00
.1430					ErrorV_index:
.1430	20 f2 12	jsr $12f2		jsr	ErrorHandler
>1433	42 41 44 20 41 52 52 41			.text	"BAD ARRAY INDEX",0
>143b	59 20 49 4e 44 45 58 00
.1443					ErrorV_memory:
.1443	20 f2 12	jsr $12f2		jsr	ErrorHandler
>1446	4f 55 54 20 4f 46 20 4d			.text	"OUT OF MEMORY",0
>144e	45 4d 4f 52 59 00
.1454					ErrorV_channel:
.1454	20 f2 12	jsr $12f2		jsr	ErrorHandler
>1457	49 4e 50 55 54 2f 4f 55			.text	"INPUT/OUTPUT ERROR",0
>145f	54 50 55 54 20 45 52 52 4f 52 00
.146a					CompileExpressionAt0:
.146a	a9 00		lda #$00			lda 	#0
.146c					CompileExpressionAtA:
.146c	48		pha				pha  								; save level
.146d	20 e9 1e	jsr $1ee9			jsr 	CompileTerm 				; compile a term.
.1470	fa		plx				plx 								; get level back into X
.1471					_ECALoop:
.1471	48		pha				pha 								; save type on stack.
.1472	20 cc 1a	jsr $1acc			jsr 	LookNextNonSpace 			; get the next character
.1475	c9 aa		cmp #$aa			cmp 	#C64_PLUS 					; go to be + ... < in the C64 code.
.1477	90 04		bcc $147d			bcc 	_ECAExit
.1479	c9 b4		cmp #$b4			cmp 	#C64_LESS+1
.147b	90 02		bcc $147f			bcc 	_ECAHaveToken
.147d					_ECAExit:
.147d	68		pla				pla 								; throw type off stack
.147e	60		rts				rts
.147f					_ECAHaveToken:
.147f	86 2c		stx $2c				stx 	zTemp0 						; save current precedence in zTemp0
.1481	aa		tax				tax 								; X contains the operator token
.1482	bd 6d 14	lda $146d,x			lda 	PrecedenceTable-C64_PLUS,x  ; read precedence.
.1485	c5 2c		cmp $2c				cmp 	zTemp0 						; if < then exit
.1487	90 f4		bcc $147d			bcc 	_ECAExit
.1489	85 2d		sta $2d				sta 	zTemp0+1 					; save the precedence of the operator.
.148b	20 da 1a	jsr $1ada			jsr 	GetNext 					; consume the token.
.148e	e0 b1		cpx #$b1			cpx 	#C64_GREATER				; checks for < or > which could be two character tokens
.1490	f0 11		beq $14a3			beq 	_ECAGreaterCheck
.1492	e0 b3		cpx #$b3			cpx 	#C64_LESS
.1494	d0 1a		bne $14b0			bne 	_ECAHaveFullToken
.1496	20 c9 1a	jsr $1ac9			jsr 	LookNext 					; checks for < (<= or <>)
.1499	c9 b1		cmp #$b1			cmp 	#C64_GREATER 				; <> is 2 on from <
.149b	f0 0e		beq $14ab			beq	 	_ECAToNotEqual
.149d	c9 b2		cmp #$b2			cmp 	#C64_EQUAL 					; <= is 3 on from <
.149f	d0 0f		bne $14b0			bne 	_ECAHaveFullToken
.14a1	80 07		bra $14aa			bra 	_ECAAddEqual
.14a3					_ECAGreaterCheck:
.14a3	20 c9 1a	jsr $1ac9			jsr 	LookNext
.14a6	c9 b2		cmp #$b2			cmp 	#C64_EQUAL
.14a8	d0 06		bne $14b0			bne 	_ECAHaveFullToken
.14aa					_ECAAddEqual:
.14aa	e8		inx				inx 								; > => >= and < to <= is three tokens on.
.14ab					_ECAToNotEqual:
.14ab	e8		inx				inx
.14ac	e8		inx				inx
.14ad	20 da 1a	jsr $1ada			jsr 	GetNext 					; consume the = or > in >= <= <>
.14b0					_ECAHaveFullToken:
.14b0	e0 aa		cpx #$aa			cpx 	#C64_PLUS
.14b2	d0 0a		bne $14be			bne 	_ECANotConcat
.14b4	68		pla				pla 								; get type back
.14b5	48		pha				pha
.14b6	29 40		and #$40			and 	#NSSTypeMask
.14b8	c9 40		cmp #$40			cmp 	#NSSString
.14ba	d0 02		bne $14be			bne 	_ECANotConcat
.14bc	a2 df		ldx #$df			ldx 	#(PCD_CONCAT-(PCD_PLUS-C64_PLUS)) & $FF
.14be					_ECANotConcat:
.14be	da		phx				phx 								; save operator on the stack
.14bf	a6 2c		ldx $2c				ldx 	zTemp0 						; push current precedence on the stack
.14c1	da		phx				phx
.14c2	a5 2d		lda $2d				lda 	zTemp0+1 					; get precedence of operator
.14c4	1a		inc a				inc 	a
.14c5	20 6c 14	jsr $146c			jsr 	CompileExpressionAtA 		; and compile at the next level up.
.14c8	85 2c		sta $2c				sta 	zTemp0 						; save type in zTemp0
.14ca	fa		plx				plx 								; restore current precedence in X
.14cb	68		pla				pla 								; restore operator
.14cc	85 2d		sta $2d				sta 	zTemp0+1 					; save it in zTemp0+1.
.14ce	c9 b1		cmp #$b1			cmp 	#C64_GREATER 				; check for not compare
.14d0	90 17		bcc $14e9			bcc 	_ECANotCompare
.14d2	c9 b7		cmp #$b7			cmp 	#C64_GREATER+6
.14d4	b0 13		bcs $14e9			bcs 	_ECANotCompare
.14d6	7a		ply				ply 								; get type into Y
.14d7	5a		phy				phy
.14d8	48		pha				pha 								; save operator
.14d9	98		tya				tya 								; get type
.14da	a0 94		ldy #$94			ldy 	#PCD_SCMD_CMP 				; Y is the token to use
.14dc	29 40		and #$40			and 	#NSSTypeMask
.14de	c9 40		cmp #$40			cmp 	#NSSString
.14e0	f0 02		beq $14e4			beq 	_ECANotString
.14e2	a0 a3		ldy #$a3			ldy 	#PCD_FCMD_CMP
.14e4					_ECANotString:
.14e4	98		tya				tya									; output token Y
.14e5	20 80 10	jsr $1080			jsr 	WriteCodeByte
.14e8	68		pla				pla 								; restore operator.
.14e9					_ECANotCompare:
.14e9	18		clc				clc 								; convert to P-Code and compile.
.14ea	69 d6		adc #$d6			adc 	#(PCD_PLUS-C64_PLUS) & $FF 	; it might be invalid at this point
.14ec	20 80 10	jsr $1080			jsr 	WriteCodeByte
.14ef	68		pla				pla 								; type of current result
.14f0	45 2c		eor $2c				eor 	zTemp0 						; check compatible with r-expr type
.14f2	29 40		and #$40			and 	#NSSTypeMask 				; the types should be compatible, only interested in number vs float
.14f4	d0 19		bne $150f			bne		_ECAType
.14f6	a5 2c		lda $2c				lda 	zTemp0 						; get type back
.14f8	c9 40		cmp #$40			cmp 	#NSSString 					; if it is a number, then all operators work.
.14fa	d0 18		bne $1514			bne 	_ECAGoLoop
.14fc	a5 2d		lda $2d				lda 	zTemp0+1 					; check operator is + or comparator
.14fe	c9 df		cmp #$df			cmp 	#(PCD_CONCAT-(PCD_PLUS-C64_PLUS)) & $FF
.1500	f0 10		beq $1512			beq 	_ECAOkayString 				; (this is post conversion)
.1502	c9 b1		cmp #$b1			cmp 	#C64_GREATER 				; must be a comparison then.
.1504	90 09		bcc $150f			bcc 	_ECAType
.1506	c9 b7		cmp #$b7			cmp 	#C64_LESS+1+3 				; the +3 is because of >= <= <>
.1508	b0 05		bcs $150f			bcs 	_ECAType
.150a	a9 00		lda #$00			lda 	#NSSIFloat 					; compare returns number.
.150c	4c 71 14	jmp $1471			jmp 	_ECALoop
.150f					_ECAType:
.150f	4c 65 13	jmp $1365		jmp	ErrorV_type
.1512					_ECAOkayString:
.1512	a9 40		lda #$40			lda 	#NSSString 					; current is string, go round again.
.1514					_ECAGoLoop:
.1514	4c 71 14	jmp $1471			jmp 	_ECALoop
.1517					PrecedenceTable:
>1517	03						.byte 	3 					; '+'
>1518	03						.byte 	3 					; '-'
>1519	04						.byte 	4 					; '*'
>151a	04						.byte 	4 					; '/'
>151b	05						.byte 	5 					; '^'
>151c	01						.byte 	1 					; 'and'
>151d	00						.byte 	0 					; 'or'
>151e	02						.byte 	2 					; '>'
>151f	02						.byte 	2 					; '='
>1520	02						.byte 	2 					; '<'
>1521	02						.byte 	2 					; '>='
>1522	02						.byte 	2 					; '<='
>1523	02						.byte 	2 					; '<>'
.1524					FindVariable:
.1524	86 2e		stx $2e				stx 	zTemp1 						; save name.
.1526	84 2f		sty $2f				sty 	zTemp1+1
.1528					_IVCheckSpecial:
.1528	c0 09		cpy #$09			cpy 	#$09	 					; both end $09 e.g. I
.152a	d0 18		bne $1544			bne 	_IVStandard
.152c	e0 14		cpx #$14			cpx 	#$14 						; TI is $14
.152e	f0 0c		beq $153c			beq 	_IVTIFloat
.1530	e0 54		cpx #$54			cpx 	#$54 						; TI$ is $54
.1532	d0 10		bne $1544			bne 	_IVStandard
.1534	a0 c0		ldy #$c0			ldy 	#$C0 						; TI$ returns string $C001
.1536	a2 01		ldx #$01			ldx 	#$01
.1538	a9 40		lda #$40			lda 	#NSSString
.153a	38		sec				sec
.153b	60		rts				rts
.153c					_IVTIFloat:
.153c	a0 80		ldy #$80			ldy 	#$80
.153e	a2 00		ldx #$00			ldx 	#$00
.1540	a9 00		lda #$00			lda 	#0
.1542	38		sec				sec
.1543	60		rts				rts
.1544					_IVStandard:
.1544	ad 07 06	lda $0607			lda 	compilerStartHigh			; start scanning from here.
.1547	85 2d		sta $2d				sta 	zTemp0+1
.1549	64 2c		stz $2c				stz 	zTemp0
.154b					_IVCheckLoop:
.154b	b2 2c		lda ($2c)			lda 	(zTemp0) 					; finished ?
.154d	f0 2b		beq $157a			beq  	_IVNotFound 				; if so, return with CC.
.154f	a0 01		ldy #$01			ldy 	#1 							; match ?
.1551	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.1553	c5 2e		cmp $2e				cmp 	zTemp1
.1555	d0 07		bne $155e			bne	 	_IVNext
.1557	c8		iny				iny
.1558	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.155a	c5 2f		cmp $2f				cmp 	zTemp1+1
.155c	f0 0d		beq $156b			beq 	_IVFound
.155e					_IVNext:
.155e	18		clc				clc
.155f	a5 2c		lda $2c				lda 	zTemp0
.1561	72 2c		adc ($2c)			adc 	(zTemp0)
.1563	85 2c		sta $2c				sta 	zTemp0
.1565	90 e4		bcc $154b			bcc 	_IVCheckLoop
.1567	e6 2d		inc $2d				inc 	zTemp0+1
.1569	80 e0		bra $154b			bra 	_IVCheckLoop
.156b					_IVFound:
.156b	a0 03		ldy #$03			ldy 	#3 							; get address into YX
.156d	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.156f	aa		tax				tax
.1570	c8		iny				iny
.1571	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.1573	48		pha				pha
.1574	c8		iny				iny
.1575	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.1577	7a		ply				ply
.1578	38		sec				sec
.1579	60		rts				rts
.157a					_IVNotFound:
.157a	a6 2e		ldx $2e				ldx 	zTemp1 						; get variable name back
.157c	a4 2f		ldy $2f				ldy 	zTemp1+1
.157e	18		clc				clc
.157f	60		rts				rts
.1580					FixBranches:
.1580	20 7b 1d	jsr $1d7b			jsr 	OUTPUTRewind 				; back to the start of the *object* code.
.1583					_FBLoop:
.1583	b2 29		lda ($29)			lda 	(objPtr) 					; get the next one.
.1585	c9 d0		cmp #$d0			cmp 	#PCD_CMD_GOTO 				; found GOTO or GOSUB, patch up.
.1587	f0 16		beq $159f			beq 	_FBFixGotoGosub
.1589	c9 d1		cmp #$d1			cmp 	#PCD_CMD_GOSUB
.158b	f0 12		beq $159f			beq 	_FBFixGotoGosub
.158d	c9 d3		cmp #$d3			cmp 	#PCD_CMD_GOTOCMD_NZ 		; patch the conditional GOTOs for Z/NZ TOS.
.158f	f0 0e		beq $159f			beq 	_FBFixGotoGosub
.1591	c9 d2		cmp #$d2			cmp 	#PCD_CMD_GOTOCMD_Z
.1593	f0 0a		beq $159f			beq 	_FBFixGotoGosub
.1595	c9 d4		cmp #$d4			cmp 	#PCD_CMD_VARSPACE
.1597	f0 49		beq $15e2			beq 	_FBFixVarSpace
.1599					_FBNext:
.1599	20 3c 20	jsr $203c			jsr 	MoveObjectForward 			; move forward in object code.
.159c	90 e5		bcc $1583			bcc 	_FBLoop 					; not finished
.159e					_FBExit:
.159e	60		rts				rts
.159f					_FBFixGotoGosub:
.159f	a0 01		ldy #$01			ldy 	#1 							; if page is currently $FF
.15a1	b1 29		lda ($29),y			lda 	(objPtr),y 					; then patch else leave.
.15a3	c9 ff		cmp #$ff			cmp 	#$FF
.15a5	d0 f2		bne $1599			bne 	_FBNext
.15a7	a0 02		ldy #$02			ldy 	#2							; line number in YA
.15a9	b1 29		lda ($29),y			lda 	(objPtr),y
.15ab	48		pha				pha
.15ac	c8		iny				iny
.15ad	b1 29		lda ($29),y			lda 	(objPtr),y
.15af	a8		tay				tay
.15b0	68		pla				pla
.15b1	20 c5 1c	jsr $1cc5			jsr 	STRFindLine			 		; find where it is X:YA
.15b4	90 08		bcc $15be			bcc 	_FBFFound 					; not found, so must be >
.15b6	48		pha				pha
.15b7	b2 29		lda ($29)			lda 	(objPtr) 					; which is a fail if not CMD_GOTOCMD_Z
.15b9	c9 d2		cmp #$d2			cmp 	#PCD_CMD_GOTOCMD_Z
.15bb	d0 15		bne $15d2			bne 	_FBFFail
.15bd	68		pla				pla
.15be					_FBFFound:
.15be	20 19 1d	jsr $1d19			jsr 	STRMakeOffset 				; make it an offset from X:YA
.15c1	5a		phy				phy	 								; patch the GOTO/GOSUB
.15c2	48		pha				pha
.15c3	a0 01		ldy #$01			ldy 	#1
.15c5	8a		txa				txa
.15c6	91 29		sta ($29),y			sta 	(objPtr),y
.15c8	c8		iny				iny
.15c9	68		pla				pla
.15ca	91 29		sta ($29),y			sta 	(objPtr),y
.15cc	c8		iny				iny
.15cd	68		pla				pla
.15ce	91 29		sta ($29),y			sta 	(objPtr),y
.15d0	80 c7		bra $1599			bra 	_FBNext
.15d2					_FBFFail:
.15d2	a0 02		ldy #$02			ldy 	#2
.15d4	b1 29		lda ($29),y			lda 	(objPtr),y
.15d6	8d 00 05	sta $0500			sta 	currentLineNumber
.15d9	c8		iny				iny
.15da	b1 29		lda ($29),y			lda 	(objPtr),y
.15dc	8d 01 05	sta $0501			sta 	currentLineNumber+1
.15df	4c 98 13	jmp $1398		jmp	ErrorV_line
.15e2					_FBFixVarSpace:
.15e2	a0 01		ldy #$01			ldy 	#1
.15e4	ad 13 06	lda $0613			lda 	freeVariableMemory
.15e7	91 29		sta ($29),y			sta 	(objPtr),y
.15e9	c8		iny				iny
.15ea	ad 14 06	lda $0614			lda 	freeVariableMemory+1
.15ed	91 29		sta ($29),y			sta 	(objPtr),y
.15ef	80 a8		bra $1599			bra 	_FBNext
.15f1					CommandFOR:
.15f1	20 e5 1a	jsr $1ae5			jsr 	GetNextNonSpace 			; first letter of index variable, should be.
.15f4	20 fb 1a	jsr $1afb			jsr 	CharIsAlpha 				; if not alpha , error
.15f7	90 59		bcc $1652			bcc 	_CFFail
.15f9	20 7e 1e	jsr $1e7e			jsr 	GetReferenceTerm 			; figure out the reference.
.15fc	48		pha				pha 								; save type
.15fd	29 40		and #$40			and 	#NSSTypeMask 				; check it is numeric
.15ff	c9 00		cmp #$00			cmp 	#NSSIFloat
.1601	d0 4f		bne $1652			bne 	_CFFail
.1603	5a		phy				phy 								; save reference on the stack
.1604	da		phx				phx
.1605	a9 b2		lda #$b2			lda 	#C64_EQUAL 					; check for equal.
.1607	20 94 10	jsr $1094			jsr 	CheckNextA
.160a	20 6a 14	jsr $146a			jsr 	CompileExpressionAt0 		; initial value
.160d	fa		plx				plx 								; get reference back.
.160e	7a		ply				ply
.160f	5a		phy				phy
.1610	da		phx				phx
.1611	38		sec				sec 								; set initial value.
.1612	20 30 1e	jsr $1e30			jsr 	GetSetVariable
.1615	fa		plx				plx
.1616	7a		ply				ply
.1617	68		pla				pla
.1618	29 20		and #$20			and 	#NSSIInt16
.161a	f0 04		beq $1620			beq 	_CFNotInt16
.161c	98		tya				tya
.161d	09 80		ora #$80			ora 	#$80
.161f	a8		tay				tay
.1620					_CFNotInt16:
.1620	8a		txa				txa 								; reference in YA
.1621	20 34 11	jsr $1134			jsr 	PushIntegerYA
.1624	a9 a4		lda #$a4			lda 	#C64_TO
.1626	20 94 10	jsr $1094			jsr 	CheckNextA
.1629	20 6a 14	jsr $146a			jsr 	CompileExpressionAt0 		; terminal value
.162c	29 40		and #$40			and 	#NSSTypeMask 				; check it is numeric
.162e	c9 00		cmp #$00			cmp 	#NSSIFloat
.1630	d0 20		bne $1652			bne 	_CFFail
.1632	20 cc 1a	jsr $1acc			jsr 	LookNextNonSpace 			; followed by STEP
.1635	c9 a9		cmp #$a9			cmp 	#C64_STEP
.1637	d0 0e		bne $1647			bne 	_CFNoStep
.1639	20 da 1a	jsr $1ada			jsr 	GetNext 					; consume it.
.163c	20 6a 14	jsr $146a			jsr 	CompileExpressionAt0 		; terminal value
.163f	29 40		and #$40			and 	#NSSTypeMask 				; check it is numeric
.1641	c9 00		cmp #$00			cmp 	#NSSIFloat
.1643	d0 0d		bne $1652			bne 	_CFFail
.1645	80 05		bra $164c			bra 	_CFParametersDone
.1647					_CFNoStep:
.1647	a9 01		lda #$01			lda 	#1 							; default STEP e.g. 1
.1649	20 47 11	jsr $1147			jsr 	PushIntegerA
.164c					_CFParametersDone:
.164c	a9 95		lda #$95			lda 	#PCD_FOR  					; compile FOR word.
.164e	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1651	60		rts				rts
.1652					_CFFail:
.1652	4c 55 13	jmp $1355		jmp	ErrorV_syntax
.1655					INPUTOpen:
.1655	a9 9a		lda #$9a			lda 	#((EndProgram+2) & $FF)
.1657	85 24		sta $24				sta 	0+srcInputPtr
.1659	a9 26		lda #$26			lda 	#((EndProgram+2) >> 8) & $FF
.165b	85 25		sta $25				sta 	1+srcInputPtr
.165d					INPUTClose:
.165d	60		rts				rts
.165e					INPUTGet:
.165e	b2 24		lda ($24)			lda 	(srcInputPtr)
.1660	e6 24		inc $24				inc 	srcInputPtr
.1662	d0 02		bne $1666			bne 	_IGSkip
.1664	e6 25		inc $25				inc 	srcInputPtr+1
.1666					_IGSkip:
.1666	60		rts				rts
.0024					srcInputPtr:
>0024							.fill 	2
.1667					FNCompile:
.1667	20 e5 1a	jsr $1ae5			jsr 	GetNextNonSpace				; get variable name w/type must be array e.g. DEF FNx(a)
.166a	20 4a 1b	jsr $1b4a			jsr 	ExtractVariableName
.166d	e0 00		cpx #$00			cpx 	#0
.166f	10 32		bpl $16a3			bpl 	_FNError
.1671	8a		txa				txa 								; convert to a function reference - bit 7:0 clear bit 7:1 set
.1672	29 7f		and #$7f			and 	#$7F
.1674	aa		tax				tax
.1675	98		tya				tya
.1676	09 80		ora #$80			ora 	#$80
.1678	a8		tay				tay
.1679	20 24 15	jsr $1524			jsr 	FindVariable				; does it already exist ?
.167c	90 25		bcc $16a3			bcc 	_FNError 					; no.
.167e	20 19 1d	jsr $1d19			jsr 	STRMakeOffset 				; convert to a relative address.
.1681	c9 00		cmp #$00			cmp 	#0 							; fix up.
.1683	d0 01		bne $1686			bne 	_FNNoBorrow
.1685	88		dey				dey
.1686					_FNNoBorrow:
.1686	3a		dec a				dec 	a
.1687	5a		phy				phy 								; save location of routine on stack.
.1688	48		pha				pha
.1689	da		phx				phx
.168a	20 6a 14	jsr $146a			jsr 	CompileExpressionAt0
.168d	20 8e 10	jsr $108e			jsr 	CheckNextRParen
.1690	a9 d1		lda #$d1			lda 	#PCD_CMD_GOSUB
.1692	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1695	68		pla				pla
.1696	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1699	68		pla				pla
.169a	20 80 10	jsr $1080			jsr 	WriteCodeByte
.169d	68		pla				pla
.169e	20 80 10	jsr $1080			jsr 	WriteCodeByte
.16a1	18		clc				clc
.16a2	60		rts				rts
.16a3					_FNError:
.16a3	4c 48 13	jmp $1348		jmp	ErrorV_value
.16a6					CommandTables:
>16a6	07 cb 00 03 a8 1b 06			.byte	$07,$cb,$00,$03,CommandGOAlt & $FF,CommandGOAlt >> 8,$06
>16ad	07 89 00 03 af 1b 06			.byte	$07,$89,$00,$03,CommandGOTO & $FF,CommandGOTO >> 8,$06
>16b4	07 8d 00 03 a2 1b 06			.byte	$07,$8d,$00,$03,CommandGOSUB & $FF,CommandGOSUB >> 8,$06
>16bb	07 88 00 03 2a 1c 06			.byte	$07,$88,$00,$03,CommandLET & $FF,CommandLET >> 8,$06
>16c2	07 85 00 03 0a 1c 06			.byte	$07,$85,$00,$03,CommandINPUT & $FF,CommandINPUT >> 8,$06
>16c9	07 84 00 04 1e 1c 06			.byte	$07,$84,$00,$04,CommandINPUTStream & $FF,CommandINPUTStream >> 8,$06
>16d0	07 99 00 03 ab 1d 06			.byte	$07,$99,$00,$03,CommandPRINT & $FF,CommandPRINT >> 8,$06
>16d7	07 98 00 04 ab 1d 06			.byte	$07,$98,$00,$04,CommandPRINT & $FF,CommandPRINT >> 8,$06
>16de	07 8f 00 03 b6 1e 06			.byte	$07,$8f,$00,$03,CommandREM & $FF,CommandREM >> 8,$06
>16e5	07 81 00 03 f1 15 06			.byte	$07,$81,$00,$03,CommandFOR & $FF,CommandFOR >> 8,$06
>16ec	07 82 00 03 23 1d 06			.byte	$07,$82,$00,$03,CommandNEXT & $FF,CommandNEXT >> 8,$06
>16f3	07 a1 00 03 1b 1b 06			.byte	$07,$a1,$00,$03,CommandGET & $FF,CommandGET >> 8,$06
>16fa	07 83 00 03 ef 11 06			.byte	$07,$83,$00,$03,CommandDATA & $FF,CommandDATA >> 8,$06
>1701	07 87 00 03 f4 1d 06			.byte	$07,$87,$00,$03,CommandREAD & $FF,CommandREAD >> 8,$06
>1708	07 86 00 03 82 12 06			.byte	$07,$86,$00,$03,CommandDIM & $FF,CommandDIM >> 8,$06
>170f	07 96 00 03 0b 12 06			.byte	$07,$96,$00,$03,CommandDEF & $FF,CommandDEF >> 8,$06
>1716	07 8b 00 e3 d2 1b 06			.byte	$07,$8b,$00,$e3,CommandIF & $FF,CommandIF >> 8,$06
>171d	08 92 00 ea e3 82 1f 06			.byte	$08,$92,$00,$ea,$e3,CommandWAIT & $FF,CommandWAIT >> 8,$06
>1725	09 91 00 e1 a9 03 4f 1d			.byte	$09,$91,$00,$e1,169,$03,CommandON & $FF,CommandON >> 8,$06
>172d	06
>172e	07 9e 00 e2 ca 92 06			.byte	$07,$9e,$00,$e2,37578 & $FF,37578 >> 8,$06
>1735	07 97 00 ea e1 ac 06			.byte	$07,$97,$00,$ea,$e1,172,$06
>173c	06 8e 00 10 98 06			.byte	$06,$8e,$00,$10,152,$06
>1742	07 90 00 20 ca 91 06			.byte	$07,$90,$00,$20,37322 & $FF,37322 >> 8,$06
>1749	07 80 00 20 ca 82 06			.byte	$07,$80,$00,$20,33482 & $FF,33482 >> 8,$06
>1750	07 8c 00 20 ca 90 06			.byte	$07,$8c,$00,$20,37066 & $FF,37066 >> 8,$06
>1757	07 9d 00 e3 b1 1f 06			.byte	$07,$9d,$00,$e3,CommandCMD & $FF,CommandCMD >> 8,$06
>175e	0a 9f 00 ea e3 c4 1f 10			.byte	$0a,$9f,$00,$ea,$e3,CommandOPEN & $FF,CommandOPEN >> 8,$10,198,$06
>1766	c6 06
>1768	06 a0 00 e1 c3 06			.byte	$06,$a0,$00,$e1,195,$06
>176e	07 ce 90 20 ca ac 06			.byte	$07,$ce,$90,$20,44234 & $FF,44234 >> 8,$06
>1775	0a ce 92 e3 98 1a 20 ca			.byte	$0a,$ce,$92,$e3,OptionalParameterCompile & $FF,OptionalParameterCompile >> 8,$20,44490 & $FF,44490 >> 8,$06
>177d	ad 06
>177f	0a ce 8d e3 98 1a 20 ca			.byte	$0a,$ce,$8d,$e3,OptionalParameterCompile & $FF,OptionalParameterCompile >> 8,$20,44746 & $FF,44746 >> 8,$06
>1787	ae 06
>1789	06 ce 86 e1 c7 06			.byte	$06,$ce,$86,$e1,199,$06
>178f	08 ce 84 ea ea e1 c8 06			.byte	$08,$ce,$84,$ea,$ea,$e1,200,$06
>1797	07 ce af e2 ca 98 06			.byte	$07,$ce,$af,$e2,39114 & $FF,39114 >> 8,$06
>179e	07 ce 8c e2 ca 8c 06			.byte	$07,$ce,$8c,$e2,36042 & $FF,36042 >> 8,$06
>17a5	09 ce ae ea ea e2 ca 95			.byte	$09,$ce,$ae,$ea,$ea,$e2,38346 & $FF,38346 >> 8,$06
>17ad	06
>17ae	08 ce 87 ea ea e1 99 06			.byte	$08,$ce,$87,$ea,$ea,$e1,153,$06
>17b6	0a ce 88 ea ea ea ea e1			.byte	$0a,$ce,$88,$ea,$ea,$ea,$ea,$e1,154,$06
>17be	9a 06
>17c0	0a ce 8a ea ea ea ea e1			.byte	$0a,$ce,$8a,$ea,$ea,$ea,$ea,$e1,155,$06
>17c8	9b 06
>17ca	0a ce 89 ea ea ea ea e1			.byte	$0a,$ce,$89,$ea,$ea,$ea,$ea,$e1,156,$06
>17d2	9c 06
>17d4	09 ce 8b ea ea ea f1 9d			.byte	$09,$ce,$8b,$ea,$ea,$ea,$f1,157,$06
>17dc	06
>17dd	07 ce 99 20 ca 99 06			.byte	$07,$ce,$99,$20,39370 & $FF,39370 >> 8,$06
>17e4	08 ce 9a ea e2 ca 9a 06			.byte	$08,$ce,$9a,$ea,$e2,39626 & $FF,39626 >> 8,$06
>17ec	08 ce 9b ea e2 ca 9b 06			.byte	$08,$ce,$9b,$ea,$e2,39882 & $FF,39882 >> 8,$06
>17f4	08 ce 9c ea e2 ca 9c 06			.byte	$08,$ce,$9c,$ea,$e2,40138 & $FF,40138 >> 8,$06
>17fc	08 ce 9d ea e2 ca 9d 06			.byte	$08,$ce,$9d,$ea,$e2,40394 & $FF,40394 >> 8,$06
>1804	08 ce 9e ea e2 ca 9e 06			.byte	$08,$ce,$9e,$ea,$e2,40650 & $FF,40650 >> 8,$06
>180c	08 ce 9f ea e2 ca 9f 06			.byte	$08,$ce,$9f,$ea,$e2,40906 & $FF,40906 >> 8,$06
>1814	08 ce a0 ea e2 ca a0 06			.byte	$08,$ce,$a0,$ea,$e2,41162 & $FF,41162 >> 8,$06
>181c	08 ce a1 ea f2 ca a1 06			.byte	$08,$ce,$a1,$ea,$f2,41418 & $FF,41418 >> 8,$06
>1824	08 ce a2 ea f2 ca a2 06			.byte	$08,$ce,$a2,$ea,$f2,41674 & $FF,41674 >> 8,$06
>182c	08 ce a3 ea e2 ca a3 06			.byte	$08,$ce,$a3,$ea,$e2,41930 & $FF,41930 >> 8,$06
>1834	07 ce a4 20 ca a4 06			.byte	$07,$ce,$a4,$20,42186 & $FF,42186 >> 8,$06
>183b	08 ce a5 ea e2 ca a5 06			.byte	$08,$ce,$a5,$ea,$e2,42442 & $FF,42442 >> 8,$06
>1843	08 ce a6 ea e2 ca a6 06			.byte	$08,$ce,$a6,$ea,$e2,42698 & $FF,42698 >> 8,$06
>184b	08 ce a7 ea e2 ca a7 06			.byte	$08,$ce,$a7,$ea,$e2,42954 & $FF,42954 >> 8,$06
>1853	08 ce a8 ea e2 ca a8 06			.byte	$08,$ce,$a8,$ea,$e2,43210 & $FF,43210 >> 8,$06
>185b	08 ce a9 ea e2 ca a9 06			.byte	$08,$ce,$a9,$ea,$e2,43466 & $FF,43466 >> 8,$06
>1863	08 ce aa ea f2 ca aa 06			.byte	$08,$ce,$aa,$ea,$f2,43722 & $FF,43722 >> 8,$06
>186b	08 ce ab ea f2 ca ab 06			.byte	$08,$ce,$ab,$ea,$f2,43978 & $FF,43978 >> 8,$06
>1873	00						.byte 	0
.1874					UnaryTables:
>1874	07 b4 00 8e 91 b6 06			.byte	$07,$b4,$00,$8e,$91,182,$06
>187b	08 b5 00 8e 92 ca 84 06			.byte	$08,$b5,$00,$8e,$92,33994 & $FF,33994 >> 8,$06
>1883	07 b6 00 8e 91 8d 06			.byte	$07,$b6,$00,$8e,$91,141,$06
>188a	07 b7 00 8e 91 c1 06			.byte	$07,$b7,$00,$8e,$91,193,$06
>1891	07 b8 00 8e 91 96 06			.byte	$07,$b8,$00,$8e,$91,150,$06
>1898	07 b9 00 8e 91 ad 06			.byte	$07,$b9,$00,$8e,$91,173,$06
>189f	08 ba 00 8e 92 ca 85 06			.byte	$08,$ba,$00,$8e,$92,34250 & $FF,34250 >> 8,$06
>18a7	07 bb 00 8e 91 b4 06			.byte	$07,$bb,$00,$8e,$91,180,$06
>18ae	08 bc 00 8e 92 ca 86 06			.byte	$08,$bc,$00,$8e,$92,34506 & $FF,34506 >> 8,$06
>18b6	08 bd 00 8e 92 ca 87 06			.byte	$08,$bd,$00,$8e,$92,34762 & $FF,34762 >> 8,$06
>18be	08 be 00 8e 92 ca 88 06			.byte	$08,$be,$00,$8e,$92,35018 & $FF,35018 >> 8,$06
>18c6	08 bf 00 8e 92 ca 89 06			.byte	$08,$bf,$00,$8e,$92,35274 & $FF,35274 >> 8,$06
>18ce	08 c0 00 8e 92 ca 8a 06			.byte	$08,$c0,$00,$8e,$92,35530 & $FF,35530 >> 8,$06
>18d6	08 c1 00 8e 92 ca 8b 06			.byte	$08,$c1,$00,$8e,$92,35786 & $FF,35786 >> 8,$06
>18de	07 c2 00 8e 91 ab 06			.byte	$07,$c2,$00,$8e,$91,171,$06
>18e5	07 c3 00 8f 91 a2 06			.byte	$07,$c3,$00,$8f,$91,162,$06
>18ec	07 c4 00 8e 91 ba 07			.byte	$07,$c4,$00,$8e,$91,186,$07
>18f3	07 c5 00 8f 91 c2 06			.byte	$07,$c5,$00,$8f,$91,194,$06
>18fa	07 c6 00 8f 91 8f 06			.byte	$07,$c6,$00,$8f,$91,143,$06
>1901	07 c7 00 8e 91 93 07			.byte	$07,$c7,$00,$8e,$91,147,$07
>1908	08 c8 00 8f ae 91 bb 07			.byte	$08,$c8,$00,$8f,$ae,$91,187,$07
>1910	08 c9 00 8f ae 91 bc 07			.byte	$08,$c9,$00,$8f,$ae,$91,188,$07
>1918	0b ca 00 8f ae 03 98 1a			.byte	$0b,$ca,$00,$8f,$ae,$03,OptionalParameterCompile & $FF,OptionalParameterCompile >> 8,$91,189,$07
>1920	91 bd 07
>1923	07 a8 00 03 b7 1a 06			.byte	$07,$a8,$00,$03,NotUnaryCompile & $FF,NotUnaryCompile >> 8,$06
>192a	07 a5 00 03 67 16 06			.byte	$07,$a5,$00,$03,FNCompile & $FF,FNCompile >> 8,$06
>1931	07 ce d6 8e 91 91 07			.byte	$07,$ce,$d6,$8e,$91,145,$07
>1938	07 ce d5 8e 91 9e 07			.byte	$07,$ce,$d5,$8e,$91,158,$07
>193f	08 ce d0 8e ae 91 c9 06			.byte	$08,$ce,$d0,$8e,$ae,$91,201,$06
>1947	08 ce d4 8e 92 ca 83 06			.byte	$08,$ce,$d4,$8e,$92,33738 & $FF,33738 >> 8,$06
>194f	07 ce d3 20 ca 8d 06			.byte	$07,$ce,$d3,$20,36298 & $FF,36298 >> 8,$06
>1956	07 ce d1 20 ca 8e 06			.byte	$07,$ce,$d1,$20,36554 & $FF,36554 >> 8,$06
>195d	07 ce d2 20 ca 8f 06			.byte	$07,$ce,$d2,$20,36810 & $FF,36810 >> 8,$06
>1964	09 ce d7 8e ae 92 ca 96			.byte	$09,$ce,$d7,$8e,$ae,$92,38602 & $FF,38602 >> 8,$06
>196c	06
>196d	00						.byte 	0
.196e					GeneratorProcess:
.196e	86 2c		stx $2c				stx 	zTemp0 						; save generation pointer in zTemp0
.1970	84 2d		sty $2d				sty 	zTemp0+1
.1972	85 2e		sta $2e				sta 	zTemp1 						; first match token
.1974	64 2f		stz $2f				stz 	zTemp1+1
.1976	c9 ce		cmp #$ce			cmp 	#$CE 						; check if shift
.1978	d0 05		bne $197f			bne 	_GPNotShifted
.197a	20 da 1a	jsr $1ada			jsr 	GetNext 					; get the shifted token
.197d	85 2f		sta $2f				sta 	zTemp1+1 					; match CE xx
.197f					_GPNotShifted:
.197f					_GPSearch:
.197f	b2 2c		lda ($2c)			lda 	(zTemp0) 					; reached end ?
.1981	18		clc				clc
.1982	f0 2f		beq $19b3			beq 	_GPExit
.1984	a0 01		ldy #$01			ldy 	#1 							; tokens match
.1986	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.1988	c5 2e		cmp $2e				cmp 	zTemp1
.198a	d0 09		bne $1995			bne 	_GPNext
.198c	a5 2f		lda $2f				lda 	zTemp1+1 					; 2nd token ?
.198e	f0 12		beq $19a2			beq 	_GPFound
.1990	c8		iny				iny 								; check match.
.1991	d1 2c		cmp ($2c),y			cmp 	(zTemp0),y
.1993	f0 0d		beq $19a2			beq 	_GPFound
.1995					_GPNext:
.1995	18		clc				clc 								; follow to next
.1996	a5 2c		lda $2c				lda 	zTemp0
.1998	72 2c		adc ($2c)			adc 	(zTemp0)
.199a	85 2c		sta $2c				sta 	zTemp0
.199c	90 e1		bcc $197f			bcc 	_GPSearch
.199e	e6 2d		inc $2d				inc 	zTemp0+1
.19a0	80 dd		bra $197f			bra 	_GPSearch
.19a2					_GPFound:
.19a2	18		clc				clc 								; skip to action bytes
.19a3	a5 2c		lda $2c				lda 	zTemp0 						; <offset> <token lo> <token hi> first
.19a5	69 03		adc #$03			adc 	#3
.19a7	85 2c		sta $2c				sta 	zTemp0
.19a9	90 02		bcc $19ad			bcc 	_GPNoCarry
.19ab	e6 2d		inc $2d				inc 	zTemp0+1
.19ad					_GPNoCarry:
.19ad					_GPLoop:
.19ad	20 b4 19	jsr $19b4			jsr 	GeneratorExecute 			; execute one command
.19b0	90 fb		bcc $19ad			bcc 	_GPLoop 					; go back if not completed.
.19b2	38		sec				sec 								; return with CS.
.19b3					_GPExit:
.19b3	60		rts				rts
.19b4					GeneratorExecute:
.19b4	20 5f 1a	jsr $1a5f			jsr 	_GEFetchZTemp0 				; get next.
.19b7	48		pha				pha 								; split into 2 nibbles
.19b8	4a		lsr a				lsr 	a
.19b9	4a		lsr a				lsr 	a
.19ba	4a		lsr a				lsr		a
.19bb	4a		lsr a				lsr 	a
.19bc	20 c6 19	jsr $19c6			jsr 	_GEExecuteNibble 			; MSB first
.19bf	68		pla				pla
.19c0	b0 03		bcs $19c5			bcs 	_GEHaveCompleted
.19c2	20 c6 19	jsr $19c6			jsr 	_GEExecuteNibble 			; LSB second
.19c5					_GEHaveCompleted:
.19c5	60		rts				rts
.19c6					_GEExecuteNibble:
.19c6	29 0f		and #$0f			and 	#$0F
.19c8	0a		asl a				asl 	a
.19c9	aa		tax				tax
.19ca	7c cd 19	jmp ($19cd,x)			jmp 	(_GEExecuteVectors,x)
.19cd					_GEExecuteVectors:
>19cd	ed 19						.word 	_GEXNop 					; 0  (no operation)
>19cf	f5 19						.word 	_GEXToken1 					; 1  (compile 1 byte token)
>19d1	ef 19						.word 	_GEXToken2 					; 2  (compile 2 byte token)
>19d3	42 1a						.word 	_GEXExecute 				; 3  (run arbitrary code)
>19d5	35 1a						.word 	_GEXChannelExec 			; 4  (run arbitrary code with possible channel redirection)
>19d7	ed 19						.word 	_GEXNop 					; 5
>19d9	fc 19						.word 	_GEXExitNumber 				; 6  exit return ifloat32 type
>19db	00 1a						.word 	_GEXExitString 				; 7  exit return string type
>19dd	04 1a						.word 	_GEXLParam 					; 8  check ( follows
>19df	08 1a						.word 	_GEXRParam 					; 9  check ) follows
>19e1	0c 1a						.word 	_GEXComma					; A  check , follows
>19e3	ed 19						.word 	_GEXNop 					; B
>19e5	ed 19						.word 	_GEXNop 					; C
>19e7	ed 19						.word 	_GEXNop 					; D
>19e9	1c 1a						.word 	_GEXNumber 					; E  compile get any number
>19eb	27 1a						.word 	_GEXString 					; F  compile get any string
.19ed					_GEXNop:
.19ed	18		clc				clc
.19ee	60		rts				rts
.19ef					_GEXToken2:
.19ef	20 5f 1a	jsr $1a5f			jsr 	_GEFetchZTemp0
.19f2	20 80 10	jsr $1080			jsr 	WriteCodeByte
.19f5					_GEXToken1:
.19f5	20 5f 1a	jsr $1a5f			jsr 	_GEFetchZTemp0
.19f8	20 80 10	jsr $1080			jsr 	WriteCodeByte
.19fb	60		rts				rts
.19fc					_GEXExitNumber:
.19fc	a9 00		lda #$00			lda 	#NSSIFloat
.19fe	38		sec				sec
.19ff	60		rts				rts
.1a00					_GEXExitString:
.1a00	a9 40		lda #$40			lda 	#NSSString
.1a02	38		sec				sec
.1a03	60		rts				rts
.1a04					_GEXLParam:
.1a04	a9 28		lda #$28			lda 	#"("
.1a06	80 06		bra $1a0e			bra 	_GEXCheck
.1a08					_GEXRParam:
.1a08	a9 29		lda #$29			lda 	#")"
.1a0a	80 02		bra $1a0e			bra 	_GEXCheck
.1a0c					_GEXComma:
.1a0c	a9 2c		lda #$2c			lda 	#","
.1a0e					_GEXCheck:
.1a0e	85 30		sta $30				sta 	zTemp2 						; save match
.1a10	20 e5 1a	jsr $1ae5			jsr 	GetNextNonSpace 			; get next skipping spaces
.1a13	c5 30		cmp $30				cmp 	zTemp2 						; check matches.
.1a15	d0 02		bne $1a19			bne 	_GEXSyntax
.1a17	18		clc				clc
.1a18	60		rts				rts
.1a19					_GEXSyntax:
.1a19	4c 55 13	jmp $1355		jmp	ErrorV_syntax
.1a1c					_GEXNumber:
.1a1c	20 68 1a	jsr $1a68			jsr 	GEXCompileExpression 		; compile expression
.1a1f	29 40		and #$40			and 	#NSSTypeMask
.1a21	c9 00		cmp #$00			cmp  	#NSSIFloat
.1a23	d0 0d		bne $1a32			bne 	_GEXType
.1a25	18		clc				clc
.1a26	60		rts				rts
.1a27					_GEXString:
.1a27	20 68 1a	jsr $1a68			jsr 	GEXCompileExpression 		; compile expression
.1a2a	29 40		and #$40			and 	#NSSTypeMask
.1a2c	c9 40		cmp #$40			cmp  	#NSSString
.1a2e	d0 02		bne $1a32			bne 	_GEXType
.1a30	18		clc				clc
.1a31	60		rts				rts
.1a32					_GEXType:
.1a32	4c 65 13	jmp $1365		jmp	ErrorV_type
.1a35					_GEXChannelExec:
.1a35	20 78 1a	jsr $1a78			jsr 	ChannelPrefix 				; set up default
.1a38	20 42 1a	jsr $1a42			jsr 	_GEXExecute
.1a3b	08		php				php
.1a3c	20 92 1a	jsr $1a92			jsr 	ChannelPostfix 				; replace default.
.1a3f	28		plp				plp
.1a40	60		rts				rts
>1a41	db						.byte 	$DB 						; causes a break in the emulator
.1a42					_GEXExecute:
.1a42	20 5f 1a	jsr $1a5f			jsr 	_GEFetchZTemp0 				; get vector
.1a45	85 30		sta $30				sta 	zTemp2
.1a47	20 5f 1a	jsr $1a5f			jsr 	_GEFetchZTemp0
.1a4a	85 31		sta $31				sta 	zTemp2+1
.1a4c	a6 2c		ldx $2c				ldx 	zTemp0 						; push generation exec on to stack for reentrancy
.1a4e	da		phx				phx
.1a4f	a6 2d		ldx $2d				ldx 	zTemp0+1
.1a51	da		phx				phx
.1a52	20 5c 1a	jsr $1a5c			jsr 	_GECallZTemp2 				; execute code
.1a55	fa		plx				plx 								; recover generation exec
.1a56	86 2d		stx $2d				stx 	zTemp0+1
.1a58	fa		plx				plx
.1a59	86 2c		stx $2c				stx 	zTemp0
.1a5b	60		rts				rts
.1a5c					_GECallZTemp2:
.1a5c	6c 30 00	jmp ($0030)			jmp 	(zTemp2)
.1a5f					_GEFetchZTemp0:
.1a5f	b2 2c		lda ($2c)			lda 	(zTemp0)
.1a61	e6 2c		inc $2c				inc 	zTemp0
.1a63	d0 02		bne $1a67			bne 	_GEFZ0Skip
.1a65	e6 2d		inc $2d				inc 	zTemp0+1
.1a67					_GEFZ0Skip:
.1a67	60		rts				rts
.1a68					GEXCompileExpression:
.1a68	a6 2c		ldx $2c				ldx 	zTemp0 						; push generation exec on to stack for reentrancy
.1a6a	da		phx				phx
.1a6b	a6 2d		ldx $2d				ldx 	zTemp0+1
.1a6d	da		phx				phx
.1a6e	20 6a 14	jsr $146a			jsr 	CompileExpressionAt0 		; compile expression.
.1a71	fa		plx				plx 								; recover generation exec
.1a72	86 2d		stx $2d				stx 	zTemp0+1
.1a74	fa		plx				plx
.1a75	86 2c		stx $2c				stx 	zTemp0
.1a77	60		rts				rts
.1a78					ChannelPrefix:
.1a78	a9 ae		lda #$ae			lda 	#PCD_GETCHANNEL				; set channel onto stack
.1a7a	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1a7d	20 68 1a	jsr $1a68			jsr 	GEXCompileExpression 		; channel #
.1a80	29 40		and #$40			and 	#NSSTypeMask
.1a82	c9 00		cmp #$00			cmp 	#NSSIFloat
.1a84	d0 09		bne $1a8f			bne 	_CPXType
.1a86	20 8a 10	jsr $108a			jsr 	CheckNextComma 				; check , follows.
.1a89	a9 af		lda #$af			lda 	#PCD_SETCHANNEL				; set channel
.1a8b	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1a8e	60		rts				rts
.1a8f					_CPXType:
.1a8f	4c 65 13	jmp $1365		jmp	ErrorV_type
.1a92					ChannelPostfix:
.1a92	a9 af		lda #$af			lda 	#PCD_SETCHANNEL				; set channel from TOS.
.1a94	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1a97	60		rts				rts
.1a98					OptionalParameterCompile:
.1a98	20 cc 1a	jsr $1acc			jsr 	LookNextNonSpace 			; what follows.
.1a9b	c9 2c		cmp #$2c			cmp 	#","
.1a9d	d0 0e		bne $1aad			bne 	_MidDefault
.1a9f	20 da 1a	jsr $1ada			jsr 	GetNext 					; consume ,
.1aa2	20 6a 14	jsr $146a			jsr 	CompileExpressionAt0
.1aa5	29 40		and #$40			and 	#NSSTypeMask
.1aa7	c9 00		cmp #$00			cmp 	#NSSIFloat
.1aa9	d0 09		bne $1ab4			bne 	MidFailType
.1aab	80 05		bra $1ab2			bra 	_MidComplete
.1aad					_MidDefault:
.1aad	a9 ff		lda #$ff			lda 	#255 						; default of 255
.1aaf	20 47 11	jsr $1147			jsr 	PushIntegerA
.1ab2					_MidComplete:
.1ab2	18		clc				clc
.1ab3	60		rts				rts
.1ab4					MidFailType:
.1ab4	4c 65 13	jmp $1365		jmp	ErrorV_type
.1ab7					NotUnaryCompile:
.1ab7	ad 1f 15	lda $151f			lda 	PrecedenceTable+C64_EQUAL-C64_PLUS
.1aba	20 6c 14	jsr $146c			jsr 	CompileExpressionAtA 		; evaluate at that level
.1abd	29 40		and #$40			and 	#NSSTypeMask 				; check compile returns number.
.1abf	c9 00		cmp #$00			cmp 	#NSSIFloat
.1ac1	d0 f1		bne $1ab4			bne 	MidFailType
.1ac3	a9 a8		lda #$a8			lda 	#PCD_NOT 					; and NOT it.
.1ac5	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1ac8	60		rts				rts
.1ac9					LookNext:
.1ac9	b2 22		lda ($22)			lda 	(srcPtr)
.1acb	60		rts				rts
.1acc					LookNextNonSpace:
.1acc	b2 22		lda ($22)			lda 	(srcPtr)
.1ace	c9 20		cmp #$20			cmp		#' '
.1ad0	f0 03		beq $1ad5			beq 	_LNNSkip
.1ad2	c9 00		cmp #$00			cmp 	#0
.1ad4	60		rts				rts
.1ad5					_LNNSkip:
.1ad5	20 da 1a	jsr $1ada			jsr 	GetNext
.1ad8	80 f2		bra $1acc			bra 	LookNextNonSpace
.1ada					GetNext:
.1ada	b2 22		lda ($22)			lda 	(srcPtr) 					; get next
.1adc	e6 22		inc $22				inc 	srcPtr
.1ade	d0 02		bne $1ae2			bne 	_GNSkip
.1ae0	e6 23		inc $23				inc 	srcPtr+1
.1ae2					_GNSkip:
.1ae2	c9 00		cmp #$00			cmp 	#0
.1ae4	60		rts				rts
.1ae5					GetNextNonSpace:
.1ae5	20 da 1a	jsr $1ada			jsr 	GetNext
.1ae8	c9 20		cmp #$20			cmp 	#' '
.1aea	f0 f9		beq $1ae5			beq 	GetNextNonSpace
.1aec	c9 00		cmp #$00			cmp 	#0
.1aee	60		rts				rts
.1aef					CharIsDigit:
.1aef	c9 30		cmp #$30			cmp 	#"0"
.1af1	90 06		bcc $1af9			bcc 	CCFalse
.1af3	c9 3a		cmp #$3a			cmp 	#"9"+1
.1af5	b0 02		bcs $1af9			bcs 	CCFalse
.1af7					CCTrue:
.1af7	38		sec				sec
.1af8	60		rts				rts
.1af9					CCFalse:
.1af9	18		clc				clc
.1afa	60		rts				rts
.1afb					CharIsAlpha:
.1afb	c9 41		cmp #$41			cmp 	#"A"
.1afd	90 fa		bcc $1af9			bcc 	CCFalse
.1aff	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1b01	b0 f6		bcs $1af9			bcs 	CCFalse
.1b03	80 f2		bra $1af7			bra 	CCTrue
.1b05					ConvertHexStyle:
.1b05	38		sec				sec
.1b06	e9 30		sbc #$30			sbc 	#"0" 						; check in range 0-9 first
.1b08	90 ef		bcc $1af9			bcc 	CCFalse
.1b0a	c9 0a		cmp #$0a			cmp 	#9+1
.1b0c	90 e9		bcc $1af7			bcc 	CCTrue
.1b0e	38		sec				sec 								; shift into hex space A=>0 Z=>25
.1b0f	e9 11		sbc #$11			sbc 	#"A"-"0"
.1b11	90 e6		bcc $1af9			bcc 	CCFalse
.1b13	c9 1a		cmp #$1a			cmp 	#26 						; past Z ?
.1b15	b0 e2		bcs $1af9			bcs 	CCFalse
.1b17	69 0a		adc #$0a			adc 	#10 						; make valid quasi-hex 0-35
.1b19	80 dc		bra $1af7			bra 	CCTrue
.1b1b					CommandGET:
.1b1b	20 cc 1a	jsr $1acc			jsr 	LookNextNonSpace 			; # follows ?
.1b1e	c9 23		cmp #$23			cmp 	#"#"
.1b20	d0 0d		bne $1b2f			bne 	CommandGetBody
.1b22	20 da 1a	jsr $1ada			jsr 	GetNext 					; consume #
.1b25	20 78 1a	jsr $1a78			jsr 	ChannelPrefix 				; do it as GET#
.1b28	20 2f 1b	jsr $1b2f			jsr 	CommandGetBody
.1b2b	20 92 1a	jsr $1a92			jsr 	ChannelPostfix
.1b2e	60		rts				rts
.1b2f					CommandGetBody:
.1b2f	20 e5 1a	jsr $1ae5			jsr 	GetNextNonSpace 			; get the first character
.1b32	20 7e 1e	jsr $1e7e			jsr 	GetReferenceTerm 			; identify variable to assign to
.1b35	48		pha				pha
.1b36	29 40		and #$40			and 	#NSSTypeMask 				; check if it is a string
.1b38	c9 40		cmp #$40			cmp 	#NSSString
.1b3a	d0 0b		bne $1b47			bne 	_CGType
.1b3c	a9 97		lda #$97			lda 	#PCD_GET 					; compile GET
.1b3e	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1b41	38		sec				sec
.1b42	68		pla				pla
.1b43	20 30 1e	jsr $1e30			jsr		GetSetVariable
.1b46	60		rts				rts
.1b47					_CGType:
.1b47	4c 65 13	jmp $1365		jmp	ErrorV_type
.1b4a					ExtractVariableName:
.1b4a	20 fb 1a	jsr $1afb			jsr 	CharIsAlpha
.1b4d	90 50		bcc $1b9f			bcc 	_IVSyntax
.1b4f	29 1f		and #$1f			and 	#31 						; reduce first character to 5 bits
.1b51	85 2e		sta $2e				sta 	zTemp1 						; we'll build it in zTemp1
.1b53	64 2f		stz $2f				stz 	zTemp1+1
.1b55	20 c9 1a	jsr $1ac9			jsr 	LookNext 					; is there a second character ?
.1b58	20 fb 1a	jsr $1afb			jsr 	CharIsAlpha  				; must be alphanumeric
.1b5b	b0 05		bcs $1b62			bcs 	_IVHasSecond
.1b5d	20 ef 1a	jsr $1aef			jsr 	CharIsDigit
.1b60	90 07		bcc $1b69			bcc 	_IVCheckType
.1b62					_IVHasSecond:
.1b62	29 3f		and #$3f			and 	#63 						; 6 bit ASCII.
.1b64	85 2f		sta $2f				sta 	zTemp1+1
.1b66					_IVGetNextCheck:
.1b66	20 da 1a	jsr $1ada			jsr 	GetNext 					; consume it
.1b69					_IVCheckType:
.1b69	20 c9 1a	jsr $1ac9			jsr 	LookNext					; check if string follows.
.1b6c	20 fb 1a	jsr $1afb			jsr 	CharIsAlpha
.1b6f	b0 f5		bcs $1b66			bcs 	_IVGetNextCheck
.1b71	20 ef 1a	jsr $1aef			jsr 	CharIsDigit
.1b74	b0 f0		bcs $1b66			bcs 	_IVGetNextCheck
.1b76	a2 40		ldx #$40			ldx 	#NSSString
.1b78	c9 24		cmp #$24			cmp 	#"$"
.1b7a	f0 06		beq $1b82			beq 	_IVHasType
.1b7c	a2 20		ldx #$20			ldx 	#NSSIInt16 					; check if short int follows e.g. 16 bit
.1b7e	c9 25		cmp #$25			cmp 	#"%"
.1b80	d0 08		bne $1b8a			bne 	_IVCheckArray
.1b82					_IVHasType:
.1b82	8a		txa				txa 								; Or X into zTemp1
.1b83	05 2e		ora $2e				ora 	zTemp1
.1b85	85 2e		sta $2e				sta 	zTemp1
.1b87	20 da 1a	jsr $1ada			jsr 	GetNext 					; consume it
.1b8a					_IVCheckArray:
.1b8a	20 c9 1a	jsr $1ac9			jsr 	LookNext 					; check if array follows
.1b8d	c9 28		cmp #$28			cmp 	#"("
.1b8f	d0 09		bne $1b9a			bne 	_IVNotArray
.1b91	a5 2e		lda $2e				lda 	zTemp1 						; set array bit
.1b93	09 80		ora #$80			ora 	#NSSArray
.1b95	85 2e		sta $2e				sta 	zTemp1
.1b97	20 da 1a	jsr $1ada			jsr 	GetNext 					; consume it
.1b9a					_IVNotArray:
.1b9a	a6 2e		ldx $2e				ldx 	zTemp1
.1b9c	a4 2f		ldy $2f				ldy 	zTemp1+1
.1b9e	60		rts				rts
.1b9f					_IVSyntax:
.1b9f	4c 55 13	jmp $1355		jmp	ErrorV_syntax
.1ba2					CommandGOSUB:
.1ba2	a9 d1		lda #$d1			lda 	#PCD_CMD_GOSUB
.1ba4	20 b5 1b	jsr $1bb5			jsr 	CompileBranchCommand
.1ba7	60		rts				rts
.1ba8					CommandGOAlt:
.1ba8	a9 a4		lda #$a4			lda 	#C64_TO 					; GO TO alternative
.1baa	20 94 10	jsr $1094			jsr 	CheckNextA
.1bad	80 00		bra $1baf			bra 	CommandGOTO
.1baf					CommandGOTO:
.1baf	a9 d0		lda #$d0			lda 	#PCD_CMD_GOTO
.1bb1	20 b5 1b	jsr $1bb5			jsr 	CompileBranchCommand
.1bb4	60		rts				rts
.1bb5					CompileBranchCommand:
.1bb5	20 80 10	jsr $1080			jsr 	WriteCodeByte 				; write the command out.
.1bb8	20 e5 1a	jsr $1ae5			jsr 	GetNextNonSpace
.1bbb	20 86 1d	jsr $1d86			jsr 	ParseConstant 				; get constant into YA
.1bbe	90 0f		bcc $1bcf			bcc 	_CBCSyntax
.1bc0	48		pha				pha
.1bc1	a9 ff		lda #$ff			lda 	#$FF 						; no address yet.
.1bc3	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1bc6	68		pla				pla 								; and compile the actual line number
.1bc7	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1bca	98		tya				tya
.1bcb	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1bce	60		rts				rts
.1bcf					_CBCSyntax:
.1bcf	4c 55 13	jmp $1355		jmp	ErrorV_syntax
.1bd2					CommandIF:
.1bd2	20 cc 1a	jsr $1acc			jsr 	LookNextNonSpace 			; what follows the tests ?
.1bd5	c9 89		cmp #$89			cmp 	#C64_GOTO 					; IF .. GOTO
.1bd7	f0 0f		beq $1be8			beq 	_CIGoto
.1bd9	a9 a7		lda #$a7			lda 	#C64_THEN 					; should be THEN
.1bdb	20 94 10	jsr $1094			jsr 	CheckNextA
.1bde	20 cc 1a	jsr $1acc			jsr 	LookNextNonSpace 			; THEN <number>
.1be1	20 ef 1a	jsr $1aef			jsr 	CharIsDigit
.1be4	b0 05		bcs $1beb			bcs 	_CIGoto2
.1be6	80 09		bra $1bf1			bra 	CompileGotoEOL
.1be8					_CIGoto:
.1be8	20 da 1a	jsr $1ada			jsr 	GetNext
.1beb					_CIGoto2:
.1beb	a9 d3		lda #$d3			lda 	#PCD_CMD_GOTOCMD_NZ
.1bed	20 b5 1b	jsr $1bb5			jsr 	CompileBranchCommand
.1bf0	60		rts				rts
.1bf1					CompileGotoEOL:
.1bf1	a9 d2		lda #$d2			lda 	#PCD_CMD_GOTOCMD_Z
.1bf3	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1bf6	a9 ff		lda #$ff			lda 	#$FF
.1bf8	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1bfb	20 90 1c	jsr $1c90			jsr 	GetLineNumber 				; Get the current line number => YA
.1bfe	1a		inc a				inc 	a 							; and branch to +1
.1bff	d0 01		bne $1c02			bne 	_CGENoCarry
.1c01	c8		iny				iny
.1c02					_CGENoCarry:
.1c02	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1c05	98		tya				tya
.1c06	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1c09	60		rts				rts
.1c0a					CommandINPUT:
.1c0a	20 cc 1a	jsr $1acc			jsr 	LookNextNonSpace 			; check for "
.1c0d	c9 22		cmp #$22			cmp 	#'"'
.1c0f	d0 0d		bne $1c1e			bne 	CommandINPUTStream
.1c11	20 6a 14	jsr $146a			jsr 	CompileExpressionAt0
.1c14	a9 b1		lda #$b1			lda 	#(PCD_PRINTCMD_S) & $FF
.1c16	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1c19	a9 2c		lda #$2c			lda 	#","
.1c1b	20 8a 10	jsr $108a			jsr 	CheckNextComma
.1c1e					CommandINPUTStream:
.1c1e	a9 a1		lda #$a1			lda 	#(PCD_INPUTCMD_START) & $FF
.1c20	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1c23	a2 9f		ldx #$9f			ldx 	#PCD_INPUT 					; do READ with Data from INPUT
.1c25	a0 a0		ldy #$a0			ldy 	#PCD_INPUTDOLLAR
.1c27	4c f8 1d	jmp $1df8			jmp 	CommandReadInputCommon
.1c2a					CommandLET:
.1c2a	20 e5 1a	jsr $1ae5			jsr 	GetNextNonSpace 			; get the first character
.1c2d					CommandLETHaveFirst:
.1c2d	20 7e 1e	jsr $1e7e			jsr 	GetReferenceTerm 			; identify variable to assign to
.1c30	da		phx				phx 								; save target on the stack.
.1c31	5a		phy				phy
.1c32	48		pha				pha
.1c33	a9 b2		lda #$b2			lda 	#C64_EQUAL 					; check next is =
.1c35	20 94 10	jsr $1094			jsr 	CheckNextA
.1c38	20 6a 14	jsr $146a			jsr 	CompileExpressionAt0 		; evaluate the RHS.
.1c3b	85 2c		sta $2c				sta 	zTemp0 						; save type returned
.1c3d	68		pla				pla 								; get type of assignment
.1c3e	48		pha				pha
.1c3f	45 2c		eor $2c				eor 	zTemp0 						; compare using EOR
.1c41	29 40		and #$40			and 	#NSSTypeMask 				; so we can mask type as we only need n/s
.1c43	d0 17		bne $1c5c			bne 	_CLType
.1c45	68		pla				pla 								; restore and compile save code
.1c46	7a		ply				ply
.1c47	fa		plx				plx
.1c48	c0 c0		cpy #$c0			cpy 	#$C0 						; is it TI$ = "xxxxx"
.1c4a	f0 05		beq $1c51			beq 	_CLTIString
.1c4c	38		sec				sec
.1c4d	20 30 1e	jsr $1e30			jsr		GetSetVariable
.1c50	60		rts				rts
.1c51					_CLTIString:
.1c51	a9 ca		lda #$ca			lda 	#(PCD_TIDOLLARCMD_WRITE) >> 8
.1c53	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1c56	a9 93		lda #$93			lda 	#(PCD_TIDOLLARCMD_WRITE) & $FF
.1c58	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1c5b	60		rts				rts
.1c5c					_CLType:
.1c5c	4c 65 13	jmp $1365		jmp	ErrorV_type
.1c5f					ReadNextLine:
.1c5f	20 5e 16	jsr $165e			jsr 	INPUTGet 					; check offset is not zero.
.1c62	85 2c		sta $2c				sta 	zTemp0
.1c64	20 5e 16	jsr $165e			jsr 	INPUTGet
.1c67	05 2c		ora $2c				ora 	zTemp0
.1c69	d0 02		bne $1c6d			bne 	_RNLBody
.1c6b	18		clc				clc
.1c6c	60		rts				rts						; end of file.
.1c6d					_RNLBody:
.1c6d	20 5e 16	jsr $165e			jsr 	INPUTGet 					; read and save line number
.1c70	8d 00 05	sta $0500			sta 	currentLineNumber
.1c73	20 5e 16	jsr $165e			jsr 	INPUTGet
.1c76	8d 01 05	sta $0501			sta 	currentLineNumber+1
.1c79	a2 00		ldx #$00			ldx 	#0 							; read line into buffer
.1c7b					_RNLRead:
.1c7b	20 5e 16	jsr $165e			jsr 	INPUTGet
.1c7e	9d 00 04	sta $0400,x			sta 	sourceBuffer,x
.1c81	e8		inx				inx
.1c82	c9 00		cmp #$00			cmp 	#0
.1c84	d0 f5		bne $1c7b			bne 	_RNLRead
.1c86	a9 00		lda #$00			lda 	#((sourceBuffer) & $FF)
.1c88	85 22		sta $22				sta 	0+srcPtr
.1c8a	a9 04		lda #$04			lda 	#((sourceBuffer) >> 8) & $FF
.1c8c	85 23		sta $23				sta 	1+srcPtr
.1c8e	38		sec				sec
.1c8f	60		rts				rts
.1c90					GetLineNumber:
.1c90	ac 01 05	ldy $0501			ldy 	currentLineNumber+1
.1c93	ad 00 05	lda $0500			lda 	currentLineNumber
.1c96	60		rts				rts
.1c97					STRMarkLine:
.1c97	48		pha				pha
.1c98	38		sec				sec 								; allocate 5 bytes (line #, page+address)
.1c99	ad 0f 06	lda $060f			lda 	lineNumberTable 			; and copy to zTemp0
.1c9c	e9 05		sbc #$05			sbc 	#5
.1c9e	8d 0f 06	sta $060f			sta 	lineNumberTable
.1ca1	85 2c		sta $2c				sta 	zTemp0
.1ca3	ad 10 06	lda $0610			lda 	lineNumberTable+1
.1ca6	e9 00		sbc #$00			sbc 	#0
.1ca8	8d 10 06	sta $0610			sta 	lineNumberTable+1
.1cab	85 2d		sta $2d				sta 	zTemp0+1
.1cad	68		pla				pla
.1cae	92 2c		sta ($2c)			sta 	(zTemp0) 					; save it in +0,+1
.1cb0	98		tya				tya
.1cb1	a0 01		ldy #$01			ldy 	#1
.1cb3	91 2c		sta ($2c),y			sta 	(zTemp0),y
.1cb5	a5 2b		lda $2b				lda 	objPage 					; and page# in +2
.1cb7	c8		iny				iny
.1cb8	91 2c		sta ($2c),y			sta 	(zTemp0),y
.1cba	a5 29		lda $29				lda 	objPtr 						; save current address in +3,+4
.1cbc	c8		iny				iny
.1cbd	91 2c		sta ($2c),y			sta 	(zTemp0),y
.1cbf	a5 2a		lda $2a				lda 	objPtr+1
.1cc1	c8		iny				iny
.1cc2	91 2c		sta ($2c),y			sta 	(zTemp0),y
.1cc4	60		rts				rts
.1cc5					STRFindLine:
.1cc5	85 2c		sta $2c				sta 	zTemp0 						; zTemp0 line number being searched
.1cc7	84 2d		sty $2d				sty 	zTemp0+1
.1cc9	ad 08 06	lda $0608			lda 	compilerEndHigh 			; work backwards through table
.1ccc	85 2f		sta $2f				sta 	zTemp1+1
.1cce	64 2e		stz $2e				stz 	zTemp1
.1cd0					_STRSearch:
.1cd0	20 0b 1d	jsr $1d0b			jsr 	_STRPrevLine 				; look at previous record.
.1cd3	a0 01		ldy #$01			ldy 	#1
.1cd5	b2 2e		lda ($2e)			lda 	(zTemp1) 					; check table line # >= target
.1cd7	c5 2c		cmp $2c				cmp 	zTemp0
.1cd9	b1 2e		lda ($2e),y			lda 	(zTemp1),y
.1cdb	e5 2d		sbc $2d				sbc 	zTemp0+1
.1cdd	b0 0b		bcs $1cea			bcs 	_STRFound 					; >=
.1cdf					_STRNext:
.1cdf	a0 01		ldy #$01			ldy 	#1 							; should not be required !
.1ce1	b1 2e		lda ($2e),y			lda 	(zTemp1),y
.1ce3	c9 ff		cmp #$ff			cmp 	#$FF
.1ce5	d0 e9		bne $1cd0			bne 	_STRSearch
.1ce7	4c af 13	jmp $13af		jmp	ErrorV_internal
.1cea					_STRFound:
.1cea	b2 2e		lda ($2e)			lda 	(zTemp1) 					; set A = 0 if the same, 0 if different.
.1cec	45 2c		eor $2c				eor 	zTemp0
.1cee	d0 06		bne $1cf6			bne 	_STRDifferent
.1cf0	b2 2e		lda ($2e)			lda 	(zTemp1)
.1cf2	45 2c		eor $2c				eor 	zTemp0
.1cf4	f0 02		beq $1cf8			beq 	_STROut 					; if zero, exit with A = 0 and correct line.
.1cf6					_STRDifferent:
.1cf6	a9 ff		lda #$ff			lda 	#$FF
.1cf8					_STROut:
.1cf8	18		clc				clc  								; set carry if different, e.g. > rather than >=
.1cf9	69 ff		adc #$ff			adc 	#255
.1cfb	08		php				php
.1cfc	c8		iny				iny 								; page into X
.1cfd	b1 2e		lda ($2e),y			lda 	(zTemp1),y
.1cff	aa		tax				tax
.1d00	c8		iny				iny 								; address into YA
.1d01	b1 2e		lda ($2e),y			lda 	(zTemp1),y
.1d03	48		pha				pha
.1d04	c8		iny				iny
.1d05	b1 2e		lda ($2e),y			lda 	(zTemp1),y
.1d07	a8		tay				tay
.1d08	68		pla				pla
.1d09	28		plp				plp
.1d0a	60		rts				rts
.1d0b					_STRPrevLine:
.1d0b	38		sec				sec 								; move backwards one entry.
.1d0c	a5 2e		lda $2e				lda 	zTemp1
.1d0e	e9 05		sbc #$05			sbc 	#5
.1d10	85 2e		sta $2e				sta 	zTemp1
.1d12	a5 2f		lda $2f				lda 	zTemp1+1
.1d14	e9 00		sbc #$00			sbc 	#0
.1d16	85 2f		sta $2f				sta 	zTemp1+1
.1d18	60		rts				rts
.1d19					STRMakeOffset:
.1d19	18		clc				clc 								; borrow 1
.1d1a	e5 29		sbc $29				sbc 	objPtr
.1d1c	48		pha				pha
.1d1d	98		tya				tya
.1d1e	e5 2a		sbc $2a				sbc 	objPtr+1
.1d20	a8		tay				tay
.1d21	68		pla				pla
.1d22	60		rts				rts
.1d23					CommandNEXT:
.1d23	20 cc 1a	jsr $1acc			jsr 	LookNextNonSpace 			; first letter of index variable, should be.
.1d26	20 fb 1a	jsr $1afb			jsr 	CharIsAlpha 				; if not alpha , error
.1d29	90 0c		bcc $1d37			bcc 	_CNNoReferenceGiven
.1d2b	20 da 1a	jsr $1ada			jsr 	GetNext
.1d2e	20 7e 1e	jsr $1e7e			jsr 	GetReferenceTerm 			; figure out the reference.
.1d31	8a		txa				txa 								; reference in YA
.1d32	20 34 11	jsr $1134			jsr 	PushIntegerYA 				; write it out.
.1d35	80 06		bra $1d3d			bra 	_CNParametersDone
.1d37					_CNNoReferenceGiven:
.1d37	a9 ff		lda #$ff			lda 	#255 						; write out -1 no
.1d39	a8		tay				tay
.1d3a	20 34 11	jsr $1134			jsr 	PushIntegerYA 				; write it out.
.1d3d					_CNParametersDone:
.1d3d	a9 a7		lda #$a7			lda 	#PCD_NEXT  					; compile FOR word.
.1d3f	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1d42	20 cc 1a	jsr $1acc			jsr 	LookNextNonSpace 			; look for ,
.1d45	c9 2c		cmp #$2c			cmp 	#","
.1d47	d0 05		bne $1d4e			bne 	_CNExit
.1d49	20 da 1a	jsr $1ada			jsr 	GetNext 					; consume ,
.1d4c	80 d5		bra $1d23			bra 	CommandNEXT 				; and go round.
.1d4e					_CNExit:
.1d4e	60		rts				rts
.1d4f					CommandON:
.1d4f	20 e5 1a	jsr $1ae5			jsr 	GetNextNonSpace 			; GOTO / GOSUB must follow
.1d52	48		pha				pha 								; save on stack
.1d53	a2 d0		ldx #$d0			ldx 	#PCD_CMD_GOTO
.1d55	c9 89		cmp #$89			cmp 	#C64_GOTO 					; must be GOTO/GOSUB
.1d57	f0 09		beq $1d62			beq 	_COCreateLoop
.1d59	a2 d1		ldx #$d1			ldx 	#PCD_CMD_GOSUB
.1d5b	c9 8d		cmp #$8d			cmp 	#C64_GOSUB
.1d5d	f0 03		beq $1d62			beq 	_COCreateLoop
.1d5f	4c 55 13	jmp $1355		jmp	ErrorV_syntax
.1d62					_COCreateLoop:
.1d62	8a		txa				txa 								; compile a goto/gosub somewhere
.1d63	da		phx				phx
.1d64	20 b5 1b	jsr $1bb5			jsr 	CompileBranchCommand
.1d67	fa		plx				plx
.1d68	20 cc 1a	jsr $1acc			jsr 	LookNextNonSpace			; ',' follows
.1d6b	c9 2c		cmp #$2c			cmp 	#","
.1d6d	d0 0a		bne $1d79			bne 	_COComplete 				; if so, more line numbers
.1d6f	a9 aa		lda #$aa			lda 	#PCD_MOREON 				; ON extends.
.1d71	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1d74	20 da 1a	jsr $1ada			jsr 	GetNext
.1d77	80 e9		bra $1d62			bra 	_COCreateLoop
.1d79					_COComplete:
.1d79	68		pla				pla 								; throw GOTO/GOSUB
.1d7a	60		rts				rts
.1d7b					OUTPUTOpen:
.1d7b					OUTPUTRewind:
.1d7b	64 2b		stz $2b				stz 	objPage
.1d7d	a9 00		lda #$00			lda 	#((PCodeStart) & $FF)
.1d7f	85 29		sta $29				sta 	0+objPtr
.1d81	a9 40		lda #$40			lda 	#((PCodeStart) >> 8) & $FF
.1d83	85 2a		sta $2a				sta 	1+objPtr
.1d85	60		rts				rts
.1d86					ParseConstant:
.1d86	a2 00		ldx #$00			ldx 	#0
.1d88	20 4d 24	jsr $244d			jsr 	FloatEncodeStart 			; send first
.1d8b					_ParseLoop:
.1d8b	20 c9 1a	jsr $1ac9			jsr 	LookNext 					; send subsequent
.1d8e	20 50 24	jsr $2450			jsr 	FloatEncodeContinue
.1d91	90 05		bcc $1d98			bcc 	_ParseDone
.1d93	20 da 1a	jsr $1ada			jsr 	GetNext 					; consume it
.1d96	80 f3		bra $1d8b			bra 	_ParseLoop
.1d98					_ParseDone:
.1d98	b5 32		lda $32,x			lda 	NSStatus,x 					; shouldn't be -ve ....
.1d9a	29 80		and #$80			and 	#$80
.1d9c	15 6e		ora $6e,x			ora 	NSExponent,x 				; 16 bit int check
.1d9e	15 56		ora $56,x			ora 	NSMantissa2,x
.1da0	15 62		ora $62,x			ora 	NSMantissa3,x
.1da2	18		clc				clc
.1da3	d0 05		bne $1daa			bne 	_ParseExit 					; exit with CC if need float to compile
.1da5	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; read into YA.
.1da7	b4 4a		ldy $4a,x			ldy		NSMantissa1,x
.1da9	38		sec				sec
.1daa					_ParseExit:
.1daa	60		rts				rts
.1dab					CommandPRINT:
.1dab	20 cc 1a	jsr $1acc			jsr 	LookNextNonSpace			; what follows ?
.1dae	c9 3b		cmp #$3b			cmp 	#";" 						; semicolon, check end of command
.1db0	f0 1f		beq $1dd1			beq 	_CPCheckEnd
.1db2	c9 2c		cmp #$2c			cmp 	#"," 						; , TAB and check end of command
.1db4	f0 16		beq $1dcc			beq 	_CPTabCheckEnd
.1db6	20 e8 1d	jsr $1de8			jsr 	_CPAtEnd 					; check for : and EOL
.1db9	b0 22		bcs $1ddd			bcs 	_CPExitCR 					; exit with CR
.1dbb	20 6a 14	jsr $146a			jsr 	CompileExpressionAt0 		; so it is something to print
.1dbe	a2 b1		ldx #$b1			ldx 	#PCD_PRINTCMD_S
.1dc0	29 40		and #$40			and 	#NSSString 					; if string
.1dc2	d0 02		bne $1dc6			bne 	_CPOut
.1dc4	a2 b0		ldx #$b0			ldx 	#PCD_PRINTCMD_N
.1dc6					_CPOut:
.1dc6	8a		txa				txa 								; print that thing
.1dc7	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1dca	80 df		bra $1dab			bra 	CommandPRINT 				; and loop round/
.1dcc					_CPTabCheckEnd:
.1dcc	a9 b7		lda #$b7			lda 	#PCD_PRINTCMD_TAB 			; , next tab stop
.1dce	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1dd1					_CPCheckEnd:
.1dd1	20 da 1a	jsr $1ada			jsr 	GetNext 					; consume it.
.1dd4	20 cc 1a	jsr $1acc			jsr 	LookNextNonSpace 			; what follows ?
.1dd7	20 e8 1d	jsr $1de8			jsr 	_CPAtEnd 					; reached end
.1dda	90 cf		bcc $1dab			bcc 	CommandPRINT 				; no, loop back
.1ddc	60		rts				rts
.1ddd					_CPExitCR:
.1ddd	a9 0d		lda #$0d			lda 	#13 						; code to print CR
.1ddf	20 47 11	jsr $1147			jsr 	PushIntegerA
.1de2	a9 92		lda #$92			lda 	#PCD_PRINTCMD_CHR
.1de4	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1de7	60		rts				rts
.1de8					_CPAtEnd:
.1de8	c9 00		cmp #$00			cmp 	#0
.1dea	f0 06		beq $1df2			beq 	_CPIsEnd
.1dec	c9 3a		cmp #$3a			cmp 	#":"
.1dee	f0 02		beq $1df2			beq 	_CPIsEnd
.1df0	18		clc				clc
.1df1	60		rts				rts
.1df2					_CPIsEnd:
.1df2	38		sec				sec
.1df3	60		rts				rts
.1df4					CommandREAD:
.1df4	a2 b2		ldx #$b2			ldx 	#PCD_READ
.1df6	a0 b3		ldy #$b3			ldy 	#PCD_READDOLLAR
.1df8					CommandReadInputCommon:
.1df8	8e 0d 06	stx $060d			stx 	numberPCode
.1dfb	8c 0e 06	sty $060e			sty 	stringPCode
.1dfe					_CRLoop:
.1dfe	20 e5 1a	jsr $1ae5			jsr 	GetNextNonSpace 			; first char of identifier
.1e01	20 fb 1a	jsr $1afb			jsr 	CharIsAlpha 				; check A-Z
.1e04	90 27		bcc $1e2d			bcc 	_CRSyntax
.1e06	20 7e 1e	jsr $1e7e			jsr 	GetReferenceTerm 			; get the variable.
.1e09	48		pha				pha 								; save type.
.1e0a	29 40		and #$40			and 	#NSSTypeMask 				; is it a string ?
.1e0c	c9 40		cmp #$40			cmp 	#NSSString
.1e0e	f0 05		beq $1e15			beq 	_CRString
.1e10	ad 0d 06	lda $060d			lda 	numberPCode 				; output read/input
.1e13	80 03		bra $1e18			bra 	_CRHaveType
.1e15					_CRString:
.1e15	ad 0e 06	lda $060e			lda 	stringPCode					; output read$/input$
.1e18					_CRHaveType:
.1e18	20 80 10	jsr $1080			jsr 	WriteCodeByte 				; so we have one typed data item.
.1e1b	68		pla				pla 								; restore type
.1e1c	38		sec				sec  								; write update code.
.1e1d	20 30 1e	jsr $1e30			jsr 	GetSetVariable
.1e20	20 cc 1a	jsr $1acc			jsr 	LookNextNonSpace 			; , follows ?
.1e23	c9 2c		cmp #$2c			cmp 	#","
.1e25	d0 05		bne $1e2c			bne 	_CRExit 					; if not, end of READ.
.1e27	20 da 1a	jsr $1ada			jsr 	GetNext 					; consume comma
.1e2a	80 d2		bra $1dfe			bra 	_CRLoop 					; keep going
.1e2c					_CRExit:
.1e2c	60		rts				rts
.1e2d					_CRSyntax:
.1e2d	4c 55 13	jmp $1355		jmp	ErrorV_syntax
.060d					numberPCode:
>060d							.fill 	1
.060e					stringPCode:
>060e							.fill 	1
.1e30					GetSetVariable:
.1e30	08		php				php 								; save direction on stack
.1e31	c0 00		cpy #$00			cpy 	#$00
.1e33	30 21		bmi $1e56			bmi 	_GSVReadWriteSpecial
.1e35	c9 00		cmp #$00			cmp 	#$00
.1e37	30 33		bmi $1e6c			bmi 	_GSVArray
.1e39	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16 		; get type bits
.1e3b	4a		lsr a				lsr 	a 							; divide by 2
.1e3c	09 40		ora #$40			ora 	#64 						; and set bit 6.
.1e3e	28		plp				plp
.1e3f	90 02		bcc $1e43			bcc 	_GSVNotWrite
.1e41	09 08		ora #$08			ora 	#8  						; set bit 3 if it is write.
.1e43					_GSVNotWrite:
.1e43	85 2c		sta $2c				sta 	zTemp0
.1e45	98		tya				tya 	 							; shift X/Y right as the address stored is halved
.1e46	4a		lsr a				lsr 	a
.1e47	a8		tay				tay
.1e48	8a		txa				txa
.1e49	6a		ror a				ror 	a
.1e4a	aa		tax				tax
.1e4b	98		tya				tya 								; lower 3 bits of YX are ORed into the opcode
.1e4c	05 2c		ora $2c				ora 	zTemp0 						; which is the first byte of the opcode
.1e4e	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1e51	8a		txa				txa 								; and the lower 8 bits of YX are the second byte
.1e52	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1e55	60		rts				rts
.1e56					_GSVReadWriteSpecial:
.1e56	28		plp				plp
.1e57	b0 10		bcs $1e69			bcs 	_GSVSyntax
.1e59	c0 c0		cpy #$c0			cpy 	#$C0 						; TI$ ?
.1e5b	f0 06		beq $1e63			beq 	_GSVRWString
.1e5d	a9 bf		lda #$bf			lda 	#(PCD_TI) & $FF
.1e5f	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1e62	60		rts				rts
.1e63					_GSVRWString:
.1e63	a9 c0		lda #$c0			lda 	#(PCD_TIDOLLAR) & $FF
.1e65	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1e68	60		rts				rts
.1e69					_GSVSyntax:
.1e69	4c 55 13	jmp $1355		jmp	ErrorV_syntax
.1e6c					_GSVArray:
.1e6c	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16 		; mask out 2 bits of type data
.1e6e	4a		lsr a				lsr 	a		 					; shift from 5,6 to 0,1
.1e6f	4a		lsr a				lsr 	a
.1e70	4a		lsr a				lsr 	a
.1e71	4a		lsr a				lsr 	a
.1e72	4a		lsr a				lsr 	a
.1e73	28		plp				plp 								; if writing array then set bit 2.
.1e74	90 02		bcc $1e78			bcc 	_GSVANotWrite
.1e76	09 04		ora #$04			ora 	#4
.1e78					_GSVANotWrite:
.1e78	09 78		ora #$78			ora 	#$78 						; make a valid opcode.
.1e7a	20 80 10	jsr $1080			jsr 	WriteCodeByte 				; and write it out
.1e7d	60		rts				rts
.1e7e					GetReferenceTerm:
.1e7e	20 4a 1b	jsr $1b4a			jsr 	ExtractVariableName 		; get name & type info
.1e81	e0 00		cpx #$00			cpx 	#0 							; check for array handler
.1e83	30 10		bmi $1e95			bmi 	_GRTArray
.1e85	da		phx				phx 								; save type on stack
.1e86	20 24 15	jsr $1524			jsr 	FindVariable 				; find it
.1e89	b0 06		bcs $1e91			bcs 	_GRTNoCreate 				; create if required.
.1e8b	20 79 11	jsr $1179			jsr 	CreateVariableRecord 		; create a variable.
.1e8e	20 d3 11	jsr $11d3			jsr 	AllocateBytesForType 		; allocate memory for it
.1e91					_GRTNoCreate:
.1e91	68		pla				pla 								; get type back, strip out type information.
.1e92	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16
.1e94	60		rts				rts
.1e95					_GRTArray:
.1e95	da		phx				phx 								; save type information
.1e96	20 24 15	jsr $1524			jsr 	FindVariable 				; read its data, the base address in YX
.1e99	90 18		bcc $1eb3			bcc 	_GRTUndeclared 				; undeclared array.
.1e9b	da		phx				phx 								; save base address
.1e9c	5a		phy				phy
.1e9d	20 ca 12	jsr $12ca			jsr 	OutputIndexGroup 			; create an index group and generate them
.1ea0	7a		ply				ply 								; get the array base address into YX
.1ea1	fa		plx				plx
.1ea2	a9 20		lda #$20			lda 	#NSSIFloat+NSSIInt16 		; pretend it is an int16 reference.
.1ea4	18		clc				clc
.1ea5	20 30 1e	jsr $1e30			jsr 	GetSetVariable 				; load the address of the array structure.
.1ea8	a9 8e		lda #$8e			lda 	#(PCD_ARRAY) & $FF
.1eaa	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1ead	68		pla				pla 								; and the type data into A
.1eae	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16
.1eb0	09 80		ora #$80			ora 	#$80 						; with the array flag set.
.1eb2	60		rts				rts
.1eb3					_GRTUndeclared:
.1eb3	4c 0c 14	jmp $140c		jmp	ErrorV_undeclared
.1eb6					CommandREM:
.1eb6	20 c9 1a	jsr $1ac9			jsr 	LookNext
.1eb9	f0 05		beq $1ec0			beq 	_CRExit
.1ebb	20 da 1a	jsr $1ada			jsr 	GetNext
.1ebe	80 f6		bra $1eb6			bra 	CommandREM
.1ec0					_CRExit:
.1ec0	60		rts				rts
.1ec1					STRReset:
.1ec1	ad 07 06	lda $0607			lda	 	compilerStartHigh 			; set up the two table pointers
.1ec4	8d 12 06	sta $0612			sta 	variableListEnd+1
.1ec7	9c 11 06	stz $0611			stz 	variableListEnd
.1eca	ad 08 06	lda $0608			lda 	compilerEndHigh
.1ecd	8d 10 06	sta $0610			sta 	lineNumberTable+1
.1ed0	9c 0f 06	stz $060f			stz 	lineNumberTable
.1ed3	ad 11 06	lda $0611			lda 	variableListEnd
.1ed6	85 2d		sta $2d				sta 	zTemp0+1
.1ed8	64 2c		stz $2c				stz 	zTemp0
.1eda	a9 00		lda #$00			lda 	#0
.1edc	92 2c		sta ($2c)			sta 	(zTemp0)
.1ede	a9 00		lda #$00			lda 	#((0) & $FF)
.1ee0	8d 13 06	sta $0613			sta 	0+freeVariableMemory
.1ee3	a9 00		lda #$00			lda 	#((0) >> 8) & $FF
.1ee5	8d 14 06	sta $0614			sta 	1+freeVariableMemory
.1ee8	60		rts				rts
.060f					lineNumberTable:
>060f							.fill 	2
.0611					variableListEnd:
>0611							.fill 	2
.0613					freeVariableMemory:
>0613							.fill 	2
.1ee9					CompileTerm:
.1ee9	20 e5 1a	jsr $1ae5			jsr 	GetNextNonSpace 			; get first non space character.
.1eec	30 72		bmi $1f60			bmi 	_CTUnaryFunctions
.1eee	20 ef 1a	jsr $1aef			jsr 	CharIsDigit 				; found a number
.1ef1	b0 3a		bcs $1f2d			bcs 	_CTDigit
.1ef3	c9 2e		cmp #$2e			cmp 	#"."
.1ef5	f0 36		beq $1f2d			beq 	_CTDigit
.1ef7	c9 22		cmp #$22			cmp 	#'"' 						; found a string ?
.1ef9	f0 43		beq $1f3e			beq 	_CTString
.1efb	c9 25		cmp #$25			cmp 	#"%"						; binary or hexadecimal ?
.1efd	f0 28		beq $1f27			beq 	_CTOtherBase
.1eff	c9 24		cmp #$24			cmp 	#"$"
.1f01	f0 24		beq $1f27			beq 	_CTOtherBase
.1f03	c9 28		cmp #$28			cmp 	#"(" 						; check parenthesis
.1f05	f0 17		beq $1f1e			beq 	_CTBrackets
.1f07	c9 41		cmp #$41			cmp 	#"A" 						; check variable/array ?
.1f09	90 10		bcc $1f1b			bcc 	_CTSyntax
.1f0b	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1f0d	b0 0c		bcs $1f1b			bcs 	_CTSyntax
.1f0f	20 7e 1e	jsr $1e7e			jsr 	GetReferenceTerm 			; figure out what it is.
.1f12	48		pha				pha 								; save type on stack
.1f13	18		clc				clc 								; read it
.1f14	20 30 1e	jsr $1e30			jsr 	GetSetVariable
.1f17	68		pla				pla
.1f18	29 40		and #$40			and 	#NSSTypeMask 				; reduce to basic type
.1f1a	60		rts				rts
.1f1b					_CTSyntax:
.1f1b	4c 55 13	jmp $1355		jmp	ErrorV_syntax
.1f1e					_CTBrackets:
.1f1e	20 6a 14	jsr $146a			jsr 	CompileExpressionAt0
.1f21	48		pha				pha
.1f22	20 8e 10	jsr $108e			jsr 	CheckNextRParen
.1f25	68		pla				pla
.1f26	60		rts				rts
.1f27					_CTOtherBase:
.1f27	20 0e 10	jsr $100e			jsr 	InlineNonDecimal 			; non decimal constant handler
.1f2a	a9 00		lda #$00			lda 	#NSSIFloat					; return a iFloat32 integer
.1f2c	60		rts				rts
.1f2d					_CTDigit:
.1f2d	20 86 1d	jsr $1d86			jsr 	ParseConstant 				; parse out an number, first is in A already.
.1f30	90 06		bcc $1f38			bcc	 	_CTFloat 					; have a float or long int.
.1f32	20 34 11	jsr $1134			jsr 	PushIntegerYA 				; code to push on stack
.1f35	a9 00		lda #$00			lda 	#NSSIFloat					; return a iFloat32 integer
.1f37	60		rts				rts
.1f38					_CTFloat:
.1f38	20 56 11	jsr $1156			jsr 	PushFloat  					; code to push float
.1f3b	a9 00		lda #$00			lda 	#NSSIFloat 					; return a iFloat32
.1f3d	60		rts				rts
.1f3e					_CTString:
.1f3e	20 59 10	jsr $1059			jsr 	BufferClear 				; copy it to the buffer
.1f41					_CTStringLoop:
.1f41	20 c9 1a	jsr $1ac9			jsr 	LookNext 					; reached EOL/EOS
.1f44	f0 d5		beq $1f1b			beq 	_CTSyntax
.1f46	c9 22		cmp #$22			cmp 	#'"'
.1f48	f0 08		beq $1f52			beq 	_CTStringDone
.1f4a	20 5d 10	jsr $105d			jsr 	BufferWrite 				; write and consume
.1f4d	20 da 1a	jsr $1ada			jsr 	GetNext
.1f50	80 ef		bra $1f41			bra 	_CTStringLoop
.1f52					_CTStringDone:
.1f52	20 da 1a	jsr $1ada			jsr 	GetNext 					; consume closing quote.
.1f55	a9 ce		lda #$ce			lda 	#PCD_CMD_STRING 			; output command and buffer
.1f57	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1f5a	20 69 10	jsr $1069			jsr 	BufferOutput
.1f5d	a9 40		lda #$40			lda 	#NSSString 					; string type
.1f5f	60		rts				rts
.1f60					_CTUnaryFunctions:
.1f60	c9 ab		cmp #$ab			cmp 	#C64_MINUS 					; negation of term.
.1f62	f0 0a		beq $1f6e			beq 	_CTNegation
.1f64	a2 74		ldx #$74			ldx 	#UnaryTables & $FF 			; check vs unary tables.
.1f66	a0 18		ldy #$18			ldy 	#UnaryTables >> 8
.1f68	20 6e 19	jsr $196e			jsr 	GeneratorProcess
.1f6b	90 ae		bcc $1f1b			bcc		_CTSyntax
.1f6d	60		rts				rts
.1f6e					_CTNegation:
.1f6e	20 e9 1e	jsr $1ee9			jsr 	CompileTerm 				; compile a term.
.1f71	48		pha				pha
.1f72	29 40		and #$40			and 	#NSSTypeMask 				; if not an ifloat32 of some sort.
.1f74	c9 00		cmp #$00			cmp 	#NSSIFloat
.1f76	d0 07		bne $1f7f			bne 	_CTType 					; error
.1f78	a9 a5		lda #$a5			lda 	#PCD_NEGATE 				; compile negate
.1f7a	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1f7d	68		pla				pla 								; return original type.
.1f7e	60		rts				rts
.1f7f					_CTType:
.1f7f	4c 65 13	jmp $1365		jmp	ErrorV_type
.1f82					CommandWAIT:
.1f82	20 cc 1a	jsr $1acc			jsr 	LookNextNonSpace
.1f85	c9 2c		cmp #$2c			cmp 	#","
.1f87	f0 10		beq $1f99			beq 	_CWThirdParameter
.1f89	a9 00		lda #$00			lda 	#0
.1f8b	20 47 11	jsr $1147			jsr 	PushIntegerA
.1f8e					_CWExit:
.1f8e	a9 ca		lda #$ca			lda 	#(PCD_WAIT) >> 8
.1f90	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1f93	a9 94		lda #$94			lda 	#(PCD_WAIT) & $FF
.1f95	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1f98	60		rts				rts
.1f99					_CWThirdParameter:
.1f99	20 da 1a	jsr $1ada			jsr 	GetNext
.1f9c	20 6c 14	jsr $146c			jsr 	CompileExpressionAtA
.1f9f	29 40		and #$40			and 	#NSSTypeMask
.1fa1	c9 00		cmp #$00			cmp 	#NSSIFloat
.1fa3	f0 e9		beq $1f8e			beq 	_CWExit
.1fa5	4c 65 13	jmp $1365		jmp	ErrorV_type
.1fa8					OUTPUTWriteByte:
.1fa8	92 29		sta ($29)			sta 	(objPtr)
.1faa	e6 29		inc $29				inc 	objPtr
.1fac	d0 02		bne $1fb0			bne 	_HWOWBNoCarry
.1fae	e6 2a		inc $2a				inc 	objPtr+1
.1fb0					_HWOWBNoCarry:
.1fb0	60		rts				rts
.1fb1					CommandCMD:
.1fb1	a9 af		lda #$af			lda 	#PCD_SETCHANNEL 			; set the channel to this now forever.
.1fb3	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1fb6	20 cc 1a	jsr $1acc			jsr 	LookNextNonSpace 			; followed by a , ?
.1fb9	c9 2c		cmp #$2c			cmp 	#","
.1fbb	d0 06		bne $1fc3			bne 	_CCMDExit
.1fbd	20 da 1a	jsr $1ada			jsr 	GetNext 					; consume comma.
.1fc0	20 ab 1d	jsr $1dab			jsr 	CommandPRINT 				; do the print code
.1fc3					_CCMDExit:
.1fc3	60		rts				rts
.1fc4					CommandOPEN:
.1fc4	20 cc 1a	jsr $1acc			jsr 	LookNextNonSpace 			; followed by a , ?
.1fc7	c9 2c		cmp #$2c			cmp 	#","
.1fc9	d0 15		bne $1fe0			bne 	_COTwoDefaults
.1fcb	20 da 1a	jsr $1ada			jsr 	GetNext 					; consume comma
.1fce	20 6a 14	jsr $146a			jsr 	CompileExpressionAt0 		; what follows could be text or number.
.1fd1	29 40		and #$40			and 	#NSSString 					; if a number want a string to follow
.1fd3	f0 1e		beq $1ff3			beq 	_COThreeIntegers
.1fd5	a9 00		lda #$00			lda 	#0		 					; so we have n,n,$,0 so swap !
.1fd7	20 47 11	jsr $1147			jsr 	PushIntegerA
.1fda	a9 be		lda #$be			lda 	#(PCD_SWAP) & $FF
.1fdc	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1fdf	60		rts				rts
.1fe0					_COTwoDefaults:
.1fe0	a9 00		lda #$00			lda 	#0
.1fe2	20 47 11	jsr $1147			jsr 	PushIntegerA
.1fe5					_COCompileNullString:
.1fe5	a9 ce		lda #$ce			lda 	#(PCD_CMD_STRING) & $FF
.1fe7	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1fea	a9 00		lda #$00			lda 	#0
.1fec	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1fef	20 80 10	jsr $1080			jsr 	WriteCodeByte
.1ff2	60		rts				rts
.1ff3					_COThreeIntegers:
.1ff3	20 cc 1a	jsr $1acc			jsr 	LookNextNonSpace 			; is there a ,
.1ff6	c9 2c		cmp #$2c			cmp 	#","
.1ff8	d0 eb		bne $1fe5			bne 	_COCompileNullString 		; if not it is n,n,n so default filename.
.1ffa	20 da 1a	jsr $1ada			jsr 	GetNext
.1ffd	20 6a 14	jsr $146a			jsr 	CompileExpressionAt0 		; should be a filename
.2000	29 40		and #$40			and 	#NSSString
.2002	f0 01		beq $2005			beq 	_COType
.2004	60		rts				rts
.2005					_COType:
.2005	4c 65 13	jmp $1365		jmp	ErrorV_type
.2008					XPrintCharacter
.2008	48		pha				pha
.2009	da		phx				phx
.200a	5a		phy				phy
.200b	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.200e	7a		ply				ply
.200f	fa		plx				plx
.2010	68		pla				pla
.2011	60		rts				rts
.2012					XSaveMemory:
.2012	da		phx				phx
.2013	5a		phy				phy
.2014	48		pha				pha
.2015	a9 00		lda #$00			lda 	#0 							; set LFS
.2017	a2 08		ldx #$08			ldx 	#8
.2019	a0 00		ldy #$00			ldy 	#0
.201b	20 ba ff	jsr $ffba			jsr 	$FFBA
.201e	a9 08		lda #$08			lda 	#8 							; set file name
.2020	a2 34		ldx #$34			ldx 	#SaveName & $FF
.2022	a0 20		ldy #$20			ldy 	#SaveName >> 8
.2024	20 bd ff	jsr $ffbd			jsr 	$FFBD
.2027	68		pla				pla 								; set up the start address.
.2028	85 2d		sta $2d				sta 	zTemp0+1
.202a	64 2c		stz $2c				stz 	zTemp0
.202c	a9 2c		lda #$2c			lda 	#zTemp0 					; from index.
.202e	7a		ply				ply 								; end in YX
.202f	fa		plx				plx
.2030	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; write out.
.2033	60		rts				rts
.2034					SaveName:
>2034	43 4f 44 45 2e 42 49 4e				.text 	"CODE.BIN"

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/common.library

=$1000					CodeStart = $1000
=$22					ZeroPageMandatory = $22
=$400					MemoryStorage = $400
.0026					codePtr:
>0026							.fill 	2
.0028					codePage:
>0028							.fill 	1
.0029					objPtr:
>0029							.fill 	2
.002b					objPage:
>002b							.fill 	1
.002c					zTemp0:
>002c							.fill 	2
.002e					zTemp1:
>002e							.fill 	2
.0030					zTemp2:
>0030							.fill 	2
=$80					PCD_STARTBINARY = $80
=$8d					PCD_ENDBINARY = $8d
=$8d					PCD_STARTCOMMAND = $8d
=$ca					PCD_ENDCOMMAND = $ca
=$ca					PCD_STARTSYSTEM = $ca
=$d5					PCD_ENDSYSTEM = $d5
=$80					PCD_PLUS             = $80 ; +
=$81					PCD_MINUS            = $81 ; -
=$82					PCD_TIMES            = $82 ; *
=$83					PCD_DIVIDE           = $83 ; /
=$84					PCD_POWER            = $84 ; ^
=$85					PCD_AND              = $85 ; and
=$86					PCD_OR               = $86 ; or
=$87					PCD_GREATER          = $87 ; >
=$88					PCD_EQUAL            = $88 ; =
=$89					PCD_LESS             = $89 ; <
=$8a					PCD_GREATEREQUAL     = $8a ; >=
=$8b					PCD_LESSGREATER      = $8b ; <>
=$8c					PCD_LESSEQUAL        = $8c ; <=
=$8d					PCD_ABS              = $8d ; abs
=$8e					PCD_ARRAY            = $8e ; array
=$8f					PCD_ASC              = $8f ; asc
=$90					PCD_ASSERT           = $90 ; assert
=$91					PCD_BINDOLLAR        = $91 ; bin$
=$92					PCD_PRINTCMD_CHR     = $92 ; print.chr
=$93					PCD_CHRDOLLAR        = $93 ; chr$
=$94					PCD_SCMD_CMP         = $94 ; s.cmp
=$95					PCD_FOR              = $95 ; for
=$96					PCD_FRE              = $96 ; fre
=$97					PCD_GET              = $97 ; get
=$98					PCD_RETURN           = $98 ; return
=$99					PCD_PSET             = $99 ; pset
=$9a					PCD_LINE             = $9a ; line
=$9b					PCD_RECT             = $9b ; rect
=$9c					PCD_FRAME            = $9c ; frame
=$9d					PCD_CHAR             = $9d ; char
=$9e					PCD_HEXDOLLAR        = $9e ; hex$
=$9f					PCD_INPUT            = $9f ; input
=$a0					PCD_INPUTDOLLAR      = $a0 ; input$
=$a1					PCD_INPUTCMD_START   = $a1 ; input.start
=$a2					PCD_LEN              = $a2 ; len
=$a3					PCD_FCMD_CMP         = $a3 ; f.cmp
=$a4					PCD_INTCMD_DIV       = $a4 ; int.div
=$a5					PCD_NEGATE           = $a5 ; negate
=$a6					PCD_NEWCMD_LINE      = $a6 ; new.line
=$a7					PCD_NEXT             = $a7 ; next
=$a8					PCD_NOT              = $a8 ; not
=$a9					PCD_ON               = $a9 ; on
=$aa					PCD_MOREON           = $aa ; moreon
=$ab					PCD_PEEK             = $ab ; peek
=$ac					PCD_POKE             = $ac ; poke
=$ad					PCD_POS              = $ad ; pos
=$ae					PCD_GETCHANNEL       = $ae ; getchannel
=$af					PCD_SETCHANNEL       = $af ; setchannel
=$b0					PCD_PRINTCMD_N       = $b0 ; print.n
=$b1					PCD_PRINTCMD_S       = $b1 ; print.s
=$b2					PCD_READ             = $b2 ; read
=$b3					PCD_READDOLLAR       = $b3 ; read$
=$b4					PCD_RND              = $b4 ; rnd
=$b5					PCD_CONCAT           = $b5 ; concat
=$b6					PCD_SGN              = $b6 ; sgn
=$b7					PCD_PRINTCMD_TAB     = $b7 ; print.tab
=$b8					PCD_PRINTCMD_POS     = $b8 ; print.pos
=$b9					PCD_PRINTCMD_SPC     = $b9 ; print.spc
=$ba					PCD_STRDOLLAR        = $ba ; str$
=$bb					PCD_LEFTDOLLAR       = $bb ; left$
=$bc					PCD_RIGHTDOLLAR      = $bc ; right$
=$bd					PCD_MIDDOLLAR        = $bd ; mid$
=$be					PCD_SWAP             = $be ; swap
=$bf					PCD_TI               = $bf ; ti
=$c0					PCD_TIDOLLAR         = $c0 ; ti$
=$c1					PCD_USR              = $c1 ; usr
=$c2					PCD_VAL              = $c2 ; val
=$c3					PCD_CLOSE            = $c3 ; close
=$c4					PCD_EXIT             = $c4 ; exit
=$c5					PCD_DEBUG            = $c5 ; debug
=$c6					PCD_OPEN             = $c6 ; open
=$c7					PCD_SCREEN           = $c7 ; screen
=$c8					PCD_VPOKE            = $c8 ; vpoke
=$c9					PCD_VPEEK            = $c9 ; vpeek
=$ca					PCD_CMD_SHIFT        = $ca ; .shift
=$cb					PCD_CMD_BYTE         = $cb ; .byte
=$cc					PCD_CMD_WORD         = $cc ; .word
=$cd					PCD_CMD_FLOAT        = $cd ; .float
=$ce					PCD_CMD_STRING       = $ce ; .string
=$cf					PCD_CMD_DATA         = $cf ; .data
=$d0					PCD_CMD_GOTO         = $d0 ; .goto
=$d1					PCD_CMD_GOSUB        = $d1 ; .gosub
=$d2					PCD_CMD_GOTOCMD_Z    = $d2 ; .goto.z
=$d3					PCD_CMD_GOTOCMD_NZ   = $d3 ; .goto.nz
=$d4					PCD_CMD_VARSPACE     = $d4 ; .varspace
=$ca80					PCD_CLR              = $ca80 ; clr
=$ca81					PCD_DIM              = $ca81 ; dim
=$ca82					PCD_END              = $ca82 ; end
=$ca83					PCD_JOY              = $ca83 ; joy
=$ca84					PCD_INT              = $ca84 ; int
=$ca85					PCD_SQR              = $ca85 ; sqr
=$ca86					PCD_LOG              = $ca86 ; log
=$ca87					PCD_EXP              = $ca87 ; exp
=$ca88					PCD_COS              = $ca88 ; cos
=$ca89					PCD_SIN              = $ca89 ; sin
=$ca8a					PCD_TAN              = $ca8a ; tan
=$ca8b					PCD_ATN              = $ca8b ; atn
=$ca8c					PCD_MOUSE            = $ca8c ; mouse
=$ca8d					PCD_MB               = $ca8d ; mb
=$ca8e					PCD_MX               = $ca8e ; mx
=$ca8f					PCD_MY               = $ca8f ; my
=$ca90					PCD_RESTORE          = $ca90 ; restore
=$ca91					PCD_STOP             = $ca91 ; stop
=$ca92					PCD_SYS              = $ca92 ; sys
=$ca93					PCD_TIDOLLARCMD_WRITE = $ca93 ; ti$.write
=$ca94					PCD_WAIT             = $ca94 ; wait
=$ca95					PCD_I2CPOKE          = $ca95 ; i2cpoke
=$ca96					PCD_I2CPEEK          = $ca96 ; i2cpeek
=$ca97					PCD_BANK             = $ca97 ; bank
=$ca98					PCD_SLEEP            = $ca98 ; sleep
=$ca99					PCD_FMINIT           = $ca99 ; fminit
=$ca9a					PCD_FMNOTE           = $ca9a ; fmnote
=$ca9b					PCD_FMDRUM           = $ca9b ; fmdrum
=$ca9c					PCD_FMINST           = $ca9c ; fminst
=$ca9d					PCD_FMVIB            = $ca9d ; fmvib
=$ca9e					PCD_FMFREQ           = $ca9e ; fmfreq
=$ca9f					PCD_FMVOL            = $ca9f ; fmvol
=$caa0					PCD_FMPAN            = $caa0 ; fmpan
=$caa1					PCD_FMPLAY           = $caa1 ; fmplay
=$caa2					PCD_FMCHORD          = $caa2 ; fmchord
=$caa3					PCD_FMPOKE           = $caa3 ; fmpoke
=$caa4					PCD_PSGINIT          = $caa4 ; psginit
=$caa5					PCD_PSGNOTE          = $caa5 ; psgnote
=$caa6					PCD_PSGVOL           = $caa6 ; psgvol
=$caa7					PCD_PSGWAV           = $caa7 ; psgwav
=$caa8					PCD_PSGFREQ          = $caa8 ; psgfreq
=$caa9					PCD_PSGPAN           = $caa9 ; psgpan
=$caaa					PCD_PSGPLAY          = $caaa ; psgplay
=$caab					PCD_PSGCHORD         = $caab ; psgchord
=$caac					PCD_CLS              = $caac ; cls
=$caad					PCD_LOCATE           = $caad ; locate
=$caae					PCD_COLOR            = $caae ; color
.203c					MoveObjectForward:
.203c	b2 29		lda ($29)			lda 	(objPtr) 					; get next
.203e	c9 ff		cmp #$ff			cmp 	#$FF
.2040	f0 36		beq $2078			beq 	_MOFEnd
.2042	c9 40		cmp #$40			cmp 	#$40 						; 00-3F
.2044	90 24		bcc $206a			bcc 	_MOFAdvance1 				; forward 1
.2046	a0 02		ldy #$02			ldy 	#2 							; 40-6F
.2048	c9 70		cmp #$70			cmp 	#$70 						; forward 2
.204a	90 20		bcc $206c			bcc 	_MOFAdvanceY
.204c	c9 ca		cmp #$ca			cmp 	#PCD_STARTSYSTEM 			; 70 - System tokens.
.204e	90 1a		bcc $206a			bcc 	_MOFAdvance1 				; forward 1
.2050	a8		tay				tay 								; read the size.
.2051	b9 b6 1f	lda $1fb6,y			lda 	MOFSizeTable-PCD_STARTSYSTEM,y
.2054	a8		tay				tay
.2055	c8		iny				iny 								; add 1 for the system token.
.2056	d0 14		bne $206c			bne 	_MOFAdvanceY 				; if 0, was $FF thus a string/data skip.
.2058	a0 01		ldy #$01			ldy 	#1 							; get length byte
.205a	b1 29		lda ($29),y			lda 	(objPtr),y
.205c	a8		tay				tay 								; into Y.
.205d	18		clc				clc
.205e	a5 29		lda $29				lda 	objPtr						; add 2 to the object pointer
.2060	69 02		adc #$02			adc 	#2
.2062	85 29		sta $29				sta 	objPtr
.2064	90 02		bcc $2068			bcc 	_MOFNoCarry1
.2066	e6 2a		inc $2a				inc 	objPtr+1
.2068					_MOFNoCarry1:
.2068	80 02		bra $206c			bra 	_MOFAdvanceY
.206a					_MOFAdvance1:
.206a	a0 01		ldy #$01			ldy 	#1
.206c					_MOFAdvanceY:
.206c	98		tya				tya 								; add X to objPtr
.206d	18		clc				clc
.206e	65 29		adc $29				adc 	objPtr
.2070	85 29		sta $29				sta 	objPtr
.2072	90 02		bcc $2076			bcc 	_MOFNoCarry2
.2074	e6 2a		inc $2a				inc 	objPtr+1
.2076					_MOFNoCarry2:
.2076	18		clc				clc 								; not completed.
.2077	60		rts				rts
.2078					_MOFEnd:
.2078	e6 29		inc $29				inc 	objPtr
.207a	d0 02		bne $207e			bne 	_MOFENoCarry
.207c	e6 2a		inc $2a				inc 	objPtr+1
.207e					_MOFENoCarry:
.207e	38		sec				sec
.207f	60		rts				rts
.2080					MOFSizeTable:
>2080	01					.byte	1         	; $ca .shift
>2081	01					.byte	1         	; $cb .byte
>2082	02					.byte	2         	; $cc .word
>2083	05					.byte	5         	; $cd .float
>2084	ff					.byte	255       	; $ce .string
>2085	ff					.byte	255       	; $cf .data
>2086	03					.byte	3         	; $d0 .goto
>2087	03					.byte	3         	; $d1 .gosub
>2088	03					.byte	3         	; $d2 .goto.z
>2089	03					.byte	3         	; $d3 .goto.nz
>208a	02					.byte	2         	; $d4 .varspace

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library

=12					MathStackSize = 12
=$40					NSSString = $40 							; string vs typemask
=$00					NSSIFloat = $00 							; ifloat vs typemask
=$20					NSSIInt16 = $20								; when set, a reference is a 16 bit reference (e.g. a%)
=$40					NSSTypeMask = $40
=$80					NSSArray = $80  							; array (in variable code)
.0032					NSStatus:
>0032							.fill 	MathStackSize
.003e					NSMantissa0:
>003e							.fill 	MathStackSize 				; (this is my integer mantissa system)
.004a					NSMantissa1:
>004a							.fill 	MathStackSize
.0056					NSMantissa2:
>0056							.fill 	MathStackSize
.0062					NSMantissa3:
>0062							.fill 	MathStackSize
.006e					NSExponent:
>006e							.fill 	MathStackSize
.0615					numberBuffer:
>0615							.fill 	34
.208b					FloatSubtract:
.208b	b5 32		lda $32,x			lda 	NSStatus,x 					; negate top of stack
.208d	49 80		eor #$80			eor 	#$80
.208f	95 32		sta $32,x			sta 	NSStatus,x					; and fall through.
.2091					FloatAdd:
.2091	ca		dex				dex
.2092	b5 6e		lda $6e,x			lda 	NSExponent,x 				; can use optimised.
.2094	15 6f		ora $6f,x			ora 	NSExponent+1,x
.2096	15 62		ora $62,x			ora 	NSMantissa3,x
.2098	15 63		ora $63,x			ora 	NSMantissa3+1,x
.209a	d0 04		bne $20a0			bne 	_FAUseFloat
.209c	20 2d 24	jsr $242d			jsr 	FloatInt32Add 				; use the int32 one.
.209f	60		rts				rts
.20a0					_FAUseFloat:
.20a0	20 c2 23	jsr $23c2			jsr 	FloatNormalise 				; normalise S[X]
.20a3	f0 51		beq $20f6			beq 	_FAReturn1
.20a5	e8		inx				inx 								; normalise S[X+1]
.20a6	20 c2 23	jsr $23c2			jsr 	FloatNormalise
.20a9	ca		dex				dex
.20aa	c9 00		cmp #$00			cmp 	#0
.20ac	f0 60		beq $210e			beq 	_FAExit 					; if so, just return A
.20ae	b5 6e		lda $6e,x			lda 	NSExponent,x 				; are the exponents the same ?
.20b0	d5 6f		cmp $6f,x			cmp 	NSExponent+1,x
.20b2	f0 18		beq $20cc			beq 	_FAExponentsEqual
.20b4	b5 6e		lda $6e,x			lda 	NSExponent,x 				; work out the larger exponent
.20b6	a8		tay				tay
.20b7	38		sec				sec 								; do a signed comparison of the exponents.
.20b8	f5 6f		sbc $6f,x			sbc 	NSExponent+1,x
.20ba	50 02		bvc $20be			bvc 	_FANoSignedChange
.20bc	49 80		eor #$80			eor 	#$80
.20be					_FANoSignedChange:
.20be	29 80		and #$80			and 	#$80
.20c0	10 02		bpl $20c4			bpl 	_FAHaveMax
.20c2	b4 6f		ldy $6f,x			ldy 	NSExponent+1,x
.20c4					_FAHaveMax:
.20c4	20 0f 21	jsr $210f			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.20c7	e8		inx				inx
.20c8	20 0f 21	jsr $210f			jsr 	_FAShiftToExponent
.20cb	ca		dex				dex
.20cc					_FAExponentsEqual:
.20cc	b5 32		lda $32,x			lda 	NSStatus,x 					; are the signs the same
.20ce	55 33		eor $33,x			eor 	NSStatus+1,x
.20d0	30 0e		bmi $20e0			bmi 	_FADifferentSigns
.20d2	20 f9 23	jsr $23f9			jsr 	FloatAddTopTwoStack 		; do the add of the mantissae
.20d5	b5 62		lda $62,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.20d7	10 35		bpl $210e			bpl 	_FAExit 					; if no, we are done.
.20d9	20 86 26	jsr $2686			jsr 	FloatShiftRight 				; shift A right, renormalising it.
.20dc	f6 6e		inc $6e,x			inc 	NSExponent,x 				; bump the exponent and exit
.20de	80 2e		bra $210e			bra 	_FAExit
.20e0					_FADifferentSigns:
.20e0	20 13 24	jsr $2413			jsr 	FloatSubTopTwoStack 		; subtract mantissa B from A
.20e3	b5 62		lda $62,x			lda 	NSMantissa3,x 				; is the result negative ?
.20e5	10 06		bpl $20ed			bpl 	_FACheckZero 				; if no, check for -0
.20e7	20 2f 26	jsr $262f			jsr 	FloatNegate 					; netate result
.20ea	20 36 26	jsr $2636			jsr 	FloatNegateMantissa 			; negate (2'c) the mantissa
.20ed					_FACheckZero:
.20ed	20 8f 26	jsr $268f			jsr 	FloatIsZero	 				; check for -0
.20f0	d0 1c		bne $210e			bne 	_FAExit
.20f2	74 32		stz $32,x			stz 	NSStatus,x
.20f4	80 18		bra $210e			bra 	_FAExit
.20f6					_FAReturn1:
.20f6	b5 3f		lda $3f,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.20f8	95 3e		sta $3e,x			sta 	NSMantissa0,x
.20fa	b5 4b		lda $4b,x			lda 	NSMantissa1+1,x
.20fc	95 4a		sta $4a,x			sta 	NSMantissa1,x
.20fe	b5 57		lda $57,x			lda 	NSMantissa2+1,x
.2100	95 56		sta $56,x			sta 	NSMantissa2,x
.2102	b5 63		lda $63,x			lda 	NSMantissa3+1,x
.2104	95 62		sta $62,x			sta 	NSMantissa3,x
.2106	b5 6f		lda $6f,x			lda 	NSExponent+1,x
.2108	95 6e		sta $6e,x			sta 	NSExponent,x
.210a	b5 33		lda $33,x			lda 	NSStatus+1,x
.210c	95 32		sta $32,x			sta 	NSStatus,x
.210e					_FAExit:
.210e	60		rts				rts
.210f					_FAShiftToExponent:
.210f					_FAShiftToExponent2:
.210f	98		tya				tya 								; compare Y to exponent
.2110	d5 6e		cmp $6e,x			cmp 	NSExponent,x 				; reached the exponent required ?
.2112	f0 07		beq $211b			beq 	_FASEExit 					; exit if so.
.2114	20 86 26	jsr $2686			jsr 	FloatShiftRight	 			; shift the mantissa right
.2117	f6 6e		inc $6e,x			inc 	NSExponent,x 				; increment exponent
.2119	80 f4		bra $210f			bra 	_FAShiftToExponent2
.211b					_FASEExit:
.211b	60		rts				rts
.211c					CompareEqual:
.211c	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.211e	d0 09		bne $2129			bne 	ReturnFalse
.2120					ReturnTrue:
.2120	a9 01		lda #$01			lda 	#1
.2122	95 3e		sta $3e,x			sta 	NSMantissa0,x
.2124	a9 80		lda #$80			lda 	#$80
.2126	95 32		sta $32,x			sta 	NSStatus,x
.2128	60		rts				rts
.2129					ReturnFalse:
.2129	74 3e		stz $3e,x			stz 	NSMantissa0,x
.212b	60		rts				rts
.212c					CompareNotEqual:
.212c	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.212e	d0 f0		bne $2120			bne 	ReturnTrue
.2130	80 f7		bra $2129			bra 	ReturnFalse
.2132					CompareLess:
.2132	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.2134	c9 ff		cmp #$ff			cmp 	#$FF
.2136	f0 e8		beq $2120			beq 	ReturnTrue
.2138	80 ef		bra $2129			bra 	ReturnFalse
.213a					CompareGreater:
.213a	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.213c	c9 01		cmp #$01			cmp 	#$01
.213e	f0 e0		beq $2120			beq 	ReturnTrue
.2140	80 e7		bra $2129			bra 	ReturnFalse
.2142					CompareLessEqual:
.2142	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.2144	c9 01		cmp #$01			cmp 	#$01
.2146	d0 d8		bne $2120			bne 	ReturnTrue
.2148	80 df		bra $2129			bra 	ReturnFalse
.214a					CompareGreaterEqual:
.214a	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.214c	c9 ff		cmp #$ff			cmp 	#$FF
.214e	d0 d0		bne $2120			bne 	ReturnTrue
.2150	80 d7		bra $2129			bra 	ReturnFalse
.2152					FloatCompare:
.2152	b5 6e		lda $6e,x			lda 	NSExponent,x 				; float comparison.
.2154	15 6d		ora $6d,x			ora 	NSExponent-1,x 				; integer if both integer.
.2156	48		pha				pha
.2157	20 8b 20	jsr $208b			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.215a	68		pla				pla
.215b	d0 0c		bne $2169			bne 	_FCCompareFloat
.215d	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.215f	15 4a		ora $4a,x			ora 	NSMantissa1,x
.2161	15 56		ora $56,x			ora 	NSMantissa2,x
.2163	15 62		ora $62,x			ora 	NSMantissa3,x
.2165	f0 14		beq $217b			beq 	_FCExit 					; if zero, return zero
.2167	80 0a		bra $2173			bra 	_FCSign
.2169					_FCCompareFloat:
.2169	b5 4a		lda $4a,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.216b	29 f0		and #$f0			and 	#$F0
.216d	15 56		ora $56,x			ora 	NSMantissa2,x
.216f	15 62		ora $62,x			ora 	NSMantissa3,x
.2171	f0 08		beq $217b			beq 	_FCExit 					; zero, so approximately identical
.2173					_FCSign:
.2173	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.2175	34 32		bit $32,x			bit 	NSStatus,x
.2177	10 02		bpl $217b			bpl 	_FCExit
.2179					_FCNegative:
.2179	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.217b					_FCExit:
.217b	20 6f 26	jsr $266f			jsr 	FloatSetByte 				; set the result 255,0,1
.217e	60		rts				rts
.217f					FloatScalarTable:
>217f	66 66 66 66				.dword $66666666 ; 0.1
>2183	de					.byte $de
>2184	1f 85 eb 51				.dword $51eb851f ; 0.01
>2188	db					.byte $db
>2189	4c 37 89 41				.dword $4189374c ; 0.001
>218d	d8					.byte $d8
>218e	ac 8b db 68				.dword $68db8bac ; 0.0001
>2192	d4					.byte $d4
>2193	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>2197	d1					.byte $d1
>2198	83 de 1b 43				.dword $431bde83 ; 1e-06
>219c	ce					.byte $ce
>219d	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>21a1	ca					.byte $ca
>21a2	89 3b e6 55				.dword $55e63b89 ; 1e-08
>21a6	c7					.byte $c7
>21a7	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>21ab	c4					.byte $c4
>21ac	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>21b0	c0					.byte $c0
>21b1	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>21b5	bd					.byte $bd
.21b6					FloatDivide:
.21b6	48		pha				pha
.21b7	20 c2 23	jsr $23c2			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.21ba	ca		dex				dex
.21bb	c9 00		cmp #$00			cmp 	#0
.21bd	f0 1e		beq $21dd			beq 	_FDZero
.21bf	20 c2 23	jsr $23c2			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.21c2	f0 16		beq $21da			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.21c4	20 25 22	jsr $2225			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.21c7	20 f2 21	jsr $21f2			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.21ca	20 c2 23	jsr $23c2			jsr		FloatNormalise 				; renormalise
.21cd	20 b8 23	jsr $23b8			jsr 	FloatCalculateSign 			; calculate result sign
.21d0	b5 6e		lda $6e,x			lda 	NSExponent,x 				; calculate exponent
.21d2	38		sec				sec
.21d3	f5 6f		sbc $6f,x			sbc 	NSExponent+1,x
.21d5	38		sec				sec
.21d6	e9 1e		sbc #$1e			sbc 	#30
.21d8	95 6e		sta $6e,x			sta 	NSExponent,x
.21da					_FDExit:
.21da	68		pla				pla
.21db	18		clc				clc
.21dc	60		rts				rts
.21dd					_FDZero:
.21dd	68		pla				pla
.21de	38		sec				sec
.21df	60		rts				rts
.21e0					DivideInt32:
.21e0	20 a8 22	jsr $22a8			jsr 	FloatIntegerPart 			; make both integers
.21e3	ca		dex				dex
.21e4	20 a8 22	jsr $22a8			jsr 	FloatIntegerPart
.21e7	20 03 22	jsr $2203			jsr 	Int32Divide 				; divide
.21ea	20 f2 21	jsr $21f2			jsr 	NSMCopyPlusTwoToZero 		; copy result
.21ed	20 b8 23	jsr $23b8			jsr 	FloatCalculateSign 			; calculate result sign
.21f0	18		clc				clc
.21f1	60		rts				rts
.21f2					NSMCopyPlusTwoToZero:
.21f2	b5 40		lda $40,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.21f4	95 3e		sta $3e,x			sta 	NSMantissa0,x
.21f6	b5 4c		lda $4c,x			lda 	NSMantissa1+2,x
.21f8	95 4a		sta $4a,x			sta 	NSMantissa1,x
.21fa	b5 58		lda $58,x			lda 	NSMantissa2+2,x
.21fc	95 56		sta $56,x			sta 	NSMantissa2,x
.21fe	b5 64		lda $64,x			lda 	NSMantissa3+2,x
.2200	95 62		sta $62,x			sta 	NSMantissa3,x
.2202	60		rts				rts
.2203					Int32Divide:
.2203	48		pha				pha 								; save AXY
.2204	5a		phy				phy
.2205	20 50 26	jsr $2650			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.2208	20 69 26	jsr $2669			jsr 	FloatSetZeroMantissaOnly 	; set S[X] to zero
.220b	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.220d					_I32DivideLoop:
.220d	e8		inx				inx
.220e	e8		inx				inx
.220f	20 7c 26	jsr $267c			jsr 	FloatShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.2212	ca		dex				dex
.2213	ca		dex				dex
.2214	20 7d 26	jsr $267d			jsr 	FloatRotateLeft
.2217	20 43 22	jsr $2243			jsr 	FloatDivideCheck 			; check if subtract possible
.221a	90 02		bcc $221e			bcc 	_I32DivideNoCarryIn
.221c	f6 40		inc $40,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.221e					_I32DivideNoCarryIn:
.221e	88		dey				dey 								; loop round till division completed.
.221f	d0 ec		bne $220d			bne 	_I32DivideLoop
.2221	7a		ply				ply 								; restore AXY and exit
.2222	68		pla				pla
.2223	18		clc				clc
.2224	60		rts				rts
.2225					Int32ShiftDivide:
.2225	48		pha				pha 								; save AY
.2226	5a		phy				phy
.2227	e8		inx				inx 								; clear S[X+2]
.2228	e8		inx				inx
.2229	20 6d 26	jsr $266d			jsr 	FloatSetZero
.222c	ca		dex				dex
.222d	ca		dex				dex
.222e	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.2230					_I32SDLoop:
.2230	20 43 22	jsr $2243			jsr 	FloatDivideCheck 			; check if subtract possible
.2233	e8		inx				inx
.2234	e8		inx				inx
.2235	20 7d 26	jsr $267d			jsr 	FloatRotateLeft				; shift 64 bit FPA left, rotating carry in
.2238	ca		dex				dex
.2239	ca		dex				dex
.223a	20 7d 26	jsr $267d			jsr 	FloatRotateLeft
.223d	88		dey				dey 	 							; do 31 times
.223e	d0 f0		bne $2230			bne 	_I32SDLoop
.2240	7a		ply				ply 								; restore AY and exit
.2241	68		pla				pla
.2242	60		rts				rts
.2243					FloatDivideCheck:
.2243	20 13 24	jsr $2413			jsr 	FloatSubTopTwoStack 		; subtract Stack[X+1] from Stack[X+0]
.2246	b0 04		bcs $224c			bcs 	_DCSExit 					; if carry set, then could do, exit
.2248	20 f9 23	jsr $23f9			jsr 	FloatAddTopTwoStack 		; add it back in
.224b	18		clc				clc 								; and return False
.224c					_DCSExit:
.224c	60		rts				rts
.224d					FloatFractionalPart:
.224d	5a		phy				phy
.224e	b5 32		lda $32,x			lda 	NSStatus,x 					; take absolute value
.2250	29 7f		and #$7f			and 	#$7F
.2252	95 32		sta $32,x			sta 	NSStatus,x
.2254	20 c2 23	jsr $23c2			jsr 	FloatNormalise
.2257	b5 6e		lda $6e,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.2259	38		sec				sec
.225a	e9 e0		sbc #$e0			sbc 	#$E0
.225c	90 29		bcc $2287			bcc 	_FFPExit 					; already fractional
.225e	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.2260	b0 22		bcs $2284			bcs 	_FFPZero
.2262	a8		tay				tay 								; put count to do in Y
.2263	b5 62		lda $62,x			lda 	NSMantissa3,x 				; do each in turn.
.2265	20 8c 22	jsr $228c			jsr 	_FFPPartial
.2268	95 62		sta $62,x			sta 	NSMantissa3,x
.226a	b5 56		lda $56,x			lda 	NSMantissa2,x
.226c	20 8c 22	jsr $228c			jsr 	_FFPPartial
.226f	95 56		sta $56,x			sta 	NSMantissa2,x
.2271	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.2273	20 8c 22	jsr $228c			jsr 	_FFPPartial
.2276	95 4a		sta $4a,x			sta 	NSMantissa1,x
.2278	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.227a	20 8c 22	jsr $228c			jsr 	_FFPPartial
.227d	95 3e		sta $3e,x			sta 	NSMantissa0,x
.227f	20 8f 26	jsr $268f			jsr 	FloatIsZero 					; zeroed check.
.2282	d0 03		bne $2287			bne 	_FFPExit
.2284					_FFPZero:
.2284	20 6d 26	jsr $266d			jsr 	FloatSetZero
.2287					_FFPExit:
.2287	20 c2 23	jsr $23c2			jsr 	FloatNormalise
.228a	7a		ply				ply
.228b	60		rts				rts
.228c					_FFPPartial:
.228c	c0 00		cpy #$00			cpy 	#0 							; no more to do
.228e	f0 17		beq $22a7			beq 	_FFFPPExit
.2290	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.2292	b0 0c		bcs $22a0			bcs 	_FFFPPWholeByte
.2294	5a		phy				phy
.2295					_FFFPPLeft:
.2295	0a		asl a				asl 	a
.2296	88		dey				dey
.2297	d0 fc		bne $2295			bne 	_FFFPPLeft
.2299	7a		ply				ply
.229a					_FFFPPRight:
.229a	4a		lsr a				lsr 	a
.229b	88		dey				dey
.229c	d0 fc		bne $229a			bne 	_FFFPPRight
.229e	80 07		bra $22a7			bra 	_FFFPPExit
.22a0					_FFFPPWholeByte:
.22a0	98		tya				tya 								; subtract 8 from count
.22a1	38		sec				sec
.22a2	e9 08		sbc #$08			sbc 	#8
.22a4	a8		tay				tay
.22a5	a9 00		lda #$00			lda 	#0 							; and clear all
.22a7					_FFFPPExit:
.22a7	60		rts				rts
.22a8					FloatIntegerPart:
.22a8	48		pha				pha
.22a9	b5 6e		lda $6e,x			lda 	NSExponent,x 				; is it integer already ?
.22ab	f0 1d		beq $22ca			beq 	_FIPExit 					; if so do nothing
.22ad	20 8f 26	jsr $268f			jsr 	FloatIsZero 				; is it zero ?
.22b0	f0 15		beq $22c7			beq 	_FIPZero 					; if so return zero.
.22b2	20 c2 23	jsr $23c2			jsr 	FloatNormalise 				; normalise
.22b5	f0 10		beq $22c7			beq 	_FIPZero 					; normalised to zero, exit zero
.22b7					_FIPShift:
.22b7	b5 6e		lda $6e,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.22b9	10 07		bpl $22c2			bpl 	_FIPCheckZero
.22bb	20 86 26	jsr $2686			jsr 	FloatShiftRight 			; shift mantissa right
.22be	f6 6e		inc $6e,x			inc 	NSExponent,x 				; bump exponent
.22c0	80 f5		bra $22b7			bra 	_FIPShift
.22c2					_FIPCheckZero:
.22c2	20 8f 26	jsr $268f			jsr 	FloatIsZero 				; avoid -0 problem
.22c5	d0 03		bne $22ca			bne 	_FIPExit 					; set to zero if mantissa zero.
.22c7					_FIPZero:
.22c7	20 6d 26	jsr $266d			jsr 	FloatSetZero
.22ca					_FIPExit:
.22ca	68		pla				pla
.22cb	60		rts				rts
.22cc					FloatIntegerPartDown:
.22cc	48		pha				pha
.22cd	5a		phy				phy
.22ce	b5 6e		lda $6e,x			lda 	NSExponent,x 				; is it integer already ?
.22d0	f0 36		beq $2308			beq 	_FIPExit 					; if so do nothing
.22d2	20 8f 26	jsr $268f			jsr 	FloatIsZero 				; is it zero ?
.22d5	f0 2e		beq $2305			beq 	_FIPZero 					; if so return zero.
.22d7	20 c2 23	jsr $23c2			jsr 	FloatNormalise 				; normalise
.22da	f0 29		beq $2305			beq 	_FIPZero 					; normalised to zero, exit zero
.22dc	a0 00		ldy #$00			ldy 	#0 							; reset the count of bits.
.22de					_FIPShift:
.22de	b5 6e		lda $6e,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.22e0	10 0a		bpl $22ec			bpl 	_FIPCheckDown
.22e2	20 86 26	jsr $2686			jsr 	FloatShiftRight 			; shift mantissa right
.22e5	90 01		bcc $22e8			bcc 	_FIPNoFrac 					; shifted a zero out ?
.22e7	c8		iny				iny
.22e8					_FIPNoFrac:
.22e8	f6 6e		inc $6e,x			inc 	NSExponent,x 				; bump exponent
.22ea	80 f2		bra $22de			bra 	_FIPShift
.22ec					_FIPCheckDown:
.22ec	c0 00		cpy #$00			cpy 	#0 							; were there any fractional bits.
.22ee	f0 10		beq $2300			beq 	_FIPCheckZero
.22f0	34 32		bit $32,x			bit 	NSStatus,x 					; +ve
.22f2	10 0c		bpl $2300			bpl 	_FIPCheckZero
.22f4	e8		inx				inx 								; -ve so round *down*.
.22f5	a9 01		lda #$01			lda 	#1
.22f7	20 6f 26	jsr $266f			jsr 	FloatSetByte
.22fa	20 2f 26	jsr $262f			jsr 	FloatNegate
.22fd	20 91 20	jsr $2091			jsr 	FloatAdd
.2300					_FIPCheckZero:
.2300	20 8f 26	jsr $268f			jsr 	FloatIsZero 				; avoid -0 problem
.2303	d0 03		bne $2308			bne 	_FIPExit 					; set to zero if mantissa zero.
.2305					_FIPZero:
.2305	20 6d 26	jsr $266d			jsr 	FloatSetZero
.2308					_FIPExit:
.2308	7a		ply				ply
.2309	68		pla				pla
.230a	60		rts				rts
.230b					FloatInt8Multiply:
.230b	5a		phy				phy
.230c	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; right shifted multiplier in Y
.230e	a8		tay				tay
.230f	74 3e		stz $3e,x			stz 	NSMantissa0,x 				; zero the result (already 8 bit constant)
.2311					_FI8MLoop:
.2311	98		tya				tya 								; shift right shifter right into carry
.2312	4a		lsr a				lsr 	a
.2313	a8		tay				tay
.2314	90 0d		bcc $2323			bcc 	_FI8MNoAdd
.2316	18		clc				clc
.2317	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.2319	75 3f		adc $3f,x			adc 	NSMantissa0+1,x
.231b	95 3e		sta $3e,x			sta 	NSMantissa0,x
.231d	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.231f	75 4b		adc $4b,x			adc 	NSMantissa1+1,x
.2321	95 4a		sta $4a,x			sta 	NSMantissa1,x
.2323					_FI8MNoAdd:
.2323	16 3f		asl $3f,x			asl 	NSMantissa0+1,x 			; shift adder left
.2325	36 4b		rol $4b,x			rol 	NSMantissa1+1,x
.2327	c0 00		cpy #$00			cpy 	#0
.2329	d0 e6		bne $2311			bne 	_FI8MLoop 					; until right shifter zero.
.232b	7a		ply				ply
.232c	60		rts				rts
.232d					FloatMultiply:
.232d	ca		dex				dex
.232e	b5 6e		lda $6e,x			lda 	NSExponent,x 				; can use optimised ?
.2330	15 6f		ora $6f,x			ora 	NSExponent+1,x
.2332	15 62		ora $62,x			ora 	NSMantissa3,x
.2334	15 63		ora $63,x			ora 	NSMantissa3+1,x
.2336	d0 21		bne $2359			bne 	_FMUseFloat
.2338	b5 32		lda $32,x			lda 	NSStatus,x 					; check if it is 8 bit unsigned
.233a	15 33		ora $33,x			ora 	NSStatus+1,x
.233c	29 80		and #$80			and 	#$80
.233e	15 62		ora $62,x			ora 	NSMantissa3,x
.2340	15 56		ora $56,x			ora 	NSMantissa2,x
.2342	15 4a		ora $4a,x			ora 	NSMantissa1,x
.2344	15 63		ora $63,x			ora 	NSMantissa3+1,x
.2346	15 57		ora $57,x			ora 	NSMantissa2+1,x
.2348	15 4b		ora $4b,x			ora 	NSMantissa1+1,x
.234a	d0 04		bne $2350			bne 	_FMInt32
.234c	20 0b 23	jsr $230b			jsr 	FloatInt8Multiply 			; use fast 8x8 multiply.
.234f	60		rts				rts
.2350					_FMInt32:
.2350	20 7a 23	jsr $237a			jsr 	FloatMultiplyShort			; use the int32 one.
.2353	18		clc				clc 								; fix it up if gone out of range
.2354	75 6e		adc $6e,x			adc 	NSExponent,x
.2356	95 6e		sta $6e,x			sta 	NSExponent,x
.2358	60		rts				rts
.2359					_FMUseFloat:
.2359	20 c2 23	jsr $23c2			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.235c	f0 18		beq $2376			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.235e	e8		inx				inx
.235f	20 c2 23	jsr $23c2			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.2362	ca		dex				dex
.2363	c9 00		cmp #$00			cmp 	#0
.2365	f0 0c		beq $2373			beq 	_FDSetZero
.2367	20 7a 23	jsr $237a			jsr 	FloatMultiplyShort 			; calculate the result.
.236a	75 6e		adc $6e,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.236c	18		clc				clc
.236d	75 6f		adc $6f,x			adc 	NSExponent+1,x
.236f	95 6e		sta $6e,x			sta 	NSExponent,x
.2371	80 03		bra $2376			bra 	_FDExit
.2373					_FDSetZero:
.2373	20 6d 26	jsr $266d			jsr 	FloatSetZero 				; return 0
.2376					_FDExit:
.2376	20 c2 23	jsr $23c2			jsr 	FloatNormalise 				; normalise the result
.2379	60		rts				rts
.237a					FloatMultiplyShort:
.237a	5a		phy				phy 								; save Y
.237b	20 50 26	jsr $2650			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.237e	20 69 26	jsr $2669			jsr 	FloatSetZeroMantissaOnly 	; set mantissa S[X] to zero
.2381	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.2383					_I32MLoop:
.2383	b5 40		lda $40,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.2385	15 4c		ora $4c,x			ora 	NSMantissa1+2,x
.2387	15 58		ora $58,x			ora 	NSMantissa2+2,x
.2389	15 64		ora $64,x			ora 	NSMantissa3+2,x
.238b	f0 25		beq $23b2			beq 	_I32MExit 					; exit if zero
.238d	b5 40		lda $40,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.238f	29 01		and #$01			and 	#1
.2391	f0 0d		beq $23a0			beq 	_I32MNoAdd
.2393	20 f9 23	jsr $23f9			jsr 	FloatAddTopTwoStack 		; if so add S[X+1] to S[X+0]
.2396	b5 62		lda $62,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.2398	10 06		bpl $23a0			bpl 	_I32MNoAdd
.239a					_I32ShiftRight:
.239a	20 86 26	jsr $2686			jsr 	FloatShiftRight 			; shift S[X] right
.239d	c8		iny				iny 								; increment shift count
.239e	80 09		bra $23a9			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.23a0					_I32MNoAdd:
.23a0	34 63		bit $63,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.23a2	70 f6		bvs $239a			bvs 	_I32ShiftRight 				; instead.
.23a4	e8		inx				inx
.23a5	20 7c 26	jsr $267c			jsr 	FloatShiftLeft 				; shift additive S[X+1] left
.23a8	ca		dex				dex
.23a9					_I32MShiftUpper:
.23a9	e8		inx				inx 								; shift S[X+2] right
.23aa	e8		inx				inx
.23ab	20 86 26	jsr $2686			jsr 	FloatShiftRight
.23ae	ca		dex				dex
.23af	ca		dex				dex
.23b0	80 d1		bra $2383			bra 	_I32MLoop 					; try again.
.23b2					_I32MExit:
.23b2	20 b8 23	jsr $23b8			jsr 	FloatCalculateSign
.23b5	98		tya				tya 								; shift in A
.23b6	7a		ply				ply 								; restore Y and exit
.23b7	60		rts				rts
.23b8					FloatCalculateSign:
.23b8	b5 32		lda $32,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.23ba	16 32		asl $32,x			asl 	NSStatus,x 					; shift result left
.23bc	55 33		eor $33,x			eor 	NSStatus+1,x
.23be	0a		asl a				asl 	a 							; shift bit 7 into carry
.23bf	76 32		ror $32,x			ror 	NSStatus,x 					; shift right into status byte.
.23c1	60		rts				rts
.23c2					FloatNormalise:
.23c2	20 8f 26	jsr $268f			jsr 	FloatIsZero 				; if zero exit
.23c5	d0 07		bne $23ce			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.23c7	16 32		asl $32,x			asl 	NSStatus,x 					; clear the sign bit.
.23c9	76 32		ror $32,x			ror 	NSStatus,x 					; (no -0)
.23cb	a9 00		lda #$00			lda 	#0 							; set Z flag
.23cd	60		rts				rts
.23ce					_NSNormaliseOptimise:
.23ce	b5 62		lda $62,x			lda 	NSMantissa3,x 				; upper byte zero ?
.23d0	d0 19		bne $23eb			bne 	_NSNormaliseLoop
.23d2	b5 56		lda $56,x			lda 	NSMantissa2,x 				; byte normalise
.23d4	30 15		bmi $23eb			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.23d6	95 62		sta $62,x			sta 	NSMantissa3,x
.23d8	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.23da	95 56		sta $56,x			sta 	NSMantissa2,x
.23dc	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.23de	95 4a		sta $4a,x			sta 	NSMantissa1,x
.23e0	74 3e		stz $3e,x			stz 	NSMantissa0,x
.23e2	b5 6e		lda $6e,x			lda 	NSExponent,x
.23e4	38		sec				sec
.23e5	e9 08		sbc #$08			sbc 	#8
.23e7	95 6e		sta $6e,x			sta 	NSExponent,x
.23e9	80 e3		bra $23ce			bra 	_NSNormaliseOptimise
.23eb					_NSNormaliseLoop:
.23eb	34 62		bit $62,x			bit 	NSMantissa3,x 				; bit 30 set ?
.23ed	70 07		bvs $23f6			bvs 	_NSNExit 					; exit if so with Z flag clear
.23ef	20 7c 26	jsr $267c			jsr 	FloatShiftLeft 				; shift mantissa left
.23f2	d6 6e		dec $6e,x			dec 	NSExponent,x 				; adjust exponent
.23f4	80 f5		bra $23eb			bra 	_NSNormaliseLoop
.23f6					_NSNExit:
.23f6	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.23f8	60		rts				rts
.23f9					FloatAddTopTwoStack:
.23f9	18		clc				clc
.23fa	b5 3e		lda $3e,x			lda		NSMantissa0,x
.23fc	75 3f		adc $3f,x			adc 		NSMantissa0+1,x
.23fe	95 3e		sta $3e,x			sta 	NSMantissa0,x
.2400	b5 4a		lda $4a,x			lda		NSMantissa1,x
.2402	75 4b		adc $4b,x			adc 		NSMantissa1+1,x
.2404	95 4a		sta $4a,x			sta 	NSMantissa1,x
.2406	b5 56		lda $56,x			lda		NSMantissa2,x
.2408	75 57		adc $57,x			adc 		NSMantissa2+1,x
.240a	95 56		sta $56,x			sta 	NSMantissa2,x
.240c	b5 62		lda $62,x			lda		NSMantissa3,x
.240e	75 63		adc $63,x			adc 		NSMantissa3+1,x
.2410	95 62		sta $62,x			sta 	NSMantissa3,x
.2412	60		rts				rts
.2413					FloatSubTopTwoStack:
.2413	38		sec				sec
.2414	b5 3e		lda $3e,x			lda		NSMantissa0,x
.2416	f5 3f		sbc $3f,x			sbc 		NSMantissa0+1,x
.2418	95 3e		sta $3e,x			sta 	NSMantissa0,x
.241a	b5 4a		lda $4a,x			lda		NSMantissa1,x
.241c	f5 4b		sbc $4b,x			sbc 		NSMantissa1+1,x
.241e	95 4a		sta $4a,x			sta 	NSMantissa1,x
.2420	b5 56		lda $56,x			lda		NSMantissa2,x
.2422	f5 57		sbc $57,x			sbc 		NSMantissa2+1,x
.2424	95 56		sta $56,x			sta 	NSMantissa2,x
.2426	b5 62		lda $62,x			lda		NSMantissa3,x
.2428	f5 63		sbc $63,x			sbc 		NSMantissa3+1,x
.242a	95 62		sta $62,x			sta 	NSMantissa3,x
.242c	60		rts				rts
.242d					FloatInt32Add:
.242d	b5 32		lda $32,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.242f	55 33		eor $33,x			eor 	NSStatus+1,x
.2431	30 04		bmi $2437			bmi 	_DiffSigns
.2433	20 f9 23	jsr $23f9			jsr		FloatAddTopTwoStack
.2436	60		rts				rts
.2437					_DiffSigns:
.2437	20 13 24	jsr $2413			jsr 	FloatSubTopTwoStack 		; do a physical subtraction
.243a	34 62		bit $62,x			bit 	NSMantissa3,x 				; result is +ve, okay
.243c	10 07		bpl $2445			bpl 	_AddExit
.243e	b5 33		lda $33,x			lda 	NSStatus+1,x 				; sign is that of 11th value
.2440	95 32		sta $32,x			sta 	NSStatus,x
.2442	20 36 26	jsr $2636			jsr 	FloatNegateMantissa 		; negate the mantissa and exit
.2445					_AddExit:
.2445	20 8f 26	jsr $268f			jsr 	FloatIsZero 				; check for -0
.2448	d0 02		bne $244c			bne 	_AddNonZero
.244a	74 32		stz $32,x			stz 	NSStatus,x
.244c					_AddNonZero:
.244c	60		rts				rts
=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.244d					FloatEncodeStart:
.244d	38		sec				sec
.244e	80 01		bra $2451			bra 	FloatEncodeContinue+1
.2450					FloatEncodeContinue:
.2450	18		clc				clc
.2451					FloatEncode:
.2451	08		php				php 								; save reset flag.
.2452	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.2454	f0 15		beq $246b			beq 	_ENIsOkay
.2456	c9 30		cmp #$30			cmp 	#"0"
.2458	90 04		bcc $245e			bcc 	_ENBadNumber
.245a	c9 3a		cmp #$3a			cmp 	#"9"+1
.245c	90 0d		bcc $246b			bcc 	_ENIsOkay
.245e					_ENBadNumber:
.245e	28		plp				plp 								; throw saved reset
.245f	ad 37 06	lda $0637			lda 	encodeState 				; if in decimal mode, construct final number
.2462	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.2464	d0 03		bne $2469			bne 	_ENFail
.2466	4c e3 24	jmp $24e3			jmp 	_ENConstructFinal
.2469					_ENFail:
.2469	18		clc				clc 								; not allowed
.246a	60		rts				rts
.246b					_ENIsOkay:
.246b	28		plp				plp 								; are we restarting
.246c	90 15		bcc $2483			bcc 	_ENNoRestart
.246e					_ENStartEncode:
.246e	c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.2470	f0 0c		beq $247e			beq 	_ENFirstDP
.2472	29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.2474	20 6f 26	jsr $266f			jsr 	FloatSetByte 				; in single byte mode.
.2477	a9 01		lda #$01			lda 	#ESTA_Low
.2479					_ENExitChange:
.2479	8d 37 06	sta $0637			sta 	encodeState 				; save new state
.247c	38		sec				sec
.247d	60		rts				rts
.247e					_ENFirstDP:
.247e	20 6d 26	jsr $266d			jsr 	FloatSetZero 				; clear integer part
.2481	80 3c		bra $24bf			bra 	_ESTASwitchFloat			; go straight to float and exi
.2483					_ENNoRestart:
.2483	48		pha				pha 								; save digit or DP on stack.
.2484	ad 37 06	lda $0637			lda 	encodeState 				; get current state
.2487	c9 01		cmp #$01			cmp 	#ESTA_Low
.2489	f0 09		beq $2494			beq  	_ESTALowState
.248b	c9 02		cmp #$02			cmp 	#ESTA_High
.248d	f0 26		beq $24b5			beq 	_ESTAHighState
.248f	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.2491	f0 38		beq $24cb			beq 	_ESTADecimalState
>2493	db						.byte 	$DB 						; causes a break in the emulator
.2494					_ESTALowState:
.2494	68		pla				pla 								; get value back
.2495	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.2497	f0 26		beq $24bf			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.2499	29 0f		and #$0f			and 	#15 						; make digit
.249b	8d 38 06	sta $0638			sta 	digitTemp 					; save it.
.249e	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.24a0	0a		asl a				asl 	a
.24a1	0a		asl a				asl 	a
.24a2	75 3e		adc $3e,x			adc 	NSMantissa0,x
.24a4	0a		asl a				asl 	a
.24a5	6d 38 06	adc $0638			adc 	digitTemp
.24a8	95 3e		sta $3e,x			sta 	NSMantissa0,x
.24aa	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.24ac	90 05		bcc $24b3			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.24ae	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.24b0	8d 37 06	sta $0637			sta 	encodeState
.24b3					_ESTANoSwitch:
.24b3	38		sec				sec
.24b4	60		rts				rts
.24b5					_ESTAHighState:
.24b5	68		pla				pla 								; get value back
.24b6	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.24b8	f0 05		beq $24bf			beq 	_ESTASwitchFloat
.24ba	20 15 25	jsr $2515			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.24bd	38		sec				sec
.24be	60		rts				rts
.24bf					_ESTASwitchFloat:
.24bf	9c 39 06	stz $0639			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.24c2	e8		inx				inx 								; zero the decimal additive.
.24c3	20 6d 26	jsr $266d			jsr 	FloatSetZero
.24c6	ca		dex				dex
.24c7	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.24c9	80 ae		bra $2479			bra 	_ENExitChange
.24cb					_ESTADecimalState:
.24cb	68		pla				pla 								; digit.
.24cc	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 11th decimal point.
.24ce	f0 99		beq $2469			beq 	_ENFail
.24d0	e8		inx				inx 								; put digit into fractional part of X+1
.24d1	20 15 25	jsr $2515			jsr 	ESTAShiftDigitIntoMantissa
.24d4	ca		dex				dex
.24d5	ee 39 06	inc $0639			inc 	decimalCount 				; bump the count of decimals
.24d8	ad 39 06	lda $0639			lda 	decimalCount 				; too many decimal digits.
.24db	c9 0b		cmp #$0b			cmp 	#11
.24dd	f0 02		beq $24e1			beq 	_ESTADSFail
.24df	38		sec				sec
.24e0	60		rts				rts
.24e1					_ESTADSFail:
.24e1	18		clc				clc
.24e2	60		rts				rts
.24e3					_ENConstructFinal:
.24e3	ad 39 06	lda $0639			lda 	decimalCount 				; get decimal count
.24e6	f0 2b		beq $2513			beq 	_ENCFExit 					; no decimals
.24e8	5a		phy				phy
.24e9	0a		asl a				asl 	a 							; x 4 and CLC
.24ea	0a		asl a				asl 	a
.24eb	6d 39 06	adc $0639			adc 	decimalCount
.24ee	a8		tay				tay
.24ef	b9 7a 21	lda $217a,y			lda 	FloatScalarTable-5,y 		; copy decimal scalar to X+2
.24f2	95 40		sta $40,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.24f4	b9 7b 21	lda $217b,y			lda 	FloatScalarTable-5+1,y
.24f7	95 4c		sta $4c,x			sta 	NSMantissa1+2,x
.24f9	b9 7c 21	lda $217c,y			lda 	FloatScalarTable-5+2,y
.24fc	95 58		sta $58,x			sta 	NSMantissa2+2,x
.24fe	b9 7d 21	lda $217d,y			lda 	FloatScalarTable-5+3,y
.2501	95 64		sta $64,x			sta 	NSMantissa3+2,x
.2503	b9 7e 21	lda $217e,y			lda 	FloatScalarTable-5+4,y
.2506	95 70		sta $70,x			sta 	NSExponent+2,x
.2508	74 34		stz $34,x			stz 	NSStatus+2,x 				; make +ve
.250a	e8		inx				inx 								; multiply decimal const by decimal scalar
.250b	e8		inx				inx
.250c	20 2d 23	jsr $232d			jsr 	FloatMultiply
.250f	20 91 20	jsr $2091			jsr 	FloatAdd 					; add to integer part.
.2512	7a		ply				ply
.2513					_ENCFExit:
.2513	18		clc				clc 								; reject the digit.
.2514	60		rts				rts
.2515					ESTAShiftDigitIntoMantissa:
.2515	29 0f		and #$0f			and 	#15 						; save digit
.2517	48		pha				pha
.2518	b5 62		lda $62,x			lda 	NSMantissa3,x 				; push mantissa on stack
.251a	48		pha				pha
.251b	b5 56		lda $56,x			lda 	NSMantissa2,x
.251d	48		pha				pha
.251e	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.2520	48		pha				pha
.2521	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.2523	48		pha				pha
.2524	20 7c 26	jsr $267c			jsr 	FloatShiftLeft 				; x 2
.2527	20 7c 26	jsr $267c			jsr 	FloatShiftLeft 				; x 4
.252a	18		clc				clc 								; pop mantissa and add
.252b	68		pla				pla
.252c	75 3e		adc $3e,x			adc 	NSMantissa0,x
.252e	95 3e		sta $3e,x			sta 	NSMantissa0,x
.2530	68		pla				pla
.2531	75 4a		adc $4a,x			adc 	NSMantissa1,x
.2533	95 4a		sta $4a,x			sta 	NSMantissa1,x
.2535	68		pla				pla
.2536	75 56		adc $56,x			adc 	NSMantissa2,x
.2538	95 56		sta $56,x			sta 	NSMantissa2,x
.253a	68		pla				pla
.253b	75 62		adc $62,x			adc 	NSMantissa3,x
.253d	95 62		sta $62,x			sta 	NSMantissa3,x 				; x 5
.253f	20 7c 26	jsr $267c			jsr 	FloatShiftLeft 				; x 10
.2542	68		pla				pla 								; add digit
.2543	18		clc				clc
.2544	75 3e		adc $3e,x			adc 	NSMantissa0,x
.2546	95 3e		sta $3e,x			sta 	NSMantissa0,x
.2548	90 0a		bcc $2554			bcc 	_ESTASDExit
.254a	f6 4a		inc $4a,x			inc 	NSMantissa1,x
.254c	d0 06		bne $2554			bne 	_ESTASDExit
.254e	f6 56		inc $56,x			inc 	NSMantissa2,x
.2550	d0 02		bne $2554			bne 	_ESTASDExit
.2552	f6 62		inc $62,x			inc 	NSMantissa3,x
.2554					_ESTASDExit:
.2554	60		rts				rts
.0637					encodeState:
>0637							.fill 	1
.0638					digitTemp:
>0638							.fill 	1
.0639					decimalCount:
>0639							.fill 	1
.2555					FloatToString:
.2555	da		phx				phx
.2556	5a		phy				phy 								; save code position
.2557	8d 3a 06	sta $063a			sta 	decimalPlaces	 			; save number of DPs.
.255a	9c 3b 06	stz $063b			stz 	dbOffset 					; offset into decimal buffer = start.
.255d	b5 32		lda $32,x			lda 	NSStatus,x  				; is it -ve.
.255f	10 08		bpl $2569			bpl 	_CNTSNotNegative
.2561	29 7f		and #$7f			and 	#$7F 						; make +ve
.2563	95 32		sta $32,x			sta 	NSStatus,x
.2565	a9 2d		lda #$2d			lda 	#"-"
.2567	80 02		bra $256b			bra 	_CNTMain
.2569					_CNTSNotNegative:
.2569	a9 20		lda #$20			lda 	#" "
.256b					_CNTMain:
.256b	20 cd 25	jsr $25cd			jsr 	WriteDecimalBuffer
.256e	b5 6e		lda $6e,x			lda 	NSExponent,x 				; check if decimal
.2570	f0 0d		beq $257f			beq 	_CNTSNotFloat
.2572	e8		inx				inx 								; round up so we don't get too many 6.999999
.2573	a9 01		lda #$01			lda 	#1
.2575	20 6f 26	jsr $266f			jsr 	FloatSetByte
.2578	b5 6d		lda $6d,x			lda		NSExponent-1,x
.257a	95 6e		sta $6e,x			sta 	NSExponent,x
.257c	20 91 20	jsr $2091			jsr 	FloatAdd
.257f					_CNTSNotFloat:
.257f	20 af 25	jsr $25af			jsr 	MakePlusTwoString 			; do the integer part.
.2582	20 4d 22	jsr $224d			jsr 	FloatFractionalPart 		; get the fractional part
.2585	20 c2 23	jsr $23c2			jsr 	FloatNormalise					; normalise , exit if zero
.2588	f0 22		beq $25ac			beq 	_CNTSExit
.258a	a9 2e		lda #$2e			lda 	#"."
.258c	20 cd 25	jsr $25cd			jsr 	WriteDecimalBuffer 			; write decimal place
.258f					_CNTSDecimal:
.258f	ce 3a 06	dec $063a			dec 	decimalPlaces 				; done all the decimals
.2592	30 18		bmi $25ac			bmi 	_CNTSExit
.2594	e8		inx				inx 								; x 10.0
.2595	a9 0a		lda #$0a			lda 	#10
.2597	20 6f 26	jsr $266f			jsr 	FloatSetByte
.259a	20 2d 23	jsr $232d			jsr 	FloatMultiply
.259d	20 af 25	jsr $25af			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.25a0	20 4d 22	jsr $224d			jsr 	FloatFractionalPart 		; get the fractional part
.25a3	20 c2 23	jsr $23c2			jsr 	FloatNormalise 				; normalise it.
.25a6	b5 6e		lda $6e,x			lda 	NSExponent,x 				; gone to zero, exit.
.25a8	c9 d0		cmp #$d0			cmp 	#$D0 						; very small remainder, so don't bother.
.25aa	b0 e3		bcs $258f			bcs 	_CNTSDecimal 				; keep going.
.25ac					_CNTSExit:
.25ac	7a		ply				ply
.25ad	fa		plx				plx
.25ae	60		rts				rts
.25af					MakePlusTwoString:
.25af	da		phx				phx
.25b0	20 50 26	jsr $2650			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.25b3	e8		inx				inx 								; access it
.25b4	e8		inx				inx
.25b5	20 a8 22	jsr $22a8			jsr 	FloatIntegerPart 			; make it an integer
.25b8	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.25ba	20 ec 25	jsr $25ec			jsr 	ConvertInt32
.25bd	a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.25bf					_MPTSCopy:
.25bf	bd 15 06	lda $0615,x			lda 	numberBuffer,x
.25c2	20 cd 25	jsr $25cd			jsr 	WriteDecimalBuffer
.25c5	e8		inx				inx
.25c6	bd 15 06	lda $0615,x			lda 	numberBuffer,x
.25c9	d0 f4		bne $25bf			bne 	_MPTSCopy
.25cb	fa		plx				plx
.25cc	60		rts				rts
.25cd					WriteDecimalBuffer:
.25cd	da		phx				phx
.25ce	ae 3b 06	ldx $063b			ldx 	dbOffset
.25d1	9d 3c 06	sta $063c,x			sta 	decimalBuffer,x
.25d4	9e 3d 06	stz $063d,x			stz 	decimalBuffer+1,x
.25d7	ee 3b 06	inc $063b			inc 	dbOffset
.25da	fa		plx				plx
.25db	60		rts				rts
.063a					decimalPlaces:
>063a							.fill 	1
.063b					dbOffset:
>063b							.fill 	1
.063c					decimalBuffer:
>063c							.fill 	32
.25dc					ConvertInt16:
.25dc	85 3e		sta $3e				sta 	NSMantissa0 				; set up as 32 bit conversion
.25de	86 4a		stx $4a				stx 	NSMantissa1
.25e0	64 56		stz $56				stz 	NSMantissa2
.25e2	64 62		stz $62				stz 	NSMantissa3
.25e4	64 32		stz $32				stz 	NSStatus 					; positive integer
.25e6	a2 00		ldx #$00			ldx 	#0 							; stack level
.25e8	a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.25ea	80 00		bra $25ec			bra 	ConvertInt32
.25ec					ConvertInt32:
.25ec	5a		phy				phy
.25ed	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.25ef	24 32		bit $32				bit 	NSStatus 					; output a - if not negative.
.25f1	10 08		bpl $25fb			bpl 	_CI32NotNeg
.25f3	48		pha				pha
.25f4	a9 2d		lda #$2d			lda 	#'-'
.25f6	99 15 06	sta $0615,y			sta 	numberBuffer,y
.25f9	c8		iny				iny
.25fa	68		pla				pla
.25fb					_CI32NotNeg:
.25fb	20 09 26	jsr $2609			jsr 	_CI32DivideConvert 			; recursive conversion
.25fe	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.2600	99 15 06	sta $0615,y			sta 	numberBuffer,y
.2603	7a		ply				ply
.2604	a2 06		ldx #$06			ldx 	#numberBuffer >> 8 			; return address in XA
.2606	a9 15		lda #$15			lda 	#numberBuffer & $FF
.2608	60		rts				rts
.2609					_CI32DivideConvert:
.2609	e8		inx				inx 								; write to next slot up
.260a	20 6f 26	jsr $266f			jsr 	FloatSetByte 		 		; write the base out.
.260d	ca		dex				dex
.260e	20 03 22	jsr $2203			jsr 	Int32Divide 				; divide
.2611	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; save remainder
.2613	48		pha				pha
.2614	20 f2 21	jsr $21f2			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.2617	20 8f 26	jsr $268f			jsr 	FloatIsZero 				; is it zero ?
.261a	f0 05		beq $2621			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.261c	b5 3f		lda $3f,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.261e	20 09 26	jsr $2609			jsr 	_CI32DivideConvert 			; and recusrively call.
.2621					_CI32NoRecurse:
.2621	68		pla				pla 								; remainder
.2622	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.2624	90 02		bcc $2628			bcc 	_CI32NotHex
.2626	69 26		adc #$26			adc 	#6+32
.2628					_CI32NotHex:
.2628	69 30		adc #$30			adc 	#48
.262a	99 15 06	sta $0615,y			sta 	numberBuffer,y 				; write out and exit
.262d	c8		iny				iny
.262e	60		rts				rts
.262f					FloatNegate:
.262f	b5 32		lda $32,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.2631	49 80		eor #$80			eor 	#$80  						; toggle the negative flag
.2633	95 32		sta $32,x			sta 	NSStatus,x
.2635	60		rts				rts
.2636					FloatNegateMantissa:
.2636	38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.2637	a9 00		lda #$00			lda 	#0
.2639	f5 3e		sbc $3e,x			sbc 	NSMantissa0,x
.263b	95 3e		sta $3e,x			sta 	NSMantissa0,x
.263d	a9 00		lda #$00			lda 	#0
.263f	f5 4a		sbc $4a,x			sbc 	NSMantissa1,x
.2641	95 4a		sta $4a,x			sta 	NSMantissa1,x
.2643	a9 00		lda #$00			lda 	#0
.2645	f5 56		sbc $56,x			sbc 	NSMantissa2,x
.2647	95 56		sta $56,x			sta 	NSMantissa2,x
.2649	a9 00		lda #$00			lda 	#0
.264b	f5 62		sbc $62,x			sbc 	NSMantissa3,x
.264d	95 62		sta $62,x			sta 	NSMantissa3,x
.264f	60		rts				rts
.2650					FloatShiftUpTwo:
.2650	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.2652	95 40		sta $40,x			sta 	NSMantissa0+2,x
.2654	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.2656	95 4c		sta $4c,x			sta 	NSMantissa1+2,x
.2658	b5 56		lda $56,x			lda 	NSMantissa2,x
.265a	95 58		sta $58,x			sta 	NSMantissa2+2,x
.265c	b5 62		lda $62,x			lda 	NSMantissa3,x
.265e	95 64		sta $64,x			sta 	NSMantissa3+2,x
.2660	b5 6e		lda $6e,x			lda 	NSExponent,x
.2662	95 70		sta $70,x			sta 	NSExponent+2,x
.2664	b5 32		lda $32,x			lda 	NSStatus,x
.2666	95 34		sta $34,x			sta 	NSStatus+2,x
.2668	60		rts				rts
.2669					FloatSetZeroMantissaOnly:
.2669	74 3e		stz $3e,x			stz 	NSMantissa0,x
.266b	80 08		bra $2675			bra 	FloatZero13
.266d					FloatSetZero:
.266d	a9 00		lda #$00			lda 	#0
.266f					FloatSetByte:
.266f	74 6e		stz $6e,x			stz 	NSExponent,x 				; zero exponent, as +ve integer value.
.2671					FloatSetMantissa:
.2671	95 3e		sta $3e,x			sta 	NSMantissa0,x 				; zero mantissa
.2673	74 32		stz $32,x			stz 	NSStatus,x
.2675					FloatZero13:
.2675	74 4a		stz $4a,x			stz 	NSMantissa1,x
.2677	74 56		stz $56,x			stz 	NSMantissa2,x
.2679	74 62		stz $62,x			stz 	NSMantissa3,x
.267b	60		rts				rts
.267c					FloatShiftLeft:
.267c	18		clc				clc
.267d					FloatRotateLeft:
.267d	36 3e		rol $3e,x			rol 	NSMantissa0,x
.267f	36 4a		rol $4a,x			rol		NSMantissa1,x
.2681	36 56		rol $56,x			rol		NSMantissa2,x
.2683	36 62		rol $62,x			rol		NSMantissa3,x
.2685	60		rts				rts
.2686					FloatShiftRight:
.2686	56 62		lsr $62,x			lsr 	NSMantissa3,x
.2688	76 56		ror $56,x			ror		NSMantissa2,x
.268a	76 4a		ror $4a,x			ror		NSMantissa1,x
.268c	76 3e		ror $3e,x			ror		NSMantissa0,x
.268e	60		rts				rts
.268f					FloatIsZero:
.268f	b5 62		lda $62,x			lda 	NSMantissa3,x
.2691	15 56		ora $56,x			ora		NSMantissa2,x
.2693	15 4a		ora $4a,x			ora		NSMantissa1,x
.2695	15 3e		ora $3e,x			ora		NSMantissa0,x
.2697	60		rts				rts

;******  Processing input file: testing/testend.asm

.2698					EndProgram:
>2698	01 08 0c 08 0a 00 4e 20				.binary "code/tokenised.dat"
>26a0	b2 20 31 34 00 15 08 14 00 ce 86 20 33 00 32 08
>26b0	3c 00 99 20 c7 28 31 34 37 29 3b 22 48 45 4c 4c
>26c0	4f 20 57 4f 52 4c 44 20 21 22 00 4e 08 46 00 86
>26d0	20 42 58 28 4e 29 3a 86 20 42 59 28 4e 29 3a 86
>26e0	20 42 43 28 4e 29 00 62 08 4b 00 86 20 44 58 28
>26f0	4e 29 3a 86 20 44 59 28 4e 29 00 70 08 50 00 81
>2700	20 42 b2 30 20 a4 20 4e 00 89 08 5a 00 42 58 28
>2710	42 29 b2 b5 28 bb 28 31 29 ac 34 30 29 ac 32 aa
>2720	31 00 a2 08 64 00 42 59 28 42 29 b2 b5 28 bb 28
>2730	31 29 ac 33 30 29 ac 32 35 36 00 b9 08 69 00 42
>2740	43 28 42 29 b2 b5 28 bb 28 31 29 ac 31 34 29 aa
>2750	31 00 cd 08 6a 00 44 58 28 42 29 b2 b5 28 bb 28
>2760	31 29 ac 32 29 00 e3 08 6c 00 8f 20 44 59 28 42
>2770	29 b2 b5 28 bb 28 31 29 ac 32 29 00 ef 08 6d 00
>2780	44 59 28 42 29 b2 31 00 f7 08 6e 00 82 20 42 00
>2790	fd 08 78 00 8f 00 11 09 82 00 81 59 b2 30 a4 32
>27a0	39 3a 81 58 b2 30 a4 33 39 00 27 09 8c 00 51 b2
>27b0	59 ac 32 35 36 aa 58 ac 32 aa 34 35 30 35 36 00
>27c0	3f 09 96 00 ce 84 20 31 2c 51 2c 38 31 3a ce 84
>27d0	31 2c 51 aa 31 2c 30 00 48 09 a0 00 82 58 2c 59
>27e0	00 54 09 c8 00 81 20 42 b2 31 a4 4e 00 71 09 d2
>27f0	00 ce 84 20 31 2c 34 35 30 35 36 aa 42 59 28 42
>2800	29 aa 42 58 28 42 29 2c 30 00 7f 09 e6 00 44 58
>2810	42 b2 44 58 28 42 29 00 90 09 f0 00 8b 44 58 42
>2820	b2 30 a7 8d 31 30 31 30 00 a1 09 fa 00 8b 44 58
>2830	42 b2 31 a7 8d 31 30 34 30 00 af 09 ff 00 44 59
>2840	42 b2 44 59 28 42 29 00 c0 09 04 01 8b 44 59 42
>2850	b2 30 a7 8d 31 30 37 30 00 d1 09 0e 01 8b 44 59
>2860	42 b2 31 a7 8d 31 31 30 30 00 f2 09 18 01 ce 84
>2870	20 31 2c 34 35 30 35 36 aa 42 59 28 42 29 aa 42
>2880	58 28 42 29 2c 42 43 28 42 29 00 f9 09 22 01 82
>2890	42 00 03 0a 2c 01 89 20 32 30 30 00 09 0a e8 03
>28a0	8f 00 17 0a f2 03 42 58 42 b2 42 58 28 42 29 00
>28b0	2c 0a f3 03 8b 42 58 42 b2 31 a7 44 58 28 42 29
>28c0	b2 31 3a 8e 00 3e 0a fc 03 42 58 28 42 29 b2 42
>28d0	58 42 ab 32 3a 8e 00 44 0a 06 04 8f 00 52 0a 10
>28e0	04 42 58 42 b2 42 58 28 42 29 00 72 0a 11 04 8b
>28f0	42 58 42 b2 37 39 a7 20 42 58 28 42 29 b2 37 37
>2900	3a 44 58 28 42 29 b2 30 3a 8e 00 84 0a 1a 04 42
>2910	58 28 42 29 b2 42 58 42 aa 32 3a 8e 00 8a 0a 24
>2920	04 8f 00 98 0a 2e 04 42 59 42 b2 42 59 28 42 29
>2930	00 ad 0a 2f 04 8b 42 59 42 b2 30 a7 44 59 28 42
>2940	29 b2 31 3a 8e 00 c1 0a 38 04 42 59 28 42 29 b2
>2950	42 59 42 ab 32 35 36 3a 8e 00 c7 0a 42 04 8f 00
>2960	d5 0a 4c 04 42 59 42 b2 42 59 28 42 29 00 f8 0a
>2970	4d 04 8b 42 59 42 b2 37 34 32 34 a7 42 59 28 42
>2980	29 b2 37 31 36 38 3a 44 59 28 42 29 b2 30 3a 8e
>2990	00 0c 0b 56 04 42 59 28 42 29 b2 42 59 42 aa 32
>29a0	35 36 3a 8e 00 00 00

;******  End of listing
