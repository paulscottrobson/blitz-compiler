
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass -c -Wall -o build/code.prg -L build/code.lst -l build/code.lbl /home/paulr/Projects/blitz-compiler/documents/../source/common-source/wrapper.asm testing/testing.asm /home/paulr/Projects/blitz-compiler/documents/../bin/compiler.library /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library testing/testend.asm
; Fri Oct  6 18:10:53 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../source/common-source/wrapper.asm

=$1000					CodeStart = $1000
=$22					ZeroPageMandatory = $22
=$400					MemoryStorage = $400
.1000	4c 03 10	jmp $1003			jmp 	WrapperBoot
.0022					codePtr:
>0022							.fill 	2
.0024					codePage:
>0024							.fill 	1
.0025					objPtr:
>0025							.fill 	2
.0027					objPage:
>0027							.fill 	1
.0028					zTemp0:
>0028							.fill 	2
.002a					zTemp1:
>002a							.fill 	2
.002c					zTemp2:
>002c							.fill 	2

;******  Processing input file: testing/testing.asm

=$8000					StartWorkSpace = $8000
=$9f00					EndWorkspace = $9F00
.1003					WrapperBoot:
.1003	a2 0d		ldx #$0d			ldx 	#APIDesc & $FF
.1005	a0 10		ldy #$10			ldy 	#APIDesc >> 8
.1007	20 b0 10	jsr $10b0			jsr 	StartCompiler
.100a	4c ff ff	jmp $ffff			jmp 	$FFFF
.100d					APIDesc:
>100d							.fill 	2
>100f	80						.byte 	StartWorkSpace >> 8 		; start of workspace for compiler
>1010	9f						.byte 	EndWorkspace >> 8 			; end of workspace for compiler

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/compiler.library

=$80					C64_END                  = $80 ; $80 end
=$81					C64_FOR                  = $81 ; $81 for
=$82					C64_NEXT                 = $82 ; $82 next
=$83					C64_DATA                 = $83 ; $83 data
=$84					C64_INPUTHASH            = $84 ; $84 input#
=$85					C64_INPUT                = $85 ; $85 input
=$86					C64_DIM                  = $86 ; $86 dim
=$87					C64_READ                 = $87 ; $87 read
=$88					C64_LET                  = $88 ; $88 let
=$89					C64_GOTO                 = $89 ; $89 goto
=$8a					C64_RUN                  = $8a ; $8a run
=$8b					C64_IF                   = $8b ; $8b if
=$8c					C64_RESTORE              = $8c ; $8c restore
=$8d					C64_GOSUB                = $8d ; $8d gosub
=$8e					C64_RETURN               = $8e ; $8e return
=$8f					C64_REM                  = $8f ; $8f rem
=$90					C64_STOP                 = $90 ; $90 stop
=$91					C64_ON                   = $91 ; $91 on
=$92					C64_WAIT                 = $92 ; $92 wait
=$93					C64_LOAD                 = $93 ; $93 load
=$94					C64_SAVE                 = $94 ; $94 save
=$95					C64_VERIFY               = $95 ; $95 verify
=$96					C64_DEF                  = $96 ; $96 def
=$97					C64_POKE                 = $97 ; $97 poke
=$98					C64_PRINTHASH            = $98 ; $98 print#
=$99					C64_PRINT                = $99 ; $99 print
=$9a					C64_CONT                 = $9a ; $9a cont
=$9b					C64_LIST                 = $9b ; $9b list
=$9c					C64_CLR                  = $9c ; $9c clr
=$9d					C64_CMD                  = $9d ; $9d cmd
=$9e					C64_SYS                  = $9e ; $9e sys
=$9f					C64_OPEN                 = $9f ; $9f open
=$a0					C64_CLOSE                = $a0 ; $a0 close
=$a1					C64_GET                  = $a1 ; $a1 get
=$a2					C64_NEW                  = $a2 ; $a2 new
=$a3					C64_TABLB                = $a3 ; $a3 tab(
=$a4					C64_TO                   = $a4 ; $a4 to
=$a5					C64_FN                   = $a5 ; $a5 fn
=$a6					C64_SPCLB                = $a6 ; $a6 spc(
=$a7					C64_THEN                 = $a7 ; $a7 then
=$a8					C64_NOT                  = $a8 ; $a8 not
=$a9					C64_STEP                 = $a9 ; $a9 step
=$aa					C64_PLUS                 = $aa ; $aa +
=$ab					C64_MINUS                = $ab ; $ab -
=$ac					C64_TIMES                = $ac ; $ac *
=$ad					C64_DIVIDE               = $ad ; $ad /
=$ae					C64_POWER                = $ae ; $ae ^
=$af					C64_AND                  = $af ; $af and
=$b0					C64_OR                   = $b0 ; $b0 or
=$b1					C64_GREATER              = $b1 ; $b1 >
=$b2					C64_EQUAL                = $b2 ; $b2 =
=$b3					C64_LESS                 = $b3 ; $b3 <
=$b4					C64_SGN                  = $b4 ; $b4 sgn
=$b5					C64_INT                  = $b5 ; $b5 int
=$b6					C64_ABS                  = $b6 ; $b6 abs
=$b7					C64_USR                  = $b7 ; $b7 usr
=$b8					C64_FRE                  = $b8 ; $b8 fre
=$b9					C64_POS                  = $b9 ; $b9 pos
=$ba					C64_SQR                  = $ba ; $ba sqr
=$bb					C64_RND                  = $bb ; $bb rnd
=$bc					C64_LOG                  = $bc ; $bc log
=$bd					C64_EXP                  = $bd ; $bd exp
=$be					C64_COS                  = $be ; $be cos
=$bf					C64_SIN                  = $bf ; $bf sin
=$c0					C64_TAN                  = $c0 ; $c0 tan
=$c1					C64_ATN                  = $c1 ; $c1 atn
=$c2					C64_PEEK                 = $c2 ; $c2 peek
=$c3					C64_LEN                  = $c3 ; $c3 len
=$c4					C64_STRDOLLAR            = $c4 ; $c4 str$
=$c5					C64_VAL                  = $c5 ; $c5 val
=$c6					C64_ASC                  = $c6 ; $c6 asc
=$c7					C64_CHRDOLLAR            = $c7 ; $c7 chr$
=$c8					C64_LEFTDOLLAR           = $c8 ; $c8 left$
=$c9					C64_RIGHTDOLLAR          = $c9 ; $c9 right$
=$ca					C64_MIDDOLLAR            = $ca ; $ca mid$
=$cb					C64_GO                   = $cb ; $cb go
=$ce80					C64_MON                  = $ce80 ; $ce80 mon
=$ce81					C64_DOS                  = $ce81 ; $ce81 dos
=$ce82					C64_OLD                  = $ce82 ; $ce82 old
=$ce83					C64_GEOS                 = $ce83 ; $ce83 geos
=$ce84					C64_VPOKE                = $ce84 ; $ce84 vpoke
=$ce85					C64_VLOAD                = $ce85 ; $ce85 vload
=$ce86					C64_SCREEN               = $ce86 ; $ce86 screen
=$ce87					C64_PSET                 = $ce87 ; $ce87 pset
=$ce88					C64_LINE                 = $ce88 ; $ce88 line
=$ce89					C64_FRAME                = $ce89 ; $ce89 frame
=$ce8a					C64_RECT                 = $ce8a ; $ce8a rect
=$ce8b					C64_CHAR                 = $ce8b ; $ce8b char
=$ce8c					C64_MOUSE                = $ce8c ; $ce8c mouse
=$ce8d					C64_COLOR                = $ce8d ; $ce8d color
=$ce8e					C64_TEST                 = $ce8e ; $ce8e test
=$ce8f					C64_RESET                = $ce8f ; $ce8f reset
=$ce90					C64_CLS                  = $ce90 ; $ce90 cls
=$ce91					C64_CODEX                = $ce91 ; $ce91 codex
=$ce92					C64_LOCATE               = $ce92 ; $ce92 locate
=$ce93					C64_BOOT                 = $ce93 ; $ce93 boot
=$ce94					C64_KEYMAP               = $ce94 ; $ce94 keymap
=$ce95					C64_BLOAD                = $ce95 ; $ce95 bload
=$ce96					C64_BVLOAD               = $ce96 ; $ce96 bvload
=$ce97					C64_BVERIFY              = $ce97 ; $ce97 bverify
=$ce98					C64_BANK                 = $ce98 ; $ce98 bank
=$ce99					C64_FMINIT               = $ce99 ; $ce99 fminit
=$ce9a					C64_FMNOTE               = $ce9a ; $ce9a fmnote
=$ce9b					C64_FMDRUM               = $ce9b ; $ce9b fmdrum
=$ce9c					C64_FMINST               = $ce9c ; $ce9c fminst
=$ce9d					C64_FMVIB                = $ce9d ; $ce9d fmvib
=$ce9e					C64_FMFREQ               = $ce9e ; $ce9e fmfreq
=$ce9f					C64_FMVOL                = $ce9f ; $ce9f fmvol
=$cea0					C64_FMPAN                = $cea0 ; $cea0 fmpan
=$cea1					C64_FMPLAY               = $cea1 ; $cea1 fmplay
=$cea2					C64_FMCHORD              = $cea2 ; $cea2 fmchord
=$cea3					C64_FMPOKE               = $cea3 ; $cea3 fmpoke
=$cea4					C64_PSGINIT              = $cea4 ; $cea4 psginit
=$cea5					C64_PSGNOTE              = $cea5 ; $cea5 psgnote
=$cea6					C64_PSGVOL               = $cea6 ; $cea6 psgvol
=$cea7					C64_PSGWAV               = $cea7 ; $cea7 psgwav
=$cea8					C64_PSGFREQ              = $cea8 ; $cea8 psgfreq
=$cea9					C64_PSGPAN               = $cea9 ; $cea9 psgpan
=$ceaa					C64_PSGPLAY              = $ceaa ; $ceaa psgplay
=$ceab					C64_PSGCHORD             = $ceab ; $ceab psgchord
=$ceac					C64_REBOOT               = $ceac ; $ceac reboot
=$cead					C64_POWEROFF             = $cead ; $cead poweroff
=$ceae					C64_I2CPOKE              = $ceae ; $ceae i2cpoke
=$ceaf					C64_SLEEP                = $ceaf ; $ceaf sleep
=$ceb0					C64_BSAVE                = $ceb0 ; $ceb0 bsave
=$ceb1					C64_MENU                 = $ceb1 ; $ceb1 menu
=$ceb2					C64_REN                  = $ceb2 ; $ceb2 ren
=$ceb3					C64_LINPUT               = $ceb3 ; $ceb3 linput
=$ceb4					C64_LINPUTHASH           = $ceb4 ; $ceb4 linput#
=$ceb5					C64_BINPUTHASH           = $ceb5 ; $ceb5 binput#
=$ceb6					C64_HELP                 = $ceb6 ; $ceb6 help
=$ced0					C64_VPEEK                = $ced0 ; $ced0 vpeek
=$ced1					C64_MX                   = $ced1 ; $ced1 mx
=$ced2					C64_MY                   = $ced2 ; $ced2 my
=$ced3					C64_MB                   = $ced3 ; $ced3 mb
=$ced4					C64_JOY                  = $ced4 ; $ced4 joy
=$ced5					C64_HEXDOLLAR            = $ced5 ; $ced5 hex$
=$ced6					C64_BINDOLLAR            = $ced6 ; $ced6 bin$
=$ced7					C64_I2CPEEK              = $ced7 ; $ced7 i2cpeek
=$ced8					C64_POINTER              = $ced8 ; $ced8 pointer
=$ced9					C64_STRPTR               = $ced9 ; $ced9 strptr
=$ceda					C64_RPTDOLLAR            = $ceda ; $ceda rpt$
.002e					srcPtr:
>002e							.fill 	2
.0400					sourceBuffer:
>0400							.fill 	256
.0500					currentLineNumber:
>0500							.fill 	2
=$80					PCD_STARTBINARY = $80
=$8d					PCD_ENDBINARY = $8d
=$8d					PCD_STARTCOMMAND = $8d
=$ca					PCD_ENDCOMMAND = $ca
=$ca					PCD_STARTSYSTEM = $ca
=$d5					PCD_ENDSYSTEM = $d5
=$80					PCD_PLUS             = $80 ; +
=$81					PCD_MINUS            = $81 ; -
=$82					PCD_TIMES            = $82 ; *
=$83					PCD_DIVIDE           = $83 ; /
=$84					PCD_POWER            = $84 ; ^
=$85					PCD_AND              = $85 ; and
=$86					PCD_OR               = $86 ; or
=$87					PCD_GREATER          = $87 ; >
=$88					PCD_EQUAL            = $88 ; =
=$89					PCD_LESS             = $89 ; <
=$8a					PCD_GREATEREQUAL     = $8a ; >=
=$8b					PCD_LESSGREATER      = $8b ; <>
=$8c					PCD_LESSEQUAL        = $8c ; <=
=$8d					PCD_ABS              = $8d ; abs
=$8e					PCD_ARRAY            = $8e ; array
=$8f					PCD_ASC              = $8f ; asc
=$90					PCD_ASSERT           = $90 ; assert
=$91					PCD_BINDOLLAR        = $91 ; bin$
=$92					PCD_PRINTCMD_CHR     = $92 ; print.chr
=$93					PCD_CHRDOLLAR        = $93 ; chr$
=$94					PCD_SCMD_CMP         = $94 ; s.cmp
=$95					PCD_FOR              = $95 ; for
=$96					PCD_FRE              = $96 ; fre
=$97					PCD_GET              = $97 ; get
=$98					PCD_RETURN           = $98 ; return
=$99					PCD_PSET             = $99 ; pset
=$9a					PCD_LINE             = $9a ; line
=$9b					PCD_RECT             = $9b ; rect
=$9c					PCD_FRAME            = $9c ; frame
=$9d					PCD_CHAR             = $9d ; char
=$9e					PCD_HEXDOLLAR        = $9e ; hex$
=$9f					PCD_INPUT            = $9f ; input
=$a0					PCD_INPUTDOLLAR      = $a0 ; input$
=$a1					PCD_INPUTCMD_START   = $a1 ; input.start
=$a2					PCD_LEN              = $a2 ; len
=$a3					PCD_FCMD_CMP         = $a3 ; f.cmp
=$a4					PCD_INTCMD_DIV       = $a4 ; int.div
=$a5					PCD_NEGATE           = $a5 ; negate
=$a6					PCD_NEWCMD_LINE      = $a6 ; new.line
=$a7					PCD_NEXT             = $a7 ; next
=$a8					PCD_NOT              = $a8 ; not
=$a9					PCD_ON               = $a9 ; on
=$aa					PCD_MOREON           = $aa ; moreon
=$ab					PCD_PEEK             = $ab ; peek
=$ac					PCD_POKE             = $ac ; poke
=$ad					PCD_POS              = $ad ; pos
=$ae					PCD_GETCHANNEL       = $ae ; getchannel
=$af					PCD_SETCHANNEL       = $af ; setchannel
=$b0					PCD_PRINTCMD_N       = $b0 ; print.n
=$b1					PCD_PRINTCMD_S       = $b1 ; print.s
=$b2					PCD_READ             = $b2 ; read
=$b3					PCD_READDOLLAR       = $b3 ; read$
=$b4					PCD_RND              = $b4 ; rnd
=$b5					PCD_CONCAT           = $b5 ; concat
=$b6					PCD_SGN              = $b6 ; sgn
=$b7					PCD_PRINTCMD_TAB     = $b7 ; print.tab
=$b8					PCD_PRINTCMD_POS     = $b8 ; print.pos
=$b9					PCD_PRINTCMD_SPC     = $b9 ; print.spc
=$ba					PCD_STRDOLLAR        = $ba ; str$
=$bb					PCD_LEFTDOLLAR       = $bb ; left$
=$bc					PCD_RIGHTDOLLAR      = $bc ; right$
=$bd					PCD_MIDDOLLAR        = $bd ; mid$
=$be					PCD_SWAP             = $be ; swap
=$bf					PCD_TI               = $bf ; ti
=$c0					PCD_TIDOLLAR         = $c0 ; ti$
=$c1					PCD_USR              = $c1 ; usr
=$c2					PCD_VAL              = $c2 ; val
=$c3					PCD_CLOSE            = $c3 ; close
=$c4					PCD_EXIT             = $c4 ; exit
=$c5					PCD_DEBUG            = $c5 ; debug
=$c6					PCD_OPEN             = $c6 ; open
=$c7					PCD_SCREEN           = $c7 ; screen
=$c8					PCD_VPOKE            = $c8 ; vpoke
=$c9					PCD_VPEEK            = $c9 ; vpeek
=$ca					PCD_CMD_SHIFT        = $ca ; .shift
=$cb					PCD_CMD_BYTE         = $cb ; .byte
=$cc					PCD_CMD_WORD         = $cc ; .word
=$cd					PCD_CMD_FLOAT        = $cd ; .float
=$ce					PCD_CMD_STRING       = $ce ; .string
=$cf					PCD_CMD_DATA         = $cf ; .data
=$d0					PCD_CMD_GOTO         = $d0 ; .goto
=$d1					PCD_CMD_GOSUB        = $d1 ; .gosub
=$d2					PCD_CMD_GOTOCMD_Z    = $d2 ; .goto.z
=$d3					PCD_CMD_GOTOCMD_NZ   = $d3 ; .goto.nz
=$d4					PCD_CMD_VARSPACE     = $d4 ; .varspace
=$ca80					PCD_CLR              = $ca80 ; clr
=$ca81					PCD_DIM              = $ca81 ; dim
=$ca82					PCD_END              = $ca82 ; end
=$ca83					PCD_JOY              = $ca83 ; joy
=$ca84					PCD_INT              = $ca84 ; int
=$ca85					PCD_SQR              = $ca85 ; sqr
=$ca86					PCD_LOG              = $ca86 ; log
=$ca87					PCD_EXP              = $ca87 ; exp
=$ca88					PCD_COS              = $ca88 ; cos
=$ca89					PCD_SIN              = $ca89 ; sin
=$ca8a					PCD_TAN              = $ca8a ; tan
=$ca8b					PCD_ATN              = $ca8b ; atn
=$ca8c					PCD_MOUSE            = $ca8c ; mouse
=$ca8d					PCD_MB               = $ca8d ; mb
=$ca8e					PCD_MX               = $ca8e ; mx
=$ca8f					PCD_MY               = $ca8f ; my
=$ca90					PCD_RESTORE          = $ca90 ; restore
=$ca91					PCD_STOP             = $ca91 ; stop
=$ca92					PCD_SYS              = $ca92 ; sys
=$ca93					PCD_TIDOLLARCMD_WRITE = $ca93 ; ti$.write
=$ca94					PCD_WAIT             = $ca94 ; wait
=$ca95					PCD_I2CPOKE          = $ca95 ; i2cpoke
=$ca96					PCD_I2CPEEK          = $ca96 ; i2cpeek
=$ca97					PCD_BANK             = $ca97 ; bank
=$ca98					PCD_SLEEP            = $ca98 ; sleep
=$ca99					PCD_FMINIT           = $ca99 ; fminit
=$ca9a					PCD_FMNOTE           = $ca9a ; fmnote
=$ca9b					PCD_FMDRUM           = $ca9b ; fmdrum
=$ca9c					PCD_FMINST           = $ca9c ; fminst
=$ca9d					PCD_FMVIB            = $ca9d ; fmvib
=$ca9e					PCD_FMFREQ           = $ca9e ; fmfreq
=$ca9f					PCD_FMVOL            = $ca9f ; fmvol
=$caa0					PCD_FMPAN            = $caa0 ; fmpan
=$caa1					PCD_FMPLAY           = $caa1 ; fmplay
=$caa2					PCD_FMCHORD          = $caa2 ; fmchord
=$caa3					PCD_FMPOKE           = $caa3 ; fmpoke
=$caa4					PCD_PSGINIT          = $caa4 ; psginit
=$caa5					PCD_PSGNOTE          = $caa5 ; psgnote
=$caa6					PCD_PSGVOL           = $caa6 ; psgvol
=$caa7					PCD_PSGWAV           = $caa7 ; psgwav
=$caa8					PCD_PSGFREQ          = $caa8 ; psgfreq
=$caa9					PCD_PSGPAN           = $caa9 ; psgpan
=$caaa					PCD_PSGPLAY          = $caaa ; psgplay
=$caab					PCD_PSGCHORD         = $caab ; psgchord
=$caac					PCD_CLS              = $caac ; cls
=$caad					PCD_LOCATE           = $caad ; locate
=$caae					PCD_COLOR            = $caae ; color
=$4000					PCodeStart = $4000
.1011					InlineNonDecimal:
.1011	a2 02		ldx #$02			ldx 	#2 							; get size in X
.1013	c9 25		cmp #$25			cmp 	#"%"
.1015	f0 02		beq $1019			beq 	_INDBinary
.1017	a2 10		ldx #$10			ldx 	#16
.1019					_INDBinary:
.1019	85 2a		sta $2a				sta 	zTemp1 						; size => zTemp1
.101b	64 2b		stz $2b				stz 	zTemp1+1 					; count => zTemp1+1, at least 1 !
.101d	64 28		stz $28				stz 	zTemp0 						; zero result
.101f	64 29		stz $29				stz 	zTemp0+1
.1021					_INDLoop:
.1021	20 10 1b	jsr $1b10			jsr 	LookNext 					; check next character
.1024	20 4c 1b	jsr $1b4c			jsr 	ConvertHexStyle		 		; convert into range 0-35 for 0-9A-Z
.1027	90 1f		bcc $1048			bcc		_INDDone 					; didn't convert
.1029	c5 2a		cmp $2a				cmp 	zTemp1 						; size too large ?
.102b	b0 1b		bcs $1048			bcs 	_INDDone
.102d	20 57 10	jsr $1057			jsr 	_INDShift 					; x 2 or x 16
.1030	e0 02		cpx #$02			cpx 	#2
.1032	f0 09		beq $103d			beq 	_INDNotHex
.1034	20 57 10	jsr $1057			jsr 	_INDShift
.1037	20 57 10	jsr $1057			jsr 	_INDShift
.103a	20 57 10	jsr $1057			jsr 	_INDShift
.103d					_INDNotHex:
.103d	05 28		ora $28				ora 	zTemp0 						; or digit into result
.103f	85 28		sta $28				sta 	zTemp0
.1041	20 21 1b	jsr $1b21			jsr 	GetNext 					; consume
.1044	e6 2b		inc $2b				inc 	zTemp1+1 					; bump count
.1046	80 d9		bra $1021			bra 	_INDLoop
.1048					_INDDone:
.1048	a5 2b		lda $2b				lda 	zTemp1+1 					; done at least 1 ?
.104a	f0 08		beq $1054			beq 	_INDError
.104c	a4 29		ldy $29				ldy 	zTemp0+1 					; push constant
.104e	a5 28		lda $28				lda 	zTemp0
.1050	20 37 11	jsr $1137			jsr 	PushIntegerYA
.1053	60		rts				rts
.1054					_INDError:
.1054	4c 58 13	jmp $1358		jmp	ErrorV_syntax
.1057					_INDShift:
.1057	06 28		asl $28				asl 	zTemp0
.1059	26 29		rol $29				rol 	zTemp0+1
.105b	60		rts				rts
.105c					BufferClear:
.105c	9c 02 05	stz $0502			stz 	bufferSize
.105f	60		rts				rts
.1060					BufferWrite:
.1060	da		phx				phx
.1061	ae 02 05	ldx $0502			ldx 	bufferSize
.1064	9d 03 05	sta $0503,x			sta 	dataBuffer,x
.1067	ee 02 05	inc $0502			inc 	bufferSize
.106a	fa		plx				plx
.106b	60		rts				rts
.106c					BufferOutput:
.106c	ad 02 05	lda $0502			lda 	bufferSize
.106f	20 83 10	jsr $1083			jsr 	WriteCodeByte
.1072	a2 00		ldx #$00			ldx 	#0
.1074					_BOLoop:
.1074	ec 02 05	cpx $0502			cpx 	bufferSize
.1077	f0 09		beq $1082			beq 	_BOExit
.1079	bd 03 05	lda $0503,x			lda 	dataBuffer,x
.107c	20 83 10	jsr $1083			jsr 	WriteCodeByte
.107f	e8		inx				inx
.1080	80 f2		bra $1074			bra 	_BOLoop
.1082					_BOExit:
.1082	60		rts				rts
.0502					bufferSize:
>0502							.fill 	1
.0503					dataBuffer:
>0503							.fill 	256
.1083					WriteCodeByte:
.1083	48		pha				pha 								; save on stack
.1084	da		phx				phx
.1085	5a		phy				phy
.1086	20 fa 1f	jsr $1ffa			jsr 	OUTPUTWriteByte
.1089	7a		ply				ply 								; restore from stack
.108a	fa		plx				plx
.108b	68		pla				pla
.108c	60		rts				rts
.108d					CheckNextComma:
.108d	a9 2c		lda #$2c			lda	 	#","
.108f	80 06		bra $1097			bra 	CheckNextA
.1091					CheckNextRParen:
.1091	a9 29		lda #$29			lda	 	#")"
.1093	80 02		bra $1097			bra 	CheckNextA
.1095					CheckNextLParen:
.1095	a9 28		lda #$28			lda 	#"("
.1097					CheckNextA:
.1097	8d 03 06	sta $0603			sta 	checkCharacter 				; save test character
.109a					_CNALoop:
.109a	20 2c 1b	jsr $1b2c			jsr 	GetNextNonSpace 			; get next skipping spaces.
.109d	cd 03 06	cmp $0603			cmp 	checkCharacter 				; matches ?
.10a0	f0 03		beq $10a5			beq 	_CNAExit
.10a2	4c 58 13	jmp $1358		jmp	ErrorV_syntax
.10a5					_CNAExit:
.10a5	60		rts				rts
.0603					checkCharacter:
>0603							.fill 	1
.10a6					OUTPUTClose:
.10a6	a9 40		lda #$40			lda 	#(PCodeStart >> 8)
.10a8	a6 25		ldx $25				ldx 	objPtr
.10aa	a4 26		ldy $26				ldy 	objPtr+1
.10ac	20 64 20	jsr $2064			jsr 	XSaveMemory
.10af	60		rts				rts
.10b0					StartCompiler:
.10b0	86 28		stx $28				stx 	zTemp0 						; access API
.10b2	84 29		sty $29				sty 	zTemp0+1
.10b4	a0 01		ldy #$01			ldy 	#1 							; copy API vector
.10b6	b2 28		lda ($28)			lda 	(zTemp0)
.10b8	8d 05 06	sta $0605			sta 	APIVector
.10bb	b1 28		lda ($28),y			lda 	(zTemp0),y
.10bd	8d 06 06	sta $0606			sta 	APIVector+1
.10c0	c8		iny				iny 								; copy data area range.
.10c1	b1 28		lda ($28),y			lda 	(zTemp0),y
.10c3	8d 07 06	sta $0607			sta 	compilerStartHigh
.10c6	c8		iny				iny
.10c7	b1 28		lda ($28),y			lda 	(zTemp0),y
.10c9	8d 08 06	sta $0608			sta 	compilerEndHigh
.10cc	ba		tsx				tsx 								; save stack pointer
.10cd	8e 04 06	stx $0604			stx 	compilerSP
.10d0	20 13 1f	jsr $1f13			jsr 	STRReset 					; reset storage (line#, variable)
.10d3	20 9c 16	jsr $169c			jsr 	INPUTOpen 					; reset data input
.10d6	20 c2 1d	jsr $1dc2			jsr 	OUTPUTOpen 					; reset data output.
.10d9	a9 d4		lda #$d4			lda 	#PCD_CMD_VARSPACE
.10db	20 83 10	jsr $1083			jsr 	WriteCodeByte
.10de	a9 00		lda #$00			lda 	#0
.10e0	20 83 10	jsr $1083			jsr 	WriteCodeByte
.10e3	20 83 10	jsr $1083			jsr 	WriteCodeByte
.10e6					MainCompileLoop:
.10e6	20 a6 1c	jsr $1ca6			jsr 	ReadNextLine 				; read next line into the buffer.
.10e9	90 2e		bcc $1119			bcc 	SaveCodeAndExit 			; end of source.
.10eb	20 d7 1c	jsr $1cd7			jsr 	GetLineNumber 				; get line #
.10ee	20 de 1c	jsr $1cde			jsr 	STRMarkLine 				; remember the position and number of this line.
.10f1	a9 a6		lda #$a6			lda 	#PCD_NEWCMD_LINE 			; generate new command line
.10f3	20 83 10	jsr $1083			jsr 	WriteCodeByte
.10f6					_MCLSameLine:
.10f6	20 2c 1b	jsr $1b2c			jsr 	GetNextNonSpace 			; get the first character.
.10f9	f0 eb		beq $10e6			beq 	MainCompileLoop 			; end of line, get next line.
.10fb	c9 3a		cmp #$3a			cmp 	#":"						; if : then loop back.
.10fd	f0 f7		beq $10f6			beq 	_MCLSameLine
.10ff	c9 00		cmp #$00			cmp 	#0 							; if ASCII then check for implied LET.
.1101	10 0c		bpl $110f			bpl 	_MCLCheckAssignment
.1103	a2 ed		ldx #$ed			ldx 	#CommandTables & $FF 		; do command tables.
.1105	a0 16		ldy #$16			ldy 	#CommandTables >> 8
.1107	20 b5 19	jsr $19b5			jsr 	GeneratorProcess
.110a	b0 ea		bcs $10f6			bcs 	_MCLSameLine 				; keep trying to compile the line.
.110c					_MCLSyntax:
.110c	4c 58 13	jmp $1358		jmp	ErrorV_syntax
.110f					_MCLCheckAssignment:
.110f	20 42 1b	jsr $1b42			jsr 	CharIsAlpha 				; if not alpha then syntax error
.1112	90 f8		bcc $110c			bcc 	_MCLSyntax
.1114	20 74 1c	jsr $1c74			jsr 	CommandLETHaveFirst  		; LET first character, do assign
.1117	80 dd		bra $10f6			bra		_MCLSameLine 				; loop back.
.1119					SaveCodeAndExit:
.1119	20 a4 16	jsr $16a4			jsr 	INPUTClose 					; finish input.
.111c	a9 ff		lda #$ff			lda 	#$FF 						; fake line number $FFFF for forward THEN.
.111e	a8		tay				tay
.111f	20 de 1c	jsr $1cde			jsr 	STRMarkLine
.1122	a9 c4		lda #$c4			lda 	#PCD_EXIT 					; add an END
.1124	20 83 10	jsr $1083			jsr 	WriteCodeByte
.1127	a9 ff		lda #$ff			lda 	#$FF 						; add end marker
.1129	20 83 10	jsr $1083			jsr 	WriteCodeByte
.112c	20 83 15	jsr $1583			jsr 	FixBranches 				; fix up GOTO/GOSUB etc.
.112f	20 a6 10	jsr $10a6			jsr 	OUTPUTClose
.1132					ExitCompiler:
.1132	ae 04 06	ldx $0604			ldx 	compilerSP 					; reload SP and exit.
.1135	9a		txs				txs
.1136	60		rts				rts
.0604					compilerSP:
>0604							.fill 	1
.0605					APIVector:
>0605							.fill 	2
.0607					compilerStartHigh:
>0607							.fill 	1
.0608					compilerEndHigh:
>0608							.fill 	1
.1137					PushIntegerYA:
.1137	c0 00		cpy #$00			cpy 	#0 							; 0-255
.1139	f0 0f		beq $114a			beq 	PushIntegerA
.113b	48		pha				pha
.113c	a9 cc		lda #$cc			lda 	#PCD_CMD_WORD 				; send .word
.113e	20 83 10	jsr $1083			jsr 	WriteCodeByte
.1141	68		pla				pla 								; then LSB
.1142	20 83 10	jsr $1083			jsr 	WriteCodeByte
.1145	98		tya				tya 								; then MSB
.1146	20 83 10	jsr $1083			jsr 	WriteCodeByte
.1149	60		rts				rts
.114a					PushIntegerA:
.114a	c9 40		cmp #$40			cmp 	#64 						; if > 64 send byte as is
.114c	90 07		bcc $1155			bcc 	_PIWriteA
.114e	48		pha				pha
.114f	a9 cb		lda #$cb			lda 	#PCD_CMD_BYTE 				; send .byte
.1151	20 83 10	jsr $1083			jsr 	WriteCodeByte
.1154	68		pla				pla
.1155					_PIWriteA:
.1155	20 83 10	jsr $1083			jsr 	WriteCodeByte
.1158	60		rts				rts
.1159					PushFloat:
.1159	a9 cd		lda #$cd			lda 	#PCD_CMD_FLOAT 				; write CMD_FLOAT
.115b	20 83 10	jsr $1083			jsr 	WriteCodeByte
.115e	b5 6e		lda $6e,x			lda 	NSExponent,x 				; and the data
.1160	20 83 10	jsr $1083			jsr 	WriteCodeByte
.1163	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.1165	20 83 10	jsr $1083			jsr 	WriteCodeByte
.1168	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.116a	20 83 10	jsr $1083			jsr 	WriteCodeByte
.116d	b5 56		lda $56,x			lda 	NSMantissa2,x
.116f	20 83 10	jsr $1083			jsr 	WriteCodeByte
.1172	b5 32		lda $32,x			lda 	NSStatus,x 					; with sign packed in byte 3 MSB
.1174	29 80		and #$80			and 	#$80
.1176	15 62		ora $62,x			ora 	NSMantissa3,x
.1178	20 83 10	jsr $1083			jsr 	WriteCodeByte
.117b	60		rts				rts
.117c					CreateVariableRecord:
.117c	48		pha				pha
.117d	ad 13 06	lda $0613			lda 	freeVariableMemory 		; push current free address on stack.
.1180	48		pha				pha
.1181	ad 14 06	lda $0614			lda 	freeVariableMemory+1
.1184	48		pha				pha
.1185	ad 11 06	lda $0611			lda 	variableListEnd  		; copy end of list to zTemp0
.1188	85 28		sta $28				sta 	zTemp0
.118a	ad 12 06	lda $0612			lda 	variableListEnd+1
.118d	85 29		sta $29				sta 	zTemp0+1
.118f	a9 06		lda #$06			lda 	#6 						; default size if 6 (offset link 3 bytes)
.1191	92 28		sta ($28)			sta 	(zTemp0)
.1193	98		tya				tya
.1194	a0 02		ldy #$02			ldy 	#2 						; write out the name.
.1196	91 28		sta ($28),y			sta 	(zTemp0),y
.1198	88		dey				dey
.1199	8a		txa				txa
.119a	91 28		sta ($28),y			sta 	(zTemp0),y
.119c	a0 03		ldy #$03			ldy 	#3 						; write out the address.
.119e	ad 13 06	lda $0613			lda 	freeVariableMemory
.11a1	91 28		sta ($28),y			sta 	(zTemp0),y
.11a3	c8		iny				iny
.11a4	ad 14 06	lda $0614			lda 	freeVariableMemory+1
.11a7	91 28		sta ($28),y			sta 	(zTemp0),y
.11a9	a0 06		ldy #$06			ldy 	#6 						; write EOL marker next record.
.11ab	a9 00		lda #$00			lda 	#0
.11ad	91 28		sta ($28),y			sta 	(zTemp0),y
.11af	18		clc				clc
.11b0	b2 28		lda ($28)			lda 	(zTemp0) 				; add offset to variableListEnd
.11b2	6d 11 06	adc $0611			adc  	variableListEnd
.11b5	8d 11 06	sta $0611			sta 	variableListEnd
.11b8	90 03		bcc $11bd			bcc 	_CVNoCarry2
.11ba	ee 12 06	inc $0612			inc 	variableListEnd+1
.11bd					_CVNoCarry2:
.11bd	7a		ply				ply
.11be	fa		plx				plx
.11bf	68		pla				pla
.11c0	60		rts				rts
.11c1					SetVariableRecordToCodePosition:
.11c1	48		pha				pha
.11c2	5a		phy				phy
.11c3	a5 27		lda $27				lda 	objPage
.11c5	a0 03		ldy #$03			ldy 	#3
.11c7	91 28		sta ($28),y			sta 	(zTemp0),y
.11c9	c8		iny				iny
.11ca	a5 26		lda $26				lda 	objPtr+1
.11cc	91 28		sta ($28),y			sta 	(zTemp0),y
.11ce	c8		iny				iny
.11cf	a5 25		lda $25				lda 	objPtr
.11d1	91 28		sta ($28),y			sta 	(zTemp0),y
.11d3	7a		ply				ply
.11d4	68		pla				pla
.11d5	60		rts				rts
.11d6					AllocateBytesForType:
.11d6	48		pha				pha
.11d7	da		phx				phx
.11d8	a2 02		ldx #$02			ldx 	#2 						; bytes to allocate
.11da	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16
.11dc	c9 00		cmp #$00			cmp 	#NSSIFloat
.11de	d0 02		bne $11e2			bne 	_CVNotFloat
.11e0	a2 06		ldx #$06			ldx 	#6
.11e2					_CVNotFloat:
.11e2	8a		txa				txa 							; add 6 or 2 to the free memory pointer.
.11e3	18		clc				clc
.11e4	6d 13 06	adc $0613			adc 	freeVariableMemory
.11e7	8d 13 06	sta $0613			sta 	freeVariableMemory
.11ea	90 03		bcc $11ef			bcc 	_CVNoCarry1
.11ec	ee 14 06	inc $0614			inc 	freeVariableMemory+1
.11ef					_CVNoCarry1:
.11ef	fa		plx				plx
.11f0	68		pla				pla
.11f1	60		rts				rts
.11f2					CommandDATA:
.11f2	20 5c 10	jsr $105c			jsr 	BufferClear 				; copy it to the buffer
.11f5	20 13 1b	jsr $1b13			jsr 	LookNextNonSpace
.11f8					_CTDataLoop:
.11f8	20 10 1b	jsr $1b10			jsr 	LookNext 					; reached EOL
.11fb	f0 08		beq $1205			beq 	_CTDataDone
.11fd	20 60 10	jsr $1060			jsr 	BufferWrite 				; write and consume
.1200	20 21 1b	jsr $1b21			jsr 	GetNext
.1203	80 f3		bra $11f8			bra 	_CTDataLoop
.1205					_CTDataDone:
.1205	a9 cf		lda #$cf			lda 	#PCD_CMD_DATA 				; output command and buffer
.1207	20 83 10	jsr $1083			jsr 	WriteCodeByte
.120a	20 6c 10	jsr $106c			jsr 	BufferOutput
.120d	60		rts				rts
.120e					CommandDEF:
.120e	a9 00		lda #$00			lda 	#0 							; constant 0 (for GOTOZ)
.1210	20 4a 11	jsr $114a			jsr 	PushIntegerA
.1213	20 38 1c	jsr $1c38			jsr 	CompileGotoEOL 				; compile skip over DEF
.1216	a9 a5		lda #$a5			lda 	#C64_FN
.1218	20 97 10	jsr $1097			jsr 	CheckNextA
.121b	20 2c 1b	jsr $1b2c			jsr 	GetNextNonSpace				; get variable name w/type must be array e.g. DEF FNx(a)
.121e	20 91 1b	jsr $1b91			jsr 	ExtractVariableName
.1221	8a		txa				txa
.1222	10 51		bpl $1275			bpl 	_CDError
.1224	8a		txa				txa 								; convert to a function reference - bit 7:0 clear bit 7:1 set
.1225	29 7f		and #$7f			and 	#$7F
.1227	aa		tax				tax
.1228	98		tya				tya
.1229	09 80		ora #$80			ora 	#$80
.122b	a8		tay				tay
.122c	20 27 15	jsr $1527			jsr 	FindVariable				; does it already exist ?
.122f	b0 44		bcs $1275			bcs 	_CDError 					; if so, that's an error.
.1231	20 7c 11	jsr $117c			jsr 	CreateVariableRecord 		; create the record for it & put the data in it.
.1234	20 c1 11	jsr $11c1			jsr 	SetVariableRecordToCodePosition
.1237	20 2c 1b	jsr $1b2c			jsr 	GetNextNonSpace
.123a	20 d0 1e	jsr $1ed0			jsr 	GetReferenceTerm 			; get var ref, not array
.123d	c9 00		cmp #$00			cmp 	#0
.123f	30 34		bmi $1275			bmi 	_CDError
.1241	8d 09 06	sta $0609			sta 	defType 					; save type
.1244	8e 0a 06	stx $060a			stx 	defVariable 				; save var ref
.1247	8c 0b 06	sty $060b			sty 	defVariable+1
.124a	29 40		and #$40			and 	#NSSString 					; only numbers.
.124c	d0 27		bne $1275			bne 	_CDError
.124e	20 91 10	jsr $1091			jsr 	CheckNextRParen 			; check )
.1251	a9 b2		lda #$b2			lda 	#C64_EQUAL
.1253	20 97 10	jsr $1097			jsr 	CheckNextA 					; check =
.1256	18		clc				clc 								; if this is DEF FNxx(A), read A
.1257	20 78 12	jsr $1278			jsr 	CDReadWriteVariable
.125a	a9 be		lda #$be			lda 	#(PCD_SWAP) & $FF
.125c	20 83 10	jsr $1083			jsr 	WriteCodeByte
.125f	38		sec				sec
.1260	20 78 12	jsr $1278			jsr 	CDReadWriteVariable 		; A is now updated
.1263	20 6d 14	jsr $146d			jsr 	CompileExpressionAt0 		; the actual body of the function.
.1266	a9 be		lda #$be			lda 	#(PCD_SWAP) & $FF
.1268	20 83 10	jsr $1083			jsr 	WriteCodeByte
.126b	38		sec				sec
.126c	20 78 12	jsr $1278			jsr 	CDReadWriteVariable 		; A is now reset to its old value
.126f	a9 98		lda #$98			lda 	#(PCD_RETURN) & $FF
.1271	20 83 10	jsr $1083			jsr 	WriteCodeByte
.1274	60		rts				rts
.1275					_CDError:
.1275	4c 58 13	jmp $1358		jmp	ErrorV_syntax
.1278					CDReadWriteVariable:
.1278	ac 0b 06	ldy $060b			ldy 	defVariable+1 				; set up YX
.127b	ae 0a 06	ldx $060a			ldx 	defVariable
.127e	ad 09 06	lda $0609			lda 	defType
.1281	20 82 1e	jsr $1e82			jsr 	GetSetVariable
.1284	60		rts				rts
.0609					defType:
>0609							.fill 	1
.060a					defVariable:
>060a							.fill 	2
.1285					CommandDIM:
.1285	20 2c 1b	jsr $1b2c			jsr 	GetNextNonSpace 			; get the first non space character
.1288	20 91 1b	jsr $1b91			jsr 	ExtractVariableName 		; variable name to XY
.128b	da		phx				phx 								; save name with type bits.
.128c	e0 00		cpx #$00			cpx 	#0 							; check it is an array.
.128e	10 37		bpl $12c7			bpl 	_CDError
.1290	20 27 15	jsr $1527			jsr 	FindVariable	 			; see if already exist
.1293	b0 35		bcs $12ca			bcs 	_CDRedefine 				; it still exists.
.1295	20 7c 11	jsr $117c			jsr 	CreateVariableRecord 		; create the basic variable
.1298	20 d6 11	jsr $11d6			jsr 	AllocateBytesForType 		; allocate memory for it
.129b	68		pla				pla 								; restore type bits
.129c	5a		phy				phy 								; save the address of the basic storage
.129d	da		phx				phx
.129e	48		pha				pha
.129f	20 cd 12	jsr $12cd			jsr 	OutputIndexGroup 			; create an index group and generate them, preserving type data
.12a2	68		pla				pla
.12a3	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16 		; 2 bit type data
.12a5	20 4a 11	jsr $114a			jsr 	PushIntegerA 				; push that type data out.
.12a8	a9 ca		lda #$ca			lda 	#(PCD_DIM) >> 8
.12aa	20 83 10	jsr $1083			jsr 	WriteCodeByte
.12ad	a9 81		lda #$81			lda 	#(PCD_DIM) & $FF
.12af	20 83 10	jsr $1083			jsr 	WriteCodeByte
.12b2	fa		plx				plx 								; restore address
.12b3	7a		ply				ply
.12b4	a9 20		lda #$20			lda 	#NSSIFloat+NSSIInt16 		; pretend it is an int16 reference.
.12b6	38		sec				sec
.12b7	20 82 1e	jsr $1e82			jsr 	GetSetVariable 				; store the address in the reference to the array structure.
.12ba	20 13 1b	jsr $1b13			jsr 	LookNextNonSpace 			; , follows ?
.12bd	c9 2c		cmp #$2c			cmp 	#","
.12bf	d0 05		bne $12c6			bne 	_CDExit
.12c1	20 21 1b	jsr $1b21			jsr 	GetNext 					; consume comma
.12c4	80 bf		bra $1285			bra 	CommandDIM 					; do another DIM
.12c6					_CDExit:
.12c6	60		rts				rts
.12c7					_CDError:
.12c7	4c 58 13	jmp $1358		jmp	ErrorV_syntax
.12ca					_CDRedefine:
.12ca	4c 20 14	jmp $1420		jmp	ErrorV_redefine
.12cd					OutputIndexGroup:
.12cd	9c 0c 06	stz $060c			stz 	IndexCount 					; count of number of indices.
.12d0					_OIGNext:
.12d0	20 6d 14	jsr $146d			jsr 	CompileExpressionAt0 		; get a dimension
.12d3	29 40		and #$40			and 	#NSSTypeMask 				; check it is numeric
.12d5	c9 00		cmp #$00			cmp 	#NSSIFloat
.12d7	d0 19		bne $12f2			bne 	_OIGType
.12d9	ee 0c 06	inc $060c			inc 	IndexCount 					; bump the counter.
.12dc	20 13 1b	jsr $1b13			jsr 	LookNextNonSpace 			; does a , follow ?
.12df	c9 2c		cmp #$2c			cmp 	#","
.12e1	d0 05		bne $12e8			bne 	_OIGCheckEnd
.12e3	20 21 1b	jsr $1b21			jsr 	GetNext 					; consume comma
.12e6	80 e8		bra $12d0			bra 	_OIGNext 					; get next dimension
.12e8					_OIGCheckEnd:
.12e8	20 91 10	jsr $1091			jsr 	CheckNextRParen 			; check and consume )
.12eb	ad 0c 06	lda $060c			lda 	IndexCount
.12ee	20 4a 11	jsr $114a			jsr 	PushIntegerA 				; compile the dimension count.
.12f1	60		rts				rts
.12f2					_OIGType:
.12f2	4c 68 13	jmp $1368		jmp	ErrorV_type
.060c					IndexCount:
>060c							.fill 	1
.12f5					ErrorHandler:
.12f5	68		pla				pla
.12f6	7a		ply				ply
.12f7	85 28		sta $28				sta 	zTemp0
.12f9	84 29		sty $29				sty 	zTemp0+1
.12fb	a2 00		ldx #$00			ldx 	#0 							; output msg to channel #0
.12fd	a0 01		ldy #$01			ldy 	#1
.12ff					_EHDisplayMsg:
.12ff	b1 28		lda ($28),y			lda 	(zTemp0),y
.1301	20 5a 20	jsr $205a			jsr 	XPrintCharacter
.1304	c8		iny				iny
.1305	b1 28		lda ($28),y			lda 	(zTemp0),y
.1307	d0 f6		bne $12ff			bne 	_EHDisplayMsg
.1309	a9 20		lda #$20			lda 	#32
.130b	20 5a 20	jsr $205a			jsr 	XPrintCharacter
.130e	a9 40		lda #$40			lda 	#64
.1310	20 5a 20	jsr $205a			jsr 	XPrintCharacter
.1313	a2 00		ldx #$00			ldx 	#0 							; convert line# to string
.1315	20 72 26	jsr $2672			jsr 	FloatSetByte
.1318	20 d7 1c	jsr $1cd7			jsr 	GetLineNumber
.131b	95 3e		sta $3e,x			sta 	NSMantissa0,x
.131d	98		tya				tya
.131e	95 4a		sta $4a,x			sta 	NSMantissa1,x
.1320	20 58 25	jsr $2558			jsr 	FloatToString
.1323	a0 00		ldy #$00			ldy 	#0 							; display that string.
.1325	a2 00		ldx #$00			ldx 	#0
.1327					_EHDisplayLine:
.1327	b9 3c 06	lda $063c,y			lda 	decimalBuffer,y
.132a	20 5a 20	jsr $205a			jsr 	XPrintCharacter
.132d	c8		iny				iny
.132e	b9 3c 06	lda $063c,y			lda 	decimalBuffer,y
.1331	d0 f4		bne $1327			bne 	_EHDisplayLine
.1333	a9 0d		lda #$0d			lda 	#13
.1335	20 5a 20	jsr $205a			jsr 	XPrintCharacter
.1338	4c 32 11	jmp $1132			jmp 	ExitCompiler
.133b					ErrorV_range:
.133b	20 f5 12	jsr $12f5		jsr	ErrorHandler
>133e	4f 55 54 20 4f 46 20 52			.text	"OUT OF RANGE",0
>1346	41 4e 47 45 00
.134b					ErrorV_value:
.134b	20 f5 12	jsr $12f5		jsr	ErrorHandler
>134e	42 41 44 20 56 41 4c 55			.text	"BAD VALUE",0
>1356	45 00
.1358					ErrorV_syntax:
.1358	20 f5 12	jsr $12f5		jsr	ErrorHandler
>135b	53 59 4e 54 41 58 20 45			.text	"SYNTAX ERROR",0
>1363	52 52 4f 52 00
.1368					ErrorV_type:
.1368	20 f5 12	jsr $12f5		jsr	ErrorHandler
>136b	54 59 50 45 20 4d 49 53			.text	"TYPE MISMATCH",0
>1373	4d 41 54 43 48 00
.1379					ErrorV_unimplemented:
.1379	20 f5 12	jsr $12f5		jsr	ErrorHandler
>137c	4e 4f 54 20 49 4d 50 4c			.text	"NOT IMPLEMENTED",0
>1384	45 4d 45 4e 54 45 44 00
.138c					ErrorV_assert:
.138c	20 f5 12	jsr $12f5		jsr	ErrorHandler
>138f	41 53 53 45 52 54 20 46			.text	"ASSERT FAIL",0
>1397	41 49 4c 00
.139b					ErrorV_line:
.139b	20 f5 12	jsr $12f5		jsr	ErrorHandler
>139e	55 4e 4b 4e 4f 57 4e 20			.text	"UNKNOWN LINE NUMBER",0
>13a6	4c 49 4e 45 20 4e 55 4d 42 45 52 00
.13b2					ErrorV_internal:
.13b2	20 f5 12	jsr $12f5		jsr	ErrorHandler
>13b5	49 4e 54 45 52 4e 41 4c			.text	"INTERNAL ERROR",0
>13bd	20 45 52 52 4f 52 00
.13c4					ErrorV_divzero:
.13c4	20 f5 12	jsr $12f5		jsr	ErrorHandler
>13c7	44 49 56 49 44 45 20 42			.text	"DIVIDE BY ZERO",0
>13cf	59 20 5a 45 52 4f 00
.13d6					ErrorV_structure:
.13d6	20 f5 12	jsr $12f5		jsr	ErrorHandler
>13d9	53 54 52 55 43 54 55 52			.text	"STRUCTURE IMBALANCE",0
>13e1	45 20 49 4d 42 41 4c 41 4e 43 45 00
.13ed					ErrorV_stop:
.13ed	20 f5 12	jsr $12f5		jsr	ErrorHandler
>13f0	50 52 4f 47 52 41 4d 20			.text	"PROGRAM STOPPED",0
>13f8	53 54 4f 50 50 45 44 00
.1400					ErrorV_data:
.1400	20 f5 12	jsr $12f5		jsr	ErrorHandler
>1403	4f 55 54 20 4f 46 20 44			.text	"OUT OF DATA",0
>140b	41 54 41 00
.140f					ErrorV_undeclared:
.140f	20 f5 12	jsr $12f5		jsr	ErrorHandler
>1412	55 4e 4b 4e 4f 57 4e 20			.text	"UNKNOWN ARRAY",0
>141a	41 52 52 41 59 00
.1420					ErrorV_redefine:
.1420	20 f5 12	jsr $12f5		jsr	ErrorHandler
>1423	41 52 52 41 59 20 52 45			.text	"ARRAY REDEFINED",0
>142b	44 45 46 49 4e 45 44 00
.1433					ErrorV_index:
.1433	20 f5 12	jsr $12f5		jsr	ErrorHandler
>1436	42 41 44 20 41 52 52 41			.text	"BAD ARRAY INDEX",0
>143e	59 20 49 4e 44 45 58 00
.1446					ErrorV_memory:
.1446	20 f5 12	jsr $12f5		jsr	ErrorHandler
>1449	4f 55 54 20 4f 46 20 4d			.text	"OUT OF MEMORY",0
>1451	45 4d 4f 52 59 00
.1457					ErrorV_channel:
.1457	20 f5 12	jsr $12f5		jsr	ErrorHandler
>145a	49 4e 50 55 54 2f 4f 55			.text	"INPUT/OUTPUT ERROR",0
>1462	54 50 55 54 20 45 52 52 4f 52 00
.146d					CompileExpressionAt0:
.146d	a9 00		lda #$00			lda 	#0
.146f					CompileExpressionAtA:
.146f	48		pha				pha  								; save level
.1470	20 3b 1f	jsr $1f3b			jsr 	CompileTerm 				; compile a term.
.1473	fa		plx				plx 								; get level back into X
.1474					_ECALoop:
.1474	48		pha				pha 								; save type on stack.
.1475	20 13 1b	jsr $1b13			jsr 	LookNextNonSpace 			; get the next character
.1478	c9 aa		cmp #$aa			cmp 	#C64_PLUS 					; go to be + ... < in the C64 code.
.147a	90 04		bcc $1480			bcc 	_ECAExit
.147c	c9 b4		cmp #$b4			cmp 	#C64_LESS+1
.147e	90 02		bcc $1482			bcc 	_ECAHaveToken
.1480					_ECAExit:
.1480	68		pla				pla 								; throw type off stack
.1481	60		rts				rts
.1482					_ECAHaveToken:
.1482	86 28		stx $28				stx 	zTemp0 						; save current precedence in zTemp0
.1484	aa		tax				tax 								; X contains the operator token
.1485	bd 70 14	lda $1470,x			lda 	PrecedenceTable-C64_PLUS,x  ; read precedence.
.1488	c5 28		cmp $28				cmp 	zTemp0 						; if < then exit
.148a	90 f4		bcc $1480			bcc 	_ECAExit
.148c	85 29		sta $29				sta 	zTemp0+1 					; save the precedence of the operator.
.148e	20 21 1b	jsr $1b21			jsr 	GetNext 					; consume the token.
.1491	e0 b1		cpx #$b1			cpx 	#C64_GREATER				; checks for < or > which could be two character tokens
.1493	f0 11		beq $14a6			beq 	_ECAGreaterCheck
.1495	e0 b3		cpx #$b3			cpx 	#C64_LESS
.1497	d0 1a		bne $14b3			bne 	_ECAHaveFullToken
.1499	20 10 1b	jsr $1b10			jsr 	LookNext 					; checks for < (<= or <>)
.149c	c9 b1		cmp #$b1			cmp 	#C64_GREATER 				; <> is 2 on from <
.149e	f0 0e		beq $14ae			beq	 	_ECAToNotEqual
.14a0	c9 b2		cmp #$b2			cmp 	#C64_EQUAL 					; <= is 3 on from <
.14a2	d0 0f		bne $14b3			bne 	_ECAHaveFullToken
.14a4	80 07		bra $14ad			bra 	_ECAAddEqual
.14a6					_ECAGreaterCheck:
.14a6	20 10 1b	jsr $1b10			jsr 	LookNext
.14a9	c9 b2		cmp #$b2			cmp 	#C64_EQUAL
.14ab	d0 06		bne $14b3			bne 	_ECAHaveFullToken
.14ad					_ECAAddEqual:
.14ad	e8		inx				inx 								; > => >= and < to <= is three tokens on.
.14ae					_ECAToNotEqual:
.14ae	e8		inx				inx
.14af	e8		inx				inx
.14b0	20 21 1b	jsr $1b21			jsr 	GetNext 					; consume the = or > in >= <= <>
.14b3					_ECAHaveFullToken:
.14b3	e0 aa		cpx #$aa			cpx 	#C64_PLUS
.14b5	d0 0a		bne $14c1			bne 	_ECANotConcat
.14b7	68		pla				pla 								; get type back
.14b8	48		pha				pha
.14b9	29 40		and #$40			and 	#NSSTypeMask
.14bb	c9 40		cmp #$40			cmp 	#NSSString
.14bd	d0 02		bne $14c1			bne 	_ECANotConcat
.14bf	a2 df		ldx #$df			ldx 	#(PCD_CONCAT-(PCD_PLUS-C64_PLUS)) & $FF
.14c1					_ECANotConcat:
.14c1	da		phx				phx 								; save operator on the stack
.14c2	a6 28		ldx $28				ldx 	zTemp0 						; push current precedence on the stack
.14c4	da		phx				phx
.14c5	a5 29		lda $29				lda 	zTemp0+1 					; get precedence of operator
.14c7	1a		inc a				inc 	a
.14c8	20 6f 14	jsr $146f			jsr 	CompileExpressionAtA 		; and compile at the next level up.
.14cb	85 28		sta $28				sta 	zTemp0 						; save type in zTemp0
.14cd	fa		plx				plx 								; restore current precedence in X
.14ce	68		pla				pla 								; restore operator
.14cf	85 29		sta $29				sta 	zTemp0+1 					; save it in zTemp0+1.
.14d1	c9 b1		cmp #$b1			cmp 	#C64_GREATER 				; check for not compare
.14d3	90 17		bcc $14ec			bcc 	_ECANotCompare
.14d5	c9 b7		cmp #$b7			cmp 	#C64_GREATER+6
.14d7	b0 13		bcs $14ec			bcs 	_ECANotCompare
.14d9	7a		ply				ply 								; get type into Y
.14da	5a		phy				phy
.14db	48		pha				pha 								; save operator
.14dc	98		tya				tya 								; get type
.14dd	a0 94		ldy #$94			ldy 	#PCD_SCMD_CMP 				; Y is the token to use
.14df	29 40		and #$40			and 	#NSSTypeMask
.14e1	c9 40		cmp #$40			cmp 	#NSSString
.14e3	f0 02		beq $14e7			beq 	_ECANotString
.14e5	a0 a3		ldy #$a3			ldy 	#PCD_FCMD_CMP
.14e7					_ECANotString:
.14e7	98		tya				tya									; output token Y
.14e8	20 83 10	jsr $1083			jsr 	WriteCodeByte
.14eb	68		pla				pla 								; restore operator.
.14ec					_ECANotCompare:
.14ec	18		clc				clc 								; convert to P-Code and compile.
.14ed	69 d6		adc #$d6			adc 	#(PCD_PLUS-C64_PLUS) & $FF 	; it might be invalid at this point
.14ef	20 83 10	jsr $1083			jsr 	WriteCodeByte
.14f2	68		pla				pla 								; type of current result
.14f3	45 28		eor $28				eor 	zTemp0 						; check compatible with r-expr type
.14f5	29 40		and #$40			and 	#NSSTypeMask 				; the types should be compatible, only interested in number vs float
.14f7	d0 19		bne $1512			bne		_ECAType
.14f9	a5 28		lda $28				lda 	zTemp0 						; get type back
.14fb	c9 40		cmp #$40			cmp 	#NSSString 					; if it is a number, then all operators work.
.14fd	d0 18		bne $1517			bne 	_ECAGoLoop
.14ff	a5 29		lda $29				lda 	zTemp0+1 					; check operator is + or comparator
.1501	c9 df		cmp #$df			cmp 	#(PCD_CONCAT-(PCD_PLUS-C64_PLUS)) & $FF
.1503	f0 10		beq $1515			beq 	_ECAOkayString 				; (this is post conversion)
.1505	c9 b1		cmp #$b1			cmp 	#C64_GREATER 				; must be a comparison then.
.1507	90 09		bcc $1512			bcc 	_ECAType
.1509	c9 b7		cmp #$b7			cmp 	#C64_LESS+1+3 				; the +3 is because of >= <= <>
.150b	b0 05		bcs $1512			bcs 	_ECAType
.150d	a9 00		lda #$00			lda 	#NSSIFloat 					; compare returns number.
.150f	4c 74 14	jmp $1474			jmp 	_ECALoop
.1512					_ECAType:
.1512	4c 68 13	jmp $1368		jmp	ErrorV_type
.1515					_ECAOkayString:
.1515	a9 40		lda #$40			lda 	#NSSString 					; current is string, go round again.
.1517					_ECAGoLoop:
.1517	4c 74 14	jmp $1474			jmp 	_ECALoop
.151a					PrecedenceTable:
>151a	03						.byte 	3 					; '+'
>151b	03						.byte 	3 					; '-'
>151c	04						.byte 	4 					; '*'
>151d	04						.byte 	4 					; '/'
>151e	05						.byte 	5 					; '^'
>151f	01						.byte 	1 					; 'and'
>1520	00						.byte 	0 					; 'or'
>1521	02						.byte 	2 					; '>'
>1522	02						.byte 	2 					; '='
>1523	02						.byte 	2 					; '<'
>1524	02						.byte 	2 					; '>='
>1525	02						.byte 	2 					; '<='
>1526	02						.byte 	2 					; '<>'
.1527					FindVariable:
.1527	86 2a		stx $2a				stx 	zTemp1 						; save name.
.1529	84 2b		sty $2b				sty 	zTemp1+1
.152b					_IVCheckSpecial:
.152b	c0 09		cpy #$09			cpy 	#$09	 					; both end $09 e.g. I
.152d	d0 18		bne $1547			bne 	_IVStandard
.152f	e0 14		cpx #$14			cpx 	#$14 						; TI is $14
.1531	f0 0c		beq $153f			beq 	_IVTIFloat
.1533	e0 54		cpx #$54			cpx 	#$54 						; TI$ is $54
.1535	d0 10		bne $1547			bne 	_IVStandard
.1537	a0 c0		ldy #$c0			ldy 	#$C0 						; TI$ returns string $C001
.1539	a2 01		ldx #$01			ldx 	#$01
.153b	a9 40		lda #$40			lda 	#NSSString
.153d	38		sec				sec
.153e	60		rts				rts
.153f					_IVTIFloat:
.153f	a0 80		ldy #$80			ldy 	#$80
.1541	a2 00		ldx #$00			ldx 	#$00
.1543	a9 00		lda #$00			lda 	#0
.1545	38		sec				sec
.1546	60		rts				rts
.1547					_IVStandard:
.1547	ad 07 06	lda $0607			lda 	compilerStartHigh			; start scanning from here.
.154a	85 29		sta $29				sta 	zTemp0+1
.154c	64 28		stz $28				stz 	zTemp0
.154e					_IVCheckLoop:
.154e	b2 28		lda ($28)			lda 	(zTemp0) 					; finished ?
.1550	f0 2b		beq $157d			beq  	_IVNotFound 				; if so, return with CC.
.1552	a0 01		ldy #$01			ldy 	#1 							; match ?
.1554	b1 28		lda ($28),y			lda 	(zTemp0),y
.1556	c5 2a		cmp $2a				cmp 	zTemp1
.1558	d0 07		bne $1561			bne	 	_IVNext
.155a	c8		iny				iny
.155b	b1 28		lda ($28),y			lda 	(zTemp0),y
.155d	c5 2b		cmp $2b				cmp 	zTemp1+1
.155f	f0 0d		beq $156e			beq 	_IVFound
.1561					_IVNext:
.1561	18		clc				clc
.1562	a5 28		lda $28				lda 	zTemp0
.1564	72 28		adc ($28)			adc 	(zTemp0)
.1566	85 28		sta $28				sta 	zTemp0
.1568	90 e4		bcc $154e			bcc 	_IVCheckLoop
.156a	e6 29		inc $29				inc 	zTemp0+1
.156c	80 e0		bra $154e			bra 	_IVCheckLoop
.156e					_IVFound:
.156e	a0 03		ldy #$03			ldy 	#3 							; get address into YX
.1570	b1 28		lda ($28),y			lda 	(zTemp0),y
.1572	aa		tax				tax
.1573	c8		iny				iny
.1574	b1 28		lda ($28),y			lda 	(zTemp0),y
.1576	48		pha				pha
.1577	c8		iny				iny
.1578	b1 28		lda ($28),y			lda 	(zTemp0),y
.157a	7a		ply				ply
.157b	38		sec				sec
.157c	60		rts				rts
.157d					_IVNotFound:
.157d	a6 2a		ldx $2a				ldx 	zTemp1 						; get variable name back
.157f	a4 2b		ldy $2b				ldy 	zTemp1+1
.1581	18		clc				clc
.1582	60		rts				rts
.1583					FixBranches:
.1583	20 c2 1d	jsr $1dc2			jsr 	OUTPUTRewind 				; back to the start of the *object* code.
.1586					_FBLoop:
.1586	b2 25		lda ($25)			lda 	(objPtr) 					; get the next one.
.1588	c9 d0		cmp #$d0			cmp 	#PCD_CMD_GOTO 				; found GOTO or GOSUB, patch up.
.158a	f0 16		beq $15a2			beq 	_FBFixGotoGosub
.158c	c9 d1		cmp #$d1			cmp 	#PCD_CMD_GOSUB
.158e	f0 12		beq $15a2			beq 	_FBFixGotoGosub
.1590	c9 d3		cmp #$d3			cmp 	#PCD_CMD_GOTOCMD_NZ 		; patch the conditional GOTOs for Z/NZ TOS.
.1592	f0 0e		beq $15a2			beq 	_FBFixGotoGosub
.1594	c9 d2		cmp #$d2			cmp 	#PCD_CMD_GOTOCMD_Z
.1596	f0 0a		beq $15a2			beq 	_FBFixGotoGosub
.1598	c9 d4		cmp #$d4			cmp 	#PCD_CMD_VARSPACE
.159a	f0 49		beq $15e5			beq 	_FBFixVarSpace
.159c					_FBNext:
.159c	20 58 16	jsr $1658			jsr 	MoveObjectForward 			; move forward in object code.
.159f	90 e5		bcc $1586			bcc 	_FBLoop 					; not finished
.15a1					_FBExit:
.15a1	60		rts				rts
.15a2					_FBFixGotoGosub:
.15a2	a0 01		ldy #$01			ldy 	#1 							; if page is currently $FF
.15a4	b1 25		lda ($25),y			lda 	(objPtr),y 					; then patch else leave.
.15a6	c9 ff		cmp #$ff			cmp 	#$FF
.15a8	d0 f2		bne $159c			bne 	_FBNext
.15aa	a0 02		ldy #$02			ldy 	#2							; line number in YA
.15ac	b1 25		lda ($25),y			lda 	(objPtr),y
.15ae	48		pha				pha
.15af	c8		iny				iny
.15b0	b1 25		lda ($25),y			lda 	(objPtr),y
.15b2	a8		tay				tay
.15b3	68		pla				pla
.15b4	20 0c 1d	jsr $1d0c			jsr 	STRFindLine			 		; find where it is X:YA
.15b7	90 08		bcc $15c1			bcc 	_FBFFound 					; not found, so must be >
.15b9	48		pha				pha
.15ba	b2 25		lda ($25)			lda 	(objPtr) 					; which is a fail if not CMD_GOTOCMD_Z
.15bc	c9 d2		cmp #$d2			cmp 	#PCD_CMD_GOTOCMD_Z
.15be	d0 15		bne $15d5			bne 	_FBFFail
.15c0	68		pla				pla
.15c1					_FBFFound:
.15c1	20 60 1d	jsr $1d60			jsr 	STRMakeOffset 				; make it an offset from X:YA
.15c4	5a		phy				phy	 								; patch the GOTO/GOSUB
.15c5	48		pha				pha
.15c6	a0 01		ldy #$01			ldy 	#1
.15c8	8a		txa				txa
.15c9	91 25		sta ($25),y			sta 	(objPtr),y
.15cb	c8		iny				iny
.15cc	68		pla				pla
.15cd	91 25		sta ($25),y			sta 	(objPtr),y
.15cf	c8		iny				iny
.15d0	68		pla				pla
.15d1	91 25		sta ($25),y			sta 	(objPtr),y
.15d3	80 c7		bra $159c			bra 	_FBNext
.15d5					_FBFFail:
.15d5	a0 02		ldy #$02			ldy 	#2
.15d7	b1 25		lda ($25),y			lda 	(objPtr),y
.15d9	8d 00 05	sta $0500			sta 	currentLineNumber
.15dc	c8		iny				iny
.15dd	b1 25		lda ($25),y			lda 	(objPtr),y
.15df	8d 01 05	sta $0501			sta 	currentLineNumber+1
.15e2	4c 9b 13	jmp $139b		jmp	ErrorV_line
.15e5					_FBFixVarSpace:
.15e5	a0 01		ldy #$01			ldy 	#1
.15e7	ad 13 06	lda $0613			lda 	freeVariableMemory
.15ea	91 25		sta ($25),y			sta 	(objPtr),y
.15ec	c8		iny				iny
.15ed	ad 14 06	lda $0614			lda 	freeVariableMemory+1
.15f0	91 25		sta ($25),y			sta 	(objPtr),y
.15f2	80 a8		bra $159c			bra 	_FBNext
.15f4					CommandFOR:
.15f4	20 2c 1b	jsr $1b2c			jsr 	GetNextNonSpace 			; first letter of index variable, should be.
.15f7	20 42 1b	jsr $1b42			jsr 	CharIsAlpha 				; if not alpha , error
.15fa	90 59		bcc $1655			bcc 	_CFFail
.15fc	20 d0 1e	jsr $1ed0			jsr 	GetReferenceTerm 			; figure out the reference.
.15ff	48		pha				pha 								; save type
.1600	29 40		and #$40			and 	#NSSTypeMask 				; check it is numeric
.1602	c9 00		cmp #$00			cmp 	#NSSIFloat
.1604	d0 4f		bne $1655			bne 	_CFFail
.1606	5a		phy				phy 								; save reference on the stack
.1607	da		phx				phx
.1608	a9 b2		lda #$b2			lda 	#C64_EQUAL 					; check for equal.
.160a	20 97 10	jsr $1097			jsr 	CheckNextA
.160d	20 6d 14	jsr $146d			jsr 	CompileExpressionAt0 		; initial value
.1610	fa		plx				plx 								; get reference back.
.1611	7a		ply				ply
.1612	5a		phy				phy
.1613	da		phx				phx
.1614	38		sec				sec 								; set initial value.
.1615	20 82 1e	jsr $1e82			jsr 	GetSetVariable
.1618	fa		plx				plx
.1619	7a		ply				ply
.161a	68		pla				pla
.161b	29 20		and #$20			and 	#NSSIInt16
.161d	f0 04		beq $1623			beq 	_CFNotInt16
.161f	98		tya				tya
.1620	09 80		ora #$80			ora 	#$80
.1622	a8		tay				tay
.1623					_CFNotInt16:
.1623	8a		txa				txa 								; reference in YA
.1624	20 37 11	jsr $1137			jsr 	PushIntegerYA
.1627	a9 a4		lda #$a4			lda 	#C64_TO
.1629	20 97 10	jsr $1097			jsr 	CheckNextA
.162c	20 6d 14	jsr $146d			jsr 	CompileExpressionAt0 		; terminal value
.162f	29 40		and #$40			and 	#NSSTypeMask 				; check it is numeric
.1631	c9 00		cmp #$00			cmp 	#NSSIFloat
.1633	d0 20		bne $1655			bne 	_CFFail
.1635	20 13 1b	jsr $1b13			jsr 	LookNextNonSpace 			; followed by STEP
.1638	c9 a9		cmp #$a9			cmp 	#C64_STEP
.163a	d0 0e		bne $164a			bne 	_CFNoStep
.163c	20 21 1b	jsr $1b21			jsr 	GetNext 					; consume it.
.163f	20 6d 14	jsr $146d			jsr 	CompileExpressionAt0 		; terminal value
.1642	29 40		and #$40			and 	#NSSTypeMask 				; check it is numeric
.1644	c9 00		cmp #$00			cmp 	#NSSIFloat
.1646	d0 0d		bne $1655			bne 	_CFFail
.1648	80 05		bra $164f			bra 	_CFParametersDone
.164a					_CFNoStep:
.164a	a9 01		lda #$01			lda 	#1 							; default STEP e.g. 1
.164c	20 4a 11	jsr $114a			jsr 	PushIntegerA
.164f					_CFParametersDone:
.164f	a9 95		lda #$95			lda 	#PCD_FOR  					; compile FOR word.
.1651	20 83 10	jsr $1083			jsr 	WriteCodeByte
.1654	60		rts				rts
.1655					_CFFail:
.1655	4c 58 13	jmp $1358		jmp	ErrorV_syntax
.1658					MoveObjectForward:
.1658	b2 25		lda ($25)			lda 	(objPtr) 					; get next
.165a	c9 ff		cmp #$ff			cmp 	#$FF
.165c	f0 36		beq $1694			beq 	_MOFEnd
.165e	c9 40		cmp #$40			cmp 	#$40 						; 00-3F
.1660	90 24		bcc $1686			bcc 	_MOFAdvance1 				; forward 1
.1662	a0 02		ldy #$02			ldy 	#2 							; 40-6F
.1664	c9 70		cmp #$70			cmp 	#$70 						; forward 2
.1666	90 20		bcc $1688			bcc 	_MOFAdvanceY
.1668	c9 ca		cmp #$ca			cmp 	#PCD_STARTSYSTEM 			; 70 - System tokens.
.166a	90 1a		bcc $1686			bcc 	_MOFAdvance1 				; forward 1
.166c	a8		tay				tay 								; read the size.
.166d	b9 28 1d	lda $1d28,y			lda 	MOFSizeTable-PCD_STARTSYSTEM,y
.1670	a8		tay				tay
.1671	c8		iny				iny 								; add 1 for the system token.
.1672	d0 14		bne $1688			bne 	_MOFAdvanceY 				; if 0, was $FF thus a string/data skip.
.1674	a0 01		ldy #$01			ldy 	#1 							; get length byte
.1676	b1 25		lda ($25),y			lda 	(objPtr),y
.1678	a8		tay				tay 								; into Y.
.1679	18		clc				clc
.167a	a5 25		lda $25				lda 	objPtr						; add 2 to the object pointer
.167c	69 02		adc #$02			adc 	#2
.167e	85 25		sta $25				sta 	objPtr
.1680	90 02		bcc $1684			bcc 	_MOFNoCarry1
.1682	e6 26		inc $26				inc 	objPtr+1
.1684					_MOFNoCarry1:
.1684	80 02		bra $1688			bra 	_MOFAdvanceY
.1686					_MOFAdvance1:
.1686	a0 01		ldy #$01			ldy 	#1
.1688					_MOFAdvanceY:
.1688	98		tya				tya 								; add X to objPtr
.1689	18		clc				clc
.168a	65 25		adc $25				adc 	objPtr
.168c	85 25		sta $25				sta 	objPtr
.168e	90 02		bcc $1692			bcc 	_MOFNoCarry2
.1690	e6 26		inc $26				inc 	objPtr+1
.1692					_MOFNoCarry2:
.1692	18		clc				clc 								; not completed.
.1693	60		rts				rts
.1694					_MOFEnd:
.1694	e6 25		inc $25				inc 	objPtr
.1696	d0 02		bne $169a			bne 	_MOFENoCarry
.1698	e6 26		inc $26				inc 	objPtr+1
.169a					_MOFENoCarry:
.169a	38		sec				sec
.169b	60		rts				rts
.169c					INPUTOpen:
.169c	a9 9d		lda #$9d			lda 	#((EndProgram+2) & $FF)
.169e	85 30		sta $30				sta 	0+srcInputPtr
.16a0	a9 26		lda #$26			lda 	#((EndProgram+2) >> 8) & $FF
.16a2	85 31		sta $31				sta 	1+srcInputPtr
.16a4					INPUTClose:
.16a4	60		rts				rts
.16a5					INPUTGet:
.16a5	b2 30		lda ($30)			lda 	(srcInputPtr)
.16a7	e6 30		inc $30				inc 	srcInputPtr
.16a9	d0 02		bne $16ad			bne 	_IGSkip
.16ab	e6 31		inc $31				inc 	srcInputPtr+1
.16ad					_IGSkip:
.16ad	60		rts				rts
.0030					srcInputPtr:
>0030							.fill 	2
.16ae					FNCompile:
.16ae	20 2c 1b	jsr $1b2c			jsr 	GetNextNonSpace				; get variable name w/type must be array e.g. DEF FNx(a)
.16b1	20 91 1b	jsr $1b91			jsr 	ExtractVariableName
.16b4	e0 00		cpx #$00			cpx 	#0
.16b6	10 32		bpl $16ea			bpl 	_FNError
.16b8	8a		txa				txa 								; convert to a function reference - bit 7:0 clear bit 7:1 set
.16b9	29 7f		and #$7f			and 	#$7F
.16bb	aa		tax				tax
.16bc	98		tya				tya
.16bd	09 80		ora #$80			ora 	#$80
.16bf	a8		tay				tay
.16c0	20 27 15	jsr $1527			jsr 	FindVariable				; does it already exist ?
.16c3	90 25		bcc $16ea			bcc 	_FNError 					; no.
.16c5	20 60 1d	jsr $1d60			jsr 	STRMakeOffset 				; convert to a relative address.
.16c8	c9 00		cmp #$00			cmp 	#0 							; fix up.
.16ca	d0 01		bne $16cd			bne 	_FNNoBorrow
.16cc	88		dey				dey
.16cd					_FNNoBorrow:
.16cd	3a		dec a				dec 	a
.16ce	5a		phy				phy 								; save location of routine on stack.
.16cf	48		pha				pha
.16d0	da		phx				phx
.16d1	20 6d 14	jsr $146d			jsr 	CompileExpressionAt0
.16d4	20 91 10	jsr $1091			jsr 	CheckNextRParen
.16d7	a9 d1		lda #$d1			lda 	#PCD_CMD_GOSUB
.16d9	20 83 10	jsr $1083			jsr 	WriteCodeByte
.16dc	68		pla				pla
.16dd	20 83 10	jsr $1083			jsr 	WriteCodeByte
.16e0	68		pla				pla
.16e1	20 83 10	jsr $1083			jsr 	WriteCodeByte
.16e4	68		pla				pla
.16e5	20 83 10	jsr $1083			jsr 	WriteCodeByte
.16e8	18		clc				clc
.16e9	60		rts				rts
.16ea					_FNError:
.16ea	4c 4b 13	jmp $134b		jmp	ErrorV_value
.16ed					CommandTables:
>16ed	07 cb 00 03 ef 1b 06			.byte	$07,$cb,$00,$03,CommandGOAlt & $FF,CommandGOAlt >> 8,$06
>16f4	07 89 00 03 f6 1b 06			.byte	$07,$89,$00,$03,CommandGOTO & $FF,CommandGOTO >> 8,$06
>16fb	07 8d 00 03 e9 1b 06			.byte	$07,$8d,$00,$03,CommandGOSUB & $FF,CommandGOSUB >> 8,$06
>1702	07 88 00 03 71 1c 06			.byte	$07,$88,$00,$03,CommandLET & $FF,CommandLET >> 8,$06
>1709	07 85 00 03 51 1c 06			.byte	$07,$85,$00,$03,CommandINPUT & $FF,CommandINPUT >> 8,$06
>1710	07 84 00 04 65 1c 06			.byte	$07,$84,$00,$04,CommandINPUTStream & $FF,CommandINPUTStream >> 8,$06
>1717	07 99 00 03 fd 1d 06			.byte	$07,$99,$00,$03,CommandPRINT & $FF,CommandPRINT >> 8,$06
>171e	07 98 00 04 fd 1d 06			.byte	$07,$98,$00,$04,CommandPRINT & $FF,CommandPRINT >> 8,$06
>1725	07 8f 00 03 08 1f 06			.byte	$07,$8f,$00,$03,CommandREM & $FF,CommandREM >> 8,$06
>172c	07 81 00 03 f4 15 06			.byte	$07,$81,$00,$03,CommandFOR & $FF,CommandFOR >> 8,$06
>1733	07 82 00 03 6a 1d 06			.byte	$07,$82,$00,$03,CommandNEXT & $FF,CommandNEXT >> 8,$06
>173a	07 a1 00 03 62 1b 06			.byte	$07,$a1,$00,$03,CommandGET & $FF,CommandGET >> 8,$06
>1741	07 83 00 03 f2 11 06			.byte	$07,$83,$00,$03,CommandDATA & $FF,CommandDATA >> 8,$06
>1748	07 87 00 03 46 1e 06			.byte	$07,$87,$00,$03,CommandREAD & $FF,CommandREAD >> 8,$06
>174f	07 86 00 03 85 12 06			.byte	$07,$86,$00,$03,CommandDIM & $FF,CommandDIM >> 8,$06
>1756	07 96 00 03 0e 12 06			.byte	$07,$96,$00,$03,CommandDEF & $FF,CommandDEF >> 8,$06
>175d	07 8b 00 e3 19 1c 06			.byte	$07,$8b,$00,$e3,CommandIF & $FF,CommandIF >> 8,$06
>1764	08 92 00 ea e3 d4 1f 06			.byte	$08,$92,$00,$ea,$e3,CommandWAIT & $FF,CommandWAIT >> 8,$06
>176c	09 91 00 e1 a9 03 96 1d			.byte	$09,$91,$00,$e1,169,$03,CommandON & $FF,CommandON >> 8,$06
>1774	06
>1775	07 9e 00 e2 ca 92 06			.byte	$07,$9e,$00,$e2,37578 & $FF,37578 >> 8,$06
>177c	07 97 00 ea e1 ac 06			.byte	$07,$97,$00,$ea,$e1,172,$06
>1783	06 8e 00 10 98 06			.byte	$06,$8e,$00,$10,152,$06
>1789	07 90 00 20 ca 91 06			.byte	$07,$90,$00,$20,37322 & $FF,37322 >> 8,$06
>1790	07 80 00 20 ca 82 06			.byte	$07,$80,$00,$20,33482 & $FF,33482 >> 8,$06
>1797	07 8c 00 20 ca 90 06			.byte	$07,$8c,$00,$20,37066 & $FF,37066 >> 8,$06
>179e	07 9d 00 e3 03 20 06			.byte	$07,$9d,$00,$e3,CommandCMD & $FF,CommandCMD >> 8,$06
>17a5	0a 9f 00 ea e3 16 20 10			.byte	$0a,$9f,$00,$ea,$e3,CommandOPEN & $FF,CommandOPEN >> 8,$10,198,$06
>17ad	c6 06
>17af	06 a0 00 e1 c3 06			.byte	$06,$a0,$00,$e1,195,$06
>17b5	07 ce 90 20 ca ac 06			.byte	$07,$ce,$90,$20,44234 & $FF,44234 >> 8,$06
>17bc	0a ce 92 e3 df 1a 20 ca			.byte	$0a,$ce,$92,$e3,OptionalParameterCompile & $FF,OptionalParameterCompile >> 8,$20,44490 & $FF,44490 >> 8,$06
>17c4	ad 06
>17c6	0a ce 8d e3 df 1a 20 ca			.byte	$0a,$ce,$8d,$e3,OptionalParameterCompile & $FF,OptionalParameterCompile >> 8,$20,44746 & $FF,44746 >> 8,$06
>17ce	ae 06
>17d0	06 ce 86 e1 c7 06			.byte	$06,$ce,$86,$e1,199,$06
>17d6	08 ce 84 ea ea e1 c8 06			.byte	$08,$ce,$84,$ea,$ea,$e1,200,$06
>17de	07 ce af e2 ca 98 06			.byte	$07,$ce,$af,$e2,39114 & $FF,39114 >> 8,$06
>17e5	07 ce 8c e2 ca 8c 06			.byte	$07,$ce,$8c,$e2,36042 & $FF,36042 >> 8,$06
>17ec	09 ce ae ea ea e2 ca 95			.byte	$09,$ce,$ae,$ea,$ea,$e2,38346 & $FF,38346 >> 8,$06
>17f4	06
>17f5	08 ce 87 ea ea e1 99 06			.byte	$08,$ce,$87,$ea,$ea,$e1,153,$06
>17fd	0a ce 88 ea ea ea ea e1			.byte	$0a,$ce,$88,$ea,$ea,$ea,$ea,$e1,154,$06
>1805	9a 06
>1807	0a ce 8a ea ea ea ea e1			.byte	$0a,$ce,$8a,$ea,$ea,$ea,$ea,$e1,155,$06
>180f	9b 06
>1811	0a ce 89 ea ea ea ea e1			.byte	$0a,$ce,$89,$ea,$ea,$ea,$ea,$e1,156,$06
>1819	9c 06
>181b	09 ce 8b ea ea ea f1 9d			.byte	$09,$ce,$8b,$ea,$ea,$ea,$f1,157,$06
>1823	06
>1824	07 ce 99 20 ca 99 06			.byte	$07,$ce,$99,$20,39370 & $FF,39370 >> 8,$06
>182b	08 ce 9a ea e2 ca 9a 06			.byte	$08,$ce,$9a,$ea,$e2,39626 & $FF,39626 >> 8,$06
>1833	08 ce 9b ea e2 ca 9b 06			.byte	$08,$ce,$9b,$ea,$e2,39882 & $FF,39882 >> 8,$06
>183b	08 ce 9c ea e2 ca 9c 06			.byte	$08,$ce,$9c,$ea,$e2,40138 & $FF,40138 >> 8,$06
>1843	08 ce 9d ea e2 ca 9d 06			.byte	$08,$ce,$9d,$ea,$e2,40394 & $FF,40394 >> 8,$06
>184b	08 ce 9e ea e2 ca 9e 06			.byte	$08,$ce,$9e,$ea,$e2,40650 & $FF,40650 >> 8,$06
>1853	08 ce 9f ea e2 ca 9f 06			.byte	$08,$ce,$9f,$ea,$e2,40906 & $FF,40906 >> 8,$06
>185b	08 ce a0 ea e2 ca a0 06			.byte	$08,$ce,$a0,$ea,$e2,41162 & $FF,41162 >> 8,$06
>1863	08 ce a1 ea f2 ca a1 06			.byte	$08,$ce,$a1,$ea,$f2,41418 & $FF,41418 >> 8,$06
>186b	08 ce a2 ea f2 ca a2 06			.byte	$08,$ce,$a2,$ea,$f2,41674 & $FF,41674 >> 8,$06
>1873	08 ce a3 ea e2 ca a3 06			.byte	$08,$ce,$a3,$ea,$e2,41930 & $FF,41930 >> 8,$06
>187b	07 ce a4 20 ca a4 06			.byte	$07,$ce,$a4,$20,42186 & $FF,42186 >> 8,$06
>1882	08 ce a5 ea e2 ca a5 06			.byte	$08,$ce,$a5,$ea,$e2,42442 & $FF,42442 >> 8,$06
>188a	08 ce a6 ea e2 ca a6 06			.byte	$08,$ce,$a6,$ea,$e2,42698 & $FF,42698 >> 8,$06
>1892	08 ce a7 ea e2 ca a7 06			.byte	$08,$ce,$a7,$ea,$e2,42954 & $FF,42954 >> 8,$06
>189a	08 ce a8 ea e2 ca a8 06			.byte	$08,$ce,$a8,$ea,$e2,43210 & $FF,43210 >> 8,$06
>18a2	08 ce a9 ea e2 ca a9 06			.byte	$08,$ce,$a9,$ea,$e2,43466 & $FF,43466 >> 8,$06
>18aa	08 ce aa ea f2 ca aa 06			.byte	$08,$ce,$aa,$ea,$f2,43722 & $FF,43722 >> 8,$06
>18b2	08 ce ab ea f2 ca ab 06			.byte	$08,$ce,$ab,$ea,$f2,43978 & $FF,43978 >> 8,$06
>18ba	00						.byte 	0
.18bb					UnaryTables:
>18bb	07 b4 00 8e 91 b6 06			.byte	$07,$b4,$00,$8e,$91,182,$06
>18c2	08 b5 00 8e 92 ca 84 06			.byte	$08,$b5,$00,$8e,$92,33994 & $FF,33994 >> 8,$06
>18ca	07 b6 00 8e 91 8d 06			.byte	$07,$b6,$00,$8e,$91,141,$06
>18d1	07 b7 00 8e 91 c1 06			.byte	$07,$b7,$00,$8e,$91,193,$06
>18d8	07 b8 00 8e 91 96 06			.byte	$07,$b8,$00,$8e,$91,150,$06
>18df	07 b9 00 8e 91 ad 06			.byte	$07,$b9,$00,$8e,$91,173,$06
>18e6	08 ba 00 8e 92 ca 85 06			.byte	$08,$ba,$00,$8e,$92,34250 & $FF,34250 >> 8,$06
>18ee	07 bb 00 8e 91 b4 06			.byte	$07,$bb,$00,$8e,$91,180,$06
>18f5	08 bc 00 8e 92 ca 86 06			.byte	$08,$bc,$00,$8e,$92,34506 & $FF,34506 >> 8,$06
>18fd	08 bd 00 8e 92 ca 87 06			.byte	$08,$bd,$00,$8e,$92,34762 & $FF,34762 >> 8,$06
>1905	08 be 00 8e 92 ca 88 06			.byte	$08,$be,$00,$8e,$92,35018 & $FF,35018 >> 8,$06
>190d	08 bf 00 8e 92 ca 89 06			.byte	$08,$bf,$00,$8e,$92,35274 & $FF,35274 >> 8,$06
>1915	08 c0 00 8e 92 ca 8a 06			.byte	$08,$c0,$00,$8e,$92,35530 & $FF,35530 >> 8,$06
>191d	08 c1 00 8e 92 ca 8b 06			.byte	$08,$c1,$00,$8e,$92,35786 & $FF,35786 >> 8,$06
>1925	07 c2 00 8e 91 ab 06			.byte	$07,$c2,$00,$8e,$91,171,$06
>192c	07 c3 00 8f 91 a2 06			.byte	$07,$c3,$00,$8f,$91,162,$06
>1933	07 c4 00 8e 91 ba 07			.byte	$07,$c4,$00,$8e,$91,186,$07
>193a	07 c5 00 8f 91 c2 06			.byte	$07,$c5,$00,$8f,$91,194,$06
>1941	07 c6 00 8f 91 8f 06			.byte	$07,$c6,$00,$8f,$91,143,$06
>1948	07 c7 00 8e 91 93 07			.byte	$07,$c7,$00,$8e,$91,147,$07
>194f	08 c8 00 8f ae 91 bb 07			.byte	$08,$c8,$00,$8f,$ae,$91,187,$07
>1957	08 c9 00 8f ae 91 bc 07			.byte	$08,$c9,$00,$8f,$ae,$91,188,$07
>195f	0b ca 00 8f ae 03 df 1a			.byte	$0b,$ca,$00,$8f,$ae,$03,OptionalParameterCompile & $FF,OptionalParameterCompile >> 8,$91,189,$07
>1967	91 bd 07
>196a	07 a8 00 03 fe 1a 06			.byte	$07,$a8,$00,$03,NotUnaryCompile & $FF,NotUnaryCompile >> 8,$06
>1971	07 a5 00 03 ae 16 06			.byte	$07,$a5,$00,$03,FNCompile & $FF,FNCompile >> 8,$06
>1978	07 ce d6 8e 91 91 07			.byte	$07,$ce,$d6,$8e,$91,145,$07
>197f	07 ce d5 8e 91 9e 07			.byte	$07,$ce,$d5,$8e,$91,158,$07
>1986	08 ce d0 8e ae 91 c9 06			.byte	$08,$ce,$d0,$8e,$ae,$91,201,$06
>198e	08 ce d4 8e 92 ca 83 06			.byte	$08,$ce,$d4,$8e,$92,33738 & $FF,33738 >> 8,$06
>1996	07 ce d3 20 ca 8d 06			.byte	$07,$ce,$d3,$20,36298 & $FF,36298 >> 8,$06
>199d	07 ce d1 20 ca 8e 06			.byte	$07,$ce,$d1,$20,36554 & $FF,36554 >> 8,$06
>19a4	07 ce d2 20 ca 8f 06			.byte	$07,$ce,$d2,$20,36810 & $FF,36810 >> 8,$06
>19ab	09 ce d7 8e ae 92 ca 96			.byte	$09,$ce,$d7,$8e,$ae,$92,38602 & $FF,38602 >> 8,$06
>19b3	06
>19b4	00						.byte 	0
.19b5					GeneratorProcess:
.19b5	86 28		stx $28				stx 	zTemp0 						; save generation pointer in zTemp0
.19b7	84 29		sty $29				sty 	zTemp0+1
.19b9	85 2a		sta $2a				sta 	zTemp1 						; first match token
.19bb	64 2b		stz $2b				stz 	zTemp1+1
.19bd	c9 ce		cmp #$ce			cmp 	#$CE 						; check if shift
.19bf	d0 05		bne $19c6			bne 	_GPNotShifted
.19c1	20 21 1b	jsr $1b21			jsr 	GetNext 					; get the shifted token
.19c4	85 2b		sta $2b				sta 	zTemp1+1 					; match CE xx
.19c6					_GPNotShifted:
.19c6					_GPSearch:
.19c6	b2 28		lda ($28)			lda 	(zTemp0) 					; reached end ?
.19c8	18		clc				clc
.19c9	f0 2f		beq $19fa			beq 	_GPExit
.19cb	a0 01		ldy #$01			ldy 	#1 							; tokens match
.19cd	b1 28		lda ($28),y			lda 	(zTemp0),y
.19cf	c5 2a		cmp $2a				cmp 	zTemp1
.19d1	d0 09		bne $19dc			bne 	_GPNext
.19d3	a5 2b		lda $2b				lda 	zTemp1+1 					; 2nd token ?
.19d5	f0 12		beq $19e9			beq 	_GPFound
.19d7	c8		iny				iny 								; check match.
.19d8	d1 28		cmp ($28),y			cmp 	(zTemp0),y
.19da	f0 0d		beq $19e9			beq 	_GPFound
.19dc					_GPNext:
.19dc	18		clc				clc 								; follow to next
.19dd	a5 28		lda $28				lda 	zTemp0
.19df	72 28		adc ($28)			adc 	(zTemp0)
.19e1	85 28		sta $28				sta 	zTemp0
.19e3	90 e1		bcc $19c6			bcc 	_GPSearch
.19e5	e6 29		inc $29				inc 	zTemp0+1
.19e7	80 dd		bra $19c6			bra 	_GPSearch
.19e9					_GPFound:
.19e9	18		clc				clc 								; skip to action bytes
.19ea	a5 28		lda $28				lda 	zTemp0 						; <offset> <token lo> <token hi> first
.19ec	69 03		adc #$03			adc 	#3
.19ee	85 28		sta $28				sta 	zTemp0
.19f0	90 02		bcc $19f4			bcc 	_GPNoCarry
.19f2	e6 29		inc $29				inc 	zTemp0+1
.19f4					_GPNoCarry:
.19f4					_GPLoop:
.19f4	20 fb 19	jsr $19fb			jsr 	GeneratorExecute 			; execute one command
.19f7	90 fb		bcc $19f4			bcc 	_GPLoop 					; go back if not completed.
.19f9	38		sec				sec 								; return with CS.
.19fa					_GPExit:
.19fa	60		rts				rts
.19fb					GeneratorExecute:
.19fb	20 a6 1a	jsr $1aa6			jsr 	_GEFetchZTemp0 				; get next.
.19fe	48		pha				pha 								; split into 2 nibbles
.19ff	4a		lsr a				lsr 	a
.1a00	4a		lsr a				lsr 	a
.1a01	4a		lsr a				lsr		a
.1a02	4a		lsr a				lsr 	a
.1a03	20 0d 1a	jsr $1a0d			jsr 	_GEExecuteNibble 			; MSB first
.1a06	68		pla				pla
.1a07	b0 03		bcs $1a0c			bcs 	_GEHaveCompleted
.1a09	20 0d 1a	jsr $1a0d			jsr 	_GEExecuteNibble 			; LSB second
.1a0c					_GEHaveCompleted:
.1a0c	60		rts				rts
.1a0d					_GEExecuteNibble:
.1a0d	29 0f		and #$0f			and 	#$0F
.1a0f	0a		asl a				asl 	a
.1a10	aa		tax				tax
.1a11	7c 14 1a	jmp ($1a14,x)			jmp 	(_GEExecuteVectors,x)
.1a14					_GEExecuteVectors:
>1a14	34 1a						.word 	_GEXNop 					; 0  (no operation)
>1a16	3c 1a						.word 	_GEXToken1 					; 1  (compile 1 byte token)
>1a18	36 1a						.word 	_GEXToken2 					; 2  (compile 2 byte token)
>1a1a	89 1a						.word 	_GEXExecute 				; 3  (run arbitrary code)
>1a1c	7c 1a						.word 	_GEXChannelExec 			; 4  (run arbitrary code with possible channel redirection)
>1a1e	34 1a						.word 	_GEXNop 					; 5
>1a20	43 1a						.word 	_GEXExitNumber 				; 6  exit return ifloat32 type
>1a22	47 1a						.word 	_GEXExitString 				; 7  exit return string type
>1a24	4b 1a						.word 	_GEXLParam 					; 8  check ( follows
>1a26	4f 1a						.word 	_GEXRParam 					; 9  check ) follows
>1a28	53 1a						.word 	_GEXComma					; A  check , follows
>1a2a	34 1a						.word 	_GEXNop 					; B
>1a2c	34 1a						.word 	_GEXNop 					; C
>1a2e	34 1a						.word 	_GEXNop 					; D
>1a30	63 1a						.word 	_GEXNumber 					; E  compile get any number
>1a32	6e 1a						.word 	_GEXString 					; F  compile get any string
.1a34					_GEXNop:
.1a34	18		clc				clc
.1a35	60		rts				rts
.1a36					_GEXToken2:
.1a36	20 a6 1a	jsr $1aa6			jsr 	_GEFetchZTemp0
.1a39	20 83 10	jsr $1083			jsr 	WriteCodeByte
.1a3c					_GEXToken1:
.1a3c	20 a6 1a	jsr $1aa6			jsr 	_GEFetchZTemp0
.1a3f	20 83 10	jsr $1083			jsr 	WriteCodeByte
.1a42	60		rts				rts
.1a43					_GEXExitNumber:
.1a43	a9 00		lda #$00			lda 	#NSSIFloat
.1a45	38		sec				sec
.1a46	60		rts				rts
.1a47					_GEXExitString:
.1a47	a9 40		lda #$40			lda 	#NSSString
.1a49	38		sec				sec
.1a4a	60		rts				rts
.1a4b					_GEXLParam:
.1a4b	a9 28		lda #$28			lda 	#"("
.1a4d	80 06		bra $1a55			bra 	_GEXCheck
.1a4f					_GEXRParam:
.1a4f	a9 29		lda #$29			lda 	#")"
.1a51	80 02		bra $1a55			bra 	_GEXCheck
.1a53					_GEXComma:
.1a53	a9 2c		lda #$2c			lda 	#","
.1a55					_GEXCheck:
.1a55	85 2c		sta $2c				sta 	zTemp2 						; save match
.1a57	20 2c 1b	jsr $1b2c			jsr 	GetNextNonSpace 			; get next skipping spaces
.1a5a	c5 2c		cmp $2c				cmp 	zTemp2 						; check matches.
.1a5c	d0 02		bne $1a60			bne 	_GEXSyntax
.1a5e	18		clc				clc
.1a5f	60		rts				rts
.1a60					_GEXSyntax:
.1a60	4c 58 13	jmp $1358		jmp	ErrorV_syntax
.1a63					_GEXNumber:
.1a63	20 af 1a	jsr $1aaf			jsr 	GEXCompileExpression 		; compile expression
.1a66	29 40		and #$40			and 	#NSSTypeMask
.1a68	c9 00		cmp #$00			cmp  	#NSSIFloat
.1a6a	d0 0d		bne $1a79			bne 	_GEXType
.1a6c	18		clc				clc
.1a6d	60		rts				rts
.1a6e					_GEXString:
.1a6e	20 af 1a	jsr $1aaf			jsr 	GEXCompileExpression 		; compile expression
.1a71	29 40		and #$40			and 	#NSSTypeMask
.1a73	c9 40		cmp #$40			cmp  	#NSSString
.1a75	d0 02		bne $1a79			bne 	_GEXType
.1a77	18		clc				clc
.1a78	60		rts				rts
.1a79					_GEXType:
.1a79	4c 68 13	jmp $1368		jmp	ErrorV_type
.1a7c					_GEXChannelExec:
.1a7c	20 bf 1a	jsr $1abf			jsr 	ChannelPrefix 				; set up default
.1a7f	20 89 1a	jsr $1a89			jsr 	_GEXExecute
.1a82	08		php				php
.1a83	20 d9 1a	jsr $1ad9			jsr 	ChannelPostfix 				; replace default.
.1a86	28		plp				plp
.1a87	60		rts				rts
>1a88	db						.byte 	$DB 						; causes a break in the emulator
.1a89					_GEXExecute:
.1a89	20 a6 1a	jsr $1aa6			jsr 	_GEFetchZTemp0 				; get vector
.1a8c	85 2c		sta $2c				sta 	zTemp2
.1a8e	20 a6 1a	jsr $1aa6			jsr 	_GEFetchZTemp0
.1a91	85 2d		sta $2d				sta 	zTemp2+1
.1a93	a6 28		ldx $28				ldx 	zTemp0 						; push generation exec on to stack for reentrancy
.1a95	da		phx				phx
.1a96	a6 29		ldx $29				ldx 	zTemp0+1
.1a98	da		phx				phx
.1a99	20 a3 1a	jsr $1aa3			jsr 	_GECallZTemp2 				; execute code
.1a9c	fa		plx				plx 								; recover generation exec
.1a9d	86 29		stx $29				stx 	zTemp0+1
.1a9f	fa		plx				plx
.1aa0	86 28		stx $28				stx 	zTemp0
.1aa2	60		rts				rts
.1aa3					_GECallZTemp2:
.1aa3	6c 2c 00	jmp ($002c)			jmp 	(zTemp2)
.1aa6					_GEFetchZTemp0:
.1aa6	b2 28		lda ($28)			lda 	(zTemp0)
.1aa8	e6 28		inc $28				inc 	zTemp0
.1aaa	d0 02		bne $1aae			bne 	_GEFZ0Skip
.1aac	e6 29		inc $29				inc 	zTemp0+1
.1aae					_GEFZ0Skip:
.1aae	60		rts				rts
.1aaf					GEXCompileExpression:
.1aaf	a6 28		ldx $28				ldx 	zTemp0 						; push generation exec on to stack for reentrancy
.1ab1	da		phx				phx
.1ab2	a6 29		ldx $29				ldx 	zTemp0+1
.1ab4	da		phx				phx
.1ab5	20 6d 14	jsr $146d			jsr 	CompileExpressionAt0 		; compile expression.
.1ab8	fa		plx				plx 								; recover generation exec
.1ab9	86 29		stx $29				stx 	zTemp0+1
.1abb	fa		plx				plx
.1abc	86 28		stx $28				stx 	zTemp0
.1abe	60		rts				rts
.1abf					ChannelPrefix:
.1abf	a9 ae		lda #$ae			lda 	#PCD_GETCHANNEL				; set channel onto stack
.1ac1	20 83 10	jsr $1083			jsr 	WriteCodeByte
.1ac4	20 af 1a	jsr $1aaf			jsr 	GEXCompileExpression 		; channel #
.1ac7	29 40		and #$40			and 	#NSSTypeMask
.1ac9	c9 00		cmp #$00			cmp 	#NSSIFloat
.1acb	d0 09		bne $1ad6			bne 	_CPXType
.1acd	20 8d 10	jsr $108d			jsr 	CheckNextComma 				; check , follows.
.1ad0	a9 af		lda #$af			lda 	#PCD_SETCHANNEL				; set channel
.1ad2	20 83 10	jsr $1083			jsr 	WriteCodeByte
.1ad5	60		rts				rts
.1ad6					_CPXType:
.1ad6	4c 68 13	jmp $1368		jmp	ErrorV_type
.1ad9					ChannelPostfix:
.1ad9	a9 af		lda #$af			lda 	#PCD_SETCHANNEL				; set channel from TOS.
.1adb	20 83 10	jsr $1083			jsr 	WriteCodeByte
.1ade	60		rts				rts
.1adf					OptionalParameterCompile:
.1adf	20 13 1b	jsr $1b13			jsr 	LookNextNonSpace 			; what follows.
.1ae2	c9 2c		cmp #$2c			cmp 	#","
.1ae4	d0 0e		bne $1af4			bne 	_MidDefault
.1ae6	20 21 1b	jsr $1b21			jsr 	GetNext 					; consume ,
.1ae9	20 6d 14	jsr $146d			jsr 	CompileExpressionAt0
.1aec	29 40		and #$40			and 	#NSSTypeMask
.1aee	c9 00		cmp #$00			cmp 	#NSSIFloat
.1af0	d0 09		bne $1afb			bne 	MidFailType
.1af2	80 05		bra $1af9			bra 	_MidComplete
.1af4					_MidDefault:
.1af4	a9 ff		lda #$ff			lda 	#255 						; default of 255
.1af6	20 4a 11	jsr $114a			jsr 	PushIntegerA
.1af9					_MidComplete:
.1af9	18		clc				clc
.1afa	60		rts				rts
.1afb					MidFailType:
.1afb	4c 68 13	jmp $1368		jmp	ErrorV_type
.1afe					NotUnaryCompile:
.1afe	ad 22 15	lda $1522			lda 	PrecedenceTable+C64_EQUAL-C64_PLUS
.1b01	20 6f 14	jsr $146f			jsr 	CompileExpressionAtA 		; evaluate at that level
.1b04	29 40		and #$40			and 	#NSSTypeMask 				; check compile returns number.
.1b06	c9 00		cmp #$00			cmp 	#NSSIFloat
.1b08	d0 f1		bne $1afb			bne 	MidFailType
.1b0a	a9 a8		lda #$a8			lda 	#PCD_NOT 					; and NOT it.
.1b0c	20 83 10	jsr $1083			jsr 	WriteCodeByte
.1b0f	60		rts				rts
.1b10					LookNext:
.1b10	b2 2e		lda ($2e)			lda 	(srcPtr)
.1b12	60		rts				rts
.1b13					LookNextNonSpace:
.1b13	b2 2e		lda ($2e)			lda 	(srcPtr)
.1b15	c9 20		cmp #$20			cmp		#' '
.1b17	f0 03		beq $1b1c			beq 	_LNNSkip
.1b19	c9 00		cmp #$00			cmp 	#0
.1b1b	60		rts				rts
.1b1c					_LNNSkip:
.1b1c	20 21 1b	jsr $1b21			jsr 	GetNext
.1b1f	80 f2		bra $1b13			bra 	LookNextNonSpace
.1b21					GetNext:
.1b21	b2 2e		lda ($2e)			lda 	(srcPtr) 					; get next
.1b23	e6 2e		inc $2e				inc 	srcPtr
.1b25	d0 02		bne $1b29			bne 	_GNSkip
.1b27	e6 2f		inc $2f				inc 	srcPtr+1
.1b29					_GNSkip:
.1b29	c9 00		cmp #$00			cmp 	#0
.1b2b	60		rts				rts
.1b2c					GetNextNonSpace:
.1b2c	20 21 1b	jsr $1b21			jsr 	GetNext
.1b2f	c9 20		cmp #$20			cmp 	#' '
.1b31	f0 f9		beq $1b2c			beq 	GetNextNonSpace
.1b33	c9 00		cmp #$00			cmp 	#0
.1b35	60		rts				rts
.1b36					CharIsDigit:
.1b36	c9 30		cmp #$30			cmp 	#"0"
.1b38	90 06		bcc $1b40			bcc 	CCFalse
.1b3a	c9 3a		cmp #$3a			cmp 	#"9"+1
.1b3c	b0 02		bcs $1b40			bcs 	CCFalse
.1b3e					CCTrue:
.1b3e	38		sec				sec
.1b3f	60		rts				rts
.1b40					CCFalse:
.1b40	18		clc				clc
.1b41	60		rts				rts
.1b42					CharIsAlpha:
.1b42	c9 41		cmp #$41			cmp 	#"A"
.1b44	90 fa		bcc $1b40			bcc 	CCFalse
.1b46	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1b48	b0 f6		bcs $1b40			bcs 	CCFalse
.1b4a	80 f2		bra $1b3e			bra 	CCTrue
.1b4c					ConvertHexStyle:
.1b4c	38		sec				sec
.1b4d	e9 30		sbc #$30			sbc 	#"0" 						; check in range 0-9 first
.1b4f	90 ef		bcc $1b40			bcc 	CCFalse
.1b51	c9 0a		cmp #$0a			cmp 	#9+1
.1b53	90 e9		bcc $1b3e			bcc 	CCTrue
.1b55	38		sec				sec 								; shift into hex space A=>0 Z=>25
.1b56	e9 11		sbc #$11			sbc 	#"A"-"0"
.1b58	90 e6		bcc $1b40			bcc 	CCFalse
.1b5a	c9 1a		cmp #$1a			cmp 	#26 						; past Z ?
.1b5c	b0 e2		bcs $1b40			bcs 	CCFalse
.1b5e	69 0a		adc #$0a			adc 	#10 						; make valid quasi-hex 0-35
.1b60	80 dc		bra $1b3e			bra 	CCTrue
.1b62					CommandGET:
.1b62	20 13 1b	jsr $1b13			jsr 	LookNextNonSpace 			; # follows ?
.1b65	c9 23		cmp #$23			cmp 	#"#"
.1b67	d0 0d		bne $1b76			bne 	CommandGetBody
.1b69	20 21 1b	jsr $1b21			jsr 	GetNext 					; consume #
.1b6c	20 bf 1a	jsr $1abf			jsr 	ChannelPrefix 				; do it as GET#
.1b6f	20 76 1b	jsr $1b76			jsr 	CommandGetBody
.1b72	20 d9 1a	jsr $1ad9			jsr 	ChannelPostfix
.1b75	60		rts				rts
.1b76					CommandGetBody:
.1b76	20 2c 1b	jsr $1b2c			jsr 	GetNextNonSpace 			; get the first character
.1b79	20 d0 1e	jsr $1ed0			jsr 	GetReferenceTerm 			; identify variable to assign to
.1b7c	48		pha				pha
.1b7d	29 40		and #$40			and 	#NSSTypeMask 				; check if it is a string
.1b7f	c9 40		cmp #$40			cmp 	#NSSString
.1b81	d0 0b		bne $1b8e			bne 	_CGType
.1b83	a9 97		lda #$97			lda 	#PCD_GET 					; compile GET
.1b85	20 83 10	jsr $1083			jsr 	WriteCodeByte
.1b88	38		sec				sec
.1b89	68		pla				pla
.1b8a	20 82 1e	jsr $1e82			jsr		GetSetVariable
.1b8d	60		rts				rts
.1b8e					_CGType:
.1b8e	4c 68 13	jmp $1368		jmp	ErrorV_type
.1b91					ExtractVariableName:
.1b91	20 42 1b	jsr $1b42			jsr 	CharIsAlpha
.1b94	90 50		bcc $1be6			bcc 	_IVSyntax
.1b96	29 1f		and #$1f			and 	#31 						; reduce first character to 5 bits
.1b98	85 2a		sta $2a				sta 	zTemp1 						; we'll build it in zTemp1
.1b9a	64 2b		stz $2b				stz 	zTemp1+1
.1b9c	20 10 1b	jsr $1b10			jsr 	LookNext 					; is there a second character ?
.1b9f	20 42 1b	jsr $1b42			jsr 	CharIsAlpha  				; must be alphanumeric
.1ba2	b0 05		bcs $1ba9			bcs 	_IVHasSecond
.1ba4	20 36 1b	jsr $1b36			jsr 	CharIsDigit
.1ba7	90 07		bcc $1bb0			bcc 	_IVCheckType
.1ba9					_IVHasSecond:
.1ba9	29 3f		and #$3f			and 	#63 						; 6 bit ASCII.
.1bab	85 2b		sta $2b				sta 	zTemp1+1
.1bad					_IVGetNextCheck:
.1bad	20 21 1b	jsr $1b21			jsr 	GetNext 					; consume it
.1bb0					_IVCheckType:
.1bb0	20 10 1b	jsr $1b10			jsr 	LookNext					; check if string follows.
.1bb3	20 42 1b	jsr $1b42			jsr 	CharIsAlpha
.1bb6	b0 f5		bcs $1bad			bcs 	_IVGetNextCheck
.1bb8	20 36 1b	jsr $1b36			jsr 	CharIsDigit
.1bbb	b0 f0		bcs $1bad			bcs 	_IVGetNextCheck
.1bbd	a2 40		ldx #$40			ldx 	#NSSString
.1bbf	c9 24		cmp #$24			cmp 	#"$"
.1bc1	f0 06		beq $1bc9			beq 	_IVHasType
.1bc3	a2 20		ldx #$20			ldx 	#NSSIInt16 					; check if short int follows e.g. 16 bit
.1bc5	c9 25		cmp #$25			cmp 	#"%"
.1bc7	d0 08		bne $1bd1			bne 	_IVCheckArray
.1bc9					_IVHasType:
.1bc9	8a		txa				txa 								; Or X into zTemp1
.1bca	05 2a		ora $2a				ora 	zTemp1
.1bcc	85 2a		sta $2a				sta 	zTemp1
.1bce	20 21 1b	jsr $1b21			jsr 	GetNext 					; consume it
.1bd1					_IVCheckArray:
.1bd1	20 10 1b	jsr $1b10			jsr 	LookNext 					; check if array follows
.1bd4	c9 28		cmp #$28			cmp 	#"("
.1bd6	d0 09		bne $1be1			bne 	_IVNotArray
.1bd8	a5 2a		lda $2a				lda 	zTemp1 						; set array bit
.1bda	09 80		ora #$80			ora 	#NSSArray
.1bdc	85 2a		sta $2a				sta 	zTemp1
.1bde	20 21 1b	jsr $1b21			jsr 	GetNext 					; consume it
.1be1					_IVNotArray:
.1be1	a6 2a		ldx $2a				ldx 	zTemp1
.1be3	a4 2b		ldy $2b				ldy 	zTemp1+1
.1be5	60		rts				rts
.1be6					_IVSyntax:
.1be6	4c 58 13	jmp $1358		jmp	ErrorV_syntax
.1be9					CommandGOSUB:
.1be9	a9 d1		lda #$d1			lda 	#PCD_CMD_GOSUB
.1beb	20 fc 1b	jsr $1bfc			jsr 	CompileBranchCommand
.1bee	60		rts				rts
.1bef					CommandGOAlt:
.1bef	a9 a4		lda #$a4			lda 	#C64_TO 					; GO TO alternative
.1bf1	20 97 10	jsr $1097			jsr 	CheckNextA
.1bf4	80 00		bra $1bf6			bra 	CommandGOTO
.1bf6					CommandGOTO:
.1bf6	a9 d0		lda #$d0			lda 	#PCD_CMD_GOTO
.1bf8	20 fc 1b	jsr $1bfc			jsr 	CompileBranchCommand
.1bfb	60		rts				rts
.1bfc					CompileBranchCommand:
.1bfc	20 83 10	jsr $1083			jsr 	WriteCodeByte 				; write the command out.
.1bff	20 2c 1b	jsr $1b2c			jsr 	GetNextNonSpace
.1c02	20 cd 1d	jsr $1dcd			jsr 	ParseConstant 				; get constant into YA
.1c05	90 0f		bcc $1c16			bcc 	_CBCSyntax
.1c07	48		pha				pha
.1c08	a9 ff		lda #$ff			lda 	#$FF 						; no address yet.
.1c0a	20 83 10	jsr $1083			jsr 	WriteCodeByte
.1c0d	68		pla				pla 								; and compile the actual line number
.1c0e	20 83 10	jsr $1083			jsr 	WriteCodeByte
.1c11	98		tya				tya
.1c12	20 83 10	jsr $1083			jsr 	WriteCodeByte
.1c15	60		rts				rts
.1c16					_CBCSyntax:
.1c16	4c 58 13	jmp $1358		jmp	ErrorV_syntax
.1c19					CommandIF:
.1c19	20 13 1b	jsr $1b13			jsr 	LookNextNonSpace 			; what follows the tests ?
.1c1c	c9 89		cmp #$89			cmp 	#C64_GOTO 					; IF .. GOTO
.1c1e	f0 0f		beq $1c2f			beq 	_CIGoto
.1c20	a9 a7		lda #$a7			lda 	#C64_THEN 					; should be THEN
.1c22	20 97 10	jsr $1097			jsr 	CheckNextA
.1c25	20 13 1b	jsr $1b13			jsr 	LookNextNonSpace 			; THEN <number>
.1c28	20 36 1b	jsr $1b36			jsr 	CharIsDigit
.1c2b	b0 05		bcs $1c32			bcs 	_CIGoto2
.1c2d	80 09		bra $1c38			bra 	CompileGotoEOL
.1c2f					_CIGoto:
.1c2f	20 21 1b	jsr $1b21			jsr 	GetNext
.1c32					_CIGoto2:
.1c32	a9 d3		lda #$d3			lda 	#PCD_CMD_GOTOCMD_NZ
.1c34	20 fc 1b	jsr $1bfc			jsr 	CompileBranchCommand
.1c37	60		rts				rts
.1c38					CompileGotoEOL:
.1c38	a9 d2		lda #$d2			lda 	#PCD_CMD_GOTOCMD_Z
.1c3a	20 83 10	jsr $1083			jsr 	WriteCodeByte
.1c3d	a9 ff		lda #$ff			lda 	#$FF
.1c3f	20 83 10	jsr $1083			jsr 	WriteCodeByte
.1c42	20 d7 1c	jsr $1cd7			jsr 	GetLineNumber 				; Get the current line number => YA
.1c45	1a		inc a				inc 	a 							; and branch to +1
.1c46	d0 01		bne $1c49			bne 	_CGENoCarry
.1c48	c8		iny				iny
.1c49					_CGENoCarry:
.1c49	20 83 10	jsr $1083			jsr 	WriteCodeByte
.1c4c	98		tya				tya
.1c4d	20 83 10	jsr $1083			jsr 	WriteCodeByte
.1c50	60		rts				rts
.1c51					CommandINPUT:
.1c51	20 13 1b	jsr $1b13			jsr 	LookNextNonSpace 			; check for "
.1c54	c9 22		cmp #$22			cmp 	#'"'
.1c56	d0 0d		bne $1c65			bne 	CommandINPUTStream
.1c58	20 6d 14	jsr $146d			jsr 	CompileExpressionAt0
.1c5b	a9 b1		lda #$b1			lda 	#(PCD_PRINTCMD_S) & $FF
.1c5d	20 83 10	jsr $1083			jsr 	WriteCodeByte
.1c60	a9 2c		lda #$2c			lda 	#","
.1c62	20 8d 10	jsr $108d			jsr 	CheckNextComma
.1c65					CommandINPUTStream:
.1c65	a9 a1		lda #$a1			lda 	#(PCD_INPUTCMD_START) & $FF
.1c67	20 83 10	jsr $1083			jsr 	WriteCodeByte
.1c6a	a2 9f		ldx #$9f			ldx 	#PCD_INPUT 					; do READ with Data from INPUT
.1c6c	a0 a0		ldy #$a0			ldy 	#PCD_INPUTDOLLAR
.1c6e	4c 4a 1e	jmp $1e4a			jmp 	CommandReadInputCommon
.1c71					CommandLET:
.1c71	20 2c 1b	jsr $1b2c			jsr 	GetNextNonSpace 			; get the first character
.1c74					CommandLETHaveFirst:
.1c74	20 d0 1e	jsr $1ed0			jsr 	GetReferenceTerm 			; identify variable to assign to
.1c77	da		phx				phx 								; save target on the stack.
.1c78	5a		phy				phy
.1c79	48		pha				pha
.1c7a	a9 b2		lda #$b2			lda 	#C64_EQUAL 					; check next is =
.1c7c	20 97 10	jsr $1097			jsr 	CheckNextA
.1c7f	20 6d 14	jsr $146d			jsr 	CompileExpressionAt0 		; evaluate the RHS.
.1c82	85 28		sta $28				sta 	zTemp0 						; save type returned
.1c84	68		pla				pla 								; get type of assignment
.1c85	48		pha				pha
.1c86	45 28		eor $28				eor 	zTemp0 						; compare using EOR
.1c88	29 40		and #$40			and 	#NSSTypeMask 				; so we can mask type as we only need n/s
.1c8a	d0 17		bne $1ca3			bne 	_CLType
.1c8c	68		pla				pla 								; restore and compile save code
.1c8d	7a		ply				ply
.1c8e	fa		plx				plx
.1c8f	c0 c0		cpy #$c0			cpy 	#$C0 						; is it TI$ = "xxxxx"
.1c91	f0 05		beq $1c98			beq 	_CLTIString
.1c93	38		sec				sec
.1c94	20 82 1e	jsr $1e82			jsr		GetSetVariable
.1c97	60		rts				rts
.1c98					_CLTIString:
.1c98	a9 ca		lda #$ca			lda 	#(PCD_TIDOLLARCMD_WRITE) >> 8
.1c9a	20 83 10	jsr $1083			jsr 	WriteCodeByte
.1c9d	a9 93		lda #$93			lda 	#(PCD_TIDOLLARCMD_WRITE) & $FF
.1c9f	20 83 10	jsr $1083			jsr 	WriteCodeByte
.1ca2	60		rts				rts
.1ca3					_CLType:
.1ca3	4c 68 13	jmp $1368		jmp	ErrorV_type
.1ca6					ReadNextLine:
.1ca6	20 a5 16	jsr $16a5			jsr 	INPUTGet 					; check offset is not zero.
.1ca9	85 28		sta $28				sta 	zTemp0
.1cab	20 a5 16	jsr $16a5			jsr 	INPUTGet
.1cae	05 28		ora $28				ora 	zTemp0
.1cb0	d0 02		bne $1cb4			bne 	_RNLBody
.1cb2	18		clc				clc
.1cb3	60		rts				rts						; end of file.
.1cb4					_RNLBody:
.1cb4	20 a5 16	jsr $16a5			jsr 	INPUTGet 					; read and save line number
.1cb7	8d 00 05	sta $0500			sta 	currentLineNumber
.1cba	20 a5 16	jsr $16a5			jsr 	INPUTGet
.1cbd	8d 01 05	sta $0501			sta 	currentLineNumber+1
.1cc0	a2 00		ldx #$00			ldx 	#0 							; read line into buffer
.1cc2					_RNLRead:
.1cc2	20 a5 16	jsr $16a5			jsr 	INPUTGet
.1cc5	9d 00 04	sta $0400,x			sta 	sourceBuffer,x
.1cc8	e8		inx				inx
.1cc9	c9 00		cmp #$00			cmp 	#0
.1ccb	d0 f5		bne $1cc2			bne 	_RNLRead
.1ccd	a9 00		lda #$00			lda 	#((sourceBuffer) & $FF)
.1ccf	85 2e		sta $2e				sta 	0+srcPtr
.1cd1	a9 04		lda #$04			lda 	#((sourceBuffer) >> 8) & $FF
.1cd3	85 2f		sta $2f				sta 	1+srcPtr
.1cd5	38		sec				sec
.1cd6	60		rts				rts
.1cd7					GetLineNumber:
.1cd7	ac 01 05	ldy $0501			ldy 	currentLineNumber+1
.1cda	ad 00 05	lda $0500			lda 	currentLineNumber
.1cdd	60		rts				rts
.1cde					STRMarkLine:
.1cde	48		pha				pha
.1cdf	38		sec				sec 								; allocate 5 bytes (line #, page+address)
.1ce0	ad 0f 06	lda $060f			lda 	lineNumberTable 			; and copy to zTemp0
.1ce3	e9 05		sbc #$05			sbc 	#5
.1ce5	8d 0f 06	sta $060f			sta 	lineNumberTable
.1ce8	85 28		sta $28				sta 	zTemp0
.1cea	ad 10 06	lda $0610			lda 	lineNumberTable+1
.1ced	e9 00		sbc #$00			sbc 	#0
.1cef	8d 10 06	sta $0610			sta 	lineNumberTable+1
.1cf2	85 29		sta $29				sta 	zTemp0+1
.1cf4	68		pla				pla
.1cf5	92 28		sta ($28)			sta 	(zTemp0) 					; save it in +0,+1
.1cf7	98		tya				tya
.1cf8	a0 01		ldy #$01			ldy 	#1
.1cfa	91 28		sta ($28),y			sta 	(zTemp0),y
.1cfc	a5 27		lda $27				lda 	objPage 					; and page# in +2
.1cfe	c8		iny				iny
.1cff	91 28		sta ($28),y			sta 	(zTemp0),y
.1d01	a5 25		lda $25				lda 	objPtr 						; save current address in +3,+4
.1d03	c8		iny				iny
.1d04	91 28		sta ($28),y			sta 	(zTemp0),y
.1d06	a5 26		lda $26				lda 	objPtr+1
.1d08	c8		iny				iny
.1d09	91 28		sta ($28),y			sta 	(zTemp0),y
.1d0b	60		rts				rts
.1d0c					STRFindLine:
.1d0c	85 28		sta $28				sta 	zTemp0 						; zTemp0 line number being searched
.1d0e	84 29		sty $29				sty 	zTemp0+1
.1d10	ad 08 06	lda $0608			lda 	compilerEndHigh 			; work backwards through table
.1d13	85 2b		sta $2b				sta 	zTemp1+1
.1d15	64 2a		stz $2a				stz 	zTemp1
.1d17					_STRSearch:
.1d17	20 52 1d	jsr $1d52			jsr 	_STRPrevLine 				; look at previous record.
.1d1a	a0 01		ldy #$01			ldy 	#1
.1d1c	b2 2a		lda ($2a)			lda 	(zTemp1) 					; check table line # >= target
.1d1e	c5 28		cmp $28				cmp 	zTemp0
.1d20	b1 2a		lda ($2a),y			lda 	(zTemp1),y
.1d22	e5 29		sbc $29				sbc 	zTemp0+1
.1d24	b0 0b		bcs $1d31			bcs 	_STRFound 					; >=
.1d26					_STRNext:
.1d26	a0 01		ldy #$01			ldy 	#1 							; should not be required !
.1d28	b1 2a		lda ($2a),y			lda 	(zTemp1),y
.1d2a	c9 ff		cmp #$ff			cmp 	#$FF
.1d2c	d0 e9		bne $1d17			bne 	_STRSearch
.1d2e	4c b2 13	jmp $13b2		jmp	ErrorV_internal
.1d31					_STRFound:
.1d31	b2 2a		lda ($2a)			lda 	(zTemp1) 					; set A = 0 if the same, 0 if different.
.1d33	45 28		eor $28				eor 	zTemp0
.1d35	d0 06		bne $1d3d			bne 	_STRDifferent
.1d37	b2 2a		lda ($2a)			lda 	(zTemp1)
.1d39	45 28		eor $28				eor 	zTemp0
.1d3b	f0 02		beq $1d3f			beq 	_STROut 					; if zero, exit with A = 0 and correct line.
.1d3d					_STRDifferent:
.1d3d	a9 ff		lda #$ff			lda 	#$FF
.1d3f					_STROut:
.1d3f	18		clc				clc  								; set carry if different, e.g. > rather than >=
.1d40	69 ff		adc #$ff			adc 	#255
.1d42	08		php				php
.1d43	c8		iny				iny 								; page into X
.1d44	b1 2a		lda ($2a),y			lda 	(zTemp1),y
.1d46	aa		tax				tax
.1d47	c8		iny				iny 								; address into YA
.1d48	b1 2a		lda ($2a),y			lda 	(zTemp1),y
.1d4a	48		pha				pha
.1d4b	c8		iny				iny
.1d4c	b1 2a		lda ($2a),y			lda 	(zTemp1),y
.1d4e	a8		tay				tay
.1d4f	68		pla				pla
.1d50	28		plp				plp
.1d51	60		rts				rts
.1d52					_STRPrevLine:
.1d52	38		sec				sec 								; move backwards one entry.
.1d53	a5 2a		lda $2a				lda 	zTemp1
.1d55	e9 05		sbc #$05			sbc 	#5
.1d57	85 2a		sta $2a				sta 	zTemp1
.1d59	a5 2b		lda $2b				lda 	zTemp1+1
.1d5b	e9 00		sbc #$00			sbc 	#0
.1d5d	85 2b		sta $2b				sta 	zTemp1+1
.1d5f	60		rts				rts
.1d60					STRMakeOffset:
.1d60	18		clc				clc 								; borrow 1
.1d61	e5 25		sbc $25				sbc 	objPtr
.1d63	48		pha				pha
.1d64	98		tya				tya
.1d65	e5 26		sbc $26				sbc 	objPtr+1
.1d67	a8		tay				tay
.1d68	68		pla				pla
.1d69	60		rts				rts
.1d6a					CommandNEXT:
.1d6a	20 13 1b	jsr $1b13			jsr 	LookNextNonSpace 			; first letter of index variable, should be.
.1d6d	20 42 1b	jsr $1b42			jsr 	CharIsAlpha 				; if not alpha , error
.1d70	90 0c		bcc $1d7e			bcc 	_CNNoReferenceGiven
.1d72	20 21 1b	jsr $1b21			jsr 	GetNext
.1d75	20 d0 1e	jsr $1ed0			jsr 	GetReferenceTerm 			; figure out the reference.
.1d78	8a		txa				txa 								; reference in YA
.1d79	20 37 11	jsr $1137			jsr 	PushIntegerYA 				; write it out.
.1d7c	80 06		bra $1d84			bra 	_CNParametersDone
.1d7e					_CNNoReferenceGiven:
.1d7e	a9 ff		lda #$ff			lda 	#255 						; write out -1 no
.1d80	a8		tay				tay
.1d81	20 37 11	jsr $1137			jsr 	PushIntegerYA 				; write it out.
.1d84					_CNParametersDone:
.1d84	a9 a7		lda #$a7			lda 	#PCD_NEXT  					; compile FOR word.
.1d86	20 83 10	jsr $1083			jsr 	WriteCodeByte
.1d89	20 13 1b	jsr $1b13			jsr 	LookNextNonSpace 			; look for ,
.1d8c	c9 2c		cmp #$2c			cmp 	#","
.1d8e	d0 05		bne $1d95			bne 	_CNExit
.1d90	20 21 1b	jsr $1b21			jsr 	GetNext 					; consume ,
.1d93	80 d5		bra $1d6a			bra 	CommandNEXT 				; and go round.
.1d95					_CNExit:
.1d95	60		rts				rts
.1d96					CommandON:
.1d96	20 2c 1b	jsr $1b2c			jsr 	GetNextNonSpace 			; GOTO / GOSUB must follow
.1d99	48		pha				pha 								; save on stack
.1d9a	a2 d0		ldx #$d0			ldx 	#PCD_CMD_GOTO
.1d9c	c9 89		cmp #$89			cmp 	#C64_GOTO 					; must be GOTO/GOSUB
.1d9e	f0 09		beq $1da9			beq 	_COCreateLoop
.1da0	a2 d1		ldx #$d1			ldx 	#PCD_CMD_GOSUB
.1da2	c9 8d		cmp #$8d			cmp 	#C64_GOSUB
.1da4	f0 03		beq $1da9			beq 	_COCreateLoop
.1da6	4c 58 13	jmp $1358		jmp	ErrorV_syntax
.1da9					_COCreateLoop:
.1da9	8a		txa				txa 								; compile a goto/gosub somewhere
.1daa	da		phx				phx
.1dab	20 fc 1b	jsr $1bfc			jsr 	CompileBranchCommand
.1dae	fa		plx				plx
.1daf	20 13 1b	jsr $1b13			jsr 	LookNextNonSpace			; ',' follows
.1db2	c9 2c		cmp #$2c			cmp 	#","
.1db4	d0 0a		bne $1dc0			bne 	_COComplete 				; if so, more line numbers
.1db6	a9 aa		lda #$aa			lda 	#PCD_MOREON 				; ON extends.
.1db8	20 83 10	jsr $1083			jsr 	WriteCodeByte
.1dbb	20 21 1b	jsr $1b21			jsr 	GetNext
.1dbe	80 e9		bra $1da9			bra 	_COCreateLoop
.1dc0					_COComplete:
.1dc0	68		pla				pla 								; throw GOTO/GOSUB
.1dc1	60		rts				rts
.1dc2					OUTPUTOpen:
.1dc2					OUTPUTRewind:
.1dc2	64 27		stz $27				stz 	objPage
.1dc4	a9 00		lda #$00			lda 	#((PCodeStart) & $FF)
.1dc6	85 25		sta $25				sta 	0+objPtr
.1dc8	a9 40		lda #$40			lda 	#((PCodeStart) >> 8) & $FF
.1dca	85 26		sta $26				sta 	1+objPtr
.1dcc	60		rts				rts
.1dcd					ParseConstant:
.1dcd	a2 00		ldx #$00			ldx 	#0
.1dcf	20 50 24	jsr $2450			jsr 	FloatEncodeStart 			; send first
.1dd2					_ParseLoop:
.1dd2	20 10 1b	jsr $1b10			jsr 	LookNext 					; send subsequent
.1dd5	20 53 24	jsr $2453			jsr 	FloatEncodeContinue
.1dd8	90 05		bcc $1ddf			bcc 	_ParseDone
.1dda	20 21 1b	jsr $1b21			jsr 	GetNext 					; consume it
.1ddd	80 f3		bra $1dd2			bra 	_ParseLoop
.1ddf					_ParseDone:
.1ddf	b5 32		lda $32,x			lda 	NSStatus,x 					; shouldn't be -ve ....
.1de1	29 80		and #$80			and 	#$80
.1de3	15 6e		ora $6e,x			ora 	NSExponent,x 				; 16 bit int check
.1de5	15 56		ora $56,x			ora 	NSMantissa2,x
.1de7	15 62		ora $62,x			ora 	NSMantissa3,x
.1de9	18		clc				clc
.1dea	d0 05		bne $1df1			bne 	_ParseExit 					; exit with CC if need float to compile
.1dec	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; read into YA.
.1dee	b4 4a		ldy $4a,x			ldy		NSMantissa1,x
.1df0	38		sec				sec
.1df1					_ParseExit:
.1df1	60		rts				rts
.1df2					MOFSizeTable:
>1df2	01					.byte	1         	; $ca .shift
>1df3	01					.byte	1         	; $cb .byte
>1df4	02					.byte	2         	; $cc .word
>1df5	05					.byte	5         	; $cd .float
>1df6	ff					.byte	255       	; $ce .string
>1df7	ff					.byte	255       	; $cf .data
>1df8	03					.byte	3         	; $d0 .goto
>1df9	03					.byte	3         	; $d1 .gosub
>1dfa	03					.byte	3         	; $d2 .goto.z
>1dfb	03					.byte	3         	; $d3 .goto.nz
>1dfc	02					.byte	2         	; $d4 .varspace
.1dfd					CommandPRINT:
.1dfd	20 13 1b	jsr $1b13			jsr 	LookNextNonSpace			; what follows ?
.1e00	c9 3b		cmp #$3b			cmp 	#";" 						; semicolon, check end of command
.1e02	f0 1f		beq $1e23			beq 	_CPCheckEnd
.1e04	c9 2c		cmp #$2c			cmp 	#"," 						; , TAB and check end of command
.1e06	f0 16		beq $1e1e			beq 	_CPTabCheckEnd
.1e08	20 3a 1e	jsr $1e3a			jsr 	_CPAtEnd 					; check for : and EOL
.1e0b	b0 22		bcs $1e2f			bcs 	_CPExitCR 					; exit with CR
.1e0d	20 6d 14	jsr $146d			jsr 	CompileExpressionAt0 		; so it is something to print
.1e10	a2 b1		ldx #$b1			ldx 	#PCD_PRINTCMD_S
.1e12	29 40		and #$40			and 	#NSSString 					; if string
.1e14	d0 02		bne $1e18			bne 	_CPOut
.1e16	a2 b0		ldx #$b0			ldx 	#PCD_PRINTCMD_N
.1e18					_CPOut:
.1e18	8a		txa				txa 								; print that thing
.1e19	20 83 10	jsr $1083			jsr 	WriteCodeByte
.1e1c	80 df		bra $1dfd			bra 	CommandPRINT 				; and loop round/
.1e1e					_CPTabCheckEnd:
.1e1e	a9 b7		lda #$b7			lda 	#PCD_PRINTCMD_TAB 			; , next tab stop
.1e20	20 83 10	jsr $1083			jsr 	WriteCodeByte
.1e23					_CPCheckEnd:
.1e23	20 21 1b	jsr $1b21			jsr 	GetNext 					; consume it.
.1e26	20 13 1b	jsr $1b13			jsr 	LookNextNonSpace 			; what follows ?
.1e29	20 3a 1e	jsr $1e3a			jsr 	_CPAtEnd 					; reached end
.1e2c	90 cf		bcc $1dfd			bcc 	CommandPRINT 				; no, loop back
.1e2e	60		rts				rts
.1e2f					_CPExitCR:
.1e2f	a9 0d		lda #$0d			lda 	#13 						; code to print CR
.1e31	20 4a 11	jsr $114a			jsr 	PushIntegerA
.1e34	a9 92		lda #$92			lda 	#PCD_PRINTCMD_CHR
.1e36	20 83 10	jsr $1083			jsr 	WriteCodeByte
.1e39	60		rts				rts
.1e3a					_CPAtEnd:
.1e3a	c9 00		cmp #$00			cmp 	#0
.1e3c	f0 06		beq $1e44			beq 	_CPIsEnd
.1e3e	c9 3a		cmp #$3a			cmp 	#":"
.1e40	f0 02		beq $1e44			beq 	_CPIsEnd
.1e42	18		clc				clc
.1e43	60		rts				rts
.1e44					_CPIsEnd:
.1e44	38		sec				sec
.1e45	60		rts				rts
.1e46					CommandREAD:
.1e46	a2 b2		ldx #$b2			ldx 	#PCD_READ
.1e48	a0 b3		ldy #$b3			ldy 	#PCD_READDOLLAR
.1e4a					CommandReadInputCommon:
.1e4a	8e 0d 06	stx $060d			stx 	numberPCode
.1e4d	8c 0e 06	sty $060e			sty 	stringPCode
.1e50					_CRLoop:
.1e50	20 2c 1b	jsr $1b2c			jsr 	GetNextNonSpace 			; first char of identifier
.1e53	20 42 1b	jsr $1b42			jsr 	CharIsAlpha 				; check A-Z
.1e56	90 27		bcc $1e7f			bcc 	_CRSyntax
.1e58	20 d0 1e	jsr $1ed0			jsr 	GetReferenceTerm 			; get the variable.
.1e5b	48		pha				pha 								; save type.
.1e5c	29 40		and #$40			and 	#NSSTypeMask 				; is it a string ?
.1e5e	c9 40		cmp #$40			cmp 	#NSSString
.1e60	f0 05		beq $1e67			beq 	_CRString
.1e62	ad 0d 06	lda $060d			lda 	numberPCode 				; output read/input
.1e65	80 03		bra $1e6a			bra 	_CRHaveType
.1e67					_CRString:
.1e67	ad 0e 06	lda $060e			lda 	stringPCode					; output read$/input$
.1e6a					_CRHaveType:
.1e6a	20 83 10	jsr $1083			jsr 	WriteCodeByte 				; so we have one typed data item.
.1e6d	68		pla				pla 								; restore type
.1e6e	38		sec				sec  								; write update code.
.1e6f	20 82 1e	jsr $1e82			jsr 	GetSetVariable
.1e72	20 13 1b	jsr $1b13			jsr 	LookNextNonSpace 			; , follows ?
.1e75	c9 2c		cmp #$2c			cmp 	#","
.1e77	d0 05		bne $1e7e			bne 	_CRExit 					; if not, end of READ.
.1e79	20 21 1b	jsr $1b21			jsr 	GetNext 					; consume comma
.1e7c	80 d2		bra $1e50			bra 	_CRLoop 					; keep going
.1e7e					_CRExit:
.1e7e	60		rts				rts
.1e7f					_CRSyntax:
.1e7f	4c 58 13	jmp $1358		jmp	ErrorV_syntax
.060d					numberPCode:
>060d							.fill 	1
.060e					stringPCode:
>060e							.fill 	1
.1e82					GetSetVariable:
.1e82	08		php				php 								; save direction on stack
.1e83	c0 00		cpy #$00			cpy 	#$00
.1e85	30 21		bmi $1ea8			bmi 	_GSVReadWriteSpecial
.1e87	c9 00		cmp #$00			cmp 	#$00
.1e89	30 33		bmi $1ebe			bmi 	_GSVArray
.1e8b	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16 		; get type bits
.1e8d	4a		lsr a				lsr 	a 							; divide by 2
.1e8e	09 40		ora #$40			ora 	#64 						; and set bit 6.
.1e90	28		plp				plp
.1e91	90 02		bcc $1e95			bcc 	_GSVNotWrite
.1e93	09 08		ora #$08			ora 	#8  						; set bit 3 if it is write.
.1e95					_GSVNotWrite:
.1e95	85 28		sta $28				sta 	zTemp0
.1e97	98		tya				tya 	 							; shift X/Y right as the address stored is halved
.1e98	4a		lsr a				lsr 	a
.1e99	a8		tay				tay
.1e9a	8a		txa				txa
.1e9b	6a		ror a				ror 	a
.1e9c	aa		tax				tax
.1e9d	98		tya				tya 								; lower 3 bits of YX are ORed into the opcode
.1e9e	05 28		ora $28				ora 	zTemp0 						; which is the first byte of the opcode
.1ea0	20 83 10	jsr $1083			jsr 	WriteCodeByte
.1ea3	8a		txa				txa 								; and the lower 8 bits of YX are the second byte
.1ea4	20 83 10	jsr $1083			jsr 	WriteCodeByte
.1ea7	60		rts				rts
.1ea8					_GSVReadWriteSpecial:
.1ea8	28		plp				plp
.1ea9	b0 10		bcs $1ebb			bcs 	_GSVSyntax
.1eab	c0 c0		cpy #$c0			cpy 	#$C0 						; TI$ ?
.1ead	f0 06		beq $1eb5			beq 	_GSVRWString
.1eaf	a9 bf		lda #$bf			lda 	#(PCD_TI) & $FF
.1eb1	20 83 10	jsr $1083			jsr 	WriteCodeByte
.1eb4	60		rts				rts
.1eb5					_GSVRWString:
.1eb5	a9 c0		lda #$c0			lda 	#(PCD_TIDOLLAR) & $FF
.1eb7	20 83 10	jsr $1083			jsr 	WriteCodeByte
.1eba	60		rts				rts
.1ebb					_GSVSyntax:
.1ebb	4c 58 13	jmp $1358		jmp	ErrorV_syntax
.1ebe					_GSVArray:
.1ebe	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16 		; mask out 2 bits of type data
.1ec0	4a		lsr a				lsr 	a		 					; shift from 5,6 to 0,1
.1ec1	4a		lsr a				lsr 	a
.1ec2	4a		lsr a				lsr 	a
.1ec3	4a		lsr a				lsr 	a
.1ec4	4a		lsr a				lsr 	a
.1ec5	28		plp				plp 								; if writing array then set bit 2.
.1ec6	90 02		bcc $1eca			bcc 	_GSVANotWrite
.1ec8	09 04		ora #$04			ora 	#4
.1eca					_GSVANotWrite:
.1eca	09 78		ora #$78			ora 	#$78 						; make a valid opcode.
.1ecc	20 83 10	jsr $1083			jsr 	WriteCodeByte 				; and write it out
.1ecf	60		rts				rts
.1ed0					GetReferenceTerm:
.1ed0	20 91 1b	jsr $1b91			jsr 	ExtractVariableName 		; get name & type info
.1ed3	e0 00		cpx #$00			cpx 	#0 							; check for array handler
.1ed5	30 10		bmi $1ee7			bmi 	_GRTArray
.1ed7	da		phx				phx 								; save type on stack
.1ed8	20 27 15	jsr $1527			jsr 	FindVariable 				; find it
.1edb	b0 06		bcs $1ee3			bcs 	_GRTNoCreate 				; create if required.
.1edd	20 7c 11	jsr $117c			jsr 	CreateVariableRecord 		; create a variable.
.1ee0	20 d6 11	jsr $11d6			jsr 	AllocateBytesForType 		; allocate memory for it
.1ee3					_GRTNoCreate:
.1ee3	68		pla				pla 								; get type back, strip out type information.
.1ee4	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16
.1ee6	60		rts				rts
.1ee7					_GRTArray:
.1ee7	da		phx				phx 								; save type information
.1ee8	20 27 15	jsr $1527			jsr 	FindVariable 				; read its data, the base address in YX
.1eeb	90 18		bcc $1f05			bcc 	_GRTUndeclared 				; undeclared array.
.1eed	da		phx				phx 								; save base address
.1eee	5a		phy				phy
.1eef	20 cd 12	jsr $12cd			jsr 	OutputIndexGroup 			; create an index group and generate them
.1ef2	7a		ply				ply 								; get the array base address into YX
.1ef3	fa		plx				plx
.1ef4	a9 20		lda #$20			lda 	#NSSIFloat+NSSIInt16 		; pretend it is an int16 reference.
.1ef6	18		clc				clc
.1ef7	20 82 1e	jsr $1e82			jsr 	GetSetVariable 				; load the address of the array structure.
.1efa	a9 8e		lda #$8e			lda 	#(PCD_ARRAY) & $FF
.1efc	20 83 10	jsr $1083			jsr 	WriteCodeByte
.1eff	68		pla				pla 								; and the type data into A
.1f00	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16
.1f02	09 80		ora #$80			ora 	#$80 						; with the array flag set.
.1f04	60		rts				rts
.1f05					_GRTUndeclared:
.1f05	4c 0f 14	jmp $140f		jmp	ErrorV_undeclared
.1f08					CommandREM:
.1f08	20 10 1b	jsr $1b10			jsr 	LookNext
.1f0b	f0 05		beq $1f12			beq 	_CRExit
.1f0d	20 21 1b	jsr $1b21			jsr 	GetNext
.1f10	80 f6		bra $1f08			bra 	CommandREM
.1f12					_CRExit:
.1f12	60		rts				rts
.1f13					STRReset:
.1f13	ad 07 06	lda $0607			lda	 	compilerStartHigh 			; set up the two table pointers
.1f16	8d 12 06	sta $0612			sta 	variableListEnd+1
.1f19	9c 11 06	stz $0611			stz 	variableListEnd
.1f1c	ad 08 06	lda $0608			lda 	compilerEndHigh
.1f1f	8d 10 06	sta $0610			sta 	lineNumberTable+1
.1f22	9c 0f 06	stz $060f			stz 	lineNumberTable
.1f25	ad 11 06	lda $0611			lda 	variableListEnd
.1f28	85 29		sta $29				sta 	zTemp0+1
.1f2a	64 28		stz $28				stz 	zTemp0
.1f2c	a9 00		lda #$00			lda 	#0
.1f2e	92 28		sta ($28)			sta 	(zTemp0)
.1f30	a9 00		lda #$00			lda 	#((0) & $FF)
.1f32	8d 13 06	sta $0613			sta 	0+freeVariableMemory
.1f35	a9 00		lda #$00			lda 	#((0) >> 8) & $FF
.1f37	8d 14 06	sta $0614			sta 	1+freeVariableMemory
.1f3a	60		rts				rts
.060f					lineNumberTable:
>060f							.fill 	2
.0611					variableListEnd:
>0611							.fill 	2
.0613					freeVariableMemory:
>0613							.fill 	2
.1f3b					CompileTerm:
.1f3b	20 2c 1b	jsr $1b2c			jsr 	GetNextNonSpace 			; get first non space character.
.1f3e	30 72		bmi $1fb2			bmi 	_CTUnaryFunctions
.1f40	20 36 1b	jsr $1b36			jsr 	CharIsDigit 				; found a number
.1f43	b0 3a		bcs $1f7f			bcs 	_CTDigit
.1f45	c9 2e		cmp #$2e			cmp 	#"."
.1f47	f0 36		beq $1f7f			beq 	_CTDigit
.1f49	c9 22		cmp #$22			cmp 	#'"' 						; found a string ?
.1f4b	f0 43		beq $1f90			beq 	_CTString
.1f4d	c9 25		cmp #$25			cmp 	#"%"						; binary or hexadecimal ?
.1f4f	f0 28		beq $1f79			beq 	_CTOtherBase
.1f51	c9 24		cmp #$24			cmp 	#"$"
.1f53	f0 24		beq $1f79			beq 	_CTOtherBase
.1f55	c9 28		cmp #$28			cmp 	#"(" 						; check parenthesis
.1f57	f0 17		beq $1f70			beq 	_CTBrackets
.1f59	c9 41		cmp #$41			cmp 	#"A" 						; check variable/array ?
.1f5b	90 10		bcc $1f6d			bcc 	_CTSyntax
.1f5d	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1f5f	b0 0c		bcs $1f6d			bcs 	_CTSyntax
.1f61	20 d0 1e	jsr $1ed0			jsr 	GetReferenceTerm 			; figure out what it is.
.1f64	48		pha				pha 								; save type on stack
.1f65	18		clc				clc 								; read it
.1f66	20 82 1e	jsr $1e82			jsr 	GetSetVariable
.1f69	68		pla				pla
.1f6a	29 40		and #$40			and 	#NSSTypeMask 				; reduce to basic type
.1f6c	60		rts				rts
.1f6d					_CTSyntax:
.1f6d	4c 58 13	jmp $1358		jmp	ErrorV_syntax
.1f70					_CTBrackets:
.1f70	20 6d 14	jsr $146d			jsr 	CompileExpressionAt0
.1f73	48		pha				pha
.1f74	20 91 10	jsr $1091			jsr 	CheckNextRParen
.1f77	68		pla				pla
.1f78	60		rts				rts
.1f79					_CTOtherBase:
.1f79	20 11 10	jsr $1011			jsr 	InlineNonDecimal 			; non decimal constant handler
.1f7c	a9 00		lda #$00			lda 	#NSSIFloat					; return a iFloat32 integer
.1f7e	60		rts				rts
.1f7f					_CTDigit:
.1f7f	20 cd 1d	jsr $1dcd			jsr 	ParseConstant 				; parse out an number, first is in A already.
.1f82	90 06		bcc $1f8a			bcc	 	_CTFloat 					; have a float or long int.
.1f84	20 37 11	jsr $1137			jsr 	PushIntegerYA 				; code to push on stack
.1f87	a9 00		lda #$00			lda 	#NSSIFloat					; return a iFloat32 integer
.1f89	60		rts				rts
.1f8a					_CTFloat:
.1f8a	20 59 11	jsr $1159			jsr 	PushFloat  					; code to push float
.1f8d	a9 00		lda #$00			lda 	#NSSIFloat 					; return a iFloat32
.1f8f	60		rts				rts
.1f90					_CTString:
.1f90	20 5c 10	jsr $105c			jsr 	BufferClear 				; copy it to the buffer
.1f93					_CTStringLoop:
.1f93	20 10 1b	jsr $1b10			jsr 	LookNext 					; reached EOL/EOS
.1f96	f0 d5		beq $1f6d			beq 	_CTSyntax
.1f98	c9 22		cmp #$22			cmp 	#'"'
.1f9a	f0 08		beq $1fa4			beq 	_CTStringDone
.1f9c	20 60 10	jsr $1060			jsr 	BufferWrite 				; write and consume
.1f9f	20 21 1b	jsr $1b21			jsr 	GetNext
.1fa2	80 ef		bra $1f93			bra 	_CTStringLoop
.1fa4					_CTStringDone:
.1fa4	20 21 1b	jsr $1b21			jsr 	GetNext 					; consume closing quote.
.1fa7	a9 ce		lda #$ce			lda 	#PCD_CMD_STRING 			; output command and buffer
.1fa9	20 83 10	jsr $1083			jsr 	WriteCodeByte
.1fac	20 6c 10	jsr $106c			jsr 	BufferOutput
.1faf	a9 40		lda #$40			lda 	#NSSString 					; string type
.1fb1	60		rts				rts
.1fb2					_CTUnaryFunctions:
.1fb2	c9 ab		cmp #$ab			cmp 	#C64_MINUS 					; negation of term.
.1fb4	f0 0a		beq $1fc0			beq 	_CTNegation
.1fb6	a2 bb		ldx #$bb			ldx 	#UnaryTables & $FF 			; check vs unary tables.
.1fb8	a0 18		ldy #$18			ldy 	#UnaryTables >> 8
.1fba	20 b5 19	jsr $19b5			jsr 	GeneratorProcess
.1fbd	90 ae		bcc $1f6d			bcc		_CTSyntax
.1fbf	60		rts				rts
.1fc0					_CTNegation:
.1fc0	20 3b 1f	jsr $1f3b			jsr 	CompileTerm 				; compile a term.
.1fc3	48		pha				pha
.1fc4	29 40		and #$40			and 	#NSSTypeMask 				; if not an ifloat32 of some sort.
.1fc6	c9 00		cmp #$00			cmp 	#NSSIFloat
.1fc8	d0 07		bne $1fd1			bne 	_CTType 					; error
.1fca	a9 a5		lda #$a5			lda 	#PCD_NEGATE 				; compile negate
.1fcc	20 83 10	jsr $1083			jsr 	WriteCodeByte
.1fcf	68		pla				pla 								; return original type.
.1fd0	60		rts				rts
.1fd1					_CTType:
.1fd1	4c 68 13	jmp $1368		jmp	ErrorV_type
.1fd4					CommandWAIT:
.1fd4	20 13 1b	jsr $1b13			jsr 	LookNextNonSpace
.1fd7	c9 2c		cmp #$2c			cmp 	#","
.1fd9	f0 10		beq $1feb			beq 	_CWThirdParameter
.1fdb	a9 00		lda #$00			lda 	#0
.1fdd	20 4a 11	jsr $114a			jsr 	PushIntegerA
.1fe0					_CWExit:
.1fe0	a9 ca		lda #$ca			lda 	#(PCD_WAIT) >> 8
.1fe2	20 83 10	jsr $1083			jsr 	WriteCodeByte
.1fe5	a9 94		lda #$94			lda 	#(PCD_WAIT) & $FF
.1fe7	20 83 10	jsr $1083			jsr 	WriteCodeByte
.1fea	60		rts				rts
.1feb					_CWThirdParameter:
.1feb	20 21 1b	jsr $1b21			jsr 	GetNext
.1fee	20 6f 14	jsr $146f			jsr 	CompileExpressionAtA
.1ff1	29 40		and #$40			and 	#NSSTypeMask
.1ff3	c9 00		cmp #$00			cmp 	#NSSIFloat
.1ff5	f0 e9		beq $1fe0			beq 	_CWExit
.1ff7	4c 68 13	jmp $1368		jmp	ErrorV_type
.1ffa					OUTPUTWriteByte:
.1ffa	92 25		sta ($25)			sta 	(objPtr)
.1ffc	e6 25		inc $25				inc 	objPtr
.1ffe	d0 02		bne $2002			bne 	_HWOWBNoCarry
.2000	e6 26		inc $26				inc 	objPtr+1
.2002					_HWOWBNoCarry:
.2002	60		rts				rts
.2003					CommandCMD:
.2003	a9 af		lda #$af			lda 	#PCD_SETCHANNEL 			; set the channel to this now forever.
.2005	20 83 10	jsr $1083			jsr 	WriteCodeByte
.2008	20 13 1b	jsr $1b13			jsr 	LookNextNonSpace 			; followed by a , ?
.200b	c9 2c		cmp #$2c			cmp 	#","
.200d	d0 06		bne $2015			bne 	_CCMDExit
.200f	20 21 1b	jsr $1b21			jsr 	GetNext 					; consume comma.
.2012	20 fd 1d	jsr $1dfd			jsr 	CommandPRINT 				; do the print code
.2015					_CCMDExit:
.2015	60		rts				rts
.2016					CommandOPEN:
.2016	20 13 1b	jsr $1b13			jsr 	LookNextNonSpace 			; followed by a , ?
.2019	c9 2c		cmp #$2c			cmp 	#","
.201b	d0 15		bne $2032			bne 	_COTwoDefaults
.201d	20 21 1b	jsr $1b21			jsr 	GetNext 					; consume comma
.2020	20 6d 14	jsr $146d			jsr 	CompileExpressionAt0 		; what follows could be text or number.
.2023	29 40		and #$40			and 	#NSSString 					; if a number want a string to follow
.2025	f0 1e		beq $2045			beq 	_COThreeIntegers
.2027	a9 00		lda #$00			lda 	#0		 					; so we have n,n,$,0 so swap !
.2029	20 4a 11	jsr $114a			jsr 	PushIntegerA
.202c	a9 be		lda #$be			lda 	#(PCD_SWAP) & $FF
.202e	20 83 10	jsr $1083			jsr 	WriteCodeByte
.2031	60		rts				rts
.2032					_COTwoDefaults:
.2032	a9 00		lda #$00			lda 	#0
.2034	20 4a 11	jsr $114a			jsr 	PushIntegerA
.2037					_COCompileNullString:
.2037	a9 ce		lda #$ce			lda 	#(PCD_CMD_STRING) & $FF
.2039	20 83 10	jsr $1083			jsr 	WriteCodeByte
.203c	a9 00		lda #$00			lda 	#0
.203e	20 83 10	jsr $1083			jsr 	WriteCodeByte
.2041	20 83 10	jsr $1083			jsr 	WriteCodeByte
.2044	60		rts				rts
.2045					_COThreeIntegers:
.2045	20 13 1b	jsr $1b13			jsr 	LookNextNonSpace 			; is there a ,
.2048	c9 2c		cmp #$2c			cmp 	#","
.204a	d0 eb		bne $2037			bne 	_COCompileNullString 		; if not it is n,n,n so default filename.
.204c	20 21 1b	jsr $1b21			jsr 	GetNext
.204f	20 6d 14	jsr $146d			jsr 	CompileExpressionAt0 		; should be a filename
.2052	29 40		and #$40			and 	#NSSString
.2054	f0 01		beq $2057			beq 	_COType
.2056	60		rts				rts
.2057					_COType:
.2057	4c 68 13	jmp $1368		jmp	ErrorV_type
.205a					XPrintCharacter
.205a	48		pha				pha
.205b	da		phx				phx
.205c	5a		phy				phy
.205d	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.2060	7a		ply				ply
.2061	fa		plx				plx
.2062	68		pla				pla
.2063	60		rts				rts
.2064					XSaveMemory:
.2064	da		phx				phx
.2065	5a		phy				phy
.2066	48		pha				pha
.2067	a9 00		lda #$00			lda 	#0 							; set LFS
.2069	a2 08		ldx #$08			ldx 	#8
.206b	a0 00		ldy #$00			ldy 	#0
.206d	20 ba ff	jsr $ffba			jsr 	$FFBA
.2070	a9 08		lda #$08			lda 	#8 							; set file name
.2072	a2 86		ldx #$86			ldx 	#SaveName & $FF
.2074	a0 20		ldy #$20			ldy 	#SaveName >> 8
.2076	20 bd ff	jsr $ffbd			jsr 	$FFBD
.2079	68		pla				pla 								; set up the start address.
.207a	85 29		sta $29				sta 	zTemp0+1
.207c	64 28		stz $28				stz 	zTemp0
.207e	a9 28		lda #$28			lda 	#zTemp0 					; from index.
.2080	7a		ply				ply 								; end in YX
.2081	fa		plx				plx
.2082	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; write out.
.2085	60		rts				rts
.2086					SaveName:
>2086	43 4f 44 45 2e 42 49 4e				.text 	"CODE.BIN"

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library

=12					MathStackSize = 12
=$40					NSSString = $40 							; string vs typemask
=$00					NSSIFloat = $00 							; ifloat vs typemask
=$20					NSSIInt16 = $20								; when set, a reference is a 16 bit reference (e.g. a%)
=$40					NSSTypeMask = $40
=$80					NSSArray = $80  							; array (in variable code)
.0032					NSStatus:
>0032							.fill 	MathStackSize
.003e					NSMantissa0:
>003e							.fill 	MathStackSize 				; (this is my integer mantissa system)
.004a					NSMantissa1:
>004a							.fill 	MathStackSize
.0056					NSMantissa2:
>0056							.fill 	MathStackSize
.0062					NSMantissa3:
>0062							.fill 	MathStackSize
.006e					NSExponent:
>006e							.fill 	MathStackSize
.0615					numberBuffer:
>0615							.fill 	34
.208e					FloatSubtract:
.208e	b5 32		lda $32,x			lda 	NSStatus,x 					; negate top of stack
.2090	49 80		eor #$80			eor 	#$80
.2092	95 32		sta $32,x			sta 	NSStatus,x					; and fall through.
.2094					FloatAdd:
.2094	ca		dex				dex
.2095	b5 6e		lda $6e,x			lda 	NSExponent,x 				; can use optimised.
.2097	15 6f		ora $6f,x			ora 	NSExponent+1,x
.2099	15 62		ora $62,x			ora 	NSMantissa3,x
.209b	15 63		ora $63,x			ora 	NSMantissa3+1,x
.209d	d0 04		bne $20a3			bne 	_FAUseFloat
.209f	20 30 24	jsr $2430			jsr 	FloatInt32Add 				; use the int32 one.
.20a2	60		rts				rts
.20a3					_FAUseFloat:
.20a3	20 c5 23	jsr $23c5			jsr 	FloatNormalise 				; normalise S[X]
.20a6	f0 51		beq $20f9			beq 	_FAReturn1
.20a8	e8		inx				inx 								; normalise S[X+1]
.20a9	20 c5 23	jsr $23c5			jsr 	FloatNormalise
.20ac	ca		dex				dex
.20ad	c9 00		cmp #$00			cmp 	#0
.20af	f0 60		beq $2111			beq 	_FAExit 					; if so, just return A
.20b1	b5 6e		lda $6e,x			lda 	NSExponent,x 				; are the exponents the same ?
.20b3	d5 6f		cmp $6f,x			cmp 	NSExponent+1,x
.20b5	f0 18		beq $20cf			beq 	_FAExponentsEqual
.20b7	b5 6e		lda $6e,x			lda 	NSExponent,x 				; work out the larger exponent
.20b9	a8		tay				tay
.20ba	38		sec				sec 								; do a signed comparison of the exponents.
.20bb	f5 6f		sbc $6f,x			sbc 	NSExponent+1,x
.20bd	50 02		bvc $20c1			bvc 	_FANoSignedChange
.20bf	49 80		eor #$80			eor 	#$80
.20c1					_FANoSignedChange:
.20c1	29 80		and #$80			and 	#$80
.20c3	10 02		bpl $20c7			bpl 	_FAHaveMax
.20c5	b4 6f		ldy $6f,x			ldy 	NSExponent+1,x
.20c7					_FAHaveMax:
.20c7	20 12 21	jsr $2112			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.20ca	e8		inx				inx
.20cb	20 12 21	jsr $2112			jsr 	_FAShiftToExponent
.20ce	ca		dex				dex
.20cf					_FAExponentsEqual:
.20cf	b5 32		lda $32,x			lda 	NSStatus,x 					; are the signs the same
.20d1	55 33		eor $33,x			eor 	NSStatus+1,x
.20d3	30 0e		bmi $20e3			bmi 	_FADifferentSigns
.20d5	20 fc 23	jsr $23fc			jsr 	FloatAddTopTwoStack 		; do the add of the mantissae
.20d8	b5 62		lda $62,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.20da	10 35		bpl $2111			bpl 	_FAExit 					; if no, we are done.
.20dc	20 89 26	jsr $2689			jsr 	FloatShiftRight 				; shift A right, renormalising it.
.20df	f6 6e		inc $6e,x			inc 	NSExponent,x 				; bump the exponent and exit
.20e1	80 2e		bra $2111			bra 	_FAExit
.20e3					_FADifferentSigns:
.20e3	20 16 24	jsr $2416			jsr 	FloatSubTopTwoStack 		; subtract mantissa B from A
.20e6	b5 62		lda $62,x			lda 	NSMantissa3,x 				; is the result negative ?
.20e8	10 06		bpl $20f0			bpl 	_FACheckZero 				; if no, check for -0
.20ea	20 32 26	jsr $2632			jsr 	FloatNegate 					; netate result
.20ed	20 39 26	jsr $2639			jsr 	FloatNegateMantissa 			; negate (2'c) the mantissa
.20f0					_FACheckZero:
.20f0	20 92 26	jsr $2692			jsr 	FloatIsZero	 				; check for -0
.20f3	d0 1c		bne $2111			bne 	_FAExit
.20f5	74 32		stz $32,x			stz 	NSStatus,x
.20f7	80 18		bra $2111			bra 	_FAExit
.20f9					_FAReturn1:
.20f9	b5 3f		lda $3f,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.20fb	95 3e		sta $3e,x			sta 	NSMantissa0,x
.20fd	b5 4b		lda $4b,x			lda 	NSMantissa1+1,x
.20ff	95 4a		sta $4a,x			sta 	NSMantissa1,x
.2101	b5 57		lda $57,x			lda 	NSMantissa2+1,x
.2103	95 56		sta $56,x			sta 	NSMantissa2,x
.2105	b5 63		lda $63,x			lda 	NSMantissa3+1,x
.2107	95 62		sta $62,x			sta 	NSMantissa3,x
.2109	b5 6f		lda $6f,x			lda 	NSExponent+1,x
.210b	95 6e		sta $6e,x			sta 	NSExponent,x
.210d	b5 33		lda $33,x			lda 	NSStatus+1,x
.210f	95 32		sta $32,x			sta 	NSStatus,x
.2111					_FAExit:
.2111	60		rts				rts
.2112					_FAShiftToExponent:
.2112					_FAShiftToExponent2:
.2112	98		tya				tya 								; compare Y to exponent
.2113	d5 6e		cmp $6e,x			cmp 	NSExponent,x 				; reached the exponent required ?
.2115	f0 07		beq $211e			beq 	_FASEExit 					; exit if so.
.2117	20 89 26	jsr $2689			jsr 	FloatShiftRight	 			; shift the mantissa right
.211a	f6 6e		inc $6e,x			inc 	NSExponent,x 				; increment exponent
.211c	80 f4		bra $2112			bra 	_FAShiftToExponent2
.211e					_FASEExit:
.211e	60		rts				rts
.211f					CompareEqual:
.211f	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.2121	d0 09		bne $212c			bne 	ReturnFalse
.2123					ReturnTrue:
.2123	a9 01		lda #$01			lda 	#1
.2125	95 3e		sta $3e,x			sta 	NSMantissa0,x
.2127	a9 80		lda #$80			lda 	#$80
.2129	95 32		sta $32,x			sta 	NSStatus,x
.212b	60		rts				rts
.212c					ReturnFalse:
.212c	74 3e		stz $3e,x			stz 	NSMantissa0,x
.212e	60		rts				rts
.212f					CompareNotEqual:
.212f	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.2131	d0 f0		bne $2123			bne 	ReturnTrue
.2133	80 f7		bra $212c			bra 	ReturnFalse
.2135					CompareLess:
.2135	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.2137	c9 ff		cmp #$ff			cmp 	#$FF
.2139	f0 e8		beq $2123			beq 	ReturnTrue
.213b	80 ef		bra $212c			bra 	ReturnFalse
.213d					CompareGreater:
.213d	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.213f	c9 01		cmp #$01			cmp 	#$01
.2141	f0 e0		beq $2123			beq 	ReturnTrue
.2143	80 e7		bra $212c			bra 	ReturnFalse
.2145					CompareLessEqual:
.2145	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.2147	c9 01		cmp #$01			cmp 	#$01
.2149	d0 d8		bne $2123			bne 	ReturnTrue
.214b	80 df		bra $212c			bra 	ReturnFalse
.214d					CompareGreaterEqual:
.214d	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.214f	c9 ff		cmp #$ff			cmp 	#$FF
.2151	d0 d0		bne $2123			bne 	ReturnTrue
.2153	80 d7		bra $212c			bra 	ReturnFalse
.2155					FloatCompare:
.2155	b5 6e		lda $6e,x			lda 	NSExponent,x 				; float comparison.
.2157	15 6d		ora $6d,x			ora 	NSExponent-1,x 				; integer if both integer.
.2159	48		pha				pha
.215a	20 8e 20	jsr $208e			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.215d	68		pla				pla
.215e	d0 0c		bne $216c			bne 	_FCCompareFloat
.2160	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.2162	15 4a		ora $4a,x			ora 	NSMantissa1,x
.2164	15 56		ora $56,x			ora 	NSMantissa2,x
.2166	15 62		ora $62,x			ora 	NSMantissa3,x
.2168	f0 14		beq $217e			beq 	_FCExit 					; if zero, return zero
.216a	80 0a		bra $2176			bra 	_FCSign
.216c					_FCCompareFloat:
.216c	b5 4a		lda $4a,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.216e	29 f0		and #$f0			and 	#$F0
.2170	15 56		ora $56,x			ora 	NSMantissa2,x
.2172	15 62		ora $62,x			ora 	NSMantissa3,x
.2174	f0 08		beq $217e			beq 	_FCExit 					; zero, so approximately identical
.2176					_FCSign:
.2176	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.2178	34 32		bit $32,x			bit 	NSStatus,x
.217a	10 02		bpl $217e			bpl 	_FCExit
.217c					_FCNegative:
.217c	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.217e					_FCExit:
.217e	20 72 26	jsr $2672			jsr 	FloatSetByte 				; set the result 255,0,1
.2181	60		rts				rts
.2182					FloatScalarTable:
>2182	66 66 66 66				.dword $66666666 ; 0.1
>2186	de					.byte $de
>2187	1f 85 eb 51				.dword $51eb851f ; 0.01
>218b	db					.byte $db
>218c	4c 37 89 41				.dword $4189374c ; 0.001
>2190	d8					.byte $d8
>2191	ac 8b db 68				.dword $68db8bac ; 0.0001
>2195	d4					.byte $d4
>2196	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>219a	d1					.byte $d1
>219b	83 de 1b 43				.dword $431bde83 ; 1e-06
>219f	ce					.byte $ce
>21a0	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>21a4	ca					.byte $ca
>21a5	89 3b e6 55				.dword $55e63b89 ; 1e-08
>21a9	c7					.byte $c7
>21aa	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>21ae	c4					.byte $c4
>21af	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>21b3	c0					.byte $c0
>21b4	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>21b8	bd					.byte $bd
.21b9					FloatDivide:
.21b9	48		pha				pha
.21ba	20 c5 23	jsr $23c5			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.21bd	ca		dex				dex
.21be	c9 00		cmp #$00			cmp 	#0
.21c0	f0 1e		beq $21e0			beq 	_FDZero
.21c2	20 c5 23	jsr $23c5			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.21c5	f0 16		beq $21dd			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.21c7	20 28 22	jsr $2228			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.21ca	20 f5 21	jsr $21f5			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.21cd	20 c5 23	jsr $23c5			jsr		FloatNormalise 				; renormalise
.21d0	20 bb 23	jsr $23bb			jsr 	FloatCalculateSign 			; calculate result sign
.21d3	b5 6e		lda $6e,x			lda 	NSExponent,x 				; calculate exponent
.21d5	38		sec				sec
.21d6	f5 6f		sbc $6f,x			sbc 	NSExponent+1,x
.21d8	38		sec				sec
.21d9	e9 1e		sbc #$1e			sbc 	#30
.21db	95 6e		sta $6e,x			sta 	NSExponent,x
.21dd					_FDExit:
.21dd	68		pla				pla
.21de	18		clc				clc
.21df	60		rts				rts
.21e0					_FDZero:
.21e0	68		pla				pla
.21e1	38		sec				sec
.21e2	60		rts				rts
.21e3					DivideInt32:
.21e3	20 ab 22	jsr $22ab			jsr 	FloatIntegerPart 			; make both integers
.21e6	ca		dex				dex
.21e7	20 ab 22	jsr $22ab			jsr 	FloatIntegerPart
.21ea	20 06 22	jsr $2206			jsr 	Int32Divide 				; divide
.21ed	20 f5 21	jsr $21f5			jsr 	NSMCopyPlusTwoToZero 		; copy result
.21f0	20 bb 23	jsr $23bb			jsr 	FloatCalculateSign 			; calculate result sign
.21f3	18		clc				clc
.21f4	60		rts				rts
.21f5					NSMCopyPlusTwoToZero:
.21f5	b5 40		lda $40,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.21f7	95 3e		sta $3e,x			sta 	NSMantissa0,x
.21f9	b5 4c		lda $4c,x			lda 	NSMantissa1+2,x
.21fb	95 4a		sta $4a,x			sta 	NSMantissa1,x
.21fd	b5 58		lda $58,x			lda 	NSMantissa2+2,x
.21ff	95 56		sta $56,x			sta 	NSMantissa2,x
.2201	b5 64		lda $64,x			lda 	NSMantissa3+2,x
.2203	95 62		sta $62,x			sta 	NSMantissa3,x
.2205	60		rts				rts
.2206					Int32Divide:
.2206	48		pha				pha 								; save AXY
.2207	5a		phy				phy
.2208	20 53 26	jsr $2653			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.220b	20 6c 26	jsr $266c			jsr 	FloatSetZeroMantissaOnly 	; set S[X] to zero
.220e	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.2210					_I32DivideLoop:
.2210	e8		inx				inx
.2211	e8		inx				inx
.2212	20 7f 26	jsr $267f			jsr 	FloatShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.2215	ca		dex				dex
.2216	ca		dex				dex
.2217	20 80 26	jsr $2680			jsr 	FloatRotateLeft
.221a	20 46 22	jsr $2246			jsr 	FloatDivideCheck 			; check if subtract possible
.221d	90 02		bcc $2221			bcc 	_I32DivideNoCarryIn
.221f	f6 40		inc $40,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.2221					_I32DivideNoCarryIn:
.2221	88		dey				dey 								; loop round till division completed.
.2222	d0 ec		bne $2210			bne 	_I32DivideLoop
.2224	7a		ply				ply 								; restore AXY and exit
.2225	68		pla				pla
.2226	18		clc				clc
.2227	60		rts				rts
.2228					Int32ShiftDivide:
.2228	48		pha				pha 								; save AY
.2229	5a		phy				phy
.222a	e8		inx				inx 								; clear S[X+2]
.222b	e8		inx				inx
.222c	20 70 26	jsr $2670			jsr 	FloatSetZero
.222f	ca		dex				dex
.2230	ca		dex				dex
.2231	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.2233					_I32SDLoop:
.2233	20 46 22	jsr $2246			jsr 	FloatDivideCheck 			; check if subtract possible
.2236	e8		inx				inx
.2237	e8		inx				inx
.2238	20 80 26	jsr $2680			jsr 	FloatRotateLeft				; shift 64 bit FPA left, rotating carry in
.223b	ca		dex				dex
.223c	ca		dex				dex
.223d	20 80 26	jsr $2680			jsr 	FloatRotateLeft
.2240	88		dey				dey 	 							; do 31 times
.2241	d0 f0		bne $2233			bne 	_I32SDLoop
.2243	7a		ply				ply 								; restore AY and exit
.2244	68		pla				pla
.2245	60		rts				rts
.2246					FloatDivideCheck:
.2246	20 16 24	jsr $2416			jsr 	FloatSubTopTwoStack 		; subtract Stack[X+1] from Stack[X+0]
.2249	b0 04		bcs $224f			bcs 	_DCSExit 					; if carry set, then could do, exit
.224b	20 fc 23	jsr $23fc			jsr 	FloatAddTopTwoStack 		; add it back in
.224e	18		clc				clc 								; and return False
.224f					_DCSExit:
.224f	60		rts				rts
.2250					FloatFractionalPart:
.2250	5a		phy				phy
.2251	b5 32		lda $32,x			lda 	NSStatus,x 					; take absolute value
.2253	29 7f		and #$7f			and 	#$7F
.2255	95 32		sta $32,x			sta 	NSStatus,x
.2257	20 c5 23	jsr $23c5			jsr 	FloatNormalise
.225a	b5 6e		lda $6e,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.225c	38		sec				sec
.225d	e9 e0		sbc #$e0			sbc 	#$E0
.225f	90 29		bcc $228a			bcc 	_FFPExit 					; already fractional
.2261	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.2263	b0 22		bcs $2287			bcs 	_FFPZero
.2265	a8		tay				tay 								; put count to do in Y
.2266	b5 62		lda $62,x			lda 	NSMantissa3,x 				; do each in turn.
.2268	20 8f 22	jsr $228f			jsr 	_FFPPartial
.226b	95 62		sta $62,x			sta 	NSMantissa3,x
.226d	b5 56		lda $56,x			lda 	NSMantissa2,x
.226f	20 8f 22	jsr $228f			jsr 	_FFPPartial
.2272	95 56		sta $56,x			sta 	NSMantissa2,x
.2274	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.2276	20 8f 22	jsr $228f			jsr 	_FFPPartial
.2279	95 4a		sta $4a,x			sta 	NSMantissa1,x
.227b	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.227d	20 8f 22	jsr $228f			jsr 	_FFPPartial
.2280	95 3e		sta $3e,x			sta 	NSMantissa0,x
.2282	20 92 26	jsr $2692			jsr 	FloatIsZero 					; zeroed check.
.2285	d0 03		bne $228a			bne 	_FFPExit
.2287					_FFPZero:
.2287	20 70 26	jsr $2670			jsr 	FloatSetZero
.228a					_FFPExit:
.228a	20 c5 23	jsr $23c5			jsr 	FloatNormalise
.228d	7a		ply				ply
.228e	60		rts				rts
.228f					_FFPPartial:
.228f	c0 00		cpy #$00			cpy 	#0 							; no more to do
.2291	f0 17		beq $22aa			beq 	_FFFPPExit
.2293	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.2295	b0 0c		bcs $22a3			bcs 	_FFFPPWholeByte
.2297	5a		phy				phy
.2298					_FFFPPLeft:
.2298	0a		asl a				asl 	a
.2299	88		dey				dey
.229a	d0 fc		bne $2298			bne 	_FFFPPLeft
.229c	7a		ply				ply
.229d					_FFFPPRight:
.229d	4a		lsr a				lsr 	a
.229e	88		dey				dey
.229f	d0 fc		bne $229d			bne 	_FFFPPRight
.22a1	80 07		bra $22aa			bra 	_FFFPPExit
.22a3					_FFFPPWholeByte:
.22a3	98		tya				tya 								; subtract 8 from count
.22a4	38		sec				sec
.22a5	e9 08		sbc #$08			sbc 	#8
.22a7	a8		tay				tay
.22a8	a9 00		lda #$00			lda 	#0 							; and clear all
.22aa					_FFFPPExit:
.22aa	60		rts				rts
.22ab					FloatIntegerPart:
.22ab	48		pha				pha
.22ac	b5 6e		lda $6e,x			lda 	NSExponent,x 				; is it integer already ?
.22ae	f0 1d		beq $22cd			beq 	_FIPExit 					; if so do nothing
.22b0	20 92 26	jsr $2692			jsr 	FloatIsZero 				; is it zero ?
.22b3	f0 15		beq $22ca			beq 	_FIPZero 					; if so return zero.
.22b5	20 c5 23	jsr $23c5			jsr 	FloatNormalise 				; normalise
.22b8	f0 10		beq $22ca			beq 	_FIPZero 					; normalised to zero, exit zero
.22ba					_FIPShift:
.22ba	b5 6e		lda $6e,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.22bc	10 07		bpl $22c5			bpl 	_FIPCheckZero
.22be	20 89 26	jsr $2689			jsr 	FloatShiftRight 			; shift mantissa right
.22c1	f6 6e		inc $6e,x			inc 	NSExponent,x 				; bump exponent
.22c3	80 f5		bra $22ba			bra 	_FIPShift
.22c5					_FIPCheckZero:
.22c5	20 92 26	jsr $2692			jsr 	FloatIsZero 				; avoid -0 problem
.22c8	d0 03		bne $22cd			bne 	_FIPExit 					; set to zero if mantissa zero.
.22ca					_FIPZero:
.22ca	20 70 26	jsr $2670			jsr 	FloatSetZero
.22cd					_FIPExit:
.22cd	68		pla				pla
.22ce	60		rts				rts
.22cf					FloatIntegerPartDown:
.22cf	48		pha				pha
.22d0	5a		phy				phy
.22d1	b5 6e		lda $6e,x			lda 	NSExponent,x 				; is it integer already ?
.22d3	f0 36		beq $230b			beq 	_FIPExit 					; if so do nothing
.22d5	20 92 26	jsr $2692			jsr 	FloatIsZero 				; is it zero ?
.22d8	f0 2e		beq $2308			beq 	_FIPZero 					; if so return zero.
.22da	20 c5 23	jsr $23c5			jsr 	FloatNormalise 				; normalise
.22dd	f0 29		beq $2308			beq 	_FIPZero 					; normalised to zero, exit zero
.22df	a0 00		ldy #$00			ldy 	#0 							; reset the count of bits.
.22e1					_FIPShift:
.22e1	b5 6e		lda $6e,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.22e3	10 0a		bpl $22ef			bpl 	_FIPCheckDown
.22e5	20 89 26	jsr $2689			jsr 	FloatShiftRight 			; shift mantissa right
.22e8	90 01		bcc $22eb			bcc 	_FIPNoFrac 					; shifted a zero out ?
.22ea	c8		iny				iny
.22eb					_FIPNoFrac:
.22eb	f6 6e		inc $6e,x			inc 	NSExponent,x 				; bump exponent
.22ed	80 f2		bra $22e1			bra 	_FIPShift
.22ef					_FIPCheckDown:
.22ef	c0 00		cpy #$00			cpy 	#0 							; were there any fractional bits.
.22f1	f0 10		beq $2303			beq 	_FIPCheckZero
.22f3	34 32		bit $32,x			bit 	NSStatus,x 					; +ve
.22f5	10 0c		bpl $2303			bpl 	_FIPCheckZero
.22f7	e8		inx				inx 								; -ve so round *down*.
.22f8	a9 01		lda #$01			lda 	#1
.22fa	20 72 26	jsr $2672			jsr 	FloatSetByte
.22fd	20 32 26	jsr $2632			jsr 	FloatNegate
.2300	20 94 20	jsr $2094			jsr 	FloatAdd
.2303					_FIPCheckZero:
.2303	20 92 26	jsr $2692			jsr 	FloatIsZero 				; avoid -0 problem
.2306	d0 03		bne $230b			bne 	_FIPExit 					; set to zero if mantissa zero.
.2308					_FIPZero:
.2308	20 70 26	jsr $2670			jsr 	FloatSetZero
.230b					_FIPExit:
.230b	7a		ply				ply
.230c	68		pla				pla
.230d	60		rts				rts
.230e					FloatInt8Multiply:
.230e	5a		phy				phy
.230f	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; right shifted multiplier in Y
.2311	a8		tay				tay
.2312	74 3e		stz $3e,x			stz 	NSMantissa0,x 				; zero the result (already 8 bit constant)
.2314					_FI8MLoop:
.2314	98		tya				tya 								; shift right shifter right into carry
.2315	4a		lsr a				lsr 	a
.2316	a8		tay				tay
.2317	90 0d		bcc $2326			bcc 	_FI8MNoAdd
.2319	18		clc				clc
.231a	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.231c	75 3f		adc $3f,x			adc 	NSMantissa0+1,x
.231e	95 3e		sta $3e,x			sta 	NSMantissa0,x
.2320	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.2322	75 4b		adc $4b,x			adc 	NSMantissa1+1,x
.2324	95 4a		sta $4a,x			sta 	NSMantissa1,x
.2326					_FI8MNoAdd:
.2326	16 3f		asl $3f,x			asl 	NSMantissa0+1,x 			; shift adder left
.2328	36 4b		rol $4b,x			rol 	NSMantissa1+1,x
.232a	c0 00		cpy #$00			cpy 	#0
.232c	d0 e6		bne $2314			bne 	_FI8MLoop 					; until right shifter zero.
.232e	7a		ply				ply
.232f	60		rts				rts
.2330					FloatMultiply:
.2330	ca		dex				dex
.2331	b5 6e		lda $6e,x			lda 	NSExponent,x 				; can use optimised ?
.2333	15 6f		ora $6f,x			ora 	NSExponent+1,x
.2335	15 62		ora $62,x			ora 	NSMantissa3,x
.2337	15 63		ora $63,x			ora 	NSMantissa3+1,x
.2339	d0 21		bne $235c			bne 	_FMUseFloat
.233b	b5 32		lda $32,x			lda 	NSStatus,x 					; check if it is 8 bit unsigned
.233d	15 33		ora $33,x			ora 	NSStatus+1,x
.233f	29 80		and #$80			and 	#$80
.2341	15 62		ora $62,x			ora 	NSMantissa3,x
.2343	15 56		ora $56,x			ora 	NSMantissa2,x
.2345	15 4a		ora $4a,x			ora 	NSMantissa1,x
.2347	15 63		ora $63,x			ora 	NSMantissa3+1,x
.2349	15 57		ora $57,x			ora 	NSMantissa2+1,x
.234b	15 4b		ora $4b,x			ora 	NSMantissa1+1,x
.234d	d0 04		bne $2353			bne 	_FMInt32
.234f	20 0e 23	jsr $230e			jsr 	FloatInt8Multiply 			; use fast 8x8 multiply.
.2352	60		rts				rts
.2353					_FMInt32:
.2353	20 7d 23	jsr $237d			jsr 	FloatMultiplyShort			; use the int32 one.
.2356	18		clc				clc 								; fix it up if gone out of range
.2357	75 6e		adc $6e,x			adc 	NSExponent,x
.2359	95 6e		sta $6e,x			sta 	NSExponent,x
.235b	60		rts				rts
.235c					_FMUseFloat:
.235c	20 c5 23	jsr $23c5			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.235f	f0 18		beq $2379			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.2361	e8		inx				inx
.2362	20 c5 23	jsr $23c5			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.2365	ca		dex				dex
.2366	c9 00		cmp #$00			cmp 	#0
.2368	f0 0c		beq $2376			beq 	_FDSetZero
.236a	20 7d 23	jsr $237d			jsr 	FloatMultiplyShort 			; calculate the result.
.236d	75 6e		adc $6e,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.236f	18		clc				clc
.2370	75 6f		adc $6f,x			adc 	NSExponent+1,x
.2372	95 6e		sta $6e,x			sta 	NSExponent,x
.2374	80 03		bra $2379			bra 	_FDExit
.2376					_FDSetZero:
.2376	20 70 26	jsr $2670			jsr 	FloatSetZero 				; return 0
.2379					_FDExit:
.2379	20 c5 23	jsr $23c5			jsr 	FloatNormalise 				; normalise the result
.237c	60		rts				rts
.237d					FloatMultiplyShort:
.237d	5a		phy				phy 								; save Y
.237e	20 53 26	jsr $2653			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.2381	20 6c 26	jsr $266c			jsr 	FloatSetZeroMantissaOnly 	; set mantissa S[X] to zero
.2384	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.2386					_I32MLoop:
.2386	b5 40		lda $40,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.2388	15 4c		ora $4c,x			ora 	NSMantissa1+2,x
.238a	15 58		ora $58,x			ora 	NSMantissa2+2,x
.238c	15 64		ora $64,x			ora 	NSMantissa3+2,x
.238e	f0 25		beq $23b5			beq 	_I32MExit 					; exit if zero
.2390	b5 40		lda $40,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.2392	29 01		and #$01			and 	#1
.2394	f0 0d		beq $23a3			beq 	_I32MNoAdd
.2396	20 fc 23	jsr $23fc			jsr 	FloatAddTopTwoStack 		; if so add S[X+1] to S[X+0]
.2399	b5 62		lda $62,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.239b	10 06		bpl $23a3			bpl 	_I32MNoAdd
.239d					_I32ShiftRight:
.239d	20 89 26	jsr $2689			jsr 	FloatShiftRight 			; shift S[X] right
.23a0	c8		iny				iny 								; increment shift count
.23a1	80 09		bra $23ac			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.23a3					_I32MNoAdd:
.23a3	34 63		bit $63,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.23a5	70 f6		bvs $239d			bvs 	_I32ShiftRight 				; instead.
.23a7	e8		inx				inx
.23a8	20 7f 26	jsr $267f			jsr 	FloatShiftLeft 				; shift additive S[X+1] left
.23ab	ca		dex				dex
.23ac					_I32MShiftUpper:
.23ac	e8		inx				inx 								; shift S[X+2] right
.23ad	e8		inx				inx
.23ae	20 89 26	jsr $2689			jsr 	FloatShiftRight
.23b1	ca		dex				dex
.23b2	ca		dex				dex
.23b3	80 d1		bra $2386			bra 	_I32MLoop 					; try again.
.23b5					_I32MExit:
.23b5	20 bb 23	jsr $23bb			jsr 	FloatCalculateSign
.23b8	98		tya				tya 								; shift in A
.23b9	7a		ply				ply 								; restore Y and exit
.23ba	60		rts				rts
.23bb					FloatCalculateSign:
.23bb	b5 32		lda $32,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.23bd	16 32		asl $32,x			asl 	NSStatus,x 					; shift result left
.23bf	55 33		eor $33,x			eor 	NSStatus+1,x
.23c1	0a		asl a				asl 	a 							; shift bit 7 into carry
.23c2	76 32		ror $32,x			ror 	NSStatus,x 					; shift right into status byte.
.23c4	60		rts				rts
.23c5					FloatNormalise:
.23c5	20 92 26	jsr $2692			jsr 	FloatIsZero 				; if zero exit
.23c8	d0 07		bne $23d1			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.23ca	16 32		asl $32,x			asl 	NSStatus,x 					; clear the sign bit.
.23cc	76 32		ror $32,x			ror 	NSStatus,x 					; (no -0)
.23ce	a9 00		lda #$00			lda 	#0 							; set Z flag
.23d0	60		rts				rts
.23d1					_NSNormaliseOptimise:
.23d1	b5 62		lda $62,x			lda 	NSMantissa3,x 				; upper byte zero ?
.23d3	d0 19		bne $23ee			bne 	_NSNormaliseLoop
.23d5	b5 56		lda $56,x			lda 	NSMantissa2,x 				; byte normalise
.23d7	30 15		bmi $23ee			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.23d9	95 62		sta $62,x			sta 	NSMantissa3,x
.23db	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.23dd	95 56		sta $56,x			sta 	NSMantissa2,x
.23df	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.23e1	95 4a		sta $4a,x			sta 	NSMantissa1,x
.23e3	74 3e		stz $3e,x			stz 	NSMantissa0,x
.23e5	b5 6e		lda $6e,x			lda 	NSExponent,x
.23e7	38		sec				sec
.23e8	e9 08		sbc #$08			sbc 	#8
.23ea	95 6e		sta $6e,x			sta 	NSExponent,x
.23ec	80 e3		bra $23d1			bra 	_NSNormaliseOptimise
.23ee					_NSNormaliseLoop:
.23ee	34 62		bit $62,x			bit 	NSMantissa3,x 				; bit 30 set ?
.23f0	70 07		bvs $23f9			bvs 	_NSNExit 					; exit if so with Z flag clear
.23f2	20 7f 26	jsr $267f			jsr 	FloatShiftLeft 				; shift mantissa left
.23f5	d6 6e		dec $6e,x			dec 	NSExponent,x 				; adjust exponent
.23f7	80 f5		bra $23ee			bra 	_NSNormaliseLoop
.23f9					_NSNExit:
.23f9	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.23fb	60		rts				rts
.23fc					FloatAddTopTwoStack:
.23fc	18		clc				clc
.23fd	b5 3e		lda $3e,x			lda		NSMantissa0,x
.23ff	75 3f		adc $3f,x			adc 		NSMantissa0+1,x
.2401	95 3e		sta $3e,x			sta 	NSMantissa0,x
.2403	b5 4a		lda $4a,x			lda		NSMantissa1,x
.2405	75 4b		adc $4b,x			adc 		NSMantissa1+1,x
.2407	95 4a		sta $4a,x			sta 	NSMantissa1,x
.2409	b5 56		lda $56,x			lda		NSMantissa2,x
.240b	75 57		adc $57,x			adc 		NSMantissa2+1,x
.240d	95 56		sta $56,x			sta 	NSMantissa2,x
.240f	b5 62		lda $62,x			lda		NSMantissa3,x
.2411	75 63		adc $63,x			adc 		NSMantissa3+1,x
.2413	95 62		sta $62,x			sta 	NSMantissa3,x
.2415	60		rts				rts
.2416					FloatSubTopTwoStack:
.2416	38		sec				sec
.2417	b5 3e		lda $3e,x			lda		NSMantissa0,x
.2419	f5 3f		sbc $3f,x			sbc 		NSMantissa0+1,x
.241b	95 3e		sta $3e,x			sta 	NSMantissa0,x
.241d	b5 4a		lda $4a,x			lda		NSMantissa1,x
.241f	f5 4b		sbc $4b,x			sbc 		NSMantissa1+1,x
.2421	95 4a		sta $4a,x			sta 	NSMantissa1,x
.2423	b5 56		lda $56,x			lda		NSMantissa2,x
.2425	f5 57		sbc $57,x			sbc 		NSMantissa2+1,x
.2427	95 56		sta $56,x			sta 	NSMantissa2,x
.2429	b5 62		lda $62,x			lda		NSMantissa3,x
.242b	f5 63		sbc $63,x			sbc 		NSMantissa3+1,x
.242d	95 62		sta $62,x			sta 	NSMantissa3,x
.242f	60		rts				rts
.2430					FloatInt32Add:
.2430	b5 32		lda $32,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.2432	55 33		eor $33,x			eor 	NSStatus+1,x
.2434	30 04		bmi $243a			bmi 	_DiffSigns
.2436	20 fc 23	jsr $23fc			jsr		FloatAddTopTwoStack
.2439	60		rts				rts
.243a					_DiffSigns:
.243a	20 16 24	jsr $2416			jsr 	FloatSubTopTwoStack 		; do a physical subtraction
.243d	34 62		bit $62,x			bit 	NSMantissa3,x 				; result is +ve, okay
.243f	10 07		bpl $2448			bpl 	_AddExit
.2441	b5 33		lda $33,x			lda 	NSStatus+1,x 				; sign is that of 11th value
.2443	95 32		sta $32,x			sta 	NSStatus,x
.2445	20 39 26	jsr $2639			jsr 	FloatNegateMantissa 		; negate the mantissa and exit
.2448					_AddExit:
.2448	20 92 26	jsr $2692			jsr 	FloatIsZero 				; check for -0
.244b	d0 02		bne $244f			bne 	_AddNonZero
.244d	74 32		stz $32,x			stz 	NSStatus,x
.244f					_AddNonZero:
.244f	60		rts				rts
=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.2450					FloatEncodeStart:
.2450	38		sec				sec
.2451	80 01		bra $2454			bra 	FloatEncodeContinue+1
.2453					FloatEncodeContinue:
.2453	18		clc				clc
.2454					FloatEncode:
.2454	08		php				php 								; save reset flag.
.2455	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.2457	f0 15		beq $246e			beq 	_ENIsOkay
.2459	c9 30		cmp #$30			cmp 	#"0"
.245b	90 04		bcc $2461			bcc 	_ENBadNumber
.245d	c9 3a		cmp #$3a			cmp 	#"9"+1
.245f	90 0d		bcc $246e			bcc 	_ENIsOkay
.2461					_ENBadNumber:
.2461	28		plp				plp 								; throw saved reset
.2462	ad 37 06	lda $0637			lda 	encodeState 				; if in decimal mode, construct final number
.2465	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.2467	d0 03		bne $246c			bne 	_ENFail
.2469	4c e6 24	jmp $24e6			jmp 	_ENConstructFinal
.246c					_ENFail:
.246c	18		clc				clc 								; not allowed
.246d	60		rts				rts
.246e					_ENIsOkay:
.246e	28		plp				plp 								; are we restarting
.246f	90 15		bcc $2486			bcc 	_ENNoRestart
.2471					_ENStartEncode:
.2471	c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.2473	f0 0c		beq $2481			beq 	_ENFirstDP
.2475	29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.2477	20 72 26	jsr $2672			jsr 	FloatSetByte 				; in single byte mode.
.247a	a9 01		lda #$01			lda 	#ESTA_Low
.247c					_ENExitChange:
.247c	8d 37 06	sta $0637			sta 	encodeState 				; save new state
.247f	38		sec				sec
.2480	60		rts				rts
.2481					_ENFirstDP:
.2481	20 70 26	jsr $2670			jsr 	FloatSetZero 				; clear integer part
.2484	80 3c		bra $24c2			bra 	_ESTASwitchFloat			; go straight to float and exi
.2486					_ENNoRestart:
.2486	48		pha				pha 								; save digit or DP on stack.
.2487	ad 37 06	lda $0637			lda 	encodeState 				; get current state
.248a	c9 01		cmp #$01			cmp 	#ESTA_Low
.248c	f0 09		beq $2497			beq  	_ESTALowState
.248e	c9 02		cmp #$02			cmp 	#ESTA_High
.2490	f0 26		beq $24b8			beq 	_ESTAHighState
.2492	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.2494	f0 38		beq $24ce			beq 	_ESTADecimalState
>2496	db						.byte 	$DB 						; causes a break in the emulator
.2497					_ESTALowState:
.2497	68		pla				pla 								; get value back
.2498	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.249a	f0 26		beq $24c2			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.249c	29 0f		and #$0f			and 	#15 						; make digit
.249e	8d 38 06	sta $0638			sta 	digitTemp 					; save it.
.24a1	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.24a3	0a		asl a				asl 	a
.24a4	0a		asl a				asl 	a
.24a5	75 3e		adc $3e,x			adc 	NSMantissa0,x
.24a7	0a		asl a				asl 	a
.24a8	6d 38 06	adc $0638			adc 	digitTemp
.24ab	95 3e		sta $3e,x			sta 	NSMantissa0,x
.24ad	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.24af	90 05		bcc $24b6			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.24b1	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.24b3	8d 37 06	sta $0637			sta 	encodeState
.24b6					_ESTANoSwitch:
.24b6	38		sec				sec
.24b7	60		rts				rts
.24b8					_ESTAHighState:
.24b8	68		pla				pla 								; get value back
.24b9	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.24bb	f0 05		beq $24c2			beq 	_ESTASwitchFloat
.24bd	20 18 25	jsr $2518			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.24c0	38		sec				sec
.24c1	60		rts				rts
.24c2					_ESTASwitchFloat:
.24c2	9c 39 06	stz $0639			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.24c5	e8		inx				inx 								; zero the decimal additive.
.24c6	20 70 26	jsr $2670			jsr 	FloatSetZero
.24c9	ca		dex				dex
.24ca	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.24cc	80 ae		bra $247c			bra 	_ENExitChange
.24ce					_ESTADecimalState:
.24ce	68		pla				pla 								; digit.
.24cf	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 11th decimal point.
.24d1	f0 99		beq $246c			beq 	_ENFail
.24d3	e8		inx				inx 								; put digit into fractional part of X+1
.24d4	20 18 25	jsr $2518			jsr 	ESTAShiftDigitIntoMantissa
.24d7	ca		dex				dex
.24d8	ee 39 06	inc $0639			inc 	decimalCount 				; bump the count of decimals
.24db	ad 39 06	lda $0639			lda 	decimalCount 				; too many decimal digits.
.24de	c9 0b		cmp #$0b			cmp 	#11
.24e0	f0 02		beq $24e4			beq 	_ESTADSFail
.24e2	38		sec				sec
.24e3	60		rts				rts
.24e4					_ESTADSFail:
.24e4	18		clc				clc
.24e5	60		rts				rts
.24e6					_ENConstructFinal:
.24e6	ad 39 06	lda $0639			lda 	decimalCount 				; get decimal count
.24e9	f0 2b		beq $2516			beq 	_ENCFExit 					; no decimals
.24eb	5a		phy				phy
.24ec	0a		asl a				asl 	a 							; x 4 and CLC
.24ed	0a		asl a				asl 	a
.24ee	6d 39 06	adc $0639			adc 	decimalCount
.24f1	a8		tay				tay
.24f2	b9 7d 21	lda $217d,y			lda 	FloatScalarTable-5,y 		; copy decimal scalar to X+2
.24f5	95 40		sta $40,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.24f7	b9 7e 21	lda $217e,y			lda 	FloatScalarTable-5+1,y
.24fa	95 4c		sta $4c,x			sta 	NSMantissa1+2,x
.24fc	b9 7f 21	lda $217f,y			lda 	FloatScalarTable-5+2,y
.24ff	95 58		sta $58,x			sta 	NSMantissa2+2,x
.2501	b9 80 21	lda $2180,y			lda 	FloatScalarTable-5+3,y
.2504	95 64		sta $64,x			sta 	NSMantissa3+2,x
.2506	b9 81 21	lda $2181,y			lda 	FloatScalarTable-5+4,y
.2509	95 70		sta $70,x			sta 	NSExponent+2,x
.250b	74 34		stz $34,x			stz 	NSStatus+2,x 				; make +ve
.250d	e8		inx				inx 								; multiply decimal const by decimal scalar
.250e	e8		inx				inx
.250f	20 30 23	jsr $2330			jsr 	FloatMultiply
.2512	20 94 20	jsr $2094			jsr 	FloatAdd 					; add to integer part.
.2515	7a		ply				ply
.2516					_ENCFExit:
.2516	18		clc				clc 								; reject the digit.
.2517	60		rts				rts
.2518					ESTAShiftDigitIntoMantissa:
.2518	29 0f		and #$0f			and 	#15 						; save digit
.251a	48		pha				pha
.251b	b5 62		lda $62,x			lda 	NSMantissa3,x 				; push mantissa on stack
.251d	48		pha				pha
.251e	b5 56		lda $56,x			lda 	NSMantissa2,x
.2520	48		pha				pha
.2521	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.2523	48		pha				pha
.2524	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.2526	48		pha				pha
.2527	20 7f 26	jsr $267f			jsr 	FloatShiftLeft 				; x 2
.252a	20 7f 26	jsr $267f			jsr 	FloatShiftLeft 				; x 4
.252d	18		clc				clc 								; pop mantissa and add
.252e	68		pla				pla
.252f	75 3e		adc $3e,x			adc 	NSMantissa0,x
.2531	95 3e		sta $3e,x			sta 	NSMantissa0,x
.2533	68		pla				pla
.2534	75 4a		adc $4a,x			adc 	NSMantissa1,x
.2536	95 4a		sta $4a,x			sta 	NSMantissa1,x
.2538	68		pla				pla
.2539	75 56		adc $56,x			adc 	NSMantissa2,x
.253b	95 56		sta $56,x			sta 	NSMantissa2,x
.253d	68		pla				pla
.253e	75 62		adc $62,x			adc 	NSMantissa3,x
.2540	95 62		sta $62,x			sta 	NSMantissa3,x 				; x 5
.2542	20 7f 26	jsr $267f			jsr 	FloatShiftLeft 				; x 10
.2545	68		pla				pla 								; add digit
.2546	18		clc				clc
.2547	75 3e		adc $3e,x			adc 	NSMantissa0,x
.2549	95 3e		sta $3e,x			sta 	NSMantissa0,x
.254b	90 0a		bcc $2557			bcc 	_ESTASDExit
.254d	f6 4a		inc $4a,x			inc 	NSMantissa1,x
.254f	d0 06		bne $2557			bne 	_ESTASDExit
.2551	f6 56		inc $56,x			inc 	NSMantissa2,x
.2553	d0 02		bne $2557			bne 	_ESTASDExit
.2555	f6 62		inc $62,x			inc 	NSMantissa3,x
.2557					_ESTASDExit:
.2557	60		rts				rts
.0637					encodeState:
>0637							.fill 	1
.0638					digitTemp:
>0638							.fill 	1
.0639					decimalCount:
>0639							.fill 	1
.2558					FloatToString:
.2558	da		phx				phx
.2559	5a		phy				phy 								; save code position
.255a	8d 3a 06	sta $063a			sta 	decimalPlaces	 			; save number of DPs.
.255d	9c 3b 06	stz $063b			stz 	dbOffset 					; offset into decimal buffer = start.
.2560	b5 32		lda $32,x			lda 	NSStatus,x  				; is it -ve.
.2562	10 08		bpl $256c			bpl 	_CNTSNotNegative
.2564	29 7f		and #$7f			and 	#$7F 						; make +ve
.2566	95 32		sta $32,x			sta 	NSStatus,x
.2568	a9 2d		lda #$2d			lda 	#"-"
.256a	80 02		bra $256e			bra 	_CNTMain
.256c					_CNTSNotNegative:
.256c	a9 20		lda #$20			lda 	#" "
.256e					_CNTMain:
.256e	20 d0 25	jsr $25d0			jsr 	WriteDecimalBuffer
.2571	b5 6e		lda $6e,x			lda 	NSExponent,x 				; check if decimal
.2573	f0 0d		beq $2582			beq 	_CNTSNotFloat
.2575	e8		inx				inx 								; round up so we don't get too many 6.999999
.2576	a9 01		lda #$01			lda 	#1
.2578	20 72 26	jsr $2672			jsr 	FloatSetByte
.257b	b5 6d		lda $6d,x			lda		NSExponent-1,x
.257d	95 6e		sta $6e,x			sta 	NSExponent,x
.257f	20 94 20	jsr $2094			jsr 	FloatAdd
.2582					_CNTSNotFloat:
.2582	20 b2 25	jsr $25b2			jsr 	MakePlusTwoString 			; do the integer part.
.2585	20 50 22	jsr $2250			jsr 	FloatFractionalPart 		; get the fractional part
.2588	20 c5 23	jsr $23c5			jsr 	FloatNormalise					; normalise , exit if zero
.258b	f0 22		beq $25af			beq 	_CNTSExit
.258d	a9 2e		lda #$2e			lda 	#"."
.258f	20 d0 25	jsr $25d0			jsr 	WriteDecimalBuffer 			; write decimal place
.2592					_CNTSDecimal:
.2592	ce 3a 06	dec $063a			dec 	decimalPlaces 				; done all the decimals
.2595	30 18		bmi $25af			bmi 	_CNTSExit
.2597	e8		inx				inx 								; x 10.0
.2598	a9 0a		lda #$0a			lda 	#10
.259a	20 72 26	jsr $2672			jsr 	FloatSetByte
.259d	20 30 23	jsr $2330			jsr 	FloatMultiply
.25a0	20 b2 25	jsr $25b2			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.25a3	20 50 22	jsr $2250			jsr 	FloatFractionalPart 		; get the fractional part
.25a6	20 c5 23	jsr $23c5			jsr 	FloatNormalise 				; normalise it.
.25a9	b5 6e		lda $6e,x			lda 	NSExponent,x 				; gone to zero, exit.
.25ab	c9 d0		cmp #$d0			cmp 	#$D0 						; very small remainder, so don't bother.
.25ad	b0 e3		bcs $2592			bcs 	_CNTSDecimal 				; keep going.
.25af					_CNTSExit:
.25af	7a		ply				ply
.25b0	fa		plx				plx
.25b1	60		rts				rts
.25b2					MakePlusTwoString:
.25b2	da		phx				phx
.25b3	20 53 26	jsr $2653			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.25b6	e8		inx				inx 								; access it
.25b7	e8		inx				inx
.25b8	20 ab 22	jsr $22ab			jsr 	FloatIntegerPart 			; make it an integer
.25bb	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.25bd	20 ef 25	jsr $25ef			jsr 	ConvertInt32
.25c0	a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.25c2					_MPTSCopy:
.25c2	bd 15 06	lda $0615,x			lda 	numberBuffer,x
.25c5	20 d0 25	jsr $25d0			jsr 	WriteDecimalBuffer
.25c8	e8		inx				inx
.25c9	bd 15 06	lda $0615,x			lda 	numberBuffer,x
.25cc	d0 f4		bne $25c2			bne 	_MPTSCopy
.25ce	fa		plx				plx
.25cf	60		rts				rts
.25d0					WriteDecimalBuffer:
.25d0	da		phx				phx
.25d1	ae 3b 06	ldx $063b			ldx 	dbOffset
.25d4	9d 3c 06	sta $063c,x			sta 	decimalBuffer,x
.25d7	9e 3d 06	stz $063d,x			stz 	decimalBuffer+1,x
.25da	ee 3b 06	inc $063b			inc 	dbOffset
.25dd	fa		plx				plx
.25de	60		rts				rts
.063a					decimalPlaces:
>063a							.fill 	1
.063b					dbOffset:
>063b							.fill 	1
.063c					decimalBuffer:
>063c							.fill 	32
.25df					ConvertInt16:
.25df	85 3e		sta $3e				sta 	NSMantissa0 				; set up as 32 bit conversion
.25e1	86 4a		stx $4a				stx 	NSMantissa1
.25e3	64 56		stz $56				stz 	NSMantissa2
.25e5	64 62		stz $62				stz 	NSMantissa3
.25e7	64 32		stz $32				stz 	NSStatus 					; positive integer
.25e9	a2 00		ldx #$00			ldx 	#0 							; stack level
.25eb	a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.25ed	80 00		bra $25ef			bra 	ConvertInt32
.25ef					ConvertInt32:
.25ef	5a		phy				phy
.25f0	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.25f2	24 32		bit $32				bit 	NSStatus 					; output a - if not negative.
.25f4	10 08		bpl $25fe			bpl 	_CI32NotNeg
.25f6	48		pha				pha
.25f7	a9 2d		lda #$2d			lda 	#'-'
.25f9	99 15 06	sta $0615,y			sta 	numberBuffer,y
.25fc	c8		iny				iny
.25fd	68		pla				pla
.25fe					_CI32NotNeg:
.25fe	20 0c 26	jsr $260c			jsr 	_CI32DivideConvert 			; recursive conversion
.2601	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.2603	99 15 06	sta $0615,y			sta 	numberBuffer,y
.2606	7a		ply				ply
.2607	a2 06		ldx #$06			ldx 	#numberBuffer >> 8 			; return address in XA
.2609	a9 15		lda #$15			lda 	#numberBuffer & $FF
.260b	60		rts				rts
.260c					_CI32DivideConvert:
.260c	e8		inx				inx 								; write to next slot up
.260d	20 72 26	jsr $2672			jsr 	FloatSetByte 		 		; write the base out.
.2610	ca		dex				dex
.2611	20 06 22	jsr $2206			jsr 	Int32Divide 				; divide
.2614	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; save remainder
.2616	48		pha				pha
.2617	20 f5 21	jsr $21f5			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.261a	20 92 26	jsr $2692			jsr 	FloatIsZero 				; is it zero ?
.261d	f0 05		beq $2624			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.261f	b5 3f		lda $3f,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.2621	20 0c 26	jsr $260c			jsr 	_CI32DivideConvert 			; and recusrively call.
.2624					_CI32NoRecurse:
.2624	68		pla				pla 								; remainder
.2625	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.2627	90 02		bcc $262b			bcc 	_CI32NotHex
.2629	69 26		adc #$26			adc 	#6+32
.262b					_CI32NotHex:
.262b	69 30		adc #$30			adc 	#48
.262d	99 15 06	sta $0615,y			sta 	numberBuffer,y 				; write out and exit
.2630	c8		iny				iny
.2631	60		rts				rts
.2632					FloatNegate:
.2632	b5 32		lda $32,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.2634	49 80		eor #$80			eor 	#$80  						; toggle the negative flag
.2636	95 32		sta $32,x			sta 	NSStatus,x
.2638	60		rts				rts
.2639					FloatNegateMantissa:
.2639	38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.263a	a9 00		lda #$00			lda 	#0
.263c	f5 3e		sbc $3e,x			sbc 	NSMantissa0,x
.263e	95 3e		sta $3e,x			sta 	NSMantissa0,x
.2640	a9 00		lda #$00			lda 	#0
.2642	f5 4a		sbc $4a,x			sbc 	NSMantissa1,x
.2644	95 4a		sta $4a,x			sta 	NSMantissa1,x
.2646	a9 00		lda #$00			lda 	#0
.2648	f5 56		sbc $56,x			sbc 	NSMantissa2,x
.264a	95 56		sta $56,x			sta 	NSMantissa2,x
.264c	a9 00		lda #$00			lda 	#0
.264e	f5 62		sbc $62,x			sbc 	NSMantissa3,x
.2650	95 62		sta $62,x			sta 	NSMantissa3,x
.2652	60		rts				rts
.2653					FloatShiftUpTwo:
.2653	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.2655	95 40		sta $40,x			sta 	NSMantissa0+2,x
.2657	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.2659	95 4c		sta $4c,x			sta 	NSMantissa1+2,x
.265b	b5 56		lda $56,x			lda 	NSMantissa2,x
.265d	95 58		sta $58,x			sta 	NSMantissa2+2,x
.265f	b5 62		lda $62,x			lda 	NSMantissa3,x
.2661	95 64		sta $64,x			sta 	NSMantissa3+2,x
.2663	b5 6e		lda $6e,x			lda 	NSExponent,x
.2665	95 70		sta $70,x			sta 	NSExponent+2,x
.2667	b5 32		lda $32,x			lda 	NSStatus,x
.2669	95 34		sta $34,x			sta 	NSStatus+2,x
.266b	60		rts				rts
.266c					FloatSetZeroMantissaOnly:
.266c	74 3e		stz $3e,x			stz 	NSMantissa0,x
.266e	80 08		bra $2678			bra 	FloatZero13
.2670					FloatSetZero:
.2670	a9 00		lda #$00			lda 	#0
.2672					FloatSetByte:
.2672	74 6e		stz $6e,x			stz 	NSExponent,x 				; zero exponent, as +ve integer value.
.2674					FloatSetMantissa:
.2674	95 3e		sta $3e,x			sta 	NSMantissa0,x 				; zero mantissa
.2676	74 32		stz $32,x			stz 	NSStatus,x
.2678					FloatZero13:
.2678	74 4a		stz $4a,x			stz 	NSMantissa1,x
.267a	74 56		stz $56,x			stz 	NSMantissa2,x
.267c	74 62		stz $62,x			stz 	NSMantissa3,x
.267e	60		rts				rts
.267f					FloatShiftLeft:
.267f	18		clc				clc
.2680					FloatRotateLeft:
.2680	36 3e		rol $3e,x			rol 	NSMantissa0,x
.2682	36 4a		rol $4a,x			rol		NSMantissa1,x
.2684	36 56		rol $56,x			rol		NSMantissa2,x
.2686	36 62		rol $62,x			rol		NSMantissa3,x
.2688	60		rts				rts
.2689					FloatShiftRight:
.2689	56 62		lsr $62,x			lsr 	NSMantissa3,x
.268b	76 56		ror $56,x			ror		NSMantissa2,x
.268d	76 4a		ror $4a,x			ror		NSMantissa1,x
.268f	76 3e		ror $3e,x			ror		NSMantissa0,x
.2691	60		rts				rts
.2692					FloatIsZero:
.2692	b5 62		lda $62,x			lda 	NSMantissa3,x
.2694	15 56		ora $56,x			ora		NSMantissa2,x
.2696	15 4a		ora $4a,x			ora		NSMantissa1,x
.2698	15 3e		ora $3e,x			ora		NSMantissa0,x
.269a	60		rts				rts

;******  Processing input file: testing/testend.asm

.269b					EndProgram:
>269b	01 08 0c 08 0a 00 4e 20				.binary "code/tokenised.dat"
>26a3	b2 20 31 34 00 15 08 14 00 ce 86 20 33 00 32 08
>26b3	3c 00 99 20 c7 28 31 34 37 29 3b 22 48 45 4c 4c
>26c3	4f 20 57 4f 52 4c 44 20 21 22 00 4e 08 46 00 86
>26d3	20 42 58 28 4e 29 3a 86 20 42 59 28 4e 29 3a 86
>26e3	20 42 43 28 4e 29 00 62 08 4b 00 86 20 44 58 28
>26f3	4e 29 3a 86 20 44 59 28 4e 29 00 70 08 50 00 81
>2703	20 42 b2 30 20 a4 20 4e 00 89 08 5a 00 42 58 28
>2713	42 29 b2 b5 28 bb 28 31 29 ac 34 30 29 ac 32 aa
>2723	31 00 a2 08 64 00 42 59 28 42 29 b2 b5 28 bb 28
>2733	31 29 ac 33 30 29 ac 32 35 36 00 b9 08 69 00 42
>2743	43 28 42 29 b2 b5 28 bb 28 31 29 ac 31 34 29 aa
>2753	31 00 cd 08 6a 00 44 58 28 42 29 b2 b5 28 bb 28
>2763	31 29 ac 32 29 00 e3 08 6c 00 8f 20 44 59 28 42
>2773	29 b2 b5 28 bb 28 31 29 ac 32 29 00 ef 08 6d 00
>2783	44 59 28 42 29 b2 31 00 f7 08 6e 00 82 20 42 00
>2793	fd 08 78 00 8f 00 11 09 82 00 81 59 b2 30 a4 32
>27a3	39 3a 81 58 b2 30 a4 33 39 00 27 09 8c 00 51 b2
>27b3	59 ac 32 35 36 aa 58 ac 32 aa 34 35 30 35 36 00
>27c3	3f 09 96 00 ce 84 20 31 2c 51 2c 38 31 3a ce 84
>27d3	31 2c 51 aa 31 2c 30 00 48 09 a0 00 82 58 2c 59
>27e3	00 54 09 c8 00 81 20 42 b2 31 a4 4e 00 71 09 d2
>27f3	00 ce 84 20 31 2c 34 35 30 35 36 aa 42 59 28 42
>2803	29 aa 42 58 28 42 29 2c 30 00 7f 09 e6 00 44 58
>2813	42 b2 44 58 28 42 29 00 90 09 f0 00 8b 44 58 42
>2823	b2 30 a7 8d 31 30 31 30 00 a1 09 fa 00 8b 44 58
>2833	42 b2 31 a7 8d 31 30 34 30 00 af 09 ff 00 44 59
>2843	42 b2 44 59 28 42 29 00 c0 09 04 01 8b 44 59 42
>2853	b2 30 a7 8d 31 30 37 30 00 d1 09 0e 01 8b 44 59
>2863	42 b2 31 a7 8d 31 31 30 30 00 f2 09 18 01 ce 84
>2873	20 31 2c 34 35 30 35 36 aa 42 59 28 42 29 aa 42
>2883	58 28 42 29 2c 42 43 28 42 29 00 f9 09 22 01 82
>2893	42 00 03 0a 2c 01 89 20 32 30 30 00 09 0a e8 03
>28a3	8f 00 17 0a f2 03 42 58 42 b2 42 58 28 42 29 00
>28b3	2c 0a f3 03 8b 42 58 42 b2 31 a7 44 58 28 42 29
>28c3	b2 31 3a 8e 00 3e 0a fc 03 42 58 28 42 29 b2 42
>28d3	58 42 ab 32 3a 8e 00 44 0a 06 04 8f 00 52 0a 10
>28e3	04 42 58 42 b2 42 58 28 42 29 00 72 0a 11 04 8b
>28f3	42 58 42 b2 37 39 a7 20 42 58 28 42 29 b2 37 37
>2903	3a 44 58 28 42 29 b2 30 3a 8e 00 84 0a 1a 04 42
>2913	58 28 42 29 b2 42 58 42 aa 32 3a 8e 00 8a 0a 24
>2923	04 8f 00 98 0a 2e 04 42 59 42 b2 42 59 28 42 29
>2933	00 ad 0a 2f 04 8b 42 59 42 b2 30 a7 44 59 28 42
>2943	29 b2 31 3a 8e 00 c1 0a 38 04 42 59 28 42 29 b2
>2953	42 59 42 ab 32 35 36 3a 8e 00 c7 0a 42 04 8f 00
>2963	d5 0a 4c 04 42 59 42 b2 42 59 28 42 29 00 f8 0a
>2973	4d 04 8b 42 59 42 b2 37 34 32 34 a7 42 59 28 42
>2983	29 b2 37 31 36 38 3a 44 59 28 42 29 b2 30 3a 8e
>2993	00 0c 0b 56 04 42 59 28 42 29 b2 42 59 42 aa 32
>29a3	35 36 3a 8e 00 00 00

;******  End of listing
