
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass -c -Wall -o build/code.prg -L build/code.lst -l build/code.lbl /home/paulr/Projects/blitz-compiler/documents/../source/common-source/wrapper.asm testing/testing.asm /home/paulr/Projects/blitz-compiler/documents/../bin/compiler.library /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library testing/testend.asm
; Thu Oct  5 17:22:57 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../source/common-source/wrapper.asm

=$1000					CodeStart = $1000
=$22					ZeroPageMandatory = $22
=$400					MemoryStorage = $400
.1000	a2 ff		ldx #$ff			ldx 	#$FF
.1002	9a		txs				txs
.1003	4c 06 10	jmp $1006			jmp 	WrapperBoot
.0022					codePtr:
>0022							.fill 	2
.0024					codePage:
>0024							.fill 	1
.0025					objPtr:
>0025							.fill 	2
.0027					objPage:
>0027							.fill 	1
.0028					zTemp0:
>0028							.fill 	2
.002a					zTemp1:
>002a							.fill 	2
.002c					zTemp2:
>002c							.fill 	2

;******  Processing input file: testing/testing.asm

.1006					WrapperBoot:
.1006	4c a8 10	jmp $10a8			jmp 	StartCompiler

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/compiler.library

=$80					C64_END                  = $80 ; $80 end
=$81					C64_FOR                  = $81 ; $81 for
=$82					C64_NEXT                 = $82 ; $82 next
=$83					C64_DATA                 = $83 ; $83 data
=$84					C64_INPUTHASH            = $84 ; $84 input#
=$85					C64_INPUT                = $85 ; $85 input
=$86					C64_DIM                  = $86 ; $86 dim
=$87					C64_READ                 = $87 ; $87 read
=$88					C64_LET                  = $88 ; $88 let
=$89					C64_GOTO                 = $89 ; $89 goto
=$8a					C64_RUN                  = $8a ; $8a run
=$8b					C64_IF                   = $8b ; $8b if
=$8c					C64_RESTORE              = $8c ; $8c restore
=$8d					C64_GOSUB                = $8d ; $8d gosub
=$8e					C64_RETURN               = $8e ; $8e return
=$8f					C64_REM                  = $8f ; $8f rem
=$90					C64_STOP                 = $90 ; $90 stop
=$91					C64_ON                   = $91 ; $91 on
=$92					C64_WAIT                 = $92 ; $92 wait
=$93					C64_LOAD                 = $93 ; $93 load
=$94					C64_SAVE                 = $94 ; $94 save
=$95					C64_VERIFY               = $95 ; $95 verify
=$96					C64_DEF                  = $96 ; $96 def
=$97					C64_POKE                 = $97 ; $97 poke
=$98					C64_PRINTHASH            = $98 ; $98 print#
=$99					C64_PRINT                = $99 ; $99 print
=$9a					C64_CONT                 = $9a ; $9a cont
=$9b					C64_LIST                 = $9b ; $9b list
=$9c					C64_CLR                  = $9c ; $9c clr
=$9d					C64_CMD                  = $9d ; $9d cmd
=$9e					C64_SYS                  = $9e ; $9e sys
=$9f					C64_OPEN                 = $9f ; $9f open
=$a0					C64_CLOSE                = $a0 ; $a0 close
=$a1					C64_GET                  = $a1 ; $a1 get
=$a2					C64_NEW                  = $a2 ; $a2 new
=$a3					C64_TABLB                = $a3 ; $a3 tab(
=$a4					C64_TO                   = $a4 ; $a4 to
=$a5					C64_FN                   = $a5 ; $a5 fn
=$a6					C64_SPCLB                = $a6 ; $a6 spc(
=$a7					C64_THEN                 = $a7 ; $a7 then
=$a8					C64_NOT                  = $a8 ; $a8 not
=$a9					C64_STEP                 = $a9 ; $a9 step
=$aa					C64_PLUS                 = $aa ; $aa +
=$ab					C64_MINUS                = $ab ; $ab -
=$ac					C64_TIMES                = $ac ; $ac *
=$ad					C64_DIVIDE               = $ad ; $ad /
=$ae					C64_POWER                = $ae ; $ae ^
=$af					C64_AND                  = $af ; $af and
=$b0					C64_OR                   = $b0 ; $b0 or
=$b1					C64_GREATER              = $b1 ; $b1 >
=$b2					C64_EQUAL                = $b2 ; $b2 =
=$b3					C64_LESS                 = $b3 ; $b3 <
=$b4					C64_SGN                  = $b4 ; $b4 sgn
=$b5					C64_INT                  = $b5 ; $b5 int
=$b6					C64_ABS                  = $b6 ; $b6 abs
=$b7					C64_USR                  = $b7 ; $b7 usr
=$b8					C64_FRE                  = $b8 ; $b8 fre
=$b9					C64_POS                  = $b9 ; $b9 pos
=$ba					C64_SQR                  = $ba ; $ba sqr
=$bb					C64_RND                  = $bb ; $bb rnd
=$bc					C64_LOG                  = $bc ; $bc log
=$bd					C64_EXP                  = $bd ; $bd exp
=$be					C64_COS                  = $be ; $be cos
=$bf					C64_SIN                  = $bf ; $bf sin
=$c0					C64_TAN                  = $c0 ; $c0 tan
=$c1					C64_ATN                  = $c1 ; $c1 atn
=$c2					C64_PEEK                 = $c2 ; $c2 peek
=$c3					C64_LEN                  = $c3 ; $c3 len
=$c4					C64_STRDOLLAR            = $c4 ; $c4 str$
=$c5					C64_VAL                  = $c5 ; $c5 val
=$c6					C64_ASC                  = $c6 ; $c6 asc
=$c7					C64_CHRDOLLAR            = $c7 ; $c7 chr$
=$c8					C64_LEFTDOLLAR           = $c8 ; $c8 left$
=$c9					C64_RIGHTDOLLAR          = $c9 ; $c9 right$
=$ca					C64_MIDDOLLAR            = $ca ; $ca mid$
=$cb					C64_GO                   = $cb ; $cb go
=$ce80					C64_MON                  = $ce80 ; $ce80 mon
=$ce81					C64_DOS                  = $ce81 ; $ce81 dos
=$ce82					C64_OLD                  = $ce82 ; $ce82 old
=$ce83					C64_GEOS                 = $ce83 ; $ce83 geos
=$ce84					C64_VPOKE                = $ce84 ; $ce84 vpoke
=$ce85					C64_VLOAD                = $ce85 ; $ce85 vload
=$ce86					C64_SCREEN               = $ce86 ; $ce86 screen
=$ce87					C64_PSET                 = $ce87 ; $ce87 pset
=$ce88					C64_LINE                 = $ce88 ; $ce88 line
=$ce89					C64_FRAME                = $ce89 ; $ce89 frame
=$ce8a					C64_RECT                 = $ce8a ; $ce8a rect
=$ce8b					C64_CHAR                 = $ce8b ; $ce8b char
=$ce8c					C64_MOUSE                = $ce8c ; $ce8c mouse
=$ce8d					C64_COLOR                = $ce8d ; $ce8d color
=$ce8e					C64_TEST                 = $ce8e ; $ce8e test
=$ce8f					C64_RESET                = $ce8f ; $ce8f reset
=$ce90					C64_CLS                  = $ce90 ; $ce90 cls
=$ce91					C64_CODEX                = $ce91 ; $ce91 codex
=$ce92					C64_LOCATE               = $ce92 ; $ce92 locate
=$ce93					C64_BOOT                 = $ce93 ; $ce93 boot
=$ce94					C64_KEYMAP               = $ce94 ; $ce94 keymap
=$ce95					C64_BLOAD                = $ce95 ; $ce95 bload
=$ce96					C64_BVLOAD               = $ce96 ; $ce96 bvload
=$ce97					C64_BVERIFY              = $ce97 ; $ce97 bverify
=$ce98					C64_BANK                 = $ce98 ; $ce98 bank
=$ce99					C64_FMINIT               = $ce99 ; $ce99 fminit
=$ce9a					C64_FMNOTE               = $ce9a ; $ce9a fmnote
=$ce9b					C64_FMDRUM               = $ce9b ; $ce9b fmdrum
=$ce9c					C64_FMINST               = $ce9c ; $ce9c fminst
=$ce9d					C64_FMVIB                = $ce9d ; $ce9d fmvib
=$ce9e					C64_FMFREQ               = $ce9e ; $ce9e fmfreq
=$ce9f					C64_FMVOL                = $ce9f ; $ce9f fmvol
=$cea0					C64_FMPAN                = $cea0 ; $cea0 fmpan
=$cea1					C64_FMPLAY               = $cea1 ; $cea1 fmplay
=$cea2					C64_FMCHORD              = $cea2 ; $cea2 fmchord
=$cea3					C64_FMPOKE               = $cea3 ; $cea3 fmpoke
=$cea4					C64_PSGINIT              = $cea4 ; $cea4 psginit
=$cea5					C64_PSGNOTE              = $cea5 ; $cea5 psgnote
=$cea6					C64_PSGVOL               = $cea6 ; $cea6 psgvol
=$cea7					C64_PSGWAV               = $cea7 ; $cea7 psgwav
=$cea8					C64_PSGFREQ              = $cea8 ; $cea8 psgfreq
=$cea9					C64_PSGPAN               = $cea9 ; $cea9 psgpan
=$ceaa					C64_PSGPLAY              = $ceaa ; $ceaa psgplay
=$ceab					C64_PSGCHORD             = $ceab ; $ceab psgchord
=$ceac					C64_REBOOT               = $ceac ; $ceac reboot
=$cead					C64_POWEROFF             = $cead ; $cead poweroff
=$ceae					C64_I2CPOKE              = $ceae ; $ceae i2cpoke
=$ceaf					C64_SLEEP                = $ceaf ; $ceaf sleep
=$ceb0					C64_BSAVE                = $ceb0 ; $ceb0 bsave
=$ceb1					C64_MENU                 = $ceb1 ; $ceb1 menu
=$ceb2					C64_REN                  = $ceb2 ; $ceb2 ren
=$ceb3					C64_LINPUT               = $ceb3 ; $ceb3 linput
=$ceb4					C64_LINPUTHASH           = $ceb4 ; $ceb4 linput#
=$ceb5					C64_BINPUTHASH           = $ceb5 ; $ceb5 binput#
=$ceb6					C64_HELP                 = $ceb6 ; $ceb6 help
=$ced0					C64_VPEEK                = $ced0 ; $ced0 vpeek
=$ced1					C64_MX                   = $ced1 ; $ced1 mx
=$ced2					C64_MY                   = $ced2 ; $ced2 my
=$ced3					C64_MB                   = $ced3 ; $ced3 mb
=$ced4					C64_JOY                  = $ced4 ; $ced4 joy
=$ced5					C64_HEXDOLLAR            = $ced5 ; $ced5 hex$
=$ced6					C64_BINDOLLAR            = $ced6 ; $ced6 bin$
=$ced7					C64_I2CPEEK              = $ced7 ; $ced7 i2cpeek
=$ced8					C64_POINTER              = $ced8 ; $ced8 pointer
=$ced9					C64_STRPTR               = $ced9 ; $ced9 strptr
=$ceda					C64_RPTDOLLAR            = $ceda ; $ceda rpt$
.002e					srcPtr:
>002e							.fill 	2
.0400					sourceBuffer:
>0400							.fill 	256
.0500					currentLineNumber:
>0500							.fill 	2
=$80					PCD_STARTBINARY = $80
=$8d					PCD_ENDBINARY = $8d
=$8d					PCD_STARTCOMMAND = $8d
=$ca					PCD_ENDCOMMAND = $ca
=$ca					PCD_STARTSYSTEM = $ca
=$d5					PCD_ENDSYSTEM = $d5
=$80					PCD_PLUS             = $80 ; +
=$81					PCD_MINUS            = $81 ; -
=$82					PCD_TIMES            = $82 ; *
=$83					PCD_DIVIDE           = $83 ; /
=$84					PCD_POWER            = $84 ; ^
=$85					PCD_AND              = $85 ; and
=$86					PCD_OR               = $86 ; or
=$87					PCD_GREATER          = $87 ; >
=$88					PCD_EQUAL            = $88 ; =
=$89					PCD_LESS             = $89 ; <
=$8a					PCD_GREATEREQUAL     = $8a ; >=
=$8b					PCD_LESSGREATER      = $8b ; <>
=$8c					PCD_LESSEQUAL        = $8c ; <=
=$8d					PCD_ABS              = $8d ; abs
=$8e					PCD_ARRAY            = $8e ; array
=$8f					PCD_ASC              = $8f ; asc
=$90					PCD_ASSERT           = $90 ; assert
=$91					PCD_BINDOLLAR        = $91 ; bin$
=$92					PCD_PRINTCMD_CHR     = $92 ; print.chr
=$93					PCD_CHRDOLLAR        = $93 ; chr$
=$94					PCD_SCMD_CMP         = $94 ; s.cmp
=$95					PCD_FOR              = $95 ; for
=$96					PCD_FRE              = $96 ; fre
=$97					PCD_GET              = $97 ; get
=$98					PCD_RETURN           = $98 ; return
=$99					PCD_PSET             = $99 ; pset
=$9a					PCD_LINE             = $9a ; line
=$9b					PCD_RECT             = $9b ; rect
=$9c					PCD_FRAME            = $9c ; frame
=$9d					PCD_CHAR             = $9d ; char
=$9e					PCD_HEXDOLLAR        = $9e ; hex$
=$9f					PCD_INPUT            = $9f ; input
=$a0					PCD_INPUTDOLLAR      = $a0 ; input$
=$a1					PCD_INPUTCMD_START   = $a1 ; input.start
=$a2					PCD_LEN              = $a2 ; len
=$a3					PCD_FCMD_CMP         = $a3 ; f.cmp
=$a4					PCD_INTCMD_DIV       = $a4 ; int.div
=$a5					PCD_NEGATE           = $a5 ; negate
=$a6					PCD_NEWCMD_LINE      = $a6 ; new.line
=$a7					PCD_NEXT             = $a7 ; next
=$a8					PCD_NOT              = $a8 ; not
=$a9					PCD_ON               = $a9 ; on
=$aa					PCD_MOREON           = $aa ; moreon
=$ab					PCD_PEEK             = $ab ; peek
=$ac					PCD_POKE             = $ac ; poke
=$ad					PCD_POS              = $ad ; pos
=$ae					PCD_GETCHANNEL       = $ae ; getchannel
=$af					PCD_SETCHANNEL       = $af ; setchannel
=$b0					PCD_PRINTCMD_N       = $b0 ; print.n
=$b1					PCD_PRINTCMD_S       = $b1 ; print.s
=$b2					PCD_READ             = $b2 ; read
=$b3					PCD_READDOLLAR       = $b3 ; read$
=$b4					PCD_RND              = $b4 ; rnd
=$b5					PCD_CONCAT           = $b5 ; concat
=$b6					PCD_SGN              = $b6 ; sgn
=$b7					PCD_PRINTCMD_TAB     = $b7 ; print.tab
=$b8					PCD_PRINTCMD_POS     = $b8 ; print.pos
=$b9					PCD_PRINTCMD_SPC     = $b9 ; print.spc
=$ba					PCD_STRDOLLAR        = $ba ; str$
=$bb					PCD_LEFTDOLLAR       = $bb ; left$
=$bc					PCD_RIGHTDOLLAR      = $bc ; right$
=$bd					PCD_MIDDOLLAR        = $bd ; mid$
=$be					PCD_SWAP             = $be ; swap
=$bf					PCD_TI               = $bf ; ti
=$c0					PCD_TIDOLLAR         = $c0 ; ti$
=$c1					PCD_USR              = $c1 ; usr
=$c2					PCD_VAL              = $c2 ; val
=$c3					PCD_CLOSE            = $c3 ; close
=$c4					PCD_EXIT             = $c4 ; exit
=$c5					PCD_DEBUG            = $c5 ; debug
=$c6					PCD_OPEN             = $c6 ; open
=$c7					PCD_SCREEN           = $c7 ; screen
=$c8					PCD_VPOKE            = $c8 ; vpoke
=$c9					PCD_VPEEK            = $c9 ; vpeek
=$ca					PCD_CMD_SHIFT        = $ca ; .shift
=$cb					PCD_CMD_BYTE         = $cb ; .byte
=$cc					PCD_CMD_WORD         = $cc ; .word
=$cd					PCD_CMD_FLOAT        = $cd ; .float
=$ce					PCD_CMD_STRING       = $ce ; .string
=$cf					PCD_CMD_DATA         = $cf ; .data
=$d0					PCD_CMD_GOTO         = $d0 ; .goto
=$d1					PCD_CMD_GOSUB        = $d1 ; .gosub
=$d2					PCD_CMD_GOTOCMD_Z    = $d2 ; .goto.z
=$d3					PCD_CMD_GOTOCMD_NZ   = $d3 ; .goto.nz
=$d4					PCD_CMD_VARSPACE     = $d4 ; .varspace
=$ca80					PCD_CLR              = $ca80 ; clr
=$ca81					PCD_DIM              = $ca81 ; dim
=$ca82					PCD_END              = $ca82 ; end
=$ca83					PCD_JOY              = $ca83 ; joy
=$ca84					PCD_INT              = $ca84 ; int
=$ca85					PCD_SQR              = $ca85 ; sqr
=$ca86					PCD_LOG              = $ca86 ; log
=$ca87					PCD_EXP              = $ca87 ; exp
=$ca88					PCD_COS              = $ca88 ; cos
=$ca89					PCD_SIN              = $ca89 ; sin
=$ca8a					PCD_TAN              = $ca8a ; tan
=$ca8b					PCD_ATN              = $ca8b ; atn
=$ca8c					PCD_MOUSE            = $ca8c ; mouse
=$ca8d					PCD_MB               = $ca8d ; mb
=$ca8e					PCD_MX               = $ca8e ; mx
=$ca8f					PCD_MY               = $ca8f ; my
=$ca90					PCD_RESTORE          = $ca90 ; restore
=$ca91					PCD_STOP             = $ca91 ; stop
=$ca92					PCD_SYS              = $ca92 ; sys
=$ca93					PCD_TIDOLLARCMD_WRITE = $ca93 ; ti$.write
=$ca94					PCD_WAIT             = $ca94 ; wait
=$ca95					PCD_I2CPOKE          = $ca95 ; i2cpoke
=$ca96					PCD_I2CPEEK          = $ca96 ; i2cpeek
=$ca97					PCD_BANK             = $ca97 ; bank
=$ca98					PCD_SLEEP            = $ca98 ; sleep
=$ca99					PCD_FMINIT           = $ca99 ; fminit
=$ca9a					PCD_FMNOTE           = $ca9a ; fmnote
=$ca9b					PCD_FMDRUM           = $ca9b ; fmdrum
=$ca9c					PCD_FMINST           = $ca9c ; fminst
=$ca9d					PCD_FMVIB            = $ca9d ; fmvib
=$ca9e					PCD_FMFREQ           = $ca9e ; fmfreq
=$ca9f					PCD_FMVOL            = $ca9f ; fmvol
=$caa0					PCD_FMPAN            = $caa0 ; fmpan
=$caa1					PCD_FMPLAY           = $caa1 ; fmplay
=$caa2					PCD_FMCHORD          = $caa2 ; fmchord
=$caa3					PCD_FMPOKE           = $caa3 ; fmpoke
=$caa4					PCD_PSGINIT          = $caa4 ; psginit
=$caa5					PCD_PSGNOTE          = $caa5 ; psgnote
=$caa6					PCD_PSGVOL           = $caa6 ; psgvol
=$caa7					PCD_PSGWAV           = $caa7 ; psgwav
=$caa8					PCD_PSGFREQ          = $caa8 ; psgfreq
=$caa9					PCD_PSGPAN           = $caa9 ; psgpan
=$caaa					PCD_PSGPLAY          = $caaa ; psgplay
=$caab					PCD_PSGCHORD         = $caab ; psgchord
=$caac					PCD_CLS              = $caac ; cls
=$caad					PCD_LOCATE           = $caad ; locate
=$caae					PCD_COLOR            = $caae ; color
=$4000					PCodeStart = $4000
=$8000					WorkArea = $8000
=$1f00					WorkAreaSize = $1F00
.1009					InlineNonDecimal:
.1009	a2 02		ldx #$02			ldx 	#2 							; get size in X
.100b	c9 25		cmp #$25			cmp 	#"%"
.100d	f0 02		beq $1011			beq 	_INDBinary
.100f	a2 10		ldx #$10			ldx 	#16
.1011					_INDBinary:
.1011	85 2a		sta $2a				sta 	zTemp1 						; size => zTemp1
.1013	64 2b		stz $2b				stz 	zTemp1+1 					; count => zTemp1+1, at least 1 !
.1015	64 28		stz $28				stz 	zTemp0 						; zero result
.1017	64 29		stz $29				stz 	zTemp0+1
.1019					_INDLoop:
.1019	20 e8 1a	jsr $1ae8			jsr 	LookNext 					; check next character
.101c	20 24 1b	jsr $1b24			jsr 	ConvertHexStyle		 		; convert into range 0-35 for 0-9A-Z
.101f	90 1f		bcc $1040			bcc		_INDDone 					; didn't convert
.1021	c5 2a		cmp $2a				cmp 	zTemp1 						; size too large ?
.1023	b0 1b		bcs $1040			bcs 	_INDDone
.1025	20 4f 10	jsr $104f			jsr 	_INDShift 					; x 2 or x 16
.1028	e0 02		cpx #$02			cpx 	#2
.102a	f0 09		beq $1035			beq 	_INDNotHex
.102c	20 4f 10	jsr $104f			jsr 	_INDShift
.102f	20 4f 10	jsr $104f			jsr 	_INDShift
.1032	20 4f 10	jsr $104f			jsr 	_INDShift
.1035					_INDNotHex:
.1035	05 28		ora $28				ora 	zTemp0 						; or digit into result
.1037	85 28		sta $28				sta 	zTemp0
.1039	20 f9 1a	jsr $1af9			jsr 	GetNext 					; consume
.103c	e6 2b		inc $2b				inc 	zTemp1+1 					; bump count
.103e	80 d9		bra $1019			bra 	_INDLoop
.1040					_INDDone:
.1040	a5 2b		lda $2b				lda 	zTemp1+1 					; done at least 1 ?
.1042	f0 08		beq $104c			beq 	_INDError
.1044	a4 29		ldy $29				ldy 	zTemp0+1 					; push constant
.1046	a5 28		lda $28				lda 	zTemp0
.1048	20 0e 11	jsr $110e			jsr 	PushIntegerYA
.104b	60		rts				rts
.104c					_INDError:
.104c	4c 2f 13	jmp $132f		jmp	ErrorV_syntax
.104f					_INDShift:
.104f	06 28		asl $28				asl 	zTemp0
.1051	26 29		rol $29				rol 	zTemp0+1
.1053	60		rts				rts
.1054					BufferClear:
.1054	9c 02 05	stz $0502			stz 	bufferSize
.1057	60		rts				rts
.1058					BufferWrite:
.1058	da		phx				phx
.1059	ae 02 05	ldx $0502			ldx 	bufferSize
.105c	9d 03 05	sta $0503,x			sta 	dataBuffer,x
.105f	ee 02 05	inc $0502			inc 	bufferSize
.1062	fa		plx				plx
.1063	60		rts				rts
.1064					BufferOutput:
.1064	ad 02 05	lda $0502			lda 	bufferSize
.1067	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.106a	a2 00		ldx #$00			ldx 	#0
.106c					_BOLoop:
.106c	ec 02 05	cpx $0502			cpx 	bufferSize
.106f	f0 09		beq $107a			beq 	_BOExit
.1071	bd 03 05	lda $0503,x			lda 	dataBuffer,x
.1074	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1077	e8		inx				inx
.1078	80 f2		bra $106c			bra 	_BOLoop
.107a					_BOExit:
.107a	60		rts				rts
.0502					bufferSize:
>0502							.fill 	1
.0503					dataBuffer:
>0503							.fill 	256
.107b					WriteCodeByte:
.107b	48		pha				pha 								; save on stack
.107c	da		phx				phx
.107d	5a		phy				phy
.107e	20 cd 1f	jsr $1fcd			jsr 	OUTPUTWriteByte
.1081	7a		ply				ply 								; restore from stack
.1082	fa		plx				plx
.1083	68		pla				pla
.1084	60		rts				rts
.1085					CheckNextComma:
.1085	a9 2c		lda #$2c			lda	 	#","
.1087	80 06		bra $108f			bra 	CheckNextA
.1089					CheckNextRParen:
.1089	a9 29		lda #$29			lda	 	#")"
.108b	80 02		bra $108f			bra 	CheckNextA
.108d					CheckNextLParen:
.108d	a9 28		lda #$28			lda 	#"("
.108f					CheckNextA:
.108f	8d 03 06	sta $0603			sta 	checkCharacter 				; save test character
.1092					_CNALoop:
.1092	20 04 1b	jsr $1b04			jsr 	GetNextNonSpace 			; get next skipping spaces.
.1095	cd 03 06	cmp $0603			cmp 	checkCharacter 				; matches ?
.1098	f0 03		beq $109d			beq 	_CNAExit
.109a	4c 2f 13	jmp $132f		jmp	ErrorV_syntax
.109d					_CNAExit:
.109d	60		rts				rts
.0603					checkCharacter:
>0603							.fill 	1
.109e					OUTPUTClose:
.109e	a9 40		lda #$40			lda 	#(PCodeStart >> 8)
.10a0	a6 25		ldx $25				ldx 	objPtr
.10a2	a4 26		ldy $26				ldy 	objPtr+1
.10a4	20 37 20	jsr $2037			jsr 	XSaveMemory
.10a7	60		rts				rts
.0000					make
.10a8					StartCompiler:
.10a8	20 ec 1e	jsr $1eec			jsr 	STRReset 					; reset storage (line#, variable)
.10ab	20 74 16	jsr $1674			jsr 	INPUTOpen 					; reset data input
.10ae	20 9b 1d	jsr $1d9b			jsr 	OUTPUTOpen 					; reset data output.
.10b1	a9 d4		lda #$d4			lda 	#PCD_CMD_VARSPACE
.10b3	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.10b6	a9 00		lda #$00			lda 	#0
.10b8	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.10bb	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.10be					MainCompileLoop:
.10be	20 7e 1c	jsr $1c7e			jsr 	ReadNextLine 				; read next line into the buffer.
.10c1	90 2e		bcc $10f1			bcc 	SaveCodeAndExit 			; end of source.
.10c3	20 af 1c	jsr $1caf			jsr 	GetLineNumber 				; get line #
.10c6	20 b6 1c	jsr $1cb6			jsr 	STRMarkLine 				; remember the position and number of this line.
.10c9	a9 a6		lda #$a6			lda 	#PCD_NEWCMD_LINE 			; generate new command line
.10cb	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.10ce					_MCLSameLine:
.10ce	20 04 1b	jsr $1b04			jsr 	GetNextNonSpace 			; get the first character.
.10d1	f0 eb		beq $10be			beq 	MainCompileLoop 			; end of line, get next line.
.10d3	c9 3a		cmp #$3a			cmp 	#":"						; if : then loop back.
.10d5	f0 f7		beq $10ce			beq 	_MCLSameLine
.10d7	c9 00		cmp #$00			cmp 	#0 							; if ASCII then check for implied LET.
.10d9	10 0c		bpl $10e7			bpl 	_MCLCheckAssignment
.10db	a2 c5		ldx #$c5			ldx 	#CommandTables & $FF 		; do command tables.
.10dd	a0 16		ldy #$16			ldy 	#CommandTables >> 8
.10df	20 8d 19	jsr $198d			jsr 	GeneratorProcess
.10e2	b0 ea		bcs $10ce			bcs 	_MCLSameLine 				; keep trying to compile the line.
.10e4					_MCLSyntax:
.10e4	4c 2f 13	jmp $132f		jmp	ErrorV_syntax
.10e7					_MCLCheckAssignment:
.10e7	20 1a 1b	jsr $1b1a			jsr 	CharIsAlpha 				; if not alpha then syntax error
.10ea	90 f8		bcc $10e4			bcc 	_MCLSyntax
.10ec	20 4c 1c	jsr $1c4c			jsr 	CommandLETHaveFirst  		; LET first character, do assign
.10ef	80 dd		bra $10ce			bra		_MCLSameLine 				; loop back.
.10f1					SaveCodeAndExit:
.10f1	20 7c 16	jsr $167c			jsr 	INPUTClose 					; finish input.
.10f4	a9 ff		lda #$ff			lda 	#$FF 						; fake line number $FFFF for forward THEN.
.10f6	a8		tay				tay
.10f7	20 b6 1c	jsr $1cb6			jsr 	STRMarkLine
.10fa	a9 c4		lda #$c4			lda 	#PCD_EXIT 					; add an END
.10fc	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.10ff	a9 ff		lda #$ff			lda 	#$FF 						; add end marker
.1101	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1104	20 5b 15	jsr $155b			jsr 	FixBranches 				; fix up GOTO/GOSUB etc.
.1107	20 9e 10	jsr $109e			jsr 	OUTPUTClose
.110a					ExitCompiler:
.110a	4c ff ff	jmp $ffff			jmp 	$FFFF
.110d	60		rts				rts
.110e					PushIntegerYA:
.110e	c0 00		cpy #$00			cpy 	#0 							; 0-255
.1110	f0 0f		beq $1121			beq 	PushIntegerA
.1112	48		pha				pha
.1113	a9 cc		lda #$cc			lda 	#PCD_CMD_WORD 				; send .word
.1115	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1118	68		pla				pla 								; then LSB
.1119	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.111c	98		tya				tya 								; then MSB
.111d	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1120	60		rts				rts
.1121					PushIntegerA:
.1121	c9 40		cmp #$40			cmp 	#64 						; if > 64 send byte as is
.1123	90 07		bcc $112c			bcc 	_PIWriteA
.1125	48		pha				pha
.1126	a9 cb		lda #$cb			lda 	#PCD_CMD_BYTE 				; send .byte
.1128	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.112b	68		pla				pla
.112c					_PIWriteA:
.112c	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.112f	60		rts				rts
.1130					PushFloat:
.1130	a9 cd		lda #$cd			lda 	#PCD_CMD_FLOAT 				; write CMD_FLOAT
.1132	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1135	b5 6e		lda $6e,x			lda 	NSExponent,x 				; and the data
.1137	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.113a	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.113c	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.113f	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.1141	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1144	b5 56		lda $56,x			lda 	NSMantissa2,x
.1146	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1149	b5 32		lda $32,x			lda 	NSStatus,x 					; with sign packed in byte 3 MSB
.114b	29 80		and #$80			and 	#$80
.114d	15 62		ora $62,x			ora 	NSMantissa3,x
.114f	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1152	60		rts				rts
.1153					CreateVariableRecord:
.1153	48		pha				pha
.1154	ad 0e 06	lda $060e			lda 	freeVariableMemory 		; push current free address on stack.
.1157	48		pha				pha
.1158	ad 0f 06	lda $060f			lda 	freeVariableMemory+1
.115b	48		pha				pha
.115c	ad 0c 06	lda $060c			lda 	variableListEnd  		; copy end of list to zTemp0
.115f	85 28		sta $28				sta 	zTemp0
.1161	ad 0d 06	lda $060d			lda 	variableListEnd+1
.1164	85 29		sta $29				sta 	zTemp0+1
.1166	a9 06		lda #$06			lda 	#6 						; default size if 6 (offset link 3 bytes)
.1168	92 28		sta ($28)			sta 	(zTemp0)
.116a	98		tya				tya
.116b	a0 02		ldy #$02			ldy 	#2 						; write out the name.
.116d	91 28		sta ($28),y			sta 	(zTemp0),y
.116f	88		dey				dey
.1170	8a		txa				txa
.1171	91 28		sta ($28),y			sta 	(zTemp0),y
.1173	a0 03		ldy #$03			ldy 	#3 						; write out the address.
.1175	ad 0e 06	lda $060e			lda 	freeVariableMemory
.1178	91 28		sta ($28),y			sta 	(zTemp0),y
.117a	c8		iny				iny
.117b	ad 0f 06	lda $060f			lda 	freeVariableMemory+1
.117e	91 28		sta ($28),y			sta 	(zTemp0),y
.1180	a0 06		ldy #$06			ldy 	#6 						; write EOL marker next record.
.1182	a9 00		lda #$00			lda 	#0
.1184	91 28		sta ($28),y			sta 	(zTemp0),y
.1186	18		clc				clc
.1187	b2 28		lda ($28)			lda 	(zTemp0) 				; add offset to variableListEnd
.1189	6d 0c 06	adc $060c			adc  	variableListEnd
.118c	8d 0c 06	sta $060c			sta 	variableListEnd
.118f	90 03		bcc $1194			bcc 	_CVNoCarry2
.1191	ee 0d 06	inc $060d			inc 	variableListEnd+1
.1194					_CVNoCarry2:
.1194	7a		ply				ply
.1195	fa		plx				plx
.1196	68		pla				pla
.1197	60		rts				rts
.1198					SetVariableRecordToCodePosition:
.1198	48		pha				pha
.1199	5a		phy				phy
.119a	a5 27		lda $27				lda 	objPage
.119c	a0 03		ldy #$03			ldy 	#3
.119e	91 28		sta ($28),y			sta 	(zTemp0),y
.11a0	c8		iny				iny
.11a1	a5 26		lda $26				lda 	objPtr+1
.11a3	91 28		sta ($28),y			sta 	(zTemp0),y
.11a5	c8		iny				iny
.11a6	a5 25		lda $25				lda 	objPtr
.11a8	91 28		sta ($28),y			sta 	(zTemp0),y
.11aa	7a		ply				ply
.11ab	68		pla				pla
.11ac	60		rts				rts
.11ad					AllocateBytesForType:
.11ad	48		pha				pha
.11ae	da		phx				phx
.11af	a2 02		ldx #$02			ldx 	#2 						; bytes to allocate
.11b1	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16
.11b3	c9 00		cmp #$00			cmp 	#NSSIFloat
.11b5	d0 02		bne $11b9			bne 	_CVNotFloat
.11b7	a2 06		ldx #$06			ldx 	#6
.11b9					_CVNotFloat:
.11b9	8a		txa				txa 							; add 6 or 2 to the free memory pointer.
.11ba	18		clc				clc
.11bb	6d 0e 06	adc $060e			adc 	freeVariableMemory
.11be	8d 0e 06	sta $060e			sta 	freeVariableMemory
.11c1	90 03		bcc $11c6			bcc 	_CVNoCarry1
.11c3	ee 0f 06	inc $060f			inc 	freeVariableMemory+1
.11c6					_CVNoCarry1:
.11c6	fa		plx				plx
.11c7	68		pla				pla
.11c8	60		rts				rts
.11c9					CommandDATA:
.11c9	20 54 10	jsr $1054			jsr 	BufferClear 				; copy it to the buffer
.11cc	20 eb 1a	jsr $1aeb			jsr 	LookNextNonSpace
.11cf					_CTDataLoop:
.11cf	20 e8 1a	jsr $1ae8			jsr 	LookNext 					; reached EOL
.11d2	f0 08		beq $11dc			beq 	_CTDataDone
.11d4	20 58 10	jsr $1058			jsr 	BufferWrite 				; write and consume
.11d7	20 f9 1a	jsr $1af9			jsr 	GetNext
.11da	80 f3		bra $11cf			bra 	_CTDataLoop
.11dc					_CTDataDone:
.11dc	a9 cf		lda #$cf			lda 	#PCD_CMD_DATA 				; output command and buffer
.11de	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.11e1	20 64 10	jsr $1064			jsr 	BufferOutput
.11e4	60		rts				rts
.11e5					CommandDEF:
.11e5	a9 00		lda #$00			lda 	#0 							; constant 0 (for GOTOZ)
.11e7	20 21 11	jsr $1121			jsr 	PushIntegerA
.11ea	20 10 1c	jsr $1c10			jsr 	CompileGotoEOL 				; compile skip over DEF
.11ed	a9 a5		lda #$a5			lda 	#C64_FN
.11ef	20 8f 10	jsr $108f			jsr 	CheckNextA
.11f2	20 04 1b	jsr $1b04			jsr 	GetNextNonSpace				; get variable name w/type must be array e.g. DEF FNx(a)
.11f5	20 69 1b	jsr $1b69			jsr 	ExtractVariableName
.11f8	8a		txa				txa
.11f9	10 51		bpl $124c			bpl 	_CDError
.11fb	8a		txa				txa 								; convert to a function reference - bit 7:0 clear bit 7:1 set
.11fc	29 7f		and #$7f			and 	#$7F
.11fe	aa		tax				tax
.11ff	98		tya				tya
.1200	09 80		ora #$80			ora 	#$80
.1202	a8		tay				tay
.1203	20 fe 14	jsr $14fe			jsr 	FindVariable				; does it already exist ?
.1206	b0 44		bcs $124c			bcs 	_CDError 					; if so, that's an error.
.1208	20 53 11	jsr $1153			jsr 	CreateVariableRecord 		; create the record for it & put the data in it.
.120b	20 98 11	jsr $1198			jsr 	SetVariableRecordToCodePosition
.120e	20 04 1b	jsr $1b04			jsr 	GetNextNonSpace
.1211	20 a9 1e	jsr $1ea9			jsr 	GetReferenceTerm 			; get var ref, not array
.1214	c9 00		cmp #$00			cmp 	#0
.1216	30 34		bmi $124c			bmi 	_CDError
.1218	8d 04 06	sta $0604			sta 	defType 					; save type
.121b	8e 05 06	stx $0605			stx 	defVariable 				; save var ref
.121e	8c 06 06	sty $0606			sty 	defVariable+1
.1221	29 40		and #$40			and 	#NSSString 					; only numbers.
.1223	d0 27		bne $124c			bne 	_CDError
.1225	20 89 10	jsr $1089			jsr 	CheckNextRParen 			; check )
.1228	a9 b2		lda #$b2			lda 	#C64_EQUAL
.122a	20 8f 10	jsr $108f			jsr 	CheckNextA 					; check =
.122d	18		clc				clc 								; if this is DEF FNxx(A), read A
.122e	20 4f 12	jsr $124f			jsr 	CDReadWriteVariable
.1231	a9 be		lda #$be			lda 	#(PCD_SWAP) & $FF
.1233	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1236	38		sec				sec
.1237	20 4f 12	jsr $124f			jsr 	CDReadWriteVariable 		; A is now updated
.123a	20 44 14	jsr $1444			jsr 	CompileExpressionAt0 		; the actual body of the function.
.123d	a9 be		lda #$be			lda 	#(PCD_SWAP) & $FF
.123f	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1242	38		sec				sec
.1243	20 4f 12	jsr $124f			jsr 	CDReadWriteVariable 		; A is now reset to its old value
.1246	a9 98		lda #$98			lda 	#(PCD_RETURN) & $FF
.1248	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.124b	60		rts				rts
.124c					_CDError:
.124c	4c 2f 13	jmp $132f		jmp	ErrorV_syntax
.124f					CDReadWriteVariable:
.124f	ac 06 06	ldy $0606			ldy 	defVariable+1 				; set up YX
.1252	ae 05 06	ldx $0605			ldx 	defVariable
.1255	ad 04 06	lda $0604			lda 	defType
.1258	20 5b 1e	jsr $1e5b			jsr 	GetSetVariable
.125b	60		rts				rts
.0604					defType:
>0604							.fill 	1
.0605					defVariable:
>0605							.fill 	2
.125c					CommandDIM:
.125c	20 04 1b	jsr $1b04			jsr 	GetNextNonSpace 			; get the first non space character
.125f	20 69 1b	jsr $1b69			jsr 	ExtractVariableName 		; variable name to XY
.1262	da		phx				phx 								; save name with type bits.
.1263	e0 00		cpx #$00			cpx 	#0 							; check it is an array.
.1265	10 37		bpl $129e			bpl 	_CDError
.1267	20 fe 14	jsr $14fe			jsr 	FindVariable	 			; see if already exist
.126a	b0 35		bcs $12a1			bcs 	_CDRedefine 				; it still exists.
.126c	20 53 11	jsr $1153			jsr 	CreateVariableRecord 		; create the basic variable
.126f	20 ad 11	jsr $11ad			jsr 	AllocateBytesForType 		; allocate memory for it
.1272	68		pla				pla 								; restore type bits
.1273	5a		phy				phy 								; save the address of the basic storage
.1274	da		phx				phx
.1275	48		pha				pha
.1276	20 a4 12	jsr $12a4			jsr 	OutputIndexGroup 			; create an index group and generate them, preserving type data
.1279	68		pla				pla
.127a	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16 		; 2 bit type data
.127c	20 21 11	jsr $1121			jsr 	PushIntegerA 				; push that type data out.
.127f	a9 ca		lda #$ca			lda 	#(PCD_DIM) >> 8
.1281	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1284	a9 81		lda #$81			lda 	#(PCD_DIM) & $FF
.1286	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1289	fa		plx				plx 								; restore address
.128a	7a		ply				ply
.128b	a9 20		lda #$20			lda 	#NSSIFloat+NSSIInt16 		; pretend it is an int16 reference.
.128d	38		sec				sec
.128e	20 5b 1e	jsr $1e5b			jsr 	GetSetVariable 				; store the address in the reference to the array structure.
.1291	20 eb 1a	jsr $1aeb			jsr 	LookNextNonSpace 			; , follows ?
.1294	c9 2c		cmp #$2c			cmp 	#","
.1296	d0 05		bne $129d			bne 	_CDExit
.1298	20 f9 1a	jsr $1af9			jsr 	GetNext 					; consume comma
.129b	80 bf		bra $125c			bra 	CommandDIM 					; do another DIM
.129d					_CDExit:
.129d	60		rts				rts
.129e					_CDError:
.129e	4c 2f 13	jmp $132f		jmp	ErrorV_syntax
.12a1					_CDRedefine:
.12a1	4c f7 13	jmp $13f7		jmp	ErrorV_redefine
.12a4					OutputIndexGroup:
.12a4	9c 07 06	stz $0607			stz 	IndexCount 					; count of number of indices.
.12a7					_OIGNext:
.12a7	20 44 14	jsr $1444			jsr 	CompileExpressionAt0 		; get a dimension
.12aa	29 40		and #$40			and 	#NSSTypeMask 				; check it is numeric
.12ac	c9 00		cmp #$00			cmp 	#NSSIFloat
.12ae	d0 19		bne $12c9			bne 	_OIGType
.12b0	ee 07 06	inc $0607			inc 	IndexCount 					; bump the counter.
.12b3	20 eb 1a	jsr $1aeb			jsr 	LookNextNonSpace 			; does a , follow ?
.12b6	c9 2c		cmp #$2c			cmp 	#","
.12b8	d0 05		bne $12bf			bne 	_OIGCheckEnd
.12ba	20 f9 1a	jsr $1af9			jsr 	GetNext 					; consume comma
.12bd	80 e8		bra $12a7			bra 	_OIGNext 					; get next dimension
.12bf					_OIGCheckEnd:
.12bf	20 89 10	jsr $1089			jsr 	CheckNextRParen 			; check and consume )
.12c2	ad 07 06	lda $0607			lda 	IndexCount
.12c5	20 21 11	jsr $1121			jsr 	PushIntegerA 				; compile the dimension count.
.12c8	60		rts				rts
.12c9					_OIGType:
.12c9	4c 3f 13	jmp $133f		jmp	ErrorV_type
.0607					IndexCount:
>0607							.fill 	1
.12cc					ErrorHandler:
.12cc	68		pla				pla
.12cd	7a		ply				ply
.12ce	85 28		sta $28				sta 	zTemp0
.12d0	84 29		sty $29				sty 	zTemp0+1
.12d2	a2 00		ldx #$00			ldx 	#0 							; output msg to channel #0
.12d4	a0 01		ldy #$01			ldy 	#1
.12d6					_EHDisplayMsg:
.12d6	b1 28		lda ($28),y			lda 	(zTemp0),y
.12d8	20 2d 20	jsr $202d			jsr 	XPrintCharacter
.12db	c8		iny				iny
.12dc	b1 28		lda ($28),y			lda 	(zTemp0),y
.12de	d0 f6		bne $12d6			bne 	_EHDisplayMsg
.12e0	a9 20		lda #$20			lda 	#32
.12e2	20 2d 20	jsr $202d			jsr 	XPrintCharacter
.12e5	a9 40		lda #$40			lda 	#64
.12e7	20 2d 20	jsr $202d			jsr 	XPrintCharacter
.12ea	a2 00		ldx #$00			ldx 	#0 							; convert line# to string
.12ec	20 45 26	jsr $2645			jsr 	FloatSetByte
.12ef	20 af 1c	jsr $1caf			jsr 	GetLineNumber
.12f2	95 3e		sta $3e,x			sta 	NSMantissa0,x
.12f4	98		tya				tya
.12f5	95 4a		sta $4a,x			sta 	NSMantissa1,x
.12f7	20 2b 25	jsr $252b			jsr 	FloatToString
.12fa	a0 00		ldy #$00			ldy 	#0 							; display that string.
.12fc	a2 00		ldx #$00			ldx 	#0
.12fe					_EHDisplayLine:
.12fe	b9 37 06	lda $0637,y			lda 	decimalBuffer,y
.1301	20 2d 20	jsr $202d			jsr 	XPrintCharacter
.1304	c8		iny				iny
.1305	b9 37 06	lda $0637,y			lda 	decimalBuffer,y
.1308	d0 f4		bne $12fe			bne 	_EHDisplayLine
.130a	a9 0d		lda #$0d			lda 	#13
.130c	20 2d 20	jsr $202d			jsr 	XPrintCharacter
.130f	4c 0a 11	jmp $110a			jmp 	ExitCompiler
.1312					ErrorV_range:
.1312	20 cc 12	jsr $12cc		jsr	ErrorHandler
>1315	4f 55 54 20 4f 46 20 52			.text	"OUT OF RANGE",0
>131d	41 4e 47 45 00
.1322					ErrorV_value:
.1322	20 cc 12	jsr $12cc		jsr	ErrorHandler
>1325	42 41 44 20 56 41 4c 55			.text	"BAD VALUE",0
>132d	45 00
.132f					ErrorV_syntax:
.132f	20 cc 12	jsr $12cc		jsr	ErrorHandler
>1332	53 59 4e 54 41 58 20 45			.text	"SYNTAX ERROR",0
>133a	52 52 4f 52 00
.133f					ErrorV_type:
.133f	20 cc 12	jsr $12cc		jsr	ErrorHandler
>1342	54 59 50 45 20 4d 49 53			.text	"TYPE MISMATCH",0
>134a	4d 41 54 43 48 00
.1350					ErrorV_unimplemented:
.1350	20 cc 12	jsr $12cc		jsr	ErrorHandler
>1353	4e 4f 54 20 49 4d 50 4c			.text	"NOT IMPLEMENTED",0
>135b	45 4d 45 4e 54 45 44 00
.1363					ErrorV_assert:
.1363	20 cc 12	jsr $12cc		jsr	ErrorHandler
>1366	41 53 53 45 52 54 20 46			.text	"ASSERT FAIL",0
>136e	41 49 4c 00
.1372					ErrorV_line:
.1372	20 cc 12	jsr $12cc		jsr	ErrorHandler
>1375	55 4e 4b 4e 4f 57 4e 20			.text	"UNKNOWN LINE NUMBER",0
>137d	4c 49 4e 45 20 4e 55 4d 42 45 52 00
.1389					ErrorV_internal:
.1389	20 cc 12	jsr $12cc		jsr	ErrorHandler
>138c	49 4e 54 45 52 4e 41 4c			.text	"INTERNAL ERROR",0
>1394	20 45 52 52 4f 52 00
.139b					ErrorV_divzero:
.139b	20 cc 12	jsr $12cc		jsr	ErrorHandler
>139e	44 49 56 49 44 45 20 42			.text	"DIVIDE BY ZERO",0
>13a6	59 20 5a 45 52 4f 00
.13ad					ErrorV_structure:
.13ad	20 cc 12	jsr $12cc		jsr	ErrorHandler
>13b0	53 54 52 55 43 54 55 52			.text	"STRUCTURE IMBALANCE",0
>13b8	45 20 49 4d 42 41 4c 41 4e 43 45 00
.13c4					ErrorV_stop:
.13c4	20 cc 12	jsr $12cc		jsr	ErrorHandler
>13c7	50 52 4f 47 52 41 4d 20			.text	"PROGRAM STOPPED",0
>13cf	53 54 4f 50 50 45 44 00
.13d7					ErrorV_data:
.13d7	20 cc 12	jsr $12cc		jsr	ErrorHandler
>13da	4f 55 54 20 4f 46 20 44			.text	"OUT OF DATA",0
>13e2	41 54 41 00
.13e6					ErrorV_undeclared:
.13e6	20 cc 12	jsr $12cc		jsr	ErrorHandler
>13e9	55 4e 4b 4e 4f 57 4e 20			.text	"UNKNOWN ARRAY",0
>13f1	41 52 52 41 59 00
.13f7					ErrorV_redefine:
.13f7	20 cc 12	jsr $12cc		jsr	ErrorHandler
>13fa	41 52 52 41 59 20 52 45			.text	"ARRAY REDEFINED",0
>1402	44 45 46 49 4e 45 44 00
.140a					ErrorV_index:
.140a	20 cc 12	jsr $12cc		jsr	ErrorHandler
>140d	42 41 44 20 41 52 52 41			.text	"BAD ARRAY INDEX",0
>1415	59 20 49 4e 44 45 58 00
.141d					ErrorV_memory:
.141d	20 cc 12	jsr $12cc		jsr	ErrorHandler
>1420	4f 55 54 20 4f 46 20 4d			.text	"OUT OF MEMORY",0
>1428	45 4d 4f 52 59 00
.142e					ErrorV_channel:
.142e	20 cc 12	jsr $12cc		jsr	ErrorHandler
>1431	49 4e 50 55 54 2f 4f 55			.text	"INPUT/OUTPUT ERROR",0
>1439	54 50 55 54 20 45 52 52 4f 52 00
.1444					CompileExpressionAt0:
.1444	a9 00		lda #$00			lda 	#0
.1446					CompileExpressionAtA:
.1446	48		pha				pha  								; save level
.1447	20 0e 1f	jsr $1f0e			jsr 	CompileTerm 				; compile a term.
.144a	fa		plx				plx 								; get level back into X
.144b					_ECALoop:
.144b	48		pha				pha 								; save type on stack.
.144c	20 eb 1a	jsr $1aeb			jsr 	LookNextNonSpace 			; get the next character
.144f	c9 aa		cmp #$aa			cmp 	#C64_PLUS 					; go to be + ... < in the C64 code.
.1451	90 04		bcc $1457			bcc 	_ECAExit
.1453	c9 b4		cmp #$b4			cmp 	#C64_LESS+1
.1455	90 02		bcc $1459			bcc 	_ECAHaveToken
.1457					_ECAExit:
.1457	68		pla				pla 								; throw type off stack
.1458	60		rts				rts
.1459					_ECAHaveToken:
.1459	86 28		stx $28				stx 	zTemp0 						; save current precedence in zTemp0
.145b	aa		tax				tax 								; X contains the operator token
.145c	bd 47 14	lda $1447,x			lda 	PrecedenceTable-C64_PLUS,x  ; read precedence.
.145f	c5 28		cmp $28				cmp 	zTemp0 						; if < then exit
.1461	90 f4		bcc $1457			bcc 	_ECAExit
.1463	85 29		sta $29				sta 	zTemp0+1 					; save the precedence of the operator.
.1465	20 f9 1a	jsr $1af9			jsr 	GetNext 					; consume the token.
.1468	e0 b1		cpx #$b1			cpx 	#C64_GREATER				; checks for < or > which could be two character tokens
.146a	f0 11		beq $147d			beq 	_ECAGreaterCheck
.146c	e0 b3		cpx #$b3			cpx 	#C64_LESS
.146e	d0 1a		bne $148a			bne 	_ECAHaveFullToken
.1470	20 e8 1a	jsr $1ae8			jsr 	LookNext 					; checks for < (<= or <>)
.1473	c9 b1		cmp #$b1			cmp 	#C64_GREATER 				; <> is 2 on from <
.1475	f0 0e		beq $1485			beq	 	_ECAToNotEqual
.1477	c9 b2		cmp #$b2			cmp 	#C64_EQUAL 					; <= is 3 on from <
.1479	d0 0f		bne $148a			bne 	_ECAHaveFullToken
.147b	80 07		bra $1484			bra 	_ECAAddEqual
.147d					_ECAGreaterCheck:
.147d	20 e8 1a	jsr $1ae8			jsr 	LookNext
.1480	c9 b2		cmp #$b2			cmp 	#C64_EQUAL
.1482	d0 06		bne $148a			bne 	_ECAHaveFullToken
.1484					_ECAAddEqual:
.1484	e8		inx				inx 								; > => >= and < to <= is three tokens on.
.1485					_ECAToNotEqual:
.1485	e8		inx				inx
.1486	e8		inx				inx
.1487	20 f9 1a	jsr $1af9			jsr 	GetNext 					; consume the = or > in >= <= <>
.148a					_ECAHaveFullToken:
.148a	e0 aa		cpx #$aa			cpx 	#C64_PLUS
.148c	d0 0a		bne $1498			bne 	_ECANotConcat
.148e	68		pla				pla 								; get type back
.148f	48		pha				pha
.1490	29 40		and #$40			and 	#NSSTypeMask
.1492	c9 40		cmp #$40			cmp 	#NSSString
.1494	d0 02		bne $1498			bne 	_ECANotConcat
.1496	a2 df		ldx #$df			ldx 	#(PCD_CONCAT-(PCD_PLUS-C64_PLUS)) & $FF
.1498					_ECANotConcat:
.1498	da		phx				phx 								; save operator on the stack
.1499	a6 28		ldx $28				ldx 	zTemp0 						; push current precedence on the stack
.149b	da		phx				phx
.149c	a5 29		lda $29				lda 	zTemp0+1 					; get precedence of operator
.149e	1a		inc a				inc 	a
.149f	20 46 14	jsr $1446			jsr 	CompileExpressionAtA 		; and compile at the next level up.
.14a2	85 28		sta $28				sta 	zTemp0 						; save type in zTemp0
.14a4	fa		plx				plx 								; restore current precedence in X
.14a5	68		pla				pla 								; restore operator
.14a6	85 29		sta $29				sta 	zTemp0+1 					; save it in zTemp0+1.
.14a8	c9 b1		cmp #$b1			cmp 	#C64_GREATER 				; check for not compare
.14aa	90 17		bcc $14c3			bcc 	_ECANotCompare
.14ac	c9 b7		cmp #$b7			cmp 	#C64_GREATER+6
.14ae	b0 13		bcs $14c3			bcs 	_ECANotCompare
.14b0	7a		ply				ply 								; get type into Y
.14b1	5a		phy				phy
.14b2	48		pha				pha 								; save operator
.14b3	98		tya				tya 								; get type
.14b4	a0 94		ldy #$94			ldy 	#PCD_SCMD_CMP 				; Y is the token to use
.14b6	29 40		and #$40			and 	#NSSTypeMask
.14b8	c9 40		cmp #$40			cmp 	#NSSString
.14ba	f0 02		beq $14be			beq 	_ECANotString
.14bc	a0 a3		ldy #$a3			ldy 	#PCD_FCMD_CMP
.14be					_ECANotString:
.14be	98		tya				tya									; output token Y
.14bf	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.14c2	68		pla				pla 								; restore operator.
.14c3					_ECANotCompare:
.14c3	18		clc				clc 								; convert to P-Code and compile.
.14c4	69 d6		adc #$d6			adc 	#(PCD_PLUS-C64_PLUS) & $FF 	; it might be invalid at this point
.14c6	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.14c9	68		pla				pla 								; type of current result
.14ca	45 28		eor $28				eor 	zTemp0 						; check compatible with r-expr type
.14cc	29 40		and #$40			and 	#NSSTypeMask 				; the types should be compatible, only interested in number vs float
.14ce	d0 19		bne $14e9			bne		_ECAType
.14d0	a5 28		lda $28				lda 	zTemp0 						; get type back
.14d2	c9 40		cmp #$40			cmp 	#NSSString 					; if it is a number, then all operators work.
.14d4	d0 18		bne $14ee			bne 	_ECAGoLoop
.14d6	a5 29		lda $29				lda 	zTemp0+1 					; check operator is + or comparator
.14d8	c9 df		cmp #$df			cmp 	#(PCD_CONCAT-(PCD_PLUS-C64_PLUS)) & $FF
.14da	f0 10		beq $14ec			beq 	_ECAOkayString 				; (this is post conversion)
.14dc	c9 b1		cmp #$b1			cmp 	#C64_GREATER 				; must be a comparison then.
.14de	90 09		bcc $14e9			bcc 	_ECAType
.14e0	c9 b7		cmp #$b7			cmp 	#C64_LESS+1+3 				; the +3 is because of >= <= <>
.14e2	b0 05		bcs $14e9			bcs 	_ECAType
.14e4	a9 00		lda #$00			lda 	#NSSIFloat 					; compare returns number.
.14e6	4c 4b 14	jmp $144b			jmp 	_ECALoop
.14e9					_ECAType:
.14e9	4c 3f 13	jmp $133f		jmp	ErrorV_type
.14ec					_ECAOkayString:
.14ec	a9 40		lda #$40			lda 	#NSSString 					; current is string, go round again.
.14ee					_ECAGoLoop:
.14ee	4c 4b 14	jmp $144b			jmp 	_ECALoop
.14f1					PrecedenceTable:
>14f1	03						.byte 	3 					; '+'
>14f2	03						.byte 	3 					; '-'
>14f3	04						.byte 	4 					; '*'
>14f4	04						.byte 	4 					; '/'
>14f5	05						.byte 	5 					; '^'
>14f6	01						.byte 	1 					; 'and'
>14f7	00						.byte 	0 					; 'or'
>14f8	02						.byte 	2 					; '>'
>14f9	02						.byte 	2 					; '='
>14fa	02						.byte 	2 					; '<'
>14fb	02						.byte 	2 					; '>='
>14fc	02						.byte 	2 					; '<='
>14fd	02						.byte 	2 					; '<>'
.14fe					FindVariable:
.14fe	86 2a		stx $2a				stx 	zTemp1 						; save name.
.1500	84 2b		sty $2b				sty 	zTemp1+1
.1502					_IVCheckSpecial:
.1502	c0 09		cpy #$09			cpy 	#$09	 					; both end $09 e.g. I
.1504	d0 18		bne $151e			bne 	_IVStandard
.1506	e0 14		cpx #$14			cpx 	#$14 						; TI is $14
.1508	f0 0c		beq $1516			beq 	_IVTIFloat
.150a	e0 54		cpx #$54			cpx 	#$54 						; TI$ is $54
.150c	d0 10		bne $151e			bne 	_IVStandard
.150e	a0 c0		ldy #$c0			ldy 	#$C0 						; TI$ returns string $C001
.1510	a2 01		ldx #$01			ldx 	#$01
.1512	a9 40		lda #$40			lda 	#NSSString
.1514	38		sec				sec
.1515	60		rts				rts
.1516					_IVTIFloat:
.1516	a0 80		ldy #$80			ldy 	#$80
.1518	a2 00		ldx #$00			ldx 	#$00
.151a	a9 00		lda #$00			lda 	#0
.151c	38		sec				sec
.151d	60		rts				rts
.151e					_IVStandard:
.151e	a9 00		lda #$00			lda 	#((WorkArea) & $FF)
.1520	85 28		sta $28				sta 	0+zTemp0
.1522	a9 80		lda #$80			lda 	#((WorkArea) >> 8) & $FF
.1524	85 29		sta $29				sta 	1+zTemp0
.1526					_IVCheckLoop:
.1526	b2 28		lda ($28)			lda 	(zTemp0) 					; finished ?
.1528	f0 2b		beq $1555			beq  	_IVNotFound 				; if so, return with CC.
.152a	a0 01		ldy #$01			ldy 	#1 							; match ?
.152c	b1 28		lda ($28),y			lda 	(zTemp0),y
.152e	c5 2a		cmp $2a				cmp 	zTemp1
.1530	d0 07		bne $1539			bne	 	_IVNext
.1532	c8		iny				iny
.1533	b1 28		lda ($28),y			lda 	(zTemp0),y
.1535	c5 2b		cmp $2b				cmp 	zTemp1+1
.1537	f0 0d		beq $1546			beq 	_IVFound
.1539					_IVNext:
.1539	18		clc				clc
.153a	a5 28		lda $28				lda 	zTemp0
.153c	72 28		adc ($28)			adc 	(zTemp0)
.153e	85 28		sta $28				sta 	zTemp0
.1540	90 e4		bcc $1526			bcc 	_IVCheckLoop
.1542	e6 29		inc $29				inc 	zTemp0+1
.1544	80 e0		bra $1526			bra 	_IVCheckLoop
.1546					_IVFound:
.1546	a0 03		ldy #$03			ldy 	#3 							; get address into YX
.1548	b1 28		lda ($28),y			lda 	(zTemp0),y
.154a	aa		tax				tax
.154b	c8		iny				iny
.154c	b1 28		lda ($28),y			lda 	(zTemp0),y
.154e	48		pha				pha
.154f	c8		iny				iny
.1550	b1 28		lda ($28),y			lda 	(zTemp0),y
.1552	7a		ply				ply
.1553	38		sec				sec
.1554	60		rts				rts
.1555					_IVNotFound:
.1555	a6 2a		ldx $2a				ldx 	zTemp1 						; get variable name back
.1557	a4 2b		ldy $2b				ldy 	zTemp1+1
.1559	18		clc				clc
.155a	60		rts				rts
.155b					FixBranches:
.155b	20 9b 1d	jsr $1d9b			jsr 	OUTPUTRewind 				; back to the start of the *object* code.
.155e					_FBLoop:
.155e	b2 25		lda ($25)			lda 	(objPtr) 					; get the next one.
.1560	c9 d0		cmp #$d0			cmp 	#PCD_CMD_GOTO 				; found GOTO or GOSUB, patch up.
.1562	f0 16		beq $157a			beq 	_FBFixGotoGosub
.1564	c9 d1		cmp #$d1			cmp 	#PCD_CMD_GOSUB
.1566	f0 12		beq $157a			beq 	_FBFixGotoGosub
.1568	c9 d3		cmp #$d3			cmp 	#PCD_CMD_GOTOCMD_NZ 		; patch the conditional GOTOs for Z/NZ TOS.
.156a	f0 0e		beq $157a			beq 	_FBFixGotoGosub
.156c	c9 d2		cmp #$d2			cmp 	#PCD_CMD_GOTOCMD_Z
.156e	f0 0a		beq $157a			beq 	_FBFixGotoGosub
.1570	c9 d4		cmp #$d4			cmp 	#PCD_CMD_VARSPACE
.1572	f0 49		beq $15bd			beq 	_FBFixVarSpace
.1574					_FBNext:
.1574	20 30 16	jsr $1630			jsr 	MoveObjectForward 			; move forward in object code.
.1577	90 e5		bcc $155e			bcc 	_FBLoop 					; not finished
.1579					_FBExit:
.1579	60		rts				rts
.157a					_FBFixGotoGosub:
.157a	a0 01		ldy #$01			ldy 	#1 							; if page is currently $FF
.157c	b1 25		lda ($25),y			lda 	(objPtr),y 					; then patch else leave.
.157e	c9 ff		cmp #$ff			cmp 	#$FF
.1580	d0 f2		bne $1574			bne 	_FBNext
.1582	a0 02		ldy #$02			ldy 	#2							; line number in YA
.1584	b1 25		lda ($25),y			lda 	(objPtr),y
.1586	48		pha				pha
.1587	c8		iny				iny
.1588	b1 25		lda ($25),y			lda 	(objPtr),y
.158a	a8		tay				tay
.158b	68		pla				pla
.158c	20 e4 1c	jsr $1ce4			jsr 	STRFindLine			 		; find where it is X:YA
.158f	90 08		bcc $1599			bcc 	_FBFFound 					; not found, so must be >
.1591	48		pha				pha
.1592	b2 25		lda ($25)			lda 	(objPtr) 					; which is a fail if not CMD_GOTOCMD_Z
.1594	c9 d2		cmp #$d2			cmp 	#PCD_CMD_GOTOCMD_Z
.1596	d0 15		bne $15ad			bne 	_FBFFail
.1598	68		pla				pla
.1599					_FBFFound:
.1599	20 39 1d	jsr $1d39			jsr 	STRMakeOffset 				; make it an offset from X:YA
.159c	5a		phy				phy	 								; patch the GOTO/GOSUB
.159d	48		pha				pha
.159e	a0 01		ldy #$01			ldy 	#1
.15a0	8a		txa				txa
.15a1	91 25		sta ($25),y			sta 	(objPtr),y
.15a3	c8		iny				iny
.15a4	68		pla				pla
.15a5	91 25		sta ($25),y			sta 	(objPtr),y
.15a7	c8		iny				iny
.15a8	68		pla				pla
.15a9	91 25		sta ($25),y			sta 	(objPtr),y
.15ab	80 c7		bra $1574			bra 	_FBNext
.15ad					_FBFFail:
.15ad	a0 02		ldy #$02			ldy 	#2
.15af	b1 25		lda ($25),y			lda 	(objPtr),y
.15b1	8d 00 05	sta $0500			sta 	currentLineNumber
.15b4	c8		iny				iny
.15b5	b1 25		lda ($25),y			lda 	(objPtr),y
.15b7	8d 01 05	sta $0501			sta 	currentLineNumber+1
.15ba	4c 72 13	jmp $1372		jmp	ErrorV_line
.15bd					_FBFixVarSpace:
.15bd	a0 01		ldy #$01			ldy 	#1
.15bf	ad 0e 06	lda $060e			lda 	freeVariableMemory
.15c2	91 25		sta ($25),y			sta 	(objPtr),y
.15c4	c8		iny				iny
.15c5	ad 0f 06	lda $060f			lda 	freeVariableMemory+1
.15c8	91 25		sta ($25),y			sta 	(objPtr),y
.15ca	80 a8		bra $1574			bra 	_FBNext
.15cc					CommandFOR:
.15cc	20 04 1b	jsr $1b04			jsr 	GetNextNonSpace 			; first letter of index variable, should be.
.15cf	20 1a 1b	jsr $1b1a			jsr 	CharIsAlpha 				; if not alpha , error
.15d2	90 59		bcc $162d			bcc 	_CFFail
.15d4	20 a9 1e	jsr $1ea9			jsr 	GetReferenceTerm 			; figure out the reference.
.15d7	48		pha				pha 								; save type
.15d8	29 40		and #$40			and 	#NSSTypeMask 				; check it is numeric
.15da	c9 00		cmp #$00			cmp 	#NSSIFloat
.15dc	d0 4f		bne $162d			bne 	_CFFail
.15de	5a		phy				phy 								; save reference on the stack
.15df	da		phx				phx
.15e0	a9 b2		lda #$b2			lda 	#C64_EQUAL 					; check for equal.
.15e2	20 8f 10	jsr $108f			jsr 	CheckNextA
.15e5	20 44 14	jsr $1444			jsr 	CompileExpressionAt0 		; initial value
.15e8	fa		plx				plx 								; get reference back.
.15e9	7a		ply				ply
.15ea	5a		phy				phy
.15eb	da		phx				phx
.15ec	38		sec				sec 								; set initial value.
.15ed	20 5b 1e	jsr $1e5b			jsr 	GetSetVariable
.15f0	fa		plx				plx
.15f1	7a		ply				ply
.15f2	68		pla				pla
.15f3	29 20		and #$20			and 	#NSSIInt16
.15f5	f0 04		beq $15fb			beq 	_CFNotInt16
.15f7	98		tya				tya
.15f8	09 80		ora #$80			ora 	#$80
.15fa	a8		tay				tay
.15fb					_CFNotInt16:
.15fb	8a		txa				txa 								; reference in YA
.15fc	20 0e 11	jsr $110e			jsr 	PushIntegerYA
.15ff	a9 a4		lda #$a4			lda 	#C64_TO
.1601	20 8f 10	jsr $108f			jsr 	CheckNextA
.1604	20 44 14	jsr $1444			jsr 	CompileExpressionAt0 		; terminal value
.1607	29 40		and #$40			and 	#NSSTypeMask 				; check it is numeric
.1609	c9 00		cmp #$00			cmp 	#NSSIFloat
.160b	d0 20		bne $162d			bne 	_CFFail
.160d	20 eb 1a	jsr $1aeb			jsr 	LookNextNonSpace 			; followed by STEP
.1610	c9 a9		cmp #$a9			cmp 	#C64_STEP
.1612	d0 0e		bne $1622			bne 	_CFNoStep
.1614	20 f9 1a	jsr $1af9			jsr 	GetNext 					; consume it.
.1617	20 44 14	jsr $1444			jsr 	CompileExpressionAt0 		; terminal value
.161a	29 40		and #$40			and 	#NSSTypeMask 				; check it is numeric
.161c	c9 00		cmp #$00			cmp 	#NSSIFloat
.161e	d0 0d		bne $162d			bne 	_CFFail
.1620	80 05		bra $1627			bra 	_CFParametersDone
.1622					_CFNoStep:
.1622	a9 01		lda #$01			lda 	#1 							; default STEP e.g. 1
.1624	20 21 11	jsr $1121			jsr 	PushIntegerA
.1627					_CFParametersDone:
.1627	a9 95		lda #$95			lda 	#PCD_FOR  					; compile FOR word.
.1629	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.162c	60		rts				rts
.162d					_CFFail:
.162d	4c 2f 13	jmp $132f		jmp	ErrorV_syntax
.1630					MoveObjectForward:
.1630	b2 25		lda ($25)			lda 	(objPtr) 					; get next
.1632	c9 ff		cmp #$ff			cmp 	#$FF
.1634	f0 36		beq $166c			beq 	_MOFEnd
.1636	c9 40		cmp #$40			cmp 	#$40 						; 00-3F
.1638	90 24		bcc $165e			bcc 	_MOFAdvance1 				; forward 1
.163a	a0 02		ldy #$02			ldy 	#2 							; 40-6F
.163c	c9 70		cmp #$70			cmp 	#$70 						; forward 2
.163e	90 20		bcc $1660			bcc 	_MOFAdvanceY
.1640	c9 ca		cmp #$ca			cmp 	#PCD_STARTSYSTEM 			; 70 - System tokens.
.1642	90 1a		bcc $165e			bcc 	_MOFAdvance1 				; forward 1
.1644	a8		tay				tay 								; read the size.
.1645	b9 01 1d	lda $1d01,y			lda 	MOFSizeTable-PCD_STARTSYSTEM,y
.1648	a8		tay				tay
.1649	c8		iny				iny 								; add 1 for the system token.
.164a	d0 14		bne $1660			bne 	_MOFAdvanceY 				; if 0, was $FF thus a string/data skip.
.164c	a0 01		ldy #$01			ldy 	#1 							; get length byte
.164e	b1 25		lda ($25),y			lda 	(objPtr),y
.1650	a8		tay				tay 								; into Y.
.1651	18		clc				clc
.1652	a5 25		lda $25				lda 	objPtr						; add 2 to the object pointer
.1654	69 02		adc #$02			adc 	#2
.1656	85 25		sta $25				sta 	objPtr
.1658	90 02		bcc $165c			bcc 	_MOFNoCarry1
.165a	e6 26		inc $26				inc 	objPtr+1
.165c					_MOFNoCarry1:
.165c	80 02		bra $1660			bra 	_MOFAdvanceY
.165e					_MOFAdvance1:
.165e	a0 01		ldy #$01			ldy 	#1
.1660					_MOFAdvanceY:
.1660	98		tya				tya 								; add X to objPtr
.1661	18		clc				clc
.1662	65 25		adc $25				adc 	objPtr
.1664	85 25		sta $25				sta 	objPtr
.1666	90 02		bcc $166a			bcc 	_MOFNoCarry2
.1668	e6 26		inc $26				inc 	objPtr+1
.166a					_MOFNoCarry2:
.166a	18		clc				clc 								; not completed.
.166b	60		rts				rts
.166c					_MOFEnd:
.166c	e6 25		inc $25				inc 	objPtr
.166e	d0 02		bne $1672			bne 	_MOFENoCarry
.1670	e6 26		inc $26				inc 	objPtr+1
.1672					_MOFENoCarry:
.1672	38		sec				sec
.1673	60		rts				rts
.1674					INPUTOpen:
.1674	a9 70		lda #$70			lda 	#((EndProgram+2) & $FF)
.1676	85 30		sta $30				sta 	0+srcInputPtr
.1678	a9 26		lda #$26			lda 	#((EndProgram+2) >> 8) & $FF
.167a	85 31		sta $31				sta 	1+srcInputPtr
.167c					INPUTClose:
.167c	60		rts				rts
.167d					INPUTGet:
.167d	b2 30		lda ($30)			lda 	(srcInputPtr)
.167f	e6 30		inc $30				inc 	srcInputPtr
.1681	d0 02		bne $1685			bne 	_IGSkip
.1683	e6 31		inc $31				inc 	srcInputPtr+1
.1685					_IGSkip:
.1685	60		rts				rts
.0030					srcInputPtr:
>0030							.fill 	2
.1686					FNCompile:
.1686	20 04 1b	jsr $1b04			jsr 	GetNextNonSpace				; get variable name w/type must be array e.g. DEF FNx(a)
.1689	20 69 1b	jsr $1b69			jsr 	ExtractVariableName
.168c	e0 00		cpx #$00			cpx 	#0
.168e	10 32		bpl $16c2			bpl 	_FNError
.1690	8a		txa				txa 								; convert to a function reference - bit 7:0 clear bit 7:1 set
.1691	29 7f		and #$7f			and 	#$7F
.1693	aa		tax				tax
.1694	98		tya				tya
.1695	09 80		ora #$80			ora 	#$80
.1697	a8		tay				tay
.1698	20 fe 14	jsr $14fe			jsr 	FindVariable				; does it already exist ?
.169b	90 25		bcc $16c2			bcc 	_FNError 					; no.
.169d	20 39 1d	jsr $1d39			jsr 	STRMakeOffset 				; convert to a relative address.
.16a0	c9 00		cmp #$00			cmp 	#0 							; fix up.
.16a2	d0 01		bne $16a5			bne 	_FNNoBorrow
.16a4	88		dey				dey
.16a5					_FNNoBorrow:
.16a5	3a		dec a				dec 	a
.16a6	5a		phy				phy 								; save location of routine on stack.
.16a7	48		pha				pha
.16a8	da		phx				phx
.16a9	20 44 14	jsr $1444			jsr 	CompileExpressionAt0
.16ac	20 89 10	jsr $1089			jsr 	CheckNextRParen
.16af	a9 d1		lda #$d1			lda 	#PCD_CMD_GOSUB
.16b1	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.16b4	68		pla				pla
.16b5	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.16b8	68		pla				pla
.16b9	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.16bc	68		pla				pla
.16bd	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.16c0	18		clc				clc
.16c1	60		rts				rts
.16c2					_FNError:
.16c2	4c 22 13	jmp $1322		jmp	ErrorV_value
.16c5					CommandTables:
>16c5	07 cb 00 03 c7 1b 06			.byte	$07,$cb,$00,$03,CommandGOAlt & $FF,CommandGOAlt >> 8,$06
>16cc	07 89 00 03 ce 1b 06			.byte	$07,$89,$00,$03,CommandGOTO & $FF,CommandGOTO >> 8,$06
>16d3	07 8d 00 03 c1 1b 06			.byte	$07,$8d,$00,$03,CommandGOSUB & $FF,CommandGOSUB >> 8,$06
>16da	07 88 00 03 49 1c 06			.byte	$07,$88,$00,$03,CommandLET & $FF,CommandLET >> 8,$06
>16e1	07 85 00 03 29 1c 06			.byte	$07,$85,$00,$03,CommandINPUT & $FF,CommandINPUT >> 8,$06
>16e8	07 84 00 04 3d 1c 06			.byte	$07,$84,$00,$04,CommandINPUTStream & $FF,CommandINPUTStream >> 8,$06
>16ef	07 99 00 03 d6 1d 06			.byte	$07,$99,$00,$03,CommandPRINT & $FF,CommandPRINT >> 8,$06
>16f6	07 98 00 04 d6 1d 06			.byte	$07,$98,$00,$04,CommandPRINT & $FF,CommandPRINT >> 8,$06
>16fd	07 8f 00 03 e1 1e 06			.byte	$07,$8f,$00,$03,CommandREM & $FF,CommandREM >> 8,$06
>1704	07 81 00 03 cc 15 06			.byte	$07,$81,$00,$03,CommandFOR & $FF,CommandFOR >> 8,$06
>170b	07 82 00 03 43 1d 06			.byte	$07,$82,$00,$03,CommandNEXT & $FF,CommandNEXT >> 8,$06
>1712	07 a1 00 03 3a 1b 06			.byte	$07,$a1,$00,$03,CommandGET & $FF,CommandGET >> 8,$06
>1719	07 83 00 03 c9 11 06			.byte	$07,$83,$00,$03,CommandDATA & $FF,CommandDATA >> 8,$06
>1720	07 87 00 03 1f 1e 06			.byte	$07,$87,$00,$03,CommandREAD & $FF,CommandREAD >> 8,$06
>1727	07 86 00 03 5c 12 06			.byte	$07,$86,$00,$03,CommandDIM & $FF,CommandDIM >> 8,$06
>172e	07 96 00 03 e5 11 06			.byte	$07,$96,$00,$03,CommandDEF & $FF,CommandDEF >> 8,$06
>1735	07 8b 00 e3 f1 1b 06			.byte	$07,$8b,$00,$e3,CommandIF & $FF,CommandIF >> 8,$06
>173c	08 92 00 ea e3 a7 1f 06			.byte	$08,$92,$00,$ea,$e3,CommandWAIT & $FF,CommandWAIT >> 8,$06
>1744	09 91 00 e1 a9 03 6f 1d			.byte	$09,$91,$00,$e1,169,$03,CommandON & $FF,CommandON >> 8,$06
>174c	06
>174d	07 9e 00 e2 ca 92 06			.byte	$07,$9e,$00,$e2,37578 & $FF,37578 >> 8,$06
>1754	07 97 00 ea e1 ac 06			.byte	$07,$97,$00,$ea,$e1,172,$06
>175b	06 8e 00 10 98 06			.byte	$06,$8e,$00,$10,152,$06
>1761	07 90 00 20 ca 91 06			.byte	$07,$90,$00,$20,37322 & $FF,37322 >> 8,$06
>1768	07 80 00 20 ca 82 06			.byte	$07,$80,$00,$20,33482 & $FF,33482 >> 8,$06
>176f	07 8c 00 20 ca 90 06			.byte	$07,$8c,$00,$20,37066 & $FF,37066 >> 8,$06
>1776	07 9d 00 e3 d6 1f 06			.byte	$07,$9d,$00,$e3,CommandCMD & $FF,CommandCMD >> 8,$06
>177d	0a 9f 00 ea e3 e9 1f 10			.byte	$0a,$9f,$00,$ea,$e3,CommandOPEN & $FF,CommandOPEN >> 8,$10,198,$06
>1785	c6 06
>1787	06 a0 00 e1 c3 06			.byte	$06,$a0,$00,$e1,195,$06
>178d	07 ce 90 20 ca ac 06			.byte	$07,$ce,$90,$20,44234 & $FF,44234 >> 8,$06
>1794	0a ce 92 e3 b7 1a 20 ca			.byte	$0a,$ce,$92,$e3,OptionalParameterCompile & $FF,OptionalParameterCompile >> 8,$20,44490 & $FF,44490 >> 8,$06
>179c	ad 06
>179e	0a ce 8d e3 b7 1a 20 ca			.byte	$0a,$ce,$8d,$e3,OptionalParameterCompile & $FF,OptionalParameterCompile >> 8,$20,44746 & $FF,44746 >> 8,$06
>17a6	ae 06
>17a8	06 ce 86 e1 c7 06			.byte	$06,$ce,$86,$e1,199,$06
>17ae	08 ce 84 ea ea e1 c8 06			.byte	$08,$ce,$84,$ea,$ea,$e1,200,$06
>17b6	07 ce af e2 ca 98 06			.byte	$07,$ce,$af,$e2,39114 & $FF,39114 >> 8,$06
>17bd	07 ce 8c e2 ca 8c 06			.byte	$07,$ce,$8c,$e2,36042 & $FF,36042 >> 8,$06
>17c4	09 ce ae ea ea e2 ca 95			.byte	$09,$ce,$ae,$ea,$ea,$e2,38346 & $FF,38346 >> 8,$06
>17cc	06
>17cd	08 ce 87 ea ea e1 99 06			.byte	$08,$ce,$87,$ea,$ea,$e1,153,$06
>17d5	0a ce 88 ea ea ea ea e1			.byte	$0a,$ce,$88,$ea,$ea,$ea,$ea,$e1,154,$06
>17dd	9a 06
>17df	0a ce 8a ea ea ea ea e1			.byte	$0a,$ce,$8a,$ea,$ea,$ea,$ea,$e1,155,$06
>17e7	9b 06
>17e9	0a ce 89 ea ea ea ea e1			.byte	$0a,$ce,$89,$ea,$ea,$ea,$ea,$e1,156,$06
>17f1	9c 06
>17f3	09 ce 8b ea ea ea f1 9d			.byte	$09,$ce,$8b,$ea,$ea,$ea,$f1,157,$06
>17fb	06
>17fc	07 ce 99 20 ca 99 06			.byte	$07,$ce,$99,$20,39370 & $FF,39370 >> 8,$06
>1803	08 ce 9a ea e2 ca 9a 06			.byte	$08,$ce,$9a,$ea,$e2,39626 & $FF,39626 >> 8,$06
>180b	08 ce 9b ea e2 ca 9b 06			.byte	$08,$ce,$9b,$ea,$e2,39882 & $FF,39882 >> 8,$06
>1813	08 ce 9c ea e2 ca 9c 06			.byte	$08,$ce,$9c,$ea,$e2,40138 & $FF,40138 >> 8,$06
>181b	08 ce 9d ea e2 ca 9d 06			.byte	$08,$ce,$9d,$ea,$e2,40394 & $FF,40394 >> 8,$06
>1823	08 ce 9e ea e2 ca 9e 06			.byte	$08,$ce,$9e,$ea,$e2,40650 & $FF,40650 >> 8,$06
>182b	08 ce 9f ea e2 ca 9f 06			.byte	$08,$ce,$9f,$ea,$e2,40906 & $FF,40906 >> 8,$06
>1833	08 ce a0 ea e2 ca a0 06			.byte	$08,$ce,$a0,$ea,$e2,41162 & $FF,41162 >> 8,$06
>183b	08 ce a1 ea f2 ca a1 06			.byte	$08,$ce,$a1,$ea,$f2,41418 & $FF,41418 >> 8,$06
>1843	08 ce a2 ea f2 ca a2 06			.byte	$08,$ce,$a2,$ea,$f2,41674 & $FF,41674 >> 8,$06
>184b	08 ce a3 ea e2 ca a3 06			.byte	$08,$ce,$a3,$ea,$e2,41930 & $FF,41930 >> 8,$06
>1853	07 ce a4 20 ca a4 06			.byte	$07,$ce,$a4,$20,42186 & $FF,42186 >> 8,$06
>185a	08 ce a5 ea e2 ca a5 06			.byte	$08,$ce,$a5,$ea,$e2,42442 & $FF,42442 >> 8,$06
>1862	08 ce a6 ea e2 ca a6 06			.byte	$08,$ce,$a6,$ea,$e2,42698 & $FF,42698 >> 8,$06
>186a	08 ce a7 ea e2 ca a7 06			.byte	$08,$ce,$a7,$ea,$e2,42954 & $FF,42954 >> 8,$06
>1872	08 ce a8 ea e2 ca a8 06			.byte	$08,$ce,$a8,$ea,$e2,43210 & $FF,43210 >> 8,$06
>187a	08 ce a9 ea e2 ca a9 06			.byte	$08,$ce,$a9,$ea,$e2,43466 & $FF,43466 >> 8,$06
>1882	08 ce aa ea f2 ca aa 06			.byte	$08,$ce,$aa,$ea,$f2,43722 & $FF,43722 >> 8,$06
>188a	08 ce ab ea f2 ca ab 06			.byte	$08,$ce,$ab,$ea,$f2,43978 & $FF,43978 >> 8,$06
>1892	00						.byte 	0
.1893					UnaryTables:
>1893	07 b4 00 8e 91 b6 06			.byte	$07,$b4,$00,$8e,$91,182,$06
>189a	08 b5 00 8e 92 ca 84 06			.byte	$08,$b5,$00,$8e,$92,33994 & $FF,33994 >> 8,$06
>18a2	07 b6 00 8e 91 8d 06			.byte	$07,$b6,$00,$8e,$91,141,$06
>18a9	07 b7 00 8e 91 c1 06			.byte	$07,$b7,$00,$8e,$91,193,$06
>18b0	07 b8 00 8e 91 96 06			.byte	$07,$b8,$00,$8e,$91,150,$06
>18b7	07 b9 00 8e 91 ad 06			.byte	$07,$b9,$00,$8e,$91,173,$06
>18be	08 ba 00 8e 92 ca 85 06			.byte	$08,$ba,$00,$8e,$92,34250 & $FF,34250 >> 8,$06
>18c6	07 bb 00 8e 91 b4 06			.byte	$07,$bb,$00,$8e,$91,180,$06
>18cd	08 bc 00 8e 92 ca 86 06			.byte	$08,$bc,$00,$8e,$92,34506 & $FF,34506 >> 8,$06
>18d5	08 bd 00 8e 92 ca 87 06			.byte	$08,$bd,$00,$8e,$92,34762 & $FF,34762 >> 8,$06
>18dd	08 be 00 8e 92 ca 88 06			.byte	$08,$be,$00,$8e,$92,35018 & $FF,35018 >> 8,$06
>18e5	08 bf 00 8e 92 ca 89 06			.byte	$08,$bf,$00,$8e,$92,35274 & $FF,35274 >> 8,$06
>18ed	08 c0 00 8e 92 ca 8a 06			.byte	$08,$c0,$00,$8e,$92,35530 & $FF,35530 >> 8,$06
>18f5	08 c1 00 8e 92 ca 8b 06			.byte	$08,$c1,$00,$8e,$92,35786 & $FF,35786 >> 8,$06
>18fd	07 c2 00 8e 91 ab 06			.byte	$07,$c2,$00,$8e,$91,171,$06
>1904	07 c3 00 8f 91 a2 06			.byte	$07,$c3,$00,$8f,$91,162,$06
>190b	07 c4 00 8e 91 ba 07			.byte	$07,$c4,$00,$8e,$91,186,$07
>1912	07 c5 00 8f 91 c2 06			.byte	$07,$c5,$00,$8f,$91,194,$06
>1919	07 c6 00 8f 91 8f 06			.byte	$07,$c6,$00,$8f,$91,143,$06
>1920	07 c7 00 8e 91 93 07			.byte	$07,$c7,$00,$8e,$91,147,$07
>1927	08 c8 00 8f ae 91 bb 07			.byte	$08,$c8,$00,$8f,$ae,$91,187,$07
>192f	08 c9 00 8f ae 91 bc 07			.byte	$08,$c9,$00,$8f,$ae,$91,188,$07
>1937	0b ca 00 8f ae 03 b7 1a			.byte	$0b,$ca,$00,$8f,$ae,$03,OptionalParameterCompile & $FF,OptionalParameterCompile >> 8,$91,189,$07
>193f	91 bd 07
>1942	07 a8 00 03 d6 1a 06			.byte	$07,$a8,$00,$03,NotUnaryCompile & $FF,NotUnaryCompile >> 8,$06
>1949	07 a5 00 03 86 16 06			.byte	$07,$a5,$00,$03,FNCompile & $FF,FNCompile >> 8,$06
>1950	07 ce d6 8e 91 91 07			.byte	$07,$ce,$d6,$8e,$91,145,$07
>1957	07 ce d5 8e 91 9e 07			.byte	$07,$ce,$d5,$8e,$91,158,$07
>195e	08 ce d0 8e ae 91 c9 06			.byte	$08,$ce,$d0,$8e,$ae,$91,201,$06
>1966	08 ce d4 8e 92 ca 83 06			.byte	$08,$ce,$d4,$8e,$92,33738 & $FF,33738 >> 8,$06
>196e	07 ce d3 20 ca 8d 06			.byte	$07,$ce,$d3,$20,36298 & $FF,36298 >> 8,$06
>1975	07 ce d1 20 ca 8e 06			.byte	$07,$ce,$d1,$20,36554 & $FF,36554 >> 8,$06
>197c	07 ce d2 20 ca 8f 06			.byte	$07,$ce,$d2,$20,36810 & $FF,36810 >> 8,$06
>1983	09 ce d7 8e ae 92 ca 96			.byte	$09,$ce,$d7,$8e,$ae,$92,38602 & $FF,38602 >> 8,$06
>198b	06
>198c	00						.byte 	0
.198d					GeneratorProcess:
.198d	86 28		stx $28				stx 	zTemp0 						; save generation pointer in zTemp0
.198f	84 29		sty $29				sty 	zTemp0+1
.1991	85 2a		sta $2a				sta 	zTemp1 						; first match token
.1993	64 2b		stz $2b				stz 	zTemp1+1
.1995	c9 ce		cmp #$ce			cmp 	#$CE 						; check if shift
.1997	d0 05		bne $199e			bne 	_GPNotShifted
.1999	20 f9 1a	jsr $1af9			jsr 	GetNext 					; get the shifted token
.199c	85 2b		sta $2b				sta 	zTemp1+1 					; match CE xx
.199e					_GPNotShifted:
.199e					_GPSearch:
.199e	b2 28		lda ($28)			lda 	(zTemp0) 					; reached end ?
.19a0	18		clc				clc
.19a1	f0 2f		beq $19d2			beq 	_GPExit
.19a3	a0 01		ldy #$01			ldy 	#1 							; tokens match
.19a5	b1 28		lda ($28),y			lda 	(zTemp0),y
.19a7	c5 2a		cmp $2a				cmp 	zTemp1
.19a9	d0 09		bne $19b4			bne 	_GPNext
.19ab	a5 2b		lda $2b				lda 	zTemp1+1 					; 2nd token ?
.19ad	f0 12		beq $19c1			beq 	_GPFound
.19af	c8		iny				iny 								; check match.
.19b0	d1 28		cmp ($28),y			cmp 	(zTemp0),y
.19b2	f0 0d		beq $19c1			beq 	_GPFound
.19b4					_GPNext:
.19b4	18		clc				clc 								; follow to next
.19b5	a5 28		lda $28				lda 	zTemp0
.19b7	72 28		adc ($28)			adc 	(zTemp0)
.19b9	85 28		sta $28				sta 	zTemp0
.19bb	90 e1		bcc $199e			bcc 	_GPSearch
.19bd	e6 29		inc $29				inc 	zTemp0+1
.19bf	80 dd		bra $199e			bra 	_GPSearch
.19c1					_GPFound:
.19c1	18		clc				clc 								; skip to action bytes
.19c2	a5 28		lda $28				lda 	zTemp0 						; <offset> <token lo> <token hi> first
.19c4	69 03		adc #$03			adc 	#3
.19c6	85 28		sta $28				sta 	zTemp0
.19c8	90 02		bcc $19cc			bcc 	_GPNoCarry
.19ca	e6 29		inc $29				inc 	zTemp0+1
.19cc					_GPNoCarry:
.19cc					_GPLoop:
.19cc	20 d3 19	jsr $19d3			jsr 	GeneratorExecute 			; execute one command
.19cf	90 fb		bcc $19cc			bcc 	_GPLoop 					; go back if not completed.
.19d1	38		sec				sec 								; return with CS.
.19d2					_GPExit:
.19d2	60		rts				rts
.19d3					GeneratorExecute:
.19d3	20 7e 1a	jsr $1a7e			jsr 	_GEFetchZTemp0 				; get next.
.19d6	48		pha				pha 								; split into 2 nibbles
.19d7	4a		lsr a				lsr 	a
.19d8	4a		lsr a				lsr 	a
.19d9	4a		lsr a				lsr		a
.19da	4a		lsr a				lsr 	a
.19db	20 e5 19	jsr $19e5			jsr 	_GEExecuteNibble 			; MSB first
.19de	68		pla				pla
.19df	b0 03		bcs $19e4			bcs 	_GEHaveCompleted
.19e1	20 e5 19	jsr $19e5			jsr 	_GEExecuteNibble 			; LSB second
.19e4					_GEHaveCompleted:
.19e4	60		rts				rts
.19e5					_GEExecuteNibble:
.19e5	29 0f		and #$0f			and 	#$0F
.19e7	0a		asl a				asl 	a
.19e8	aa		tax				tax
.19e9	7c ec 19	jmp ($19ec,x)			jmp 	(_GEExecuteVectors,x)
.19ec					_GEExecuteVectors:
>19ec	0c 1a						.word 	_GEXNop 					; 0  (no operation)
>19ee	14 1a						.word 	_GEXToken1 					; 1  (compile 1 byte token)
>19f0	0e 1a						.word 	_GEXToken2 					; 2  (compile 2 byte token)
>19f2	61 1a						.word 	_GEXExecute 				; 3  (run arbitrary code)
>19f4	54 1a						.word 	_GEXChannelExec 			; 4  (run arbitrary code with possible channel redirection)
>19f6	0c 1a						.word 	_GEXNop 					; 5
>19f8	1b 1a						.word 	_GEXExitNumber 				; 6  exit return ifloat32 type
>19fa	1f 1a						.word 	_GEXExitString 				; 7  exit return string type
>19fc	23 1a						.word 	_GEXLParam 					; 8  check ( follows
>19fe	27 1a						.word 	_GEXRParam 					; 9  check ) follows
>1a00	2b 1a						.word 	_GEXComma					; A  check , follows
>1a02	0c 1a						.word 	_GEXNop 					; B
>1a04	0c 1a						.word 	_GEXNop 					; C
>1a06	0c 1a						.word 	_GEXNop 					; D
>1a08	3b 1a						.word 	_GEXNumber 					; E  compile get any number
>1a0a	46 1a						.word 	_GEXString 					; F  compile get any string
.1a0c					_GEXNop:
.1a0c	18		clc				clc
.1a0d	60		rts				rts
.1a0e					_GEXToken2:
.1a0e	20 7e 1a	jsr $1a7e			jsr 	_GEFetchZTemp0
.1a11	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1a14					_GEXToken1:
.1a14	20 7e 1a	jsr $1a7e			jsr 	_GEFetchZTemp0
.1a17	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1a1a	60		rts				rts
.1a1b					_GEXExitNumber:
.1a1b	a9 00		lda #$00			lda 	#NSSIFloat
.1a1d	38		sec				sec
.1a1e	60		rts				rts
.1a1f					_GEXExitString:
.1a1f	a9 40		lda #$40			lda 	#NSSString
.1a21	38		sec				sec
.1a22	60		rts				rts
.1a23					_GEXLParam:
.1a23	a9 28		lda #$28			lda 	#"("
.1a25	80 06		bra $1a2d			bra 	_GEXCheck
.1a27					_GEXRParam:
.1a27	a9 29		lda #$29			lda 	#")"
.1a29	80 02		bra $1a2d			bra 	_GEXCheck
.1a2b					_GEXComma:
.1a2b	a9 2c		lda #$2c			lda 	#","
.1a2d					_GEXCheck:
.1a2d	85 2c		sta $2c				sta 	zTemp2 						; save match
.1a2f	20 04 1b	jsr $1b04			jsr 	GetNextNonSpace 			; get next skipping spaces
.1a32	c5 2c		cmp $2c				cmp 	zTemp2 						; check matches.
.1a34	d0 02		bne $1a38			bne 	_GEXSyntax
.1a36	18		clc				clc
.1a37	60		rts				rts
.1a38					_GEXSyntax:
.1a38	4c 2f 13	jmp $132f		jmp	ErrorV_syntax
.1a3b					_GEXNumber:
.1a3b	20 87 1a	jsr $1a87			jsr 	GEXCompileExpression 		; compile expression
.1a3e	29 40		and #$40			and 	#NSSTypeMask
.1a40	c9 00		cmp #$00			cmp  	#NSSIFloat
.1a42	d0 0d		bne $1a51			bne 	_GEXType
.1a44	18		clc				clc
.1a45	60		rts				rts
.1a46					_GEXString:
.1a46	20 87 1a	jsr $1a87			jsr 	GEXCompileExpression 		; compile expression
.1a49	29 40		and #$40			and 	#NSSTypeMask
.1a4b	c9 40		cmp #$40			cmp  	#NSSString
.1a4d	d0 02		bne $1a51			bne 	_GEXType
.1a4f	18		clc				clc
.1a50	60		rts				rts
.1a51					_GEXType:
.1a51	4c 3f 13	jmp $133f		jmp	ErrorV_type
.1a54					_GEXChannelExec:
.1a54	20 97 1a	jsr $1a97			jsr 	ChannelPrefix 				; set up default
.1a57	20 61 1a	jsr $1a61			jsr 	_GEXExecute
.1a5a	08		php				php
.1a5b	20 b1 1a	jsr $1ab1			jsr 	ChannelPostfix 				; replace default.
.1a5e	28		plp				plp
.1a5f	60		rts				rts
>1a60	db						.byte 	$DB 						; causes a break in the emulator
.1a61					_GEXExecute:
.1a61	20 7e 1a	jsr $1a7e			jsr 	_GEFetchZTemp0 				; get vector
.1a64	85 2c		sta $2c				sta 	zTemp2
.1a66	20 7e 1a	jsr $1a7e			jsr 	_GEFetchZTemp0
.1a69	85 2d		sta $2d				sta 	zTemp2+1
.1a6b	a6 28		ldx $28				ldx 	zTemp0 						; push generation exec on to stack for reentrancy
.1a6d	da		phx				phx
.1a6e	a6 29		ldx $29				ldx 	zTemp0+1
.1a70	da		phx				phx
.1a71	20 7b 1a	jsr $1a7b			jsr 	_GECallZTemp2 				; execute code
.1a74	fa		plx				plx 								; recover generation exec
.1a75	86 29		stx $29				stx 	zTemp0+1
.1a77	fa		plx				plx
.1a78	86 28		stx $28				stx 	zTemp0
.1a7a	60		rts				rts
.1a7b					_GECallZTemp2:
.1a7b	6c 2c 00	jmp ($002c)			jmp 	(zTemp2)
.1a7e					_GEFetchZTemp0:
.1a7e	b2 28		lda ($28)			lda 	(zTemp0)
.1a80	e6 28		inc $28				inc 	zTemp0
.1a82	d0 02		bne $1a86			bne 	_GEFZ0Skip
.1a84	e6 29		inc $29				inc 	zTemp0+1
.1a86					_GEFZ0Skip:
.1a86	60		rts				rts
.1a87					GEXCompileExpression:
.1a87	a6 28		ldx $28				ldx 	zTemp0 						; push generation exec on to stack for reentrancy
.1a89	da		phx				phx
.1a8a	a6 29		ldx $29				ldx 	zTemp0+1
.1a8c	da		phx				phx
.1a8d	20 44 14	jsr $1444			jsr 	CompileExpressionAt0 		; compile expression.
.1a90	fa		plx				plx 								; recover generation exec
.1a91	86 29		stx $29				stx 	zTemp0+1
.1a93	fa		plx				plx
.1a94	86 28		stx $28				stx 	zTemp0
.1a96	60		rts				rts
.1a97					ChannelPrefix:
.1a97	a9 ae		lda #$ae			lda 	#PCD_GETCHANNEL				; set channel onto stack
.1a99	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1a9c	20 87 1a	jsr $1a87			jsr 	GEXCompileExpression 		; channel #
.1a9f	29 40		and #$40			and 	#NSSTypeMask
.1aa1	c9 00		cmp #$00			cmp 	#NSSIFloat
.1aa3	d0 09		bne $1aae			bne 	_CPXType
.1aa5	20 85 10	jsr $1085			jsr 	CheckNextComma 				; check , follows.
.1aa8	a9 af		lda #$af			lda 	#PCD_SETCHANNEL				; set channel
.1aaa	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1aad	60		rts				rts
.1aae					_CPXType:
.1aae	4c 3f 13	jmp $133f		jmp	ErrorV_type
.1ab1					ChannelPostfix:
.1ab1	a9 af		lda #$af			lda 	#PCD_SETCHANNEL				; set channel from TOS.
.1ab3	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1ab6	60		rts				rts
.1ab7					OptionalParameterCompile:
.1ab7	20 eb 1a	jsr $1aeb			jsr 	LookNextNonSpace 			; what follows.
.1aba	c9 2c		cmp #$2c			cmp 	#","
.1abc	d0 0e		bne $1acc			bne 	_MidDefault
.1abe	20 f9 1a	jsr $1af9			jsr 	GetNext 					; consume ,
.1ac1	20 44 14	jsr $1444			jsr 	CompileExpressionAt0
.1ac4	29 40		and #$40			and 	#NSSTypeMask
.1ac6	c9 00		cmp #$00			cmp 	#NSSIFloat
.1ac8	d0 09		bne $1ad3			bne 	MidFailType
.1aca	80 05		bra $1ad1			bra 	_MidComplete
.1acc					_MidDefault:
.1acc	a9 ff		lda #$ff			lda 	#255 						; default of 255
.1ace	20 21 11	jsr $1121			jsr 	PushIntegerA
.1ad1					_MidComplete:
.1ad1	18		clc				clc
.1ad2	60		rts				rts
.1ad3					MidFailType:
.1ad3	4c 3f 13	jmp $133f		jmp	ErrorV_type
.1ad6					NotUnaryCompile:
.1ad6	ad f9 14	lda $14f9			lda 	PrecedenceTable+C64_EQUAL-C64_PLUS
.1ad9	20 46 14	jsr $1446			jsr 	CompileExpressionAtA 		; evaluate at that level
.1adc	29 40		and #$40			and 	#NSSTypeMask 				; check compile returns number.
.1ade	c9 00		cmp #$00			cmp 	#NSSIFloat
.1ae0	d0 f1		bne $1ad3			bne 	MidFailType
.1ae2	a9 a8		lda #$a8			lda 	#PCD_NOT 					; and NOT it.
.1ae4	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1ae7	60		rts				rts
.1ae8					LookNext:
.1ae8	b2 2e		lda ($2e)			lda 	(srcPtr)
.1aea	60		rts				rts
.1aeb					LookNextNonSpace:
.1aeb	b2 2e		lda ($2e)			lda 	(srcPtr)
.1aed	c9 20		cmp #$20			cmp		#' '
.1aef	f0 03		beq $1af4			beq 	_LNNSkip
.1af1	c9 00		cmp #$00			cmp 	#0
.1af3	60		rts				rts
.1af4					_LNNSkip:
.1af4	20 f9 1a	jsr $1af9			jsr 	GetNext
.1af7	80 f2		bra $1aeb			bra 	LookNextNonSpace
.1af9					GetNext:
.1af9	b2 2e		lda ($2e)			lda 	(srcPtr) 					; get next
.1afb	e6 2e		inc $2e				inc 	srcPtr
.1afd	d0 02		bne $1b01			bne 	_GNSkip
.1aff	e6 2f		inc $2f				inc 	srcPtr+1
.1b01					_GNSkip:
.1b01	c9 00		cmp #$00			cmp 	#0
.1b03	60		rts				rts
.1b04					GetNextNonSpace:
.1b04	20 f9 1a	jsr $1af9			jsr 	GetNext
.1b07	c9 20		cmp #$20			cmp 	#' '
.1b09	f0 f9		beq $1b04			beq 	GetNextNonSpace
.1b0b	c9 00		cmp #$00			cmp 	#0
.1b0d	60		rts				rts
.1b0e					CharIsDigit:
.1b0e	c9 30		cmp #$30			cmp 	#"0"
.1b10	90 06		bcc $1b18			bcc 	CCFalse
.1b12	c9 3a		cmp #$3a			cmp 	#"9"+1
.1b14	b0 02		bcs $1b18			bcs 	CCFalse
.1b16					CCTrue:
.1b16	38		sec				sec
.1b17	60		rts				rts
.1b18					CCFalse:
.1b18	18		clc				clc
.1b19	60		rts				rts
.1b1a					CharIsAlpha:
.1b1a	c9 41		cmp #$41			cmp 	#"A"
.1b1c	90 fa		bcc $1b18			bcc 	CCFalse
.1b1e	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1b20	b0 f6		bcs $1b18			bcs 	CCFalse
.1b22	80 f2		bra $1b16			bra 	CCTrue
.1b24					ConvertHexStyle:
.1b24	38		sec				sec
.1b25	e9 30		sbc #$30			sbc 	#"0" 						; check in range 0-9 first
.1b27	90 ef		bcc $1b18			bcc 	CCFalse
.1b29	c9 0a		cmp #$0a			cmp 	#9+1
.1b2b	90 e9		bcc $1b16			bcc 	CCTrue
.1b2d	38		sec				sec 								; shift into hex space A=>0 Z=>25
.1b2e	e9 11		sbc #$11			sbc 	#"A"-"0"
.1b30	90 e6		bcc $1b18			bcc 	CCFalse
.1b32	c9 1a		cmp #$1a			cmp 	#26 						; past Z ?
.1b34	b0 e2		bcs $1b18			bcs 	CCFalse
.1b36	69 0a		adc #$0a			adc 	#10 						; make valid quasi-hex 0-35
.1b38	80 dc		bra $1b16			bra 	CCTrue
.1b3a					CommandGET:
.1b3a	20 eb 1a	jsr $1aeb			jsr 	LookNextNonSpace 			; # follows ?
.1b3d	c9 23		cmp #$23			cmp 	#"#"
.1b3f	d0 0d		bne $1b4e			bne 	CommandGetBody
.1b41	20 f9 1a	jsr $1af9			jsr 	GetNext 					; consume #
.1b44	20 97 1a	jsr $1a97			jsr 	ChannelPrefix 				; do it as GET#
.1b47	20 4e 1b	jsr $1b4e			jsr 	CommandGetBody
.1b4a	20 b1 1a	jsr $1ab1			jsr 	ChannelPostfix
.1b4d	60		rts				rts
.1b4e					CommandGetBody:
.1b4e	20 04 1b	jsr $1b04			jsr 	GetNextNonSpace 			; get the first character
.1b51	20 a9 1e	jsr $1ea9			jsr 	GetReferenceTerm 			; identify variable to assign to
.1b54	48		pha				pha
.1b55	29 40		and #$40			and 	#NSSTypeMask 				; check if it is a string
.1b57	c9 40		cmp #$40			cmp 	#NSSString
.1b59	d0 0b		bne $1b66			bne 	_CGType
.1b5b	a9 97		lda #$97			lda 	#PCD_GET 					; compile GET
.1b5d	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1b60	38		sec				sec
.1b61	68		pla				pla
.1b62	20 5b 1e	jsr $1e5b			jsr		GetSetVariable
.1b65	60		rts				rts
.1b66					_CGType:
.1b66	4c 3f 13	jmp $133f		jmp	ErrorV_type
.1b69					ExtractVariableName:
.1b69	20 1a 1b	jsr $1b1a			jsr 	CharIsAlpha
.1b6c	90 50		bcc $1bbe			bcc 	_IVSyntax
.1b6e	29 1f		and #$1f			and 	#31 						; reduce first character to 5 bits
.1b70	85 2a		sta $2a				sta 	zTemp1 						; we'll build it in zTemp1
.1b72	64 2b		stz $2b				stz 	zTemp1+1
.1b74	20 e8 1a	jsr $1ae8			jsr 	LookNext 					; is there a second character ?
.1b77	20 1a 1b	jsr $1b1a			jsr 	CharIsAlpha  				; must be alphanumeric
.1b7a	b0 05		bcs $1b81			bcs 	_IVHasSecond
.1b7c	20 0e 1b	jsr $1b0e			jsr 	CharIsDigit
.1b7f	90 07		bcc $1b88			bcc 	_IVCheckType
.1b81					_IVHasSecond:
.1b81	29 3f		and #$3f			and 	#63 						; 6 bit ASCII.
.1b83	85 2b		sta $2b				sta 	zTemp1+1
.1b85					_IVGetNextCheck:
.1b85	20 f9 1a	jsr $1af9			jsr 	GetNext 					; consume it
.1b88					_IVCheckType:
.1b88	20 e8 1a	jsr $1ae8			jsr 	LookNext					; check if string follows.
.1b8b	20 1a 1b	jsr $1b1a			jsr 	CharIsAlpha
.1b8e	b0 f5		bcs $1b85			bcs 	_IVGetNextCheck
.1b90	20 0e 1b	jsr $1b0e			jsr 	CharIsDigit
.1b93	b0 f0		bcs $1b85			bcs 	_IVGetNextCheck
.1b95	a2 40		ldx #$40			ldx 	#NSSString
.1b97	c9 24		cmp #$24			cmp 	#"$"
.1b99	f0 06		beq $1ba1			beq 	_IVHasType
.1b9b	a2 20		ldx #$20			ldx 	#NSSIInt16 					; check if short int follows e.g. 16 bit
.1b9d	c9 25		cmp #$25			cmp 	#"%"
.1b9f	d0 08		bne $1ba9			bne 	_IVCheckArray
.1ba1					_IVHasType:
.1ba1	8a		txa				txa 								; Or X into zTemp1
.1ba2	05 2a		ora $2a				ora 	zTemp1
.1ba4	85 2a		sta $2a				sta 	zTemp1
.1ba6	20 f9 1a	jsr $1af9			jsr 	GetNext 					; consume it
.1ba9					_IVCheckArray:
.1ba9	20 e8 1a	jsr $1ae8			jsr 	LookNext 					; check if array follows
.1bac	c9 28		cmp #$28			cmp 	#"("
.1bae	d0 09		bne $1bb9			bne 	_IVNotArray
.1bb0	a5 2a		lda $2a				lda 	zTemp1 						; set array bit
.1bb2	09 80		ora #$80			ora 	#NSSArray
.1bb4	85 2a		sta $2a				sta 	zTemp1
.1bb6	20 f9 1a	jsr $1af9			jsr 	GetNext 					; consume it
.1bb9					_IVNotArray:
.1bb9	a6 2a		ldx $2a				ldx 	zTemp1
.1bbb	a4 2b		ldy $2b				ldy 	zTemp1+1
.1bbd	60		rts				rts
.1bbe					_IVSyntax:
.1bbe	4c 2f 13	jmp $132f		jmp	ErrorV_syntax
.1bc1					CommandGOSUB:
.1bc1	a9 d1		lda #$d1			lda 	#PCD_CMD_GOSUB
.1bc3	20 d4 1b	jsr $1bd4			jsr 	CompileBranchCommand
.1bc6	60		rts				rts
.1bc7					CommandGOAlt:
.1bc7	a9 a4		lda #$a4			lda 	#C64_TO 					; GO TO alternative
.1bc9	20 8f 10	jsr $108f			jsr 	CheckNextA
.1bcc	80 00		bra $1bce			bra 	CommandGOTO
.1bce					CommandGOTO:
.1bce	a9 d0		lda #$d0			lda 	#PCD_CMD_GOTO
.1bd0	20 d4 1b	jsr $1bd4			jsr 	CompileBranchCommand
.1bd3	60		rts				rts
.1bd4					CompileBranchCommand:
.1bd4	20 7b 10	jsr $107b			jsr 	WriteCodeByte 				; write the command out.
.1bd7	20 04 1b	jsr $1b04			jsr 	GetNextNonSpace
.1bda	20 a6 1d	jsr $1da6			jsr 	ParseConstant 				; get constant into YA
.1bdd	90 0f		bcc $1bee			bcc 	_CBCSyntax
.1bdf	48		pha				pha
.1be0	a9 ff		lda #$ff			lda 	#$FF 						; no address yet.
.1be2	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1be5	68		pla				pla 								; and compile the actual line number
.1be6	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1be9	98		tya				tya
.1bea	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1bed	60		rts				rts
.1bee					_CBCSyntax:
.1bee	4c 2f 13	jmp $132f		jmp	ErrorV_syntax
.1bf1					CommandIF:
.1bf1	20 eb 1a	jsr $1aeb			jsr 	LookNextNonSpace 			; what follows the tests ?
.1bf4	c9 89		cmp #$89			cmp 	#C64_GOTO 					; IF .. GOTO
.1bf6	f0 0f		beq $1c07			beq 	_CIGoto
.1bf8	a9 a7		lda #$a7			lda 	#C64_THEN 					; should be THEN
.1bfa	20 8f 10	jsr $108f			jsr 	CheckNextA
.1bfd	20 eb 1a	jsr $1aeb			jsr 	LookNextNonSpace 			; THEN <number>
.1c00	20 0e 1b	jsr $1b0e			jsr 	CharIsDigit
.1c03	b0 05		bcs $1c0a			bcs 	_CIGoto2
.1c05	80 09		bra $1c10			bra 	CompileGotoEOL
.1c07					_CIGoto:
.1c07	20 f9 1a	jsr $1af9			jsr 	GetNext
.1c0a					_CIGoto2:
.1c0a	a9 d3		lda #$d3			lda 	#PCD_CMD_GOTOCMD_NZ
.1c0c	20 d4 1b	jsr $1bd4			jsr 	CompileBranchCommand
.1c0f	60		rts				rts
.1c10					CompileGotoEOL:
.1c10	a9 d2		lda #$d2			lda 	#PCD_CMD_GOTOCMD_Z
.1c12	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1c15	a9 ff		lda #$ff			lda 	#$FF
.1c17	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1c1a	20 af 1c	jsr $1caf			jsr 	GetLineNumber 				; Get the current line number => YA
.1c1d	1a		inc a				inc 	a 							; and branch to +1
.1c1e	d0 01		bne $1c21			bne 	_CGENoCarry
.1c20	c8		iny				iny
.1c21					_CGENoCarry:
.1c21	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1c24	98		tya				tya
.1c25	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1c28	60		rts				rts
.1c29					CommandINPUT:
.1c29	20 eb 1a	jsr $1aeb			jsr 	LookNextNonSpace 			; check for "
.1c2c	c9 22		cmp #$22			cmp 	#'"'
.1c2e	d0 0d		bne $1c3d			bne 	CommandINPUTStream
.1c30	20 44 14	jsr $1444			jsr 	CompileExpressionAt0
.1c33	a9 b1		lda #$b1			lda 	#(PCD_PRINTCMD_S) & $FF
.1c35	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1c38	a9 2c		lda #$2c			lda 	#","
.1c3a	20 85 10	jsr $1085			jsr 	CheckNextComma
.1c3d					CommandINPUTStream:
.1c3d	a9 a1		lda #$a1			lda 	#(PCD_INPUTCMD_START) & $FF
.1c3f	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1c42	a2 9f		ldx #$9f			ldx 	#PCD_INPUT 					; do READ with Data from INPUT
.1c44	a0 a0		ldy #$a0			ldy 	#PCD_INPUTDOLLAR
.1c46	4c 23 1e	jmp $1e23			jmp 	CommandReadInputCommon
.1c49					CommandLET:
.1c49	20 04 1b	jsr $1b04			jsr 	GetNextNonSpace 			; get the first character
.1c4c					CommandLETHaveFirst:
.1c4c	20 a9 1e	jsr $1ea9			jsr 	GetReferenceTerm 			; identify variable to assign to
.1c4f	da		phx				phx 								; save target on the stack.
.1c50	5a		phy				phy
.1c51	48		pha				pha
.1c52	a9 b2		lda #$b2			lda 	#C64_EQUAL 					; check next is =
.1c54	20 8f 10	jsr $108f			jsr 	CheckNextA
.1c57	20 44 14	jsr $1444			jsr 	CompileExpressionAt0 		; evaluate the RHS.
.1c5a	85 28		sta $28				sta 	zTemp0 						; save type returned
.1c5c	68		pla				pla 								; get type of assignment
.1c5d	48		pha				pha
.1c5e	45 28		eor $28				eor 	zTemp0 						; compare using EOR
.1c60	29 40		and #$40			and 	#NSSTypeMask 				; so we can mask type as we only need n/s
.1c62	d0 17		bne $1c7b			bne 	_CLType
.1c64	68		pla				pla 								; restore and compile save code
.1c65	7a		ply				ply
.1c66	fa		plx				plx
.1c67	c0 c0		cpy #$c0			cpy 	#$C0 						; is it TI$ = "xxxxx"
.1c69	f0 05		beq $1c70			beq 	_CLTIString
.1c6b	38		sec				sec
.1c6c	20 5b 1e	jsr $1e5b			jsr		GetSetVariable
.1c6f	60		rts				rts
.1c70					_CLTIString:
.1c70	a9 ca		lda #$ca			lda 	#(PCD_TIDOLLARCMD_WRITE) >> 8
.1c72	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1c75	a9 93		lda #$93			lda 	#(PCD_TIDOLLARCMD_WRITE) & $FF
.1c77	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1c7a	60		rts				rts
.1c7b					_CLType:
.1c7b	4c 3f 13	jmp $133f		jmp	ErrorV_type
.1c7e					ReadNextLine:
.1c7e	20 7d 16	jsr $167d			jsr 	INPUTGet 					; check offset is not zero.
.1c81	85 28		sta $28				sta 	zTemp0
.1c83	20 7d 16	jsr $167d			jsr 	INPUTGet
.1c86	05 28		ora $28				ora 	zTemp0
.1c88	d0 02		bne $1c8c			bne 	_RNLBody
.1c8a	18		clc				clc
.1c8b	60		rts				rts						; end of file.
.1c8c					_RNLBody:
.1c8c	20 7d 16	jsr $167d			jsr 	INPUTGet 					; read and save line number
.1c8f	8d 00 05	sta $0500			sta 	currentLineNumber
.1c92	20 7d 16	jsr $167d			jsr 	INPUTGet
.1c95	8d 01 05	sta $0501			sta 	currentLineNumber+1
.1c98	a2 00		ldx #$00			ldx 	#0 							; read line into buffer
.1c9a					_RNLRead:
.1c9a	20 7d 16	jsr $167d			jsr 	INPUTGet
.1c9d	9d 00 04	sta $0400,x			sta 	sourceBuffer,x
.1ca0	e8		inx				inx
.1ca1	c9 00		cmp #$00			cmp 	#0
.1ca3	d0 f5		bne $1c9a			bne 	_RNLRead
.1ca5	a9 00		lda #$00			lda 	#((sourceBuffer) & $FF)
.1ca7	85 2e		sta $2e				sta 	0+srcPtr
.1ca9	a9 04		lda #$04			lda 	#((sourceBuffer) >> 8) & $FF
.1cab	85 2f		sta $2f				sta 	1+srcPtr
.1cad	38		sec				sec
.1cae	60		rts				rts
.1caf					GetLineNumber:
.1caf	ac 01 05	ldy $0501			ldy 	currentLineNumber+1
.1cb2	ad 00 05	lda $0500			lda 	currentLineNumber
.1cb5	60		rts				rts
.1cb6					STRMarkLine:
.1cb6	48		pha				pha
.1cb7	38		sec				sec 								; allocate 5 bytes (line #, page+address)
.1cb8	ad 0a 06	lda $060a			lda 	lineNumberTable 			; and copy to zTemp0
.1cbb	e9 05		sbc #$05			sbc 	#5
.1cbd	8d 0a 06	sta $060a			sta 	lineNumberTable
.1cc0	85 28		sta $28				sta 	zTemp0
.1cc2	ad 0b 06	lda $060b			lda 	lineNumberTable+1
.1cc5	e9 00		sbc #$00			sbc 	#0
.1cc7	8d 0b 06	sta $060b			sta 	lineNumberTable+1
.1cca	85 29		sta $29				sta 	zTemp0+1
.1ccc	68		pla				pla
.1ccd	92 28		sta ($28)			sta 	(zTemp0) 					; save it in +0,+1
.1ccf	98		tya				tya
.1cd0	a0 01		ldy #$01			ldy 	#1
.1cd2	91 28		sta ($28),y			sta 	(zTemp0),y
.1cd4	a5 27		lda $27				lda 	objPage 					; and page# in +2
.1cd6	c8		iny				iny
.1cd7	91 28		sta ($28),y			sta 	(zTemp0),y
.1cd9	a5 25		lda $25				lda 	objPtr 						; save current address in +3,+4
.1cdb	c8		iny				iny
.1cdc	91 28		sta ($28),y			sta 	(zTemp0),y
.1cde	a5 26		lda $26				lda 	objPtr+1
.1ce0	c8		iny				iny
.1ce1	91 28		sta ($28),y			sta 	(zTemp0),y
.1ce3	60		rts				rts
.1ce4					STRFindLine:
.1ce4	85 28		sta $28				sta 	zTemp0 						; zTemp0 line number being searched
.1ce6	84 29		sty $29				sty 	zTemp0+1
.1ce8	a9 00		lda #$00			lda 	#((WorkArea+WorkAreaSize) & $FF)
.1cea	85 2a		sta $2a				sta 	0+zTemp1
.1cec	a9 9f		lda #$9f			lda 	#((WorkArea+WorkAreaSize) >> 8) & $FF
.1cee	85 2b		sta $2b				sta 	1+zTemp1
.1cf0					_STRSearch:
.1cf0	20 2b 1d	jsr $1d2b			jsr 	_STRPrevLine 				; look at previous record.
.1cf3	a0 01		ldy #$01			ldy 	#1
.1cf5	b2 2a		lda ($2a)			lda 	(zTemp1) 					; check table line # >= target
.1cf7	c5 28		cmp $28				cmp 	zTemp0
.1cf9	b1 2a		lda ($2a),y			lda 	(zTemp1),y
.1cfb	e5 29		sbc $29				sbc 	zTemp0+1
.1cfd	b0 0b		bcs $1d0a			bcs 	_STRFound 					; >=
.1cff					_STRNext:
.1cff	a0 01		ldy #$01			ldy 	#1 							; should not be required !
.1d01	b1 2a		lda ($2a),y			lda 	(zTemp1),y
.1d03	c9 ff		cmp #$ff			cmp 	#$FF
.1d05	d0 e9		bne $1cf0			bne 	_STRSearch
.1d07	4c 89 13	jmp $1389		jmp	ErrorV_internal
.1d0a					_STRFound:
.1d0a	b2 2a		lda ($2a)			lda 	(zTemp1) 					; set A = 0 if the same, 0 if different.
.1d0c	45 28		eor $28				eor 	zTemp0
.1d0e	d0 06		bne $1d16			bne 	_STRDifferent
.1d10	b2 2a		lda ($2a)			lda 	(zTemp1)
.1d12	45 28		eor $28				eor 	zTemp0
.1d14	f0 02		beq $1d18			beq 	_STROut 					; if zero, exit with A = 0 and correct line.
.1d16					_STRDifferent:
.1d16	a9 ff		lda #$ff			lda 	#$FF
.1d18					_STROut:
.1d18	18		clc				clc  								; set carry if different, e.g. > rather than >=
.1d19	69 ff		adc #$ff			adc 	#255
.1d1b	08		php				php
.1d1c	c8		iny				iny 								; page into X
.1d1d	b1 2a		lda ($2a),y			lda 	(zTemp1),y
.1d1f	aa		tax				tax
.1d20	c8		iny				iny 								; address into YA
.1d21	b1 2a		lda ($2a),y			lda 	(zTemp1),y
.1d23	48		pha				pha
.1d24	c8		iny				iny
.1d25	b1 2a		lda ($2a),y			lda 	(zTemp1),y
.1d27	a8		tay				tay
.1d28	68		pla				pla
.1d29	28		plp				plp
.1d2a	60		rts				rts
.1d2b					_STRPrevLine:
.1d2b	38		sec				sec 								; move backwards one entry.
.1d2c	a5 2a		lda $2a				lda 	zTemp1
.1d2e	e9 05		sbc #$05			sbc 	#5
.1d30	85 2a		sta $2a				sta 	zTemp1
.1d32	a5 2b		lda $2b				lda 	zTemp1+1
.1d34	e9 00		sbc #$00			sbc 	#0
.1d36	85 2b		sta $2b				sta 	zTemp1+1
.1d38	60		rts				rts
.1d39					STRMakeOffset:
.1d39	18		clc				clc 								; borrow 1
.1d3a	e5 25		sbc $25				sbc 	objPtr
.1d3c	48		pha				pha
.1d3d	98		tya				tya
.1d3e	e5 26		sbc $26				sbc 	objPtr+1
.1d40	a8		tay				tay
.1d41	68		pla				pla
.1d42	60		rts				rts
.1d43					CommandNEXT:
.1d43	20 eb 1a	jsr $1aeb			jsr 	LookNextNonSpace 			; first letter of index variable, should be.
.1d46	20 1a 1b	jsr $1b1a			jsr 	CharIsAlpha 				; if not alpha , error
.1d49	90 0c		bcc $1d57			bcc 	_CNNoReferenceGiven
.1d4b	20 f9 1a	jsr $1af9			jsr 	GetNext
.1d4e	20 a9 1e	jsr $1ea9			jsr 	GetReferenceTerm 			; figure out the reference.
.1d51	8a		txa				txa 								; reference in YA
.1d52	20 0e 11	jsr $110e			jsr 	PushIntegerYA 				; write it out.
.1d55	80 06		bra $1d5d			bra 	_CNParametersDone
.1d57					_CNNoReferenceGiven:
.1d57	a9 ff		lda #$ff			lda 	#255 						; write out -1 no
.1d59	a8		tay				tay
.1d5a	20 0e 11	jsr $110e			jsr 	PushIntegerYA 				; write it out.
.1d5d					_CNParametersDone:
.1d5d	a9 a7		lda #$a7			lda 	#PCD_NEXT  					; compile FOR word.
.1d5f	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1d62	20 eb 1a	jsr $1aeb			jsr 	LookNextNonSpace 			; look for ,
.1d65	c9 2c		cmp #$2c			cmp 	#","
.1d67	d0 05		bne $1d6e			bne 	_CNExit
.1d69	20 f9 1a	jsr $1af9			jsr 	GetNext 					; consume ,
.1d6c	80 d5		bra $1d43			bra 	CommandNEXT 				; and go round.
.1d6e					_CNExit:
.1d6e	60		rts				rts
.1d6f					CommandON:
.1d6f	20 04 1b	jsr $1b04			jsr 	GetNextNonSpace 			; GOTO / GOSUB must follow
.1d72	48		pha				pha 								; save on stack
.1d73	a2 d0		ldx #$d0			ldx 	#PCD_CMD_GOTO
.1d75	c9 89		cmp #$89			cmp 	#C64_GOTO 					; must be GOTO/GOSUB
.1d77	f0 09		beq $1d82			beq 	_COCreateLoop
.1d79	a2 d1		ldx #$d1			ldx 	#PCD_CMD_GOSUB
.1d7b	c9 8d		cmp #$8d			cmp 	#C64_GOSUB
.1d7d	f0 03		beq $1d82			beq 	_COCreateLoop
.1d7f	4c 2f 13	jmp $132f		jmp	ErrorV_syntax
.1d82					_COCreateLoop:
.1d82	8a		txa				txa 								; compile a goto/gosub somewhere
.1d83	da		phx				phx
.1d84	20 d4 1b	jsr $1bd4			jsr 	CompileBranchCommand
.1d87	fa		plx				plx
.1d88	20 eb 1a	jsr $1aeb			jsr 	LookNextNonSpace			; ',' follows
.1d8b	c9 2c		cmp #$2c			cmp 	#","
.1d8d	d0 0a		bne $1d99			bne 	_COComplete 				; if so, more line numbers
.1d8f	a9 aa		lda #$aa			lda 	#PCD_MOREON 				; ON extends.
.1d91	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1d94	20 f9 1a	jsr $1af9			jsr 	GetNext
.1d97	80 e9		bra $1d82			bra 	_COCreateLoop
.1d99					_COComplete:
.1d99	68		pla				pla 								; throw GOTO/GOSUB
.1d9a	60		rts				rts
.1d9b					OUTPUTOpen:
.1d9b					OUTPUTRewind:
.1d9b	64 27		stz $27				stz 	objPage
.1d9d	a9 00		lda #$00			lda 	#((PCodeStart) & $FF)
.1d9f	85 25		sta $25				sta 	0+objPtr
.1da1	a9 40		lda #$40			lda 	#((PCodeStart) >> 8) & $FF
.1da3	85 26		sta $26				sta 	1+objPtr
.1da5	60		rts				rts
.1da6					ParseConstant:
.1da6	a2 00		ldx #$00			ldx 	#0
.1da8	20 23 24	jsr $2423			jsr 	FloatEncodeStart 			; send first
.1dab					_ParseLoop:
.1dab	20 e8 1a	jsr $1ae8			jsr 	LookNext 					; send subsequent
.1dae	20 26 24	jsr $2426			jsr 	FloatEncodeContinue
.1db1	90 05		bcc $1db8			bcc 	_ParseDone
.1db3	20 f9 1a	jsr $1af9			jsr 	GetNext 					; consume it
.1db6	80 f3		bra $1dab			bra 	_ParseLoop
.1db8					_ParseDone:
.1db8	b5 32		lda $32,x			lda 	NSStatus,x 					; shouldn't be -ve ....
.1dba	29 80		and #$80			and 	#$80
.1dbc	15 6e		ora $6e,x			ora 	NSExponent,x 				; 16 bit int check
.1dbe	15 56		ora $56,x			ora 	NSMantissa2,x
.1dc0	15 62		ora $62,x			ora 	NSMantissa3,x
.1dc2	18		clc				clc
.1dc3	d0 05		bne $1dca			bne 	_ParseExit 					; exit with CC if need float to compile
.1dc5	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; read into YA.
.1dc7	b4 4a		ldy $4a,x			ldy		NSMantissa1,x
.1dc9	38		sec				sec
.1dca					_ParseExit:
.1dca	60		rts				rts
.1dcb					MOFSizeTable:
>1dcb	01					.byte	1         	; $ca .shift
>1dcc	01					.byte	1         	; $cb .byte
>1dcd	02					.byte	2         	; $cc .word
>1dce	05					.byte	5         	; $cd .float
>1dcf	ff					.byte	255       	; $ce .string
>1dd0	ff					.byte	255       	; $cf .data
>1dd1	03					.byte	3         	; $d0 .goto
>1dd2	03					.byte	3         	; $d1 .gosub
>1dd3	03					.byte	3         	; $d2 .goto.z
>1dd4	03					.byte	3         	; $d3 .goto.nz
>1dd5	02					.byte	2         	; $d4 .varspace
.1dd6					CommandPRINT:
.1dd6	20 eb 1a	jsr $1aeb			jsr 	LookNextNonSpace			; what follows ?
.1dd9	c9 3b		cmp #$3b			cmp 	#";" 						; semicolon, check end of command
.1ddb	f0 1f		beq $1dfc			beq 	_CPCheckEnd
.1ddd	c9 2c		cmp #$2c			cmp 	#"," 						; , TAB and check end of command
.1ddf	f0 16		beq $1df7			beq 	_CPTabCheckEnd
.1de1	20 13 1e	jsr $1e13			jsr 	_CPAtEnd 					; check for : and EOL
.1de4	b0 22		bcs $1e08			bcs 	_CPExitCR 					; exit with CR
.1de6	20 44 14	jsr $1444			jsr 	CompileExpressionAt0 		; so it is something to print
.1de9	a2 b1		ldx #$b1			ldx 	#PCD_PRINTCMD_S
.1deb	29 40		and #$40			and 	#NSSString 					; if string
.1ded	d0 02		bne $1df1			bne 	_CPOut
.1def	a2 b0		ldx #$b0			ldx 	#PCD_PRINTCMD_N
.1df1					_CPOut:
.1df1	8a		txa				txa 								; print that thing
.1df2	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1df5	80 df		bra $1dd6			bra 	CommandPRINT 				; and loop round/
.1df7					_CPTabCheckEnd:
.1df7	a9 b7		lda #$b7			lda 	#PCD_PRINTCMD_TAB 			; , next tab stop
.1df9	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1dfc					_CPCheckEnd:
.1dfc	20 f9 1a	jsr $1af9			jsr 	GetNext 					; consume it.
.1dff	20 eb 1a	jsr $1aeb			jsr 	LookNextNonSpace 			; what follows ?
.1e02	20 13 1e	jsr $1e13			jsr 	_CPAtEnd 					; reached end
.1e05	90 cf		bcc $1dd6			bcc 	CommandPRINT 				; no, loop back
.1e07	60		rts				rts
.1e08					_CPExitCR:
.1e08	a9 0d		lda #$0d			lda 	#13 						; code to print CR
.1e0a	20 21 11	jsr $1121			jsr 	PushIntegerA
.1e0d	a9 92		lda #$92			lda 	#PCD_PRINTCMD_CHR
.1e0f	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1e12	60		rts				rts
.1e13					_CPAtEnd:
.1e13	c9 00		cmp #$00			cmp 	#0
.1e15	f0 06		beq $1e1d			beq 	_CPIsEnd
.1e17	c9 3a		cmp #$3a			cmp 	#":"
.1e19	f0 02		beq $1e1d			beq 	_CPIsEnd
.1e1b	18		clc				clc
.1e1c	60		rts				rts
.1e1d					_CPIsEnd:
.1e1d	38		sec				sec
.1e1e	60		rts				rts
.1e1f					CommandREAD:
.1e1f	a2 b2		ldx #$b2			ldx 	#PCD_READ
.1e21	a0 b3		ldy #$b3			ldy 	#PCD_READDOLLAR
.1e23					CommandReadInputCommon:
.1e23	8e 08 06	stx $0608			stx 	numberPCode
.1e26	8c 09 06	sty $0609			sty 	stringPCode
.1e29					_CRLoop:
.1e29	20 04 1b	jsr $1b04			jsr 	GetNextNonSpace 			; first char of identifier
.1e2c	20 1a 1b	jsr $1b1a			jsr 	CharIsAlpha 				; check A-Z
.1e2f	90 27		bcc $1e58			bcc 	_CRSyntax
.1e31	20 a9 1e	jsr $1ea9			jsr 	GetReferenceTerm 			; get the variable.
.1e34	48		pha				pha 								; save type.
.1e35	29 40		and #$40			and 	#NSSTypeMask 				; is it a string ?
.1e37	c9 40		cmp #$40			cmp 	#NSSString
.1e39	f0 05		beq $1e40			beq 	_CRString
.1e3b	ad 08 06	lda $0608			lda 	numberPCode 				; output read/input
.1e3e	80 03		bra $1e43			bra 	_CRHaveType
.1e40					_CRString:
.1e40	ad 09 06	lda $0609			lda 	stringPCode					; output read$/input$
.1e43					_CRHaveType:
.1e43	20 7b 10	jsr $107b			jsr 	WriteCodeByte 				; so we have one typed data item.
.1e46	68		pla				pla 								; restore type
.1e47	38		sec				sec  								; write update code.
.1e48	20 5b 1e	jsr $1e5b			jsr 	GetSetVariable
.1e4b	20 eb 1a	jsr $1aeb			jsr 	LookNextNonSpace 			; , follows ?
.1e4e	c9 2c		cmp #$2c			cmp 	#","
.1e50	d0 05		bne $1e57			bne 	_CRExit 					; if not, end of READ.
.1e52	20 f9 1a	jsr $1af9			jsr 	GetNext 					; consume comma
.1e55	80 d2		bra $1e29			bra 	_CRLoop 					; keep going
.1e57					_CRExit:
.1e57	60		rts				rts
.1e58					_CRSyntax:
.1e58	4c 2f 13	jmp $132f		jmp	ErrorV_syntax
.0608					numberPCode:
>0608							.fill 	1
.0609					stringPCode:
>0609							.fill 	1
.1e5b					GetSetVariable:
.1e5b	08		php				php 								; save direction on stack
.1e5c	c0 00		cpy #$00			cpy 	#$00
.1e5e	30 21		bmi $1e81			bmi 	_GSVReadWriteSpecial
.1e60	c9 00		cmp #$00			cmp 	#$00
.1e62	30 33		bmi $1e97			bmi 	_GSVArray
.1e64	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16 		; get type bits
.1e66	4a		lsr a				lsr 	a 							; divide by 2
.1e67	09 40		ora #$40			ora 	#64 						; and set bit 6.
.1e69	28		plp				plp
.1e6a	90 02		bcc $1e6e			bcc 	_GSVNotWrite
.1e6c	09 08		ora #$08			ora 	#8  						; set bit 3 if it is write.
.1e6e					_GSVNotWrite:
.1e6e	85 28		sta $28				sta 	zTemp0
.1e70	98		tya				tya 	 							; shift X/Y right as the address stored is halved
.1e71	4a		lsr a				lsr 	a
.1e72	a8		tay				tay
.1e73	8a		txa				txa
.1e74	6a		ror a				ror 	a
.1e75	aa		tax				tax
.1e76	98		tya				tya 								; lower 3 bits of YX are ORed into the opcode
.1e77	05 28		ora $28				ora 	zTemp0 						; which is the first byte of the opcode
.1e79	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1e7c	8a		txa				txa 								; and the lower 8 bits of YX are the second byte
.1e7d	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1e80	60		rts				rts
.1e81					_GSVReadWriteSpecial:
.1e81	28		plp				plp
.1e82	b0 10		bcs $1e94			bcs 	_GSVSyntax
.1e84	c0 c0		cpy #$c0			cpy 	#$C0 						; TI$ ?
.1e86	f0 06		beq $1e8e			beq 	_GSVRWString
.1e88	a9 bf		lda #$bf			lda 	#(PCD_TI) & $FF
.1e8a	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1e8d	60		rts				rts
.1e8e					_GSVRWString:
.1e8e	a9 c0		lda #$c0			lda 	#(PCD_TIDOLLAR) & $FF
.1e90	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1e93	60		rts				rts
.1e94					_GSVSyntax:
.1e94	4c 2f 13	jmp $132f		jmp	ErrorV_syntax
.1e97					_GSVArray:
.1e97	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16 		; mask out 2 bits of type data
.1e99	4a		lsr a				lsr 	a		 					; shift from 5,6 to 0,1
.1e9a	4a		lsr a				lsr 	a
.1e9b	4a		lsr a				lsr 	a
.1e9c	4a		lsr a				lsr 	a
.1e9d	4a		lsr a				lsr 	a
.1e9e	28		plp				plp 								; if writing array then set bit 2.
.1e9f	90 02		bcc $1ea3			bcc 	_GSVANotWrite
.1ea1	09 04		ora #$04			ora 	#4
.1ea3					_GSVANotWrite:
.1ea3	09 78		ora #$78			ora 	#$78 						; make a valid opcode.
.1ea5	20 7b 10	jsr $107b			jsr 	WriteCodeByte 				; and write it out
.1ea8	60		rts				rts
.1ea9					GetReferenceTerm:
.1ea9	20 69 1b	jsr $1b69			jsr 	ExtractVariableName 		; get name & type info
.1eac	e0 00		cpx #$00			cpx 	#0 							; check for array handler
.1eae	30 10		bmi $1ec0			bmi 	_GRTArray
.1eb0	da		phx				phx 								; save type on stack
.1eb1	20 fe 14	jsr $14fe			jsr 	FindVariable 				; find it
.1eb4	b0 06		bcs $1ebc			bcs 	_GRTNoCreate 				; create if required.
.1eb6	20 53 11	jsr $1153			jsr 	CreateVariableRecord 		; create a variable.
.1eb9	20 ad 11	jsr $11ad			jsr 	AllocateBytesForType 		; allocate memory for it
.1ebc					_GRTNoCreate:
.1ebc	68		pla				pla 								; get type back, strip out type information.
.1ebd	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16
.1ebf	60		rts				rts
.1ec0					_GRTArray:
.1ec0	da		phx				phx 								; save type information
.1ec1	20 fe 14	jsr $14fe			jsr 	FindVariable 				; read its data, the base address in YX
.1ec4	90 18		bcc $1ede			bcc 	_GRTUndeclared 				; undeclared array.
.1ec6	da		phx				phx 								; save base address
.1ec7	5a		phy				phy
.1ec8	20 a4 12	jsr $12a4			jsr 	OutputIndexGroup 			; create an index group and generate them
.1ecb	7a		ply				ply 								; get the array base address into YX
.1ecc	fa		plx				plx
.1ecd	a9 20		lda #$20			lda 	#NSSIFloat+NSSIInt16 		; pretend it is an int16 reference.
.1ecf	18		clc				clc
.1ed0	20 5b 1e	jsr $1e5b			jsr 	GetSetVariable 				; load the address of the array structure.
.1ed3	a9 8e		lda #$8e			lda 	#(PCD_ARRAY) & $FF
.1ed5	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1ed8	68		pla				pla 								; and the type data into A
.1ed9	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16
.1edb	09 80		ora #$80			ora 	#$80 						; with the array flag set.
.1edd	60		rts				rts
.1ede					_GRTUndeclared:
.1ede	4c e6 13	jmp $13e6		jmp	ErrorV_undeclared
.1ee1					CommandREM:
.1ee1	20 e8 1a	jsr $1ae8			jsr 	LookNext
.1ee4	f0 05		beq $1eeb			beq 	_CRExit
.1ee6	20 f9 1a	jsr $1af9			jsr 	GetNext
.1ee9	80 f6		bra $1ee1			bra 	CommandREM
.1eeb					_CRExit:
.1eeb	60		rts				rts
.1eec					STRReset:
.1eec	a9 00		lda #$00			lda 	#((WorkArea) & $FF)
.1eee	8d 0c 06	sta $060c			sta 	0+variableListEnd
.1ef1	a9 80		lda #$80			lda 	#((WorkArea) >> 8) & $FF
.1ef3	8d 0d 06	sta $060d			sta 	1+variableListEnd
.1ef6	a9 00		lda #$00			lda 	#((WorkArea+WorkAreaSize) & $FF)
.1ef8	8d 0a 06	sta $060a			sta 	0+lineNumberTable
.1efb	a9 9f		lda #$9f			lda 	#((WorkArea+WorkAreaSize) >> 8) & $FF
.1efd	8d 0b 06	sta $060b			sta 	1+lineNumberTable
.1f00	9c 00 80	stz $8000			stz 	WorkArea
.1f03	a9 00		lda #$00			lda 	#((0) & $FF)
.1f05	8d 0e 06	sta $060e			sta 	0+freeVariableMemory
.1f08	a9 00		lda #$00			lda 	#((0) >> 8) & $FF
.1f0a	8d 0f 06	sta $060f			sta 	1+freeVariableMemory
.1f0d	60		rts				rts
.060a					lineNumberTable:
>060a							.fill 	2
.060c					variableListEnd:
>060c							.fill 	2
.060e					freeVariableMemory:
>060e							.fill 	2
.1f0e					CompileTerm:
.1f0e	20 04 1b	jsr $1b04			jsr 	GetNextNonSpace 			; get first non space character.
.1f11	30 72		bmi $1f85			bmi 	_CTUnaryFunctions
.1f13	20 0e 1b	jsr $1b0e			jsr 	CharIsDigit 				; found a number
.1f16	b0 3a		bcs $1f52			bcs 	_CTDigit
.1f18	c9 2e		cmp #$2e			cmp 	#"."
.1f1a	f0 36		beq $1f52			beq 	_CTDigit
.1f1c	c9 22		cmp #$22			cmp 	#'"' 						; found a string ?
.1f1e	f0 43		beq $1f63			beq 	_CTString
.1f20	c9 25		cmp #$25			cmp 	#"%"						; binary or hexadecimal ?
.1f22	f0 28		beq $1f4c			beq 	_CTOtherBase
.1f24	c9 24		cmp #$24			cmp 	#"$"
.1f26	f0 24		beq $1f4c			beq 	_CTOtherBase
.1f28	c9 28		cmp #$28			cmp 	#"(" 						; check parenthesis
.1f2a	f0 17		beq $1f43			beq 	_CTBrackets
.1f2c	c9 41		cmp #$41			cmp 	#"A" 						; check variable/array ?
.1f2e	90 10		bcc $1f40			bcc 	_CTSyntax
.1f30	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1f32	b0 0c		bcs $1f40			bcs 	_CTSyntax
.1f34	20 a9 1e	jsr $1ea9			jsr 	GetReferenceTerm 			; figure out what it is.
.1f37	48		pha				pha 								; save type on stack
.1f38	18		clc				clc 								; read it
.1f39	20 5b 1e	jsr $1e5b			jsr 	GetSetVariable
.1f3c	68		pla				pla
.1f3d	29 40		and #$40			and 	#NSSTypeMask 				; reduce to basic type
.1f3f	60		rts				rts
.1f40					_CTSyntax:
.1f40	4c 2f 13	jmp $132f		jmp	ErrorV_syntax
.1f43					_CTBrackets:
.1f43	20 44 14	jsr $1444			jsr 	CompileExpressionAt0
.1f46	48		pha				pha
.1f47	20 89 10	jsr $1089			jsr 	CheckNextRParen
.1f4a	68		pla				pla
.1f4b	60		rts				rts
.1f4c					_CTOtherBase:
.1f4c	20 09 10	jsr $1009			jsr 	InlineNonDecimal 			; non decimal constant handler
.1f4f	a9 00		lda #$00			lda 	#NSSIFloat					; return a iFloat32 integer
.1f51	60		rts				rts
.1f52					_CTDigit:
.1f52	20 a6 1d	jsr $1da6			jsr 	ParseConstant 				; parse out an number, first is in A already.
.1f55	90 06		bcc $1f5d			bcc	 	_CTFloat 					; have a float or long int.
.1f57	20 0e 11	jsr $110e			jsr 	PushIntegerYA 				; code to push on stack
.1f5a	a9 00		lda #$00			lda 	#NSSIFloat					; return a iFloat32 integer
.1f5c	60		rts				rts
.1f5d					_CTFloat:
.1f5d	20 30 11	jsr $1130			jsr 	PushFloat  					; code to push float
.1f60	a9 00		lda #$00			lda 	#NSSIFloat 					; return a iFloat32
.1f62	60		rts				rts
.1f63					_CTString:
.1f63	20 54 10	jsr $1054			jsr 	BufferClear 				; copy it to the buffer
.1f66					_CTStringLoop:
.1f66	20 e8 1a	jsr $1ae8			jsr 	LookNext 					; reached EOL/EOS
.1f69	f0 d5		beq $1f40			beq 	_CTSyntax
.1f6b	c9 22		cmp #$22			cmp 	#'"'
.1f6d	f0 08		beq $1f77			beq 	_CTStringDone
.1f6f	20 58 10	jsr $1058			jsr 	BufferWrite 				; write and consume
.1f72	20 f9 1a	jsr $1af9			jsr 	GetNext
.1f75	80 ef		bra $1f66			bra 	_CTStringLoop
.1f77					_CTStringDone:
.1f77	20 f9 1a	jsr $1af9			jsr 	GetNext 					; consume closing quote.
.1f7a	a9 ce		lda #$ce			lda 	#PCD_CMD_STRING 			; output command and buffer
.1f7c	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1f7f	20 64 10	jsr $1064			jsr 	BufferOutput
.1f82	a9 40		lda #$40			lda 	#NSSString 					; string type
.1f84	60		rts				rts
.1f85					_CTUnaryFunctions:
.1f85	c9 ab		cmp #$ab			cmp 	#C64_MINUS 					; negation of term.
.1f87	f0 0a		beq $1f93			beq 	_CTNegation
.1f89	a2 93		ldx #$93			ldx 	#UnaryTables & $FF 			; check vs unary tables.
.1f8b	a0 18		ldy #$18			ldy 	#UnaryTables >> 8
.1f8d	20 8d 19	jsr $198d			jsr 	GeneratorProcess
.1f90	90 ae		bcc $1f40			bcc		_CTSyntax
.1f92	60		rts				rts
.1f93					_CTNegation:
.1f93	20 0e 1f	jsr $1f0e			jsr 	CompileTerm 				; compile a term.
.1f96	48		pha				pha
.1f97	29 40		and #$40			and 	#NSSTypeMask 				; if not an ifloat32 of some sort.
.1f99	c9 00		cmp #$00			cmp 	#NSSIFloat
.1f9b	d0 07		bne $1fa4			bne 	_CTType 					; error
.1f9d	a9 a5		lda #$a5			lda 	#PCD_NEGATE 				; compile negate
.1f9f	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1fa2	68		pla				pla 								; return original type.
.1fa3	60		rts				rts
.1fa4					_CTType:
.1fa4	4c 3f 13	jmp $133f		jmp	ErrorV_type
.1fa7					CommandWAIT:
.1fa7	20 eb 1a	jsr $1aeb			jsr 	LookNextNonSpace
.1faa	c9 2c		cmp #$2c			cmp 	#","
.1fac	f0 10		beq $1fbe			beq 	_CWThirdParameter
.1fae	a9 00		lda #$00			lda 	#0
.1fb0	20 21 11	jsr $1121			jsr 	PushIntegerA
.1fb3					_CWExit:
.1fb3	a9 ca		lda #$ca			lda 	#(PCD_WAIT) >> 8
.1fb5	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1fb8	a9 94		lda #$94			lda 	#(PCD_WAIT) & $FF
.1fba	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1fbd	60		rts				rts
.1fbe					_CWThirdParameter:
.1fbe	20 f9 1a	jsr $1af9			jsr 	GetNext
.1fc1	20 46 14	jsr $1446			jsr 	CompileExpressionAtA
.1fc4	29 40		and #$40			and 	#NSSTypeMask
.1fc6	c9 00		cmp #$00			cmp 	#NSSIFloat
.1fc8	f0 e9		beq $1fb3			beq 	_CWExit
.1fca	4c 3f 13	jmp $133f		jmp	ErrorV_type
.1fcd					OUTPUTWriteByte:
.1fcd	92 25		sta ($25)			sta 	(objPtr)
.1fcf	e6 25		inc $25				inc 	objPtr
.1fd1	d0 02		bne $1fd5			bne 	_HWOWBNoCarry
.1fd3	e6 26		inc $26				inc 	objPtr+1
.1fd5					_HWOWBNoCarry:
.1fd5	60		rts				rts
.1fd6					CommandCMD:
.1fd6	a9 af		lda #$af			lda 	#PCD_SETCHANNEL 			; set the channel to this now forever.
.1fd8	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1fdb	20 eb 1a	jsr $1aeb			jsr 	LookNextNonSpace 			; followed by a , ?
.1fde	c9 2c		cmp #$2c			cmp 	#","
.1fe0	d0 06		bne $1fe8			bne 	_CCMDExit
.1fe2	20 f9 1a	jsr $1af9			jsr 	GetNext 					; consume comma.
.1fe5	20 d6 1d	jsr $1dd6			jsr 	CommandPRINT 				; do the print code
.1fe8					_CCMDExit:
.1fe8	60		rts				rts
.1fe9					CommandOPEN:
.1fe9	20 eb 1a	jsr $1aeb			jsr 	LookNextNonSpace 			; followed by a , ?
.1fec	c9 2c		cmp #$2c			cmp 	#","
.1fee	d0 15		bne $2005			bne 	_COTwoDefaults
.1ff0	20 f9 1a	jsr $1af9			jsr 	GetNext 					; consume comma
.1ff3	20 44 14	jsr $1444			jsr 	CompileExpressionAt0 		; what follows could be text or number.
.1ff6	29 40		and #$40			and 	#NSSString 					; if a number want a string to follow
.1ff8	f0 1e		beq $2018			beq 	_COThreeIntegers
.1ffa	a9 00		lda #$00			lda 	#0		 					; so we have n,n,$,0 so swap !
.1ffc	20 21 11	jsr $1121			jsr 	PushIntegerA
.1fff	a9 be		lda #$be			lda 	#(PCD_SWAP) & $FF
.2001	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.2004	60		rts				rts
.2005					_COTwoDefaults:
.2005	a9 00		lda #$00			lda 	#0
.2007	20 21 11	jsr $1121			jsr 	PushIntegerA
.200a					_COCompileNullString:
.200a	a9 ce		lda #$ce			lda 	#(PCD_CMD_STRING) & $FF
.200c	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.200f	a9 00		lda #$00			lda 	#0
.2011	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.2014	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.2017	60		rts				rts
.2018					_COThreeIntegers:
.2018	20 eb 1a	jsr $1aeb			jsr 	LookNextNonSpace 			; is there a ,
.201b	c9 2c		cmp #$2c			cmp 	#","
.201d	d0 eb		bne $200a			bne 	_COCompileNullString 		; if not it is n,n,n so default filename.
.201f	20 f9 1a	jsr $1af9			jsr 	GetNext
.2022	20 44 14	jsr $1444			jsr 	CompileExpressionAt0 		; should be a filename
.2025	29 40		and #$40			and 	#NSSString
.2027	f0 01		beq $202a			beq 	_COType
.2029	60		rts				rts
.202a					_COType:
.202a	4c 3f 13	jmp $133f		jmp	ErrorV_type
.202d					XPrintCharacter
.202d	48		pha				pha
.202e	da		phx				phx
.202f	5a		phy				phy
.2030	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.2033	7a		ply				ply
.2034	fa		plx				plx
.2035	68		pla				pla
.2036	60		rts				rts
.2037					XSaveMemory:
.2037	da		phx				phx
.2038	5a		phy				phy
.2039	48		pha				pha
.203a	a9 00		lda #$00			lda 	#0 							; set LFS
.203c	a2 08		ldx #$08			ldx 	#8
.203e	a0 00		ldy #$00			ldy 	#0
.2040	20 ba ff	jsr $ffba			jsr 	$FFBA
.2043	a9 08		lda #$08			lda 	#8 							; set file name
.2045	a2 59		ldx #$59			ldx 	#SaveName & $FF
.2047	a0 20		ldy #$20			ldy 	#SaveName >> 8
.2049	20 bd ff	jsr $ffbd			jsr 	$FFBD
.204c	68		pla				pla 								; set up the start address.
.204d	85 29		sta $29				sta 	zTemp0+1
.204f	64 28		stz $28				stz 	zTemp0
.2051	a9 28		lda #$28			lda 	#zTemp0 					; from index.
.2053	7a		ply				ply 								; end in YX
.2054	fa		plx				plx
.2055	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; write out.
.2058	60		rts				rts
.2059					SaveName:
>2059	43 4f 44 45 2e 42 49 4e				.text 	"CODE.BIN"

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library

=12					MathStackSize = 12
=$40					NSSString = $40 							; string vs typemask
=$00					NSSIFloat = $00 							; ifloat vs typemask
=$20					NSSIInt16 = $20								; when set, a reference is a 16 bit reference (e.g. a%)
=$40					NSSTypeMask = $40
=$80					NSSArray = $80  							; array (in variable code)
.0032					NSStatus:
>0032							.fill 	MathStackSize
.003e					NSMantissa0:
>003e							.fill 	MathStackSize 				; (this is my integer mantissa system)
.004a					NSMantissa1:
>004a							.fill 	MathStackSize
.0056					NSMantissa2:
>0056							.fill 	MathStackSize
.0062					NSMantissa3:
>0062							.fill 	MathStackSize
.006e					NSExponent:
>006e							.fill 	MathStackSize
.0610					numberBuffer:
>0610							.fill 	34
.2061					FloatSubtract:
.2061	b5 32		lda $32,x			lda 	NSStatus,x 					; negate top of stack
.2063	49 80		eor #$80			eor 	#$80
.2065	95 32		sta $32,x			sta 	NSStatus,x					; and fall through.
.2067					FloatAdd:
.2067	ca		dex				dex
.2068	b5 6e		lda $6e,x			lda 	NSExponent,x 				; can use optimised.
.206a	15 6f		ora $6f,x			ora 	NSExponent+1,x
.206c	15 62		ora $62,x			ora 	NSMantissa3,x
.206e	15 63		ora $63,x			ora 	NSMantissa3+1,x
.2070	d0 04		bne $2076			bne 	_FAUseFloat
.2072	20 03 24	jsr $2403			jsr 	FloatInt32Add 				; use the int32 one.
.2075	60		rts				rts
.2076					_FAUseFloat:
.2076	20 98 23	jsr $2398			jsr 	FloatNormalise 				; normalise S[X]
.2079	f0 51		beq $20cc			beq 	_FAReturn1
.207b	e8		inx				inx 								; normalise S[X+1]
.207c	20 98 23	jsr $2398			jsr 	FloatNormalise
.207f	ca		dex				dex
.2080	c9 00		cmp #$00			cmp 	#0
.2082	f0 60		beq $20e4			beq 	_FAExit 					; if so, just return A
.2084	b5 6e		lda $6e,x			lda 	NSExponent,x 				; are the exponents the same ?
.2086	d5 6f		cmp $6f,x			cmp 	NSExponent+1,x
.2088	f0 18		beq $20a2			beq 	_FAExponentsEqual
.208a	b5 6e		lda $6e,x			lda 	NSExponent,x 				; work out the larger exponent
.208c	a8		tay				tay
.208d	38		sec				sec 								; do a signed comparison of the exponents.
.208e	f5 6f		sbc $6f,x			sbc 	NSExponent+1,x
.2090	50 02		bvc $2094			bvc 	_FANoSignedChange
.2092	49 80		eor #$80			eor 	#$80
.2094					_FANoSignedChange:
.2094	29 80		and #$80			and 	#$80
.2096	10 02		bpl $209a			bpl 	_FAHaveMax
.2098	b4 6f		ldy $6f,x			ldy 	NSExponent+1,x
.209a					_FAHaveMax:
.209a	20 e5 20	jsr $20e5			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.209d	e8		inx				inx
.209e	20 e5 20	jsr $20e5			jsr 	_FAShiftToExponent
.20a1	ca		dex				dex
.20a2					_FAExponentsEqual:
.20a2	b5 32		lda $32,x			lda 	NSStatus,x 					; are the signs the same
.20a4	55 33		eor $33,x			eor 	NSStatus+1,x
.20a6	30 0e		bmi $20b6			bmi 	_FADifferentSigns
.20a8	20 cf 23	jsr $23cf			jsr 	FloatAddTopTwoStack 		; do the add of the mantissae
.20ab	b5 62		lda $62,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.20ad	10 35		bpl $20e4			bpl 	_FAExit 					; if no, we are done.
.20af	20 5c 26	jsr $265c			jsr 	FloatShiftRight 				; shift A right, renormalising it.
.20b2	f6 6e		inc $6e,x			inc 	NSExponent,x 				; bump the exponent and exit
.20b4	80 2e		bra $20e4			bra 	_FAExit
.20b6					_FADifferentSigns:
.20b6	20 e9 23	jsr $23e9			jsr 	FloatSubTopTwoStack 		; subtract mantissa B from A
.20b9	b5 62		lda $62,x			lda 	NSMantissa3,x 				; is the result negative ?
.20bb	10 06		bpl $20c3			bpl 	_FACheckZero 				; if no, check for -0
.20bd	20 05 26	jsr $2605			jsr 	FloatNegate 					; netate result
.20c0	20 0c 26	jsr $260c			jsr 	FloatNegateMantissa 			; negate (2'c) the mantissa
.20c3					_FACheckZero:
.20c3	20 65 26	jsr $2665			jsr 	FloatIsZero	 				; check for -0
.20c6	d0 1c		bne $20e4			bne 	_FAExit
.20c8	74 32		stz $32,x			stz 	NSStatus,x
.20ca	80 18		bra $20e4			bra 	_FAExit
.20cc					_FAReturn1:
.20cc	b5 3f		lda $3f,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.20ce	95 3e		sta $3e,x			sta 	NSMantissa0,x
.20d0	b5 4b		lda $4b,x			lda 	NSMantissa1+1,x
.20d2	95 4a		sta $4a,x			sta 	NSMantissa1,x
.20d4	b5 57		lda $57,x			lda 	NSMantissa2+1,x
.20d6	95 56		sta $56,x			sta 	NSMantissa2,x
.20d8	b5 63		lda $63,x			lda 	NSMantissa3+1,x
.20da	95 62		sta $62,x			sta 	NSMantissa3,x
.20dc	b5 6f		lda $6f,x			lda 	NSExponent+1,x
.20de	95 6e		sta $6e,x			sta 	NSExponent,x
.20e0	b5 33		lda $33,x			lda 	NSStatus+1,x
.20e2	95 32		sta $32,x			sta 	NSStatus,x
.20e4					_FAExit:
.20e4	60		rts				rts
.20e5					_FAShiftToExponent:
.20e5					_FAShiftToExponent2:
.20e5	98		tya				tya 								; compare Y to exponent
.20e6	d5 6e		cmp $6e,x			cmp 	NSExponent,x 				; reached the exponent required ?
.20e8	f0 07		beq $20f1			beq 	_FASEExit 					; exit if so.
.20ea	20 5c 26	jsr $265c			jsr 	FloatShiftRight	 			; shift the mantissa right
.20ed	f6 6e		inc $6e,x			inc 	NSExponent,x 				; increment exponent
.20ef	80 f4		bra $20e5			bra 	_FAShiftToExponent2
.20f1					_FASEExit:
.20f1	60		rts				rts
.20f2					CompareEqual:
.20f2	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.20f4	d0 09		bne $20ff			bne 	ReturnFalse
.20f6					ReturnTrue:
.20f6	a9 01		lda #$01			lda 	#1
.20f8	95 3e		sta $3e,x			sta 	NSMantissa0,x
.20fa	a9 80		lda #$80			lda 	#$80
.20fc	95 32		sta $32,x			sta 	NSStatus,x
.20fe	60		rts				rts
.20ff					ReturnFalse:
.20ff	74 3e		stz $3e,x			stz 	NSMantissa0,x
.2101	60		rts				rts
.2102					CompareNotEqual:
.2102	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.2104	d0 f0		bne $20f6			bne 	ReturnTrue
.2106	80 f7		bra $20ff			bra 	ReturnFalse
.2108					CompareLess:
.2108	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.210a	c9 ff		cmp #$ff			cmp 	#$FF
.210c	f0 e8		beq $20f6			beq 	ReturnTrue
.210e	80 ef		bra $20ff			bra 	ReturnFalse
.2110					CompareGreater:
.2110	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.2112	c9 01		cmp #$01			cmp 	#$01
.2114	f0 e0		beq $20f6			beq 	ReturnTrue
.2116	80 e7		bra $20ff			bra 	ReturnFalse
.2118					CompareLessEqual:
.2118	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.211a	c9 01		cmp #$01			cmp 	#$01
.211c	d0 d8		bne $20f6			bne 	ReturnTrue
.211e	80 df		bra $20ff			bra 	ReturnFalse
.2120					CompareGreaterEqual:
.2120	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.2122	c9 ff		cmp #$ff			cmp 	#$FF
.2124	d0 d0		bne $20f6			bne 	ReturnTrue
.2126	80 d7		bra $20ff			bra 	ReturnFalse
.2128					FloatCompare:
.2128	b5 6e		lda $6e,x			lda 	NSExponent,x 				; float comparison.
.212a	15 6d		ora $6d,x			ora 	NSExponent-1,x 				; integer if both integer.
.212c	48		pha				pha
.212d	20 61 20	jsr $2061			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.2130	68		pla				pla
.2131	d0 0c		bne $213f			bne 	_FCCompareFloat
.2133	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.2135	15 4a		ora $4a,x			ora 	NSMantissa1,x
.2137	15 56		ora $56,x			ora 	NSMantissa2,x
.2139	15 62		ora $62,x			ora 	NSMantissa3,x
.213b	f0 14		beq $2151			beq 	_FCExit 					; if zero, return zero
.213d	80 0a		bra $2149			bra 	_FCSign
.213f					_FCCompareFloat:
.213f	b5 4a		lda $4a,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.2141	29 f0		and #$f0			and 	#$F0
.2143	15 56		ora $56,x			ora 	NSMantissa2,x
.2145	15 62		ora $62,x			ora 	NSMantissa3,x
.2147	f0 08		beq $2151			beq 	_FCExit 					; zero, so approximately identical
.2149					_FCSign:
.2149	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.214b	34 32		bit $32,x			bit 	NSStatus,x
.214d	10 02		bpl $2151			bpl 	_FCExit
.214f					_FCNegative:
.214f	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.2151					_FCExit:
.2151	20 45 26	jsr $2645			jsr 	FloatSetByte 				; set the result 255,0,1
.2154	60		rts				rts
.2155					FloatScalarTable:
>2155	66 66 66 66				.dword $66666666 ; 0.1
>2159	de					.byte $de
>215a	1f 85 eb 51				.dword $51eb851f ; 0.01
>215e	db					.byte $db
>215f	4c 37 89 41				.dword $4189374c ; 0.001
>2163	d8					.byte $d8
>2164	ac 8b db 68				.dword $68db8bac ; 0.0001
>2168	d4					.byte $d4
>2169	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>216d	d1					.byte $d1
>216e	83 de 1b 43				.dword $431bde83 ; 1e-06
>2172	ce					.byte $ce
>2173	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>2177	ca					.byte $ca
>2178	89 3b e6 55				.dword $55e63b89 ; 1e-08
>217c	c7					.byte $c7
>217d	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>2181	c4					.byte $c4
>2182	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>2186	c0					.byte $c0
>2187	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>218b	bd					.byte $bd
.218c					FloatDivide:
.218c	48		pha				pha
.218d	20 98 23	jsr $2398			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.2190	ca		dex				dex
.2191	c9 00		cmp #$00			cmp 	#0
.2193	f0 1e		beq $21b3			beq 	_FDZero
.2195	20 98 23	jsr $2398			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.2198	f0 16		beq $21b0			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.219a	20 fb 21	jsr $21fb			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.219d	20 c8 21	jsr $21c8			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.21a0	20 98 23	jsr $2398			jsr		FloatNormalise 				; renormalise
.21a3	20 8e 23	jsr $238e			jsr 	FloatCalculateSign 			; calculate result sign
.21a6	b5 6e		lda $6e,x			lda 	NSExponent,x 				; calculate exponent
.21a8	38		sec				sec
.21a9	f5 6f		sbc $6f,x			sbc 	NSExponent+1,x
.21ab	38		sec				sec
.21ac	e9 1e		sbc #$1e			sbc 	#30
.21ae	95 6e		sta $6e,x			sta 	NSExponent,x
.21b0					_FDExit:
.21b0	68		pla				pla
.21b1	18		clc				clc
.21b2	60		rts				rts
.21b3					_FDZero:
.21b3	68		pla				pla
.21b4	38		sec				sec
.21b5	60		rts				rts
.21b6					DivideInt32:
.21b6	20 7e 22	jsr $227e			jsr 	FloatIntegerPart 			; make both integers
.21b9	ca		dex				dex
.21ba	20 7e 22	jsr $227e			jsr 	FloatIntegerPart
.21bd	20 d9 21	jsr $21d9			jsr 	Int32Divide 				; divide
.21c0	20 c8 21	jsr $21c8			jsr 	NSMCopyPlusTwoToZero 		; copy result
.21c3	20 8e 23	jsr $238e			jsr 	FloatCalculateSign 			; calculate result sign
.21c6	18		clc				clc
.21c7	60		rts				rts
.21c8					NSMCopyPlusTwoToZero:
.21c8	b5 40		lda $40,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.21ca	95 3e		sta $3e,x			sta 	NSMantissa0,x
.21cc	b5 4c		lda $4c,x			lda 	NSMantissa1+2,x
.21ce	95 4a		sta $4a,x			sta 	NSMantissa1,x
.21d0	b5 58		lda $58,x			lda 	NSMantissa2+2,x
.21d2	95 56		sta $56,x			sta 	NSMantissa2,x
.21d4	b5 64		lda $64,x			lda 	NSMantissa3+2,x
.21d6	95 62		sta $62,x			sta 	NSMantissa3,x
.21d8	60		rts				rts
.21d9					Int32Divide:
.21d9	48		pha				pha 								; save AXY
.21da	5a		phy				phy
.21db	20 26 26	jsr $2626			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.21de	20 3f 26	jsr $263f			jsr 	FloatSetZeroMantissaOnly 	; set S[X] to zero
.21e1	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.21e3					_I32DivideLoop:
.21e3	e8		inx				inx
.21e4	e8		inx				inx
.21e5	20 52 26	jsr $2652			jsr 	FloatShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.21e8	ca		dex				dex
.21e9	ca		dex				dex
.21ea	20 53 26	jsr $2653			jsr 	FloatRotateLeft
.21ed	20 19 22	jsr $2219			jsr 	FloatDivideCheck 			; check if subtract possible
.21f0	90 02		bcc $21f4			bcc 	_I32DivideNoCarryIn
.21f2	f6 40		inc $40,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.21f4					_I32DivideNoCarryIn:
.21f4	88		dey				dey 								; loop round till division completed.
.21f5	d0 ec		bne $21e3			bne 	_I32DivideLoop
.21f7	7a		ply				ply 								; restore AXY and exit
.21f8	68		pla				pla
.21f9	18		clc				clc
.21fa	60		rts				rts
.21fb					Int32ShiftDivide:
.21fb	48		pha				pha 								; save AY
.21fc	5a		phy				phy
.21fd	e8		inx				inx 								; clear S[X+2]
.21fe	e8		inx				inx
.21ff	20 43 26	jsr $2643			jsr 	FloatSetZero
.2202	ca		dex				dex
.2203	ca		dex				dex
.2204	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.2206					_I32SDLoop:
.2206	20 19 22	jsr $2219			jsr 	FloatDivideCheck 			; check if subtract possible
.2209	e8		inx				inx
.220a	e8		inx				inx
.220b	20 53 26	jsr $2653			jsr 	FloatRotateLeft				; shift 64 bit FPA left, rotating carry in
.220e	ca		dex				dex
.220f	ca		dex				dex
.2210	20 53 26	jsr $2653			jsr 	FloatRotateLeft
.2213	88		dey				dey 	 							; do 31 times
.2214	d0 f0		bne $2206			bne 	_I32SDLoop
.2216	7a		ply				ply 								; restore AY and exit
.2217	68		pla				pla
.2218	60		rts				rts
.2219					FloatDivideCheck:
.2219	20 e9 23	jsr $23e9			jsr 	FloatSubTopTwoStack 		; subtract Stack[X+1] from Stack[X+0]
.221c	b0 04		bcs $2222			bcs 	_DCSExit 					; if carry set, then could do, exit
.221e	20 cf 23	jsr $23cf			jsr 	FloatAddTopTwoStack 		; add it back in
.2221	18		clc				clc 								; and return False
.2222					_DCSExit:
.2222	60		rts				rts
.2223					FloatFractionalPart:
.2223	5a		phy				phy
.2224	b5 32		lda $32,x			lda 	NSStatus,x 					; take absolute value
.2226	29 7f		and #$7f			and 	#$7F
.2228	95 32		sta $32,x			sta 	NSStatus,x
.222a	20 98 23	jsr $2398			jsr 	FloatNormalise
.222d	b5 6e		lda $6e,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.222f	38		sec				sec
.2230	e9 e0		sbc #$e0			sbc 	#$E0
.2232	90 29		bcc $225d			bcc 	_FFPExit 					; already fractional
.2234	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.2236	b0 22		bcs $225a			bcs 	_FFPZero
.2238	a8		tay				tay 								; put count to do in Y
.2239	b5 62		lda $62,x			lda 	NSMantissa3,x 				; do each in turn.
.223b	20 62 22	jsr $2262			jsr 	_FFPPartial
.223e	95 62		sta $62,x			sta 	NSMantissa3,x
.2240	b5 56		lda $56,x			lda 	NSMantissa2,x
.2242	20 62 22	jsr $2262			jsr 	_FFPPartial
.2245	95 56		sta $56,x			sta 	NSMantissa2,x
.2247	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.2249	20 62 22	jsr $2262			jsr 	_FFPPartial
.224c	95 4a		sta $4a,x			sta 	NSMantissa1,x
.224e	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.2250	20 62 22	jsr $2262			jsr 	_FFPPartial
.2253	95 3e		sta $3e,x			sta 	NSMantissa0,x
.2255	20 65 26	jsr $2665			jsr 	FloatIsZero 					; zeroed check.
.2258	d0 03		bne $225d			bne 	_FFPExit
.225a					_FFPZero:
.225a	20 43 26	jsr $2643			jsr 	FloatSetZero
.225d					_FFPExit:
.225d	20 98 23	jsr $2398			jsr 	FloatNormalise
.2260	7a		ply				ply
.2261	60		rts				rts
.2262					_FFPPartial:
.2262	c0 00		cpy #$00			cpy 	#0 							; no more to do
.2264	f0 17		beq $227d			beq 	_FFFPPExit
.2266	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.2268	b0 0c		bcs $2276			bcs 	_FFFPPWholeByte
.226a	5a		phy				phy
.226b					_FFFPPLeft:
.226b	0a		asl a				asl 	a
.226c	88		dey				dey
.226d	d0 fc		bne $226b			bne 	_FFFPPLeft
.226f	7a		ply				ply
.2270					_FFFPPRight:
.2270	4a		lsr a				lsr 	a
.2271	88		dey				dey
.2272	d0 fc		bne $2270			bne 	_FFFPPRight
.2274	80 07		bra $227d			bra 	_FFFPPExit
.2276					_FFFPPWholeByte:
.2276	98		tya				tya 								; subtract 8 from count
.2277	38		sec				sec
.2278	e9 08		sbc #$08			sbc 	#8
.227a	a8		tay				tay
.227b	a9 00		lda #$00			lda 	#0 							; and clear all
.227d					_FFFPPExit:
.227d	60		rts				rts
.227e					FloatIntegerPart:
.227e	48		pha				pha
.227f	b5 6e		lda $6e,x			lda 	NSExponent,x 				; is it integer already ?
.2281	f0 1d		beq $22a0			beq 	_FIPExit 					; if so do nothing
.2283	20 65 26	jsr $2665			jsr 	FloatIsZero 				; is it zero ?
.2286	f0 15		beq $229d			beq 	_FIPZero 					; if so return zero.
.2288	20 98 23	jsr $2398			jsr 	FloatNormalise 				; normalise
.228b	f0 10		beq $229d			beq 	_FIPZero 					; normalised to zero, exit zero
.228d					_FIPShift:
.228d	b5 6e		lda $6e,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.228f	10 07		bpl $2298			bpl 	_FIPCheckZero
.2291	20 5c 26	jsr $265c			jsr 	FloatShiftRight 			; shift mantissa right
.2294	f6 6e		inc $6e,x			inc 	NSExponent,x 				; bump exponent
.2296	80 f5		bra $228d			bra 	_FIPShift
.2298					_FIPCheckZero:
.2298	20 65 26	jsr $2665			jsr 	FloatIsZero 				; avoid -0 problem
.229b	d0 03		bne $22a0			bne 	_FIPExit 					; set to zero if mantissa zero.
.229d					_FIPZero:
.229d	20 43 26	jsr $2643			jsr 	FloatSetZero
.22a0					_FIPExit:
.22a0	68		pla				pla
.22a1	60		rts				rts
.22a2					FloatIntegerPartDown:
.22a2	48		pha				pha
.22a3	5a		phy				phy
.22a4	b5 6e		lda $6e,x			lda 	NSExponent,x 				; is it integer already ?
.22a6	f0 36		beq $22de			beq 	_FIPExit 					; if so do nothing
.22a8	20 65 26	jsr $2665			jsr 	FloatIsZero 				; is it zero ?
.22ab	f0 2e		beq $22db			beq 	_FIPZero 					; if so return zero.
.22ad	20 98 23	jsr $2398			jsr 	FloatNormalise 				; normalise
.22b0	f0 29		beq $22db			beq 	_FIPZero 					; normalised to zero, exit zero
.22b2	a0 00		ldy #$00			ldy 	#0 							; reset the count of bits.
.22b4					_FIPShift:
.22b4	b5 6e		lda $6e,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.22b6	10 0a		bpl $22c2			bpl 	_FIPCheckDown
.22b8	20 5c 26	jsr $265c			jsr 	FloatShiftRight 			; shift mantissa right
.22bb	90 01		bcc $22be			bcc 	_FIPNoFrac 					; shifted a zero out ?
.22bd	c8		iny				iny
.22be					_FIPNoFrac:
.22be	f6 6e		inc $6e,x			inc 	NSExponent,x 				; bump exponent
.22c0	80 f2		bra $22b4			bra 	_FIPShift
.22c2					_FIPCheckDown:
.22c2	c0 00		cpy #$00			cpy 	#0 							; were there any fractional bits.
.22c4	f0 10		beq $22d6			beq 	_FIPCheckZero
.22c6	34 32		bit $32,x			bit 	NSStatus,x 					; +ve
.22c8	10 0c		bpl $22d6			bpl 	_FIPCheckZero
.22ca	e8		inx				inx 								; -ve so round *down*.
.22cb	a9 01		lda #$01			lda 	#1
.22cd	20 45 26	jsr $2645			jsr 	FloatSetByte
.22d0	20 05 26	jsr $2605			jsr 	FloatNegate
.22d3	20 67 20	jsr $2067			jsr 	FloatAdd
.22d6					_FIPCheckZero:
.22d6	20 65 26	jsr $2665			jsr 	FloatIsZero 				; avoid -0 problem
.22d9	d0 03		bne $22de			bne 	_FIPExit 					; set to zero if mantissa zero.
.22db					_FIPZero:
.22db	20 43 26	jsr $2643			jsr 	FloatSetZero
.22de					_FIPExit:
.22de	7a		ply				ply
.22df	68		pla				pla
.22e0	60		rts				rts
.22e1					FloatInt8Multiply:
.22e1	5a		phy				phy
.22e2	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; right shifted multiplier in Y
.22e4	a8		tay				tay
.22e5	74 3e		stz $3e,x			stz 	NSMantissa0,x 				; zero the result (already 8 bit constant)
.22e7					_FI8MLoop:
.22e7	98		tya				tya 								; shift right shifter right into carry
.22e8	4a		lsr a				lsr 	a
.22e9	a8		tay				tay
.22ea	90 0d		bcc $22f9			bcc 	_FI8MNoAdd
.22ec	18		clc				clc
.22ed	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.22ef	75 3f		adc $3f,x			adc 	NSMantissa0+1,x
.22f1	95 3e		sta $3e,x			sta 	NSMantissa0,x
.22f3	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.22f5	75 4b		adc $4b,x			adc 	NSMantissa1+1,x
.22f7	95 4a		sta $4a,x			sta 	NSMantissa1,x
.22f9					_FI8MNoAdd:
.22f9	16 3f		asl $3f,x			asl 	NSMantissa0+1,x 			; shift adder left
.22fb	36 4b		rol $4b,x			rol 	NSMantissa1+1,x
.22fd	c0 00		cpy #$00			cpy 	#0
.22ff	d0 e6		bne $22e7			bne 	_FI8MLoop 					; until right shifter zero.
.2301	7a		ply				ply
.2302	60		rts				rts
.2303					FloatMultiply:
.2303	ca		dex				dex
.2304	b5 6e		lda $6e,x			lda 	NSExponent,x 				; can use optimised ?
.2306	15 6f		ora $6f,x			ora 	NSExponent+1,x
.2308	15 62		ora $62,x			ora 	NSMantissa3,x
.230a	15 63		ora $63,x			ora 	NSMantissa3+1,x
.230c	d0 21		bne $232f			bne 	_FMUseFloat
.230e	b5 32		lda $32,x			lda 	NSStatus,x 					; check if it is 8 bit unsigned
.2310	15 33		ora $33,x			ora 	NSStatus+1,x
.2312	29 80		and #$80			and 	#$80
.2314	15 62		ora $62,x			ora 	NSMantissa3,x
.2316	15 56		ora $56,x			ora 	NSMantissa2,x
.2318	15 4a		ora $4a,x			ora 	NSMantissa1,x
.231a	15 63		ora $63,x			ora 	NSMantissa3+1,x
.231c	15 57		ora $57,x			ora 	NSMantissa2+1,x
.231e	15 4b		ora $4b,x			ora 	NSMantissa1+1,x
.2320	d0 04		bne $2326			bne 	_FMInt32
.2322	20 e1 22	jsr $22e1			jsr 	FloatInt8Multiply 			; use fast 8x8 multiply.
.2325	60		rts				rts
.2326					_FMInt32:
.2326	20 50 23	jsr $2350			jsr 	FloatMultiplyShort			; use the int32 one.
.2329	18		clc				clc 								; fix it up if gone out of range
.232a	75 6e		adc $6e,x			adc 	NSExponent,x
.232c	95 6e		sta $6e,x			sta 	NSExponent,x
.232e	60		rts				rts
.232f					_FMUseFloat:
.232f	20 98 23	jsr $2398			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.2332	f0 18		beq $234c			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.2334	e8		inx				inx
.2335	20 98 23	jsr $2398			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.2338	ca		dex				dex
.2339	c9 00		cmp #$00			cmp 	#0
.233b	f0 0c		beq $2349			beq 	_FDSetZero
.233d	20 50 23	jsr $2350			jsr 	FloatMultiplyShort 			; calculate the result.
.2340	75 6e		adc $6e,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.2342	18		clc				clc
.2343	75 6f		adc $6f,x			adc 	NSExponent+1,x
.2345	95 6e		sta $6e,x			sta 	NSExponent,x
.2347	80 03		bra $234c			bra 	_FDExit
.2349					_FDSetZero:
.2349	20 43 26	jsr $2643			jsr 	FloatSetZero 				; return 0
.234c					_FDExit:
.234c	20 98 23	jsr $2398			jsr 	FloatNormalise 				; normalise the result
.234f	60		rts				rts
.2350					FloatMultiplyShort:
.2350	5a		phy				phy 								; save Y
.2351	20 26 26	jsr $2626			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.2354	20 3f 26	jsr $263f			jsr 	FloatSetZeroMantissaOnly 	; set mantissa S[X] to zero
.2357	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.2359					_I32MLoop:
.2359	b5 40		lda $40,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.235b	15 4c		ora $4c,x			ora 	NSMantissa1+2,x
.235d	15 58		ora $58,x			ora 	NSMantissa2+2,x
.235f	15 64		ora $64,x			ora 	NSMantissa3+2,x
.2361	f0 25		beq $2388			beq 	_I32MExit 					; exit if zero
.2363	b5 40		lda $40,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.2365	29 01		and #$01			and 	#1
.2367	f0 0d		beq $2376			beq 	_I32MNoAdd
.2369	20 cf 23	jsr $23cf			jsr 	FloatAddTopTwoStack 		; if so add S[X+1] to S[X+0]
.236c	b5 62		lda $62,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.236e	10 06		bpl $2376			bpl 	_I32MNoAdd
.2370					_I32ShiftRight:
.2370	20 5c 26	jsr $265c			jsr 	FloatShiftRight 			; shift S[X] right
.2373	c8		iny				iny 								; increment shift count
.2374	80 09		bra $237f			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.2376					_I32MNoAdd:
.2376	34 63		bit $63,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.2378	70 f6		bvs $2370			bvs 	_I32ShiftRight 				; instead.
.237a	e8		inx				inx
.237b	20 52 26	jsr $2652			jsr 	FloatShiftLeft 				; shift additive S[X+1] left
.237e	ca		dex				dex
.237f					_I32MShiftUpper:
.237f	e8		inx				inx 								; shift S[X+2] right
.2380	e8		inx				inx
.2381	20 5c 26	jsr $265c			jsr 	FloatShiftRight
.2384	ca		dex				dex
.2385	ca		dex				dex
.2386	80 d1		bra $2359			bra 	_I32MLoop 					; try again.
.2388					_I32MExit:
.2388	20 8e 23	jsr $238e			jsr 	FloatCalculateSign
.238b	98		tya				tya 								; shift in A
.238c	7a		ply				ply 								; restore Y and exit
.238d	60		rts				rts
.238e					FloatCalculateSign:
.238e	b5 32		lda $32,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.2390	16 32		asl $32,x			asl 	NSStatus,x 					; shift result left
.2392	55 33		eor $33,x			eor 	NSStatus+1,x
.2394	0a		asl a				asl 	a 							; shift bit 7 into carry
.2395	76 32		ror $32,x			ror 	NSStatus,x 					; shift right into status byte.
.2397	60		rts				rts
.2398					FloatNormalise:
.2398	20 65 26	jsr $2665			jsr 	FloatIsZero 				; if zero exit
.239b	d0 07		bne $23a4			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.239d	16 32		asl $32,x			asl 	NSStatus,x 					; clear the sign bit.
.239f	76 32		ror $32,x			ror 	NSStatus,x 					; (no -0)
.23a1	a9 00		lda #$00			lda 	#0 							; set Z flag
.23a3	60		rts				rts
.23a4					_NSNormaliseOptimise:
.23a4	b5 62		lda $62,x			lda 	NSMantissa3,x 				; upper byte zero ?
.23a6	d0 19		bne $23c1			bne 	_NSNormaliseLoop
.23a8	b5 56		lda $56,x			lda 	NSMantissa2,x 				; byte normalise
.23aa	30 15		bmi $23c1			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.23ac	95 62		sta $62,x			sta 	NSMantissa3,x
.23ae	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.23b0	95 56		sta $56,x			sta 	NSMantissa2,x
.23b2	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.23b4	95 4a		sta $4a,x			sta 	NSMantissa1,x
.23b6	74 3e		stz $3e,x			stz 	NSMantissa0,x
.23b8	b5 6e		lda $6e,x			lda 	NSExponent,x
.23ba	38		sec				sec
.23bb	e9 08		sbc #$08			sbc 	#8
.23bd	95 6e		sta $6e,x			sta 	NSExponent,x
.23bf	80 e3		bra $23a4			bra 	_NSNormaliseOptimise
.23c1					_NSNormaliseLoop:
.23c1	34 62		bit $62,x			bit 	NSMantissa3,x 				; bit 30 set ?
.23c3	70 07		bvs $23cc			bvs 	_NSNExit 					; exit if so with Z flag clear
.23c5	20 52 26	jsr $2652			jsr 	FloatShiftLeft 				; shift mantissa left
.23c8	d6 6e		dec $6e,x			dec 	NSExponent,x 				; adjust exponent
.23ca	80 f5		bra $23c1			bra 	_NSNormaliseLoop
.23cc					_NSNExit:
.23cc	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.23ce	60		rts				rts
.23cf					FloatAddTopTwoStack:
.23cf	18		clc				clc
.23d0	b5 3e		lda $3e,x			lda		NSMantissa0,x
.23d2	75 3f		adc $3f,x			adc 		NSMantissa0+1,x
.23d4	95 3e		sta $3e,x			sta 	NSMantissa0,x
.23d6	b5 4a		lda $4a,x			lda		NSMantissa1,x
.23d8	75 4b		adc $4b,x			adc 		NSMantissa1+1,x
.23da	95 4a		sta $4a,x			sta 	NSMantissa1,x
.23dc	b5 56		lda $56,x			lda		NSMantissa2,x
.23de	75 57		adc $57,x			adc 		NSMantissa2+1,x
.23e0	95 56		sta $56,x			sta 	NSMantissa2,x
.23e2	b5 62		lda $62,x			lda		NSMantissa3,x
.23e4	75 63		adc $63,x			adc 		NSMantissa3+1,x
.23e6	95 62		sta $62,x			sta 	NSMantissa3,x
.23e8	60		rts				rts
.23e9					FloatSubTopTwoStack:
.23e9	38		sec				sec
.23ea	b5 3e		lda $3e,x			lda		NSMantissa0,x
.23ec	f5 3f		sbc $3f,x			sbc 		NSMantissa0+1,x
.23ee	95 3e		sta $3e,x			sta 	NSMantissa0,x
.23f0	b5 4a		lda $4a,x			lda		NSMantissa1,x
.23f2	f5 4b		sbc $4b,x			sbc 		NSMantissa1+1,x
.23f4	95 4a		sta $4a,x			sta 	NSMantissa1,x
.23f6	b5 56		lda $56,x			lda		NSMantissa2,x
.23f8	f5 57		sbc $57,x			sbc 		NSMantissa2+1,x
.23fa	95 56		sta $56,x			sta 	NSMantissa2,x
.23fc	b5 62		lda $62,x			lda		NSMantissa3,x
.23fe	f5 63		sbc $63,x			sbc 		NSMantissa3+1,x
.2400	95 62		sta $62,x			sta 	NSMantissa3,x
.2402	60		rts				rts
.2403					FloatInt32Add:
.2403	b5 32		lda $32,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.2405	55 33		eor $33,x			eor 	NSStatus+1,x
.2407	30 04		bmi $240d			bmi 	_DiffSigns
.2409	20 cf 23	jsr $23cf			jsr		FloatAddTopTwoStack
.240c	60		rts				rts
.240d					_DiffSigns:
.240d	20 e9 23	jsr $23e9			jsr 	FloatSubTopTwoStack 		; do a physical subtraction
.2410	34 62		bit $62,x			bit 	NSMantissa3,x 				; result is +ve, okay
.2412	10 07		bpl $241b			bpl 	_AddExit
.2414	b5 33		lda $33,x			lda 	NSStatus+1,x 				; sign is that of 11th value
.2416	95 32		sta $32,x			sta 	NSStatus,x
.2418	20 0c 26	jsr $260c			jsr 	FloatNegateMantissa 		; negate the mantissa and exit
.241b					_AddExit:
.241b	20 65 26	jsr $2665			jsr 	FloatIsZero 				; check for -0
.241e	d0 02		bne $2422			bne 	_AddNonZero
.2420	74 32		stz $32,x			stz 	NSStatus,x
.2422					_AddNonZero:
.2422	60		rts				rts
=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.2423					FloatEncodeStart:
.2423	38		sec				sec
.2424	80 01		bra $2427			bra 	FloatEncodeContinue+1
.2426					FloatEncodeContinue:
.2426	18		clc				clc
.2427					FloatEncode:
.2427	08		php				php 								; save reset flag.
.2428	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.242a	f0 15		beq $2441			beq 	_ENIsOkay
.242c	c9 30		cmp #$30			cmp 	#"0"
.242e	90 04		bcc $2434			bcc 	_ENBadNumber
.2430	c9 3a		cmp #$3a			cmp 	#"9"+1
.2432	90 0d		bcc $2441			bcc 	_ENIsOkay
.2434					_ENBadNumber:
.2434	28		plp				plp 								; throw saved reset
.2435	ad 32 06	lda $0632			lda 	encodeState 				; if in decimal mode, construct final number
.2438	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.243a	d0 03		bne $243f			bne 	_ENFail
.243c	4c b9 24	jmp $24b9			jmp 	_ENConstructFinal
.243f					_ENFail:
.243f	18		clc				clc 								; not allowed
.2440	60		rts				rts
.2441					_ENIsOkay:
.2441	28		plp				plp 								; are we restarting
.2442	90 15		bcc $2459			bcc 	_ENNoRestart
.2444					_ENStartEncode:
.2444	c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.2446	f0 0c		beq $2454			beq 	_ENFirstDP
.2448	29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.244a	20 45 26	jsr $2645			jsr 	FloatSetByte 				; in single byte mode.
.244d	a9 01		lda #$01			lda 	#ESTA_Low
.244f					_ENExitChange:
.244f	8d 32 06	sta $0632			sta 	encodeState 				; save new state
.2452	38		sec				sec
.2453	60		rts				rts
.2454					_ENFirstDP:
.2454	20 43 26	jsr $2643			jsr 	FloatSetZero 				; clear integer part
.2457	80 3c		bra $2495			bra 	_ESTASwitchFloat			; go straight to float and exi
.2459					_ENNoRestart:
.2459	48		pha				pha 								; save digit or DP on stack.
.245a	ad 32 06	lda $0632			lda 	encodeState 				; get current state
.245d	c9 01		cmp #$01			cmp 	#ESTA_Low
.245f	f0 09		beq $246a			beq  	_ESTALowState
.2461	c9 02		cmp #$02			cmp 	#ESTA_High
.2463	f0 26		beq $248b			beq 	_ESTAHighState
.2465	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.2467	f0 38		beq $24a1			beq 	_ESTADecimalState
>2469	db						.byte 	$DB 						; causes a break in the emulator
.246a					_ESTALowState:
.246a	68		pla				pla 								; get value back
.246b	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.246d	f0 26		beq $2495			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.246f	29 0f		and #$0f			and 	#15 						; make digit
.2471	8d 33 06	sta $0633			sta 	digitTemp 					; save it.
.2474	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.2476	0a		asl a				asl 	a
.2477	0a		asl a				asl 	a
.2478	75 3e		adc $3e,x			adc 	NSMantissa0,x
.247a	0a		asl a				asl 	a
.247b	6d 33 06	adc $0633			adc 	digitTemp
.247e	95 3e		sta $3e,x			sta 	NSMantissa0,x
.2480	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.2482	90 05		bcc $2489			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.2484	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.2486	8d 32 06	sta $0632			sta 	encodeState
.2489					_ESTANoSwitch:
.2489	38		sec				sec
.248a	60		rts				rts
.248b					_ESTAHighState:
.248b	68		pla				pla 								; get value back
.248c	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.248e	f0 05		beq $2495			beq 	_ESTASwitchFloat
.2490	20 eb 24	jsr $24eb			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.2493	38		sec				sec
.2494	60		rts				rts
.2495					_ESTASwitchFloat:
.2495	9c 34 06	stz $0634			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.2498	e8		inx				inx 								; zero the decimal additive.
.2499	20 43 26	jsr $2643			jsr 	FloatSetZero
.249c	ca		dex				dex
.249d	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.249f	80 ae		bra $244f			bra 	_ENExitChange
.24a1					_ESTADecimalState:
.24a1	68		pla				pla 								; digit.
.24a2	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 11th decimal point.
.24a4	f0 99		beq $243f			beq 	_ENFail
.24a6	e8		inx				inx 								; put digit into fractional part of X+1
.24a7	20 eb 24	jsr $24eb			jsr 	ESTAShiftDigitIntoMantissa
.24aa	ca		dex				dex
.24ab	ee 34 06	inc $0634			inc 	decimalCount 				; bump the count of decimals
.24ae	ad 34 06	lda $0634			lda 	decimalCount 				; too many decimal digits.
.24b1	c9 0b		cmp #$0b			cmp 	#11
.24b3	f0 02		beq $24b7			beq 	_ESTADSFail
.24b5	38		sec				sec
.24b6	60		rts				rts
.24b7					_ESTADSFail:
.24b7	18		clc				clc
.24b8	60		rts				rts
.24b9					_ENConstructFinal:
.24b9	ad 34 06	lda $0634			lda 	decimalCount 				; get decimal count
.24bc	f0 2b		beq $24e9			beq 	_ENCFExit 					; no decimals
.24be	5a		phy				phy
.24bf	0a		asl a				asl 	a 							; x 4 and CLC
.24c0	0a		asl a				asl 	a
.24c1	6d 34 06	adc $0634			adc 	decimalCount
.24c4	a8		tay				tay
.24c5	b9 50 21	lda $2150,y			lda 	FloatScalarTable-5,y 		; copy decimal scalar to X+2
.24c8	95 40		sta $40,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.24ca	b9 51 21	lda $2151,y			lda 	FloatScalarTable-5+1,y
.24cd	95 4c		sta $4c,x			sta 	NSMantissa1+2,x
.24cf	b9 52 21	lda $2152,y			lda 	FloatScalarTable-5+2,y
.24d2	95 58		sta $58,x			sta 	NSMantissa2+2,x
.24d4	b9 53 21	lda $2153,y			lda 	FloatScalarTable-5+3,y
.24d7	95 64		sta $64,x			sta 	NSMantissa3+2,x
.24d9	b9 54 21	lda $2154,y			lda 	FloatScalarTable-5+4,y
.24dc	95 70		sta $70,x			sta 	NSExponent+2,x
.24de	74 34		stz $34,x			stz 	NSStatus+2,x 				; make +ve
.24e0	e8		inx				inx 								; multiply decimal const by decimal scalar
.24e1	e8		inx				inx
.24e2	20 03 23	jsr $2303			jsr 	FloatMultiply
.24e5	20 67 20	jsr $2067			jsr 	FloatAdd 					; add to integer part.
.24e8	7a		ply				ply
.24e9					_ENCFExit:
.24e9	18		clc				clc 								; reject the digit.
.24ea	60		rts				rts
.24eb					ESTAShiftDigitIntoMantissa:
.24eb	29 0f		and #$0f			and 	#15 						; save digit
.24ed	48		pha				pha
.24ee	b5 62		lda $62,x			lda 	NSMantissa3,x 				; push mantissa on stack
.24f0	48		pha				pha
.24f1	b5 56		lda $56,x			lda 	NSMantissa2,x
.24f3	48		pha				pha
.24f4	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.24f6	48		pha				pha
.24f7	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.24f9	48		pha				pha
.24fa	20 52 26	jsr $2652			jsr 	FloatShiftLeft 				; x 2
.24fd	20 52 26	jsr $2652			jsr 	FloatShiftLeft 				; x 4
.2500	18		clc				clc 								; pop mantissa and add
.2501	68		pla				pla
.2502	75 3e		adc $3e,x			adc 	NSMantissa0,x
.2504	95 3e		sta $3e,x			sta 	NSMantissa0,x
.2506	68		pla				pla
.2507	75 4a		adc $4a,x			adc 	NSMantissa1,x
.2509	95 4a		sta $4a,x			sta 	NSMantissa1,x
.250b	68		pla				pla
.250c	75 56		adc $56,x			adc 	NSMantissa2,x
.250e	95 56		sta $56,x			sta 	NSMantissa2,x
.2510	68		pla				pla
.2511	75 62		adc $62,x			adc 	NSMantissa3,x
.2513	95 62		sta $62,x			sta 	NSMantissa3,x 				; x 5
.2515	20 52 26	jsr $2652			jsr 	FloatShiftLeft 				; x 10
.2518	68		pla				pla 								; add digit
.2519	18		clc				clc
.251a	75 3e		adc $3e,x			adc 	NSMantissa0,x
.251c	95 3e		sta $3e,x			sta 	NSMantissa0,x
.251e	90 0a		bcc $252a			bcc 	_ESTASDExit
.2520	f6 4a		inc $4a,x			inc 	NSMantissa1,x
.2522	d0 06		bne $252a			bne 	_ESTASDExit
.2524	f6 56		inc $56,x			inc 	NSMantissa2,x
.2526	d0 02		bne $252a			bne 	_ESTASDExit
.2528	f6 62		inc $62,x			inc 	NSMantissa3,x
.252a					_ESTASDExit:
.252a	60		rts				rts
.0632					encodeState:
>0632							.fill 	1
.0633					digitTemp:
>0633							.fill 	1
.0634					decimalCount:
>0634							.fill 	1
.252b					FloatToString:
.252b	da		phx				phx
.252c	5a		phy				phy 								; save code position
.252d	8d 35 06	sta $0635			sta 	decimalPlaces	 			; save number of DPs.
.2530	9c 36 06	stz $0636			stz 	dbOffset 					; offset into decimal buffer = start.
.2533	b5 32		lda $32,x			lda 	NSStatus,x  				; is it -ve.
.2535	10 08		bpl $253f			bpl 	_CNTSNotNegative
.2537	29 7f		and #$7f			and 	#$7F 						; make +ve
.2539	95 32		sta $32,x			sta 	NSStatus,x
.253b	a9 2d		lda #$2d			lda 	#"-"
.253d	80 02		bra $2541			bra 	_CNTMain
.253f					_CNTSNotNegative:
.253f	a9 20		lda #$20			lda 	#" "
.2541					_CNTMain:
.2541	20 a3 25	jsr $25a3			jsr 	WriteDecimalBuffer
.2544	b5 6e		lda $6e,x			lda 	NSExponent,x 				; check if decimal
.2546	f0 0d		beq $2555			beq 	_CNTSNotFloat
.2548	e8		inx				inx 								; round up so we don't get too many 6.999999
.2549	a9 01		lda #$01			lda 	#1
.254b	20 45 26	jsr $2645			jsr 	FloatSetByte
.254e	b5 6d		lda $6d,x			lda		NSExponent-1,x
.2550	95 6e		sta $6e,x			sta 	NSExponent,x
.2552	20 67 20	jsr $2067			jsr 	FloatAdd
.2555					_CNTSNotFloat:
.2555	20 85 25	jsr $2585			jsr 	MakePlusTwoString 			; do the integer part.
.2558	20 23 22	jsr $2223			jsr 	FloatFractionalPart 		; get the fractional part
.255b	20 98 23	jsr $2398			jsr 	FloatNormalise					; normalise , exit if zero
.255e	f0 22		beq $2582			beq 	_CNTSExit
.2560	a9 2e		lda #$2e			lda 	#"."
.2562	20 a3 25	jsr $25a3			jsr 	WriteDecimalBuffer 			; write decimal place
.2565					_CNTSDecimal:
.2565	ce 35 06	dec $0635			dec 	decimalPlaces 				; done all the decimals
.2568	30 18		bmi $2582			bmi 	_CNTSExit
.256a	e8		inx				inx 								; x 10.0
.256b	a9 0a		lda #$0a			lda 	#10
.256d	20 45 26	jsr $2645			jsr 	FloatSetByte
.2570	20 03 23	jsr $2303			jsr 	FloatMultiply
.2573	20 85 25	jsr $2585			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.2576	20 23 22	jsr $2223			jsr 	FloatFractionalPart 		; get the fractional part
.2579	20 98 23	jsr $2398			jsr 	FloatNormalise 				; normalise it.
.257c	b5 6e		lda $6e,x			lda 	NSExponent,x 				; gone to zero, exit.
.257e	c9 d0		cmp #$d0			cmp 	#$D0 						; very small remainder, so don't bother.
.2580	b0 e3		bcs $2565			bcs 	_CNTSDecimal 				; keep going.
.2582					_CNTSExit:
.2582	7a		ply				ply
.2583	fa		plx				plx
.2584	60		rts				rts
.2585					MakePlusTwoString:
.2585	da		phx				phx
.2586	20 26 26	jsr $2626			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.2589	e8		inx				inx 								; access it
.258a	e8		inx				inx
.258b	20 7e 22	jsr $227e			jsr 	FloatIntegerPart 			; make it an integer
.258e	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.2590	20 c2 25	jsr $25c2			jsr 	ConvertInt32
.2593	a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.2595					_MPTSCopy:
.2595	bd 10 06	lda $0610,x			lda 	numberBuffer,x
.2598	20 a3 25	jsr $25a3			jsr 	WriteDecimalBuffer
.259b	e8		inx				inx
.259c	bd 10 06	lda $0610,x			lda 	numberBuffer,x
.259f	d0 f4		bne $2595			bne 	_MPTSCopy
.25a1	fa		plx				plx
.25a2	60		rts				rts
.25a3					WriteDecimalBuffer:
.25a3	da		phx				phx
.25a4	ae 36 06	ldx $0636			ldx 	dbOffset
.25a7	9d 37 06	sta $0637,x			sta 	decimalBuffer,x
.25aa	9e 38 06	stz $0638,x			stz 	decimalBuffer+1,x
.25ad	ee 36 06	inc $0636			inc 	dbOffset
.25b0	fa		plx				plx
.25b1	60		rts				rts
.0635					decimalPlaces:
>0635							.fill 	1
.0636					dbOffset:
>0636							.fill 	1
.0637					decimalBuffer:
>0637							.fill 	32
.25b2					ConvertInt16:
.25b2	85 3e		sta $3e				sta 	NSMantissa0 				; set up as 32 bit conversion
.25b4	86 4a		stx $4a				stx 	NSMantissa1
.25b6	64 56		stz $56				stz 	NSMantissa2
.25b8	64 62		stz $62				stz 	NSMantissa3
.25ba	64 32		stz $32				stz 	NSStatus 					; positive integer
.25bc	a2 00		ldx #$00			ldx 	#0 							; stack level
.25be	a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.25c0	80 00		bra $25c2			bra 	ConvertInt32
.25c2					ConvertInt32:
.25c2	5a		phy				phy
.25c3	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.25c5	24 32		bit $32				bit 	NSStatus 					; output a - if not negative.
.25c7	10 08		bpl $25d1			bpl 	_CI32NotNeg
.25c9	48		pha				pha
.25ca	a9 2d		lda #$2d			lda 	#'-'
.25cc	99 10 06	sta $0610,y			sta 	numberBuffer,y
.25cf	c8		iny				iny
.25d0	68		pla				pla
.25d1					_CI32NotNeg:
.25d1	20 df 25	jsr $25df			jsr 	_CI32DivideConvert 			; recursive conversion
.25d4	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.25d6	99 10 06	sta $0610,y			sta 	numberBuffer,y
.25d9	7a		ply				ply
.25da	a2 06		ldx #$06			ldx 	#numberBuffer >> 8 			; return address in XA
.25dc	a9 10		lda #$10			lda 	#numberBuffer & $FF
.25de	60		rts				rts
.25df					_CI32DivideConvert:
.25df	e8		inx				inx 								; write to next slot up
.25e0	20 45 26	jsr $2645			jsr 	FloatSetByte 		 		; write the base out.
.25e3	ca		dex				dex
.25e4	20 d9 21	jsr $21d9			jsr 	Int32Divide 				; divide
.25e7	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; save remainder
.25e9	48		pha				pha
.25ea	20 c8 21	jsr $21c8			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.25ed	20 65 26	jsr $2665			jsr 	FloatIsZero 				; is it zero ?
.25f0	f0 05		beq $25f7			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.25f2	b5 3f		lda $3f,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.25f4	20 df 25	jsr $25df			jsr 	_CI32DivideConvert 			; and recusrively call.
.25f7					_CI32NoRecurse:
.25f7	68		pla				pla 								; remainder
.25f8	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.25fa	90 02		bcc $25fe			bcc 	_CI32NotHex
.25fc	69 26		adc #$26			adc 	#6+32
.25fe					_CI32NotHex:
.25fe	69 30		adc #$30			adc 	#48
.2600	99 10 06	sta $0610,y			sta 	numberBuffer,y 				; write out and exit
.2603	c8		iny				iny
.2604	60		rts				rts
.2605					FloatNegate:
.2605	b5 32		lda $32,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.2607	49 80		eor #$80			eor 	#$80  						; toggle the negative flag
.2609	95 32		sta $32,x			sta 	NSStatus,x
.260b	60		rts				rts
.260c					FloatNegateMantissa:
.260c	38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.260d	a9 00		lda #$00			lda 	#0
.260f	f5 3e		sbc $3e,x			sbc 	NSMantissa0,x
.2611	95 3e		sta $3e,x			sta 	NSMantissa0,x
.2613	a9 00		lda #$00			lda 	#0
.2615	f5 4a		sbc $4a,x			sbc 	NSMantissa1,x
.2617	95 4a		sta $4a,x			sta 	NSMantissa1,x
.2619	a9 00		lda #$00			lda 	#0
.261b	f5 56		sbc $56,x			sbc 	NSMantissa2,x
.261d	95 56		sta $56,x			sta 	NSMantissa2,x
.261f	a9 00		lda #$00			lda 	#0
.2621	f5 62		sbc $62,x			sbc 	NSMantissa3,x
.2623	95 62		sta $62,x			sta 	NSMantissa3,x
.2625	60		rts				rts
.2626					FloatShiftUpTwo:
.2626	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.2628	95 40		sta $40,x			sta 	NSMantissa0+2,x
.262a	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.262c	95 4c		sta $4c,x			sta 	NSMantissa1+2,x
.262e	b5 56		lda $56,x			lda 	NSMantissa2,x
.2630	95 58		sta $58,x			sta 	NSMantissa2+2,x
.2632	b5 62		lda $62,x			lda 	NSMantissa3,x
.2634	95 64		sta $64,x			sta 	NSMantissa3+2,x
.2636	b5 6e		lda $6e,x			lda 	NSExponent,x
.2638	95 70		sta $70,x			sta 	NSExponent+2,x
.263a	b5 32		lda $32,x			lda 	NSStatus,x
.263c	95 34		sta $34,x			sta 	NSStatus+2,x
.263e	60		rts				rts
.263f					FloatSetZeroMantissaOnly:
.263f	74 3e		stz $3e,x			stz 	NSMantissa0,x
.2641	80 08		bra $264b			bra 	FloatZero13
.2643					FloatSetZero:
.2643	a9 00		lda #$00			lda 	#0
.2645					FloatSetByte:
.2645	74 6e		stz $6e,x			stz 	NSExponent,x 				; zero exponent, as +ve integer value.
.2647					FloatSetMantissa:
.2647	95 3e		sta $3e,x			sta 	NSMantissa0,x 				; zero mantissa
.2649	74 32		stz $32,x			stz 	NSStatus,x
.264b					FloatZero13:
.264b	74 4a		stz $4a,x			stz 	NSMantissa1,x
.264d	74 56		stz $56,x			stz 	NSMantissa2,x
.264f	74 62		stz $62,x			stz 	NSMantissa3,x
.2651	60		rts				rts
.2652					FloatShiftLeft:
.2652	18		clc				clc
.2653					FloatRotateLeft:
.2653	36 3e		rol $3e,x			rol 	NSMantissa0,x
.2655	36 4a		rol $4a,x			rol		NSMantissa1,x
.2657	36 56		rol $56,x			rol		NSMantissa2,x
.2659	36 62		rol $62,x			rol		NSMantissa3,x
.265b	60		rts				rts
.265c					FloatShiftRight:
.265c	56 62		lsr $62,x			lsr 	NSMantissa3,x
.265e	76 56		ror $56,x			ror		NSMantissa2,x
.2660	76 4a		ror $4a,x			ror		NSMantissa1,x
.2662	76 3e		ror $3e,x			ror		NSMantissa0,x
.2664	60		rts				rts
.2665					FloatIsZero:
.2665	b5 62		lda $62,x			lda 	NSMantissa3,x
.2667	15 56		ora $56,x			ora		NSMantissa2,x
.2669	15 4a		ora $4a,x			ora		NSMantissa1,x
.266b	15 3e		ora $3e,x			ora		NSMantissa0,x
.266d	60		rts				rts

;******  Processing input file: testing/testend.asm

.266e					EndProgram:
>266e	01 08 0c 08 0a 00 4e 20				.binary "code/tokenised.dat"
>2676	b2 20 33 34 00 15 08 14 00 ce 86 20 33 00 23 08
>2686	3c 00 99 20 c7 28 31 34 37 29 3b 00 3f 08 46 00
>2696	86 20 42 58 28 4e 29 3a 86 20 42 59 28 4e 29 3a
>26a6	86 20 42 43 28 4e 29 00 53 08 4b 00 86 20 44 58
>26b6	28 4e 29 3a 86 20 44 59 28 4e 29 00 61 08 50 00
>26c6	81 20 42 b2 30 20 a4 20 4e 00 7a 08 5a 00 42 58
>26d6	28 42 29 b2 b5 28 bb 28 31 29 ac 34 30 29 ac 32
>26e6	aa 31 00 93 08 64 00 42 59 28 42 29 b2 b5 28 bb
>26f6	28 31 29 ac 33 30 29 ac 32 35 36 00 aa 08 69 00
>2706	42 43 28 42 29 b2 b5 28 bb 28 31 29 ac 31 34 29
>2716	aa 31 00 be 08 6a 00 44 58 28 42 29 b2 b5 28 bb
>2726	28 31 29 ac 32 29 00 d4 08 6c 00 8f 20 44 59 28
>2736	42 29 b2 b5 28 bb 28 31 29 ac 32 29 00 e0 08 6d
>2746	00 44 59 28 42 29 b2 31 00 e8 08 6e 00 82 20 42
>2756	00 ee 08 78 00 8f 00 02 09 82 00 81 59 b2 30 a4
>2766	32 39 3a 81 58 b2 30 a4 33 39 00 18 09 8c 00 51
>2776	b2 59 ac 32 35 36 aa 58 ac 32 aa 34 35 30 35 36
>2786	00 30 09 96 00 ce 84 20 31 2c 51 2c 38 31 3a ce
>2796	84 31 2c 51 aa 31 2c 30 00 3b 09 a0 00 82 58 3a
>27a6	82 20 59 00 47 09 c8 00 81 20 42 b2 31 a4 4e 00
>27b6	64 09 d2 00 ce 84 20 31 2c 34 35 30 35 36 aa 42
>27c6	59 28 42 29 aa 42 58 28 42 29 2c 30 00 72 09 e6
>27d6	00 44 58 42 b2 44 58 28 42 29 00 83 09 f0 00 8b
>27e6	44 58 42 b2 30 a7 8d 31 30 31 30 00 94 09 fa 00
>27f6	8b 44 58 42 b2 31 a7 8d 31 30 34 30 00 a2 09 ff
>2806	00 44 59 42 b2 44 59 28 42 29 00 b3 09 04 01 8b
>2816	44 59 42 b2 30 a7 8d 31 30 37 30 00 c4 09 0e 01
>2826	8b 44 59 42 b2 31 a7 8d 31 31 30 30 00 e5 09 18
>2836	01 ce 84 20 31 2c 34 35 30 35 36 aa 42 59 28 42
>2846	29 aa 42 58 28 42 29 2c 42 43 28 42 29 00 ec 09
>2856	22 01 82 42 00 f6 09 2c 01 89 20 32 30 30 00 fc
>2866	09 e8 03 8f 00 0a 0a f2 03 42 58 42 b2 42 58 28
>2876	42 29 00 1f 0a f3 03 8b 42 58 42 b2 31 a7 44 58
>2886	28 42 29 b2 31 3a 8e 00 31 0a fc 03 42 58 28 42
>2896	29 b2 42 58 42 ab 32 3a 8e 00 37 0a 06 04 8f 00
>28a6	45 0a 10 04 42 58 42 b2 42 58 28 42 29 00 65 0a
>28b6	11 04 8b 42 58 42 b2 37 39 a7 20 42 58 28 42 29
>28c6	b2 37 37 3a 44 58 28 42 29 b2 30 3a 8e 00 77 0a
>28d6	1a 04 42 58 28 42 29 b2 42 58 42 aa 32 3a 8e 00
>28e6	7d 0a 24 04 8f 00 8b 0a 2e 04 42 59 42 b2 42 59
>28f6	28 42 29 00 a0 0a 2f 04 8b 42 59 42 b2 30 a7 44
>2906	59 28 42 29 b2 31 3a 8e 00 b4 0a 38 04 42 59 28
>2916	42 29 b2 42 59 42 ab 32 35 36 3a 8e 00 ba 0a 42
>2926	04 8f 00 c8 0a 4c 04 42 59 42 b2 42 59 28 42 29
>2936	00 eb 0a 4d 04 8b 42 59 42 b2 37 34 32 34 a7 42
>2946	59 28 42 29 b2 37 31 36 38 3a 44 59 28 42 29 b2
>2956	30 3a 8e 00 ff 0a 56 04 42 59 28 42 29 b2 42 59
>2966	42 aa 32 35 36 3a 8e 00 00 00

;******  End of listing
