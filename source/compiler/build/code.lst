
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass -c -Wall -o build/code.prg -L build/code.lst -l build/code.lbl /home/paulr/Projects/blitz-compiler/documents/../source/common-source/wrapper.asm testing/testing.asm /home/paulr/Projects/blitz-compiler/documents/../bin/compiler.library /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library testing/testend.asm
; Fri Oct  6 17:04:38 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../source/common-source/wrapper.asm

=$1000					CodeStart = $1000
=$22					ZeroPageMandatory = $22
=$400					MemoryStorage = $400
.1000	4c 03 10	jmp $1003			jmp 	WrapperBoot
.0022					codePtr:
>0022							.fill 	2
.0024					codePage:
>0024							.fill 	1
.0025					objPtr:
>0025							.fill 	2
.0027					objPage:
>0027							.fill 	1
.0028					zTemp0:
>0028							.fill 	2
.002a					zTemp1:
>002a							.fill 	2
.002c					zTemp2:
>002c							.fill 	2

;******  Processing input file: testing/testing.asm

.1003					WrapperBoot:
.1003	a2 0e		ldx #$0e			ldx 	#APIDesc & $FF
.1005	a0 10		ldy #$10			ldy 	#APIDesc >> 8
.1007	20 b1 10	jsr $10b1			jsr 	StartCompiler
.100a	4c ff ff	jmp $ffff			jmp 	$FFFF
.100d	60		rts				rts
.100e					APIDesc:
>100e							.fill 	2
>1010	80						.byte 	$80
>1011	9f						.byte 	$9F

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/compiler.library

=$80					C64_END                  = $80 ; $80 end
=$81					C64_FOR                  = $81 ; $81 for
=$82					C64_NEXT                 = $82 ; $82 next
=$83					C64_DATA                 = $83 ; $83 data
=$84					C64_INPUTHASH            = $84 ; $84 input#
=$85					C64_INPUT                = $85 ; $85 input
=$86					C64_DIM                  = $86 ; $86 dim
=$87					C64_READ                 = $87 ; $87 read
=$88					C64_LET                  = $88 ; $88 let
=$89					C64_GOTO                 = $89 ; $89 goto
=$8a					C64_RUN                  = $8a ; $8a run
=$8b					C64_IF                   = $8b ; $8b if
=$8c					C64_RESTORE              = $8c ; $8c restore
=$8d					C64_GOSUB                = $8d ; $8d gosub
=$8e					C64_RETURN               = $8e ; $8e return
=$8f					C64_REM                  = $8f ; $8f rem
=$90					C64_STOP                 = $90 ; $90 stop
=$91					C64_ON                   = $91 ; $91 on
=$92					C64_WAIT                 = $92 ; $92 wait
=$93					C64_LOAD                 = $93 ; $93 load
=$94					C64_SAVE                 = $94 ; $94 save
=$95					C64_VERIFY               = $95 ; $95 verify
=$96					C64_DEF                  = $96 ; $96 def
=$97					C64_POKE                 = $97 ; $97 poke
=$98					C64_PRINTHASH            = $98 ; $98 print#
=$99					C64_PRINT                = $99 ; $99 print
=$9a					C64_CONT                 = $9a ; $9a cont
=$9b					C64_LIST                 = $9b ; $9b list
=$9c					C64_CLR                  = $9c ; $9c clr
=$9d					C64_CMD                  = $9d ; $9d cmd
=$9e					C64_SYS                  = $9e ; $9e sys
=$9f					C64_OPEN                 = $9f ; $9f open
=$a0					C64_CLOSE                = $a0 ; $a0 close
=$a1					C64_GET                  = $a1 ; $a1 get
=$a2					C64_NEW                  = $a2 ; $a2 new
=$a3					C64_TABLB                = $a3 ; $a3 tab(
=$a4					C64_TO                   = $a4 ; $a4 to
=$a5					C64_FN                   = $a5 ; $a5 fn
=$a6					C64_SPCLB                = $a6 ; $a6 spc(
=$a7					C64_THEN                 = $a7 ; $a7 then
=$a8					C64_NOT                  = $a8 ; $a8 not
=$a9					C64_STEP                 = $a9 ; $a9 step
=$aa					C64_PLUS                 = $aa ; $aa +
=$ab					C64_MINUS                = $ab ; $ab -
=$ac					C64_TIMES                = $ac ; $ac *
=$ad					C64_DIVIDE               = $ad ; $ad /
=$ae					C64_POWER                = $ae ; $ae ^
=$af					C64_AND                  = $af ; $af and
=$b0					C64_OR                   = $b0 ; $b0 or
=$b1					C64_GREATER              = $b1 ; $b1 >
=$b2					C64_EQUAL                = $b2 ; $b2 =
=$b3					C64_LESS                 = $b3 ; $b3 <
=$b4					C64_SGN                  = $b4 ; $b4 sgn
=$b5					C64_INT                  = $b5 ; $b5 int
=$b6					C64_ABS                  = $b6 ; $b6 abs
=$b7					C64_USR                  = $b7 ; $b7 usr
=$b8					C64_FRE                  = $b8 ; $b8 fre
=$b9					C64_POS                  = $b9 ; $b9 pos
=$ba					C64_SQR                  = $ba ; $ba sqr
=$bb					C64_RND                  = $bb ; $bb rnd
=$bc					C64_LOG                  = $bc ; $bc log
=$bd					C64_EXP                  = $bd ; $bd exp
=$be					C64_COS                  = $be ; $be cos
=$bf					C64_SIN                  = $bf ; $bf sin
=$c0					C64_TAN                  = $c0 ; $c0 tan
=$c1					C64_ATN                  = $c1 ; $c1 atn
=$c2					C64_PEEK                 = $c2 ; $c2 peek
=$c3					C64_LEN                  = $c3 ; $c3 len
=$c4					C64_STRDOLLAR            = $c4 ; $c4 str$
=$c5					C64_VAL                  = $c5 ; $c5 val
=$c6					C64_ASC                  = $c6 ; $c6 asc
=$c7					C64_CHRDOLLAR            = $c7 ; $c7 chr$
=$c8					C64_LEFTDOLLAR           = $c8 ; $c8 left$
=$c9					C64_RIGHTDOLLAR          = $c9 ; $c9 right$
=$ca					C64_MIDDOLLAR            = $ca ; $ca mid$
=$cb					C64_GO                   = $cb ; $cb go
=$ce80					C64_MON                  = $ce80 ; $ce80 mon
=$ce81					C64_DOS                  = $ce81 ; $ce81 dos
=$ce82					C64_OLD                  = $ce82 ; $ce82 old
=$ce83					C64_GEOS                 = $ce83 ; $ce83 geos
=$ce84					C64_VPOKE                = $ce84 ; $ce84 vpoke
=$ce85					C64_VLOAD                = $ce85 ; $ce85 vload
=$ce86					C64_SCREEN               = $ce86 ; $ce86 screen
=$ce87					C64_PSET                 = $ce87 ; $ce87 pset
=$ce88					C64_LINE                 = $ce88 ; $ce88 line
=$ce89					C64_FRAME                = $ce89 ; $ce89 frame
=$ce8a					C64_RECT                 = $ce8a ; $ce8a rect
=$ce8b					C64_CHAR                 = $ce8b ; $ce8b char
=$ce8c					C64_MOUSE                = $ce8c ; $ce8c mouse
=$ce8d					C64_COLOR                = $ce8d ; $ce8d color
=$ce8e					C64_TEST                 = $ce8e ; $ce8e test
=$ce8f					C64_RESET                = $ce8f ; $ce8f reset
=$ce90					C64_CLS                  = $ce90 ; $ce90 cls
=$ce91					C64_CODEX                = $ce91 ; $ce91 codex
=$ce92					C64_LOCATE               = $ce92 ; $ce92 locate
=$ce93					C64_BOOT                 = $ce93 ; $ce93 boot
=$ce94					C64_KEYMAP               = $ce94 ; $ce94 keymap
=$ce95					C64_BLOAD                = $ce95 ; $ce95 bload
=$ce96					C64_BVLOAD               = $ce96 ; $ce96 bvload
=$ce97					C64_BVERIFY              = $ce97 ; $ce97 bverify
=$ce98					C64_BANK                 = $ce98 ; $ce98 bank
=$ce99					C64_FMINIT               = $ce99 ; $ce99 fminit
=$ce9a					C64_FMNOTE               = $ce9a ; $ce9a fmnote
=$ce9b					C64_FMDRUM               = $ce9b ; $ce9b fmdrum
=$ce9c					C64_FMINST               = $ce9c ; $ce9c fminst
=$ce9d					C64_FMVIB                = $ce9d ; $ce9d fmvib
=$ce9e					C64_FMFREQ               = $ce9e ; $ce9e fmfreq
=$ce9f					C64_FMVOL                = $ce9f ; $ce9f fmvol
=$cea0					C64_FMPAN                = $cea0 ; $cea0 fmpan
=$cea1					C64_FMPLAY               = $cea1 ; $cea1 fmplay
=$cea2					C64_FMCHORD              = $cea2 ; $cea2 fmchord
=$cea3					C64_FMPOKE               = $cea3 ; $cea3 fmpoke
=$cea4					C64_PSGINIT              = $cea4 ; $cea4 psginit
=$cea5					C64_PSGNOTE              = $cea5 ; $cea5 psgnote
=$cea6					C64_PSGVOL               = $cea6 ; $cea6 psgvol
=$cea7					C64_PSGWAV               = $cea7 ; $cea7 psgwav
=$cea8					C64_PSGFREQ              = $cea8 ; $cea8 psgfreq
=$cea9					C64_PSGPAN               = $cea9 ; $cea9 psgpan
=$ceaa					C64_PSGPLAY              = $ceaa ; $ceaa psgplay
=$ceab					C64_PSGCHORD             = $ceab ; $ceab psgchord
=$ceac					C64_REBOOT               = $ceac ; $ceac reboot
=$cead					C64_POWEROFF             = $cead ; $cead poweroff
=$ceae					C64_I2CPOKE              = $ceae ; $ceae i2cpoke
=$ceaf					C64_SLEEP                = $ceaf ; $ceaf sleep
=$ceb0					C64_BSAVE                = $ceb0 ; $ceb0 bsave
=$ceb1					C64_MENU                 = $ceb1 ; $ceb1 menu
=$ceb2					C64_REN                  = $ceb2 ; $ceb2 ren
=$ceb3					C64_LINPUT               = $ceb3 ; $ceb3 linput
=$ceb4					C64_LINPUTHASH           = $ceb4 ; $ceb4 linput#
=$ceb5					C64_BINPUTHASH           = $ceb5 ; $ceb5 binput#
=$ceb6					C64_HELP                 = $ceb6 ; $ceb6 help
=$ced0					C64_VPEEK                = $ced0 ; $ced0 vpeek
=$ced1					C64_MX                   = $ced1 ; $ced1 mx
=$ced2					C64_MY                   = $ced2 ; $ced2 my
=$ced3					C64_MB                   = $ced3 ; $ced3 mb
=$ced4					C64_JOY                  = $ced4 ; $ced4 joy
=$ced5					C64_HEXDOLLAR            = $ced5 ; $ced5 hex$
=$ced6					C64_BINDOLLAR            = $ced6 ; $ced6 bin$
=$ced7					C64_I2CPEEK              = $ced7 ; $ced7 i2cpeek
=$ced8					C64_POINTER              = $ced8 ; $ced8 pointer
=$ced9					C64_STRPTR               = $ced9 ; $ced9 strptr
=$ceda					C64_RPTDOLLAR            = $ceda ; $ceda rpt$
.002e					srcPtr:
>002e							.fill 	2
.0400					sourceBuffer:
>0400							.fill 	256
.0500					currentLineNumber:
>0500							.fill 	2
=$80					PCD_STARTBINARY = $80
=$8d					PCD_ENDBINARY = $8d
=$8d					PCD_STARTCOMMAND = $8d
=$ca					PCD_ENDCOMMAND = $ca
=$ca					PCD_STARTSYSTEM = $ca
=$d5					PCD_ENDSYSTEM = $d5
=$80					PCD_PLUS             = $80 ; +
=$81					PCD_MINUS            = $81 ; -
=$82					PCD_TIMES            = $82 ; *
=$83					PCD_DIVIDE           = $83 ; /
=$84					PCD_POWER            = $84 ; ^
=$85					PCD_AND              = $85 ; and
=$86					PCD_OR               = $86 ; or
=$87					PCD_GREATER          = $87 ; >
=$88					PCD_EQUAL            = $88 ; =
=$89					PCD_LESS             = $89 ; <
=$8a					PCD_GREATEREQUAL     = $8a ; >=
=$8b					PCD_LESSGREATER      = $8b ; <>
=$8c					PCD_LESSEQUAL        = $8c ; <=
=$8d					PCD_ABS              = $8d ; abs
=$8e					PCD_ARRAY            = $8e ; array
=$8f					PCD_ASC              = $8f ; asc
=$90					PCD_ASSERT           = $90 ; assert
=$91					PCD_BINDOLLAR        = $91 ; bin$
=$92					PCD_PRINTCMD_CHR     = $92 ; print.chr
=$93					PCD_CHRDOLLAR        = $93 ; chr$
=$94					PCD_SCMD_CMP         = $94 ; s.cmp
=$95					PCD_FOR              = $95 ; for
=$96					PCD_FRE              = $96 ; fre
=$97					PCD_GET              = $97 ; get
=$98					PCD_RETURN           = $98 ; return
=$99					PCD_PSET             = $99 ; pset
=$9a					PCD_LINE             = $9a ; line
=$9b					PCD_RECT             = $9b ; rect
=$9c					PCD_FRAME            = $9c ; frame
=$9d					PCD_CHAR             = $9d ; char
=$9e					PCD_HEXDOLLAR        = $9e ; hex$
=$9f					PCD_INPUT            = $9f ; input
=$a0					PCD_INPUTDOLLAR      = $a0 ; input$
=$a1					PCD_INPUTCMD_START   = $a1 ; input.start
=$a2					PCD_LEN              = $a2 ; len
=$a3					PCD_FCMD_CMP         = $a3 ; f.cmp
=$a4					PCD_INTCMD_DIV       = $a4 ; int.div
=$a5					PCD_NEGATE           = $a5 ; negate
=$a6					PCD_NEWCMD_LINE      = $a6 ; new.line
=$a7					PCD_NEXT             = $a7 ; next
=$a8					PCD_NOT              = $a8 ; not
=$a9					PCD_ON               = $a9 ; on
=$aa					PCD_MOREON           = $aa ; moreon
=$ab					PCD_PEEK             = $ab ; peek
=$ac					PCD_POKE             = $ac ; poke
=$ad					PCD_POS              = $ad ; pos
=$ae					PCD_GETCHANNEL       = $ae ; getchannel
=$af					PCD_SETCHANNEL       = $af ; setchannel
=$b0					PCD_PRINTCMD_N       = $b0 ; print.n
=$b1					PCD_PRINTCMD_S       = $b1 ; print.s
=$b2					PCD_READ             = $b2 ; read
=$b3					PCD_READDOLLAR       = $b3 ; read$
=$b4					PCD_RND              = $b4 ; rnd
=$b5					PCD_CONCAT           = $b5 ; concat
=$b6					PCD_SGN              = $b6 ; sgn
=$b7					PCD_PRINTCMD_TAB     = $b7 ; print.tab
=$b8					PCD_PRINTCMD_POS     = $b8 ; print.pos
=$b9					PCD_PRINTCMD_SPC     = $b9 ; print.spc
=$ba					PCD_STRDOLLAR        = $ba ; str$
=$bb					PCD_LEFTDOLLAR       = $bb ; left$
=$bc					PCD_RIGHTDOLLAR      = $bc ; right$
=$bd					PCD_MIDDOLLAR        = $bd ; mid$
=$be					PCD_SWAP             = $be ; swap
=$bf					PCD_TI               = $bf ; ti
=$c0					PCD_TIDOLLAR         = $c0 ; ti$
=$c1					PCD_USR              = $c1 ; usr
=$c2					PCD_VAL              = $c2 ; val
=$c3					PCD_CLOSE            = $c3 ; close
=$c4					PCD_EXIT             = $c4 ; exit
=$c5					PCD_DEBUG            = $c5 ; debug
=$c6					PCD_OPEN             = $c6 ; open
=$c7					PCD_SCREEN           = $c7 ; screen
=$c8					PCD_VPOKE            = $c8 ; vpoke
=$c9					PCD_VPEEK            = $c9 ; vpeek
=$ca					PCD_CMD_SHIFT        = $ca ; .shift
=$cb					PCD_CMD_BYTE         = $cb ; .byte
=$cc					PCD_CMD_WORD         = $cc ; .word
=$cd					PCD_CMD_FLOAT        = $cd ; .float
=$ce					PCD_CMD_STRING       = $ce ; .string
=$cf					PCD_CMD_DATA         = $cf ; .data
=$d0					PCD_CMD_GOTO         = $d0 ; .goto
=$d1					PCD_CMD_GOSUB        = $d1 ; .gosub
=$d2					PCD_CMD_GOTOCMD_Z    = $d2 ; .goto.z
=$d3					PCD_CMD_GOTOCMD_NZ   = $d3 ; .goto.nz
=$d4					PCD_CMD_VARSPACE     = $d4 ; .varspace
=$ca80					PCD_CLR              = $ca80 ; clr
=$ca81					PCD_DIM              = $ca81 ; dim
=$ca82					PCD_END              = $ca82 ; end
=$ca83					PCD_JOY              = $ca83 ; joy
=$ca84					PCD_INT              = $ca84 ; int
=$ca85					PCD_SQR              = $ca85 ; sqr
=$ca86					PCD_LOG              = $ca86 ; log
=$ca87					PCD_EXP              = $ca87 ; exp
=$ca88					PCD_COS              = $ca88 ; cos
=$ca89					PCD_SIN              = $ca89 ; sin
=$ca8a					PCD_TAN              = $ca8a ; tan
=$ca8b					PCD_ATN              = $ca8b ; atn
=$ca8c					PCD_MOUSE            = $ca8c ; mouse
=$ca8d					PCD_MB               = $ca8d ; mb
=$ca8e					PCD_MX               = $ca8e ; mx
=$ca8f					PCD_MY               = $ca8f ; my
=$ca90					PCD_RESTORE          = $ca90 ; restore
=$ca91					PCD_STOP             = $ca91 ; stop
=$ca92					PCD_SYS              = $ca92 ; sys
=$ca93					PCD_TIDOLLARCMD_WRITE = $ca93 ; ti$.write
=$ca94					PCD_WAIT             = $ca94 ; wait
=$ca95					PCD_I2CPOKE          = $ca95 ; i2cpoke
=$ca96					PCD_I2CPEEK          = $ca96 ; i2cpeek
=$ca97					PCD_BANK             = $ca97 ; bank
=$ca98					PCD_SLEEP            = $ca98 ; sleep
=$ca99					PCD_FMINIT           = $ca99 ; fminit
=$ca9a					PCD_FMNOTE           = $ca9a ; fmnote
=$ca9b					PCD_FMDRUM           = $ca9b ; fmdrum
=$ca9c					PCD_FMINST           = $ca9c ; fminst
=$ca9d					PCD_FMVIB            = $ca9d ; fmvib
=$ca9e					PCD_FMFREQ           = $ca9e ; fmfreq
=$ca9f					PCD_FMVOL            = $ca9f ; fmvol
=$caa0					PCD_FMPAN            = $caa0 ; fmpan
=$caa1					PCD_FMPLAY           = $caa1 ; fmplay
=$caa2					PCD_FMCHORD          = $caa2 ; fmchord
=$caa3					PCD_FMPOKE           = $caa3 ; fmpoke
=$caa4					PCD_PSGINIT          = $caa4 ; psginit
=$caa5					PCD_PSGNOTE          = $caa5 ; psgnote
=$caa6					PCD_PSGVOL           = $caa6 ; psgvol
=$caa7					PCD_PSGWAV           = $caa7 ; psgwav
=$caa8					PCD_PSGFREQ          = $caa8 ; psgfreq
=$caa9					PCD_PSGPAN           = $caa9 ; psgpan
=$caaa					PCD_PSGPLAY          = $caaa ; psgplay
=$caab					PCD_PSGCHORD         = $caab ; psgchord
=$caac					PCD_CLS              = $caac ; cls
=$caad					PCD_LOCATE           = $caad ; locate
=$caae					PCD_COLOR            = $caae ; color
=$4000					PCodeStart = $4000
=$8000					WorkArea = $8000
=$1f00					WorkAreaSize = $1F00
.1012					InlineNonDecimal:
.1012	a2 02		ldx #$02			ldx 	#2 							; get size in X
.1014	c9 25		cmp #$25			cmp 	#"%"
.1016	f0 02		beq $101a			beq 	_INDBinary
.1018	a2 10		ldx #$10			ldx 	#16
.101a					_INDBinary:
.101a	85 2a		sta $2a				sta 	zTemp1 						; size => zTemp1
.101c	64 2b		stz $2b				stz 	zTemp1+1 					; count => zTemp1+1, at least 1 !
.101e	64 28		stz $28				stz 	zTemp0 						; zero result
.1020	64 29		stz $29				stz 	zTemp0+1
.1022					_INDLoop:
.1022	20 f6 1a	jsr $1af6			jsr 	LookNext 					; check next character
.1025	20 32 1b	jsr $1b32			jsr 	ConvertHexStyle		 		; convert into range 0-35 for 0-9A-Z
.1028	90 1f		bcc $1049			bcc		_INDDone 					; didn't convert
.102a	c5 2a		cmp $2a				cmp 	zTemp1 						; size too large ?
.102c	b0 1b		bcs $1049			bcs 	_INDDone
.102e	20 58 10	jsr $1058			jsr 	_INDShift 					; x 2 or x 16
.1031	e0 02		cpx #$02			cpx 	#2
.1033	f0 09		beq $103e			beq 	_INDNotHex
.1035	20 58 10	jsr $1058			jsr 	_INDShift
.1038	20 58 10	jsr $1058			jsr 	_INDShift
.103b	20 58 10	jsr $1058			jsr 	_INDShift
.103e					_INDNotHex:
.103e	05 28		ora $28				ora 	zTemp0 						; or digit into result
.1040	85 28		sta $28				sta 	zTemp0
.1042	20 07 1b	jsr $1b07			jsr 	GetNext 					; consume
.1045	e6 2b		inc $2b				inc 	zTemp1+1 					; bump count
.1047	80 d9		bra $1022			bra 	_INDLoop
.1049					_INDDone:
.1049	a5 2b		lda $2b				lda 	zTemp1+1 					; done at least 1 ?
.104b	f0 08		beq $1055			beq 	_INDError
.104d	a4 29		ldy $29				ldy 	zTemp0+1 					; push constant
.104f	a5 28		lda $28				lda 	zTemp0
.1051	20 1c 11	jsr $111c			jsr 	PushIntegerYA
.1054	60		rts				rts
.1055					_INDError:
.1055	4c 3d 13	jmp $133d		jmp	ErrorV_syntax
.1058					_INDShift:
.1058	06 28		asl $28				asl 	zTemp0
.105a	26 29		rol $29				rol 	zTemp0+1
.105c	60		rts				rts
.105d					BufferClear:
.105d	9c 02 05	stz $0502			stz 	bufferSize
.1060	60		rts				rts
.1061					BufferWrite:
.1061	da		phx				phx
.1062	ae 02 05	ldx $0502			ldx 	bufferSize
.1065	9d 03 05	sta $0503,x			sta 	dataBuffer,x
.1068	ee 02 05	inc $0502			inc 	bufferSize
.106b	fa		plx				plx
.106c	60		rts				rts
.106d					BufferOutput:
.106d	ad 02 05	lda $0502			lda 	bufferSize
.1070	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1073	a2 00		ldx #$00			ldx 	#0
.1075					_BOLoop:
.1075	ec 02 05	cpx $0502			cpx 	bufferSize
.1078	f0 09		beq $1083			beq 	_BOExit
.107a	bd 03 05	lda $0503,x			lda 	dataBuffer,x
.107d	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1080	e8		inx				inx
.1081	80 f2		bra $1075			bra 	_BOLoop
.1083					_BOExit:
.1083	60		rts				rts
.0502					bufferSize:
>0502							.fill 	1
.0503					dataBuffer:
>0503							.fill 	256
.1084					WriteCodeByte:
.1084	48		pha				pha 								; save on stack
.1085	da		phx				phx
.1086	5a		phy				phy
.1087	20 db 1f	jsr $1fdb			jsr 	OUTPUTWriteByte
.108a	7a		ply				ply 								; restore from stack
.108b	fa		plx				plx
.108c	68		pla				pla
.108d	60		rts				rts
.108e					CheckNextComma:
.108e	a9 2c		lda #$2c			lda	 	#","
.1090	80 06		bra $1098			bra 	CheckNextA
.1092					CheckNextRParen:
.1092	a9 29		lda #$29			lda	 	#")"
.1094	80 02		bra $1098			bra 	CheckNextA
.1096					CheckNextLParen:
.1096	a9 28		lda #$28			lda 	#"("
.1098					CheckNextA:
.1098	8d 03 06	sta $0603			sta 	checkCharacter 				; save test character
.109b					_CNALoop:
.109b	20 12 1b	jsr $1b12			jsr 	GetNextNonSpace 			; get next skipping spaces.
.109e	cd 03 06	cmp $0603			cmp 	checkCharacter 				; matches ?
.10a1	f0 03		beq $10a6			beq 	_CNAExit
.10a3	4c 3d 13	jmp $133d		jmp	ErrorV_syntax
.10a6					_CNAExit:
.10a6	60		rts				rts
.0603					checkCharacter:
>0603							.fill 	1
.10a7					OUTPUTClose:
.10a7	a9 40		lda #$40			lda 	#(PCodeStart >> 8)
.10a9	a6 25		ldx $25				ldx 	objPtr
.10ab	a4 26		ldy $26				ldy 	objPtr+1
.10ad	20 45 20	jsr $2045			jsr 	XSaveMemory
.10b0	60		rts				rts
.10b1					StartCompiler:
.10b1	ba		tsx				tsx 								; save stack pointer
.10b2	8e 04 06	stx $0604			stx 	compilerSP
.10b5	20 fa 1e	jsr $1efa			jsr 	STRReset 					; reset storage (line#, variable)
.10b8	20 82 16	jsr $1682			jsr 	INPUTOpen 					; reset data input
.10bb	20 a9 1d	jsr $1da9			jsr 	OUTPUTOpen 					; reset data output.
.10be	a9 d4		lda #$d4			lda 	#PCD_CMD_VARSPACE
.10c0	20 84 10	jsr $1084			jsr 	WriteCodeByte
.10c3	a9 00		lda #$00			lda 	#0
.10c5	20 84 10	jsr $1084			jsr 	WriteCodeByte
.10c8	20 84 10	jsr $1084			jsr 	WriteCodeByte
.10cb					MainCompileLoop:
.10cb	20 8c 1c	jsr $1c8c			jsr 	ReadNextLine 				; read next line into the buffer.
.10ce	90 2e		bcc $10fe			bcc 	SaveCodeAndExit 			; end of source.
.10d0	20 bd 1c	jsr $1cbd			jsr 	GetLineNumber 				; get line #
.10d3	20 c4 1c	jsr $1cc4			jsr 	STRMarkLine 				; remember the position and number of this line.
.10d6	a9 a6		lda #$a6			lda 	#PCD_NEWCMD_LINE 			; generate new command line
.10d8	20 84 10	jsr $1084			jsr 	WriteCodeByte
.10db					_MCLSameLine:
.10db	20 12 1b	jsr $1b12			jsr 	GetNextNonSpace 			; get the first character.
.10de	f0 eb		beq $10cb			beq 	MainCompileLoop 			; end of line, get next line.
.10e0	c9 3a		cmp #$3a			cmp 	#":"						; if : then loop back.
.10e2	f0 f7		beq $10db			beq 	_MCLSameLine
.10e4	c9 00		cmp #$00			cmp 	#0 							; if ASCII then check for implied LET.
.10e6	10 0c		bpl $10f4			bpl 	_MCLCheckAssignment
.10e8	a2 d3		ldx #$d3			ldx 	#CommandTables & $FF 		; do command tables.
.10ea	a0 16		ldy #$16			ldy 	#CommandTables >> 8
.10ec	20 9b 19	jsr $199b			jsr 	GeneratorProcess
.10ef	b0 ea		bcs $10db			bcs 	_MCLSameLine 				; keep trying to compile the line.
.10f1					_MCLSyntax:
.10f1	4c 3d 13	jmp $133d		jmp	ErrorV_syntax
.10f4					_MCLCheckAssignment:
.10f4	20 28 1b	jsr $1b28			jsr 	CharIsAlpha 				; if not alpha then syntax error
.10f7	90 f8		bcc $10f1			bcc 	_MCLSyntax
.10f9	20 5a 1c	jsr $1c5a			jsr 	CommandLETHaveFirst  		; LET first character, do assign
.10fc	80 dd		bra $10db			bra		_MCLSameLine 				; loop back.
.10fe					SaveCodeAndExit:
.10fe	20 8a 16	jsr $168a			jsr 	INPUTClose 					; finish input.
.1101	a9 ff		lda #$ff			lda 	#$FF 						; fake line number $FFFF for forward THEN.
.1103	a8		tay				tay
.1104	20 c4 1c	jsr $1cc4			jsr 	STRMarkLine
.1107	a9 c4		lda #$c4			lda 	#PCD_EXIT 					; add an END
.1109	20 84 10	jsr $1084			jsr 	WriteCodeByte
.110c	a9 ff		lda #$ff			lda 	#$FF 						; add end marker
.110e	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1111	20 69 15	jsr $1569			jsr 	FixBranches 				; fix up GOTO/GOSUB etc.
.1114	20 a7 10	jsr $10a7			jsr 	OUTPUTClose
.1117					ExitCompiler:
.1117	ae 04 06	ldx $0604			ldx 	compilerSP 					; reload SP and exit.
.111a	9a		txs				txs
.111b	60		rts				rts
.0604					compilerSP:
>0604							.fill 	1
.111c					PushIntegerYA:
.111c	c0 00		cpy #$00			cpy 	#0 							; 0-255
.111e	f0 0f		beq $112f			beq 	PushIntegerA
.1120	48		pha				pha
.1121	a9 cc		lda #$cc			lda 	#PCD_CMD_WORD 				; send .word
.1123	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1126	68		pla				pla 								; then LSB
.1127	20 84 10	jsr $1084			jsr 	WriteCodeByte
.112a	98		tya				tya 								; then MSB
.112b	20 84 10	jsr $1084			jsr 	WriteCodeByte
.112e	60		rts				rts
.112f					PushIntegerA:
.112f	c9 40		cmp #$40			cmp 	#64 						; if > 64 send byte as is
.1131	90 07		bcc $113a			bcc 	_PIWriteA
.1133	48		pha				pha
.1134	a9 cb		lda #$cb			lda 	#PCD_CMD_BYTE 				; send .byte
.1136	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1139	68		pla				pla
.113a					_PIWriteA:
.113a	20 84 10	jsr $1084			jsr 	WriteCodeByte
.113d	60		rts				rts
.113e					PushFloat:
.113e	a9 cd		lda #$cd			lda 	#PCD_CMD_FLOAT 				; write CMD_FLOAT
.1140	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1143	b5 6e		lda $6e,x			lda 	NSExponent,x 				; and the data
.1145	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1148	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.114a	20 84 10	jsr $1084			jsr 	WriteCodeByte
.114d	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.114f	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1152	b5 56		lda $56,x			lda 	NSMantissa2,x
.1154	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1157	b5 32		lda $32,x			lda 	NSStatus,x 					; with sign packed in byte 3 MSB
.1159	29 80		and #$80			and 	#$80
.115b	15 62		ora $62,x			ora 	NSMantissa3,x
.115d	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1160	60		rts				rts
.1161					CreateVariableRecord:
.1161	48		pha				pha
.1162	ad 0f 06	lda $060f			lda 	freeVariableMemory 		; push current free address on stack.
.1165	48		pha				pha
.1166	ad 10 06	lda $0610			lda 	freeVariableMemory+1
.1169	48		pha				pha
.116a	ad 0d 06	lda $060d			lda 	variableListEnd  		; copy end of list to zTemp0
.116d	85 28		sta $28				sta 	zTemp0
.116f	ad 0e 06	lda $060e			lda 	variableListEnd+1
.1172	85 29		sta $29				sta 	zTemp0+1
.1174	a9 06		lda #$06			lda 	#6 						; default size if 6 (offset link 3 bytes)
.1176	92 28		sta ($28)			sta 	(zTemp0)
.1178	98		tya				tya
.1179	a0 02		ldy #$02			ldy 	#2 						; write out the name.
.117b	91 28		sta ($28),y			sta 	(zTemp0),y
.117d	88		dey				dey
.117e	8a		txa				txa
.117f	91 28		sta ($28),y			sta 	(zTemp0),y
.1181	a0 03		ldy #$03			ldy 	#3 						; write out the address.
.1183	ad 0f 06	lda $060f			lda 	freeVariableMemory
.1186	91 28		sta ($28),y			sta 	(zTemp0),y
.1188	c8		iny				iny
.1189	ad 10 06	lda $0610			lda 	freeVariableMemory+1
.118c	91 28		sta ($28),y			sta 	(zTemp0),y
.118e	a0 06		ldy #$06			ldy 	#6 						; write EOL marker next record.
.1190	a9 00		lda #$00			lda 	#0
.1192	91 28		sta ($28),y			sta 	(zTemp0),y
.1194	18		clc				clc
.1195	b2 28		lda ($28)			lda 	(zTemp0) 				; add offset to variableListEnd
.1197	6d 0d 06	adc $060d			adc  	variableListEnd
.119a	8d 0d 06	sta $060d			sta 	variableListEnd
.119d	90 03		bcc $11a2			bcc 	_CVNoCarry2
.119f	ee 0e 06	inc $060e			inc 	variableListEnd+1
.11a2					_CVNoCarry2:
.11a2	7a		ply				ply
.11a3	fa		plx				plx
.11a4	68		pla				pla
.11a5	60		rts				rts
.11a6					SetVariableRecordToCodePosition:
.11a6	48		pha				pha
.11a7	5a		phy				phy
.11a8	a5 27		lda $27				lda 	objPage
.11aa	a0 03		ldy #$03			ldy 	#3
.11ac	91 28		sta ($28),y			sta 	(zTemp0),y
.11ae	c8		iny				iny
.11af	a5 26		lda $26				lda 	objPtr+1
.11b1	91 28		sta ($28),y			sta 	(zTemp0),y
.11b3	c8		iny				iny
.11b4	a5 25		lda $25				lda 	objPtr
.11b6	91 28		sta ($28),y			sta 	(zTemp0),y
.11b8	7a		ply				ply
.11b9	68		pla				pla
.11ba	60		rts				rts
.11bb					AllocateBytesForType:
.11bb	48		pha				pha
.11bc	da		phx				phx
.11bd	a2 02		ldx #$02			ldx 	#2 						; bytes to allocate
.11bf	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16
.11c1	c9 00		cmp #$00			cmp 	#NSSIFloat
.11c3	d0 02		bne $11c7			bne 	_CVNotFloat
.11c5	a2 06		ldx #$06			ldx 	#6
.11c7					_CVNotFloat:
.11c7	8a		txa				txa 							; add 6 or 2 to the free memory pointer.
.11c8	18		clc				clc
.11c9	6d 0f 06	adc $060f			adc 	freeVariableMemory
.11cc	8d 0f 06	sta $060f			sta 	freeVariableMemory
.11cf	90 03		bcc $11d4			bcc 	_CVNoCarry1
.11d1	ee 10 06	inc $0610			inc 	freeVariableMemory+1
.11d4					_CVNoCarry1:
.11d4	fa		plx				plx
.11d5	68		pla				pla
.11d6	60		rts				rts
.11d7					CommandDATA:
.11d7	20 5d 10	jsr $105d			jsr 	BufferClear 				; copy it to the buffer
.11da	20 f9 1a	jsr $1af9			jsr 	LookNextNonSpace
.11dd					_CTDataLoop:
.11dd	20 f6 1a	jsr $1af6			jsr 	LookNext 					; reached EOL
.11e0	f0 08		beq $11ea			beq 	_CTDataDone
.11e2	20 61 10	jsr $1061			jsr 	BufferWrite 				; write and consume
.11e5	20 07 1b	jsr $1b07			jsr 	GetNext
.11e8	80 f3		bra $11dd			bra 	_CTDataLoop
.11ea					_CTDataDone:
.11ea	a9 cf		lda #$cf			lda 	#PCD_CMD_DATA 				; output command and buffer
.11ec	20 84 10	jsr $1084			jsr 	WriteCodeByte
.11ef	20 6d 10	jsr $106d			jsr 	BufferOutput
.11f2	60		rts				rts
.11f3					CommandDEF:
.11f3	a9 00		lda #$00			lda 	#0 							; constant 0 (for GOTOZ)
.11f5	20 2f 11	jsr $112f			jsr 	PushIntegerA
.11f8	20 1e 1c	jsr $1c1e			jsr 	CompileGotoEOL 				; compile skip over DEF
.11fb	a9 a5		lda #$a5			lda 	#C64_FN
.11fd	20 98 10	jsr $1098			jsr 	CheckNextA
.1200	20 12 1b	jsr $1b12			jsr 	GetNextNonSpace				; get variable name w/type must be array e.g. DEF FNx(a)
.1203	20 77 1b	jsr $1b77			jsr 	ExtractVariableName
.1206	8a		txa				txa
.1207	10 51		bpl $125a			bpl 	_CDError
.1209	8a		txa				txa 								; convert to a function reference - bit 7:0 clear bit 7:1 set
.120a	29 7f		and #$7f			and 	#$7F
.120c	aa		tax				tax
.120d	98		tya				tya
.120e	09 80		ora #$80			ora 	#$80
.1210	a8		tay				tay
.1211	20 0c 15	jsr $150c			jsr 	FindVariable				; does it already exist ?
.1214	b0 44		bcs $125a			bcs 	_CDError 					; if so, that's an error.
.1216	20 61 11	jsr $1161			jsr 	CreateVariableRecord 		; create the record for it & put the data in it.
.1219	20 a6 11	jsr $11a6			jsr 	SetVariableRecordToCodePosition
.121c	20 12 1b	jsr $1b12			jsr 	GetNextNonSpace
.121f	20 b7 1e	jsr $1eb7			jsr 	GetReferenceTerm 			; get var ref, not array
.1222	c9 00		cmp #$00			cmp 	#0
.1224	30 34		bmi $125a			bmi 	_CDError
.1226	8d 05 06	sta $0605			sta 	defType 					; save type
.1229	8e 06 06	stx $0606			stx 	defVariable 				; save var ref
.122c	8c 07 06	sty $0607			sty 	defVariable+1
.122f	29 40		and #$40			and 	#NSSString 					; only numbers.
.1231	d0 27		bne $125a			bne 	_CDError
.1233	20 92 10	jsr $1092			jsr 	CheckNextRParen 			; check )
.1236	a9 b2		lda #$b2			lda 	#C64_EQUAL
.1238	20 98 10	jsr $1098			jsr 	CheckNextA 					; check =
.123b	18		clc				clc 								; if this is DEF FNxx(A), read A
.123c	20 5d 12	jsr $125d			jsr 	CDReadWriteVariable
.123f	a9 be		lda #$be			lda 	#(PCD_SWAP) & $FF
.1241	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1244	38		sec				sec
.1245	20 5d 12	jsr $125d			jsr 	CDReadWriteVariable 		; A is now updated
.1248	20 52 14	jsr $1452			jsr 	CompileExpressionAt0 		; the actual body of the function.
.124b	a9 be		lda #$be			lda 	#(PCD_SWAP) & $FF
.124d	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1250	38		sec				sec
.1251	20 5d 12	jsr $125d			jsr 	CDReadWriteVariable 		; A is now reset to its old value
.1254	a9 98		lda #$98			lda 	#(PCD_RETURN) & $FF
.1256	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1259	60		rts				rts
.125a					_CDError:
.125a	4c 3d 13	jmp $133d		jmp	ErrorV_syntax
.125d					CDReadWriteVariable:
.125d	ac 07 06	ldy $0607			ldy 	defVariable+1 				; set up YX
.1260	ae 06 06	ldx $0606			ldx 	defVariable
.1263	ad 05 06	lda $0605			lda 	defType
.1266	20 69 1e	jsr $1e69			jsr 	GetSetVariable
.1269	60		rts				rts
.0605					defType:
>0605							.fill 	1
.0606					defVariable:
>0606							.fill 	2
.126a					CommandDIM:
.126a	20 12 1b	jsr $1b12			jsr 	GetNextNonSpace 			; get the first non space character
.126d	20 77 1b	jsr $1b77			jsr 	ExtractVariableName 		; variable name to XY
.1270	da		phx				phx 								; save name with type bits.
.1271	e0 00		cpx #$00			cpx 	#0 							; check it is an array.
.1273	10 37		bpl $12ac			bpl 	_CDError
.1275	20 0c 15	jsr $150c			jsr 	FindVariable	 			; see if already exist
.1278	b0 35		bcs $12af			bcs 	_CDRedefine 				; it still exists.
.127a	20 61 11	jsr $1161			jsr 	CreateVariableRecord 		; create the basic variable
.127d	20 bb 11	jsr $11bb			jsr 	AllocateBytesForType 		; allocate memory for it
.1280	68		pla				pla 								; restore type bits
.1281	5a		phy				phy 								; save the address of the basic storage
.1282	da		phx				phx
.1283	48		pha				pha
.1284	20 b2 12	jsr $12b2			jsr 	OutputIndexGroup 			; create an index group and generate them, preserving type data
.1287	68		pla				pla
.1288	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16 		; 2 bit type data
.128a	20 2f 11	jsr $112f			jsr 	PushIntegerA 				; push that type data out.
.128d	a9 ca		lda #$ca			lda 	#(PCD_DIM) >> 8
.128f	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1292	a9 81		lda #$81			lda 	#(PCD_DIM) & $FF
.1294	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1297	fa		plx				plx 								; restore address
.1298	7a		ply				ply
.1299	a9 20		lda #$20			lda 	#NSSIFloat+NSSIInt16 		; pretend it is an int16 reference.
.129b	38		sec				sec
.129c	20 69 1e	jsr $1e69			jsr 	GetSetVariable 				; store the address in the reference to the array structure.
.129f	20 f9 1a	jsr $1af9			jsr 	LookNextNonSpace 			; , follows ?
.12a2	c9 2c		cmp #$2c			cmp 	#","
.12a4	d0 05		bne $12ab			bne 	_CDExit
.12a6	20 07 1b	jsr $1b07			jsr 	GetNext 					; consume comma
.12a9	80 bf		bra $126a			bra 	CommandDIM 					; do another DIM
.12ab					_CDExit:
.12ab	60		rts				rts
.12ac					_CDError:
.12ac	4c 3d 13	jmp $133d		jmp	ErrorV_syntax
.12af					_CDRedefine:
.12af	4c 05 14	jmp $1405		jmp	ErrorV_redefine
.12b2					OutputIndexGroup:
.12b2	9c 08 06	stz $0608			stz 	IndexCount 					; count of number of indices.
.12b5					_OIGNext:
.12b5	20 52 14	jsr $1452			jsr 	CompileExpressionAt0 		; get a dimension
.12b8	29 40		and #$40			and 	#NSSTypeMask 				; check it is numeric
.12ba	c9 00		cmp #$00			cmp 	#NSSIFloat
.12bc	d0 19		bne $12d7			bne 	_OIGType
.12be	ee 08 06	inc $0608			inc 	IndexCount 					; bump the counter.
.12c1	20 f9 1a	jsr $1af9			jsr 	LookNextNonSpace 			; does a , follow ?
.12c4	c9 2c		cmp #$2c			cmp 	#","
.12c6	d0 05		bne $12cd			bne 	_OIGCheckEnd
.12c8	20 07 1b	jsr $1b07			jsr 	GetNext 					; consume comma
.12cb	80 e8		bra $12b5			bra 	_OIGNext 					; get next dimension
.12cd					_OIGCheckEnd:
.12cd	20 92 10	jsr $1092			jsr 	CheckNextRParen 			; check and consume )
.12d0	ad 08 06	lda $0608			lda 	IndexCount
.12d3	20 2f 11	jsr $112f			jsr 	PushIntegerA 				; compile the dimension count.
.12d6	60		rts				rts
.12d7					_OIGType:
.12d7	4c 4d 13	jmp $134d		jmp	ErrorV_type
.0608					IndexCount:
>0608							.fill 	1
.12da					ErrorHandler:
.12da	68		pla				pla
.12db	7a		ply				ply
.12dc	85 28		sta $28				sta 	zTemp0
.12de	84 29		sty $29				sty 	zTemp0+1
.12e0	a2 00		ldx #$00			ldx 	#0 							; output msg to channel #0
.12e2	a0 01		ldy #$01			ldy 	#1
.12e4					_EHDisplayMsg:
.12e4	b1 28		lda ($28),y			lda 	(zTemp0),y
.12e6	20 3b 20	jsr $203b			jsr 	XPrintCharacter
.12e9	c8		iny				iny
.12ea	b1 28		lda ($28),y			lda 	(zTemp0),y
.12ec	d0 f6		bne $12e4			bne 	_EHDisplayMsg
.12ee	a9 20		lda #$20			lda 	#32
.12f0	20 3b 20	jsr $203b			jsr 	XPrintCharacter
.12f3	a9 40		lda #$40			lda 	#64
.12f5	20 3b 20	jsr $203b			jsr 	XPrintCharacter
.12f8	a2 00		ldx #$00			ldx 	#0 							; convert line# to string
.12fa	20 53 26	jsr $2653			jsr 	FloatSetByte
.12fd	20 bd 1c	jsr $1cbd			jsr 	GetLineNumber
.1300	95 3e		sta $3e,x			sta 	NSMantissa0,x
.1302	98		tya				tya
.1303	95 4a		sta $4a,x			sta 	NSMantissa1,x
.1305	20 39 25	jsr $2539			jsr 	FloatToString
.1308	a0 00		ldy #$00			ldy 	#0 							; display that string.
.130a	a2 00		ldx #$00			ldx 	#0
.130c					_EHDisplayLine:
.130c	b9 38 06	lda $0638,y			lda 	decimalBuffer,y
.130f	20 3b 20	jsr $203b			jsr 	XPrintCharacter
.1312	c8		iny				iny
.1313	b9 38 06	lda $0638,y			lda 	decimalBuffer,y
.1316	d0 f4		bne $130c			bne 	_EHDisplayLine
.1318	a9 0d		lda #$0d			lda 	#13
.131a	20 3b 20	jsr $203b			jsr 	XPrintCharacter
.131d	4c 17 11	jmp $1117			jmp 	ExitCompiler
.1320					ErrorV_range:
.1320	20 da 12	jsr $12da		jsr	ErrorHandler
>1323	4f 55 54 20 4f 46 20 52			.text	"OUT OF RANGE",0
>132b	41 4e 47 45 00
.1330					ErrorV_value:
.1330	20 da 12	jsr $12da		jsr	ErrorHandler
>1333	42 41 44 20 56 41 4c 55			.text	"BAD VALUE",0
>133b	45 00
.133d					ErrorV_syntax:
.133d	20 da 12	jsr $12da		jsr	ErrorHandler
>1340	53 59 4e 54 41 58 20 45			.text	"SYNTAX ERROR",0
>1348	52 52 4f 52 00
.134d					ErrorV_type:
.134d	20 da 12	jsr $12da		jsr	ErrorHandler
>1350	54 59 50 45 20 4d 49 53			.text	"TYPE MISMATCH",0
>1358	4d 41 54 43 48 00
.135e					ErrorV_unimplemented:
.135e	20 da 12	jsr $12da		jsr	ErrorHandler
>1361	4e 4f 54 20 49 4d 50 4c			.text	"NOT IMPLEMENTED",0
>1369	45 4d 45 4e 54 45 44 00
.1371					ErrorV_assert:
.1371	20 da 12	jsr $12da		jsr	ErrorHandler
>1374	41 53 53 45 52 54 20 46			.text	"ASSERT FAIL",0
>137c	41 49 4c 00
.1380					ErrorV_line:
.1380	20 da 12	jsr $12da		jsr	ErrorHandler
>1383	55 4e 4b 4e 4f 57 4e 20			.text	"UNKNOWN LINE NUMBER",0
>138b	4c 49 4e 45 20 4e 55 4d 42 45 52 00
.1397					ErrorV_internal:
.1397	20 da 12	jsr $12da		jsr	ErrorHandler
>139a	49 4e 54 45 52 4e 41 4c			.text	"INTERNAL ERROR",0
>13a2	20 45 52 52 4f 52 00
.13a9					ErrorV_divzero:
.13a9	20 da 12	jsr $12da		jsr	ErrorHandler
>13ac	44 49 56 49 44 45 20 42			.text	"DIVIDE BY ZERO",0
>13b4	59 20 5a 45 52 4f 00
.13bb					ErrorV_structure:
.13bb	20 da 12	jsr $12da		jsr	ErrorHandler
>13be	53 54 52 55 43 54 55 52			.text	"STRUCTURE IMBALANCE",0
>13c6	45 20 49 4d 42 41 4c 41 4e 43 45 00
.13d2					ErrorV_stop:
.13d2	20 da 12	jsr $12da		jsr	ErrorHandler
>13d5	50 52 4f 47 52 41 4d 20			.text	"PROGRAM STOPPED",0
>13dd	53 54 4f 50 50 45 44 00
.13e5					ErrorV_data:
.13e5	20 da 12	jsr $12da		jsr	ErrorHandler
>13e8	4f 55 54 20 4f 46 20 44			.text	"OUT OF DATA",0
>13f0	41 54 41 00
.13f4					ErrorV_undeclared:
.13f4	20 da 12	jsr $12da		jsr	ErrorHandler
>13f7	55 4e 4b 4e 4f 57 4e 20			.text	"UNKNOWN ARRAY",0
>13ff	41 52 52 41 59 00
.1405					ErrorV_redefine:
.1405	20 da 12	jsr $12da		jsr	ErrorHandler
>1408	41 52 52 41 59 20 52 45			.text	"ARRAY REDEFINED",0
>1410	44 45 46 49 4e 45 44 00
.1418					ErrorV_index:
.1418	20 da 12	jsr $12da		jsr	ErrorHandler
>141b	42 41 44 20 41 52 52 41			.text	"BAD ARRAY INDEX",0
>1423	59 20 49 4e 44 45 58 00
.142b					ErrorV_memory:
.142b	20 da 12	jsr $12da		jsr	ErrorHandler
>142e	4f 55 54 20 4f 46 20 4d			.text	"OUT OF MEMORY",0
>1436	45 4d 4f 52 59 00
.143c					ErrorV_channel:
.143c	20 da 12	jsr $12da		jsr	ErrorHandler
>143f	49 4e 50 55 54 2f 4f 55			.text	"INPUT/OUTPUT ERROR",0
>1447	54 50 55 54 20 45 52 52 4f 52 00
.1452					CompileExpressionAt0:
.1452	a9 00		lda #$00			lda 	#0
.1454					CompileExpressionAtA:
.1454	48		pha				pha  								; save level
.1455	20 1c 1f	jsr $1f1c			jsr 	CompileTerm 				; compile a term.
.1458	fa		plx				plx 								; get level back into X
.1459					_ECALoop:
.1459	48		pha				pha 								; save type on stack.
.145a	20 f9 1a	jsr $1af9			jsr 	LookNextNonSpace 			; get the next character
.145d	c9 aa		cmp #$aa			cmp 	#C64_PLUS 					; go to be + ... < in the C64 code.
.145f	90 04		bcc $1465			bcc 	_ECAExit
.1461	c9 b4		cmp #$b4			cmp 	#C64_LESS+1
.1463	90 02		bcc $1467			bcc 	_ECAHaveToken
.1465					_ECAExit:
.1465	68		pla				pla 								; throw type off stack
.1466	60		rts				rts
.1467					_ECAHaveToken:
.1467	86 28		stx $28				stx 	zTemp0 						; save current precedence in zTemp0
.1469	aa		tax				tax 								; X contains the operator token
.146a	bd 55 14	lda $1455,x			lda 	PrecedenceTable-C64_PLUS,x  ; read precedence.
.146d	c5 28		cmp $28				cmp 	zTemp0 						; if < then exit
.146f	90 f4		bcc $1465			bcc 	_ECAExit
.1471	85 29		sta $29				sta 	zTemp0+1 					; save the precedence of the operator.
.1473	20 07 1b	jsr $1b07			jsr 	GetNext 					; consume the token.
.1476	e0 b1		cpx #$b1			cpx 	#C64_GREATER				; checks for < or > which could be two character tokens
.1478	f0 11		beq $148b			beq 	_ECAGreaterCheck
.147a	e0 b3		cpx #$b3			cpx 	#C64_LESS
.147c	d0 1a		bne $1498			bne 	_ECAHaveFullToken
.147e	20 f6 1a	jsr $1af6			jsr 	LookNext 					; checks for < (<= or <>)
.1481	c9 b1		cmp #$b1			cmp 	#C64_GREATER 				; <> is 2 on from <
.1483	f0 0e		beq $1493			beq	 	_ECAToNotEqual
.1485	c9 b2		cmp #$b2			cmp 	#C64_EQUAL 					; <= is 3 on from <
.1487	d0 0f		bne $1498			bne 	_ECAHaveFullToken
.1489	80 07		bra $1492			bra 	_ECAAddEqual
.148b					_ECAGreaterCheck:
.148b	20 f6 1a	jsr $1af6			jsr 	LookNext
.148e	c9 b2		cmp #$b2			cmp 	#C64_EQUAL
.1490	d0 06		bne $1498			bne 	_ECAHaveFullToken
.1492					_ECAAddEqual:
.1492	e8		inx				inx 								; > => >= and < to <= is three tokens on.
.1493					_ECAToNotEqual:
.1493	e8		inx				inx
.1494	e8		inx				inx
.1495	20 07 1b	jsr $1b07			jsr 	GetNext 					; consume the = or > in >= <= <>
.1498					_ECAHaveFullToken:
.1498	e0 aa		cpx #$aa			cpx 	#C64_PLUS
.149a	d0 0a		bne $14a6			bne 	_ECANotConcat
.149c	68		pla				pla 								; get type back
.149d	48		pha				pha
.149e	29 40		and #$40			and 	#NSSTypeMask
.14a0	c9 40		cmp #$40			cmp 	#NSSString
.14a2	d0 02		bne $14a6			bne 	_ECANotConcat
.14a4	a2 df		ldx #$df			ldx 	#(PCD_CONCAT-(PCD_PLUS-C64_PLUS)) & $FF
.14a6					_ECANotConcat:
.14a6	da		phx				phx 								; save operator on the stack
.14a7	a6 28		ldx $28				ldx 	zTemp0 						; push current precedence on the stack
.14a9	da		phx				phx
.14aa	a5 29		lda $29				lda 	zTemp0+1 					; get precedence of operator
.14ac	1a		inc a				inc 	a
.14ad	20 54 14	jsr $1454			jsr 	CompileExpressionAtA 		; and compile at the next level up.
.14b0	85 28		sta $28				sta 	zTemp0 						; save type in zTemp0
.14b2	fa		plx				plx 								; restore current precedence in X
.14b3	68		pla				pla 								; restore operator
.14b4	85 29		sta $29				sta 	zTemp0+1 					; save it in zTemp0+1.
.14b6	c9 b1		cmp #$b1			cmp 	#C64_GREATER 				; check for not compare
.14b8	90 17		bcc $14d1			bcc 	_ECANotCompare
.14ba	c9 b7		cmp #$b7			cmp 	#C64_GREATER+6
.14bc	b0 13		bcs $14d1			bcs 	_ECANotCompare
.14be	7a		ply				ply 								; get type into Y
.14bf	5a		phy				phy
.14c0	48		pha				pha 								; save operator
.14c1	98		tya				tya 								; get type
.14c2	a0 94		ldy #$94			ldy 	#PCD_SCMD_CMP 				; Y is the token to use
.14c4	29 40		and #$40			and 	#NSSTypeMask
.14c6	c9 40		cmp #$40			cmp 	#NSSString
.14c8	f0 02		beq $14cc			beq 	_ECANotString
.14ca	a0 a3		ldy #$a3			ldy 	#PCD_FCMD_CMP
.14cc					_ECANotString:
.14cc	98		tya				tya									; output token Y
.14cd	20 84 10	jsr $1084			jsr 	WriteCodeByte
.14d0	68		pla				pla 								; restore operator.
.14d1					_ECANotCompare:
.14d1	18		clc				clc 								; convert to P-Code and compile.
.14d2	69 d6		adc #$d6			adc 	#(PCD_PLUS-C64_PLUS) & $FF 	; it might be invalid at this point
.14d4	20 84 10	jsr $1084			jsr 	WriteCodeByte
.14d7	68		pla				pla 								; type of current result
.14d8	45 28		eor $28				eor 	zTemp0 						; check compatible with r-expr type
.14da	29 40		and #$40			and 	#NSSTypeMask 				; the types should be compatible, only interested in number vs float
.14dc	d0 19		bne $14f7			bne		_ECAType
.14de	a5 28		lda $28				lda 	zTemp0 						; get type back
.14e0	c9 40		cmp #$40			cmp 	#NSSString 					; if it is a number, then all operators work.
.14e2	d0 18		bne $14fc			bne 	_ECAGoLoop
.14e4	a5 29		lda $29				lda 	zTemp0+1 					; check operator is + or comparator
.14e6	c9 df		cmp #$df			cmp 	#(PCD_CONCAT-(PCD_PLUS-C64_PLUS)) & $FF
.14e8	f0 10		beq $14fa			beq 	_ECAOkayString 				; (this is post conversion)
.14ea	c9 b1		cmp #$b1			cmp 	#C64_GREATER 				; must be a comparison then.
.14ec	90 09		bcc $14f7			bcc 	_ECAType
.14ee	c9 b7		cmp #$b7			cmp 	#C64_LESS+1+3 				; the +3 is because of >= <= <>
.14f0	b0 05		bcs $14f7			bcs 	_ECAType
.14f2	a9 00		lda #$00			lda 	#NSSIFloat 					; compare returns number.
.14f4	4c 59 14	jmp $1459			jmp 	_ECALoop
.14f7					_ECAType:
.14f7	4c 4d 13	jmp $134d		jmp	ErrorV_type
.14fa					_ECAOkayString:
.14fa	a9 40		lda #$40			lda 	#NSSString 					; current is string, go round again.
.14fc					_ECAGoLoop:
.14fc	4c 59 14	jmp $1459			jmp 	_ECALoop
.14ff					PrecedenceTable:
>14ff	03						.byte 	3 					; '+'
>1500	03						.byte 	3 					; '-'
>1501	04						.byte 	4 					; '*'
>1502	04						.byte 	4 					; '/'
>1503	05						.byte 	5 					; '^'
>1504	01						.byte 	1 					; 'and'
>1505	00						.byte 	0 					; 'or'
>1506	02						.byte 	2 					; '>'
>1507	02						.byte 	2 					; '='
>1508	02						.byte 	2 					; '<'
>1509	02						.byte 	2 					; '>='
>150a	02						.byte 	2 					; '<='
>150b	02						.byte 	2 					; '<>'
.150c					FindVariable:
.150c	86 2a		stx $2a				stx 	zTemp1 						; save name.
.150e	84 2b		sty $2b				sty 	zTemp1+1
.1510					_IVCheckSpecial:
.1510	c0 09		cpy #$09			cpy 	#$09	 					; both end $09 e.g. I
.1512	d0 18		bne $152c			bne 	_IVStandard
.1514	e0 14		cpx #$14			cpx 	#$14 						; TI is $14
.1516	f0 0c		beq $1524			beq 	_IVTIFloat
.1518	e0 54		cpx #$54			cpx 	#$54 						; TI$ is $54
.151a	d0 10		bne $152c			bne 	_IVStandard
.151c	a0 c0		ldy #$c0			ldy 	#$C0 						; TI$ returns string $C001
.151e	a2 01		ldx #$01			ldx 	#$01
.1520	a9 40		lda #$40			lda 	#NSSString
.1522	38		sec				sec
.1523	60		rts				rts
.1524					_IVTIFloat:
.1524	a0 80		ldy #$80			ldy 	#$80
.1526	a2 00		ldx #$00			ldx 	#$00
.1528	a9 00		lda #$00			lda 	#0
.152a	38		sec				sec
.152b	60		rts				rts
.152c					_IVStandard:
.152c	a9 00		lda #$00			lda 	#((WorkArea) & $FF)
.152e	85 28		sta $28				sta 	0+zTemp0
.1530	a9 80		lda #$80			lda 	#((WorkArea) >> 8) & $FF
.1532	85 29		sta $29				sta 	1+zTemp0
.1534					_IVCheckLoop:
.1534	b2 28		lda ($28)			lda 	(zTemp0) 					; finished ?
.1536	f0 2b		beq $1563			beq  	_IVNotFound 				; if so, return with CC.
.1538	a0 01		ldy #$01			ldy 	#1 							; match ?
.153a	b1 28		lda ($28),y			lda 	(zTemp0),y
.153c	c5 2a		cmp $2a				cmp 	zTemp1
.153e	d0 07		bne $1547			bne	 	_IVNext
.1540	c8		iny				iny
.1541	b1 28		lda ($28),y			lda 	(zTemp0),y
.1543	c5 2b		cmp $2b				cmp 	zTemp1+1
.1545	f0 0d		beq $1554			beq 	_IVFound
.1547					_IVNext:
.1547	18		clc				clc
.1548	a5 28		lda $28				lda 	zTemp0
.154a	72 28		adc ($28)			adc 	(zTemp0)
.154c	85 28		sta $28				sta 	zTemp0
.154e	90 e4		bcc $1534			bcc 	_IVCheckLoop
.1550	e6 29		inc $29				inc 	zTemp0+1
.1552	80 e0		bra $1534			bra 	_IVCheckLoop
.1554					_IVFound:
.1554	a0 03		ldy #$03			ldy 	#3 							; get address into YX
.1556	b1 28		lda ($28),y			lda 	(zTemp0),y
.1558	aa		tax				tax
.1559	c8		iny				iny
.155a	b1 28		lda ($28),y			lda 	(zTemp0),y
.155c	48		pha				pha
.155d	c8		iny				iny
.155e	b1 28		lda ($28),y			lda 	(zTemp0),y
.1560	7a		ply				ply
.1561	38		sec				sec
.1562	60		rts				rts
.1563					_IVNotFound:
.1563	a6 2a		ldx $2a				ldx 	zTemp1 						; get variable name back
.1565	a4 2b		ldy $2b				ldy 	zTemp1+1
.1567	18		clc				clc
.1568	60		rts				rts
.1569					FixBranches:
.1569	20 a9 1d	jsr $1da9			jsr 	OUTPUTRewind 				; back to the start of the *object* code.
.156c					_FBLoop:
.156c	b2 25		lda ($25)			lda 	(objPtr) 					; get the next one.
.156e	c9 d0		cmp #$d0			cmp 	#PCD_CMD_GOTO 				; found GOTO or GOSUB, patch up.
.1570	f0 16		beq $1588			beq 	_FBFixGotoGosub
.1572	c9 d1		cmp #$d1			cmp 	#PCD_CMD_GOSUB
.1574	f0 12		beq $1588			beq 	_FBFixGotoGosub
.1576	c9 d3		cmp #$d3			cmp 	#PCD_CMD_GOTOCMD_NZ 		; patch the conditional GOTOs for Z/NZ TOS.
.1578	f0 0e		beq $1588			beq 	_FBFixGotoGosub
.157a	c9 d2		cmp #$d2			cmp 	#PCD_CMD_GOTOCMD_Z
.157c	f0 0a		beq $1588			beq 	_FBFixGotoGosub
.157e	c9 d4		cmp #$d4			cmp 	#PCD_CMD_VARSPACE
.1580	f0 49		beq $15cb			beq 	_FBFixVarSpace
.1582					_FBNext:
.1582	20 3e 16	jsr $163e			jsr 	MoveObjectForward 			; move forward in object code.
.1585	90 e5		bcc $156c			bcc 	_FBLoop 					; not finished
.1587					_FBExit:
.1587	60		rts				rts
.1588					_FBFixGotoGosub:
.1588	a0 01		ldy #$01			ldy 	#1 							; if page is currently $FF
.158a	b1 25		lda ($25),y			lda 	(objPtr),y 					; then patch else leave.
.158c	c9 ff		cmp #$ff			cmp 	#$FF
.158e	d0 f2		bne $1582			bne 	_FBNext
.1590	a0 02		ldy #$02			ldy 	#2							; line number in YA
.1592	b1 25		lda ($25),y			lda 	(objPtr),y
.1594	48		pha				pha
.1595	c8		iny				iny
.1596	b1 25		lda ($25),y			lda 	(objPtr),y
.1598	a8		tay				tay
.1599	68		pla				pla
.159a	20 f2 1c	jsr $1cf2			jsr 	STRFindLine			 		; find where it is X:YA
.159d	90 08		bcc $15a7			bcc 	_FBFFound 					; not found, so must be >
.159f	48		pha				pha
.15a0	b2 25		lda ($25)			lda 	(objPtr) 					; which is a fail if not CMD_GOTOCMD_Z
.15a2	c9 d2		cmp #$d2			cmp 	#PCD_CMD_GOTOCMD_Z
.15a4	d0 15		bne $15bb			bne 	_FBFFail
.15a6	68		pla				pla
.15a7					_FBFFound:
.15a7	20 47 1d	jsr $1d47			jsr 	STRMakeOffset 				; make it an offset from X:YA
.15aa	5a		phy				phy	 								; patch the GOTO/GOSUB
.15ab	48		pha				pha
.15ac	a0 01		ldy #$01			ldy 	#1
.15ae	8a		txa				txa
.15af	91 25		sta ($25),y			sta 	(objPtr),y
.15b1	c8		iny				iny
.15b2	68		pla				pla
.15b3	91 25		sta ($25),y			sta 	(objPtr),y
.15b5	c8		iny				iny
.15b6	68		pla				pla
.15b7	91 25		sta ($25),y			sta 	(objPtr),y
.15b9	80 c7		bra $1582			bra 	_FBNext
.15bb					_FBFFail:
.15bb	a0 02		ldy #$02			ldy 	#2
.15bd	b1 25		lda ($25),y			lda 	(objPtr),y
.15bf	8d 00 05	sta $0500			sta 	currentLineNumber
.15c2	c8		iny				iny
.15c3	b1 25		lda ($25),y			lda 	(objPtr),y
.15c5	8d 01 05	sta $0501			sta 	currentLineNumber+1
.15c8	4c 80 13	jmp $1380		jmp	ErrorV_line
.15cb					_FBFixVarSpace:
.15cb	a0 01		ldy #$01			ldy 	#1
.15cd	ad 0f 06	lda $060f			lda 	freeVariableMemory
.15d0	91 25		sta ($25),y			sta 	(objPtr),y
.15d2	c8		iny				iny
.15d3	ad 10 06	lda $0610			lda 	freeVariableMemory+1
.15d6	91 25		sta ($25),y			sta 	(objPtr),y
.15d8	80 a8		bra $1582			bra 	_FBNext
.15da					CommandFOR:
.15da	20 12 1b	jsr $1b12			jsr 	GetNextNonSpace 			; first letter of index variable, should be.
.15dd	20 28 1b	jsr $1b28			jsr 	CharIsAlpha 				; if not alpha , error
.15e0	90 59		bcc $163b			bcc 	_CFFail
.15e2	20 b7 1e	jsr $1eb7			jsr 	GetReferenceTerm 			; figure out the reference.
.15e5	48		pha				pha 								; save type
.15e6	29 40		and #$40			and 	#NSSTypeMask 				; check it is numeric
.15e8	c9 00		cmp #$00			cmp 	#NSSIFloat
.15ea	d0 4f		bne $163b			bne 	_CFFail
.15ec	5a		phy				phy 								; save reference on the stack
.15ed	da		phx				phx
.15ee	a9 b2		lda #$b2			lda 	#C64_EQUAL 					; check for equal.
.15f0	20 98 10	jsr $1098			jsr 	CheckNextA
.15f3	20 52 14	jsr $1452			jsr 	CompileExpressionAt0 		; initial value
.15f6	fa		plx				plx 								; get reference back.
.15f7	7a		ply				ply
.15f8	5a		phy				phy
.15f9	da		phx				phx
.15fa	38		sec				sec 								; set initial value.
.15fb	20 69 1e	jsr $1e69			jsr 	GetSetVariable
.15fe	fa		plx				plx
.15ff	7a		ply				ply
.1600	68		pla				pla
.1601	29 20		and #$20			and 	#NSSIInt16
.1603	f0 04		beq $1609			beq 	_CFNotInt16
.1605	98		tya				tya
.1606	09 80		ora #$80			ora 	#$80
.1608	a8		tay				tay
.1609					_CFNotInt16:
.1609	8a		txa				txa 								; reference in YA
.160a	20 1c 11	jsr $111c			jsr 	PushIntegerYA
.160d	a9 a4		lda #$a4			lda 	#C64_TO
.160f	20 98 10	jsr $1098			jsr 	CheckNextA
.1612	20 52 14	jsr $1452			jsr 	CompileExpressionAt0 		; terminal value
.1615	29 40		and #$40			and 	#NSSTypeMask 				; check it is numeric
.1617	c9 00		cmp #$00			cmp 	#NSSIFloat
.1619	d0 20		bne $163b			bne 	_CFFail
.161b	20 f9 1a	jsr $1af9			jsr 	LookNextNonSpace 			; followed by STEP
.161e	c9 a9		cmp #$a9			cmp 	#C64_STEP
.1620	d0 0e		bne $1630			bne 	_CFNoStep
.1622	20 07 1b	jsr $1b07			jsr 	GetNext 					; consume it.
.1625	20 52 14	jsr $1452			jsr 	CompileExpressionAt0 		; terminal value
.1628	29 40		and #$40			and 	#NSSTypeMask 				; check it is numeric
.162a	c9 00		cmp #$00			cmp 	#NSSIFloat
.162c	d0 0d		bne $163b			bne 	_CFFail
.162e	80 05		bra $1635			bra 	_CFParametersDone
.1630					_CFNoStep:
.1630	a9 01		lda #$01			lda 	#1 							; default STEP e.g. 1
.1632	20 2f 11	jsr $112f			jsr 	PushIntegerA
.1635					_CFParametersDone:
.1635	a9 95		lda #$95			lda 	#PCD_FOR  					; compile FOR word.
.1637	20 84 10	jsr $1084			jsr 	WriteCodeByte
.163a	60		rts				rts
.163b					_CFFail:
.163b	4c 3d 13	jmp $133d		jmp	ErrorV_syntax
.163e					MoveObjectForward:
.163e	b2 25		lda ($25)			lda 	(objPtr) 					; get next
.1640	c9 ff		cmp #$ff			cmp 	#$FF
.1642	f0 36		beq $167a			beq 	_MOFEnd
.1644	c9 40		cmp #$40			cmp 	#$40 						; 00-3F
.1646	90 24		bcc $166c			bcc 	_MOFAdvance1 				; forward 1
.1648	a0 02		ldy #$02			ldy 	#2 							; 40-6F
.164a	c9 70		cmp #$70			cmp 	#$70 						; forward 2
.164c	90 20		bcc $166e			bcc 	_MOFAdvanceY
.164e	c9 ca		cmp #$ca			cmp 	#PCD_STARTSYSTEM 			; 70 - System tokens.
.1650	90 1a		bcc $166c			bcc 	_MOFAdvance1 				; forward 1
.1652	a8		tay				tay 								; read the size.
.1653	b9 0f 1d	lda $1d0f,y			lda 	MOFSizeTable-PCD_STARTSYSTEM,y
.1656	a8		tay				tay
.1657	c8		iny				iny 								; add 1 for the system token.
.1658	d0 14		bne $166e			bne 	_MOFAdvanceY 				; if 0, was $FF thus a string/data skip.
.165a	a0 01		ldy #$01			ldy 	#1 							; get length byte
.165c	b1 25		lda ($25),y			lda 	(objPtr),y
.165e	a8		tay				tay 								; into Y.
.165f	18		clc				clc
.1660	a5 25		lda $25				lda 	objPtr						; add 2 to the object pointer
.1662	69 02		adc #$02			adc 	#2
.1664	85 25		sta $25				sta 	objPtr
.1666	90 02		bcc $166a			bcc 	_MOFNoCarry1
.1668	e6 26		inc $26				inc 	objPtr+1
.166a					_MOFNoCarry1:
.166a	80 02		bra $166e			bra 	_MOFAdvanceY
.166c					_MOFAdvance1:
.166c	a0 01		ldy #$01			ldy 	#1
.166e					_MOFAdvanceY:
.166e	98		tya				tya 								; add X to objPtr
.166f	18		clc				clc
.1670	65 25		adc $25				adc 	objPtr
.1672	85 25		sta $25				sta 	objPtr
.1674	90 02		bcc $1678			bcc 	_MOFNoCarry2
.1676	e6 26		inc $26				inc 	objPtr+1
.1678					_MOFNoCarry2:
.1678	18		clc				clc 								; not completed.
.1679	60		rts				rts
.167a					_MOFEnd:
.167a	e6 25		inc $25				inc 	objPtr
.167c	d0 02		bne $1680			bne 	_MOFENoCarry
.167e	e6 26		inc $26				inc 	objPtr+1
.1680					_MOFENoCarry:
.1680	38		sec				sec
.1681	60		rts				rts
.1682					INPUTOpen:
.1682	a9 7e		lda #$7e			lda 	#((EndProgram+2) & $FF)
.1684	85 30		sta $30				sta 	0+srcInputPtr
.1686	a9 26		lda #$26			lda 	#((EndProgram+2) >> 8) & $FF
.1688	85 31		sta $31				sta 	1+srcInputPtr
.168a					INPUTClose:
.168a	60		rts				rts
.168b					INPUTGet:
.168b	b2 30		lda ($30)			lda 	(srcInputPtr)
.168d	e6 30		inc $30				inc 	srcInputPtr
.168f	d0 02		bne $1693			bne 	_IGSkip
.1691	e6 31		inc $31				inc 	srcInputPtr+1
.1693					_IGSkip:
.1693	60		rts				rts
.0030					srcInputPtr:
>0030							.fill 	2
.1694					FNCompile:
.1694	20 12 1b	jsr $1b12			jsr 	GetNextNonSpace				; get variable name w/type must be array e.g. DEF FNx(a)
.1697	20 77 1b	jsr $1b77			jsr 	ExtractVariableName
.169a	e0 00		cpx #$00			cpx 	#0
.169c	10 32		bpl $16d0			bpl 	_FNError
.169e	8a		txa				txa 								; convert to a function reference - bit 7:0 clear bit 7:1 set
.169f	29 7f		and #$7f			and 	#$7F
.16a1	aa		tax				tax
.16a2	98		tya				tya
.16a3	09 80		ora #$80			ora 	#$80
.16a5	a8		tay				tay
.16a6	20 0c 15	jsr $150c			jsr 	FindVariable				; does it already exist ?
.16a9	90 25		bcc $16d0			bcc 	_FNError 					; no.
.16ab	20 47 1d	jsr $1d47			jsr 	STRMakeOffset 				; convert to a relative address.
.16ae	c9 00		cmp #$00			cmp 	#0 							; fix up.
.16b0	d0 01		bne $16b3			bne 	_FNNoBorrow
.16b2	88		dey				dey
.16b3					_FNNoBorrow:
.16b3	3a		dec a				dec 	a
.16b4	5a		phy				phy 								; save location of routine on stack.
.16b5	48		pha				pha
.16b6	da		phx				phx
.16b7	20 52 14	jsr $1452			jsr 	CompileExpressionAt0
.16ba	20 92 10	jsr $1092			jsr 	CheckNextRParen
.16bd	a9 d1		lda #$d1			lda 	#PCD_CMD_GOSUB
.16bf	20 84 10	jsr $1084			jsr 	WriteCodeByte
.16c2	68		pla				pla
.16c3	20 84 10	jsr $1084			jsr 	WriteCodeByte
.16c6	68		pla				pla
.16c7	20 84 10	jsr $1084			jsr 	WriteCodeByte
.16ca	68		pla				pla
.16cb	20 84 10	jsr $1084			jsr 	WriteCodeByte
.16ce	18		clc				clc
.16cf	60		rts				rts
.16d0					_FNError:
.16d0	4c 30 13	jmp $1330		jmp	ErrorV_value
.16d3					CommandTables:
>16d3	07 cb 00 03 d5 1b 06			.byte	$07,$cb,$00,$03,CommandGOAlt & $FF,CommandGOAlt >> 8,$06
>16da	07 89 00 03 dc 1b 06			.byte	$07,$89,$00,$03,CommandGOTO & $FF,CommandGOTO >> 8,$06
>16e1	07 8d 00 03 cf 1b 06			.byte	$07,$8d,$00,$03,CommandGOSUB & $FF,CommandGOSUB >> 8,$06
>16e8	07 88 00 03 57 1c 06			.byte	$07,$88,$00,$03,CommandLET & $FF,CommandLET >> 8,$06
>16ef	07 85 00 03 37 1c 06			.byte	$07,$85,$00,$03,CommandINPUT & $FF,CommandINPUT >> 8,$06
>16f6	07 84 00 04 4b 1c 06			.byte	$07,$84,$00,$04,CommandINPUTStream & $FF,CommandINPUTStream >> 8,$06
>16fd	07 99 00 03 e4 1d 06			.byte	$07,$99,$00,$03,CommandPRINT & $FF,CommandPRINT >> 8,$06
>1704	07 98 00 04 e4 1d 06			.byte	$07,$98,$00,$04,CommandPRINT & $FF,CommandPRINT >> 8,$06
>170b	07 8f 00 03 ef 1e 06			.byte	$07,$8f,$00,$03,CommandREM & $FF,CommandREM >> 8,$06
>1712	07 81 00 03 da 15 06			.byte	$07,$81,$00,$03,CommandFOR & $FF,CommandFOR >> 8,$06
>1719	07 82 00 03 51 1d 06			.byte	$07,$82,$00,$03,CommandNEXT & $FF,CommandNEXT >> 8,$06
>1720	07 a1 00 03 48 1b 06			.byte	$07,$a1,$00,$03,CommandGET & $FF,CommandGET >> 8,$06
>1727	07 83 00 03 d7 11 06			.byte	$07,$83,$00,$03,CommandDATA & $FF,CommandDATA >> 8,$06
>172e	07 87 00 03 2d 1e 06			.byte	$07,$87,$00,$03,CommandREAD & $FF,CommandREAD >> 8,$06
>1735	07 86 00 03 6a 12 06			.byte	$07,$86,$00,$03,CommandDIM & $FF,CommandDIM >> 8,$06
>173c	07 96 00 03 f3 11 06			.byte	$07,$96,$00,$03,CommandDEF & $FF,CommandDEF >> 8,$06
>1743	07 8b 00 e3 ff 1b 06			.byte	$07,$8b,$00,$e3,CommandIF & $FF,CommandIF >> 8,$06
>174a	08 92 00 ea e3 b5 1f 06			.byte	$08,$92,$00,$ea,$e3,CommandWAIT & $FF,CommandWAIT >> 8,$06
>1752	09 91 00 e1 a9 03 7d 1d			.byte	$09,$91,$00,$e1,169,$03,CommandON & $FF,CommandON >> 8,$06
>175a	06
>175b	07 9e 00 e2 ca 92 06			.byte	$07,$9e,$00,$e2,37578 & $FF,37578 >> 8,$06
>1762	07 97 00 ea e1 ac 06			.byte	$07,$97,$00,$ea,$e1,172,$06
>1769	06 8e 00 10 98 06			.byte	$06,$8e,$00,$10,152,$06
>176f	07 90 00 20 ca 91 06			.byte	$07,$90,$00,$20,37322 & $FF,37322 >> 8,$06
>1776	07 80 00 20 ca 82 06			.byte	$07,$80,$00,$20,33482 & $FF,33482 >> 8,$06
>177d	07 8c 00 20 ca 90 06			.byte	$07,$8c,$00,$20,37066 & $FF,37066 >> 8,$06
>1784	07 9d 00 e3 e4 1f 06			.byte	$07,$9d,$00,$e3,CommandCMD & $FF,CommandCMD >> 8,$06
>178b	0a 9f 00 ea e3 f7 1f 10			.byte	$0a,$9f,$00,$ea,$e3,CommandOPEN & $FF,CommandOPEN >> 8,$10,198,$06
>1793	c6 06
>1795	06 a0 00 e1 c3 06			.byte	$06,$a0,$00,$e1,195,$06
>179b	07 ce 90 20 ca ac 06			.byte	$07,$ce,$90,$20,44234 & $FF,44234 >> 8,$06
>17a2	0a ce 92 e3 c5 1a 20 ca			.byte	$0a,$ce,$92,$e3,OptionalParameterCompile & $FF,OptionalParameterCompile >> 8,$20,44490 & $FF,44490 >> 8,$06
>17aa	ad 06
>17ac	0a ce 8d e3 c5 1a 20 ca			.byte	$0a,$ce,$8d,$e3,OptionalParameterCompile & $FF,OptionalParameterCompile >> 8,$20,44746 & $FF,44746 >> 8,$06
>17b4	ae 06
>17b6	06 ce 86 e1 c7 06			.byte	$06,$ce,$86,$e1,199,$06
>17bc	08 ce 84 ea ea e1 c8 06			.byte	$08,$ce,$84,$ea,$ea,$e1,200,$06
>17c4	07 ce af e2 ca 98 06			.byte	$07,$ce,$af,$e2,39114 & $FF,39114 >> 8,$06
>17cb	07 ce 8c e2 ca 8c 06			.byte	$07,$ce,$8c,$e2,36042 & $FF,36042 >> 8,$06
>17d2	09 ce ae ea ea e2 ca 95			.byte	$09,$ce,$ae,$ea,$ea,$e2,38346 & $FF,38346 >> 8,$06
>17da	06
>17db	08 ce 87 ea ea e1 99 06			.byte	$08,$ce,$87,$ea,$ea,$e1,153,$06
>17e3	0a ce 88 ea ea ea ea e1			.byte	$0a,$ce,$88,$ea,$ea,$ea,$ea,$e1,154,$06
>17eb	9a 06
>17ed	0a ce 8a ea ea ea ea e1			.byte	$0a,$ce,$8a,$ea,$ea,$ea,$ea,$e1,155,$06
>17f5	9b 06
>17f7	0a ce 89 ea ea ea ea e1			.byte	$0a,$ce,$89,$ea,$ea,$ea,$ea,$e1,156,$06
>17ff	9c 06
>1801	09 ce 8b ea ea ea f1 9d			.byte	$09,$ce,$8b,$ea,$ea,$ea,$f1,157,$06
>1809	06
>180a	07 ce 99 20 ca 99 06			.byte	$07,$ce,$99,$20,39370 & $FF,39370 >> 8,$06
>1811	08 ce 9a ea e2 ca 9a 06			.byte	$08,$ce,$9a,$ea,$e2,39626 & $FF,39626 >> 8,$06
>1819	08 ce 9b ea e2 ca 9b 06			.byte	$08,$ce,$9b,$ea,$e2,39882 & $FF,39882 >> 8,$06
>1821	08 ce 9c ea e2 ca 9c 06			.byte	$08,$ce,$9c,$ea,$e2,40138 & $FF,40138 >> 8,$06
>1829	08 ce 9d ea e2 ca 9d 06			.byte	$08,$ce,$9d,$ea,$e2,40394 & $FF,40394 >> 8,$06
>1831	08 ce 9e ea e2 ca 9e 06			.byte	$08,$ce,$9e,$ea,$e2,40650 & $FF,40650 >> 8,$06
>1839	08 ce 9f ea e2 ca 9f 06			.byte	$08,$ce,$9f,$ea,$e2,40906 & $FF,40906 >> 8,$06
>1841	08 ce a0 ea e2 ca a0 06			.byte	$08,$ce,$a0,$ea,$e2,41162 & $FF,41162 >> 8,$06
>1849	08 ce a1 ea f2 ca a1 06			.byte	$08,$ce,$a1,$ea,$f2,41418 & $FF,41418 >> 8,$06
>1851	08 ce a2 ea f2 ca a2 06			.byte	$08,$ce,$a2,$ea,$f2,41674 & $FF,41674 >> 8,$06
>1859	08 ce a3 ea e2 ca a3 06			.byte	$08,$ce,$a3,$ea,$e2,41930 & $FF,41930 >> 8,$06
>1861	07 ce a4 20 ca a4 06			.byte	$07,$ce,$a4,$20,42186 & $FF,42186 >> 8,$06
>1868	08 ce a5 ea e2 ca a5 06			.byte	$08,$ce,$a5,$ea,$e2,42442 & $FF,42442 >> 8,$06
>1870	08 ce a6 ea e2 ca a6 06			.byte	$08,$ce,$a6,$ea,$e2,42698 & $FF,42698 >> 8,$06
>1878	08 ce a7 ea e2 ca a7 06			.byte	$08,$ce,$a7,$ea,$e2,42954 & $FF,42954 >> 8,$06
>1880	08 ce a8 ea e2 ca a8 06			.byte	$08,$ce,$a8,$ea,$e2,43210 & $FF,43210 >> 8,$06
>1888	08 ce a9 ea e2 ca a9 06			.byte	$08,$ce,$a9,$ea,$e2,43466 & $FF,43466 >> 8,$06
>1890	08 ce aa ea f2 ca aa 06			.byte	$08,$ce,$aa,$ea,$f2,43722 & $FF,43722 >> 8,$06
>1898	08 ce ab ea f2 ca ab 06			.byte	$08,$ce,$ab,$ea,$f2,43978 & $FF,43978 >> 8,$06
>18a0	00						.byte 	0
.18a1					UnaryTables:
>18a1	07 b4 00 8e 91 b6 06			.byte	$07,$b4,$00,$8e,$91,182,$06
>18a8	08 b5 00 8e 92 ca 84 06			.byte	$08,$b5,$00,$8e,$92,33994 & $FF,33994 >> 8,$06
>18b0	07 b6 00 8e 91 8d 06			.byte	$07,$b6,$00,$8e,$91,141,$06
>18b7	07 b7 00 8e 91 c1 06			.byte	$07,$b7,$00,$8e,$91,193,$06
>18be	07 b8 00 8e 91 96 06			.byte	$07,$b8,$00,$8e,$91,150,$06
>18c5	07 b9 00 8e 91 ad 06			.byte	$07,$b9,$00,$8e,$91,173,$06
>18cc	08 ba 00 8e 92 ca 85 06			.byte	$08,$ba,$00,$8e,$92,34250 & $FF,34250 >> 8,$06
>18d4	07 bb 00 8e 91 b4 06			.byte	$07,$bb,$00,$8e,$91,180,$06
>18db	08 bc 00 8e 92 ca 86 06			.byte	$08,$bc,$00,$8e,$92,34506 & $FF,34506 >> 8,$06
>18e3	08 bd 00 8e 92 ca 87 06			.byte	$08,$bd,$00,$8e,$92,34762 & $FF,34762 >> 8,$06
>18eb	08 be 00 8e 92 ca 88 06			.byte	$08,$be,$00,$8e,$92,35018 & $FF,35018 >> 8,$06
>18f3	08 bf 00 8e 92 ca 89 06			.byte	$08,$bf,$00,$8e,$92,35274 & $FF,35274 >> 8,$06
>18fb	08 c0 00 8e 92 ca 8a 06			.byte	$08,$c0,$00,$8e,$92,35530 & $FF,35530 >> 8,$06
>1903	08 c1 00 8e 92 ca 8b 06			.byte	$08,$c1,$00,$8e,$92,35786 & $FF,35786 >> 8,$06
>190b	07 c2 00 8e 91 ab 06			.byte	$07,$c2,$00,$8e,$91,171,$06
>1912	07 c3 00 8f 91 a2 06			.byte	$07,$c3,$00,$8f,$91,162,$06
>1919	07 c4 00 8e 91 ba 07			.byte	$07,$c4,$00,$8e,$91,186,$07
>1920	07 c5 00 8f 91 c2 06			.byte	$07,$c5,$00,$8f,$91,194,$06
>1927	07 c6 00 8f 91 8f 06			.byte	$07,$c6,$00,$8f,$91,143,$06
>192e	07 c7 00 8e 91 93 07			.byte	$07,$c7,$00,$8e,$91,147,$07
>1935	08 c8 00 8f ae 91 bb 07			.byte	$08,$c8,$00,$8f,$ae,$91,187,$07
>193d	08 c9 00 8f ae 91 bc 07			.byte	$08,$c9,$00,$8f,$ae,$91,188,$07
>1945	0b ca 00 8f ae 03 c5 1a			.byte	$0b,$ca,$00,$8f,$ae,$03,OptionalParameterCompile & $FF,OptionalParameterCompile >> 8,$91,189,$07
>194d	91 bd 07
>1950	07 a8 00 03 e4 1a 06			.byte	$07,$a8,$00,$03,NotUnaryCompile & $FF,NotUnaryCompile >> 8,$06
>1957	07 a5 00 03 94 16 06			.byte	$07,$a5,$00,$03,FNCompile & $FF,FNCompile >> 8,$06
>195e	07 ce d6 8e 91 91 07			.byte	$07,$ce,$d6,$8e,$91,145,$07
>1965	07 ce d5 8e 91 9e 07			.byte	$07,$ce,$d5,$8e,$91,158,$07
>196c	08 ce d0 8e ae 91 c9 06			.byte	$08,$ce,$d0,$8e,$ae,$91,201,$06
>1974	08 ce d4 8e 92 ca 83 06			.byte	$08,$ce,$d4,$8e,$92,33738 & $FF,33738 >> 8,$06
>197c	07 ce d3 20 ca 8d 06			.byte	$07,$ce,$d3,$20,36298 & $FF,36298 >> 8,$06
>1983	07 ce d1 20 ca 8e 06			.byte	$07,$ce,$d1,$20,36554 & $FF,36554 >> 8,$06
>198a	07 ce d2 20 ca 8f 06			.byte	$07,$ce,$d2,$20,36810 & $FF,36810 >> 8,$06
>1991	09 ce d7 8e ae 92 ca 96			.byte	$09,$ce,$d7,$8e,$ae,$92,38602 & $FF,38602 >> 8,$06
>1999	06
>199a	00						.byte 	0
.199b					GeneratorProcess:
.199b	86 28		stx $28				stx 	zTemp0 						; save generation pointer in zTemp0
.199d	84 29		sty $29				sty 	zTemp0+1
.199f	85 2a		sta $2a				sta 	zTemp1 						; first match token
.19a1	64 2b		stz $2b				stz 	zTemp1+1
.19a3	c9 ce		cmp #$ce			cmp 	#$CE 						; check if shift
.19a5	d0 05		bne $19ac			bne 	_GPNotShifted
.19a7	20 07 1b	jsr $1b07			jsr 	GetNext 					; get the shifted token
.19aa	85 2b		sta $2b				sta 	zTemp1+1 					; match CE xx
.19ac					_GPNotShifted:
.19ac					_GPSearch:
.19ac	b2 28		lda ($28)			lda 	(zTemp0) 					; reached end ?
.19ae	18		clc				clc
.19af	f0 2f		beq $19e0			beq 	_GPExit
.19b1	a0 01		ldy #$01			ldy 	#1 							; tokens match
.19b3	b1 28		lda ($28),y			lda 	(zTemp0),y
.19b5	c5 2a		cmp $2a				cmp 	zTemp1
.19b7	d0 09		bne $19c2			bne 	_GPNext
.19b9	a5 2b		lda $2b				lda 	zTemp1+1 					; 2nd token ?
.19bb	f0 12		beq $19cf			beq 	_GPFound
.19bd	c8		iny				iny 								; check match.
.19be	d1 28		cmp ($28),y			cmp 	(zTemp0),y
.19c0	f0 0d		beq $19cf			beq 	_GPFound
.19c2					_GPNext:
.19c2	18		clc				clc 								; follow to next
.19c3	a5 28		lda $28				lda 	zTemp0
.19c5	72 28		adc ($28)			adc 	(zTemp0)
.19c7	85 28		sta $28				sta 	zTemp0
.19c9	90 e1		bcc $19ac			bcc 	_GPSearch
.19cb	e6 29		inc $29				inc 	zTemp0+1
.19cd	80 dd		bra $19ac			bra 	_GPSearch
.19cf					_GPFound:
.19cf	18		clc				clc 								; skip to action bytes
.19d0	a5 28		lda $28				lda 	zTemp0 						; <offset> <token lo> <token hi> first
.19d2	69 03		adc #$03			adc 	#3
.19d4	85 28		sta $28				sta 	zTemp0
.19d6	90 02		bcc $19da			bcc 	_GPNoCarry
.19d8	e6 29		inc $29				inc 	zTemp0+1
.19da					_GPNoCarry:
.19da					_GPLoop:
.19da	20 e1 19	jsr $19e1			jsr 	GeneratorExecute 			; execute one command
.19dd	90 fb		bcc $19da			bcc 	_GPLoop 					; go back if not completed.
.19df	38		sec				sec 								; return with CS.
.19e0					_GPExit:
.19e0	60		rts				rts
.19e1					GeneratorExecute:
.19e1	20 8c 1a	jsr $1a8c			jsr 	_GEFetchZTemp0 				; get next.
.19e4	48		pha				pha 								; split into 2 nibbles
.19e5	4a		lsr a				lsr 	a
.19e6	4a		lsr a				lsr 	a
.19e7	4a		lsr a				lsr		a
.19e8	4a		lsr a				lsr 	a
.19e9	20 f3 19	jsr $19f3			jsr 	_GEExecuteNibble 			; MSB first
.19ec	68		pla				pla
.19ed	b0 03		bcs $19f2			bcs 	_GEHaveCompleted
.19ef	20 f3 19	jsr $19f3			jsr 	_GEExecuteNibble 			; LSB second
.19f2					_GEHaveCompleted:
.19f2	60		rts				rts
.19f3					_GEExecuteNibble:
.19f3	29 0f		and #$0f			and 	#$0F
.19f5	0a		asl a				asl 	a
.19f6	aa		tax				tax
.19f7	7c fa 19	jmp ($19fa,x)			jmp 	(_GEExecuteVectors,x)
.19fa					_GEExecuteVectors:
>19fa	1a 1a						.word 	_GEXNop 					; 0  (no operation)
>19fc	22 1a						.word 	_GEXToken1 					; 1  (compile 1 byte token)
>19fe	1c 1a						.word 	_GEXToken2 					; 2  (compile 2 byte token)
>1a00	6f 1a						.word 	_GEXExecute 				; 3  (run arbitrary code)
>1a02	62 1a						.word 	_GEXChannelExec 			; 4  (run arbitrary code with possible channel redirection)
>1a04	1a 1a						.word 	_GEXNop 					; 5
>1a06	29 1a						.word 	_GEXExitNumber 				; 6  exit return ifloat32 type
>1a08	2d 1a						.word 	_GEXExitString 				; 7  exit return string type
>1a0a	31 1a						.word 	_GEXLParam 					; 8  check ( follows
>1a0c	35 1a						.word 	_GEXRParam 					; 9  check ) follows
>1a0e	39 1a						.word 	_GEXComma					; A  check , follows
>1a10	1a 1a						.word 	_GEXNop 					; B
>1a12	1a 1a						.word 	_GEXNop 					; C
>1a14	1a 1a						.word 	_GEXNop 					; D
>1a16	49 1a						.word 	_GEXNumber 					; E  compile get any number
>1a18	54 1a						.word 	_GEXString 					; F  compile get any string
.1a1a					_GEXNop:
.1a1a	18		clc				clc
.1a1b	60		rts				rts
.1a1c					_GEXToken2:
.1a1c	20 8c 1a	jsr $1a8c			jsr 	_GEFetchZTemp0
.1a1f	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1a22					_GEXToken1:
.1a22	20 8c 1a	jsr $1a8c			jsr 	_GEFetchZTemp0
.1a25	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1a28	60		rts				rts
.1a29					_GEXExitNumber:
.1a29	a9 00		lda #$00			lda 	#NSSIFloat
.1a2b	38		sec				sec
.1a2c	60		rts				rts
.1a2d					_GEXExitString:
.1a2d	a9 40		lda #$40			lda 	#NSSString
.1a2f	38		sec				sec
.1a30	60		rts				rts
.1a31					_GEXLParam:
.1a31	a9 28		lda #$28			lda 	#"("
.1a33	80 06		bra $1a3b			bra 	_GEXCheck
.1a35					_GEXRParam:
.1a35	a9 29		lda #$29			lda 	#")"
.1a37	80 02		bra $1a3b			bra 	_GEXCheck
.1a39					_GEXComma:
.1a39	a9 2c		lda #$2c			lda 	#","
.1a3b					_GEXCheck:
.1a3b	85 2c		sta $2c				sta 	zTemp2 						; save match
.1a3d	20 12 1b	jsr $1b12			jsr 	GetNextNonSpace 			; get next skipping spaces
.1a40	c5 2c		cmp $2c				cmp 	zTemp2 						; check matches.
.1a42	d0 02		bne $1a46			bne 	_GEXSyntax
.1a44	18		clc				clc
.1a45	60		rts				rts
.1a46					_GEXSyntax:
.1a46	4c 3d 13	jmp $133d		jmp	ErrorV_syntax
.1a49					_GEXNumber:
.1a49	20 95 1a	jsr $1a95			jsr 	GEXCompileExpression 		; compile expression
.1a4c	29 40		and #$40			and 	#NSSTypeMask
.1a4e	c9 00		cmp #$00			cmp  	#NSSIFloat
.1a50	d0 0d		bne $1a5f			bne 	_GEXType
.1a52	18		clc				clc
.1a53	60		rts				rts
.1a54					_GEXString:
.1a54	20 95 1a	jsr $1a95			jsr 	GEXCompileExpression 		; compile expression
.1a57	29 40		and #$40			and 	#NSSTypeMask
.1a59	c9 40		cmp #$40			cmp  	#NSSString
.1a5b	d0 02		bne $1a5f			bne 	_GEXType
.1a5d	18		clc				clc
.1a5e	60		rts				rts
.1a5f					_GEXType:
.1a5f	4c 4d 13	jmp $134d		jmp	ErrorV_type
.1a62					_GEXChannelExec:
.1a62	20 a5 1a	jsr $1aa5			jsr 	ChannelPrefix 				; set up default
.1a65	20 6f 1a	jsr $1a6f			jsr 	_GEXExecute
.1a68	08		php				php
.1a69	20 bf 1a	jsr $1abf			jsr 	ChannelPostfix 				; replace default.
.1a6c	28		plp				plp
.1a6d	60		rts				rts
>1a6e	db						.byte 	$DB 						; causes a break in the emulator
.1a6f					_GEXExecute:
.1a6f	20 8c 1a	jsr $1a8c			jsr 	_GEFetchZTemp0 				; get vector
.1a72	85 2c		sta $2c				sta 	zTemp2
.1a74	20 8c 1a	jsr $1a8c			jsr 	_GEFetchZTemp0
.1a77	85 2d		sta $2d				sta 	zTemp2+1
.1a79	a6 28		ldx $28				ldx 	zTemp0 						; push generation exec on to stack for reentrancy
.1a7b	da		phx				phx
.1a7c	a6 29		ldx $29				ldx 	zTemp0+1
.1a7e	da		phx				phx
.1a7f	20 89 1a	jsr $1a89			jsr 	_GECallZTemp2 				; execute code
.1a82	fa		plx				plx 								; recover generation exec
.1a83	86 29		stx $29				stx 	zTemp0+1
.1a85	fa		plx				plx
.1a86	86 28		stx $28				stx 	zTemp0
.1a88	60		rts				rts
.1a89					_GECallZTemp2:
.1a89	6c 2c 00	jmp ($002c)			jmp 	(zTemp2)
.1a8c					_GEFetchZTemp0:
.1a8c	b2 28		lda ($28)			lda 	(zTemp0)
.1a8e	e6 28		inc $28				inc 	zTemp0
.1a90	d0 02		bne $1a94			bne 	_GEFZ0Skip
.1a92	e6 29		inc $29				inc 	zTemp0+1
.1a94					_GEFZ0Skip:
.1a94	60		rts				rts
.1a95					GEXCompileExpression:
.1a95	a6 28		ldx $28				ldx 	zTemp0 						; push generation exec on to stack for reentrancy
.1a97	da		phx				phx
.1a98	a6 29		ldx $29				ldx 	zTemp0+1
.1a9a	da		phx				phx
.1a9b	20 52 14	jsr $1452			jsr 	CompileExpressionAt0 		; compile expression.
.1a9e	fa		plx				plx 								; recover generation exec
.1a9f	86 29		stx $29				stx 	zTemp0+1
.1aa1	fa		plx				plx
.1aa2	86 28		stx $28				stx 	zTemp0
.1aa4	60		rts				rts
.1aa5					ChannelPrefix:
.1aa5	a9 ae		lda #$ae			lda 	#PCD_GETCHANNEL				; set channel onto stack
.1aa7	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1aaa	20 95 1a	jsr $1a95			jsr 	GEXCompileExpression 		; channel #
.1aad	29 40		and #$40			and 	#NSSTypeMask
.1aaf	c9 00		cmp #$00			cmp 	#NSSIFloat
.1ab1	d0 09		bne $1abc			bne 	_CPXType
.1ab3	20 8e 10	jsr $108e			jsr 	CheckNextComma 				; check , follows.
.1ab6	a9 af		lda #$af			lda 	#PCD_SETCHANNEL				; set channel
.1ab8	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1abb	60		rts				rts
.1abc					_CPXType:
.1abc	4c 4d 13	jmp $134d		jmp	ErrorV_type
.1abf					ChannelPostfix:
.1abf	a9 af		lda #$af			lda 	#PCD_SETCHANNEL				; set channel from TOS.
.1ac1	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1ac4	60		rts				rts
.1ac5					OptionalParameterCompile:
.1ac5	20 f9 1a	jsr $1af9			jsr 	LookNextNonSpace 			; what follows.
.1ac8	c9 2c		cmp #$2c			cmp 	#","
.1aca	d0 0e		bne $1ada			bne 	_MidDefault
.1acc	20 07 1b	jsr $1b07			jsr 	GetNext 					; consume ,
.1acf	20 52 14	jsr $1452			jsr 	CompileExpressionAt0
.1ad2	29 40		and #$40			and 	#NSSTypeMask
.1ad4	c9 00		cmp #$00			cmp 	#NSSIFloat
.1ad6	d0 09		bne $1ae1			bne 	MidFailType
.1ad8	80 05		bra $1adf			bra 	_MidComplete
.1ada					_MidDefault:
.1ada	a9 ff		lda #$ff			lda 	#255 						; default of 255
.1adc	20 2f 11	jsr $112f			jsr 	PushIntegerA
.1adf					_MidComplete:
.1adf	18		clc				clc
.1ae0	60		rts				rts
.1ae1					MidFailType:
.1ae1	4c 4d 13	jmp $134d		jmp	ErrorV_type
.1ae4					NotUnaryCompile:
.1ae4	ad 07 15	lda $1507			lda 	PrecedenceTable+C64_EQUAL-C64_PLUS
.1ae7	20 54 14	jsr $1454			jsr 	CompileExpressionAtA 		; evaluate at that level
.1aea	29 40		and #$40			and 	#NSSTypeMask 				; check compile returns number.
.1aec	c9 00		cmp #$00			cmp 	#NSSIFloat
.1aee	d0 f1		bne $1ae1			bne 	MidFailType
.1af0	a9 a8		lda #$a8			lda 	#PCD_NOT 					; and NOT it.
.1af2	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1af5	60		rts				rts
.1af6					LookNext:
.1af6	b2 2e		lda ($2e)			lda 	(srcPtr)
.1af8	60		rts				rts
.1af9					LookNextNonSpace:
.1af9	b2 2e		lda ($2e)			lda 	(srcPtr)
.1afb	c9 20		cmp #$20			cmp		#' '
.1afd	f0 03		beq $1b02			beq 	_LNNSkip
.1aff	c9 00		cmp #$00			cmp 	#0
.1b01	60		rts				rts
.1b02					_LNNSkip:
.1b02	20 07 1b	jsr $1b07			jsr 	GetNext
.1b05	80 f2		bra $1af9			bra 	LookNextNonSpace
.1b07					GetNext:
.1b07	b2 2e		lda ($2e)			lda 	(srcPtr) 					; get next
.1b09	e6 2e		inc $2e				inc 	srcPtr
.1b0b	d0 02		bne $1b0f			bne 	_GNSkip
.1b0d	e6 2f		inc $2f				inc 	srcPtr+1
.1b0f					_GNSkip:
.1b0f	c9 00		cmp #$00			cmp 	#0
.1b11	60		rts				rts
.1b12					GetNextNonSpace:
.1b12	20 07 1b	jsr $1b07			jsr 	GetNext
.1b15	c9 20		cmp #$20			cmp 	#' '
.1b17	f0 f9		beq $1b12			beq 	GetNextNonSpace
.1b19	c9 00		cmp #$00			cmp 	#0
.1b1b	60		rts				rts
.1b1c					CharIsDigit:
.1b1c	c9 30		cmp #$30			cmp 	#"0"
.1b1e	90 06		bcc $1b26			bcc 	CCFalse
.1b20	c9 3a		cmp #$3a			cmp 	#"9"+1
.1b22	b0 02		bcs $1b26			bcs 	CCFalse
.1b24					CCTrue:
.1b24	38		sec				sec
.1b25	60		rts				rts
.1b26					CCFalse:
.1b26	18		clc				clc
.1b27	60		rts				rts
.1b28					CharIsAlpha:
.1b28	c9 41		cmp #$41			cmp 	#"A"
.1b2a	90 fa		bcc $1b26			bcc 	CCFalse
.1b2c	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1b2e	b0 f6		bcs $1b26			bcs 	CCFalse
.1b30	80 f2		bra $1b24			bra 	CCTrue
.1b32					ConvertHexStyle:
.1b32	38		sec				sec
.1b33	e9 30		sbc #$30			sbc 	#"0" 						; check in range 0-9 first
.1b35	90 ef		bcc $1b26			bcc 	CCFalse
.1b37	c9 0a		cmp #$0a			cmp 	#9+1
.1b39	90 e9		bcc $1b24			bcc 	CCTrue
.1b3b	38		sec				sec 								; shift into hex space A=>0 Z=>25
.1b3c	e9 11		sbc #$11			sbc 	#"A"-"0"
.1b3e	90 e6		bcc $1b26			bcc 	CCFalse
.1b40	c9 1a		cmp #$1a			cmp 	#26 						; past Z ?
.1b42	b0 e2		bcs $1b26			bcs 	CCFalse
.1b44	69 0a		adc #$0a			adc 	#10 						; make valid quasi-hex 0-35
.1b46	80 dc		bra $1b24			bra 	CCTrue
.1b48					CommandGET:
.1b48	20 f9 1a	jsr $1af9			jsr 	LookNextNonSpace 			; # follows ?
.1b4b	c9 23		cmp #$23			cmp 	#"#"
.1b4d	d0 0d		bne $1b5c			bne 	CommandGetBody
.1b4f	20 07 1b	jsr $1b07			jsr 	GetNext 					; consume #
.1b52	20 a5 1a	jsr $1aa5			jsr 	ChannelPrefix 				; do it as GET#
.1b55	20 5c 1b	jsr $1b5c			jsr 	CommandGetBody
.1b58	20 bf 1a	jsr $1abf			jsr 	ChannelPostfix
.1b5b	60		rts				rts
.1b5c					CommandGetBody:
.1b5c	20 12 1b	jsr $1b12			jsr 	GetNextNonSpace 			; get the first character
.1b5f	20 b7 1e	jsr $1eb7			jsr 	GetReferenceTerm 			; identify variable to assign to
.1b62	48		pha				pha
.1b63	29 40		and #$40			and 	#NSSTypeMask 				; check if it is a string
.1b65	c9 40		cmp #$40			cmp 	#NSSString
.1b67	d0 0b		bne $1b74			bne 	_CGType
.1b69	a9 97		lda #$97			lda 	#PCD_GET 					; compile GET
.1b6b	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1b6e	38		sec				sec
.1b6f	68		pla				pla
.1b70	20 69 1e	jsr $1e69			jsr		GetSetVariable
.1b73	60		rts				rts
.1b74					_CGType:
.1b74	4c 4d 13	jmp $134d		jmp	ErrorV_type
.1b77					ExtractVariableName:
.1b77	20 28 1b	jsr $1b28			jsr 	CharIsAlpha
.1b7a	90 50		bcc $1bcc			bcc 	_IVSyntax
.1b7c	29 1f		and #$1f			and 	#31 						; reduce first character to 5 bits
.1b7e	85 2a		sta $2a				sta 	zTemp1 						; we'll build it in zTemp1
.1b80	64 2b		stz $2b				stz 	zTemp1+1
.1b82	20 f6 1a	jsr $1af6			jsr 	LookNext 					; is there a second character ?
.1b85	20 28 1b	jsr $1b28			jsr 	CharIsAlpha  				; must be alphanumeric
.1b88	b0 05		bcs $1b8f			bcs 	_IVHasSecond
.1b8a	20 1c 1b	jsr $1b1c			jsr 	CharIsDigit
.1b8d	90 07		bcc $1b96			bcc 	_IVCheckType
.1b8f					_IVHasSecond:
.1b8f	29 3f		and #$3f			and 	#63 						; 6 bit ASCII.
.1b91	85 2b		sta $2b				sta 	zTemp1+1
.1b93					_IVGetNextCheck:
.1b93	20 07 1b	jsr $1b07			jsr 	GetNext 					; consume it
.1b96					_IVCheckType:
.1b96	20 f6 1a	jsr $1af6			jsr 	LookNext					; check if string follows.
.1b99	20 28 1b	jsr $1b28			jsr 	CharIsAlpha
.1b9c	b0 f5		bcs $1b93			bcs 	_IVGetNextCheck
.1b9e	20 1c 1b	jsr $1b1c			jsr 	CharIsDigit
.1ba1	b0 f0		bcs $1b93			bcs 	_IVGetNextCheck
.1ba3	a2 40		ldx #$40			ldx 	#NSSString
.1ba5	c9 24		cmp #$24			cmp 	#"$"
.1ba7	f0 06		beq $1baf			beq 	_IVHasType
.1ba9	a2 20		ldx #$20			ldx 	#NSSIInt16 					; check if short int follows e.g. 16 bit
.1bab	c9 25		cmp #$25			cmp 	#"%"
.1bad	d0 08		bne $1bb7			bne 	_IVCheckArray
.1baf					_IVHasType:
.1baf	8a		txa				txa 								; Or X into zTemp1
.1bb0	05 2a		ora $2a				ora 	zTemp1
.1bb2	85 2a		sta $2a				sta 	zTemp1
.1bb4	20 07 1b	jsr $1b07			jsr 	GetNext 					; consume it
.1bb7					_IVCheckArray:
.1bb7	20 f6 1a	jsr $1af6			jsr 	LookNext 					; check if array follows
.1bba	c9 28		cmp #$28			cmp 	#"("
.1bbc	d0 09		bne $1bc7			bne 	_IVNotArray
.1bbe	a5 2a		lda $2a				lda 	zTemp1 						; set array bit
.1bc0	09 80		ora #$80			ora 	#NSSArray
.1bc2	85 2a		sta $2a				sta 	zTemp1
.1bc4	20 07 1b	jsr $1b07			jsr 	GetNext 					; consume it
.1bc7					_IVNotArray:
.1bc7	a6 2a		ldx $2a				ldx 	zTemp1
.1bc9	a4 2b		ldy $2b				ldy 	zTemp1+1
.1bcb	60		rts				rts
.1bcc					_IVSyntax:
.1bcc	4c 3d 13	jmp $133d		jmp	ErrorV_syntax
.1bcf					CommandGOSUB:
.1bcf	a9 d1		lda #$d1			lda 	#PCD_CMD_GOSUB
.1bd1	20 e2 1b	jsr $1be2			jsr 	CompileBranchCommand
.1bd4	60		rts				rts
.1bd5					CommandGOAlt:
.1bd5	a9 a4		lda #$a4			lda 	#C64_TO 					; GO TO alternative
.1bd7	20 98 10	jsr $1098			jsr 	CheckNextA
.1bda	80 00		bra $1bdc			bra 	CommandGOTO
.1bdc					CommandGOTO:
.1bdc	a9 d0		lda #$d0			lda 	#PCD_CMD_GOTO
.1bde	20 e2 1b	jsr $1be2			jsr 	CompileBranchCommand
.1be1	60		rts				rts
.1be2					CompileBranchCommand:
.1be2	20 84 10	jsr $1084			jsr 	WriteCodeByte 				; write the command out.
.1be5	20 12 1b	jsr $1b12			jsr 	GetNextNonSpace
.1be8	20 b4 1d	jsr $1db4			jsr 	ParseConstant 				; get constant into YA
.1beb	90 0f		bcc $1bfc			bcc 	_CBCSyntax
.1bed	48		pha				pha
.1bee	a9 ff		lda #$ff			lda 	#$FF 						; no address yet.
.1bf0	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1bf3	68		pla				pla 								; and compile the actual line number
.1bf4	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1bf7	98		tya				tya
.1bf8	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1bfb	60		rts				rts
.1bfc					_CBCSyntax:
.1bfc	4c 3d 13	jmp $133d		jmp	ErrorV_syntax
.1bff					CommandIF:
.1bff	20 f9 1a	jsr $1af9			jsr 	LookNextNonSpace 			; what follows the tests ?
.1c02	c9 89		cmp #$89			cmp 	#C64_GOTO 					; IF .. GOTO
.1c04	f0 0f		beq $1c15			beq 	_CIGoto
.1c06	a9 a7		lda #$a7			lda 	#C64_THEN 					; should be THEN
.1c08	20 98 10	jsr $1098			jsr 	CheckNextA
.1c0b	20 f9 1a	jsr $1af9			jsr 	LookNextNonSpace 			; THEN <number>
.1c0e	20 1c 1b	jsr $1b1c			jsr 	CharIsDigit
.1c11	b0 05		bcs $1c18			bcs 	_CIGoto2
.1c13	80 09		bra $1c1e			bra 	CompileGotoEOL
.1c15					_CIGoto:
.1c15	20 07 1b	jsr $1b07			jsr 	GetNext
.1c18					_CIGoto2:
.1c18	a9 d3		lda #$d3			lda 	#PCD_CMD_GOTOCMD_NZ
.1c1a	20 e2 1b	jsr $1be2			jsr 	CompileBranchCommand
.1c1d	60		rts				rts
.1c1e					CompileGotoEOL:
.1c1e	a9 d2		lda #$d2			lda 	#PCD_CMD_GOTOCMD_Z
.1c20	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1c23	a9 ff		lda #$ff			lda 	#$FF
.1c25	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1c28	20 bd 1c	jsr $1cbd			jsr 	GetLineNumber 				; Get the current line number => YA
.1c2b	1a		inc a				inc 	a 							; and branch to +1
.1c2c	d0 01		bne $1c2f			bne 	_CGENoCarry
.1c2e	c8		iny				iny
.1c2f					_CGENoCarry:
.1c2f	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1c32	98		tya				tya
.1c33	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1c36	60		rts				rts
.1c37					CommandINPUT:
.1c37	20 f9 1a	jsr $1af9			jsr 	LookNextNonSpace 			; check for "
.1c3a	c9 22		cmp #$22			cmp 	#'"'
.1c3c	d0 0d		bne $1c4b			bne 	CommandINPUTStream
.1c3e	20 52 14	jsr $1452			jsr 	CompileExpressionAt0
.1c41	a9 b1		lda #$b1			lda 	#(PCD_PRINTCMD_S) & $FF
.1c43	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1c46	a9 2c		lda #$2c			lda 	#","
.1c48	20 8e 10	jsr $108e			jsr 	CheckNextComma
.1c4b					CommandINPUTStream:
.1c4b	a9 a1		lda #$a1			lda 	#(PCD_INPUTCMD_START) & $FF
.1c4d	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1c50	a2 9f		ldx #$9f			ldx 	#PCD_INPUT 					; do READ with Data from INPUT
.1c52	a0 a0		ldy #$a0			ldy 	#PCD_INPUTDOLLAR
.1c54	4c 31 1e	jmp $1e31			jmp 	CommandReadInputCommon
.1c57					CommandLET:
.1c57	20 12 1b	jsr $1b12			jsr 	GetNextNonSpace 			; get the first character
.1c5a					CommandLETHaveFirst:
.1c5a	20 b7 1e	jsr $1eb7			jsr 	GetReferenceTerm 			; identify variable to assign to
.1c5d	da		phx				phx 								; save target on the stack.
.1c5e	5a		phy				phy
.1c5f	48		pha				pha
.1c60	a9 b2		lda #$b2			lda 	#C64_EQUAL 					; check next is =
.1c62	20 98 10	jsr $1098			jsr 	CheckNextA
.1c65	20 52 14	jsr $1452			jsr 	CompileExpressionAt0 		; evaluate the RHS.
.1c68	85 28		sta $28				sta 	zTemp0 						; save type returned
.1c6a	68		pla				pla 								; get type of assignment
.1c6b	48		pha				pha
.1c6c	45 28		eor $28				eor 	zTemp0 						; compare using EOR
.1c6e	29 40		and #$40			and 	#NSSTypeMask 				; so we can mask type as we only need n/s
.1c70	d0 17		bne $1c89			bne 	_CLType
.1c72	68		pla				pla 								; restore and compile save code
.1c73	7a		ply				ply
.1c74	fa		plx				plx
.1c75	c0 c0		cpy #$c0			cpy 	#$C0 						; is it TI$ = "xxxxx"
.1c77	f0 05		beq $1c7e			beq 	_CLTIString
.1c79	38		sec				sec
.1c7a	20 69 1e	jsr $1e69			jsr		GetSetVariable
.1c7d	60		rts				rts
.1c7e					_CLTIString:
.1c7e	a9 ca		lda #$ca			lda 	#(PCD_TIDOLLARCMD_WRITE) >> 8
.1c80	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1c83	a9 93		lda #$93			lda 	#(PCD_TIDOLLARCMD_WRITE) & $FF
.1c85	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1c88	60		rts				rts
.1c89					_CLType:
.1c89	4c 4d 13	jmp $134d		jmp	ErrorV_type
.1c8c					ReadNextLine:
.1c8c	20 8b 16	jsr $168b			jsr 	INPUTGet 					; check offset is not zero.
.1c8f	85 28		sta $28				sta 	zTemp0
.1c91	20 8b 16	jsr $168b			jsr 	INPUTGet
.1c94	05 28		ora $28				ora 	zTemp0
.1c96	d0 02		bne $1c9a			bne 	_RNLBody
.1c98	18		clc				clc
.1c99	60		rts				rts						; end of file.
.1c9a					_RNLBody:
.1c9a	20 8b 16	jsr $168b			jsr 	INPUTGet 					; read and save line number
.1c9d	8d 00 05	sta $0500			sta 	currentLineNumber
.1ca0	20 8b 16	jsr $168b			jsr 	INPUTGet
.1ca3	8d 01 05	sta $0501			sta 	currentLineNumber+1
.1ca6	a2 00		ldx #$00			ldx 	#0 							; read line into buffer
.1ca8					_RNLRead:
.1ca8	20 8b 16	jsr $168b			jsr 	INPUTGet
.1cab	9d 00 04	sta $0400,x			sta 	sourceBuffer,x
.1cae	e8		inx				inx
.1caf	c9 00		cmp #$00			cmp 	#0
.1cb1	d0 f5		bne $1ca8			bne 	_RNLRead
.1cb3	a9 00		lda #$00			lda 	#((sourceBuffer) & $FF)
.1cb5	85 2e		sta $2e				sta 	0+srcPtr
.1cb7	a9 04		lda #$04			lda 	#((sourceBuffer) >> 8) & $FF
.1cb9	85 2f		sta $2f				sta 	1+srcPtr
.1cbb	38		sec				sec
.1cbc	60		rts				rts
.1cbd					GetLineNumber:
.1cbd	ac 01 05	ldy $0501			ldy 	currentLineNumber+1
.1cc0	ad 00 05	lda $0500			lda 	currentLineNumber
.1cc3	60		rts				rts
.1cc4					STRMarkLine:
.1cc4	48		pha				pha
.1cc5	38		sec				sec 								; allocate 5 bytes (line #, page+address)
.1cc6	ad 0b 06	lda $060b			lda 	lineNumberTable 			; and copy to zTemp0
.1cc9	e9 05		sbc #$05			sbc 	#5
.1ccb	8d 0b 06	sta $060b			sta 	lineNumberTable
.1cce	85 28		sta $28				sta 	zTemp0
.1cd0	ad 0c 06	lda $060c			lda 	lineNumberTable+1
.1cd3	e9 00		sbc #$00			sbc 	#0
.1cd5	8d 0c 06	sta $060c			sta 	lineNumberTable+1
.1cd8	85 29		sta $29				sta 	zTemp0+1
.1cda	68		pla				pla
.1cdb	92 28		sta ($28)			sta 	(zTemp0) 					; save it in +0,+1
.1cdd	98		tya				tya
.1cde	a0 01		ldy #$01			ldy 	#1
.1ce0	91 28		sta ($28),y			sta 	(zTemp0),y
.1ce2	a5 27		lda $27				lda 	objPage 					; and page# in +2
.1ce4	c8		iny				iny
.1ce5	91 28		sta ($28),y			sta 	(zTemp0),y
.1ce7	a5 25		lda $25				lda 	objPtr 						; save current address in +3,+4
.1ce9	c8		iny				iny
.1cea	91 28		sta ($28),y			sta 	(zTemp0),y
.1cec	a5 26		lda $26				lda 	objPtr+1
.1cee	c8		iny				iny
.1cef	91 28		sta ($28),y			sta 	(zTemp0),y
.1cf1	60		rts				rts
.1cf2					STRFindLine:
.1cf2	85 28		sta $28				sta 	zTemp0 						; zTemp0 line number being searched
.1cf4	84 29		sty $29				sty 	zTemp0+1
.1cf6	a9 00		lda #$00			lda 	#((WorkArea+WorkAreaSize) & $FF)
.1cf8	85 2a		sta $2a				sta 	0+zTemp1
.1cfa	a9 9f		lda #$9f			lda 	#((WorkArea+WorkAreaSize) >> 8) & $FF
.1cfc	85 2b		sta $2b				sta 	1+zTemp1
.1cfe					_STRSearch:
.1cfe	20 39 1d	jsr $1d39			jsr 	_STRPrevLine 				; look at previous record.
.1d01	a0 01		ldy #$01			ldy 	#1
.1d03	b2 2a		lda ($2a)			lda 	(zTemp1) 					; check table line # >= target
.1d05	c5 28		cmp $28				cmp 	zTemp0
.1d07	b1 2a		lda ($2a),y			lda 	(zTemp1),y
.1d09	e5 29		sbc $29				sbc 	zTemp0+1
.1d0b	b0 0b		bcs $1d18			bcs 	_STRFound 					; >=
.1d0d					_STRNext:
.1d0d	a0 01		ldy #$01			ldy 	#1 							; should not be required !
.1d0f	b1 2a		lda ($2a),y			lda 	(zTemp1),y
.1d11	c9 ff		cmp #$ff			cmp 	#$FF
.1d13	d0 e9		bne $1cfe			bne 	_STRSearch
.1d15	4c 97 13	jmp $1397		jmp	ErrorV_internal
.1d18					_STRFound:
.1d18	b2 2a		lda ($2a)			lda 	(zTemp1) 					; set A = 0 if the same, 0 if different.
.1d1a	45 28		eor $28				eor 	zTemp0
.1d1c	d0 06		bne $1d24			bne 	_STRDifferent
.1d1e	b2 2a		lda ($2a)			lda 	(zTemp1)
.1d20	45 28		eor $28				eor 	zTemp0
.1d22	f0 02		beq $1d26			beq 	_STROut 					; if zero, exit with A = 0 and correct line.
.1d24					_STRDifferent:
.1d24	a9 ff		lda #$ff			lda 	#$FF
.1d26					_STROut:
.1d26	18		clc				clc  								; set carry if different, e.g. > rather than >=
.1d27	69 ff		adc #$ff			adc 	#255
.1d29	08		php				php
.1d2a	c8		iny				iny 								; page into X
.1d2b	b1 2a		lda ($2a),y			lda 	(zTemp1),y
.1d2d	aa		tax				tax
.1d2e	c8		iny				iny 								; address into YA
.1d2f	b1 2a		lda ($2a),y			lda 	(zTemp1),y
.1d31	48		pha				pha
.1d32	c8		iny				iny
.1d33	b1 2a		lda ($2a),y			lda 	(zTemp1),y
.1d35	a8		tay				tay
.1d36	68		pla				pla
.1d37	28		plp				plp
.1d38	60		rts				rts
.1d39					_STRPrevLine:
.1d39	38		sec				sec 								; move backwards one entry.
.1d3a	a5 2a		lda $2a				lda 	zTemp1
.1d3c	e9 05		sbc #$05			sbc 	#5
.1d3e	85 2a		sta $2a				sta 	zTemp1
.1d40	a5 2b		lda $2b				lda 	zTemp1+1
.1d42	e9 00		sbc #$00			sbc 	#0
.1d44	85 2b		sta $2b				sta 	zTemp1+1
.1d46	60		rts				rts
.1d47					STRMakeOffset:
.1d47	18		clc				clc 								; borrow 1
.1d48	e5 25		sbc $25				sbc 	objPtr
.1d4a	48		pha				pha
.1d4b	98		tya				tya
.1d4c	e5 26		sbc $26				sbc 	objPtr+1
.1d4e	a8		tay				tay
.1d4f	68		pla				pla
.1d50	60		rts				rts
.1d51					CommandNEXT:
.1d51	20 f9 1a	jsr $1af9			jsr 	LookNextNonSpace 			; first letter of index variable, should be.
.1d54	20 28 1b	jsr $1b28			jsr 	CharIsAlpha 				; if not alpha , error
.1d57	90 0c		bcc $1d65			bcc 	_CNNoReferenceGiven
.1d59	20 07 1b	jsr $1b07			jsr 	GetNext
.1d5c	20 b7 1e	jsr $1eb7			jsr 	GetReferenceTerm 			; figure out the reference.
.1d5f	8a		txa				txa 								; reference in YA
.1d60	20 1c 11	jsr $111c			jsr 	PushIntegerYA 				; write it out.
.1d63	80 06		bra $1d6b			bra 	_CNParametersDone
.1d65					_CNNoReferenceGiven:
.1d65	a9 ff		lda #$ff			lda 	#255 						; write out -1 no
.1d67	a8		tay				tay
.1d68	20 1c 11	jsr $111c			jsr 	PushIntegerYA 				; write it out.
.1d6b					_CNParametersDone:
.1d6b	a9 a7		lda #$a7			lda 	#PCD_NEXT  					; compile FOR word.
.1d6d	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1d70	20 f9 1a	jsr $1af9			jsr 	LookNextNonSpace 			; look for ,
.1d73	c9 2c		cmp #$2c			cmp 	#","
.1d75	d0 05		bne $1d7c			bne 	_CNExit
.1d77	20 07 1b	jsr $1b07			jsr 	GetNext 					; consume ,
.1d7a	80 d5		bra $1d51			bra 	CommandNEXT 				; and go round.
.1d7c					_CNExit:
.1d7c	60		rts				rts
.1d7d					CommandON:
.1d7d	20 12 1b	jsr $1b12			jsr 	GetNextNonSpace 			; GOTO / GOSUB must follow
.1d80	48		pha				pha 								; save on stack
.1d81	a2 d0		ldx #$d0			ldx 	#PCD_CMD_GOTO
.1d83	c9 89		cmp #$89			cmp 	#C64_GOTO 					; must be GOTO/GOSUB
.1d85	f0 09		beq $1d90			beq 	_COCreateLoop
.1d87	a2 d1		ldx #$d1			ldx 	#PCD_CMD_GOSUB
.1d89	c9 8d		cmp #$8d			cmp 	#C64_GOSUB
.1d8b	f0 03		beq $1d90			beq 	_COCreateLoop
.1d8d	4c 3d 13	jmp $133d		jmp	ErrorV_syntax
.1d90					_COCreateLoop:
.1d90	8a		txa				txa 								; compile a goto/gosub somewhere
.1d91	da		phx				phx
.1d92	20 e2 1b	jsr $1be2			jsr 	CompileBranchCommand
.1d95	fa		plx				plx
.1d96	20 f9 1a	jsr $1af9			jsr 	LookNextNonSpace			; ',' follows
.1d99	c9 2c		cmp #$2c			cmp 	#","
.1d9b	d0 0a		bne $1da7			bne 	_COComplete 				; if so, more line numbers
.1d9d	a9 aa		lda #$aa			lda 	#PCD_MOREON 				; ON extends.
.1d9f	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1da2	20 07 1b	jsr $1b07			jsr 	GetNext
.1da5	80 e9		bra $1d90			bra 	_COCreateLoop
.1da7					_COComplete:
.1da7	68		pla				pla 								; throw GOTO/GOSUB
.1da8	60		rts				rts
.1da9					OUTPUTOpen:
.1da9					OUTPUTRewind:
.1da9	64 27		stz $27				stz 	objPage
.1dab	a9 00		lda #$00			lda 	#((PCodeStart) & $FF)
.1dad	85 25		sta $25				sta 	0+objPtr
.1daf	a9 40		lda #$40			lda 	#((PCodeStart) >> 8) & $FF
.1db1	85 26		sta $26				sta 	1+objPtr
.1db3	60		rts				rts
.1db4					ParseConstant:
.1db4	a2 00		ldx #$00			ldx 	#0
.1db6	20 31 24	jsr $2431			jsr 	FloatEncodeStart 			; send first
.1db9					_ParseLoop:
.1db9	20 f6 1a	jsr $1af6			jsr 	LookNext 					; send subsequent
.1dbc	20 34 24	jsr $2434			jsr 	FloatEncodeContinue
.1dbf	90 05		bcc $1dc6			bcc 	_ParseDone
.1dc1	20 07 1b	jsr $1b07			jsr 	GetNext 					; consume it
.1dc4	80 f3		bra $1db9			bra 	_ParseLoop
.1dc6					_ParseDone:
.1dc6	b5 32		lda $32,x			lda 	NSStatus,x 					; shouldn't be -ve ....
.1dc8	29 80		and #$80			and 	#$80
.1dca	15 6e		ora $6e,x			ora 	NSExponent,x 				; 16 bit int check
.1dcc	15 56		ora $56,x			ora 	NSMantissa2,x
.1dce	15 62		ora $62,x			ora 	NSMantissa3,x
.1dd0	18		clc				clc
.1dd1	d0 05		bne $1dd8			bne 	_ParseExit 					; exit with CC if need float to compile
.1dd3	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; read into YA.
.1dd5	b4 4a		ldy $4a,x			ldy		NSMantissa1,x
.1dd7	38		sec				sec
.1dd8					_ParseExit:
.1dd8	60		rts				rts
.1dd9					MOFSizeTable:
>1dd9	01					.byte	1         	; $ca .shift
>1dda	01					.byte	1         	; $cb .byte
>1ddb	02					.byte	2         	; $cc .word
>1ddc	05					.byte	5         	; $cd .float
>1ddd	ff					.byte	255       	; $ce .string
>1dde	ff					.byte	255       	; $cf .data
>1ddf	03					.byte	3         	; $d0 .goto
>1de0	03					.byte	3         	; $d1 .gosub
>1de1	03					.byte	3         	; $d2 .goto.z
>1de2	03					.byte	3         	; $d3 .goto.nz
>1de3	02					.byte	2         	; $d4 .varspace
.1de4					CommandPRINT:
.1de4	20 f9 1a	jsr $1af9			jsr 	LookNextNonSpace			; what follows ?
.1de7	c9 3b		cmp #$3b			cmp 	#";" 						; semicolon, check end of command
.1de9	f0 1f		beq $1e0a			beq 	_CPCheckEnd
.1deb	c9 2c		cmp #$2c			cmp 	#"," 						; , TAB and check end of command
.1ded	f0 16		beq $1e05			beq 	_CPTabCheckEnd
.1def	20 21 1e	jsr $1e21			jsr 	_CPAtEnd 					; check for : and EOL
.1df2	b0 22		bcs $1e16			bcs 	_CPExitCR 					; exit with CR
.1df4	20 52 14	jsr $1452			jsr 	CompileExpressionAt0 		; so it is something to print
.1df7	a2 b1		ldx #$b1			ldx 	#PCD_PRINTCMD_S
.1df9	29 40		and #$40			and 	#NSSString 					; if string
.1dfb	d0 02		bne $1dff			bne 	_CPOut
.1dfd	a2 b0		ldx #$b0			ldx 	#PCD_PRINTCMD_N
.1dff					_CPOut:
.1dff	8a		txa				txa 								; print that thing
.1e00	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1e03	80 df		bra $1de4			bra 	CommandPRINT 				; and loop round/
.1e05					_CPTabCheckEnd:
.1e05	a9 b7		lda #$b7			lda 	#PCD_PRINTCMD_TAB 			; , next tab stop
.1e07	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1e0a					_CPCheckEnd:
.1e0a	20 07 1b	jsr $1b07			jsr 	GetNext 					; consume it.
.1e0d	20 f9 1a	jsr $1af9			jsr 	LookNextNonSpace 			; what follows ?
.1e10	20 21 1e	jsr $1e21			jsr 	_CPAtEnd 					; reached end
.1e13	90 cf		bcc $1de4			bcc 	CommandPRINT 				; no, loop back
.1e15	60		rts				rts
.1e16					_CPExitCR:
.1e16	a9 0d		lda #$0d			lda 	#13 						; code to print CR
.1e18	20 2f 11	jsr $112f			jsr 	PushIntegerA
.1e1b	a9 92		lda #$92			lda 	#PCD_PRINTCMD_CHR
.1e1d	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1e20	60		rts				rts
.1e21					_CPAtEnd:
.1e21	c9 00		cmp #$00			cmp 	#0
.1e23	f0 06		beq $1e2b			beq 	_CPIsEnd
.1e25	c9 3a		cmp #$3a			cmp 	#":"
.1e27	f0 02		beq $1e2b			beq 	_CPIsEnd
.1e29	18		clc				clc
.1e2a	60		rts				rts
.1e2b					_CPIsEnd:
.1e2b	38		sec				sec
.1e2c	60		rts				rts
.1e2d					CommandREAD:
.1e2d	a2 b2		ldx #$b2			ldx 	#PCD_READ
.1e2f	a0 b3		ldy #$b3			ldy 	#PCD_READDOLLAR
.1e31					CommandReadInputCommon:
.1e31	8e 09 06	stx $0609			stx 	numberPCode
.1e34	8c 0a 06	sty $060a			sty 	stringPCode
.1e37					_CRLoop:
.1e37	20 12 1b	jsr $1b12			jsr 	GetNextNonSpace 			; first char of identifier
.1e3a	20 28 1b	jsr $1b28			jsr 	CharIsAlpha 				; check A-Z
.1e3d	90 27		bcc $1e66			bcc 	_CRSyntax
.1e3f	20 b7 1e	jsr $1eb7			jsr 	GetReferenceTerm 			; get the variable.
.1e42	48		pha				pha 								; save type.
.1e43	29 40		and #$40			and 	#NSSTypeMask 				; is it a string ?
.1e45	c9 40		cmp #$40			cmp 	#NSSString
.1e47	f0 05		beq $1e4e			beq 	_CRString
.1e49	ad 09 06	lda $0609			lda 	numberPCode 				; output read/input
.1e4c	80 03		bra $1e51			bra 	_CRHaveType
.1e4e					_CRString:
.1e4e	ad 0a 06	lda $060a			lda 	stringPCode					; output read$/input$
.1e51					_CRHaveType:
.1e51	20 84 10	jsr $1084			jsr 	WriteCodeByte 				; so we have one typed data item.
.1e54	68		pla				pla 								; restore type
.1e55	38		sec				sec  								; write update code.
.1e56	20 69 1e	jsr $1e69			jsr 	GetSetVariable
.1e59	20 f9 1a	jsr $1af9			jsr 	LookNextNonSpace 			; , follows ?
.1e5c	c9 2c		cmp #$2c			cmp 	#","
.1e5e	d0 05		bne $1e65			bne 	_CRExit 					; if not, end of READ.
.1e60	20 07 1b	jsr $1b07			jsr 	GetNext 					; consume comma
.1e63	80 d2		bra $1e37			bra 	_CRLoop 					; keep going
.1e65					_CRExit:
.1e65	60		rts				rts
.1e66					_CRSyntax:
.1e66	4c 3d 13	jmp $133d		jmp	ErrorV_syntax
.0609					numberPCode:
>0609							.fill 	1
.060a					stringPCode:
>060a							.fill 	1
.1e69					GetSetVariable:
.1e69	08		php				php 								; save direction on stack
.1e6a	c0 00		cpy #$00			cpy 	#$00
.1e6c	30 21		bmi $1e8f			bmi 	_GSVReadWriteSpecial
.1e6e	c9 00		cmp #$00			cmp 	#$00
.1e70	30 33		bmi $1ea5			bmi 	_GSVArray
.1e72	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16 		; get type bits
.1e74	4a		lsr a				lsr 	a 							; divide by 2
.1e75	09 40		ora #$40			ora 	#64 						; and set bit 6.
.1e77	28		plp				plp
.1e78	90 02		bcc $1e7c			bcc 	_GSVNotWrite
.1e7a	09 08		ora #$08			ora 	#8  						; set bit 3 if it is write.
.1e7c					_GSVNotWrite:
.1e7c	85 28		sta $28				sta 	zTemp0
.1e7e	98		tya				tya 	 							; shift X/Y right as the address stored is halved
.1e7f	4a		lsr a				lsr 	a
.1e80	a8		tay				tay
.1e81	8a		txa				txa
.1e82	6a		ror a				ror 	a
.1e83	aa		tax				tax
.1e84	98		tya				tya 								; lower 3 bits of YX are ORed into the opcode
.1e85	05 28		ora $28				ora 	zTemp0 						; which is the first byte of the opcode
.1e87	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1e8a	8a		txa				txa 								; and the lower 8 bits of YX are the second byte
.1e8b	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1e8e	60		rts				rts
.1e8f					_GSVReadWriteSpecial:
.1e8f	28		plp				plp
.1e90	b0 10		bcs $1ea2			bcs 	_GSVSyntax
.1e92	c0 c0		cpy #$c0			cpy 	#$C0 						; TI$ ?
.1e94	f0 06		beq $1e9c			beq 	_GSVRWString
.1e96	a9 bf		lda #$bf			lda 	#(PCD_TI) & $FF
.1e98	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1e9b	60		rts				rts
.1e9c					_GSVRWString:
.1e9c	a9 c0		lda #$c0			lda 	#(PCD_TIDOLLAR) & $FF
.1e9e	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1ea1	60		rts				rts
.1ea2					_GSVSyntax:
.1ea2	4c 3d 13	jmp $133d		jmp	ErrorV_syntax
.1ea5					_GSVArray:
.1ea5	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16 		; mask out 2 bits of type data
.1ea7	4a		lsr a				lsr 	a		 					; shift from 5,6 to 0,1
.1ea8	4a		lsr a				lsr 	a
.1ea9	4a		lsr a				lsr 	a
.1eaa	4a		lsr a				lsr 	a
.1eab	4a		lsr a				lsr 	a
.1eac	28		plp				plp 								; if writing array then set bit 2.
.1ead	90 02		bcc $1eb1			bcc 	_GSVANotWrite
.1eaf	09 04		ora #$04			ora 	#4
.1eb1					_GSVANotWrite:
.1eb1	09 78		ora #$78			ora 	#$78 						; make a valid opcode.
.1eb3	20 84 10	jsr $1084			jsr 	WriteCodeByte 				; and write it out
.1eb6	60		rts				rts
.1eb7					GetReferenceTerm:
.1eb7	20 77 1b	jsr $1b77			jsr 	ExtractVariableName 		; get name & type info
.1eba	e0 00		cpx #$00			cpx 	#0 							; check for array handler
.1ebc	30 10		bmi $1ece			bmi 	_GRTArray
.1ebe	da		phx				phx 								; save type on stack
.1ebf	20 0c 15	jsr $150c			jsr 	FindVariable 				; find it
.1ec2	b0 06		bcs $1eca			bcs 	_GRTNoCreate 				; create if required.
.1ec4	20 61 11	jsr $1161			jsr 	CreateVariableRecord 		; create a variable.
.1ec7	20 bb 11	jsr $11bb			jsr 	AllocateBytesForType 		; allocate memory for it
.1eca					_GRTNoCreate:
.1eca	68		pla				pla 								; get type back, strip out type information.
.1ecb	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16
.1ecd	60		rts				rts
.1ece					_GRTArray:
.1ece	da		phx				phx 								; save type information
.1ecf	20 0c 15	jsr $150c			jsr 	FindVariable 				; read its data, the base address in YX
.1ed2	90 18		bcc $1eec			bcc 	_GRTUndeclared 				; undeclared array.
.1ed4	da		phx				phx 								; save base address
.1ed5	5a		phy				phy
.1ed6	20 b2 12	jsr $12b2			jsr 	OutputIndexGroup 			; create an index group and generate them
.1ed9	7a		ply				ply 								; get the array base address into YX
.1eda	fa		plx				plx
.1edb	a9 20		lda #$20			lda 	#NSSIFloat+NSSIInt16 		; pretend it is an int16 reference.
.1edd	18		clc				clc
.1ede	20 69 1e	jsr $1e69			jsr 	GetSetVariable 				; load the address of the array structure.
.1ee1	a9 8e		lda #$8e			lda 	#(PCD_ARRAY) & $FF
.1ee3	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1ee6	68		pla				pla 								; and the type data into A
.1ee7	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16
.1ee9	09 80		ora #$80			ora 	#$80 						; with the array flag set.
.1eeb	60		rts				rts
.1eec					_GRTUndeclared:
.1eec	4c f4 13	jmp $13f4		jmp	ErrorV_undeclared
.1eef					CommandREM:
.1eef	20 f6 1a	jsr $1af6			jsr 	LookNext
.1ef2	f0 05		beq $1ef9			beq 	_CRExit
.1ef4	20 07 1b	jsr $1b07			jsr 	GetNext
.1ef7	80 f6		bra $1eef			bra 	CommandREM
.1ef9					_CRExit:
.1ef9	60		rts				rts
.1efa					STRReset:
.1efa	a9 00		lda #$00			lda 	#((WorkArea) & $FF)
.1efc	8d 0d 06	sta $060d			sta 	0+variableListEnd
.1eff	a9 80		lda #$80			lda 	#((WorkArea) >> 8) & $FF
.1f01	8d 0e 06	sta $060e			sta 	1+variableListEnd
.1f04	a9 00		lda #$00			lda 	#((WorkArea+WorkAreaSize) & $FF)
.1f06	8d 0b 06	sta $060b			sta 	0+lineNumberTable
.1f09	a9 9f		lda #$9f			lda 	#((WorkArea+WorkAreaSize) >> 8) & $FF
.1f0b	8d 0c 06	sta $060c			sta 	1+lineNumberTable
.1f0e	9c 00 80	stz $8000			stz 	WorkArea
.1f11	a9 00		lda #$00			lda 	#((0) & $FF)
.1f13	8d 0f 06	sta $060f			sta 	0+freeVariableMemory
.1f16	a9 00		lda #$00			lda 	#((0) >> 8) & $FF
.1f18	8d 10 06	sta $0610			sta 	1+freeVariableMemory
.1f1b	60		rts				rts
.060b					lineNumberTable:
>060b							.fill 	2
.060d					variableListEnd:
>060d							.fill 	2
.060f					freeVariableMemory:
>060f							.fill 	2
.1f1c					CompileTerm:
.1f1c	20 12 1b	jsr $1b12			jsr 	GetNextNonSpace 			; get first non space character.
.1f1f	30 72		bmi $1f93			bmi 	_CTUnaryFunctions
.1f21	20 1c 1b	jsr $1b1c			jsr 	CharIsDigit 				; found a number
.1f24	b0 3a		bcs $1f60			bcs 	_CTDigit
.1f26	c9 2e		cmp #$2e			cmp 	#"."
.1f28	f0 36		beq $1f60			beq 	_CTDigit
.1f2a	c9 22		cmp #$22			cmp 	#'"' 						; found a string ?
.1f2c	f0 43		beq $1f71			beq 	_CTString
.1f2e	c9 25		cmp #$25			cmp 	#"%"						; binary or hexadecimal ?
.1f30	f0 28		beq $1f5a			beq 	_CTOtherBase
.1f32	c9 24		cmp #$24			cmp 	#"$"
.1f34	f0 24		beq $1f5a			beq 	_CTOtherBase
.1f36	c9 28		cmp #$28			cmp 	#"(" 						; check parenthesis
.1f38	f0 17		beq $1f51			beq 	_CTBrackets
.1f3a	c9 41		cmp #$41			cmp 	#"A" 						; check variable/array ?
.1f3c	90 10		bcc $1f4e			bcc 	_CTSyntax
.1f3e	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1f40	b0 0c		bcs $1f4e			bcs 	_CTSyntax
.1f42	20 b7 1e	jsr $1eb7			jsr 	GetReferenceTerm 			; figure out what it is.
.1f45	48		pha				pha 								; save type on stack
.1f46	18		clc				clc 								; read it
.1f47	20 69 1e	jsr $1e69			jsr 	GetSetVariable
.1f4a	68		pla				pla
.1f4b	29 40		and #$40			and 	#NSSTypeMask 				; reduce to basic type
.1f4d	60		rts				rts
.1f4e					_CTSyntax:
.1f4e	4c 3d 13	jmp $133d		jmp	ErrorV_syntax
.1f51					_CTBrackets:
.1f51	20 52 14	jsr $1452			jsr 	CompileExpressionAt0
.1f54	48		pha				pha
.1f55	20 92 10	jsr $1092			jsr 	CheckNextRParen
.1f58	68		pla				pla
.1f59	60		rts				rts
.1f5a					_CTOtherBase:
.1f5a	20 12 10	jsr $1012			jsr 	InlineNonDecimal 			; non decimal constant handler
.1f5d	a9 00		lda #$00			lda 	#NSSIFloat					; return a iFloat32 integer
.1f5f	60		rts				rts
.1f60					_CTDigit:
.1f60	20 b4 1d	jsr $1db4			jsr 	ParseConstant 				; parse out an number, first is in A already.
.1f63	90 06		bcc $1f6b			bcc	 	_CTFloat 					; have a float or long int.
.1f65	20 1c 11	jsr $111c			jsr 	PushIntegerYA 				; code to push on stack
.1f68	a9 00		lda #$00			lda 	#NSSIFloat					; return a iFloat32 integer
.1f6a	60		rts				rts
.1f6b					_CTFloat:
.1f6b	20 3e 11	jsr $113e			jsr 	PushFloat  					; code to push float
.1f6e	a9 00		lda #$00			lda 	#NSSIFloat 					; return a iFloat32
.1f70	60		rts				rts
.1f71					_CTString:
.1f71	20 5d 10	jsr $105d			jsr 	BufferClear 				; copy it to the buffer
.1f74					_CTStringLoop:
.1f74	20 f6 1a	jsr $1af6			jsr 	LookNext 					; reached EOL/EOS
.1f77	f0 d5		beq $1f4e			beq 	_CTSyntax
.1f79	c9 22		cmp #$22			cmp 	#'"'
.1f7b	f0 08		beq $1f85			beq 	_CTStringDone
.1f7d	20 61 10	jsr $1061			jsr 	BufferWrite 				; write and consume
.1f80	20 07 1b	jsr $1b07			jsr 	GetNext
.1f83	80 ef		bra $1f74			bra 	_CTStringLoop
.1f85					_CTStringDone:
.1f85	20 07 1b	jsr $1b07			jsr 	GetNext 					; consume closing quote.
.1f88	a9 ce		lda #$ce			lda 	#PCD_CMD_STRING 			; output command and buffer
.1f8a	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1f8d	20 6d 10	jsr $106d			jsr 	BufferOutput
.1f90	a9 40		lda #$40			lda 	#NSSString 					; string type
.1f92	60		rts				rts
.1f93					_CTUnaryFunctions:
.1f93	c9 ab		cmp #$ab			cmp 	#C64_MINUS 					; negation of term.
.1f95	f0 0a		beq $1fa1			beq 	_CTNegation
.1f97	a2 a1		ldx #$a1			ldx 	#UnaryTables & $FF 			; check vs unary tables.
.1f99	a0 18		ldy #$18			ldy 	#UnaryTables >> 8
.1f9b	20 9b 19	jsr $199b			jsr 	GeneratorProcess
.1f9e	90 ae		bcc $1f4e			bcc		_CTSyntax
.1fa0	60		rts				rts
.1fa1					_CTNegation:
.1fa1	20 1c 1f	jsr $1f1c			jsr 	CompileTerm 				; compile a term.
.1fa4	48		pha				pha
.1fa5	29 40		and #$40			and 	#NSSTypeMask 				; if not an ifloat32 of some sort.
.1fa7	c9 00		cmp #$00			cmp 	#NSSIFloat
.1fa9	d0 07		bne $1fb2			bne 	_CTType 					; error
.1fab	a9 a5		lda #$a5			lda 	#PCD_NEGATE 				; compile negate
.1fad	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1fb0	68		pla				pla 								; return original type.
.1fb1	60		rts				rts
.1fb2					_CTType:
.1fb2	4c 4d 13	jmp $134d		jmp	ErrorV_type
.1fb5					CommandWAIT:
.1fb5	20 f9 1a	jsr $1af9			jsr 	LookNextNonSpace
.1fb8	c9 2c		cmp #$2c			cmp 	#","
.1fba	f0 10		beq $1fcc			beq 	_CWThirdParameter
.1fbc	a9 00		lda #$00			lda 	#0
.1fbe	20 2f 11	jsr $112f			jsr 	PushIntegerA
.1fc1					_CWExit:
.1fc1	a9 ca		lda #$ca			lda 	#(PCD_WAIT) >> 8
.1fc3	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1fc6	a9 94		lda #$94			lda 	#(PCD_WAIT) & $FF
.1fc8	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1fcb	60		rts				rts
.1fcc					_CWThirdParameter:
.1fcc	20 07 1b	jsr $1b07			jsr 	GetNext
.1fcf	20 54 14	jsr $1454			jsr 	CompileExpressionAtA
.1fd2	29 40		and #$40			and 	#NSSTypeMask
.1fd4	c9 00		cmp #$00			cmp 	#NSSIFloat
.1fd6	f0 e9		beq $1fc1			beq 	_CWExit
.1fd8	4c 4d 13	jmp $134d		jmp	ErrorV_type
.1fdb					OUTPUTWriteByte:
.1fdb	92 25		sta ($25)			sta 	(objPtr)
.1fdd	e6 25		inc $25				inc 	objPtr
.1fdf	d0 02		bne $1fe3			bne 	_HWOWBNoCarry
.1fe1	e6 26		inc $26				inc 	objPtr+1
.1fe3					_HWOWBNoCarry:
.1fe3	60		rts				rts
.1fe4					CommandCMD:
.1fe4	a9 af		lda #$af			lda 	#PCD_SETCHANNEL 			; set the channel to this now forever.
.1fe6	20 84 10	jsr $1084			jsr 	WriteCodeByte
.1fe9	20 f9 1a	jsr $1af9			jsr 	LookNextNonSpace 			; followed by a , ?
.1fec	c9 2c		cmp #$2c			cmp 	#","
.1fee	d0 06		bne $1ff6			bne 	_CCMDExit
.1ff0	20 07 1b	jsr $1b07			jsr 	GetNext 					; consume comma.
.1ff3	20 e4 1d	jsr $1de4			jsr 	CommandPRINT 				; do the print code
.1ff6					_CCMDExit:
.1ff6	60		rts				rts
.1ff7					CommandOPEN:
.1ff7	20 f9 1a	jsr $1af9			jsr 	LookNextNonSpace 			; followed by a , ?
.1ffa	c9 2c		cmp #$2c			cmp 	#","
.1ffc	d0 15		bne $2013			bne 	_COTwoDefaults
.1ffe	20 07 1b	jsr $1b07			jsr 	GetNext 					; consume comma
.2001	20 52 14	jsr $1452			jsr 	CompileExpressionAt0 		; what follows could be text or number.
.2004	29 40		and #$40			and 	#NSSString 					; if a number want a string to follow
.2006	f0 1e		beq $2026			beq 	_COThreeIntegers
.2008	a9 00		lda #$00			lda 	#0		 					; so we have n,n,$,0 so swap !
.200a	20 2f 11	jsr $112f			jsr 	PushIntegerA
.200d	a9 be		lda #$be			lda 	#(PCD_SWAP) & $FF
.200f	20 84 10	jsr $1084			jsr 	WriteCodeByte
.2012	60		rts				rts
.2013					_COTwoDefaults:
.2013	a9 00		lda #$00			lda 	#0
.2015	20 2f 11	jsr $112f			jsr 	PushIntegerA
.2018					_COCompileNullString:
.2018	a9 ce		lda #$ce			lda 	#(PCD_CMD_STRING) & $FF
.201a	20 84 10	jsr $1084			jsr 	WriteCodeByte
.201d	a9 00		lda #$00			lda 	#0
.201f	20 84 10	jsr $1084			jsr 	WriteCodeByte
.2022	20 84 10	jsr $1084			jsr 	WriteCodeByte
.2025	60		rts				rts
.2026					_COThreeIntegers:
.2026	20 f9 1a	jsr $1af9			jsr 	LookNextNonSpace 			; is there a ,
.2029	c9 2c		cmp #$2c			cmp 	#","
.202b	d0 eb		bne $2018			bne 	_COCompileNullString 		; if not it is n,n,n so default filename.
.202d	20 07 1b	jsr $1b07			jsr 	GetNext
.2030	20 52 14	jsr $1452			jsr 	CompileExpressionAt0 		; should be a filename
.2033	29 40		and #$40			and 	#NSSString
.2035	f0 01		beq $2038			beq 	_COType
.2037	60		rts				rts
.2038					_COType:
.2038	4c 4d 13	jmp $134d		jmp	ErrorV_type
.203b					XPrintCharacter
.203b	48		pha				pha
.203c	da		phx				phx
.203d	5a		phy				phy
.203e	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.2041	7a		ply				ply
.2042	fa		plx				plx
.2043	68		pla				pla
.2044	60		rts				rts
.2045					XSaveMemory:
.2045	da		phx				phx
.2046	5a		phy				phy
.2047	48		pha				pha
.2048	a9 00		lda #$00			lda 	#0 							; set LFS
.204a	a2 08		ldx #$08			ldx 	#8
.204c	a0 00		ldy #$00			ldy 	#0
.204e	20 ba ff	jsr $ffba			jsr 	$FFBA
.2051	a9 08		lda #$08			lda 	#8 							; set file name
.2053	a2 67		ldx #$67			ldx 	#SaveName & $FF
.2055	a0 20		ldy #$20			ldy 	#SaveName >> 8
.2057	20 bd ff	jsr $ffbd			jsr 	$FFBD
.205a	68		pla				pla 								; set up the start address.
.205b	85 29		sta $29				sta 	zTemp0+1
.205d	64 28		stz $28				stz 	zTemp0
.205f	a9 28		lda #$28			lda 	#zTemp0 					; from index.
.2061	7a		ply				ply 								; end in YX
.2062	fa		plx				plx
.2063	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; write out.
.2066	60		rts				rts
.2067					SaveName:
>2067	43 4f 44 45 2e 42 49 4e				.text 	"CODE.BIN"

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library

=12					MathStackSize = 12
=$40					NSSString = $40 							; string vs typemask
=$00					NSSIFloat = $00 							; ifloat vs typemask
=$20					NSSIInt16 = $20								; when set, a reference is a 16 bit reference (e.g. a%)
=$40					NSSTypeMask = $40
=$80					NSSArray = $80  							; array (in variable code)
.0032					NSStatus:
>0032							.fill 	MathStackSize
.003e					NSMantissa0:
>003e							.fill 	MathStackSize 				; (this is my integer mantissa system)
.004a					NSMantissa1:
>004a							.fill 	MathStackSize
.0056					NSMantissa2:
>0056							.fill 	MathStackSize
.0062					NSMantissa3:
>0062							.fill 	MathStackSize
.006e					NSExponent:
>006e							.fill 	MathStackSize
.0611					numberBuffer:
>0611							.fill 	34
.206f					FloatSubtract:
.206f	b5 32		lda $32,x			lda 	NSStatus,x 					; negate top of stack
.2071	49 80		eor #$80			eor 	#$80
.2073	95 32		sta $32,x			sta 	NSStatus,x					; and fall through.
.2075					FloatAdd:
.2075	ca		dex				dex
.2076	b5 6e		lda $6e,x			lda 	NSExponent,x 				; can use optimised.
.2078	15 6f		ora $6f,x			ora 	NSExponent+1,x
.207a	15 62		ora $62,x			ora 	NSMantissa3,x
.207c	15 63		ora $63,x			ora 	NSMantissa3+1,x
.207e	d0 04		bne $2084			bne 	_FAUseFloat
.2080	20 11 24	jsr $2411			jsr 	FloatInt32Add 				; use the int32 one.
.2083	60		rts				rts
.2084					_FAUseFloat:
.2084	20 a6 23	jsr $23a6			jsr 	FloatNormalise 				; normalise S[X]
.2087	f0 51		beq $20da			beq 	_FAReturn1
.2089	e8		inx				inx 								; normalise S[X+1]
.208a	20 a6 23	jsr $23a6			jsr 	FloatNormalise
.208d	ca		dex				dex
.208e	c9 00		cmp #$00			cmp 	#0
.2090	f0 60		beq $20f2			beq 	_FAExit 					; if so, just return A
.2092	b5 6e		lda $6e,x			lda 	NSExponent,x 				; are the exponents the same ?
.2094	d5 6f		cmp $6f,x			cmp 	NSExponent+1,x
.2096	f0 18		beq $20b0			beq 	_FAExponentsEqual
.2098	b5 6e		lda $6e,x			lda 	NSExponent,x 				; work out the larger exponent
.209a	a8		tay				tay
.209b	38		sec				sec 								; do a signed comparison of the exponents.
.209c	f5 6f		sbc $6f,x			sbc 	NSExponent+1,x
.209e	50 02		bvc $20a2			bvc 	_FANoSignedChange
.20a0	49 80		eor #$80			eor 	#$80
.20a2					_FANoSignedChange:
.20a2	29 80		and #$80			and 	#$80
.20a4	10 02		bpl $20a8			bpl 	_FAHaveMax
.20a6	b4 6f		ldy $6f,x			ldy 	NSExponent+1,x
.20a8					_FAHaveMax:
.20a8	20 f3 20	jsr $20f3			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.20ab	e8		inx				inx
.20ac	20 f3 20	jsr $20f3			jsr 	_FAShiftToExponent
.20af	ca		dex				dex
.20b0					_FAExponentsEqual:
.20b0	b5 32		lda $32,x			lda 	NSStatus,x 					; are the signs the same
.20b2	55 33		eor $33,x			eor 	NSStatus+1,x
.20b4	30 0e		bmi $20c4			bmi 	_FADifferentSigns
.20b6	20 dd 23	jsr $23dd			jsr 	FloatAddTopTwoStack 		; do the add of the mantissae
.20b9	b5 62		lda $62,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.20bb	10 35		bpl $20f2			bpl 	_FAExit 					; if no, we are done.
.20bd	20 6a 26	jsr $266a			jsr 	FloatShiftRight 				; shift A right, renormalising it.
.20c0	f6 6e		inc $6e,x			inc 	NSExponent,x 				; bump the exponent and exit
.20c2	80 2e		bra $20f2			bra 	_FAExit
.20c4					_FADifferentSigns:
.20c4	20 f7 23	jsr $23f7			jsr 	FloatSubTopTwoStack 		; subtract mantissa B from A
.20c7	b5 62		lda $62,x			lda 	NSMantissa3,x 				; is the result negative ?
.20c9	10 06		bpl $20d1			bpl 	_FACheckZero 				; if no, check for -0
.20cb	20 13 26	jsr $2613			jsr 	FloatNegate 					; netate result
.20ce	20 1a 26	jsr $261a			jsr 	FloatNegateMantissa 			; negate (2'c) the mantissa
.20d1					_FACheckZero:
.20d1	20 73 26	jsr $2673			jsr 	FloatIsZero	 				; check for -0
.20d4	d0 1c		bne $20f2			bne 	_FAExit
.20d6	74 32		stz $32,x			stz 	NSStatus,x
.20d8	80 18		bra $20f2			bra 	_FAExit
.20da					_FAReturn1:
.20da	b5 3f		lda $3f,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.20dc	95 3e		sta $3e,x			sta 	NSMantissa0,x
.20de	b5 4b		lda $4b,x			lda 	NSMantissa1+1,x
.20e0	95 4a		sta $4a,x			sta 	NSMantissa1,x
.20e2	b5 57		lda $57,x			lda 	NSMantissa2+1,x
.20e4	95 56		sta $56,x			sta 	NSMantissa2,x
.20e6	b5 63		lda $63,x			lda 	NSMantissa3+1,x
.20e8	95 62		sta $62,x			sta 	NSMantissa3,x
.20ea	b5 6f		lda $6f,x			lda 	NSExponent+1,x
.20ec	95 6e		sta $6e,x			sta 	NSExponent,x
.20ee	b5 33		lda $33,x			lda 	NSStatus+1,x
.20f0	95 32		sta $32,x			sta 	NSStatus,x
.20f2					_FAExit:
.20f2	60		rts				rts
.20f3					_FAShiftToExponent:
.20f3					_FAShiftToExponent2:
.20f3	98		tya				tya 								; compare Y to exponent
.20f4	d5 6e		cmp $6e,x			cmp 	NSExponent,x 				; reached the exponent required ?
.20f6	f0 07		beq $20ff			beq 	_FASEExit 					; exit if so.
.20f8	20 6a 26	jsr $266a			jsr 	FloatShiftRight	 			; shift the mantissa right
.20fb	f6 6e		inc $6e,x			inc 	NSExponent,x 				; increment exponent
.20fd	80 f4		bra $20f3			bra 	_FAShiftToExponent2
.20ff					_FASEExit:
.20ff	60		rts				rts
.2100					CompareEqual:
.2100	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.2102	d0 09		bne $210d			bne 	ReturnFalse
.2104					ReturnTrue:
.2104	a9 01		lda #$01			lda 	#1
.2106	95 3e		sta $3e,x			sta 	NSMantissa0,x
.2108	a9 80		lda #$80			lda 	#$80
.210a	95 32		sta $32,x			sta 	NSStatus,x
.210c	60		rts				rts
.210d					ReturnFalse:
.210d	74 3e		stz $3e,x			stz 	NSMantissa0,x
.210f	60		rts				rts
.2110					CompareNotEqual:
.2110	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.2112	d0 f0		bne $2104			bne 	ReturnTrue
.2114	80 f7		bra $210d			bra 	ReturnFalse
.2116					CompareLess:
.2116	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.2118	c9 ff		cmp #$ff			cmp 	#$FF
.211a	f0 e8		beq $2104			beq 	ReturnTrue
.211c	80 ef		bra $210d			bra 	ReturnFalse
.211e					CompareGreater:
.211e	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.2120	c9 01		cmp #$01			cmp 	#$01
.2122	f0 e0		beq $2104			beq 	ReturnTrue
.2124	80 e7		bra $210d			bra 	ReturnFalse
.2126					CompareLessEqual:
.2126	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.2128	c9 01		cmp #$01			cmp 	#$01
.212a	d0 d8		bne $2104			bne 	ReturnTrue
.212c	80 df		bra $210d			bra 	ReturnFalse
.212e					CompareGreaterEqual:
.212e	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.2130	c9 ff		cmp #$ff			cmp 	#$FF
.2132	d0 d0		bne $2104			bne 	ReturnTrue
.2134	80 d7		bra $210d			bra 	ReturnFalse
.2136					FloatCompare:
.2136	b5 6e		lda $6e,x			lda 	NSExponent,x 				; float comparison.
.2138	15 6d		ora $6d,x			ora 	NSExponent-1,x 				; integer if both integer.
.213a	48		pha				pha
.213b	20 6f 20	jsr $206f			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.213e	68		pla				pla
.213f	d0 0c		bne $214d			bne 	_FCCompareFloat
.2141	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.2143	15 4a		ora $4a,x			ora 	NSMantissa1,x
.2145	15 56		ora $56,x			ora 	NSMantissa2,x
.2147	15 62		ora $62,x			ora 	NSMantissa3,x
.2149	f0 14		beq $215f			beq 	_FCExit 					; if zero, return zero
.214b	80 0a		bra $2157			bra 	_FCSign
.214d					_FCCompareFloat:
.214d	b5 4a		lda $4a,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.214f	29 f0		and #$f0			and 	#$F0
.2151	15 56		ora $56,x			ora 	NSMantissa2,x
.2153	15 62		ora $62,x			ora 	NSMantissa3,x
.2155	f0 08		beq $215f			beq 	_FCExit 					; zero, so approximately identical
.2157					_FCSign:
.2157	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.2159	34 32		bit $32,x			bit 	NSStatus,x
.215b	10 02		bpl $215f			bpl 	_FCExit
.215d					_FCNegative:
.215d	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.215f					_FCExit:
.215f	20 53 26	jsr $2653			jsr 	FloatSetByte 				; set the result 255,0,1
.2162	60		rts				rts
.2163					FloatScalarTable:
>2163	66 66 66 66				.dword $66666666 ; 0.1
>2167	de					.byte $de
>2168	1f 85 eb 51				.dword $51eb851f ; 0.01
>216c	db					.byte $db
>216d	4c 37 89 41				.dword $4189374c ; 0.001
>2171	d8					.byte $d8
>2172	ac 8b db 68				.dword $68db8bac ; 0.0001
>2176	d4					.byte $d4
>2177	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>217b	d1					.byte $d1
>217c	83 de 1b 43				.dword $431bde83 ; 1e-06
>2180	ce					.byte $ce
>2181	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>2185	ca					.byte $ca
>2186	89 3b e6 55				.dword $55e63b89 ; 1e-08
>218a	c7					.byte $c7
>218b	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>218f	c4					.byte $c4
>2190	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>2194	c0					.byte $c0
>2195	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>2199	bd					.byte $bd
.219a					FloatDivide:
.219a	48		pha				pha
.219b	20 a6 23	jsr $23a6			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.219e	ca		dex				dex
.219f	c9 00		cmp #$00			cmp 	#0
.21a1	f0 1e		beq $21c1			beq 	_FDZero
.21a3	20 a6 23	jsr $23a6			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.21a6	f0 16		beq $21be			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.21a8	20 09 22	jsr $2209			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.21ab	20 d6 21	jsr $21d6			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.21ae	20 a6 23	jsr $23a6			jsr		FloatNormalise 				; renormalise
.21b1	20 9c 23	jsr $239c			jsr 	FloatCalculateSign 			; calculate result sign
.21b4	b5 6e		lda $6e,x			lda 	NSExponent,x 				; calculate exponent
.21b6	38		sec				sec
.21b7	f5 6f		sbc $6f,x			sbc 	NSExponent+1,x
.21b9	38		sec				sec
.21ba	e9 1e		sbc #$1e			sbc 	#30
.21bc	95 6e		sta $6e,x			sta 	NSExponent,x
.21be					_FDExit:
.21be	68		pla				pla
.21bf	18		clc				clc
.21c0	60		rts				rts
.21c1					_FDZero:
.21c1	68		pla				pla
.21c2	38		sec				sec
.21c3	60		rts				rts
.21c4					DivideInt32:
.21c4	20 8c 22	jsr $228c			jsr 	FloatIntegerPart 			; make both integers
.21c7	ca		dex				dex
.21c8	20 8c 22	jsr $228c			jsr 	FloatIntegerPart
.21cb	20 e7 21	jsr $21e7			jsr 	Int32Divide 				; divide
.21ce	20 d6 21	jsr $21d6			jsr 	NSMCopyPlusTwoToZero 		; copy result
.21d1	20 9c 23	jsr $239c			jsr 	FloatCalculateSign 			; calculate result sign
.21d4	18		clc				clc
.21d5	60		rts				rts
.21d6					NSMCopyPlusTwoToZero:
.21d6	b5 40		lda $40,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.21d8	95 3e		sta $3e,x			sta 	NSMantissa0,x
.21da	b5 4c		lda $4c,x			lda 	NSMantissa1+2,x
.21dc	95 4a		sta $4a,x			sta 	NSMantissa1,x
.21de	b5 58		lda $58,x			lda 	NSMantissa2+2,x
.21e0	95 56		sta $56,x			sta 	NSMantissa2,x
.21e2	b5 64		lda $64,x			lda 	NSMantissa3+2,x
.21e4	95 62		sta $62,x			sta 	NSMantissa3,x
.21e6	60		rts				rts
.21e7					Int32Divide:
.21e7	48		pha				pha 								; save AXY
.21e8	5a		phy				phy
.21e9	20 34 26	jsr $2634			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.21ec	20 4d 26	jsr $264d			jsr 	FloatSetZeroMantissaOnly 	; set S[X] to zero
.21ef	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.21f1					_I32DivideLoop:
.21f1	e8		inx				inx
.21f2	e8		inx				inx
.21f3	20 60 26	jsr $2660			jsr 	FloatShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.21f6	ca		dex				dex
.21f7	ca		dex				dex
.21f8	20 61 26	jsr $2661			jsr 	FloatRotateLeft
.21fb	20 27 22	jsr $2227			jsr 	FloatDivideCheck 			; check if subtract possible
.21fe	90 02		bcc $2202			bcc 	_I32DivideNoCarryIn
.2200	f6 40		inc $40,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.2202					_I32DivideNoCarryIn:
.2202	88		dey				dey 								; loop round till division completed.
.2203	d0 ec		bne $21f1			bne 	_I32DivideLoop
.2205	7a		ply				ply 								; restore AXY and exit
.2206	68		pla				pla
.2207	18		clc				clc
.2208	60		rts				rts
.2209					Int32ShiftDivide:
.2209	48		pha				pha 								; save AY
.220a	5a		phy				phy
.220b	e8		inx				inx 								; clear S[X+2]
.220c	e8		inx				inx
.220d	20 51 26	jsr $2651			jsr 	FloatSetZero
.2210	ca		dex				dex
.2211	ca		dex				dex
.2212	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.2214					_I32SDLoop:
.2214	20 27 22	jsr $2227			jsr 	FloatDivideCheck 			; check if subtract possible
.2217	e8		inx				inx
.2218	e8		inx				inx
.2219	20 61 26	jsr $2661			jsr 	FloatRotateLeft				; shift 64 bit FPA left, rotating carry in
.221c	ca		dex				dex
.221d	ca		dex				dex
.221e	20 61 26	jsr $2661			jsr 	FloatRotateLeft
.2221	88		dey				dey 	 							; do 31 times
.2222	d0 f0		bne $2214			bne 	_I32SDLoop
.2224	7a		ply				ply 								; restore AY and exit
.2225	68		pla				pla
.2226	60		rts				rts
.2227					FloatDivideCheck:
.2227	20 f7 23	jsr $23f7			jsr 	FloatSubTopTwoStack 		; subtract Stack[X+1] from Stack[X+0]
.222a	b0 04		bcs $2230			bcs 	_DCSExit 					; if carry set, then could do, exit
.222c	20 dd 23	jsr $23dd			jsr 	FloatAddTopTwoStack 		; add it back in
.222f	18		clc				clc 								; and return False
.2230					_DCSExit:
.2230	60		rts				rts
.2231					FloatFractionalPart:
.2231	5a		phy				phy
.2232	b5 32		lda $32,x			lda 	NSStatus,x 					; take absolute value
.2234	29 7f		and #$7f			and 	#$7F
.2236	95 32		sta $32,x			sta 	NSStatus,x
.2238	20 a6 23	jsr $23a6			jsr 	FloatNormalise
.223b	b5 6e		lda $6e,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.223d	38		sec				sec
.223e	e9 e0		sbc #$e0			sbc 	#$E0
.2240	90 29		bcc $226b			bcc 	_FFPExit 					; already fractional
.2242	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.2244	b0 22		bcs $2268			bcs 	_FFPZero
.2246	a8		tay				tay 								; put count to do in Y
.2247	b5 62		lda $62,x			lda 	NSMantissa3,x 				; do each in turn.
.2249	20 70 22	jsr $2270			jsr 	_FFPPartial
.224c	95 62		sta $62,x			sta 	NSMantissa3,x
.224e	b5 56		lda $56,x			lda 	NSMantissa2,x
.2250	20 70 22	jsr $2270			jsr 	_FFPPartial
.2253	95 56		sta $56,x			sta 	NSMantissa2,x
.2255	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.2257	20 70 22	jsr $2270			jsr 	_FFPPartial
.225a	95 4a		sta $4a,x			sta 	NSMantissa1,x
.225c	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.225e	20 70 22	jsr $2270			jsr 	_FFPPartial
.2261	95 3e		sta $3e,x			sta 	NSMantissa0,x
.2263	20 73 26	jsr $2673			jsr 	FloatIsZero 					; zeroed check.
.2266	d0 03		bne $226b			bne 	_FFPExit
.2268					_FFPZero:
.2268	20 51 26	jsr $2651			jsr 	FloatSetZero
.226b					_FFPExit:
.226b	20 a6 23	jsr $23a6			jsr 	FloatNormalise
.226e	7a		ply				ply
.226f	60		rts				rts
.2270					_FFPPartial:
.2270	c0 00		cpy #$00			cpy 	#0 							; no more to do
.2272	f0 17		beq $228b			beq 	_FFFPPExit
.2274	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.2276	b0 0c		bcs $2284			bcs 	_FFFPPWholeByte
.2278	5a		phy				phy
.2279					_FFFPPLeft:
.2279	0a		asl a				asl 	a
.227a	88		dey				dey
.227b	d0 fc		bne $2279			bne 	_FFFPPLeft
.227d	7a		ply				ply
.227e					_FFFPPRight:
.227e	4a		lsr a				lsr 	a
.227f	88		dey				dey
.2280	d0 fc		bne $227e			bne 	_FFFPPRight
.2282	80 07		bra $228b			bra 	_FFFPPExit
.2284					_FFFPPWholeByte:
.2284	98		tya				tya 								; subtract 8 from count
.2285	38		sec				sec
.2286	e9 08		sbc #$08			sbc 	#8
.2288	a8		tay				tay
.2289	a9 00		lda #$00			lda 	#0 							; and clear all
.228b					_FFFPPExit:
.228b	60		rts				rts
.228c					FloatIntegerPart:
.228c	48		pha				pha
.228d	b5 6e		lda $6e,x			lda 	NSExponent,x 				; is it integer already ?
.228f	f0 1d		beq $22ae			beq 	_FIPExit 					; if so do nothing
.2291	20 73 26	jsr $2673			jsr 	FloatIsZero 				; is it zero ?
.2294	f0 15		beq $22ab			beq 	_FIPZero 					; if so return zero.
.2296	20 a6 23	jsr $23a6			jsr 	FloatNormalise 				; normalise
.2299	f0 10		beq $22ab			beq 	_FIPZero 					; normalised to zero, exit zero
.229b					_FIPShift:
.229b	b5 6e		lda $6e,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.229d	10 07		bpl $22a6			bpl 	_FIPCheckZero
.229f	20 6a 26	jsr $266a			jsr 	FloatShiftRight 			; shift mantissa right
.22a2	f6 6e		inc $6e,x			inc 	NSExponent,x 				; bump exponent
.22a4	80 f5		bra $229b			bra 	_FIPShift
.22a6					_FIPCheckZero:
.22a6	20 73 26	jsr $2673			jsr 	FloatIsZero 				; avoid -0 problem
.22a9	d0 03		bne $22ae			bne 	_FIPExit 					; set to zero if mantissa zero.
.22ab					_FIPZero:
.22ab	20 51 26	jsr $2651			jsr 	FloatSetZero
.22ae					_FIPExit:
.22ae	68		pla				pla
.22af	60		rts				rts
.22b0					FloatIntegerPartDown:
.22b0	48		pha				pha
.22b1	5a		phy				phy
.22b2	b5 6e		lda $6e,x			lda 	NSExponent,x 				; is it integer already ?
.22b4	f0 36		beq $22ec			beq 	_FIPExit 					; if so do nothing
.22b6	20 73 26	jsr $2673			jsr 	FloatIsZero 				; is it zero ?
.22b9	f0 2e		beq $22e9			beq 	_FIPZero 					; if so return zero.
.22bb	20 a6 23	jsr $23a6			jsr 	FloatNormalise 				; normalise
.22be	f0 29		beq $22e9			beq 	_FIPZero 					; normalised to zero, exit zero
.22c0	a0 00		ldy #$00			ldy 	#0 							; reset the count of bits.
.22c2					_FIPShift:
.22c2	b5 6e		lda $6e,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.22c4	10 0a		bpl $22d0			bpl 	_FIPCheckDown
.22c6	20 6a 26	jsr $266a			jsr 	FloatShiftRight 			; shift mantissa right
.22c9	90 01		bcc $22cc			bcc 	_FIPNoFrac 					; shifted a zero out ?
.22cb	c8		iny				iny
.22cc					_FIPNoFrac:
.22cc	f6 6e		inc $6e,x			inc 	NSExponent,x 				; bump exponent
.22ce	80 f2		bra $22c2			bra 	_FIPShift
.22d0					_FIPCheckDown:
.22d0	c0 00		cpy #$00			cpy 	#0 							; were there any fractional bits.
.22d2	f0 10		beq $22e4			beq 	_FIPCheckZero
.22d4	34 32		bit $32,x			bit 	NSStatus,x 					; +ve
.22d6	10 0c		bpl $22e4			bpl 	_FIPCheckZero
.22d8	e8		inx				inx 								; -ve so round *down*.
.22d9	a9 01		lda #$01			lda 	#1
.22db	20 53 26	jsr $2653			jsr 	FloatSetByte
.22de	20 13 26	jsr $2613			jsr 	FloatNegate
.22e1	20 75 20	jsr $2075			jsr 	FloatAdd
.22e4					_FIPCheckZero:
.22e4	20 73 26	jsr $2673			jsr 	FloatIsZero 				; avoid -0 problem
.22e7	d0 03		bne $22ec			bne 	_FIPExit 					; set to zero if mantissa zero.
.22e9					_FIPZero:
.22e9	20 51 26	jsr $2651			jsr 	FloatSetZero
.22ec					_FIPExit:
.22ec	7a		ply				ply
.22ed	68		pla				pla
.22ee	60		rts				rts
.22ef					FloatInt8Multiply:
.22ef	5a		phy				phy
.22f0	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; right shifted multiplier in Y
.22f2	a8		tay				tay
.22f3	74 3e		stz $3e,x			stz 	NSMantissa0,x 				; zero the result (already 8 bit constant)
.22f5					_FI8MLoop:
.22f5	98		tya				tya 								; shift right shifter right into carry
.22f6	4a		lsr a				lsr 	a
.22f7	a8		tay				tay
.22f8	90 0d		bcc $2307			bcc 	_FI8MNoAdd
.22fa	18		clc				clc
.22fb	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.22fd	75 3f		adc $3f,x			adc 	NSMantissa0+1,x
.22ff	95 3e		sta $3e,x			sta 	NSMantissa0,x
.2301	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.2303	75 4b		adc $4b,x			adc 	NSMantissa1+1,x
.2305	95 4a		sta $4a,x			sta 	NSMantissa1,x
.2307					_FI8MNoAdd:
.2307	16 3f		asl $3f,x			asl 	NSMantissa0+1,x 			; shift adder left
.2309	36 4b		rol $4b,x			rol 	NSMantissa1+1,x
.230b	c0 00		cpy #$00			cpy 	#0
.230d	d0 e6		bne $22f5			bne 	_FI8MLoop 					; until right shifter zero.
.230f	7a		ply				ply
.2310	60		rts				rts
.2311					FloatMultiply:
.2311	ca		dex				dex
.2312	b5 6e		lda $6e,x			lda 	NSExponent,x 				; can use optimised ?
.2314	15 6f		ora $6f,x			ora 	NSExponent+1,x
.2316	15 62		ora $62,x			ora 	NSMantissa3,x
.2318	15 63		ora $63,x			ora 	NSMantissa3+1,x
.231a	d0 21		bne $233d			bne 	_FMUseFloat
.231c	b5 32		lda $32,x			lda 	NSStatus,x 					; check if it is 8 bit unsigned
.231e	15 33		ora $33,x			ora 	NSStatus+1,x
.2320	29 80		and #$80			and 	#$80
.2322	15 62		ora $62,x			ora 	NSMantissa3,x
.2324	15 56		ora $56,x			ora 	NSMantissa2,x
.2326	15 4a		ora $4a,x			ora 	NSMantissa1,x
.2328	15 63		ora $63,x			ora 	NSMantissa3+1,x
.232a	15 57		ora $57,x			ora 	NSMantissa2+1,x
.232c	15 4b		ora $4b,x			ora 	NSMantissa1+1,x
.232e	d0 04		bne $2334			bne 	_FMInt32
.2330	20 ef 22	jsr $22ef			jsr 	FloatInt8Multiply 			; use fast 8x8 multiply.
.2333	60		rts				rts
.2334					_FMInt32:
.2334	20 5e 23	jsr $235e			jsr 	FloatMultiplyShort			; use the int32 one.
.2337	18		clc				clc 								; fix it up if gone out of range
.2338	75 6e		adc $6e,x			adc 	NSExponent,x
.233a	95 6e		sta $6e,x			sta 	NSExponent,x
.233c	60		rts				rts
.233d					_FMUseFloat:
.233d	20 a6 23	jsr $23a6			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.2340	f0 18		beq $235a			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.2342	e8		inx				inx
.2343	20 a6 23	jsr $23a6			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.2346	ca		dex				dex
.2347	c9 00		cmp #$00			cmp 	#0
.2349	f0 0c		beq $2357			beq 	_FDSetZero
.234b	20 5e 23	jsr $235e			jsr 	FloatMultiplyShort 			; calculate the result.
.234e	75 6e		adc $6e,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.2350	18		clc				clc
.2351	75 6f		adc $6f,x			adc 	NSExponent+1,x
.2353	95 6e		sta $6e,x			sta 	NSExponent,x
.2355	80 03		bra $235a			bra 	_FDExit
.2357					_FDSetZero:
.2357	20 51 26	jsr $2651			jsr 	FloatSetZero 				; return 0
.235a					_FDExit:
.235a	20 a6 23	jsr $23a6			jsr 	FloatNormalise 				; normalise the result
.235d	60		rts				rts
.235e					FloatMultiplyShort:
.235e	5a		phy				phy 								; save Y
.235f	20 34 26	jsr $2634			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.2362	20 4d 26	jsr $264d			jsr 	FloatSetZeroMantissaOnly 	; set mantissa S[X] to zero
.2365	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.2367					_I32MLoop:
.2367	b5 40		lda $40,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.2369	15 4c		ora $4c,x			ora 	NSMantissa1+2,x
.236b	15 58		ora $58,x			ora 	NSMantissa2+2,x
.236d	15 64		ora $64,x			ora 	NSMantissa3+2,x
.236f	f0 25		beq $2396			beq 	_I32MExit 					; exit if zero
.2371	b5 40		lda $40,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.2373	29 01		and #$01			and 	#1
.2375	f0 0d		beq $2384			beq 	_I32MNoAdd
.2377	20 dd 23	jsr $23dd			jsr 	FloatAddTopTwoStack 		; if so add S[X+1] to S[X+0]
.237a	b5 62		lda $62,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.237c	10 06		bpl $2384			bpl 	_I32MNoAdd
.237e					_I32ShiftRight:
.237e	20 6a 26	jsr $266a			jsr 	FloatShiftRight 			; shift S[X] right
.2381	c8		iny				iny 								; increment shift count
.2382	80 09		bra $238d			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.2384					_I32MNoAdd:
.2384	34 63		bit $63,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.2386	70 f6		bvs $237e			bvs 	_I32ShiftRight 				; instead.
.2388	e8		inx				inx
.2389	20 60 26	jsr $2660			jsr 	FloatShiftLeft 				; shift additive S[X+1] left
.238c	ca		dex				dex
.238d					_I32MShiftUpper:
.238d	e8		inx				inx 								; shift S[X+2] right
.238e	e8		inx				inx
.238f	20 6a 26	jsr $266a			jsr 	FloatShiftRight
.2392	ca		dex				dex
.2393	ca		dex				dex
.2394	80 d1		bra $2367			bra 	_I32MLoop 					; try again.
.2396					_I32MExit:
.2396	20 9c 23	jsr $239c			jsr 	FloatCalculateSign
.2399	98		tya				tya 								; shift in A
.239a	7a		ply				ply 								; restore Y and exit
.239b	60		rts				rts
.239c					FloatCalculateSign:
.239c	b5 32		lda $32,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.239e	16 32		asl $32,x			asl 	NSStatus,x 					; shift result left
.23a0	55 33		eor $33,x			eor 	NSStatus+1,x
.23a2	0a		asl a				asl 	a 							; shift bit 7 into carry
.23a3	76 32		ror $32,x			ror 	NSStatus,x 					; shift right into status byte.
.23a5	60		rts				rts
.23a6					FloatNormalise:
.23a6	20 73 26	jsr $2673			jsr 	FloatIsZero 				; if zero exit
.23a9	d0 07		bne $23b2			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.23ab	16 32		asl $32,x			asl 	NSStatus,x 					; clear the sign bit.
.23ad	76 32		ror $32,x			ror 	NSStatus,x 					; (no -0)
.23af	a9 00		lda #$00			lda 	#0 							; set Z flag
.23b1	60		rts				rts
.23b2					_NSNormaliseOptimise:
.23b2	b5 62		lda $62,x			lda 	NSMantissa3,x 				; upper byte zero ?
.23b4	d0 19		bne $23cf			bne 	_NSNormaliseLoop
.23b6	b5 56		lda $56,x			lda 	NSMantissa2,x 				; byte normalise
.23b8	30 15		bmi $23cf			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.23ba	95 62		sta $62,x			sta 	NSMantissa3,x
.23bc	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.23be	95 56		sta $56,x			sta 	NSMantissa2,x
.23c0	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.23c2	95 4a		sta $4a,x			sta 	NSMantissa1,x
.23c4	74 3e		stz $3e,x			stz 	NSMantissa0,x
.23c6	b5 6e		lda $6e,x			lda 	NSExponent,x
.23c8	38		sec				sec
.23c9	e9 08		sbc #$08			sbc 	#8
.23cb	95 6e		sta $6e,x			sta 	NSExponent,x
.23cd	80 e3		bra $23b2			bra 	_NSNormaliseOptimise
.23cf					_NSNormaliseLoop:
.23cf	34 62		bit $62,x			bit 	NSMantissa3,x 				; bit 30 set ?
.23d1	70 07		bvs $23da			bvs 	_NSNExit 					; exit if so with Z flag clear
.23d3	20 60 26	jsr $2660			jsr 	FloatShiftLeft 				; shift mantissa left
.23d6	d6 6e		dec $6e,x			dec 	NSExponent,x 				; adjust exponent
.23d8	80 f5		bra $23cf			bra 	_NSNormaliseLoop
.23da					_NSNExit:
.23da	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.23dc	60		rts				rts
.23dd					FloatAddTopTwoStack:
.23dd	18		clc				clc
.23de	b5 3e		lda $3e,x			lda		NSMantissa0,x
.23e0	75 3f		adc $3f,x			adc 		NSMantissa0+1,x
.23e2	95 3e		sta $3e,x			sta 	NSMantissa0,x
.23e4	b5 4a		lda $4a,x			lda		NSMantissa1,x
.23e6	75 4b		adc $4b,x			adc 		NSMantissa1+1,x
.23e8	95 4a		sta $4a,x			sta 	NSMantissa1,x
.23ea	b5 56		lda $56,x			lda		NSMantissa2,x
.23ec	75 57		adc $57,x			adc 		NSMantissa2+1,x
.23ee	95 56		sta $56,x			sta 	NSMantissa2,x
.23f0	b5 62		lda $62,x			lda		NSMantissa3,x
.23f2	75 63		adc $63,x			adc 		NSMantissa3+1,x
.23f4	95 62		sta $62,x			sta 	NSMantissa3,x
.23f6	60		rts				rts
.23f7					FloatSubTopTwoStack:
.23f7	38		sec				sec
.23f8	b5 3e		lda $3e,x			lda		NSMantissa0,x
.23fa	f5 3f		sbc $3f,x			sbc 		NSMantissa0+1,x
.23fc	95 3e		sta $3e,x			sta 	NSMantissa0,x
.23fe	b5 4a		lda $4a,x			lda		NSMantissa1,x
.2400	f5 4b		sbc $4b,x			sbc 		NSMantissa1+1,x
.2402	95 4a		sta $4a,x			sta 	NSMantissa1,x
.2404	b5 56		lda $56,x			lda		NSMantissa2,x
.2406	f5 57		sbc $57,x			sbc 		NSMantissa2+1,x
.2408	95 56		sta $56,x			sta 	NSMantissa2,x
.240a	b5 62		lda $62,x			lda		NSMantissa3,x
.240c	f5 63		sbc $63,x			sbc 		NSMantissa3+1,x
.240e	95 62		sta $62,x			sta 	NSMantissa3,x
.2410	60		rts				rts
.2411					FloatInt32Add:
.2411	b5 32		lda $32,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.2413	55 33		eor $33,x			eor 	NSStatus+1,x
.2415	30 04		bmi $241b			bmi 	_DiffSigns
.2417	20 dd 23	jsr $23dd			jsr		FloatAddTopTwoStack
.241a	60		rts				rts
.241b					_DiffSigns:
.241b	20 f7 23	jsr $23f7			jsr 	FloatSubTopTwoStack 		; do a physical subtraction
.241e	34 62		bit $62,x			bit 	NSMantissa3,x 				; result is +ve, okay
.2420	10 07		bpl $2429			bpl 	_AddExit
.2422	b5 33		lda $33,x			lda 	NSStatus+1,x 				; sign is that of 11th value
.2424	95 32		sta $32,x			sta 	NSStatus,x
.2426	20 1a 26	jsr $261a			jsr 	FloatNegateMantissa 		; negate the mantissa and exit
.2429					_AddExit:
.2429	20 73 26	jsr $2673			jsr 	FloatIsZero 				; check for -0
.242c	d0 02		bne $2430			bne 	_AddNonZero
.242e	74 32		stz $32,x			stz 	NSStatus,x
.2430					_AddNonZero:
.2430	60		rts				rts
=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.2431					FloatEncodeStart:
.2431	38		sec				sec
.2432	80 01		bra $2435			bra 	FloatEncodeContinue+1
.2434					FloatEncodeContinue:
.2434	18		clc				clc
.2435					FloatEncode:
.2435	08		php				php 								; save reset flag.
.2436	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.2438	f0 15		beq $244f			beq 	_ENIsOkay
.243a	c9 30		cmp #$30			cmp 	#"0"
.243c	90 04		bcc $2442			bcc 	_ENBadNumber
.243e	c9 3a		cmp #$3a			cmp 	#"9"+1
.2440	90 0d		bcc $244f			bcc 	_ENIsOkay
.2442					_ENBadNumber:
.2442	28		plp				plp 								; throw saved reset
.2443	ad 33 06	lda $0633			lda 	encodeState 				; if in decimal mode, construct final number
.2446	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.2448	d0 03		bne $244d			bne 	_ENFail
.244a	4c c7 24	jmp $24c7			jmp 	_ENConstructFinal
.244d					_ENFail:
.244d	18		clc				clc 								; not allowed
.244e	60		rts				rts
.244f					_ENIsOkay:
.244f	28		plp				plp 								; are we restarting
.2450	90 15		bcc $2467			bcc 	_ENNoRestart
.2452					_ENStartEncode:
.2452	c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.2454	f0 0c		beq $2462			beq 	_ENFirstDP
.2456	29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.2458	20 53 26	jsr $2653			jsr 	FloatSetByte 				; in single byte mode.
.245b	a9 01		lda #$01			lda 	#ESTA_Low
.245d					_ENExitChange:
.245d	8d 33 06	sta $0633			sta 	encodeState 				; save new state
.2460	38		sec				sec
.2461	60		rts				rts
.2462					_ENFirstDP:
.2462	20 51 26	jsr $2651			jsr 	FloatSetZero 				; clear integer part
.2465	80 3c		bra $24a3			bra 	_ESTASwitchFloat			; go straight to float and exi
.2467					_ENNoRestart:
.2467	48		pha				pha 								; save digit or DP on stack.
.2468	ad 33 06	lda $0633			lda 	encodeState 				; get current state
.246b	c9 01		cmp #$01			cmp 	#ESTA_Low
.246d	f0 09		beq $2478			beq  	_ESTALowState
.246f	c9 02		cmp #$02			cmp 	#ESTA_High
.2471	f0 26		beq $2499			beq 	_ESTAHighState
.2473	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.2475	f0 38		beq $24af			beq 	_ESTADecimalState
>2477	db						.byte 	$DB 						; causes a break in the emulator
.2478					_ESTALowState:
.2478	68		pla				pla 								; get value back
.2479	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.247b	f0 26		beq $24a3			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.247d	29 0f		and #$0f			and 	#15 						; make digit
.247f	8d 34 06	sta $0634			sta 	digitTemp 					; save it.
.2482	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.2484	0a		asl a				asl 	a
.2485	0a		asl a				asl 	a
.2486	75 3e		adc $3e,x			adc 	NSMantissa0,x
.2488	0a		asl a				asl 	a
.2489	6d 34 06	adc $0634			adc 	digitTemp
.248c	95 3e		sta $3e,x			sta 	NSMantissa0,x
.248e	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.2490	90 05		bcc $2497			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.2492	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.2494	8d 33 06	sta $0633			sta 	encodeState
.2497					_ESTANoSwitch:
.2497	38		sec				sec
.2498	60		rts				rts
.2499					_ESTAHighState:
.2499	68		pla				pla 								; get value back
.249a	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.249c	f0 05		beq $24a3			beq 	_ESTASwitchFloat
.249e	20 f9 24	jsr $24f9			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.24a1	38		sec				sec
.24a2	60		rts				rts
.24a3					_ESTASwitchFloat:
.24a3	9c 35 06	stz $0635			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.24a6	e8		inx				inx 								; zero the decimal additive.
.24a7	20 51 26	jsr $2651			jsr 	FloatSetZero
.24aa	ca		dex				dex
.24ab	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.24ad	80 ae		bra $245d			bra 	_ENExitChange
.24af					_ESTADecimalState:
.24af	68		pla				pla 								; digit.
.24b0	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 11th decimal point.
.24b2	f0 99		beq $244d			beq 	_ENFail
.24b4	e8		inx				inx 								; put digit into fractional part of X+1
.24b5	20 f9 24	jsr $24f9			jsr 	ESTAShiftDigitIntoMantissa
.24b8	ca		dex				dex
.24b9	ee 35 06	inc $0635			inc 	decimalCount 				; bump the count of decimals
.24bc	ad 35 06	lda $0635			lda 	decimalCount 				; too many decimal digits.
.24bf	c9 0b		cmp #$0b			cmp 	#11
.24c1	f0 02		beq $24c5			beq 	_ESTADSFail
.24c3	38		sec				sec
.24c4	60		rts				rts
.24c5					_ESTADSFail:
.24c5	18		clc				clc
.24c6	60		rts				rts
.24c7					_ENConstructFinal:
.24c7	ad 35 06	lda $0635			lda 	decimalCount 				; get decimal count
.24ca	f0 2b		beq $24f7			beq 	_ENCFExit 					; no decimals
.24cc	5a		phy				phy
.24cd	0a		asl a				asl 	a 							; x 4 and CLC
.24ce	0a		asl a				asl 	a
.24cf	6d 35 06	adc $0635			adc 	decimalCount
.24d2	a8		tay				tay
.24d3	b9 5e 21	lda $215e,y			lda 	FloatScalarTable-5,y 		; copy decimal scalar to X+2
.24d6	95 40		sta $40,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.24d8	b9 5f 21	lda $215f,y			lda 	FloatScalarTable-5+1,y
.24db	95 4c		sta $4c,x			sta 	NSMantissa1+2,x
.24dd	b9 60 21	lda $2160,y			lda 	FloatScalarTable-5+2,y
.24e0	95 58		sta $58,x			sta 	NSMantissa2+2,x
.24e2	b9 61 21	lda $2161,y			lda 	FloatScalarTable-5+3,y
.24e5	95 64		sta $64,x			sta 	NSMantissa3+2,x
.24e7	b9 62 21	lda $2162,y			lda 	FloatScalarTable-5+4,y
.24ea	95 70		sta $70,x			sta 	NSExponent+2,x
.24ec	74 34		stz $34,x			stz 	NSStatus+2,x 				; make +ve
.24ee	e8		inx				inx 								; multiply decimal const by decimal scalar
.24ef	e8		inx				inx
.24f0	20 11 23	jsr $2311			jsr 	FloatMultiply
.24f3	20 75 20	jsr $2075			jsr 	FloatAdd 					; add to integer part.
.24f6	7a		ply				ply
.24f7					_ENCFExit:
.24f7	18		clc				clc 								; reject the digit.
.24f8	60		rts				rts
.24f9					ESTAShiftDigitIntoMantissa:
.24f9	29 0f		and #$0f			and 	#15 						; save digit
.24fb	48		pha				pha
.24fc	b5 62		lda $62,x			lda 	NSMantissa3,x 				; push mantissa on stack
.24fe	48		pha				pha
.24ff	b5 56		lda $56,x			lda 	NSMantissa2,x
.2501	48		pha				pha
.2502	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.2504	48		pha				pha
.2505	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.2507	48		pha				pha
.2508	20 60 26	jsr $2660			jsr 	FloatShiftLeft 				; x 2
.250b	20 60 26	jsr $2660			jsr 	FloatShiftLeft 				; x 4
.250e	18		clc				clc 								; pop mantissa and add
.250f	68		pla				pla
.2510	75 3e		adc $3e,x			adc 	NSMantissa0,x
.2512	95 3e		sta $3e,x			sta 	NSMantissa0,x
.2514	68		pla				pla
.2515	75 4a		adc $4a,x			adc 	NSMantissa1,x
.2517	95 4a		sta $4a,x			sta 	NSMantissa1,x
.2519	68		pla				pla
.251a	75 56		adc $56,x			adc 	NSMantissa2,x
.251c	95 56		sta $56,x			sta 	NSMantissa2,x
.251e	68		pla				pla
.251f	75 62		adc $62,x			adc 	NSMantissa3,x
.2521	95 62		sta $62,x			sta 	NSMantissa3,x 				; x 5
.2523	20 60 26	jsr $2660			jsr 	FloatShiftLeft 				; x 10
.2526	68		pla				pla 								; add digit
.2527	18		clc				clc
.2528	75 3e		adc $3e,x			adc 	NSMantissa0,x
.252a	95 3e		sta $3e,x			sta 	NSMantissa0,x
.252c	90 0a		bcc $2538			bcc 	_ESTASDExit
.252e	f6 4a		inc $4a,x			inc 	NSMantissa1,x
.2530	d0 06		bne $2538			bne 	_ESTASDExit
.2532	f6 56		inc $56,x			inc 	NSMantissa2,x
.2534	d0 02		bne $2538			bne 	_ESTASDExit
.2536	f6 62		inc $62,x			inc 	NSMantissa3,x
.2538					_ESTASDExit:
.2538	60		rts				rts
.0633					encodeState:
>0633							.fill 	1
.0634					digitTemp:
>0634							.fill 	1
.0635					decimalCount:
>0635							.fill 	1
.2539					FloatToString:
.2539	da		phx				phx
.253a	5a		phy				phy 								; save code position
.253b	8d 36 06	sta $0636			sta 	decimalPlaces	 			; save number of DPs.
.253e	9c 37 06	stz $0637			stz 	dbOffset 					; offset into decimal buffer = start.
.2541	b5 32		lda $32,x			lda 	NSStatus,x  				; is it -ve.
.2543	10 08		bpl $254d			bpl 	_CNTSNotNegative
.2545	29 7f		and #$7f			and 	#$7F 						; make +ve
.2547	95 32		sta $32,x			sta 	NSStatus,x
.2549	a9 2d		lda #$2d			lda 	#"-"
.254b	80 02		bra $254f			bra 	_CNTMain
.254d					_CNTSNotNegative:
.254d	a9 20		lda #$20			lda 	#" "
.254f					_CNTMain:
.254f	20 b1 25	jsr $25b1			jsr 	WriteDecimalBuffer
.2552	b5 6e		lda $6e,x			lda 	NSExponent,x 				; check if decimal
.2554	f0 0d		beq $2563			beq 	_CNTSNotFloat
.2556	e8		inx				inx 								; round up so we don't get too many 6.999999
.2557	a9 01		lda #$01			lda 	#1
.2559	20 53 26	jsr $2653			jsr 	FloatSetByte
.255c	b5 6d		lda $6d,x			lda		NSExponent-1,x
.255e	95 6e		sta $6e,x			sta 	NSExponent,x
.2560	20 75 20	jsr $2075			jsr 	FloatAdd
.2563					_CNTSNotFloat:
.2563	20 93 25	jsr $2593			jsr 	MakePlusTwoString 			; do the integer part.
.2566	20 31 22	jsr $2231			jsr 	FloatFractionalPart 		; get the fractional part
.2569	20 a6 23	jsr $23a6			jsr 	FloatNormalise					; normalise , exit if zero
.256c	f0 22		beq $2590			beq 	_CNTSExit
.256e	a9 2e		lda #$2e			lda 	#"."
.2570	20 b1 25	jsr $25b1			jsr 	WriteDecimalBuffer 			; write decimal place
.2573					_CNTSDecimal:
.2573	ce 36 06	dec $0636			dec 	decimalPlaces 				; done all the decimals
.2576	30 18		bmi $2590			bmi 	_CNTSExit
.2578	e8		inx				inx 								; x 10.0
.2579	a9 0a		lda #$0a			lda 	#10
.257b	20 53 26	jsr $2653			jsr 	FloatSetByte
.257e	20 11 23	jsr $2311			jsr 	FloatMultiply
.2581	20 93 25	jsr $2593			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.2584	20 31 22	jsr $2231			jsr 	FloatFractionalPart 		; get the fractional part
.2587	20 a6 23	jsr $23a6			jsr 	FloatNormalise 				; normalise it.
.258a	b5 6e		lda $6e,x			lda 	NSExponent,x 				; gone to zero, exit.
.258c	c9 d0		cmp #$d0			cmp 	#$D0 						; very small remainder, so don't bother.
.258e	b0 e3		bcs $2573			bcs 	_CNTSDecimal 				; keep going.
.2590					_CNTSExit:
.2590	7a		ply				ply
.2591	fa		plx				plx
.2592	60		rts				rts
.2593					MakePlusTwoString:
.2593	da		phx				phx
.2594	20 34 26	jsr $2634			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.2597	e8		inx				inx 								; access it
.2598	e8		inx				inx
.2599	20 8c 22	jsr $228c			jsr 	FloatIntegerPart 			; make it an integer
.259c	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.259e	20 d0 25	jsr $25d0			jsr 	ConvertInt32
.25a1	a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.25a3					_MPTSCopy:
.25a3	bd 11 06	lda $0611,x			lda 	numberBuffer,x
.25a6	20 b1 25	jsr $25b1			jsr 	WriteDecimalBuffer
.25a9	e8		inx				inx
.25aa	bd 11 06	lda $0611,x			lda 	numberBuffer,x
.25ad	d0 f4		bne $25a3			bne 	_MPTSCopy
.25af	fa		plx				plx
.25b0	60		rts				rts
.25b1					WriteDecimalBuffer:
.25b1	da		phx				phx
.25b2	ae 37 06	ldx $0637			ldx 	dbOffset
.25b5	9d 38 06	sta $0638,x			sta 	decimalBuffer,x
.25b8	9e 39 06	stz $0639,x			stz 	decimalBuffer+1,x
.25bb	ee 37 06	inc $0637			inc 	dbOffset
.25be	fa		plx				plx
.25bf	60		rts				rts
.0636					decimalPlaces:
>0636							.fill 	1
.0637					dbOffset:
>0637							.fill 	1
.0638					decimalBuffer:
>0638							.fill 	32
.25c0					ConvertInt16:
.25c0	85 3e		sta $3e				sta 	NSMantissa0 				; set up as 32 bit conversion
.25c2	86 4a		stx $4a				stx 	NSMantissa1
.25c4	64 56		stz $56				stz 	NSMantissa2
.25c6	64 62		stz $62				stz 	NSMantissa3
.25c8	64 32		stz $32				stz 	NSStatus 					; positive integer
.25ca	a2 00		ldx #$00			ldx 	#0 							; stack level
.25cc	a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.25ce	80 00		bra $25d0			bra 	ConvertInt32
.25d0					ConvertInt32:
.25d0	5a		phy				phy
.25d1	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.25d3	24 32		bit $32				bit 	NSStatus 					; output a - if not negative.
.25d5	10 08		bpl $25df			bpl 	_CI32NotNeg
.25d7	48		pha				pha
.25d8	a9 2d		lda #$2d			lda 	#'-'
.25da	99 11 06	sta $0611,y			sta 	numberBuffer,y
.25dd	c8		iny				iny
.25de	68		pla				pla
.25df					_CI32NotNeg:
.25df	20 ed 25	jsr $25ed			jsr 	_CI32DivideConvert 			; recursive conversion
.25e2	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.25e4	99 11 06	sta $0611,y			sta 	numberBuffer,y
.25e7	7a		ply				ply
.25e8	a2 06		ldx #$06			ldx 	#numberBuffer >> 8 			; return address in XA
.25ea	a9 11		lda #$11			lda 	#numberBuffer & $FF
.25ec	60		rts				rts
.25ed					_CI32DivideConvert:
.25ed	e8		inx				inx 								; write to next slot up
.25ee	20 53 26	jsr $2653			jsr 	FloatSetByte 		 		; write the base out.
.25f1	ca		dex				dex
.25f2	20 e7 21	jsr $21e7			jsr 	Int32Divide 				; divide
.25f5	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; save remainder
.25f7	48		pha				pha
.25f8	20 d6 21	jsr $21d6			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.25fb	20 73 26	jsr $2673			jsr 	FloatIsZero 				; is it zero ?
.25fe	f0 05		beq $2605			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.2600	b5 3f		lda $3f,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.2602	20 ed 25	jsr $25ed			jsr 	_CI32DivideConvert 			; and recusrively call.
.2605					_CI32NoRecurse:
.2605	68		pla				pla 								; remainder
.2606	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.2608	90 02		bcc $260c			bcc 	_CI32NotHex
.260a	69 26		adc #$26			adc 	#6+32
.260c					_CI32NotHex:
.260c	69 30		adc #$30			adc 	#48
.260e	99 11 06	sta $0611,y			sta 	numberBuffer,y 				; write out and exit
.2611	c8		iny				iny
.2612	60		rts				rts
.2613					FloatNegate:
.2613	b5 32		lda $32,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.2615	49 80		eor #$80			eor 	#$80  						; toggle the negative flag
.2617	95 32		sta $32,x			sta 	NSStatus,x
.2619	60		rts				rts
.261a					FloatNegateMantissa:
.261a	38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.261b	a9 00		lda #$00			lda 	#0
.261d	f5 3e		sbc $3e,x			sbc 	NSMantissa0,x
.261f	95 3e		sta $3e,x			sta 	NSMantissa0,x
.2621	a9 00		lda #$00			lda 	#0
.2623	f5 4a		sbc $4a,x			sbc 	NSMantissa1,x
.2625	95 4a		sta $4a,x			sta 	NSMantissa1,x
.2627	a9 00		lda #$00			lda 	#0
.2629	f5 56		sbc $56,x			sbc 	NSMantissa2,x
.262b	95 56		sta $56,x			sta 	NSMantissa2,x
.262d	a9 00		lda #$00			lda 	#0
.262f	f5 62		sbc $62,x			sbc 	NSMantissa3,x
.2631	95 62		sta $62,x			sta 	NSMantissa3,x
.2633	60		rts				rts
.2634					FloatShiftUpTwo:
.2634	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.2636	95 40		sta $40,x			sta 	NSMantissa0+2,x
.2638	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.263a	95 4c		sta $4c,x			sta 	NSMantissa1+2,x
.263c	b5 56		lda $56,x			lda 	NSMantissa2,x
.263e	95 58		sta $58,x			sta 	NSMantissa2+2,x
.2640	b5 62		lda $62,x			lda 	NSMantissa3,x
.2642	95 64		sta $64,x			sta 	NSMantissa3+2,x
.2644	b5 6e		lda $6e,x			lda 	NSExponent,x
.2646	95 70		sta $70,x			sta 	NSExponent+2,x
.2648	b5 32		lda $32,x			lda 	NSStatus,x
.264a	95 34		sta $34,x			sta 	NSStatus+2,x
.264c	60		rts				rts
.264d					FloatSetZeroMantissaOnly:
.264d	74 3e		stz $3e,x			stz 	NSMantissa0,x
.264f	80 08		bra $2659			bra 	FloatZero13
.2651					FloatSetZero:
.2651	a9 00		lda #$00			lda 	#0
.2653					FloatSetByte:
.2653	74 6e		stz $6e,x			stz 	NSExponent,x 				; zero exponent, as +ve integer value.
.2655					FloatSetMantissa:
.2655	95 3e		sta $3e,x			sta 	NSMantissa0,x 				; zero mantissa
.2657	74 32		stz $32,x			stz 	NSStatus,x
.2659					FloatZero13:
.2659	74 4a		stz $4a,x			stz 	NSMantissa1,x
.265b	74 56		stz $56,x			stz 	NSMantissa2,x
.265d	74 62		stz $62,x			stz 	NSMantissa3,x
.265f	60		rts				rts
.2660					FloatShiftLeft:
.2660	18		clc				clc
.2661					FloatRotateLeft:
.2661	36 3e		rol $3e,x			rol 	NSMantissa0,x
.2663	36 4a		rol $4a,x			rol		NSMantissa1,x
.2665	36 56		rol $56,x			rol		NSMantissa2,x
.2667	36 62		rol $62,x			rol		NSMantissa3,x
.2669	60		rts				rts
.266a					FloatShiftRight:
.266a	56 62		lsr $62,x			lsr 	NSMantissa3,x
.266c	76 56		ror $56,x			ror		NSMantissa2,x
.266e	76 4a		ror $4a,x			ror		NSMantissa1,x
.2670	76 3e		ror $3e,x			ror		NSMantissa0,x
.2672	60		rts				rts
.2673					FloatIsZero:
.2673	b5 62		lda $62,x			lda 	NSMantissa3,x
.2675	15 56		ora $56,x			ora		NSMantissa2,x
.2677	15 4a		ora $4a,x			ora		NSMantissa1,x
.2679	15 3e		ora $3e,x			ora		NSMantissa0,x
.267b	60		rts				rts

;******  Processing input file: testing/testend.asm

.267c					EndProgram:
>267c	01 08 0c 08 0a 00 4e 20				.binary "code/tokenised.dat"
>2684	b2 20 34 30 00 15 08 14 00 ce 86 20 33 00 32 08
>2694	3c 00 99 20 c7 28 31 34 37 29 3b 22 48 45 4c 4c
>26a4	4f 20 57 4f 52 4c 44 20 21 22 00 4e 08 46 00 86
>26b4	20 42 58 28 4e 29 3a 86 20 42 59 28 4e 29 3a 86
>26c4	20 42 43 28 4e 29 00 62 08 4b 00 86 20 44 58 28
>26d4	4e 29 3a 86 20 44 59 28 4e 29 00 70 08 50 00 81
>26e4	20 42 b2 30 20 a4 20 4e 00 89 08 5a 00 42 58 28
>26f4	42 29 b2 b5 28 bb 28 31 29 ac 34 30 29 ac 32 aa
>2704	31 00 a2 08 64 00 42 59 28 42 29 b2 b5 28 bb 28
>2714	31 29 ac 33 30 29 ac 32 35 36 00 b9 08 69 00 42
>2724	43 28 42 29 b2 b5 28 bb 28 31 29 ac 31 34 29 aa
>2734	31 00 cd 08 6a 00 44 58 28 42 29 b2 b5 28 bb 28
>2744	31 29 ac 32 29 00 e3 08 6c 00 8f 20 44 59 28 42
>2754	29 b2 b5 28 bb 28 31 29 ac 32 29 00 ef 08 6d 00
>2764	44 59 28 42 29 b2 31 00 f7 08 6e 00 82 20 42 00
>2774	fd 08 78 00 8f 00 11 09 82 00 81 59 b2 30 a4 32
>2784	39 3a 81 58 b2 30 a4 33 39 00 27 09 8c 00 51 b2
>2794	59 ac 32 35 36 aa 58 ac 32 aa 34 35 30 35 36 00
>27a4	3f 09 96 00 ce 84 20 31 2c 51 2c 38 31 3a ce 84
>27b4	31 2c 51 aa 31 2c 30 00 4a 09 a0 00 82 58 3a 82
>27c4	20 59 00 56 09 c8 00 81 20 42 b2 31 a4 4e 00 73
>27d4	09 d2 00 ce 84 20 31 2c 34 35 30 35 36 aa 42 59
>27e4	28 42 29 aa 42 58 28 42 29 2c 30 00 81 09 e6 00
>27f4	44 58 42 b2 44 58 28 42 29 00 92 09 f0 00 8b 44
>2804	58 42 b2 30 a7 8d 31 30 31 30 00 a3 09 fa 00 8b
>2814	44 58 42 b2 31 a7 8d 31 30 34 30 00 b1 09 ff 00
>2824	44 59 42 b2 44 59 28 42 29 00 c2 09 04 01 8b 44
>2834	59 42 b2 30 a7 8d 31 30 37 30 00 d3 09 0e 01 8b
>2844	44 59 42 b2 31 a7 8d 31 31 30 30 00 f4 09 18 01
>2854	ce 84 20 31 2c 34 35 30 35 36 aa 42 59 28 42 29
>2864	aa 42 58 28 42 29 2c 42 43 28 42 29 00 fb 09 22
>2874	01 82 42 00 05 0a 2c 01 89 20 32 30 30 00 0b 0a
>2884	e8 03 8f 00 19 0a f2 03 42 58 42 b2 42 58 28 42
>2894	29 00 2e 0a f3 03 8b 42 58 42 b2 31 a7 44 58 28
>28a4	42 29 b2 31 3a 8e 00 40 0a fc 03 42 58 28 42 29
>28b4	b2 42 58 42 ab 32 3a 8e 00 46 0a 06 04 8f 00 54
>28c4	0a 10 04 42 58 42 b2 42 58 28 42 29 00 74 0a 11
>28d4	04 8b 42 58 42 b2 37 39 a7 20 42 58 28 42 29 b2
>28e4	37 37 3a 44 58 28 42 29 b2 30 3a 8e 00 86 0a 1a
>28f4	04 42 58 28 42 29 b2 42 58 42 aa 32 3a 8e 00 8c
>2904	0a 24 04 8f 00 9a 0a 2e 04 42 59 42 b2 42 59 28
>2914	42 29 00 af 0a 2f 04 8b 42 59 42 b2 30 a7 44 59
>2924	28 42 29 b2 31 3a 8e 00 c3 0a 38 04 42 59 28 42
>2934	29 b2 42 59 42 ab 32 35 36 3a 8e 00 c9 0a 42 04
>2944	8f 00 d7 0a 4c 04 42 59 42 b2 42 59 28 42 29 00
>2954	fa 0a 4d 04 8b 42 59 42 b2 37 34 32 34 a7 42 59
>2964	28 42 29 b2 37 31 36 38 3a 44 59 28 42 29 b2 30
>2974	3a 8e 00 0e 0b 56 04 42 59 28 42 29 b2 42 59 42
>2984	aa 32 35 36 3a 8e 00 00 00

;******  End of listing
