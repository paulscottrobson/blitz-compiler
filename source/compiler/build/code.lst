
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass -c -Wall -o build/code.prg -L build/code.lst -l build/code.lbl /home/paulr/Projects/blitz-compiler/documents/../source/common-source/wrapper.asm testing/testing.asm /home/paulr/Projects/blitz-compiler/documents/../bin/compiler.library /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library testing/testend.asm
; Thu Oct  5 14:11:25 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../source/common-source/wrapper.asm

=$1000					CodeStart = $1000
=$22					ZeroPageMandatory = $22
=$400					MemoryStorage = $400
.1000	a2 ff		ldx #$ff			ldx 	#$FF
.1002	9a		txs				txs
.1003	4c 06 10	jmp $1006			jmp 	WrapperBoot
.0022					codePtr:
>0022							.fill 	2
.0024					codePage:
>0024							.fill 	1
.0025					objPtr:
>0025							.fill 	2
.0027					objPage:
>0027							.fill 	1
.0028					zTemp0:
>0028							.fill 	2
.002a					zTemp1:
>002a							.fill 	2
.002c					zTemp2:
>002c							.fill 	2

;******  Processing input file: testing/testing.asm

.1006					WrapperBoot:
.1006	4c a8 10	jmp $10a8			jmp 	StartCompiler

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/compiler.library

=$80					C64_END                  = $80 ; $80 end
=$81					C64_FOR                  = $81 ; $81 for
=$82					C64_NEXT                 = $82 ; $82 next
=$83					C64_DATA                 = $83 ; $83 data
=$84					C64_INPUTHASH            = $84 ; $84 input#
=$85					C64_INPUT                = $85 ; $85 input
=$86					C64_DIM                  = $86 ; $86 dim
=$87					C64_READ                 = $87 ; $87 read
=$88					C64_LET                  = $88 ; $88 let
=$89					C64_GOTO                 = $89 ; $89 goto
=$8a					C64_RUN                  = $8a ; $8a run
=$8b					C64_IF                   = $8b ; $8b if
=$8c					C64_RESTORE              = $8c ; $8c restore
=$8d					C64_GOSUB                = $8d ; $8d gosub
=$8e					C64_RETURN               = $8e ; $8e return
=$8f					C64_REM                  = $8f ; $8f rem
=$90					C64_STOP                 = $90 ; $90 stop
=$91					C64_ON                   = $91 ; $91 on
=$92					C64_WAIT                 = $92 ; $92 wait
=$93					C64_LOAD                 = $93 ; $93 load
=$94					C64_SAVE                 = $94 ; $94 save
=$95					C64_VERIFY               = $95 ; $95 verify
=$96					C64_DEF                  = $96 ; $96 def
=$97					C64_POKE                 = $97 ; $97 poke
=$98					C64_PRINTHASH            = $98 ; $98 print#
=$99					C64_PRINT                = $99 ; $99 print
=$9a					C64_CONT                 = $9a ; $9a cont
=$9b					C64_LIST                 = $9b ; $9b list
=$9c					C64_CLR                  = $9c ; $9c clr
=$9d					C64_CMD                  = $9d ; $9d cmd
=$9e					C64_SYS                  = $9e ; $9e sys
=$9f					C64_OPEN                 = $9f ; $9f open
=$a0					C64_CLOSE                = $a0 ; $a0 close
=$a1					C64_GET                  = $a1 ; $a1 get
=$a2					C64_NEW                  = $a2 ; $a2 new
=$a3					C64_TABLB                = $a3 ; $a3 tab(
=$a4					C64_TO                   = $a4 ; $a4 to
=$a5					C64_FN                   = $a5 ; $a5 fn
=$a6					C64_SPCLB                = $a6 ; $a6 spc(
=$a7					C64_THEN                 = $a7 ; $a7 then
=$a8					C64_NOT                  = $a8 ; $a8 not
=$a9					C64_STEP                 = $a9 ; $a9 step
=$aa					C64_PLUS                 = $aa ; $aa +
=$ab					C64_MINUS                = $ab ; $ab -
=$ac					C64_TIMES                = $ac ; $ac *
=$ad					C64_DIVIDE               = $ad ; $ad /
=$ae					C64_POWER                = $ae ; $ae ^
=$af					C64_AND                  = $af ; $af and
=$b0					C64_OR                   = $b0 ; $b0 or
=$b1					C64_GREATER              = $b1 ; $b1 >
=$b2					C64_EQUAL                = $b2 ; $b2 =
=$b3					C64_LESS                 = $b3 ; $b3 <
=$b4					C64_SGN                  = $b4 ; $b4 sgn
=$b5					C64_INT                  = $b5 ; $b5 int
=$b6					C64_ABS                  = $b6 ; $b6 abs
=$b7					C64_USR                  = $b7 ; $b7 usr
=$b8					C64_FRE                  = $b8 ; $b8 fre
=$b9					C64_POS                  = $b9 ; $b9 pos
=$ba					C64_SQR                  = $ba ; $ba sqr
=$bb					C64_RND                  = $bb ; $bb rnd
=$bc					C64_LOG                  = $bc ; $bc log
=$bd					C64_EXP                  = $bd ; $bd exp
=$be					C64_COS                  = $be ; $be cos
=$bf					C64_SIN                  = $bf ; $bf sin
=$c0					C64_TAN                  = $c0 ; $c0 tan
=$c1					C64_ATN                  = $c1 ; $c1 atn
=$c2					C64_PEEK                 = $c2 ; $c2 peek
=$c3					C64_LEN                  = $c3 ; $c3 len
=$c4					C64_STRDOLLAR            = $c4 ; $c4 str$
=$c5					C64_VAL                  = $c5 ; $c5 val
=$c6					C64_ASC                  = $c6 ; $c6 asc
=$c7					C64_CHRDOLLAR            = $c7 ; $c7 chr$
=$c8					C64_LEFTDOLLAR           = $c8 ; $c8 left$
=$c9					C64_RIGHTDOLLAR          = $c9 ; $c9 right$
=$ca					C64_MIDDOLLAR            = $ca ; $ca mid$
=$cb					C64_GO                   = $cb ; $cb go
=$ce80					C64_MON                  = $ce80 ; $ce80 mon
=$ce81					C64_DOS                  = $ce81 ; $ce81 dos
=$ce82					C64_OLD                  = $ce82 ; $ce82 old
=$ce83					C64_GEOS                 = $ce83 ; $ce83 geos
=$ce84					C64_VPOKE                = $ce84 ; $ce84 vpoke
=$ce85					C64_VLOAD                = $ce85 ; $ce85 vload
=$ce86					C64_SCREEN               = $ce86 ; $ce86 screen
=$ce87					C64_PSET                 = $ce87 ; $ce87 pset
=$ce88					C64_LINE                 = $ce88 ; $ce88 line
=$ce89					C64_FRAME                = $ce89 ; $ce89 frame
=$ce8a					C64_RECT                 = $ce8a ; $ce8a rect
=$ce8b					C64_CHAR                 = $ce8b ; $ce8b char
=$ce8c					C64_MOUSE                = $ce8c ; $ce8c mouse
=$ce8d					C64_COLOR                = $ce8d ; $ce8d color
=$ce8e					C64_TEST                 = $ce8e ; $ce8e test
=$ce8f					C64_RESET                = $ce8f ; $ce8f reset
=$ce90					C64_CLS                  = $ce90 ; $ce90 cls
=$ce91					C64_CODEX                = $ce91 ; $ce91 codex
=$ce92					C64_LOCATE               = $ce92 ; $ce92 locate
=$ce93					C64_BOOT                 = $ce93 ; $ce93 boot
=$ce94					C64_KEYMAP               = $ce94 ; $ce94 keymap
=$ce95					C64_BLOAD                = $ce95 ; $ce95 bload
=$ce96					C64_BVLOAD               = $ce96 ; $ce96 bvload
=$ce97					C64_BVERIFY              = $ce97 ; $ce97 bverify
=$ce98					C64_BANK                 = $ce98 ; $ce98 bank
=$ce99					C64_FMINIT               = $ce99 ; $ce99 fminit
=$ce9a					C64_FMNOTE               = $ce9a ; $ce9a fmnote
=$ce9b					C64_FMDRUM               = $ce9b ; $ce9b fmdrum
=$ce9c					C64_FMINST               = $ce9c ; $ce9c fminst
=$ce9d					C64_FMVIB                = $ce9d ; $ce9d fmvib
=$ce9e					C64_FMFREQ               = $ce9e ; $ce9e fmfreq
=$ce9f					C64_FMVOL                = $ce9f ; $ce9f fmvol
=$cea0					C64_FMPAN                = $cea0 ; $cea0 fmpan
=$cea1					C64_FMPLAY               = $cea1 ; $cea1 fmplay
=$cea2					C64_FMCHORD              = $cea2 ; $cea2 fmchord
=$cea3					C64_FMPOKE               = $cea3 ; $cea3 fmpoke
=$cea4					C64_PSGINIT              = $cea4 ; $cea4 psginit
=$cea5					C64_PSGNOTE              = $cea5 ; $cea5 psgnote
=$cea6					C64_PSGVOL               = $cea6 ; $cea6 psgvol
=$cea7					C64_PSGWAV               = $cea7 ; $cea7 psgwav
=$cea8					C64_PSGFREQ              = $cea8 ; $cea8 psgfreq
=$cea9					C64_PSGPAN               = $cea9 ; $cea9 psgpan
=$ceaa					C64_PSGPLAY              = $ceaa ; $ceaa psgplay
=$ceab					C64_PSGCHORD             = $ceab ; $ceab psgchord
=$ceac					C64_REBOOT               = $ceac ; $ceac reboot
=$cead					C64_POWEROFF             = $cead ; $cead poweroff
=$ceae					C64_I2CPOKE              = $ceae ; $ceae i2cpoke
=$ceaf					C64_SLEEP                = $ceaf ; $ceaf sleep
=$ceb0					C64_BSAVE                = $ceb0 ; $ceb0 bsave
=$ceb1					C64_MENU                 = $ceb1 ; $ceb1 menu
=$ceb2					C64_REN                  = $ceb2 ; $ceb2 ren
=$ceb3					C64_LINPUT               = $ceb3 ; $ceb3 linput
=$ceb4					C64_LINPUTHASH           = $ceb4 ; $ceb4 linput#
=$ceb5					C64_BINPUTHASH           = $ceb5 ; $ceb5 binput#
=$ceb6					C64_HELP                 = $ceb6 ; $ceb6 help
=$ced0					C64_VPEEK                = $ced0 ; $ced0 vpeek
=$ced1					C64_MX                   = $ced1 ; $ced1 mx
=$ced2					C64_MY                   = $ced2 ; $ced2 my
=$ced3					C64_MB                   = $ced3 ; $ced3 mb
=$ced4					C64_JOY                  = $ced4 ; $ced4 joy
=$ced5					C64_HEXDOLLAR            = $ced5 ; $ced5 hex$
=$ced6					C64_BINDOLLAR            = $ced6 ; $ced6 bin$
=$ced7					C64_I2CPEEK              = $ced7 ; $ced7 i2cpeek
=$ced8					C64_POINTER              = $ced8 ; $ced8 pointer
=$ced9					C64_STRPTR               = $ced9 ; $ced9 strptr
=$ceda					C64_RPTDOLLAR            = $ceda ; $ceda rpt$
.002e					srcPtr:
>002e							.fill 	2
.0400					sourceBuffer:
>0400							.fill 	256
.0500					currentLineNumber:
>0500							.fill 	2
=$80					PCD_STARTBINARY = $80
=$8d					PCD_ENDBINARY = $8d
=$8d					PCD_STARTCOMMAND = $8d
=$ca					PCD_ENDCOMMAND = $ca
=$ca					PCD_STARTSYSTEM = $ca
=$d5					PCD_ENDSYSTEM = $d5
=$80					PCD_PLUS             = $80 ; +
=$81					PCD_MINUS            = $81 ; -
=$82					PCD_TIMES            = $82 ; *
=$83					PCD_DIVIDE           = $83 ; /
=$84					PCD_POWER            = $84 ; ^
=$85					PCD_AND              = $85 ; and
=$86					PCD_OR               = $86 ; or
=$87					PCD_GREATER          = $87 ; >
=$88					PCD_EQUAL            = $88 ; =
=$89					PCD_LESS             = $89 ; <
=$8a					PCD_GREATEREQUAL     = $8a ; >=
=$8b					PCD_LESSGREATER      = $8b ; <>
=$8c					PCD_LESSEQUAL        = $8c ; <=
=$8d					PCD_ABS              = $8d ; abs
=$8e					PCD_ARRAY            = $8e ; array
=$8f					PCD_ASC              = $8f ; asc
=$90					PCD_ASSERT           = $90 ; assert
=$91					PCD_BINDOLLAR        = $91 ; bin$
=$92					PCD_PRINTCMD_CHR     = $92 ; print.chr
=$93					PCD_CHRDOLLAR        = $93 ; chr$
=$94					PCD_SCMD_CMP         = $94 ; s.cmp
=$95					PCD_FOR              = $95 ; for
=$96					PCD_FRE              = $96 ; fre
=$97					PCD_GET              = $97 ; get
=$98					PCD_RETURN           = $98 ; return
=$99					PCD_PSET             = $99 ; pset
=$9a					PCD_LINE             = $9a ; line
=$9b					PCD_RECT             = $9b ; rect
=$9c					PCD_FRAME            = $9c ; frame
=$9d					PCD_CHAR             = $9d ; char
=$9e					PCD_HEXDOLLAR        = $9e ; hex$
=$9f					PCD_INPUT            = $9f ; input
=$a0					PCD_INPUTDOLLAR      = $a0 ; input$
=$a1					PCD_INPUTCMD_START   = $a1 ; input.start
=$a2					PCD_LEN              = $a2 ; len
=$a3					PCD_FCMD_CMP         = $a3 ; f.cmp
=$a4					PCD_INTCMD_DIV       = $a4 ; int.div
=$a5					PCD_NEGATE           = $a5 ; negate
=$a6					PCD_NEWCMD_LINE      = $a6 ; new.line
=$a7					PCD_NEXT             = $a7 ; next
=$a8					PCD_NOT              = $a8 ; not
=$a9					PCD_ON               = $a9 ; on
=$aa					PCD_MOREON           = $aa ; moreon
=$ab					PCD_PEEK             = $ab ; peek
=$ac					PCD_POKE             = $ac ; poke
=$ad					PCD_POS              = $ad ; pos
=$ae					PCD_GETCHANNEL       = $ae ; getchannel
=$af					PCD_SETCHANNEL       = $af ; setchannel
=$b0					PCD_PRINTCMD_N       = $b0 ; print.n
=$b1					PCD_PRINTCMD_S       = $b1 ; print.s
=$b2					PCD_READ             = $b2 ; read
=$b3					PCD_READDOLLAR       = $b3 ; read$
=$b4					PCD_RND              = $b4 ; rnd
=$b5					PCD_CONCAT           = $b5 ; concat
=$b6					PCD_SGN              = $b6 ; sgn
=$b7					PCD_PRINTCMD_TAB     = $b7 ; print.tab
=$b8					PCD_PRINTCMD_POS     = $b8 ; print.pos
=$b9					PCD_PRINTCMD_SPC     = $b9 ; print.spc
=$ba					PCD_STRDOLLAR        = $ba ; str$
=$bb					PCD_LEFTDOLLAR       = $bb ; left$
=$bc					PCD_RIGHTDOLLAR      = $bc ; right$
=$bd					PCD_MIDDOLLAR        = $bd ; mid$
=$be					PCD_SWAP             = $be ; swap
=$bf					PCD_TI               = $bf ; ti
=$c0					PCD_TIDOLLAR         = $c0 ; ti$
=$c1					PCD_USR              = $c1 ; usr
=$c2					PCD_VAL              = $c2 ; val
=$c3					PCD_CLOSE            = $c3 ; close
=$c4					PCD_EXIT             = $c4 ; exit
=$c5					PCD_DEBUG            = $c5 ; debug
=$c6					PCD_OPEN             = $c6 ; open
=$c7					PCD_SCREEN           = $c7 ; screen
=$c8					PCD_VPOKE            = $c8 ; vpoke
=$c9					PCD_VPEEK            = $c9 ; vpeek
=$ca					PCD_CMD_SHIFT        = $ca ; .shift
=$cb					PCD_CMD_BYTE         = $cb ; .byte
=$cc					PCD_CMD_WORD         = $cc ; .word
=$cd					PCD_CMD_FLOAT        = $cd ; .float
=$ce					PCD_CMD_STRING       = $ce ; .string
=$cf					PCD_CMD_DATA         = $cf ; .data
=$d0					PCD_CMD_GOTO         = $d0 ; .goto
=$d1					PCD_CMD_GOSUB        = $d1 ; .gosub
=$d2					PCD_CMD_GOTOCMD_Z    = $d2 ; .goto.z
=$d3					PCD_CMD_GOTOCMD_NZ   = $d3 ; .goto.nz
=$d4					PCD_CMD_VARSPACE     = $d4 ; .varspace
=$ca80					PCD_CLR              = $ca80 ; clr
=$ca81					PCD_DIM              = $ca81 ; dim
=$ca82					PCD_END              = $ca82 ; end
=$ca83					PCD_JOY              = $ca83 ; joy
=$ca84					PCD_INT              = $ca84 ; int
=$ca85					PCD_SQR              = $ca85 ; sqr
=$ca86					PCD_LOG              = $ca86 ; log
=$ca87					PCD_EXP              = $ca87 ; exp
=$ca88					PCD_COS              = $ca88 ; cos
=$ca89					PCD_SIN              = $ca89 ; sin
=$ca8a					PCD_TAN              = $ca8a ; tan
=$ca8b					PCD_ATN              = $ca8b ; atn
=$ca8c					PCD_MOUSE            = $ca8c ; mouse
=$ca8d					PCD_MB               = $ca8d ; mb
=$ca8e					PCD_MX               = $ca8e ; mx
=$ca8f					PCD_MY               = $ca8f ; my
=$ca90					PCD_RESTORE          = $ca90 ; restore
=$ca91					PCD_STOP             = $ca91 ; stop
=$ca92					PCD_SYS              = $ca92 ; sys
=$ca93					PCD_TIDOLLARCMD_WRITE = $ca93 ; ti$.write
=$ca94					PCD_WAIT             = $ca94 ; wait
=$ca95					PCD_I2CPOKE          = $ca95 ; i2cpoke
=$ca96					PCD_I2CPEEK          = $ca96 ; i2cpeek
=$ca97					PCD_BANK             = $ca97 ; bank
=$ca98					PCD_SLEEP            = $ca98 ; sleep
=$ca99					PCD_FMINIT           = $ca99 ; fminit
=$ca9a					PCD_FMNOTE           = $ca9a ; fmnote
=$ca9b					PCD_FMDRUM           = $ca9b ; fmdrum
=$ca9c					PCD_FMINST           = $ca9c ; fminst
=$ca9d					PCD_FMVIB            = $ca9d ; fmvib
=$ca9e					PCD_FMFREQ           = $ca9e ; fmfreq
=$ca9f					PCD_FMVOL            = $ca9f ; fmvol
=$caa0					PCD_FMPAN            = $caa0 ; fmpan
=$caa1					PCD_FMPLAY           = $caa1 ; fmplay
=$caa2					PCD_FMCHORD          = $caa2 ; fmchord
=$caa3					PCD_FMPOKE           = $caa3 ; fmpoke
=$caa4					PCD_PSGINIT          = $caa4 ; psginit
=$caa5					PCD_PSGNOTE          = $caa5 ; psgnote
=$caa6					PCD_PSGVOL           = $caa6 ; psgvol
=$caa7					PCD_PSGWAV           = $caa7 ; psgwav
=$caa8					PCD_PSGFREQ          = $caa8 ; psgfreq
=$caa9					PCD_PSGPAN           = $caa9 ; psgpan
=$caaa					PCD_PSGPLAY          = $caaa ; psgplay
=$caab					PCD_PSGCHORD         = $caab ; psgchord
=$caac					PCD_CLS              = $caac ; cls
=$caad					PCD_LOCATE           = $caad ; locate
=$caae					PCD_COLOR            = $caae ; color
=$4000					PCodeStart = $4000
=$8000					WorkArea = $8000
=$1f00					WorkAreaSize = $1F00
.1009					InlineNonDecimal:
.1009	a2 02		ldx #$02			ldx 	#2 							; get size in X
.100b	c9 25		cmp #$25			cmp 	#"%"
.100d	f0 02		beq $1011			beq 	_INDBinary
.100f	a2 10		ldx #$10			ldx 	#16
.1011					_INDBinary:
.1011	85 2a		sta $2a				sta 	zTemp1 						; size => zTemp1
.1013	64 2b		stz $2b				stz 	zTemp1+1 					; count => zTemp1+1, at least 1 !
.1015	64 28		stz $28				stz 	zTemp0 						; zero result
.1017	64 29		stz $29				stz 	zTemp0+1
.1019					_INDLoop:
.1019	20 90 19	jsr $1990			jsr 	LookNext 					; check next character
.101c	20 cc 19	jsr $19cc			jsr 	ConvertHexStyle		 		; convert into range 0-35 for 0-9A-Z
.101f	90 1f		bcc $1040			bcc		_INDDone 					; didn't convert
.1021	c5 2a		cmp $2a				cmp 	zTemp1 						; size too large ?
.1023	b0 1b		bcs $1040			bcs 	_INDDone
.1025	20 4f 10	jsr $104f			jsr 	_INDShift 					; x 2 or x 16
.1028	e0 02		cpx #$02			cpx 	#2
.102a	f0 09		beq $1035			beq 	_INDNotHex
.102c	20 4f 10	jsr $104f			jsr 	_INDShift
.102f	20 4f 10	jsr $104f			jsr 	_INDShift
.1032	20 4f 10	jsr $104f			jsr 	_INDShift
.1035					_INDNotHex:
.1035	05 28		ora $28				ora 	zTemp0 						; or digit into result
.1037	85 28		sta $28				sta 	zTemp0
.1039	20 a1 19	jsr $19a1			jsr 	GetNext 					; consume
.103c	e6 2b		inc $2b				inc 	zTemp1+1 					; bump count
.103e	80 d9		bra $1019			bra 	_INDLoop
.1040					_INDDone:
.1040	a5 2b		lda $2b				lda 	zTemp1+1 					; done at least 1 ?
.1042	f0 08		beq $104c			beq 	_INDError
.1044	a4 29		ldy $29				ldy 	zTemp0+1 					; push constant
.1046	a5 28		lda $28				lda 	zTemp0
.1048	20 0e 11	jsr $110e			jsr 	PushIntegerYA
.104b	60		rts				rts
.104c					_INDError:
.104c	4c 2f 13	jmp $132f		jmp	ErrorV_syntax
.104f					_INDShift:
.104f	06 28		asl $28				asl 	zTemp0
.1051	26 29		rol $29				rol 	zTemp0+1
.1053	60		rts				rts
.1054					BufferClear:
.1054	9c 02 05	stz $0502			stz 	bufferSize
.1057	60		rts				rts
.1058					BufferWrite:
.1058	da		phx				phx
.1059	ae 02 05	ldx $0502			ldx 	bufferSize
.105c	9d 03 05	sta $0503,x			sta 	dataBuffer,x
.105f	ee 02 05	inc $0502			inc 	bufferSize
.1062	fa		plx				plx
.1063	60		rts				rts
.1064					BufferOutput:
.1064	ad 02 05	lda $0502			lda 	bufferSize
.1067	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.106a	a2 00		ldx #$00			ldx 	#0
.106c					_BOLoop:
.106c	ec 02 05	cpx $0502			cpx 	bufferSize
.106f	f0 09		beq $107a			beq 	_BOExit
.1071	bd 03 05	lda $0503,x			lda 	dataBuffer,x
.1074	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1077	e8		inx				inx
.1078	80 f2		bra $106c			bra 	_BOLoop
.107a					_BOExit:
.107a	60		rts				rts
.0502					bufferSize:
>0502							.fill 	1
.0503					dataBuffer:
>0503							.fill 	256
.107b					WriteCodeByte:
.107b	48		pha				pha 								; save on stack
.107c	da		phx				phx
.107d	5a		phy				phy
.107e	20 75 1e	jsr $1e75			jsr 	OUTPUTWriteByte
.1081	7a		ply				ply 								; restore from stack
.1082	fa		plx				plx
.1083	68		pla				pla
.1084	60		rts				rts
.1085					CheckNextComma:
.1085	a9 2c		lda #$2c			lda	 	#","
.1087	80 06		bra $108f			bra 	CheckNextA
.1089					CheckNextRParen:
.1089	a9 29		lda #$29			lda	 	#")"
.108b	80 02		bra $108f			bra 	CheckNextA
.108d					CheckNextLParen:
.108d	a9 28		lda #$28			lda 	#"("
.108f					CheckNextA:
.108f	8d 03 06	sta $0603			sta 	checkCharacter 				; save test character
.1092					_CNALoop:
.1092	20 ac 19	jsr $19ac			jsr 	GetNextNonSpace 			; get next skipping spaces.
.1095	cd 03 06	cmp $0603			cmp 	checkCharacter 				; matches ?
.1098	f0 03		beq $109d			beq 	_CNAExit
.109a	4c 2f 13	jmp $132f		jmp	ErrorV_syntax
.109d					_CNAExit:
.109d	60		rts				rts
.0603					checkCharacter:
>0603							.fill 	1
.109e					OUTPUTClose:
.109e	a9 40		lda #$40			lda 	#(PCodeStart >> 8)
.10a0	a6 25		ldx $25				ldx 	objPtr
.10a2	a4 26		ldy $26				ldy 	objPtr+1
.10a4	20 df 1e	jsr $1edf			jsr 	XSaveMemory
.10a7	60		rts				rts
.10a8					StartCompiler:
.10a8	20 94 1d	jsr $1d94			jsr 	STRReset 					; reset storage (line#, variable)
.10ab	20 74 16	jsr $1674			jsr 	INPUTOpen 					; reset data input
.10ae	20 43 1c	jsr $1c43			jsr 	OUTPUTOpen 					; reset data output.
.10b1	a9 d4		lda #$d4			lda 	#PCD_CMD_VARSPACE
.10b3	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.10b6	a9 00		lda #$00			lda 	#0
.10b8	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.10bb	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.10be					MainCompileLoop:
.10be	20 26 1b	jsr $1b26			jsr 	ReadNextLine 				; read next line into the buffer.
.10c1	90 2e		bcc $10f1			bcc 	SaveCodeAndExit 			; end of source.
.10c3	20 57 1b	jsr $1b57			jsr 	GetLineNumber 				; get line #
.10c6	20 5e 1b	jsr $1b5e			jsr 	STRMarkLine 				; remember the position and number of this line.
.10c9	a9 a6		lda #$a6			lda 	#PCD_NEWCMD_LINE 			; generate new command line
.10cb	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.10ce					_MCLSameLine:
.10ce	20 ac 19	jsr $19ac			jsr 	GetNextNonSpace 			; get the first character.
.10d1	f0 eb		beq $10be			beq 	MainCompileLoop 			; end of line, get next line.
.10d3	c9 3a		cmp #$3a			cmp 	#":"						; if : then loop back.
.10d5	f0 f7		beq $10ce			beq 	_MCLSameLine
.10d7	c9 00		cmp #$00			cmp 	#0 							; if ASCII then check for implied LET.
.10d9	10 0c		bpl $10e7			bpl 	_MCLCheckAssignment
.10db	a2 c5		ldx #$c5			ldx 	#CommandTables & $FF 		; do command tables.
.10dd	a0 16		ldy #$16			ldy 	#CommandTables >> 8
.10df	20 35 18	jsr $1835			jsr 	GeneratorProcess
.10e2	b0 ea		bcs $10ce			bcs 	_MCLSameLine 				; keep trying to compile the line.
.10e4					_MCLSyntax:
.10e4	4c 2f 13	jmp $132f		jmp	ErrorV_syntax
.10e7					_MCLCheckAssignment:
.10e7	20 c2 19	jsr $19c2			jsr 	CharIsAlpha 				; if not alpha then syntax error
.10ea	90 f8		bcc $10e4			bcc 	_MCLSyntax
.10ec	20 f4 1a	jsr $1af4			jsr 	CommandLETHaveFirst  		; LET first character, do assign
.10ef	80 dd		bra $10ce			bra		_MCLSameLine 				; loop back.
.10f1					SaveCodeAndExit:
.10f1	20 7c 16	jsr $167c			jsr 	INPUTClose 					; finish input.
.10f4	a9 ff		lda #$ff			lda 	#$FF 						; fake line number $FFFF for forward THEN.
.10f6	a8		tay				tay
.10f7	20 5e 1b	jsr $1b5e			jsr 	STRMarkLine
.10fa	a9 c4		lda #$c4			lda 	#PCD_EXIT 					; add an END
.10fc	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.10ff	a9 ff		lda #$ff			lda 	#$FF 						; add end marker
.1101	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1104	20 5b 15	jsr $155b			jsr 	FixBranches 				; fix up GOTO/GOSUB etc.
.1107	20 9e 10	jsr $109e			jsr 	OUTPUTClose
.110a					ExitCompiler:
.110a	4c ff ff	jmp $ffff			jmp 	$FFFF
.110d	60		rts				rts
.110e					PushIntegerYA:
.110e	c0 00		cpy #$00			cpy 	#0 							; 0-255
.1110	f0 0f		beq $1121			beq 	PushIntegerA
.1112	48		pha				pha
.1113	a9 cc		lda #$cc			lda 	#PCD_CMD_WORD 				; send .word
.1115	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1118	68		pla				pla 								; then LSB
.1119	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.111c	98		tya				tya 								; then MSB
.111d	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1120	60		rts				rts
.1121					PushIntegerA:
.1121	c9 40		cmp #$40			cmp 	#64 						; if > 64 send byte as is
.1123	90 07		bcc $112c			bcc 	_PIWriteA
.1125	48		pha				pha
.1126	a9 cb		lda #$cb			lda 	#PCD_CMD_BYTE 				; send .byte
.1128	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.112b	68		pla				pla
.112c					_PIWriteA:
.112c	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.112f	60		rts				rts
.1130					PushFloat:
.1130	a9 cd		lda #$cd			lda 	#PCD_CMD_FLOAT 				; write CMD_FLOAT
.1132	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1135	b5 6e		lda $6e,x			lda 	NSExponent,x 				; and the data
.1137	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.113a	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.113c	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.113f	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.1141	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1144	b5 56		lda $56,x			lda 	NSMantissa2,x
.1146	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1149	b5 32		lda $32,x			lda 	NSStatus,x 					; with sign packed in byte 3 MSB
.114b	29 80		and #$80			and 	#$80
.114d	15 62		ora $62,x			ora 	NSMantissa3,x
.114f	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1152	60		rts				rts
.1153					CreateVariableRecord:
.1153	48		pha				pha
.1154	ad 0e 06	lda $060e			lda 	freeVariableMemory 		; push current free address on stack.
.1157	48		pha				pha
.1158	ad 0f 06	lda $060f			lda 	freeVariableMemory+1
.115b	48		pha				pha
.115c	ad 0c 06	lda $060c			lda 	variableListEnd  		; copy end of list to zTemp0
.115f	85 28		sta $28				sta 	zTemp0
.1161	ad 0d 06	lda $060d			lda 	variableListEnd+1
.1164	85 29		sta $29				sta 	zTemp0+1
.1166	a9 06		lda #$06			lda 	#6 						; default size if 6 (offset link 3 bytes)
.1168	92 28		sta ($28)			sta 	(zTemp0)
.116a	98		tya				tya
.116b	a0 02		ldy #$02			ldy 	#2 						; write out the name.
.116d	91 28		sta ($28),y			sta 	(zTemp0),y
.116f	88		dey				dey
.1170	8a		txa				txa
.1171	91 28		sta ($28),y			sta 	(zTemp0),y
.1173	a0 03		ldy #$03			ldy 	#3 						; write out the address.
.1175	ad 0e 06	lda $060e			lda 	freeVariableMemory
.1178	91 28		sta ($28),y			sta 	(zTemp0),y
.117a	c8		iny				iny
.117b	ad 0f 06	lda $060f			lda 	freeVariableMemory+1
.117e	91 28		sta ($28),y			sta 	(zTemp0),y
.1180	a0 06		ldy #$06			ldy 	#6 						; write EOL marker next record.
.1182	a9 00		lda #$00			lda 	#0
.1184	91 28		sta ($28),y			sta 	(zTemp0),y
.1186	18		clc				clc
.1187	b2 28		lda ($28)			lda 	(zTemp0) 				; add offset to variableListEnd
.1189	6d 0c 06	adc $060c			adc  	variableListEnd
.118c	8d 0c 06	sta $060c			sta 	variableListEnd
.118f	90 03		bcc $1194			bcc 	_CVNoCarry2
.1191	ee 0d 06	inc $060d			inc 	variableListEnd+1
.1194					_CVNoCarry2:
.1194	7a		ply				ply
.1195	fa		plx				plx
.1196	68		pla				pla
.1197	60		rts				rts
.1198					SetVariableRecordToCodePosition:
.1198	48		pha				pha
.1199	5a		phy				phy
.119a	a5 27		lda $27				lda 	objPage
.119c	a0 03		ldy #$03			ldy 	#3
.119e	91 28		sta ($28),y			sta 	(zTemp0),y
.11a0	c8		iny				iny
.11a1	a5 26		lda $26				lda 	objPtr+1
.11a3	91 28		sta ($28),y			sta 	(zTemp0),y
.11a5	c8		iny				iny
.11a6	a5 25		lda $25				lda 	objPtr
.11a8	91 28		sta ($28),y			sta 	(zTemp0),y
.11aa	7a		ply				ply
.11ab	68		pla				pla
.11ac	60		rts				rts
.11ad					AllocateBytesForType:
.11ad	48		pha				pha
.11ae	da		phx				phx
.11af	a2 02		ldx #$02			ldx 	#2 						; bytes to allocate
.11b1	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16
.11b3	c9 00		cmp #$00			cmp 	#NSSIFloat
.11b5	d0 02		bne $11b9			bne 	_CVNotFloat
.11b7	a2 06		ldx #$06			ldx 	#6
.11b9					_CVNotFloat:
.11b9	8a		txa				txa 							; add 6 or 2 to the free memory pointer.
.11ba	18		clc				clc
.11bb	6d 0e 06	adc $060e			adc 	freeVariableMemory
.11be	8d 0e 06	sta $060e			sta 	freeVariableMemory
.11c1	90 03		bcc $11c6			bcc 	_CVNoCarry1
.11c3	ee 0f 06	inc $060f			inc 	freeVariableMemory+1
.11c6					_CVNoCarry1:
.11c6	fa		plx				plx
.11c7	68		pla				pla
.11c8	60		rts				rts
.11c9					CommandDATA:
.11c9	20 54 10	jsr $1054			jsr 	BufferClear 				; copy it to the buffer
.11cc	20 93 19	jsr $1993			jsr 	LookNextNonSpace
.11cf					_CTDataLoop:
.11cf	20 90 19	jsr $1990			jsr 	LookNext 					; reached EOL
.11d2	f0 08		beq $11dc			beq 	_CTDataDone
.11d4	20 58 10	jsr $1058			jsr 	BufferWrite 				; write and consume
.11d7	20 a1 19	jsr $19a1			jsr 	GetNext
.11da	80 f3		bra $11cf			bra 	_CTDataLoop
.11dc					_CTDataDone:
.11dc	a9 cf		lda #$cf			lda 	#PCD_CMD_DATA 				; output command and buffer
.11de	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.11e1	20 64 10	jsr $1064			jsr 	BufferOutput
.11e4	60		rts				rts
.11e5					CommandDEF:
.11e5	a9 00		lda #$00			lda 	#0 							; constant 0 (for GOTOZ)
.11e7	20 21 11	jsr $1121			jsr 	PushIntegerA
.11ea	20 b8 1a	jsr $1ab8			jsr 	CompileGotoEOL 				; compile skip over DEF
.11ed	a9 a5		lda #$a5			lda 	#C64_FN
.11ef	20 8f 10	jsr $108f			jsr 	CheckNextA
.11f2	20 ac 19	jsr $19ac			jsr 	GetNextNonSpace				; get variable name w/type must be array e.g. DEF FNx(a)
.11f5	20 11 1a	jsr $1a11			jsr 	ExtractVariableName
.11f8	8a		txa				txa
.11f9	10 51		bpl $124c			bpl 	_CDError
.11fb	8a		txa				txa 								; convert to a function reference - bit 7:0 clear bit 7:1 set
.11fc	29 7f		and #$7f			and 	#$7F
.11fe	aa		tax				tax
.11ff	98		tya				tya
.1200	09 80		ora #$80			ora 	#$80
.1202	a8		tay				tay
.1203	20 fe 14	jsr $14fe			jsr 	FindVariable				; does it already exist ?
.1206	b0 44		bcs $124c			bcs 	_CDError 					; if so, that's an error.
.1208	20 53 11	jsr $1153			jsr 	CreateVariableRecord 		; create the record for it & put the data in it.
.120b	20 98 11	jsr $1198			jsr 	SetVariableRecordToCodePosition
.120e	20 ac 19	jsr $19ac			jsr 	GetNextNonSpace
.1211	20 51 1d	jsr $1d51			jsr 	GetReferenceTerm 			; get var ref, not array
.1214	c9 00		cmp #$00			cmp 	#0
.1216	30 34		bmi $124c			bmi 	_CDError
.1218	8d 04 06	sta $0604			sta 	defType 					; save type
.121b	8e 05 06	stx $0605			stx 	defVariable 				; save var ref
.121e	8c 06 06	sty $0606			sty 	defVariable+1
.1221	29 40		and #$40			and 	#NSSString 					; only numbers.
.1223	d0 27		bne $124c			bne 	_CDError
.1225	20 89 10	jsr $1089			jsr 	CheckNextRParen 			; check )
.1228	a9 b2		lda #$b2			lda 	#C64_EQUAL
.122a	20 8f 10	jsr $108f			jsr 	CheckNextA 					; check =
.122d	18		clc				clc 								; if this is DEF FNxx(A), read A
.122e	20 4f 12	jsr $124f			jsr 	CDReadWriteVariable
.1231	a9 be		lda #$be			lda 	#(PCD_SWAP) & $FF
.1233	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1236	38		sec				sec
.1237	20 4f 12	jsr $124f			jsr 	CDReadWriteVariable 		; A is now updated
.123a	20 44 14	jsr $1444			jsr 	CompileExpressionAt0 		; the actual body of the function.
.123d	a9 be		lda #$be			lda 	#(PCD_SWAP) & $FF
.123f	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1242	38		sec				sec
.1243	20 4f 12	jsr $124f			jsr 	CDReadWriteVariable 		; A is now reset to its old value
.1246	a9 98		lda #$98			lda 	#(PCD_RETURN) & $FF
.1248	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.124b	60		rts				rts
.124c					_CDError:
.124c	4c 2f 13	jmp $132f		jmp	ErrorV_syntax
.124f					CDReadWriteVariable:
.124f	ac 06 06	ldy $0606			ldy 	defVariable+1 				; set up YX
.1252	ae 05 06	ldx $0605			ldx 	defVariable
.1255	ad 04 06	lda $0604			lda 	defType
.1258	20 03 1d	jsr $1d03			jsr 	GetSetVariable
.125b	60		rts				rts
.0604					defType:
>0604							.fill 	1
.0605					defVariable:
>0605							.fill 	2
.125c					CommandDIM:
.125c	20 ac 19	jsr $19ac			jsr 	GetNextNonSpace 			; get the first non space character
.125f	20 11 1a	jsr $1a11			jsr 	ExtractVariableName 		; variable name to XY
.1262	da		phx				phx 								; save name with type bits.
.1263	e0 00		cpx #$00			cpx 	#0 							; check it is an array.
.1265	10 37		bpl $129e			bpl 	_CDError
.1267	20 fe 14	jsr $14fe			jsr 	FindVariable	 			; see if already exist
.126a	b0 35		bcs $12a1			bcs 	_CDRedefine 				; it still exists.
.126c	20 53 11	jsr $1153			jsr 	CreateVariableRecord 		; create the basic variable
.126f	20 ad 11	jsr $11ad			jsr 	AllocateBytesForType 		; allocate memory for it
.1272	68		pla				pla 								; restore type bits
.1273	5a		phy				phy 								; save the address of the basic storage
.1274	da		phx				phx
.1275	48		pha				pha
.1276	20 a4 12	jsr $12a4			jsr 	OutputIndexGroup 			; create an index group and generate them, preserving type data
.1279	68		pla				pla
.127a	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16 		; 2 bit type data
.127c	20 21 11	jsr $1121			jsr 	PushIntegerA 				; push that type data out.
.127f	a9 ca		lda #$ca			lda 	#(PCD_DIM) >> 8
.1281	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1284	a9 81		lda #$81			lda 	#(PCD_DIM) & $FF
.1286	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1289	fa		plx				plx 								; restore address
.128a	7a		ply				ply
.128b	a9 20		lda #$20			lda 	#NSSIFloat+NSSIInt16 		; pretend it is an int16 reference.
.128d	38		sec				sec
.128e	20 03 1d	jsr $1d03			jsr 	GetSetVariable 				; store the address in the reference to the array structure.
.1291	20 93 19	jsr $1993			jsr 	LookNextNonSpace 			; , follows ?
.1294	c9 2c		cmp #$2c			cmp 	#","
.1296	d0 05		bne $129d			bne 	_CDExit
.1298	20 a1 19	jsr $19a1			jsr 	GetNext 					; consume comma
.129b	80 bf		bra $125c			bra 	CommandDIM 					; do another DIM
.129d					_CDExit:
.129d	60		rts				rts
.129e					_CDError:
.129e	4c 2f 13	jmp $132f		jmp	ErrorV_syntax
.12a1					_CDRedefine:
.12a1	4c f7 13	jmp $13f7		jmp	ErrorV_redefine
.12a4					OutputIndexGroup:
.12a4	9c 07 06	stz $0607			stz 	IndexCount 					; count of number of indices.
.12a7					_OIGNext:
.12a7	20 44 14	jsr $1444			jsr 	CompileExpressionAt0 		; get a dimension
.12aa	29 40		and #$40			and 	#NSSTypeMask 				; check it is numeric
.12ac	c9 00		cmp #$00			cmp 	#NSSIFloat
.12ae	d0 19		bne $12c9			bne 	_OIGType
.12b0	ee 07 06	inc $0607			inc 	IndexCount 					; bump the counter.
.12b3	20 93 19	jsr $1993			jsr 	LookNextNonSpace 			; does a , follow ?
.12b6	c9 2c		cmp #$2c			cmp 	#","
.12b8	d0 05		bne $12bf			bne 	_OIGCheckEnd
.12ba	20 a1 19	jsr $19a1			jsr 	GetNext 					; consume comma
.12bd	80 e8		bra $12a7			bra 	_OIGNext 					; get next dimension
.12bf					_OIGCheckEnd:
.12bf	20 89 10	jsr $1089			jsr 	CheckNextRParen 			; check and consume )
.12c2	ad 07 06	lda $0607			lda 	IndexCount
.12c5	20 21 11	jsr $1121			jsr 	PushIntegerA 				; compile the dimension count.
.12c8	60		rts				rts
.12c9					_OIGType:
.12c9	4c 3f 13	jmp $133f		jmp	ErrorV_type
.0607					IndexCount:
>0607							.fill 	1
.12cc					ErrorHandler:
.12cc	68		pla				pla
.12cd	7a		ply				ply
.12ce	85 28		sta $28				sta 	zTemp0
.12d0	84 29		sty $29				sty 	zTemp0+1
.12d2	a2 00		ldx #$00			ldx 	#0 							; output msg to channel #0
.12d4	a0 01		ldy #$01			ldy 	#1
.12d6					_EHDisplayMsg:
.12d6	b1 28		lda ($28),y			lda 	(zTemp0),y
.12d8	20 d5 1e	jsr $1ed5			jsr 	XPrintCharacter
.12db	c8		iny				iny
.12dc	b1 28		lda ($28),y			lda 	(zTemp0),y
.12de	d0 f6		bne $12d6			bne 	_EHDisplayMsg
.12e0	a9 20		lda #$20			lda 	#32
.12e2	20 d5 1e	jsr $1ed5			jsr 	XPrintCharacter
.12e5	a9 40		lda #$40			lda 	#64
.12e7	20 d5 1e	jsr $1ed5			jsr 	XPrintCharacter
.12ea	a2 00		ldx #$00			ldx 	#0 							; convert line# to string
.12ec	20 ed 24	jsr $24ed			jsr 	FloatSetByte
.12ef	20 57 1b	jsr $1b57			jsr 	GetLineNumber
.12f2	95 3e		sta $3e,x			sta 	NSMantissa0,x
.12f4	98		tya				tya
.12f5	95 4a		sta $4a,x			sta 	NSMantissa1,x
.12f7	20 d3 23	jsr $23d3			jsr 	FloatToString
.12fa	a0 00		ldy #$00			ldy 	#0 							; display that string.
.12fc	a2 00		ldx #$00			ldx 	#0
.12fe					_EHDisplayLine:
.12fe	b9 37 06	lda $0637,y			lda 	decimalBuffer,y
.1301	20 d5 1e	jsr $1ed5			jsr 	XPrintCharacter
.1304	c8		iny				iny
.1305	b9 37 06	lda $0637,y			lda 	decimalBuffer,y
.1308	d0 f4		bne $12fe			bne 	_EHDisplayLine
.130a	a9 0d		lda #$0d			lda 	#13
.130c	20 d5 1e	jsr $1ed5			jsr 	XPrintCharacter
.130f	4c 0a 11	jmp $110a			jmp 	ExitCompiler
.1312					ErrorV_range:
.1312	20 cc 12	jsr $12cc		jsr	ErrorHandler
>1315	4f 55 54 20 4f 46 20 52			.text	"OUT OF RANGE",0
>131d	41 4e 47 45 00
.1322					ErrorV_value:
.1322	20 cc 12	jsr $12cc		jsr	ErrorHandler
>1325	42 41 44 20 56 41 4c 55			.text	"BAD VALUE",0
>132d	45 00
.132f					ErrorV_syntax:
.132f	20 cc 12	jsr $12cc		jsr	ErrorHandler
>1332	53 59 4e 54 41 58 20 45			.text	"SYNTAX ERROR",0
>133a	52 52 4f 52 00
.133f					ErrorV_type:
.133f	20 cc 12	jsr $12cc		jsr	ErrorHandler
>1342	54 59 50 45 20 4d 49 53			.text	"TYPE MISMATCH",0
>134a	4d 41 54 43 48 00
.1350					ErrorV_unimplemented:
.1350	20 cc 12	jsr $12cc		jsr	ErrorHandler
>1353	4e 4f 54 20 49 4d 50 4c			.text	"NOT IMPLEMENTED",0
>135b	45 4d 45 4e 54 45 44 00
.1363					ErrorV_assert:
.1363	20 cc 12	jsr $12cc		jsr	ErrorHandler
>1366	41 53 53 45 52 54 20 46			.text	"ASSERT FAIL",0
>136e	41 49 4c 00
.1372					ErrorV_line:
.1372	20 cc 12	jsr $12cc		jsr	ErrorHandler
>1375	55 4e 4b 4e 4f 57 4e 20			.text	"UNKNOWN LINE NUMBER",0
>137d	4c 49 4e 45 20 4e 55 4d 42 45 52 00
.1389					ErrorV_internal:
.1389	20 cc 12	jsr $12cc		jsr	ErrorHandler
>138c	49 4e 54 45 52 4e 41 4c			.text	"INTERNAL ERROR",0
>1394	20 45 52 52 4f 52 00
.139b					ErrorV_divzero:
.139b	20 cc 12	jsr $12cc		jsr	ErrorHandler
>139e	44 49 56 49 44 45 20 42			.text	"DIVIDE BY ZERO",0
>13a6	59 20 5a 45 52 4f 00
.13ad					ErrorV_structure:
.13ad	20 cc 12	jsr $12cc		jsr	ErrorHandler
>13b0	53 54 52 55 43 54 55 52			.text	"STRUCTURE IMBALANCE",0
>13b8	45 20 49 4d 42 41 4c 41 4e 43 45 00
.13c4					ErrorV_stop:
.13c4	20 cc 12	jsr $12cc		jsr	ErrorHandler
>13c7	50 52 4f 47 52 41 4d 20			.text	"PROGRAM STOPPED",0
>13cf	53 54 4f 50 50 45 44 00
.13d7					ErrorV_data:
.13d7	20 cc 12	jsr $12cc		jsr	ErrorHandler
>13da	4f 55 54 20 4f 46 20 44			.text	"OUT OF DATA",0
>13e2	41 54 41 00
.13e6					ErrorV_undeclared:
.13e6	20 cc 12	jsr $12cc		jsr	ErrorHandler
>13e9	55 4e 4b 4e 4f 57 4e 20			.text	"UNKNOWN ARRAY",0
>13f1	41 52 52 41 59 00
.13f7					ErrorV_redefine:
.13f7	20 cc 12	jsr $12cc		jsr	ErrorHandler
>13fa	41 52 52 41 59 20 52 45			.text	"ARRAY REDEFINED",0
>1402	44 45 46 49 4e 45 44 00
.140a					ErrorV_index:
.140a	20 cc 12	jsr $12cc		jsr	ErrorHandler
>140d	42 41 44 20 41 52 52 41			.text	"BAD ARRAY INDEX",0
>1415	59 20 49 4e 44 45 58 00
.141d					ErrorV_memory:
.141d	20 cc 12	jsr $12cc		jsr	ErrorHandler
>1420	4f 55 54 20 4f 46 20 4d			.text	"OUT OF MEMORY",0
>1428	45 4d 4f 52 59 00
.142e					ErrorV_channel:
.142e	20 cc 12	jsr $12cc		jsr	ErrorHandler
>1431	49 4e 50 55 54 2f 4f 55			.text	"INPUT/OUTPUT ERROR",0
>1439	54 50 55 54 20 45 52 52 4f 52 00
.1444					CompileExpressionAt0:
.1444	a9 00		lda #$00			lda 	#0
.1446					CompileExpressionAtA:
.1446	48		pha				pha  								; save level
.1447	20 b6 1d	jsr $1db6			jsr 	CompileTerm 				; compile a term.
.144a	fa		plx				plx 								; get level back into X
.144b					_ECALoop:
.144b	48		pha				pha 								; save type on stack.
.144c	20 93 19	jsr $1993			jsr 	LookNextNonSpace 			; get the next character
.144f	c9 aa		cmp #$aa			cmp 	#C64_PLUS 					; go to be + ... < in the C64 code.
.1451	90 04		bcc $1457			bcc 	_ECAExit
.1453	c9 b4		cmp #$b4			cmp 	#C64_LESS+1
.1455	90 02		bcc $1459			bcc 	_ECAHaveToken
.1457					_ECAExit:
.1457	68		pla				pla 								; throw type off stack
.1458	60		rts				rts
.1459					_ECAHaveToken:
.1459	86 28		stx $28				stx 	zTemp0 						; save current precedence in zTemp0
.145b	aa		tax				tax 								; X contains the operator token
.145c	bd 47 14	lda $1447,x			lda 	PrecedenceTable-C64_PLUS,x  ; read precedence.
.145f	c5 28		cmp $28				cmp 	zTemp0 						; if < then exit
.1461	90 f4		bcc $1457			bcc 	_ECAExit
.1463	85 29		sta $29				sta 	zTemp0+1 					; save the precedence of the operator.
.1465	20 a1 19	jsr $19a1			jsr 	GetNext 					; consume the token.
.1468	e0 b1		cpx #$b1			cpx 	#C64_GREATER				; checks for < or > which could be two character tokens
.146a	f0 11		beq $147d			beq 	_ECAGreaterCheck
.146c	e0 b3		cpx #$b3			cpx 	#C64_LESS
.146e	d0 1a		bne $148a			bne 	_ECAHaveFullToken
.1470	20 90 19	jsr $1990			jsr 	LookNext 					; checks for < (<= or <>)
.1473	c9 b1		cmp #$b1			cmp 	#C64_GREATER 				; <> is 2 on from <
.1475	f0 0e		beq $1485			beq	 	_ECAToNotEqual
.1477	c9 b2		cmp #$b2			cmp 	#C64_EQUAL 					; <= is 3 on from <
.1479	d0 0f		bne $148a			bne 	_ECAHaveFullToken
.147b	80 07		bra $1484			bra 	_ECAAddEqual
.147d					_ECAGreaterCheck:
.147d	20 90 19	jsr $1990			jsr 	LookNext
.1480	c9 b2		cmp #$b2			cmp 	#C64_EQUAL
.1482	d0 06		bne $148a			bne 	_ECAHaveFullToken
.1484					_ECAAddEqual:
.1484	e8		inx				inx 								; > => >= and < to <= is three tokens on.
.1485					_ECAToNotEqual:
.1485	e8		inx				inx
.1486	e8		inx				inx
.1487	20 a1 19	jsr $19a1			jsr 	GetNext 					; consume the = or > in >= <= <>
.148a					_ECAHaveFullToken:
.148a	e0 aa		cpx #$aa			cpx 	#C64_PLUS
.148c	d0 0a		bne $1498			bne 	_ECANotConcat
.148e	68		pla				pla 								; get type back
.148f	48		pha				pha
.1490	29 40		and #$40			and 	#NSSTypeMask
.1492	c9 40		cmp #$40			cmp 	#NSSString
.1494	d0 02		bne $1498			bne 	_ECANotConcat
.1496	a2 df		ldx #$df			ldx 	#(PCD_CONCAT-(PCD_PLUS-C64_PLUS)) & $FF
.1498					_ECANotConcat:
.1498	da		phx				phx 								; save operator on the stack
.1499	a6 28		ldx $28				ldx 	zTemp0 						; push current precedence on the stack
.149b	da		phx				phx
.149c	a5 29		lda $29				lda 	zTemp0+1 					; get precedence of operator
.149e	1a		inc a				inc 	a
.149f	20 46 14	jsr $1446			jsr 	CompileExpressionAtA 		; and compile at the next level up.
.14a2	85 28		sta $28				sta 	zTemp0 						; save type in zTemp0
.14a4	fa		plx				plx 								; restore current precedence in X
.14a5	68		pla				pla 								; restore operator
.14a6	85 29		sta $29				sta 	zTemp0+1 					; save it in zTemp0+1.
.14a8	c9 b1		cmp #$b1			cmp 	#C64_GREATER 				; check for not compare
.14aa	90 17		bcc $14c3			bcc 	_ECANotCompare
.14ac	c9 b7		cmp #$b7			cmp 	#C64_GREATER+6
.14ae	b0 13		bcs $14c3			bcs 	_ECANotCompare
.14b0	7a		ply				ply 								; get type into Y
.14b1	5a		phy				phy
.14b2	48		pha				pha 								; save operator
.14b3	98		tya				tya 								; get type
.14b4	a0 94		ldy #$94			ldy 	#PCD_SCMD_CMP 				; Y is the token to use
.14b6	29 40		and #$40			and 	#NSSTypeMask
.14b8	c9 40		cmp #$40			cmp 	#NSSString
.14ba	f0 02		beq $14be			beq 	_ECANotString
.14bc	a0 a3		ldy #$a3			ldy 	#PCD_FCMD_CMP
.14be					_ECANotString:
.14be	98		tya				tya									; output token Y
.14bf	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.14c2	68		pla				pla 								; restore operator.
.14c3					_ECANotCompare:
.14c3	18		clc				clc 								; convert to P-Code and compile.
.14c4	69 d6		adc #$d6			adc 	#(PCD_PLUS-C64_PLUS) & $FF 	; it might be invalid at this point
.14c6	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.14c9	68		pla				pla 								; type of current result
.14ca	45 28		eor $28				eor 	zTemp0 						; check compatible with r-expr type
.14cc	29 40		and #$40			and 	#NSSTypeMask 				; the types should be compatible, only interested in number vs float
.14ce	d0 19		bne $14e9			bne		_ECAType
.14d0	a5 28		lda $28				lda 	zTemp0 						; get type back
.14d2	c9 40		cmp #$40			cmp 	#NSSString 					; if it is a number, then all operators work.
.14d4	d0 18		bne $14ee			bne 	_ECAGoLoop
.14d6	a5 29		lda $29				lda 	zTemp0+1 					; check operator is + or comparator
.14d8	c9 df		cmp #$df			cmp 	#(PCD_CONCAT-(PCD_PLUS-C64_PLUS)) & $FF
.14da	f0 10		beq $14ec			beq 	_ECAOkayString 				; (this is post conversion)
.14dc	c9 b1		cmp #$b1			cmp 	#C64_GREATER 				; must be a comparison then.
.14de	90 09		bcc $14e9			bcc 	_ECAType
.14e0	c9 b7		cmp #$b7			cmp 	#C64_LESS+1+3 				; the +3 is because of >= <= <>
.14e2	b0 05		bcs $14e9			bcs 	_ECAType
.14e4	a9 00		lda #$00			lda 	#NSSIFloat 					; compare returns number.
.14e6	4c 4b 14	jmp $144b			jmp 	_ECALoop
.14e9					_ECAType:
.14e9	4c 3f 13	jmp $133f		jmp	ErrorV_type
.14ec					_ECAOkayString:
.14ec	a9 40		lda #$40			lda 	#NSSString 					; current is string, go round again.
.14ee					_ECAGoLoop:
.14ee	4c 4b 14	jmp $144b			jmp 	_ECALoop
.14f1					PrecedenceTable:
>14f1	03						.byte 	3 					; '+'
>14f2	03						.byte 	3 					; '-'
>14f3	04						.byte 	4 					; '*'
>14f4	04						.byte 	4 					; '/'
>14f5	05						.byte 	5 					; '^'
>14f6	01						.byte 	1 					; 'and'
>14f7	00						.byte 	0 					; 'or'
>14f8	02						.byte 	2 					; '>'
>14f9	02						.byte 	2 					; '='
>14fa	02						.byte 	2 					; '<'
>14fb	02						.byte 	2 					; '>='
>14fc	02						.byte 	2 					; '<='
>14fd	02						.byte 	2 					; '<>'
.14fe					FindVariable:
.14fe	86 2a		stx $2a				stx 	zTemp1 						; save name.
.1500	84 2b		sty $2b				sty 	zTemp1+1
.1502					_IVCheckSpecial:
.1502	c0 09		cpy #$09			cpy 	#$09	 					; both end $09 e.g. I
.1504	d0 18		bne $151e			bne 	_IVStandard
.1506	e0 14		cpx #$14			cpx 	#$14 						; TI is $14
.1508	f0 0c		beq $1516			beq 	_IVTIFloat
.150a	e0 54		cpx #$54			cpx 	#$54 						; TI$ is $54
.150c	d0 10		bne $151e			bne 	_IVStandard
.150e	a0 c0		ldy #$c0			ldy 	#$C0 						; TI$ returns string $C001
.1510	a2 01		ldx #$01			ldx 	#$01
.1512	a9 40		lda #$40			lda 	#NSSString
.1514	38		sec				sec
.1515	60		rts				rts
.1516					_IVTIFloat:
.1516	a0 80		ldy #$80			ldy 	#$80
.1518	a2 00		ldx #$00			ldx 	#$00
.151a	a9 00		lda #$00			lda 	#0
.151c	38		sec				sec
.151d	60		rts				rts
.151e					_IVStandard:
.151e	a9 00		lda #$00			lda 	#((WorkArea) & $FF)
.1520	85 28		sta $28				sta 	0+zTemp0
.1522	a9 80		lda #$80			lda 	#((WorkArea) >> 8) & $FF
.1524	85 29		sta $29				sta 	1+zTemp0
.1526					_IVCheckLoop:
.1526	b2 28		lda ($28)			lda 	(zTemp0) 					; finished ?
.1528	f0 2b		beq $1555			beq  	_IVNotFound 				; if so, return with CC.
.152a	a0 01		ldy #$01			ldy 	#1 							; match ?
.152c	b1 28		lda ($28),y			lda 	(zTemp0),y
.152e	c5 2a		cmp $2a				cmp 	zTemp1
.1530	d0 07		bne $1539			bne	 	_IVNext
.1532	c8		iny				iny
.1533	b1 28		lda ($28),y			lda 	(zTemp0),y
.1535	c5 2b		cmp $2b				cmp 	zTemp1+1
.1537	f0 0d		beq $1546			beq 	_IVFound
.1539					_IVNext:
.1539	18		clc				clc
.153a	a5 28		lda $28				lda 	zTemp0
.153c	72 28		adc ($28)			adc 	(zTemp0)
.153e	85 28		sta $28				sta 	zTemp0
.1540	90 e4		bcc $1526			bcc 	_IVCheckLoop
.1542	e6 29		inc $29				inc 	zTemp0+1
.1544	80 e0		bra $1526			bra 	_IVCheckLoop
.1546					_IVFound:
.1546	a0 03		ldy #$03			ldy 	#3 							; get address into YX
.1548	b1 28		lda ($28),y			lda 	(zTemp0),y
.154a	aa		tax				tax
.154b	c8		iny				iny
.154c	b1 28		lda ($28),y			lda 	(zTemp0),y
.154e	48		pha				pha
.154f	c8		iny				iny
.1550	b1 28		lda ($28),y			lda 	(zTemp0),y
.1552	7a		ply				ply
.1553	38		sec				sec
.1554	60		rts				rts
.1555					_IVNotFound:
.1555	a6 2a		ldx $2a				ldx 	zTemp1 						; get variable name back
.1557	a4 2b		ldy $2b				ldy 	zTemp1+1
.1559	18		clc				clc
.155a	60		rts				rts
.155b					FixBranches:
.155b	20 43 1c	jsr $1c43			jsr 	OUTPUTRewind 				; back to the start of the *object* code.
.155e					_FBLoop:
.155e	b2 25		lda ($25)			lda 	(objPtr) 					; get the next one.
.1560	c9 d0		cmp #$d0			cmp 	#PCD_CMD_GOTO 				; found GOTO or GOSUB, patch up.
.1562	f0 16		beq $157a			beq 	_FBFixGotoGosub
.1564	c9 d1		cmp #$d1			cmp 	#PCD_CMD_GOSUB
.1566	f0 12		beq $157a			beq 	_FBFixGotoGosub
.1568	c9 d3		cmp #$d3			cmp 	#PCD_CMD_GOTOCMD_NZ 		; patch the conditional GOTOs for Z/NZ TOS.
.156a	f0 0e		beq $157a			beq 	_FBFixGotoGosub
.156c	c9 d2		cmp #$d2			cmp 	#PCD_CMD_GOTOCMD_Z
.156e	f0 0a		beq $157a			beq 	_FBFixGotoGosub
.1570	c9 d4		cmp #$d4			cmp 	#PCD_CMD_VARSPACE
.1572	f0 49		beq $15bd			beq 	_FBFixVarSpace
.1574					_FBNext:
.1574	20 30 16	jsr $1630			jsr 	MoveObjectForward 			; move forward in object code.
.1577	90 e5		bcc $155e			bcc 	_FBLoop 					; not finished
.1579					_FBExit:
.1579	60		rts				rts
.157a					_FBFixGotoGosub:
.157a	a0 01		ldy #$01			ldy 	#1 							; if page is currently $FF
.157c	b1 25		lda ($25),y			lda 	(objPtr),y 					; then patch else leave.
.157e	c9 ff		cmp #$ff			cmp 	#$FF
.1580	d0 f2		bne $1574			bne 	_FBNext
.1582	a0 02		ldy #$02			ldy 	#2							; line number in YA
.1584	b1 25		lda ($25),y			lda 	(objPtr),y
.1586	48		pha				pha
.1587	c8		iny				iny
.1588	b1 25		lda ($25),y			lda 	(objPtr),y
.158a	a8		tay				tay
.158b	68		pla				pla
.158c	20 8c 1b	jsr $1b8c			jsr 	STRFindLine			 		; find where it is X:YA
.158f	90 08		bcc $1599			bcc 	_FBFFound 					; not found, so must be >
.1591	48		pha				pha
.1592	b2 25		lda ($25)			lda 	(objPtr) 					; which is a fail if not CMD_GOTOCMD_Z
.1594	c9 d2		cmp #$d2			cmp 	#PCD_CMD_GOTOCMD_Z
.1596	d0 15		bne $15ad			bne 	_FBFFail
.1598	68		pla				pla
.1599					_FBFFound:
.1599	20 e1 1b	jsr $1be1			jsr 	STRMakeOffset 				; make it an offset from X:YA
.159c	5a		phy				phy	 								; patch the GOTO/GOSUB
.159d	48		pha				pha
.159e	a0 01		ldy #$01			ldy 	#1
.15a0	8a		txa				txa
.15a1	91 25		sta ($25),y			sta 	(objPtr),y
.15a3	c8		iny				iny
.15a4	68		pla				pla
.15a5	91 25		sta ($25),y			sta 	(objPtr),y
.15a7	c8		iny				iny
.15a8	68		pla				pla
.15a9	91 25		sta ($25),y			sta 	(objPtr),y
.15ab	80 c7		bra $1574			bra 	_FBNext
.15ad					_FBFFail:
.15ad	a0 02		ldy #$02			ldy 	#2
.15af	b1 25		lda ($25),y			lda 	(objPtr),y
.15b1	8d 00 05	sta $0500			sta 	currentLineNumber
.15b4	c8		iny				iny
.15b5	b1 25		lda ($25),y			lda 	(objPtr),y
.15b7	8d 01 05	sta $0501			sta 	currentLineNumber+1
.15ba	4c 72 13	jmp $1372		jmp	ErrorV_line
.15bd					_FBFixVarSpace:
.15bd	a0 01		ldy #$01			ldy 	#1
.15bf	ad 0e 06	lda $060e			lda 	freeVariableMemory
.15c2	91 25		sta ($25),y			sta 	(objPtr),y
.15c4	c8		iny				iny
.15c5	ad 0f 06	lda $060f			lda 	freeVariableMemory+1
.15c8	91 25		sta ($25),y			sta 	(objPtr),y
.15ca	80 a8		bra $1574			bra 	_FBNext
.15cc					CommandFOR:
.15cc	20 ac 19	jsr $19ac			jsr 	GetNextNonSpace 			; first letter of index variable, should be.
.15cf	20 c2 19	jsr $19c2			jsr 	CharIsAlpha 				; if not alpha , error
.15d2	90 59		bcc $162d			bcc 	_CFFail
.15d4	20 51 1d	jsr $1d51			jsr 	GetReferenceTerm 			; figure out the reference.
.15d7	48		pha				pha 								; save type
.15d8	29 40		and #$40			and 	#NSSTypeMask 				; check it is numeric
.15da	c9 00		cmp #$00			cmp 	#NSSIFloat
.15dc	d0 4f		bne $162d			bne 	_CFFail
.15de	5a		phy				phy 								; save reference on the stack
.15df	da		phx				phx
.15e0	a9 b2		lda #$b2			lda 	#C64_EQUAL 					; check for equal.
.15e2	20 8f 10	jsr $108f			jsr 	CheckNextA
.15e5	20 44 14	jsr $1444			jsr 	CompileExpressionAt0 		; initial value
.15e8	fa		plx				plx 								; get reference back.
.15e9	7a		ply				ply
.15ea	5a		phy				phy
.15eb	da		phx				phx
.15ec	38		sec				sec 								; set initial value.
.15ed	20 03 1d	jsr $1d03			jsr 	GetSetVariable
.15f0	fa		plx				plx
.15f1	7a		ply				ply
.15f2	68		pla				pla
.15f3	29 20		and #$20			and 	#NSSIInt16
.15f5	f0 04		beq $15fb			beq 	_CFNotInt16
.15f7	98		tya				tya
.15f8	09 80		ora #$80			ora 	#$80
.15fa	a8		tay				tay
.15fb					_CFNotInt16:
.15fb	8a		txa				txa 								; reference in YA
.15fc	20 0e 11	jsr $110e			jsr 	PushIntegerYA
.15ff	a9 a4		lda #$a4			lda 	#C64_TO
.1601	20 8f 10	jsr $108f			jsr 	CheckNextA
.1604	20 44 14	jsr $1444			jsr 	CompileExpressionAt0 		; terminal value
.1607	29 40		and #$40			and 	#NSSTypeMask 				; check it is numeric
.1609	c9 00		cmp #$00			cmp 	#NSSIFloat
.160b	d0 20		bne $162d			bne 	_CFFail
.160d	20 93 19	jsr $1993			jsr 	LookNextNonSpace 			; followed by STEP
.1610	c9 a9		cmp #$a9			cmp 	#C64_STEP
.1612	d0 0e		bne $1622			bne 	_CFNoStep
.1614	20 a1 19	jsr $19a1			jsr 	GetNext 					; consume it.
.1617	20 44 14	jsr $1444			jsr 	CompileExpressionAt0 		; terminal value
.161a	29 40		and #$40			and 	#NSSTypeMask 				; check it is numeric
.161c	c9 00		cmp #$00			cmp 	#NSSIFloat
.161e	d0 0d		bne $162d			bne 	_CFFail
.1620	80 05		bra $1627			bra 	_CFParametersDone
.1622					_CFNoStep:
.1622	a9 01		lda #$01			lda 	#1 							; default STEP e.g. 1
.1624	20 21 11	jsr $1121			jsr 	PushIntegerA
.1627					_CFParametersDone:
.1627	a9 95		lda #$95			lda 	#PCD_FOR  					; compile FOR word.
.1629	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.162c	60		rts				rts
.162d					_CFFail:
.162d	4c 2f 13	jmp $132f		jmp	ErrorV_syntax
.1630					MoveObjectForward:
.1630	b2 25		lda ($25)			lda 	(objPtr) 					; get next
.1632	c9 ff		cmp #$ff			cmp 	#$FF
.1634	f0 36		beq $166c			beq 	_MOFEnd
.1636	c9 40		cmp #$40			cmp 	#$40 						; 00-3F
.1638	90 24		bcc $165e			bcc 	_MOFAdvance1 				; forward 1
.163a	a0 02		ldy #$02			ldy 	#2 							; 40-6F
.163c	c9 70		cmp #$70			cmp 	#$70 						; forward 2
.163e	90 20		bcc $1660			bcc 	_MOFAdvanceY
.1640	c9 ca		cmp #$ca			cmp 	#PCD_STARTSYSTEM 			; 70 - System tokens.
.1642	90 1a		bcc $165e			bcc 	_MOFAdvance1 				; forward 1
.1644	a8		tay				tay 								; read the size.
.1645	b9 a9 1b	lda $1ba9,y			lda 	MOFSizeTable-PCD_STARTSYSTEM,y
.1648	a8		tay				tay
.1649	c8		iny				iny 								; add 1 for the system token.
.164a	d0 14		bne $1660			bne 	_MOFAdvanceY 				; if 0, was $FF thus a string/data skip.
.164c	a0 01		ldy #$01			ldy 	#1 							; get length byte
.164e	b1 25		lda ($25),y			lda 	(objPtr),y
.1650	a8		tay				tay 								; into Y.
.1651	18		clc				clc
.1652	a5 25		lda $25				lda 	objPtr						; add 2 to the object pointer
.1654	69 02		adc #$02			adc 	#2
.1656	85 25		sta $25				sta 	objPtr
.1658	90 02		bcc $165c			bcc 	_MOFNoCarry1
.165a	e6 26		inc $26				inc 	objPtr+1
.165c					_MOFNoCarry1:
.165c	80 02		bra $1660			bra 	_MOFAdvanceY
.165e					_MOFAdvance1:
.165e	a0 01		ldy #$01			ldy 	#1
.1660					_MOFAdvanceY:
.1660	98		tya				tya 								; add X to objPtr
.1661	18		clc				clc
.1662	65 25		adc $25				adc 	objPtr
.1664	85 25		sta $25				sta 	objPtr
.1666	90 02		bcc $166a			bcc 	_MOFNoCarry2
.1668	e6 26		inc $26				inc 	objPtr+1
.166a					_MOFNoCarry2:
.166a	18		clc				clc 								; not completed.
.166b	60		rts				rts
.166c					_MOFEnd:
.166c	e6 25		inc $25				inc 	objPtr
.166e	d0 02		bne $1672			bne 	_MOFENoCarry
.1670	e6 26		inc $26				inc 	objPtr+1
.1672					_MOFENoCarry:
.1672	38		sec				sec
.1673	60		rts				rts
.1674					INPUTOpen:
.1674	a9 18		lda #$18			lda 	#((EndProgram+2) & $FF)
.1676	85 30		sta $30				sta 	0+srcInputPtr
.1678	a9 25		lda #$25			lda 	#((EndProgram+2) >> 8) & $FF
.167a	85 31		sta $31				sta 	1+srcInputPtr
.167c					INPUTClose:
.167c	60		rts				rts
.167d					INPUTGet:
.167d	b2 30		lda ($30)			lda 	(srcInputPtr)
.167f	e6 30		inc $30				inc 	srcInputPtr
.1681	d0 02		bne $1685			bne 	_IGSkip
.1683	e6 31		inc $31				inc 	srcInputPtr+1
.1685					_IGSkip:
.1685	60		rts				rts
.0030					srcInputPtr:
>0030							.fill 	2
.1686					FNCompile:
.1686	20 ac 19	jsr $19ac			jsr 	GetNextNonSpace				; get variable name w/type must be array e.g. DEF FNx(a)
.1689	20 11 1a	jsr $1a11			jsr 	ExtractVariableName
.168c	e0 00		cpx #$00			cpx 	#0
.168e	10 32		bpl $16c2			bpl 	_FNError
.1690	8a		txa				txa 								; convert to a function reference - bit 7:0 clear bit 7:1 set
.1691	29 7f		and #$7f			and 	#$7F
.1693	aa		tax				tax
.1694	98		tya				tya
.1695	09 80		ora #$80			ora 	#$80
.1697	a8		tay				tay
.1698	20 fe 14	jsr $14fe			jsr 	FindVariable				; does it already exist ?
.169b	90 25		bcc $16c2			bcc 	_FNError 					; no.
.169d	20 e1 1b	jsr $1be1			jsr 	STRMakeOffset 				; convert to a relative address.
.16a0	c9 00		cmp #$00			cmp 	#0 							; fix up.
.16a2	d0 01		bne $16a5			bne 	_FNNoBorrow
.16a4	88		dey				dey
.16a5					_FNNoBorrow:
.16a5	3a		dec a				dec 	a
.16a6	5a		phy				phy 								; save location of routine on stack.
.16a7	48		pha				pha
.16a8	da		phx				phx
.16a9	20 44 14	jsr $1444			jsr 	CompileExpressionAt0
.16ac	20 89 10	jsr $1089			jsr 	CheckNextRParen
.16af	a9 d1		lda #$d1			lda 	#PCD_CMD_GOSUB
.16b1	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.16b4	68		pla				pla
.16b5	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.16b8	68		pla				pla
.16b9	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.16bc	68		pla				pla
.16bd	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.16c0	18		clc				clc
.16c1	60		rts				rts
.16c2					_FNError:
.16c2	4c 22 13	jmp $1322		jmp	ErrorV_value
.16c5					CommandTables:
>16c5	07 cb 00 03 6f 1a 06			.byte	$07,$cb,$00,$03,CommandGOAlt & $FF,CommandGOAlt >> 8,$06
>16cc	07 89 00 03 76 1a 06			.byte	$07,$89,$00,$03,CommandGOTO & $FF,CommandGOTO >> 8,$06
>16d3	07 8d 00 03 69 1a 06			.byte	$07,$8d,$00,$03,CommandGOSUB & $FF,CommandGOSUB >> 8,$06
>16da	07 88 00 03 f1 1a 06			.byte	$07,$88,$00,$03,CommandLET & $FF,CommandLET >> 8,$06
>16e1	07 85 00 03 d1 1a 06			.byte	$07,$85,$00,$03,CommandINPUT & $FF,CommandINPUT >> 8,$06
>16e8	07 84 00 04 e5 1a 06			.byte	$07,$84,$00,$04,CommandINPUTStream & $FF,CommandINPUTStream >> 8,$06
>16ef	07 99 00 03 7e 1c 06			.byte	$07,$99,$00,$03,CommandPRINT & $FF,CommandPRINT >> 8,$06
>16f6	07 98 00 04 7e 1c 06			.byte	$07,$98,$00,$04,CommandPRINT & $FF,CommandPRINT >> 8,$06
>16fd	07 8f 00 03 89 1d 06			.byte	$07,$8f,$00,$03,CommandREM & $FF,CommandREM >> 8,$06
>1704	07 81 00 03 cc 15 06			.byte	$07,$81,$00,$03,CommandFOR & $FF,CommandFOR >> 8,$06
>170b	07 82 00 03 eb 1b 06			.byte	$07,$82,$00,$03,CommandNEXT & $FF,CommandNEXT >> 8,$06
>1712	07 a1 00 03 e2 19 06			.byte	$07,$a1,$00,$03,CommandGET & $FF,CommandGET >> 8,$06
>1719	07 83 00 03 c9 11 06			.byte	$07,$83,$00,$03,CommandDATA & $FF,CommandDATA >> 8,$06
>1720	07 87 00 03 c7 1c 06			.byte	$07,$87,$00,$03,CommandREAD & $FF,CommandREAD >> 8,$06
>1727	07 86 00 03 5c 12 06			.byte	$07,$86,$00,$03,CommandDIM & $FF,CommandDIM >> 8,$06
>172e	07 96 00 03 e5 11 06			.byte	$07,$96,$00,$03,CommandDEF & $FF,CommandDEF >> 8,$06
>1735	07 8b 00 e3 99 1a 06			.byte	$07,$8b,$00,$e3,CommandIF & $FF,CommandIF >> 8,$06
>173c	08 92 00 ea e3 4f 1e 06			.byte	$08,$92,$00,$ea,$e3,CommandWAIT & $FF,CommandWAIT >> 8,$06
>1744	09 91 00 e1 a9 03 17 1c			.byte	$09,$91,$00,$e1,169,$03,CommandON & $FF,CommandON >> 8,$06
>174c	06
>174d	07 9e 00 e2 ca 92 06			.byte	$07,$9e,$00,$e2,37578 & $FF,37578 >> 8,$06
>1754	07 97 00 ea e1 ac 06			.byte	$07,$97,$00,$ea,$e1,172,$06
>175b	06 8e 00 10 98 06			.byte	$06,$8e,$00,$10,152,$06
>1761	07 90 00 20 ca 91 06			.byte	$07,$90,$00,$20,37322 & $FF,37322 >> 8,$06
>1768	07 80 00 20 ca 82 06			.byte	$07,$80,$00,$20,33482 & $FF,33482 >> 8,$06
>176f	07 8c 00 20 ca 90 06			.byte	$07,$8c,$00,$20,37066 & $FF,37066 >> 8,$06
>1776	00						.byte 	0
.1777					UnaryTables:
>1777	07 b4 00 8e 91 b6 06			.byte	$07,$b4,$00,$8e,$91,182,$06
>177e	08 b5 00 8e 92 ca 84 06			.byte	$08,$b5,$00,$8e,$92,33994 & $FF,33994 >> 8,$06
>1786	07 b6 00 8e 91 8d 06			.byte	$07,$b6,$00,$8e,$91,141,$06
>178d	07 b7 00 8e 91 c1 06			.byte	$07,$b7,$00,$8e,$91,193,$06
>1794	07 b8 00 8e 91 96 06			.byte	$07,$b8,$00,$8e,$91,150,$06
>179b	07 b9 00 8e 91 ad 06			.byte	$07,$b9,$00,$8e,$91,173,$06
>17a2	08 ba 00 8e 92 ca 85 06			.byte	$08,$ba,$00,$8e,$92,34250 & $FF,34250 >> 8,$06
>17aa	07 bb 00 8e 91 b4 06			.byte	$07,$bb,$00,$8e,$91,180,$06
>17b1	08 bc 00 8e 92 ca 86 06			.byte	$08,$bc,$00,$8e,$92,34506 & $FF,34506 >> 8,$06
>17b9	08 bd 00 8e 92 ca 87 06			.byte	$08,$bd,$00,$8e,$92,34762 & $FF,34762 >> 8,$06
>17c1	08 be 00 8e 92 ca 88 06			.byte	$08,$be,$00,$8e,$92,35018 & $FF,35018 >> 8,$06
>17c9	08 bf 00 8e 92 ca 89 06			.byte	$08,$bf,$00,$8e,$92,35274 & $FF,35274 >> 8,$06
>17d1	08 c0 00 8e 92 ca 8a 06			.byte	$08,$c0,$00,$8e,$92,35530 & $FF,35530 >> 8,$06
>17d9	08 c1 00 8e 92 ca 8b 06			.byte	$08,$c1,$00,$8e,$92,35786 & $FF,35786 >> 8,$06
>17e1	07 c2 00 8e 91 ab 06			.byte	$07,$c2,$00,$8e,$91,171,$06
>17e8	07 c3 00 8f 91 a2 06			.byte	$07,$c3,$00,$8f,$91,162,$06
>17ef	07 c4 00 8e 91 ba 07			.byte	$07,$c4,$00,$8e,$91,186,$07
>17f6	07 c5 00 8f 91 c2 06			.byte	$07,$c5,$00,$8f,$91,194,$06
>17fd	07 c6 00 8f 91 8f 06			.byte	$07,$c6,$00,$8f,$91,143,$06
>1804	07 c7 00 8e 91 93 07			.byte	$07,$c7,$00,$8e,$91,147,$07
>180b	08 c8 00 8f ae 91 bb 07			.byte	$08,$c8,$00,$8f,$ae,$91,187,$07
>1813	08 c9 00 8f ae 91 bc 07			.byte	$08,$c9,$00,$8f,$ae,$91,188,$07
>181b	0b ca 00 8f ae 03 5f 19			.byte	$0b,$ca,$00,$8f,$ae,$03,OptionalParameterCompile & $FF,OptionalParameterCompile >> 8,$91,189,$07
>1823	91 bd 07
>1826	07 a8 00 03 7e 19 06			.byte	$07,$a8,$00,$03,NotUnaryCompile & $FF,NotUnaryCompile >> 8,$06
>182d	07 a5 00 03 86 16 06			.byte	$07,$a5,$00,$03,FNCompile & $FF,FNCompile >> 8,$06
>1834	00						.byte 	0
.1835					GeneratorProcess:
.1835	86 28		stx $28				stx 	zTemp0 						; save generation pointer in zTemp0
.1837	84 29		sty $29				sty 	zTemp0+1
.1839	85 2a		sta $2a				sta 	zTemp1 						; first match token
.183b	64 2b		stz $2b				stz 	zTemp1+1
.183d	c9 ce		cmp #$ce			cmp 	#$CE 						; check if shift
.183f	d0 05		bne $1846			bne 	_GPNotShifted
.1841	20 a1 19	jsr $19a1			jsr 	GetNext 					; get the shifted token
.1844	85 2b		sta $2b				sta 	zTemp1+1 					; match CE xx
.1846					_GPNotShifted:
.1846					_GPSearch:
.1846	b2 28		lda ($28)			lda 	(zTemp0) 					; reached end ?
.1848	18		clc				clc
.1849	f0 2f		beq $187a			beq 	_GPExit
.184b	a0 01		ldy #$01			ldy 	#1 							; tokens match
.184d	b1 28		lda ($28),y			lda 	(zTemp0),y
.184f	c5 2a		cmp $2a				cmp 	zTemp1
.1851	d0 09		bne $185c			bne 	_GPNext
.1853	a5 2b		lda $2b				lda 	zTemp1+1 					; 2nd token ?
.1855	f0 12		beq $1869			beq 	_GPFound
.1857	c8		iny				iny 								; check match.
.1858	d1 28		cmp ($28),y			cmp 	(zTemp0),y
.185a	f0 0d		beq $1869			beq 	_GPFound
.185c					_GPNext:
.185c	18		clc				clc 								; follow to next
.185d	a5 28		lda $28				lda 	zTemp0
.185f	72 28		adc ($28)			adc 	(zTemp0)
.1861	85 28		sta $28				sta 	zTemp0
.1863	90 e1		bcc $1846			bcc 	_GPSearch
.1865	e6 29		inc $29				inc 	zTemp0+1
.1867	80 dd		bra $1846			bra 	_GPSearch
.1869					_GPFound:
.1869	18		clc				clc 								; skip to action bytes
.186a	a5 28		lda $28				lda 	zTemp0 						; <offset> <token lo> <token hi> first
.186c	69 03		adc #$03			adc 	#3
.186e	85 28		sta $28				sta 	zTemp0
.1870	90 02		bcc $1874			bcc 	_GPNoCarry
.1872	e6 29		inc $29				inc 	zTemp0+1
.1874					_GPNoCarry:
.1874					_GPLoop:
.1874	20 7b 18	jsr $187b			jsr 	GeneratorExecute 			; execute one command
.1877	90 fb		bcc $1874			bcc 	_GPLoop 					; go back if not completed.
.1879	38		sec				sec 								; return with CS.
.187a					_GPExit:
.187a	60		rts				rts
.187b					GeneratorExecute:
.187b	20 26 19	jsr $1926			jsr 	_GEFetchZTemp0 				; get next.
.187e	48		pha				pha 								; split into 2 nibbles
.187f	4a		lsr a				lsr 	a
.1880	4a		lsr a				lsr 	a
.1881	4a		lsr a				lsr		a
.1882	4a		lsr a				lsr 	a
.1883	20 8d 18	jsr $188d			jsr 	_GEExecuteNibble 			; MSB first
.1886	68		pla				pla
.1887	b0 03		bcs $188c			bcs 	_GEHaveCompleted
.1889	20 8d 18	jsr $188d			jsr 	_GEExecuteNibble 			; LSB second
.188c					_GEHaveCompleted:
.188c	60		rts				rts
.188d					_GEExecuteNibble:
.188d	29 0f		and #$0f			and 	#$0F
.188f	0a		asl a				asl 	a
.1890	aa		tax				tax
.1891	7c 94 18	jmp ($1894,x)			jmp 	(_GEExecuteVectors,x)
.1894					_GEExecuteVectors:
>1894	b4 18						.word 	_GEXNop 					; 0  (no operation)
>1896	bc 18						.word 	_GEXToken1 					; 1  (compile 1 byte token)
>1898	b6 18						.word 	_GEXToken2 					; 2  (compile 2 byte token)
>189a	09 19						.word 	_GEXExecute 				; 3  (run arbitrary code)
>189c	fc 18						.word 	_GEXChannelExec 			; 4  (run arbitrary code with possible channel redirection)
>189e	b4 18						.word 	_GEXNop 					; 5
>18a0	c3 18						.word 	_GEXExitNumber 				; 6  exit return ifloat32 type
>18a2	c7 18						.word 	_GEXExitString 				; 7  exit return string type
>18a4	cb 18						.word 	_GEXLParam 					; 8  check ( follows
>18a6	cf 18						.word 	_GEXRParam 					; 9  check ) follows
>18a8	d3 18						.word 	_GEXComma					; A  check , follows
>18aa	b4 18						.word 	_GEXNop 					; B
>18ac	b4 18						.word 	_GEXNop 					; C
>18ae	b4 18						.word 	_GEXNop 					; D
>18b0	e3 18						.word 	_GEXNumber 					; E  compile get any number
>18b2	ee 18						.word 	_GEXString 					; F  compile get any string
.18b4					_GEXNop:
.18b4	18		clc				clc
.18b5	60		rts				rts
.18b6					_GEXToken2:
.18b6	20 26 19	jsr $1926			jsr 	_GEFetchZTemp0
.18b9	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.18bc					_GEXToken1:
.18bc	20 26 19	jsr $1926			jsr 	_GEFetchZTemp0
.18bf	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.18c2	60		rts				rts
.18c3					_GEXExitNumber:
.18c3	a9 00		lda #$00			lda 	#NSSIFloat
.18c5	38		sec				sec
.18c6	60		rts				rts
.18c7					_GEXExitString:
.18c7	a9 40		lda #$40			lda 	#NSSString
.18c9	38		sec				sec
.18ca	60		rts				rts
.18cb					_GEXLParam:
.18cb	a9 28		lda #$28			lda 	#"("
.18cd	80 06		bra $18d5			bra 	_GEXCheck
.18cf					_GEXRParam:
.18cf	a9 29		lda #$29			lda 	#")"
.18d1	80 02		bra $18d5			bra 	_GEXCheck
.18d3					_GEXComma:
.18d3	a9 2c		lda #$2c			lda 	#","
.18d5					_GEXCheck:
.18d5	85 2c		sta $2c				sta 	zTemp2 						; save match
.18d7	20 ac 19	jsr $19ac			jsr 	GetNextNonSpace 			; get next skipping spaces
.18da	c5 2c		cmp $2c				cmp 	zTemp2 						; check matches.
.18dc	d0 02		bne $18e0			bne 	_GEXSyntax
.18de	18		clc				clc
.18df	60		rts				rts
.18e0					_GEXSyntax:
.18e0	4c 2f 13	jmp $132f		jmp	ErrorV_syntax
.18e3					_GEXNumber:
.18e3	20 2f 19	jsr $192f			jsr 	GEXCompileExpression 		; compile expression
.18e6	29 40		and #$40			and 	#NSSTypeMask
.18e8	c9 00		cmp #$00			cmp  	#NSSIFloat
.18ea	d0 0d		bne $18f9			bne 	_GEXType
.18ec	18		clc				clc
.18ed	60		rts				rts
.18ee					_GEXString:
.18ee	20 2f 19	jsr $192f			jsr 	GEXCompileExpression 		; compile expression
.18f1	29 40		and #$40			and 	#NSSTypeMask
.18f3	c9 40		cmp #$40			cmp  	#NSSString
.18f5	d0 02		bne $18f9			bne 	_GEXType
.18f7	18		clc				clc
.18f8	60		rts				rts
.18f9					_GEXType:
.18f9	4c 3f 13	jmp $133f		jmp	ErrorV_type
.18fc					_GEXChannelExec:
.18fc	20 3f 19	jsr $193f			jsr 	ChannelPrefix 				; set up default
.18ff	20 09 19	jsr $1909			jsr 	_GEXExecute
.1902	08		php				php
.1903	20 59 19	jsr $1959			jsr 	ChannelPostfix 				; replace default.
.1906	28		plp				plp
.1907	60		rts				rts
>1908	db						.byte 	$DB 						; causes a break in the emulator
.1909					_GEXExecute:
.1909	20 26 19	jsr $1926			jsr 	_GEFetchZTemp0 				; get vector
.190c	85 2c		sta $2c				sta 	zTemp2
.190e	20 26 19	jsr $1926			jsr 	_GEFetchZTemp0
.1911	85 2d		sta $2d				sta 	zTemp2+1
.1913	a6 28		ldx $28				ldx 	zTemp0 						; push generation exec on to stack for reentrancy
.1915	da		phx				phx
.1916	a6 29		ldx $29				ldx 	zTemp0+1
.1918	da		phx				phx
.1919	20 23 19	jsr $1923			jsr 	_GECallZTemp2 				; execute code
.191c	fa		plx				plx 								; recover generation exec
.191d	86 29		stx $29				stx 	zTemp0+1
.191f	fa		plx				plx
.1920	86 28		stx $28				stx 	zTemp0
.1922	60		rts				rts
.1923					_GECallZTemp2:
.1923	6c 2c 00	jmp ($002c)			jmp 	(zTemp2)
.1926					_GEFetchZTemp0:
.1926	b2 28		lda ($28)			lda 	(zTemp0)
.1928	e6 28		inc $28				inc 	zTemp0
.192a	d0 02		bne $192e			bne 	_GEFZ0Skip
.192c	e6 29		inc $29				inc 	zTemp0+1
.192e					_GEFZ0Skip:
.192e	60		rts				rts
.192f					GEXCompileExpression:
.192f	a6 28		ldx $28				ldx 	zTemp0 						; push generation exec on to stack for reentrancy
.1931	da		phx				phx
.1932	a6 29		ldx $29				ldx 	zTemp0+1
.1934	da		phx				phx
.1935	20 44 14	jsr $1444			jsr 	CompileExpressionAt0 		; compile expression.
.1938	fa		plx				plx 								; recover generation exec
.1939	86 29		stx $29				stx 	zTemp0+1
.193b	fa		plx				plx
.193c	86 28		stx $28				stx 	zTemp0
.193e	60		rts				rts
.193f					ChannelPrefix:
.193f	a9 ae		lda #$ae			lda 	#PCD_GETCHANNEL				; set channel onto stack
.1941	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1944	20 2f 19	jsr $192f			jsr 	GEXCompileExpression 		; channel #
.1947	29 40		and #$40			and 	#NSSTypeMask
.1949	c9 00		cmp #$00			cmp 	#NSSIFloat
.194b	d0 09		bne $1956			bne 	_CPXType
.194d	20 85 10	jsr $1085			jsr 	CheckNextComma 				; check , follows.
.1950	a9 af		lda #$af			lda 	#PCD_SETCHANNEL				; set channel
.1952	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1955	60		rts				rts
.1956					_CPXType:
.1956	4c 3f 13	jmp $133f		jmp	ErrorV_type
.1959					ChannelPostfix:
.1959	a9 af		lda #$af			lda 	#PCD_SETCHANNEL				; set channel from TOS.
.195b	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.195e	60		rts				rts
.195f					OptionalParameterCompile:
.195f	20 93 19	jsr $1993			jsr 	LookNextNonSpace 			; what follows.
.1962	c9 2c		cmp #$2c			cmp 	#","
.1964	d0 0e		bne $1974			bne 	_MidDefault
.1966	20 a1 19	jsr $19a1			jsr 	GetNext 					; consume ,
.1969	20 44 14	jsr $1444			jsr 	CompileExpressionAt0
.196c	29 40		and #$40			and 	#NSSTypeMask
.196e	c9 00		cmp #$00			cmp 	#NSSIFloat
.1970	d0 09		bne $197b			bne 	MidFailType
.1972	80 05		bra $1979			bra 	_MidComplete
.1974					_MidDefault:
.1974	a9 ff		lda #$ff			lda 	#255 						; default of 255
.1976	20 21 11	jsr $1121			jsr 	PushIntegerA
.1979					_MidComplete:
.1979	18		clc				clc
.197a	60		rts				rts
.197b					MidFailType:
.197b	4c 3f 13	jmp $133f		jmp	ErrorV_type
.197e					NotUnaryCompile:
.197e	ad f9 14	lda $14f9			lda 	PrecedenceTable+C64_EQUAL-C64_PLUS
.1981	20 46 14	jsr $1446			jsr 	CompileExpressionAtA 		; evaluate at that level
.1984	29 40		and #$40			and 	#NSSTypeMask 				; check compile returns number.
.1986	c9 00		cmp #$00			cmp 	#NSSIFloat
.1988	d0 f1		bne $197b			bne 	MidFailType
.198a	a9 a8		lda #$a8			lda 	#PCD_NOT 					; and NOT it.
.198c	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.198f	60		rts				rts
.1990					LookNext:
.1990	b2 2e		lda ($2e)			lda 	(srcPtr)
.1992	60		rts				rts
.1993					LookNextNonSpace:
.1993	b2 2e		lda ($2e)			lda 	(srcPtr)
.1995	c9 20		cmp #$20			cmp		#' '
.1997	f0 03		beq $199c			beq 	_LNNSkip
.1999	c9 00		cmp #$00			cmp 	#0
.199b	60		rts				rts
.199c					_LNNSkip:
.199c	20 a1 19	jsr $19a1			jsr 	GetNext
.199f	80 f2		bra $1993			bra 	LookNextNonSpace
.19a1					GetNext:
.19a1	b2 2e		lda ($2e)			lda 	(srcPtr) 					; get next
.19a3	e6 2e		inc $2e				inc 	srcPtr
.19a5	d0 02		bne $19a9			bne 	_GNSkip
.19a7	e6 2f		inc $2f				inc 	srcPtr+1
.19a9					_GNSkip:
.19a9	c9 00		cmp #$00			cmp 	#0
.19ab	60		rts				rts
.19ac					GetNextNonSpace:
.19ac	20 a1 19	jsr $19a1			jsr 	GetNext
.19af	c9 20		cmp #$20			cmp 	#' '
.19b1	f0 f9		beq $19ac			beq 	GetNextNonSpace
.19b3	c9 00		cmp #$00			cmp 	#0
.19b5	60		rts				rts
.19b6					CharIsDigit:
.19b6	c9 30		cmp #$30			cmp 	#"0"
.19b8	90 06		bcc $19c0			bcc 	CCFalse
.19ba	c9 3a		cmp #$3a			cmp 	#"9"+1
.19bc	b0 02		bcs $19c0			bcs 	CCFalse
.19be					CCTrue:
.19be	38		sec				sec
.19bf	60		rts				rts
.19c0					CCFalse:
.19c0	18		clc				clc
.19c1	60		rts				rts
.19c2					CharIsAlpha:
.19c2	c9 41		cmp #$41			cmp 	#"A"
.19c4	90 fa		bcc $19c0			bcc 	CCFalse
.19c6	c9 5b		cmp #$5b			cmp 	#"Z"+1
.19c8	b0 f6		bcs $19c0			bcs 	CCFalse
.19ca	80 f2		bra $19be			bra 	CCTrue
.19cc					ConvertHexStyle:
.19cc	38		sec				sec
.19cd	e9 30		sbc #$30			sbc 	#"0" 						; check in range 0-9 first
.19cf	90 ef		bcc $19c0			bcc 	CCFalse
.19d1	c9 0a		cmp #$0a			cmp 	#9+1
.19d3	90 e9		bcc $19be			bcc 	CCTrue
.19d5	38		sec				sec 								; shift into hex space A=>0 Z=>25
.19d6	e9 11		sbc #$11			sbc 	#"A"-"0"
.19d8	90 e6		bcc $19c0			bcc 	CCFalse
.19da	c9 1a		cmp #$1a			cmp 	#26 						; past Z ?
.19dc	b0 e2		bcs $19c0			bcs 	CCFalse
.19de	69 0a		adc #$0a			adc 	#10 						; make valid quasi-hex 0-35
.19e0	80 dc		bra $19be			bra 	CCTrue
.19e2					CommandGET:
.19e2	20 93 19	jsr $1993			jsr 	LookNextNonSpace 			; # follows ?
.19e5	c9 23		cmp #$23			cmp 	#"#"
.19e7	d0 0d		bne $19f6			bne 	CommandGetBody
.19e9	20 a1 19	jsr $19a1			jsr 	GetNext 					; consume #
.19ec	20 3f 19	jsr $193f			jsr 	ChannelPrefix 				; do it as GET#
.19ef	20 f6 19	jsr $19f6			jsr 	CommandGetBody
.19f2	20 59 19	jsr $1959			jsr 	ChannelPostfix
.19f5	60		rts				rts
.19f6					CommandGetBody:
.19f6	20 ac 19	jsr $19ac			jsr 	GetNextNonSpace 			; get the first character
.19f9	20 51 1d	jsr $1d51			jsr 	GetReferenceTerm 			; identify variable to assign to
.19fc	48		pha				pha
.19fd	29 40		and #$40			and 	#NSSTypeMask 				; check if it is a string
.19ff	c9 40		cmp #$40			cmp 	#NSSString
.1a01	d0 0b		bne $1a0e			bne 	_CGType
.1a03	a9 97		lda #$97			lda 	#PCD_GET 					; compile GET
.1a05	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1a08	38		sec				sec
.1a09	68		pla				pla
.1a0a	20 03 1d	jsr $1d03			jsr		GetSetVariable
.1a0d	60		rts				rts
.1a0e					_CGType:
.1a0e	4c 3f 13	jmp $133f		jmp	ErrorV_type
.1a11					ExtractVariableName:
.1a11	20 c2 19	jsr $19c2			jsr 	CharIsAlpha
.1a14	90 50		bcc $1a66			bcc 	_IVSyntax
.1a16	29 1f		and #$1f			and 	#31 						; reduce first character to 5 bits
.1a18	85 2a		sta $2a				sta 	zTemp1 						; we'll build it in zTemp1
.1a1a	64 2b		stz $2b				stz 	zTemp1+1
.1a1c	20 90 19	jsr $1990			jsr 	LookNext 					; is there a second character ?
.1a1f	20 c2 19	jsr $19c2			jsr 	CharIsAlpha  				; must be alphanumeric
.1a22	b0 05		bcs $1a29			bcs 	_IVHasSecond
.1a24	20 b6 19	jsr $19b6			jsr 	CharIsDigit
.1a27	90 07		bcc $1a30			bcc 	_IVCheckType
.1a29					_IVHasSecond:
.1a29	29 3f		and #$3f			and 	#63 						; 6 bit ASCII.
.1a2b	85 2b		sta $2b				sta 	zTemp1+1
.1a2d					_IVGetNextCheck:
.1a2d	20 a1 19	jsr $19a1			jsr 	GetNext 					; consume it
.1a30					_IVCheckType:
.1a30	20 90 19	jsr $1990			jsr 	LookNext					; check if string follows.
.1a33	20 c2 19	jsr $19c2			jsr 	CharIsAlpha
.1a36	b0 f5		bcs $1a2d			bcs 	_IVGetNextCheck
.1a38	20 b6 19	jsr $19b6			jsr 	CharIsDigit
.1a3b	b0 f0		bcs $1a2d			bcs 	_IVGetNextCheck
.1a3d	a2 40		ldx #$40			ldx 	#NSSString
.1a3f	c9 24		cmp #$24			cmp 	#"$"
.1a41	f0 06		beq $1a49			beq 	_IVHasType
.1a43	a2 20		ldx #$20			ldx 	#NSSIInt16 					; check if short int follows e.g. 16 bit
.1a45	c9 25		cmp #$25			cmp 	#"%"
.1a47	d0 08		bne $1a51			bne 	_IVCheckArray
.1a49					_IVHasType:
.1a49	8a		txa				txa 								; Or X into zTemp1
.1a4a	05 2a		ora $2a				ora 	zTemp1
.1a4c	85 2a		sta $2a				sta 	zTemp1
.1a4e	20 a1 19	jsr $19a1			jsr 	GetNext 					; consume it
.1a51					_IVCheckArray:
.1a51	20 90 19	jsr $1990			jsr 	LookNext 					; check if array follows
.1a54	c9 28		cmp #$28			cmp 	#"("
.1a56	d0 09		bne $1a61			bne 	_IVNotArray
.1a58	a5 2a		lda $2a				lda 	zTemp1 						; set array bit
.1a5a	09 80		ora #$80			ora 	#NSSArray
.1a5c	85 2a		sta $2a				sta 	zTemp1
.1a5e	20 a1 19	jsr $19a1			jsr 	GetNext 					; consume it
.1a61					_IVNotArray:
.1a61	a6 2a		ldx $2a				ldx 	zTemp1
.1a63	a4 2b		ldy $2b				ldy 	zTemp1+1
.1a65	60		rts				rts
.1a66					_IVSyntax:
.1a66	4c 2f 13	jmp $132f		jmp	ErrorV_syntax
.1a69					CommandGOSUB:
.1a69	a9 d1		lda #$d1			lda 	#PCD_CMD_GOSUB
.1a6b	20 7c 1a	jsr $1a7c			jsr 	CompileBranchCommand
.1a6e	60		rts				rts
.1a6f					CommandGOAlt:
.1a6f	a9 a4		lda #$a4			lda 	#C64_TO 					; GO TO alternative
.1a71	20 8f 10	jsr $108f			jsr 	CheckNextA
.1a74	80 00		bra $1a76			bra 	CommandGOTO
.1a76					CommandGOTO:
.1a76	a9 d0		lda #$d0			lda 	#PCD_CMD_GOTO
.1a78	20 7c 1a	jsr $1a7c			jsr 	CompileBranchCommand
.1a7b	60		rts				rts
.1a7c					CompileBranchCommand:
.1a7c	20 7b 10	jsr $107b			jsr 	WriteCodeByte 				; write the command out.
.1a7f	20 ac 19	jsr $19ac			jsr 	GetNextNonSpace
.1a82	20 4e 1c	jsr $1c4e			jsr 	ParseConstant 				; get constant into YA
.1a85	90 0f		bcc $1a96			bcc 	_CBCSyntax
.1a87	48		pha				pha
.1a88	a9 ff		lda #$ff			lda 	#$FF 						; no address yet.
.1a8a	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1a8d	68		pla				pla 								; and compile the actual line number
.1a8e	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1a91	98		tya				tya
.1a92	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1a95	60		rts				rts
.1a96					_CBCSyntax:
.1a96	4c 2f 13	jmp $132f		jmp	ErrorV_syntax
.1a99					CommandIF:
.1a99	20 93 19	jsr $1993			jsr 	LookNextNonSpace 			; what follows the tests ?
.1a9c	c9 89		cmp #$89			cmp 	#C64_GOTO 					; IF .. GOTO
.1a9e	f0 0f		beq $1aaf			beq 	_CIGoto
.1aa0	a9 a7		lda #$a7			lda 	#C64_THEN 					; should be THEN
.1aa2	20 8f 10	jsr $108f			jsr 	CheckNextA
.1aa5	20 93 19	jsr $1993			jsr 	LookNextNonSpace 			; THEN <number>
.1aa8	20 b6 19	jsr $19b6			jsr 	CharIsDigit
.1aab	b0 05		bcs $1ab2			bcs 	_CIGoto2
.1aad	80 09		bra $1ab8			bra 	CompileGotoEOL
.1aaf					_CIGoto:
.1aaf	20 a1 19	jsr $19a1			jsr 	GetNext
.1ab2					_CIGoto2:
.1ab2	a9 d3		lda #$d3			lda 	#PCD_CMD_GOTOCMD_NZ
.1ab4	20 7c 1a	jsr $1a7c			jsr 	CompileBranchCommand
.1ab7	60		rts				rts
.1ab8					CompileGotoEOL:
.1ab8	a9 d2		lda #$d2			lda 	#PCD_CMD_GOTOCMD_Z
.1aba	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1abd	a9 ff		lda #$ff			lda 	#$FF
.1abf	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1ac2	20 57 1b	jsr $1b57			jsr 	GetLineNumber 				; Get the current line number => YA
.1ac5	1a		inc a				inc 	a 							; and branch to +1
.1ac6	d0 01		bne $1ac9			bne 	_CGENoCarry
.1ac8	c8		iny				iny
.1ac9					_CGENoCarry:
.1ac9	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1acc	98		tya				tya
.1acd	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1ad0	60		rts				rts
.1ad1					CommandINPUT:
.1ad1	20 93 19	jsr $1993			jsr 	LookNextNonSpace 			; check for "
.1ad4	c9 22		cmp #$22			cmp 	#'"'
.1ad6	d0 0d		bne $1ae5			bne 	CommandINPUTStream
.1ad8	20 44 14	jsr $1444			jsr 	CompileExpressionAt0
.1adb	a9 b1		lda #$b1			lda 	#(PCD_PRINTCMD_S) & $FF
.1add	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1ae0	a9 2c		lda #$2c			lda 	#","
.1ae2	20 85 10	jsr $1085			jsr 	CheckNextComma
.1ae5					CommandINPUTStream:
.1ae5	a9 a1		lda #$a1			lda 	#(PCD_INPUTCMD_START) & $FF
.1ae7	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1aea	a2 9f		ldx #$9f			ldx 	#PCD_INPUT 					; do READ with Data from INPUT
.1aec	a0 a0		ldy #$a0			ldy 	#PCD_INPUTDOLLAR
.1aee	4c cb 1c	jmp $1ccb			jmp 	CommandReadInputCommon
.1af1					CommandLET:
.1af1	20 ac 19	jsr $19ac			jsr 	GetNextNonSpace 			; get the first character
.1af4					CommandLETHaveFirst:
.1af4	20 51 1d	jsr $1d51			jsr 	GetReferenceTerm 			; identify variable to assign to
.1af7	da		phx				phx 								; save target on the stack.
.1af8	5a		phy				phy
.1af9	48		pha				pha
.1afa	a9 b2		lda #$b2			lda 	#C64_EQUAL 					; check next is =
.1afc	20 8f 10	jsr $108f			jsr 	CheckNextA
.1aff	20 44 14	jsr $1444			jsr 	CompileExpressionAt0 		; evaluate the RHS.
.1b02	85 28		sta $28				sta 	zTemp0 						; save type returned
.1b04	68		pla				pla 								; get type of assignment
.1b05	48		pha				pha
.1b06	45 28		eor $28				eor 	zTemp0 						; compare using EOR
.1b08	29 40		and #$40			and 	#NSSTypeMask 				; so we can mask type as we only need n/s
.1b0a	d0 17		bne $1b23			bne 	_CLType
.1b0c	68		pla				pla 								; restore and compile save code
.1b0d	7a		ply				ply
.1b0e	fa		plx				plx
.1b0f	c0 c0		cpy #$c0			cpy 	#$C0 						; is it TI$ = "xxxxx"
.1b11	f0 05		beq $1b18			beq 	_CLTIString
.1b13	38		sec				sec
.1b14	20 03 1d	jsr $1d03			jsr		GetSetVariable
.1b17	60		rts				rts
.1b18					_CLTIString:
.1b18	a9 ca		lda #$ca			lda 	#(PCD_TIDOLLARCMD_WRITE) >> 8
.1b1a	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1b1d	a9 93		lda #$93			lda 	#(PCD_TIDOLLARCMD_WRITE) & $FF
.1b1f	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1b22	60		rts				rts
.1b23					_CLType:
.1b23	4c 3f 13	jmp $133f		jmp	ErrorV_type
.1b26					ReadNextLine:
.1b26	20 7d 16	jsr $167d			jsr 	INPUTGet 					; check offset is not zero.
.1b29	85 28		sta $28				sta 	zTemp0
.1b2b	20 7d 16	jsr $167d			jsr 	INPUTGet
.1b2e	05 28		ora $28				ora 	zTemp0
.1b30	d0 02		bne $1b34			bne 	_RNLBody
.1b32	18		clc				clc
.1b33	60		rts				rts						; end of file.
.1b34					_RNLBody:
.1b34	20 7d 16	jsr $167d			jsr 	INPUTGet 					; read and save line number
.1b37	8d 00 05	sta $0500			sta 	currentLineNumber
.1b3a	20 7d 16	jsr $167d			jsr 	INPUTGet
.1b3d	8d 01 05	sta $0501			sta 	currentLineNumber+1
.1b40	a2 00		ldx #$00			ldx 	#0 							; read line into buffer
.1b42					_RNLRead:
.1b42	20 7d 16	jsr $167d			jsr 	INPUTGet
.1b45	9d 00 04	sta $0400,x			sta 	sourceBuffer,x
.1b48	e8		inx				inx
.1b49	c9 00		cmp #$00			cmp 	#0
.1b4b	d0 f5		bne $1b42			bne 	_RNLRead
.1b4d	a9 00		lda #$00			lda 	#((sourceBuffer) & $FF)
.1b4f	85 2e		sta $2e				sta 	0+srcPtr
.1b51	a9 04		lda #$04			lda 	#((sourceBuffer) >> 8) & $FF
.1b53	85 2f		sta $2f				sta 	1+srcPtr
.1b55	38		sec				sec
.1b56	60		rts				rts
.1b57					GetLineNumber:
.1b57	ac 01 05	ldy $0501			ldy 	currentLineNumber+1
.1b5a	ad 00 05	lda $0500			lda 	currentLineNumber
.1b5d	60		rts				rts
.1b5e					STRMarkLine:
.1b5e	48		pha				pha
.1b5f	38		sec				sec 								; allocate 5 bytes (line #, page+address)
.1b60	ad 0a 06	lda $060a			lda 	lineNumberTable 			; and copy to zTemp0
.1b63	e9 05		sbc #$05			sbc 	#5
.1b65	8d 0a 06	sta $060a			sta 	lineNumberTable
.1b68	85 28		sta $28				sta 	zTemp0
.1b6a	ad 0b 06	lda $060b			lda 	lineNumberTable+1
.1b6d	e9 00		sbc #$00			sbc 	#0
.1b6f	8d 0b 06	sta $060b			sta 	lineNumberTable+1
.1b72	85 29		sta $29				sta 	zTemp0+1
.1b74	68		pla				pla
.1b75	92 28		sta ($28)			sta 	(zTemp0) 					; save it in +0,+1
.1b77	98		tya				tya
.1b78	a0 01		ldy #$01			ldy 	#1
.1b7a	91 28		sta ($28),y			sta 	(zTemp0),y
.1b7c	a5 27		lda $27				lda 	objPage 					; and page# in +2
.1b7e	c8		iny				iny
.1b7f	91 28		sta ($28),y			sta 	(zTemp0),y
.1b81	a5 25		lda $25				lda 	objPtr 						; save current address in +3,+4
.1b83	c8		iny				iny
.1b84	91 28		sta ($28),y			sta 	(zTemp0),y
.1b86	a5 26		lda $26				lda 	objPtr+1
.1b88	c8		iny				iny
.1b89	91 28		sta ($28),y			sta 	(zTemp0),y
.1b8b	60		rts				rts
.1b8c					STRFindLine:
.1b8c	85 28		sta $28				sta 	zTemp0 						; zTemp0 line number being searched
.1b8e	84 29		sty $29				sty 	zTemp0+1
.1b90	a9 00		lda #$00			lda 	#((WorkArea+WorkAreaSize) & $FF)
.1b92	85 2a		sta $2a				sta 	0+zTemp1
.1b94	a9 9f		lda #$9f			lda 	#((WorkArea+WorkAreaSize) >> 8) & $FF
.1b96	85 2b		sta $2b				sta 	1+zTemp1
.1b98					_STRSearch:
.1b98	20 d3 1b	jsr $1bd3			jsr 	_STRPrevLine 				; look at previous record.
.1b9b	a0 01		ldy #$01			ldy 	#1
.1b9d	b2 2a		lda ($2a)			lda 	(zTemp1) 					; check table line # >= target
.1b9f	c5 28		cmp $28				cmp 	zTemp0
.1ba1	b1 2a		lda ($2a),y			lda 	(zTemp1),y
.1ba3	e5 29		sbc $29				sbc 	zTemp0+1
.1ba5	b0 0b		bcs $1bb2			bcs 	_STRFound 					; >=
.1ba7					_STRNext:
.1ba7	a0 01		ldy #$01			ldy 	#1 							; should not be required !
.1ba9	b1 2a		lda ($2a),y			lda 	(zTemp1),y
.1bab	c9 ff		cmp #$ff			cmp 	#$FF
.1bad	d0 e9		bne $1b98			bne 	_STRSearch
.1baf	4c 89 13	jmp $1389		jmp	ErrorV_internal
.1bb2					_STRFound:
.1bb2	b2 2a		lda ($2a)			lda 	(zTemp1) 					; set A = 0 if the same, 0 if different.
.1bb4	45 28		eor $28				eor 	zTemp0
.1bb6	d0 06		bne $1bbe			bne 	_STRDifferent
.1bb8	b2 2a		lda ($2a)			lda 	(zTemp1)
.1bba	45 28		eor $28				eor 	zTemp0
.1bbc	f0 02		beq $1bc0			beq 	_STROut 					; if zero, exit with A = 0 and correct line.
.1bbe					_STRDifferent:
.1bbe	a9 ff		lda #$ff			lda 	#$FF
.1bc0					_STROut:
.1bc0	18		clc				clc  								; set carry if different, e.g. > rather than >=
.1bc1	69 ff		adc #$ff			adc 	#255
.1bc3	08		php				php
.1bc4	c8		iny				iny 								; page into X
.1bc5	b1 2a		lda ($2a),y			lda 	(zTemp1),y
.1bc7	aa		tax				tax
.1bc8	c8		iny				iny 								; address into YA
.1bc9	b1 2a		lda ($2a),y			lda 	(zTemp1),y
.1bcb	48		pha				pha
.1bcc	c8		iny				iny
.1bcd	b1 2a		lda ($2a),y			lda 	(zTemp1),y
.1bcf	a8		tay				tay
.1bd0	68		pla				pla
.1bd1	28		plp				plp
.1bd2	60		rts				rts
.1bd3					_STRPrevLine:
.1bd3	38		sec				sec 								; move backwards one entry.
.1bd4	a5 2a		lda $2a				lda 	zTemp1
.1bd6	e9 05		sbc #$05			sbc 	#5
.1bd8	85 2a		sta $2a				sta 	zTemp1
.1bda	a5 2b		lda $2b				lda 	zTemp1+1
.1bdc	e9 00		sbc #$00			sbc 	#0
.1bde	85 2b		sta $2b				sta 	zTemp1+1
.1be0	60		rts				rts
.1be1					STRMakeOffset:
.1be1	18		clc				clc 								; borrow 1
.1be2	e5 25		sbc $25				sbc 	objPtr
.1be4	48		pha				pha
.1be5	98		tya				tya
.1be6	e5 26		sbc $26				sbc 	objPtr+1
.1be8	a8		tay				tay
.1be9	68		pla				pla
.1bea	60		rts				rts
.1beb					CommandNEXT:
.1beb	20 93 19	jsr $1993			jsr 	LookNextNonSpace 			; first letter of index variable, should be.
.1bee	20 c2 19	jsr $19c2			jsr 	CharIsAlpha 				; if not alpha , error
.1bf1	90 0c		bcc $1bff			bcc 	_CNNoReferenceGiven
.1bf3	20 a1 19	jsr $19a1			jsr 	GetNext
.1bf6	20 51 1d	jsr $1d51			jsr 	GetReferenceTerm 			; figure out the reference.
.1bf9	8a		txa				txa 								; reference in YA
.1bfa	20 0e 11	jsr $110e			jsr 	PushIntegerYA 				; write it out.
.1bfd	80 06		bra $1c05			bra 	_CNParametersDone
.1bff					_CNNoReferenceGiven:
.1bff	a9 ff		lda #$ff			lda 	#255 						; write out -1 no
.1c01	a8		tay				tay
.1c02	20 0e 11	jsr $110e			jsr 	PushIntegerYA 				; write it out.
.1c05					_CNParametersDone:
.1c05	a9 a7		lda #$a7			lda 	#PCD_NEXT  					; compile FOR word.
.1c07	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1c0a	20 93 19	jsr $1993			jsr 	LookNextNonSpace 			; look for ,
.1c0d	c9 2c		cmp #$2c			cmp 	#","
.1c0f	d0 05		bne $1c16			bne 	_CNExit
.1c11	20 a1 19	jsr $19a1			jsr 	GetNext 					; consume ,
.1c14	80 d5		bra $1beb			bra 	CommandNEXT 				; and go round.
.1c16					_CNExit:
.1c16	60		rts				rts
.1c17					CommandON:
.1c17	20 ac 19	jsr $19ac			jsr 	GetNextNonSpace 			; GOTO / GOSUB must follow
.1c1a	48		pha				pha 								; save on stack
.1c1b	a2 d0		ldx #$d0			ldx 	#PCD_CMD_GOTO
.1c1d	c9 89		cmp #$89			cmp 	#C64_GOTO 					; must be GOTO/GOSUB
.1c1f	f0 09		beq $1c2a			beq 	_COCreateLoop
.1c21	a2 d1		ldx #$d1			ldx 	#PCD_CMD_GOSUB
.1c23	c9 8d		cmp #$8d			cmp 	#C64_GOSUB
.1c25	f0 03		beq $1c2a			beq 	_COCreateLoop
.1c27	4c 2f 13	jmp $132f		jmp	ErrorV_syntax
.1c2a					_COCreateLoop:
.1c2a	8a		txa				txa 								; compile a goto/gosub somewhere
.1c2b	da		phx				phx
.1c2c	20 7c 1a	jsr $1a7c			jsr 	CompileBranchCommand
.1c2f	fa		plx				plx
.1c30	20 93 19	jsr $1993			jsr 	LookNextNonSpace			; ',' follows
.1c33	c9 2c		cmp #$2c			cmp 	#","
.1c35	d0 0a		bne $1c41			bne 	_COComplete 				; if so, more line numbers
.1c37	a9 aa		lda #$aa			lda 	#PCD_MOREON 				; ON extends.
.1c39	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1c3c	20 a1 19	jsr $19a1			jsr 	GetNext
.1c3f	80 e9		bra $1c2a			bra 	_COCreateLoop
.1c41					_COComplete:
.1c41	68		pla				pla 								; throw GOTO/GOSUB
.1c42	60		rts				rts
.1c43					OUTPUTOpen:
.1c43					OUTPUTRewind:
.1c43	64 27		stz $27				stz 	objPage
.1c45	a9 00		lda #$00			lda 	#((PCodeStart) & $FF)
.1c47	85 25		sta $25				sta 	0+objPtr
.1c49	a9 40		lda #$40			lda 	#((PCodeStart) >> 8) & $FF
.1c4b	85 26		sta $26				sta 	1+objPtr
.1c4d	60		rts				rts
.1c4e					ParseConstant:
.1c4e	a2 00		ldx #$00			ldx 	#0
.1c50	20 cb 22	jsr $22cb			jsr 	FloatEncodeStart 			; send first
.1c53					_ParseLoop:
.1c53	20 90 19	jsr $1990			jsr 	LookNext 					; send subsequent
.1c56	20 ce 22	jsr $22ce			jsr 	FloatEncodeContinue
.1c59	90 05		bcc $1c60			bcc 	_ParseDone
.1c5b	20 a1 19	jsr $19a1			jsr 	GetNext 					; consume it
.1c5e	80 f3		bra $1c53			bra 	_ParseLoop
.1c60					_ParseDone:
.1c60	b5 32		lda $32,x			lda 	NSStatus,x 					; shouldn't be -ve ....
.1c62	29 80		and #$80			and 	#$80
.1c64	15 6e		ora $6e,x			ora 	NSExponent,x 				; 16 bit int check
.1c66	15 56		ora $56,x			ora 	NSMantissa2,x
.1c68	15 62		ora $62,x			ora 	NSMantissa3,x
.1c6a	18		clc				clc
.1c6b	d0 05		bne $1c72			bne 	_ParseExit 					; exit with CC if need float to compile
.1c6d	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; read into YA.
.1c6f	b4 4a		ldy $4a,x			ldy		NSMantissa1,x
.1c71	38		sec				sec
.1c72					_ParseExit:
.1c72	60		rts				rts
.1c73					MOFSizeTable:
>1c73	01					.byte	1         	; $ca .shift
>1c74	01					.byte	1         	; $cb .byte
>1c75	02					.byte	2         	; $cc .word
>1c76	05					.byte	5         	; $cd .float
>1c77	ff					.byte	255       	; $ce .string
>1c78	ff					.byte	255       	; $cf .data
>1c79	03					.byte	3         	; $d0 .goto
>1c7a	03					.byte	3         	; $d1 .gosub
>1c7b	03					.byte	3         	; $d2 .goto.z
>1c7c	03					.byte	3         	; $d3 .goto.nz
>1c7d	02					.byte	2         	; $d4 .varspace
.1c7e					CommandPRINT:
.1c7e	20 93 19	jsr $1993			jsr 	LookNextNonSpace			; what follows ?
.1c81	c9 3b		cmp #$3b			cmp 	#";" 						; semicolon, check end of command
.1c83	f0 1f		beq $1ca4			beq 	_CPCheckEnd
.1c85	c9 2c		cmp #$2c			cmp 	#"," 						; , TAB and check end of command
.1c87	f0 16		beq $1c9f			beq 	_CPTabCheckEnd
.1c89	20 bb 1c	jsr $1cbb			jsr 	_CPAtEnd 					; check for : and EOL
.1c8c	b0 22		bcs $1cb0			bcs 	_CPExitCR 					; exit with CR
.1c8e	20 44 14	jsr $1444			jsr 	CompileExpressionAt0 		; so it is something to print
.1c91	a2 b1		ldx #$b1			ldx 	#PCD_PRINTCMD_S
.1c93	29 40		and #$40			and 	#NSSString 					; if string
.1c95	d0 02		bne $1c99			bne 	_CPOut
.1c97	a2 b0		ldx #$b0			ldx 	#PCD_PRINTCMD_N
.1c99					_CPOut:
.1c99	8a		txa				txa 								; print that thing
.1c9a	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1c9d	80 df		bra $1c7e			bra 	CommandPRINT 				; and loop round/
.1c9f					_CPTabCheckEnd:
.1c9f	a9 b7		lda #$b7			lda 	#PCD_PRINTCMD_TAB 			; , next tab stop
.1ca1	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1ca4					_CPCheckEnd:
.1ca4	20 a1 19	jsr $19a1			jsr 	GetNext 					; consume it.
.1ca7	20 93 19	jsr $1993			jsr 	LookNextNonSpace 			; what follows ?
.1caa	20 bb 1c	jsr $1cbb			jsr 	_CPAtEnd 					; reached end
.1cad	90 cf		bcc $1c7e			bcc 	CommandPRINT 				; no, loop back
.1caf	60		rts				rts
.1cb0					_CPExitCR:
.1cb0	a9 0d		lda #$0d			lda 	#13 						; code to print CR
.1cb2	20 21 11	jsr $1121			jsr 	PushIntegerA
.1cb5	a9 92		lda #$92			lda 	#PCD_PRINTCMD_CHR
.1cb7	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1cba	60		rts				rts
.1cbb					_CPAtEnd:
.1cbb	c9 00		cmp #$00			cmp 	#0
.1cbd	f0 06		beq $1cc5			beq 	_CPIsEnd
.1cbf	c9 3a		cmp #$3a			cmp 	#":"
.1cc1	f0 02		beq $1cc5			beq 	_CPIsEnd
.1cc3	18		clc				clc
.1cc4	60		rts				rts
.1cc5					_CPIsEnd:
.1cc5	38		sec				sec
.1cc6	60		rts				rts
.1cc7					CommandREAD:
.1cc7	a2 b2		ldx #$b2			ldx 	#PCD_READ
.1cc9	a0 b3		ldy #$b3			ldy 	#PCD_READDOLLAR
.1ccb					CommandReadInputCommon:
.1ccb	8e 08 06	stx $0608			stx 	numberPCode
.1cce	8c 09 06	sty $0609			sty 	stringPCode
.1cd1					_CRLoop:
.1cd1	20 ac 19	jsr $19ac			jsr 	GetNextNonSpace 			; first char of identifier
.1cd4	20 c2 19	jsr $19c2			jsr 	CharIsAlpha 				; check A-Z
.1cd7	90 27		bcc $1d00			bcc 	_CRSyntax
.1cd9	20 51 1d	jsr $1d51			jsr 	GetReferenceTerm 			; get the variable.
.1cdc	48		pha				pha 								; save type.
.1cdd	29 40		and #$40			and 	#NSSTypeMask 				; is it a string ?
.1cdf	c9 40		cmp #$40			cmp 	#NSSString
.1ce1	f0 05		beq $1ce8			beq 	_CRString
.1ce3	ad 08 06	lda $0608			lda 	numberPCode 				; output read/input
.1ce6	80 03		bra $1ceb			bra 	_CRHaveType
.1ce8					_CRString:
.1ce8	ad 09 06	lda $0609			lda 	stringPCode					; output read$/input$
.1ceb					_CRHaveType:
.1ceb	20 7b 10	jsr $107b			jsr 	WriteCodeByte 				; so we have one typed data item.
.1cee	68		pla				pla 								; restore type
.1cef	38		sec				sec  								; write update code.
.1cf0	20 03 1d	jsr $1d03			jsr 	GetSetVariable
.1cf3	20 93 19	jsr $1993			jsr 	LookNextNonSpace 			; , follows ?
.1cf6	c9 2c		cmp #$2c			cmp 	#","
.1cf8	d0 05		bne $1cff			bne 	_CRExit 					; if not, end of READ.
.1cfa	20 a1 19	jsr $19a1			jsr 	GetNext 					; consume comma
.1cfd	80 d2		bra $1cd1			bra 	_CRLoop 					; keep going
.1cff					_CRExit:
.1cff	60		rts				rts
.1d00					_CRSyntax:
.1d00	4c 2f 13	jmp $132f		jmp	ErrorV_syntax
.0608					numberPCode:
>0608							.fill 	1
.0609					stringPCode:
>0609							.fill 	1
.1d03					GetSetVariable:
.1d03	08		php				php 								; save direction on stack
.1d04	c0 00		cpy #$00			cpy 	#$00
.1d06	30 21		bmi $1d29			bmi 	_GSVReadWriteSpecial
.1d08	c9 00		cmp #$00			cmp 	#$00
.1d0a	30 33		bmi $1d3f			bmi 	_GSVArray
.1d0c	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16 		; get type bits
.1d0e	4a		lsr a				lsr 	a 							; divide by 2
.1d0f	09 40		ora #$40			ora 	#64 						; and set bit 6.
.1d11	28		plp				plp
.1d12	90 02		bcc $1d16			bcc 	_GSVNotWrite
.1d14	09 08		ora #$08			ora 	#8  						; set bit 3 if it is write.
.1d16					_GSVNotWrite:
.1d16	85 28		sta $28				sta 	zTemp0
.1d18	98		tya				tya 	 							; shift X/Y right as the address stored is halved
.1d19	4a		lsr a				lsr 	a
.1d1a	a8		tay				tay
.1d1b	8a		txa				txa
.1d1c	6a		ror a				ror 	a
.1d1d	aa		tax				tax
.1d1e	98		tya				tya 								; lower 3 bits of YX are ORed into the opcode
.1d1f	05 28		ora $28				ora 	zTemp0 						; which is the first byte of the opcode
.1d21	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1d24	8a		txa				txa 								; and the lower 8 bits of YX are the second byte
.1d25	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1d28	60		rts				rts
.1d29					_GSVReadWriteSpecial:
.1d29	28		plp				plp
.1d2a	b0 10		bcs $1d3c			bcs 	_GSVSyntax
.1d2c	c0 c0		cpy #$c0			cpy 	#$C0 						; TI$ ?
.1d2e	f0 06		beq $1d36			beq 	_GSVRWString
.1d30	a9 bf		lda #$bf			lda 	#(PCD_TI) & $FF
.1d32	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1d35	60		rts				rts
.1d36					_GSVRWString:
.1d36	a9 c0		lda #$c0			lda 	#(PCD_TIDOLLAR) & $FF
.1d38	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1d3b	60		rts				rts
.1d3c					_GSVSyntax:
.1d3c	4c 2f 13	jmp $132f		jmp	ErrorV_syntax
.1d3f					_GSVArray:
.1d3f	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16 		; mask out 2 bits of type data
.1d41	4a		lsr a				lsr 	a		 					; shift from 5,6 to 0,1
.1d42	4a		lsr a				lsr 	a
.1d43	4a		lsr a				lsr 	a
.1d44	4a		lsr a				lsr 	a
.1d45	4a		lsr a				lsr 	a
.1d46	28		plp				plp 								; if writing array then set bit 2.
.1d47	90 02		bcc $1d4b			bcc 	_GSVANotWrite
.1d49	09 04		ora #$04			ora 	#4
.1d4b					_GSVANotWrite:
.1d4b	09 78		ora #$78			ora 	#$78 						; make a valid opcode.
.1d4d	20 7b 10	jsr $107b			jsr 	WriteCodeByte 				; and write it out
.1d50	60		rts				rts
.1d51					GetReferenceTerm:
.1d51	20 11 1a	jsr $1a11			jsr 	ExtractVariableName 		; get name & type info
.1d54	e0 00		cpx #$00			cpx 	#0 							; check for array handler
.1d56	30 10		bmi $1d68			bmi 	_GRTArray
.1d58	da		phx				phx 								; save type on stack
.1d59	20 fe 14	jsr $14fe			jsr 	FindVariable 				; find it
.1d5c	b0 06		bcs $1d64			bcs 	_GRTNoCreate 				; create if required.
.1d5e	20 53 11	jsr $1153			jsr 	CreateVariableRecord 		; create a variable.
.1d61	20 ad 11	jsr $11ad			jsr 	AllocateBytesForType 		; allocate memory for it
.1d64					_GRTNoCreate:
.1d64	68		pla				pla 								; get type back, strip out type information.
.1d65	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16
.1d67	60		rts				rts
.1d68					_GRTArray:
.1d68	da		phx				phx 								; save type information
.1d69	20 fe 14	jsr $14fe			jsr 	FindVariable 				; read its data, the base address in YX
.1d6c	90 18		bcc $1d86			bcc 	_GRTUndeclared 				; undeclared array.
.1d6e	da		phx				phx 								; save base address
.1d6f	5a		phy				phy
.1d70	20 a4 12	jsr $12a4			jsr 	OutputIndexGroup 			; create an index group and generate them
.1d73	7a		ply				ply 								; get the array base address into YX
.1d74	fa		plx				plx
.1d75	a9 20		lda #$20			lda 	#NSSIFloat+NSSIInt16 		; pretend it is an int16 reference.
.1d77	18		clc				clc
.1d78	20 03 1d	jsr $1d03			jsr 	GetSetVariable 				; load the address of the array structure.
.1d7b	a9 8e		lda #$8e			lda 	#(PCD_ARRAY) & $FF
.1d7d	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1d80	68		pla				pla 								; and the type data into A
.1d81	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16
.1d83	09 80		ora #$80			ora 	#$80 						; with the array flag set.
.1d85	60		rts				rts
.1d86					_GRTUndeclared:
.1d86	4c e6 13	jmp $13e6		jmp	ErrorV_undeclared
.1d89					CommandREM:
.1d89	20 90 19	jsr $1990			jsr 	LookNext
.1d8c	f0 05		beq $1d93			beq 	_CRExit
.1d8e	20 a1 19	jsr $19a1			jsr 	GetNext
.1d91	80 f6		bra $1d89			bra 	CommandREM
.1d93					_CRExit:
.1d93	60		rts				rts
.1d94					STRReset:
.1d94	a9 00		lda #$00			lda 	#((WorkArea) & $FF)
.1d96	8d 0c 06	sta $060c			sta 	0+variableListEnd
.1d99	a9 80		lda #$80			lda 	#((WorkArea) >> 8) & $FF
.1d9b	8d 0d 06	sta $060d			sta 	1+variableListEnd
.1d9e	a9 00		lda #$00			lda 	#((WorkArea+WorkAreaSize) & $FF)
.1da0	8d 0a 06	sta $060a			sta 	0+lineNumberTable
.1da3	a9 9f		lda #$9f			lda 	#((WorkArea+WorkAreaSize) >> 8) & $FF
.1da5	8d 0b 06	sta $060b			sta 	1+lineNumberTable
.1da8	9c 00 80	stz $8000			stz 	WorkArea
.1dab	a9 00		lda #$00			lda 	#((0) & $FF)
.1dad	8d 0e 06	sta $060e			sta 	0+freeVariableMemory
.1db0	a9 00		lda #$00			lda 	#((0) >> 8) & $FF
.1db2	8d 0f 06	sta $060f			sta 	1+freeVariableMemory
.1db5	60		rts				rts
.060a					lineNumberTable:
>060a							.fill 	2
.060c					variableListEnd:
>060c							.fill 	2
.060e					freeVariableMemory:
>060e							.fill 	2
.1db6					CompileTerm:
.1db6	20 ac 19	jsr $19ac			jsr 	GetNextNonSpace 			; get first non space character.
.1db9	30 72		bmi $1e2d			bmi 	_CTUnaryFunctions
.1dbb	20 b6 19	jsr $19b6			jsr 	CharIsDigit 				; found a number
.1dbe	b0 3a		bcs $1dfa			bcs 	_CTDigit
.1dc0	c9 2e		cmp #$2e			cmp 	#"."
.1dc2	f0 36		beq $1dfa			beq 	_CTDigit
.1dc4	c9 22		cmp #$22			cmp 	#'"' 						; found a string ?
.1dc6	f0 43		beq $1e0b			beq 	_CTString
.1dc8	c9 25		cmp #$25			cmp 	#"%"						; binary or hexadecimal ?
.1dca	f0 28		beq $1df4			beq 	_CTOtherBase
.1dcc	c9 24		cmp #$24			cmp 	#"$"
.1dce	f0 24		beq $1df4			beq 	_CTOtherBase
.1dd0	c9 28		cmp #$28			cmp 	#"(" 						; check parenthesis
.1dd2	f0 17		beq $1deb			beq 	_CTBrackets
.1dd4	c9 41		cmp #$41			cmp 	#"A" 						; check variable/array ?
.1dd6	90 10		bcc $1de8			bcc 	_CTSyntax
.1dd8	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1dda	b0 0c		bcs $1de8			bcs 	_CTSyntax
.1ddc	20 51 1d	jsr $1d51			jsr 	GetReferenceTerm 			; figure out what it is.
.1ddf	48		pha				pha 								; save type on stack
.1de0	18		clc				clc 								; read it
.1de1	20 03 1d	jsr $1d03			jsr 	GetSetVariable
.1de4	68		pla				pla
.1de5	29 40		and #$40			and 	#NSSTypeMask 				; reduce to basic type
.1de7	60		rts				rts
.1de8					_CTSyntax:
.1de8	4c 2f 13	jmp $132f		jmp	ErrorV_syntax
.1deb					_CTBrackets:
.1deb	20 44 14	jsr $1444			jsr 	CompileExpressionAt0
.1dee	48		pha				pha
.1def	20 89 10	jsr $1089			jsr 	CheckNextRParen
.1df2	68		pla				pla
.1df3	60		rts				rts
.1df4					_CTOtherBase:
.1df4	20 09 10	jsr $1009			jsr 	InlineNonDecimal 			; non decimal constant handler
.1df7	a9 00		lda #$00			lda 	#NSSIFloat					; return a iFloat32 integer
.1df9	60		rts				rts
.1dfa					_CTDigit:
.1dfa	20 4e 1c	jsr $1c4e			jsr 	ParseConstant 				; parse out an number, first is in A already.
.1dfd	90 06		bcc $1e05			bcc	 	_CTFloat 					; have a float or long int.
.1dff	20 0e 11	jsr $110e			jsr 	PushIntegerYA 				; code to push on stack
.1e02	a9 00		lda #$00			lda 	#NSSIFloat					; return a iFloat32 integer
.1e04	60		rts				rts
.1e05					_CTFloat:
.1e05	20 30 11	jsr $1130			jsr 	PushFloat  					; code to push float
.1e08	a9 00		lda #$00			lda 	#NSSIFloat 					; return a iFloat32
.1e0a	60		rts				rts
.1e0b					_CTString:
.1e0b	20 54 10	jsr $1054			jsr 	BufferClear 				; copy it to the buffer
.1e0e					_CTStringLoop:
.1e0e	20 90 19	jsr $1990			jsr 	LookNext 					; reached EOL/EOS
.1e11	f0 d5		beq $1de8			beq 	_CTSyntax
.1e13	c9 22		cmp #$22			cmp 	#'"'
.1e15	f0 08		beq $1e1f			beq 	_CTStringDone
.1e17	20 58 10	jsr $1058			jsr 	BufferWrite 				; write and consume
.1e1a	20 a1 19	jsr $19a1			jsr 	GetNext
.1e1d	80 ef		bra $1e0e			bra 	_CTStringLoop
.1e1f					_CTStringDone:
.1e1f	20 a1 19	jsr $19a1			jsr 	GetNext 					; consume closing quote.
.1e22	a9 ce		lda #$ce			lda 	#PCD_CMD_STRING 			; output command and buffer
.1e24	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1e27	20 64 10	jsr $1064			jsr 	BufferOutput
.1e2a	a9 40		lda #$40			lda 	#NSSString 					; string type
.1e2c	60		rts				rts
.1e2d					_CTUnaryFunctions:
.1e2d	c9 ab		cmp #$ab			cmp 	#C64_MINUS 					; negation of term.
.1e2f	f0 0a		beq $1e3b			beq 	_CTNegation
.1e31	a2 77		ldx #$77			ldx 	#UnaryTables & $FF 			; check vs unary tables.
.1e33	a0 17		ldy #$17			ldy 	#UnaryTables >> 8
.1e35	20 35 18	jsr $1835			jsr 	GeneratorProcess
.1e38	90 ae		bcc $1de8			bcc		_CTSyntax
.1e3a	60		rts				rts
.1e3b					_CTNegation:
.1e3b	20 b6 1d	jsr $1db6			jsr 	CompileTerm 				; compile a term.
.1e3e	48		pha				pha
.1e3f	29 40		and #$40			and 	#NSSTypeMask 				; if not an ifloat32 of some sort.
.1e41	c9 00		cmp #$00			cmp 	#NSSIFloat
.1e43	d0 07		bne $1e4c			bne 	_CTType 					; error
.1e45	a9 a5		lda #$a5			lda 	#PCD_NEGATE 				; compile negate
.1e47	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1e4a	68		pla				pla 								; return original type.
.1e4b	60		rts				rts
.1e4c					_CTType:
.1e4c	4c 3f 13	jmp $133f		jmp	ErrorV_type
.1e4f					CommandWAIT:
.1e4f	20 93 19	jsr $1993			jsr 	LookNextNonSpace
.1e52	c9 2c		cmp #$2c			cmp 	#","
.1e54	f0 10		beq $1e66			beq 	_CWThirdParameter
.1e56	a9 00		lda #$00			lda 	#0
.1e58	20 21 11	jsr $1121			jsr 	PushIntegerA
.1e5b					_CWExit:
.1e5b	a9 ca		lda #$ca			lda 	#(PCD_WAIT) >> 8
.1e5d	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1e60	a9 94		lda #$94			lda 	#(PCD_WAIT) & $FF
.1e62	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1e65	60		rts				rts
.1e66					_CWThirdParameter:
.1e66	20 a1 19	jsr $19a1			jsr 	GetNext
.1e69	20 46 14	jsr $1446			jsr 	CompileExpressionAtA
.1e6c	29 40		and #$40			and 	#NSSTypeMask
.1e6e	c9 00		cmp #$00			cmp 	#NSSIFloat
.1e70	f0 e9		beq $1e5b			beq 	_CWExit
.1e72	4c 3f 13	jmp $133f		jmp	ErrorV_type
.1e75					OUTPUTWriteByte:
.1e75	92 25		sta ($25)			sta 	(objPtr)
.1e77	e6 25		inc $25				inc 	objPtr
.1e79	d0 02		bne $1e7d			bne 	_HWOWBNoCarry
.1e7b	e6 26		inc $26				inc 	objPtr+1
.1e7d					_HWOWBNoCarry:
.1e7d	60		rts				rts
.1e7e					CommandCMD:
.1e7e	a9 af		lda #$af			lda 	#PCD_SETCHANNEL 			; set the channel to this now forever.
.1e80	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1e83	20 93 19	jsr $1993			jsr 	LookNextNonSpace 			; followed by a , ?
.1e86	c9 2c		cmp #$2c			cmp 	#","
.1e88	d0 06		bne $1e90			bne 	_CCMDExit
.1e8a	20 a1 19	jsr $19a1			jsr 	GetNext 					; consume comma.
.1e8d	20 7e 1c	jsr $1c7e			jsr 	CommandPRINT 				; do the print code
.1e90					_CCMDExit:
.1e90	60		rts				rts
.1e91					CommandOPEN:
.1e91	20 93 19	jsr $1993			jsr 	LookNextNonSpace 			; followed by a , ?
.1e94	c9 2c		cmp #$2c			cmp 	#","
.1e96	d0 15		bne $1ead			bne 	_COTwoDefaults
.1e98	20 a1 19	jsr $19a1			jsr 	GetNext 					; consume comma
.1e9b	20 44 14	jsr $1444			jsr 	CompileExpressionAt0 		; what follows could be text or number.
.1e9e	29 40		and #$40			and 	#NSSString 					; if a number want a string to follow
.1ea0	f0 1e		beq $1ec0			beq 	_COThreeIntegers
.1ea2	a9 00		lda #$00			lda 	#0		 					; so we have n,n,$,0 so swap !
.1ea4	20 21 11	jsr $1121			jsr 	PushIntegerA
.1ea7	a9 be		lda #$be			lda 	#(PCD_SWAP) & $FF
.1ea9	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1eac	60		rts				rts
.1ead					_COTwoDefaults:
.1ead	a9 00		lda #$00			lda 	#0
.1eaf	20 21 11	jsr $1121			jsr 	PushIntegerA
.1eb2					_COCompileNullString:
.1eb2	a9 ce		lda #$ce			lda 	#(PCD_CMD_STRING) & $FF
.1eb4	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1eb7	a9 00		lda #$00			lda 	#0
.1eb9	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1ebc	20 7b 10	jsr $107b			jsr 	WriteCodeByte
.1ebf	60		rts				rts
.1ec0					_COThreeIntegers:
.1ec0	20 93 19	jsr $1993			jsr 	LookNextNonSpace 			; is there a ,
.1ec3	c9 2c		cmp #$2c			cmp 	#","
.1ec5	d0 eb		bne $1eb2			bne 	_COCompileNullString 		; if not it is n,n,n so default filename.
.1ec7	20 a1 19	jsr $19a1			jsr 	GetNext
.1eca	20 44 14	jsr $1444			jsr 	CompileExpressionAt0 		; should be a filename
.1ecd	29 40		and #$40			and 	#NSSString
.1ecf	f0 01		beq $1ed2			beq 	_COType
.1ed1	60		rts				rts
.1ed2					_COType:
.1ed2	4c 3f 13	jmp $133f		jmp	ErrorV_type
.1ed5					XPrintCharacter
.1ed5	48		pha				pha
.1ed6	da		phx				phx
.1ed7	5a		phy				phy
.1ed8	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1edb	7a		ply				ply
.1edc	fa		plx				plx
.1edd	68		pla				pla
.1ede	60		rts				rts
.1edf					XSaveMemory:
.1edf	da		phx				phx
.1ee0	5a		phy				phy
.1ee1	48		pha				pha
.1ee2	a9 00		lda #$00			lda 	#0 							; set LFS
.1ee4	a2 08		ldx #$08			ldx 	#8
.1ee6	a0 00		ldy #$00			ldy 	#0
.1ee8	20 ba ff	jsr $ffba			jsr 	$FFBA
.1eeb	a9 08		lda #$08			lda 	#8 							; set file name
.1eed	a2 01		ldx #$01			ldx 	#SaveName & $FF
.1eef	a0 1f		ldy #$1f			ldy 	#SaveName >> 8
.1ef1	20 bd ff	jsr $ffbd			jsr 	$FFBD
.1ef4	68		pla				pla 								; set up the start address.
.1ef5	85 29		sta $29				sta 	zTemp0+1
.1ef7	64 28		stz $28				stz 	zTemp0
.1ef9	a9 28		lda #$28			lda 	#zTemp0 					; from index.
.1efb	7a		ply				ply 								; end in YX
.1efc	fa		plx				plx
.1efd	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; write out.
.1f00	60		rts				rts
.1f01					SaveName:
>1f01	43 4f 44 45 2e 42 49 4e				.text 	"CODE.BIN"

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library

=12					MathStackSize = 12
=$40					NSSString = $40 							; string vs typemask
=$00					NSSIFloat = $00 							; ifloat vs typemask
=$20					NSSIInt16 = $20								; when set, a reference is a 16 bit reference (e.g. a%)
=$40					NSSTypeMask = $40
=$80					NSSArray = $80  							; array (in variable code)
.0032					NSStatus:
>0032							.fill 	MathStackSize
.003e					NSMantissa0:
>003e							.fill 	MathStackSize 				; (this is my integer mantissa system)
.004a					NSMantissa1:
>004a							.fill 	MathStackSize
.0056					NSMantissa2:
>0056							.fill 	MathStackSize
.0062					NSMantissa3:
>0062							.fill 	MathStackSize
.006e					NSExponent:
>006e							.fill 	MathStackSize
.0610					numberBuffer:
>0610							.fill 	34
.1f09					FloatSubtract:
.1f09	b5 32		lda $32,x			lda 	NSStatus,x 					; negate top of stack
.1f0b	49 80		eor #$80			eor 	#$80
.1f0d	95 32		sta $32,x			sta 	NSStatus,x					; and fall through.
.1f0f					FloatAdd:
.1f0f	ca		dex				dex
.1f10	b5 6e		lda $6e,x			lda 	NSExponent,x 				; can use optimised.
.1f12	15 6f		ora $6f,x			ora 	NSExponent+1,x
.1f14	15 62		ora $62,x			ora 	NSMantissa3,x
.1f16	15 63		ora $63,x			ora 	NSMantissa3+1,x
.1f18	d0 04		bne $1f1e			bne 	_FAUseFloat
.1f1a	20 ab 22	jsr $22ab			jsr 	FloatInt32Add 				; use the int32 one.
.1f1d	60		rts				rts
.1f1e					_FAUseFloat:
.1f1e	20 40 22	jsr $2240			jsr 	FloatNormalise 				; normalise S[X]
.1f21	f0 51		beq $1f74			beq 	_FAReturn1
.1f23	e8		inx				inx 								; normalise S[X+1]
.1f24	20 40 22	jsr $2240			jsr 	FloatNormalise
.1f27	ca		dex				dex
.1f28	c9 00		cmp #$00			cmp 	#0
.1f2a	f0 60		beq $1f8c			beq 	_FAExit 					; if so, just return A
.1f2c	b5 6e		lda $6e,x			lda 	NSExponent,x 				; are the exponents the same ?
.1f2e	d5 6f		cmp $6f,x			cmp 	NSExponent+1,x
.1f30	f0 18		beq $1f4a			beq 	_FAExponentsEqual
.1f32	b5 6e		lda $6e,x			lda 	NSExponent,x 				; work out the larger exponent
.1f34	a8		tay				tay
.1f35	38		sec				sec 								; do a signed comparison of the exponents.
.1f36	f5 6f		sbc $6f,x			sbc 	NSExponent+1,x
.1f38	50 02		bvc $1f3c			bvc 	_FANoSignedChange
.1f3a	49 80		eor #$80			eor 	#$80
.1f3c					_FANoSignedChange:
.1f3c	29 80		and #$80			and 	#$80
.1f3e	10 02		bpl $1f42			bpl 	_FAHaveMax
.1f40	b4 6f		ldy $6f,x			ldy 	NSExponent+1,x
.1f42					_FAHaveMax:
.1f42	20 8d 1f	jsr $1f8d			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.1f45	e8		inx				inx
.1f46	20 8d 1f	jsr $1f8d			jsr 	_FAShiftToExponent
.1f49	ca		dex				dex
.1f4a					_FAExponentsEqual:
.1f4a	b5 32		lda $32,x			lda 	NSStatus,x 					; are the signs the same
.1f4c	55 33		eor $33,x			eor 	NSStatus+1,x
.1f4e	30 0e		bmi $1f5e			bmi 	_FADifferentSigns
.1f50	20 77 22	jsr $2277			jsr 	FloatAddTopTwoStack 		; do the add of the mantissae
.1f53	b5 62		lda $62,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.1f55	10 35		bpl $1f8c			bpl 	_FAExit 					; if no, we are done.
.1f57	20 04 25	jsr $2504			jsr 	FloatShiftRight 				; shift A right, renormalising it.
.1f5a	f6 6e		inc $6e,x			inc 	NSExponent,x 				; bump the exponent and exit
.1f5c	80 2e		bra $1f8c			bra 	_FAExit
.1f5e					_FADifferentSigns:
.1f5e	20 91 22	jsr $2291			jsr 	FloatSubTopTwoStack 		; subtract mantissa B from A
.1f61	b5 62		lda $62,x			lda 	NSMantissa3,x 				; is the result negative ?
.1f63	10 06		bpl $1f6b			bpl 	_FACheckZero 				; if no, check for -0
.1f65	20 ad 24	jsr $24ad			jsr 	FloatNegate 					; netate result
.1f68	20 b4 24	jsr $24b4			jsr 	FloatNegateMantissa 			; negate (2'c) the mantissa
.1f6b					_FACheckZero:
.1f6b	20 0d 25	jsr $250d			jsr 	FloatIsZero	 				; check for -0
.1f6e	d0 1c		bne $1f8c			bne 	_FAExit
.1f70	74 32		stz $32,x			stz 	NSStatus,x
.1f72	80 18		bra $1f8c			bra 	_FAExit
.1f74					_FAReturn1:
.1f74	b5 3f		lda $3f,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.1f76	95 3e		sta $3e,x			sta 	NSMantissa0,x
.1f78	b5 4b		lda $4b,x			lda 	NSMantissa1+1,x
.1f7a	95 4a		sta $4a,x			sta 	NSMantissa1,x
.1f7c	b5 57		lda $57,x			lda 	NSMantissa2+1,x
.1f7e	95 56		sta $56,x			sta 	NSMantissa2,x
.1f80	b5 63		lda $63,x			lda 	NSMantissa3+1,x
.1f82	95 62		sta $62,x			sta 	NSMantissa3,x
.1f84	b5 6f		lda $6f,x			lda 	NSExponent+1,x
.1f86	95 6e		sta $6e,x			sta 	NSExponent,x
.1f88	b5 33		lda $33,x			lda 	NSStatus+1,x
.1f8a	95 32		sta $32,x			sta 	NSStatus,x
.1f8c					_FAExit:
.1f8c	60		rts				rts
.1f8d					_FAShiftToExponent:
.1f8d					_FAShiftToExponent2:
.1f8d	98		tya				tya 								; compare Y to exponent
.1f8e	d5 6e		cmp $6e,x			cmp 	NSExponent,x 				; reached the exponent required ?
.1f90	f0 07		beq $1f99			beq 	_FASEExit 					; exit if so.
.1f92	20 04 25	jsr $2504			jsr 	FloatShiftRight	 			; shift the mantissa right
.1f95	f6 6e		inc $6e,x			inc 	NSExponent,x 				; increment exponent
.1f97	80 f4		bra $1f8d			bra 	_FAShiftToExponent2
.1f99					_FASEExit:
.1f99	60		rts				rts
.1f9a					CompareEqual:
.1f9a	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.1f9c	d0 09		bne $1fa7			bne 	ReturnFalse
.1f9e					ReturnTrue:
.1f9e	a9 01		lda #$01			lda 	#1
.1fa0	95 3e		sta $3e,x			sta 	NSMantissa0,x
.1fa2	a9 80		lda #$80			lda 	#$80
.1fa4	95 32		sta $32,x			sta 	NSStatus,x
.1fa6	60		rts				rts
.1fa7					ReturnFalse:
.1fa7	74 3e		stz $3e,x			stz 	NSMantissa0,x
.1fa9	60		rts				rts
.1faa					CompareNotEqual:
.1faa	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.1fac	d0 f0		bne $1f9e			bne 	ReturnTrue
.1fae	80 f7		bra $1fa7			bra 	ReturnFalse
.1fb0					CompareLess:
.1fb0	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.1fb2	c9 ff		cmp #$ff			cmp 	#$FF
.1fb4	f0 e8		beq $1f9e			beq 	ReturnTrue
.1fb6	80 ef		bra $1fa7			bra 	ReturnFalse
.1fb8					CompareGreater:
.1fb8	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.1fba	c9 01		cmp #$01			cmp 	#$01
.1fbc	f0 e0		beq $1f9e			beq 	ReturnTrue
.1fbe	80 e7		bra $1fa7			bra 	ReturnFalse
.1fc0					CompareLessEqual:
.1fc0	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.1fc2	c9 01		cmp #$01			cmp 	#$01
.1fc4	d0 d8		bne $1f9e			bne 	ReturnTrue
.1fc6	80 df		bra $1fa7			bra 	ReturnFalse
.1fc8					CompareGreaterEqual:
.1fc8	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.1fca	c9 ff		cmp #$ff			cmp 	#$FF
.1fcc	d0 d0		bne $1f9e			bne 	ReturnTrue
.1fce	80 d7		bra $1fa7			bra 	ReturnFalse
.1fd0					FloatCompare:
.1fd0	b5 6e		lda $6e,x			lda 	NSExponent,x 				; float comparison.
.1fd2	15 6d		ora $6d,x			ora 	NSExponent-1,x 				; integer if both integer.
.1fd4	48		pha				pha
.1fd5	20 09 1f	jsr $1f09			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.1fd8	68		pla				pla
.1fd9	d0 0c		bne $1fe7			bne 	_FCCompareFloat
.1fdb	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.1fdd	15 4a		ora $4a,x			ora 	NSMantissa1,x
.1fdf	15 56		ora $56,x			ora 	NSMantissa2,x
.1fe1	15 62		ora $62,x			ora 	NSMantissa3,x
.1fe3	f0 14		beq $1ff9			beq 	_FCExit 					; if zero, return zero
.1fe5	80 0a		bra $1ff1			bra 	_FCSign
.1fe7					_FCCompareFloat:
.1fe7	b5 4a		lda $4a,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.1fe9	29 f0		and #$f0			and 	#$F0
.1feb	15 56		ora $56,x			ora 	NSMantissa2,x
.1fed	15 62		ora $62,x			ora 	NSMantissa3,x
.1fef	f0 08		beq $1ff9			beq 	_FCExit 					; zero, so approximately identical
.1ff1					_FCSign:
.1ff1	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.1ff3	34 32		bit $32,x			bit 	NSStatus,x
.1ff5	10 02		bpl $1ff9			bpl 	_FCExit
.1ff7					_FCNegative:
.1ff7	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.1ff9					_FCExit:
.1ff9	20 ed 24	jsr $24ed			jsr 	FloatSetByte 				; set the result 255,0,1
.1ffc	60		rts				rts
.1ffd					FloatScalarTable:
>1ffd	66 66 66 66				.dword $66666666 ; 0.1
>2001	de					.byte $de
>2002	1f 85 eb 51				.dword $51eb851f ; 0.01
>2006	db					.byte $db
>2007	4c 37 89 41				.dword $4189374c ; 0.001
>200b	d8					.byte $d8
>200c	ac 8b db 68				.dword $68db8bac ; 0.0001
>2010	d4					.byte $d4
>2011	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>2015	d1					.byte $d1
>2016	83 de 1b 43				.dword $431bde83 ; 1e-06
>201a	ce					.byte $ce
>201b	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>201f	ca					.byte $ca
>2020	89 3b e6 55				.dword $55e63b89 ; 1e-08
>2024	c7					.byte $c7
>2025	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>2029	c4					.byte $c4
>202a	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>202e	c0					.byte $c0
>202f	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>2033	bd					.byte $bd
.2034					FloatDivide:
.2034	48		pha				pha
.2035	20 40 22	jsr $2240			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.2038	ca		dex				dex
.2039	c9 00		cmp #$00			cmp 	#0
.203b	f0 1e		beq $205b			beq 	_FDZero
.203d	20 40 22	jsr $2240			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.2040	f0 16		beq $2058			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.2042	20 a3 20	jsr $20a3			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.2045	20 70 20	jsr $2070			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.2048	20 40 22	jsr $2240			jsr		FloatNormalise 				; renormalise
.204b	20 36 22	jsr $2236			jsr 	FloatCalculateSign 			; calculate result sign
.204e	b5 6e		lda $6e,x			lda 	NSExponent,x 				; calculate exponent
.2050	38		sec				sec
.2051	f5 6f		sbc $6f,x			sbc 	NSExponent+1,x
.2053	38		sec				sec
.2054	e9 1e		sbc #$1e			sbc 	#30
.2056	95 6e		sta $6e,x			sta 	NSExponent,x
.2058					_FDExit:
.2058	68		pla				pla
.2059	18		clc				clc
.205a	60		rts				rts
.205b					_FDZero:
.205b	68		pla				pla
.205c	38		sec				sec
.205d	60		rts				rts
.205e					DivideInt32:
.205e	20 26 21	jsr $2126			jsr 	FloatIntegerPart 			; make both integers
.2061	ca		dex				dex
.2062	20 26 21	jsr $2126			jsr 	FloatIntegerPart
.2065	20 81 20	jsr $2081			jsr 	Int32Divide 				; divide
.2068	20 70 20	jsr $2070			jsr 	NSMCopyPlusTwoToZero 		; copy result
.206b	20 36 22	jsr $2236			jsr 	FloatCalculateSign 			; calculate result sign
.206e	18		clc				clc
.206f	60		rts				rts
.2070					NSMCopyPlusTwoToZero:
.2070	b5 40		lda $40,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.2072	95 3e		sta $3e,x			sta 	NSMantissa0,x
.2074	b5 4c		lda $4c,x			lda 	NSMantissa1+2,x
.2076	95 4a		sta $4a,x			sta 	NSMantissa1,x
.2078	b5 58		lda $58,x			lda 	NSMantissa2+2,x
.207a	95 56		sta $56,x			sta 	NSMantissa2,x
.207c	b5 64		lda $64,x			lda 	NSMantissa3+2,x
.207e	95 62		sta $62,x			sta 	NSMantissa3,x
.2080	60		rts				rts
.2081					Int32Divide:
.2081	48		pha				pha 								; save AXY
.2082	5a		phy				phy
.2083	20 ce 24	jsr $24ce			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.2086	20 e7 24	jsr $24e7			jsr 	FloatSetZeroMantissaOnly 	; set S[X] to zero
.2089	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.208b					_I32DivideLoop:
.208b	e8		inx				inx
.208c	e8		inx				inx
.208d	20 fa 24	jsr $24fa			jsr 	FloatShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.2090	ca		dex				dex
.2091	ca		dex				dex
.2092	20 fb 24	jsr $24fb			jsr 	FloatRotateLeft
.2095	20 c1 20	jsr $20c1			jsr 	FloatDivideCheck 			; check if subtract possible
.2098	90 02		bcc $209c			bcc 	_I32DivideNoCarryIn
.209a	f6 40		inc $40,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.209c					_I32DivideNoCarryIn:
.209c	88		dey				dey 								; loop round till division completed.
.209d	d0 ec		bne $208b			bne 	_I32DivideLoop
.209f	7a		ply				ply 								; restore AXY and exit
.20a0	68		pla				pla
.20a1	18		clc				clc
.20a2	60		rts				rts
.20a3					Int32ShiftDivide:
.20a3	48		pha				pha 								; save AY
.20a4	5a		phy				phy
.20a5	e8		inx				inx 								; clear S[X+2]
.20a6	e8		inx				inx
.20a7	20 eb 24	jsr $24eb			jsr 	FloatSetZero
.20aa	ca		dex				dex
.20ab	ca		dex				dex
.20ac	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.20ae					_I32SDLoop:
.20ae	20 c1 20	jsr $20c1			jsr 	FloatDivideCheck 			; check if subtract possible
.20b1	e8		inx				inx
.20b2	e8		inx				inx
.20b3	20 fb 24	jsr $24fb			jsr 	FloatRotateLeft				; shift 64 bit FPA left, rotating carry in
.20b6	ca		dex				dex
.20b7	ca		dex				dex
.20b8	20 fb 24	jsr $24fb			jsr 	FloatRotateLeft
.20bb	88		dey				dey 	 							; do 31 times
.20bc	d0 f0		bne $20ae			bne 	_I32SDLoop
.20be	7a		ply				ply 								; restore AY and exit
.20bf	68		pla				pla
.20c0	60		rts				rts
.20c1					FloatDivideCheck:
.20c1	20 91 22	jsr $2291			jsr 	FloatSubTopTwoStack 		; subtract Stack[X+1] from Stack[X+0]
.20c4	b0 04		bcs $20ca			bcs 	_DCSExit 					; if carry set, then could do, exit
.20c6	20 77 22	jsr $2277			jsr 	FloatAddTopTwoStack 		; add it back in
.20c9	18		clc				clc 								; and return False
.20ca					_DCSExit:
.20ca	60		rts				rts
.20cb					FloatFractionalPart:
.20cb	5a		phy				phy
.20cc	b5 32		lda $32,x			lda 	NSStatus,x 					; take absolute value
.20ce	29 7f		and #$7f			and 	#$7F
.20d0	95 32		sta $32,x			sta 	NSStatus,x
.20d2	20 40 22	jsr $2240			jsr 	FloatNormalise
.20d5	b5 6e		lda $6e,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.20d7	38		sec				sec
.20d8	e9 e0		sbc #$e0			sbc 	#$E0
.20da	90 29		bcc $2105			bcc 	_FFPExit 					; already fractional
.20dc	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.20de	b0 22		bcs $2102			bcs 	_FFPZero
.20e0	a8		tay				tay 								; put count to do in Y
.20e1	b5 62		lda $62,x			lda 	NSMantissa3,x 				; do each in turn.
.20e3	20 0a 21	jsr $210a			jsr 	_FFPPartial
.20e6	95 62		sta $62,x			sta 	NSMantissa3,x
.20e8	b5 56		lda $56,x			lda 	NSMantissa2,x
.20ea	20 0a 21	jsr $210a			jsr 	_FFPPartial
.20ed	95 56		sta $56,x			sta 	NSMantissa2,x
.20ef	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.20f1	20 0a 21	jsr $210a			jsr 	_FFPPartial
.20f4	95 4a		sta $4a,x			sta 	NSMantissa1,x
.20f6	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.20f8	20 0a 21	jsr $210a			jsr 	_FFPPartial
.20fb	95 3e		sta $3e,x			sta 	NSMantissa0,x
.20fd	20 0d 25	jsr $250d			jsr 	FloatIsZero 					; zeroed check.
.2100	d0 03		bne $2105			bne 	_FFPExit
.2102					_FFPZero:
.2102	20 eb 24	jsr $24eb			jsr 	FloatSetZero
.2105					_FFPExit:
.2105	20 40 22	jsr $2240			jsr 	FloatNormalise
.2108	7a		ply				ply
.2109	60		rts				rts
.210a					_FFPPartial:
.210a	c0 00		cpy #$00			cpy 	#0 							; no more to do
.210c	f0 17		beq $2125			beq 	_FFFPPExit
.210e	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.2110	b0 0c		bcs $211e			bcs 	_FFFPPWholeByte
.2112	5a		phy				phy
.2113					_FFFPPLeft:
.2113	0a		asl a				asl 	a
.2114	88		dey				dey
.2115	d0 fc		bne $2113			bne 	_FFFPPLeft
.2117	7a		ply				ply
.2118					_FFFPPRight:
.2118	4a		lsr a				lsr 	a
.2119	88		dey				dey
.211a	d0 fc		bne $2118			bne 	_FFFPPRight
.211c	80 07		bra $2125			bra 	_FFFPPExit
.211e					_FFFPPWholeByte:
.211e	98		tya				tya 								; subtract 8 from count
.211f	38		sec				sec
.2120	e9 08		sbc #$08			sbc 	#8
.2122	a8		tay				tay
.2123	a9 00		lda #$00			lda 	#0 							; and clear all
.2125					_FFFPPExit:
.2125	60		rts				rts
.2126					FloatIntegerPart:
.2126	48		pha				pha
.2127	b5 6e		lda $6e,x			lda 	NSExponent,x 				; is it integer already ?
.2129	f0 1d		beq $2148			beq 	_FIPExit 					; if so do nothing
.212b	20 0d 25	jsr $250d			jsr 	FloatIsZero 				; is it zero ?
.212e	f0 15		beq $2145			beq 	_FIPZero 					; if so return zero.
.2130	20 40 22	jsr $2240			jsr 	FloatNormalise 				; normalise
.2133	f0 10		beq $2145			beq 	_FIPZero 					; normalised to zero, exit zero
.2135					_FIPShift:
.2135	b5 6e		lda $6e,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.2137	10 07		bpl $2140			bpl 	_FIPCheckZero
.2139	20 04 25	jsr $2504			jsr 	FloatShiftRight 			; shift mantissa right
.213c	f6 6e		inc $6e,x			inc 	NSExponent,x 				; bump exponent
.213e	80 f5		bra $2135			bra 	_FIPShift
.2140					_FIPCheckZero:
.2140	20 0d 25	jsr $250d			jsr 	FloatIsZero 				; avoid -0 problem
.2143	d0 03		bne $2148			bne 	_FIPExit 					; set to zero if mantissa zero.
.2145					_FIPZero:
.2145	20 eb 24	jsr $24eb			jsr 	FloatSetZero
.2148					_FIPExit:
.2148	68		pla				pla
.2149	60		rts				rts
.214a					FloatIntegerPartDown:
.214a	48		pha				pha
.214b	5a		phy				phy
.214c	b5 6e		lda $6e,x			lda 	NSExponent,x 				; is it integer already ?
.214e	f0 36		beq $2186			beq 	_FIPExit 					; if so do nothing
.2150	20 0d 25	jsr $250d			jsr 	FloatIsZero 				; is it zero ?
.2153	f0 2e		beq $2183			beq 	_FIPZero 					; if so return zero.
.2155	20 40 22	jsr $2240			jsr 	FloatNormalise 				; normalise
.2158	f0 29		beq $2183			beq 	_FIPZero 					; normalised to zero, exit zero
.215a	a0 00		ldy #$00			ldy 	#0 							; reset the count of bits.
.215c					_FIPShift:
.215c	b5 6e		lda $6e,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.215e	10 0a		bpl $216a			bpl 	_FIPCheckDown
.2160	20 04 25	jsr $2504			jsr 	FloatShiftRight 			; shift mantissa right
.2163	90 01		bcc $2166			bcc 	_FIPNoFrac 					; shifted a zero out ?
.2165	c8		iny				iny
.2166					_FIPNoFrac:
.2166	f6 6e		inc $6e,x			inc 	NSExponent,x 				; bump exponent
.2168	80 f2		bra $215c			bra 	_FIPShift
.216a					_FIPCheckDown:
.216a	c0 00		cpy #$00			cpy 	#0 							; were there any fractional bits.
.216c	f0 10		beq $217e			beq 	_FIPCheckZero
.216e	34 32		bit $32,x			bit 	NSStatus,x 					; +ve
.2170	10 0c		bpl $217e			bpl 	_FIPCheckZero
.2172	e8		inx				inx 								; -ve so round *down*.
.2173	a9 01		lda #$01			lda 	#1
.2175	20 ed 24	jsr $24ed			jsr 	FloatSetByte
.2178	20 ad 24	jsr $24ad			jsr 	FloatNegate
.217b	20 0f 1f	jsr $1f0f			jsr 	FloatAdd
.217e					_FIPCheckZero:
.217e	20 0d 25	jsr $250d			jsr 	FloatIsZero 				; avoid -0 problem
.2181	d0 03		bne $2186			bne 	_FIPExit 					; set to zero if mantissa zero.
.2183					_FIPZero:
.2183	20 eb 24	jsr $24eb			jsr 	FloatSetZero
.2186					_FIPExit:
.2186	7a		ply				ply
.2187	68		pla				pla
.2188	60		rts				rts
.2189					FloatInt8Multiply:
.2189	5a		phy				phy
.218a	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; right shifted multiplier in Y
.218c	a8		tay				tay
.218d	74 3e		stz $3e,x			stz 	NSMantissa0,x 				; zero the result (already 8 bit constant)
.218f					_FI8MLoop:
.218f	98		tya				tya 								; shift right shifter right into carry
.2190	4a		lsr a				lsr 	a
.2191	a8		tay				tay
.2192	90 0d		bcc $21a1			bcc 	_FI8MNoAdd
.2194	18		clc				clc
.2195	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.2197	75 3f		adc $3f,x			adc 	NSMantissa0+1,x
.2199	95 3e		sta $3e,x			sta 	NSMantissa0,x
.219b	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.219d	75 4b		adc $4b,x			adc 	NSMantissa1+1,x
.219f	95 4a		sta $4a,x			sta 	NSMantissa1,x
.21a1					_FI8MNoAdd:
.21a1	16 3f		asl $3f,x			asl 	NSMantissa0+1,x 			; shift adder left
.21a3	36 4b		rol $4b,x			rol 	NSMantissa1+1,x
.21a5	c0 00		cpy #$00			cpy 	#0
.21a7	d0 e6		bne $218f			bne 	_FI8MLoop 					; until right shifter zero.
.21a9	7a		ply				ply
.21aa	60		rts				rts
.21ab					FloatMultiply:
.21ab	ca		dex				dex
.21ac	b5 6e		lda $6e,x			lda 	NSExponent,x 				; can use optimised ?
.21ae	15 6f		ora $6f,x			ora 	NSExponent+1,x
.21b0	15 62		ora $62,x			ora 	NSMantissa3,x
.21b2	15 63		ora $63,x			ora 	NSMantissa3+1,x
.21b4	d0 21		bne $21d7			bne 	_FMUseFloat
.21b6	b5 32		lda $32,x			lda 	NSStatus,x 					; check if it is 8 bit unsigned
.21b8	15 33		ora $33,x			ora 	NSStatus+1,x
.21ba	29 80		and #$80			and 	#$80
.21bc	15 62		ora $62,x			ora 	NSMantissa3,x
.21be	15 56		ora $56,x			ora 	NSMantissa2,x
.21c0	15 4a		ora $4a,x			ora 	NSMantissa1,x
.21c2	15 63		ora $63,x			ora 	NSMantissa3+1,x
.21c4	15 57		ora $57,x			ora 	NSMantissa2+1,x
.21c6	15 4b		ora $4b,x			ora 	NSMantissa1+1,x
.21c8	d0 04		bne $21ce			bne 	_FMInt32
.21ca	20 89 21	jsr $2189			jsr 	FloatInt8Multiply 			; use fast 8x8 multiply.
.21cd	60		rts				rts
.21ce					_FMInt32:
.21ce	20 f8 21	jsr $21f8			jsr 	FloatMultiplyShort			; use the int32 one.
.21d1	18		clc				clc 								; fix it up if gone out of range
.21d2	75 6e		adc $6e,x			adc 	NSExponent,x
.21d4	95 6e		sta $6e,x			sta 	NSExponent,x
.21d6	60		rts				rts
.21d7					_FMUseFloat:
.21d7	20 40 22	jsr $2240			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.21da	f0 18		beq $21f4			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.21dc	e8		inx				inx
.21dd	20 40 22	jsr $2240			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.21e0	ca		dex				dex
.21e1	c9 00		cmp #$00			cmp 	#0
.21e3	f0 0c		beq $21f1			beq 	_FDSetZero
.21e5	20 f8 21	jsr $21f8			jsr 	FloatMultiplyShort 			; calculate the result.
.21e8	75 6e		adc $6e,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.21ea	18		clc				clc
.21eb	75 6f		adc $6f,x			adc 	NSExponent+1,x
.21ed	95 6e		sta $6e,x			sta 	NSExponent,x
.21ef	80 03		bra $21f4			bra 	_FDExit
.21f1					_FDSetZero:
.21f1	20 eb 24	jsr $24eb			jsr 	FloatSetZero 				; return 0
.21f4					_FDExit:
.21f4	20 40 22	jsr $2240			jsr 	FloatNormalise 				; normalise the result
.21f7	60		rts				rts
.21f8					FloatMultiplyShort:
.21f8	5a		phy				phy 								; save Y
.21f9	20 ce 24	jsr $24ce			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.21fc	20 e7 24	jsr $24e7			jsr 	FloatSetZeroMantissaOnly 	; set mantissa S[X] to zero
.21ff	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.2201					_I32MLoop:
.2201	b5 40		lda $40,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.2203	15 4c		ora $4c,x			ora 	NSMantissa1+2,x
.2205	15 58		ora $58,x			ora 	NSMantissa2+2,x
.2207	15 64		ora $64,x			ora 	NSMantissa3+2,x
.2209	f0 25		beq $2230			beq 	_I32MExit 					; exit if zero
.220b	b5 40		lda $40,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.220d	29 01		and #$01			and 	#1
.220f	f0 0d		beq $221e			beq 	_I32MNoAdd
.2211	20 77 22	jsr $2277			jsr 	FloatAddTopTwoStack 		; if so add S[X+1] to S[X+0]
.2214	b5 62		lda $62,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.2216	10 06		bpl $221e			bpl 	_I32MNoAdd
.2218					_I32ShiftRight:
.2218	20 04 25	jsr $2504			jsr 	FloatShiftRight 			; shift S[X] right
.221b	c8		iny				iny 								; increment shift count
.221c	80 09		bra $2227			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.221e					_I32MNoAdd:
.221e	34 63		bit $63,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.2220	70 f6		bvs $2218			bvs 	_I32ShiftRight 				; instead.
.2222	e8		inx				inx
.2223	20 fa 24	jsr $24fa			jsr 	FloatShiftLeft 				; shift additive S[X+1] left
.2226	ca		dex				dex
.2227					_I32MShiftUpper:
.2227	e8		inx				inx 								; shift S[X+2] right
.2228	e8		inx				inx
.2229	20 04 25	jsr $2504			jsr 	FloatShiftRight
.222c	ca		dex				dex
.222d	ca		dex				dex
.222e	80 d1		bra $2201			bra 	_I32MLoop 					; try again.
.2230					_I32MExit:
.2230	20 36 22	jsr $2236			jsr 	FloatCalculateSign
.2233	98		tya				tya 								; shift in A
.2234	7a		ply				ply 								; restore Y and exit
.2235	60		rts				rts
.2236					FloatCalculateSign:
.2236	b5 32		lda $32,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.2238	16 32		asl $32,x			asl 	NSStatus,x 					; shift result left
.223a	55 33		eor $33,x			eor 	NSStatus+1,x
.223c	0a		asl a				asl 	a 							; shift bit 7 into carry
.223d	76 32		ror $32,x			ror 	NSStatus,x 					; shift right into status byte.
.223f	60		rts				rts
.2240					FloatNormalise:
.2240	20 0d 25	jsr $250d			jsr 	FloatIsZero 				; if zero exit
.2243	d0 07		bne $224c			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.2245	16 32		asl $32,x			asl 	NSStatus,x 					; clear the sign bit.
.2247	76 32		ror $32,x			ror 	NSStatus,x 					; (no -0)
.2249	a9 00		lda #$00			lda 	#0 							; set Z flag
.224b	60		rts				rts
.224c					_NSNormaliseOptimise:
.224c	b5 62		lda $62,x			lda 	NSMantissa3,x 				; upper byte zero ?
.224e	d0 19		bne $2269			bne 	_NSNormaliseLoop
.2250	b5 56		lda $56,x			lda 	NSMantissa2,x 				; byte normalise
.2252	30 15		bmi $2269			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.2254	95 62		sta $62,x			sta 	NSMantissa3,x
.2256	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.2258	95 56		sta $56,x			sta 	NSMantissa2,x
.225a	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.225c	95 4a		sta $4a,x			sta 	NSMantissa1,x
.225e	74 3e		stz $3e,x			stz 	NSMantissa0,x
.2260	b5 6e		lda $6e,x			lda 	NSExponent,x
.2262	38		sec				sec
.2263	e9 08		sbc #$08			sbc 	#8
.2265	95 6e		sta $6e,x			sta 	NSExponent,x
.2267	80 e3		bra $224c			bra 	_NSNormaliseOptimise
.2269					_NSNormaliseLoop:
.2269	34 62		bit $62,x			bit 	NSMantissa3,x 				; bit 30 set ?
.226b	70 07		bvs $2274			bvs 	_NSNExit 					; exit if so with Z flag clear
.226d	20 fa 24	jsr $24fa			jsr 	FloatShiftLeft 				; shift mantissa left
.2270	d6 6e		dec $6e,x			dec 	NSExponent,x 				; adjust exponent
.2272	80 f5		bra $2269			bra 	_NSNormaliseLoop
.2274					_NSNExit:
.2274	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.2276	60		rts				rts
.2277					FloatAddTopTwoStack:
.2277	18		clc				clc
.2278	b5 3e		lda $3e,x			lda		NSMantissa0,x
.227a	75 3f		adc $3f,x			adc 		NSMantissa0+1,x
.227c	95 3e		sta $3e,x			sta 	NSMantissa0,x
.227e	b5 4a		lda $4a,x			lda		NSMantissa1,x
.2280	75 4b		adc $4b,x			adc 		NSMantissa1+1,x
.2282	95 4a		sta $4a,x			sta 	NSMantissa1,x
.2284	b5 56		lda $56,x			lda		NSMantissa2,x
.2286	75 57		adc $57,x			adc 		NSMantissa2+1,x
.2288	95 56		sta $56,x			sta 	NSMantissa2,x
.228a	b5 62		lda $62,x			lda		NSMantissa3,x
.228c	75 63		adc $63,x			adc 		NSMantissa3+1,x
.228e	95 62		sta $62,x			sta 	NSMantissa3,x
.2290	60		rts				rts
.2291					FloatSubTopTwoStack:
.2291	38		sec				sec
.2292	b5 3e		lda $3e,x			lda		NSMantissa0,x
.2294	f5 3f		sbc $3f,x			sbc 		NSMantissa0+1,x
.2296	95 3e		sta $3e,x			sta 	NSMantissa0,x
.2298	b5 4a		lda $4a,x			lda		NSMantissa1,x
.229a	f5 4b		sbc $4b,x			sbc 		NSMantissa1+1,x
.229c	95 4a		sta $4a,x			sta 	NSMantissa1,x
.229e	b5 56		lda $56,x			lda		NSMantissa2,x
.22a0	f5 57		sbc $57,x			sbc 		NSMantissa2+1,x
.22a2	95 56		sta $56,x			sta 	NSMantissa2,x
.22a4	b5 62		lda $62,x			lda		NSMantissa3,x
.22a6	f5 63		sbc $63,x			sbc 		NSMantissa3+1,x
.22a8	95 62		sta $62,x			sta 	NSMantissa3,x
.22aa	60		rts				rts
.22ab					FloatInt32Add:
.22ab	b5 32		lda $32,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.22ad	55 33		eor $33,x			eor 	NSStatus+1,x
.22af	30 04		bmi $22b5			bmi 	_DiffSigns
.22b1	20 77 22	jsr $2277			jsr		FloatAddTopTwoStack
.22b4	60		rts				rts
.22b5					_DiffSigns:
.22b5	20 91 22	jsr $2291			jsr 	FloatSubTopTwoStack 		; do a physical subtraction
.22b8	34 62		bit $62,x			bit 	NSMantissa3,x 				; result is +ve, okay
.22ba	10 07		bpl $22c3			bpl 	_AddExit
.22bc	b5 33		lda $33,x			lda 	NSStatus+1,x 				; sign is that of 11th value
.22be	95 32		sta $32,x			sta 	NSStatus,x
.22c0	20 b4 24	jsr $24b4			jsr 	FloatNegateMantissa 		; negate the mantissa and exit
.22c3					_AddExit:
.22c3	20 0d 25	jsr $250d			jsr 	FloatIsZero 				; check for -0
.22c6	d0 02		bne $22ca			bne 	_AddNonZero
.22c8	74 32		stz $32,x			stz 	NSStatus,x
.22ca					_AddNonZero:
.22ca	60		rts				rts
=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.22cb					FloatEncodeStart:
.22cb	38		sec				sec
.22cc	80 01		bra $22cf			bra 	FloatEncodeContinue+1
.22ce					FloatEncodeContinue:
.22ce	18		clc				clc
.22cf					FloatEncode:
.22cf	08		php				php 								; save reset flag.
.22d0	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.22d2	f0 15		beq $22e9			beq 	_ENIsOkay
.22d4	c9 30		cmp #$30			cmp 	#"0"
.22d6	90 04		bcc $22dc			bcc 	_ENBadNumber
.22d8	c9 3a		cmp #$3a			cmp 	#"9"+1
.22da	90 0d		bcc $22e9			bcc 	_ENIsOkay
.22dc					_ENBadNumber:
.22dc	28		plp				plp 								; throw saved reset
.22dd	ad 32 06	lda $0632			lda 	encodeState 				; if in decimal mode, construct final number
.22e0	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.22e2	d0 03		bne $22e7			bne 	_ENFail
.22e4	4c 61 23	jmp $2361			jmp 	_ENConstructFinal
.22e7					_ENFail:
.22e7	18		clc				clc 								; not allowed
.22e8	60		rts				rts
.22e9					_ENIsOkay:
.22e9	28		plp				plp 								; are we restarting
.22ea	90 15		bcc $2301			bcc 	_ENNoRestart
.22ec					_ENStartEncode:
.22ec	c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.22ee	f0 0c		beq $22fc			beq 	_ENFirstDP
.22f0	29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.22f2	20 ed 24	jsr $24ed			jsr 	FloatSetByte 				; in single byte mode.
.22f5	a9 01		lda #$01			lda 	#ESTA_Low
.22f7					_ENExitChange:
.22f7	8d 32 06	sta $0632			sta 	encodeState 				; save new state
.22fa	38		sec				sec
.22fb	60		rts				rts
.22fc					_ENFirstDP:
.22fc	20 eb 24	jsr $24eb			jsr 	FloatSetZero 				; clear integer part
.22ff	80 3c		bra $233d			bra 	_ESTASwitchFloat			; go straight to float and exi
.2301					_ENNoRestart:
.2301	48		pha				pha 								; save digit or DP on stack.
.2302	ad 32 06	lda $0632			lda 	encodeState 				; get current state
.2305	c9 01		cmp #$01			cmp 	#ESTA_Low
.2307	f0 09		beq $2312			beq  	_ESTALowState
.2309	c9 02		cmp #$02			cmp 	#ESTA_High
.230b	f0 26		beq $2333			beq 	_ESTAHighState
.230d	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.230f	f0 38		beq $2349			beq 	_ESTADecimalState
>2311	db						.byte 	$DB 						; causes a break in the emulator
.2312					_ESTALowState:
.2312	68		pla				pla 								; get value back
.2313	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.2315	f0 26		beq $233d			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.2317	29 0f		and #$0f			and 	#15 						; make digit
.2319	8d 33 06	sta $0633			sta 	digitTemp 					; save it.
.231c	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.231e	0a		asl a				asl 	a
.231f	0a		asl a				asl 	a
.2320	75 3e		adc $3e,x			adc 	NSMantissa0,x
.2322	0a		asl a				asl 	a
.2323	6d 33 06	adc $0633			adc 	digitTemp
.2326	95 3e		sta $3e,x			sta 	NSMantissa0,x
.2328	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.232a	90 05		bcc $2331			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.232c	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.232e	8d 32 06	sta $0632			sta 	encodeState
.2331					_ESTANoSwitch:
.2331	38		sec				sec
.2332	60		rts				rts
.2333					_ESTAHighState:
.2333	68		pla				pla 								; get value back
.2334	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.2336	f0 05		beq $233d			beq 	_ESTASwitchFloat
.2338	20 93 23	jsr $2393			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.233b	38		sec				sec
.233c	60		rts				rts
.233d					_ESTASwitchFloat:
.233d	9c 34 06	stz $0634			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.2340	e8		inx				inx 								; zero the decimal additive.
.2341	20 eb 24	jsr $24eb			jsr 	FloatSetZero
.2344	ca		dex				dex
.2345	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.2347	80 ae		bra $22f7			bra 	_ENExitChange
.2349					_ESTADecimalState:
.2349	68		pla				pla 								; digit.
.234a	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 11th decimal point.
.234c	f0 99		beq $22e7			beq 	_ENFail
.234e	e8		inx				inx 								; put digit into fractional part of X+1
.234f	20 93 23	jsr $2393			jsr 	ESTAShiftDigitIntoMantissa
.2352	ca		dex				dex
.2353	ee 34 06	inc $0634			inc 	decimalCount 				; bump the count of decimals
.2356	ad 34 06	lda $0634			lda 	decimalCount 				; too many decimal digits.
.2359	c9 0b		cmp #$0b			cmp 	#11
.235b	f0 02		beq $235f			beq 	_ESTADSFail
.235d	38		sec				sec
.235e	60		rts				rts
.235f					_ESTADSFail:
.235f	18		clc				clc
.2360	60		rts				rts
.2361					_ENConstructFinal:
.2361	ad 34 06	lda $0634			lda 	decimalCount 				; get decimal count
.2364	f0 2b		beq $2391			beq 	_ENCFExit 					; no decimals
.2366	5a		phy				phy
.2367	0a		asl a				asl 	a 							; x 4 and CLC
.2368	0a		asl a				asl 	a
.2369	6d 34 06	adc $0634			adc 	decimalCount
.236c	a8		tay				tay
.236d	b9 f8 1f	lda $1ff8,y			lda 	FloatScalarTable-5,y 		; copy decimal scalar to X+2
.2370	95 40		sta $40,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.2372	b9 f9 1f	lda $1ff9,y			lda 	FloatScalarTable-5+1,y
.2375	95 4c		sta $4c,x			sta 	NSMantissa1+2,x
.2377	b9 fa 1f	lda $1ffa,y			lda 	FloatScalarTable-5+2,y
.237a	95 58		sta $58,x			sta 	NSMantissa2+2,x
.237c	b9 fb 1f	lda $1ffb,y			lda 	FloatScalarTable-5+3,y
.237f	95 64		sta $64,x			sta 	NSMantissa3+2,x
.2381	b9 fc 1f	lda $1ffc,y			lda 	FloatScalarTable-5+4,y
.2384	95 70		sta $70,x			sta 	NSExponent+2,x
.2386	74 34		stz $34,x			stz 	NSStatus+2,x 				; make +ve
.2388	e8		inx				inx 								; multiply decimal const by decimal scalar
.2389	e8		inx				inx
.238a	20 ab 21	jsr $21ab			jsr 	FloatMultiply
.238d	20 0f 1f	jsr $1f0f			jsr 	FloatAdd 					; add to integer part.
.2390	7a		ply				ply
.2391					_ENCFExit:
.2391	18		clc				clc 								; reject the digit.
.2392	60		rts				rts
.2393					ESTAShiftDigitIntoMantissa:
.2393	29 0f		and #$0f			and 	#15 						; save digit
.2395	48		pha				pha
.2396	b5 62		lda $62,x			lda 	NSMantissa3,x 				; push mantissa on stack
.2398	48		pha				pha
.2399	b5 56		lda $56,x			lda 	NSMantissa2,x
.239b	48		pha				pha
.239c	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.239e	48		pha				pha
.239f	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.23a1	48		pha				pha
.23a2	20 fa 24	jsr $24fa			jsr 	FloatShiftLeft 				; x 2
.23a5	20 fa 24	jsr $24fa			jsr 	FloatShiftLeft 				; x 4
.23a8	18		clc				clc 								; pop mantissa and add
.23a9	68		pla				pla
.23aa	75 3e		adc $3e,x			adc 	NSMantissa0,x
.23ac	95 3e		sta $3e,x			sta 	NSMantissa0,x
.23ae	68		pla				pla
.23af	75 4a		adc $4a,x			adc 	NSMantissa1,x
.23b1	95 4a		sta $4a,x			sta 	NSMantissa1,x
.23b3	68		pla				pla
.23b4	75 56		adc $56,x			adc 	NSMantissa2,x
.23b6	95 56		sta $56,x			sta 	NSMantissa2,x
.23b8	68		pla				pla
.23b9	75 62		adc $62,x			adc 	NSMantissa3,x
.23bb	95 62		sta $62,x			sta 	NSMantissa3,x 				; x 5
.23bd	20 fa 24	jsr $24fa			jsr 	FloatShiftLeft 				; x 10
.23c0	68		pla				pla 								; add digit
.23c1	18		clc				clc
.23c2	75 3e		adc $3e,x			adc 	NSMantissa0,x
.23c4	95 3e		sta $3e,x			sta 	NSMantissa0,x
.23c6	90 0a		bcc $23d2			bcc 	_ESTASDExit
.23c8	f6 4a		inc $4a,x			inc 	NSMantissa1,x
.23ca	d0 06		bne $23d2			bne 	_ESTASDExit
.23cc	f6 56		inc $56,x			inc 	NSMantissa2,x
.23ce	d0 02		bne $23d2			bne 	_ESTASDExit
.23d0	f6 62		inc $62,x			inc 	NSMantissa3,x
.23d2					_ESTASDExit:
.23d2	60		rts				rts
.0632					encodeState:
>0632							.fill 	1
.0633					digitTemp:
>0633							.fill 	1
.0634					decimalCount:
>0634							.fill 	1
.23d3					FloatToString:
.23d3	da		phx				phx
.23d4	5a		phy				phy 								; save code position
.23d5	8d 35 06	sta $0635			sta 	decimalPlaces	 			; save number of DPs.
.23d8	9c 36 06	stz $0636			stz 	dbOffset 					; offset into decimal buffer = start.
.23db	b5 32		lda $32,x			lda 	NSStatus,x  				; is it -ve.
.23dd	10 08		bpl $23e7			bpl 	_CNTSNotNegative
.23df	29 7f		and #$7f			and 	#$7F 						; make +ve
.23e1	95 32		sta $32,x			sta 	NSStatus,x
.23e3	a9 2d		lda #$2d			lda 	#"-"
.23e5	80 02		bra $23e9			bra 	_CNTMain
.23e7					_CNTSNotNegative:
.23e7	a9 20		lda #$20			lda 	#" "
.23e9					_CNTMain:
.23e9	20 4b 24	jsr $244b			jsr 	WriteDecimalBuffer
.23ec	b5 6e		lda $6e,x			lda 	NSExponent,x 				; check if decimal
.23ee	f0 0d		beq $23fd			beq 	_CNTSNotFloat
.23f0	e8		inx				inx 								; round up so we don't get too many 6.999999
.23f1	a9 01		lda #$01			lda 	#1
.23f3	20 ed 24	jsr $24ed			jsr 	FloatSetByte
.23f6	b5 6d		lda $6d,x			lda		NSExponent-1,x
.23f8	95 6e		sta $6e,x			sta 	NSExponent,x
.23fa	20 0f 1f	jsr $1f0f			jsr 	FloatAdd
.23fd					_CNTSNotFloat:
.23fd	20 2d 24	jsr $242d			jsr 	MakePlusTwoString 			; do the integer part.
.2400	20 cb 20	jsr $20cb			jsr 	FloatFractionalPart 		; get the fractional part
.2403	20 40 22	jsr $2240			jsr 	FloatNormalise					; normalise , exit if zero
.2406	f0 22		beq $242a			beq 	_CNTSExit
.2408	a9 2e		lda #$2e			lda 	#"."
.240a	20 4b 24	jsr $244b			jsr 	WriteDecimalBuffer 			; write decimal place
.240d					_CNTSDecimal:
.240d	ce 35 06	dec $0635			dec 	decimalPlaces 				; done all the decimals
.2410	30 18		bmi $242a			bmi 	_CNTSExit
.2412	e8		inx				inx 								; x 10.0
.2413	a9 0a		lda #$0a			lda 	#10
.2415	20 ed 24	jsr $24ed			jsr 	FloatSetByte
.2418	20 ab 21	jsr $21ab			jsr 	FloatMultiply
.241b	20 2d 24	jsr $242d			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.241e	20 cb 20	jsr $20cb			jsr 	FloatFractionalPart 		; get the fractional part
.2421	20 40 22	jsr $2240			jsr 	FloatNormalise 				; normalise it.
.2424	b5 6e		lda $6e,x			lda 	NSExponent,x 				; gone to zero, exit.
.2426	c9 d0		cmp #$d0			cmp 	#$D0 						; very small remainder, so don't bother.
.2428	b0 e3		bcs $240d			bcs 	_CNTSDecimal 				; keep going.
.242a					_CNTSExit:
.242a	7a		ply				ply
.242b	fa		plx				plx
.242c	60		rts				rts
.242d					MakePlusTwoString:
.242d	da		phx				phx
.242e	20 ce 24	jsr $24ce			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.2431	e8		inx				inx 								; access it
.2432	e8		inx				inx
.2433	20 26 21	jsr $2126			jsr 	FloatIntegerPart 			; make it an integer
.2436	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.2438	20 6a 24	jsr $246a			jsr 	ConvertInt32
.243b	a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.243d					_MPTSCopy:
.243d	bd 10 06	lda $0610,x			lda 	numberBuffer,x
.2440	20 4b 24	jsr $244b			jsr 	WriteDecimalBuffer
.2443	e8		inx				inx
.2444	bd 10 06	lda $0610,x			lda 	numberBuffer,x
.2447	d0 f4		bne $243d			bne 	_MPTSCopy
.2449	fa		plx				plx
.244a	60		rts				rts
.244b					WriteDecimalBuffer:
.244b	da		phx				phx
.244c	ae 36 06	ldx $0636			ldx 	dbOffset
.244f	9d 37 06	sta $0637,x			sta 	decimalBuffer,x
.2452	9e 38 06	stz $0638,x			stz 	decimalBuffer+1,x
.2455	ee 36 06	inc $0636			inc 	dbOffset
.2458	fa		plx				plx
.2459	60		rts				rts
.0635					decimalPlaces:
>0635							.fill 	1
.0636					dbOffset:
>0636							.fill 	1
.0637					decimalBuffer:
>0637							.fill 	32
.245a					ConvertInt16:
.245a	85 3e		sta $3e				sta 	NSMantissa0 				; set up as 32 bit conversion
.245c	86 4a		stx $4a				stx 	NSMantissa1
.245e	64 56		stz $56				stz 	NSMantissa2
.2460	64 62		stz $62				stz 	NSMantissa3
.2462	64 32		stz $32				stz 	NSStatus 					; positive integer
.2464	a2 00		ldx #$00			ldx 	#0 							; stack level
.2466	a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.2468	80 00		bra $246a			bra 	ConvertInt32
.246a					ConvertInt32:
.246a	5a		phy				phy
.246b	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.246d	24 32		bit $32				bit 	NSStatus 					; output a - if not negative.
.246f	10 08		bpl $2479			bpl 	_CI32NotNeg
.2471	48		pha				pha
.2472	a9 2d		lda #$2d			lda 	#'-'
.2474	99 10 06	sta $0610,y			sta 	numberBuffer,y
.2477	c8		iny				iny
.2478	68		pla				pla
.2479					_CI32NotNeg:
.2479	20 87 24	jsr $2487			jsr 	_CI32DivideConvert 			; recursive conversion
.247c	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.247e	99 10 06	sta $0610,y			sta 	numberBuffer,y
.2481	7a		ply				ply
.2482	a2 06		ldx #$06			ldx 	#numberBuffer >> 8 			; return address in XA
.2484	a9 10		lda #$10			lda 	#numberBuffer & $FF
.2486	60		rts				rts
.2487					_CI32DivideConvert:
.2487	e8		inx				inx 								; write to next slot up
.2488	20 ed 24	jsr $24ed			jsr 	FloatSetByte 		 		; write the base out.
.248b	ca		dex				dex
.248c	20 81 20	jsr $2081			jsr 	Int32Divide 				; divide
.248f	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; save remainder
.2491	48		pha				pha
.2492	20 70 20	jsr $2070			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.2495	20 0d 25	jsr $250d			jsr 	FloatIsZero 				; is it zero ?
.2498	f0 05		beq $249f			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.249a	b5 3f		lda $3f,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.249c	20 87 24	jsr $2487			jsr 	_CI32DivideConvert 			; and recusrively call.
.249f					_CI32NoRecurse:
.249f	68		pla				pla 								; remainder
.24a0	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.24a2	90 02		bcc $24a6			bcc 	_CI32NotHex
.24a4	69 26		adc #$26			adc 	#6+32
.24a6					_CI32NotHex:
.24a6	69 30		adc #$30			adc 	#48
.24a8	99 10 06	sta $0610,y			sta 	numberBuffer,y 				; write out and exit
.24ab	c8		iny				iny
.24ac	60		rts				rts
.24ad					FloatNegate:
.24ad	b5 32		lda $32,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.24af	49 80		eor #$80			eor 	#$80  						; toggle the negative flag
.24b1	95 32		sta $32,x			sta 	NSStatus,x
.24b3	60		rts				rts
.24b4					FloatNegateMantissa:
.24b4	38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.24b5	a9 00		lda #$00			lda 	#0
.24b7	f5 3e		sbc $3e,x			sbc 	NSMantissa0,x
.24b9	95 3e		sta $3e,x			sta 	NSMantissa0,x
.24bb	a9 00		lda #$00			lda 	#0
.24bd	f5 4a		sbc $4a,x			sbc 	NSMantissa1,x
.24bf	95 4a		sta $4a,x			sta 	NSMantissa1,x
.24c1	a9 00		lda #$00			lda 	#0
.24c3	f5 56		sbc $56,x			sbc 	NSMantissa2,x
.24c5	95 56		sta $56,x			sta 	NSMantissa2,x
.24c7	a9 00		lda #$00			lda 	#0
.24c9	f5 62		sbc $62,x			sbc 	NSMantissa3,x
.24cb	95 62		sta $62,x			sta 	NSMantissa3,x
.24cd	60		rts				rts
.24ce					FloatShiftUpTwo:
.24ce	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.24d0	95 40		sta $40,x			sta 	NSMantissa0+2,x
.24d2	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.24d4	95 4c		sta $4c,x			sta 	NSMantissa1+2,x
.24d6	b5 56		lda $56,x			lda 	NSMantissa2,x
.24d8	95 58		sta $58,x			sta 	NSMantissa2+2,x
.24da	b5 62		lda $62,x			lda 	NSMantissa3,x
.24dc	95 64		sta $64,x			sta 	NSMantissa3+2,x
.24de	b5 6e		lda $6e,x			lda 	NSExponent,x
.24e0	95 70		sta $70,x			sta 	NSExponent+2,x
.24e2	b5 32		lda $32,x			lda 	NSStatus,x
.24e4	95 34		sta $34,x			sta 	NSStatus+2,x
.24e6	60		rts				rts
.24e7					FloatSetZeroMantissaOnly:
.24e7	74 3e		stz $3e,x			stz 	NSMantissa0,x
.24e9	80 08		bra $24f3			bra 	FloatZero13
.24eb					FloatSetZero:
.24eb	a9 00		lda #$00			lda 	#0
.24ed					FloatSetByte:
.24ed	74 6e		stz $6e,x			stz 	NSExponent,x 				; zero exponent, as +ve integer value.
.24ef					FloatSetMantissa:
.24ef	95 3e		sta $3e,x			sta 	NSMantissa0,x 				; zero mantissa
.24f1	74 32		stz $32,x			stz 	NSStatus,x
.24f3					FloatZero13:
.24f3	74 4a		stz $4a,x			stz 	NSMantissa1,x
.24f5	74 56		stz $56,x			stz 	NSMantissa2,x
.24f7	74 62		stz $62,x			stz 	NSMantissa3,x
.24f9	60		rts				rts
.24fa					FloatShiftLeft:
.24fa	18		clc				clc
.24fb					FloatRotateLeft:
.24fb	36 3e		rol $3e,x			rol 	NSMantissa0,x
.24fd	36 4a		rol $4a,x			rol		NSMantissa1,x
.24ff	36 56		rol $56,x			rol		NSMantissa2,x
.2501	36 62		rol $62,x			rol		NSMantissa3,x
.2503	60		rts				rts
.2504					FloatShiftRight:
.2504	56 62		lsr $62,x			lsr 	NSMantissa3,x
.2506	76 56		ror $56,x			ror		NSMantissa2,x
.2508	76 4a		ror $4a,x			ror		NSMantissa1,x
.250a	76 3e		ror $3e,x			ror		NSMantissa0,x
.250c	60		rts				rts
.250d					FloatIsZero:
.250d	b5 62		lda $62,x			lda 	NSMantissa3,x
.250f	15 56		ora $56,x			ora		NSMantissa2,x
.2511	15 4a		ora $4a,x			ora		NSMantissa1,x
.2513	15 3e		ora $3e,x			ora		NSMantissa0,x
.2515	60		rts				rts

;******  Processing input file: testing/testend.asm

.2516					EndProgram:
>2516	00 40 d4 54 00 a6 04 48				.binary "code/balls.bin"
>251e	00 a6 03 c7 a6 cb 93 93 b1 a6 40 00 01 00 ca 81
>252e	58 03 40 00 01 00 ca 81 58 06 40 00 01 00 ca 81
>253e	58 09 a6 40 00 01 00 ca 81 58 0c 40 00 01 00 ca
>254e	81 58 0f a6 00 48 12 24 40 00 01 95 a6 40 12 01
>255e	50 03 8e 01 b4 28 82 ca 84 02 82 01 80 7c a6 40
>256e	12 01 50 06 8e 01 b4 1e 82 ca 84 cc 00 01 82 7c
>257e	a6 40 12 01 50 09 8e 01 b4 0e 82 ca 84 01 80 7c
>258e	a6 40 12 01 50 0c 8e 01 b4 02 82 ca 84 7c a6 a6
>259e	40 12 01 50 0f 8e 01 7c a6 24 a7 a6 a6 00 48 15
>25ae	2a 1d 01 95 00 48 18 30 27 01 95 a6 40 15 cc 00
>25be	01 82 40 18 02 82 80 cc 00 b0 80 48 1b a6 01 40
>25ce	1b cb 51 c8 01 40 1b 01 80 00 c8 a6 30 a7 2a a7
>25de	a6 01 48 12 24 40 00 01 95 a6 01 cc 00 b0 40 12
>25ee	01 50 06 8e 78 80 40 12 01 50 03 8e 78 80 00 c8
>25fe	a6 40 12 01 50 0c 8e 78 48 1e a6 40 1e 00 a3 88
>260e	d2 00 07 00 d1 00 5d 00 a6 40 1e 01 a3 88 d2 00
>261e	07 00 d1 00 7a 00 a6 40 12 01 50 0f 8e 78 48 21
>262e	a6 40 21 00 a3 88 d2 00 07 00 d1 00 97 00 a6 40
>263e	21 01 a3 88 d2 00 07 00 d1 00 b6 00 a6 01 cc 00
>264e	b0 40 12 01 50 06 8e 78 80 40 12 01 50 03 8e 78
>265e	80 40 12 01 50 09 8e 78 c8 a6 24 a7 a6 d0 00 72
>266e	ff a6 a6 40 12 01 50 03 8e 78 48 24 a6 40 24 01
>267e	a3 88 d2 00 0c 00 40 12 01 50 0c 8e 01 7c 98 a6
>268e	40 12 01 50 03 8e 40 24 02 81 7c 98 a6 a6 40 12
>269e	01 50 03 8e 78 48 24 a6 40 24 cb 4f a3 88 d2 00
>26ae	15 00 40 12 01 50 03 8e cb 4d 7c 40 12 01 50 0c
>26be	8e 00 7c 98 a6 40 12 01 50 03 8e 40 24 02 80 7c
>26ce	98 a6 a6 40 12 01 50 06 8e 78 48 27 a6 40 27 00
>26de	a3 88 d2 00 0c 00 40 12 01 50 0f 8e 01 7c 98 a6
>26ee	40 12 01 50 06 8e 40 27 cc 00 01 81 7c 98 a6 a6
>26fe	40 12 01 50 06 8e 78 48 27 a6 40 27 cc 00 1d a3
>270e	88 d2 00 16 00 40 12 01 50 06 8e cc 00 1c 7c 40
>271e	12 01 50 0f 8e 00 7c 98 a6 40 12 01 50 06 8e 40
>272e	27 cc 00 01 80 7c 98 c4 ff

;******  End of listing
