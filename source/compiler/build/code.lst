
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass -q -c -Wall -o build/code.prg -L build/code.lst -l build/code.lbl testing/testing.asm /home/paulr/Projects/blitz-compiler/documents/../bin/compiler.library /home/paulr/Projects/blitz-compiler/documents/../bin/common.library /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library testing/testend.asm
; Thu Oct 12 05:13:53 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: testing/testing.asm

=$8000					StartWorkSpace = $8000
=$9f00					EndWorkspace = $9F00
.0801					WrapperBoot:
.0801	a2 0d		ldx #$0d			ldx 	#APIDesc & $FF
.0803	a0 08		ldy #$08			ldy 	#APIDesc >> 8
.0805	20 77 09	jsr $0977			jsr 	StartCompiler
.0808					_WBError:
.0808	b0 fe		bcs $0808			bcs 	_WBError
.080a	4c ff ff	jmp $ffff			jmp 	$FFFF
.080d					APIDesc:
>080d	11 08						.word 	TestAPI 					; the testing API.
>080f	80						.byte 	StartWorkSpace >> 8 		; start of workspace for compiler
>0810	9f						.byte 	EndWorkspace >> 8 			; end of workspace for compiler

;******  Processing file: testing/api/api.asm

=$a000					PCodeMemory = $A000
.0811					TestAPI:
.0811	c9 00		cmp #$00			cmp 	#BLC_OPENIN
.0813	f0 19		beq $082e			beq 	_TAOpenIn
.0815	c9 01		cmp #$01			cmp 	#BLC_CLOSEIN
.0817	f0 1d		beq $0836			beq 	_TACloseIn
.0819	c9 02		cmp #$02			cmp 	#BLC_READIN
.081b	f0 1a		beq $0837			beq 	_TARead
.081d	c9 03		cmp #$03			cmp 	#BLC_RESETOUT
.081f	f0 19		beq $083a			beq 	_TAResetOut
.0821	c9 04		cmp #$04			cmp 	#BLC_CLOSEOUT
.0823	f0 22		beq $0847			beq 	_TACloseOut
.0825	c9 05		cmp #$05			cmp 	#BLC_WRITEOUT
.0827	f0 28		beq $0851			beq 	_TAWriteByte
.0829	c9 06		cmp #$06			cmp 	#BLC_PRINTCHAR
.082b	f0 2e		beq $085b			beq 	_TAPrintScreen
>082d	db						.byte 	$DB 						; causes a break in the emulator
.082e					_TAOpenIn:
.082e	a9 11		lda #$11			lda 	#((EndProgram+2) & $FF)
.0830	85 22		sta $22				sta 	0+srcInputPtr
.0832	a9 1f		lda #$1f			lda 	#((EndProgram+2) >> 8) & $FF
.0834	85 23		sta $23				sta 	1+srcInputPtr
.0836					_TACloseIn:
.0836	60		rts				rts
.0837					_TARead:
.0837	4c 5f 08	jmp $085f			jmp 	ReadNextLine
.083a					_TAResetOut:
.083a	a9 01		lda #$01			lda 	#1
.083c	85 00		sta $00				sta 	0
.083e	a9 00		lda #$00			lda 	#((PCodeMemory) & $FF)
.0840	85 28		sta $28				sta 	0+objPtr
.0842	a9 a0		lda #$a0			lda 	#((PCodeMemory) >> 8) & $FF
.0844	85 29		sta $29				sta 	1+objPtr
.0846	60		rts				rts
.0847					_TACloseOut:
.0847	a9 a0		lda #$a0			lda 	#PCodeMemory >> 8
.0849	a6 28		ldx $28				ldx 	objPtr
.084b	a4 29		ldy $29				ldy 	objPtr+1
.084d	20 84 08	jsr $0884			jsr 	APISaveMemory
.0850	60		rts				rts
.0851					_TAWriteByte:
.0851	8a		txa				txa
.0852	92 28		sta ($28)			sta 	(objPtr)
.0854	e6 28		inc $28				inc 	objPtr
.0856	d0 02		bne $085a			bne 	_HWOWBNoCarry
.0858	e6 29		inc $29				inc 	objPtr+1
.085a					_HWOWBNoCarry:
.085a	60		rts				rts
.085b					_TAPrintScreen:
.085b	8a		txa				txa
.085c	4c d2 ff	jmp $ffd2			jmp 	$FFD2
.0022					srcInputPtr:
>0022							.fill 	2

;******  Return to file: testing/testing.asm


;******  Processing file: testing/api/line.asm

.085f					ReadNextLine:
.085f	b2 22		lda ($22)			lda 	(srcInputPtr) 				; reached the end of the program (address link = $0000)
.0861	a0 01		ldy #$01			ldy 	#1
.0863	11 22		ora ($22),y			ora 	(srcInputPtr),y
.0865	d0 02		bne $0869			bne 	_RLAHaveData
.0867	18		clc				clc
.0868	60		rts				rts									; end of file.
.0869					_RLAHaveData:
.0869	a6 22		ldx $22				ldx 	srcInputPtr 				; remember the line start
.086b	a4 23		ldy $23				ldy 	srcInputPtr+1
.086d	5a		phy				phy
.086e	a0 04		ldy #$04			ldy 	#4 							; must be at least four bytes (address/line#)
.0870					_RNLRead:
.0870	b1 22		lda ($22),y			lda 	(srcInputPtr),y 			; find the end of the line.
.0872	c8		iny				iny
.0873	c9 00		cmp #$00			cmp 	#0
.0875	d0 f9		bne $0870			bne 	_RNLRead
.0877	98		tya				tya 								; advance src input pointer to next.
.0878	18		clc				clc
.0879	65 22		adc $22				adc 	srcInputPtr
.087b	85 22		sta $22				sta 	srcInputPtr
.087d	90 02		bcc $0881			bcc 	_RNLNoCarry
.087f	e6 23		inc $23				inc 	srcInputPtr+1
.0881					_RNLNoCarry:
.0881	7a		ply				ply 								; address of line now in YX.
.0882	38		sec				sec
.0883	60		rts				rts

;******  Return to file: testing/testing.asm


;******  Processing file: testing/api/save.asm

.0884					APISaveMemory:
.0884	da		phx				phx
.0885	5a		phy				phy
.0886	48		pha				pha
.0887	a9 00		lda #$00			lda 	#0 							; set LFS
.0889	a2 08		ldx #$08			ldx 	#8
.088b	a0 00		ldy #$00			ldy 	#0
.088d	20 ba ff	jsr $ffba			jsr 	$FFBA
.0890	a9 08		lda #$08			lda 	#8 							; set file name
.0892	a2 a6		ldx #$a6			ldx 	#SaveName & $FF
.0894	a0 08		ldy #$08			ldy 	#SaveName >> 8
.0896	20 bd ff	jsr $ffbd			jsr 	$FFBD
.0899	68		pla				pla 								; set up the start address.
.089a	85 2b		sta $2b				sta 	zTemp0+1
.089c	64 2a		stz $2a				stz 	zTemp0
.089e	a9 2a		lda #$2a			lda 	#zTemp0 					; from index.
.08a0	7a		ply				ply 								; end in YX
.08a1	fa		plx				plx
.08a2	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; write out.
.08a5	60		rts				rts
.08a6					SaveName:
>08a6	43 4f 44 45 2e 42 49 4e				.text 	"CODE.BIN"

;******  Return to file: testing/testing.asm


;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/compiler.library

=0					BLC_OPENIN = 0
=1					BLC_CLOSEIN = 1
=2					BLC_READIN = 2
=3					BLC_RESETOUT = 3
=4					BLC_CLOSEOUT = 4
=5					BLC_WRITEOUT = 5
=6					BLC_PRINTCHAR = 6
.0024					srcPtr:
>0024							.fill 	2
.0400					currentLineNumber:
>0400							.fill 	2
.08ae					InlineNonDecimal:
.08ae	a2 02		ldx #$02			ldx 	#2 							; get size in X
.08b0	c9 25		cmp #$25			cmp 	#"%"
.08b2	f0 02		beq $08b6			beq 	_INDBinary
.08b4	a2 10		ldx #$10			ldx 	#16
.08b6					_INDBinary:
.08b6	85 2c		sta $2c				sta 	zTemp1 						; size => zTemp1
.08b8	64 2d		stz $2d				stz 	zTemp1+1 					; count => zTemp1+1, at least 1 !
.08ba	64 2a		stz $2a				stz 	zTemp0 						; zero result
.08bc	64 2b		stz $2b				stz 	zTemp0+1
.08be					_INDLoop:
.08be	20 68 12	jsr $1268			jsr 	LookNext 					; check next character
.08c1	20 a4 12	jsr $12a4			jsr 	ConvertHexStyle		 		; convert into range 0-35 for 0-9A-Z
.08c4	90 1f		bcc $08e5			bcc		_INDDone 					; didn't convert
.08c6	c5 2c		cmp $2c				cmp 	zTemp1 						; size too large ?
.08c8	b0 1b		bcs $08e5			bcs 	_INDDone
.08ca	20 f4 08	jsr $08f4			jsr 	_INDShift 					; x 2 or x 16
.08cd	e0 02		cpx #$02			cpx 	#2
.08cf	f0 09		beq $08da			beq 	_INDNotHex
.08d1	20 f4 08	jsr $08f4			jsr 	_INDShift
.08d4	20 f4 08	jsr $08f4			jsr 	_INDShift
.08d7	20 f4 08	jsr $08f4			jsr 	_INDShift
.08da					_INDNotHex:
.08da	05 2a		ora $2a				ora 	zTemp0 						; or digit into result
.08dc	85 2a		sta $2a				sta 	zTemp0
.08de	20 79 12	jsr $1279			jsr 	GetNext 					; consume
.08e1	e6 2d		inc $2d				inc 	zTemp1+1 					; bump count
.08e3	80 d9		bra $08be			bra 	_INDLoop
.08e5					_INDDone:
.08e5	a5 2d		lda $2d				lda 	zTemp1+1 					; done at least 1 ?
.08e7	f0 08		beq $08f1			beq 	_INDError
.08e9	a4 2b		ldy $2b				ldy 	zTemp0+1 					; push constant
.08eb	a5 2a		lda $2a				lda 	zTemp0
.08ed	20 16 0a	jsr $0a16			jsr 	PushIntegerYA
.08f0	60		rts				rts
.08f1					_INDError:
.08f1	4c 8c 17	jmp $178c		jmp	ErrorV_syntax
.08f4					_INDShift:
.08f4	06 2a		asl $2a				asl 	zTemp0
.08f6	26 2b		rol $2b				rol 	zTemp0+1
.08f8	60		rts				rts
.08f9					GetLineNumber:
.08f9	ac 01 04	ldy $0401			ldy 	currentLineNumber+1
.08fc	ad 00 04	lda $0400			lda 	currentLineNumber
.08ff	60		rts				rts
.0900					WriteCodeByte:
.0900	48		pha				pha 								; save on stack
.0901	da		phx				phx
.0902	5a		phy				phy
.0903	aa		tax				tax
.0904	a9 05		lda #$05			lda 	#BLC_WRITEOUT
.0906	20 13 0a	jsr $0a13			jsr 	CallAPIHandler
.0909	7a		ply				ply 								; restore from stack
.090a	fa		plx				plx
.090b	68		pla				pla
.090c	60		rts				rts
.090d					PrintCharacter
.090d	48		pha				pha
.090e	da		phx				phx
.090f	5a		phy				phy
.0910	aa		tax				tax
.0911	a9 06		lda #$06			lda 	#BLC_PRINTCHAR
.0913	20 13 0a	jsr $0a13			jsr 	CallAPIHandler
.0916	7a		ply				ply
.0917	fa		plx				plx
.0918	68		pla				pla
.0919	60		rts				rts
.091a					ProcessNewLine:
.091a	86 2a		stx $2a				stx 	zTemp0 						; save address in zTemp0
.091c	84 2b		sty $2b				sty 	zTemp0+1
.091e	18		clc				clc 								; set the srcPtr to the start of the actual code (e.g. offset 4)
.091f	8a		txa				txa
.0920	69 04		adc #$04			adc 	#4
.0922	85 24		sta $24				sta 	srcPtr
.0924	98		tya				tya
.0925	69 00		adc #$00			adc 	#0
.0927	85 25		sta $25				sta 	srcPtr+1
.0929	a0 02		ldy #$02			ldy 	#2							; read and save line number
.092b	b1 2a		lda ($2a),y			lda 	(zTemp0),y
.092d	8d 00 04	sta $0400			sta 	currentLineNumber
.0930	c8		iny				iny
.0931	b1 2a		lda ($2a),y			lda 	(zTemp0),y
.0933	8d 01 04	sta $0401			sta 	currentLineNumber+1
.0936	60		rts				rts
.0937					BufferClear:
.0937	9c 02 04	stz $0402			stz 	bufferSize
.093a	60		rts				rts
.093b					BufferWrite:
.093b	da		phx				phx
.093c	ae 02 04	ldx $0402			ldx 	bufferSize
.093f	9d 03 04	sta $0403,x			sta 	dataBuffer,x
.0942	ee 02 04	inc $0402			inc 	bufferSize
.0945	fa		plx				plx
.0946	60		rts				rts
.0947					BufferOutput:
.0947	ad 02 04	lda $0402			lda 	bufferSize
.094a	20 00 09	jsr $0900			jsr 	WriteCodeByte
.094d	a2 00		ldx #$00			ldx 	#0
.094f					_BOLoop:
.094f	ec 02 04	cpx $0402			cpx 	bufferSize
.0952	f0 09		beq $095d			beq 	_BOExit
.0954	bd 03 04	lda $0403,x			lda 	dataBuffer,x
.0957	20 00 09	jsr $0900			jsr 	WriteCodeByte
.095a	e8		inx				inx
.095b	80 f2		bra $094f			bra 	_BOLoop
.095d					_BOExit:
.095d	60		rts				rts
.0402					bufferSize:
>0402							.fill 	1
.0403					dataBuffer:
>0403							.fill 	256
.095e					CheckNextComma:
.095e	a9 2c		lda #$2c			lda	 	#","
.0960	80 06		bra $0968			bra 	CheckNextA
.0962					CheckNextRParen:
.0962	a9 29		lda #$29			lda	 	#")"
.0964	80 02		bra $0968			bra 	CheckNextA
.0966					CheckNextLParen:
.0966	a9 28		lda #$28			lda 	#"("
.0968					CheckNextA:
.0968	8d 03 05	sta $0503			sta 	checkCharacter 				; save test character
.096b					_CNALoop:
.096b	20 84 12	jsr $1284			jsr 	GetNextNonSpace 			; get next skipping spaces.
.096e	cd 03 05	cmp $0503			cmp 	checkCharacter 				; matches ?
.0971	f0 03		beq $0976			beq 	_CNAExit
.0973	4c 8c 17	jmp $178c		jmp	ErrorV_syntax
.0976					_CNAExit:
.0976	60		rts				rts
.0503					checkCharacter:
>0503							.fill 	1
.0977					StartCompiler:
.0977	86 2a		stx $2a				stx 	zTemp0 						; access API
.0979	84 2b		sty $2b				sty 	zTemp0+1
.097b	a0 0b		ldy #$0b			ldy 	#CompilerErrorHandler >> 8 	; set error handler to compiler one.
.097d	a2 cf		ldx #$cf			ldx 	#CompilerErrorHandler & $FF
.097f	20 65 17	jsr $1765			jsr 	SetErrorHandler
.0982	a0 01		ldy #$01			ldy 	#1 							; copy API vector
.0984	b2 2a		lda ($2a)			lda 	(zTemp0)
.0986	8d 05 05	sta $0505			sta 	APIVector
.0989	b1 2a		lda ($2a),y			lda 	(zTemp0),y
.098b	8d 06 05	sta $0506			sta 	APIVector+1
.098e	c8		iny				iny 								; copy data area range.
.098f	b1 2a		lda ($2a),y			lda 	(zTemp0),y
.0991	8d 07 05	sta $0507			sta 	compilerStartHigh
.0994	c8		iny				iny
.0995	b1 2a		lda ($2a),y			lda 	(zTemp0),y
.0997	8d 08 05	sta $0508			sta 	compilerEndHigh
.099a	ba		tsx				tsx 								; save stack pointer
.099b	8e 04 05	stx $0504			stx 	compilerSP
.099e	20 08 16	jsr $1608			jsr 	STRReset 					; reset storage (line#, variable)
.09a1	a9 00		lda #$00			lda 	#BLC_OPENIN					; reset data input
.09a3	20 13 0a	jsr $0a13			jsr 	CallAPIHandler
.09a6	a9 03		lda #$03			lda 	#BLC_RESETOUT 				; reset data output.
.09a8	20 13 0a	jsr $0a13			jsr 	CallAPIHandler
.09ab	a9 d5		lda #$d5			lda 	#PCD_CMD_VARSPACE
.09ad	20 00 09	jsr $0900			jsr 	WriteCodeByte
.09b0	a9 00		lda #$00			lda 	#0
.09b2	20 00 09	jsr $0900			jsr 	WriteCodeByte
.09b5	20 00 09	jsr $0900			jsr 	WriteCodeByte
.09b8					MainCompileLoop:
.09b8	a9 02		lda #$02			lda 	#BLC_READIN 				; read next line into the buffer.
.09ba	20 13 0a	jsr $0a13			jsr 	CallAPIHandler
.09bd	90 31		bcc $09f0			bcc 	SaveCodeAndExit 			; end of source.
.09bf	20 1a 09	jsr $091a			jsr 	ProcessNewLine 				; set up pointer and line number.
.09c2	20 f9 08	jsr $08f9			jsr 	GetLineNumber 				; get line #
.09c5	20 f2 13	jsr $13f2			jsr 	STRMarkLine 				; remember the code position and number of this line.
.09c8	a9 a6		lda #$a6			lda 	#PCD_NEWCMD_LINE 			; generate new command line
.09ca	20 00 09	jsr $0900			jsr 	WriteCodeByte
.09cd					_MCLSameLine:
.09cd	20 84 12	jsr $1284			jsr 	GetNextNonSpace 			; get the first character.
.09d0	f0 e6		beq $09b8			beq 	MainCompileLoop 			; end of line, get next line.
.09d2	c9 3a		cmp #$3a			cmp 	#":"						; if : then loop back.
.09d4	f0 f7		beq $09cd			beq 	_MCLSameLine
.09d6	c9 00		cmp #$00			cmp 	#0 							; if ASCII then check for implied LET.
.09d8	10 0c		bpl $09e6			bpl 	_MCLCheckAssignment
.09da	a2 3c		ldx #$3c			ldx 	#CommandTables & $FF 		; do command tables.
.09dc	a0 0e		ldy #$0e			ldy 	#CommandTables >> 8
.09de	20 0a 11	jsr $110a			jsr 	GeneratorProcess
.09e1	b0 ea		bcs $09cd			bcs 	_MCLSameLine 				; keep trying to compile the line.
.09e3					_MCLSyntax:
.09e3	4c 8c 17	jmp $178c		jmp	ErrorV_syntax
.09e6					_MCLCheckAssignment:
.09e6	20 9a 12	jsr $129a			jsr 	CharIsAlpha 				; if not alpha then syntax error
.09e9	90 f8		bcc $09e3			bcc 	_MCLSyntax
.09eb	20 c0 13	jsr $13c0			jsr 	CommandLETHaveFirst  		; LET first character, do assign
.09ee	80 dd		bra $09cd			bra		_MCLSameLine 				; loop back.
.09f0					SaveCodeAndExit:
.09f0	a9 01		lda #$01			lda 	#BLC_CLOSEIN				; finish input.
.09f2	20 13 0a	jsr $0a13			jsr 	CallAPIHandler
.09f5	a9 ff		lda #$ff			lda 	#$FF 						; fake line number $FFFF for forward THEN.
.09f7	a8		tay				tay
.09f8	20 f2 13	jsr $13f2			jsr 	STRMarkLine
.09fb	a9 c5		lda #$c5			lda 	#PCD_EXIT 					; add an END
.09fd	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0a00	a9 ff		lda #$ff			lda 	#$FF 						; add end marker
.0a02	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0a05	20 2c 0d	jsr $0d2c			jsr 	FixBranches 				; fix up GOTO/GOSUB etc.
.0a08	a9 04		lda #$04			lda 	#BLC_CLOSEOUT 				; close output store
.0a0a	20 13 0a	jsr $0a13			jsr 	CallAPIHandler
.0a0d	18		clc				clc 								; CC = success
.0a0e					ExitCompiler:
.0a0e	ae 04 05	ldx $0504			ldx 	compilerSP 					; reload SP and exit.
.0a11	9a		txs				txs
.0a12	60		rts				rts
.0a13					CallAPIHandler:
.0a13	6c 05 05	jmp ($0505)			jmp 	(APIVector)
.0504					compilerSP:
>0504							.fill 	1
.0505					APIVector:
>0505							.fill 	2
.0507					compilerStartHigh:
>0507							.fill 	1
.0508					compilerEndHigh:
>0508							.fill 	1
.0a16					PushIntegerYA:
.0a16	c0 00		cpy #$00			cpy 	#0 							; 0-255
.0a18	f0 0f		beq $0a29			beq 	PushIntegerA
.0a1a	48		pha				pha
.0a1b	a9 cd		lda #$cd			lda 	#PCD_CMD_WORD 				; send .word
.0a1d	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0a20	68		pla				pla 								; then LSB
.0a21	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0a24	98		tya				tya 								; then MSB
.0a25	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0a28	60		rts				rts
.0a29					PushIntegerA:
.0a29	c9 40		cmp #$40			cmp 	#64 						; if > 64 send byte as is
.0a2b	90 07		bcc $0a34			bcc 	_PIWriteA
.0a2d	48		pha				pha
.0a2e	a9 cc		lda #$cc			lda 	#PCD_CMD_BYTE 				; send .byte
.0a30	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0a33	68		pla				pla
.0a34					_PIWriteA:
.0a34	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0a37	60		rts				rts
.0a38					PushFloatCommand:
.0a38	a9 ce		lda #$ce			lda 	#PCD_CMD_FLOAT 				; write CMD_FLOAT
.0a3a	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0a3d	b5 6c		lda $6c,x			lda 	NSExponent,x 				; and the data
.0a3f	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0a42	b5 3c		lda $3c,x			lda 	NSMantissa0,x
.0a44	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0a47	b5 48		lda $48,x			lda 	NSMantissa1,x
.0a49	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0a4c	b5 54		lda $54,x			lda 	NSMantissa2,x
.0a4e	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0a51	b5 30		lda $30,x			lda 	NSStatus,x 					; with sign packed in byte 3 MSB
.0a53	29 80		and #$80			and 	#$80
.0a55	15 60		ora $60,x			ora 	NSMantissa3,x
.0a57	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0a5a	60		rts				rts
.0a5b					CreateVariableRecord:
.0a5b	48		pha				pha
.0a5c	ad 13 05	lda $0513			lda 	freeVariableMemory 		; push current free address on stack.
.0a5f	48		pha				pha
.0a60	ad 14 05	lda $0514			lda 	freeVariableMemory+1
.0a63	48		pha				pha
.0a64	ad 11 05	lda $0511			lda 	variableListEnd  		; copy end of list to zTemp0
.0a67	85 2a		sta $2a				sta 	zTemp0
.0a69	ad 12 05	lda $0512			lda 	variableListEnd+1
.0a6c	85 2b		sta $2b				sta 	zTemp0+1
.0a6e	a9 06		lda #$06			lda 	#6 						; default size if 6 (offset link 3 bytes)
.0a70	92 2a		sta ($2a)			sta 	(zTemp0)
.0a72	98		tya				tya
.0a73	a0 02		ldy #$02			ldy 	#2 						; write out the name.
.0a75	91 2a		sta ($2a),y			sta 	(zTemp0),y
.0a77	88		dey				dey
.0a78	8a		txa				txa
.0a79	91 2a		sta ($2a),y			sta 	(zTemp0),y
.0a7b	a0 03		ldy #$03			ldy 	#3 						; write out the address.
.0a7d	ad 13 05	lda $0513			lda 	freeVariableMemory
.0a80	91 2a		sta ($2a),y			sta 	(zTemp0),y
.0a82	c8		iny				iny
.0a83	ad 14 05	lda $0514			lda 	freeVariableMemory+1
.0a86	91 2a		sta ($2a),y			sta 	(zTemp0),y
.0a88	a0 06		ldy #$06			ldy 	#6 						; write EOL marker next record.
.0a8a	a9 00		lda #$00			lda 	#0
.0a8c	91 2a		sta ($2a),y			sta 	(zTemp0),y
.0a8e	18		clc				clc
.0a8f	b2 2a		lda ($2a)			lda 	(zTemp0) 				; add offset to variableListEnd
.0a91	6d 11 05	adc $0511			adc  	variableListEnd
.0a94	8d 11 05	sta $0511			sta 	variableListEnd
.0a97	90 03		bcc $0a9c			bcc 	_CVNoCarry2
.0a99	ee 12 05	inc $0512			inc 	variableListEnd+1
.0a9c					_CVNoCarry2:
.0a9c	7a		ply				ply
.0a9d	fa		plx				plx
.0a9e	68		pla				pla
.0a9f	60		rts				rts
.0aa0					SetVariableRecordToCodePosition:
.0aa0	48		pha				pha
.0aa1	5a		phy				phy
.0aa2	a0 03		ldy #$03			ldy 	#3
.0aa4	a5 29		lda $29				lda 	objPtr+1
.0aa6	91 2a		sta ($2a),y			sta 	(zTemp0),y
.0aa8	c8		iny				iny
.0aa9	a5 28		lda $28				lda 	objPtr
.0aab	91 2a		sta ($2a),y			sta 	(zTemp0),y
.0aad	7a		ply				ply
.0aae	68		pla				pla
.0aaf	60		rts				rts
.0ab0					AllocateBytesForType:
.0ab0	48		pha				pha
.0ab1	da		phx				phx
.0ab2	a2 02		ldx #$02			ldx 	#2 						; bytes to allocate
.0ab4	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16
.0ab6	c9 00		cmp #$00			cmp 	#NSSIFloat
.0ab8	d0 02		bne $0abc			bne 	_CVNotFloat
.0aba	a2 06		ldx #$06			ldx 	#6
.0abc					_CVNotFloat:
.0abc	8a		txa				txa 							; add 6 or 2 to the free memory pointer.
.0abd	18		clc				clc
.0abe	6d 13 05	adc $0513			adc 	freeVariableMemory
.0ac1	8d 13 05	sta $0513			sta 	freeVariableMemory
.0ac4	90 03		bcc $0ac9			bcc 	_CVNoCarry1
.0ac6	ee 14 05	inc $0514			inc 	freeVariableMemory+1
.0ac9					_CVNoCarry1:
.0ac9	fa		plx				plx
.0aca	68		pla				pla
.0acb	60		rts				rts
.0acc					CommandDATA:
.0acc	20 37 09	jsr $0937			jsr 	BufferClear 				; copy it to the buffer
.0acf	20 6b 12	jsr $126b			jsr 	LookNextNonSpace
.0ad2					_CTDataLoop:
.0ad2	20 68 12	jsr $1268			jsr 	LookNext 					; reached EOL
.0ad5	f0 08		beq $0adf			beq 	_CTDataDone
.0ad7	20 3b 09	jsr $093b			jsr 	BufferWrite 				; write and consume
.0ada	20 79 12	jsr $1279			jsr 	GetNext
.0add	80 f3		bra $0ad2			bra 	_CTDataLoop
.0adf					_CTDataDone:
.0adf	a9 d0		lda #$d0			lda 	#PCD_CMD_DATA 				; output command and buffer
.0ae1	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0ae4	20 47 09	jsr $0947			jsr 	BufferOutput
.0ae7	60		rts				rts
.0ae8					CommandDEF:
.0ae8	a9 00		lda #$00			lda 	#0 							; constant 0 (for GOTOZ)
.0aea	20 29 0a	jsr $0a29			jsr 	PushIntegerA
.0aed	20 89 13	jsr $1389			jsr 	CompileGotoEOL 				; compile skip over DEF
.0af0	a9 a5		lda #$a5			lda 	#C64_FN
.0af2	20 68 09	jsr $0968			jsr 	CheckNextA
.0af5	20 84 12	jsr $1284			jsr 	GetNextNonSpace				; get variable name w/type must be array e.g. DEF FNx(a)
.0af8	20 e9 12	jsr $12e9			jsr 	ExtractVariableName
.0afb	8a		txa				txa
.0afc	10 51		bpl $0b4f			bpl 	_CDError
.0afe	8a		txa				txa 								; convert to a function reference - bit 7:0 clear bit 7:1 set
.0aff	29 7f		and #$7f			and 	#$7F
.0b01	aa		tax				tax
.0b02	98		tya				tya
.0b03	09 80		ora #$80			ora 	#$80
.0b05	a8		tay				tay
.0b06	20 d0 0c	jsr $0cd0			jsr 	FindVariable				; does it already exist ?
.0b09	b0 44		bcs $0b4f			bcs 	_CDError 					; if so, that's an error.
.0b0b	20 5b 0a	jsr $0a5b			jsr 	CreateVariableRecord 		; create the record for it & put the data in it.
.0b0e	20 a0 0a	jsr $0aa0			jsr 	SetVariableRecordToCodePosition
.0b11	20 84 12	jsr $1284			jsr 	GetNextNonSpace
.0b14	20 c5 15	jsr $15c5			jsr 	GetReferenceTerm 			; get var ref, not array
.0b17	c9 00		cmp #$00			cmp 	#0
.0b19	30 34		bmi $0b4f			bmi 	_CDError
.0b1b	8d 09 05	sta $0509			sta 	defType 					; save type
.0b1e	8e 0a 05	stx $050a			stx 	defVariable 				; save var ref
.0b21	8c 0b 05	sty $050b			sty 	defVariable+1
.0b24	29 40		and #$40			and 	#NSSString 					; only numbers.
.0b26	d0 27		bne $0b4f			bne 	_CDError
.0b28	20 62 09	jsr $0962			jsr 	CheckNextRParen 			; check )
.0b2b	a9 b2		lda #$b2			lda 	#C64_EQUAL
.0b2d	20 68 09	jsr $0968			jsr 	CheckNextA 					; check =
.0b30	18		clc				clc 								; if this is DEF FNxx(A), read A
.0b31	20 52 0b	jsr $0b52			jsr 	CDReadWriteVariable
.0b34	a9 bf		lda #$bf			lda 	#(PCD_SWAP) & $FF
.0b36	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0b39	38		sec				sec
.0b3a	20 52 0b	jsr $0b52			jsr 	CDReadWriteVariable 		; A is now updated
.0b3d	20 16 0c	jsr $0c16			jsr 	CompileExpressionAt0 		; the actual body of the function.
.0b40	a9 bf		lda #$bf			lda 	#(PCD_SWAP) & $FF
.0b42	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0b45	38		sec				sec
.0b46	20 52 0b	jsr $0b52			jsr 	CDReadWriteVariable 		; A is now reset to its old value
.0b49	a9 98		lda #$98			lda 	#(PCD_RETURN) & $FF
.0b4b	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0b4e	60		rts				rts
.0b4f					_CDError:
.0b4f	4c 8c 17	jmp $178c		jmp	ErrorV_syntax
.0b52					CDReadWriteVariable:
.0b52	ac 0b 05	ldy $050b			ldy 	defVariable+1 				; set up YX
.0b55	ae 0a 05	ldx $050a			ldx 	defVariable
.0b58	ad 09 05	lda $0509			lda 	defType
.0b5b	20 77 15	jsr $1577			jsr 	GetSetVariable
.0b5e	60		rts				rts
.0509					defType:
>0509							.fill 	1
.050a					defVariable:
>050a							.fill 	2
.0b5f					CommandDIM:
.0b5f	20 84 12	jsr $1284			jsr 	GetNextNonSpace 			; get the first non space character
.0b62	20 e9 12	jsr $12e9			jsr 	ExtractVariableName 		; variable name to XY
.0b65	da		phx				phx 								; save name with type bits.
.0b66	e0 00		cpx #$00			cpx 	#0 							; check it is an array.
.0b68	10 37		bpl $0ba1			bpl 	_CDError
.0b6a	20 d0 0c	jsr $0cd0			jsr 	FindVariable	 			; see if already exist
.0b6d	b0 35		bcs $0ba4			bcs 	_CDRedefine 				; it still exists.
.0b6f	20 5b 0a	jsr $0a5b			jsr 	CreateVariableRecord 		; create the basic variable
.0b72	20 b0 0a	jsr $0ab0			jsr 	AllocateBytesForType 		; allocate memory for it
.0b75	68		pla				pla 								; restore type bits
.0b76	5a		phy				phy 								; save the address of the basic storage
.0b77	da		phx				phx
.0b78	48		pha				pha
.0b79	20 a7 0b	jsr $0ba7			jsr 	OutputIndexGroup 			; create an index group and generate them, preserving type data
.0b7c	68		pla				pla
.0b7d	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16 		; 2 bit type data
.0b7f	20 29 0a	jsr $0a29			jsr 	PushIntegerA 				; push that type data out.
.0b82	a9 cb		lda #$cb			lda 	#(PCD_DIM) >> 8
.0b84	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0b87	a9 81		lda #$81			lda 	#(PCD_DIM) & $FF
.0b89	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0b8c	fa		plx				plx 								; restore address
.0b8d	7a		ply				ply
.0b8e	a9 20		lda #$20			lda 	#NSSIFloat+NSSIInt16 		; pretend it is an int16 reference.
.0b90	38		sec				sec
.0b91	20 77 15	jsr $1577			jsr 	GetSetVariable 				; store the address in the reference to the array structure.
.0b94	20 6b 12	jsr $126b			jsr 	LookNextNonSpace 			; , follows ?
.0b97	c9 2c		cmp #$2c			cmp 	#","
.0b99	d0 05		bne $0ba0			bne 	_CDExit
.0b9b	20 79 12	jsr $1279			jsr 	GetNext 					; consume comma
.0b9e	80 bf		bra $0b5f			bra 	CommandDIM 					; do another DIM
.0ba0					_CDExit:
.0ba0	60		rts				rts
.0ba1					_CDError:
.0ba1	4c 8c 17	jmp $178c		jmp	ErrorV_syntax
.0ba4					_CDRedefine:
.0ba4	4c 54 18	jmp $1854		jmp	ErrorV_redefine
.0ba7					OutputIndexGroup:
.0ba7	9c 0c 05	stz $050c			stz 	IndexCount 					; count of number of indices.
.0baa					_OIGNext:
.0baa	20 16 0c	jsr $0c16			jsr 	CompileExpressionAt0 		; get a dimension
.0bad	29 40		and #$40			and 	#NSSTypeMask 				; check it is numeric
.0baf	c9 00		cmp #$00			cmp 	#NSSIFloat
.0bb1	d0 19		bne $0bcc			bne 	_OIGType
.0bb3	ee 0c 05	inc $050c			inc 	IndexCount 					; bump the counter.
.0bb6	20 6b 12	jsr $126b			jsr 	LookNextNonSpace 			; does a , follow ?
.0bb9	c9 2c		cmp #$2c			cmp 	#","
.0bbb	d0 05		bne $0bc2			bne 	_OIGCheckEnd
.0bbd	20 79 12	jsr $1279			jsr 	GetNext 					; consume comma
.0bc0	80 e8		bra $0baa			bra 	_OIGNext 					; get next dimension
.0bc2					_OIGCheckEnd:
.0bc2	20 62 09	jsr $0962			jsr 	CheckNextRParen 			; check and consume )
.0bc5	ad 0c 05	lda $050c			lda 	IndexCount
.0bc8	20 29 0a	jsr $0a29			jsr 	PushIntegerA 				; compile the dimension count.
.0bcb	60		rts				rts
.0bcc					_OIGType:
.0bcc	4c 9c 17	jmp $179c		jmp	ErrorV_type
.050c					IndexCount:
>050c							.fill 	1
.0bcf					CompilerErrorHandler:
.0bcf	68		pla				pla
.0bd0	7a		ply				ply
.0bd1	85 2a		sta $2a				sta 	zTemp0
.0bd3	84 2b		sty $2b				sty 	zTemp0+1
.0bd5	a2 00		ldx #$00			ldx 	#0 							; output msg to channel #0
.0bd7	a0 01		ldy #$01			ldy 	#1
.0bd9					_EHDisplayMsg:
.0bd9	b1 2a		lda ($2a),y			lda 	(zTemp0),y
.0bdb	20 0d 09	jsr $090d			jsr 	PrintCharacter
.0bde	c8		iny				iny
.0bdf	b1 2a		lda ($2a),y			lda 	(zTemp0),y
.0be1	d0 f6		bne $0bd9			bne 	_EHDisplayMsg
.0be3	a9 20		lda #$20			lda 	#32
.0be5	20 0d 09	jsr $090d			jsr 	PrintCharacter
.0be8	a9 40		lda #$40			lda 	#64
.0bea	20 0d 09	jsr $090d			jsr 	PrintCharacter
.0bed	a2 00		ldx #$00			ldx 	#0 							; convert line# to string
.0bef	20 e6 1e	jsr $1ee6			jsr 	FloatSetByte
.0bf2	20 f9 08	jsr $08f9			jsr 	GetLineNumber
.0bf5	95 3c		sta $3c,x			sta 	NSMantissa0,x
.0bf7	98		tya				tya
.0bf8	95 48		sta $48,x			sta 	NSMantissa1,x
.0bfa	20 cc 1d	jsr $1dcc			jsr 	FloatToString
.0bfd	a0 00		ldy #$00			ldy 	#0 							; display that string.
.0bff	a2 00		ldx #$00			ldx 	#0
.0c01					_EHDisplayLine:
.0c01	b9 3e 05	lda $053e,y			lda 	decimalBuffer,y
.0c04	20 0d 09	jsr $090d			jsr 	PrintCharacter
.0c07	c8		iny				iny
.0c08	b9 3e 05	lda $053e,y			lda 	decimalBuffer,y
.0c0b	d0 f4		bne $0c01			bne 	_EHDisplayLine
.0c0d	a9 0d		lda #$0d			lda 	#13
.0c0f	20 0d 09	jsr $090d			jsr 	PrintCharacter
.0c12	38		sec				sec 								; CS = error
.0c13	4c 0e 0a	jmp $0a0e			jmp 	ExitCompiler
.0c16					CompileExpressionAt0:
.0c16	a9 00		lda #$00			lda 	#0
.0c18					CompileExpressionAtA:
.0c18	48		pha				pha  								; save level
.0c19	20 4f 16	jsr $164f			jsr 	CompileTerm 				; compile a term.
.0c1c	fa		plx				plx 								; get level back into X
.0c1d					_ECALoop:
.0c1d	48		pha				pha 								; save type on stack.
.0c1e	20 6b 12	jsr $126b			jsr 	LookNextNonSpace 			; get the next character
.0c21	c9 aa		cmp #$aa			cmp 	#C64_PLUS 					; go to be + ... < in the C64 code.
.0c23	90 04		bcc $0c29			bcc 	_ECAExit
.0c25	c9 b4		cmp #$b4			cmp 	#C64_LESS+1
.0c27	90 02		bcc $0c2b			bcc 	_ECAHaveToken
.0c29					_ECAExit:
.0c29	68		pla				pla 								; throw type off stack
.0c2a	60		rts				rts
.0c2b					_ECAHaveToken:
.0c2b	86 2a		stx $2a				stx 	zTemp0 						; save current precedence in zTemp0
.0c2d	aa		tax				tax 								; X contains the operator token
.0c2e	bd 19 0c	lda $0c19,x			lda 	PrecedenceTable-C64_PLUS,x  ; read precedence.
.0c31	c5 2a		cmp $2a				cmp 	zTemp0 						; if < then exit
.0c33	90 f4		bcc $0c29			bcc 	_ECAExit
.0c35	85 2b		sta $2b				sta 	zTemp0+1 					; save the precedence of the operator.
.0c37	20 79 12	jsr $1279			jsr 	GetNext 					; consume the token.
.0c3a	e0 b1		cpx #$b1			cpx 	#C64_GREATER				; checks for < or > which could be two character tokens
.0c3c	f0 11		beq $0c4f			beq 	_ECAGreaterCheck
.0c3e	e0 b3		cpx #$b3			cpx 	#C64_LESS
.0c40	d0 1a		bne $0c5c			bne 	_ECAHaveFullToken
.0c42	20 68 12	jsr $1268			jsr 	LookNext 					; checks for < (<= or <>)
.0c45	c9 b1		cmp #$b1			cmp 	#C64_GREATER 				; <> is 2 on from <
.0c47	f0 0e		beq $0c57			beq	 	_ECAToNotEqual
.0c49	c9 b2		cmp #$b2			cmp 	#C64_EQUAL 					; <= is 3 on from <
.0c4b	d0 0f		bne $0c5c			bne 	_ECAHaveFullToken
.0c4d	80 07		bra $0c56			bra 	_ECAAddEqual
.0c4f					_ECAGreaterCheck:
.0c4f	20 68 12	jsr $1268			jsr 	LookNext
.0c52	c9 b2		cmp #$b2			cmp 	#C64_EQUAL
.0c54	d0 06		bne $0c5c			bne 	_ECAHaveFullToken
.0c56					_ECAAddEqual:
.0c56	e8		inx				inx 								; > => >= and < to <= is three tokens on.
.0c57					_ECAToNotEqual:
.0c57	e8		inx				inx
.0c58	e8		inx				inx
.0c59	20 79 12	jsr $1279			jsr 	GetNext 					; consume the = or > in >= <= <>
.0c5c					_ECAHaveFullToken:
.0c5c	e0 aa		cpx #$aa			cpx 	#C64_PLUS
.0c5e	d0 0a		bne $0c6a			bne 	_ECANotConcat
.0c60	68		pla				pla 								; get type back
.0c61	48		pha				pha
.0c62	29 40		and #$40			and 	#NSSTypeMask
.0c64	c9 40		cmp #$40			cmp 	#NSSString
.0c66	d0 02		bne $0c6a			bne 	_ECANotConcat
.0c68	a2 e0		ldx #$e0			ldx 	#(PCD_CONCAT-(PCD_PLUS-C64_PLUS)) & $FF
.0c6a					_ECANotConcat:
.0c6a	da		phx				phx 								; save operator on the stack
.0c6b	a6 2a		ldx $2a				ldx 	zTemp0 						; push current precedence on the stack
.0c6d	da		phx				phx
.0c6e	a5 2b		lda $2b				lda 	zTemp0+1 					; get precedence of operator
.0c70	1a		inc a				inc 	a
.0c71	20 18 0c	jsr $0c18			jsr 	CompileExpressionAtA 		; and compile at the next level up.
.0c74	85 2a		sta $2a				sta 	zTemp0 						; save type in zTemp0
.0c76	fa		plx				plx 								; restore current precedence in X
.0c77	68		pla				pla 								; restore operator
.0c78	85 2b		sta $2b				sta 	zTemp0+1 					; save it in zTemp0+1.
.0c7a	c9 b1		cmp #$b1			cmp 	#C64_GREATER 				; check for not compare
.0c7c	90 17		bcc $0c95			bcc 	_ECANotCompare
.0c7e	c9 b7		cmp #$b7			cmp 	#C64_GREATER+6
.0c80	b0 13		bcs $0c95			bcs 	_ECANotCompare
.0c82	7a		ply				ply 								; get type into Y
.0c83	5a		phy				phy
.0c84	48		pha				pha 								; save operator
.0c85	98		tya				tya 								; get type
.0c86	a0 94		ldy #$94			ldy 	#PCD_SCMD_CMP 				; Y is the token to use
.0c88	29 40		and #$40			and 	#NSSTypeMask
.0c8a	c9 40		cmp #$40			cmp 	#NSSString
.0c8c	f0 02		beq $0c90			beq 	_ECANotString
.0c8e	a0 a3		ldy #$a3			ldy 	#PCD_FCMD_CMP
.0c90					_ECANotString:
.0c90	98		tya				tya									; output token Y
.0c91	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0c94	68		pla				pla 								; restore operator.
.0c95					_ECANotCompare:
.0c95	18		clc				clc 								; convert to P-Code and compile.
.0c96	69 d6		adc #$d6			adc 	#(PCD_PLUS-C64_PLUS) & $FF 	; it might be invalid at this point
.0c98	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0c9b	68		pla				pla 								; type of current result
.0c9c	45 2a		eor $2a				eor 	zTemp0 						; check compatible with r-expr type
.0c9e	29 40		and #$40			and 	#NSSTypeMask 				; the types should be compatible, only interested in number vs float
.0ca0	d0 19		bne $0cbb			bne		_ECAType
.0ca2	a5 2a		lda $2a				lda 	zTemp0 						; get type back
.0ca4	c9 40		cmp #$40			cmp 	#NSSString 					; if it is a number, then all operators work.
.0ca6	d0 18		bne $0cc0			bne 	_ECAGoLoop
.0ca8	a5 2b		lda $2b				lda 	zTemp0+1 					; check operator is + or comparator
.0caa	c9 e0		cmp #$e0			cmp 	#(PCD_CONCAT-(PCD_PLUS-C64_PLUS)) & $FF
.0cac	f0 10		beq $0cbe			beq 	_ECAOkayString 				; (this is post conversion)
.0cae	c9 b1		cmp #$b1			cmp 	#C64_GREATER 				; must be a comparison then.
.0cb0	90 09		bcc $0cbb			bcc 	_ECAType
.0cb2	c9 b7		cmp #$b7			cmp 	#C64_LESS+1+3 				; the +3 is because of >= <= <>
.0cb4	b0 05		bcs $0cbb			bcs 	_ECAType
.0cb6	a9 00		lda #$00			lda 	#NSSIFloat 					; compare returns number.
.0cb8	4c 1d 0c	jmp $0c1d			jmp 	_ECALoop
.0cbb					_ECAType:
.0cbb	4c 9c 17	jmp $179c		jmp	ErrorV_type
.0cbe					_ECAOkayString:
.0cbe	a9 40		lda #$40			lda 	#NSSString 					; current is string, go round again.
.0cc0					_ECAGoLoop:
.0cc0	4c 1d 0c	jmp $0c1d			jmp 	_ECALoop
.0cc3					PrecedenceTable:
>0cc3	03						.byte 	3 					; '+'
>0cc4	03						.byte 	3 					; '-'
>0cc5	04						.byte 	4 					; '*'
>0cc6	04						.byte 	4 					; '/'
>0cc7	05						.byte 	5 					; '^'
>0cc8	01						.byte 	1 					; 'and'
>0cc9	00						.byte 	0 					; 'or'
>0cca	02						.byte 	2 					; '>'
>0ccb	02						.byte 	2 					; '='
>0ccc	02						.byte 	2 					; '<'
>0ccd	02						.byte 	2 					; '>='
>0cce	02						.byte 	2 					; '<='
>0ccf	02						.byte 	2 					; '<>'
.0cd0					FindVariable:
.0cd0	86 2c		stx $2c				stx 	zTemp1 						; save name.
.0cd2	84 2d		sty $2d				sty 	zTemp1+1
.0cd4					_IVCheckSpecial:
.0cd4	c0 09		cpy #$09			cpy 	#$09	 					; both end $09 e.g. I
.0cd6	d0 18		bne $0cf0			bne 	_IVStandard
.0cd8	e0 14		cpx #$14			cpx 	#$14 						; TI is $14
.0cda	f0 0c		beq $0ce8			beq 	_IVTIFloat
.0cdc	e0 54		cpx #$54			cpx 	#$54 						; TI$ is $54
.0cde	d0 10		bne $0cf0			bne 	_IVStandard
.0ce0	a0 c0		ldy #$c0			ldy 	#$C0 						; TI$ returns string $C001
.0ce2	a2 01		ldx #$01			ldx 	#$01
.0ce4	a9 40		lda #$40			lda 	#NSSString
.0ce6	38		sec				sec
.0ce7	60		rts				rts
.0ce8					_IVTIFloat:
.0ce8	a0 80		ldy #$80			ldy 	#$80
.0cea	a2 00		ldx #$00			ldx 	#$00
.0cec	a9 00		lda #$00			lda 	#0
.0cee	38		sec				sec
.0cef	60		rts				rts
.0cf0					_IVStandard:
.0cf0	ad 07 05	lda $0507			lda 	compilerStartHigh			; start scanning from here.
.0cf3	85 2b		sta $2b				sta 	zTemp0+1
.0cf5	64 2a		stz $2a				stz 	zTemp0
.0cf7					_IVCheckLoop:
.0cf7	b2 2a		lda ($2a)			lda 	(zTemp0) 					; finished ?
.0cf9	f0 2b		beq $0d26			beq  	_IVNotFound 				; if so, return with CC.
.0cfb	a0 01		ldy #$01			ldy 	#1 							; match ?
.0cfd	b1 2a		lda ($2a),y			lda 	(zTemp0),y
.0cff	c5 2c		cmp $2c				cmp 	zTemp1
.0d01	d0 07		bne $0d0a			bne	 	_IVNext
.0d03	c8		iny				iny
.0d04	b1 2a		lda ($2a),y			lda 	(zTemp0),y
.0d06	c5 2d		cmp $2d				cmp 	zTemp1+1
.0d08	f0 0d		beq $0d17			beq 	_IVFound
.0d0a					_IVNext:
.0d0a	18		clc				clc
.0d0b	a5 2a		lda $2a				lda 	zTemp0
.0d0d	72 2a		adc ($2a)			adc 	(zTemp0)
.0d0f	85 2a		sta $2a				sta 	zTemp0
.0d11	90 e4		bcc $0cf7			bcc 	_IVCheckLoop
.0d13	e6 2b		inc $2b				inc 	zTemp0+1
.0d15	80 e0		bra $0cf7			bra 	_IVCheckLoop
.0d17					_IVFound:
.0d17	a0 03		ldy #$03			ldy 	#3 							; get address into YX
.0d19	b1 2a		lda ($2a),y			lda 	(zTemp0),y
.0d1b	aa		tax				tax
.0d1c	c8		iny				iny
.0d1d	b1 2a		lda ($2a),y			lda 	(zTemp0),y
.0d1f	48		pha				pha
.0d20	c8		iny				iny
.0d21	b1 2a		lda ($2a),y			lda 	(zTemp0),y
.0d23	7a		ply				ply
.0d24	38		sec				sec
.0d25	60		rts				rts
.0d26					_IVNotFound:
.0d26	a6 2c		ldx $2c				ldx 	zTemp1 						; get variable name back
.0d28	a4 2d		ldy $2d				ldy 	zTemp1+1
.0d2a	18		clc				clc
.0d2b	60		rts				rts
.0d2c					FixBranches:
.0d2c	a9 03		lda #$03			lda 	#BLC_RESETOUT				; back to the start of the *object* code.
.0d2e	20 13 0a	jsr $0a13			jsr 	CallAPIHandler
.0d31					_FBLoop:
.0d31	b2 28		lda ($28)			lda 	(objPtr) 					; get the next one.
.0d33	c9 d1		cmp #$d1			cmp 	#PCD_CMD_GOTO 				; found GOTO or GOSUB, patch up.
.0d35	f0 1a		beq $0d51			beq 	_FBFixGotoGosub
.0d37	c9 d2		cmp #$d2			cmp 	#PCD_CMD_GOSUB
.0d39	f0 16		beq $0d51			beq 	_FBFixGotoGosub
.0d3b	c9 d4		cmp #$d4			cmp 	#PCD_CMD_GOTOCMD_NZ 		; patch the conditional GOTOs for Z/NZ TOS.
.0d3d	f0 12		beq $0d51			beq 	_FBFixGotoGosub
.0d3f	c9 d3		cmp #$d3			cmp 	#PCD_CMD_GOTOCMD_Z
.0d41	f0 0e		beq $0d51			beq 	_FBFixGotoGosub
.0d43	c9 d5		cmp #$d5			cmp 	#PCD_CMD_VARSPACE
.0d45	f0 43		beq $0d8a			beq 	_FBFixVarSpace
.0d47	c9 d6		cmp #$d6			cmp 	#PCD_CMD_RESTORE 			; patch restore.
.0d49	f0 06		beq $0d51			beq 	_FBFixRestore
.0d4b					_FBNext:
.0d4b	20 b2 18	jsr $18b2			jsr 	MoveObjectForward 			; move forward in object code.
.0d4e	90 e1		bcc $0d31			bcc 	_FBLoop 					; not finished
.0d50					_FBExit:
.0d50	60		rts				rts
.0d51					_FBFixGotoGosub:
.0d51					_FBFixRestore:
.0d51	a0 01		ldy #$01			ldy 	#1							; line number in YA
.0d53	b1 28		lda ($28),y			lda 	(objPtr),y
.0d55	48		pha				pha
.0d56	c8		iny				iny
.0d57	b1 28		lda ($28),y			lda 	(objPtr),y
.0d59	a8		tay				tay
.0d5a	68		pla				pla
.0d5b	20 1b 14	jsr $141b			jsr 	STRFindLine			 		; find where it is YA
.0d5e	90 0c		bcc $0d6c			bcc 	_FBFFound 					; not found, so must be >
.0d60	48		pha				pha
.0d61	b2 28		lda ($28)			lda 	(objPtr) 					; which is a fail if not CMD_GOTOCMD_Z
.0d63	c9 d3		cmp #$d3			cmp 	#PCD_CMD_GOTOCMD_Z 			; or RESTORE. These go to the next line
.0d65	f0 04		beq $0d6b			beq 	_FBFAllowZero 				; after ; for IF forward scanning, and
.0d67	c9 d6		cmp #$d6			cmp 	#PCD_CMD_RESTORE 			; because RESTORE <n> <n> is optional.
.0d69	d0 0f		bne $0d7a			bne 	_FBFFail
.0d6b					_FBFAllowZero:
.0d6b	68		pla				pla
.0d6c					_FBFFound:
.0d6c	20 6b 14	jsr $146b			jsr 	STRMakeOffset 				; make it an offset from X:YA
.0d6f	5a		phy				phy	 								; patch the GOTO/GOSUB
.0d70	a0 01		ldy #$01			ldy 	#1
.0d72	91 28		sta ($28),y			sta 	(objPtr),y
.0d74	c8		iny				iny
.0d75	68		pla				pla
.0d76	91 28		sta ($28),y			sta 	(objPtr),y
.0d78	80 d1		bra $0d4b			bra 	_FBNext
.0d7a					_FBFFail:
.0d7a	a0 02		ldy #$02			ldy 	#2
.0d7c	b1 28		lda ($28),y			lda 	(objPtr),y
.0d7e	8d 00 04	sta $0400			sta 	currentLineNumber
.0d81	c8		iny				iny
.0d82	b1 28		lda ($28),y			lda 	(objPtr),y
.0d84	8d 01 04	sta $0401			sta 	currentLineNumber+1
.0d87	4c cf 17	jmp $17cf		jmp	ErrorV_line
.0d8a					_FBFixVarSpace:
.0d8a	a0 01		ldy #$01			ldy 	#1
.0d8c	ad 13 05	lda $0513			lda 	freeVariableMemory
.0d8f	91 28		sta ($28),y			sta 	(objPtr),y
.0d91	c8		iny				iny
.0d92	ad 14 05	lda $0514			lda 	freeVariableMemory+1
.0d95	91 28		sta ($28),y			sta 	(objPtr),y
.0d97	80 b2		bra $0d4b			bra 	_FBNext
.0d99					CommandFOR:
.0d99	20 84 12	jsr $1284			jsr 	GetNextNonSpace 			; first letter of index variable, should be.
.0d9c	20 9a 12	jsr $129a			jsr 	CharIsAlpha 				; if not alpha , error
.0d9f	90 59		bcc $0dfa			bcc 	_CFFail
.0da1	20 c5 15	jsr $15c5			jsr 	GetReferenceTerm 			; figure out the reference.
.0da4	48		pha				pha 								; save type
.0da5	29 40		and #$40			and 	#NSSTypeMask 				; check it is numeric
.0da7	c9 00		cmp #$00			cmp 	#NSSIFloat
.0da9	d0 4f		bne $0dfa			bne 	_CFFail
.0dab	5a		phy				phy 								; save reference on the stack
.0dac	da		phx				phx
.0dad	a9 b2		lda #$b2			lda 	#C64_EQUAL 					; check for equal.
.0daf	20 68 09	jsr $0968			jsr 	CheckNextA
.0db2	20 16 0c	jsr $0c16			jsr 	CompileExpressionAt0 		; initial value
.0db5	fa		plx				plx 								; get reference back.
.0db6	7a		ply				ply
.0db7	5a		phy				phy
.0db8	da		phx				phx
.0db9	38		sec				sec 								; set initial value.
.0dba	20 77 15	jsr $1577			jsr 	GetSetVariable
.0dbd	fa		plx				plx
.0dbe	7a		ply				ply
.0dbf	68		pla				pla
.0dc0	29 20		and #$20			and 	#NSSIInt16
.0dc2	f0 04		beq $0dc8			beq 	_CFNotInt16
.0dc4	98		tya				tya
.0dc5	09 80		ora #$80			ora 	#$80
.0dc7	a8		tay				tay
.0dc8					_CFNotInt16:
.0dc8	8a		txa				txa 								; reference in YA
.0dc9	20 16 0a	jsr $0a16			jsr 	PushIntegerYA
.0dcc	a9 a4		lda #$a4			lda 	#C64_TO
.0dce	20 68 09	jsr $0968			jsr 	CheckNextA
.0dd1	20 16 0c	jsr $0c16			jsr 	CompileExpressionAt0 		; terminal value
.0dd4	29 40		and #$40			and 	#NSSTypeMask 				; check it is numeric
.0dd6	c9 00		cmp #$00			cmp 	#NSSIFloat
.0dd8	d0 20		bne $0dfa			bne 	_CFFail
.0dda	20 6b 12	jsr $126b			jsr 	LookNextNonSpace 			; followed by STEP
.0ddd	c9 a9		cmp #$a9			cmp 	#C64_STEP
.0ddf	d0 0e		bne $0def			bne 	_CFNoStep
.0de1	20 79 12	jsr $1279			jsr 	GetNext 					; consume it.
.0de4	20 16 0c	jsr $0c16			jsr 	CompileExpressionAt0 		; terminal value
.0de7	29 40		and #$40			and 	#NSSTypeMask 				; check it is numeric
.0de9	c9 00		cmp #$00			cmp 	#NSSIFloat
.0deb	d0 0d		bne $0dfa			bne 	_CFFail
.0ded	80 05		bra $0df4			bra 	_CFParametersDone
.0def					_CFNoStep:
.0def	a9 01		lda #$01			lda 	#1 							; default STEP e.g. 1
.0df1	20 29 0a	jsr $0a29			jsr 	PushIntegerA
.0df4					_CFParametersDone:
.0df4	a9 95		lda #$95			lda 	#PCD_FOR  					; compile FOR word.
.0df6	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0df9	60		rts				rts
.0dfa					_CFFail:
.0dfa	4c 8c 17	jmp $178c		jmp	ErrorV_syntax
.0dfd					FNCompile:
.0dfd	20 84 12	jsr $1284			jsr 	GetNextNonSpace				; get variable name w/type must be array e.g. DEF FNx(a)
.0e00	20 e9 12	jsr $12e9			jsr 	ExtractVariableName
.0e03	e0 00		cpx #$00			cpx 	#0
.0e05	10 32		bpl $0e39			bpl 	_FNError
.0e07	8a		txa				txa 								; convert to a function reference - bit 7:0 clear bit 7:1 set
.0e08	29 7f		and #$7f			and 	#$7F
.0e0a	aa		tax				tax
.0e0b	98		tya				tya
.0e0c	09 80		ora #$80			ora 	#$80
.0e0e	a8		tay				tay
.0e0f	20 d0 0c	jsr $0cd0			jsr 	FindVariable				; does it already exist ?
.0e12	90 25		bcc $0e39			bcc 	_FNError 					; no.
.0e14	20 6b 14	jsr $146b			jsr 	STRMakeOffset 				; convert to a relative address.
.0e17	c9 00		cmp #$00			cmp 	#0 							; fix up.
.0e19	d0 01		bne $0e1c			bne 	_FNNoBorrow
.0e1b	88		dey				dey
.0e1c					_FNNoBorrow:
.0e1c	3a		dec a				dec 	a
.0e1d	5a		phy				phy 								; save location of routine on stack.
.0e1e	48		pha				pha
.0e1f	da		phx				phx
.0e20	20 16 0c	jsr $0c16			jsr 	CompileExpressionAt0
.0e23	20 62 09	jsr $0962			jsr 	CheckNextRParen
.0e26	a9 d2		lda #$d2			lda 	#PCD_CMD_GOSUB
.0e28	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0e2b	68		pla				pla
.0e2c	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0e2f	68		pla				pla
.0e30	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0e33	68		pla				pla
.0e34	20 00 09	jsr $0900			jsr 	WriteCodeByte
.0e37	18		clc				clc
.0e38	60		rts				rts
.0e39					_FNError:
.0e39	4c 7f 17	jmp $177f		jmp	ErrorV_value
.0e3c					CommandTables:
>0e3c	07 cb 00 03 47 13 06			.byte	$07,$cb,$00,$03,CommandGOAlt & $FF,CommandGOAlt >> 8,$06
>0e43	07 89 00 03 4e 13 06			.byte	$07,$89,$00,$03,CommandGOTO & $FF,CommandGOTO >> 8,$06
>0e4a	07 8d 00 03 41 13 06			.byte	$07,$8d,$00,$03,CommandGOSUB & $FF,CommandGOSUB >> 8,$06
>0e51	07 8c 00 03 30 16 06			.byte	$07,$8c,$00,$03,CommandRESTORE & $FF,CommandRESTORE >> 8,$06
>0e58	07 88 00 03 bd 13 06			.byte	$07,$88,$00,$03,CommandLET & $FF,CommandLET >> 8,$06
>0e5f	07 85 00 03 9d 13 06			.byte	$07,$85,$00,$03,CommandINPUT & $FF,CommandINPUT >> 8,$06
>0e66	07 84 00 04 b1 13 06			.byte	$07,$84,$00,$04,CommandINPUTStream & $FF,CommandINPUTStream >> 8,$06
>0e6d	07 99 00 03 f2 14 06			.byte	$07,$99,$00,$03,CommandPRINT & $FF,CommandPRINT >> 8,$06
>0e74	07 98 00 04 f2 14 06			.byte	$07,$98,$00,$04,CommandPRINT & $FF,CommandPRINT >> 8,$06
>0e7b	07 8f 00 03 fd 15 06			.byte	$07,$8f,$00,$03,CommandREM & $FF,CommandREM >> 8,$06
>0e82	07 81 00 03 99 0d 06			.byte	$07,$81,$00,$03,CommandFOR & $FF,CommandFOR >> 8,$06
>0e89	07 82 00 03 75 14 06			.byte	$07,$82,$00,$03,CommandNEXT & $FF,CommandNEXT >> 8,$06
>0e90	07 a1 00 03 ba 12 06			.byte	$07,$a1,$00,$03,CommandGET & $FF,CommandGET >> 8,$06
>0e97	07 83 00 03 cc 0a 06			.byte	$07,$83,$00,$03,CommandDATA & $FF,CommandDATA >> 8,$06
>0e9e	07 87 00 03 3b 15 06			.byte	$07,$87,$00,$03,CommandREAD & $FF,CommandREAD >> 8,$06
>0ea5	07 86 00 03 5f 0b 06			.byte	$07,$86,$00,$03,CommandDIM & $FF,CommandDIM >> 8,$06
>0eac	07 96 00 03 e8 0a 06			.byte	$07,$96,$00,$03,CommandDEF & $FF,CommandDEF >> 8,$06
>0eb3	07 8b 00 e3 6a 13 06			.byte	$07,$8b,$00,$e3,CommandIF & $FF,CommandIF >> 8,$06
>0eba	08 92 00 ea e3 e8 16 06			.byte	$08,$92,$00,$ea,$e3,CommandWAIT & $FF,CommandWAIT >> 8,$06
>0ec2	09 91 00 e1 a9 03 a1 14			.byte	$09,$91,$00,$e1,169,$03,CommandON & $FF,CommandON >> 8,$06
>0eca	06
>0ecb	07 9e 00 e2 cb 91 06			.byte	$07,$9e,$00,$e2,37323 & $FF,37323 >> 8,$06
>0ed2	07 97 00 ea e1 ad 06			.byte	$07,$97,$00,$ea,$e1,173,$06
>0ed9	06 8e 00 10 98 06			.byte	$06,$8e,$00,$10,152,$06
>0edf	07 90 00 20 cb 90 06			.byte	$07,$90,$00,$20,37067 & $FF,37067 >> 8,$06
>0ee6	07 80 00 20 cb 82 06			.byte	$07,$80,$00,$20,33483 & $FF,33483 >> 8,$06
>0eed	07 9d 00 e3 0e 17 06			.byte	$07,$9d,$00,$e3,CommandCMD & $FF,CommandCMD >> 8,$06
>0ef4	0a 9f 00 ea e3 21 17 10			.byte	$0a,$9f,$00,$ea,$e3,CommandOPEN & $FF,CommandOPEN >> 8,$10,199,$06
>0efc	c7 06
>0efe	06 a0 00 e1 c4 06			.byte	$06,$a0,$00,$e1,196,$06
>0f04	07 ce 90 20 cb ab 06			.byte	$07,$ce,$90,$20,43979 & $FF,43979 >> 8,$06
>0f0b	0a ce 92 e3 37 12 20 cb			.byte	$0a,$ce,$92,$e3,OptionalParameterCompile & $FF,OptionalParameterCompile >> 8,$20,44235 & $FF,44235 >> 8,$06
>0f13	ac 06
>0f15	0a ce 8d e3 37 12 20 cb			.byte	$0a,$ce,$8d,$e3,OptionalParameterCompile & $FF,OptionalParameterCompile >> 8,$20,44491 & $FF,44491 >> 8,$06
>0f1d	ad 06
>0f1f	06 ce 86 e1 c8 06			.byte	$06,$ce,$86,$e1,200,$06
>0f25	08 ce 84 ea ea e1 c9 06			.byte	$08,$ce,$84,$ea,$ea,$e1,201,$06
>0f2d	07 ce af e2 cb 97 06			.byte	$07,$ce,$af,$e2,38859 & $FF,38859 >> 8,$06
>0f34	07 ce 8c e2 cb 8c 06			.byte	$07,$ce,$8c,$e2,36043 & $FF,36043 >> 8,$06
>0f3b	09 ce ae ea ea e2 cb 94			.byte	$09,$ce,$ae,$ea,$ea,$e2,38091 & $FF,38091 >> 8,$06
>0f43	06
>0f44	08 ce 87 ea ea e1 99 06			.byte	$08,$ce,$87,$ea,$ea,$e1,153,$06
>0f4c	0a ce 88 ea ea ea ea e1			.byte	$0a,$ce,$88,$ea,$ea,$ea,$ea,$e1,154,$06
>0f54	9a 06
>0f56	0a ce 8a ea ea ea ea e1			.byte	$0a,$ce,$8a,$ea,$ea,$ea,$ea,$e1,155,$06
>0f5e	9b 06
>0f60	0a ce 89 ea ea ea ea e1			.byte	$0a,$ce,$89,$ea,$ea,$ea,$ea,$e1,156,$06
>0f68	9c 06
>0f6a	09 ce 8b ea ea ea f1 9d			.byte	$09,$ce,$8b,$ea,$ea,$ea,$f1,157,$06
>0f72	06
>0f73	07 ce 99 20 cb 98 06			.byte	$07,$ce,$99,$20,39115 & $FF,39115 >> 8,$06
>0f7a	08 ce 9a ea e2 cb 99 06			.byte	$08,$ce,$9a,$ea,$e2,39371 & $FF,39371 >> 8,$06
>0f82	08 ce 9b ea e2 cb 9a 06			.byte	$08,$ce,$9b,$ea,$e2,39627 & $FF,39627 >> 8,$06
>0f8a	08 ce 9c ea e2 cb 9b 06			.byte	$08,$ce,$9c,$ea,$e2,39883 & $FF,39883 >> 8,$06
>0f92	08 ce 9d ea e2 cb 9c 06			.byte	$08,$ce,$9d,$ea,$e2,40139 & $FF,40139 >> 8,$06
>0f9a	08 ce 9e ea e2 cb 9d 06			.byte	$08,$ce,$9e,$ea,$e2,40395 & $FF,40395 >> 8,$06
>0fa2	08 ce 9f ea e2 cb 9e 06			.byte	$08,$ce,$9f,$ea,$e2,40651 & $FF,40651 >> 8,$06
>0faa	08 ce a0 ea e2 cb 9f 06			.byte	$08,$ce,$a0,$ea,$e2,40907 & $FF,40907 >> 8,$06
>0fb2	08 ce a1 ea f2 cb a0 06			.byte	$08,$ce,$a1,$ea,$f2,41163 & $FF,41163 >> 8,$06
>0fba	08 ce a2 ea f2 cb a1 06			.byte	$08,$ce,$a2,$ea,$f2,41419 & $FF,41419 >> 8,$06
>0fc2	08 ce a3 ea e2 cb a2 06			.byte	$08,$ce,$a3,$ea,$e2,41675 & $FF,41675 >> 8,$06
>0fca	07 ce a4 20 cb a3 06			.byte	$07,$ce,$a4,$20,41931 & $FF,41931 >> 8,$06
>0fd1	08 ce a5 ea e2 cb a4 06			.byte	$08,$ce,$a5,$ea,$e2,42187 & $FF,42187 >> 8,$06
>0fd9	08 ce a6 ea e2 cb a5 06			.byte	$08,$ce,$a6,$ea,$e2,42443 & $FF,42443 >> 8,$06
>0fe1	08 ce a7 ea e2 cb a6 06			.byte	$08,$ce,$a7,$ea,$e2,42699 & $FF,42699 >> 8,$06
>0fe9	08 ce a8 ea e2 cb a7 06			.byte	$08,$ce,$a8,$ea,$e2,42955 & $FF,42955 >> 8,$06
>0ff1	08 ce a9 ea e2 cb a8 06			.byte	$08,$ce,$a9,$ea,$e2,43211 & $FF,43211 >> 8,$06
>0ff9	08 ce aa ea f2 cb a9 06			.byte	$08,$ce,$aa,$ea,$f2,43467 & $FF,43467 >> 8,$06
>1001	08 ce ab ea f2 cb aa 06			.byte	$08,$ce,$ab,$ea,$f2,43723 & $FF,43723 >> 8,$06
>1009	00						.byte 	0
.100a					UnaryTables:
>100a	07 b4 00 8e 91 b7 06			.byte	$07,$b4,$00,$8e,$91,183,$06
>1011	08 b5 00 8e 92 cb 84 06			.byte	$08,$b5,$00,$8e,$92,33995 & $FF,33995 >> 8,$06
>1019	07 b6 00 8e 91 8d 06			.byte	$07,$b6,$00,$8e,$91,141,$06
>1020	07 b7 00 8e 91 c2 06			.byte	$07,$b7,$00,$8e,$91,194,$06
>1027	07 b8 00 8e 91 96 06			.byte	$07,$b8,$00,$8e,$91,150,$06
>102e	07 b9 00 8e 91 ae 06			.byte	$07,$b9,$00,$8e,$91,174,$06
>1035	08 ba 00 8e 92 cb 85 06			.byte	$08,$ba,$00,$8e,$92,34251 & $FF,34251 >> 8,$06
>103d	07 bb 00 8e 91 b5 06			.byte	$07,$bb,$00,$8e,$91,181,$06
>1044	08 bc 00 8e 92 cb 86 06			.byte	$08,$bc,$00,$8e,$92,34507 & $FF,34507 >> 8,$06
>104c	08 bd 00 8e 92 cb 87 06			.byte	$08,$bd,$00,$8e,$92,34763 & $FF,34763 >> 8,$06
>1054	08 be 00 8e 92 cb 88 06			.byte	$08,$be,$00,$8e,$92,35019 & $FF,35019 >> 8,$06
>105c	08 bf 00 8e 92 cb 89 06			.byte	$08,$bf,$00,$8e,$92,35275 & $FF,35275 >> 8,$06
>1064	08 c0 00 8e 92 cb 8a 06			.byte	$08,$c0,$00,$8e,$92,35531 & $FF,35531 >> 8,$06
>106c	08 c1 00 8e 92 cb 8b 06			.byte	$08,$c1,$00,$8e,$92,35787 & $FF,35787 >> 8,$06
>1074	07 c2 00 8e 91 ab 06			.byte	$07,$c2,$00,$8e,$91,171,$06
>107b	07 c3 00 8f 91 a2 06			.byte	$07,$c3,$00,$8f,$91,162,$06
>1082	07 c4 00 8e 91 bb 07			.byte	$07,$c4,$00,$8e,$91,187,$07
>1089	07 c5 00 8f 91 c3 06			.byte	$07,$c5,$00,$8f,$91,195,$06
>1090	07 c6 00 8f 91 8f 06			.byte	$07,$c6,$00,$8f,$91,143,$06
>1097	07 c7 00 8e 91 93 07			.byte	$07,$c7,$00,$8e,$91,147,$07
>109e	08 c8 00 8f ae 91 bc 07			.byte	$08,$c8,$00,$8f,$ae,$91,188,$07
>10a6	08 c9 00 8f ae 91 bd 07			.byte	$08,$c9,$00,$8f,$ae,$91,189,$07
>10ae	0b ca 00 8f ae 03 37 12			.byte	$0b,$ca,$00,$8f,$ae,$03,OptionalParameterCompile & $FF,OptionalParameterCompile >> 8,$91,190,$07
>10b6	91 be 07
>10b9	07 a8 00 03 56 12 06			.byte	$07,$a8,$00,$03,NotUnaryCompile & $FF,NotUnaryCompile >> 8,$06
>10c0	07 a5 00 03 fd 0d 06			.byte	$07,$a5,$00,$03,FNCompile & $FF,FNCompile >> 8,$06
>10c7	06 ff 00 10 ac 06			.byte	$06,$ff,$00,$10,172,$06
>10cd	07 ce d6 8e 91 91 07			.byte	$07,$ce,$d6,$8e,$91,145,$07
>10d4	07 ce d5 8e 91 9e 07			.byte	$07,$ce,$d5,$8e,$91,158,$07
>10db	08 ce d0 8e ae 91 ca 06			.byte	$08,$ce,$d0,$8e,$ae,$91,202,$06
>10e3	08 ce d4 8e 92 cb 83 06			.byte	$08,$ce,$d4,$8e,$92,33739 & $FF,33739 >> 8,$06
>10eb	07 ce d3 20 cb 8d 06			.byte	$07,$ce,$d3,$20,36299 & $FF,36299 >> 8,$06
>10f2	07 ce d1 20 cb 8e 06			.byte	$07,$ce,$d1,$20,36555 & $FF,36555 >> 8,$06
>10f9	07 ce d2 20 cb 8f 06			.byte	$07,$ce,$d2,$20,36811 & $FF,36811 >> 8,$06
>1100	09 ce d7 8e ae 92 cb 95			.byte	$09,$ce,$d7,$8e,$ae,$92,38347 & $FF,38347 >> 8,$06
>1108	06
>1109	00						.byte 	0
.110a					GeneratorProcess:
.110a	86 2a		stx $2a				stx 	zTemp0 						; save generation pointer in zTemp0
.110c	84 2b		sty $2b				sty 	zTemp0+1
.110e	85 2c		sta $2c				sta 	zTemp1 						; first match token
.1110	64 2d		stz $2d				stz 	zTemp1+1
.1112	c9 ce		cmp #$ce			cmp 	#$CE 						; check if shift
.1114	d0 05		bne $111b			bne 	_GPNotShifted
.1116	20 79 12	jsr $1279			jsr 	GetNext 					; get the shifted token
.1119	85 2d		sta $2d				sta 	zTemp1+1 					; match CE xx
.111b					_GPNotShifted:
.111b					_GPSearch:
.111b	b2 2a		lda ($2a)			lda 	(zTemp0) 					; reached end ?
.111d	18		clc				clc
.111e	f0 2f		beq $114f			beq 	_GPExit
.1120	a0 01		ldy #$01			ldy 	#1 							; tokens match
.1122	b1 2a		lda ($2a),y			lda 	(zTemp0),y
.1124	c5 2c		cmp $2c				cmp 	zTemp1
.1126	d0 09		bne $1131			bne 	_GPNext
.1128	a5 2d		lda $2d				lda 	zTemp1+1 					; 2nd token ?
.112a	f0 12		beq $113e			beq 	_GPFound
.112c	c8		iny				iny 								; check match.
.112d	d1 2a		cmp ($2a),y			cmp 	(zTemp0),y
.112f	f0 0d		beq $113e			beq 	_GPFound
.1131					_GPNext:
.1131	18		clc				clc 								; follow to next
.1132	a5 2a		lda $2a				lda 	zTemp0
.1134	72 2a		adc ($2a)			adc 	(zTemp0)
.1136	85 2a		sta $2a				sta 	zTemp0
.1138	90 e1		bcc $111b			bcc 	_GPSearch
.113a	e6 2b		inc $2b				inc 	zTemp0+1
.113c	80 dd		bra $111b			bra 	_GPSearch
.113e					_GPFound:
.113e	18		clc				clc 								; skip to action bytes
.113f	a5 2a		lda $2a				lda 	zTemp0 						; <offset> <token lo> <token hi> first
.1141	69 03		adc #$03			adc 	#3
.1143	85 2a		sta $2a				sta 	zTemp0
.1145	90 02		bcc $1149			bcc 	_GPNoCarry
.1147	e6 2b		inc $2b				inc 	zTemp0+1
.1149					_GPNoCarry:
.1149					_GPLoop:
.1149	20 50 11	jsr $1150			jsr 	GeneratorExecute 			; execute one command
.114c	90 fb		bcc $1149			bcc 	_GPLoop 					; go back if not completed.
.114e	38		sec				sec 								; return with CS.
.114f					_GPExit:
.114f	60		rts				rts
.1150					GeneratorExecute:
.1150	20 fc 11	jsr $11fc			jsr 	_GEFetchZTemp0 				; get next.
.1153	48		pha				pha 								; split into 2 nibbles
.1154	4a		lsr a				lsr 	a
.1155	4a		lsr a				lsr 	a
.1156	4a		lsr a				lsr		a
.1157	4a		lsr a				lsr 	a
.1158	20 62 11	jsr $1162			jsr 	_GEExecuteNibble 			; MSB first
.115b	68		pla				pla
.115c	b0 03		bcs $1161			bcs 	_GEHaveCompleted
.115e	20 62 11	jsr $1162			jsr 	_GEExecuteNibble 			; LSB second
.1161					_GEHaveCompleted:
.1161	60		rts				rts
.1162					_GEExecuteNibble:
.1162	29 0f		and #$0f			and 	#$0F
.1164	0a		asl a				asl 	a
.1165	aa		tax				tax
.1166	7c 69 11	jmp ($1169,x)			jmp 	(_GEExecuteVectors,x)
.1169					_GEExecuteVectors:
>1169	89 11						.word 	_GEXNop 					; 0  (no operation)
>116b	91 11						.word 	_GEXToken1 					; 1  (compile 1 byte token)
>116d	8b 11						.word 	_GEXToken2 					; 2  (compile 2 byte token)
>116f	df 11						.word 	_GEXExecute 				; 3  (run arbitrary code)
>1171	d2 11						.word 	_GEXChannelExec 			; 4  (run arbitrary code with possible channel redirection)
>1173	89 11						.word 	_GEXNop 					; 5
>1175	99 11						.word 	_GEXExitNumber 				; 6  exit return ifloat32 type
>1177	9d 11						.word 	_GEXExitString 				; 7  exit return string type
>1179	a1 11						.word 	_GEXLParam 					; 8  check ( follows
>117b	a5 11						.word 	_GEXRParam 					; 9  check ) follows
>117d	a9 11						.word 	_GEXComma					; A  check , follows
>117f	89 11						.word 	_GEXNop 					; B
>1181	89 11						.word 	_GEXNop 					; C
>1183	89 11						.word 	_GEXNop 					; D
>1185	b9 11						.word 	_GEXNumber 					; E  compile get any number
>1187	c4 11						.word 	_GEXString 					; F  compile get any string
.1189					_GEXNop:
.1189	18		clc				clc
.118a	60		rts				rts
.118b					_GEXToken2:
.118b	20 fc 11	jsr $11fc			jsr 	_GEFetchZTemp0
.118e	20 00 09	jsr $0900			jsr 	WriteCodeByte
.1191					_GEXToken1:
.1191	20 fc 11	jsr $11fc			jsr 	_GEFetchZTemp0
.1194	20 00 09	jsr $0900			jsr 	WriteCodeByte
.1197	18		clc				clc
.1198	60		rts				rts
.1199					_GEXExitNumber:
.1199	a9 00		lda #$00			lda 	#NSSIFloat
.119b	38		sec				sec
.119c	60		rts				rts
.119d					_GEXExitString:
.119d	a9 40		lda #$40			lda 	#NSSString
.119f	38		sec				sec
.11a0	60		rts				rts
.11a1					_GEXLParam:
.11a1	a9 28		lda #$28			lda 	#"("
.11a3	80 06		bra $11ab			bra 	_GEXCheck
.11a5					_GEXRParam:
.11a5	a9 29		lda #$29			lda 	#")"
.11a7	80 02		bra $11ab			bra 	_GEXCheck
.11a9					_GEXComma:
.11a9	a9 2c		lda #$2c			lda 	#","
.11ab					_GEXCheck:
.11ab	85 2e		sta $2e				sta 	zTemp2 						; save match
.11ad	20 84 12	jsr $1284			jsr 	GetNextNonSpace 			; get next skipping spaces
.11b0	c5 2e		cmp $2e				cmp 	zTemp2 						; check matches.
.11b2	d0 02		bne $11b6			bne 	_GEXSyntax
.11b4	18		clc				clc
.11b5	60		rts				rts
.11b6					_GEXSyntax:
.11b6	4c 8c 17	jmp $178c		jmp	ErrorV_syntax
.11b9					_GEXNumber:
.11b9	20 05 12	jsr $1205			jsr 	GEXCompileExpression 		; compile expression
.11bc	29 40		and #$40			and 	#NSSTypeMask
.11be	c9 00		cmp #$00			cmp  	#NSSIFloat
.11c0	d0 0d		bne $11cf			bne 	_GEXType
.11c2	18		clc				clc
.11c3	60		rts				rts
.11c4					_GEXString:
.11c4	20 05 12	jsr $1205			jsr 	GEXCompileExpression 		; compile expression
.11c7	29 40		and #$40			and 	#NSSTypeMask
.11c9	c9 40		cmp #$40			cmp  	#NSSString
.11cb	d0 02		bne $11cf			bne 	_GEXType
.11cd	18		clc				clc
.11ce	60		rts				rts
.11cf					_GEXType:
.11cf	4c 9c 17	jmp $179c		jmp	ErrorV_type
.11d2					_GEXChannelExec:
.11d2	20 15 12	jsr $1215			jsr 	ChannelPrefix 				; set up default
.11d5	20 df 11	jsr $11df			jsr 	_GEXExecute
.11d8	08		php				php
.11d9	20 30 12	jsr $1230			jsr 	ChannelPostfix 				; replace default.
.11dc	28		plp				plp
.11dd	60		rts				rts
>11de	db						.byte 	$DB 						; causes a break in the emulator
.11df					_GEXExecute:
.11df	20 fc 11	jsr $11fc			jsr 	_GEFetchZTemp0 				; get vector
.11e2	85 2e		sta $2e				sta 	zTemp2
.11e4	20 fc 11	jsr $11fc			jsr 	_GEFetchZTemp0
.11e7	85 2f		sta $2f				sta 	zTemp2+1
.11e9	a6 2a		ldx $2a				ldx 	zTemp0 						; push generation exec on to stack for reentrancy
.11eb	da		phx				phx
.11ec	a6 2b		ldx $2b				ldx 	zTemp0+1
.11ee	da		phx				phx
.11ef	20 f9 11	jsr $11f9			jsr 	_GECallZTemp2 				; execute code
.11f2	fa		plx				plx 								; recover generation exec
.11f3	86 2b		stx $2b				stx 	zTemp0+1
.11f5	fa		plx				plx
.11f6	86 2a		stx $2a				stx 	zTemp0
.11f8	60		rts				rts
.11f9					_GECallZTemp2:
.11f9	6c 2e 00	jmp ($002e)			jmp 	(zTemp2)
.11fc					_GEFetchZTemp0:
.11fc	b2 2a		lda ($2a)			lda 	(zTemp0)
.11fe	e6 2a		inc $2a				inc 	zTemp0
.1200	d0 02		bne $1204			bne 	_GEFZ0Skip
.1202	e6 2b		inc $2b				inc 	zTemp0+1
.1204					_GEFZ0Skip:
.1204	60		rts				rts
.1205					GEXCompileExpression:
.1205	a6 2a		ldx $2a				ldx 	zTemp0 						; push generation exec on to stack for reentrancy
.1207	da		phx				phx
.1208	a6 2b		ldx $2b				ldx 	zTemp0+1
.120a	da		phx				phx
.120b	20 16 0c	jsr $0c16			jsr 	CompileExpressionAt0 		; compile expression.
.120e	fa		plx				plx 								; recover generation exec
.120f	86 2b		stx $2b				stx 	zTemp0+1
.1211	fa		plx				plx
.1212	86 2a		stx $2a				stx 	zTemp0
.1214	60		rts				rts
.1215					ChannelPrefix:
.1215	a9 af		lda #$af			lda 	#PCD_GETCHANNEL				; set channel onto stack
.1217	20 00 09	jsr $0900			jsr 	WriteCodeByte
.121a	20 05 12	jsr $1205			jsr 	GEXCompileExpression 		; channel #
.121d	29 40		and #$40			and 	#NSSTypeMask
.121f	c9 00		cmp #$00			cmp 	#NSSIFloat
.1221	d0 0a		bne $122d			bne 	_CPXType
.1223	20 5e 09	jsr $095e			jsr 	CheckNextComma 				; check , follows.
.1226	a9 b0		lda #$b0			lda 	#PCD_SETCHANNEL				; set channel
.1228	20 00 09	jsr $0900			jsr 	WriteCodeByte
.122b	18		clc				clc
.122c	60		rts				rts
.122d					_CPXType:
.122d	4c 9c 17	jmp $179c		jmp	ErrorV_type
.1230					ChannelPostfix:
.1230	a9 b0		lda #$b0			lda 	#PCD_SETCHANNEL				; set channel from TOS.
.1232	20 00 09	jsr $0900			jsr 	WriteCodeByte
.1235	18		clc				clc
.1236	60		rts				rts
.1237					OptionalParameterCompile:
.1237	20 6b 12	jsr $126b			jsr 	LookNextNonSpace 			; what follows.
.123a	c9 2c		cmp #$2c			cmp 	#","
.123c	d0 0e		bne $124c			bne 	_MidDefault
.123e	20 79 12	jsr $1279			jsr 	GetNext 					; consume ,
.1241	20 16 0c	jsr $0c16			jsr 	CompileExpressionAt0
.1244	29 40		and #$40			and 	#NSSTypeMask
.1246	c9 00		cmp #$00			cmp 	#NSSIFloat
.1248	d0 09		bne $1253			bne 	MidFailType
.124a	80 05		bra $1251			bra 	_MidComplete
.124c					_MidDefault:
.124c	a9 ff		lda #$ff			lda 	#255 						; default of 255
.124e	20 29 0a	jsr $0a29			jsr 	PushIntegerA
.1251					_MidComplete:
.1251	18		clc				clc
.1252	60		rts				rts
.1253					MidFailType:
.1253	4c 9c 17	jmp $179c		jmp	ErrorV_type
.1256					NotUnaryCompile:
.1256	ad cb 0c	lda $0ccb			lda 	PrecedenceTable+C64_EQUAL-C64_PLUS
.1259	20 18 0c	jsr $0c18			jsr 	CompileExpressionAtA 		; evaluate at that level
.125c	29 40		and #$40			and 	#NSSTypeMask 				; check compile returns number.
.125e	c9 00		cmp #$00			cmp 	#NSSIFloat
.1260	d0 f1		bne $1253			bne 	MidFailType
.1262	a9 a8		lda #$a8			lda 	#PCD_NOT 					; and NOT it.
.1264	20 00 09	jsr $0900			jsr 	WriteCodeByte
.1267	60		rts				rts
.1268					LookNext:
.1268	b2 24		lda ($24)			lda 	(srcPtr)
.126a	60		rts				rts
.126b					LookNextNonSpace:
.126b	b2 24		lda ($24)			lda 	(srcPtr)
.126d	c9 20		cmp #$20			cmp		#' '
.126f	f0 03		beq $1274			beq 	_LNNSkip
.1271	c9 00		cmp #$00			cmp 	#0
.1273	60		rts				rts
.1274					_LNNSkip:
.1274	20 79 12	jsr $1279			jsr 	GetNext
.1277	80 f2		bra $126b			bra 	LookNextNonSpace
.1279					GetNext:
.1279	b2 24		lda ($24)			lda 	(srcPtr) 					; get next
.127b	e6 24		inc $24				inc 	srcPtr
.127d	d0 02		bne $1281			bne 	_GNSkip
.127f	e6 25		inc $25				inc 	srcPtr+1
.1281					_GNSkip:
.1281	c9 00		cmp #$00			cmp 	#0
.1283	60		rts				rts
.1284					GetNextNonSpace:
.1284	20 79 12	jsr $1279			jsr 	GetNext
.1287	c9 20		cmp #$20			cmp 	#' '
.1289	f0 f9		beq $1284			beq 	GetNextNonSpace
.128b	c9 00		cmp #$00			cmp 	#0
.128d	60		rts				rts
.128e					CharIsDigit:
.128e	c9 30		cmp #$30			cmp 	#"0"
.1290	90 06		bcc $1298			bcc 	CCFalse
.1292	c9 3a		cmp #$3a			cmp 	#"9"+1
.1294	b0 02		bcs $1298			bcs 	CCFalse
.1296					CCTrue:
.1296	38		sec				sec
.1297	60		rts				rts
.1298					CCFalse:
.1298	18		clc				clc
.1299	60		rts				rts
.129a					CharIsAlpha:
.129a	c9 41		cmp #$41			cmp 	#"A"
.129c	90 fa		bcc $1298			bcc 	CCFalse
.129e	c9 5b		cmp #$5b			cmp 	#"Z"+1
.12a0	b0 f6		bcs $1298			bcs 	CCFalse
.12a2	80 f2		bra $1296			bra 	CCTrue
.12a4					ConvertHexStyle:
.12a4	38		sec				sec
.12a5	e9 30		sbc #$30			sbc 	#"0" 						; check in range 0-9 first
.12a7	90 ef		bcc $1298			bcc 	CCFalse
.12a9	c9 0a		cmp #$0a			cmp 	#9+1
.12ab	90 e9		bcc $1296			bcc 	CCTrue
.12ad	38		sec				sec 								; shift into hex space A=>0 Z=>25
.12ae	e9 11		sbc #$11			sbc 	#"A"-"0"
.12b0	90 e6		bcc $1298			bcc 	CCFalse
.12b2	c9 1a		cmp #$1a			cmp 	#26 						; past Z ?
.12b4	b0 e2		bcs $1298			bcs 	CCFalse
.12b6	69 0a		adc #$0a			adc 	#10 						; make valid quasi-hex 0-35
.12b8	80 dc		bra $1296			bra 	CCTrue
.12ba					CommandGET:
.12ba	20 6b 12	jsr $126b			jsr 	LookNextNonSpace 			; # follows ?
.12bd	c9 23		cmp #$23			cmp 	#"#"
.12bf	d0 0d		bne $12ce			bne 	CommandGetBody
.12c1	20 79 12	jsr $1279			jsr 	GetNext 					; consume #
.12c4	20 15 12	jsr $1215			jsr 	ChannelPrefix 				; do it as GET#
.12c7	20 ce 12	jsr $12ce			jsr 	CommandGetBody
.12ca	20 30 12	jsr $1230			jsr 	ChannelPostfix
.12cd	60		rts				rts
.12ce					CommandGetBody:
.12ce	20 84 12	jsr $1284			jsr 	GetNextNonSpace 			; get the first character
.12d1	20 c5 15	jsr $15c5			jsr 	GetReferenceTerm 			; identify variable to assign to
.12d4	48		pha				pha
.12d5	29 40		and #$40			and 	#NSSTypeMask 				; check if it is a string
.12d7	c9 40		cmp #$40			cmp 	#NSSString
.12d9	d0 0b		bne $12e6			bne 	_CGType
.12db	a9 97		lda #$97			lda 	#PCD_GET 					; compile GET
.12dd	20 00 09	jsr $0900			jsr 	WriteCodeByte
.12e0	38		sec				sec
.12e1	68		pla				pla
.12e2	20 77 15	jsr $1577			jsr		GetSetVariable
.12e5	60		rts				rts
.12e6					_CGType:
.12e6	4c 9c 17	jmp $179c		jmp	ErrorV_type
.12e9					ExtractVariableName:
.12e9	20 9a 12	jsr $129a			jsr 	CharIsAlpha
.12ec	90 50		bcc $133e			bcc 	_IVSyntax
.12ee	29 1f		and #$1f			and 	#31 						; reduce first character to 5 bits
.12f0	85 2c		sta $2c				sta 	zTemp1 						; we'll build it in zTemp1
.12f2	64 2d		stz $2d				stz 	zTemp1+1
.12f4	20 68 12	jsr $1268			jsr 	LookNext 					; is there a second character ?
.12f7	20 9a 12	jsr $129a			jsr 	CharIsAlpha  				; must be alphanumeric
.12fa	b0 05		bcs $1301			bcs 	_IVHasSecond
.12fc	20 8e 12	jsr $128e			jsr 	CharIsDigit
.12ff	90 07		bcc $1308			bcc 	_IVCheckType
.1301					_IVHasSecond:
.1301	29 3f		and #$3f			and 	#63 						; 6 bit ASCII.
.1303	85 2d		sta $2d				sta 	zTemp1+1
.1305					_IVGetNextCheck:
.1305	20 79 12	jsr $1279			jsr 	GetNext 					; consume it
.1308					_IVCheckType:
.1308	20 68 12	jsr $1268			jsr 	LookNext					; check if string follows.
.130b	20 9a 12	jsr $129a			jsr 	CharIsAlpha
.130e	b0 f5		bcs $1305			bcs 	_IVGetNextCheck
.1310	20 8e 12	jsr $128e			jsr 	CharIsDigit
.1313	b0 f0		bcs $1305			bcs 	_IVGetNextCheck
.1315	a2 40		ldx #$40			ldx 	#NSSString
.1317	c9 24		cmp #$24			cmp 	#"$"
.1319	f0 06		beq $1321			beq 	_IVHasType
.131b	a2 20		ldx #$20			ldx 	#NSSIInt16 					; check if short int follows e.g. 16 bit
.131d	c9 25		cmp #$25			cmp 	#"%"
.131f	d0 08		bne $1329			bne 	_IVCheckArray
.1321					_IVHasType:
.1321	8a		txa				txa 								; Or X into zTemp1
.1322	05 2c		ora $2c				ora 	zTemp1
.1324	85 2c		sta $2c				sta 	zTemp1
.1326	20 79 12	jsr $1279			jsr 	GetNext 					; consume it
.1329					_IVCheckArray:
.1329	20 68 12	jsr $1268			jsr 	LookNext 					; check if array follows
.132c	c9 28		cmp #$28			cmp 	#"("
.132e	d0 09		bne $1339			bne 	_IVNotArray
.1330	a5 2c		lda $2c				lda 	zTemp1 						; set array bit
.1332	09 80		ora #$80			ora 	#NSSArray
.1334	85 2c		sta $2c				sta 	zTemp1
.1336	20 79 12	jsr $1279			jsr 	GetNext 					; consume it
.1339					_IVNotArray:
.1339	a6 2c		ldx $2c				ldx 	zTemp1
.133b	a4 2d		ldy $2d				ldy 	zTemp1+1
.133d	60		rts				rts
.133e					_IVSyntax:
.133e	4c 8c 17	jmp $178c		jmp	ErrorV_syntax
.1341					CommandGOSUB:
.1341	a9 d2		lda #$d2			lda 	#PCD_CMD_GOSUB
.1343	20 54 13	jsr $1354			jsr 	CompileBranchCommand
.1346	60		rts				rts
.1347					CommandGOAlt:
.1347	a9 a4		lda #$a4			lda 	#C64_TO 					; GO TO alternative
.1349	20 68 09	jsr $0968			jsr 	CheckNextA
.134c	80 00		bra $134e			bra 	CommandGOTO
.134e					CommandGOTO:
.134e	a9 d1		lda #$d1			lda 	#PCD_CMD_GOTO
.1350	20 54 13	jsr $1354			jsr 	CompileBranchCommand
.1353	60		rts				rts
.1354					CompileBranchCommand:
.1354	20 00 09	jsr $0900			jsr 	WriteCodeByte 				; write the command out.
.1357	20 84 12	jsr $1284			jsr 	GetNextNonSpace
.135a	20 cd 14	jsr $14cd			jsr 	ParseConstant 				; get constant into YA
.135d	90 08		bcc $1367			bcc 	_CBCSyntax
.135f	20 00 09	jsr $0900			jsr 	WriteCodeByte				; and compile the actual line number
.1362	98		tya				tya
.1363	20 00 09	jsr $0900			jsr 	WriteCodeByte
.1366	60		rts				rts
.1367					_CBCSyntax:
.1367	4c 8c 17	jmp $178c		jmp	ErrorV_syntax
.136a					CommandIF:
.136a	20 6b 12	jsr $126b			jsr 	LookNextNonSpace 			; what follows the tests ?
.136d	c9 89		cmp #$89			cmp 	#C64_GOTO 					; IF .. GOTO
.136f	f0 0f		beq $1380			beq 	_CIGoto
.1371	a9 a7		lda #$a7			lda 	#C64_THEN 					; should be THEN
.1373	20 68 09	jsr $0968			jsr 	CheckNextA
.1376	20 6b 12	jsr $126b			jsr 	LookNextNonSpace 			; THEN <number>
.1379	20 8e 12	jsr $128e			jsr 	CharIsDigit
.137c	b0 05		bcs $1383			bcs 	_CIGoto2
.137e	80 09		bra $1389			bra 	CompileGotoEOL
.1380					_CIGoto:
.1380	20 79 12	jsr $1279			jsr 	GetNext
.1383					_CIGoto2:
.1383	a9 d4		lda #$d4			lda 	#PCD_CMD_GOTOCMD_NZ
.1385	20 54 13	jsr $1354			jsr 	CompileBranchCommand
.1388	60		rts				rts
.1389					CompileGotoEOL:
.1389	a9 d3		lda #$d3			lda 	#PCD_CMD_GOTOCMD_Z
.138b	20 00 09	jsr $0900			jsr 	WriteCodeByte
.138e	20 f9 08	jsr $08f9			jsr 	GetLineNumber 				; Get the current line number => YA
.1391	1a		inc a				inc 	a 							; and branch to +1
.1392	d0 01		bne $1395			bne 	_CGENoCarry
.1394	c8		iny				iny
.1395					_CGENoCarry:
.1395	20 00 09	jsr $0900			jsr 	WriteCodeByte
.1398	98		tya				tya
.1399	20 00 09	jsr $0900			jsr 	WriteCodeByte
.139c	60		rts				rts
.139d					CommandINPUT:
.139d	20 6b 12	jsr $126b			jsr 	LookNextNonSpace 			; check for "
.13a0	c9 22		cmp #$22			cmp 	#'"'
.13a2	d0 0d		bne $13b1			bne 	CommandINPUTStream
.13a4	20 16 0c	jsr $0c16			jsr 	CompileExpressionAt0
.13a7	a9 b2		lda #$b2			lda 	#(PCD_PRINTCMD_S) & $FF
.13a9	20 00 09	jsr $0900			jsr 	WriteCodeByte
.13ac	a9 2c		lda #$2c			lda 	#","
.13ae	20 5e 09	jsr $095e			jsr 	CheckNextComma
.13b1					CommandINPUTStream:
.13b1	a9 a1		lda #$a1			lda 	#(PCD_INPUTCMD_START) & $FF
.13b3	20 00 09	jsr $0900			jsr 	WriteCodeByte
.13b6	a2 9f		ldx #$9f			ldx 	#PCD_INPUT 					; do READ with Data from INPUT
.13b8	a0 a0		ldy #$a0			ldy 	#PCD_INPUTDOLLAR
.13ba	4c 3f 15	jmp $153f			jmp 	CommandReadInputCommon
.13bd					CommandLET:
.13bd	20 84 12	jsr $1284			jsr 	GetNextNonSpace 			; get the first character
.13c0					CommandLETHaveFirst:
.13c0	20 c5 15	jsr $15c5			jsr 	GetReferenceTerm 			; identify variable to assign to
.13c3	da		phx				phx 								; save target on the stack.
.13c4	5a		phy				phy
.13c5	48		pha				pha
.13c6	a9 b2		lda #$b2			lda 	#C64_EQUAL 					; check next is =
.13c8	20 68 09	jsr $0968			jsr 	CheckNextA
.13cb	20 16 0c	jsr $0c16			jsr 	CompileExpressionAt0 		; evaluate the RHS.
.13ce	85 2a		sta $2a				sta 	zTemp0 						; save type returned
.13d0	68		pla				pla 								; get type of assignment
.13d1	48		pha				pha
.13d2	45 2a		eor $2a				eor 	zTemp0 						; compare using EOR
.13d4	29 40		and #$40			and 	#NSSTypeMask 				; so we can mask type as we only need n/s
.13d6	d0 17		bne $13ef			bne 	_CLType
.13d8	68		pla				pla 								; restore and compile save code
.13d9	7a		ply				ply
.13da	fa		plx				plx
.13db	c0 c0		cpy #$c0			cpy 	#$C0 						; is it TI$ = "xxxxx"
.13dd	f0 05		beq $13e4			beq 	_CLTIString
.13df	38		sec				sec
.13e0	20 77 15	jsr $1577			jsr		GetSetVariable
.13e3	60		rts				rts
.13e4					_CLTIString:
.13e4	a9 cb		lda #$cb			lda 	#(PCD_TIDOLLARCMD_WRITE) >> 8
.13e6	20 00 09	jsr $0900			jsr 	WriteCodeByte
.13e9	a9 92		lda #$92			lda 	#(PCD_TIDOLLARCMD_WRITE) & $FF
.13eb	20 00 09	jsr $0900			jsr 	WriteCodeByte
.13ee	60		rts				rts
.13ef					_CLType:
.13ef	4c 9c 17	jmp $179c		jmp	ErrorV_type
.13f2					STRMarkLine:
.13f2	48		pha				pha
.13f3	38		sec				sec 								; allocate 4 bytes (line #,address)
.13f4	ad 0f 05	lda $050f			lda 	lineNumberTable 			; and copy to zTemp0
.13f7	e9 04		sbc #$04			sbc 	#4
.13f9	8d 0f 05	sta $050f			sta 	lineNumberTable
.13fc	85 2a		sta $2a				sta 	zTemp0
.13fe	ad 10 05	lda $0510			lda 	lineNumberTable+1
.1401	e9 00		sbc #$00			sbc 	#0
.1403	8d 10 05	sta $0510			sta 	lineNumberTable+1
.1406	85 2b		sta $2b				sta 	zTemp0+1
.1408	68		pla				pla
.1409	92 2a		sta ($2a)			sta 	(zTemp0) 					; line # save it in +0,+1
.140b	98		tya				tya
.140c	a0 01		ldy #$01			ldy 	#1
.140e	91 2a		sta ($2a),y			sta 	(zTemp0),y
.1410	a5 28		lda $28				lda 	objPtr 						; save current address in +2,+3
.1412	c8		iny				iny
.1413	91 2a		sta ($2a),y			sta 	(zTemp0),y
.1415	a5 29		lda $29				lda 	objPtr+1
.1417	c8		iny				iny
.1418	91 2a		sta ($2a),y			sta 	(zTemp0),y
.141a	60		rts				rts
.141b					STRFindLine:
.141b	85 2a		sta $2a				sta 	zTemp0 						; zTemp0 line number being searched
.141d	84 2b		sty $2b				sty 	zTemp0+1
.141f	ad 08 05	lda $0508			lda 	compilerEndHigh 			; work backwards through table
.1422	85 2d		sta $2d				sta 	zTemp1+1
.1424	64 2c		stz $2c				stz 	zTemp1
.1426					_STRSearch:
.1426	20 5d 14	jsr $145d			jsr 	_STRPrevLine 				; look at previous record.
.1429	a0 01		ldy #$01			ldy 	#1
.142b	b2 2c		lda ($2c)			lda 	(zTemp1) 					; check table line # >= target
.142d	c5 2a		cmp $2a				cmp 	zTemp0
.142f	b1 2c		lda ($2c),y			lda 	(zTemp1),y
.1431	e5 2b		sbc $2b				sbc 	zTemp0+1
.1433	b0 0b		bcs $1440			bcs 	_STRFound 					; >=
.1435					_STRNext:
.1435	a0 01		ldy #$01			ldy 	#1 							; should not be required !
.1437	b1 2c		lda ($2c),y			lda 	(zTemp1),y
.1439	c9 ff		cmp #$ff			cmp 	#$FF
.143b	d0 e9		bne $1426			bne 	_STRSearch
.143d	4c e6 17	jmp $17e6		jmp	ErrorV_internal
.1440					_STRFound:
.1440	b2 2c		lda ($2c)			lda 	(zTemp1) 					; set A = 0 if the same, 0 if different.
.1442	45 2a		eor $2a				eor 	zTemp0
.1444	d0 06		bne $144c			bne 	_STRDifferent
.1446	b2 2c		lda ($2c)			lda 	(zTemp1)
.1448	45 2a		eor $2a				eor 	zTemp0
.144a	f0 02		beq $144e			beq 	_STROut 					; if zero, exit with A = 0 and correct line.
.144c					_STRDifferent:
.144c	a9 ff		lda #$ff			lda 	#$FF
.144e					_STROut:
.144e	18		clc				clc  								; set carry if different, e.g. > rather than >=
.144f	69 ff		adc #$ff			adc 	#255
.1451	08		php				php
.1452	c8		iny				iny 								; address into YA
.1453	b1 2c		lda ($2c),y			lda 	(zTemp1),y
.1455	48		pha				pha
.1456	c8		iny				iny
.1457	b1 2c		lda ($2c),y			lda 	(zTemp1),y
.1459	a8		tay				tay
.145a	68		pla				pla
.145b	28		plp				plp
.145c	60		rts				rts
.145d					_STRPrevLine:
.145d	38		sec				sec 								; move backwards one entry.
.145e	a5 2c		lda $2c				lda 	zTemp1
.1460	e9 04		sbc #$04			sbc 	#4
.1462	85 2c		sta $2c				sta 	zTemp1
.1464	a5 2d		lda $2d				lda 	zTemp1+1
.1466	e9 00		sbc #$00			sbc 	#0
.1468	85 2d		sta $2d				sta 	zTemp1+1
.146a	60		rts				rts
.146b					STRMakeOffset:
.146b	18		clc				clc 								; borrow 1
.146c	e5 28		sbc $28				sbc 	objPtr
.146e	48		pha				pha
.146f	98		tya				tya
.1470	e5 29		sbc $29				sbc 	objPtr+1
.1472	a8		tay				tay
.1473	68		pla				pla
.1474	60		rts				rts
.1475					CommandNEXT:
.1475	20 6b 12	jsr $126b			jsr 	LookNextNonSpace 			; first letter of index variable, should be.
.1478	20 9a 12	jsr $129a			jsr 	CharIsAlpha 				; if not alpha , error
.147b	90 0c		bcc $1489			bcc 	_CNNoReferenceGiven
.147d	20 79 12	jsr $1279			jsr 	GetNext
.1480	20 c5 15	jsr $15c5			jsr 	GetReferenceTerm 			; figure out the reference.
.1483	8a		txa				txa 								; reference in YA
.1484	20 16 0a	jsr $0a16			jsr 	PushIntegerYA 				; write it out.
.1487	80 06		bra $148f			bra 	_CNParametersDone
.1489					_CNNoReferenceGiven:
.1489	a9 ff		lda #$ff			lda 	#255 						; write out -1 no
.148b	a8		tay				tay
.148c	20 16 0a	jsr $0a16			jsr 	PushIntegerYA 				; write it out.
.148f					_CNParametersDone:
.148f	a9 a7		lda #$a7			lda 	#PCD_NEXT  					; compile FOR word.
.1491	20 00 09	jsr $0900			jsr 	WriteCodeByte
.1494	20 6b 12	jsr $126b			jsr 	LookNextNonSpace 			; look for ,
.1497	c9 2c		cmp #$2c			cmp 	#","
.1499	d0 05		bne $14a0			bne 	_CNExit
.149b	20 79 12	jsr $1279			jsr 	GetNext 					; consume ,
.149e	80 d5		bra $1475			bra 	CommandNEXT 				; and go round.
.14a0					_CNExit:
.14a0	60		rts				rts
.14a1					CommandON:
.14a1	20 84 12	jsr $1284			jsr 	GetNextNonSpace 			; GOTO / GOSUB must follow
.14a4	48		pha				pha 								; save on stack
.14a5	a2 d1		ldx #$d1			ldx 	#PCD_CMD_GOTO
.14a7	c9 89		cmp #$89			cmp 	#C64_GOTO 					; must be GOTO/GOSUB
.14a9	f0 09		beq $14b4			beq 	_COCreateLoop
.14ab	a2 d2		ldx #$d2			ldx 	#PCD_CMD_GOSUB
.14ad	c9 8d		cmp #$8d			cmp 	#C64_GOSUB
.14af	f0 03		beq $14b4			beq 	_COCreateLoop
.14b1	4c 8c 17	jmp $178c		jmp	ErrorV_syntax
.14b4					_COCreateLoop:
.14b4	8a		txa				txa 								; compile a goto/gosub somewhere
.14b5	da		phx				phx
.14b6	20 54 13	jsr $1354			jsr 	CompileBranchCommand
.14b9	fa		plx				plx
.14ba	20 6b 12	jsr $126b			jsr 	LookNextNonSpace			; ',' follows
.14bd	c9 2c		cmp #$2c			cmp 	#","
.14bf	d0 0a		bne $14cb			bne 	_COComplete 				; if so, more line numbers
.14c1	a9 aa		lda #$aa			lda 	#PCD_MOREON 				; ON extends.
.14c3	20 00 09	jsr $0900			jsr 	WriteCodeByte
.14c6	20 79 12	jsr $1279			jsr 	GetNext
.14c9	80 e9		bra $14b4			bra 	_COCreateLoop
.14cb					_COComplete:
.14cb	68		pla				pla 								; throw GOTO/GOSUB
.14cc	60		rts				rts
.14cd					ParseConstant:
.14cd	a2 00		ldx #$00			ldx 	#0
.14cf	20 c4 1c	jsr $1cc4			jsr 	FloatEncodeStart 			; send first
.14d2					_ParseLoop:
.14d2	20 68 12	jsr $1268			jsr 	LookNext 					; send subsequent
.14d5	20 c7 1c	jsr $1cc7			jsr 	FloatEncodeContinue
.14d8	90 05		bcc $14df			bcc 	_ParseDone
.14da	20 79 12	jsr $1279			jsr 	GetNext 					; consume it
.14dd	80 f3		bra $14d2			bra 	_ParseLoop
.14df					_ParseDone:
.14df	b5 30		lda $30,x			lda 	NSStatus,x 					; shouldn't be -ve ....
.14e1	29 80		and #$80			and 	#$80
.14e3	15 6c		ora $6c,x			ora 	NSExponent,x 				; 16 bit int check
.14e5	15 54		ora $54,x			ora 	NSMantissa2,x
.14e7	15 60		ora $60,x			ora 	NSMantissa3,x
.14e9	18		clc				clc
.14ea	d0 05		bne $14f1			bne 	_ParseExit 					; exit with CC if need float to compile
.14ec	b5 3c		lda $3c,x			lda 	NSMantissa0,x 				; read into YA.
.14ee	b4 48		ldy $48,x			ldy		NSMantissa1,x
.14f0	38		sec				sec
.14f1					_ParseExit:
.14f1	60		rts				rts
.14f2					CommandPRINT:
.14f2	20 6b 12	jsr $126b			jsr 	LookNextNonSpace			; what follows ?
.14f5	c9 3b		cmp #$3b			cmp 	#";" 						; semicolon, check end of command
.14f7	f0 1f		beq $1518			beq 	_CPCheckEnd
.14f9	c9 2c		cmp #$2c			cmp 	#"," 						; , TAB and check end of command
.14fb	f0 16		beq $1513			beq 	_CPTabCheckEnd
.14fd	20 2f 15	jsr $152f			jsr 	_CPAtEnd 					; check for : and EOL
.1500	b0 22		bcs $1524			bcs 	_CPExitCR 					; exit with CR
.1502	20 16 0c	jsr $0c16			jsr 	CompileExpressionAt0 		; so it is something to print
.1505	a2 b2		ldx #$b2			ldx 	#PCD_PRINTCMD_S
.1507	29 40		and #$40			and 	#NSSString 					; if string
.1509	d0 02		bne $150d			bne 	_CPOut
.150b	a2 b1		ldx #$b1			ldx 	#PCD_PRINTCMD_N
.150d					_CPOut:
.150d	8a		txa				txa 								; print that thing
.150e	20 00 09	jsr $0900			jsr 	WriteCodeByte
.1511	80 df		bra $14f2			bra 	CommandPRINT 				; and loop round/
.1513					_CPTabCheckEnd:
.1513	a9 b8		lda #$b8			lda 	#PCD_PRINTCMD_TAB 			; , next tab stop
.1515	20 00 09	jsr $0900			jsr 	WriteCodeByte
.1518					_CPCheckEnd:
.1518	20 79 12	jsr $1279			jsr 	GetNext 					; consume it.
.151b	20 6b 12	jsr $126b			jsr 	LookNextNonSpace 			; what follows ?
.151e	20 2f 15	jsr $152f			jsr 	_CPAtEnd 					; reached end
.1521	90 cf		bcc $14f2			bcc 	CommandPRINT 				; no, loop back
.1523	60		rts				rts
.1524					_CPExitCR:
.1524	a9 0d		lda #$0d			lda 	#13 						; code to print CR
.1526	20 29 0a	jsr $0a29			jsr 	PushIntegerA
.1529	a9 92		lda #$92			lda 	#PCD_PRINTCMD_CHR
.152b	20 00 09	jsr $0900			jsr 	WriteCodeByte
.152e	60		rts				rts
.152f					_CPAtEnd:
.152f	c9 00		cmp #$00			cmp 	#0
.1531	f0 06		beq $1539			beq 	_CPIsEnd
.1533	c9 3a		cmp #$3a			cmp 	#":"
.1535	f0 02		beq $1539			beq 	_CPIsEnd
.1537	18		clc				clc
.1538	60		rts				rts
.1539					_CPIsEnd:
.1539	38		sec				sec
.153a	60		rts				rts
.153b					CommandREAD:
.153b	a2 b3		ldx #$b3			ldx 	#PCD_READ
.153d	a0 b4		ldy #$b4			ldy 	#PCD_READDOLLAR
.153f					CommandReadInputCommon:
.153f	8e 0d 05	stx $050d			stx 	numberPCode
.1542	8c 0e 05	sty $050e			sty 	stringPCode
.1545					_CRLoop:
.1545	20 84 12	jsr $1284			jsr 	GetNextNonSpace 			; first char of identifier
.1548	20 9a 12	jsr $129a			jsr 	CharIsAlpha 				; check A-Z
.154b	90 27		bcc $1574			bcc 	_CRSyntax
.154d	20 c5 15	jsr $15c5			jsr 	GetReferenceTerm 			; get the variable.
.1550	48		pha				pha 								; save type.
.1551	29 40		and #$40			and 	#NSSTypeMask 				; is it a string ?
.1553	c9 40		cmp #$40			cmp 	#NSSString
.1555	f0 05		beq $155c			beq 	_CRString
.1557	ad 0d 05	lda $050d			lda 	numberPCode 				; output read/input
.155a	80 03		bra $155f			bra 	_CRHaveType
.155c					_CRString:
.155c	ad 0e 05	lda $050e			lda 	stringPCode					; output read$/input$
.155f					_CRHaveType:
.155f	20 00 09	jsr $0900			jsr 	WriteCodeByte 				; so we have one typed data item.
.1562	68		pla				pla 								; restore type
.1563	38		sec				sec  								; write update code.
.1564	20 77 15	jsr $1577			jsr 	GetSetVariable
.1567	20 6b 12	jsr $126b			jsr 	LookNextNonSpace 			; , follows ?
.156a	c9 2c		cmp #$2c			cmp 	#","
.156c	d0 05		bne $1573			bne 	_CRExit 					; if not, end of READ.
.156e	20 79 12	jsr $1279			jsr 	GetNext 					; consume comma
.1571	80 d2		bra $1545			bra 	_CRLoop 					; keep going
.1573					_CRExit:
.1573	60		rts				rts
.1574					_CRSyntax:
.1574	4c 8c 17	jmp $178c		jmp	ErrorV_syntax
.050d					numberPCode:
>050d							.fill 	1
.050e					stringPCode:
>050e							.fill 	1
.1577					GetSetVariable:
.1577	08		php				php 								; save direction on stack
.1578	c0 00		cpy #$00			cpy 	#$00
.157a	30 21		bmi $159d			bmi 	_GSVReadWriteSpecial
.157c	c9 00		cmp #$00			cmp 	#$00
.157e	30 33		bmi $15b3			bmi 	_GSVArray
.1580	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16 		; get type bits
.1582	4a		lsr a				lsr 	a 							; divide by 2
.1583	09 40		ora #$40			ora 	#64 						; and set bit 6.
.1585	28		plp				plp
.1586	90 02		bcc $158a			bcc 	_GSVNotWrite
.1588	09 08		ora #$08			ora 	#8  						; set bit 3 if it is write.
.158a					_GSVNotWrite:
.158a	85 2a		sta $2a				sta 	zTemp0
.158c	98		tya				tya 	 							; shift X/Y right as the address stored is halved
.158d	4a		lsr a				lsr 	a
.158e	a8		tay				tay
.158f	8a		txa				txa
.1590	6a		ror a				ror 	a
.1591	aa		tax				tax
.1592	98		tya				tya 								; lower 3 bits of YX are ORed into the opcode
.1593	05 2a		ora $2a				ora 	zTemp0 						; which is the first byte of the opcode
.1595	20 00 09	jsr $0900			jsr 	WriteCodeByte
.1598	8a		txa				txa 								; and the lower 8 bits of YX are the second byte
.1599	20 00 09	jsr $0900			jsr 	WriteCodeByte
.159c	60		rts				rts
.159d					_GSVReadWriteSpecial:
.159d	28		plp				plp
.159e	b0 10		bcs $15b0			bcs 	_GSVSyntax
.15a0	c0 c0		cpy #$c0			cpy 	#$C0 						; TI$ ?
.15a2	f0 06		beq $15aa			beq 	_GSVRWString
.15a4	a9 c0		lda #$c0			lda 	#(PCD_TI) & $FF
.15a6	20 00 09	jsr $0900			jsr 	WriteCodeByte
.15a9	60		rts				rts
.15aa					_GSVRWString:
.15aa	a9 c1		lda #$c1			lda 	#(PCD_TIDOLLAR) & $FF
.15ac	20 00 09	jsr $0900			jsr 	WriteCodeByte
.15af	60		rts				rts
.15b0					_GSVSyntax:
.15b0	4c 8c 17	jmp $178c		jmp	ErrorV_syntax
.15b3					_GSVArray:
.15b3	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16 		; mask out 2 bits of type data
.15b5	4a		lsr a				lsr 	a		 					; shift from 5,6 to 0,1
.15b6	4a		lsr a				lsr 	a
.15b7	4a		lsr a				lsr 	a
.15b8	4a		lsr a				lsr 	a
.15b9	4a		lsr a				lsr 	a
.15ba	28		plp				plp 								; if writing array then set bit 2.
.15bb	90 02		bcc $15bf			bcc 	_GSVANotWrite
.15bd	09 04		ora #$04			ora 	#4
.15bf					_GSVANotWrite:
.15bf	09 78		ora #$78			ora 	#$78 						; make a valid opcode.
.15c1	20 00 09	jsr $0900			jsr 	WriteCodeByte 				; and write it out
.15c4	60		rts				rts
.15c5					GetReferenceTerm:
.15c5	20 e9 12	jsr $12e9			jsr 	ExtractVariableName 		; get name & type info
.15c8	e0 00		cpx #$00			cpx 	#0 							; check for array handler
.15ca	30 10		bmi $15dc			bmi 	_GRTArray
.15cc	da		phx				phx 								; save type on stack
.15cd	20 d0 0c	jsr $0cd0			jsr 	FindVariable 				; find it
.15d0	b0 06		bcs $15d8			bcs 	_GRTNoCreate 				; create if required.
.15d2	20 5b 0a	jsr $0a5b			jsr 	CreateVariableRecord 		; create a variable.
.15d5	20 b0 0a	jsr $0ab0			jsr 	AllocateBytesForType 		; allocate memory for it
.15d8					_GRTNoCreate:
.15d8	68		pla				pla 								; get type back, strip out type information.
.15d9	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16
.15db	60		rts				rts
.15dc					_GRTArray:
.15dc	da		phx				phx 								; save type information
.15dd	20 d0 0c	jsr $0cd0			jsr 	FindVariable 				; read its data, the base address in YX
.15e0	90 18		bcc $15fa			bcc 	_GRTUndeclared 				; undeclared array.
.15e2	da		phx				phx 								; save base address
.15e3	5a		phy				phy
.15e4	20 a7 0b	jsr $0ba7			jsr 	OutputIndexGroup 			; create an index group and generate them
.15e7	7a		ply				ply 								; get the array base address into YX
.15e8	fa		plx				plx
.15e9	a9 20		lda #$20			lda 	#NSSIFloat+NSSIInt16 		; pretend it is an int16 reference.
.15eb	18		clc				clc
.15ec	20 77 15	jsr $1577			jsr 	GetSetVariable 				; load the address of the array structure.
.15ef	a9 8e		lda #$8e			lda 	#(PCD_ARRAY) & $FF
.15f1	20 00 09	jsr $0900			jsr 	WriteCodeByte
.15f4	68		pla				pla 								; and the type data into A
.15f5	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16
.15f7	09 80		ora #$80			ora 	#$80 						; with the array flag set.
.15f9	60		rts				rts
.15fa					_GRTUndeclared:
.15fa	4c 43 18	jmp $1843		jmp	ErrorV_undeclared
.15fd					CommandREM:
.15fd	20 68 12	jsr $1268			jsr 	LookNext
.1600	f0 05		beq $1607			beq 	_CRExit
.1602	20 79 12	jsr $1279			jsr 	GetNext
.1605	80 f6		bra $15fd			bra 	CommandREM
.1607					_CRExit:
.1607	60		rts				rts
.1608					STRReset:
.1608	ad 07 05	lda $0507			lda	 	compilerStartHigh 			; set up the two table pointers
.160b	8d 12 05	sta $0512			sta 	variableListEnd+1
.160e	9c 11 05	stz $0511			stz 	variableListEnd
.1611	ad 08 05	lda $0508			lda 	compilerEndHigh
.1614	8d 10 05	sta $0510			sta 	lineNumberTable+1
.1617	9c 0f 05	stz $050f			stz 	lineNumberTable
.161a	ad 11 05	lda $0511			lda 	variableListEnd
.161d	85 2b		sta $2b				sta 	zTemp0+1
.161f	64 2a		stz $2a				stz 	zTemp0
.1621	a9 00		lda #$00			lda 	#0
.1623	92 2a		sta ($2a)			sta 	(zTemp0)
.1625	a9 00		lda #$00			lda 	#((0) & $FF)
.1627	8d 13 05	sta $0513			sta 	0+freeVariableMemory
.162a	a9 00		lda #$00			lda 	#((0) >> 8) & $FF
.162c	8d 14 05	sta $0514			sta 	1+freeVariableMemory
.162f	60		rts				rts
.050f					lineNumberTable:
>050f							.fill 	2
.0511					variableListEnd:
>0511							.fill 	2
.0513					freeVariableMemory:
>0513							.fill 	2
.1630					CommandRESTORE:
.1630	20 6b 12	jsr $126b			jsr 	LookNextNonSpace 			; what follows ?
.1633	c9 3a		cmp #$3a			cmp 	#':'						; if : or EOL then default
.1635	f0 0a		beq $1641			beq 	_CRDefault
.1637	c9 00		cmp #$00			cmp 	#0
.1639	f0 06		beq $1641			beq 	_CRDefault
.163b	a9 d6		lda #$d6			lda 	#PCD_CMD_RESTORE 			; no, we have a parameter like GOTO/GOSUB
.163d	20 54 13	jsr $1354			jsr 	CompileBranchCommand
.1640	60		rts				rts
.1641					_CRDefault:
.1641	a9 d6		lda #$d6			lda 	#PCD_CMD_RESTORE 			; compile RESTORE
.1643	20 00 09	jsr $0900			jsr 	WriteCodeByte
.1646	a9 00		lda #$00			lda 	#0		 					; with zero "line#"
.1648	20 00 09	jsr $0900			jsr 	WriteCodeByte
.164b	20 00 09	jsr $0900			jsr 	WriteCodeByte
.164e	60		rts				rts
.164f					CompileTerm:
.164f	20 84 12	jsr $1284			jsr 	GetNextNonSpace 			; get first non space character.
.1652	30 72		bmi $16c6			bmi 	_CTUnaryFunctions
.1654	20 8e 12	jsr $128e			jsr 	CharIsDigit 				; found a number
.1657	b0 3a		bcs $1693			bcs 	_CTDigit
.1659	c9 2e		cmp #$2e			cmp 	#"."
.165b	f0 36		beq $1693			beq 	_CTDigit
.165d	c9 22		cmp #$22			cmp 	#'"' 						; found a string ?
.165f	f0 43		beq $16a4			beq 	_CTString
.1661	c9 25		cmp #$25			cmp 	#"%"						; binary or hexadecimal ?
.1663	f0 28		beq $168d			beq 	_CTOtherBase
.1665	c9 24		cmp #$24			cmp 	#"$"
.1667	f0 24		beq $168d			beq 	_CTOtherBase
.1669	c9 28		cmp #$28			cmp 	#"(" 						; check parenthesis
.166b	f0 17		beq $1684			beq 	_CTBrackets
.166d	c9 41		cmp #$41			cmp 	#"A" 						; check variable/array ?
.166f	90 10		bcc $1681			bcc 	_CTSyntax
.1671	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1673	b0 0c		bcs $1681			bcs 	_CTSyntax
.1675	20 c5 15	jsr $15c5			jsr 	GetReferenceTerm 			; figure out what it is.
.1678	48		pha				pha 								; save type on stack
.1679	18		clc				clc 								; read it
.167a	20 77 15	jsr $1577			jsr 	GetSetVariable
.167d	68		pla				pla
.167e	29 40		and #$40			and 	#NSSTypeMask 				; reduce to basic type
.1680	60		rts				rts
.1681					_CTSyntax:
.1681	4c 8c 17	jmp $178c		jmp	ErrorV_syntax
.1684					_CTBrackets:
.1684	20 16 0c	jsr $0c16			jsr 	CompileExpressionAt0
.1687	48		pha				pha
.1688	20 62 09	jsr $0962			jsr 	CheckNextRParen
.168b	68		pla				pla
.168c	60		rts				rts
.168d					_CTOtherBase:
.168d	20 ae 08	jsr $08ae			jsr 	InlineNonDecimal 			; non decimal constant handler
.1690	a9 00		lda #$00			lda 	#NSSIFloat					; return a iFloat32 integer
.1692	60		rts				rts
.1693					_CTDigit:
.1693	20 cd 14	jsr $14cd			jsr 	ParseConstant 				; parse out an number, first is in A already.
.1696	90 06		bcc $169e			bcc	 	_CTFloat 					; have a float or long int.
.1698	20 16 0a	jsr $0a16			jsr 	PushIntegerYA 				; code to push on stack
.169b	a9 00		lda #$00			lda 	#NSSIFloat					; return a iFloat32 integer
.169d	60		rts				rts
.169e					_CTFloat:
.169e	20 38 0a	jsr $0a38			jsr 	PushFloatCommand			; code to push float
.16a1	a9 00		lda #$00			lda 	#NSSIFloat 					; return a iFloat32
.16a3	60		rts				rts
.16a4					_CTString:
.16a4	20 37 09	jsr $0937			jsr 	BufferClear 				; copy it to the buffer
.16a7					_CTStringLoop:
.16a7	20 68 12	jsr $1268			jsr 	LookNext 					; reached EOL/EOS
.16aa	f0 d5		beq $1681			beq 	_CTSyntax
.16ac	c9 22		cmp #$22			cmp 	#'"'
.16ae	f0 08		beq $16b8			beq 	_CTStringDone
.16b0	20 3b 09	jsr $093b			jsr 	BufferWrite 				; write and consume
.16b3	20 79 12	jsr $1279			jsr 	GetNext
.16b6	80 ef		bra $16a7			bra 	_CTStringLoop
.16b8					_CTStringDone:
.16b8	20 79 12	jsr $1279			jsr 	GetNext 					; consume closing quote.
.16bb	a9 cf		lda #$cf			lda 	#PCD_CMD_STRING 			; output command and buffer
.16bd	20 00 09	jsr $0900			jsr 	WriteCodeByte
.16c0	20 47 09	jsr $0947			jsr 	BufferOutput
.16c3	a9 40		lda #$40			lda 	#NSSString 					; string type
.16c5	60		rts				rts
.16c6					_CTUnaryFunctions:
.16c6	c9 ab		cmp #$ab			cmp 	#C64_MINUS 					; negation of term.
.16c8	f0 0a		beq $16d4			beq 	_CTNegation
.16ca	a2 0a		ldx #$0a			ldx 	#UnaryTables & $FF 			; check vs unary tables.
.16cc	a0 10		ldy #$10			ldy 	#UnaryTables >> 8
.16ce	20 0a 11	jsr $110a			jsr 	GeneratorProcess
.16d1	90 ae		bcc $1681			bcc		_CTSyntax
.16d3	60		rts				rts
.16d4					_CTNegation:
.16d4	20 4f 16	jsr $164f			jsr 	CompileTerm 				; compile a term.
.16d7	48		pha				pha
.16d8	29 40		and #$40			and 	#NSSTypeMask 				; if not an ifloat32 of some sort.
.16da	c9 00		cmp #$00			cmp 	#NSSIFloat
.16dc	d0 07		bne $16e5			bne 	_CTType 					; error
.16de	a9 a5		lda #$a5			lda 	#PCD_NEGATE 				; compile negate
.16e0	20 00 09	jsr $0900			jsr 	WriteCodeByte
.16e3	68		pla				pla 								; return original type.
.16e4	60		rts				rts
.16e5					_CTType:
.16e5	4c 9c 17	jmp $179c		jmp	ErrorV_type
.16e8					CommandWAIT:
.16e8	20 6b 12	jsr $126b			jsr 	LookNextNonSpace
.16eb	c9 2c		cmp #$2c			cmp 	#","
.16ed	f0 10		beq $16ff			beq 	_CWThirdParameter
.16ef	a9 00		lda #$00			lda 	#0
.16f1	20 29 0a	jsr $0a29			jsr 	PushIntegerA
.16f4					_CWExit:
.16f4	a9 cb		lda #$cb			lda 	#(PCD_WAIT) >> 8
.16f6	20 00 09	jsr $0900			jsr 	WriteCodeByte
.16f9	a9 93		lda #$93			lda 	#(PCD_WAIT) & $FF
.16fb	20 00 09	jsr $0900			jsr 	WriteCodeByte
.16fe	60		rts				rts
.16ff					_CWThirdParameter:
.16ff	20 79 12	jsr $1279			jsr 	GetNext
.1702	20 18 0c	jsr $0c18			jsr 	CompileExpressionAtA
.1705	29 40		and #$40			and 	#NSSTypeMask
.1707	c9 00		cmp #$00			cmp 	#NSSIFloat
.1709	f0 e9		beq $16f4			beq 	_CWExit
.170b	4c 9c 17	jmp $179c		jmp	ErrorV_type
.170e					CommandCMD:
.170e	a9 b0		lda #$b0			lda 	#PCD_SETCHANNEL 			; set the channel to this now forever.
.1710	20 00 09	jsr $0900			jsr 	WriteCodeByte
.1713	20 6b 12	jsr $126b			jsr 	LookNextNonSpace 			; followed by a , ?
.1716	c9 2c		cmp #$2c			cmp 	#","
.1718	d0 06		bne $1720			bne 	_CCMDExit
.171a	20 79 12	jsr $1279			jsr 	GetNext 					; consume comma.
.171d	20 f2 14	jsr $14f2			jsr 	CommandPRINT 				; do the print code
.1720					_CCMDExit:
.1720	60		rts				rts
.1721					CommandOPEN:
.1721	20 6b 12	jsr $126b			jsr 	LookNextNonSpace 			; followed by a , ?
.1724	c9 2c		cmp #$2c			cmp 	#","
.1726	d0 15		bne $173d			bne 	_COTwoDefaults
.1728	20 79 12	jsr $1279			jsr 	GetNext 					; consume comma
.172b	20 16 0c	jsr $0c16			jsr 	CompileExpressionAt0 		; what follows could be text or number.
.172e	29 40		and #$40			and 	#NSSString 					; if a number want a string to follow
.1730	f0 1e		beq $1750			beq 	_COThreeIntegers
.1732	a9 00		lda #$00			lda 	#0		 					; so we have n,n,$,0 so swap !
.1734	20 29 0a	jsr $0a29			jsr 	PushIntegerA
.1737	a9 bf		lda #$bf			lda 	#(PCD_SWAP) & $FF
.1739	20 00 09	jsr $0900			jsr 	WriteCodeByte
.173c	60		rts				rts
.173d					_COTwoDefaults:
.173d	a9 00		lda #$00			lda 	#0
.173f	20 29 0a	jsr $0a29			jsr 	PushIntegerA
.1742					_COCompileNullString:
.1742	a9 cf		lda #$cf			lda 	#(PCD_CMD_STRING) & $FF
.1744	20 00 09	jsr $0900			jsr 	WriteCodeByte
.1747	a9 00		lda #$00			lda 	#0
.1749	20 00 09	jsr $0900			jsr 	WriteCodeByte
.174c	20 00 09	jsr $0900			jsr 	WriteCodeByte
.174f	60		rts				rts
.1750					_COThreeIntegers:
.1750	20 6b 12	jsr $126b			jsr 	LookNextNonSpace 			; is there a ,
.1753	c9 2c		cmp #$2c			cmp 	#","
.1755	d0 eb		bne $1742			bne 	_COCompileNullString 		; if not it is n,n,n so default filename.
.1757	20 79 12	jsr $1279			jsr 	GetNext
.175a	20 16 0c	jsr $0c16			jsr 	CompileExpressionAt0 		; should be a filename
.175d	29 40		and #$40			and 	#NSSString
.175f	f0 01		beq $1762			beq 	_COType
.1761	60		rts				rts
.1762					_COType:
.1762	4c 9c 17	jmp $179c		jmp	ErrorV_type

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/common.library

=$80					C64_END                  = $80 ; $80 end
=$81					C64_FOR                  = $81 ; $81 for
=$82					C64_NEXT                 = $82 ; $82 next
=$83					C64_DATA                 = $83 ; $83 data
=$84					C64_INPUTHASH            = $84 ; $84 input#
=$85					C64_INPUT                = $85 ; $85 input
=$86					C64_DIM                  = $86 ; $86 dim
=$87					C64_READ                 = $87 ; $87 read
=$88					C64_LET                  = $88 ; $88 let
=$89					C64_GOTO                 = $89 ; $89 goto
=$8a					C64_RUN                  = $8a ; $8a run
=$8b					C64_IF                   = $8b ; $8b if
=$8c					C64_RESTORE              = $8c ; $8c restore
=$8d					C64_GOSUB                = $8d ; $8d gosub
=$8e					C64_RETURN               = $8e ; $8e return
=$8f					C64_REM                  = $8f ; $8f rem
=$90					C64_STOP                 = $90 ; $90 stop
=$91					C64_ON                   = $91 ; $91 on
=$92					C64_WAIT                 = $92 ; $92 wait
=$93					C64_LOAD                 = $93 ; $93 load
=$94					C64_SAVE                 = $94 ; $94 save
=$95					C64_VERIFY               = $95 ; $95 verify
=$96					C64_DEF                  = $96 ; $96 def
=$97					C64_POKE                 = $97 ; $97 poke
=$98					C64_PRINTHASH            = $98 ; $98 print#
=$99					C64_PRINT                = $99 ; $99 print
=$9a					C64_CONT                 = $9a ; $9a cont
=$9b					C64_LIST                 = $9b ; $9b list
=$9c					C64_CLR                  = $9c ; $9c clr
=$9d					C64_CMD                  = $9d ; $9d cmd
=$9e					C64_SYS                  = $9e ; $9e sys
=$9f					C64_OPEN                 = $9f ; $9f open
=$a0					C64_CLOSE                = $a0 ; $a0 close
=$a1					C64_GET                  = $a1 ; $a1 get
=$a2					C64_NEW                  = $a2 ; $a2 new
=$a3					C64_TABLB                = $a3 ; $a3 tab(
=$a4					C64_TO                   = $a4 ; $a4 to
=$a5					C64_FN                   = $a5 ; $a5 fn
=$a6					C64_SPCLB                = $a6 ; $a6 spc(
=$a7					C64_THEN                 = $a7 ; $a7 then
=$a8					C64_NOT                  = $a8 ; $a8 not
=$a9					C64_STEP                 = $a9 ; $a9 step
=$aa					C64_PLUS                 = $aa ; $aa +
=$ab					C64_MINUS                = $ab ; $ab -
=$ac					C64_TIMES                = $ac ; $ac *
=$ad					C64_DIVIDE               = $ad ; $ad /
=$ae					C64_POWER                = $ae ; $ae ^
=$af					C64_AND                  = $af ; $af and
=$b0					C64_OR                   = $b0 ; $b0 or
=$b1					C64_GREATER              = $b1 ; $b1 >
=$b2					C64_EQUAL                = $b2 ; $b2 =
=$b3					C64_LESS                 = $b3 ; $b3 <
=$b4					C64_SGN                  = $b4 ; $b4 sgn
=$b5					C64_INT                  = $b5 ; $b5 int
=$b6					C64_ABS                  = $b6 ; $b6 abs
=$b7					C64_USR                  = $b7 ; $b7 usr
=$b8					C64_FRE                  = $b8 ; $b8 fre
=$b9					C64_POS                  = $b9 ; $b9 pos
=$ba					C64_SQR                  = $ba ; $ba sqr
=$bb					C64_RND                  = $bb ; $bb rnd
=$bc					C64_LOG                  = $bc ; $bc log
=$bd					C64_EXP                  = $bd ; $bd exp
=$be					C64_COS                  = $be ; $be cos
=$bf					C64_SIN                  = $bf ; $bf sin
=$c0					C64_TAN                  = $c0 ; $c0 tan
=$c1					C64_ATN                  = $c1 ; $c1 atn
=$c2					C64_PEEK                 = $c2 ; $c2 peek
=$c3					C64_LEN                  = $c3 ; $c3 len
=$c4					C64_STRDOLLAR            = $c4 ; $c4 str$
=$c5					C64_VAL                  = $c5 ; $c5 val
=$c6					C64_ASC                  = $c6 ; $c6 asc
=$c7					C64_CHRDOLLAR            = $c7 ; $c7 chr$
=$c8					C64_LEFTDOLLAR           = $c8 ; $c8 left$
=$c9					C64_RIGHTDOLLAR          = $c9 ; $c9 right$
=$ca					C64_MIDDOLLAR            = $ca ; $ca mid$
=$cb					C64_GO                   = $cb ; $cb go
=$ff					C64_PI                   = $ff ; $ff pi
=$ce80					C64_MON                  = $ce80 ; $ce80 mon
=$ce81					C64_DOS                  = $ce81 ; $ce81 dos
=$ce82					C64_OLD                  = $ce82 ; $ce82 old
=$ce83					C64_GEOS                 = $ce83 ; $ce83 geos
=$ce84					C64_VPOKE                = $ce84 ; $ce84 vpoke
=$ce85					C64_VLOAD                = $ce85 ; $ce85 vload
=$ce86					C64_SCREEN               = $ce86 ; $ce86 screen
=$ce87					C64_PSET                 = $ce87 ; $ce87 pset
=$ce88					C64_LINE                 = $ce88 ; $ce88 line
=$ce89					C64_FRAME                = $ce89 ; $ce89 frame
=$ce8a					C64_RECT                 = $ce8a ; $ce8a rect
=$ce8b					C64_CHAR                 = $ce8b ; $ce8b char
=$ce8c					C64_MOUSE                = $ce8c ; $ce8c mouse
=$ce8d					C64_COLOR                = $ce8d ; $ce8d color
=$ce8e					C64_TEST                 = $ce8e ; $ce8e test
=$ce8f					C64_RESET                = $ce8f ; $ce8f reset
=$ce90					C64_CLS                  = $ce90 ; $ce90 cls
=$ce91					C64_CODEX                = $ce91 ; $ce91 codex
=$ce92					C64_LOCATE               = $ce92 ; $ce92 locate
=$ce93					C64_BOOT                 = $ce93 ; $ce93 boot
=$ce94					C64_KEYMAP               = $ce94 ; $ce94 keymap
=$ce95					C64_BLOAD                = $ce95 ; $ce95 bload
=$ce96					C64_BVLOAD               = $ce96 ; $ce96 bvload
=$ce97					C64_BVERIFY              = $ce97 ; $ce97 bverify
=$ce98					C64_BANK                 = $ce98 ; $ce98 bank
=$ce99					C64_FMINIT               = $ce99 ; $ce99 fminit
=$ce9a					C64_FMNOTE               = $ce9a ; $ce9a fmnote
=$ce9b					C64_FMDRUM               = $ce9b ; $ce9b fmdrum
=$ce9c					C64_FMINST               = $ce9c ; $ce9c fminst
=$ce9d					C64_FMVIB                = $ce9d ; $ce9d fmvib
=$ce9e					C64_FMFREQ               = $ce9e ; $ce9e fmfreq
=$ce9f					C64_FMVOL                = $ce9f ; $ce9f fmvol
=$cea0					C64_FMPAN                = $cea0 ; $cea0 fmpan
=$cea1					C64_FMPLAY               = $cea1 ; $cea1 fmplay
=$cea2					C64_FMCHORD              = $cea2 ; $cea2 fmchord
=$cea3					C64_FMPOKE               = $cea3 ; $cea3 fmpoke
=$cea4					C64_PSGINIT              = $cea4 ; $cea4 psginit
=$cea5					C64_PSGNOTE              = $cea5 ; $cea5 psgnote
=$cea6					C64_PSGVOL               = $cea6 ; $cea6 psgvol
=$cea7					C64_PSGWAV               = $cea7 ; $cea7 psgwav
=$cea8					C64_PSGFREQ              = $cea8 ; $cea8 psgfreq
=$cea9					C64_PSGPAN               = $cea9 ; $cea9 psgpan
=$ceaa					C64_PSGPLAY              = $ceaa ; $ceaa psgplay
=$ceab					C64_PSGCHORD             = $ceab ; $ceab psgchord
=$ceac					C64_REBOOT               = $ceac ; $ceac reboot
=$cead					C64_POWEROFF             = $cead ; $cead poweroff
=$ceae					C64_I2CPOKE              = $ceae ; $ceae i2cpoke
=$ceaf					C64_SLEEP                = $ceaf ; $ceaf sleep
=$ceb0					C64_BSAVE                = $ceb0 ; $ceb0 bsave
=$ceb1					C64_MENU                 = $ceb1 ; $ceb1 menu
=$ceb2					C64_REN                  = $ceb2 ; $ceb2 ren
=$ceb3					C64_LINPUT               = $ceb3 ; $ceb3 linput
=$ceb4					C64_LINPUTHASH           = $ceb4 ; $ceb4 linput#
=$ceb5					C64_BINPUTHASH           = $ceb5 ; $ceb5 binput#
=$ceb6					C64_HELP                 = $ceb6 ; $ceb6 help
=$ceb7					C64_BANNER               = $ceb7 ; $ceb7 banner
=$ceb8					C64_EXEC                 = $ceb8 ; $ceb8 exec
=$ceb9					C64_TILE                 = $ceb9 ; $ceb9 tile
=$ceba					C64_EDIT                 = $ceba ; $ceba edit
=$ced0					C64_VPEEK                = $ced0 ; $ced0 vpeek
=$ced1					C64_MX                   = $ced1 ; $ced1 mx
=$ced2					C64_MY                   = $ced2 ; $ced2 my
=$ced3					C64_MB                   = $ced3 ; $ced3 mb
=$ced4					C64_JOY                  = $ced4 ; $ced4 joy
=$ced5					C64_HEXDOLLAR            = $ced5 ; $ced5 hex$
=$ced6					C64_BINDOLLAR            = $ced6 ; $ced6 bin$
=$ced7					C64_I2CPEEK              = $ced7 ; $ced7 i2cpeek
=$ced8					C64_POINTER              = $ced8 ; $ced8 pointer
=$ced9					C64_STRPTR               = $ced9 ; $ced9 strptr
=$ceda					C64_RPTDOLLAR            = $ceda ; $ceda rpt$
=$cedb					C64_MWHEEL               = $cedb ; $cedb mwheel
=$801					CodeStart = $801
=$22					ZeroPageMandatory = $22
=$400					MemoryStorage = $400
.0026					codePtr:
>0026							.fill 	2
.0028					objPtr:
>0028							.fill 	2
.002a					zTemp0:
>002a							.fill 	2
.002c					zTemp1:
>002c							.fill 	2
.002e					zTemp2:
>002e							.fill 	2
=$80					PCD_STARTBINARY = $80
=$8d					PCD_ENDBINARY = $8d
=$8d					PCD_STARTCOMMAND = $8d
=$cb					PCD_ENDCOMMAND = $cb
=$cb					PCD_STARTSYSTEM = $cb
=$d7					PCD_ENDSYSTEM = $d7
=$80					PCD_PLUS             = $80 ; +
=$81					PCD_MINUS            = $81 ; -
=$82					PCD_TIMES            = $82 ; *
=$83					PCD_DIVIDE           = $83 ; /
=$84					PCD_POWER            = $84 ; ^
=$85					PCD_AND              = $85 ; and
=$86					PCD_OR               = $86 ; or
=$87					PCD_GREATER          = $87 ; >
=$88					PCD_EQUAL            = $88 ; =
=$89					PCD_LESS             = $89 ; <
=$8a					PCD_GREATEREQUAL     = $8a ; >=
=$8b					PCD_LESSGREATER      = $8b ; <>
=$8c					PCD_LESSEQUAL        = $8c ; <=
=$8d					PCD_ABS              = $8d ; abs
=$8e					PCD_ARRAY            = $8e ; array
=$8f					PCD_ASC              = $8f ; asc
=$90					PCD_ASSERT           = $90 ; assert
=$91					PCD_BINDOLLAR        = $91 ; bin$
=$92					PCD_PRINTCMD_CHR     = $92 ; print.chr
=$93					PCD_CHRDOLLAR        = $93 ; chr$
=$94					PCD_SCMD_CMP         = $94 ; s.cmp
=$95					PCD_FOR              = $95 ; for
=$96					PCD_FRE              = $96 ; fre
=$97					PCD_GET              = $97 ; get
=$98					PCD_RETURN           = $98 ; return
=$99					PCD_PSET             = $99 ; pset
=$9a					PCD_LINE             = $9a ; line
=$9b					PCD_RECT             = $9b ; rect
=$9c					PCD_FRAME            = $9c ; frame
=$9d					PCD_CHAR             = $9d ; char
=$9e					PCD_HEXDOLLAR        = $9e ; hex$
=$9f					PCD_INPUT            = $9f ; input
=$a0					PCD_INPUTDOLLAR      = $a0 ; input$
=$a1					PCD_INPUTCMD_START   = $a1 ; input.start
=$a2					PCD_LEN              = $a2 ; len
=$a3					PCD_FCMD_CMP         = $a3 ; f.cmp
=$a4					PCD_INTCMD_DIV       = $a4 ; int.div
=$a5					PCD_NEGATE           = $a5 ; negate
=$a6					PCD_NEWCMD_LINE      = $a6 ; new.line
=$a7					PCD_NEXT             = $a7 ; next
=$a8					PCD_NOT              = $a8 ; not
=$a9					PCD_ON               = $a9 ; on
=$aa					PCD_MOREON           = $aa ; moreon
=$ab					PCD_PEEK             = $ab ; peek
=$ac					PCD_PI               = $ac ; pi
=$ad					PCD_POKE             = $ad ; poke
=$ae					PCD_POS              = $ae ; pos
=$af					PCD_GETCHANNEL       = $af ; getchannel
=$b0					PCD_SETCHANNEL       = $b0 ; setchannel
=$b1					PCD_PRINTCMD_N       = $b1 ; print.n
=$b2					PCD_PRINTCMD_S       = $b2 ; print.s
=$b3					PCD_READ             = $b3 ; read
=$b4					PCD_READDOLLAR       = $b4 ; read$
=$b5					PCD_RND              = $b5 ; rnd
=$b6					PCD_CONCAT           = $b6 ; concat
=$b7					PCD_SGN              = $b7 ; sgn
=$b8					PCD_PRINTCMD_TAB     = $b8 ; print.tab
=$b9					PCD_PRINTCMD_POS     = $b9 ; print.pos
=$ba					PCD_PRINTCMD_SPC     = $ba ; print.spc
=$bb					PCD_STRDOLLAR        = $bb ; str$
=$bc					PCD_LEFTDOLLAR       = $bc ; left$
=$bd					PCD_RIGHTDOLLAR      = $bd ; right$
=$be					PCD_MIDDOLLAR        = $be ; mid$
=$bf					PCD_SWAP             = $bf ; swap
=$c0					PCD_TI               = $c0 ; ti
=$c1					PCD_TIDOLLAR         = $c1 ; ti$
=$c2					PCD_USR              = $c2 ; usr
=$c3					PCD_VAL              = $c3 ; val
=$c4					PCD_CLOSE            = $c4 ; close
=$c5					PCD_EXIT             = $c5 ; exit
=$c6					PCD_DEBUG            = $c6 ; debug
=$c7					PCD_OPEN             = $c7 ; open
=$c8					PCD_SCREEN           = $c8 ; screen
=$c9					PCD_VPOKE            = $c9 ; vpoke
=$ca					PCD_VPEEK            = $ca ; vpeek
=$cb					PCD_CMD_SHIFT        = $cb ; .shift
=$cc					PCD_CMD_BYTE         = $cc ; .byte
=$cd					PCD_CMD_WORD         = $cd ; .word
=$ce					PCD_CMD_FLOAT        = $ce ; .float
=$cf					PCD_CMD_STRING       = $cf ; .string
=$d0					PCD_CMD_DATA         = $d0 ; .data
=$d1					PCD_CMD_GOTO         = $d1 ; .goto
=$d2					PCD_CMD_GOSUB        = $d2 ; .gosub
=$d3					PCD_CMD_GOTOCMD_Z    = $d3 ; .goto.z
=$d4					PCD_CMD_GOTOCMD_NZ   = $d4 ; .goto.nz
=$d5					PCD_CMD_VARSPACE     = $d5 ; .varspace
=$d6					PCD_CMD_RESTORE      = $d6 ; .restore
=$cb80					PCD_CLR              = $cb80 ; clr
=$cb81					PCD_DIM              = $cb81 ; dim
=$cb82					PCD_END              = $cb82 ; end
=$cb83					PCD_JOY              = $cb83 ; joy
=$cb84					PCD_INT              = $cb84 ; int
=$cb85					PCD_SQR              = $cb85 ; sqr
=$cb86					PCD_LOG              = $cb86 ; log
=$cb87					PCD_EXP              = $cb87 ; exp
=$cb88					PCD_COS              = $cb88 ; cos
=$cb89					PCD_SIN              = $cb89 ; sin
=$cb8a					PCD_TAN              = $cb8a ; tan
=$cb8b					PCD_ATN              = $cb8b ; atn
=$cb8c					PCD_MOUSE            = $cb8c ; mouse
=$cb8d					PCD_MB               = $cb8d ; mb
=$cb8e					PCD_MX               = $cb8e ; mx
=$cb8f					PCD_MY               = $cb8f ; my
=$cb90					PCD_STOP             = $cb90 ; stop
=$cb91					PCD_SYS              = $cb91 ; sys
=$cb92					PCD_TIDOLLARCMD_WRITE = $cb92 ; ti$.write
=$cb93					PCD_WAIT             = $cb93 ; wait
=$cb94					PCD_I2CPOKE          = $cb94 ; i2cpoke
=$cb95					PCD_I2CPEEK          = $cb95 ; i2cpeek
=$cb96					PCD_BANK             = $cb96 ; bank
=$cb97					PCD_SLEEP            = $cb97 ; sleep
=$cb98					PCD_FMINIT           = $cb98 ; fminit
=$cb99					PCD_FMNOTE           = $cb99 ; fmnote
=$cb9a					PCD_FMDRUM           = $cb9a ; fmdrum
=$cb9b					PCD_FMINST           = $cb9b ; fminst
=$cb9c					PCD_FMVIB            = $cb9c ; fmvib
=$cb9d					PCD_FMFREQ           = $cb9d ; fmfreq
=$cb9e					PCD_FMVOL            = $cb9e ; fmvol
=$cb9f					PCD_FMPAN            = $cb9f ; fmpan
=$cba0					PCD_FMPLAY           = $cba0 ; fmplay
=$cba1					PCD_FMCHORD          = $cba1 ; fmchord
=$cba2					PCD_FMPOKE           = $cba2 ; fmpoke
=$cba3					PCD_PSGINIT          = $cba3 ; psginit
=$cba4					PCD_PSGNOTE          = $cba4 ; psgnote
=$cba5					PCD_PSGVOL           = $cba5 ; psgvol
=$cba6					PCD_PSGWAV           = $cba6 ; psgwav
=$cba7					PCD_PSGFREQ          = $cba7 ; psgfreq
=$cba8					PCD_PSGPAN           = $cba8 ; psgpan
=$cba9					PCD_PSGPLAY          = $cba9 ; psgplay
=$cbaa					PCD_PSGCHORD         = $cbaa ; psgchord
=$cbab					PCD_CLS              = $cbab ; cls
=$cbac					PCD_LOCATE           = $cbac ; locate
=$cbad					PCD_COLOR            = $cbad ; color
.1765					SetErrorHandler:
.1765	8c 16 05	sty $0516			sty 	ErrorHandlerVector+1
.1768	8e 15 05	stx $0515			stx 	ErrorHandlerVector
.176b	60		rts				rts
.176c					CallErrorHandler:
.176c	6c 15 05	jmp ($0515)			jmp 	(ErrorHandlerVector)
.0515					ErrorHandlerVector:
>0515							.fill 	2
.176f					ErrorV_range:
.176f	20 6c 17	jsr $176c		jsr	CallErrorHandler
>1772	4f 55 54 20 4f 46 20 52			.text	"OUT OF RANGE",0
>177a	41 4e 47 45 00
.177f					ErrorV_value:
.177f	20 6c 17	jsr $176c		jsr	CallErrorHandler
>1782	42 41 44 20 56 41 4c 55			.text	"BAD VALUE",0
>178a	45 00
.178c					ErrorV_syntax:
.178c	20 6c 17	jsr $176c		jsr	CallErrorHandler
>178f	53 59 4e 54 41 58 20 45			.text	"SYNTAX ERROR",0
>1797	52 52 4f 52 00
.179c					ErrorV_type:
.179c	20 6c 17	jsr $176c		jsr	CallErrorHandler
>179f	54 59 50 45 20 4d 49 53			.text	"TYPE MISMATCH",0
>17a7	4d 41 54 43 48 00
.17ad					ErrorV_unimplemented:
.17ad	20 6c 17	jsr $176c		jsr	CallErrorHandler
>17b0	4e 4f 54 20 49 4d 50 4c			.text	"NOT IMPLEMENTED",0
>17b8	45 4d 45 4e 54 45 44 00
.17c0					ErrorV_assert:
.17c0	20 6c 17	jsr $176c		jsr	CallErrorHandler
>17c3	41 53 53 45 52 54 20 46			.text	"ASSERT FAIL",0
>17cb	41 49 4c 00
.17cf					ErrorV_line:
.17cf	20 6c 17	jsr $176c		jsr	CallErrorHandler
>17d2	55 4e 4b 4e 4f 57 4e 20			.text	"UNKNOWN LINE NUMBER",0
>17da	4c 49 4e 45 20 4e 55 4d 42 45 52 00
.17e6					ErrorV_internal:
.17e6	20 6c 17	jsr $176c		jsr	CallErrorHandler
>17e9	49 4e 54 45 52 4e 41 4c			.text	"INTERNAL ERROR",0
>17f1	20 45 52 52 4f 52 00
.17f8					ErrorV_divzero:
.17f8	20 6c 17	jsr $176c		jsr	CallErrorHandler
>17fb	44 49 56 49 44 45 20 42			.text	"DIVIDE BY ZERO",0
>1803	59 20 5a 45 52 4f 00
.180a					ErrorV_structure:
.180a	20 6c 17	jsr $176c		jsr	CallErrorHandler
>180d	53 54 52 55 43 54 55 52			.text	"STRUCTURE IMBALANCE",0
>1815	45 20 49 4d 42 41 4c 41 4e 43 45 00
.1821					ErrorV_stop:
.1821	20 6c 17	jsr $176c		jsr	CallErrorHandler
>1824	50 52 4f 47 52 41 4d 20			.text	"PROGRAM STOPPED",0
>182c	53 54 4f 50 50 45 44 00
.1834					ErrorV_data:
.1834	20 6c 17	jsr $176c		jsr	CallErrorHandler
>1837	4f 55 54 20 4f 46 20 44			.text	"OUT OF DATA",0
>183f	41 54 41 00
.1843					ErrorV_undeclared:
.1843	20 6c 17	jsr $176c		jsr	CallErrorHandler
>1846	55 4e 4b 4e 4f 57 4e 20			.text	"UNKNOWN ARRAY",0
>184e	41 52 52 41 59 00
.1854					ErrorV_redefine:
.1854	20 6c 17	jsr $176c		jsr	CallErrorHandler
>1857	41 52 52 41 59 20 52 45			.text	"ARRAY REDEFINED",0
>185f	44 45 46 49 4e 45 44 00
.1867					ErrorV_index:
.1867	20 6c 17	jsr $176c		jsr	CallErrorHandler
>186a	42 41 44 20 41 52 52 41			.text	"BAD ARRAY INDEX",0
>1872	59 20 49 4e 44 45 58 00
.187a					ErrorV_memory:
.187a	20 6c 17	jsr $176c		jsr	CallErrorHandler
>187d	4f 55 54 20 4f 46 20 4d			.text	"OUT OF MEMORY",0
>1885	45 4d 4f 52 59 00
.188b					ErrorV_channel:
.188b	20 6c 17	jsr $176c		jsr	CallErrorHandler
>188e	49 4e 50 55 54 2f 4f 55			.text	"INPUT/OUTPUT ERROR",0
>1896	54 50 55 54 20 45 52 52 4f 52 00
.18a1					ErrorV_break:
.18a1	20 6c 17	jsr $176c		jsr	CallErrorHandler
>18a4	42 52 45 41 4b 20 50 52			.text	"BREAK PRESSED",0
>18ac	45 53 53 45 44 00
.18b2					MoveObjectForward:
.18b2	b2 28		lda ($28)			lda 	(objPtr) 					; get next
.18b4	c9 ff		cmp #$ff			cmp 	#$FF
.18b6	f0 36		beq $18ee			beq 	_MOFEnd
.18b8	c9 40		cmp #$40			cmp 	#$40 						; 00-3F
.18ba	90 24		bcc $18e0			bcc 	_MOFAdvance1 				; forward 1
.18bc	a0 02		ldy #$02			ldy 	#2 							; 40-6F
.18be	c9 70		cmp #$70			cmp 	#$70 						; forward 2
.18c0	90 20		bcc $18e2			bcc 	_MOFAdvanceY
.18c2	c9 cb		cmp #$cb			cmp 	#PCD_STARTSYSTEM 			; 70 - System tokens.
.18c4	90 1a		bcc $18e0			bcc 	_MOFAdvance1 				; forward 1
.18c6	a8		tay				tay 								; read the size.
.18c7	b9 2b 18	lda $182b,y			lda 	MOFSizeTable-PCD_STARTSYSTEM,y
.18ca	a8		tay				tay
.18cb	c8		iny				iny 								; add 1 for the system token.
.18cc	d0 14		bne $18e2			bne 	_MOFAdvanceY 				; if 0, was $FF thus a string/data skip.
.18ce	a0 01		ldy #$01			ldy 	#1 							; get length byte
.18d0	b1 28		lda ($28),y			lda 	(objPtr),y
.18d2	a8		tay				tay 								; into Y.
.18d3	18		clc				clc
.18d4	a5 28		lda $28				lda 	objPtr						; add 2 to the object pointer
.18d6	69 02		adc #$02			adc 	#2
.18d8	85 28		sta $28				sta 	objPtr
.18da	90 02		bcc $18de			bcc 	_MOFNoCarry1
.18dc	e6 29		inc $29				inc 	objPtr+1
.18de					_MOFNoCarry1:
.18de	80 02		bra $18e2			bra 	_MOFAdvanceY
.18e0					_MOFAdvance1:
.18e0	a0 01		ldy #$01			ldy 	#1
.18e2					_MOFAdvanceY:
.18e2	98		tya				tya 								; add Y to objPtr
.18e3	18		clc				clc
.18e4	65 28		adc $28				adc 	objPtr
.18e6	85 28		sta $28				sta 	objPtr
.18e8	90 02		bcc $18ec			bcc 	_MOFNoCarry2
.18ea	e6 29		inc $29				inc 	objPtr+1
.18ec					_MOFNoCarry2:
.18ec	18		clc				clc 								; not completed.
.18ed	60		rts				rts
.18ee					_MOFEnd:
.18ee	e6 28		inc $28				inc 	objPtr
.18f0	d0 02		bne $18f4			bne 	_MOFENoCarry
.18f2	e6 29		inc $29				inc 	objPtr+1
.18f4					_MOFENoCarry:
.18f4	38		sec				sec
.18f5	60		rts				rts
.18f6					MOFSizeTable:
>18f6	01					.byte	1         	; $cb .shift
>18f7	01					.byte	1         	; $cc .byte
>18f8	02					.byte	2         	; $cd .word
>18f9	05					.byte	5         	; $ce .float
>18fa	ff					.byte	255       	; $cf .string
>18fb	ff					.byte	255       	; $d0 .data
>18fc	02					.byte	2         	; $d1 .goto
>18fd	02					.byte	2         	; $d2 .gosub
>18fe	02					.byte	2         	; $d3 .goto.z
>18ff	02					.byte	2         	; $d4 .goto.nz
>1900	02					.byte	2         	; $d5 .varspace
>1901	02					.byte	2         	; $d6 .restore

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library

=12					MathStackSize = 12
=$40					NSSString = $40 							; string vs typemask
=$00					NSSIFloat = $00 							; ifloat vs typemask
=$20					NSSIInt16 = $20								; when set, a reference is a 16 bit reference (e.g. a%)
=$40					NSSTypeMask = $40
=$80					NSSArray = $80  							; array (in variable code)
.0030					NSStatus:
>0030							.fill 	MathStackSize
.003c					NSMantissa0:
>003c							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0048					NSMantissa1:
>0048							.fill 	MathStackSize
.0054					NSMantissa2:
>0054							.fill 	MathStackSize
.0060					NSMantissa3:
>0060							.fill 	MathStackSize
.006c					NSExponent:
>006c							.fill 	MathStackSize
.0517					numberBuffer:
>0517							.fill 	34
.1902					FloatSubtract:
.1902	b5 30		lda $30,x			lda 	NSStatus,x 					; negate top of stack
.1904	49 80		eor #$80			eor 	#$80
.1906	95 30		sta $30,x			sta 	NSStatus,x					; and fall through.
.1908					FloatAdd:
.1908	ca		dex				dex
.1909	b5 6c		lda $6c,x			lda 	NSExponent,x 				; can use optimised.
.190b	15 6d		ora $6d,x			ora 	NSExponent+1,x
.190d	15 60		ora $60,x			ora 	NSMantissa3,x
.190f	15 61		ora $61,x			ora 	NSMantissa3+1,x
.1911	d0 04		bne $1917			bne 	_FAUseFloat
.1913	20 a4 1c	jsr $1ca4			jsr 	FloatInt32Add 				; use the int32 one.
.1916	60		rts				rts
.1917					_FAUseFloat:
.1917	20 39 1c	jsr $1c39			jsr 	FloatNormalise 				; normalise S[X]
.191a	f0 51		beq $196d			beq 	_FAReturn1
.191c	e8		inx				inx 								; normalise S[X+1]
.191d	20 39 1c	jsr $1c39			jsr 	FloatNormalise
.1920	ca		dex				dex
.1921	c9 00		cmp #$00			cmp 	#0
.1923	f0 60		beq $1985			beq 	_FAExit 					; if so, just return A
.1925	b5 6c		lda $6c,x			lda 	NSExponent,x 				; are the exponents the same ?
.1927	d5 6d		cmp $6d,x			cmp 	NSExponent+1,x
.1929	f0 18		beq $1943			beq 	_FAExponentsEqual
.192b	b5 6c		lda $6c,x			lda 	NSExponent,x 				; work out the larger exponent
.192d	a8		tay				tay
.192e	38		sec				sec 								; do a signed comparison of the exponents.
.192f	f5 6d		sbc $6d,x			sbc 	NSExponent+1,x
.1931	50 02		bvc $1935			bvc 	_FANoSignedChange
.1933	49 80		eor #$80			eor 	#$80
.1935					_FANoSignedChange:
.1935	29 80		and #$80			and 	#$80
.1937	10 02		bpl $193b			bpl 	_FAHaveMax
.1939	b4 6d		ldy $6d,x			ldy 	NSExponent+1,x
.193b					_FAHaveMax:
.193b	20 86 19	jsr $1986			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.193e	e8		inx				inx
.193f	20 86 19	jsr $1986			jsr 	_FAShiftToExponent
.1942	ca		dex				dex
.1943					_FAExponentsEqual:
.1943	b5 30		lda $30,x			lda 	NSStatus,x 					; are the signs the same
.1945	55 31		eor $31,x			eor 	NSStatus+1,x
.1947	30 0e		bmi $1957			bmi 	_FADifferentSigns
.1949	20 70 1c	jsr $1c70			jsr 	FloatAddTopTwoStack 		; do the add of the mantissae
.194c	b5 60		lda $60,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.194e	10 35		bpl $1985			bpl 	_FAExit 					; if no, we are done.
.1950	20 fd 1e	jsr $1efd			jsr 	FloatShiftRight 				; shift A right, renormalising it.
.1953	f6 6c		inc $6c,x			inc 	NSExponent,x 				; bump the exponent and exit
.1955	80 2e		bra $1985			bra 	_FAExit
.1957					_FADifferentSigns:
.1957	20 8a 1c	jsr $1c8a			jsr 	FloatSubTopTwoStack 		; subtract mantissa B from A
.195a	b5 60		lda $60,x			lda 	NSMantissa3,x 				; is the result negative ?
.195c	10 06		bpl $1964			bpl 	_FACheckZero 				; if no, check for -0
.195e	20 a6 1e	jsr $1ea6			jsr 	FloatNegate 					; netate result
.1961	20 ad 1e	jsr $1ead			jsr 	FloatNegateMantissa 			; negate (2'c) the mantissa
.1964					_FACheckZero:
.1964	20 06 1f	jsr $1f06			jsr 	FloatIsZero	 				; check for -0
.1967	d0 1c		bne $1985			bne 	_FAExit
.1969	74 30		stz $30,x			stz 	NSStatus,x
.196b	80 18		bra $1985			bra 	_FAExit
.196d					_FAReturn1:
.196d	b5 3d		lda $3d,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.196f	95 3c		sta $3c,x			sta 	NSMantissa0,x
.1971	b5 49		lda $49,x			lda 	NSMantissa1+1,x
.1973	95 48		sta $48,x			sta 	NSMantissa1,x
.1975	b5 55		lda $55,x			lda 	NSMantissa2+1,x
.1977	95 54		sta $54,x			sta 	NSMantissa2,x
.1979	b5 61		lda $61,x			lda 	NSMantissa3+1,x
.197b	95 60		sta $60,x			sta 	NSMantissa3,x
.197d	b5 6d		lda $6d,x			lda 	NSExponent+1,x
.197f	95 6c		sta $6c,x			sta 	NSExponent,x
.1981	b5 31		lda $31,x			lda 	NSStatus+1,x
.1983	95 30		sta $30,x			sta 	NSStatus,x
.1985					_FAExit:
.1985	60		rts				rts
.1986					_FAShiftToExponent:
.1986					_FAShiftToExponent2:
.1986	98		tya				tya 								; compare Y to exponent
.1987	d5 6c		cmp $6c,x			cmp 	NSExponent,x 				; reached the exponent required ?
.1989	f0 07		beq $1992			beq 	_FASEExit 					; exit if so.
.198b	20 fd 1e	jsr $1efd			jsr 	FloatShiftRight	 			; shift the mantissa right
.198e	f6 6c		inc $6c,x			inc 	NSExponent,x 				; increment exponent
.1990	80 f4		bra $1986			bra 	_FAShiftToExponent2
.1992					_FASEExit:
.1992	60		rts				rts
.1993					CompareEqual:
.1993	b5 3c		lda $3c,x			lda 	NSMantissa0,x
.1995	d0 09		bne $19a0			bne 	ReturnFalse
.1997					ReturnTrue:
.1997	a9 01		lda #$01			lda 	#1
.1999	95 3c		sta $3c,x			sta 	NSMantissa0,x
.199b	a9 80		lda #$80			lda 	#$80
.199d	95 30		sta $30,x			sta 	NSStatus,x
.199f	60		rts				rts
.19a0					ReturnFalse:
.19a0	74 3c		stz $3c,x			stz 	NSMantissa0,x
.19a2	60		rts				rts
.19a3					CompareNotEqual:
.19a3	b5 3c		lda $3c,x			lda 	NSMantissa0,x
.19a5	d0 f0		bne $1997			bne 	ReturnTrue
.19a7	80 f7		bra $19a0			bra 	ReturnFalse
.19a9					CompareLess:
.19a9	b5 3c		lda $3c,x			lda 	NSMantissa0,x
.19ab	c9 ff		cmp #$ff			cmp 	#$FF
.19ad	f0 e8		beq $1997			beq 	ReturnTrue
.19af	80 ef		bra $19a0			bra 	ReturnFalse
.19b1					CompareGreater:
.19b1	b5 3c		lda $3c,x			lda 	NSMantissa0,x
.19b3	c9 01		cmp #$01			cmp 	#$01
.19b5	f0 e0		beq $1997			beq 	ReturnTrue
.19b7	80 e7		bra $19a0			bra 	ReturnFalse
.19b9					CompareLessEqual:
.19b9	b5 3c		lda $3c,x			lda 	NSMantissa0,x
.19bb	c9 01		cmp #$01			cmp 	#$01
.19bd	d0 d8		bne $1997			bne 	ReturnTrue
.19bf	80 df		bra $19a0			bra 	ReturnFalse
.19c1					CompareGreaterEqual:
.19c1	b5 3c		lda $3c,x			lda 	NSMantissa0,x
.19c3	c9 ff		cmp #$ff			cmp 	#$FF
.19c5	d0 d0		bne $1997			bne 	ReturnTrue
.19c7	80 d7		bra $19a0			bra 	ReturnFalse
.19c9					FloatCompare:
.19c9	b5 6c		lda $6c,x			lda 	NSExponent,x 				; float comparison.
.19cb	15 6b		ora $6b,x			ora 	NSExponent-1,x 				; integer if both integer.
.19cd	48		pha				pha
.19ce	20 02 19	jsr $1902			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.19d1	68		pla				pla
.19d2	d0 0c		bne $19e0			bne 	_FCCompareFloat
.19d4	b5 3c		lda $3c,x			lda 	NSMantissa0,x
.19d6	15 48		ora $48,x			ora 	NSMantissa1,x
.19d8	15 54		ora $54,x			ora 	NSMantissa2,x
.19da	15 60		ora $60,x			ora 	NSMantissa3,x
.19dc	f0 14		beq $19f2			beq 	_FCExit 					; if zero, return zero
.19de	80 0a		bra $19ea			bra 	_FCSign
.19e0					_FCCompareFloat:
.19e0	b5 48		lda $48,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.19e2	29 f0		and #$f0			and 	#$F0
.19e4	15 54		ora $54,x			ora 	NSMantissa2,x
.19e6	15 60		ora $60,x			ora 	NSMantissa3,x
.19e8	f0 08		beq $19f2			beq 	_FCExit 					; zero, so approximately identical
.19ea					_FCSign:
.19ea	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.19ec	34 30		bit $30,x			bit 	NSStatus,x
.19ee	10 02		bpl $19f2			bpl 	_FCExit
.19f0					_FCNegative:
.19f0	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.19f2					_FCExit:
.19f2	20 e6 1e	jsr $1ee6			jsr 	FloatSetByte 				; set the result 255,0,1
.19f5	60		rts				rts
.19f6					FloatScalarTable:
>19f6	66 66 66 66				.dword $66666666 ; 0.1
>19fa	de					.byte $de
>19fb	1f 85 eb 51				.dword $51eb851f ; 0.01
>19ff	db					.byte $db
>1a00	4c 37 89 41				.dword $4189374c ; 0.001
>1a04	d8					.byte $d8
>1a05	ac 8b db 68				.dword $68db8bac ; 0.0001
>1a09	d4					.byte $d4
>1a0a	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>1a0e	d1					.byte $d1
>1a0f	83 de 1b 43				.dword $431bde83 ; 1e-06
>1a13	ce					.byte $ce
>1a14	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>1a18	ca					.byte $ca
>1a19	89 3b e6 55				.dword $55e63b89 ; 1e-08
>1a1d	c7					.byte $c7
>1a1e	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>1a22	c4					.byte $c4
>1a23	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>1a27	c0					.byte $c0
>1a28	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>1a2c	bd					.byte $bd
.1a2d					FloatDivide:
.1a2d	48		pha				pha
.1a2e	20 39 1c	jsr $1c39			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.1a31	ca		dex				dex
.1a32	c9 00		cmp #$00			cmp 	#0
.1a34	f0 1e		beq $1a54			beq 	_FDZero
.1a36	20 39 1c	jsr $1c39			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.1a39	f0 16		beq $1a51			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.1a3b	20 9c 1a	jsr $1a9c			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.1a3e	20 69 1a	jsr $1a69			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.1a41	20 39 1c	jsr $1c39			jsr		FloatNormalise 				; renormalise
.1a44	20 2f 1c	jsr $1c2f			jsr 	FloatCalculateSign 			; calculate result sign
.1a47	b5 6c		lda $6c,x			lda 	NSExponent,x 				; calculate exponent
.1a49	38		sec				sec
.1a4a	f5 6d		sbc $6d,x			sbc 	NSExponent+1,x
.1a4c	38		sec				sec
.1a4d	e9 1e		sbc #$1e			sbc 	#30
.1a4f	95 6c		sta $6c,x			sta 	NSExponent,x
.1a51					_FDExit:
.1a51	68		pla				pla
.1a52	18		clc				clc
.1a53	60		rts				rts
.1a54					_FDZero:
.1a54	68		pla				pla
.1a55	38		sec				sec
.1a56	60		rts				rts
.1a57					DivideInt32:
.1a57	20 1f 1b	jsr $1b1f			jsr 	FloatIntegerPart 			; make both integers
.1a5a	ca		dex				dex
.1a5b	20 1f 1b	jsr $1b1f			jsr 	FloatIntegerPart
.1a5e	20 7a 1a	jsr $1a7a			jsr 	Int32Divide 				; divide
.1a61	20 69 1a	jsr $1a69			jsr 	NSMCopyPlusTwoToZero 		; copy result
.1a64	20 2f 1c	jsr $1c2f			jsr 	FloatCalculateSign 			; calculate result sign
.1a67	18		clc				clc
.1a68	60		rts				rts
.1a69					NSMCopyPlusTwoToZero:
.1a69	b5 3e		lda $3e,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.1a6b	95 3c		sta $3c,x			sta 	NSMantissa0,x
.1a6d	b5 4a		lda $4a,x			lda 	NSMantissa1+2,x
.1a6f	95 48		sta $48,x			sta 	NSMantissa1,x
.1a71	b5 56		lda $56,x			lda 	NSMantissa2+2,x
.1a73	95 54		sta $54,x			sta 	NSMantissa2,x
.1a75	b5 62		lda $62,x			lda 	NSMantissa3+2,x
.1a77	95 60		sta $60,x			sta 	NSMantissa3,x
.1a79	60		rts				rts
.1a7a					Int32Divide:
.1a7a	48		pha				pha 								; save AXY
.1a7b	5a		phy				phy
.1a7c	20 c7 1e	jsr $1ec7			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.1a7f	20 e0 1e	jsr $1ee0			jsr 	FloatSetZeroMantissaOnly 	; set S[X] to zero
.1a82	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.1a84					_I32DivideLoop:
.1a84	e8		inx				inx
.1a85	e8		inx				inx
.1a86	20 f3 1e	jsr $1ef3			jsr 	FloatShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.1a89	ca		dex				dex
.1a8a	ca		dex				dex
.1a8b	20 f4 1e	jsr $1ef4			jsr 	FloatRotateLeft
.1a8e	20 ba 1a	jsr $1aba			jsr 	FloatDivideCheck 			; check if subtract possible
.1a91	90 02		bcc $1a95			bcc 	_I32DivideNoCarryIn
.1a93	f6 3e		inc $3e,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.1a95					_I32DivideNoCarryIn:
.1a95	88		dey				dey 								; loop round till division completed.
.1a96	d0 ec		bne $1a84			bne 	_I32DivideLoop
.1a98	7a		ply				ply 								; restore AXY and exit
.1a99	68		pla				pla
.1a9a	18		clc				clc
.1a9b	60		rts				rts
.1a9c					Int32ShiftDivide:
.1a9c	48		pha				pha 								; save AY
.1a9d	5a		phy				phy
.1a9e	e8		inx				inx 								; clear S[X+2]
.1a9f	e8		inx				inx
.1aa0	20 e4 1e	jsr $1ee4			jsr 	FloatSetZero
.1aa3	ca		dex				dex
.1aa4	ca		dex				dex
.1aa5	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.1aa7					_I32SDLoop:
.1aa7	20 ba 1a	jsr $1aba			jsr 	FloatDivideCheck 			; check if subtract possible
.1aaa	e8		inx				inx
.1aab	e8		inx				inx
.1aac	20 f4 1e	jsr $1ef4			jsr 	FloatRotateLeft				; shift 64 bit FPA left, rotating carry in
.1aaf	ca		dex				dex
.1ab0	ca		dex				dex
.1ab1	20 f4 1e	jsr $1ef4			jsr 	FloatRotateLeft
.1ab4	88		dey				dey 	 							; do 31 times
.1ab5	d0 f0		bne $1aa7			bne 	_I32SDLoop
.1ab7	7a		ply				ply 								; restore AY and exit
.1ab8	68		pla				pla
.1ab9	60		rts				rts
.1aba					FloatDivideCheck:
.1aba	20 8a 1c	jsr $1c8a			jsr 	FloatSubTopTwoStack 		; subtract Stack[X+1] from Stack[X+0]
.1abd	b0 04		bcs $1ac3			bcs 	_DCSExit 					; if carry set, then could do, exit
.1abf	20 70 1c	jsr $1c70			jsr 	FloatAddTopTwoStack 		; add it back in
.1ac2	18		clc				clc 								; and return False
.1ac3					_DCSExit:
.1ac3	60		rts				rts
.1ac4					FloatFractionalPart:
.1ac4	5a		phy				phy
.1ac5	b5 30		lda $30,x			lda 	NSStatus,x 					; take absolute value
.1ac7	29 7f		and #$7f			and 	#$7F
.1ac9	95 30		sta $30,x			sta 	NSStatus,x
.1acb	20 39 1c	jsr $1c39			jsr 	FloatNormalise
.1ace	b5 6c		lda $6c,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.1ad0	38		sec				sec
.1ad1	e9 e0		sbc #$e0			sbc 	#$E0
.1ad3	90 29		bcc $1afe			bcc 	_FFPExit 					; already fractional
.1ad5	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.1ad7	b0 22		bcs $1afb			bcs 	_FFPZero
.1ad9	a8		tay				tay 								; put count to do in Y
.1ada	b5 60		lda $60,x			lda 	NSMantissa3,x 				; do each in turn.
.1adc	20 03 1b	jsr $1b03			jsr 	_FFPPartial
.1adf	95 60		sta $60,x			sta 	NSMantissa3,x
.1ae1	b5 54		lda $54,x			lda 	NSMantissa2,x
.1ae3	20 03 1b	jsr $1b03			jsr 	_FFPPartial
.1ae6	95 54		sta $54,x			sta 	NSMantissa2,x
.1ae8	b5 48		lda $48,x			lda 	NSMantissa1,x
.1aea	20 03 1b	jsr $1b03			jsr 	_FFPPartial
.1aed	95 48		sta $48,x			sta 	NSMantissa1,x
.1aef	b5 3c		lda $3c,x			lda 	NSMantissa0,x
.1af1	20 03 1b	jsr $1b03			jsr 	_FFPPartial
.1af4	95 3c		sta $3c,x			sta 	NSMantissa0,x
.1af6	20 06 1f	jsr $1f06			jsr 	FloatIsZero 					; zeroed check.
.1af9	d0 03		bne $1afe			bne 	_FFPExit
.1afb					_FFPZero:
.1afb	20 e4 1e	jsr $1ee4			jsr 	FloatSetZero
.1afe					_FFPExit:
.1afe	20 39 1c	jsr $1c39			jsr 	FloatNormalise
.1b01	7a		ply				ply
.1b02	60		rts				rts
.1b03					_FFPPartial:
.1b03	c0 00		cpy #$00			cpy 	#0 							; no more to do
.1b05	f0 17		beq $1b1e			beq 	_FFFPPExit
.1b07	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.1b09	b0 0c		bcs $1b17			bcs 	_FFFPPWholeByte
.1b0b	5a		phy				phy
.1b0c					_FFFPPLeft:
.1b0c	0a		asl a				asl 	a
.1b0d	88		dey				dey
.1b0e	d0 fc		bne $1b0c			bne 	_FFFPPLeft
.1b10	7a		ply				ply
.1b11					_FFFPPRight:
.1b11	4a		lsr a				lsr 	a
.1b12	88		dey				dey
.1b13	d0 fc		bne $1b11			bne 	_FFFPPRight
.1b15	80 07		bra $1b1e			bra 	_FFFPPExit
.1b17					_FFFPPWholeByte:
.1b17	98		tya				tya 								; subtract 8 from count
.1b18	38		sec				sec
.1b19	e9 08		sbc #$08			sbc 	#8
.1b1b	a8		tay				tay
.1b1c	a9 00		lda #$00			lda 	#0 							; and clear all
.1b1e					_FFFPPExit:
.1b1e	60		rts				rts
.1b1f					FloatIntegerPart:
.1b1f	48		pha				pha
.1b20	b5 6c		lda $6c,x			lda 	NSExponent,x 				; is it integer already ?
.1b22	f0 1d		beq $1b41			beq 	_FIPExit 					; if so do nothing
.1b24	20 06 1f	jsr $1f06			jsr 	FloatIsZero 				; is it zero ?
.1b27	f0 15		beq $1b3e			beq 	_FIPZero 					; if so return zero.
.1b29	20 39 1c	jsr $1c39			jsr 	FloatNormalise 				; normalise
.1b2c	f0 10		beq $1b3e			beq 	_FIPZero 					; normalised to zero, exit zero
.1b2e					_FIPShift:
.1b2e	b5 6c		lda $6c,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.1b30	10 07		bpl $1b39			bpl 	_FIPCheckZero
.1b32	20 fd 1e	jsr $1efd			jsr 	FloatShiftRight 			; shift mantissa right
.1b35	f6 6c		inc $6c,x			inc 	NSExponent,x 				; bump exponent
.1b37	80 f5		bra $1b2e			bra 	_FIPShift
.1b39					_FIPCheckZero:
.1b39	20 06 1f	jsr $1f06			jsr 	FloatIsZero 				; avoid -0 problem
.1b3c	d0 03		bne $1b41			bne 	_FIPExit 					; set to zero if mantissa zero.
.1b3e					_FIPZero:
.1b3e	20 e4 1e	jsr $1ee4			jsr 	FloatSetZero
.1b41					_FIPExit:
.1b41	68		pla				pla
.1b42	60		rts				rts
.1b43					FloatIntegerPartDown:
.1b43	48		pha				pha
.1b44	5a		phy				phy
.1b45	b5 6c		lda $6c,x			lda 	NSExponent,x 				; is it integer already ?
.1b47	f0 36		beq $1b7f			beq 	_FIPExit 					; if so do nothing
.1b49	20 06 1f	jsr $1f06			jsr 	FloatIsZero 				; is it zero ?
.1b4c	f0 2e		beq $1b7c			beq 	_FIPZero 					; if so return zero.
.1b4e	20 39 1c	jsr $1c39			jsr 	FloatNormalise 				; normalise
.1b51	f0 29		beq $1b7c			beq 	_FIPZero 					; normalised to zero, exit zero
.1b53	a0 00		ldy #$00			ldy 	#0 							; reset the count of bits.
.1b55					_FIPShift:
.1b55	b5 6c		lda $6c,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.1b57	10 0a		bpl $1b63			bpl 	_FIPCheckDown
.1b59	20 fd 1e	jsr $1efd			jsr 	FloatShiftRight 			; shift mantissa right
.1b5c	90 01		bcc $1b5f			bcc 	_FIPNoFrac 					; shifted a zero out ?
.1b5e	c8		iny				iny
.1b5f					_FIPNoFrac:
.1b5f	f6 6c		inc $6c,x			inc 	NSExponent,x 				; bump exponent
.1b61	80 f2		bra $1b55			bra 	_FIPShift
.1b63					_FIPCheckDown:
.1b63	c0 00		cpy #$00			cpy 	#0 							; were there any fractional bits.
.1b65	f0 10		beq $1b77			beq 	_FIPCheckZero
.1b67	34 30		bit $30,x			bit 	NSStatus,x 					; +ve
.1b69	10 0c		bpl $1b77			bpl 	_FIPCheckZero
.1b6b	e8		inx				inx 								; -ve so round *down*.
.1b6c	a9 01		lda #$01			lda 	#1
.1b6e	20 e6 1e	jsr $1ee6			jsr 	FloatSetByte
.1b71	20 a6 1e	jsr $1ea6			jsr 	FloatNegate
.1b74	20 08 19	jsr $1908			jsr 	FloatAdd
.1b77					_FIPCheckZero:
.1b77	20 06 1f	jsr $1f06			jsr 	FloatIsZero 				; avoid -0 problem
.1b7a	d0 03		bne $1b7f			bne 	_FIPExit 					; set to zero if mantissa zero.
.1b7c					_FIPZero:
.1b7c	20 e4 1e	jsr $1ee4			jsr 	FloatSetZero
.1b7f					_FIPExit:
.1b7f	7a		ply				ply
.1b80	68		pla				pla
.1b81	60		rts				rts
.1b82					FloatInt8Multiply:
.1b82	5a		phy				phy
.1b83	b5 3c		lda $3c,x			lda 	NSMantissa0,x 				; right shifted multiplier in Y
.1b85	a8		tay				tay
.1b86	74 3c		stz $3c,x			stz 	NSMantissa0,x 				; zero the result (already 8 bit constant)
.1b88					_FI8MLoop:
.1b88	98		tya				tya 								; shift right shifter right into carry
.1b89	4a		lsr a				lsr 	a
.1b8a	a8		tay				tay
.1b8b	90 0d		bcc $1b9a			bcc 	_FI8MNoAdd
.1b8d	18		clc				clc
.1b8e	b5 3c		lda $3c,x			lda 	NSMantissa0,x
.1b90	75 3d		adc $3d,x			adc 	NSMantissa0+1,x
.1b92	95 3c		sta $3c,x			sta 	NSMantissa0,x
.1b94	b5 48		lda $48,x			lda 	NSMantissa1,x
.1b96	75 49		adc $49,x			adc 	NSMantissa1+1,x
.1b98	95 48		sta $48,x			sta 	NSMantissa1,x
.1b9a					_FI8MNoAdd:
.1b9a	16 3d		asl $3d,x			asl 	NSMantissa0+1,x 			; shift adder left
.1b9c	36 49		rol $49,x			rol 	NSMantissa1+1,x
.1b9e	c0 00		cpy #$00			cpy 	#0
.1ba0	d0 e6		bne $1b88			bne 	_FI8MLoop 					; until right shifter zero.
.1ba2	7a		ply				ply
.1ba3	60		rts				rts
.1ba4					FloatMultiply:
.1ba4	ca		dex				dex
.1ba5	b5 6c		lda $6c,x			lda 	NSExponent,x 				; can use optimised ?
.1ba7	15 6d		ora $6d,x			ora 	NSExponent+1,x
.1ba9	15 60		ora $60,x			ora 	NSMantissa3,x
.1bab	15 61		ora $61,x			ora 	NSMantissa3+1,x
.1bad	d0 21		bne $1bd0			bne 	_FMUseFloat
.1baf	b5 30		lda $30,x			lda 	NSStatus,x 					; check if it is 8 bit unsigned
.1bb1	15 31		ora $31,x			ora 	NSStatus+1,x
.1bb3	29 80		and #$80			and 	#$80
.1bb5	15 60		ora $60,x			ora 	NSMantissa3,x
.1bb7	15 54		ora $54,x			ora 	NSMantissa2,x
.1bb9	15 48		ora $48,x			ora 	NSMantissa1,x
.1bbb	15 61		ora $61,x			ora 	NSMantissa3+1,x
.1bbd	15 55		ora $55,x			ora 	NSMantissa2+1,x
.1bbf	15 49		ora $49,x			ora 	NSMantissa1+1,x
.1bc1	d0 04		bne $1bc7			bne 	_FMInt32
.1bc3	20 82 1b	jsr $1b82			jsr 	FloatInt8Multiply 			; use fast 8x8 multiply.
.1bc6	60		rts				rts
.1bc7					_FMInt32:
.1bc7	20 f1 1b	jsr $1bf1			jsr 	FloatMultiplyShort			; use the int32 one.
.1bca	18		clc				clc 								; fix it up if gone out of range
.1bcb	75 6c		adc $6c,x			adc 	NSExponent,x
.1bcd	95 6c		sta $6c,x			sta 	NSExponent,x
.1bcf	60		rts				rts
.1bd0					_FMUseFloat:
.1bd0	20 39 1c	jsr $1c39			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.1bd3	f0 18		beq $1bed			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.1bd5	e8		inx				inx
.1bd6	20 39 1c	jsr $1c39			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.1bd9	ca		dex				dex
.1bda	c9 00		cmp #$00			cmp 	#0
.1bdc	f0 0c		beq $1bea			beq 	_FDSetZero
.1bde	20 f1 1b	jsr $1bf1			jsr 	FloatMultiplyShort 			; calculate the result.
.1be1	75 6c		adc $6c,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.1be3	18		clc				clc
.1be4	75 6d		adc $6d,x			adc 	NSExponent+1,x
.1be6	95 6c		sta $6c,x			sta 	NSExponent,x
.1be8	80 03		bra $1bed			bra 	_FDExit
.1bea					_FDSetZero:
.1bea	20 e4 1e	jsr $1ee4			jsr 	FloatSetZero 				; return 0
.1bed					_FDExit:
.1bed	20 39 1c	jsr $1c39			jsr 	FloatNormalise 				; normalise the result
.1bf0	60		rts				rts
.1bf1					FloatMultiplyShort:
.1bf1	5a		phy				phy 								; save Y
.1bf2	20 c7 1e	jsr $1ec7			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.1bf5	20 e0 1e	jsr $1ee0			jsr 	FloatSetZeroMantissaOnly 	; set mantissa S[X] to zero
.1bf8	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.1bfa					_I32MLoop:
.1bfa	b5 3e		lda $3e,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.1bfc	15 4a		ora $4a,x			ora 	NSMantissa1+2,x
.1bfe	15 56		ora $56,x			ora 	NSMantissa2+2,x
.1c00	15 62		ora $62,x			ora 	NSMantissa3+2,x
.1c02	f0 25		beq $1c29			beq 	_I32MExit 					; exit if zero
.1c04	b5 3e		lda $3e,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.1c06	29 01		and #$01			and 	#1
.1c08	f0 0d		beq $1c17			beq 	_I32MNoAdd
.1c0a	20 70 1c	jsr $1c70			jsr 	FloatAddTopTwoStack 		; if so add S[X+1] to S[X+0]
.1c0d	b5 60		lda $60,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.1c0f	10 06		bpl $1c17			bpl 	_I32MNoAdd
.1c11					_I32ShiftRight:
.1c11	20 fd 1e	jsr $1efd			jsr 	FloatShiftRight 			; shift S[X] right
.1c14	c8		iny				iny 								; increment shift count
.1c15	80 09		bra $1c20			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.1c17					_I32MNoAdd:
.1c17	34 61		bit $61,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.1c19	70 f6		bvs $1c11			bvs 	_I32ShiftRight 				; instead.
.1c1b	e8		inx				inx
.1c1c	20 f3 1e	jsr $1ef3			jsr 	FloatShiftLeft 				; shift additive S[X+1] left
.1c1f	ca		dex				dex
.1c20					_I32MShiftUpper:
.1c20	e8		inx				inx 								; shift S[X+2] right
.1c21	e8		inx				inx
.1c22	20 fd 1e	jsr $1efd			jsr 	FloatShiftRight
.1c25	ca		dex				dex
.1c26	ca		dex				dex
.1c27	80 d1		bra $1bfa			bra 	_I32MLoop 					; try again.
.1c29					_I32MExit:
.1c29	20 2f 1c	jsr $1c2f			jsr 	FloatCalculateSign
.1c2c	98		tya				tya 								; shift in A
.1c2d	7a		ply				ply 								; restore Y and exit
.1c2e	60		rts				rts
.1c2f					FloatCalculateSign:
.1c2f	b5 30		lda $30,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.1c31	16 30		asl $30,x			asl 	NSStatus,x 					; shift result left
.1c33	55 31		eor $31,x			eor 	NSStatus+1,x
.1c35	0a		asl a				asl 	a 							; shift bit 7 into carry
.1c36	76 30		ror $30,x			ror 	NSStatus,x 					; shift right into status byte.
.1c38	60		rts				rts
.1c39					FloatNormalise:
.1c39	20 06 1f	jsr $1f06			jsr 	FloatIsZero 				; if zero exit
.1c3c	d0 07		bne $1c45			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.1c3e	16 30		asl $30,x			asl 	NSStatus,x 					; clear the sign bit.
.1c40	76 30		ror $30,x			ror 	NSStatus,x 					; (no -0)
.1c42	a9 00		lda #$00			lda 	#0 							; set Z flag
.1c44	60		rts				rts
.1c45					_NSNormaliseOptimise:
.1c45	b5 60		lda $60,x			lda 	NSMantissa3,x 				; upper byte zero ?
.1c47	d0 19		bne $1c62			bne 	_NSNormaliseLoop
.1c49	b5 54		lda $54,x			lda 	NSMantissa2,x 				; byte normalise
.1c4b	30 15		bmi $1c62			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.1c4d	95 60		sta $60,x			sta 	NSMantissa3,x
.1c4f	b5 48		lda $48,x			lda 	NSMantissa1,x
.1c51	95 54		sta $54,x			sta 	NSMantissa2,x
.1c53	b5 3c		lda $3c,x			lda 	NSMantissa0,x
.1c55	95 48		sta $48,x			sta 	NSMantissa1,x
.1c57	74 3c		stz $3c,x			stz 	NSMantissa0,x
.1c59	b5 6c		lda $6c,x			lda 	NSExponent,x
.1c5b	38		sec				sec
.1c5c	e9 08		sbc #$08			sbc 	#8
.1c5e	95 6c		sta $6c,x			sta 	NSExponent,x
.1c60	80 e3		bra $1c45			bra 	_NSNormaliseOptimise
.1c62					_NSNormaliseLoop:
.1c62	34 60		bit $60,x			bit 	NSMantissa3,x 				; bit 30 set ?
.1c64	70 07		bvs $1c6d			bvs 	_NSNExit 					; exit if so with Z flag clear
.1c66	20 f3 1e	jsr $1ef3			jsr 	FloatShiftLeft 				; shift mantissa left
.1c69	d6 6c		dec $6c,x			dec 	NSExponent,x 				; adjust exponent
.1c6b	80 f5		bra $1c62			bra 	_NSNormaliseLoop
.1c6d					_NSNExit:
.1c6d	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.1c6f	60		rts				rts
.1c70					FloatAddTopTwoStack:
.1c70	18		clc				clc
.1c71	b5 3c		lda $3c,x			lda		NSMantissa0,x
.1c73	75 3d		adc $3d,x			adc 		NSMantissa0+1,x
.1c75	95 3c		sta $3c,x			sta 	NSMantissa0,x
.1c77	b5 48		lda $48,x			lda		NSMantissa1,x
.1c79	75 49		adc $49,x			adc 		NSMantissa1+1,x
.1c7b	95 48		sta $48,x			sta 	NSMantissa1,x
.1c7d	b5 54		lda $54,x			lda		NSMantissa2,x
.1c7f	75 55		adc $55,x			adc 		NSMantissa2+1,x
.1c81	95 54		sta $54,x			sta 	NSMantissa2,x
.1c83	b5 60		lda $60,x			lda		NSMantissa3,x
.1c85	75 61		adc $61,x			adc 		NSMantissa3+1,x
.1c87	95 60		sta $60,x			sta 	NSMantissa3,x
.1c89	60		rts				rts
.1c8a					FloatSubTopTwoStack:
.1c8a	38		sec				sec
.1c8b	b5 3c		lda $3c,x			lda		NSMantissa0,x
.1c8d	f5 3d		sbc $3d,x			sbc 		NSMantissa0+1,x
.1c8f	95 3c		sta $3c,x			sta 	NSMantissa0,x
.1c91	b5 48		lda $48,x			lda		NSMantissa1,x
.1c93	f5 49		sbc $49,x			sbc 		NSMantissa1+1,x
.1c95	95 48		sta $48,x			sta 	NSMantissa1,x
.1c97	b5 54		lda $54,x			lda		NSMantissa2,x
.1c99	f5 55		sbc $55,x			sbc 		NSMantissa2+1,x
.1c9b	95 54		sta $54,x			sta 	NSMantissa2,x
.1c9d	b5 60		lda $60,x			lda		NSMantissa3,x
.1c9f	f5 61		sbc $61,x			sbc 		NSMantissa3+1,x
.1ca1	95 60		sta $60,x			sta 	NSMantissa3,x
.1ca3	60		rts				rts
.1ca4					FloatInt32Add:
.1ca4	b5 30		lda $30,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.1ca6	55 31		eor $31,x			eor 	NSStatus+1,x
.1ca8	30 04		bmi $1cae			bmi 	_DiffSigns
.1caa	20 70 1c	jsr $1c70			jsr		FloatAddTopTwoStack
.1cad	60		rts				rts
.1cae					_DiffSigns:
.1cae	20 8a 1c	jsr $1c8a			jsr 	FloatSubTopTwoStack 		; do a physical subtraction
.1cb1	34 60		bit $60,x			bit 	NSMantissa3,x 				; result is +ve, okay
.1cb3	10 07		bpl $1cbc			bpl 	_AddExit
.1cb5	b5 31		lda $31,x			lda 	NSStatus+1,x 				; sign is that of 11th value
.1cb7	95 30		sta $30,x			sta 	NSStatus,x
.1cb9	20 ad 1e	jsr $1ead			jsr 	FloatNegateMantissa 		; negate the mantissa and exit
.1cbc					_AddExit:
.1cbc	20 06 1f	jsr $1f06			jsr 	FloatIsZero 				; check for -0
.1cbf	d0 02		bne $1cc3			bne 	_AddNonZero
.1cc1	74 30		stz $30,x			stz 	NSStatus,x
.1cc3					_AddNonZero:
.1cc3	60		rts				rts
=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.1cc4					FloatEncodeStart:
.1cc4	38		sec				sec
.1cc5	80 01		bra $1cc8			bra 	FloatEncodeContinue+1
.1cc7					FloatEncodeContinue:
.1cc7	18		clc				clc
.1cc8					FloatEncode:
.1cc8	08		php				php 								; save reset flag.
.1cc9	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.1ccb	f0 15		beq $1ce2			beq 	_ENIsOkay
.1ccd	c9 30		cmp #$30			cmp 	#"0"
.1ccf	90 04		bcc $1cd5			bcc 	_ENBadNumber
.1cd1	c9 3a		cmp #$3a			cmp 	#"9"+1
.1cd3	90 0d		bcc $1ce2			bcc 	_ENIsOkay
.1cd5					_ENBadNumber:
.1cd5	28		plp				plp 								; throw saved reset
.1cd6	ad 39 05	lda $0539			lda 	encodeState 				; if in decimal mode, construct final number
.1cd9	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.1cdb	d0 03		bne $1ce0			bne 	_ENFail
.1cdd	4c 5a 1d	jmp $1d5a			jmp 	_ENConstructFinal
.1ce0					_ENFail:
.1ce0	18		clc				clc 								; not allowed
.1ce1	60		rts				rts
.1ce2					_ENIsOkay:
.1ce2	28		plp				plp 								; are we restarting
.1ce3	90 15		bcc $1cfa			bcc 	_ENNoRestart
.1ce5					_ENStartEncode:
.1ce5	c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.1ce7	f0 0c		beq $1cf5			beq 	_ENFirstDP
.1ce9	29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.1ceb	20 e6 1e	jsr $1ee6			jsr 	FloatSetByte 				; in single byte mode.
.1cee	a9 01		lda #$01			lda 	#ESTA_Low
.1cf0					_ENExitChange:
.1cf0	8d 39 05	sta $0539			sta 	encodeState 				; save new state
.1cf3	38		sec				sec
.1cf4	60		rts				rts
.1cf5					_ENFirstDP:
.1cf5	20 e4 1e	jsr $1ee4			jsr 	FloatSetZero 				; clear integer part
.1cf8	80 3c		bra $1d36			bra 	_ESTASwitchFloat			; go straight to float and exi
.1cfa					_ENNoRestart:
.1cfa	48		pha				pha 								; save digit or DP on stack.
.1cfb	ad 39 05	lda $0539			lda 	encodeState 				; get current state
.1cfe	c9 01		cmp #$01			cmp 	#ESTA_Low
.1d00	f0 09		beq $1d0b			beq  	_ESTALowState
.1d02	c9 02		cmp #$02			cmp 	#ESTA_High
.1d04	f0 26		beq $1d2c			beq 	_ESTAHighState
.1d06	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.1d08	f0 38		beq $1d42			beq 	_ESTADecimalState
>1d0a	db						.byte 	$DB 						; causes a break in the emulator
.1d0b					_ESTALowState:
.1d0b	68		pla				pla 								; get value back
.1d0c	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.1d0e	f0 26		beq $1d36			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.1d10	29 0f		and #$0f			and 	#15 						; make digit
.1d12	8d 3a 05	sta $053a			sta 	digitTemp 					; save it.
.1d15	b5 3c		lda $3c,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.1d17	0a		asl a				asl 	a
.1d18	0a		asl a				asl 	a
.1d19	75 3c		adc $3c,x			adc 	NSMantissa0,x
.1d1b	0a		asl a				asl 	a
.1d1c	6d 3a 05	adc $053a			adc 	digitTemp
.1d1f	95 3c		sta $3c,x			sta 	NSMantissa0,x
.1d21	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.1d23	90 05		bcc $1d2a			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.1d25	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.1d27	8d 39 05	sta $0539			sta 	encodeState
.1d2a					_ESTANoSwitch:
.1d2a	38		sec				sec
.1d2b	60		rts				rts
.1d2c					_ESTAHighState:
.1d2c	68		pla				pla 								; get value back
.1d2d	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.1d2f	f0 05		beq $1d36			beq 	_ESTASwitchFloat
.1d31	20 8c 1d	jsr $1d8c			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.1d34	38		sec				sec
.1d35	60		rts				rts
.1d36					_ESTASwitchFloat:
.1d36	9c 3b 05	stz $053b			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.1d39	e8		inx				inx 								; zero the decimal additive.
.1d3a	20 e4 1e	jsr $1ee4			jsr 	FloatSetZero
.1d3d	ca		dex				dex
.1d3e	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.1d40	80 ae		bra $1cf0			bra 	_ENExitChange
.1d42					_ESTADecimalState:
.1d42	68		pla				pla 								; digit.
.1d43	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 11th decimal point.
.1d45	f0 99		beq $1ce0			beq 	_ENFail
.1d47	e8		inx				inx 								; put digit into fractional part of X+1
.1d48	20 8c 1d	jsr $1d8c			jsr 	ESTAShiftDigitIntoMantissa
.1d4b	ca		dex				dex
.1d4c	ee 3b 05	inc $053b			inc 	decimalCount 				; bump the count of decimals
.1d4f	ad 3b 05	lda $053b			lda 	decimalCount 				; too many decimal digits.
.1d52	c9 0b		cmp #$0b			cmp 	#11
.1d54	f0 02		beq $1d58			beq 	_ESTADSFail
.1d56	38		sec				sec
.1d57	60		rts				rts
.1d58					_ESTADSFail:
.1d58	18		clc				clc
.1d59	60		rts				rts
.1d5a					_ENConstructFinal:
.1d5a	ad 3b 05	lda $053b			lda 	decimalCount 				; get decimal count
.1d5d	f0 2b		beq $1d8a			beq 	_ENCFExit 					; no decimals
.1d5f	5a		phy				phy
.1d60	0a		asl a				asl 	a 							; x 4 and CLC
.1d61	0a		asl a				asl 	a
.1d62	6d 3b 05	adc $053b			adc 	decimalCount
.1d65	a8		tay				tay
.1d66	b9 f1 19	lda $19f1,y			lda 	FloatScalarTable-5,y 		; copy decimal scalar to X+2
.1d69	95 3e		sta $3e,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.1d6b	b9 f2 19	lda $19f2,y			lda 	FloatScalarTable-5+1,y
.1d6e	95 4a		sta $4a,x			sta 	NSMantissa1+2,x
.1d70	b9 f3 19	lda $19f3,y			lda 	FloatScalarTable-5+2,y
.1d73	95 56		sta $56,x			sta 	NSMantissa2+2,x
.1d75	b9 f4 19	lda $19f4,y			lda 	FloatScalarTable-5+3,y
.1d78	95 62		sta $62,x			sta 	NSMantissa3+2,x
.1d7a	b9 f5 19	lda $19f5,y			lda 	FloatScalarTable-5+4,y
.1d7d	95 6e		sta $6e,x			sta 	NSExponent+2,x
.1d7f	74 32		stz $32,x			stz 	NSStatus+2,x 				; make +ve
.1d81	e8		inx				inx 								; multiply decimal const by decimal scalar
.1d82	e8		inx				inx
.1d83	20 a4 1b	jsr $1ba4			jsr 	FloatMultiply
.1d86	20 08 19	jsr $1908			jsr 	FloatAdd 					; add to integer part.
.1d89	7a		ply				ply
.1d8a					_ENCFExit:
.1d8a	18		clc				clc 								; reject the digit.
.1d8b	60		rts				rts
.1d8c					ESTAShiftDigitIntoMantissa:
.1d8c	29 0f		and #$0f			and 	#15 						; save digit
.1d8e	48		pha				pha
.1d8f	b5 60		lda $60,x			lda 	NSMantissa3,x 				; push mantissa on stack
.1d91	48		pha				pha
.1d92	b5 54		lda $54,x			lda 	NSMantissa2,x
.1d94	48		pha				pha
.1d95	b5 48		lda $48,x			lda 	NSMantissa1,x
.1d97	48		pha				pha
.1d98	b5 3c		lda $3c,x			lda 	NSMantissa0,x
.1d9a	48		pha				pha
.1d9b	20 f3 1e	jsr $1ef3			jsr 	FloatShiftLeft 				; x 2
.1d9e	20 f3 1e	jsr $1ef3			jsr 	FloatShiftLeft 				; x 4
.1da1	18		clc				clc 								; pop mantissa and add
.1da2	68		pla				pla
.1da3	75 3c		adc $3c,x			adc 	NSMantissa0,x
.1da5	95 3c		sta $3c,x			sta 	NSMantissa0,x
.1da7	68		pla				pla
.1da8	75 48		adc $48,x			adc 	NSMantissa1,x
.1daa	95 48		sta $48,x			sta 	NSMantissa1,x
.1dac	68		pla				pla
.1dad	75 54		adc $54,x			adc 	NSMantissa2,x
.1daf	95 54		sta $54,x			sta 	NSMantissa2,x
.1db1	68		pla				pla
.1db2	75 60		adc $60,x			adc 	NSMantissa3,x
.1db4	95 60		sta $60,x			sta 	NSMantissa3,x 				; x 5
.1db6	20 f3 1e	jsr $1ef3			jsr 	FloatShiftLeft 				; x 10
.1db9	68		pla				pla 								; add digit
.1dba	18		clc				clc
.1dbb	75 3c		adc $3c,x			adc 	NSMantissa0,x
.1dbd	95 3c		sta $3c,x			sta 	NSMantissa0,x
.1dbf	90 0a		bcc $1dcb			bcc 	_ESTASDExit
.1dc1	f6 48		inc $48,x			inc 	NSMantissa1,x
.1dc3	d0 06		bne $1dcb			bne 	_ESTASDExit
.1dc5	f6 54		inc $54,x			inc 	NSMantissa2,x
.1dc7	d0 02		bne $1dcb			bne 	_ESTASDExit
.1dc9	f6 60		inc $60,x			inc 	NSMantissa3,x
.1dcb					_ESTASDExit:
.1dcb	60		rts				rts
.0539					encodeState:
>0539							.fill 	1
.053a					digitTemp:
>053a							.fill 	1
.053b					decimalCount:
>053b							.fill 	1
.1dcc					FloatToString:
.1dcc	da		phx				phx
.1dcd	5a		phy				phy 								; save code position
.1dce	8d 3c 05	sta $053c			sta 	decimalPlaces	 			; save number of DPs.
.1dd1	9c 3d 05	stz $053d			stz 	dbOffset 					; offset into decimal buffer = start.
.1dd4	b5 30		lda $30,x			lda 	NSStatus,x  				; is it -ve.
.1dd6	10 08		bpl $1de0			bpl 	_CNTSNotNegative
.1dd8	29 7f		and #$7f			and 	#$7F 						; make +ve
.1dda	95 30		sta $30,x			sta 	NSStatus,x
.1ddc	a9 2d		lda #$2d			lda 	#"-"
.1dde	80 02		bra $1de2			bra 	_CNTMain
.1de0					_CNTSNotNegative:
.1de0	a9 20		lda #$20			lda 	#" "
.1de2					_CNTMain:
.1de2	20 44 1e	jsr $1e44			jsr 	WriteDecimalBuffer
.1de5	b5 6c		lda $6c,x			lda 	NSExponent,x 				; check if decimal
.1de7	f0 0d		beq $1df6			beq 	_CNTSNotFloat
.1de9	e8		inx				inx 								; round up so we don't get too many 6.999999
.1dea	a9 01		lda #$01			lda 	#1
.1dec	20 e6 1e	jsr $1ee6			jsr 	FloatSetByte
.1def	b5 6b		lda $6b,x			lda		NSExponent-1,x
.1df1	95 6c		sta $6c,x			sta 	NSExponent,x
.1df3	20 08 19	jsr $1908			jsr 	FloatAdd
.1df6					_CNTSNotFloat:
.1df6	20 26 1e	jsr $1e26			jsr 	MakePlusTwoString 			; do the integer part.
.1df9	20 c4 1a	jsr $1ac4			jsr 	FloatFractionalPart 		; get the fractional part
.1dfc	20 39 1c	jsr $1c39			jsr 	FloatNormalise					; normalise , exit if zero
.1dff	f0 22		beq $1e23			beq 	_CNTSExit
.1e01	a9 2e		lda #$2e			lda 	#"."
.1e03	20 44 1e	jsr $1e44			jsr 	WriteDecimalBuffer 			; write decimal place
.1e06					_CNTSDecimal:
.1e06	ce 3c 05	dec $053c			dec 	decimalPlaces 				; done all the decimals
.1e09	30 18		bmi $1e23			bmi 	_CNTSExit
.1e0b	e8		inx				inx 								; x 10.0
.1e0c	a9 0a		lda #$0a			lda 	#10
.1e0e	20 e6 1e	jsr $1ee6			jsr 	FloatSetByte
.1e11	20 a4 1b	jsr $1ba4			jsr 	FloatMultiply
.1e14	20 26 1e	jsr $1e26			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.1e17	20 c4 1a	jsr $1ac4			jsr 	FloatFractionalPart 		; get the fractional part
.1e1a	20 39 1c	jsr $1c39			jsr 	FloatNormalise 				; normalise it.
.1e1d	b5 6c		lda $6c,x			lda 	NSExponent,x 				; gone to zero, exit.
.1e1f	c9 d0		cmp #$d0			cmp 	#$D0 						; very small remainder, so don't bother.
.1e21	b0 e3		bcs $1e06			bcs 	_CNTSDecimal 				; keep going.
.1e23					_CNTSExit:
.1e23	7a		ply				ply
.1e24	fa		plx				plx
.1e25	60		rts				rts
.1e26					MakePlusTwoString:
.1e26	da		phx				phx
.1e27	20 c7 1e	jsr $1ec7			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.1e2a	e8		inx				inx 								; access it
.1e2b	e8		inx				inx
.1e2c	20 1f 1b	jsr $1b1f			jsr 	FloatIntegerPart 			; make it an integer
.1e2f	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.1e31	20 63 1e	jsr $1e63			jsr 	ConvertInt32
.1e34	a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.1e36					_MPTSCopy:
.1e36	bd 17 05	lda $0517,x			lda 	numberBuffer,x
.1e39	20 44 1e	jsr $1e44			jsr 	WriteDecimalBuffer
.1e3c	e8		inx				inx
.1e3d	bd 17 05	lda $0517,x			lda 	numberBuffer,x
.1e40	d0 f4		bne $1e36			bne 	_MPTSCopy
.1e42	fa		plx				plx
.1e43	60		rts				rts
.1e44					WriteDecimalBuffer:
.1e44	da		phx				phx
.1e45	ae 3d 05	ldx $053d			ldx 	dbOffset
.1e48	9d 3e 05	sta $053e,x			sta 	decimalBuffer,x
.1e4b	9e 3f 05	stz $053f,x			stz 	decimalBuffer+1,x
.1e4e	ee 3d 05	inc $053d			inc 	dbOffset
.1e51	fa		plx				plx
.1e52	60		rts				rts
.053c					decimalPlaces:
>053c							.fill 	1
.053d					dbOffset:
>053d							.fill 	1
.053e					decimalBuffer:
>053e							.fill 	32
.1e53					ConvertInt16:
.1e53	85 3c		sta $3c				sta 	NSMantissa0 				; set up as 32 bit conversion
.1e55	86 48		stx $48				stx 	NSMantissa1
.1e57	64 54		stz $54				stz 	NSMantissa2
.1e59	64 60		stz $60				stz 	NSMantissa3
.1e5b	64 30		stz $30				stz 	NSStatus 					; positive integer
.1e5d	a2 00		ldx #$00			ldx 	#0 							; stack level
.1e5f	a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.1e61	80 00		bra $1e63			bra 	ConvertInt32
.1e63					ConvertInt32:
.1e63	5a		phy				phy
.1e64	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.1e66	24 30		bit $30				bit 	NSStatus 					; output a - if not negative.
.1e68	10 08		bpl $1e72			bpl 	_CI32NotNeg
.1e6a	48		pha				pha
.1e6b	a9 2d		lda #$2d			lda 	#'-'
.1e6d	99 17 05	sta $0517,y			sta 	numberBuffer,y
.1e70	c8		iny				iny
.1e71	68		pla				pla
.1e72					_CI32NotNeg:
.1e72	20 80 1e	jsr $1e80			jsr 	_CI32DivideConvert 			; recursive conversion
.1e75	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.1e77	99 17 05	sta $0517,y			sta 	numberBuffer,y
.1e7a	7a		ply				ply
.1e7b	a2 05		ldx #$05			ldx 	#numberBuffer >> 8 			; return address in XA
.1e7d	a9 17		lda #$17			lda 	#numberBuffer & $FF
.1e7f	60		rts				rts
.1e80					_CI32DivideConvert:
.1e80	e8		inx				inx 								; write to next slot up
.1e81	20 e6 1e	jsr $1ee6			jsr 	FloatSetByte 		 		; write the base out.
.1e84	ca		dex				dex
.1e85	20 7a 1a	jsr $1a7a			jsr 	Int32Divide 				; divide
.1e88	b5 3c		lda $3c,x			lda 	NSMantissa0,x 				; save remainder
.1e8a	48		pha				pha
.1e8b	20 69 1a	jsr $1a69			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.1e8e	20 06 1f	jsr $1f06			jsr 	FloatIsZero 				; is it zero ?
.1e91	f0 05		beq $1e98			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.1e93	b5 3d		lda $3d,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.1e95	20 80 1e	jsr $1e80			jsr 	_CI32DivideConvert 			; and recusrively call.
.1e98					_CI32NoRecurse:
.1e98	68		pla				pla 								; remainder
.1e99	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.1e9b	90 02		bcc $1e9f			bcc 	_CI32NotHex
.1e9d	69 26		adc #$26			adc 	#6+32
.1e9f					_CI32NotHex:
.1e9f	69 30		adc #$30			adc 	#48
.1ea1	99 17 05	sta $0517,y			sta 	numberBuffer,y 				; write out and exit
.1ea4	c8		iny				iny
.1ea5	60		rts				rts
.1ea6					FloatNegate:
.1ea6	b5 30		lda $30,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.1ea8	49 80		eor #$80			eor 	#$80  						; toggle the negative flag
.1eaa	95 30		sta $30,x			sta 	NSStatus,x
.1eac	60		rts				rts
.1ead					FloatNegateMantissa:
.1ead	38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.1eae	a9 00		lda #$00			lda 	#0
.1eb0	f5 3c		sbc $3c,x			sbc 	NSMantissa0,x
.1eb2	95 3c		sta $3c,x			sta 	NSMantissa0,x
.1eb4	a9 00		lda #$00			lda 	#0
.1eb6	f5 48		sbc $48,x			sbc 	NSMantissa1,x
.1eb8	95 48		sta $48,x			sta 	NSMantissa1,x
.1eba	a9 00		lda #$00			lda 	#0
.1ebc	f5 54		sbc $54,x			sbc 	NSMantissa2,x
.1ebe	95 54		sta $54,x			sta 	NSMantissa2,x
.1ec0	a9 00		lda #$00			lda 	#0
.1ec2	f5 60		sbc $60,x			sbc 	NSMantissa3,x
.1ec4	95 60		sta $60,x			sta 	NSMantissa3,x
.1ec6	60		rts				rts
.1ec7					FloatShiftUpTwo:
.1ec7	b5 3c		lda $3c,x			lda 	NSMantissa0,x
.1ec9	95 3e		sta $3e,x			sta 	NSMantissa0+2,x
.1ecb	b5 48		lda $48,x			lda 	NSMantissa1,x
.1ecd	95 4a		sta $4a,x			sta 	NSMantissa1+2,x
.1ecf	b5 54		lda $54,x			lda 	NSMantissa2,x
.1ed1	95 56		sta $56,x			sta 	NSMantissa2+2,x
.1ed3	b5 60		lda $60,x			lda 	NSMantissa3,x
.1ed5	95 62		sta $62,x			sta 	NSMantissa3+2,x
.1ed7	b5 6c		lda $6c,x			lda 	NSExponent,x
.1ed9	95 6e		sta $6e,x			sta 	NSExponent+2,x
.1edb	b5 30		lda $30,x			lda 	NSStatus,x
.1edd	95 32		sta $32,x			sta 	NSStatus+2,x
.1edf	60		rts				rts
.1ee0					FloatSetZeroMantissaOnly:
.1ee0	74 3c		stz $3c,x			stz 	NSMantissa0,x
.1ee2	80 08		bra $1eec			bra 	FloatZero13
.1ee4					FloatSetZero:
.1ee4	a9 00		lda #$00			lda 	#0
.1ee6					FloatSetByte:
.1ee6	74 6c		stz $6c,x			stz 	NSExponent,x 				; zero exponent, as +ve integer value.
.1ee8					FloatSetMantissa:
.1ee8	95 3c		sta $3c,x			sta 	NSMantissa0,x 				; zero mantissa
.1eea	74 30		stz $30,x			stz 	NSStatus,x
.1eec					FloatZero13:
.1eec	74 48		stz $48,x			stz 	NSMantissa1,x
.1eee	74 54		stz $54,x			stz 	NSMantissa2,x
.1ef0	74 60		stz $60,x			stz 	NSMantissa3,x
.1ef2	60		rts				rts
.1ef3					FloatShiftLeft:
.1ef3	18		clc				clc
.1ef4					FloatRotateLeft:
.1ef4	36 3c		rol $3c,x			rol 	NSMantissa0,x
.1ef6	36 48		rol $48,x			rol		NSMantissa1,x
.1ef8	36 54		rol $54,x			rol		NSMantissa2,x
.1efa	36 60		rol $60,x			rol		NSMantissa3,x
.1efc	60		rts				rts
.1efd					FloatShiftRight:
.1efd	56 60		lsr $60,x			lsr 	NSMantissa3,x
.1eff	76 54		ror $54,x			ror		NSMantissa2,x
.1f01	76 48		ror $48,x			ror		NSMantissa1,x
.1f03	76 3c		ror $3c,x			ror		NSMantissa0,x
.1f05	60		rts				rts
.1f06					FloatIsZero:
.1f06	b5 60		lda $60,x			lda 	NSMantissa3,x
.1f08	15 54		ora $54,x			ora		NSMantissa2,x
.1f0a	15 48		ora $48,x			ora		NSMantissa1,x
.1f0c	15 3c		ora $3c,x			ora		NSMantissa0,x
.1f0e	60		rts				rts

;******  Processing input file: testing/testend.asm

.1f0f					EndProgram:
>1f0f	01 08 15 08 64 00 87 20				.binary "code/tokenised.dat"
>1f17	41 2c 42 2c 43 3a 99 20 41 2c 42 2c 43 00 1b 08
>1f27	6e 00 8c 00 2f 08 c8 00 87 20 41 2c 42 2c 43 3a
>1f37	99 20 41 2c 42 2c 43 00 39 08 d2 00 8c 20 33 33
>1f47	30 00 4d 08 2c 01 87 20 41 2c 42 2c 43 3a 99 20
>1f57	41 2c 42 2c 43 00 53 08 36 01 8f 00 5d 08 40 01
>1f67	83 20 31 2c 32 00 69 08 4a 01 83 20 35 2c 36 2c
>1f77	37 00 6f 08 90 01 90 00 79 08 9a 01 89 20 34 31
>1f87	30 00 00 00

;******  End of listing
