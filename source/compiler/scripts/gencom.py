# *******************************************************************************************
# *******************************************************************************************
#
#       Name :      gencom.py
#       Purpose :   Generation compiler.
#       Date :      16th April 2023
#       Author :    Paul Robson (paul@robsons.org.uk)
#
# *******************************************************************************************
# *******************************************************************************************

import os,re,sys
from build import *
from tokens import *
from pcodeconst import *

# *******************************************************************************************
#
#							Represents a single generator
#
# *******************************************************************************************

class Generator(object):
	def __init__(self,header):
		self.c64tokens = TokenStore()
		token = self.c64tokens.getID(header)
		assert token is not None,"Unknown "+token
		if token < 256:
			self.data = [ token,0 ]
		else:
			self.data = [ token >> 8,token & 0xFF ]
		self.first = True

	def render(self):
		last = self.data[-1] & 0x0F
		assert last == 6 or last == 7,"No ending marker"
		return ",".join([self.render1(x) for x in [len(self.data)+1]+self.data])

	def append(self,nibble,force2nd = False):
		if self.first:
			self.data.append(0)
		if force2nd:
			self.first = False
		if self.first:
			self.data[-1] = nibble << 4
		else:
			self.data[-1] |= nibble
		self.first = not self.first 

	def appendWord(self,w):
		self.first = True 
		self.data.append(w + " & $FF")
		self.data.append(w + " >> 8")

	def appendByte(self,w):
		self.first = True 
		self.data.append(w)

	def render1(self,s):
		if isinstance(s,str):
			return s 
		return "${0:02x}".format(s)

# *******************************************************************************************
#
#						 Worker object, compiles generators
#
# *******************************************************************************************

class GenCompiler(object):
	def __init__(self):
		self.simple = "(),___#$"
		self.pcodeTokens = PCodeConstants()

	def compileFile(self,f):
		h = open(f+"c","w")
		h.write(";\n;\tThis file is automatically generated.\n;\n")
		s = [x.strip().replace("\t"," ") for x in open(f).readlines() if not x.startswith("#") and x.strip() != ""]
		for g in s:
			gen = self.compileGenerator(g)
			h.write(";\n;\t{1}\n;\n\t.byte\t{0}\n".format(gen.render(),g))
		h.close()

	def compileGenerator(self,s):
		m = re.match("^([a-zA-Z0-9\\#\\$]+)\\s+(.*)\\s*$",s)
		assert m is not None,"Bad line "+s
		self.token = m.group(1).strip()
		self.gen = Generator(self.token)
		s = m.group(2).strip()
		while s != "":
			s = self.compile(s).strip()
		return self.gen

	def compile(self,s):
		cmd = s[0].upper()
		s = s[1:]
		if cmd == "T":	 									# T token
			assert not s.startswith(":"),"TODO Alt token" 	# not implemented alt token yet.
			self.compilePCodeToken(self.token)				# compile equivalent P-Code

		elif cmd == "X" or cmd == "C":						# X execute, C channelexecute
			m = re.match("^\\:(\\w+)\\s*(.*)$",s) 			# get bits
			assert m is not None,"Bad "+cmd+" command "+s
			self.gen.append(3 if cmd =="X" else 4,True)
			self.gen.appendWord(m.group(1))
			return m.group(2)

		elif cmd == "S" or cmd == "N":						# S/N end.
			self.gen.append(6 if cmd == "N" else 7,True)

		elif self.simple.find(cmd) >= 0: 					# (), and %#$
			self.gen.append(self.simple.find(cmd)+8)

		else:
			assert True,"Bad Command "+s
		return s

	def compilePCodeToken(self,t):
		n = self.pcodeTokens.getID(t)
		if n >= 256:
			self.gen.append(2)
			n = (n >> 8) | ((n & 0xFF) << 8)
			self.gen.appendWord(str(n))
		else:
			self.gen.append(1)
			self.gen.appendByte(str(n))
		assert n is not None,"Unknown pcode "+t

if __name__ == "__main__":
 	for f in Builder().getDEFFiles():
 		GenCompiler().compileFile(f)
 	
