;
;	This file is automatically generated
;
; ************************************************************************************************
; ************************************************************************************************
;
;		Name:		constant.inc
;		Purpose:	Push constant macro
;		Created:	11th April 2023
;		Reviewed: 	No
;		Author : 	Paul Robson (paul@robsons.org.uk)
;
; ************************************************************************************************
; ************************************************************************************************

; ************************************************************************************************
;
;											load a constant
;
; ************************************************************************************************

pushfloat .macro
		lda 	#\1-Const_Base
		jsr 	LoadConstant
		inx
		.endm

; ************************************************************************************************
;
;									Changes and Updates
;
; ************************************************************************************************
;
;		Date			Notes
;		==== 			=====
;
; ************************************************************************************************
; ************************************************************************************************
; ************************************************************************************************
;
;		Name:		atn.asm
;		Purpose:	ATN function.
;		Created:	11th April 2023
;		Reviewed: 	No
;		Author : 	Paul Robson (paul@robsons.org.uk)
;
; ************************************************************************************************
; ************************************************************************************************

		.section 	code

; ************************************************************************************************
;
;									calculate ATN(x)
;
; ************************************************************************************************

FloatArcTan:
		jsr 	FloatNormalise 					; normalise x

		lda 	NSStatus,x 						; save sign, make absolute
		pha
		stz 	NSStatus,x

		lda 	NSExponent,x 					; $40000000 ^ $E2 is 1.0
		cmp 	#$E2
		bcc 	_UANoFixup

		txa 									; value in +1
		tay
		iny
		jsr 	CopyFloatXY
		lda 	#1 								; 1.0 in +0
		jsr 	FloatSetByte
		inx
		jsr 	FloatDivide
		bcs 	_FATError

		jsr 	CoreAtn 						; calculate the root
		jsr 	CompletePolynomial
		jsr 	FloatNegate 					; make -ve

		.pushfloat Const_PiDiv2 				; add Pi/2
		jsr 	FloatAdd
		bra 	_UAComplete

_UANoFixup:		
		jsr 	CoreAtn
		jsr 	CompletePolynomial
_UAComplete:

		pla 									; apply the result.
		eor 	NSStatus,x
		sta 	NSStatus,x
		clc
		rts

_FATError:
		pla
		sec
		rts

		.send 	code

; ************************************************************************************************
;
;									Changes and Updates
;
; ************************************************************************************************
;
;		Date			Notes
;		==== 			=====
;
; ************************************************************************************************
; ************************************************************************************************
; ************************************************************************************************
;
;		Name:		atn_core.asm
;		Purpose:	Core ATN() polynomial
;		Created:	11th April 2023
;		Reviewed: 	No
;		Author : 	Paul Robson (paul@robsons.org.uk)
;
; ************************************************************************************************
; ************************************************************************************************

		.section 	code

; ************************************************************************************************
;
;									calculates ATN()
;
; ************************************************************************************************

CoreAtn: 	
		lda 	#AtnCoefficients & $FF
		ldy 	#AtnCoefficients >> 8
		jmp 	CorePolySquared

		.send 	code

; ************************************************************************************************
;
;									Changes and Updates
;
; ************************************************************************************************
;
;		Date			Notes
;		==== 			=====
;
; ************************************************************************************************
;
;	Automatically generated.
;
	.section code

ExpCoefficients:
	.byte	7
	.dword	$5a2c1f2b ; 2.1498763701e-05
	.byte	$d2
	.dword	$4b3f598e ; 0.00014352314037
	.byte	$d5
	.dword	$57f771c3 ; 0.0013422634825
	.byte	$d8
	.dword	$4ec20e15 ; 0.0096140170135
	.byte	$db
	.dword	$71acac05 ; 0.05550512686
	.byte	$dd
	.dword	$7afef3e3 ; 0.2402263846
	.byte	$df
	.dword	$58b90c08 ; 0.69314718618
	.byte	$e1
	.dword	$40000000 ; 1.0
	.byte	$e2

SinCoefficients:
	.byte	6
	.dword	$f30d168d ; -14.381390672
	.byte	$e5
	.dword	$5403fdfc ; 42.007797122
	.byte	$e7
	.dword	$ccb44481 ; -76.704170257
	.byte	$e8
	.dword	$519aeff1 ; 81.605223686
	.byte	$e8
	.dword	$d2aef394 ; -41.341702104
	.byte	$e7
	.dword	$6487ed51 ; 6.2831853069
	.byte	$e4
	.dword	$00000000 ; 0.0
	.byte	$00

LogCoefficients:
	.byte	4
	.dword	$6f2b65bd ; 0.43425594189
	.byte	$e0
	.dword	$49cd85b2 ; 0.57658454124
	.byte	$e1
	.dword	$7b1c498b ; 0.96180075919
	.byte	$e1
	.dword	$5c551d90 ; 2.8853900731
	.byte	$e3
	.dword	$c0000000 ; -0.5
	.byte	$e1

AtnCoefficients:
	.byte	12
	.dword	$d9c1deea ; -0.00068479391189
	.byte	$d7
	.dword	$4f7a537a ; 0.0048509421558
	.byte	$da
	.dword	$c1fe5808 ; -0.016111701843
	.byte	$dc
	.dword	$460fb3e5 ; 0.034209638048
	.byte	$dd
	.dword	$ef29e5e1 ; -0.054279132761
	.byte	$dd
	.dword	$4a323826 ; 0.07245719654
	.byte	$de
	.dword	$dbf528bd ; -0.089802395378
	.byte	$de
	.dword	$7198443f ; 0.11093241343
	.byte	$de
	.dword	$c9224c9d ; -0.14283980767
	.byte	$df
	.dword	$666648e3 ; 0.19999912049
	.byte	$df
	.dword	$d555550a ; -0.33333331568
	.byte	$e0
	.dword	$40000000 ; 1.0
	.byte	$e2
	.dword	$00000000 ; 0.0
	.byte	$00
	.send code
;
;	This file is automatically generated.
;
.section code
Const_Base:
Const_1Div2Pi:
	.dword	$517cc1b7 ; 0.15915494
	.byte	$df
Const_PiDiv2:
	.dword	$6487ed51 ; 1.57079633
	.byte	$e2
Const_Log2_e:
	.dword	$5c551d95 ; 1.44269504
	.byte	$e2
Const_sqrt_2:
	.dword	$5a82799a ; 1.41421356
	.byte	$e2
Const_sqrt_half:
	.dword	$5a82799a ; 0.70710678
	.byte	$e1
Const_pi:
	.dword	$6487ed51 ; 3.14159265
	.byte	$e3
Const_half:
	.dword	$40000000 ; 0.50000000
	.byte	$e1
Const_ln_e:
	.dword	$58b90bfc ; 0.69314718
	.byte	$e1
.send code
; ************************************************************************************************
; ************************************************************************************************
;
;		Name:		cos.asm
;		Purpose:	Cosine function.
;		Created:	11th April 2023
;		Reviewed: 	No
;		Author : 	Paul Robson (paul@robsons.org.uk)
;
; ************************************************************************************************
; ************************************************************************************************

		.section 	code

; ************************************************************************************************
;
;									calculate COS(x)
;
; ************************************************************************************************

FloatCosine: 	
		.pushfloat Const_PiDiv2 			; add PI/2
		jsr 	FloatAdd
		jmp 	FloatSine

		.send 	code

; ************************************************************************************************
;
;									Changes and Updates
;
; ************************************************************************************************
;
;		Date			Notes
;		==== 			=====
;
; ************************************************************************************************
; ************************************************************************************************
; ************************************************************************************************
;
;		Name:		exp.asm
;		Purpose:	Exponent function.
;		Created:	11th April 2023
;		Reviewed: 	No
;		Author : 	Paul Robson (paul@robsons.org.uk)
;
; ************************************************************************************************
; ************************************************************************************************

		.section 	code

; ************************************************************************************************
;
;									calculate EXP(x)
;
; ************************************************************************************************

FloatExponent:
	
		.pushfloat Const_Log2_e			; multiply by log2 e
		jsr 	FloatMultiply 

		jsr 	_UECopy01 				; copy 0 to 1, get integer part to 1
		inx
		jsr 	FloatIntegerPart
		dex

		lda 	NSMantissa1+1,x
		ora 	NSMantissa2+1,x
		ora 	NSMantissa3+1,x
		bne 	_UERangeError

		lda 	NSMantissa0+1,x 		; push integer part on stack.
		cmp 	#64
		bcs 	_UERangeError
		pha

		lda 	NSStatus,x 				; push sign
		pha

		jsr 	FloatFractionalPart		; copy 0 to 1, get fractional part to 0

		pla 
		bpl 	_UEPositive

		inx 							; 1-x
		lda 	#1
		jsr 	FloatSetByte		
		dex
		jsr 	FloatNegate
		inx
		jsr 	FloatAdd

		pla 							; integer part +1 and negated.
		inc 	a
		eor 	#$FF
		inc 	a
		pha

_UEPositive:		
		jsr 	CoreExponent
		jsr 	CompletePolynomial

		pla		
		clc
		adc 	NSExponent,x
		sta 	NSExponent,x
		clc
		rts

_UECopy01:
		txa
		tay
		iny
		jmp 	CopyFloatXY

_UERangeError:
		sec
		rts

		.send 	code

; ************************************************************************************************
;
;									Changes and Updates
;
; ************************************************************************************************
;
;		Date			Notes
;		==== 			=====
;
; ************************************************************************************************
; ************************************************************************************************
; ************************************************************************************************
;
;		Name:		exp_core.asm
;		Purpose:	Core EXP() polynomial
;		Created:	11th April 2023
;		Reviewed: 	No
;		Author : 	Paul Robson (paul@robsons.org.uk)
;
; ************************************************************************************************
; ************************************************************************************************

		.section 	code

; ************************************************************************************************
;
;									calculates 2^x
;
; ************************************************************************************************

CoreExponent: 	
		lda 	#ExpCoefficients & $FF
		ldy 	#ExpCoefficients >> 8
		jsr 	CalculateHornerPolynomial
		rts

		.send 	code

; ************************************************************************************************
;
;									Changes and Updates
;
; ************************************************************************************************
;
;		Date			Notes
;		==== 			=====
;
; ************************************************************************************************
; ************************************************************************************************
; ************************************************************************************************
;
;		Name:		horner.asm
;		Purpose:	Calculate Horner Polynomial, table at YA
;		Created:	11th April 2023
;		Reviewed: 	No
;		Author : 	Paul Robson (paul@robsons.org.uk)
;
; ************************************************************************************************
; ************************************************************************************************

		.section 	code

; ************************************************************************************************
;
;									Calculates Horner Polynomial
;
; ************************************************************************************************

CalculateHornerPolynomial:
		sta 	zTemp0 						; save poly data from YA
		sty 	zTemp0+1
		stz 	coefficientCount 			; zero the count.
		stx 	xValueSlot 					; save xValue slot.

		inx 								; set the count to zero.
		jsr 	FloatSetZero
		;
		;		Horner evaluation loop (see coremaths.py)
		;
_CHPLoop:	
		txa 								; copy X-1 to X+1
		tay
		dex
		iny
		jsr 	CopyFloatXY 				; e.g. stack is <current> <x>
		inx
		inx
		jsr 	FloatMultiply 				; times current by X
		inx
		jsr 	GetCoefficient 				; coefficient into X+1
		jsr 	FloatAdd 					; and add
		;
		inc 	coefficientCount
		lda 	coefficientCount
		cmp 	(zTemp0)
		bne 	_CHPLoop
		rts

; ************************************************************************************************
;
;									 Completion
;
; ************************************************************************************************

CompletePolynomial:
		jsr 	FloatMultiply
		inx 								; get the last value
		jsr 	GetCoefficient 			
		jsr 	FloatAdd 					; and add it
		rts

; ************************************************************************************************
;
;								Copy entry X to entry Y
;
; ************************************************************************************************

CopyFloatXY:
		lda 	NSExponent,x
		sta 	NSExponent,y
		lda 	NSStatus,x
		sta 	NSStatus,y

		lda 	NSMantissa0,x
		sta 	NSMantissa0,y
		lda 	NSMantissa1,x
		sta 	NSMantissa1,y
		lda 	NSMantissa2,x
		sta 	NSMantissa2,y
		lda 	NSMantissa3,x
		sta 	NSMantissa3,y
		rts

; ************************************************************************************************
;
;						Get current coefficient to stack,X
;
; ************************************************************************************************

GetCoefficient:		
		phy
		lda 	coefficientCount 			; 5 per block
		asl 	a
		asl 	a
		sec 								; +1 for count
		adc 	coefficientCount
		tay

		lda 	(zTemp0),y 					; copy mantissa
		sta 	NSMantissa0,x
		iny
		lda 	(zTemp0),y
		sta 	NSMantissa1,x
		iny
		lda 	(zTemp0),y
		sta 	NSMantissa2,x
		iny
		lda 	(zTemp0),y
		pha
		and 	#$7F 						; clear sign bit.
		sta 	NSMantissa3,x
		iny
		pla
		and 	#$80
		sta 	NSStatus,x 					; put in status 
		;
		lda 	(zTemp0),y
		sta 	NSExponent,x
		ply
		rts

		.send 	code

		.section storage
coefficientCount:
		.fill 	1
xValueSlot:
		.fill 	1
		.send storage

; ************************************************************************************************
;
;									Changes and Updates
;
; ************************************************************************************************
;
;		Date			Notes
;		==== 			=====
;
; ************************************************************************************************
; ************************************************************************************************
; ************************************************************************************************
;
;		Name:		load.asm
;		Purpose:	Load constant offset Y into X+1, preserving X
;		Created:	11th April 2023
;		Reviewed: 	No
;		Author : 	Paul Robson (paul@robsons.org.uk)
;
; ************************************************************************************************
; ************************************************************************************************

		.section 	code

; ************************************************************************************************
;
;									Load Constant
;
; ************************************************************************************************

LoadConstant:
		phy
		tay
		lda 	Const_Base+0,y
		sta 	NSMantissa0+1,x
		lda 	Const_Base+1,y
		sta 	NSMantissa1+1,x
		lda 	Const_Base+2,y
		sta 	NSMantissa2+1,x
		lda 	Const_Base+3,y
		pha
		and 	#$7F
		sta 	NSMantissa3+1,x
		pla
		and 	#$80
		sta 	NSStatus+1,x
		lda 	Const_Base+4,y
		sta 	NSExponent+1,x
		ply
		rts

		.send 	code

; ************************************************************************************************
;
;									Changes and Updates
;
; ************************************************************************************************
;
;		Date			Notes
;		==== 			=====
;
; ************************************************************************************************
; ************************************************************************************************
; ************************************************************************************************
;
;		Name:		log.asm
;		Purpose:	Log function.
;		Created:	11th April 2023
;		Reviewed: 	No
;		Author : 	Paul Robson (paul@robsons.org.uk)
;
; ************************************************************************************************
; ************************************************************************************************

		.section 	code

; ************************************************************************************************
;
;									calculate LOG(x)
;
; ************************************************************************************************

FloatLogarithm: 	
	
		lda 	NSStatus,x 					; check > 0
		bmi 	_ULRange
		jsr 	FloatIsZero
		beq 	_ULRange
		jsr 	FloatNormalise 				; put into FP mode.

		lda 	NSExponent,x 				; get power
		pha

		lda 	#(-31) & $FF 				; force into range 0.5 -> 1
		sta 	NSExponent,x


		.pushfloat Const_sqrt_half 			; add sqrt 0.5
		jsr 	FloatAdd


		txa 								; divide into sqrt 2.0
		tay
		iny
		jsr 	CopyFloatXY
		dex
		.pushfloat Const_sqrt_2
		inx

		jsr 	FloatDivide 				; if zero, error.
		bcs 	_ULRangePla

		jsr 	FloatNegate 				; subtract from 1
		inx
		lda 	#1
		jsr 	FloatSetByte
		jsr 	FloatAdd

		jsr 	CoreLog
		jsr 	CompletePolynomial

		pla 								; add exponent
		clc
		adc 	#31 						; fix up

		pha
		bpl 	_LogNotNeg
		eor 	#$FF
		inc 	a		
_LogNotNeg:		
		inx 								; set byte and sign.
		jsr 	FloatSetByte

		pla
		and 	#$80
		sta 	NSStatus,x
		jsr 	FloatAdd

		.pushfloat Const_ln_e 			; * log2(e)
		jsr 	FloatMultiply
		clc
		rts

_ULRangePla:
		pla
_ULRange:
		sec
		rts

		.send 	code

; ************************************************************************************************
;
;									Changes and Updates
;
; ************************************************************************************************
;
;		Date			Notes
;		==== 			=====
;
; ************************************************************************************************
; ************************************************************************************************
; ************************************************************************************************
;
;		Name:		log_core.asm
;		Purpose:	Core LOG() polynomial
;		Created:	11th April 2023
;		Reviewed: 	No
;		Author : 	Paul Robson (paul@robsons.org.uk)
;
; ************************************************************************************************
; ************************************************************************************************

		.section 	code

; ************************************************************************************************
;
;									calculates LOG()
;
; ************************************************************************************************

CoreLog: 	
		lda 	#LogCoefficients & $FF
		ldy 	#LogCoefficients >> 8
		jmp 	CorePolySquared

		.send 	code

; ************************************************************************************************
;
;									Changes and Updates
;
; ************************************************************************************************
;
;		Date			Notes
;		==== 			=====
;
; ************************************************************************************************
; ************************************************************************************************
; ************************************************************************************************
;
;		Name:		pi.asm
;		Purpose:	PI constant
;		Created:	11th April 2023
;		Reviewed: 	No
;		Author : 	Paul Robson (paul@robsons.org.uk)
;
; ************************************************************************************************
; ************************************************************************************************

		.section 	code

; ************************************************************************************************
;
;									load PI
;
; ************************************************************************************************

FloatPI: 	
		.pushfloat Const_pi
		clc
		rts

		.send 	code

; ************************************************************************************************
;
;									Changes and Updates
;
; ************************************************************************************************
;
;		Date			Notes
;		==== 			=====
;
; ************************************************************************************************
; ************************************************************************************************
; ************************************************************************************************
;
;		Name:		power.asm
;		Purpose:	Power operator
;		Created:	11th April 2023
;		Reviewed: 	No
;		Author : 	Paul Robson (paul@robsons.org.uk)
;
; ************************************************************************************************
; ************************************************************************************************

		.section 	code

; ************************************************************************************************
;
;								calculate S[0] ^ S[1]
;
; ************************************************************************************************

FloatPower: 
		dex

		txa 							; copy 0 to 2, so we can process it
		tay
		iny
		iny
		jsr 	CopyFloatXY

		inx 							; 2 = Log(0)
		inx

		jsr 	FloatLogarithm
		bcs 	_FPWExit
	
		jsr 	FloatMultiply			; Multiply by original 1, into 1.

		txa 							; copy to slot 0
		tay
		dey
		jsr 	CopyFloatXY

		dex  							; Exponent code.

		jsr 	FloatExponent				
_FPWExit:		
		rts
		
		.send 	code

; ************************************************************************************************
;
;									Changes and Updates
;
; ************************************************************************************************
;
;		Date			Notes
;		==== 			=====
;
; ************************************************************************************************
; ************************************************************************************************
; ************************************************************************************************
;
;		Name:		sin.asm
;		Purpose:	Sine function.
;		Created:	11th April 2023
;		Reviewed: 	No
;		Author : 	Paul Robson (paul@robsons.org.uk)
;
; ************************************************************************************************
; ************************************************************************************************

		.section 	code

; ************************************************************************************************
;
;									calculate SIN(x)
;
; ************************************************************************************************

FloatSine:
		lda 	NSStatus,x 					; save sign
		pha
		stz 	NSStatus,x 					; make +ve

		.pushfloat Const_1Div2Pi 			; divide by 2*Pi

		jsr 	FloatMultiply 
		jsr 	FloatFractionalPart 		; take the fractional part

		lda 	NSExponent,x 				; check exponent
		cmp 	#$E0 						; < $E0 exponent : 0-0.25
		bcc 	_USProcessExit
		beq 	_USSubtractFromHalf 		; = $E0 exponent : 0.25-0.5
		lda 	NSMantissa3,x 				; if > 0.75 which is $60000000:$E1
		cmp 	#$60
		bcs 	_USSubtractOne 				
_USSubtractFromHalf:						; 0.25 - 0.75 calculate 0.5-x
		.pushfloat Const_half 				; so calculate x-0.5
		jsr 	FloatSubtract
		jsr 	FloatNegate 				; then negate it
		bra 	_USProcessExit 				; and exit

_USSubtractOne:								; 0.75 - 1.0 calculate x - 1
		inx
		lda 	#1
		jsr 	FloatSetByte
		jsr 	FloatSubtract

_USProcessExit:
		jsr 	CoreSine
		jsr 	CompletePolynomial
		pla 								; restore sign and apply
		eor 	NSStatus,x
		sta 	NSStatus,x
		clc
		rts

		.send 	code

; ************************************************************************************************
;
;									Changes and Updates
;
; ************************************************************************************************
;
;		Date			Notes
;		==== 			=====
;
; ************************************************************************************************
; ************************************************************************************************
; ************************************************************************************************
;
;		Name:		sin_core.asm
;		Purpose:	Core SIN() polynomial
;		Created:	11th April 2023
;		Reviewed: 	No
;		Author : 	Paul Robson (paul@robsons.org.uk)
;
; ************************************************************************************************
; ************************************************************************************************

		.section 	code

; ************************************************************************************************
;
;									calculates SIN()
;
; ************************************************************************************************

CoreSine: 	
		lda 	#SinCoefficients & $FF
		ldy 	#SinCoefficients >> 8

; ************************************************************************************************
;
;					Do the x^2 polynomials (e.g. all other than EXP())
;
; ************************************************************************************************

CorePolySquared:
		pha 								; save coefficient table
		phy

		txa 								; copy X to +1, +2
		tay
		iny
		jsr 	CopyFloatXY
		iny
		jsr 	CopyFloatXY
		inx 								; point to the pair and put x^2 on stack
		inx
		jsr 	FloatMultiply
		ply 								; coefficient table back.
		pla
		jsr 	CalculateHornerPolynomial
		txa 								; copy back to slot #1
		tay
		dey
		jsr	 	CopyFloatXY		
		dex 								; point at result
		rts

		.send 	code

; ************************************************************************************************
;
;									Changes and Updates
;
; ************************************************************************************************
;
;		Date			Notes
;		==== 			=====
;
; ************************************************************************************************
; ************************************************************************************************
; ************************************************************************************************
;
;		Name:		sqr.asm
;		Purpose:	Square root function.
;		Created:	11th April 2023
;		Reviewed: 	No
;		Author : 	Paul Robson (paul@robsons.org.uk)
;
; ************************************************************************************************
; ************************************************************************************************

		.section 	code

; ************************************************************************************************
;
;									calculate SQR(x)
;
; ************************************************************************************************

FloatSquareRoot: 
		jsr 	FloatLogarithm
		bcs 	_FSQExit
		dec 	NSExponent,x
		jsr 	FloatExponent
		clc
_FSQExit:		
		rts

		.send 	code

; ************************************************************************************************
;
;									Changes and Updates
;
; ************************************************************************************************
;
;		Date			Notes
;		==== 			=====
;
; ************************************************************************************************
; ************************************************************************************************
; ************************************************************************************************
;
;		Name:		tan.asm
;		Purpose:	Tangent function.
;		Created:	11th April 2023
;		Reviewed: 	No
;		Author : 	Paul Robson (paul@robsons.org.uk)
;
; ************************************************************************************************
; ************************************************************************************************

		.section 	code

; ************************************************************************************************
;
;									calculate TAN(x)
;
; ************************************************************************************************

FloatTangent: 	
		phx
		txa 								; sin -> +1
		tay
		iny
		jsr 	CopyFloatXY
		inx
		jsr 	FloatSine 				
		dex

		txa 								; cos -> +2
		tay
		iny
		iny
		jsr 	CopyFloatXY		
		inx
		inx
		jsr 	FloatCosine 				

		jsr 	FloatDivide 				; calculate sin/cos
		bcs 	_FTExit 					; divide by zero

		txa 								; copy result down.
		tay
		dey
		jsr 	CopyFloatXY 				

		clc
_FTExit:
		plx	
		rts		


		.send 	code

; ************************************************************************************************
;
;									Changes and Updates
;
; ************************************************************************************************
;
;		Date			Notes
;		==== 			=====
;
; ************************************************************************************************
