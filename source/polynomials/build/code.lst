
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass -q -c -Wall -o build/code.prg -L build/code.lst -l build/code.lbl testing/testing.asm /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library /home/paulr/Projects/blitz-compiler/documents/../bin/polynomials.library /home/paulr/Projects/blitz-compiler/documents/../bin/common.library
; Mon Oct  9 06:43:16 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: testing/testing.asm

.0801					WrapperBoot:
.0801	a2 ff		ldx #$ff			ldx 	#255
.0803	20 0c 08	jsr $080c			jsr 	TestScript
.0806	86 6e		stx $6e				stx 	zTemp0
.0808	4c ff ff	jmp $ffff			jmp 	$FFFF
.080b					ErrorHandler:
>080b	db						.byte 	$DB 						; causes a break in the emulator
.080c					TestScript:

;******  Processing file: testing/generated/testcode.dat

.080c	20 55 48	jsr $4855		jsr	FPPushConstant	; -68.89665506
>080f	30 8b e5 44				.dword	$44e58b30
>0813	e8 80					.byte	$e8,$80
.0815	20 2c 4e	jsr $4e2c		jsr	FloatNegate
.0818	20 55 48	jsr $4855		jsr	FPPushConstant	; 68.89665506
>081b	30 8b e5 44				.dword	$44e58b30
>081f	e8 00					.byte	$e8,$00
.0821	20 4f 49	jsr $494f		jsr	FloatCompare
.0824	20 19 49	jsr $4919		jsr	CompareEqual
.0827	20 45 48	jsr $4845		jsr	FPAssertCheck
.082a	20 55 48	jsr $4855		jsr	FPPushConstant	; -68.89665506
>082d	30 8b e5 44				.dword	$44e58b30
>0831	e8 80					.byte	$e8,$80
.0833	20 a5 4a	jsr $4aa5		jsr	FloatIntegerPart
.0836	20 55 48	jsr $4855		jsr	FPPushConstant	; -68
>0839	44 00 00 00				.dword	$00000044
>083d	00 80					.byte	$00,$80
.083f	20 4f 49	jsr $494f		jsr	FloatCompare
.0842	20 19 49	jsr $4919		jsr	CompareEqual
.0845	20 45 48	jsr $4845		jsr	FPAssertCheck
.0848	20 55 48	jsr $4855		jsr	FPPushConstant	; -1.5
>084b	00 00 00 60				.dword	$60000000
>084f	e2 80					.byte	$e2,$80
.0851	20 50 51	jsr $5150		jsr	FloatSine
.0854	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.99749499
>0857	74 ea ad 7f				.dword	$7fadea74
>085b	e1 80					.byte	$e1,$80
.085d	20 88 48	jsr $4888		jsr	FloatSubtract
.0860	20 52 48	jsr $4852		jsr	FPAbs
.0863	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>0866	4c 37 89 41				.dword	$4189374c
>086a	d8 00					.byte	$d8,$00
.086c	20 4f 49	jsr $494f		jsr	FloatCompare
.086f	20 2f 49	jsr $492f		jsr	CompareLess
.0872	20 45 48	jsr $4845		jsr	FPAssertCheck
.0875	20 55 48	jsr $4855		jsr	FPPushConstant	; -1.5
>0878	00 00 00 60				.dword	$60000000
>087c	e2 80					.byte	$e2,$80
.087e	20 b0 4f	jsr $4fb0		jsr	FloatCosine
.0881	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.0707372
>0884	22 55 6f 48				.dword	$486f5522
>0888	de 00					.byte	$de,$00
.088a	20 88 48	jsr $4888		jsr	FloatSubtract
.088d	20 52 48	jsr $4852		jsr	FPAbs
.0890	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>0893	4c 37 89 41				.dword	$4189374c
>0897	d8 00					.byte	$d8,$00
.0899	20 4f 49	jsr $494f		jsr	FloatCompare
.089c	20 2f 49	jsr $492f		jsr	CompareLess
.089f	20 45 48	jsr $4845		jsr	FPAssertCheck
.08a2	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.25
>08a5	00 00 00 40				.dword	$40000000
>08a9	e0 00					.byte	$e0,$00
.08ab	20 c1 51	jsr $51c1		jsr	FloatTangent
.08ae	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.25534192
>08b1	8c 16 5e 41				.dword	$415e168c
>08b5	e0 00					.byte	$e0,$00
.08b7	20 88 48	jsr $4888		jsr	FloatSubtract
.08ba	20 52 48	jsr $4852		jsr	FPAbs
.08bd	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>08c0	4c 37 89 41				.dword	$4189374c
>08c4	d8 00					.byte	$d8,$00
.08c6	20 4f 49	jsr $494f		jsr	FloatCompare
.08c9	20 45 48	jsr $4845		jsr	FPAssertCheck
.08cc	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.511
>08cf	b0 72 68 41				.dword	$416872b0
>08d3	e1 00					.byte	$e1,$00
.08d5	20 95 4e	jsr $4e95		jsr	FloatArcTan
.08d8	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.47240883
>08db	fb c8 ef 78				.dword	$78efc8fb
>08df	e0 00					.byte	$e0,$00
.08e1	20 88 48	jsr $4888		jsr	FloatSubtract
.08e4	20 52 48	jsr $4852		jsr	FPAbs
.08e7	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>08ea	4c 37 89 41				.dword	$4189374c
>08ee	d8 00					.byte	$d8,$00
.08f0	20 4f 49	jsr $494f		jsr	FloatCompare
.08f3	20 45 48	jsr $4845		jsr	FPAssertCheck
.08f6	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.03
>08f9	1f 85 eb 41				.dword	$41eb851f
>08fd	e2 00					.byte	$e2,$00
.08ff	20 bc 4f	jsr $4fbc		jsr	FloatExponent
.0902	20 55 48	jsr $4855		jsr	FPPushConstant	; 2.80106583
>0905	cf 54 a2 59				.dword	$59a254cf
>0909	e3 00					.byte	$e3,$00
.090b	20 88 48	jsr $4888		jsr	FloatSubtract
.090e	20 52 48	jsr $4852		jsr	FPAbs
.0911	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>0914	4c 37 89 41				.dword	$4189374c
>0918	d8 00					.byte	$d8,$00
.091a	20 4f 49	jsr $494f		jsr	FloatCompare
.091d	20 45 48	jsr $4845		jsr	FPAssertCheck
.0920	20 55 48	jsr $4855		jsr	FPPushConstant	; 31.56
>0923	a4 70 3d 7e				.dword	$7e3d70a4
>0927	e6 00					.byte	$e6,$00
.0929	20 bf 50	jsr $50bf		jsr	FloatLogarithm
.092c	20 55 48	jsr $4855		jsr	FPPushConstant	; 3.4518905
>092f	11 e3 75 6e				.dword	$6e75e311
>0933	e3 00					.byte	$e3,$00
.0935	20 88 48	jsr $4888		jsr	FloatSubtract
.0938	20 52 48	jsr $4852		jsr	FPAbs
.093b	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>093e	4c 37 89 41				.dword	$4189374c
>0942	d8 00					.byte	$d8,$00
.0944	20 4f 49	jsr $494f		jsr	FloatCompare
.0947	20 45 48	jsr $4845		jsr	FPAssertCheck
.094a	20 55 48	jsr $4855		jsr	FPPushConstant	; 6.28
>094d	48 e1 7a 64				.dword	$647ae148
>0951	e4 00					.byte	$e4,$00
.0953	20 b5 51	jsr $51b5		jsr	FloatSquareRoot
.0956	20 55 48	jsr $4855		jsr	FPPushConstant	; 2.50599282
>0959	db 17 31 50				.dword	$503117db
>095d	e3 00					.byte	$e3,$00
.095f	20 88 48	jsr $4888		jsr	FloatSubtract
.0962	20 52 48	jsr $4852		jsr	FPAbs
.0965	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>0968	4c 37 89 41				.dword	$4189374c
>096c	d8 00					.byte	$d8,$00
.096e	20 4f 49	jsr $494f		jsr	FloatCompare
.0971	20 45 48	jsr $4845		jsr	FPAssertCheck
.0974	20 55 48	jsr $4855		jsr	FPPushConstant	; 3.00333333
>0977	80 4e 1b 60				.dword	$601b4e80
>097b	e3 00					.byte	$e3,$00
.097d	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.0
>0980	01 00 00 00				.dword	$00000001
>0984	00 00					.byte	$00,$00
.0986	20 33 51	jsr $5133		jsr	FloatPower
.0989	20 55 48	jsr $4855		jsr	FPPushConstant	; 3.00333333
>098c	80 4e 1b 60				.dword	$601b4e80
>0990	e3 00					.byte	$e3,$00
.0992	20 88 48	jsr $4888		jsr	FloatSubtract
.0995	20 52 48	jsr $4852		jsr	FPAbs
.0998	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.01
>099b	1f 85 eb 51				.dword	$51eb851f
>099f	db 00					.byte	$db,$00
.09a1	20 4f 49	jsr $494f		jsr	FloatCompare
.09a4	20 45 48	jsr $4845		jsr	FPAssertCheck
.09a7	20 55 48	jsr $4855		jsr	FPPushConstant	; 11.36114036
>09aa	8f 9d e3 5a				.dword	$5ae39d8f
>09ae	e5 00					.byte	$e5,$00
.09b0	20 2c 4e	jsr $4e2c		jsr	FloatNegate
.09b3	20 55 48	jsr $4855		jsr	FPPushConstant	; -11.36114036
>09b6	8f 9d e3 5a				.dword	$5ae39d8f
>09ba	e5 80					.byte	$e5,$80
.09bc	20 4f 49	jsr $494f		jsr	FloatCompare
.09bf	20 19 49	jsr $4919		jsr	CompareEqual
.09c2	20 45 48	jsr $4845		jsr	FPAssertCheck
.09c5	20 55 48	jsr $4855		jsr	FPPushConstant	; 11.36114036
>09c8	8f 9d e3 5a				.dword	$5ae39d8f
>09cc	e5 00					.byte	$e5,$00
.09ce	20 a5 4a	jsr $4aa5		jsr	FloatIntegerPart
.09d1	20 55 48	jsr $4855		jsr	FPPushConstant	; 11
>09d4	0b 00 00 00				.dword	$0000000b
>09d8	00 00					.byte	$00,$00
.09da	20 4f 49	jsr $494f		jsr	FloatCompare
.09dd	20 19 49	jsr $4919		jsr	CompareEqual
.09e0	20 45 48	jsr $4845		jsr	FPAssertCheck
.09e3	20 55 48	jsr $4855		jsr	FPPushConstant	; 5.19
>09e6	71 3d 0a 53				.dword	$530a3d71
>09ea	e4 00					.byte	$e4,$00
.09ec	20 50 51	jsr $5150		jsr	FloatSine
.09ef	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.88809557
>09f2	9a 1d ad 71				.dword	$71ad1d9a
>09f6	e1 80					.byte	$e1,$80
.09f8	20 88 48	jsr $4888		jsr	FloatSubtract
.09fb	20 52 48	jsr $4852		jsr	FPAbs
.09fe	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>0a01	4c 37 89 41				.dword	$4189374c
>0a05	d8 00					.byte	$d8,$00
.0a07	20 4f 49	jsr $494f		jsr	FloatCompare
.0a0a	20 2f 49	jsr $492f		jsr	CompareLess
.0a0d	20 45 48	jsr $4845		jsr	FPAssertCheck
.0a10	20 55 48	jsr $4855		jsr	FPPushConstant	; 5.19
>0a13	71 3d 0a 53				.dword	$530a3d71
>0a17	e4 00					.byte	$e4,$00
.0a19	20 b0 4f	jsr $4fb0		jsr	FloatCosine
.0a1c	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.45965885
>0a1f	d0 33 ac 75				.dword	$75ac33d0
>0a23	e0 00					.byte	$e0,$00
.0a25	20 88 48	jsr $4888		jsr	FloatSubtract
.0a28	20 52 48	jsr $4852		jsr	FPAbs
.0a2b	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>0a2e	4c 37 89 41				.dword	$4189374c
>0a32	d8 00					.byte	$d8,$00
.0a34	20 4f 49	jsr $494f		jsr	FloatCompare
.0a37	20 2f 49	jsr $492f		jsr	CompareLess
.0a3a	20 45 48	jsr $4845		jsr	FPAssertCheck
.0a3d	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.12
>0a40	ae 47 e1 7a				.dword	$7ae147ae
>0a44	de 00					.byte	$de,$00
.0a46	20 c1 51	jsr $51c1		jsr	FloatTangent
.0a49	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.12057934
>0a4c	87 26 79 7b				.dword	$7b792687
>0a50	de 00					.byte	$de,$00
.0a52	20 88 48	jsr $4888		jsr	FloatSubtract
.0a55	20 52 48	jsr $4852		jsr	FPAbs
.0a58	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>0a5b	4c 37 89 41				.dword	$4189374c
>0a5f	d8 00					.byte	$d8,$00
.0a61	20 4f 49	jsr $494f		jsr	FloatCompare
.0a64	20 45 48	jsr $4845		jsr	FPAssertCheck
.0a67	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.776
>0a6a	cf f7 53 63				.dword	$6353f7cf
>0a6e	e1 00					.byte	$e1,$00
.0a70	20 95 4e	jsr $4e95		jsr	FloatArcTan
.0a73	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.65993452
>0a76	fe bb 78 54				.dword	$5478bbfe
>0a7a	e1 00					.byte	$e1,$00
.0a7c	20 88 48	jsr $4888		jsr	FloatSubtract
.0a7f	20 52 48	jsr $4852		jsr	FPAbs
.0a82	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>0a85	4c 37 89 41				.dword	$4189374c
>0a89	d8 00					.byte	$d8,$00
.0a8b	20 4f 49	jsr $494f		jsr	FloatCompare
.0a8e	20 45 48	jsr $4845		jsr	FPAssertCheck
.0a91	20 55 48	jsr $4855		jsr	FPPushConstant	; -1.43
>0a94	b8 1e 85 5b				.dword	$5b851eb8
>0a98	e2 80					.byte	$e2,$80
.0a9a	20 bc 4f	jsr $4fbc		jsr	FloatExponent
.0a9d	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.23930892
>0aa0	e2 b2 86 7a				.dword	$7a86b2e2
>0aa4	df 00					.byte	$df,$00
.0aa6	20 88 48	jsr $4888		jsr	FloatSubtract
.0aa9	20 52 48	jsr $4852		jsr	FPAbs
.0aac	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>0aaf	4c 37 89 41				.dword	$4189374c
>0ab3	d8 00					.byte	$d8,$00
.0ab5	20 4f 49	jsr $494f		jsr	FloatCompare
.0ab8	20 45 48	jsr $4845		jsr	FPAssertCheck
.0abb	20 55 48	jsr $4855		jsr	FPPushConstant	; 17.82
>0abe	14 ae 47 47				.dword	$4747ae14
>0ac2	e6 00					.byte	$e6,$00
.0ac4	20 bf 50	jsr $50bf		jsr	FloatLogarithm
.0ac7	20 55 48	jsr $4855		jsr	FPPushConstant	; 2.88032142
>0aca	d4 97 2b 5c				.dword	$5c2b97d4
>0ace	e3 00					.byte	$e3,$00
.0ad0	20 88 48	jsr $4888		jsr	FloatSubtract
.0ad3	20 52 48	jsr $4852		jsr	FPAbs
.0ad6	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>0ad9	4c 37 89 41				.dword	$4189374c
>0add	d8 00					.byte	$d8,$00
.0adf	20 4f 49	jsr $494f		jsr	FloatCompare
.0ae2	20 45 48	jsr $4845		jsr	FPAssertCheck
.0ae5	20 55 48	jsr $4855		jsr	FPPushConstant	; 6.4
>0ae8	66 66 66 66				.dword	$66666666
>0aec	e4 00					.byte	$e4,$00
.0aee	20 b5 51	jsr $51b5		jsr	FloatSquareRoot
.0af1	20 55 48	jsr $4855		jsr	FPPushConstant	; 2.52982213
>0af4	8a 4d f4 50				.dword	$50f44d8a
>0af8	e3 00					.byte	$e3,$00
.0afa	20 88 48	jsr $4888		jsr	FloatSubtract
.0afd	20 52 48	jsr $4852		jsr	FPAbs
.0b00	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>0b03	4c 37 89 41				.dword	$4189374c
>0b07	d8 00					.byte	$d8,$00
.0b09	20 4f 49	jsr $494f		jsr	FloatCompare
.0b0c	20 45 48	jsr $4845		jsr	FPAssertCheck
.0b0f	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.4
>0b12	66 66 66 66				.dword	$66666666
>0b16	e0 00					.byte	$e0,$00
.0b18	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.3
>0b1b	33 33 33 53				.dword	$53333333
>0b1f	e2 00					.byte	$e2,$00
.0b21	20 33 51	jsr $5133		jsr	FloatPower
.0b24	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.30386312
>0b27	33 f9 c9 4d				.dword	$4dc9f933
>0b2b	e0 00					.byte	$e0,$00
.0b2d	20 88 48	jsr $4888		jsr	FloatSubtract
.0b30	20 52 48	jsr $4852		jsr	FPAbs
.0b33	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.01
>0b36	1f 85 eb 51				.dword	$51eb851f
>0b3a	db 00					.byte	$db,$00
.0b3c	20 4f 49	jsr $494f		jsr	FloatCompare
.0b3f	20 45 48	jsr $4845		jsr	FPAssertCheck
.0b42	20 55 48	jsr $4855		jsr	FPPushConstant	; -18.52822548
>0b45	24 e7 1c 4a				.dword	$4a1ce724
>0b49	e6 80					.byte	$e6,$80
.0b4b	20 2c 4e	jsr $4e2c		jsr	FloatNegate
.0b4e	20 55 48	jsr $4855		jsr	FPPushConstant	; 18.52822548
>0b51	24 e7 1c 4a				.dword	$4a1ce724
>0b55	e6 00					.byte	$e6,$00
.0b57	20 4f 49	jsr $494f		jsr	FloatCompare
.0b5a	20 19 49	jsr $4919		jsr	CompareEqual
.0b5d	20 45 48	jsr $4845		jsr	FPAssertCheck
.0b60	20 55 48	jsr $4855		jsr	FPPushConstant	; -18.52822548
>0b63	24 e7 1c 4a				.dword	$4a1ce724
>0b67	e6 80					.byte	$e6,$80
.0b69	20 a5 4a	jsr $4aa5		jsr	FloatIntegerPart
.0b6c	20 55 48	jsr $4855		jsr	FPPushConstant	; -18
>0b6f	12 00 00 00				.dword	$00000012
>0b73	00 80					.byte	$00,$80
.0b75	20 4f 49	jsr $494f		jsr	FloatCompare
.0b78	20 19 49	jsr $4919		jsr	CompareEqual
.0b7b	20 45 48	jsr $4845		jsr	FPAssertCheck
.0b7e	20 55 48	jsr $4855		jsr	FPPushConstant	; -3.51
>0b81	85 eb 51 70				.dword	$7051eb85
>0b85	e3 80					.byte	$e3,$80
.0b87	20 50 51	jsr $5150		jsr	FloatSine
.0b8a	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.3601301
>0b8d	7a 7c 31 5c				.dword	$5c317c7a
>0b91	e0 00					.byte	$e0,$00
.0b93	20 88 48	jsr $4888		jsr	FloatSubtract
.0b96	20 52 48	jsr $4852		jsr	FPAbs
.0b99	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>0b9c	4c 37 89 41				.dword	$4189374c
>0ba0	d8 00					.byte	$d8,$00
.0ba2	20 4f 49	jsr $494f		jsr	FloatCompare
.0ba5	20 2f 49	jsr $492f		jsr	CompareLess
.0ba8	20 45 48	jsr $4845		jsr	FPAssertCheck
.0bab	20 55 48	jsr $4855		jsr	FPPushConstant	; -3.51
>0bae	85 eb 51 70				.dword	$7051eb85
>0bb2	e3 80					.byte	$e3,$80
.0bb4	20 b0 4f	jsr $4fb0		jsr	FloatCosine
.0bb7	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.93290209
>0bba	ef 55 69 77				.dword	$776955ef
>0bbe	e1 80					.byte	$e1,$80
.0bc0	20 88 48	jsr $4888		jsr	FloatSubtract
.0bc3	20 52 48	jsr $4852		jsr	FPAbs
.0bc6	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>0bc9	4c 37 89 41				.dword	$4189374c
>0bcd	d8 00					.byte	$d8,$00
.0bcf	20 4f 49	jsr $494f		jsr	FloatCompare
.0bd2	20 2f 49	jsr $492f		jsr	CompareLess
.0bd5	20 45 48	jsr $4845		jsr	FPAssertCheck
.0bd8	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.39
>0bdb	3d 0a d7 63				.dword	$63d70a3d
>0bdf	e0 00					.byte	$e0,$00
.0be1	20 c1 51	jsr $51c1		jsr	FloatTangent
.0be4	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.41105492
>0be7	2e e5 3a 69				.dword	$693ae52e
>0beb	e0 00					.byte	$e0,$00
.0bed	20 88 48	jsr $4888		jsr	FloatSubtract
.0bf0	20 52 48	jsr $4852		jsr	FPAbs
.0bf3	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>0bf6	4c 37 89 41				.dword	$4189374c
>0bfa	d8 00					.byte	$d8,$00
.0bfc	20 4f 49	jsr $494f		jsr	FloatCompare
.0bff	20 45 48	jsr $4845		jsr	FPAssertCheck
.0c02	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.182
>0c05	54 e3 a5 4b				.dword	$4ba5e354
>0c09	e2 00					.byte	$e2,$00
.0c0b	20 95 4e	jsr $4e95		jsr	FloatArcTan
.0c0e	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.86861525
>0c11	d6 c8 2e 6f				.dword	$6f2ec8d6
>0c15	e1 00					.byte	$e1,$00
.0c17	20 88 48	jsr $4888		jsr	FloatSubtract
.0c1a	20 52 48	jsr $4852		jsr	FPAbs
.0c1d	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>0c20	4c 37 89 41				.dword	$4189374c
>0c24	d8 00					.byte	$d8,$00
.0c26	20 4f 49	jsr $494f		jsr	FloatCompare
.0c29	20 45 48	jsr $4845		jsr	FPAssertCheck
.0c2c	20 55 48	jsr $4855		jsr	FPPushConstant	; -1.61
>0c2f	71 3d 0a 67				.dword	$670a3d71
>0c33	e2 80					.byte	$e2,$80
.0c35	20 bc 4f	jsr $4fbc		jsr	FloatExponent
.0c38	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.19988761
>0c3b	38 ab 57 66				.dword	$6657ab38
>0c3f	df 00					.byte	$df,$00
.0c41	20 88 48	jsr $4888		jsr	FloatSubtract
.0c44	20 52 48	jsr $4852		jsr	FPAbs
.0c47	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>0c4a	4c 37 89 41				.dword	$4189374c
>0c4e	d8 00					.byte	$d8,$00
.0c50	20 4f 49	jsr $494f		jsr	FloatCompare
.0c53	20 45 48	jsr $4845		jsr	FPAssertCheck
.0c56	20 55 48	jsr $4855		jsr	FPPushConstant	; 56.95
>0c59	66 66 e6 71				.dword	$71e66666
>0c5d	e7 00					.byte	$e7,$00
.0c5f	20 bf 50	jsr $50bf		jsr	FloatLogarithm
.0c62	20 55 48	jsr $4855		jsr	FPPushConstant	; 4.04217369
>0c65	52 be ac 40				.dword	$40acbe52
>0c69	e4 00					.byte	$e4,$00
.0c6b	20 88 48	jsr $4888		jsr	FloatSubtract
.0c6e	20 52 48	jsr $4852		jsr	FPAbs
.0c71	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>0c74	4c 37 89 41				.dword	$4189374c
>0c78	d8 00					.byte	$d8,$00
.0c7a	20 4f 49	jsr $494f		jsr	FloatCompare
.0c7d	20 45 48	jsr $4845		jsr	FPAssertCheck
.0c80	20 55 48	jsr $4855		jsr	FPPushConstant	; 43.32
>0c83	0a d7 a3 56				.dword	$56a3d70a
>0c87	e7 00					.byte	$e7,$00
.0c89	20 b5 51	jsr $51b5		jsr	FloatSquareRoot
.0c8c	20 55 48	jsr $4855		jsr	FPPushConstant	; 6.58179307
>0c8f	40 06 4f 69				.dword	$694f0640
>0c93	e4 00					.byte	$e4,$00
.0c95	20 88 48	jsr $4888		jsr	FloatSubtract
.0c98	20 52 48	jsr $4852		jsr	FPAbs
.0c9b	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>0c9e	4c 37 89 41				.dword	$4189374c
>0ca2	d8 00					.byte	$d8,$00
.0ca4	20 4f 49	jsr $494f		jsr	FloatCompare
.0ca7	20 45 48	jsr $4845		jsr	FPAssertCheck
.0caa	20 55 48	jsr $4855		jsr	FPPushConstant	; 2.87
>0cad	3d 0a d7 5b				.dword	$5bd70a3d
>0cb1	e3 00					.byte	$e3,$00
.0cb3	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.9
>0cb6	9a 99 99 79				.dword	$7999999a
>0cba	e2 00					.byte	$e2,$00
.0cbc	20 33 51	jsr $5133		jsr	FloatPower
.0cbf	20 55 48	jsr $4855		jsr	FPPushConstant	; 7.412686
>0cc2	a3 5c 9a 76				.dword	$769a5ca3
>0cc6	e4 00					.byte	$e4,$00
.0cc8	20 88 48	jsr $4888		jsr	FloatSubtract
.0ccb	20 52 48	jsr $4852		jsr	FPAbs
.0cce	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.01
>0cd1	1f 85 eb 51				.dword	$51eb851f
>0cd5	db 00					.byte	$db,$00
.0cd7	20 4f 49	jsr $494f		jsr	FloatCompare
.0cda	20 45 48	jsr $4845		jsr	FPAssertCheck
.0cdd	20 55 48	jsr $4855		jsr	FPPushConstant	; -79.40244594
>0ce0	b2 06 67 4f				.dword	$4f6706b2
>0ce4	e8 80					.byte	$e8,$80
.0ce6	20 2c 4e	jsr $4e2c		jsr	FloatNegate
.0ce9	20 55 48	jsr $4855		jsr	FPPushConstant	; 79.40244594
>0cec	b2 06 67 4f				.dword	$4f6706b2
>0cf0	e8 00					.byte	$e8,$00
.0cf2	20 4f 49	jsr $494f		jsr	FloatCompare
.0cf5	20 19 49	jsr $4919		jsr	CompareEqual
.0cf8	20 45 48	jsr $4845		jsr	FPAssertCheck
.0cfb	20 55 48	jsr $4855		jsr	FPPushConstant	; -79.40244594
>0cfe	b2 06 67 4f				.dword	$4f6706b2
>0d02	e8 80					.byte	$e8,$80
.0d04	20 a5 4a	jsr $4aa5		jsr	FloatIntegerPart
.0d07	20 55 48	jsr $4855		jsr	FPPushConstant	; -79
>0d0a	4f 00 00 00				.dword	$0000004f
>0d0e	00 80					.byte	$00,$80
.0d10	20 4f 49	jsr $494f		jsr	FloatCompare
.0d13	20 19 49	jsr $4919		jsr	CompareEqual
.0d16	20 45 48	jsr $4845		jsr	FPAssertCheck
.0d19	20 55 48	jsr $4855		jsr	FPPushConstant	; 10.74
>0d1c	1f 85 eb 55				.dword	$55eb851f
>0d20	e5 00					.byte	$e5,$00
.0d22	20 50 51	jsr $5150		jsr	FloatSine
.0d25	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.96751827
>0d28	80 a3 d7 7b				.dword	$7bd7a380
>0d2c	e1 80					.byte	$e1,$80
.0d2e	20 88 48	jsr $4888		jsr	FloatSubtract
.0d31	20 52 48	jsr $4852		jsr	FPAbs
.0d34	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>0d37	4c 37 89 41				.dword	$4189374c
>0d3b	d8 00					.byte	$d8,$00
.0d3d	20 4f 49	jsr $494f		jsr	FloatCompare
.0d40	20 2f 49	jsr $492f		jsr	CompareLess
.0d43	20 45 48	jsr $4845		jsr	FPAssertCheck
.0d46	20 55 48	jsr $4855		jsr	FPPushConstant	; 10.74
>0d49	1f 85 eb 55				.dword	$55eb851f
>0d4d	e5 00					.byte	$e5,$00
.0d4f	20 b0 4f	jsr $4fb0		jsr	FloatCosine
.0d52	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.25280108
>0d55	53 92 b7 40				.dword	$40b79253
>0d59	e0 80					.byte	$e0,$80
.0d5b	20 88 48	jsr $4888		jsr	FloatSubtract
.0d5e	20 52 48	jsr $4852		jsr	FPAbs
.0d61	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>0d64	4c 37 89 41				.dword	$4189374c
>0d68	d8 00					.byte	$d8,$00
.0d6a	20 4f 49	jsr $494f		jsr	FloatCompare
.0d6d	20 2f 49	jsr $492f		jsr	CompareLess
.0d70	20 45 48	jsr $4845		jsr	FPAssertCheck
.0d73	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.3
>0d76	cd cc cc 4c				.dword	$4ccccccd
>0d7a	e0 00					.byte	$e0,$00
.0d7c	20 c1 51	jsr $51c1		jsr	FloatTangent
.0d7f	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.30933625
>0d82	15 a9 30 4f				.dword	$4f30a915
>0d86	e0 00					.byte	$e0,$00
.0d88	20 88 48	jsr $4888		jsr	FloatSubtract
.0d8b	20 52 48	jsr $4852		jsr	FPAbs
.0d8e	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>0d91	4c 37 89 41				.dword	$4189374c
>0d95	d8 00					.byte	$d8,$00
.0d97	20 4f 49	jsr $494f		jsr	FloatCompare
.0d9a	20 45 48	jsr $4845		jsr	FPAssertCheck
.0d9d	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.158
>0da0	42 60 e5 50				.dword	$50e56042
>0da4	df 00					.byte	$df,$00
.0da6	20 95 4e	jsr $4e95		jsr	FloatArcTan
.0da9	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.15670458
>0dac	2c 95 3b 50				.dword	$503b952c
>0db0	df 00					.byte	$df,$00
.0db2	20 88 48	jsr $4888		jsr	FloatSubtract
.0db5	20 52 48	jsr $4852		jsr	FPAbs
.0db8	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>0dbb	4c 37 89 41				.dword	$4189374c
>0dbf	d8 00					.byte	$d8,$00
.0dc1	20 4f 49	jsr $494f		jsr	FloatCompare
.0dc4	20 45 48	jsr $4845		jsr	FPAssertCheck
.0dc7	20 55 48	jsr $4855		jsr	FPPushConstant	; -1.04
>0dca	29 5c 8f 42				.dword	$428f5c29
>0dce	e2 80					.byte	$e2,$80
.0dd0	20 bc 4f	jsr $4fbc		jsr	FloatExponent
.0dd3	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.35345468
>0dd6	83 01 7c 5a				.dword	$5a7c0183
>0dda	e0 00					.byte	$e0,$00
.0ddc	20 88 48	jsr $4888		jsr	FloatSubtract
.0ddf	20 52 48	jsr $4852		jsr	FPAbs
.0de2	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>0de5	4c 37 89 41				.dword	$4189374c
>0de9	d8 00					.byte	$d8,$00
.0deb	20 4f 49	jsr $494f		jsr	FloatCompare
.0dee	20 45 48	jsr $4845		jsr	FPAssertCheck
.0df1	20 55 48	jsr $4855		jsr	FPPushConstant	; 83.33
>0df4	e1 7a 54 53				.dword	$53547ae1
>0df8	e8 00					.byte	$e8,$00
.0dfa	20 bf 50	jsr $50bf		jsr	FloatLogarithm
.0dfd	20 55 48	jsr $4855		jsr	FPPushConstant	; 4.42280863
>0e00	fb d2 c3 46				.dword	$46c3d2fb
>0e04	e4 00					.byte	$e4,$00
.0e06	20 88 48	jsr $4888		jsr	FloatSubtract
.0e09	20 52 48	jsr $4852		jsr	FPAbs
.0e0c	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>0e0f	4c 37 89 41				.dword	$4189374c
>0e13	d8 00					.byte	$d8,$00
.0e15	20 4f 49	jsr $494f		jsr	FloatCompare
.0e18	20 45 48	jsr $4845		jsr	FPAssertCheck
.0e1b	20 55 48	jsr $4855		jsr	FPPushConstant	; 12.61
>0e1e	ae 47 e1 64				.dword	$64e147ae
>0e22	e5 00					.byte	$e5,$00
.0e24	20 b5 51	jsr $51b5		jsr	FloatSquareRoot
.0e27	20 55 48	jsr $4855		jsr	FPPushConstant	; 3.55105618
>0e2a	92 40 a2 71				.dword	$71a24092
>0e2e	e3 00					.byte	$e3,$00
.0e30	20 88 48	jsr $4888		jsr	FloatSubtract
.0e33	20 52 48	jsr $4852		jsr	FPAbs
.0e36	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>0e39	4c 37 89 41				.dword	$4189374c
>0e3d	d8 00					.byte	$d8,$00
.0e3f	20 4f 49	jsr $494f		jsr	FloatCompare
.0e42	20 45 48	jsr $4845		jsr	FPAssertCheck
.0e45	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.28666667
>0e48	a5 fc 62 49				.dword	$4962fca5
>0e4c	e0 00					.byte	$e0,$00
.0e4e	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.0
>0e51	01 00 00 00				.dword	$00000001
>0e55	00 00					.byte	$00,$00
.0e57	20 33 51	jsr $5133		jsr	FloatPower
.0e5a	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.28666667
>0e5d	a5 fc 62 49				.dword	$4962fca5
>0e61	e0 00					.byte	$e0,$00
.0e63	20 88 48	jsr $4888		jsr	FloatSubtract
.0e66	20 52 48	jsr $4852		jsr	FPAbs
.0e69	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.01
>0e6c	1f 85 eb 51				.dword	$51eb851f
>0e70	db 00					.byte	$db,$00
.0e72	20 4f 49	jsr $494f		jsr	FloatCompare
.0e75	20 45 48	jsr $4845		jsr	FPAssertCheck
.0e78	20 55 48	jsr $4855		jsr	FPPushConstant	; 51.11646554
>0e7b	5f a1 3b 66				.dword	$663ba15f
>0e7f	e7 00					.byte	$e7,$00
.0e81	20 2c 4e	jsr $4e2c		jsr	FloatNegate
.0e84	20 55 48	jsr $4855		jsr	FPPushConstant	; -51.11646554
>0e87	5f a1 3b 66				.dword	$663ba15f
>0e8b	e7 80					.byte	$e7,$80
.0e8d	20 4f 49	jsr $494f		jsr	FloatCompare
.0e90	20 19 49	jsr $4919		jsr	CompareEqual
.0e93	20 45 48	jsr $4845		jsr	FPAssertCheck
.0e96	20 55 48	jsr $4855		jsr	FPPushConstant	; 51.11646554
>0e99	5f a1 3b 66				.dword	$663ba15f
>0e9d	e7 00					.byte	$e7,$00
.0e9f	20 a5 4a	jsr $4aa5		jsr	FloatIntegerPart
.0ea2	20 55 48	jsr $4855		jsr	FPPushConstant	; 51
>0ea5	33 00 00 00				.dword	$00000033
>0ea9	00 00					.byte	$00,$00
.0eab	20 4f 49	jsr $494f		jsr	FloatCompare
.0eae	20 19 49	jsr $4919		jsr	CompareEqual
.0eb1	20 45 48	jsr $4845		jsr	FPAssertCheck
.0eb4	20 55 48	jsr $4855		jsr	FPPushConstant	; 17.8
>0eb7	33 33 33 47				.dword	$47333333
>0ebb	e6 00					.byte	$e6,$00
.0ebd	20 50 51	jsr $5150		jsr	FloatSine
.0ec0	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.86720218
>0ec3	25 7b 00 6f				.dword	$6f007b25
>0ec7	e1 80					.byte	$e1,$80
.0ec9	20 88 48	jsr $4888		jsr	FloatSubtract
.0ecc	20 52 48	jsr $4852		jsr	FPAbs
.0ecf	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>0ed2	4c 37 89 41				.dword	$4189374c
>0ed6	d8 00					.byte	$d8,$00
.0ed8	20 4f 49	jsr $494f		jsr	FloatCompare
.0edb	20 2f 49	jsr $492f		jsr	CompareLess
.0ede	20 45 48	jsr $4845		jsr	FPAssertCheck
.0ee1	20 55 48	jsr $4855		jsr	FPPushConstant	; 17.8
>0ee4	33 33 33 47				.dword	$47333333
>0ee8	e6 00					.byte	$e6,$00
.0eea	20 b0 4f	jsr $4fb0		jsr	FloatCosine
.0eed	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.4979562
>0ef0	ba 0e 7a 7f				.dword	$7f7a0eba
>0ef4	e0 00					.byte	$e0,$00
.0ef6	20 88 48	jsr $4888		jsr	FloatSubtract
.0ef9	20 52 48	jsr $4852		jsr	FPAbs
.0efc	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>0eff	4c 37 89 41				.dword	$4189374c
>0f03	d8 00					.byte	$d8,$00
.0f05	20 4f 49	jsr $494f		jsr	FloatCompare
.0f08	20 2f 49	jsr $492f		jsr	CompareLess
.0f0b	20 45 48	jsr $4845		jsr	FPAssertCheck
.0f0e	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.11
>0f11	0a d7 a3 70				.dword	$70a3d70a
>0f15	de 00					.byte	$de,$00
.0f17	20 c1 51	jsr $51c1		jsr	FloatTangent
.0f1a	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.11044582
>0f1d	84 b5 18 71				.dword	$7118b584
>0f21	de 00					.byte	$de,$00
.0f23	20 88 48	jsr $4888		jsr	FloatSubtract
.0f26	20 52 48	jsr $4852		jsr	FPAbs
.0f29	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>0f2c	4c 37 89 41				.dword	$4189374c
>0f30	d8 00					.byte	$d8,$00
.0f32	20 4f 49	jsr $494f		jsr	FloatCompare
.0f35	20 45 48	jsr $4845		jsr	FPAssertCheck
.0f38	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.402
>0f3b	35 5e ba 59				.dword	$59ba5e35
>0f3f	e2 00					.byte	$e2,$00
.0f41	20 95 4e	jsr $4e95		jsr	FloatArcTan
.0f44	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.95122188
>0f47	79 a3 c1 79				.dword	$79c1a379
>0f4b	e1 00					.byte	$e1,$00
.0f4d	20 88 48	jsr $4888		jsr	FloatSubtract
.0f50	20 52 48	jsr $4852		jsr	FPAbs
.0f53	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>0f56	4c 37 89 41				.dword	$4189374c
>0f5a	d8 00					.byte	$d8,$00
.0f5c	20 4f 49	jsr $494f		jsr	FloatCompare
.0f5f	20 45 48	jsr $4845		jsr	FPAssertCheck
.0f62	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.09
>0f65	c3 f5 28 5c				.dword	$5c28f5c3
>0f69	de 00					.byte	$de,$00
.0f6b	20 bc 4f	jsr $4fbc		jsr	FloatExponent
.0f6e	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.09417428
>0f71	8f f3 06 46				.dword	$4606f38f
>0f75	e2 00					.byte	$e2,$00
.0f77	20 88 48	jsr $4888		jsr	FloatSubtract
.0f7a	20 52 48	jsr $4852		jsr	FPAbs
.0f7d	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>0f80	4c 37 89 41				.dword	$4189374c
>0f84	d8 00					.byte	$d8,$00
.0f86	20 4f 49	jsr $494f		jsr	FloatCompare
.0f89	20 45 48	jsr $4845		jsr	FPAssertCheck
.0f8c	20 55 48	jsr $4855		jsr	FPPushConstant	; 37.11
>0f8f	ec 51 38 4a				.dword	$4a3851ec
>0f93	e7 00					.byte	$e7,$00
.0f95	20 bf 50	jsr $50bf		jsr	FloatLogarithm
.0f98	20 55 48	jsr $4855		jsr	FPPushConstant	; 3.61388648
>0f9b	42 f5 a4 73				.dword	$73a4f542
>0f9f	e3 00					.byte	$e3,$00
.0fa1	20 88 48	jsr $4888		jsr	FloatSubtract
.0fa4	20 52 48	jsr $4852		jsr	FPAbs
.0fa7	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>0faa	4c 37 89 41				.dword	$4189374c
>0fae	d8 00					.byte	$d8,$00
.0fb0	20 4f 49	jsr $494f		jsr	FloatCompare
.0fb3	20 45 48	jsr $4845		jsr	FPAssertCheck
.0fb6	20 55 48	jsr $4855		jsr	FPPushConstant	; 55.22
>0fb9	d7 a3 70 6e				.dword	$6e70a3d7
>0fbd	e7 00					.byte	$e7,$00
.0fbf	20 b5 51	jsr $51b5		jsr	FloatSquareRoot
.0fc2	20 55 48	jsr $4855		jsr	FPPushConstant	; 7.43101608
>0fc5	1e 71 e5 76				.dword	$76e5711e
>0fc9	e4 00					.byte	$e4,$00
.0fcb	20 88 48	jsr $4888		jsr	FloatSubtract
.0fce	20 52 48	jsr $4852		jsr	FPAbs
.0fd1	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>0fd4	4c 37 89 41				.dword	$4189374c
>0fd8	d8 00					.byte	$d8,$00
.0fda	20 4f 49	jsr $494f		jsr	FloatCompare
.0fdd	20 45 48	jsr $4845		jsr	FPAssertCheck
.0fe0	20 55 48	jsr $4855		jsr	FPPushConstant	; 2.43666667
>0fe3	61 2c f9 4d				.dword	$4df92c61
>0fe7	e3 00					.byte	$e3,$00
.0fe9	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.0
>0fec	01 00 00 00				.dword	$00000001
>0ff0	00 00					.byte	$00,$00
.0ff2	20 33 51	jsr $5133		jsr	FloatPower
.0ff5	20 55 48	jsr $4855		jsr	FPPushConstant	; 2.43666667
>0ff8	61 2c f9 4d				.dword	$4df92c61
>0ffc	e3 00					.byte	$e3,$00
.0ffe	20 88 48	jsr $4888		jsr	FloatSubtract
.1001	20 52 48	jsr $4852		jsr	FPAbs
.1004	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.01
>1007	1f 85 eb 51				.dword	$51eb851f
>100b	db 00					.byte	$db,$00
.100d	20 4f 49	jsr $494f		jsr	FloatCompare
.1010	20 45 48	jsr $4845		jsr	FPAssertCheck
.1013	20 55 48	jsr $4855		jsr	FPPushConstant	; -35.59504333
>1016	85 a9 30 47				.dword	$4730a985
>101a	e7 80					.byte	$e7,$80
.101c	20 2c 4e	jsr $4e2c		jsr	FloatNegate
.101f	20 55 48	jsr $4855		jsr	FPPushConstant	; 35.59504333
>1022	85 a9 30 47				.dword	$4730a985
>1026	e7 00					.byte	$e7,$00
.1028	20 4f 49	jsr $494f		jsr	FloatCompare
.102b	20 19 49	jsr $4919		jsr	CompareEqual
.102e	20 45 48	jsr $4845		jsr	FPAssertCheck
.1031	20 55 48	jsr $4855		jsr	FPPushConstant	; -35.59504333
>1034	85 a9 30 47				.dword	$4730a985
>1038	e7 80					.byte	$e7,$80
.103a	20 a5 4a	jsr $4aa5		jsr	FloatIntegerPart
.103d	20 55 48	jsr $4855		jsr	FPPushConstant	; -35
>1040	23 00 00 00				.dword	$00000023
>1044	00 80					.byte	$00,$80
.1046	20 4f 49	jsr $494f		jsr	FloatCompare
.1049	20 19 49	jsr $4919		jsr	CompareEqual
.104c	20 45 48	jsr $4845		jsr	FPAssertCheck
.104f	20 55 48	jsr $4855		jsr	FPPushConstant	; -18.49
>1052	8f c2 f5 49				.dword	$49f5c28f
>1056	e6 80					.byte	$e6,$80
.1058	20 50 51	jsr $5150		jsr	FloatSine
.105b	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.35185859
>105e	91 67 13 5a				.dword	$5a136791
>1062	e0 00					.byte	$e0,$00
.1064	20 88 48	jsr $4888		jsr	FloatSubtract
.1067	20 52 48	jsr $4852		jsr	FPAbs
.106a	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>106d	4c 37 89 41				.dword	$4189374c
>1071	d8 00					.byte	$d8,$00
.1073	20 4f 49	jsr $494f		jsr	FloatCompare
.1076	20 2f 49	jsr $492f		jsr	CompareLess
.1079	20 45 48	jsr $4845		jsr	FPAssertCheck
.107c	20 55 48	jsr $4855		jsr	FPPushConstant	; -18.49
>107f	8f c2 f5 49				.dword	$49f5c28f
>1083	e6 80					.byte	$e6,$80
.1085	20 b0 4f	jsr $4fb0		jsr	FloatCosine
.1088	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.93605317
>108b	1c 97 d0 77				.dword	$77d0971c
>108f	e1 00					.byte	$e1,$00
.1091	20 88 48	jsr $4888		jsr	FloatSubtract
.1094	20 52 48	jsr $4852		jsr	FPAbs
.1097	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>109a	4c 37 89 41				.dword	$4189374c
>109e	d8 00					.byte	$d8,$00
.10a0	20 4f 49	jsr $494f		jsr	FloatCompare
.10a3	20 2f 49	jsr $492f		jsr	CompareLess
.10a6	20 45 48	jsr $4845		jsr	FPAssertCheck
.10a9	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.23
>10ac	5c 8f c2 75				.dword	$75c28f5c
>10b0	df 00					.byte	$df,$00
.10b2	20 c1 51	jsr $51c1		jsr	FloatTangent
.10b5	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.23414336
>10b8	74 a3 e1 77				.dword	$77e1a374
>10bc	df 00					.byte	$df,$00
.10be	20 88 48	jsr $4888		jsr	FloatSubtract
.10c1	20 52 48	jsr $4852		jsr	FPAbs
.10c4	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>10c7	4c 37 89 41				.dword	$4189374c
>10cb	d8 00					.byte	$d8,$00
.10cd	20 4f 49	jsr $494f		jsr	FloatCompare
.10d0	20 45 48	jsr $4845		jsr	FPAssertCheck
.10d3	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.747
>10d6	2d b2 9d 5f				.dword	$5f9db22d
>10da	e1 00					.byte	$e1,$00
.10dc	20 95 4e	jsr $4e95		jsr	FloatArcTan
.10df	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.64157834
>10e2	32 3d 1f 52				.dword	$521f3d32
>10e6	e1 00					.byte	$e1,$00
.10e8	20 88 48	jsr $4888		jsr	FloatSubtract
.10eb	20 52 48	jsr $4852		jsr	FPAbs
.10ee	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>10f1	4c 37 89 41				.dword	$4189374c
>10f5	d8 00					.byte	$d8,$00
.10f7	20 4f 49	jsr $494f		jsr	FloatCompare
.10fa	20 45 48	jsr $4845		jsr	FPAssertCheck
.10fd	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.82
>1100	8f c2 f5 68				.dword	$68f5c28f
>1104	e1 80					.byte	$e1,$80
.1106	20 bc 4f	jsr $4fbc		jsr	FloatExponent
.1109	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.44043165
>110c	ed 20 c0 70				.dword	$70c020ed
>1110	e0 00					.byte	$e0,$00
.1112	20 88 48	jsr $4888		jsr	FloatSubtract
.1115	20 52 48	jsr $4852		jsr	FPAbs
.1118	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>111b	4c 37 89 41				.dword	$4189374c
>111f	d8 00					.byte	$d8,$00
.1121	20 4f 49	jsr $494f		jsr	FloatCompare
.1124	20 45 48	jsr $4845		jsr	FPAssertCheck
.1127	20 55 48	jsr $4855		jsr	FPPushConstant	; 17.17
>112a	7b 14 ae 44				.dword	$44ae147b
>112e	e6 00					.byte	$e6,$00
.1130	20 bf 50	jsr $50bf		jsr	FloatLogarithm
.1133	20 55 48	jsr $4855		jsr	FPPushConstant	; 2.84316367
>1136	60 32 fb 5a				.dword	$5afb3260
>113a	e3 00					.byte	$e3,$00
.113c	20 88 48	jsr $4888		jsr	FloatSubtract
.113f	20 52 48	jsr $4852		jsr	FPAbs
.1142	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>1145	4c 37 89 41				.dword	$4189374c
>1149	d8 00					.byte	$d8,$00
.114b	20 4f 49	jsr $494f		jsr	FloatCompare
.114e	20 45 48	jsr $4845		jsr	FPAssertCheck
.1151	20 55 48	jsr $4855		jsr	FPPushConstant	; 7.13
>1154	e1 7a 14 72				.dword	$72147ae1
>1158	e4 00					.byte	$e4,$00
.115a	20 b5 51	jsr $51b5		jsr	FloatSquareRoot
.115d	20 55 48	jsr $4855		jsr	FPPushConstant	; 2.67020598
>1160	d0 53 72 55				.dword	$557253d0
>1164	e3 00					.byte	$e3,$00
.1166	20 88 48	jsr $4888		jsr	FloatSubtract
.1169	20 52 48	jsr $4852		jsr	FPAbs
.116c	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>116f	4c 37 89 41				.dword	$4189374c
>1173	d8 00					.byte	$d8,$00
.1175	20 4f 49	jsr $494f		jsr	FloatCompare
.1178	20 45 48	jsr $4845		jsr	FPAssertCheck
.117b	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.09666667
>117e	67 c9 2f 46				.dword	$462fc967
>1182	e2 00					.byte	$e2,$00
.1184	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.7
>1187	9a 99 99 59				.dword	$5999999a
>118b	e1 00					.byte	$e1,$00
.118d	20 33 51	jsr $5133		jsr	FloatPower
.1190	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.06672445
>1193	a1 36 45 44				.dword	$444536a1
>1197	e2 00					.byte	$e2,$00
.1199	20 88 48	jsr $4888		jsr	FloatSubtract
.119c	20 52 48	jsr $4852		jsr	FPAbs
.119f	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.01
>11a2	1f 85 eb 51				.dword	$51eb851f
>11a6	db 00					.byte	$db,$00
.11a8	20 4f 49	jsr $494f		jsr	FloatCompare
.11ab	20 45 48	jsr $4845		jsr	FPAssertCheck
.11ae	20 55 48	jsr $4855		jsr	FPPushConstant	; 21.36008747
>11b1	c5 ba 70 55				.dword	$5570bac5
>11b5	e6 00					.byte	$e6,$00
.11b7	20 2c 4e	jsr $4e2c		jsr	FloatNegate
.11ba	20 55 48	jsr $4855		jsr	FPPushConstant	; -21.36008747
>11bd	c5 ba 70 55				.dword	$5570bac5
>11c1	e6 80					.byte	$e6,$80
.11c3	20 4f 49	jsr $494f		jsr	FloatCompare
.11c6	20 19 49	jsr $4919		jsr	CompareEqual
.11c9	20 45 48	jsr $4845		jsr	FPAssertCheck
.11cc	20 55 48	jsr $4855		jsr	FPPushConstant	; 21.36008747
>11cf	c5 ba 70 55				.dword	$5570bac5
>11d3	e6 00					.byte	$e6,$00
.11d5	20 a5 4a	jsr $4aa5		jsr	FloatIntegerPart
.11d8	20 55 48	jsr $4855		jsr	FPPushConstant	; 21
>11db	15 00 00 00				.dword	$00000015
>11df	00 00					.byte	$00,$00
.11e1	20 4f 49	jsr $494f		jsr	FloatCompare
.11e4	20 19 49	jsr $4919		jsr	CompareEqual
.11e7	20 45 48	jsr $4845		jsr	FPAssertCheck
.11ea	20 55 48	jsr $4855		jsr	FPPushConstant	; 9.39
>11ed	52 b8 1e 4b				.dword	$4b1eb852
>11f1	e5 00					.byte	$e5,$00
.11f3	20 50 51	jsr $5150		jsr	FloatSine
.11f6	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.03477095
>11f9	e9 fd 35 47				.dword	$4735fde9
>11fd	dd 00					.byte	$dd,$00
.11ff	20 88 48	jsr $4888		jsr	FloatSubtract
.1202	20 52 48	jsr $4852		jsr	FPAbs
.1205	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>1208	4c 37 89 41				.dword	$4189374c
>120c	d8 00					.byte	$d8,$00
.120e	20 4f 49	jsr $494f		jsr	FloatCompare
.1211	20 2f 49	jsr $492f		jsr	CompareLess
.1214	20 45 48	jsr $4845		jsr	FPAssertCheck
.1217	20 55 48	jsr $4855		jsr	FPPushConstant	; 9.39
>121a	52 b8 1e 4b				.dword	$4b1eb852
>121e	e5 00					.byte	$e5,$00
.1220	20 b0 4f	jsr $4fb0		jsr	FloatCosine
.1223	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.99939531
>1226	7e 2f ec 7f				.dword	$7fec2f7e
>122a	e1 80					.byte	$e1,$80
.122c	20 88 48	jsr $4888		jsr	FloatSubtract
.122f	20 52 48	jsr $4852		jsr	FPAbs
.1232	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>1235	4c 37 89 41				.dword	$4189374c
>1239	d8 00					.byte	$d8,$00
.123b	20 4f 49	jsr $494f		jsr	FloatCompare
.123e	20 2f 49	jsr $492f		jsr	CompareLess
.1241	20 45 48	jsr $4845		jsr	FPAssertCheck
.1244	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.25
>1247	00 00 00 40				.dword	$40000000
>124b	e0 00					.byte	$e0,$00
.124d	20 c1 51	jsr $51c1		jsr	FloatTangent
.1250	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.25534192
>1253	8c 16 5e 41				.dword	$415e168c
>1257	e0 00					.byte	$e0,$00
.1259	20 88 48	jsr $4888		jsr	FloatSubtract
.125c	20 52 48	jsr $4852		jsr	FPAbs
.125f	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>1262	4c 37 89 41				.dword	$4189374c
>1266	d8 00					.byte	$d8,$00
.1268	20 4f 49	jsr $494f		jsr	FloatCompare
.126b	20 45 48	jsr $4845		jsr	FPAssertCheck
.126e	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.408
>1271	21 b0 72 68				.dword	$6872b021
>1275	e0 00					.byte	$e0,$00
.1277	20 95 4e	jsr $4e95		jsr	FloatArcTan
.127a	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.38738385
>127d	87 96 2b 63				.dword	$632b9687
>1281	e0 00					.byte	$e0,$00
.1283	20 88 48	jsr $4888		jsr	FloatSubtract
.1286	20 52 48	jsr $4852		jsr	FPAbs
.1289	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>128c	4c 37 89 41				.dword	$4189374c
>1290	d8 00					.byte	$d8,$00
.1292	20 4f 49	jsr $494f		jsr	FloatCompare
.1295	20 45 48	jsr $4845		jsr	FPAssertCheck
.1298	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.77
>129b	29 5c 8f 62				.dword	$628f5c29
>129f	e1 00					.byte	$e1,$00
.12a1	20 bc 4f	jsr $4fbc		jsr	FloatExponent
.12a4	20 55 48	jsr $4855		jsr	FPPushConstant	; 2.15976625
>12a7	1c ce 1c 45				.dword	$451cce1c
>12ab	e3 00					.byte	$e3,$00
.12ad	20 88 48	jsr $4888		jsr	FloatSubtract
.12b0	20 52 48	jsr $4852		jsr	FPAbs
.12b3	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>12b6	4c 37 89 41				.dword	$4189374c
>12ba	d8 00					.byte	$d8,$00
.12bc	20 4f 49	jsr $494f		jsr	FloatCompare
.12bf	20 45 48	jsr $4845		jsr	FPAssertCheck
.12c2	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.13
>12c5	85 eb 51 48				.dword	$4851eb85
>12c9	e2 00					.byte	$e2,$00
.12cb	20 bf 50	jsr $50bf		jsr	FloatLogarithm
.12ce	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.12221763
>12d1	4f 9e 26 7d				.dword	$7d269e4f
>12d5	de 00					.byte	$de,$00
.12d7	20 88 48	jsr $4888		jsr	FloatSubtract
.12da	20 52 48	jsr $4852		jsr	FPAbs
.12dd	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>12e0	4c 37 89 41				.dword	$4189374c
>12e4	d8 00					.byte	$d8,$00
.12e6	20 4f 49	jsr $494f		jsr	FloatCompare
.12e9	20 45 48	jsr $4845		jsr	FPAssertCheck
.12ec	20 55 48	jsr $4855		jsr	FPPushConstant	; 60.76
>12ef	b8 1e 85 79				.dword	$79851eb8
>12f3	e7 00					.byte	$e7,$00
.12f5	20 b5 51	jsr $51b5		jsr	FloatSquareRoot
.12f8	20 55 48	jsr $4855		jsr	FPPushConstant	; 7.79487011
>12fb	b8 c9 b7 7c				.dword	$7cb7c9b8
>12ff	e4 00					.byte	$e4,$00
.1301	20 88 48	jsr $4888		jsr	FloatSubtract
.1304	20 52 48	jsr $4852		jsr	FPAbs
.1307	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>130a	4c 37 89 41				.dword	$4189374c
>130e	d8 00					.byte	$d8,$00
.1310	20 4f 49	jsr $494f		jsr	FloatCompare
.1313	20 45 48	jsr $4845		jsr	FPAssertCheck
.1316	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.87
>1319	7b 14 ae 77				.dword	$77ae147b
>131d	e2 00					.byte	$e2,$00
.131f	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.1
>1322	66 66 66 46				.dword	$46666666
>1326	e2 00					.byte	$e2,$00
.1328	20 33 51	jsr $5133		jsr	FloatPower
.132b	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.99079145
>132e	8b 20 69 7f				.dword	$7f69208b
>1332	e2 00					.byte	$e2,$00
.1334	20 88 48	jsr $4888		jsr	FloatSubtract
.1337	20 52 48	jsr $4852		jsr	FPAbs
.133a	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.01
>133d	1f 85 eb 51				.dword	$51eb851f
>1341	db 00					.byte	$db,$00
.1343	20 4f 49	jsr $494f		jsr	FloatCompare
.1346	20 45 48	jsr $4845		jsr	FPAssertCheck
.1349	20 55 48	jsr $4855		jsr	FPPushConstant	; 73.32550417
>134c	3e 54 53 49				.dword	$4953543e
>1350	e8 00					.byte	$e8,$00
.1352	20 2c 4e	jsr $4e2c		jsr	FloatNegate
.1355	20 55 48	jsr $4855		jsr	FPPushConstant	; -73.32550417
>1358	3e 54 53 49				.dword	$4953543e
>135c	e8 80					.byte	$e8,$80
.135e	20 4f 49	jsr $494f		jsr	FloatCompare
.1361	20 19 49	jsr $4919		jsr	CompareEqual
.1364	20 45 48	jsr $4845		jsr	FPAssertCheck
.1367	20 55 48	jsr $4855		jsr	FPPushConstant	; 73.32550417
>136a	3e 54 53 49				.dword	$4953543e
>136e	e8 00					.byte	$e8,$00
.1370	20 a5 4a	jsr $4aa5		jsr	FloatIntegerPart
.1373	20 55 48	jsr $4855		jsr	FPPushConstant	; 73
>1376	49 00 00 00				.dword	$00000049
>137a	00 00					.byte	$00,$00
.137c	20 4f 49	jsr $494f		jsr	FloatCompare
.137f	20 19 49	jsr $4919		jsr	CompareEqual
.1382	20 45 48	jsr $4845		jsr	FPAssertCheck
.1385	20 55 48	jsr $4855		jsr	FPPushConstant	; -7.76
>1388	c3 f5 28 7c				.dword	$7c28f5c3
>138c	e4 80					.byte	$e4,$80
.138e	20 50 51	jsr $5150		jsr	FloatSine
.1391	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.99558698
>1394	e8 64 6f 7f				.dword	$7f6f64e8
>1398	e1 80					.byte	$e1,$80
.139a	20 88 48	jsr $4888		jsr	FloatSubtract
.139d	20 52 48	jsr $4852		jsr	FPAbs
.13a0	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>13a3	4c 37 89 41				.dword	$4189374c
>13a7	d8 00					.byte	$d8,$00
.13a9	20 4f 49	jsr $494f		jsr	FloatCompare
.13ac	20 2f 49	jsr $492f		jsr	CompareLess
.13af	20 45 48	jsr $4845		jsr	FPAssertCheck
.13b2	20 55 48	jsr $4855		jsr	FPPushConstant	; -7.76
>13b5	c3 f5 28 7c				.dword	$7c28f5c3
>13b9	e4 80					.byte	$e4,$80
.13bb	20 b0 4f	jsr $4fb0		jsr	FloatCosine
.13be	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.09384335
>13c1	9d 78 18 60				.dword	$6018789d
>13c5	de 00					.byte	$de,$00
.13c7	20 88 48	jsr $4888		jsr	FloatSubtract
.13ca	20 52 48	jsr $4852		jsr	FPAbs
.13cd	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>13d0	4c 37 89 41				.dword	$4189374c
>13d4	d8 00					.byte	$d8,$00
.13d6	20 4f 49	jsr $494f		jsr	FloatCompare
.13d9	20 2f 49	jsr $492f		jsr	CompareLess
.13dc	20 45 48	jsr $4845		jsr	FPAssertCheck
.13df	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.21
>13e2	b8 1e 85 6b				.dword	$6b851eb8
>13e6	df 00					.byte	$df,$00
.13e8	20 c1 51	jsr $51c1		jsr	FloatTangent
.13eb	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.21314244
>13ee	82 01 21 6d				.dword	$6d210182
>13f2	df 00					.byte	$df,$00
.13f4	20 88 48	jsr $4888		jsr	FloatSubtract
.13f7	20 52 48	jsr $4852		jsr	FPAbs
.13fa	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>13fd	4c 37 89 41				.dword	$4189374c
>1401	d8 00					.byte	$d8,$00
.1403	20 4f 49	jsr $494f		jsr	FloatCompare
.1406	20 45 48	jsr $4845		jsr	FPAssertCheck
.1409	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.852
>140c	04 56 0e 6d				.dword	$6d0e5604
>1410	e1 00					.byte	$e1,$00
.1412	20 95 4e	jsr $4e95		jsr	FloatArcTan
.1415	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.70565402
>1418	f5 de 52 5a				.dword	$5a52def5
>141c	e1 00					.byte	$e1,$00
.141e	20 88 48	jsr $4888		jsr	FloatSubtract
.1421	20 52 48	jsr $4852		jsr	FPAbs
.1424	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>1427	4c 37 89 41				.dword	$4189374c
>142b	d8 00					.byte	$d8,$00
.142d	20 4f 49	jsr $494f		jsr	FloatCompare
.1430	20 45 48	jsr $4845		jsr	FPAssertCheck
.1433	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.36
>1436	71 3d 0a 57				.dword	$570a3d71
>143a	e2 00					.byte	$e2,$00
.143c	20 bc 4f	jsr $4fbc		jsr	FloatExponent
.143f	20 55 48	jsr $4855		jsr	FPPushConstant	; 3.8961933
>1442	92 9d ad 7c				.dword	$7cad9d92
>1446	e3 00					.byte	$e3,$00
.1448	20 88 48	jsr $4888		jsr	FloatSubtract
.144b	20 52 48	jsr $4852		jsr	FPAbs
.144e	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>1451	4c 37 89 41				.dword	$4189374c
>1455	d8 00					.byte	$d8,$00
.1457	20 4f 49	jsr $494f		jsr	FloatCompare
.145a	20 45 48	jsr $4845		jsr	FPAssertCheck
.145d	20 55 48	jsr $4855		jsr	FPPushConstant	; 47.29
>1460	e1 7a 94 5e				.dword	$5e947ae1
>1464	e7 00					.byte	$e7,$00
.1466	20 bf 50	jsr $50bf		jsr	FloatLogarithm
.1469	20 55 48	jsr $4855		jsr	FPPushConstant	; 3.85629886
>146c	de cc 66 7b				.dword	$7b66ccde
>1470	e3 00					.byte	$e3,$00
.1472	20 88 48	jsr $4888		jsr	FloatSubtract
.1475	20 52 48	jsr $4852		jsr	FPAbs
.1478	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>147b	4c 37 89 41				.dword	$4189374c
>147f	d8 00					.byte	$d8,$00
.1481	20 4f 49	jsr $494f		jsr	FloatCompare
.1484	20 45 48	jsr $4845		jsr	FPAssertCheck
.1487	20 55 48	jsr $4855		jsr	FPPushConstant	; 30.52
>148a	e1 7a 14 7a				.dword	$7a147ae1
>148e	e6 00					.byte	$e6,$00
.1490	20 b5 51	jsr $51b5		jsr	FloatSquareRoot
.1493	20 55 48	jsr $4855		jsr	FPPushConstant	; 5.52449093
>1496	9a 50 64 58				.dword	$5864509a
>149a	e4 00					.byte	$e4,$00
.149c	20 88 48	jsr $4888		jsr	FloatSubtract
.149f	20 52 48	jsr $4852		jsr	FPAbs
.14a2	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>14a5	4c 37 89 41				.dword	$4189374c
>14a9	d8 00					.byte	$d8,$00
.14ab	20 4f 49	jsr $494f		jsr	FloatCompare
.14ae	20 45 48	jsr $4845		jsr	FPAssertCheck
.14b1	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.76333333
>14b4	0a 74 da 70				.dword	$70da740a
>14b8	e2 00					.byte	$e2,$00
.14ba	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.9
>14bd	9a 99 99 79				.dword	$7999999a
>14c1	e2 00					.byte	$e2,$00
.14c3	20 33 51	jsr $5133		jsr	FloatPower
.14c6	20 55 48	jsr $4855		jsr	FPPushConstant	; 2.93788907
>14c9	f0 2f 03 5e				.dword	$5e032ff0
>14cd	e3 00					.byte	$e3,$00
.14cf	20 88 48	jsr $4888		jsr	FloatSubtract
.14d2	20 52 48	jsr $4852		jsr	FPAbs
.14d5	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.01
>14d8	1f 85 eb 51				.dword	$51eb851f
>14dc	db 00					.byte	$db,$00
.14de	20 4f 49	jsr $494f		jsr	FloatCompare
.14e1	20 45 48	jsr $4845		jsr	FPAssertCheck
.14e4	20 55 48	jsr $4855		jsr	FPPushConstant	; 12.0523204
>14e7	f5 26 6b 60				.dword	$606b26f5
>14eb	e5 00					.byte	$e5,$00
.14ed	20 2c 4e	jsr $4e2c		jsr	FloatNegate
.14f0	20 55 48	jsr $4855		jsr	FPPushConstant	; -12.0523204
>14f3	f5 26 6b 60				.dword	$606b26f5
>14f7	e5 80					.byte	$e5,$80
.14f9	20 4f 49	jsr $494f		jsr	FloatCompare
.14fc	20 19 49	jsr $4919		jsr	CompareEqual
.14ff	20 45 48	jsr $4845		jsr	FPAssertCheck
.1502	20 55 48	jsr $4855		jsr	FPPushConstant	; 12.0523204
>1505	f5 26 6b 60				.dword	$606b26f5
>1509	e5 00					.byte	$e5,$00
.150b	20 a5 4a	jsr $4aa5		jsr	FloatIntegerPart
.150e	20 55 48	jsr $4855		jsr	FPPushConstant	; 12
>1511	0c 00 00 00				.dword	$0000000c
>1515	00 00					.byte	$00,$00
.1517	20 4f 49	jsr $494f		jsr	FloatCompare
.151a	20 19 49	jsr $4919		jsr	CompareEqual
.151d	20 45 48	jsr $4845		jsr	FPAssertCheck
.1520	20 55 48	jsr $4855		jsr	FPPushConstant	; 2.39
>1523	48 e1 7a 4c				.dword	$4c7ae148
>1527	e3 00					.byte	$e3,$00
.1529	20 50 51	jsr $5150		jsr	FloatSine
.152c	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.68280322
>152f	8e 18 66 57				.dword	$5766188e
>1533	e1 00					.byte	$e1,$00
.1535	20 88 48	jsr $4888		jsr	FloatSubtract
.1538	20 52 48	jsr $4852		jsr	FPAbs
.153b	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>153e	4c 37 89 41				.dword	$4189374c
>1542	d8 00					.byte	$d8,$00
.1544	20 4f 49	jsr $494f		jsr	FloatCompare
.1547	20 2f 49	jsr $492f		jsr	CompareLess
.154a	20 45 48	jsr $4845		jsr	FPAssertCheck
.154d	20 55 48	jsr $4855		jsr	FPPushConstant	; 2.39
>1550	48 e1 7a 4c				.dword	$4c7ae148
>1554	e3 00					.byte	$e3,$00
.1556	20 b0 4f	jsr $4fb0		jsr	FloatCosine
.1559	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.73060233
>155c	8d 60 84 5d				.dword	$5d84608d
>1560	e1 80					.byte	$e1,$80
.1562	20 88 48	jsr $4888		jsr	FloatSubtract
.1565	20 52 48	jsr $4852		jsr	FPAbs
.1568	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>156b	4c 37 89 41				.dword	$4189374c
>156f	d8 00					.byte	$d8,$00
.1571	20 4f 49	jsr $494f		jsr	FloatCompare
.1574	20 2f 49	jsr $492f		jsr	CompareLess
.1577	20 45 48	jsr $4845		jsr	FPAssertCheck
.157a	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.14
>157d	7b 14 ae 47				.dword	$47ae147b
>1581	df 00					.byte	$df,$00
.1583	20 c1 51	jsr $51c1		jsr	FloatTangent
.1586	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.14092189
>1589	fa e9 26 48				.dword	$4826e9fa
>158d	df 00					.byte	$df,$00
.158f	20 88 48	jsr $4888		jsr	FloatSubtract
.1592	20 52 48	jsr $4852		jsr	FPAbs
.1595	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>1598	4c 37 89 41				.dword	$4189374c
>159c	d8 00					.byte	$d8,$00
.159e	20 4f 49	jsr $494f		jsr	FloatCompare
.15a1	20 45 48	jsr $4845		jsr	FPAssertCheck
.15a4	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.258
>15a7	6f 12 83 50				.dword	$5083126f
>15ab	e2 00					.byte	$e2,$00
.15ad	20 95 4e	jsr $4e95		jsr	FloatArcTan
.15b0	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.89916519
>15b3	4e d8 17 73				.dword	$7317d84e
>15b7	e1 00					.byte	$e1,$00
.15b9	20 88 48	jsr $4888		jsr	FloatSubtract
.15bc	20 52 48	jsr $4852		jsr	FPAbs
.15bf	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>15c2	4c 37 89 41				.dword	$4189374c
>15c6	d8 00					.byte	$d8,$00
.15c8	20 4f 49	jsr $494f		jsr	FloatCompare
.15cb	20 45 48	jsr $4845		jsr	FPAssertCheck
.15ce	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.45
>15d1	cd cc cc 5c				.dword	$5ccccccd
>15d5	e2 00					.byte	$e2,$00
.15d7	20 bc 4f	jsr $4fbc		jsr	FloatExponent
.15da	20 55 48	jsr $4855		jsr	FPPushConstant	; 4.26311452
>15dd	92 b7 35 44				.dword	$4435b792
>15e1	e4 00					.byte	$e4,$00
.15e3	20 88 48	jsr $4888		jsr	FloatSubtract
.15e6	20 52 48	jsr $4852		jsr	FPAbs
.15e9	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>15ec	4c 37 89 41				.dword	$4189374c
>15f0	d8 00					.byte	$d8,$00
.15f2	20 4f 49	jsr $494f		jsr	FloatCompare
.15f5	20 45 48	jsr $4845		jsr	FPAssertCheck
.15f8	20 55 48	jsr $4855		jsr	FPPushConstant	; 59.73
>15fb	8f c2 75 77				.dword	$7775c28f
>15ff	e7 00					.byte	$e7,$00
.1601	20 bf 50	jsr $50bf		jsr	FloatLogarithm
.1604	20 55 48	jsr $4855		jsr	FPPushConstant	; 4.08983441
>1607	35 f6 6f 41				.dword	$416ff635
>160b	e4 00					.byte	$e4,$00
.160d	20 88 48	jsr $4888		jsr	FloatSubtract
.1610	20 52 48	jsr $4852		jsr	FPAbs
.1613	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>1616	4c 37 89 41				.dword	$4189374c
>161a	d8 00					.byte	$d8,$00
.161c	20 4f 49	jsr $494f		jsr	FloatCompare
.161f	20 45 48	jsr $4845		jsr	FPAssertCheck
.1622	20 55 48	jsr $4855		jsr	FPPushConstant	; 65.05
>1625	cd cc 0c 41				.dword	$410ccccd
>1629	e8 00					.byte	$e8,$00
.162b	20 b5 51	jsr $51b5		jsr	FloatSquareRoot
.162e	20 55 48	jsr $4855		jsr	FPPushConstant	; 8.06535802
>1631	6d da 85 40				.dword	$4085da6d
>1635	e5 00					.byte	$e5,$00
.1637	20 88 48	jsr $4888		jsr	FloatSubtract
.163a	20 52 48	jsr $4852		jsr	FPAbs
.163d	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>1640	4c 37 89 41				.dword	$4189374c
>1644	d8 00					.byte	$d8,$00
.1646	20 4f 49	jsr $494f		jsr	FloatCompare
.1649	20 45 48	jsr $4845		jsr	FPAssertCheck
.164c	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.84333333
>164f	5c 2c f9 75				.dword	$75f92c5c
>1653	e2 00					.byte	$e2,$00
.1655	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.3
>1658	33 33 33 53				.dword	$53333333
>165c	e2 00					.byte	$e2,$00
.165e	20 33 51	jsr $5133		jsr	FloatPower
.1661	20 55 48	jsr $4855		jsr	FPPushConstant	; 2.2145477
>1664	23 93 dd 46				.dword	$46dd9323
>1668	e3 00					.byte	$e3,$00
.166a	20 88 48	jsr $4888		jsr	FloatSubtract
.166d	20 52 48	jsr $4852		jsr	FPAbs
.1670	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.01
>1673	1f 85 eb 51				.dword	$51eb851f
>1677	db 00					.byte	$db,$00
.1679	20 4f 49	jsr $494f		jsr	FloatCompare
.167c	20 45 48	jsr $4845		jsr	FPAssertCheck
.167f	20 55 48	jsr $4855		jsr	FPPushConstant	; -68.53381388
>1682	07 a8 88 44				.dword	$4488a807
>1686	e8 80					.byte	$e8,$80
.1688	20 2c 4e	jsr $4e2c		jsr	FloatNegate
.168b	20 55 48	jsr $4855		jsr	FPPushConstant	; 68.53381388
>168e	07 a8 88 44				.dword	$4488a807
>1692	e8 00					.byte	$e8,$00
.1694	20 4f 49	jsr $494f		jsr	FloatCompare
.1697	20 19 49	jsr $4919		jsr	CompareEqual
.169a	20 45 48	jsr $4845		jsr	FPAssertCheck
.169d	20 55 48	jsr $4855		jsr	FPPushConstant	; -68.53381388
>16a0	07 a8 88 44				.dword	$4488a807
>16a4	e8 80					.byte	$e8,$80
.16a6	20 a5 4a	jsr $4aa5		jsr	FloatIntegerPart
.16a9	20 55 48	jsr $4855		jsr	FPPushConstant	; -68
>16ac	44 00 00 00				.dword	$00000044
>16b0	00 80					.byte	$00,$80
.16b2	20 4f 49	jsr $494f		jsr	FloatCompare
.16b5	20 19 49	jsr $4919		jsr	CompareEqual
.16b8	20 45 48	jsr $4845		jsr	FPAssertCheck
.16bb	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.1
>16be	66 66 66 46				.dword	$46666666
>16c2	e2 00					.byte	$e2,$00
.16c4	20 50 51	jsr $5150		jsr	FloatSine
.16c7	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.89120736
>16ca	31 15 13 72				.dword	$72131531
>16ce	e1 00					.byte	$e1,$00
.16d0	20 88 48	jsr $4888		jsr	FloatSubtract
.16d3	20 52 48	jsr $4852		jsr	FPAbs
.16d6	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>16d9	4c 37 89 41				.dword	$4189374c
>16dd	d8 00					.byte	$d8,$00
.16df	20 4f 49	jsr $494f		jsr	FloatCompare
.16e2	20 2f 49	jsr $492f		jsr	CompareLess
.16e5	20 45 48	jsr $4845		jsr	FPAssertCheck
.16e8	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.1
>16eb	66 66 66 46				.dword	$46666666
>16ef	e2 00					.byte	$e2,$00
.16f1	20 b0 4f	jsr $4fb0		jsr	FloatCosine
.16f4	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.45359612
>16f7	15 e0 1e 74				.dword	$741ee015
>16fb	e0 00					.byte	$e0,$00
.16fd	20 88 48	jsr $4888		jsr	FloatSubtract
.1700	20 52 48	jsr $4852		jsr	FPAbs
.1703	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>1706	4c 37 89 41				.dword	$4189374c
>170a	d8 00					.byte	$d8,$00
.170c	20 4f 49	jsr $494f		jsr	FloatCompare
.170f	20 2f 49	jsr $492f		jsr	CompareLess
.1712	20 45 48	jsr $4845		jsr	FPAssertCheck
.1715	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.21
>1718	b8 1e 85 6b				.dword	$6b851eb8
>171c	df 00					.byte	$df,$00
.171e	20 c1 51	jsr $51c1		jsr	FloatTangent
.1721	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.21314244
>1724	82 01 21 6d				.dword	$6d210182
>1728	df 00					.byte	$df,$00
.172a	20 88 48	jsr $4888		jsr	FloatSubtract
.172d	20 52 48	jsr $4852		jsr	FPAbs
.1730	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>1733	4c 37 89 41				.dword	$4189374c
>1737	d8 00					.byte	$d8,$00
.1739	20 4f 49	jsr $494f		jsr	FloatCompare
.173c	20 45 48	jsr $4845		jsr	FPAssertCheck
.173f	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.712
>1742	73 68 91 6d				.dword	$6d916873
>1746	e2 00					.byte	$e2,$00
.1748	20 95 4e	jsr $4e95		jsr	FloatArcTan
.174b	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.04214099
>174e	1f 70 b2 42				.dword	$42b2701f
>1752	e2 00					.byte	$e2,$00
.1754	20 88 48	jsr $4888		jsr	FloatSubtract
.1757	20 52 48	jsr $4852		jsr	FPAbs
.175a	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>175d	4c 37 89 41				.dword	$4189374c
>1761	d8 00					.byte	$d8,$00
.1763	20 4f 49	jsr $494f		jsr	FloatCompare
.1766	20 45 48	jsr $4845		jsr	FPAssertCheck
.1769	20 55 48	jsr $4855		jsr	FPPushConstant	; -1.33
>176c	52 b8 1e 55				.dword	$551eb852
>1770	e2 80					.byte	$e2,$80
.1772	20 bc 4f	jsr $4fbc		jsr	FloatExponent
.1775	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.26447726
>1778	1e c8 b4 43				.dword	$43b4c81e
>177c	e0 00					.byte	$e0,$00
.177e	20 88 48	jsr $4888		jsr	FloatSubtract
.1781	20 52 48	jsr $4852		jsr	FPAbs
.1784	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>1787	4c 37 89 41				.dword	$4189374c
>178b	d8 00					.byte	$d8,$00
.178d	20 4f 49	jsr $494f		jsr	FloatCompare
.1790	20 45 48	jsr $4845		jsr	FPAssertCheck
.1793	20 55 48	jsr $4855		jsr	FPPushConstant	; 45.37
>1796	a4 70 bd 5a				.dword	$5abd70a4
>179a	e7 00					.byte	$e7,$00
.179c	20 bf 50	jsr $50bf		jsr	FloatLogarithm
.179f	20 55 48	jsr $4855		jsr	FPPushConstant	; 3.81485109
>17a2	98 42 13 7a				.dword	$7a134298
>17a6	e3 00					.byte	$e3,$00
.17a8	20 88 48	jsr $4888		jsr	FloatSubtract
.17ab	20 52 48	jsr $4852		jsr	FPAbs
.17ae	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>17b1	4c 37 89 41				.dword	$4189374c
>17b5	d8 00					.byte	$d8,$00
.17b7	20 4f 49	jsr $494f		jsr	FloatCompare
.17ba	20 45 48	jsr $4845		jsr	FPAssertCheck
.17bd	20 55 48	jsr $4855		jsr	FPPushConstant	; 53.22
>17c0	d7 a3 70 6a				.dword	$6a70a3d7
>17c4	e7 00					.byte	$e7,$00
.17c6	20 b5 51	jsr $51b5		jsr	FloatSquareRoot
.17c9	20 55 48	jsr $4855		jsr	FPPushConstant	; 7.2952039
>17cc	ba 27 b9 74				.dword	$74b927ba
>17d0	e4 00					.byte	$e4,$00
.17d2	20 88 48	jsr $4888		jsr	FloatSubtract
.17d5	20 52 48	jsr $4852		jsr	FPAbs
.17d8	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>17db	4c 37 89 41				.dword	$4189374c
>17df	d8 00					.byte	$d8,$00
.17e1	20 4f 49	jsr $494f		jsr	FloatCompare
.17e4	20 45 48	jsr $4845		jsr	FPAssertCheck
.17e7	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.09
>17ea	5c 8f c2 45				.dword	$45c28f5c
>17ee	e2 00					.byte	$e2,$00
.17f0	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.0
>17f3	01 00 00 00				.dword	$00000001
>17f7	00 00					.byte	$00,$00
.17f9	20 33 51	jsr $5133		jsr	FloatPower
.17fc	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.09
>17ff	5c 8f c2 45				.dword	$45c28f5c
>1803	e2 00					.byte	$e2,$00
.1805	20 88 48	jsr $4888		jsr	FloatSubtract
.1808	20 52 48	jsr $4852		jsr	FPAbs
.180b	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.01
>180e	1f 85 eb 51				.dword	$51eb851f
>1812	db 00					.byte	$db,$00
.1814	20 4f 49	jsr $494f		jsr	FloatCompare
.1817	20 45 48	jsr $4845		jsr	FPAssertCheck
.181a	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.20968656
>181d	2d 81 6b 4d				.dword	$4d6b812d
>1821	e2 00					.byte	$e2,$00
.1823	20 2c 4e	jsr $4e2c		jsr	FloatNegate
.1826	20 55 48	jsr $4855		jsr	FPPushConstant	; -1.20968656
>1829	2d 81 6b 4d				.dword	$4d6b812d
>182d	e2 80					.byte	$e2,$80
.182f	20 4f 49	jsr $494f		jsr	FloatCompare
.1832	20 19 49	jsr $4919		jsr	CompareEqual
.1835	20 45 48	jsr $4845		jsr	FPAssertCheck
.1838	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.20968656
>183b	2d 81 6b 4d				.dword	$4d6b812d
>183f	e2 00					.byte	$e2,$00
.1841	20 a5 4a	jsr $4aa5		jsr	FloatIntegerPart
.1844	20 55 48	jsr $4855		jsr	FPPushConstant	; 1
>1847	01 00 00 00				.dword	$00000001
>184b	00 00					.byte	$00,$00
.184d	20 4f 49	jsr $494f		jsr	FloatCompare
.1850	20 19 49	jsr $4919		jsr	CompareEqual
.1853	20 45 48	jsr $4845		jsr	FPAssertCheck
.1856	20 55 48	jsr $4855		jsr	FPPushConstant	; 7.83
>1859	14 ae 47 7d				.dword	$7d47ae14
>185d	e4 00					.byte	$e4,$00
.185f	20 50 51	jsr $5150		jsr	FloatSine
.1862	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.99971245
>1865	db 93 f6 7f				.dword	$7ff693db
>1869	e1 00					.byte	$e1,$00
.186b	20 88 48	jsr $4888		jsr	FloatSubtract
.186e	20 52 48	jsr $4852		jsr	FPAbs
.1871	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>1874	4c 37 89 41				.dword	$4189374c
>1878	d8 00					.byte	$d8,$00
.187a	20 4f 49	jsr $494f		jsr	FloatCompare
.187d	20 2f 49	jsr $492f		jsr	CompareLess
.1880	20 45 48	jsr $4845		jsr	FPAssertCheck
.1883	20 55 48	jsr $4855		jsr	FPPushConstant	; 7.83
>1886	14 ae 47 7d				.dword	$7d47ae14
>188a	e4 00					.byte	$e4,$00
.188c	20 b0 4f	jsr $4fb0		jsr	FloatCosine
.188f	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.02397934
>1892	11 29 38 62				.dword	$62382911
>1896	dc 00					.byte	$dc,$00
.1898	20 88 48	jsr $4888		jsr	FloatSubtract
.189b	20 52 48	jsr $4852		jsr	FPAbs
.189e	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>18a1	4c 37 89 41				.dword	$4189374c
>18a5	d8 00					.byte	$d8,$00
.18a7	20 4f 49	jsr $494f		jsr	FloatCompare
.18aa	20 2f 49	jsr $492f		jsr	CompareLess
.18ad	20 45 48	jsr $4845		jsr	FPAssertCheck
.18b0	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.16
>18b3	1f 85 eb 51				.dword	$51eb851f
>18b7	df 00					.byte	$df,$00
.18b9	20 c1 51	jsr $51c1		jsr	FloatTangent
.18bc	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.16137946
>18bf	1e 54 a0 52				.dword	$52a0541e
>18c3	df 00					.byte	$df,$00
.18c5	20 88 48	jsr $4888		jsr	FloatSubtract
.18c8	20 52 48	jsr $4852		jsr	FPAbs
.18cb	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>18ce	4c 37 89 41				.dword	$4189374c
>18d2	d8 00					.byte	$d8,$00
.18d4	20 4f 49	jsr $494f		jsr	FloatCompare
.18d7	20 45 48	jsr $4845		jsr	FPAssertCheck
.18da	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.261
>18dd	60 e5 d0 42				.dword	$42d0e560
>18e1	e0 00					.byte	$e0,$00
.18e3	20 95 4e	jsr $4e95		jsr	FloatArcTan
.18e6	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.25530451
>18e9	e9 a2 5b 41				.dword	$415ba2e9
>18ed	e0 00					.byte	$e0,$00
.18ef	20 88 48	jsr $4888		jsr	FloatSubtract
.18f2	20 52 48	jsr $4852		jsr	FPAbs
.18f5	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>18f8	4c 37 89 41				.dword	$4189374c
>18fc	d8 00					.byte	$d8,$00
.18fe	20 4f 49	jsr $494f		jsr	FloatCompare
.1901	20 45 48	jsr $4845		jsr	FPAssertCheck
.1904	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.53
>1907	1f 85 eb 61				.dword	$61eb851f
>190b	e2 00					.byte	$e2,$00
.190d	20 bc 4f	jsr $4fbc		jsr	FloatExponent
.1910	20 55 48	jsr $4855		jsr	FPPushConstant	; 4.61817682
>1913	61 0d e4 49				.dword	$49e40d61
>1917	e4 00					.byte	$e4,$00
.1919	20 88 48	jsr $4888		jsr	FloatSubtract
.191c	20 52 48	jsr $4852		jsr	FPAbs
.191f	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>1922	4c 37 89 41				.dword	$4189374c
>1926	d8 00					.byte	$d8,$00
.1928	20 4f 49	jsr $494f		jsr	FloatCompare
.192b	20 45 48	jsr $4845		jsr	FPAssertCheck
.192e	20 55 48	jsr $4855		jsr	FPPushConstant	; 83.65
>1931	66 66 a6 53				.dword	$53a66666
>1935	e8 00					.byte	$e8,$00
.1937	20 bf 50	jsr $50bf		jsr	FloatLogarithm
.193a	20 55 48	jsr $4855		jsr	FPPushConstant	; 4.42664143
>193d	f7 85 d3 46				.dword	$46d385f7
>1941	e4 00					.byte	$e4,$00
.1943	20 88 48	jsr $4888		jsr	FloatSubtract
.1946	20 52 48	jsr $4852		jsr	FPAbs
.1949	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>194c	4c 37 89 41				.dword	$4189374c
>1950	d8 00					.byte	$d8,$00
.1952	20 4f 49	jsr $494f		jsr	FloatCompare
.1955	20 45 48	jsr $4845		jsr	FPAssertCheck
.1958	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.31
>195b	3d 0a d7 53				.dword	$53d70a3d
>195f	e2 00					.byte	$e2,$00
.1961	20 b5 51	jsr $51b5		jsr	FloatSquareRoot
.1964	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.14455231
>1967	55 58 40 49				.dword	$49405855
>196b	e2 00					.byte	$e2,$00
.196d	20 88 48	jsr $4888		jsr	FloatSubtract
.1970	20 52 48	jsr $4852		jsr	FPAbs
.1973	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>1976	4c 37 89 41				.dword	$4189374c
>197a	d8 00					.byte	$d8,$00
.197c	20 4f 49	jsr $494f		jsr	FloatCompare
.197f	20 45 48	jsr $4845		jsr	FPAssertCheck
.1982	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.36333333
>1985	c2 69 03 5d				.dword	$5d0369c2
>1989	e0 00					.byte	$e0,$00
.198b	20 55 48	jsr $4855		jsr	FPPushConstant	; 2.0
>198e	02 00 00 00				.dword	$00000002
>1992	00 00					.byte	$00,$00
.1994	20 33 51	jsr $5133		jsr	FloatPower
.1997	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.13201111
>199a	d0 f5 96 43				.dword	$4396f5d0
>199e	df 00					.byte	$df,$00
.19a0	20 88 48	jsr $4888		jsr	FloatSubtract
.19a3	20 52 48	jsr $4852		jsr	FPAbs
.19a6	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.01
>19a9	1f 85 eb 51				.dword	$51eb851f
>19ad	db 00					.byte	$db,$00
.19af	20 4f 49	jsr $494f		jsr	FloatCompare
.19b2	20 45 48	jsr $4845		jsr	FPAssertCheck
.19b5	20 55 48	jsr $4855		jsr	FPPushConstant	; 63.99554548
>19b8	23 b8 fd 7f				.dword	$7ffdb823
>19bc	e7 00					.byte	$e7,$00
.19be	20 2c 4e	jsr $4e2c		jsr	FloatNegate
.19c1	20 55 48	jsr $4855		jsr	FPPushConstant	; -63.99554548
>19c4	23 b8 fd 7f				.dword	$7ffdb823
>19c8	e7 80					.byte	$e7,$80
.19ca	20 4f 49	jsr $494f		jsr	FloatCompare
.19cd	20 19 49	jsr $4919		jsr	CompareEqual
.19d0	20 45 48	jsr $4845		jsr	FPAssertCheck
.19d3	20 55 48	jsr $4855		jsr	FPPushConstant	; 63.99554548
>19d6	23 b8 fd 7f				.dword	$7ffdb823
>19da	e7 00					.byte	$e7,$00
.19dc	20 a5 4a	jsr $4aa5		jsr	FloatIntegerPart
.19df	20 55 48	jsr $4855		jsr	FPPushConstant	; 63
>19e2	3f 00 00 00				.dword	$0000003f
>19e6	00 00					.byte	$00,$00
.19e8	20 4f 49	jsr $494f		jsr	FloatCompare
.19eb	20 19 49	jsr $4919		jsr	CompareEqual
.19ee	20 45 48	jsr $4845		jsr	FPAssertCheck
.19f1	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.0
>19f4	00 00 00 00				.dword	$00000000
>19f8	00 00					.byte	$00,$00
.19fa	20 50 51	jsr $5150		jsr	FloatSine
.19fd	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.0
>1a00	00 00 00 00				.dword	$00000000
>1a04	00 00					.byte	$00,$00
.1a06	20 88 48	jsr $4888		jsr	FloatSubtract
.1a09	20 52 48	jsr $4852		jsr	FPAbs
.1a0c	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>1a0f	4c 37 89 41				.dword	$4189374c
>1a13	d8 00					.byte	$d8,$00
.1a15	20 4f 49	jsr $494f		jsr	FloatCompare
.1a18	20 2f 49	jsr $492f		jsr	CompareLess
.1a1b	20 45 48	jsr $4845		jsr	FPAssertCheck
.1a1e	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.0
>1a21	00 00 00 00				.dword	$00000000
>1a25	00 00					.byte	$00,$00
.1a27	20 b0 4f	jsr $4fb0		jsr	FloatCosine
.1a2a	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.0
>1a2d	01 00 00 00				.dword	$00000001
>1a31	00 00					.byte	$00,$00
.1a33	20 88 48	jsr $4888		jsr	FloatSubtract
.1a36	20 52 48	jsr $4852		jsr	FPAbs
.1a39	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>1a3c	4c 37 89 41				.dword	$4189374c
>1a40	d8 00					.byte	$d8,$00
.1a42	20 4f 49	jsr $494f		jsr	FloatCompare
.1a45	20 2f 49	jsr $492f		jsr	CompareLess
.1a48	20 45 48	jsr $4845		jsr	FPAssertCheck
.1a4b	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.1
>1a4e	66 66 66 66				.dword	$66666666
>1a52	de 00					.byte	$de,$00
.1a54	20 c1 51	jsr $51c1		jsr	FloatTangent
.1a57	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.10033467
>1a5a	b9 21 be 66				.dword	$66be21b9
>1a5e	de 00					.byte	$de,$00
.1a60	20 88 48	jsr $4888		jsr	FloatSubtract
.1a63	20 52 48	jsr $4852		jsr	FPAbs
.1a66	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>1a69	4c 37 89 41				.dword	$4189374c
>1a6d	d8 00					.byte	$d8,$00
.1a6f	20 4f 49	jsr $494f		jsr	FloatCompare
.1a72	20 45 48	jsr $4845		jsr	FPAssertCheck
.1a75	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.616
>1a78	87 16 d9 4e				.dword	$4ed91687
>1a7c	e1 00					.byte	$e1,$00
.1a7e	20 95 4e	jsr $4e95		jsr	FloatArcTan
.1a81	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.55210121
>1a84	a1 40 ab 46				.dword	$46ab40a1
>1a88	e1 00					.byte	$e1,$00
.1a8a	20 88 48	jsr $4888		jsr	FloatSubtract
.1a8d	20 52 48	jsr $4852		jsr	FPAbs
.1a90	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>1a93	4c 37 89 41				.dword	$4189374c
>1a97	d8 00					.byte	$d8,$00
.1a99	20 4f 49	jsr $494f		jsr	FloatCompare
.1a9c	20 45 48	jsr $4845		jsr	FPAssertCheck
.1a9f	20 55 48	jsr $4855		jsr	FPPushConstant	; -1.35
>1aa2	66 66 66 56				.dword	$56666666
>1aa6	e2 80					.byte	$e2,$80
.1aa8	20 bc 4f	jsr $4fbc		jsr	FloatExponent
.1aab	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.25924026
>1aae	d7 91 5d 42				.dword	$425d91d7
>1ab2	e0 00					.byte	$e0,$00
.1ab4	20 88 48	jsr $4888		jsr	FloatSubtract
.1ab7	20 52 48	jsr $4852		jsr	FPAbs
.1aba	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>1abd	4c 37 89 41				.dword	$4189374c
>1ac1	d8 00					.byte	$d8,$00
.1ac3	20 4f 49	jsr $494f		jsr	FloatCompare
.1ac6	20 45 48	jsr $4845		jsr	FPAssertCheck
.1ac9	20 55 48	jsr $4855		jsr	FPPushConstant	; 46.03
>1acc	29 5c 0f 5c				.dword	$5c0f5c29
>1ad0	e7 00					.byte	$e7,$00
.1ad2	20 bf 50	jsr $50bf		jsr	FloatLogarithm
.1ad5	20 55 48	jsr $4855		jsr	FPPushConstant	; 3.82929336
>1ad8	3a 92 89 7a				.dword	$7a89923a
>1adc	e3 00					.byte	$e3,$00
.1ade	20 88 48	jsr $4888		jsr	FloatSubtract
.1ae1	20 52 48	jsr $4852		jsr	FPAbs
.1ae4	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>1ae7	4c 37 89 41				.dword	$4189374c
>1aeb	d8 00					.byte	$d8,$00
.1aed	20 4f 49	jsr $494f		jsr	FloatCompare
.1af0	20 45 48	jsr $4845		jsr	FPAssertCheck
.1af3	20 55 48	jsr $4855		jsr	FPPushConstant	; 89.52
>1af6	b8 1e 85 59				.dword	$59851eb8
>1afa	e8 00					.byte	$e8,$00
.1afc	20 b5 51	jsr $51b5		jsr	FloatSquareRoot
.1aff	20 55 48	jsr $4855		jsr	FPPushConstant	; 9.46150094
>1b02	68 27 b1 4b				.dword	$4bb12768
>1b06	e5 00					.byte	$e5,$00
.1b08	20 88 48	jsr $4888		jsr	FloatSubtract
.1b0b	20 52 48	jsr $4852		jsr	FPAbs
.1b0e	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>1b11	4c 37 89 41				.dword	$4189374c
>1b15	d8 00					.byte	$d8,$00
.1b17	20 4f 49	jsr $494f		jsr	FloatCompare
.1b1a	20 45 48	jsr $4845		jsr	FPAssertCheck
.1b1d	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.58666667
>1b20	5c f2 8b 65				.dword	$658bf25c
>1b24	e2 00					.byte	$e2,$00
.1b26	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.5
>1b29	00 00 00 60				.dword	$60000000
>1b2d	e2 00					.byte	$e2,$00
.1b2f	20 33 51	jsr $5133		jsr	FloatPower
.1b32	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.99861226
>1b35	66 43 e9 7f				.dword	$7fe94366
>1b39	e2 00					.byte	$e2,$00
.1b3b	20 88 48	jsr $4888		jsr	FloatSubtract
.1b3e	20 52 48	jsr $4852		jsr	FPAbs
.1b41	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.01
>1b44	1f 85 eb 51				.dword	$51eb851f
>1b48	db 00					.byte	$db,$00
.1b4a	20 4f 49	jsr $494f		jsr	FloatCompare
.1b4d	20 45 48	jsr $4845		jsr	FPAssertCheck
.1b50	20 55 48	jsr $4855		jsr	FPPushConstant	; 4.52449988
>1b53	fc 59 64 48				.dword	$486459fc
>1b57	e4 00					.byte	$e4,$00
.1b59	20 2c 4e	jsr $4e2c		jsr	FloatNegate
.1b5c	20 55 48	jsr $4855		jsr	FPPushConstant	; -4.52449988
>1b5f	fc 59 64 48				.dword	$486459fc
>1b63	e4 80					.byte	$e4,$80
.1b65	20 4f 49	jsr $494f		jsr	FloatCompare
.1b68	20 19 49	jsr $4919		jsr	CompareEqual
.1b6b	20 45 48	jsr $4845		jsr	FPAssertCheck
.1b6e	20 55 48	jsr $4855		jsr	FPPushConstant	; 4.52449988
>1b71	fc 59 64 48				.dword	$486459fc
>1b75	e4 00					.byte	$e4,$00
.1b77	20 a5 4a	jsr $4aa5		jsr	FloatIntegerPart
.1b7a	20 55 48	jsr $4855		jsr	FPPushConstant	; 4
>1b7d	04 00 00 00				.dword	$00000004
>1b81	00 00					.byte	$00,$00
.1b83	20 4f 49	jsr $494f		jsr	FloatCompare
.1b86	20 19 49	jsr $4919		jsr	CompareEqual
.1b89	20 45 48	jsr $4845		jsr	FPAssertCheck
.1b8c	20 55 48	jsr $4855		jsr	FPPushConstant	; 12.63
>1b8f	71 3d 0a 65				.dword	$650a3d71
>1b93	e5 00					.byte	$e5,$00
.1b95	20 50 51	jsr $5150		jsr	FloatSine
.1b98	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.06358646
>1b9b	19 cf 1c 41				.dword	$411ccf19
>1b9f	de 00					.byte	$de,$00
.1ba1	20 88 48	jsr $4888		jsr	FloatSubtract
.1ba4	20 52 48	jsr $4852		jsr	FPAbs
.1ba7	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>1baa	4c 37 89 41				.dword	$4189374c
>1bae	d8 00					.byte	$d8,$00
.1bb0	20 4f 49	jsr $494f		jsr	FloatCompare
.1bb3	20 2f 49	jsr $492f		jsr	CompareLess
.1bb6	20 45 48	jsr $4845		jsr	FPAssertCheck
.1bb9	20 55 48	jsr $4855		jsr	FPPushConstant	; 12.63
>1bbc	71 3d 0a 65				.dword	$650a3d71
>1bc0	e5 00					.byte	$e5,$00
.1bc2	20 b0 4f	jsr $4fb0		jsr	FloatCosine
.1bc5	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.99797633
>1bc8	3a b0 bd 7f				.dword	$7fbdb03a
>1bcc	e1 00					.byte	$e1,$00
.1bce	20 88 48	jsr $4888		jsr	FloatSubtract
.1bd1	20 52 48	jsr $4852		jsr	FPAbs
.1bd4	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>1bd7	4c 37 89 41				.dword	$4189374c
>1bdb	d8 00					.byte	$d8,$00
.1bdd	20 4f 49	jsr $494f		jsr	FloatCompare
.1be0	20 2f 49	jsr $492f		jsr	CompareLess
.1be3	20 45 48	jsr $4845		jsr	FPAssertCheck
.1be6	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.32
>1be9	1f 85 eb 51				.dword	$51eb851f
>1bed	e0 00					.byte	$e0,$00
.1bef	20 c1 51	jsr $51c1		jsr	FloatTangent
.1bf2	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.33138941
>1bf5	b6 ef d5 54				.dword	$54d5efb6
>1bf9	e0 00					.byte	$e0,$00
.1bfb	20 88 48	jsr $4888		jsr	FloatSubtract
.1bfe	20 52 48	jsr $4852		jsr	FPAbs
.1c01	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>1c04	4c 37 89 41				.dword	$4189374c
>1c08	d8 00					.byte	$d8,$00
.1c0a	20 4f 49	jsr $494f		jsr	FloatCompare
.1c0d	20 45 48	jsr $4845		jsr	FPAssertCheck
.1c10	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.17
>1c13	71 3d 0a 57				.dword	$570a3d71
>1c17	df 00					.byte	$df,$00
.1c19	20 95 4e	jsr $4e95		jsr	FloatArcTan
.1c1c	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.16839016
>1c1f	2c 3c 37 56				.dword	$56373c2c
>1c23	df 00					.byte	$df,$00
.1c25	20 88 48	jsr $4888		jsr	FloatSubtract
.1c28	20 52 48	jsr $4852		jsr	FPAbs
.1c2b	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>1c2e	4c 37 89 41				.dword	$4189374c
>1c32	d8 00					.byte	$d8,$00
.1c34	20 4f 49	jsr $494f		jsr	FloatCompare
.1c37	20 45 48	jsr $4845		jsr	FPAssertCheck
.1c3a	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.65
>1c3d	9a 99 99 69				.dword	$6999999a
>1c41	e2 00					.byte	$e2,$00
.1c43	20 bc 4f	jsr $4fbc		jsr	FloatExponent
.1c46	20 55 48	jsr $4855		jsr	FPPushConstant	; 5.20697983
>1c49	15 ca 4f 53				.dword	$534fca15
>1c4d	e4 00					.byte	$e4,$00
.1c4f	20 88 48	jsr $4888		jsr	FloatSubtract
.1c52	20 52 48	jsr $4852		jsr	FPAbs
.1c55	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>1c58	4c 37 89 41				.dword	$4189374c
>1c5c	d8 00					.byte	$d8,$00
.1c5e	20 4f 49	jsr $494f		jsr	FloatCompare
.1c61	20 45 48	jsr $4845		jsr	FPAssertCheck
.1c64	20 55 48	jsr $4855		jsr	FPPushConstant	; 7.99
>1c67	3d 0a d7 7f				.dword	$7fd70a3d
>1c6b	e4 00					.byte	$e4,$00
.1c6d	20 bf 50	jsr $50bf		jsr	FloatLogarithm
.1c70	20 55 48	jsr $4855		jsr	FPPushConstant	; 2.07819076
>1c73	e9 89 80 42				.dword	$428089e9
>1c77	e3 00					.byte	$e3,$00
.1c79	20 88 48	jsr $4888		jsr	FloatSubtract
.1c7c	20 52 48	jsr $4852		jsr	FPAbs
.1c7f	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>1c82	4c 37 89 41				.dword	$4189374c
>1c86	d8 00					.byte	$d8,$00
.1c88	20 4f 49	jsr $494f		jsr	FloatCompare
.1c8b	20 45 48	jsr $4845		jsr	FPAssertCheck
.1c8e	20 55 48	jsr $4855		jsr	FPPushConstant	; 22.66
>1c91	0a d7 a3 5a				.dword	$5aa3d70a
>1c95	e6 00					.byte	$e6,$00
.1c97	20 b5 51	jsr $51b5		jsr	FloatSquareRoot
.1c9a	20 55 48	jsr $4855		jsr	FPPushConstant	; 4.76025209
>1c9d	18 fe 29 4c				.dword	$4c29fe18
>1ca1	e4 00					.byte	$e4,$00
.1ca3	20 88 48	jsr $4888		jsr	FloatSubtract
.1ca6	20 52 48	jsr $4852		jsr	FPAbs
.1ca9	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>1cac	4c 37 89 41				.dword	$4189374c
>1cb0	d8 00					.byte	$d8,$00
.1cb2	20 4f 49	jsr $494f		jsr	FloatCompare
.1cb5	20 45 48	jsr $4845		jsr	FPAssertCheck
.1cb8	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.62666667
>1cbb	0b 9d 36 50				.dword	$50369d0b
>1cbf	e1 00					.byte	$e1,$00
.1cc1	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.7
>1cc4	9a 99 99 59				.dword	$5999999a
>1cc8	e1 00					.byte	$e1,$00
.1cca	20 33 51	jsr $5133		jsr	FloatPower
.1ccd	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.72098398
>1cd0	fc 33 49 5c				.dword	$5c4933fc
>1cd4	e1 00					.byte	$e1,$00
.1cd6	20 88 48	jsr $4888		jsr	FloatSubtract
.1cd9	20 52 48	jsr $4852		jsr	FPAbs
.1cdc	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.01
>1cdf	1f 85 eb 51				.dword	$51eb851f
>1ce3	db 00					.byte	$db,$00
.1ce5	20 4f 49	jsr $494f		jsr	FloatCompare
.1ce8	20 45 48	jsr $4845		jsr	FPAssertCheck
.1ceb	20 55 48	jsr $4855		jsr	FPPushConstant	; -6.4906455
>1cee	19 af d9 67				.dword	$67d9af19
>1cf2	e4 80					.byte	$e4,$80
.1cf4	20 2c 4e	jsr $4e2c		jsr	FloatNegate
.1cf7	20 55 48	jsr $4855		jsr	FPPushConstant	; 6.4906455
>1cfa	19 af d9 67				.dword	$67d9af19
>1cfe	e4 00					.byte	$e4,$00
.1d00	20 4f 49	jsr $494f		jsr	FloatCompare
.1d03	20 19 49	jsr $4919		jsr	CompareEqual
.1d06	20 45 48	jsr $4845		jsr	FPAssertCheck
.1d09	20 55 48	jsr $4855		jsr	FPPushConstant	; -6.4906455
>1d0c	19 af d9 67				.dword	$67d9af19
>1d10	e4 80					.byte	$e4,$80
.1d12	20 a5 4a	jsr $4aa5		jsr	FloatIntegerPart
.1d15	20 55 48	jsr $4855		jsr	FPPushConstant	; -6
>1d18	06 00 00 00				.dword	$00000006
>1d1c	00 80					.byte	$00,$80
.1d1e	20 4f 49	jsr $494f		jsr	FloatCompare
.1d21	20 19 49	jsr $4919		jsr	CompareEqual
.1d24	20 45 48	jsr $4845		jsr	FPAssertCheck
.1d27	20 55 48	jsr $4855		jsr	FPPushConstant	; 10.57
>1d2a	29 5c 8f 54				.dword	$548f5c29
>1d2e	e5 00					.byte	$e5,$00
.1d30	20 50 51	jsr $5150		jsr	FloatSine
.1d33	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.91080179
>1d36	2f 27 95 74				.dword	$7495272f
>1d3a	e1 80					.byte	$e1,$80
.1d3c	20 88 48	jsr $4888		jsr	FloatSubtract
.1d3f	20 52 48	jsr $4852		jsr	FPAbs
.1d42	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>1d45	4c 37 89 41				.dword	$4189374c
>1d49	d8 00					.byte	$d8,$00
.1d4b	20 4f 49	jsr $494f		jsr	FloatCompare
.1d4e	20 2f 49	jsr $492f		jsr	CompareLess
.1d51	20 45 48	jsr $4845		jsr	FPAssertCheck
.1d54	20 55 48	jsr $4855		jsr	FPPushConstant	; 10.57
>1d57	29 5c 8f 54				.dword	$548f5c29
>1d5b	e5 00					.byte	$e5,$00
.1d5d	20 b0 4f	jsr $4fb0		jsr	FloatCosine
.1d60	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.41284391
>1d63	74 23 b0 69				.dword	$69b02374
>1d67	e0 80					.byte	$e0,$80
.1d69	20 88 48	jsr $4888		jsr	FloatSubtract
.1d6c	20 52 48	jsr $4852		jsr	FPAbs
.1d6f	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>1d72	4c 37 89 41				.dword	$4189374c
>1d76	d8 00					.byte	$d8,$00
.1d78	20 4f 49	jsr $494f		jsr	FloatCompare
.1d7b	20 2f 49	jsr $492f		jsr	CompareLess
.1d7e	20 45 48	jsr $4845		jsr	FPAssertCheck
.1d81	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.2
>1d84	66 66 66 66				.dword	$66666666
>1d88	df 00					.byte	$df,$00
.1d8a	20 c1 51	jsr $51c1		jsr	FloatTangent
.1d8d	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.20271004
>1d90	41 9c c9 67				.dword	$67c99c41
>1d94	df 00					.byte	$df,$00
.1d96	20 88 48	jsr $4888		jsr	FloatSubtract
.1d99	20 52 48	jsr $4852		jsr	FPAbs
.1d9c	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>1d9f	4c 37 89 41				.dword	$4189374c
>1da3	d8 00					.byte	$d8,$00
.1da5	20 4f 49	jsr $494f		jsr	FloatCompare
.1da8	20 45 48	jsr $4845		jsr	FPAssertCheck
.1dab	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.103
>1dae	fe d4 78 69				.dword	$6978d4fe
>1db2	de 00					.byte	$de,$00
.1db4	20 95 4e	jsr $4e95		jsr	FloatArcTan
.1db7	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.10263806
>1dba	9c f3 19 69				.dword	$6919f39c
>1dbe	de 00					.byte	$de,$00
.1dc0	20 88 48	jsr $4888		jsr	FloatSubtract
.1dc3	20 52 48	jsr $4852		jsr	FPAbs
.1dc6	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>1dc9	4c 37 89 41				.dword	$4189374c
>1dcd	d8 00					.byte	$d8,$00
.1dcf	20 4f 49	jsr $494f		jsr	FloatCompare
.1dd2	20 45 48	jsr $4845		jsr	FPAssertCheck
.1dd5	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.15
>1dd8	cd cc cc 4c				.dword	$4ccccccd
>1ddc	df 80					.byte	$df,$80
.1dde	20 bc 4f	jsr $4fbc		jsr	FloatExponent
.1de1	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.86070798
>1de4	d9 ad 2b 6e				.dword	$6e2badd9
>1de8	e1 00					.byte	$e1,$00
.1dea	20 88 48	jsr $4888		jsr	FloatSubtract
.1ded	20 52 48	jsr $4852		jsr	FPAbs
.1df0	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>1df3	4c 37 89 41				.dword	$4189374c
>1df7	d8 00					.byte	$d8,$00
.1df9	20 4f 49	jsr $494f		jsr	FloatCompare
.1dfc	20 45 48	jsr $4845		jsr	FPAssertCheck
.1dff	20 55 48	jsr $4855		jsr	FPPushConstant	; 21.81
>1e02	a4 70 3d 57				.dword	$573d70a4
>1e06	e6 00					.byte	$e6,$00
.1e08	20 bf 50	jsr $50bf		jsr	FloatLogarithm
.1e0b	20 55 48	jsr $4855		jsr	FPPushConstant	; 3.08236858
>1e0e	6f c3 a2 62				.dword	$62a2c36f
>1e12	e3 00					.byte	$e3,$00
.1e14	20 88 48	jsr $4888		jsr	FloatSubtract
.1e17	20 52 48	jsr $4852		jsr	FPAbs
.1e1a	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>1e1d	4c 37 89 41				.dword	$4189374c
>1e21	d8 00					.byte	$d8,$00
.1e23	20 4f 49	jsr $494f		jsr	FloatCompare
.1e26	20 45 48	jsr $4845		jsr	FPAssertCheck
.1e29	20 55 48	jsr $4855		jsr	FPPushConstant	; 8.19
>1e2c	b8 1e 85 41				.dword	$41851eb8
>1e30	e5 00					.byte	$e5,$00
.1e32	20 b5 51	jsr $51b5		jsr	FloatSquareRoot
.1e35	20 55 48	jsr $4855		jsr	FPPushConstant	; 2.8618176
>1e38	81 02 94 5b				.dword	$5b940281
>1e3c	e3 00					.byte	$e3,$00
.1e3e	20 88 48	jsr $4888		jsr	FloatSubtract
.1e41	20 52 48	jsr $4852		jsr	FPAbs
.1e44	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>1e47	4c 37 89 41				.dword	$4189374c
>1e4b	d8 00					.byte	$d8,$00
.1e4d	20 4f 49	jsr $494f		jsr	FloatCompare
.1e50	20 45 48	jsr $4845		jsr	FPAssertCheck
.1e53	20 55 48	jsr $4855		jsr	FPPushConstant	; 2.44666667
>1e56	e6 17 4b 4e				.dword	$4e4b17e6
>1e5a	e3 00					.byte	$e3,$00
.1e5c	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.7
>1e5f	9a 99 99 59				.dword	$5999999a
>1e63	e1 00					.byte	$e1,$00
.1e65	20 33 51	jsr $5133		jsr	FloatPower
.1e68	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.87069232
>1e6b	48 6c b9 77				.dword	$77b96c48
>1e6f	e2 00					.byte	$e2,$00
.1e71	20 88 48	jsr $4888		jsr	FloatSubtract
.1e74	20 52 48	jsr $4852		jsr	FPAbs
.1e77	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.01
>1e7a	1f 85 eb 51				.dword	$51eb851f
>1e7e	db 00					.byte	$db,$00
.1e80	20 4f 49	jsr $494f		jsr	FloatCompare
.1e83	20 45 48	jsr $4845		jsr	FPAssertCheck
.1e86	20 55 48	jsr $4855		jsr	FPPushConstant	; -78.69328582
>1e89	2e 7b b1 4e				.dword	$4eb17b2e
>1e8d	e8 80					.byte	$e8,$80
.1e8f	20 2c 4e	jsr $4e2c		jsr	FloatNegate
.1e92	20 55 48	jsr $4855		jsr	FPPushConstant	; 78.69328582
>1e95	2e 7b b1 4e				.dword	$4eb17b2e
>1e99	e8 00					.byte	$e8,$00
.1e9b	20 4f 49	jsr $494f		jsr	FloatCompare
.1e9e	20 19 49	jsr $4919		jsr	CompareEqual
.1ea1	20 45 48	jsr $4845		jsr	FPAssertCheck
.1ea4	20 55 48	jsr $4855		jsr	FPPushConstant	; -78.69328582
>1ea7	2e 7b b1 4e				.dword	$4eb17b2e
>1eab	e8 80					.byte	$e8,$80
.1ead	20 a5 4a	jsr $4aa5		jsr	FloatIntegerPart
.1eb0	20 55 48	jsr $4855		jsr	FPPushConstant	; -78
>1eb3	4e 00 00 00				.dword	$0000004e
>1eb7	00 80					.byte	$00,$80
.1eb9	20 4f 49	jsr $494f		jsr	FloatCompare
.1ebc	20 19 49	jsr $4919		jsr	CompareEqual
.1ebf	20 45 48	jsr $4845		jsr	FPAssertCheck
.1ec2	20 55 48	jsr $4855		jsr	FPPushConstant	; -12.66
>1ec5	14 ae 47 65				.dword	$6547ae14
>1ec9	e5 80					.byte	$e5,$80
.1ecb	20 50 51	jsr $5150		jsr	FloatSine
.1ece	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.09349265
>1ed1	89 89 bc 5f				.dword	$5fbc8989
>1ed5	de 80					.byte	$de,$80
.1ed7	20 88 48	jsr $4888		jsr	FloatSubtract
.1eda	20 52 48	jsr $4852		jsr	FPAbs
.1edd	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>1ee0	4c 37 89 41				.dword	$4189374c
>1ee4	d8 00					.byte	$d8,$00
.1ee6	20 4f 49	jsr $494f		jsr	FloatCompare
.1ee9	20 2f 49	jsr $492f		jsr	CompareLess
.1eec	20 45 48	jsr $4845		jsr	FPAssertCheck
.1eef	20 55 48	jsr $4855		jsr	FPPushConstant	; -12.66
>1ef2	14 ae 47 65				.dword	$6547ae14
>1ef6	e5 80					.byte	$e5,$80
.1ef8	20 b0 4f	jsr $4fb0		jsr	FloatCosine
.1efb	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.99561997
>1efe	a5 79 70 7f				.dword	$7f7079a5
>1f02	e1 00					.byte	$e1,$00
.1f04	20 88 48	jsr $4888		jsr	FloatSubtract
.1f07	20 52 48	jsr $4852		jsr	FPAbs
.1f0a	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>1f0d	4c 37 89 41				.dword	$4189374c
>1f11	d8 00					.byte	$d8,$00
.1f13	20 4f 49	jsr $494f		jsr	FloatCompare
.1f16	20 2f 49	jsr $492f		jsr	CompareLess
.1f19	20 45 48	jsr $4845		jsr	FPAssertCheck
.1f1c	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.39
>1f1f	3d 0a d7 63				.dword	$63d70a3d
>1f23	e0 00					.byte	$e0,$00
.1f25	20 c1 51	jsr $51c1		jsr	FloatTangent
.1f28	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.41105492
>1f2b	2e e5 3a 69				.dword	$693ae52e
>1f2f	e0 00					.byte	$e0,$00
.1f31	20 88 48	jsr $4888		jsr	FloatSubtract
.1f34	20 52 48	jsr $4852		jsr	FPAbs
.1f37	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>1f3a	4c 37 89 41				.dword	$4189374c
>1f3e	d8 00					.byte	$d8,$00
.1f40	20 4f 49	jsr $494f		jsr	FloatCompare
.1f43	20 45 48	jsr $4845		jsr	FPAssertCheck
.1f46	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.762
>1f49	4c 37 89 61				.dword	$6189374c
>1f4d	e1 00					.byte	$e1,$00
.1f4f	20 95 4e	jsr $4e95		jsr	FloatArcTan
.1f52	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.65113698
>1f55	e1 74 58 53				.dword	$535874e1
>1f59	e1 00					.byte	$e1,$00
.1f5b	20 88 48	jsr $4888		jsr	FloatSubtract
.1f5e	20 52 48	jsr $4852		jsr	FPAbs
.1f61	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>1f64	4c 37 89 41				.dword	$4189374c
>1f68	d8 00					.byte	$d8,$00
.1f6a	20 4f 49	jsr $494f		jsr	FloatCompare
.1f6d	20 45 48	jsr $4845		jsr	FPAssertCheck
.1f70	20 55 48	jsr $4855		jsr	FPPushConstant	; -1.26
>1f73	0a d7 a3 50				.dword	$50a3d70a
>1f77	e2 80					.byte	$e2,$80
.1f79	20 bc 4f	jsr $4fbc		jsr	FloatExponent
.1f7c	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.28365403
>1f7f	ee 8c 9d 48				.dword	$489d8cee
>1f83	e0 00					.byte	$e0,$00
.1f85	20 88 48	jsr $4888		jsr	FloatSubtract
.1f88	20 52 48	jsr $4852		jsr	FPAbs
.1f8b	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>1f8e	4c 37 89 41				.dword	$4189374c
>1f92	d8 00					.byte	$d8,$00
.1f94	20 4f 49	jsr $494f		jsr	FloatCompare
.1f97	20 45 48	jsr $4845		jsr	FPAssertCheck
.1f9a	20 55 48	jsr $4855		jsr	FPPushConstant	; 23.51
>1f9d	71 3d 0a 5e				.dword	$5e0a3d71
>1fa1	e6 00					.byte	$e6,$00
.1fa3	20 bf 50	jsr $50bf		jsr	FloatLogarithm
.1fa6	20 55 48	jsr $4855		jsr	FPPushConstant	; 3.15742586
>1fa9	f5 a1 09 65				.dword	$6509a1f5
>1fad	e3 00					.byte	$e3,$00
.1faf	20 88 48	jsr $4888		jsr	FloatSubtract
.1fb2	20 52 48	jsr $4852		jsr	FPAbs
.1fb5	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>1fb8	4c 37 89 41				.dword	$4189374c
>1fbc	d8 00					.byte	$d8,$00
.1fbe	20 4f 49	jsr $494f		jsr	FloatCompare
.1fc1	20 45 48	jsr $4845		jsr	FPAssertCheck
.1fc4	20 55 48	jsr $4855		jsr	FPPushConstant	; 23.68
>1fc7	ec 51 b8 5e				.dword	$5eb851ec
>1fcb	e6 00					.byte	$e6,$00
.1fcd	20 b5 51	jsr $51b5		jsr	FloatSquareRoot
.1fd0	20 55 48	jsr $4855		jsr	FPPushConstant	; 4.86621002
>1fd3	0a ff db 4d				.dword	$4ddbff0a
>1fd7	e4 00					.byte	$e4,$00
.1fd9	20 88 48	jsr $4888		jsr	FloatSubtract
.1fdc	20 52 48	jsr $4852		jsr	FPAbs
.1fdf	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>1fe2	4c 37 89 41				.dword	$4189374c
>1fe6	d8 00					.byte	$d8,$00
.1fe8	20 4f 49	jsr $494f		jsr	FloatCompare
.1feb	20 45 48	jsr $4845		jsr	FPAssertCheck
.1fee	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.86
>1ff1	e1 7a 14 6e				.dword	$6e147ae1
>1ff5	e1 00					.byte	$e1,$00
.1ff7	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.6
>1ffa	66 66 66 66				.dword	$66666666
>1ffe	e2 00					.byte	$e2,$00
.2000	20 33 51	jsr $5133		jsr	FloatPower
.2003	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.78559285
>2006	77 4e 8e 64				.dword	$648e4e77
>200a	e1 00					.byte	$e1,$00
.200c	20 88 48	jsr $4888		jsr	FloatSubtract
.200f	20 52 48	jsr $4852		jsr	FPAbs
.2012	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.01
>2015	1f 85 eb 51				.dword	$51eb851f
>2019	db 00					.byte	$db,$00
.201b	20 4f 49	jsr $494f		jsr	FloatCompare
.201e	20 45 48	jsr $4845		jsr	FPAssertCheck
.2021	20 55 48	jsr $4855		jsr	FPPushConstant	; 41.85721228
>2024	87 e4 b6 53				.dword	$53b6e487
>2028	e7 00					.byte	$e7,$00
.202a	20 2c 4e	jsr $4e2c		jsr	FloatNegate
.202d	20 55 48	jsr $4855		jsr	FPPushConstant	; -41.85721228
>2030	87 e4 b6 53				.dword	$53b6e487
>2034	e7 80					.byte	$e7,$80
.2036	20 4f 49	jsr $494f		jsr	FloatCompare
.2039	20 19 49	jsr $4919		jsr	CompareEqual
.203c	20 45 48	jsr $4845		jsr	FPAssertCheck
.203f	20 55 48	jsr $4855		jsr	FPPushConstant	; 41.85721228
>2042	87 e4 b6 53				.dword	$53b6e487
>2046	e7 00					.byte	$e7,$00
.2048	20 a5 4a	jsr $4aa5		jsr	FloatIntegerPart
.204b	20 55 48	jsr $4855		jsr	FPPushConstant	; 41
>204e	29 00 00 00				.dword	$00000029
>2052	00 00					.byte	$00,$00
.2054	20 4f 49	jsr $494f		jsr	FloatCompare
.2057	20 19 49	jsr $4919		jsr	CompareEqual
.205a	20 45 48	jsr $4845		jsr	FPAssertCheck
.205d	20 55 48	jsr $4855		jsr	FPPushConstant	; -12.58
>2060	0a d7 a3 64				.dword	$64a3d70a
>2064	e5 80					.byte	$e5,$80
.2066	20 50 51	jsr $5150		jsr	FloatSine
.2069	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.01362896
>206c	2f 00 a6 6f				.dword	$6fa6002f
>2070	db 80					.byte	$db,$80
.2072	20 88 48	jsr $4888		jsr	FloatSubtract
.2075	20 52 48	jsr $4852		jsr	FPAbs
.2078	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>207b	4c 37 89 41				.dword	$4189374c
>207f	d8 00					.byte	$d8,$00
.2081	20 4f 49	jsr $494f		jsr	FloatCompare
.2084	20 2f 49	jsr $492f		jsr	CompareLess
.2087	20 45 48	jsr $4845		jsr	FPAssertCheck
.208a	20 55 48	jsr $4855		jsr	FPPushConstant	; -12.58
>208d	0a d7 a3 64				.dword	$64a3d70a
>2091	e5 80					.byte	$e5,$80
.2093	20 b0 4f	jsr $4fb0		jsr	FloatCosine
.2096	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.99990712
>2099	de f4 fc 7f				.dword	$7ffcf4de
>209d	e1 00					.byte	$e1,$00
.209f	20 88 48	jsr $4888		jsr	FloatSubtract
.20a2	20 52 48	jsr $4852		jsr	FPAbs
.20a5	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>20a8	4c 37 89 41				.dword	$4189374c
>20ac	d8 00					.byte	$d8,$00
.20ae	20 4f 49	jsr $494f		jsr	FloatCompare
.20b1	20 2f 49	jsr $492f		jsr	CompareLess
.20b4	20 45 48	jsr $4845		jsr	FPAssertCheck
.20b7	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.13
>20ba	29 5c 8f 42				.dword	$428f5c29
>20be	df 00					.byte	$df,$00
.20c0	20 c1 51	jsr $51c1		jsr	FloatTangent
.20c3	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.13073732
>20c6	84 00 f0 42				.dword	$42f00084
>20ca	df 00					.byte	$df,$00
.20cc	20 88 48	jsr $4888		jsr	FloatSubtract
.20cf	20 52 48	jsr $4852		jsr	FPAbs
.20d2	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>20d5	4c 37 89 41				.dword	$4189374c
>20d9	d8 00					.byte	$d8,$00
.20db	20 4f 49	jsr $494f		jsr	FloatCompare
.20de	20 45 48	jsr $4845		jsr	FPAssertCheck
.20e1	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.261
>20e4	58 39 b4 50				.dword	$50b43958
>20e8	e2 00					.byte	$e2,$00
.20ea	20 95 4e	jsr $4e95		jsr	FloatArcTan
.20ed	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.90032513
>20f0	97 da 3d 73				.dword	$733dda97
>20f4	e1 00					.byte	$e1,$00
.20f6	20 88 48	jsr $4888		jsr	FloatSubtract
.20f9	20 52 48	jsr $4852		jsr	FPAbs
.20fc	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>20ff	4c 37 89 41				.dword	$4189374c
>2103	d8 00					.byte	$d8,$00
.2105	20 4f 49	jsr $494f		jsr	FloatCompare
.2108	20 45 48	jsr $4845		jsr	FPAssertCheck
.210b	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.73
>210e	ec 51 b8 6e				.dword	$6eb851ec
>2112	e2 00					.byte	$e2,$00
.2114	20 bc 4f	jsr $4fbc		jsr	FloatExponent
.2117	20 55 48	jsr $4855		jsr	FPPushConstant	; 5.64065391
>211a	50 1e 40 5a				.dword	$5a401e50
>211e	e4 00					.byte	$e4,$00
.2120	20 88 48	jsr $4888		jsr	FloatSubtract
.2123	20 52 48	jsr $4852		jsr	FPAbs
.2126	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>2129	4c 37 89 41				.dword	$4189374c
>212d	d8 00					.byte	$d8,$00
.212f	20 4f 49	jsr $494f		jsr	FloatCompare
.2132	20 45 48	jsr $4845		jsr	FPAssertCheck
.2135	20 55 48	jsr $4855		jsr	FPPushConstant	; 87.04
>2138	71 3d 0a 57				.dword	$570a3d71
>213c	e8 00					.byte	$e8,$00
.213e	20 bf 50	jsr $50bf		jsr	FloatLogarithm
.2141	20 55 48	jsr $4855		jsr	FPPushConstant	; 4.46636778
>2144	10 3e 76 47				.dword	$47763e10
>2148	e4 00					.byte	$e4,$00
.214a	20 88 48	jsr $4888		jsr	FloatSubtract
.214d	20 52 48	jsr $4852		jsr	FPAbs
.2150	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>2153	4c 37 89 41				.dword	$4189374c
>2157	d8 00					.byte	$d8,$00
.2159	20 4f 49	jsr $494f		jsr	FloatCompare
.215c	20 45 48	jsr $4845		jsr	FPAssertCheck
.215f	20 55 48	jsr $4855		jsr	FPPushConstant	; 95.65
>2162	66 66 a6 5f				.dword	$5fa66666
>2166	e8 00					.byte	$e8,$00
.2168	20 b5 51	jsr $51b5		jsr	FloatSquareRoot
.216b	20 55 48	jsr $4855		jsr	FPPushConstant	; 9.7800818
>216e	87 9b 3d 4e				.dword	$4e3d9b87
>2172	e5 00					.byte	$e5,$00
.2174	20 88 48	jsr $4888		jsr	FloatSubtract
.2177	20 52 48	jsr $4852		jsr	FPAbs
.217a	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>217d	4c 37 89 41				.dword	$4189374c
>2181	d8 00					.byte	$d8,$00
.2183	20 4f 49	jsr $494f		jsr	FloatCompare
.2186	20 45 48	jsr $4845		jsr	FPAssertCheck
.2189	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.73666667
>218c	ec 17 4b 5e				.dword	$5e4b17ec
>2190	e1 00					.byte	$e1,$00
.2192	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.9
>2195	9a 99 99 79				.dword	$7999999a
>2199	e2 00					.byte	$e2,$00
.219b	20 33 51	jsr $5133		jsr	FloatPower
.219e	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.55951913
>21a1	a6 52 9e 47				.dword	$479e52a6
>21a5	e1 00					.byte	$e1,$00
.21a7	20 88 48	jsr $4888		jsr	FloatSubtract
.21aa	20 52 48	jsr $4852		jsr	FPAbs
.21ad	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.01
>21b0	1f 85 eb 51				.dword	$51eb851f
>21b4	db 00					.byte	$db,$00
.21b6	20 4f 49	jsr $494f		jsr	FloatCompare
.21b9	20 45 48	jsr $4845		jsr	FPAssertCheck
.21bc	20 55 48	jsr $4855		jsr	FPPushConstant	; -76.57892605
>21bf	7f 34 94 4c				.dword	$4c94347f
>21c3	e8 80					.byte	$e8,$80
.21c5	20 2c 4e	jsr $4e2c		jsr	FloatNegate
.21c8	20 55 48	jsr $4855		jsr	FPPushConstant	; 76.57892605
>21cb	7f 34 94 4c				.dword	$4c94347f
>21cf	e8 00					.byte	$e8,$00
.21d1	20 4f 49	jsr $494f		jsr	FloatCompare
.21d4	20 19 49	jsr $4919		jsr	CompareEqual
.21d7	20 45 48	jsr $4845		jsr	FPAssertCheck
.21da	20 55 48	jsr $4855		jsr	FPPushConstant	; -76.57892605
>21dd	7f 34 94 4c				.dword	$4c94347f
>21e1	e8 80					.byte	$e8,$80
.21e3	20 a5 4a	jsr $4aa5		jsr	FloatIntegerPart
.21e6	20 55 48	jsr $4855		jsr	FPPushConstant	; -76
>21e9	4c 00 00 00				.dword	$0000004c
>21ed	00 80					.byte	$00,$80
.21ef	20 4f 49	jsr $494f		jsr	FloatCompare
.21f2	20 19 49	jsr $4919		jsr	CompareEqual
.21f5	20 45 48	jsr $4845		jsr	FPAssertCheck
.21f8	20 55 48	jsr $4855		jsr	FPPushConstant	; 9.51
>21fb	e1 7a 14 4c				.dword	$4c147ae1
>21ff	e5 00					.byte	$e5,$00
.2201	20 50 51	jsr $5150		jsr	FloatSine
.2204	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.08511892
>2207	07 6a 29 57				.dword	$57296a07
>220b	de 80					.byte	$de,$80
.220d	20 88 48	jsr $4888		jsr	FloatSubtract
.2210	20 52 48	jsr $4852		jsr	FPAbs
.2213	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>2216	4c 37 89 41				.dword	$4189374c
>221a	d8 00					.byte	$d8,$00
.221c	20 4f 49	jsr $494f		jsr	FloatCompare
.221f	20 2f 49	jsr $492f		jsr	CompareLess
.2222	20 45 48	jsr $4845		jsr	FPAssertCheck
.2225	20 55 48	jsr $4855		jsr	FPPushConstant	; 9.51
>2228	e1 7a 14 4c				.dword	$4c147ae1
>222c	e5 00					.byte	$e5,$00
.222e	20 b0 4f	jsr $4fb0		jsr	FloatCosine
.2231	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.9963708
>2234	10 14 89 7f				.dword	$7f891410
>2238	e1 80					.byte	$e1,$80
.223a	20 88 48	jsr $4888		jsr	FloatSubtract
.223d	20 52 48	jsr $4852		jsr	FPAbs
.2240	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>2243	4c 37 89 41				.dword	$4189374c
>2247	d8 00					.byte	$d8,$00
.2249	20 4f 49	jsr $494f		jsr	FloatCompare
.224c	20 2f 49	jsr $492f		jsr	CompareLess
.224f	20 45 48	jsr $4845		jsr	FPAssertCheck
.2252	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.36
>2255	c3 f5 28 5c				.dword	$5c28f5c3
>2259	e0 00					.byte	$e0,$00
.225b	20 c1 51	jsr $51c1		jsr	FloatTangent
.225e	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.37640285
>2261	eb ef 5b 60				.dword	$605befeb
>2265	e0 00					.byte	$e0,$00
.2267	20 88 48	jsr $4888		jsr	FloatSubtract
.226a	20 52 48	jsr $4852		jsr	FPAbs
.226d	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>2270	4c 37 89 41				.dword	$4189374c
>2274	d8 00					.byte	$d8,$00
.2276	20 4f 49	jsr $494f		jsr	FloatCompare
.2279	20 45 48	jsr $4845		jsr	FPAssertCheck
.227c	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.111
>227f	e7 fb a9 71				.dword	$71a9fbe7
>2283	de 00					.byte	$de,$00
.2285	20 95 4e	jsr $4e95		jsr	FloatArcTan
.2288	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.11054746
>228b	75 5a 33 71				.dword	$71335a75
>228f	de 00					.byte	$de,$00
.2291	20 88 48	jsr $4888		jsr	FloatSubtract
.2294	20 52 48	jsr $4852		jsr	FPAbs
.2297	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>229a	4c 37 89 41				.dword	$4189374c
>229e	d8 00					.byte	$d8,$00
.22a0	20 4f 49	jsr $494f		jsr	FloatCompare
.22a3	20 45 48	jsr $4845		jsr	FPAssertCheck
.22a6	20 55 48	jsr $4855		jsr	FPPushConstant	; -1.26
>22a9	0a d7 a3 50				.dword	$50a3d70a
>22ad	e2 80					.byte	$e2,$80
.22af	20 bc 4f	jsr $4fbc		jsr	FloatExponent
.22b2	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.28365403
>22b5	ee 8c 9d 48				.dword	$489d8cee
>22b9	e0 00					.byte	$e0,$00
.22bb	20 88 48	jsr $4888		jsr	FloatSubtract
.22be	20 52 48	jsr $4852		jsr	FPAbs
.22c1	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>22c4	4c 37 89 41				.dword	$4189374c
>22c8	d8 00					.byte	$d8,$00
.22ca	20 4f 49	jsr $494f		jsr	FloatCompare
.22cd	20 45 48	jsr $4845		jsr	FPAssertCheck
.22d0	20 55 48	jsr $4855		jsr	FPPushConstant	; 15.1
>22d3	cd cc cc 78				.dword	$78cccccd
>22d7	e5 00					.byte	$e5,$00
.22d9	20 bf 50	jsr $50bf		jsr	FloatLogarithm
.22dc	20 55 48	jsr $4855		jsr	FPPushConstant	; 2.71469474
>22df	81 c7 de 56				.dword	$56dec781
>22e3	e3 00					.byte	$e3,$00
.22e5	20 88 48	jsr $4888		jsr	FloatSubtract
.22e8	20 52 48	jsr $4852		jsr	FPAbs
.22eb	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>22ee	4c 37 89 41				.dword	$4189374c
>22f2	d8 00					.byte	$d8,$00
.22f4	20 4f 49	jsr $494f		jsr	FloatCompare
.22f7	20 45 48	jsr $4845		jsr	FPAssertCheck
.22fa	20 55 48	jsr $4855		jsr	FPPushConstant	; 53.52
>22fd	71 3d 0a 6b				.dword	$6b0a3d71
>2301	e7 00					.byte	$e7,$00
.2303	20 b5 51	jsr $51b5		jsr	FloatSquareRoot
.2306	20 55 48	jsr $4855		jsr	FPPushConstant	; 7.31573646
>2309	ad 41 0d 75				.dword	$750d41ad
>230d	e4 00					.byte	$e4,$00
.230f	20 88 48	jsr $4888		jsr	FloatSubtract
.2312	20 52 48	jsr $4852		jsr	FPAbs
.2315	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>2318	4c 37 89 41				.dword	$4189374c
>231c	d8 00					.byte	$d8,$00
.231e	20 4f 49	jsr $494f		jsr	FloatCompare
.2321	20 45 48	jsr $4845		jsr	FPAssertCheck
.2324	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.55333333
>2327	66 a0 d3 46				.dword	$46d3a066
>232b	e1 00					.byte	$e1,$00
.232d	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.3
>2330	cd cc cc 4c				.dword	$4ccccccd
>2334	e0 00					.byte	$e0,$00
.2336	20 33 51	jsr $5133		jsr	FloatPower
.2339	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.83732884
>233c	68 97 2d 6b				.dword	$6b2d9768
>2340	e1 00					.byte	$e1,$00
.2342	20 88 48	jsr $4888		jsr	FloatSubtract
.2345	20 52 48	jsr $4852		jsr	FPAbs
.2348	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.01
>234b	1f 85 eb 51				.dword	$51eb851f
>234f	db 00					.byte	$db,$00
.2351	20 4f 49	jsr $494f		jsr	FloatCompare
.2354	20 45 48	jsr $4845		jsr	FPAssertCheck
.2357	20 55 48	jsr $4855		jsr	FPPushConstant	; 38.23746659
>235a	39 95 79 4c				.dword	$4c799539
>235e	e7 00					.byte	$e7,$00
.2360	20 2c 4e	jsr $4e2c		jsr	FloatNegate
.2363	20 55 48	jsr $4855		jsr	FPPushConstant	; -38.23746659
>2366	39 95 79 4c				.dword	$4c799539
>236a	e7 80					.byte	$e7,$80
.236c	20 4f 49	jsr $494f		jsr	FloatCompare
.236f	20 19 49	jsr $4919		jsr	CompareEqual
.2372	20 45 48	jsr $4845		jsr	FPAssertCheck
.2375	20 55 48	jsr $4855		jsr	FPPushConstant	; 38.23746659
>2378	39 95 79 4c				.dword	$4c799539
>237c	e7 00					.byte	$e7,$00
.237e	20 a5 4a	jsr $4aa5		jsr	FloatIntegerPart
.2381	20 55 48	jsr $4855		jsr	FPPushConstant	; 38
>2384	26 00 00 00				.dword	$00000026
>2388	00 00					.byte	$00,$00
.238a	20 4f 49	jsr $494f		jsr	FloatCompare
.238d	20 19 49	jsr $4919		jsr	CompareEqual
.2390	20 45 48	jsr $4845		jsr	FPAssertCheck
.2393	20 55 48	jsr $4855		jsr	FPPushConstant	; 16.44
>2396	5c 8f c2 41				.dword	$41c28f5c
>239a	e6 00					.byte	$e6,$00
.239c	20 50 51	jsr $5150		jsr	FloatSine
.239f	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.66838597
>23a2	e5 ab 8d 55				.dword	$558dabe5
>23a6	e1 80					.byte	$e1,$80
.23a8	20 88 48	jsr $4888		jsr	FloatSubtract
.23ab	20 52 48	jsr $4852		jsr	FPAbs
.23ae	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>23b1	4c 37 89 41				.dword	$4189374c
>23b5	d8 00					.byte	$d8,$00
.23b7	20 4f 49	jsr $494f		jsr	FloatCompare
.23ba	20 2f 49	jsr $492f		jsr	CompareLess
.23bd	20 45 48	jsr $4845		jsr	FPAssertCheck
.23c0	20 55 48	jsr $4855		jsr	FPPushConstant	; 16.44
>23c3	5c 8f c2 41				.dword	$41c28f5c
>23c7	e6 00					.byte	$e6,$00
.23c9	20 b0 4f	jsr $4fb0		jsr	FloatCosine
.23cc	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.74381462
>23cf	46 51 35 5f				.dword	$5f355146
>23d3	e1 80					.byte	$e1,$80
.23d5	20 88 48	jsr $4888		jsr	FloatSubtract
.23d8	20 52 48	jsr $4852		jsr	FPAbs
.23db	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>23de	4c 37 89 41				.dword	$4189374c
>23e2	d8 00					.byte	$d8,$00
.23e4	20 4f 49	jsr $494f		jsr	FloatCompare
.23e7	20 2f 49	jsr $492f		jsr	CompareLess
.23ea	20 45 48	jsr $4845		jsr	FPAssertCheck
.23ed	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.34
>23f0	71 3d 0a 57				.dword	$570a3d71
>23f4	e0 00					.byte	$e0,$00
.23f6	20 c1 51	jsr $51c1		jsr	FloatTangent
.23f9	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.35373688
>23fc	0b 80 8e 5a				.dword	$5a8e800b
>2400	e0 00					.byte	$e0,$00
.2402	20 88 48	jsr $4888		jsr	FloatSubtract
.2405	20 52 48	jsr $4852		jsr	FPAbs
.2408	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>240b	4c 37 89 41				.dword	$4189374c
>240f	d8 00					.byte	$d8,$00
.2411	20 4f 49	jsr $494f		jsr	FloatCompare
.2414	20 45 48	jsr $4845		jsr	FPAssertCheck
.2417	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.12
>241a	ae 47 e1 7a				.dword	$7ae147ae
>241e	de 00					.byte	$de,$00
.2420	20 95 4e	jsr $4e95		jsr	FloatArcTan
.2423	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.11942893
>2426	d2 93 4b 7a				.dword	$7a4b93d2
>242a	de 00					.byte	$de,$00
.242c	20 88 48	jsr $4888		jsr	FloatSubtract
.242f	20 52 48	jsr $4852		jsr	FPAbs
.2432	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>2435	4c 37 89 41				.dword	$4189374c
>2439	d8 00					.byte	$d8,$00
.243b	20 4f 49	jsr $494f		jsr	FloatCompare
.243e	20 45 48	jsr $4845		jsr	FPAssertCheck
.2441	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.4
>2444	66 66 66 66				.dword	$66666666
>2448	e0 80					.byte	$e0,$80
.244a	20 bc 4f	jsr $4fbc		jsr	FloatExponent
.244d	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.67032005
>2450	22 0c cd 55				.dword	$55cd0c22
>2454	e1 00					.byte	$e1,$00
.2456	20 88 48	jsr $4888		jsr	FloatSubtract
.2459	20 52 48	jsr $4852		jsr	FPAbs
.245c	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>245f	4c 37 89 41				.dword	$4189374c
>2463	d8 00					.byte	$d8,$00
.2465	20 4f 49	jsr $494f		jsr	FloatCompare
.2468	20 45 48	jsr $4845		jsr	FPAssertCheck
.246b	20 55 48	jsr $4855		jsr	FPPushConstant	; 95.92
>246e	1f 85 eb 5f				.dword	$5feb851f
>2472	e8 00					.byte	$e8,$00
.2474	20 bf 50	jsr $50bf		jsr	FloatLogarithm
.2477	20 55 48	jsr $4855		jsr	FPPushConstant	; 4.56351451
>247a	ca 27 04 49				.dword	$490427ca
>247e	e4 00					.byte	$e4,$00
.2480	20 88 48	jsr $4888		jsr	FloatSubtract
.2483	20 52 48	jsr $4852		jsr	FPAbs
.2486	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>2489	4c 37 89 41				.dword	$4189374c
>248d	d8 00					.byte	$d8,$00
.248f	20 4f 49	jsr $494f		jsr	FloatCompare
.2492	20 45 48	jsr $4845		jsr	FPAssertCheck
.2495	20 55 48	jsr $4855		jsr	FPPushConstant	; 31.71
>2498	3d 0a d7 7e				.dword	$7ed70a3d
>249c	e6 00					.byte	$e6,$00
.249e	20 b5 51	jsr $51b5		jsr	FloatSquareRoot
.24a1	20 55 48	jsr $4855		jsr	FPPushConstant	; 5.63116329
>24a4	ae 3e 19 5a				.dword	$5a193eae
>24a8	e4 00					.byte	$e4,$00
.24aa	20 88 48	jsr $4888		jsr	FloatSubtract
.24ad	20 52 48	jsr $4852		jsr	FPAbs
.24b0	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>24b3	4c 37 89 41				.dword	$4189374c
>24b7	d8 00					.byte	$d8,$00
.24b9	20 4f 49	jsr $494f		jsr	FloatCompare
.24bc	20 45 48	jsr $4845		jsr	FPAssertCheck
.24bf	20 55 48	jsr $4855		jsr	FPPushConstant	; 2.70666667
>24c2	6c 03 9d 56				.dword	$569d036c
>24c6	e3 00					.byte	$e3,$00
.24c8	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.5
>24cb	00 00 00 40				.dword	$40000000
>24cf	e1 00					.byte	$e1,$00
.24d1	20 33 51	jsr $5133		jsr	FloatPower
.24d4	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.64519502
>24d7	0e e0 4a 69				.dword	$694ae00e
>24db	e2 00					.byte	$e2,$00
.24dd	20 88 48	jsr $4888		jsr	FloatSubtract
.24e0	20 52 48	jsr $4852		jsr	FPAbs
.24e3	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.01
>24e6	1f 85 eb 51				.dword	$51eb851f
>24ea	db 00					.byte	$db,$00
.24ec	20 4f 49	jsr $494f		jsr	FloatCompare
.24ef	20 45 48	jsr $4845		jsr	FPAssertCheck
.24f2	20 55 48	jsr $4855		jsr	FPPushConstant	; -53.13784725
>24f5	ea 93 46 6a				.dword	$6a4693ea
>24f9	e7 80					.byte	$e7,$80
.24fb	20 2c 4e	jsr $4e2c		jsr	FloatNegate
.24fe	20 55 48	jsr $4855		jsr	FPPushConstant	; 53.13784725
>2501	ea 93 46 6a				.dword	$6a4693ea
>2505	e7 00					.byte	$e7,$00
.2507	20 4f 49	jsr $494f		jsr	FloatCompare
.250a	20 19 49	jsr $4919		jsr	CompareEqual
.250d	20 45 48	jsr $4845		jsr	FPAssertCheck
.2510	20 55 48	jsr $4855		jsr	FPPushConstant	; -53.13784725
>2513	ea 93 46 6a				.dword	$6a4693ea
>2517	e7 80					.byte	$e7,$80
.2519	20 a5 4a	jsr $4aa5		jsr	FloatIntegerPart
.251c	20 55 48	jsr $4855		jsr	FPPushConstant	; -53
>251f	35 00 00 00				.dword	$00000035
>2523	00 80					.byte	$00,$80
.2525	20 4f 49	jsr $494f		jsr	FloatCompare
.2528	20 19 49	jsr $4919		jsr	CompareEqual
.252b	20 45 48	jsr $4845		jsr	FPAssertCheck
.252e	20 55 48	jsr $4855		jsr	FPPushConstant	; 8.75
>2531	00 00 00 46				.dword	$46000000
>2535	e5 00					.byte	$e5,$00
.2537	20 50 51	jsr $5150		jsr	FloatSine
.253a	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.62472395
>253d	53 f4 f6 4f				.dword	$4ff6f453
>2541	e1 00					.byte	$e1,$00
.2543	20 88 48	jsr $4888		jsr	FloatSubtract
.2546	20 52 48	jsr $4852		jsr	FPAbs
.2549	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>254c	4c 37 89 41				.dword	$4189374c
>2550	d8 00					.byte	$d8,$00
.2552	20 4f 49	jsr $494f		jsr	FloatCompare
.2555	20 2f 49	jsr $492f		jsr	CompareLess
.2558	20 45 48	jsr $4845		jsr	FPAssertCheck
.255b	20 55 48	jsr $4855		jsr	FPPushConstant	; 8.75
>255e	00 00 00 46				.dword	$46000000
>2562	e5 00					.byte	$e5,$00
.2564	20 b0 4f	jsr $4fb0		jsr	FloatCosine
.2567	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.78084568
>256a	51 c0 f2 63				.dword	$63f2c051
>256e	e1 80					.byte	$e1,$80
.2570	20 88 48	jsr $4888		jsr	FloatSubtract
.2573	20 52 48	jsr $4852		jsr	FPAbs
.2576	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>2579	4c 37 89 41				.dword	$4189374c
>257d	d8 00					.byte	$d8,$00
.257f	20 4f 49	jsr $494f		jsr	FloatCompare
.2582	20 2f 49	jsr $492f		jsr	CompareLess
.2585	20 45 48	jsr $4845		jsr	FPAssertCheck
.2588	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.29
>258b	a4 70 3d 4a				.dword	$4a3d70a4
>258f	e0 00					.byte	$e0,$00
.2591	20 c1 51	jsr $51c1		jsr	FloatTangent
.2594	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.29841279
>2597	d6 c7 64 4c				.dword	$4c64c7d6
>259b	e0 00					.byte	$e0,$00
.259d	20 88 48	jsr $4888		jsr	FloatSubtract
.25a0	20 52 48	jsr $4852		jsr	FPAbs
.25a3	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>25a6	4c 37 89 41				.dword	$4189374c
>25aa	d8 00					.byte	$d8,$00
.25ac	20 4f 49	jsr $494f		jsr	FloatCompare
.25af	20 45 48	jsr $4845		jsr	FPAssertCheck
.25b2	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.56
>25b5	3d 0a d7 63				.dword	$63d70a3d
>25b9	e2 00					.byte	$e2,$00
.25bb	20 95 4e	jsr $4e95		jsr	FloatArcTan
.25be	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.00075586
>25c1	4e 62 0c 40				.dword	$400c624e
>25c5	e2 00					.byte	$e2,$00
.25c7	20 88 48	jsr $4888		jsr	FloatSubtract
.25ca	20 52 48	jsr $4852		jsr	FPAbs
.25cd	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>25d0	4c 37 89 41				.dword	$4189374c
>25d4	d8 00					.byte	$d8,$00
.25d6	20 4f 49	jsr $494f		jsr	FloatCompare
.25d9	20 45 48	jsr $4845		jsr	FPAssertCheck
.25dc	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.68
>25df	b8 1e 85 6b				.dword	$6b851eb8
>25e3	e2 00					.byte	$e2,$00
.25e5	20 bc 4f	jsr $4fbc		jsr	FloatExponent
.25e8	20 55 48	jsr $4855		jsr	FPPushConstant	; 5.36555597
>25eb	38 51 d9 55				.dword	$55d95138
>25ef	e4 00					.byte	$e4,$00
.25f1	20 88 48	jsr $4888		jsr	FloatSubtract
.25f4	20 52 48	jsr $4852		jsr	FPAbs
.25f7	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>25fa	4c 37 89 41				.dword	$4189374c
>25fe	d8 00					.byte	$d8,$00
.2600	20 4f 49	jsr $494f		jsr	FloatCompare
.2603	20 45 48	jsr $4845		jsr	FPAssertCheck
.2606	20 55 48	jsr $4855		jsr	FPPushConstant	; 97.28
>2609	14 ae 47 61				.dword	$6147ae14
>260d	e8 00					.byte	$e8,$00
.260f	20 bf 50	jsr $50bf		jsr	FloatLogarithm
.2612	20 55 48	jsr $4855		jsr	FPPushConstant	; 4.57759342
>2615	99 d2 3d 49				.dword	$493dd299
>2619	e4 00					.byte	$e4,$00
.261b	20 88 48	jsr $4888		jsr	FloatSubtract
.261e	20 52 48	jsr $4852		jsr	FPAbs
.2621	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>2624	4c 37 89 41				.dword	$4189374c
>2628	d8 00					.byte	$d8,$00
.262a	20 4f 49	jsr $494f		jsr	FloatCompare
.262d	20 45 48	jsr $4845		jsr	FPAssertCheck
.2630	20 55 48	jsr $4855		jsr	FPPushConstant	; 3.77
>2633	0a d7 a3 78				.dword	$78a3d70a
>2637	e3 00					.byte	$e3,$00
.2639	20 b5 51	jsr $51b5		jsr	FloatSquareRoot
.263c	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.94164878
>263f	3f f9 43 7c				.dword	$7c43f93f
>2643	e2 00					.byte	$e2,$00
.2645	20 88 48	jsr $4888		jsr	FloatSubtract
.2648	20 52 48	jsr $4852		jsr	FPAbs
.264b	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>264e	4c 37 89 41				.dword	$4189374c
>2652	d8 00					.byte	$d8,$00
.2654	20 4f 49	jsr $494f		jsr	FloatCompare
.2657	20 45 48	jsr $4845		jsr	FPAssertCheck
.265a	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.13666667
>265d	7c 2c f9 45				.dword	$45f92c7c
>2661	df 00					.byte	$df,$00
.2663	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.1
>2666	66 66 66 46				.dword	$46666666
>266a	e2 00					.byte	$e2,$00
.266c	20 33 51	jsr $5133		jsr	FloatPower
.266f	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.1120028
>2672	ac dc b0 72				.dword	$72b0dcac
>2676	de 00					.byte	$de,$00
.2678	20 88 48	jsr $4888		jsr	FloatSubtract
.267b	20 52 48	jsr $4852		jsr	FPAbs
.267e	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.01
>2681	1f 85 eb 51				.dword	$51eb851f
>2685	db 00					.byte	$db,$00
.2687	20 4f 49	jsr $494f		jsr	FloatCompare
.268a	20 45 48	jsr $4845		jsr	FPAssertCheck
.268d	20 55 48	jsr $4855		jsr	FPPushConstant	; -57.03296347
>2690	97 e0 10 72				.dword	$7210e097
>2694	e7 80					.byte	$e7,$80
.2696	20 2c 4e	jsr $4e2c		jsr	FloatNegate
.2699	20 55 48	jsr $4855		jsr	FPPushConstant	; 57.03296347
>269c	97 e0 10 72				.dword	$7210e097
>26a0	e7 00					.byte	$e7,$00
.26a2	20 4f 49	jsr $494f		jsr	FloatCompare
.26a5	20 19 49	jsr $4919		jsr	CompareEqual
.26a8	20 45 48	jsr $4845		jsr	FPAssertCheck
.26ab	20 55 48	jsr $4855		jsr	FPPushConstant	; -57.03296347
>26ae	97 e0 10 72				.dword	$7210e097
>26b2	e7 80					.byte	$e7,$80
.26b4	20 a5 4a	jsr $4aa5		jsr	FloatIntegerPart
.26b7	20 55 48	jsr $4855		jsr	FPPushConstant	; -57
>26ba	39 00 00 00				.dword	$00000039
>26be	00 80					.byte	$00,$80
.26c0	20 4f 49	jsr $494f		jsr	FloatCompare
.26c3	20 19 49	jsr $4919		jsr	CompareEqual
.26c6	20 45 48	jsr $4845		jsr	FPAssertCheck
.26c9	20 55 48	jsr $4855		jsr	FPPushConstant	; 9.82
>26cc	29 5c 8f 4e				.dword	$4e8f5c29
>26d0	e5 00					.byte	$e5,$00
.26d2	20 50 51	jsr $5150		jsr	FloatSine
.26d5	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.38501312
>26d8	47 38 90 62				.dword	$62903847
>26dc	e0 80					.byte	$e0,$80
.26de	20 88 48	jsr $4888		jsr	FloatSubtract
.26e1	20 52 48	jsr $4852		jsr	FPAbs
.26e4	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>26e7	4c 37 89 41				.dword	$4189374c
>26eb	d8 00					.byte	$d8,$00
.26ed	20 4f 49	jsr $494f		jsr	FloatCompare
.26f0	20 2f 49	jsr $492f		jsr	CompareLess
.26f3	20 45 48	jsr $4845		jsr	FPAssertCheck
.26f6	20 55 48	jsr $4855		jsr	FPPushConstant	; 9.82
>26f9	29 5c 8f 4e				.dword	$4e8f5c29
>26fd	e5 00					.byte	$e5,$00
.26ff	20 b0 4f	jsr $4fb0		jsr	FloatCosine
.2702	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.9229111
>2705	70 f3 21 76				.dword	$7621f370
>2709	e1 80					.byte	$e1,$80
.270b	20 88 48	jsr $4888		jsr	FloatSubtract
.270e	20 52 48	jsr $4852		jsr	FPAbs
.2711	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>2714	4c 37 89 41				.dword	$4189374c
>2718	d8 00					.byte	$d8,$00
.271a	20 4f 49	jsr $494f		jsr	FloatCompare
.271d	20 2f 49	jsr $492f		jsr	CompareLess
.2720	20 45 48	jsr $4845		jsr	FPAssertCheck
.2723	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.18
>2726	c3 f5 28 5c				.dword	$5c28f5c3
>272a	df 00					.byte	$df,$00
.272c	20 c1 51	jsr $51c1		jsr	FloatTangent
.272f	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.18196953
>2732	38 1c 2b 5d				.dword	$5d2b1c38
>2736	df 00					.byte	$df,$00
.2738	20 88 48	jsr $4888		jsr	FloatSubtract
.273b	20 52 48	jsr $4852		jsr	FPAbs
.273e	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>2741	4c 37 89 41				.dword	$4189374c
>2745	d8 00					.byte	$d8,$00
.2747	20 4f 49	jsr $494f		jsr	FloatCompare
.274a	20 45 48	jsr $4845		jsr	FPAssertCheck
.274d	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.126
>2750	6f 12 83 40				.dword	$4083126f
>2754	df 00					.byte	$df,$00
.2756	20 95 4e	jsr $4e95		jsr	FloatArcTan
.2759	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.12533949
>275c	65 7f 2c 40				.dword	$402c7f65
>2760	df 00					.byte	$df,$00
.2762	20 88 48	jsr $4888		jsr	FloatSubtract
.2765	20 52 48	jsr $4852		jsr	FPAbs
.2768	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>276b	4c 37 89 41				.dword	$4189374c
>276f	d8 00					.byte	$d8,$00
.2771	20 4f 49	jsr $494f		jsr	FloatCompare
.2774	20 45 48	jsr $4845		jsr	FPAssertCheck
.2777	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.79
>277a	52 b8 1e 65				.dword	$651eb852
>277e	e1 80					.byte	$e1,$80
.2780	20 bc 4f	jsr $4fbc		jsr	FloatExponent
.2783	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.4538448
>2786	3d 2c 2f 74				.dword	$742f2c3d
>278a	e0 00					.byte	$e0,$00
.278c	20 88 48	jsr $4888		jsr	FloatSubtract
.278f	20 52 48	jsr $4852		jsr	FPAbs
.2792	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>2795	4c 37 89 41				.dword	$4189374c
>2799	d8 00					.byte	$d8,$00
.279b	20 4f 49	jsr $494f		jsr	FloatCompare
.279e	20 45 48	jsr $4845		jsr	FPAssertCheck
.27a1	20 55 48	jsr $4855		jsr	FPPushConstant	; 35.81
>27a4	52 b8 9e 47				.dword	$479eb852
>27a8	e7 00					.byte	$e7,$00
.27aa	20 bf 50	jsr $50bf		jsr	FloatLogarithm
.27ad	20 55 48	jsr $4855		jsr	FPPushConstant	; 3.57822718
>27b0	49 d6 80 72				.dword	$7280d649
>27b4	e3 00					.byte	$e3,$00
.27b6	20 88 48	jsr $4888		jsr	FloatSubtract
.27b9	20 52 48	jsr $4852		jsr	FPAbs
.27bc	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>27bf	4c 37 89 41				.dword	$4189374c
>27c3	d8 00					.byte	$d8,$00
.27c5	20 4f 49	jsr $494f		jsr	FloatCompare
.27c8	20 45 48	jsr $4845		jsr	FPAssertCheck
.27cb	20 55 48	jsr $4855		jsr	FPPushConstant	; 59.7
>27ce	66 66 66 77				.dword	$77666666
>27d2	e7 00					.byte	$e7,$00
.27d4	20 b5 51	jsr $51b5		jsr	FloatSquareRoot
.27d7	20 55 48	jsr $4855		jsr	FPPushConstant	; 7.72657751
>27da	bd 0f a0 7b				.dword	$7ba00fbd
>27de	e4 00					.byte	$e4,$00
.27e0	20 88 48	jsr $4888		jsr	FloatSubtract
.27e3	20 52 48	jsr $4852		jsr	FPAbs
.27e6	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>27e9	4c 37 89 41				.dword	$4189374c
>27ed	d8 00					.byte	$d8,$00
.27ef	20 4f 49	jsr $494f		jsr	FloatCompare
.27f2	20 45 48	jsr $4845		jsr	FPAssertCheck
.27f5	20 55 48	jsr $4855		jsr	FPPushConstant	; 2.16333333
>27f8	d2 06 3a 45				.dword	$453a06d2
>27fc	e3 00					.byte	$e3,$00
.27fe	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.4
>2801	9a 99 99 59				.dword	$5999999a
>2805	e2 00					.byte	$e2,$00
.2807	20 33 51	jsr $5133		jsr	FloatPower
.280a	20 55 48	jsr $4855		jsr	FPPushConstant	; 2.94559354
>280d	62 4d 42 5e				.dword	$5e424d62
>2811	e3 00					.byte	$e3,$00
.2813	20 88 48	jsr $4888		jsr	FloatSubtract
.2816	20 52 48	jsr $4852		jsr	FPAbs
.2819	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.01
>281c	1f 85 eb 51				.dword	$51eb851f
>2820	db 00					.byte	$db,$00
.2822	20 4f 49	jsr $494f		jsr	FloatCompare
.2825	20 45 48	jsr $4845		jsr	FPAssertCheck
.2828	20 55 48	jsr $4855		jsr	FPPushConstant	; -46.93374909
>282b	5c 14 de 5d				.dword	$5dde145c
>282f	e7 80					.byte	$e7,$80
.2831	20 2c 4e	jsr $4e2c		jsr	FloatNegate
.2834	20 55 48	jsr $4855		jsr	FPPushConstant	; 46.93374909
>2837	5c 14 de 5d				.dword	$5dde145c
>283b	e7 00					.byte	$e7,$00
.283d	20 4f 49	jsr $494f		jsr	FloatCompare
.2840	20 19 49	jsr $4919		jsr	CompareEqual
.2843	20 45 48	jsr $4845		jsr	FPAssertCheck
.2846	20 55 48	jsr $4855		jsr	FPPushConstant	; -46.93374909
>2849	5c 14 de 5d				.dword	$5dde145c
>284d	e7 80					.byte	$e7,$80
.284f	20 a5 4a	jsr $4aa5		jsr	FloatIntegerPart
.2852	20 55 48	jsr $4855		jsr	FPPushConstant	; -46
>2855	2e 00 00 00				.dword	$0000002e
>2859	00 80					.byte	$00,$80
.285b	20 4f 49	jsr $494f		jsr	FloatCompare
.285e	20 19 49	jsr $4919		jsr	CompareEqual
.2861	20 45 48	jsr $4845		jsr	FPAssertCheck
.2864	20 55 48	jsr $4855		jsr	FPPushConstant	; -7.33
>2867	14 ae 47 75				.dword	$7547ae14
>286b	e4 80					.byte	$e4,$80
.286d	20 50 51	jsr $5150		jsr	FloatSine
.2870	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.86583391
>2873	44 a5 d3 6e				.dword	$6ed3a544
>2877	e1 80					.byte	$e1,$80
.2879	20 88 48	jsr $4888		jsr	FloatSubtract
.287c	20 52 48	jsr $4852		jsr	FPAbs
.287f	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>2882	4c 37 89 41				.dword	$4189374c
>2886	d8 00					.byte	$d8,$00
.2888	20 4f 49	jsr $494f		jsr	FloatCompare
.288b	20 2f 49	jsr $492f		jsr	CompareLess
.288e	20 45 48	jsr $4845		jsr	FPAssertCheck
.2891	20 55 48	jsr $4855		jsr	FPPushConstant	; -7.33
>2894	14 ae 47 75				.dword	$7547ae14
>2898	e4 80					.byte	$e4,$80
.289a	20 b0 4f	jsr $4fb0		jsr	FloatCosine
.289d	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.50033153
>28a0	13 dd 0a 40				.dword	$400add13
>28a4	e1 00					.byte	$e1,$00
.28a6	20 88 48	jsr $4888		jsr	FloatSubtract
.28a9	20 52 48	jsr $4852		jsr	FPAbs
.28ac	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>28af	4c 37 89 41				.dword	$4189374c
>28b3	d8 00					.byte	$d8,$00
.28b5	20 4f 49	jsr $494f		jsr	FloatCompare
.28b8	20 2f 49	jsr $492f		jsr	CompareLess
.28bb	20 45 48	jsr $4845		jsr	FPAssertCheck
.28be	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.28
>28c1	7b 14 ae 47				.dword	$47ae147b
>28c5	e0 00					.byte	$e0,$00
.28c7	20 c1 51	jsr $51c1		jsr	FloatTangent
.28ca	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.28755433
>28cd	1b 29 9d 49				.dword	$499d291b
>28d1	e0 00					.byte	$e0,$00
.28d3	20 88 48	jsr $4888		jsr	FloatSubtract
.28d6	20 52 48	jsr $4852		jsr	FPAbs
.28d9	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>28dc	4c 37 89 41				.dword	$4189374c
>28e0	d8 00					.byte	$d8,$00
.28e2	20 4f 49	jsr $494f		jsr	FloatCompare
.28e5	20 45 48	jsr $4845		jsr	FPAssertCheck
.28e8	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.844
>28eb	93 18 04 76				.dword	$76041893
>28ef	e2 00					.byte	$e2,$00
.28f1	20 95 4e	jsr $4e95		jsr	FloatArcTan
.28f4	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.07388454
>28f7	39 86 ba 44				.dword	$44ba8639
>28fb	e2 00					.byte	$e2,$00
.28fd	20 88 48	jsr $4888		jsr	FloatSubtract
.2900	20 52 48	jsr $4852		jsr	FPAbs
.2903	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>2906	4c 37 89 41				.dword	$4189374c
>290a	d8 00					.byte	$d8,$00
.290c	20 4f 49	jsr $494f		jsr	FloatCompare
.290f	20 45 48	jsr $4845		jsr	FPAssertCheck
.2912	20 55 48	jsr $4855		jsr	FPPushConstant	; -1.53
>2915	1f 85 eb 61				.dword	$61eb851f
>2919	e2 80					.byte	$e2,$80
.291b	20 bc 4f	jsr $4fbc		jsr	FloatExponent
.291e	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.21653567
>2921	6a c3 dd 6e				.dword	$6eddc36a
>2925	df 00					.byte	$df,$00
.2927	20 88 48	jsr $4888		jsr	FloatSubtract
.292a	20 52 48	jsr $4852		jsr	FPAbs
.292d	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>2930	4c 37 89 41				.dword	$4189374c
>2934	d8 00					.byte	$d8,$00
.2936	20 4f 49	jsr $494f		jsr	FloatCompare
.2939	20 45 48	jsr $4845		jsr	FPAssertCheck
.293c	20 55 48	jsr $4855		jsr	FPPushConstant	; 65.47
>293f	ec 51 78 41				.dword	$417851ec
>2943	e8 00					.byte	$e8,$00
.2945	20 bf 50	jsr $50bf		jsr	FloatLogarithm
.2948	20 55 48	jsr $4855		jsr	FPPushConstant	; 4.18159202
>294b	09 cd e7 42				.dword	$42e7cd09
>294f	e4 00					.byte	$e4,$00
.2951	20 88 48	jsr $4888		jsr	FloatSubtract
.2954	20 52 48	jsr $4852		jsr	FPAbs
.2957	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>295a	4c 37 89 41				.dword	$4189374c
>295e	d8 00					.byte	$d8,$00
.2960	20 4f 49	jsr $494f		jsr	FloatCompare
.2963	20 45 48	jsr $4845		jsr	FPAssertCheck
.2966	20 55 48	jsr $4855		jsr	FPPushConstant	; 79.05
>2969	cd cc 0c 4f				.dword	$4f0ccccd
>296d	e8 00					.byte	$e8,$00
.296f	20 b5 51	jsr $51b5		jsr	FloatSquareRoot
.2972	20 55 48	jsr $4855		jsr	FPPushConstant	; 8.89100669
>2975	1e c8 20 47				.dword	$4720c81e
>2979	e5 00					.byte	$e5,$00
.297b	20 88 48	jsr $4888		jsr	FloatSubtract
.297e	20 52 48	jsr $4852		jsr	FPAbs
.2981	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>2984	4c 37 89 41				.dword	$4189374c
>2988	d8 00					.byte	$d8,$00
.298a	20 4f 49	jsr $494f		jsr	FloatCompare
.298d	20 45 48	jsr $4845		jsr	FPAssertCheck
.2990	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.73666667
>2993	ec 17 4b 5e				.dword	$5e4b17ec
>2997	e1 00					.byte	$e1,$00
.2999	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.7
>299c	cd cc cc 6c				.dword	$6ccccccd
>29a0	e2 00					.byte	$e2,$00
.29a2	20 33 51	jsr $5133		jsr	FloatPower
.29a5	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.59478599
>29a8	84 f2 21 4c				.dword	$4c21f284
>29ac	e1 00					.byte	$e1,$00
.29ae	20 88 48	jsr $4888		jsr	FloatSubtract
.29b1	20 52 48	jsr $4852		jsr	FPAbs
.29b4	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.01
>29b7	1f 85 eb 51				.dword	$51eb851f
>29bb	db 00					.byte	$db,$00
.29bd	20 4f 49	jsr $494f		jsr	FloatCompare
.29c0	20 45 48	jsr $4845		jsr	FPAssertCheck
.29c3	20 55 48	jsr $4855		jsr	FPPushConstant	; -10.41394671
>29c6	4b c3 4f 53				.dword	$534fc34b
>29ca	e5 80					.byte	$e5,$80
.29cc	20 2c 4e	jsr $4e2c		jsr	FloatNegate
.29cf	20 55 48	jsr $4855		jsr	FPPushConstant	; 10.41394671
>29d2	4b c3 4f 53				.dword	$534fc34b
>29d6	e5 00					.byte	$e5,$00
.29d8	20 4f 49	jsr $494f		jsr	FloatCompare
.29db	20 19 49	jsr $4919		jsr	CompareEqual
.29de	20 45 48	jsr $4845		jsr	FPAssertCheck
.29e1	20 55 48	jsr $4855		jsr	FPPushConstant	; -10.41394671
>29e4	4b c3 4f 53				.dword	$534fc34b
>29e8	e5 80					.byte	$e5,$80
.29ea	20 a5 4a	jsr $4aa5		jsr	FloatIntegerPart
.29ed	20 55 48	jsr $4855		jsr	FPPushConstant	; -10
>29f0	0a 00 00 00				.dword	$0000000a
>29f4	00 80					.byte	$00,$80
.29f6	20 4f 49	jsr $494f		jsr	FloatCompare
.29f9	20 19 49	jsr $4919		jsr	CompareEqual
.29fc	20 45 48	jsr $4845		jsr	FPAssertCheck
.29ff	20 55 48	jsr $4855		jsr	FPPushConstant	; -17.24
>2a02	8f c2 f5 44				.dword	$44f5c28f
>2a06	e6 80					.byte	$e6,$80
.2a08	20 50 51	jsr $5150		jsr	FloatSine
.2a0b	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.99924894
>2a0e	a7 63 e7 7f				.dword	$7fe763a7
>2a12	e1 00					.byte	$e1,$00
.2a14	20 88 48	jsr $4888		jsr	FloatSubtract
.2a17	20 52 48	jsr $4852		jsr	FPAbs
.2a1a	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>2a1d	4c 37 89 41				.dword	$4189374c
>2a21	d8 00					.byte	$d8,$00
.2a23	20 4f 49	jsr $494f		jsr	FloatCompare
.2a26	20 2f 49	jsr $492f		jsr	CompareLess
.2a29	20 45 48	jsr $4845		jsr	FPAssertCheck
.2a2c	20 55 48	jsr $4855		jsr	FPPushConstant	; -17.24
>2a2f	8f c2 f5 44				.dword	$44f5c28f
>2a33	e6 80					.byte	$e6,$80
.2a35	20 b0 4f	jsr $4fb0		jsr	FloatCosine
.2a38	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.03874989
>2a3b	32 1a 5c 4f				.dword	$4f5c1a32
>2a3f	dd 80					.byte	$dd,$80
.2a41	20 88 48	jsr $4888		jsr	FloatSubtract
.2a44	20 52 48	jsr $4852		jsr	FPAbs
.2a47	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>2a4a	4c 37 89 41				.dword	$4189374c
>2a4e	d8 00					.byte	$d8,$00
.2a50	20 4f 49	jsr $494f		jsr	FloatCompare
.2a53	20 2f 49	jsr $492f		jsr	CompareLess
.2a56	20 45 48	jsr $4845		jsr	FPAssertCheck
.2a59	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.11
>2a5c	0a d7 a3 70				.dword	$70a3d70a
>2a60	de 00					.byte	$de,$00
.2a62	20 c1 51	jsr $51c1		jsr	FloatTangent
.2a65	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.11044582
>2a68	84 b5 18 71				.dword	$7118b584
>2a6c	de 00					.byte	$de,$00
.2a6e	20 88 48	jsr $4888		jsr	FloatSubtract
.2a71	20 52 48	jsr $4852		jsr	FPAbs
.2a74	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>2a77	4c 37 89 41				.dword	$4189374c
>2a7b	d8 00					.byte	$d8,$00
.2a7d	20 4f 49	jsr $494f		jsr	FloatCompare
.2a80	20 45 48	jsr $4845		jsr	FPAssertCheck
.2a83	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.153
>2a86	19 04 56 4e				.dword	$4e560419
>2a8a	df 00					.byte	$df,$00
.2a8c	20 95 4e	jsr $4e95		jsr	FloatArcTan
.2a8f	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.15182263
>2a92	1d b2 bb 4d				.dword	$4dbbb21d
>2a96	df 00					.byte	$df,$00
.2a98	20 88 48	jsr $4888		jsr	FloatSubtract
.2a9b	20 52 48	jsr $4852		jsr	FPAbs
.2a9e	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>2aa1	4c 37 89 41				.dword	$4189374c
>2aa5	d8 00					.byte	$d8,$00
.2aa7	20 4f 49	jsr $494f		jsr	FloatCompare
.2aaa	20 45 48	jsr $4845		jsr	FPAssertCheck
.2aad	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.7
>2ab0	9a 99 99 59				.dword	$5999999a
>2ab4	e1 80					.byte	$e1,$80
.2ab6	20 bc 4f	jsr $4fbc		jsr	FloatExponent
.2ab9	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.4965853
>2abc	d7 36 20 7f				.dword	$7f2036d7
>2ac0	e0 00					.byte	$e0,$00
.2ac2	20 88 48	jsr $4888		jsr	FloatSubtract
.2ac5	20 52 48	jsr $4852		jsr	FPAbs
.2ac8	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>2acb	4c 37 89 41				.dword	$4189374c
>2acf	d8 00					.byte	$d8,$00
.2ad1	20 4f 49	jsr $494f		jsr	FloatCompare
.2ad4	20 45 48	jsr $4845		jsr	FPAssertCheck
.2ad7	20 55 48	jsr $4855		jsr	FPPushConstant	; 76.94
>2ada	d7 a3 f0 4c				.dword	$4cf0a3d7
>2ade	e8 00					.byte	$e8,$00
.2ae0	20 bf 50	jsr $50bf		jsr	FloatLogarithm
.2ae3	20 55 48	jsr $4855		jsr	FPPushConstant	; 4.3430259
>2ae6	ba 08 7d 45				.dword	$457d08ba
>2aea	e4 00					.byte	$e4,$00
.2aec	20 88 48	jsr $4888		jsr	FloatSubtract
.2aef	20 52 48	jsr $4852		jsr	FPAbs
.2af2	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>2af5	4c 37 89 41				.dword	$4189374c
>2af9	d8 00					.byte	$d8,$00
.2afb	20 4f 49	jsr $494f		jsr	FloatCompare
.2afe	20 45 48	jsr $4845		jsr	FPAssertCheck
.2b01	20 55 48	jsr $4855		jsr	FPPushConstant	; 90.14
>2b04	0a d7 23 5a				.dword	$5a23d70a
>2b08	e8 00					.byte	$e8,$00
.2b0a	20 b5 51	jsr $51b5		jsr	FloatSquareRoot
.2b0d	20 55 48	jsr $4855		jsr	FPPushConstant	; 9.49420876
>2b10	b9 23 f4 4b				.dword	$4bf423b9
>2b14	e5 00					.byte	$e5,$00
.2b16	20 88 48	jsr $4888		jsr	FloatSubtract
.2b19	20 52 48	jsr $4852		jsr	FPAbs
.2b1c	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>2b1f	4c 37 89 41				.dword	$4189374c
>2b23	d8 00					.byte	$d8,$00
.2b25	20 4f 49	jsr $494f		jsr	FloatCompare
.2b28	20 45 48	jsr $4845		jsr	FPAssertCheck
.2b2b	20 55 48	jsr $4855		jsr	FPPushConstant	; 2.42666667
>2b2e	dc 40 a7 4d				.dword	$4da740dc
>2b32	e3 00					.byte	$e3,$00
.2b34	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.9
>2b37	9a 99 99 79				.dword	$7999999a
>2b3b	e2 00					.byte	$e2,$00
.2b3d	20 33 51	jsr $5133		jsr	FloatPower
.2b40	20 55 48	jsr $4855		jsr	FPPushConstant	; 5.38913716
>2b43	e3 e7 39 56				.dword	$5639e7e3
>2b47	e4 00					.byte	$e4,$00
.2b49	20 88 48	jsr $4888		jsr	FloatSubtract
.2b4c	20 52 48	jsr $4852		jsr	FPAbs
.2b4f	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.01
>2b52	1f 85 eb 51				.dword	$51eb851f
>2b56	db 00					.byte	$db,$00
.2b58	20 4f 49	jsr $494f		jsr	FloatCompare
.2b5b	20 45 48	jsr $4845		jsr	FPAssertCheck
.2b5e	20 55 48	jsr $4855		jsr	FPPushConstant	; -65.01830404
>2b61	93 af 04 41				.dword	$4104af93
>2b65	e8 80					.byte	$e8,$80
.2b67	20 2c 4e	jsr $4e2c		jsr	FloatNegate
.2b6a	20 55 48	jsr $4855		jsr	FPPushConstant	; 65.01830404
>2b6d	93 af 04 41				.dword	$4104af93
>2b71	e8 00					.byte	$e8,$00
.2b73	20 4f 49	jsr $494f		jsr	FloatCompare
.2b76	20 19 49	jsr $4919		jsr	CompareEqual
.2b79	20 45 48	jsr $4845		jsr	FPAssertCheck
.2b7c	20 55 48	jsr $4855		jsr	FPPushConstant	; -65.01830404
>2b7f	93 af 04 41				.dword	$4104af93
>2b83	e8 80					.byte	$e8,$80
.2b85	20 a5 4a	jsr $4aa5		jsr	FloatIntegerPart
.2b88	20 55 48	jsr $4855		jsr	FPPushConstant	; -65
>2b8b	41 00 00 00				.dword	$00000041
>2b8f	00 80					.byte	$00,$80
.2b91	20 4f 49	jsr $494f		jsr	FloatCompare
.2b94	20 19 49	jsr $4919		jsr	CompareEqual
.2b97	20 45 48	jsr $4845		jsr	FPAssertCheck
.2b9a	20 55 48	jsr $4855		jsr	FPPushConstant	; 6.29
>2b9d	0a d7 a3 64				.dword	$64a3d70a
>2ba1	e4 00					.byte	$e4,$00
.2ba3	20 50 51	jsr $5150		jsr	FloatSine
.2ba6	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.00681464
>2ba9	fc ab a6 6f				.dword	$6fa6abfc
>2bad	da 00					.byte	$da,$00
.2baf	20 88 48	jsr $4888		jsr	FloatSubtract
.2bb2	20 52 48	jsr $4852		jsr	FPAbs
.2bb5	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>2bb8	4c 37 89 41				.dword	$4189374c
>2bbc	d8 00					.byte	$d8,$00
.2bbe	20 4f 49	jsr $494f		jsr	FloatCompare
.2bc1	20 2f 49	jsr $492f		jsr	CompareLess
.2bc4	20 45 48	jsr $4845		jsr	FPAssertCheck
.2bc7	20 55 48	jsr $4855		jsr	FPPushConstant	; 6.29
>2bca	0a d7 a3 64				.dword	$64a3d70a
>2bce	e4 00					.byte	$e4,$00
.2bd0	20 b0 4f	jsr $4fb0		jsr	FloatCosine
.2bd3	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.99997678
>2bd6	37 3d ff 7f				.dword	$7fff3d37
>2bda	e1 00					.byte	$e1,$00
.2bdc	20 88 48	jsr $4888		jsr	FloatSubtract
.2bdf	20 52 48	jsr $4852		jsr	FPAbs
.2be2	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>2be5	4c 37 89 41				.dword	$4189374c
>2be9	d8 00					.byte	$d8,$00
.2beb	20 4f 49	jsr $494f		jsr	FloatCompare
.2bee	20 2f 49	jsr $492f		jsr	CompareLess
.2bf1	20 45 48	jsr $4845		jsr	FPAssertCheck
.2bf4	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.4
>2bf7	66 66 66 66				.dword	$66666666
>2bfb	e0 00					.byte	$e0,$00
.2bfd	20 c1 51	jsr $51c1		jsr	FloatTangent
.2c00	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.42279322
>2c03	2d 2d 3c 6c				.dword	$6c3c2d2d
>2c07	e0 00					.byte	$e0,$00
.2c09	20 88 48	jsr $4888		jsr	FloatSubtract
.2c0c	20 52 48	jsr $4852		jsr	FPAbs
.2c0f	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>2c12	4c 37 89 41				.dword	$4189374c
>2c16	d8 00					.byte	$d8,$00
.2c18	20 4f 49	jsr $494f		jsr	FloatCompare
.2c1b	20 45 48	jsr $4845		jsr	FPAssertCheck
.2c1e	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.878
>2c21	e9 26 31 78				.dword	$783126e9
>2c25	e2 00					.byte	$e2,$00
.2c27	20 95 4e	jsr $4e95		jsr	FloatArcTan
.2c2a	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.08150253
>2c2d	63 56 37 45				.dword	$45375663
>2c31	e2 00					.byte	$e2,$00
.2c33	20 88 48	jsr $4888		jsr	FloatSubtract
.2c36	20 52 48	jsr $4852		jsr	FPAbs
.2c39	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>2c3c	4c 37 89 41				.dword	$4189374c
>2c40	d8 00					.byte	$d8,$00
.2c42	20 4f 49	jsr $494f		jsr	FloatCompare
.2c45	20 45 48	jsr $4845		jsr	FPAssertCheck
.2c48	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.66
>2c4b	48 e1 7a 54				.dword	$547ae148
>2c4f	e1 00					.byte	$e1,$00
.2c51	20 bc 4f	jsr $4fbc		jsr	FloatExponent
.2c54	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.93479233
>2c57	35 a3 d3 7b				.dword	$7bd3a335
>2c5b	e2 00					.byte	$e2,$00
.2c5d	20 88 48	jsr $4888		jsr	FloatSubtract
.2c60	20 52 48	jsr $4852		jsr	FPAbs
.2c63	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>2c66	4c 37 89 41				.dword	$4189374c
>2c6a	d8 00					.byte	$d8,$00
.2c6c	20 4f 49	jsr $494f		jsr	FloatCompare
.2c6f	20 45 48	jsr $4845		jsr	FPAssertCheck
.2c72	20 55 48	jsr $4855		jsr	FPPushConstant	; 81.88
>2c75	ae 47 e1 51				.dword	$51e147ae
>2c79	e8 00					.byte	$e8,$00
.2c7b	20 bf 50	jsr $50bf		jsr	FloatLogarithm
.2c7e	20 55 48	jsr $4855		jsr	FPPushConstant	; 4.40525476
>2c81	6a ec 7b 46				.dword	$467bec6a
>2c85	e4 00					.byte	$e4,$00
.2c87	20 88 48	jsr $4888		jsr	FloatSubtract
.2c8a	20 52 48	jsr $4852		jsr	FPAbs
.2c8d	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>2c90	4c 37 89 41				.dword	$4189374c
>2c94	d8 00					.byte	$d8,$00
.2c96	20 4f 49	jsr $494f		jsr	FloatCompare
.2c99	20 45 48	jsr $4845		jsr	FPAssertCheck
.2c9c	20 55 48	jsr $4855		jsr	FPPushConstant	; 52.01
>2c9f	b8 1e 05 68				.dword	$68051eb8
>2ca3	e7 00					.byte	$e7,$00
.2ca5	20 b5 51	jsr $51b5		jsr	FloatSquareRoot
.2ca8	20 55 48	jsr $4855		jsr	FPPushConstant	; 7.21179589
>2cab	16 84 63 73				.dword	$73638416
>2caf	e4 00					.byte	$e4,$00
.2cb1	20 88 48	jsr $4888		jsr	FloatSubtract
.2cb4	20 52 48	jsr $4852		jsr	FPAbs
.2cb7	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>2cba	4c 37 89 41				.dword	$4189374c
>2cbe	d8 00					.byte	$d8,$00
.2cc0	20 4f 49	jsr $494f		jsr	FloatCompare
.2cc3	20 45 48	jsr $4845		jsr	FPAssertCheck
.2cc6	20 55 48	jsr $4855		jsr	FPPushConstant	; 2.77
>2cc9	0a d7 a3 58				.dword	$58a3d70a
>2ccd	e3 00					.byte	$e3,$00
.2ccf	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.9
>2cd2	33 33 33 73				.dword	$73333333
>2cd6	e1 00					.byte	$e1,$00
.2cd8	20 33 51	jsr $5133		jsr	FloatPower
.2cdb	20 55 48	jsr $4855		jsr	FPPushConstant	; 2.50168021
>2cde	a8 c3 0d 50				.dword	$500dc3a8
>2ce2	e3 00					.byte	$e3,$00
.2ce4	20 88 48	jsr $4888		jsr	FloatSubtract
.2ce7	20 52 48	jsr $4852		jsr	FPAbs
.2cea	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.01
>2ced	1f 85 eb 51				.dword	$51eb851f
>2cf1	db 00					.byte	$db,$00
.2cf3	20 4f 49	jsr $494f		jsr	FloatCompare
.2cf6	20 45 48	jsr $4845		jsr	FPAssertCheck
.2cf9	20 55 48	jsr $4855		jsr	FPPushConstant	; -78.33433223
>2cfc	cc 96 55 4e				.dword	$4e5596cc
>2d00	e8 80					.byte	$e8,$80
.2d02	20 2c 4e	jsr $4e2c		jsr	FloatNegate
.2d05	20 55 48	jsr $4855		jsr	FPPushConstant	; 78.33433223
>2d08	cc 96 55 4e				.dword	$4e5596cc
>2d0c	e8 00					.byte	$e8,$00
.2d0e	20 4f 49	jsr $494f		jsr	FloatCompare
.2d11	20 19 49	jsr $4919		jsr	CompareEqual
.2d14	20 45 48	jsr $4845		jsr	FPAssertCheck
.2d17	20 55 48	jsr $4855		jsr	FPPushConstant	; -78.33433223
>2d1a	cc 96 55 4e				.dword	$4e5596cc
>2d1e	e8 80					.byte	$e8,$80
.2d20	20 a5 4a	jsr $4aa5		jsr	FloatIntegerPart
.2d23	20 55 48	jsr $4855		jsr	FPPushConstant	; -78
>2d26	4e 00 00 00				.dword	$0000004e
>2d2a	00 80					.byte	$00,$80
.2d2c	20 4f 49	jsr $494f		jsr	FloatCompare
.2d2f	20 19 49	jsr $4919		jsr	CompareEqual
.2d32	20 45 48	jsr $4845		jsr	FPAssertCheck
.2d35	20 55 48	jsr $4855		jsr	FPPushConstant	; -17.4
>2d38	9a 99 99 45				.dword	$4599999a
>2d3c	e6 80					.byte	$e6,$80
.2d3e	20 50 51	jsr $5150		jsr	FloatSine
.2d41	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.99265938
>2d44	6b 76 0f 7f				.dword	$7f0f766b
>2d48	e1 00					.byte	$e1,$00
.2d4a	20 88 48	jsr $4888		jsr	FloatSubtract
.2d4d	20 52 48	jsr $4852		jsr	FPAbs
.2d50	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>2d53	4c 37 89 41				.dword	$4189374c
>2d57	d8 00					.byte	$d8,$00
.2d59	20 4f 49	jsr $494f		jsr	FloatCompare
.2d5c	20 2f 49	jsr $492f		jsr	CompareLess
.2d5f	20 45 48	jsr $4845		jsr	FPAssertCheck
.2d62	20 55 48	jsr $4855		jsr	FPPushConstant	; -17.4
>2d65	9a 99 99 45				.dword	$4599999a
>2d69	e6 80					.byte	$e6,$80
.2d6b	20 b0 4f	jsr $4fb0		jsr	FloatCosine
.2d6e	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.1209436
>2d71	9b a3 d8 7b				.dword	$7bd8a39b
>2d75	de 00					.byte	$de,$00
.2d77	20 88 48	jsr $4888		jsr	FloatSubtract
.2d7a	20 52 48	jsr $4852		jsr	FPAbs
.2d7d	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>2d80	4c 37 89 41				.dword	$4189374c
>2d84	d8 00					.byte	$d8,$00
.2d86	20 4f 49	jsr $494f		jsr	FloatCompare
.2d89	20 2f 49	jsr $492f		jsr	CompareLess
.2d8c	20 45 48	jsr $4845		jsr	FPAssertCheck
.2d8f	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.27
>2d92	52 b8 1e 45				.dword	$451eb852
>2d96	e0 00					.byte	$e0,$00
.2d98	20 c1 51	jsr $51c1		jsr	FloatTangent
.2d9b	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.27675814
>2d9e	18 9f d9 46				.dword	$46d99f18
>2da2	e0 00					.byte	$e0,$00
.2da4	20 88 48	jsr $4888		jsr	FloatSubtract
.2da7	20 52 48	jsr $4852		jsr	FPAbs
.2daa	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>2dad	4c 37 89 41				.dword	$4189374c
>2db1	d8 00					.byte	$d8,$00
.2db3	20 4f 49	jsr $494f		jsr	FloatCompare
.2db6	20 45 48	jsr $4845		jsr	FPAssertCheck
.2db9	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.59
>2dbc	b8 1e 85 4b				.dword	$4b851eb8
>2dc0	e1 00					.byte	$e1,$00
.2dc2	20 95 4e	jsr $4e95		jsr	FloatArcTan
.2dc5	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.53303411
>2dc8	33 76 3a 44				.dword	$443a7633
>2dcc	e1 00					.byte	$e1,$00
.2dce	20 88 48	jsr $4888		jsr	FloatSubtract
.2dd1	20 52 48	jsr $4852		jsr	FPAbs
.2dd4	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>2dd7	4c 37 89 41				.dword	$4189374c
>2ddb	d8 00					.byte	$d8,$00
.2ddd	20 4f 49	jsr $494f		jsr	FloatCompare
.2de0	20 45 48	jsr $4845		jsr	FPAssertCheck
.2de3	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.51
>2de6	0a d7 a3 60				.dword	$60a3d70a
>2dea	e2 00					.byte	$e2,$00
.2dec	20 bc 4f	jsr $4fbc		jsr	FloatExponent
.2def	20 55 48	jsr $4855		jsr	FPPushConstant	; 4.52673079
>2df2	44 7d 6d 48				.dword	$486d7d44
>2df6	e4 00					.byte	$e4,$00
.2df8	20 88 48	jsr $4888		jsr	FloatSubtract
.2dfb	20 52 48	jsr $4852		jsr	FPAbs
.2dfe	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>2e01	4c 37 89 41				.dword	$4189374c
>2e05	d8 00					.byte	$d8,$00
.2e07	20 4f 49	jsr $494f		jsr	FloatCompare
.2e0a	20 45 48	jsr $4845		jsr	FPAssertCheck
.2e0d	20 55 48	jsr $4855		jsr	FPPushConstant	; 92.01
>2e10	5c 8f 02 5c				.dword	$5c028f5c
>2e14	e8 00					.byte	$e8,$00
.2e16	20 bf 50	jsr $50bf		jsr	FloatLogarithm
.2e19	20 55 48	jsr $4855		jsr	FPPushConstant	; 4.52189727
>2e1c	f4 b0 59 48				.dword	$4859b0f4
>2e20	e4 00					.byte	$e4,$00
.2e22	20 88 48	jsr $4888		jsr	FloatSubtract
.2e25	20 52 48	jsr $4852		jsr	FPAbs
.2e28	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>2e2b	4c 37 89 41				.dword	$4189374c
>2e2f	d8 00					.byte	$d8,$00
.2e31	20 4f 49	jsr $494f		jsr	FloatCompare
.2e34	20 45 48	jsr $4845		jsr	FPAssertCheck
.2e37	20 55 48	jsr $4855		jsr	FPPushConstant	; 67.18
>2e3a	7b 14 2e 43				.dword	$432e147b
>2e3e	e8 00					.byte	$e8,$00
.2e40	20 b5 51	jsr $51b5		jsr	FloatSquareRoot
.2e43	20 55 48	jsr $4855		jsr	FPPushConstant	; 8.19634065
>2e46	0c 1b 92 41				.dword	$41921b0c
>2e4a	e5 00					.byte	$e5,$00
.2e4c	20 88 48	jsr $4888		jsr	FloatSubtract
.2e4f	20 52 48	jsr $4852		jsr	FPAbs
.2e52	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>2e55	4c 37 89 41				.dword	$4189374c
>2e59	d8 00					.byte	$d8,$00
.2e5b	20 4f 49	jsr $494f		jsr	FloatCompare
.2e5e	20 45 48	jsr $4845		jsr	FPAssertCheck
.2e61	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.62
>2e64	7b 14 ae 67				.dword	$67ae147b
>2e68	e2 00					.byte	$e2,$00
.2e6a	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.4
>2e6d	9a 99 99 59				.dword	$5999999a
>2e71	e2 00					.byte	$e2,$00
.2e73	20 33 51	jsr $5133		jsr	FloatPower
.2e76	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.96481208
>2e79	2b 7b bf 7d				.dword	$7dbf7b2b
>2e7d	e2 00					.byte	$e2,$00
.2e7f	20 88 48	jsr $4888		jsr	FloatSubtract
.2e82	20 52 48	jsr $4852		jsr	FPAbs
.2e85	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.01
>2e88	1f 85 eb 51				.dword	$51eb851f
>2e8c	db 00					.byte	$db,$00
.2e8e	20 4f 49	jsr $494f		jsr	FloatCompare
.2e91	20 45 48	jsr $4845		jsr	FPAssertCheck
.2e94	20 55 48	jsr $4855		jsr	FPPushConstant	; 66.68138009
>2e97	ed 6e ae 42				.dword	$42ae6eed
>2e9b	e8 00					.byte	$e8,$00
.2e9d	20 2c 4e	jsr $4e2c		jsr	FloatNegate
.2ea0	20 55 48	jsr $4855		jsr	FPPushConstant	; -66.68138009
>2ea3	ed 6e ae 42				.dword	$42ae6eed
>2ea7	e8 80					.byte	$e8,$80
.2ea9	20 4f 49	jsr $494f		jsr	FloatCompare
.2eac	20 19 49	jsr $4919		jsr	CompareEqual
.2eaf	20 45 48	jsr $4845		jsr	FPAssertCheck
.2eb2	20 55 48	jsr $4855		jsr	FPPushConstant	; 66.68138009
>2eb5	ed 6e ae 42				.dword	$42ae6eed
>2eb9	e8 00					.byte	$e8,$00
.2ebb	20 a5 4a	jsr $4aa5		jsr	FloatIntegerPart
.2ebe	20 55 48	jsr $4855		jsr	FPPushConstant	; 66
>2ec1	42 00 00 00				.dword	$00000042
>2ec5	00 00					.byte	$00,$00
.2ec7	20 4f 49	jsr $494f		jsr	FloatCompare
.2eca	20 19 49	jsr $4919		jsr	CompareEqual
.2ecd	20 45 48	jsr $4845		jsr	FPAssertCheck
.2ed0	20 55 48	jsr $4855		jsr	FPPushConstant	; -14.91
>2ed3	14 ae 47 77				.dword	$7747ae14
>2ed7	e5 80					.byte	$e5,$80
.2ed9	20 50 51	jsr $5150		jsr	FloatSine
.2edc	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.7159356
>2edf	1a c7 a3 5b				.dword	$5ba3c71a
>2ee3	e1 80					.byte	$e1,$80
.2ee5	20 88 48	jsr $4888		jsr	FloatSubtract
.2ee8	20 52 48	jsr $4852		jsr	FPAbs
.2eeb	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>2eee	4c 37 89 41				.dword	$4189374c
>2ef2	d8 00					.byte	$d8,$00
.2ef4	20 4f 49	jsr $494f		jsr	FloatCompare
.2ef7	20 2f 49	jsr $492f		jsr	CompareLess
.2efa	20 45 48	jsr $4845		jsr	FPAssertCheck
.2efd	20 55 48	jsr $4855		jsr	FPPushConstant	; -14.91
>2f00	14 ae 47 77				.dword	$7747ae14
>2f04	e5 80					.byte	$e5,$80
.2f06	20 b0 4f	jsr $4fb0		jsr	FloatCosine
.2f09	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.69816633
>2f0c	a9 83 5d 59				.dword	$595d83a9
>2f10	e1 80					.byte	$e1,$80
.2f12	20 88 48	jsr $4888		jsr	FloatSubtract
.2f15	20 52 48	jsr $4852		jsr	FPAbs
.2f18	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>2f1b	4c 37 89 41				.dword	$4189374c
>2f1f	d8 00					.byte	$d8,$00
.2f21	20 4f 49	jsr $494f		jsr	FloatCompare
.2f24	20 2f 49	jsr $492f		jsr	CompareLess
.2f27	20 45 48	jsr $4845		jsr	FPAssertCheck
.2f2a	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.28
>2f2d	7b 14 ae 47				.dword	$47ae147b
>2f31	e0 00					.byte	$e0,$00
.2f33	20 c1 51	jsr $51c1		jsr	FloatTangent
.2f36	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.28755433
>2f39	1b 29 9d 49				.dword	$499d291b
>2f3d	e0 00					.byte	$e0,$00
.2f3f	20 88 48	jsr $4888		jsr	FloatSubtract
.2f42	20 52 48	jsr $4852		jsr	FPAbs
.2f45	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>2f48	4c 37 89 41				.dword	$4189374c
>2f4c	d8 00					.byte	$d8,$00
.2f4e	20 4f 49	jsr $494f		jsr	FloatCompare
.2f51	20 45 48	jsr $4845		jsr	FPAssertCheck
.2f54	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.434
>2f57	be 9f 1a 6f				.dword	$6f1a9fbe
>2f5b	e0 00					.byte	$e0,$00
.2f5d	20 95 4e	jsr $4e95		jsr	FloatArcTan
.2f60	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.40946896
>2f63	30 f5 d2 68				.dword	$68d2f530
>2f67	e0 00					.byte	$e0,$00
.2f69	20 88 48	jsr $4888		jsr	FloatSubtract
.2f6c	20 52 48	jsr $4852		jsr	FPAbs
.2f6f	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>2f72	4c 37 89 41				.dword	$4189374c
>2f76	d8 00					.byte	$d8,$00
.2f78	20 4f 49	jsr $494f		jsr	FloatCompare
.2f7b	20 45 48	jsr $4845		jsr	FPAssertCheck
.2f7e	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.93
>2f81	71 3d 0a 77				.dword	$770a3d71
>2f85	e1 00					.byte	$e1,$00
.2f87	20 bc 4f	jsr $4fbc		jsr	FloatExponent
.2f8a	20 55 48	jsr $4855		jsr	FPPushConstant	; 2.53450918
>2f8d	ff b2 1a 51				.dword	$511ab2ff
>2f91	e3 00					.byte	$e3,$00
.2f93	20 88 48	jsr $4888		jsr	FloatSubtract
.2f96	20 52 48	jsr $4852		jsr	FPAbs
.2f99	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>2f9c	4c 37 89 41				.dword	$4189374c
>2fa0	d8 00					.byte	$d8,$00
.2fa2	20 4f 49	jsr $494f		jsr	FloatCompare
.2fa5	20 45 48	jsr $4845		jsr	FPAssertCheck
.2fa8	20 55 48	jsr $4855		jsr	FPPushConstant	; 6.19
>2fab	71 3d 0a 63				.dword	$630a3d71
>2faf	e4 00					.byte	$e4,$00
.2fb1	20 bf 50	jsr $50bf		jsr	FloatLogarithm
.2fb4	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.82293509
>2fb7	f1 f7 aa 74				.dword	$74aaf7f1
>2fbb	e2 00					.byte	$e2,$00
.2fbd	20 88 48	jsr $4888		jsr	FloatSubtract
.2fc0	20 52 48	jsr $4852		jsr	FPAbs
.2fc3	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>2fc6	4c 37 89 41				.dword	$4189374c
>2fca	d8 00					.byte	$d8,$00
.2fcc	20 4f 49	jsr $494f		jsr	FloatCompare
.2fcf	20 45 48	jsr $4845		jsr	FPAssertCheck
.2fd2	20 55 48	jsr $4855		jsr	FPPushConstant	; 49.2
>2fd5	66 66 66 62				.dword	$62666666
>2fd9	e7 00					.byte	$e7,$00
.2fdb	20 b5 51	jsr $51b5		jsr	FloatSquareRoot
.2fde	20 55 48	jsr $4855		jsr	FPPushConstant	; 7.01427117
>2fe1	68 74 3a 70				.dword	$703a7468
>2fe5	e4 00					.byte	$e4,$00
.2fe7	20 88 48	jsr $4888		jsr	FloatSubtract
.2fea	20 52 48	jsr $4852		jsr	FPAbs
.2fed	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>2ff0	4c 37 89 41				.dword	$4189374c
>2ff4	d8 00					.byte	$d8,$00
.2ff6	20 4f 49	jsr $494f		jsr	FloatCompare
.2ff9	20 45 48	jsr $4845		jsr	FPAssertCheck
.2ffc	20 55 48	jsr $4855		jsr	FPPushConstant	; 2.35
>2fff	33 33 33 4b				.dword	$4b333333
>3003	e3 00					.byte	$e3,$00
.3005	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.8
>3008	33 33 33 73				.dword	$73333333
>300c	e2 00					.byte	$e2,$00
.300e	20 33 51	jsr $5133		jsr	FloatPower
.3011	20 55 48	jsr $4855		jsr	FPPushConstant	; 4.65502644
>3014	01 fd 7a 4a				.dword	$4a7afd01
>3018	e4 00					.byte	$e4,$00
.301a	20 88 48	jsr $4888		jsr	FloatSubtract
.301d	20 52 48	jsr $4852		jsr	FPAbs
.3020	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.01
>3023	1f 85 eb 51				.dword	$51eb851f
>3027	db 00					.byte	$db,$00
.3029	20 4f 49	jsr $494f		jsr	FloatCompare
.302c	20 45 48	jsr $4845		jsr	FPAssertCheck
.302f	20 55 48	jsr $4855		jsr	FPPushConstant	; 24.44853001
>3032	73 4b cb 61				.dword	$61cb4b73
>3036	e6 00					.byte	$e6,$00
.3038	20 2c 4e	jsr $4e2c		jsr	FloatNegate
.303b	20 55 48	jsr $4855		jsr	FPPushConstant	; -24.44853001
>303e	73 4b cb 61				.dword	$61cb4b73
>3042	e6 80					.byte	$e6,$80
.3044	20 4f 49	jsr $494f		jsr	FloatCompare
.3047	20 19 49	jsr $4919		jsr	CompareEqual
.304a	20 45 48	jsr $4845		jsr	FPAssertCheck
.304d	20 55 48	jsr $4855		jsr	FPPushConstant	; 24.44853001
>3050	73 4b cb 61				.dword	$61cb4b73
>3054	e6 00					.byte	$e6,$00
.3056	20 a5 4a	jsr $4aa5		jsr	FloatIntegerPart
.3059	20 55 48	jsr $4855		jsr	FPPushConstant	; 24
>305c	18 00 00 00				.dword	$00000018
>3060	00 00					.byte	$00,$00
.3062	20 4f 49	jsr $494f		jsr	FloatCompare
.3065	20 19 49	jsr $4919		jsr	CompareEqual
.3068	20 45 48	jsr $4845		jsr	FPAssertCheck
.306b	20 55 48	jsr $4855		jsr	FPPushConstant	; -10.21
>306e	7b 14 ae 51				.dword	$51ae147b
>3072	e5 80					.byte	$e5,$80
.3074	20 50 51	jsr $5150		jsr	FloatSine
.3077	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.70698223
>307a	ca 64 7e 5a				.dword	$5a7e64ca
>307e	e1 00					.byte	$e1,$00
.3080	20 88 48	jsr $4888		jsr	FloatSubtract
.3083	20 52 48	jsr $4852		jsr	FPAbs
.3086	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>3089	4c 37 89 41				.dword	$4189374c
>308d	d8 00					.byte	$d8,$00
.308f	20 4f 49	jsr $494f		jsr	FloatCompare
.3092	20 2f 49	jsr $492f		jsr	CompareLess
.3095	20 45 48	jsr $4845		jsr	FPAssertCheck
.3098	20 55 48	jsr $4855		jsr	FPPushConstant	; -10.21
>309b	7b 14 ae 51				.dword	$51ae147b
>309f	e5 80					.byte	$e5,$80
.30a1	20 b0 4f	jsr $4fb0		jsr	FloatCosine
.30a4	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.70723131
>30a7	3a 8e 86 5a				.dword	$5a868e3a
>30ab	e1 80					.byte	$e1,$80
.30ad	20 88 48	jsr $4888		jsr	FloatSubtract
.30b0	20 52 48	jsr $4852		jsr	FPAbs
.30b3	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>30b6	4c 37 89 41				.dword	$4189374c
>30ba	d8 00					.byte	$d8,$00
.30bc	20 4f 49	jsr $494f		jsr	FloatCompare
.30bf	20 2f 49	jsr $492f		jsr	CompareLess
.30c2	20 45 48	jsr $4845		jsr	FPAssertCheck
.30c5	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.26
>30c8	29 5c 8f 42				.dword	$428f5c29
>30cc	e0 00					.byte	$e0,$00
.30ce	20 c1 51	jsr $51c1		jsr	FloatTangent
.30d1	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.26602154
>30d4	d6 fc 19 44				.dword	$4419fcd6
>30d8	e0 00					.byte	$e0,$00
.30da	20 88 48	jsr $4888		jsr	FloatSubtract
.30dd	20 52 48	jsr $4852		jsr	FPAbs
.30e0	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>30e3	4c 37 89 41				.dword	$4189374c
>30e7	d8 00					.byte	$d8,$00
.30e9	20 4f 49	jsr $494f		jsr	FloatCompare
.30ec	20 45 48	jsr $4845		jsr	FPAssertCheck
.30ef	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.312
>30f2	d9 ce f7 53				.dword	$53f7ced9
>30f6	e2 00					.byte	$e2,$00
.30f8	20 95 4e	jsr $4e95		jsr	FloatArcTan
.30fb	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.91953592
>30fe	60 5a b3 75				.dword	$75b35a60
>3102	e1 00					.byte	$e1,$00
.3104	20 88 48	jsr $4888		jsr	FloatSubtract
.3107	20 52 48	jsr $4852		jsr	FPAbs
.310a	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>310d	4c 37 89 41				.dword	$4189374c
>3111	d8 00					.byte	$d8,$00
.3113	20 4f 49	jsr $494f		jsr	FloatCompare
.3116	20 45 48	jsr $4845		jsr	FPAssertCheck
.3119	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.92
>311c	5c 8f c2 75				.dword	$75c28f5c
>3120	e1 80					.byte	$e1,$80
.3122	20 bc 4f	jsr $4fbc		jsr	FloatExponent
.3125	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.39851904
>3128	04 58 05 66				.dword	$66055804
>312c	e0 00					.byte	$e0,$00
.312e	20 88 48	jsr $4888		jsr	FloatSubtract
.3131	20 52 48	jsr $4852		jsr	FPAbs
.3134	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>3137	4c 37 89 41				.dword	$4189374c
>313b	d8 00					.byte	$d8,$00
.313d	20 4f 49	jsr $494f		jsr	FloatCompare
.3140	20 45 48	jsr $4845		jsr	FPAssertCheck
.3143	20 55 48	jsr $4855		jsr	FPPushConstant	; 62.52
>3146	71 3d 0a 7d				.dword	$7d0a3d71
>314a	e7 00					.byte	$e7,$00
.314c	20 bf 50	jsr $50bf		jsr	FloatLogarithm
.314f	20 55 48	jsr $4855		jsr	FPPushConstant	; 4.13548651
>3152	e7 f3 2a 42				.dword	$422af3e7
>3156	e4 00					.byte	$e4,$00
.3158	20 88 48	jsr $4888		jsr	FloatSubtract
.315b	20 52 48	jsr $4852		jsr	FPAbs
.315e	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>3161	4c 37 89 41				.dword	$4189374c
>3165	d8 00					.byte	$d8,$00
.3167	20 4f 49	jsr $494f		jsr	FloatCompare
.316a	20 45 48	jsr $4845		jsr	FPAssertCheck
.316d	20 55 48	jsr $4855		jsr	FPPushConstant	; 80.99
>3170	a4 70 fd 50				.dword	$50fd70a4
>3174	e8 00					.byte	$e8,$00
.3176	20 b5 51	jsr $51b5		jsr	FloatSquareRoot
.3179	20 55 48	jsr $4855		jsr	FPPushConstant	; 8.99944443
>317c	b9 dc fe 47				.dword	$47fedcb9
>3180	e5 00					.byte	$e5,$00
.3182	20 88 48	jsr $4888		jsr	FloatSubtract
.3185	20 52 48	jsr $4852		jsr	FPAbs
.3188	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>318b	4c 37 89 41				.dword	$4189374c
>318f	d8 00					.byte	$d8,$00
.3191	20 4f 49	jsr $494f		jsr	FloatCompare
.3194	20 45 48	jsr $4845		jsr	FPAssertCheck
.3197	20 55 48	jsr $4855		jsr	FPPushConstant	; 3.2
>319a	66 66 66 66				.dword	$66666666
>319e	e3 00					.byte	$e3,$00
.31a0	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.8
>31a3	66 66 66 66				.dword	$66666666
>31a7	e1 00					.byte	$e1,$00
.31a9	20 33 51	jsr $5133		jsr	FloatPower
.31ac	20 55 48	jsr $4855		jsr	FPPushConstant	; 2.53582911
>31af	17 83 25 51				.dword	$51258317
>31b3	e3 00					.byte	$e3,$00
.31b5	20 88 48	jsr $4888		jsr	FloatSubtract
.31b8	20 52 48	jsr $4852		jsr	FPAbs
.31bb	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.01
>31be	1f 85 eb 51				.dword	$51eb851f
>31c2	db 00					.byte	$db,$00
.31c4	20 4f 49	jsr $494f		jsr	FloatCompare
.31c7	20 45 48	jsr $4845		jsr	FPAssertCheck
.31ca	20 55 48	jsr $4855		jsr	FPPushConstant	; 6.51389001
>31cd	bb e4 38 68				.dword	$6838e4bb
>31d1	e4 00					.byte	$e4,$00
.31d3	20 2c 4e	jsr $4e2c		jsr	FloatNegate
.31d6	20 55 48	jsr $4855		jsr	FPPushConstant	; -6.51389001
>31d9	bb e4 38 68				.dword	$6838e4bb
>31dd	e4 80					.byte	$e4,$80
.31df	20 4f 49	jsr $494f		jsr	FloatCompare
.31e2	20 19 49	jsr $4919		jsr	CompareEqual
.31e5	20 45 48	jsr $4845		jsr	FPAssertCheck
.31e8	20 55 48	jsr $4855		jsr	FPPushConstant	; 6.51389001
>31eb	bb e4 38 68				.dword	$6838e4bb
>31ef	e4 00					.byte	$e4,$00
.31f1	20 a5 4a	jsr $4aa5		jsr	FloatIntegerPart
.31f4	20 55 48	jsr $4855		jsr	FPPushConstant	; 6
>31f7	06 00 00 00				.dword	$00000006
>31fb	00 00					.byte	$00,$00
.31fd	20 4f 49	jsr $494f		jsr	FloatCompare
.3200	20 19 49	jsr $4919		jsr	CompareEqual
.3203	20 45 48	jsr $4845		jsr	FPAssertCheck
.3206	20 55 48	jsr $4855		jsr	FPPushConstant	; -4.7
>3209	33 33 33 4b				.dword	$4b333333
>320d	e4 80					.byte	$e4,$80
.320f	20 50 51	jsr $5150		jsr	FloatSine
.3212	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.99992326
>3215	42 7c fd 7f				.dword	$7ffd7c42
>3219	e1 00					.byte	$e1,$00
.321b	20 88 48	jsr $4888		jsr	FloatSubtract
.321e	20 52 48	jsr $4852		jsr	FPAbs
.3221	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>3224	4c 37 89 41				.dword	$4189374c
>3228	d8 00					.byte	$d8,$00
.322a	20 4f 49	jsr $494f		jsr	FloatCompare
.322d	20 2f 49	jsr $492f		jsr	CompareLess
.3230	20 45 48	jsr $4845		jsr	FPAssertCheck
.3233	20 55 48	jsr $4855		jsr	FPPushConstant	; -4.7
>3236	33 33 33 4b				.dword	$4b333333
>323a	e4 80					.byte	$e4,$80
.323c	20 b0 4f	jsr $4fb0		jsr	FloatCosine
.323f	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.01238866
>3242	31 e7 7c 65				.dword	$657ce731
>3246	db 80					.byte	$db,$80
.3248	20 88 48	jsr $4888		jsr	FloatSubtract
.324b	20 52 48	jsr $4852		jsr	FPAbs
.324e	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>3251	4c 37 89 41				.dword	$4189374c
>3255	d8 00					.byte	$d8,$00
.3257	20 4f 49	jsr $494f		jsr	FloatCompare
.325a	20 2f 49	jsr $492f		jsr	CompareLess
.325d	20 45 48	jsr $4845		jsr	FPAssertCheck
.3260	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.29
>3263	a4 70 3d 4a				.dword	$4a3d70a4
>3267	e0 00					.byte	$e0,$00
.3269	20 c1 51	jsr $51c1		jsr	FloatTangent
.326c	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.29841279
>326f	d6 c7 64 4c				.dword	$4c64c7d6
>3273	e0 00					.byte	$e0,$00
.3275	20 88 48	jsr $4888		jsr	FloatSubtract
.3278	20 52 48	jsr $4852		jsr	FPAbs
.327b	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>327e	4c 37 89 41				.dword	$4189374c
>3282	d8 00					.byte	$d8,$00
.3284	20 4f 49	jsr $494f		jsr	FloatCompare
.3287	20 45 48	jsr $4845		jsr	FPAssertCheck
.328a	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.45
>328d	cd cc cc 5c				.dword	$5ccccccd
>3291	e2 00					.byte	$e2,$00
.3293	20 95 4e	jsr $4e95		jsr	FloatArcTan
.3296	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.96704699
>3299	1e 32 c8 7b				.dword	$7bc8321e
>329d	e1 00					.byte	$e1,$00
.329f	20 88 48	jsr $4888		jsr	FloatSubtract
.32a2	20 52 48	jsr $4852		jsr	FPAbs
.32a5	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>32a8	4c 37 89 41				.dword	$4189374c
>32ac	d8 00					.byte	$d8,$00
.32ae	20 4f 49	jsr $494f		jsr	FloatCompare
.32b1	20 45 48	jsr $4845		jsr	FPAssertCheck
.32b4	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.77
>32b7	14 ae 47 71				.dword	$7147ae14
>32bb	e2 00					.byte	$e2,$00
.32bd	20 bc 4f	jsr $4fbc		jsr	FloatExponent
.32c0	20 55 48	jsr $4855		jsr	FPPushConstant	; 5.87085336
>32c3	ef 03 ef 5d				.dword	$5def03ef
>32c7	e4 00					.byte	$e4,$00
.32c9	20 88 48	jsr $4888		jsr	FloatSubtract
.32cc	20 52 48	jsr $4852		jsr	FPAbs
.32cf	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>32d2	4c 37 89 41				.dword	$4189374c
>32d6	d8 00					.byte	$d8,$00
.32d8	20 4f 49	jsr $494f		jsr	FloatCompare
.32db	20 45 48	jsr $4845		jsr	FPAssertCheck
.32de	20 55 48	jsr $4855		jsr	FPPushConstant	; 19.54
>32e1	c3 f5 28 4e				.dword	$4e28f5c3
>32e5	e6 00					.byte	$e6,$00
.32e7	20 bf 50	jsr $50bf		jsr	FloatLogarithm
.32ea	20 55 48	jsr $4855		jsr	FPPushConstant	; 2.97246365
>32ed	17 6c 1e 5f				.dword	$5f1e6c17
>32f1	e3 00					.byte	$e3,$00
.32f3	20 88 48	jsr $4888		jsr	FloatSubtract
.32f6	20 52 48	jsr $4852		jsr	FPAbs
.32f9	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>32fc	4c 37 89 41				.dword	$4189374c
>3300	d8 00					.byte	$d8,$00
.3302	20 4f 49	jsr $494f		jsr	FloatCompare
.3305	20 45 48	jsr $4845		jsr	FPAssertCheck
.3308	20 55 48	jsr $4855		jsr	FPPushConstant	; 66.39
>330b	0a d7 63 42				.dword	$4263d70a
>330f	e8 00					.byte	$e8,$00
.3311	20 b5 51	jsr $51b5		jsr	FloatSquareRoot
.3314	20 55 48	jsr $4855		jsr	FPPushConstant	; 8.14800589
>3317	b6 1d 2f 41				.dword	$412f1db6
>331b	e5 00					.byte	$e5,$00
.331d	20 88 48	jsr $4888		jsr	FloatSubtract
.3320	20 52 48	jsr $4852		jsr	FPAbs
.3323	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>3326	4c 37 89 41				.dword	$4189374c
>332a	d8 00					.byte	$d8,$00
.332c	20 4f 49	jsr $494f		jsr	FloatCompare
.332f	20 45 48	jsr $4845		jsr	FPAssertCheck
.3332	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.58
>3335	a4 70 3d 4a				.dword	$4a3d70a4
>3339	e1 00					.byte	$e1,$00
.333b	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.8
>333e	33 33 33 73				.dword	$73333333
>3342	e2 00					.byte	$e2,$00
.3344	20 33 51	jsr $5133		jsr	FloatPower
.3347	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.37512015
>334a	c8 df 07 60				.dword	$6007dfc8
>334e	e0 00					.byte	$e0,$00
.3350	20 88 48	jsr $4888		jsr	FloatSubtract
.3353	20 52 48	jsr $4852		jsr	FPAbs
.3356	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.01
>3359	1f 85 eb 51				.dword	$51eb851f
>335d	db 00					.byte	$db,$00
.335f	20 4f 49	jsr $494f		jsr	FloatCompare
.3362	20 45 48	jsr $4845		jsr	FPAssertCheck
.3365	20 55 48	jsr $4855		jsr	FPPushConstant	; -1.45152669
>3368	34 d0 e5 5c				.dword	$5ce5d034
>336c	e2 80					.byte	$e2,$80
.336e	20 2c 4e	jsr $4e2c		jsr	FloatNegate
.3371	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.45152669
>3374	34 d0 e5 5c				.dword	$5ce5d034
>3378	e2 00					.byte	$e2,$00
.337a	20 4f 49	jsr $494f		jsr	FloatCompare
.337d	20 19 49	jsr $4919		jsr	CompareEqual
.3380	20 45 48	jsr $4845		jsr	FPAssertCheck
.3383	20 55 48	jsr $4855		jsr	FPPushConstant	; -1.45152669
>3386	34 d0 e5 5c				.dword	$5ce5d034
>338a	e2 80					.byte	$e2,$80
.338c	20 a5 4a	jsr $4aa5		jsr	FloatIntegerPart
.338f	20 55 48	jsr $4855		jsr	FPPushConstant	; -1
>3392	01 00 00 00				.dword	$00000001
>3396	00 80					.byte	$00,$80
.3398	20 4f 49	jsr $494f		jsr	FloatCompare
.339b	20 19 49	jsr $4919		jsr	CompareEqual
.339e	20 45 48	jsr $4845		jsr	FPAssertCheck
.33a1	20 55 48	jsr $4855		jsr	FPPushConstant	; -16.71
>33a4	3d 0a d7 42				.dword	$42d70a3d
>33a8	e6 80					.byte	$e6,$80
.33aa	20 50 51	jsr $5150		jsr	FloatSine
.33ad	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.84256969
>33b0	d8 52 d9 6b				.dword	$6bd952d8
>33b4	e1 00					.byte	$e1,$00
.33b6	20 88 48	jsr $4888		jsr	FloatSubtract
.33b9	20 52 48	jsr $4852		jsr	FPAbs
.33bc	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>33bf	4c 37 89 41				.dword	$4189374c
>33c3	d8 00					.byte	$d8,$00
.33c5	20 4f 49	jsr $494f		jsr	FloatCompare
.33c8	20 2f 49	jsr $492f		jsr	CompareLess
.33cb	20 45 48	jsr $4845		jsr	FPAssertCheck
.33ce	20 55 48	jsr $4855		jsr	FPPushConstant	; -16.71
>33d1	3d 0a d7 42				.dword	$42d70a3d
>33d5	e6 80					.byte	$e6,$80
.33d7	20 b0 4f	jsr $4fb0		jsr	FloatCosine
.33da	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.53858734
>33dd	12 6e f0 44				.dword	$44f06e12
>33e1	e1 80					.byte	$e1,$80
.33e3	20 88 48	jsr $4888		jsr	FloatSubtract
.33e6	20 52 48	jsr $4852		jsr	FPAbs
.33e9	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>33ec	4c 37 89 41				.dword	$4189374c
>33f0	d8 00					.byte	$d8,$00
.33f2	20 4f 49	jsr $494f		jsr	FloatCompare
.33f5	20 2f 49	jsr $492f		jsr	CompareLess
.33f8	20 45 48	jsr $4845		jsr	FPAssertCheck
.33fb	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.37
>33fe	ec 51 b8 5e				.dword	$5eb851ec
>3402	e0 00					.byte	$e0,$00
.3404	20 c1 51	jsr $51c1		jsr	FloatTangent
.3407	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.38786316
>340a	04 00 4b 63				.dword	$634b0004
>340e	e0 00					.byte	$e0,$00
.3410	20 88 48	jsr $4888		jsr	FloatSubtract
.3413	20 52 48	jsr $4852		jsr	FPAbs
.3416	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>3419	4c 37 89 41				.dword	$4189374c
>341d	d8 00					.byte	$d8,$00
.341f	20 4f 49	jsr $494f		jsr	FloatCompare
.3422	20 45 48	jsr $4845		jsr	FPAssertCheck
.3425	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.132
>3428	21 b0 72 48				.dword	$4872b021
>342c	e2 00					.byte	$e2,$00
.342e	20 95 4e	jsr $4e95		jsr	FloatArcTan
.3431	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.84723293
>3434	ef 20 72 6c				.dword	$6c7220ef
>3438	e1 00					.byte	$e1,$00
.343a	20 88 48	jsr $4888		jsr	FloatSubtract
.343d	20 52 48	jsr $4852		jsr	FPAbs
.3440	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>3443	4c 37 89 41				.dword	$4189374c
>3447	d8 00					.byte	$d8,$00
.3449	20 4f 49	jsr $494f		jsr	FloatCompare
.344c	20 45 48	jsr $4845		jsr	FPAssertCheck
.344f	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.12
>3452	ae 47 e1 7a				.dword	$7ae147ae
>3456	de 80					.byte	$de,$80
.3458	20 bc 4f	jsr $4fbc		jsr	FloatExponent
.345b	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.88692044
>345e	e6 9b 86 71				.dword	$71869be6
>3462	e1 00					.byte	$e1,$00
.3464	20 88 48	jsr $4888		jsr	FloatSubtract
.3467	20 52 48	jsr $4852		jsr	FPAbs
.346a	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>346d	4c 37 89 41				.dword	$4189374c
>3471	d8 00					.byte	$d8,$00
.3473	20 4f 49	jsr $494f		jsr	FloatCompare
.3476	20 45 48	jsr $4845		jsr	FPAssertCheck
.3479	20 55 48	jsr $4855		jsr	FPPushConstant	; 13.78
>347c	a4 70 3d 6e				.dword	$6e3d70a4
>3480	e5 00					.byte	$e5,$00
.3482	20 bf 50	jsr $50bf		jsr	FloatLogarithm
.3485	20 55 48	jsr $4855		jsr	FPPushConstant	; 2.62321827
>3488	71 67 f1 53				.dword	$53f16771
>348c	e3 00					.byte	$e3,$00
.348e	20 88 48	jsr $4888		jsr	FloatSubtract
.3491	20 52 48	jsr $4852		jsr	FPAbs
.3494	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>3497	4c 37 89 41				.dword	$4189374c
>349b	d8 00					.byte	$d8,$00
.349d	20 4f 49	jsr $494f		jsr	FloatCompare
.34a0	20 45 48	jsr $4845		jsr	FPAssertCheck
.34a3	20 55 48	jsr $4855		jsr	FPPushConstant	; 5.15
>34a6	66 66 66 52				.dword	$52666666
>34aa	e4 00					.byte	$e4,$00
.34ac	20 b5 51	jsr $51b5		jsr	FloatSquareRoot
.34af	20 55 48	jsr $4855		jsr	FPPushConstant	; 2.26936114
>34b2	41 9b 9e 48				.dword	$489e9b41
>34b6	e3 00					.byte	$e3,$00
.34b8	20 88 48	jsr $4888		jsr	FloatSubtract
.34bb	20 52 48	jsr $4852		jsr	FPAbs
.34be	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>34c1	4c 37 89 41				.dword	$4189374c
>34c5	d8 00					.byte	$d8,$00
.34c7	20 4f 49	jsr $494f		jsr	FloatCompare
.34ca	20 45 48	jsr $4845		jsr	FPAssertCheck
.34cd	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.88666667
>34d0	90 25 bf 78				.dword	$78bf2590
>34d4	e2 00					.byte	$e2,$00
.34d6	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.3
>34d9	33 33 33 53				.dword	$53333333
>34dd	e2 00					.byte	$e2,$00
.34df	20 33 51	jsr $5133		jsr	FloatPower
.34e2	20 55 48	jsr $4855		jsr	FPPushConstant	; 2.28246291
>34e5	a8 ef 09 49				.dword	$4909efa8
>34e9	e3 00					.byte	$e3,$00
.34eb	20 88 48	jsr $4888		jsr	FloatSubtract
.34ee	20 52 48	jsr $4852		jsr	FPAbs
.34f1	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.01
>34f4	1f 85 eb 51				.dword	$51eb851f
>34f8	db 00					.byte	$db,$00
.34fa	20 4f 49	jsr $494f		jsr	FloatCompare
.34fd	20 45 48	jsr $4845		jsr	FPAssertCheck
.3500	20 55 48	jsr $4855		jsr	FPPushConstant	; -9.12278286
>3503	95 75 fb 48				.dword	$48fb7595
>3507	e5 80					.byte	$e5,$80
.3509	20 2c 4e	jsr $4e2c		jsr	FloatNegate
.350c	20 55 48	jsr $4855		jsr	FPPushConstant	; 9.12278286
>350f	95 75 fb 48				.dword	$48fb7595
>3513	e5 00					.byte	$e5,$00
.3515	20 4f 49	jsr $494f		jsr	FloatCompare
.3518	20 19 49	jsr $4919		jsr	CompareEqual
.351b	20 45 48	jsr $4845		jsr	FPAssertCheck
.351e	20 55 48	jsr $4855		jsr	FPPushConstant	; -9.12278286
>3521	95 75 fb 48				.dword	$48fb7595
>3525	e5 80					.byte	$e5,$80
.3527	20 a5 4a	jsr $4aa5		jsr	FloatIntegerPart
.352a	20 55 48	jsr $4855		jsr	FPPushConstant	; -9
>352d	09 00 00 00				.dword	$00000009
>3531	00 80					.byte	$00,$80
.3533	20 4f 49	jsr $494f		jsr	FloatCompare
.3536	20 19 49	jsr $4919		jsr	CompareEqual
.3539	20 45 48	jsr $4845		jsr	FPAssertCheck
.353c	20 55 48	jsr $4855		jsr	FPPushConstant	; 13.69
>353f	b8 1e 85 6d				.dword	$6d851eb8
>3543	e5 00					.byte	$e5,$00
.3545	20 50 51	jsr $5150		jsr	FloatSine
.3548	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.90167577
>354b	94 1c 6a 73				.dword	$736a1c94
>354f	e1 00					.byte	$e1,$00
.3551	20 88 48	jsr $4888		jsr	FloatSubtract
.3554	20 52 48	jsr $4852		jsr	FPAbs
.3557	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>355a	4c 37 89 41				.dword	$4189374c
>355e	d8 00					.byte	$d8,$00
.3560	20 4f 49	jsr $494f		jsr	FloatCompare
.3563	20 2f 49	jsr $492f		jsr	CompareLess
.3566	20 45 48	jsr $4845		jsr	FPAssertCheck
.3569	20 55 48	jsr $4855		jsr	FPPushConstant	; 13.69
>356c	b8 1e 85 6d				.dword	$6d851eb8
>3570	e5 00					.byte	$e5,$00
.3572	20 b0 4f	jsr $4fb0		jsr	FloatCosine
.3575	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.43241277
>3578	72 9a b2 6e				.dword	$6eb29a72
>357c	e0 00					.byte	$e0,$00
.357e	20 88 48	jsr $4888		jsr	FloatSubtract
.3581	20 52 48	jsr $4852		jsr	FPAbs
.3584	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>3587	4c 37 89 41				.dword	$4189374c
>358b	d8 00					.byte	$d8,$00
.358d	20 4f 49	jsr $494f		jsr	FloatCompare
.3590	20 2f 49	jsr $492f		jsr	CompareLess
.3593	20 45 48	jsr $4845		jsr	FPAssertCheck
.3596	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.11
>3599	0a d7 a3 70				.dword	$70a3d70a
>359d	de 00					.byte	$de,$00
.359f	20 c1 51	jsr $51c1		jsr	FloatTangent
.35a2	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.11044582
>35a5	84 b5 18 71				.dword	$7118b584
>35a9	de 00					.byte	$de,$00
.35ab	20 88 48	jsr $4888		jsr	FloatSubtract
.35ae	20 52 48	jsr $4852		jsr	FPAbs
.35b1	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>35b4	4c 37 89 41				.dword	$4189374c
>35b8	d8 00					.byte	$d8,$00
.35ba	20 4f 49	jsr $494f		jsr	FloatCompare
.35bd	20 45 48	jsr $4845		jsr	FPAssertCheck
.35c0	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.736
>35c3	7d 3f 35 5e				.dword	$5e353f7d
>35c7	e1 00					.byte	$e1,$00
.35c9	20 95 4e	jsr $4e95		jsr	FloatArcTan
.35cc	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.63448073
>35cf	21 aa 36 51				.dword	$5136aa21
>35d3	e1 00					.byte	$e1,$00
.35d5	20 88 48	jsr $4888		jsr	FloatSubtract
.35d8	20 52 48	jsr $4852		jsr	FPAbs
.35db	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>35de	4c 37 89 41				.dword	$4189374c
>35e2	d8 00					.byte	$d8,$00
.35e4	20 4f 49	jsr $494f		jsr	FloatCompare
.35e7	20 45 48	jsr $4845		jsr	FPAssertCheck
.35ea	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.12
>35ed	ae 47 e1 7a				.dword	$7ae147ae
>35f1	de 80					.byte	$de,$80
.35f3	20 bc 4f	jsr $4fbc		jsr	FloatExponent
.35f6	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.88692044
>35f9	e6 9b 86 71				.dword	$71869be6
>35fd	e1 00					.byte	$e1,$00
.35ff	20 88 48	jsr $4888		jsr	FloatSubtract
.3602	20 52 48	jsr $4852		jsr	FPAbs
.3605	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>3608	4c 37 89 41				.dword	$4189374c
>360c	d8 00					.byte	$d8,$00
.360e	20 4f 49	jsr $494f		jsr	FloatCompare
.3611	20 45 48	jsr $4845		jsr	FPAssertCheck
.3614	20 55 48	jsr $4855		jsr	FPPushConstant	; 56.36
>3617	ec 51 b8 70				.dword	$70b851ec
>361b	e7 00					.byte	$e7,$00
.361d	20 bf 50	jsr $50bf		jsr	FloatLogarithm
.3620	20 55 48	jsr $4855		jsr	FPPushConstant	; 4.03175969
>3623	73 16 82 40				.dword	$40821673
>3627	e4 00					.byte	$e4,$00
.3629	20 88 48	jsr $4888		jsr	FloatSubtract
.362c	20 52 48	jsr $4852		jsr	FPAbs
.362f	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>3632	4c 37 89 41				.dword	$4189374c
>3636	d8 00					.byte	$d8,$00
.3638	20 4f 49	jsr $494f		jsr	FloatCompare
.363b	20 45 48	jsr $4845		jsr	FPAssertCheck
.363e	20 55 48	jsr $4855		jsr	FPPushConstant	; 39.17
>3641	3d 0a 57 4e				.dword	$4e570a3d
>3645	e7 00					.byte	$e7,$00
.3647	20 b5 51	jsr $51b5		jsr	FloatSquareRoot
.364a	20 55 48	jsr $4855		jsr	FPPushConstant	; 6.25859409
>364d	8e 33 23 64				.dword	$6423338e
>3651	e4 00					.byte	$e4,$00
.3653	20 88 48	jsr $4888		jsr	FloatSubtract
.3656	20 52 48	jsr $4852		jsr	FPAbs
.3659	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>365c	4c 37 89 41				.dword	$4189374c
>3660	d8 00					.byte	$d8,$00
.3662	20 4f 49	jsr $494f		jsr	FloatCompare
.3665	20 45 48	jsr $4845		jsr	FPAssertCheck
.3668	20 55 48	jsr $4855		jsr	FPPushConstant	; 2.53333333
>366b	0f 11 11 51				.dword	$5111110f
>366f	e3 00					.byte	$e3,$00
.3671	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.4
>3674	9a 99 99 59				.dword	$5999999a
>3678	e2 00					.byte	$e2,$00
.367a	20 33 51	jsr $5133		jsr	FloatPower
.367d	20 55 48	jsr $4855		jsr	FPPushConstant	; 3.67425482
>3680	d8 7e 93 75				.dword	$75937ed8
>3684	e3 00					.byte	$e3,$00
.3686	20 88 48	jsr $4888		jsr	FloatSubtract
.3689	20 52 48	jsr $4852		jsr	FPAbs
.368c	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.01
>368f	1f 85 eb 51				.dword	$51eb851f
>3693	db 00					.byte	$db,$00
.3695	20 4f 49	jsr $494f		jsr	FloatCompare
.3698	20 45 48	jsr $4845		jsr	FPAssertCheck
.369b	20 55 48	jsr $4855		jsr	FPPushConstant	; 44.121487
>369e	8b 33 3e 58				.dword	$583e338b
>36a2	e7 00					.byte	$e7,$00
.36a4	20 2c 4e	jsr $4e2c		jsr	FloatNegate
.36a7	20 55 48	jsr $4855		jsr	FPPushConstant	; -44.121487
>36aa	8b 33 3e 58				.dword	$583e338b
>36ae	e7 80					.byte	$e7,$80
.36b0	20 4f 49	jsr $494f		jsr	FloatCompare
.36b3	20 19 49	jsr $4919		jsr	CompareEqual
.36b6	20 45 48	jsr $4845		jsr	FPAssertCheck
.36b9	20 55 48	jsr $4855		jsr	FPPushConstant	; 44.121487
>36bc	8b 33 3e 58				.dword	$583e338b
>36c0	e7 00					.byte	$e7,$00
.36c2	20 a5 4a	jsr $4aa5		jsr	FloatIntegerPart
.36c5	20 55 48	jsr $4855		jsr	FPPushConstant	; 44
>36c8	2c 00 00 00				.dword	$0000002c
>36cc	00 00					.byte	$00,$00
.36ce	20 4f 49	jsr $494f		jsr	FloatCompare
.36d1	20 19 49	jsr $4919		jsr	CompareEqual
.36d4	20 45 48	jsr $4845		jsr	FPAssertCheck
.36d7	20 55 48	jsr $4855		jsr	FPPushConstant	; -9.85
>36da	cd cc cc 4e				.dword	$4ecccccd
>36de	e5 80					.byte	$e5,$80
.36e0	20 50 51	jsr $5150		jsr	FloatSine
.36e3	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.41252306
>36e6	7c 1c 9b 69				.dword	$699b1c7c
>36ea	e0 00					.byte	$e0,$00
.36ec	20 88 48	jsr $4888		jsr	FloatSubtract
.36ef	20 52 48	jsr $4852		jsr	FPAbs
.36f2	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>36f5	4c 37 89 41				.dword	$4189374c
>36f9	d8 00					.byte	$d8,$00
.36fb	20 4f 49	jsr $494f		jsr	FloatCompare
.36fe	20 2f 49	jsr $492f		jsr	CompareLess
.3701	20 45 48	jsr $4845		jsr	FPAssertCheck
.3704	20 55 48	jsr $4855		jsr	FPPushConstant	; -9.85
>3707	cd cc cc 4e				.dword	$4ecccccd
>370b	e5 80					.byte	$e5,$80
.370d	20 b0 4f	jsr $4fb0		jsr	FloatCosine
.3710	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.91094716
>3713	a2 ea 99 74				.dword	$7499eaa2
>3717	e1 80					.byte	$e1,$80
.3719	20 88 48	jsr $4888		jsr	FloatSubtract
.371c	20 52 48	jsr $4852		jsr	FPAbs
.371f	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>3722	4c 37 89 41				.dword	$4189374c
>3726	d8 00					.byte	$d8,$00
.3728	20 4f 49	jsr $494f		jsr	FloatCompare
.372b	20 2f 49	jsr $492f		jsr	CompareLess
.372e	20 45 48	jsr $4845		jsr	FPAssertCheck
.3731	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.12
>3734	ae 47 e1 7a				.dword	$7ae147ae
>3738	de 00					.byte	$de,$00
.373a	20 c1 51	jsr $51c1		jsr	FloatTangent
.373d	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.12057934
>3740	87 26 79 7b				.dword	$7b792687
>3744	de 00					.byte	$de,$00
.3746	20 88 48	jsr $4888		jsr	FloatSubtract
.3749	20 52 48	jsr $4852		jsr	FPAbs
.374c	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>374f	4c 37 89 41				.dword	$4189374c
>3753	d8 00					.byte	$d8,$00
.3755	20 4f 49	jsr $494f		jsr	FloatCompare
.3758	20 45 48	jsr $4845		jsr	FPAssertCheck
.375b	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.169
>375e	02 2b 87 56				.dword	$56872b02
>3762	df 00					.byte	$df,$00
.3764	20 95 4e	jsr $4e95		jsr	FloatArcTan
.3767	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.16741809
>376a	eb d2 b7 55				.dword	$55b7d2eb
>376e	df 00					.byte	$df,$00
.3770	20 88 48	jsr $4888		jsr	FloatSubtract
.3773	20 52 48	jsr $4852		jsr	FPAbs
.3776	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>3779	4c 37 89 41				.dword	$4189374c
>377d	d8 00					.byte	$d8,$00
.377f	20 4f 49	jsr $494f		jsr	FloatCompare
.3782	20 45 48	jsr $4845		jsr	FPAssertCheck
.3785	20 55 48	jsr $4855		jsr	FPPushConstant	; -1.56
>3788	3d 0a d7 63				.dword	$63d70a3d
>378c	e2 80					.byte	$e2,$80
.378e	20 bc 4f	jsr $4fbc		jsr	FloatExponent
.3791	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.21013607
>3794	79 f4 96 6b				.dword	$6b96f479
>3798	df 00					.byte	$df,$00
.379a	20 88 48	jsr $4888		jsr	FloatSubtract
.379d	20 52 48	jsr $4852		jsr	FPAbs
.37a0	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>37a3	4c 37 89 41				.dword	$4189374c
>37a7	d8 00					.byte	$d8,$00
.37a9	20 4f 49	jsr $494f		jsr	FloatCompare
.37ac	20 45 48	jsr $4845		jsr	FPAssertCheck
.37af	20 55 48	jsr $4855		jsr	FPPushConstant	; 38.77
>37b2	71 3d 8a 4d				.dword	$4d8a3d71
>37b6	e7 00					.byte	$e7,$00
.37b8	20 bf 50	jsr $50bf		jsr	FloatLogarithm
.37bb	20 55 48	jsr $4855		jsr	FPPushConstant	; 3.65764675
>37be	32 71 0b 75				.dword	$750b7132
>37c2	e3 00					.byte	$e3,$00
.37c4	20 88 48	jsr $4888		jsr	FloatSubtract
.37c7	20 52 48	jsr $4852		jsr	FPAbs
.37ca	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>37cd	4c 37 89 41				.dword	$4189374c
>37d1	d8 00					.byte	$d8,$00
.37d3	20 4f 49	jsr $494f		jsr	FloatCompare
.37d6	20 45 48	jsr $4845		jsr	FPAssertCheck
.37d9	20 55 48	jsr $4855		jsr	FPPushConstant	; 86.89
>37dc	0a d7 e3 56				.dword	$56e3d70a
>37e0	e8 00					.byte	$e8,$00
.37e2	20 b5 51	jsr $51b5		jsr	FloatSquareRoot
.37e5	20 55 48	jsr $4855		jsr	FPPushConstant	; 9.32148057
>37e8	68 64 92 4a				.dword	$4a926468
>37ec	e5 00					.byte	$e5,$00
.37ee	20 88 48	jsr $4888		jsr	FloatSubtract
.37f1	20 52 48	jsr $4852		jsr	FPAbs
.37f4	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>37f7	4c 37 89 41				.dword	$4189374c
>37fb	d8 00					.byte	$d8,$00
.37fd	20 4f 49	jsr $494f		jsr	FloatCompare
.3800	20 45 48	jsr $4845		jsr	FPAssertCheck
.3803	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.02666667
>3806	1f e8 b4 41				.dword	$41b4e81f
>380a	e2 00					.byte	$e2,$00
.380c	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.8
>380f	33 33 33 73				.dword	$73333333
>3813	e2 00					.byte	$e2,$00
.3815	20 33 51	jsr $5133		jsr	FloatPower
.3818	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.0485111
>381b	4d ce 1a 43				.dword	$431ace4d
>381f	e2 00					.byte	$e2,$00
.3821	20 88 48	jsr $4888		jsr	FloatSubtract
.3824	20 52 48	jsr $4852		jsr	FPAbs
.3827	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.01
>382a	1f 85 eb 51				.dword	$51eb851f
>382e	db 00					.byte	$db,$00
.3830	20 4f 49	jsr $494f		jsr	FloatCompare
.3833	20 45 48	jsr $4845		jsr	FPAssertCheck
.3836	20 55 48	jsr $4855		jsr	FPPushConstant	; -78.79452499
>3839	fd 65 cb 4e				.dword	$4ecb65fd
>383d	e8 80					.byte	$e8,$80
.383f	20 2c 4e	jsr $4e2c		jsr	FloatNegate
.3842	20 55 48	jsr $4855		jsr	FPPushConstant	; 78.79452499
>3845	fd 65 cb 4e				.dword	$4ecb65fd
>3849	e8 00					.byte	$e8,$00
.384b	20 4f 49	jsr $494f		jsr	FloatCompare
.384e	20 19 49	jsr $4919		jsr	CompareEqual
.3851	20 45 48	jsr $4845		jsr	FPAssertCheck
.3854	20 55 48	jsr $4855		jsr	FPPushConstant	; -78.79452499
>3857	fd 65 cb 4e				.dword	$4ecb65fd
>385b	e8 80					.byte	$e8,$80
.385d	20 a5 4a	jsr $4aa5		jsr	FloatIntegerPart
.3860	20 55 48	jsr $4855		jsr	FPPushConstant	; -78
>3863	4e 00 00 00				.dword	$0000004e
>3867	00 80					.byte	$00,$80
.3869	20 4f 49	jsr $494f		jsr	FloatCompare
.386c	20 19 49	jsr $4919		jsr	CompareEqual
.386f	20 45 48	jsr $4845		jsr	FPAssertCheck
.3872	20 55 48	jsr $4855		jsr	FPPushConstant	; 8.45
>3875	9a 99 99 43				.dword	$4399999a
>3879	e5 00					.byte	$e5,$00
.387b	20 50 51	jsr $5150		jsr	FloatSine
.387e	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.82757727
>3881	4f 0d ee 69				.dword	$69ee0d4f
>3885	e1 00					.byte	$e1,$00
.3887	20 88 48	jsr $4888		jsr	FloatSubtract
.388a	20 52 48	jsr $4852		jsr	FPAbs
.388d	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>3890	4c 37 89 41				.dword	$4189374c
>3894	d8 00					.byte	$d8,$00
.3896	20 4f 49	jsr $494f		jsr	FloatCompare
.3899	20 2f 49	jsr $492f		jsr	CompareLess
.389c	20 45 48	jsr $4845		jsr	FPAssertCheck
.389f	20 55 48	jsr $4855		jsr	FPPushConstant	; 8.45
>38a2	9a 99 99 43				.dword	$4399999a
>38a6	e5 00					.byte	$e5,$00
.38a8	20 b0 4f	jsr $4fb0		jsr	FloatCosine
.38ab	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.56135182
>38ae	5e 60 da 47				.dword	$47da605e
>38b2	e1 80					.byte	$e1,$80
.38b4	20 88 48	jsr $4888		jsr	FloatSubtract
.38b7	20 52 48	jsr $4852		jsr	FPAbs
.38ba	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>38bd	4c 37 89 41				.dword	$4189374c
>38c1	d8 00					.byte	$d8,$00
.38c3	20 4f 49	jsr $494f		jsr	FloatCompare
.38c6	20 2f 49	jsr $492f		jsr	CompareLess
.38c9	20 45 48	jsr $4845		jsr	FPAssertCheck
.38cc	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.32
>38cf	1f 85 eb 51				.dword	$51eb851f
>38d3	e0 00					.byte	$e0,$00
.38d5	20 c1 51	jsr $51c1		jsr	FloatTangent
.38d8	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.33138941
>38db	b6 ef d5 54				.dword	$54d5efb6
>38df	e0 00					.byte	$e0,$00
.38e1	20 88 48	jsr $4888		jsr	FloatSubtract
.38e4	20 52 48	jsr $4852		jsr	FPAbs
.38e7	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>38ea	4c 37 89 41				.dword	$4189374c
>38ee	d8 00					.byte	$d8,$00
.38f0	20 4f 49	jsr $494f		jsr	FloatCompare
.38f3	20 45 48	jsr $4845		jsr	FPAssertCheck
.38f6	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.643
>38f9	79 e9 26 69				.dword	$6926e979
>38fd	e2 00					.byte	$e2,$00
.38ff	20 95 4e	jsr $4e95		jsr	FloatArcTan
.3902	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.0240461
>3905	a7 f8 89 41				.dword	$4189f8a7
>3909	e2 00					.byte	$e2,$00
.390b	20 88 48	jsr $4888		jsr	FloatSubtract
.390e	20 52 48	jsr $4852		jsr	FPAbs
.3911	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>3914	4c 37 89 41				.dword	$4189374c
>3918	d8 00					.byte	$d8,$00
.391a	20 4f 49	jsr $494f		jsr	FloatCompare
.391d	20 45 48	jsr $4845		jsr	FPAssertCheck
.3920	20 55 48	jsr $4855		jsr	FPPushConstant	; -1.15
>3923	9a 99 99 49				.dword	$4999999a
>3927	e2 80					.byte	$e2,$80
.3929	20 bc 4f	jsr $4fbc		jsr	FloatExponent
.392c	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.31663677
>392f	7c 1b 0f 51				.dword	$510f1b7c
>3933	e0 00					.byte	$e0,$00
.3935	20 88 48	jsr $4888		jsr	FloatSubtract
.3938	20 52 48	jsr $4852		jsr	FPAbs
.393b	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>393e	4c 37 89 41				.dword	$4189374c
>3942	d8 00					.byte	$d8,$00
.3944	20 4f 49	jsr $494f		jsr	FloatCompare
.3947	20 45 48	jsr $4845		jsr	FPAssertCheck
.394a	20 55 48	jsr $4855		jsr	FPPushConstant	; 63.74
>394d	48 e1 7a 7f				.dword	$7f7ae148
>3951	e7 00					.byte	$e7,$00
.3953	20 bf 50	jsr $50bf		jsr	FloatLogarithm
.3956	20 55 48	jsr $4855		jsr	FPPushConstant	; 4.15481231
>3959	79 1c 7a 42				.dword	$427a1c79
>395d	e4 00					.byte	$e4,$00
.395f	20 88 48	jsr $4888		jsr	FloatSubtract
.3962	20 52 48	jsr $4852		jsr	FPAbs
.3965	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>3968	4c 37 89 41				.dword	$4189374c
>396c	d8 00					.byte	$d8,$00
.396e	20 4f 49	jsr $494f		jsr	FloatCompare
.3971	20 45 48	jsr $4845		jsr	FPAssertCheck
.3974	20 55 48	jsr $4855		jsr	FPPushConstant	; 39.5
>3977	00 00 00 4f				.dword	$4f000000
>397b	e7 00					.byte	$e7,$00
.397d	20 b5 51	jsr $51b5		jsr	FloatSquareRoot
.3980	20 55 48	jsr $4855		jsr	FPPushConstant	; 6.28490254
>3983	f7 f5 8e 64				.dword	$648ef5f7
>3987	e4 00					.byte	$e4,$00
.3989	20 88 48	jsr $4888		jsr	FloatSubtract
.398c	20 52 48	jsr $4852		jsr	FPAbs
.398f	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>3992	4c 37 89 41				.dword	$4189374c
>3996	d8 00					.byte	$d8,$00
.3998	20 4f 49	jsr $494f		jsr	FloatCompare
.399b	20 45 48	jsr $4845		jsr	FPAssertCheck
.399e	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.16666667
>39a1	ae aa aa 4a				.dword	$4aaaaaae
>39a5	e2 00					.byte	$e2,$00
.39a7	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.2
>39aa	cd cc cc 4c				.dword	$4ccccccd
>39ae	e2 00					.byte	$e2,$00
.39b0	20 33 51	jsr $5133		jsr	FloatPower
.39b3	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.20319536
>39b6	1c 27 01 4d				.dword	$4d01271c
>39ba	e2 00					.byte	$e2,$00
.39bc	20 88 48	jsr $4888		jsr	FloatSubtract
.39bf	20 52 48	jsr $4852		jsr	FPAbs
.39c2	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.01
>39c5	1f 85 eb 51				.dword	$51eb851f
>39c9	db 00					.byte	$db,$00
.39cb	20 4f 49	jsr $494f		jsr	FloatCompare
.39ce	20 45 48	jsr $4845		jsr	FPAssertCheck
.39d1	20 55 48	jsr $4855		jsr	FPPushConstant	; 46.88750304
>39d4	cc 66 c6 5d				.dword	$5dc666cc
>39d8	e7 00					.byte	$e7,$00
.39da	20 2c 4e	jsr $4e2c		jsr	FloatNegate
.39dd	20 55 48	jsr $4855		jsr	FPPushConstant	; -46.88750304
>39e0	cc 66 c6 5d				.dword	$5dc666cc
>39e4	e7 80					.byte	$e7,$80
.39e6	20 4f 49	jsr $494f		jsr	FloatCompare
.39e9	20 19 49	jsr $4919		jsr	CompareEqual
.39ec	20 45 48	jsr $4845		jsr	FPAssertCheck
.39ef	20 55 48	jsr $4855		jsr	FPPushConstant	; 46.88750304
>39f2	cc 66 c6 5d				.dword	$5dc666cc
>39f6	e7 00					.byte	$e7,$00
.39f8	20 a5 4a	jsr $4aa5		jsr	FloatIntegerPart
.39fb	20 55 48	jsr $4855		jsr	FPPushConstant	; 46
>39fe	2e 00 00 00				.dword	$0000002e
>3a02	00 00					.byte	$00,$00
.3a04	20 4f 49	jsr $494f		jsr	FloatCompare
.3a07	20 19 49	jsr $4919		jsr	CompareEqual
.3a0a	20 45 48	jsr $4845		jsr	FPAssertCheck
.3a0d	20 55 48	jsr $4855		jsr	FPPushConstant	; 18.88
>3a10	b8 1e 85 4b				.dword	$4b851eb8
>3a14	e6 00					.byte	$e6,$00
.3a16	20 50 51	jsr $5150		jsr	FloatSine
.3a19	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.03043938
>3a1c	da 00 ae 7c				.dword	$7cae00da
>3a20	dc 00					.byte	$dc,$00
.3a22	20 88 48	jsr $4888		jsr	FloatSubtract
.3a25	20 52 48	jsr $4852		jsr	FPAbs
.3a28	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>3a2b	4c 37 89 41				.dword	$4189374c
>3a2f	d8 00					.byte	$d8,$00
.3a31	20 4f 49	jsr $494f		jsr	FloatCompare
.3a34	20 2f 49	jsr $492f		jsr	CompareLess
.3a37	20 45 48	jsr $4845		jsr	FPAssertCheck
.3a3a	20 55 48	jsr $4855		jsr	FPPushConstant	; 18.88
>3a3d	b8 1e 85 4b				.dword	$4b851eb8
>3a41	e6 00					.byte	$e6,$00
.3a43	20 b0 4f	jsr $4fb0		jsr	FloatCosine
.3a46	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.99953661
>3a49	ce d0 f0 7f				.dword	$7ff0d0ce
>3a4d	e1 00					.byte	$e1,$00
.3a4f	20 88 48	jsr $4888		jsr	FloatSubtract
.3a52	20 52 48	jsr $4852		jsr	FPAbs
.3a55	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>3a58	4c 37 89 41				.dword	$4189374c
>3a5c	d8 00					.byte	$d8,$00
.3a5e	20 4f 49	jsr $494f		jsr	FloatCompare
.3a61	20 2f 49	jsr $492f		jsr	CompareLess
.3a64	20 45 48	jsr $4845		jsr	FPAssertCheck
.3a67	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.13
>3a6a	29 5c 8f 42				.dword	$428f5c29
>3a6e	df 00					.byte	$df,$00
.3a70	20 c1 51	jsr $51c1		jsr	FloatTangent
.3a73	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.13073732
>3a76	84 00 f0 42				.dword	$42f00084
>3a7a	df 00					.byte	$df,$00
.3a7c	20 88 48	jsr $4888		jsr	FloatSubtract
.3a7f	20 52 48	jsr $4852		jsr	FPAbs
.3a82	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>3a85	4c 37 89 41				.dword	$4189374c
>3a89	d8 00					.byte	$d8,$00
.3a8b	20 4f 49	jsr $494f		jsr	FloatCompare
.3a8e	20 45 48	jsr $4845		jsr	FPAssertCheck
.3a91	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.313
>3a94	27 31 08 54				.dword	$54083127
>3a98	e2 00					.byte	$e2,$00
.3a9a	20 95 4e	jsr $4e95		jsr	FloatArcTan
.3a9d	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.91990321
>3aa0	6d 63 bf 75				.dword	$75bf636d
>3aa4	e1 00					.byte	$e1,$00
.3aa6	20 88 48	jsr $4888		jsr	FloatSubtract
.3aa9	20 52 48	jsr $4852		jsr	FPAbs
.3aac	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>3aaf	4c 37 89 41				.dword	$4189374c
>3ab3	d8 00					.byte	$d8,$00
.3ab5	20 4f 49	jsr $494f		jsr	FloatCompare
.3ab8	20 45 48	jsr $4845		jsr	FPAssertCheck
.3abb	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.62
>3abe	f6 28 5c 4f				.dword	$4f5c28f6
>3ac2	e1 00					.byte	$e1,$00
.3ac4	20 bc 4f	jsr $4fbc		jsr	FloatExponent
.3ac7	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.85892804
>3aca	50 ad f8 76				.dword	$76f8ad50
>3ace	e2 00					.byte	$e2,$00
.3ad0	20 88 48	jsr $4888		jsr	FloatSubtract
.3ad3	20 52 48	jsr $4852		jsr	FPAbs
.3ad6	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>3ad9	4c 37 89 41				.dword	$4189374c
>3add	d8 00					.byte	$d8,$00
.3adf	20 4f 49	jsr $494f		jsr	FloatCompare
.3ae2	20 45 48	jsr $4845		jsr	FPAssertCheck
.3ae5	20 55 48	jsr $4855		jsr	FPPushConstant	; 66.73
>3ae8	48 e1 ba 42				.dword	$42bae148
>3aec	e8 00					.byte	$e8,$00
.3aee	20 bf 50	jsr $50bf		jsr	FloatLogarithm
.3af1	20 55 48	jsr $4855		jsr	FPPushConstant	; 4.20065463
>3af4	a1 e1 35 43				.dword	$4335e1a1
>3af8	e4 00					.byte	$e4,$00
.3afa	20 88 48	jsr $4888		jsr	FloatSubtract
.3afd	20 52 48	jsr $4852		jsr	FPAbs
.3b00	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>3b03	4c 37 89 41				.dword	$4189374c
>3b07	d8 00					.byte	$d8,$00
.3b09	20 4f 49	jsr $494f		jsr	FloatCompare
.3b0c	20 45 48	jsr $4845		jsr	FPAssertCheck
.3b0f	20 55 48	jsr $4855		jsr	FPPushConstant	; 70.15
>3b12	66 66 26 46				.dword	$46266666
>3b16	e8 00					.byte	$e8,$00
.3b18	20 b5 51	jsr $51b5		jsr	FloatSquareRoot
.3b1b	20 55 48	jsr $4855		jsr	FPPushConstant	; 8.37555968
>3b1e	6f 25 01 43				.dword	$4301256f
>3b22	e5 00					.byte	$e5,$00
.3b24	20 88 48	jsr $4888		jsr	FloatSubtract
.3b27	20 52 48	jsr $4852		jsr	FPAbs
.3b2a	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>3b2d	4c 37 89 41				.dword	$4189374c
>3b31	d8 00					.byte	$d8,$00
.3b33	20 4f 49	jsr $494f		jsr	FloatCompare
.3b36	20 45 48	jsr $4845		jsr	FPAssertCheck
.3b39	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.29
>3b3c	a4 70 3d 4a				.dword	$4a3d70a4
>3b40	e0 00					.byte	$e0,$00
.3b42	20 55 48	jsr $4855		jsr	FPPushConstant	; 2.0
>3b45	02 00 00 00				.dword	$00000002
>3b49	00 00					.byte	$00,$00
.3b4b	20 33 51	jsr $5133		jsr	FloatPower
.3b4e	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.0841
>3b51	76 4f 1e 56				.dword	$561e4f76
>3b55	de 00					.byte	$de,$00
.3b57	20 88 48	jsr $4888		jsr	FloatSubtract
.3b5a	20 52 48	jsr $4852		jsr	FPAbs
.3b5d	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.01
>3b60	1f 85 eb 51				.dword	$51eb851f
>3b64	db 00					.byte	$db,$00
.3b66	20 4f 49	jsr $494f		jsr	FloatCompare
.3b69	20 45 48	jsr $4845		jsr	FPAssertCheck
.3b6c	20 55 48	jsr $4855		jsr	FPPushConstant	; 42.34591399
>3b6f	a3 1b b1 54				.dword	$54b11ba3
>3b73	e7 00					.byte	$e7,$00
.3b75	20 2c 4e	jsr $4e2c		jsr	FloatNegate
.3b78	20 55 48	jsr $4855		jsr	FPPushConstant	; -42.34591399
>3b7b	a3 1b b1 54				.dword	$54b11ba3
>3b7f	e7 80					.byte	$e7,$80
.3b81	20 4f 49	jsr $494f		jsr	FloatCompare
.3b84	20 19 49	jsr $4919		jsr	CompareEqual
.3b87	20 45 48	jsr $4845		jsr	FPAssertCheck
.3b8a	20 55 48	jsr $4855		jsr	FPPushConstant	; 42.34591399
>3b8d	a3 1b b1 54				.dword	$54b11ba3
>3b91	e7 00					.byte	$e7,$00
.3b93	20 a5 4a	jsr $4aa5		jsr	FloatIntegerPart
.3b96	20 55 48	jsr $4855		jsr	FPPushConstant	; 42
>3b99	2a 00 00 00				.dword	$0000002a
>3b9d	00 00					.byte	$00,$00
.3b9f	20 4f 49	jsr $494f		jsr	FloatCompare
.3ba2	20 19 49	jsr $4919		jsr	CompareEqual
.3ba5	20 45 48	jsr $4845		jsr	FPAssertCheck
.3ba8	20 55 48	jsr $4855		jsr	FPPushConstant	; -10.02
>3bab	c3 f5 28 50				.dword	$5028f5c3
>3baf	e5 80					.byte	$e5,$80
.3bb1	20 50 51	jsr $5150		jsr	FloatSine
.3bb4	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.56069262
>3bb7	99 c6 c4 47				.dword	$47c4c699
>3bbb	e1 00					.byte	$e1,$00
.3bbd	20 88 48	jsr $4888		jsr	FloatSubtract
.3bc0	20 52 48	jsr $4852		jsr	FPAbs
.3bc3	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>3bc6	4c 37 89 41				.dword	$4189374c
>3bca	d8 00					.byte	$d8,$00
.3bcc	20 4f 49	jsr $494f		jsr	FloatCompare
.3bcf	20 2f 49	jsr $492f		jsr	CompareLess
.3bd2	20 45 48	jsr $4845		jsr	FPAssertCheck
.3bd5	20 55 48	jsr $4855		jsr	FPPushConstant	; -10.02
>3bd8	c3 f5 28 50				.dword	$5028f5c3
>3bdc	e5 80					.byte	$e5,$80
.3bde	20 b0 4f	jsr $4fb0		jsr	FloatCosine
.3be1	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.82802402
>3be4	eb b0 fc 69				.dword	$69fcb0eb
>3be8	e1 80					.byte	$e1,$80
.3bea	20 88 48	jsr $4888		jsr	FloatSubtract
.3bed	20 52 48	jsr $4852		jsr	FPAbs
.3bf0	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>3bf3	4c 37 89 41				.dword	$4189374c
>3bf7	d8 00					.byte	$d8,$00
.3bf9	20 4f 49	jsr $494f		jsr	FloatCompare
.3bfc	20 2f 49	jsr $492f		jsr	CompareLess
.3bff	20 45 48	jsr $4845		jsr	FPAssertCheck
.3c02	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.38
>3c05	14 ae 47 61				.dword	$6147ae14
>3c09	e0 00					.byte	$e0,$00
.3c0b	20 c1 51	jsr $51c1		jsr	FloatTangent
.3c0e	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.39941272
>3c11	7a e9 3f 66				.dword	$663fe97a
>3c15	e0 00					.byte	$e0,$00
.3c17	20 88 48	jsr $4888		jsr	FloatSubtract
.3c1a	20 52 48	jsr $4852		jsr	FPAbs
.3c1d	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>3c20	4c 37 89 41				.dword	$4189374c
>3c24	d8 00					.byte	$d8,$00
.3c26	20 4f 49	jsr $494f		jsr	FloatCompare
.3c29	20 45 48	jsr $4845		jsr	FPAssertCheck
.3c2c	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.642
>3c2f	56 0e 2d 52				.dword	$522d0e56
>3c33	e1 00					.byte	$e1,$00
.3c35	20 95 4e	jsr $4e95		jsr	FloatArcTan
.3c38	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.57073075
>3c3b	89 b4 0d 49				.dword	$490db489
>3c3f	e1 00					.byte	$e1,$00
.3c41	20 88 48	jsr $4888		jsr	FloatSubtract
.3c44	20 52 48	jsr $4852		jsr	FPAbs
.3c47	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>3c4a	4c 37 89 41				.dword	$4189374c
>3c4e	d8 00					.byte	$d8,$00
.3c50	20 4f 49	jsr $494f		jsr	FloatCompare
.3c53	20 45 48	jsr $4845		jsr	FPAssertCheck
.3c56	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.47
>3c59	e1 7a 14 5e				.dword	$5e147ae1
>3c5d	e2 00					.byte	$e2,$00
.3c5f	20 bc 4f	jsr $4fbc		jsr	FloatExponent
.3c62	20 55 48	jsr $4855		jsr	FPPushConstant	; 4.34923514
>3c65	96 77 96 45				.dword	$45967796
>3c69	e4 00					.byte	$e4,$00
.3c6b	20 88 48	jsr $4888		jsr	FloatSubtract
.3c6e	20 52 48	jsr $4852		jsr	FPAbs
.3c71	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>3c74	4c 37 89 41				.dword	$4189374c
>3c78	d8 00					.byte	$d8,$00
.3c7a	20 4f 49	jsr $494f		jsr	FloatCompare
.3c7d	20 45 48	jsr $4845		jsr	FPAssertCheck
.3c80	20 55 48	jsr $4855		jsr	FPPushConstant	; 10.02
>3c83	c3 f5 28 50				.dword	$5028f5c3
>3c87	e5 00					.byte	$e5,$00
.3c89	20 bf 50	jsr $50bf		jsr	FloatLogarithm
.3c8c	20 55 48	jsr $4855		jsr	FPPushConstant	; 2.3045831
>3c8f	0f 25 bf 49				.dword	$49bf250f
>3c93	e3 00					.byte	$e3,$00
.3c95	20 88 48	jsr $4888		jsr	FloatSubtract
.3c98	20 52 48	jsr $4852		jsr	FPAbs
.3c9b	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>3c9e	4c 37 89 41				.dword	$4189374c
>3ca2	d8 00					.byte	$d8,$00
.3ca4	20 4f 49	jsr $494f		jsr	FloatCompare
.3ca7	20 45 48	jsr $4845		jsr	FPAssertCheck
.3caa	20 55 48	jsr $4855		jsr	FPPushConstant	; 52.44
>3cad	ae 47 e1 68				.dword	$68e147ae
>3cb1	e7 00					.byte	$e7,$00
.3cb3	20 b5 51	jsr $51b5		jsr	FloatSquareRoot
.3cb6	20 55 48	jsr $4855		jsr	FPPushConstant	; 7.2415468
>3cb9	2d 60 dd 73				.dword	$73dd602d
>3cbd	e4 00					.byte	$e4,$00
.3cbf	20 88 48	jsr $4888		jsr	FloatSubtract
.3cc2	20 52 48	jsr $4852		jsr	FPAbs
.3cc5	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>3cc8	4c 37 89 41				.dword	$4189374c
>3ccc	d8 00					.byte	$d8,$00
.3cce	20 4f 49	jsr $494f		jsr	FloatCompare
.3cd1	20 45 48	jsr $4845		jsr	FPAssertCheck
.3cd4	20 55 48	jsr $4855		jsr	FPPushConstant	; 2.19333333
>3cd7	61 c9 2f 46				.dword	$462fc961
>3cdb	e3 00					.byte	$e3,$00
.3cdd	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.3
>3ce0	33 33 33 53				.dword	$53333333
>3ce4	e2 00					.byte	$e2,$00
.3ce6	20 33 51	jsr $5133		jsr	FloatPower
.3ce9	20 55 48	jsr $4855		jsr	FPPushConstant	; 2.77610591
>3cec	10 dc d5 58				.dword	$58d5dc10
>3cf0	e3 00					.byte	$e3,$00
.3cf2	20 88 48	jsr $4888		jsr	FloatSubtract
.3cf5	20 52 48	jsr $4852		jsr	FPAbs
.3cf8	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.01
>3cfb	1f 85 eb 51				.dword	$51eb851f
>3cff	db 00					.byte	$db,$00
.3d01	20 4f 49	jsr $494f		jsr	FloatCompare
.3d04	20 45 48	jsr $4845		jsr	FPAssertCheck
.3d07	20 55 48	jsr $4855		jsr	FPPushConstant	; -48.64550093
>3d0a	19 7f 4a 61				.dword	$614a7f19
>3d0e	e7 80					.byte	$e7,$80
.3d10	20 2c 4e	jsr $4e2c		jsr	FloatNegate
.3d13	20 55 48	jsr $4855		jsr	FPPushConstant	; 48.64550093
>3d16	19 7f 4a 61				.dword	$614a7f19
>3d1a	e7 00					.byte	$e7,$00
.3d1c	20 4f 49	jsr $494f		jsr	FloatCompare
.3d1f	20 19 49	jsr $4919		jsr	CompareEqual
.3d22	20 45 48	jsr $4845		jsr	FPAssertCheck
.3d25	20 55 48	jsr $4855		jsr	FPPushConstant	; -48.64550093
>3d28	19 7f 4a 61				.dword	$614a7f19
>3d2c	e7 80					.byte	$e7,$80
.3d2e	20 a5 4a	jsr $4aa5		jsr	FloatIntegerPart
.3d31	20 55 48	jsr $4855		jsr	FPPushConstant	; -48
>3d34	30 00 00 00				.dword	$00000030
>3d38	00 80					.byte	$00,$80
.3d3a	20 4f 49	jsr $494f		jsr	FloatCompare
.3d3d	20 19 49	jsr $4919		jsr	CompareEqual
.3d40	20 45 48	jsr $4845		jsr	FPAssertCheck
.3d43	20 55 48	jsr $4855		jsr	FPPushConstant	; -4.73
>3d46	7b 14 ae 4b				.dword	$4bae147b
>3d4a	e4 80					.byte	$e4,$80
.3d4c	20 50 51	jsr $5150		jsr	FloatSine
.3d4f	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.99984493
>3d52	2e eb fa 7f				.dword	$7ffaeb2e
>3d56	e1 00					.byte	$e1,$00
.3d58	20 88 48	jsr $4888		jsr	FloatSubtract
.3d5b	20 52 48	jsr $4852		jsr	FPAbs
.3d5e	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>3d61	4c 37 89 41				.dword	$4189374c
>3d65	d8 00					.byte	$d8,$00
.3d67	20 4f 49	jsr $494f		jsr	FloatCompare
.3d6a	20 2f 49	jsr $492f		jsr	CompareLess
.3d6d	20 45 48	jsr $4845		jsr	FPAssertCheck
.3d70	20 55 48	jsr $4855		jsr	FPPushConstant	; -4.73
>3d73	7b 14 ae 4b				.dword	$4bae147b
>3d77	e4 80					.byte	$e4,$80
.3d79	20 b0 4f	jsr $4fb0		jsr	FloatCosine
.3d7c	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.01761011
>3d7f	e8 89 21 48				.dword	$482189e8
>3d83	dc 00					.byte	$dc,$00
.3d85	20 88 48	jsr $4888		jsr	FloatSubtract
.3d88	20 52 48	jsr $4852		jsr	FPAbs
.3d8b	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>3d8e	4c 37 89 41				.dword	$4189374c
>3d92	d8 00					.byte	$d8,$00
.3d94	20 4f 49	jsr $494f		jsr	FloatCompare
.3d97	20 2f 49	jsr $492f		jsr	CompareLess
.3d9a	20 45 48	jsr $4845		jsr	FPAssertCheck
.3d9d	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.28
>3da0	7b 14 ae 47				.dword	$47ae147b
>3da4	e0 00					.byte	$e0,$00
.3da6	20 c1 51	jsr $51c1		jsr	FloatTangent
.3da9	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.28755433
>3dac	1b 29 9d 49				.dword	$499d291b
>3db0	e0 00					.byte	$e0,$00
.3db2	20 88 48	jsr $4888		jsr	FloatSubtract
.3db5	20 52 48	jsr $4852		jsr	FPAbs
.3db8	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>3dbb	4c 37 89 41				.dword	$4189374c
>3dbf	d8 00					.byte	$d8,$00
.3dc1	20 4f 49	jsr $494f		jsr	FloatCompare
.3dc4	20 45 48	jsr $4845		jsr	FPAssertCheck
.3dc7	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.516
>3dca	ba 49 0c 42				.dword	$420c49ba
>3dce	e1 00					.byte	$e1,$00
.3dd0	20 95 4e	jsr $4e95		jsr	FloatArcTan
.3dd3	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.47636552
>3dd6	39 17 f3 79				.dword	$79f31739
>3dda	e0 00					.byte	$e0,$00
.3ddc	20 88 48	jsr $4888		jsr	FloatSubtract
.3ddf	20 52 48	jsr $4852		jsr	FPAbs
.3de2	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>3de5	4c 37 89 41				.dword	$4189374c
>3de9	d8 00					.byte	$d8,$00
.3deb	20 4f 49	jsr $494f		jsr	FloatCompare
.3dee	20 45 48	jsr $4845		jsr	FPAssertCheck
.3df1	20 55 48	jsr $4855		jsr	FPPushConstant	; -1.69
>3df4	c3 f5 28 6c				.dword	$6c28f5c3
>3df8	e2 80					.byte	$e2,$80
.3dfa	20 bc 4f	jsr $4fbc		jsr	FloatExponent
.3dfd	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.18451952
>3e00	b0 57 79 5e				.dword	$5e7957b0
>3e04	df 00					.byte	$df,$00
.3e06	20 88 48	jsr $4888		jsr	FloatSubtract
.3e09	20 52 48	jsr $4852		jsr	FPAbs
.3e0c	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>3e0f	4c 37 89 41				.dword	$4189374c
>3e13	d8 00					.byte	$d8,$00
.3e15	20 4f 49	jsr $494f		jsr	FloatCompare
.3e18	20 45 48	jsr $4845		jsr	FPAssertCheck
.3e1b	20 55 48	jsr $4855		jsr	FPPushConstant	; 68.76
>3e1e	5c 8f c2 44				.dword	$44c28f5c
>3e22	e8 00					.byte	$e8,$00
.3e24	20 bf 50	jsr $50bf		jsr	FloatLogarithm
.3e27	20 55 48	jsr $4855		jsr	FPPushConstant	; 4.23062218
>3e2a	e2 a0 b0 43				.dword	$43b0a0e2
>3e2e	e4 00					.byte	$e4,$00
.3e30	20 88 48	jsr $4888		jsr	FloatSubtract
.3e33	20 52 48	jsr $4852		jsr	FPAbs
.3e36	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>3e39	4c 37 89 41				.dword	$4189374c
>3e3d	d8 00					.byte	$d8,$00
.3e3f	20 4f 49	jsr $494f		jsr	FloatCompare
.3e42	20 45 48	jsr $4845		jsr	FPAssertCheck
.3e45	20 55 48	jsr $4855		jsr	FPPushConstant	; 67.32
>3e48	85 eb 51 43				.dword	$4351eb85
>3e4c	e8 00					.byte	$e8,$00
.3e4e	20 b5 51	jsr $51b5		jsr	FloatSquareRoot
.3e51	20 55 48	jsr $4855		jsr	FPPushConstant	; 8.2048766
>3e54	58 96 a3 41				.dword	$41a39658
>3e58	e5 00					.byte	$e5,$00
.3e5a	20 88 48	jsr $4888		jsr	FloatSubtract
.3e5d	20 52 48	jsr $4852		jsr	FPAbs
.3e60	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>3e63	4c 37 89 41				.dword	$4189374c
>3e67	d8 00					.byte	$d8,$00
.3e69	20 4f 49	jsr $494f		jsr	FloatCompare
.3e6c	20 45 48	jsr $4845		jsr	FPAssertCheck
.3e6f	20 55 48	jsr $4855		jsr	FPPushConstant	; 2.04
>3e72	14 ae 47 41				.dword	$4147ae14
>3e76	e3 00					.byte	$e3,$00
.3e78	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.3
>3e7b	33 33 33 53				.dword	$53333333
>3e7f	e2 00					.byte	$e2,$00
.3e81	20 33 51	jsr $5133		jsr	FloatPower
.3e84	20 55 48	jsr $4855		jsr	FPPushConstant	; 2.52649951
>3e87	80 15 d9 50				.dword	$50d91580
>3e8b	e3 00					.byte	$e3,$00
.3e8d	20 88 48	jsr $4888		jsr	FloatSubtract
.3e90	20 52 48	jsr $4852		jsr	FPAbs
.3e93	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.01
>3e96	1f 85 eb 51				.dword	$51eb851f
>3e9a	db 00					.byte	$db,$00
.3e9c	20 4f 49	jsr $494f		jsr	FloatCompare
.3e9f	20 45 48	jsr $4845		jsr	FPAssertCheck
.3ea2	20 55 48	jsr $4855		jsr	FPPushConstant	; -37.24402689
>3ea5	18 f1 7c 4a				.dword	$4a7cf118
>3ea9	e7 80					.byte	$e7,$80
.3eab	20 2c 4e	jsr $4e2c		jsr	FloatNegate
.3eae	20 55 48	jsr $4855		jsr	FPPushConstant	; 37.24402689
>3eb1	18 f1 7c 4a				.dword	$4a7cf118
>3eb5	e7 00					.byte	$e7,$00
.3eb7	20 4f 49	jsr $494f		jsr	FloatCompare
.3eba	20 19 49	jsr $4919		jsr	CompareEqual
.3ebd	20 45 48	jsr $4845		jsr	FPAssertCheck
.3ec0	20 55 48	jsr $4855		jsr	FPPushConstant	; -37.24402689
>3ec3	18 f1 7c 4a				.dword	$4a7cf118
>3ec7	e7 80					.byte	$e7,$80
.3ec9	20 a5 4a	jsr $4aa5		jsr	FloatIntegerPart
.3ecc	20 55 48	jsr $4855		jsr	FPPushConstant	; -37
>3ecf	25 00 00 00				.dword	$00000025
>3ed3	00 80					.byte	$00,$80
.3ed5	20 4f 49	jsr $494f		jsr	FloatCompare
.3ed8	20 19 49	jsr $4919		jsr	CompareEqual
.3edb	20 45 48	jsr $4845		jsr	FPAssertCheck
.3ede	20 55 48	jsr $4855		jsr	FPPushConstant	; -3.36
>3ee1	b8 1e 85 6b				.dword	$6b851eb8
>3ee5	e3 80					.byte	$e3,$80
.3ee7	20 50 51	jsr $5150		jsr	FloatSine
.3eea	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.21667508
>3eed	3d 09 f0 6e				.dword	$6ef0093d
>3ef1	df 00					.byte	$df,$00
.3ef3	20 88 48	jsr $4888		jsr	FloatSubtract
.3ef6	20 52 48	jsr $4852		jsr	FPAbs
.3ef9	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>3efc	4c 37 89 41				.dword	$4189374c
>3f00	d8 00					.byte	$d8,$00
.3f02	20 4f 49	jsr $494f		jsr	FloatCompare
.3f05	20 2f 49	jsr $492f		jsr	CompareLess
.3f08	20 45 48	jsr $4845		jsr	FPAssertCheck
.3f0b	20 55 48	jsr $4855		jsr	FPPushConstant	; -3.36
>3f0e	b8 1e 85 6b				.dword	$6b851eb8
>3f12	e3 80					.byte	$e3,$80
.3f14	20 b0 4f	jsr $4fb0		jsr	FloatCosine
.3f17	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.97624378
>3f1a	62 8e f5 7c				.dword	$7cf58e62
>3f1e	e1 80					.byte	$e1,$80
.3f20	20 88 48	jsr $4888		jsr	FloatSubtract
.3f23	20 52 48	jsr $4852		jsr	FPAbs
.3f26	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>3f29	4c 37 89 41				.dword	$4189374c
>3f2d	d8 00					.byte	$d8,$00
.3f2f	20 4f 49	jsr $494f		jsr	FloatCompare
.3f32	20 2f 49	jsr $492f		jsr	CompareLess
.3f35	20 45 48	jsr $4845		jsr	FPAssertCheck
.3f38	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.24
>3f3b	ae 47 e1 7a				.dword	$7ae147ae
>3f3f	df 00					.byte	$df,$00
.3f41	20 c1 51	jsr $51c1		jsr	FloatTangent
.3f44	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.2447167
>3f47	df 81 4b 7d				.dword	$7d4b81df
>3f4b	df 00					.byte	$df,$00
.3f4d	20 88 48	jsr $4888		jsr	FloatSubtract
.3f50	20 52 48	jsr $4852		jsr	FPAbs
.3f53	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>3f56	4c 37 89 41				.dword	$4189374c
>3f5a	d8 00					.byte	$d8,$00
.3f5c	20 4f 49	jsr $494f		jsr	FloatCompare
.3f5f	20 45 48	jsr $4845		jsr	FPAssertCheck
.3f62	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.194
>3f65	cf f7 53 63				.dword	$6353f7cf
>3f69	df 00					.byte	$df,$00
.3f6b	20 95 4e	jsr $4e95		jsr	FloatArcTan
.3f6e	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.19161973
>3f71	33 fb 1b 62				.dword	$621bfb33
>3f75	df 00					.byte	$df,$00
.3f77	20 88 48	jsr $4888		jsr	FloatSubtract
.3f7a	20 52 48	jsr $4852		jsr	FPAbs
.3f7d	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>3f80	4c 37 89 41				.dword	$4189374c
>3f84	d8 00					.byte	$d8,$00
.3f86	20 4f 49	jsr $494f		jsr	FloatCompare
.3f89	20 45 48	jsr $4845		jsr	FPAssertCheck
.3f8c	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.86
>3f8f	71 3d 0a 77				.dword	$770a3d71
>3f93	e2 00					.byte	$e2,$00
.3f95	20 bc 4f	jsr $4fbc		jsr	FloatExponent
.3f98	20 55 48	jsr $4855		jsr	FPPushConstant	; 6.42373677
>3f9b	35 a0 c7 66				.dword	$66c7a035
>3f9f	e4 00					.byte	$e4,$00
.3fa1	20 88 48	jsr $4888		jsr	FloatSubtract
.3fa4	20 52 48	jsr $4852		jsr	FPAbs
.3fa7	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>3faa	4c 37 89 41				.dword	$4189374c
>3fae	d8 00					.byte	$d8,$00
.3fb0	20 4f 49	jsr $494f		jsr	FloatCompare
.3fb3	20 45 48	jsr $4845		jsr	FPAssertCheck
.3fb6	20 55 48	jsr $4855		jsr	FPPushConstant	; 99.93
>3fb9	7b 14 ee 63				.dword	$63ee147b
>3fbd	e8 00					.byte	$e8,$00
.3fbf	20 bf 50	jsr $50bf		jsr	FloatLogarithm
.3fc2	20 55 48	jsr $4855		jsr	FPPushConstant	; 4.60446994
>3fc5	ac e8 ab 49				.dword	$49abe8ac
>3fc9	e4 00					.byte	$e4,$00
.3fcb	20 88 48	jsr $4888		jsr	FloatSubtract
.3fce	20 52 48	jsr $4852		jsr	FPAbs
.3fd1	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>3fd4	4c 37 89 41				.dword	$4189374c
>3fd8	d8 00					.byte	$d8,$00
.3fda	20 4f 49	jsr $494f		jsr	FloatCompare
.3fdd	20 45 48	jsr $4845		jsr	FPAssertCheck
.3fe0	20 55 48	jsr $4855		jsr	FPPushConstant	; 76.43
>3fe3	7b 14 6e 4c				.dword	$4c6e147b
>3fe7	e8 00					.byte	$e8,$00
.3fe9	20 b5 51	jsr $51b5		jsr	FloatSquareRoot
.3fec	20 55 48	jsr $4855		jsr	FPPushConstant	; 8.74242529
>3fef	ac 7c f0 45				.dword	$45f07cac
>3ff3	e5 00					.byte	$e5,$00
.3ff5	20 88 48	jsr $4888		jsr	FloatSubtract
.3ff8	20 52 48	jsr $4852		jsr	FPAbs
.3ffb	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>3ffe	4c 37 89 41				.dword	$4189374c
>4002	d8 00					.byte	$d8,$00
.4004	20 4f 49	jsr $494f		jsr	FloatCompare
.4007	20 45 48	jsr $4845		jsr	FPAssertCheck
.400a	20 55 48	jsr $4855		jsr	FPPushConstant	; 2.67
>400d	d7 a3 70 55				.dword	$5570a3d7
>4011	e3 00					.byte	$e3,$00
.4013	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.4
>4016	9a 99 99 59				.dword	$5999999a
>401a	e2 00					.byte	$e2,$00
.401c	20 33 51	jsr $5133		jsr	FloatPower
.401f	20 55 48	jsr $4855		jsr	FPPushConstant	; 3.95472023
>4022	71 11 8d 7e				.dword	$7e8d1171
>4026	e3 00					.byte	$e3,$00
.4028	20 88 48	jsr $4888		jsr	FloatSubtract
.402b	20 52 48	jsr $4852		jsr	FPAbs
.402e	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.01
>4031	1f 85 eb 51				.dword	$51eb851f
>4035	db 00					.byte	$db,$00
.4037	20 4f 49	jsr $494f		jsr	FloatCompare
.403a	20 45 48	jsr $4845		jsr	FPAssertCheck
.403d	20 55 48	jsr $4855		jsr	FPPushConstant	; 49.41451365
>4040	22 3b d4 62				.dword	$62d43b22
>4044	e7 00					.byte	$e7,$00
.4046	20 2c 4e	jsr $4e2c		jsr	FloatNegate
.4049	20 55 48	jsr $4855		jsr	FPPushConstant	; -49.41451365
>404c	22 3b d4 62				.dword	$62d43b22
>4050	e7 80					.byte	$e7,$80
.4052	20 4f 49	jsr $494f		jsr	FloatCompare
.4055	20 19 49	jsr $4919		jsr	CompareEqual
.4058	20 45 48	jsr $4845		jsr	FPAssertCheck
.405b	20 55 48	jsr $4855		jsr	FPPushConstant	; 49.41451365
>405e	22 3b d4 62				.dword	$62d43b22
>4062	e7 00					.byte	$e7,$00
.4064	20 a5 4a	jsr $4aa5		jsr	FloatIntegerPart
.4067	20 55 48	jsr $4855		jsr	FPPushConstant	; 49
>406a	31 00 00 00				.dword	$00000031
>406e	00 00					.byte	$00,$00
.4070	20 4f 49	jsr $494f		jsr	FloatCompare
.4073	20 19 49	jsr $4919		jsr	CompareEqual
.4076	20 45 48	jsr $4845		jsr	FPAssertCheck
.4079	20 55 48	jsr $4855		jsr	FPPushConstant	; -4.81
>407c	8f c2 f5 4c				.dword	$4cf5c28f
>4080	e4 80					.byte	$e4,$80
.4082	20 50 51	jsr $5150		jsr	FloatSine
.4085	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.99523983
>4088	cd 04 64 7f				.dword	$7f6404cd
>408c	e1 00					.byte	$e1,$00
.408e	20 88 48	jsr $4888		jsr	FloatSubtract
.4091	20 52 48	jsr $4852		jsr	FPAbs
.4094	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>4097	4c 37 89 41				.dword	$4189374c
>409b	d8 00					.byte	$d8,$00
.409d	20 4f 49	jsr $494f		jsr	FloatCompare
.40a0	20 2f 49	jsr $492f		jsr	CompareLess
.40a3	20 45 48	jsr $4845		jsr	FPAssertCheck
.40a6	20 55 48	jsr $4855		jsr	FPPushConstant	; -4.81
>40a9	8f c2 f5 4c				.dword	$4cf5c28f
>40ad	e4 80					.byte	$e4,$80
.40af	20 b0 4f	jsr $4fb0		jsr	FloatCosine
.40b2	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.09745609
>40b5	7d 87 cb 63				.dword	$63cb877d
>40b9	de 00					.byte	$de,$00
.40bb	20 88 48	jsr $4888		jsr	FloatSubtract
.40be	20 52 48	jsr $4852		jsr	FPAbs
.40c1	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>40c4	4c 37 89 41				.dword	$4189374c
>40c8	d8 00					.byte	$d8,$00
.40ca	20 4f 49	jsr $494f		jsr	FloatCompare
.40cd	20 2f 49	jsr $492f		jsr	CompareLess
.40d0	20 45 48	jsr $4845		jsr	FPAssertCheck
.40d3	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.15
>40d6	cd cc cc 4c				.dword	$4ccccccd
>40da	df 00					.byte	$df,$00
.40dc	20 c1 51	jsr $51c1		jsr	FloatTangent
.40df	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.15113522
>40e2	76 98 61 4d				.dword	$4d619876
>40e6	df 00					.byte	$df,$00
.40e8	20 88 48	jsr $4888		jsr	FloatSubtract
.40eb	20 52 48	jsr $4852		jsr	FPAbs
.40ee	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>40f1	4c 37 89 41				.dword	$4189374c
>40f5	d8 00					.byte	$d8,$00
.40f7	20 4f 49	jsr $494f		jsr	FloatCompare
.40fa	20 45 48	jsr $4845		jsr	FPAssertCheck
.40fd	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.198
>4100	31 08 ac 4c				.dword	$4cac0831
>4104	e2 00					.byte	$e2,$00
.4106	20 95 4e	jsr $4e95		jsr	FloatArcTan
.4109	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.87523757
>410c	e2 c8 07 70				.dword	$7007c8e2
>4110	e1 00					.byte	$e1,$00
.4112	20 88 48	jsr $4888		jsr	FloatSubtract
.4115	20 52 48	jsr $4852		jsr	FPAbs
.4118	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>411b	4c 37 89 41				.dword	$4189374c
>411f	d8 00					.byte	$d8,$00
.4121	20 4f 49	jsr $494f		jsr	FloatCompare
.4124	20 45 48	jsr $4845		jsr	FPAssertCheck
.4127	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.87
>412a	f6 28 5c 6f				.dword	$6f5c28f6
>412e	e1 00					.byte	$e1,$00
.4130	20 bc 4f	jsr $4fbc		jsr	FloatExponent
.4133	20 55 48	jsr $4855		jsr	FPPushConstant	; 2.38691085
>4136	dd 92 61 4c				.dword	$4c6192dd
>413a	e3 00					.byte	$e3,$00
.413c	20 88 48	jsr $4888		jsr	FloatSubtract
.413f	20 52 48	jsr $4852		jsr	FPAbs
.4142	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>4145	4c 37 89 41				.dword	$4189374c
>4149	d8 00					.byte	$d8,$00
.414b	20 4f 49	jsr $494f		jsr	FloatCompare
.414e	20 45 48	jsr $4845		jsr	FPAssertCheck
.4151	20 55 48	jsr $4855		jsr	FPPushConstant	; 81.56
>4154	29 5c 8f 51				.dword	$518f5c29
>4158	e8 00					.byte	$e8,$00
.415a	20 bf 50	jsr $50bf		jsr	FloatLogarithm
.415d	20 55 48	jsr $4855		jsr	FPPushConstant	; 4.40133895
>4160	64 e2 6b 46				.dword	$466be264
>4164	e4 00					.byte	$e4,$00
.4166	20 88 48	jsr $4888		jsr	FloatSubtract
.4169	20 52 48	jsr $4852		jsr	FPAbs
.416c	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>416f	4c 37 89 41				.dword	$4189374c
>4173	d8 00					.byte	$d8,$00
.4175	20 4f 49	jsr $494f		jsr	FloatCompare
.4178	20 45 48	jsr $4845		jsr	FPAssertCheck
.417b	20 55 48	jsr $4855		jsr	FPPushConstant	; 53.28
>417e	29 5c 8f 6a				.dword	$6a8f5c29
>4182	e7 00					.byte	$e7,$00
.4184	20 b5 51	jsr $51b5		jsr	FloatSquareRoot
.4187	20 55 48	jsr $4855		jsr	FPPushConstant	; 7.29931504
>418a	91 fe c9 74				.dword	$74c9fe91
>418e	e4 00					.byte	$e4,$00
.4190	20 88 48	jsr $4888		jsr	FloatSubtract
.4193	20 52 48	jsr $4852		jsr	FPAbs
.4196	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>4199	4c 37 89 41				.dword	$4189374c
>419d	d8 00					.byte	$d8,$00
.419f	20 4f 49	jsr $494f		jsr	FloatCompare
.41a2	20 45 48	jsr $4845		jsr	FPAssertCheck
.41a5	20 55 48	jsr $4855		jsr	FPPushConstant	; 3.29333333
>41a8	94 fc 62 69				.dword	$6962fc94
>41ac	e3 00					.byte	$e3,$00
.41ae	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.6
>41b1	66 66 66 66				.dword	$66666666
>41b5	e2 00					.byte	$e2,$00
.41b7	20 33 51	jsr $5133		jsr	FloatPower
.41ba	20 55 48	jsr $4855		jsr	FPPushConstant	; 6.73313161
>41bd	36 e8 ba 6b				.dword	$6bbae836
>41c1	e4 00					.byte	$e4,$00
.41c3	20 88 48	jsr $4888		jsr	FloatSubtract
.41c6	20 52 48	jsr $4852		jsr	FPAbs
.41c9	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.01
>41cc	1f 85 eb 51				.dword	$51eb851f
>41d0	db 00					.byte	$db,$00
.41d2	20 4f 49	jsr $494f		jsr	FloatCompare
.41d5	20 45 48	jsr $4845		jsr	FPAssertCheck
.41d8	20 55 48	jsr $4855		jsr	FPPushConstant	; 32.28233579
>41db	51 8e 90 40				.dword	$40908e51
>41df	e7 00					.byte	$e7,$00
.41e1	20 2c 4e	jsr $4e2c		jsr	FloatNegate
.41e4	20 55 48	jsr $4855		jsr	FPPushConstant	; -32.28233579
>41e7	51 8e 90 40				.dword	$40908e51
>41eb	e7 80					.byte	$e7,$80
.41ed	20 4f 49	jsr $494f		jsr	FloatCompare
.41f0	20 19 49	jsr $4919		jsr	CompareEqual
.41f3	20 45 48	jsr $4845		jsr	FPAssertCheck
.41f6	20 55 48	jsr $4855		jsr	FPPushConstant	; 32.28233579
>41f9	51 8e 90 40				.dword	$40908e51
>41fd	e7 00					.byte	$e7,$00
.41ff	20 a5 4a	jsr $4aa5		jsr	FloatIntegerPart
.4202	20 55 48	jsr $4855		jsr	FPPushConstant	; 32
>4205	20 00 00 00				.dword	$00000020
>4209	00 00					.byte	$00,$00
.420b	20 4f 49	jsr $494f		jsr	FloatCompare
.420e	20 19 49	jsr $4919		jsr	CompareEqual
.4211	20 45 48	jsr $4845		jsr	FPAssertCheck
.4214	20 55 48	jsr $4855		jsr	FPPushConstant	; 10.54
>4217	85 eb 51 54				.dword	$5451eb85
>421b	e5 00					.byte	$e5,$00
.421d	20 50 51	jsr $5150		jsr	FloatSine
.4220	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.8980085
>4223	4a f1 f1 72				.dword	$72f1f14a
>4227	e1 80					.byte	$e1,$80
.4229	20 88 48	jsr $4888		jsr	FloatSubtract
.422c	20 52 48	jsr $4852		jsr	FPAbs
.422f	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>4232	4c 37 89 41				.dword	$4189374c
>4236	d8 00					.byte	$d8,$00
.4238	20 4f 49	jsr $494f		jsr	FloatCompare
.423b	20 2f 49	jsr $492f		jsr	CompareLess
.423e	20 45 48	jsr $4845		jsr	FPAssertCheck
.4241	20 55 48	jsr $4855		jsr	FPPushConstant	; 10.54
>4244	85 eb 51 54				.dword	$5451eb85
>4248	e5 00					.byte	$e5,$00
.424a	20 b0 4f	jsr $4fb0		jsr	FloatCosine
.424d	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.4399781
>4250	9e 67 a2 70				.dword	$70a2679e
>4254	e0 80					.byte	$e0,$80
.4256	20 88 48	jsr $4888		jsr	FloatSubtract
.4259	20 52 48	jsr $4852		jsr	FPAbs
.425c	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>425f	4c 37 89 41				.dword	$4189374c
>4263	d8 00					.byte	$d8,$00
.4265	20 4f 49	jsr $494f		jsr	FloatCompare
.4268	20 2f 49	jsr $492f		jsr	CompareLess
.426b	20 45 48	jsr $4845		jsr	FPAssertCheck
.426e	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.36
>4271	c3 f5 28 5c				.dword	$5c28f5c3
>4275	e0 00					.byte	$e0,$00
.4277	20 c1 51	jsr $51c1		jsr	FloatTangent
.427a	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.37640285
>427d	eb ef 5b 60				.dword	$605befeb
>4281	e0 00					.byte	$e0,$00
.4283	20 88 48	jsr $4888		jsr	FloatSubtract
.4286	20 52 48	jsr $4852		jsr	FPAbs
.4289	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>428c	4c 37 89 41				.dword	$4189374c
>4290	d8 00					.byte	$d8,$00
.4292	20 4f 49	jsr $494f		jsr	FloatCompare
.4295	20 45 48	jsr $4845		jsr	FPAssertCheck
.4298	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.62
>429b	f6 28 5c 4f				.dword	$4f5c28f6
>429f	e1 00					.byte	$e1,$00
.42a1	20 95 4e	jsr $4e95		jsr	FloatArcTan
.42a4	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.55499573
>42a7	9f 19 0a 47				.dword	$470a199f
>42ab	e1 00					.byte	$e1,$00
.42ad	20 88 48	jsr $4888		jsr	FloatSubtract
.42b0	20 52 48	jsr $4852		jsr	FPAbs
.42b3	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>42b6	4c 37 89 41				.dword	$4189374c
>42ba	d8 00					.byte	$d8,$00
.42bc	20 4f 49	jsr $494f		jsr	FloatCompare
.42bf	20 45 48	jsr $4845		jsr	FPAssertCheck
.42c2	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.69
>42c5	85 eb 51 58				.dword	$5851eb85
>42c9	e1 80					.byte	$e1,$80
.42cb	20 bc 4f	jsr $4fbc		jsr	FloatExponent
.42ce	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.50157607
>42d1	09 a5 33 40				.dword	$4033a509
>42d5	e1 00					.byte	$e1,$00
.42d7	20 88 48	jsr $4888		jsr	FloatSubtract
.42da	20 52 48	jsr $4852		jsr	FPAbs
.42dd	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>42e0	4c 37 89 41				.dword	$4189374c
>42e4	d8 00					.byte	$d8,$00
.42e6	20 4f 49	jsr $494f		jsr	FloatCompare
.42e9	20 45 48	jsr $4845		jsr	FPAssertCheck
.42ec	20 55 48	jsr $4855		jsr	FPPushConstant	; 85.35
>42ef	9a 99 59 55				.dword	$5559999a
>42f3	e8 00					.byte	$e8,$00
.42f5	20 bf 50	jsr $50bf		jsr	FloatLogarithm
.42f8	20 55 48	jsr $4855		jsr	FPPushConstant	; 4.44676045
>42fb	49 ee 25 47				.dword	$4725ee49
>42ff	e4 00					.byte	$e4,$00
.4301	20 88 48	jsr $4888		jsr	FloatSubtract
.4304	20 52 48	jsr $4852		jsr	FPAbs
.4307	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>430a	4c 37 89 41				.dword	$4189374c
>430e	d8 00					.byte	$d8,$00
.4310	20 4f 49	jsr $494f		jsr	FloatCompare
.4313	20 45 48	jsr $4845		jsr	FPAssertCheck
.4316	20 55 48	jsr $4855		jsr	FPPushConstant	; 66.04
>4319	71 3d 0a 42				.dword	$420a3d71
>431d	e8 00					.byte	$e8,$00
.431f	20 b5 51	jsr $51b5		jsr	FloatSquareRoot
.4322	20 55 48	jsr $4855		jsr	FPPushConstant	; 8.12649986
>4325	5c 12 03 41				.dword	$4103125c
>4329	e5 00					.byte	$e5,$00
.432b	20 88 48	jsr $4888		jsr	FloatSubtract
.432e	20 52 48	jsr $4852		jsr	FPAbs
.4331	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>4334	4c 37 89 41				.dword	$4189374c
>4338	d8 00					.byte	$d8,$00
.433a	20 4f 49	jsr $494f		jsr	FloatCompare
.433d	20 45 48	jsr $4845		jsr	FPAssertCheck
.4340	20 55 48	jsr $4855		jsr	FPPushConstant	; 3.25666667
>4343	05 9d 36 68				.dword	$68369d05
>4347	e3 00					.byte	$e3,$00
.4349	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.8
>434c	66 66 66 66				.dword	$66666666
>4350	e1 00					.byte	$e1,$00
.4352	20 33 51	jsr $5133		jsr	FloatPower
.4355	20 55 48	jsr $4855		jsr	FPPushConstant	; 2.57169018
>4358	34 49 4b 52				.dword	$524b4934
>435c	e3 00					.byte	$e3,$00
.435e	20 88 48	jsr $4888		jsr	FloatSubtract
.4361	20 52 48	jsr $4852		jsr	FPAbs
.4364	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.01
>4367	1f 85 eb 51				.dword	$51eb851f
>436b	db 00					.byte	$db,$00
.436d	20 4f 49	jsr $494f		jsr	FloatCompare
.4370	20 45 48	jsr $4845		jsr	FPAssertCheck
.4373	20 55 48	jsr $4855		jsr	FPPushConstant	; -72.15129181
>4376	0f bb 26 48				.dword	$4826bb0f
>437a	e8 80					.byte	$e8,$80
.437c	20 2c 4e	jsr $4e2c		jsr	FloatNegate
.437f	20 55 48	jsr $4855		jsr	FPPushConstant	; 72.15129181
>4382	0f bb 26 48				.dword	$4826bb0f
>4386	e8 00					.byte	$e8,$00
.4388	20 4f 49	jsr $494f		jsr	FloatCompare
.438b	20 19 49	jsr $4919		jsr	CompareEqual
.438e	20 45 48	jsr $4845		jsr	FPAssertCheck
.4391	20 55 48	jsr $4855		jsr	FPPushConstant	; -72.15129181
>4394	0f bb 26 48				.dword	$4826bb0f
>4398	e8 80					.byte	$e8,$80
.439a	20 a5 4a	jsr $4aa5		jsr	FloatIntegerPart
.439d	20 55 48	jsr $4855		jsr	FPPushConstant	; -72
>43a0	48 00 00 00				.dword	$00000048
>43a4	00 80					.byte	$00,$80
.43a6	20 4f 49	jsr $494f		jsr	FloatCompare
.43a9	20 19 49	jsr $4919		jsr	CompareEqual
.43ac	20 45 48	jsr $4845		jsr	FPAssertCheck
.43af	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.66
>43b2	48 e1 7a 54				.dword	$547ae148
>43b6	e1 80					.byte	$e1,$80
.43b8	20 50 51	jsr $5150		jsr	FloatSine
.43bb	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.61311685
>43be	ea 9c 7a 4e				.dword	$4e7a9cea
>43c2	e1 80					.byte	$e1,$80
.43c4	20 88 48	jsr $4888		jsr	FloatSubtract
.43c7	20 52 48	jsr $4852		jsr	FPAbs
.43ca	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>43cd	4c 37 89 41				.dword	$4189374c
>43d1	d8 00					.byte	$d8,$00
.43d3	20 4f 49	jsr $494f		jsr	FloatCompare
.43d6	20 2f 49	jsr $492f		jsr	CompareLess
.43d9	20 45 48	jsr $4845		jsr	FPAssertCheck
.43dc	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.66
>43df	48 e1 7a 54				.dword	$547ae148
>43e3	e1 80					.byte	$e1,$80
.43e5	20 b0 4f	jsr $4fb0		jsr	FloatCosine
.43e8	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.78999223
>43eb	24 77 1e 65				.dword	$651e7724
>43ef	e1 00					.byte	$e1,$00
.43f1	20 88 48	jsr $4888		jsr	FloatSubtract
.43f4	20 52 48	jsr $4852		jsr	FPAbs
.43f7	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>43fa	4c 37 89 41				.dword	$4189374c
>43fe	d8 00					.byte	$d8,$00
.4400	20 4f 49	jsr $494f		jsr	FloatCompare
.4403	20 2f 49	jsr $492f		jsr	CompareLess
.4406	20 45 48	jsr $4845		jsr	FPAssertCheck
.4409	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.23
>440c	5c 8f c2 75				.dword	$75c28f5c
>4410	df 00					.byte	$df,$00
.4412	20 c1 51	jsr $51c1		jsr	FloatTangent
.4415	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.23414336
>4418	74 a3 e1 77				.dword	$77e1a374
>441c	df 00					.byte	$df,$00
.441e	20 88 48	jsr $4888		jsr	FloatSubtract
.4421	20 52 48	jsr $4852		jsr	FPAbs
.4424	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>4427	4c 37 89 41				.dword	$4189374c
>442b	d8 00					.byte	$d8,$00
.442d	20 4f 49	jsr $494f		jsr	FloatCompare
.4430	20 45 48	jsr $4845		jsr	FPAssertCheck
.4433	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.42
>4436	b8 1e 85 6b				.dword	$6b851eb8
>443a	e0 00					.byte	$e0,$00
.443c	20 95 4e	jsr $4e95		jsr	FloatArcTan
.443f	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.39762799
>4442	ad f2 ca 65				.dword	$65caf2ad
>4446	e0 00					.byte	$e0,$00
.4448	20 88 48	jsr $4888		jsr	FloatSubtract
.444b	20 52 48	jsr $4852		jsr	FPAbs
.444e	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>4451	4c 37 89 41				.dword	$4189374c
>4455	d8 00					.byte	$d8,$00
.4457	20 4f 49	jsr $494f		jsr	FloatCompare
.445a	20 45 48	jsr $4845		jsr	FPAssertCheck
.445d	20 55 48	jsr $4855		jsr	FPPushConstant	; -1.9
>4460	9a 99 99 79				.dword	$7999999a
>4464	e2 80					.byte	$e2,$80
.4466	20 bc 4f	jsr $4fbc		jsr	FloatExponent
.4469	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.14956862
>446c	17 42 94 4c				.dword	$4c944217
>4470	df 00					.byte	$df,$00
.4472	20 88 48	jsr $4888		jsr	FloatSubtract
.4475	20 52 48	jsr $4852		jsr	FPAbs
.4478	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>447b	4c 37 89 41				.dword	$4189374c
>447f	d8 00					.byte	$d8,$00
.4481	20 4f 49	jsr $494f		jsr	FloatCompare
.4484	20 45 48	jsr $4845		jsr	FPAssertCheck
.4487	20 55 48	jsr $4855		jsr	FPPushConstant	; 41.36
>448a	ec 51 b8 52				.dword	$52b851ec
>448e	e7 00					.byte	$e7,$00
.4490	20 bf 50	jsr $50bf		jsr	FloatLogarithm
.4493	20 55 48	jsr $4855		jsr	FPPushConstant	; 3.72231423
>4496	bb 32 1d 77				.dword	$771d32bb
>449a	e3 00					.byte	$e3,$00
.449c	20 88 48	jsr $4888		jsr	FloatSubtract
.449f	20 52 48	jsr $4852		jsr	FPAbs
.44a2	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>44a5	4c 37 89 41				.dword	$4189374c
>44a9	d8 00					.byte	$d8,$00
.44ab	20 4f 49	jsr $494f		jsr	FloatCompare
.44ae	20 45 48	jsr $4845		jsr	FPAssertCheck
.44b1	20 55 48	jsr $4855		jsr	FPPushConstant	; 40.0
>44b4	28 00 00 00				.dword	$00000028
>44b8	00 00					.byte	$00,$00
.44ba	20 b5 51	jsr $51b5		jsr	FloatSquareRoot
.44bd	20 55 48	jsr $4855		jsr	FPPushConstant	; 6.32455532
>44c0	eb 60 31 65				.dword	$653160eb
>44c4	e4 00					.byte	$e4,$00
.44c6	20 88 48	jsr $4888		jsr	FloatSubtract
.44c9	20 52 48	jsr $4852		jsr	FPAbs
.44cc	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>44cf	4c 37 89 41				.dword	$4189374c
>44d3	d8 00					.byte	$d8,$00
.44d5	20 4f 49	jsr $494f		jsr	FloatCompare
.44d8	20 45 48	jsr $4845		jsr	FPAssertCheck
.44db	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.88333333
>44de	0a 11 11 71				.dword	$7111110a
>44e2	e1 00					.byte	$e1,$00
.44e4	20 55 48	jsr $4855		jsr	FPPushConstant	; 2.0
>44e7	02 00 00 00				.dword	$00000002
>44eb	00 00					.byte	$00,$00
.44ed	20 33 51	jsr $5133		jsr	FloatPower
.44f0	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.78027778
>44f3	6d 24 e0 63				.dword	$63e0246d
>44f7	e1 00					.byte	$e1,$00
.44f9	20 88 48	jsr $4888		jsr	FloatSubtract
.44fc	20 52 48	jsr $4852		jsr	FPAbs
.44ff	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.01
>4502	1f 85 eb 51				.dword	$51eb851f
>4506	db 00					.byte	$db,$00
.4508	20 4f 49	jsr $494f		jsr	FloatCompare
.450b	20 45 48	jsr $4845		jsr	FPAssertCheck
.450e	20 55 48	jsr $4855		jsr	FPPushConstant	; 3.26759537
>4511	2a 24 90 68				.dword	$6890242a
>4515	e3 00					.byte	$e3,$00
.4517	20 2c 4e	jsr $4e2c		jsr	FloatNegate
.451a	20 55 48	jsr $4855		jsr	FPPushConstant	; -3.26759537
>451d	2a 24 90 68				.dword	$6890242a
>4521	e3 80					.byte	$e3,$80
.4523	20 4f 49	jsr $494f		jsr	FloatCompare
.4526	20 19 49	jsr $4919		jsr	CompareEqual
.4529	20 45 48	jsr $4845		jsr	FPAssertCheck
.452c	20 55 48	jsr $4855		jsr	FPPushConstant	; 3.26759537
>452f	2a 24 90 68				.dword	$6890242a
>4533	e3 00					.byte	$e3,$00
.4535	20 a5 4a	jsr $4aa5		jsr	FloatIntegerPart
.4538	20 55 48	jsr $4855		jsr	FPPushConstant	; 3
>453b	03 00 00 00				.dword	$00000003
>453f	00 00					.byte	$00,$00
.4541	20 4f 49	jsr $494f		jsr	FloatCompare
.4544	20 19 49	jsr $4919		jsr	CompareEqual
.4547	20 45 48	jsr $4845		jsr	FPAssertCheck
.454a	20 55 48	jsr $4855		jsr	FPPushConstant	; 18.46
>454d	3d 0a d7 49				.dword	$49d70a3d
>4551	e6 00					.byte	$e6,$00
.4553	20 50 51	jsr $5150		jsr	FloatSine
.4556	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.37977765
>4559	ab 1b 39 61				.dword	$61391bab
>455d	e0 80					.byte	$e0,$80
.455f	20 88 48	jsr $4888		jsr	FloatSubtract
.4562	20 52 48	jsr $4852		jsr	FPAbs
.4565	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>4568	4c 37 89 41				.dword	$4189374c
>456c	d8 00					.byte	$d8,$00
.456e	20 4f 49	jsr $494f		jsr	FloatCompare
.4571	20 2f 49	jsr $492f		jsr	CompareLess
.4574	20 45 48	jsr $4845		jsr	FPAssertCheck
.4577	20 55 48	jsr $4855		jsr	FPPushConstant	; 18.46
>457a	3d 0a d7 49				.dword	$49d70a3d
>457e	e6 00					.byte	$e6,$00
.4580	20 b0 4f	jsr $4fb0		jsr	FloatCosine
.4583	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.9250778
>4586	09 f3 68 76				.dword	$7668f309
>458a	e1 00					.byte	$e1,$00
.458c	20 88 48	jsr $4888		jsr	FloatSubtract
.458f	20 52 48	jsr $4852		jsr	FPAbs
.4592	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>4595	4c 37 89 41				.dword	$4189374c
>4599	d8 00					.byte	$d8,$00
.459b	20 4f 49	jsr $494f		jsr	FloatCompare
.459e	20 2f 49	jsr $492f		jsr	CompareLess
.45a1	20 45 48	jsr $4845		jsr	FPAssertCheck
.45a4	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.39
>45a7	3d 0a d7 63				.dword	$63d70a3d
>45ab	e0 00					.byte	$e0,$00
.45ad	20 c1 51	jsr $51c1		jsr	FloatTangent
.45b0	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.41105492
>45b3	2e e5 3a 69				.dword	$693ae52e
>45b7	e0 00					.byte	$e0,$00
.45b9	20 88 48	jsr $4888		jsr	FloatSubtract
.45bc	20 52 48	jsr $4852		jsr	FPAbs
.45bf	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>45c2	4c 37 89 41				.dword	$4189374c
>45c6	d8 00					.byte	$d8,$00
.45c8	20 4f 49	jsr $494f		jsr	FloatCompare
.45cb	20 45 48	jsr $4845		jsr	FPAssertCheck
.45ce	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.24
>45d1	f6 28 5c 4f				.dword	$4f5c28f6
>45d5	e2 00					.byte	$e2,$00
.45d7	20 95 4e	jsr $4e95		jsr	FloatArcTan
.45da	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.89213384
>45dd	11 71 31 72				.dword	$72317111
>45e1	e1 00					.byte	$e1,$00
.45e3	20 88 48	jsr $4888		jsr	FloatSubtract
.45e6	20 52 48	jsr $4852		jsr	FPAbs
.45e9	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>45ec	4c 37 89 41				.dword	$4189374c
>45f0	d8 00					.byte	$d8,$00
.45f2	20 4f 49	jsr $494f		jsr	FloatCompare
.45f5	20 45 48	jsr $4845		jsr	FPAssertCheck
.45f8	20 55 48	jsr $4855		jsr	FPPushConstant	; -1.57
>45fb	48 e1 7a 64				.dword	$647ae148
>45ff	e2 80					.byte	$e2,$80
.4601	20 bc 4f	jsr $4fbc		jsr	FloatExponent
.4604	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.20804518
>4607	d8 e5 84 6a				.dword	$6a84e5d8
>460b	df 00					.byte	$df,$00
.460d	20 88 48	jsr $4888		jsr	FloatSubtract
.4610	20 52 48	jsr $4852		jsr	FPAbs
.4613	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>4616	4c 37 89 41				.dword	$4189374c
>461a	d8 00					.byte	$d8,$00
.461c	20 4f 49	jsr $494f		jsr	FloatCompare
.461f	20 45 48	jsr $4845		jsr	FPAssertCheck
.4622	20 55 48	jsr $4855		jsr	FPPushConstant	; 79.0
>4625	4f 00 00 00				.dword	$0000004f
>4629	00 00					.byte	$00,$00
.462b	20 bf 50	jsr $50bf		jsr	FloatLogarithm
.462e	20 55 48	jsr $4855		jsr	FPPushConstant	; 4.36944785
>4631	26 42 e9 45				.dword	$45e94226
>4635	e4 00					.byte	$e4,$00
.4637	20 88 48	jsr $4888		jsr	FloatSubtract
.463a	20 52 48	jsr $4852		jsr	FPAbs
.463d	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>4640	4c 37 89 41				.dword	$4189374c
>4644	d8 00					.byte	$d8,$00
.4646	20 4f 49	jsr $494f		jsr	FloatCompare
.4649	20 45 48	jsr $4845		jsr	FPAssertCheck
.464c	20 55 48	jsr $4855		jsr	FPPushConstant	; 53.21
>464f	1f 85 6b 6a				.dword	$6a6b851f
>4653	e7 00					.byte	$e7,$00
.4655	20 b5 51	jsr $51b5		jsr	FloatSquareRoot
.4658	20 55 48	jsr $4855		jsr	FPPushConstant	; 7.29451849
>465b	05 59 b6 74				.dword	$74b65905
>465f	e4 00					.byte	$e4,$00
.4661	20 88 48	jsr $4888		jsr	FloatSubtract
.4664	20 52 48	jsr $4852		jsr	FPAbs
.4667	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>466a	4c 37 89 41				.dword	$4189374c
>466e	d8 00					.byte	$d8,$00
.4670	20 4f 49	jsr $494f		jsr	FloatCompare
.4673	20 45 48	jsr $4845		jsr	FPAssertCheck
.4676	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.06333333
>4679	3d a7 0d 44				.dword	$440da73d
>467d	e2 00					.byte	$e2,$00
.467f	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.4
>4682	66 66 66 66				.dword	$66666666
>4686	e0 00					.byte	$e0,$00
.4688	20 33 51	jsr $5133		jsr	FloatPower
.468b	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.02486762
>468e	5c 6e 97 41				.dword	$41976e5c
>4692	e2 00					.byte	$e2,$00
.4694	20 88 48	jsr $4888		jsr	FloatSubtract
.4697	20 52 48	jsr $4852		jsr	FPAbs
.469a	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.01
>469d	1f 85 eb 51				.dword	$51eb851f
>46a1	db 00					.byte	$db,$00
.46a3	20 4f 49	jsr $494f		jsr	FloatCompare
.46a6	20 45 48	jsr $4845		jsr	FPAssertCheck
.46a9	20 55 48	jsr $4855		jsr	FPPushConstant	; -69.95108123
>46ac	0f 7a f3 45				.dword	$45f37a0f
>46b0	e8 80					.byte	$e8,$80
.46b2	20 2c 4e	jsr $4e2c		jsr	FloatNegate
.46b5	20 55 48	jsr $4855		jsr	FPPushConstant	; 69.95108123
>46b8	0f 7a f3 45				.dword	$45f37a0f
>46bc	e8 00					.byte	$e8,$00
.46be	20 4f 49	jsr $494f		jsr	FloatCompare
.46c1	20 19 49	jsr $4919		jsr	CompareEqual
.46c4	20 45 48	jsr $4845		jsr	FPAssertCheck
.46c7	20 55 48	jsr $4855		jsr	FPPushConstant	; -69.95108123
>46ca	0f 7a f3 45				.dword	$45f37a0f
>46ce	e8 80					.byte	$e8,$80
.46d0	20 a5 4a	jsr $4aa5		jsr	FloatIntegerPart
.46d3	20 55 48	jsr $4855		jsr	FPPushConstant	; -69
>46d6	45 00 00 00				.dword	$00000045
>46da	00 80					.byte	$00,$80
.46dc	20 4f 49	jsr $494f		jsr	FloatCompare
.46df	20 19 49	jsr $4919		jsr	CompareEqual
.46e2	20 45 48	jsr $4845		jsr	FPAssertCheck
.46e5	20 55 48	jsr $4855		jsr	FPPushConstant	; 14.73
>46e8	3d 0a d7 75				.dword	$75d70a3d
>46ec	e5 00					.byte	$e5,$00
.46ee	20 50 51	jsr $5150		jsr	FloatSine
.46f1	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.82936114
>46f4	7e 81 28 6a				.dword	$6a28817e
>46f8	e1 00					.byte	$e1,$00
.46fa	20 88 48	jsr $4888		jsr	FloatSubtract
.46fd	20 52 48	jsr $4852		jsr	FPAbs
.4700	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>4703	4c 37 89 41				.dword	$4189374c
>4707	d8 00					.byte	$d8,$00
.4709	20 4f 49	jsr $494f		jsr	FloatCompare
.470c	20 2f 49	jsr $492f		jsr	CompareLess
.470f	20 45 48	jsr $4845		jsr	FPAssertCheck
.4712	20 55 48	jsr $4855		jsr	FPPushConstant	; 14.73
>4715	3d 0a d7 75				.dword	$75d70a3d
>4719	e5 00					.byte	$e5,$00
.471b	20 b0 4f	jsr $4fb0		jsr	FloatCosine
.471e	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.55871289
>4721	6b e7 83 47				.dword	$4783e76b
>4725	e1 80					.byte	$e1,$80
.4727	20 88 48	jsr $4888		jsr	FloatSubtract
.472a	20 52 48	jsr $4852		jsr	FPAbs
.472d	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>4730	4c 37 89 41				.dword	$4189374c
>4734	d8 00					.byte	$d8,$00
.4736	20 4f 49	jsr $494f		jsr	FloatCompare
.4739	20 2f 49	jsr $492f		jsr	CompareLess
.473c	20 45 48	jsr $4845		jsr	FPAssertCheck
.473f	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.16
>4742	1f 85 eb 51				.dword	$51eb851f
>4746	df 00					.byte	$df,$00
.4748	20 c1 51	jsr $51c1		jsr	FloatTangent
.474b	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.16137946
>474e	1e 54 a0 52				.dword	$52a0541e
>4752	df 00					.byte	$df,$00
.4754	20 88 48	jsr $4888		jsr	FloatSubtract
.4757	20 52 48	jsr $4852		jsr	FPAbs
.475a	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>475d	4c 37 89 41				.dword	$4189374c
>4761	d8 00					.byte	$d8,$00
.4763	20 4f 49	jsr $494f		jsr	FloatCompare
.4766	20 45 48	jsr $4845		jsr	FPAssertCheck
.4769	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.61
>476c	71 3d 0a 67				.dword	$670a3d71
>4770	e2 00					.byte	$e2,$00
.4772	20 95 4e	jsr $4e95		jsr	FloatArcTan
.4775	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.01499342
>4778	f6 a6 f5 40				.dword	$40f5a6f6
>477c	e2 00					.byte	$e2,$00
.477e	20 88 48	jsr $4888		jsr	FloatSubtract
.4781	20 52 48	jsr $4852		jsr	FPAbs
.4784	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>4787	4c 37 89 41				.dword	$4189374c
>478b	d8 00					.byte	$d8,$00
.478d	20 4f 49	jsr $494f		jsr	FloatCompare
.4790	20 45 48	jsr $4845		jsr	FPAssertCheck
.4793	20 55 48	jsr $4855		jsr	FPPushConstant	; -0.6
>4796	cd cc cc 4c				.dword	$4ccccccd
>479a	e1 80					.byte	$e1,$80
.479c	20 bc 4f	jsr $4fbc		jsr	FloatExponent
.479f	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.54881164
>47a2	b7 75 3f 46				.dword	$463f75b7
>47a6	e1 00					.byte	$e1,$00
.47a8	20 88 48	jsr $4888		jsr	FloatSubtract
.47ab	20 52 48	jsr $4852		jsr	FPAbs
.47ae	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>47b1	4c 37 89 41				.dword	$4189374c
>47b5	d8 00					.byte	$d8,$00
.47b7	20 4f 49	jsr $494f		jsr	FloatCompare
.47ba	20 45 48	jsr $4845		jsr	FPAssertCheck
.47bd	20 55 48	jsr $4855		jsr	FPPushConstant	; 36.13
>47c0	5c 8f 42 48				.dword	$48428f5c
>47c4	e7 00					.byte	$e7,$00
.47c6	20 bf 50	jsr $50bf		jsr	FloatLogarithm
.47c9	20 55 48	jsr $4855		jsr	FPPushConstant	; 3.58712355
>47cc	54 b7 c9 72				.dword	$72c9b754
>47d0	e3 00					.byte	$e3,$00
.47d2	20 88 48	jsr $4888		jsr	FloatSubtract
.47d5	20 52 48	jsr $4852		jsr	FPAbs
.47d8	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>47db	4c 37 89 41				.dword	$4189374c
>47df	d8 00					.byte	$d8,$00
.47e1	20 4f 49	jsr $494f		jsr	FloatCompare
.47e4	20 45 48	jsr $4845		jsr	FPAssertCheck
.47e7	20 55 48	jsr $4855		jsr	FPPushConstant	; 13.1
>47ea	cd cc cc 68				.dword	$68cccccd
>47ee	e5 00					.byte	$e5,$00
.47f0	20 b5 51	jsr $51b5		jsr	FloatSquareRoot
.47f3	20 55 48	jsr $4855		jsr	FPPushConstant	; 3.61939221
>47f6	9d 0f d2 73				.dword	$73d20f9d
>47fa	e3 00					.byte	$e3,$00
.47fc	20 88 48	jsr $4888		jsr	FloatSubtract
.47ff	20 52 48	jsr $4852		jsr	FPAbs
.4802	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.001
>4805	4c 37 89 41				.dword	$4189374c
>4809	d8 00					.byte	$d8,$00
.480b	20 4f 49	jsr $494f		jsr	FloatCompare
.480e	20 45 48	jsr $4845		jsr	FPAssertCheck
.4811	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.68666667
>4814	c3 58 f2 6b				.dword	$6bf258c3
>4818	e2 00					.byte	$e2,$00
.481a	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.2
>481d	66 66 66 66				.dword	$66666666
>4821	df 00					.byte	$df,$00
.4823	20 33 51	jsr $5133		jsr	FloatPower
.4826	20 55 48	jsr $4855		jsr	FPPushConstant	; 1.11021183
>4829	eb b5 0d 47				.dword	$470db5eb
>482d	e2 00					.byte	$e2,$00
.482f	20 88 48	jsr $4888		jsr	FloatSubtract
.4832	20 52 48	jsr $4852		jsr	FPAbs
.4835	20 55 48	jsr $4855		jsr	FPPushConstant	; 0.01
>4838	1f 85 eb 51				.dword	$51eb851f
>483c	db 00					.byte	$db,$00
.483e	20 4f 49	jsr $494f		jsr	FloatCompare
.4841	20 45 48	jsr $4845		jsr	FPAssertCheck

;******  Return to file: testing/testing.asm

.4844	60		rts				rts
.4845					FPAssertCheck:
.4845	e0 00		cpx #$00			cpx 	#0
.4847	d0 06		bne $484f			bne 	_FPACFail
.4849	b5 2e		lda $2e,x			lda 	NSMantissa0,x
.484b	f0 02		beq $484f			beq 	_FPACFail
.484d	ca		dex				dex
.484e	60		rts				rts
.484f					_FPACFail:
>484f	db						.byte 	$DB 						; causes a break in the emulator
.4850	80 fd		bra $484f			bra 	_FPACFail
.4852					FPAbs:
.4852	74 22		stz $22,x			stz 	NSStatus,x
.4854	60		rts				rts
.4855					FPPushConstant:
.4855	e8		inx				inx
.4856	68		pla				pla
.4857	7a		ply				ply
.4858	85 6e		sta $6e				sta 	zTemp0
.485a	84 6f		sty $6f				sty 	zTemp0+1
.485c	a0 01		ldy #$01			ldy 	#1
.485e	b1 6e		lda ($6e),y			lda 	(zTemp0),y
.4860	95 2e		sta $2e,x			sta 	NSMantissa0,x
.4862	c8		iny				iny
.4863	b1 6e		lda ($6e),y			lda 	(zTemp0),y
.4865	95 3a		sta $3a,x			sta 	NSMantissa1,x
.4867	c8		iny				iny
.4868	b1 6e		lda ($6e),y			lda 	(zTemp0),y
.486a	95 46		sta $46,x			sta 	NSMantissa2,x
.486c	c8		iny				iny
.486d	b1 6e		lda ($6e),y			lda 	(zTemp0),y
.486f	95 52		sta $52,x			sta 	NSMantissa3,x
.4871	c8		iny				iny
.4872	b1 6e		lda ($6e),y			lda 	(zTemp0),y
.4874	95 5e		sta $5e,x			sta 	NSExponent,x
.4876	c8		iny				iny
.4877	b1 6e		lda ($6e),y			lda 	(zTemp0),y
.4879	95 22		sta $22,x			sta 	NSStatus,x
.487b	a5 6e		lda $6e				lda 	zTemp0
.487d	a4 6f		ldy $6f				ldy 	zTemp0+1
.487f	18		clc				clc
.4880	69 06		adc #$06			adc 	#6
.4882	90 01		bcc $4885			bcc 	_FPPCNoCarry
.4884	c8		iny				iny
.4885					_FPPCNoCarry:
.4885	5a		phy				phy
.4886	48		pha				pha
.4887	60		rts				rts

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library

=12					MathStackSize = 12
=$40					NSSString = $40 							; string vs typemask
=$00					NSSIFloat = $00 							; ifloat vs typemask
=$20					NSSIInt16 = $20								; when set, a reference is a 16 bit reference (e.g. a%)
=$40					NSSTypeMask = $40
=$80					NSSArray = $80  							; array (in variable code)
.0022					NSStatus:
>0022							.fill 	MathStackSize
.002e					NSMantissa0:
>002e							.fill 	MathStackSize 				; (this is my integer mantissa system)
.003a					NSMantissa1:
>003a							.fill 	MathStackSize
.0046					NSMantissa2:
>0046							.fill 	MathStackSize
.0052					NSMantissa3:
>0052							.fill 	MathStackSize
.005e					NSExponent:
>005e							.fill 	MathStackSize
.0400					numberBuffer:
>0400							.fill 	34
.4888					FloatSubtract:
.4888	b5 22		lda $22,x			lda 	NSStatus,x 					; negate top of stack
.488a	49 80		eor #$80			eor 	#$80
.488c	95 22		sta $22,x			sta 	NSStatus,x					; and fall through.
.488e					FloatAdd:
.488e	ca		dex				dex
.488f	b5 5e		lda $5e,x			lda 	NSExponent,x 				; can use optimised.
.4891	15 5f		ora $5f,x			ora 	NSExponent+1,x
.4893	15 52		ora $52,x			ora 	NSMantissa3,x
.4895	15 53		ora $53,x			ora 	NSMantissa3+1,x
.4897	d0 04		bne $489d			bne 	_FAUseFloat
.4899	20 2a 4c	jsr $4c2a			jsr 	FloatInt32Add 				; use the int32 one.
.489c	60		rts				rts
.489d					_FAUseFloat:
.489d	20 bf 4b	jsr $4bbf			jsr 	FloatNormalise 				; normalise S[X]
.48a0	f0 51		beq $48f3			beq 	_FAReturn1
.48a2	e8		inx				inx 								; normalise S[X+1]
.48a3	20 bf 4b	jsr $4bbf			jsr 	FloatNormalise
.48a6	ca		dex				dex
.48a7	c9 00		cmp #$00			cmp 	#0
.48a9	f0 60		beq $490b			beq 	_FAExit 					; if so, just return A
.48ab	b5 5e		lda $5e,x			lda 	NSExponent,x 				; are the exponents the same ?
.48ad	d5 5f		cmp $5f,x			cmp 	NSExponent+1,x
.48af	f0 18		beq $48c9			beq 	_FAExponentsEqual
.48b1	b5 5e		lda $5e,x			lda 	NSExponent,x 				; work out the larger exponent
.48b3	a8		tay				tay
.48b4	38		sec				sec 								; do a signed comparison of the exponents.
.48b5	f5 5f		sbc $5f,x			sbc 	NSExponent+1,x
.48b7	50 02		bvc $48bb			bvc 	_FANoSignedChange
.48b9	49 80		eor #$80			eor 	#$80
.48bb					_FANoSignedChange:
.48bb	29 80		and #$80			and 	#$80
.48bd	10 02		bpl $48c1			bpl 	_FAHaveMax
.48bf	b4 5f		ldy $5f,x			ldy 	NSExponent+1,x
.48c1					_FAHaveMax:
.48c1	20 0c 49	jsr $490c			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.48c4	e8		inx				inx
.48c5	20 0c 49	jsr $490c			jsr 	_FAShiftToExponent
.48c8	ca		dex				dex
.48c9					_FAExponentsEqual:
.48c9	b5 22		lda $22,x			lda 	NSStatus,x 					; are the signs the same
.48cb	55 23		eor $23,x			eor 	NSStatus+1,x
.48cd	30 0e		bmi $48dd			bmi 	_FADifferentSigns
.48cf	20 f6 4b	jsr $4bf6			jsr 	FloatAddTopTwoStack 		; do the add of the mantissae
.48d2	b5 52		lda $52,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.48d4	10 35		bpl $490b			bpl 	_FAExit 					; if no, we are done.
.48d6	20 83 4e	jsr $4e83			jsr 	FloatShiftRight 				; shift A right, renormalising it.
.48d9	f6 5e		inc $5e,x			inc 	NSExponent,x 				; bump the exponent and exit
.48db	80 2e		bra $490b			bra 	_FAExit
.48dd					_FADifferentSigns:
.48dd	20 10 4c	jsr $4c10			jsr 	FloatSubTopTwoStack 		; subtract mantissa B from A
.48e0	b5 52		lda $52,x			lda 	NSMantissa3,x 				; is the result negative ?
.48e2	10 06		bpl $48ea			bpl 	_FACheckZero 				; if no, check for -0
.48e4	20 2c 4e	jsr $4e2c			jsr 	FloatNegate 					; netate result
.48e7	20 33 4e	jsr $4e33			jsr 	FloatNegateMantissa 			; negate (2'c) the mantissa
.48ea					_FACheckZero:
.48ea	20 8c 4e	jsr $4e8c			jsr 	FloatIsZero	 				; check for -0
.48ed	d0 1c		bne $490b			bne 	_FAExit
.48ef	74 22		stz $22,x			stz 	NSStatus,x
.48f1	80 18		bra $490b			bra 	_FAExit
.48f3					_FAReturn1:
.48f3	b5 2f		lda $2f,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.48f5	95 2e		sta $2e,x			sta 	NSMantissa0,x
.48f7	b5 3b		lda $3b,x			lda 	NSMantissa1+1,x
.48f9	95 3a		sta $3a,x			sta 	NSMantissa1,x
.48fb	b5 47		lda $47,x			lda 	NSMantissa2+1,x
.48fd	95 46		sta $46,x			sta 	NSMantissa2,x
.48ff	b5 53		lda $53,x			lda 	NSMantissa3+1,x
.4901	95 52		sta $52,x			sta 	NSMantissa3,x
.4903	b5 5f		lda $5f,x			lda 	NSExponent+1,x
.4905	95 5e		sta $5e,x			sta 	NSExponent,x
.4907	b5 23		lda $23,x			lda 	NSStatus+1,x
.4909	95 22		sta $22,x			sta 	NSStatus,x
.490b					_FAExit:
.490b	60		rts				rts
.490c					_FAShiftToExponent:
.490c					_FAShiftToExponent2:
.490c	98		tya				tya 								; compare Y to exponent
.490d	d5 5e		cmp $5e,x			cmp 	NSExponent,x 				; reached the exponent required ?
.490f	f0 07		beq $4918			beq 	_FASEExit 					; exit if so.
.4911	20 83 4e	jsr $4e83			jsr 	FloatShiftRight	 			; shift the mantissa right
.4914	f6 5e		inc $5e,x			inc 	NSExponent,x 				; increment exponent
.4916	80 f4		bra $490c			bra 	_FAShiftToExponent2
.4918					_FASEExit:
.4918	60		rts				rts
.4919					CompareEqual:
.4919	b5 2e		lda $2e,x			lda 	NSMantissa0,x
.491b	d0 09		bne $4926			bne 	ReturnFalse
.491d					ReturnTrue:
.491d	a9 01		lda #$01			lda 	#1
.491f	95 2e		sta $2e,x			sta 	NSMantissa0,x
.4921	a9 80		lda #$80			lda 	#$80
.4923	95 22		sta $22,x			sta 	NSStatus,x
.4925	60		rts				rts
.4926					ReturnFalse:
.4926	74 2e		stz $2e,x			stz 	NSMantissa0,x
.4928	60		rts				rts
.4929					CompareNotEqual:
.4929	b5 2e		lda $2e,x			lda 	NSMantissa0,x
.492b	d0 f0		bne $491d			bne 	ReturnTrue
.492d	80 f7		bra $4926			bra 	ReturnFalse
.492f					CompareLess:
.492f	b5 2e		lda $2e,x			lda 	NSMantissa0,x
.4931	c9 ff		cmp #$ff			cmp 	#$FF
.4933	f0 e8		beq $491d			beq 	ReturnTrue
.4935	80 ef		bra $4926			bra 	ReturnFalse
.4937					CompareGreater:
.4937	b5 2e		lda $2e,x			lda 	NSMantissa0,x
.4939	c9 01		cmp #$01			cmp 	#$01
.493b	f0 e0		beq $491d			beq 	ReturnTrue
.493d	80 e7		bra $4926			bra 	ReturnFalse
.493f					CompareLessEqual:
.493f	b5 2e		lda $2e,x			lda 	NSMantissa0,x
.4941	c9 01		cmp #$01			cmp 	#$01
.4943	d0 d8		bne $491d			bne 	ReturnTrue
.4945	80 df		bra $4926			bra 	ReturnFalse
.4947					CompareGreaterEqual:
.4947	b5 2e		lda $2e,x			lda 	NSMantissa0,x
.4949	c9 ff		cmp #$ff			cmp 	#$FF
.494b	d0 d0		bne $491d			bne 	ReturnTrue
.494d	80 d7		bra $4926			bra 	ReturnFalse
.494f					FloatCompare:
.494f	b5 5e		lda $5e,x			lda 	NSExponent,x 				; float comparison.
.4951	15 5d		ora $5d,x			ora 	NSExponent-1,x 				; integer if both integer.
.4953	48		pha				pha
.4954	20 88 48	jsr $4888			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.4957	68		pla				pla
.4958	d0 0c		bne $4966			bne 	_FCCompareFloat
.495a	b5 2e		lda $2e,x			lda 	NSMantissa0,x
.495c	15 3a		ora $3a,x			ora 	NSMantissa1,x
.495e	15 46		ora $46,x			ora 	NSMantissa2,x
.4960	15 52		ora $52,x			ora 	NSMantissa3,x
.4962	f0 14		beq $4978			beq 	_FCExit 					; if zero, return zero
.4964	80 0a		bra $4970			bra 	_FCSign
.4966					_FCCompareFloat:
.4966	b5 3a		lda $3a,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.4968	29 f0		and #$f0			and 	#$F0
.496a	15 46		ora $46,x			ora 	NSMantissa2,x
.496c	15 52		ora $52,x			ora 	NSMantissa3,x
.496e	f0 08		beq $4978			beq 	_FCExit 					; zero, so approximately identical
.4970					_FCSign:
.4970	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.4972	34 22		bit $22,x			bit 	NSStatus,x
.4974	10 02		bpl $4978			bpl 	_FCExit
.4976					_FCNegative:
.4976	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.4978					_FCExit:
.4978	20 6c 4e	jsr $4e6c			jsr 	FloatSetByte 				; set the result 255,0,1
.497b	60		rts				rts
.497c					FloatScalarTable:
>497c	66 66 66 66				.dword $66666666 ; 0.1
>4980	de					.byte $de
>4981	1f 85 eb 51				.dword $51eb851f ; 0.01
>4985	db					.byte $db
>4986	4c 37 89 41				.dword $4189374c ; 0.001
>498a	d8					.byte $d8
>498b	ac 8b db 68				.dword $68db8bac ; 0.0001
>498f	d4					.byte $d4
>4990	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>4994	d1					.byte $d1
>4995	83 de 1b 43				.dword $431bde83 ; 1e-06
>4999	ce					.byte $ce
>499a	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>499e	ca					.byte $ca
>499f	89 3b e6 55				.dword $55e63b89 ; 1e-08
>49a3	c7					.byte $c7
>49a4	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>49a8	c4					.byte $c4
>49a9	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>49ad	c0					.byte $c0
>49ae	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>49b2	bd					.byte $bd
.49b3					FloatDivide:
.49b3	48		pha				pha
.49b4	20 bf 4b	jsr $4bbf			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.49b7	ca		dex				dex
.49b8	c9 00		cmp #$00			cmp 	#0
.49ba	f0 1e		beq $49da			beq 	_FDZero
.49bc	20 bf 4b	jsr $4bbf			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.49bf	f0 16		beq $49d7			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.49c1	20 22 4a	jsr $4a22			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.49c4	20 ef 49	jsr $49ef			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.49c7	20 bf 4b	jsr $4bbf			jsr		FloatNormalise 				; renormalise
.49ca	20 b5 4b	jsr $4bb5			jsr 	FloatCalculateSign 			; calculate result sign
.49cd	b5 5e		lda $5e,x			lda 	NSExponent,x 				; calculate exponent
.49cf	38		sec				sec
.49d0	f5 5f		sbc $5f,x			sbc 	NSExponent+1,x
.49d2	38		sec				sec
.49d3	e9 1e		sbc #$1e			sbc 	#30
.49d5	95 5e		sta $5e,x			sta 	NSExponent,x
.49d7					_FDExit:
.49d7	68		pla				pla
.49d8	18		clc				clc
.49d9	60		rts				rts
.49da					_FDZero:
.49da	68		pla				pla
.49db	38		sec				sec
.49dc	60		rts				rts
.49dd					DivideInt32:
.49dd	20 a5 4a	jsr $4aa5			jsr 	FloatIntegerPart 			; make both integers
.49e0	ca		dex				dex
.49e1	20 a5 4a	jsr $4aa5			jsr 	FloatIntegerPart
.49e4	20 00 4a	jsr $4a00			jsr 	Int32Divide 				; divide
.49e7	20 ef 49	jsr $49ef			jsr 	NSMCopyPlusTwoToZero 		; copy result
.49ea	20 b5 4b	jsr $4bb5			jsr 	FloatCalculateSign 			; calculate result sign
.49ed	18		clc				clc
.49ee	60		rts				rts
.49ef					NSMCopyPlusTwoToZero:
.49ef	b5 30		lda $30,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.49f1	95 2e		sta $2e,x			sta 	NSMantissa0,x
.49f3	b5 3c		lda $3c,x			lda 	NSMantissa1+2,x
.49f5	95 3a		sta $3a,x			sta 	NSMantissa1,x
.49f7	b5 48		lda $48,x			lda 	NSMantissa2+2,x
.49f9	95 46		sta $46,x			sta 	NSMantissa2,x
.49fb	b5 54		lda $54,x			lda 	NSMantissa3+2,x
.49fd	95 52		sta $52,x			sta 	NSMantissa3,x
.49ff	60		rts				rts
.4a00					Int32Divide:
.4a00	48		pha				pha 								; save AXY
.4a01	5a		phy				phy
.4a02	20 4d 4e	jsr $4e4d			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.4a05	20 66 4e	jsr $4e66			jsr 	FloatSetZeroMantissaOnly 	; set S[X] to zero
.4a08	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.4a0a					_I32DivideLoop:
.4a0a	e8		inx				inx
.4a0b	e8		inx				inx
.4a0c	20 79 4e	jsr $4e79			jsr 	FloatShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.4a0f	ca		dex				dex
.4a10	ca		dex				dex
.4a11	20 7a 4e	jsr $4e7a			jsr 	FloatRotateLeft
.4a14	20 40 4a	jsr $4a40			jsr 	FloatDivideCheck 			; check if subtract possible
.4a17	90 02		bcc $4a1b			bcc 	_I32DivideNoCarryIn
.4a19	f6 30		inc $30,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.4a1b					_I32DivideNoCarryIn:
.4a1b	88		dey				dey 								; loop round till division completed.
.4a1c	d0 ec		bne $4a0a			bne 	_I32DivideLoop
.4a1e	7a		ply				ply 								; restore AXY and exit
.4a1f	68		pla				pla
.4a20	18		clc				clc
.4a21	60		rts				rts
.4a22					Int32ShiftDivide:
.4a22	48		pha				pha 								; save AY
.4a23	5a		phy				phy
.4a24	e8		inx				inx 								; clear S[X+2]
.4a25	e8		inx				inx
.4a26	20 6a 4e	jsr $4e6a			jsr 	FloatSetZero
.4a29	ca		dex				dex
.4a2a	ca		dex				dex
.4a2b	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.4a2d					_I32SDLoop:
.4a2d	20 40 4a	jsr $4a40			jsr 	FloatDivideCheck 			; check if subtract possible
.4a30	e8		inx				inx
.4a31	e8		inx				inx
.4a32	20 7a 4e	jsr $4e7a			jsr 	FloatRotateLeft				; shift 64 bit FPA left, rotating carry in
.4a35	ca		dex				dex
.4a36	ca		dex				dex
.4a37	20 7a 4e	jsr $4e7a			jsr 	FloatRotateLeft
.4a3a	88		dey				dey 	 							; do 31 times
.4a3b	d0 f0		bne $4a2d			bne 	_I32SDLoop
.4a3d	7a		ply				ply 								; restore AY and exit
.4a3e	68		pla				pla
.4a3f	60		rts				rts
.4a40					FloatDivideCheck:
.4a40	20 10 4c	jsr $4c10			jsr 	FloatSubTopTwoStack 		; subtract Stack[X+1] from Stack[X+0]
.4a43	b0 04		bcs $4a49			bcs 	_DCSExit 					; if carry set, then could do, exit
.4a45	20 f6 4b	jsr $4bf6			jsr 	FloatAddTopTwoStack 		; add it back in
.4a48	18		clc				clc 								; and return False
.4a49					_DCSExit:
.4a49	60		rts				rts
.4a4a					FloatFractionalPart:
.4a4a	5a		phy				phy
.4a4b	b5 22		lda $22,x			lda 	NSStatus,x 					; take absolute value
.4a4d	29 7f		and #$7f			and 	#$7F
.4a4f	95 22		sta $22,x			sta 	NSStatus,x
.4a51	20 bf 4b	jsr $4bbf			jsr 	FloatNormalise
.4a54	b5 5e		lda $5e,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.4a56	38		sec				sec
.4a57	e9 e0		sbc #$e0			sbc 	#$E0
.4a59	90 29		bcc $4a84			bcc 	_FFPExit 					; already fractional
.4a5b	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.4a5d	b0 22		bcs $4a81			bcs 	_FFPZero
.4a5f	a8		tay				tay 								; put count to do in Y
.4a60	b5 52		lda $52,x			lda 	NSMantissa3,x 				; do each in turn.
.4a62	20 89 4a	jsr $4a89			jsr 	_FFPPartial
.4a65	95 52		sta $52,x			sta 	NSMantissa3,x
.4a67	b5 46		lda $46,x			lda 	NSMantissa2,x
.4a69	20 89 4a	jsr $4a89			jsr 	_FFPPartial
.4a6c	95 46		sta $46,x			sta 	NSMantissa2,x
.4a6e	b5 3a		lda $3a,x			lda 	NSMantissa1,x
.4a70	20 89 4a	jsr $4a89			jsr 	_FFPPartial
.4a73	95 3a		sta $3a,x			sta 	NSMantissa1,x
.4a75	b5 2e		lda $2e,x			lda 	NSMantissa0,x
.4a77	20 89 4a	jsr $4a89			jsr 	_FFPPartial
.4a7a	95 2e		sta $2e,x			sta 	NSMantissa0,x
.4a7c	20 8c 4e	jsr $4e8c			jsr 	FloatIsZero 					; zeroed check.
.4a7f	d0 03		bne $4a84			bne 	_FFPExit
.4a81					_FFPZero:
.4a81	20 6a 4e	jsr $4e6a			jsr 	FloatSetZero
.4a84					_FFPExit:
.4a84	20 bf 4b	jsr $4bbf			jsr 	FloatNormalise
.4a87	7a		ply				ply
.4a88	60		rts				rts
.4a89					_FFPPartial:
.4a89	c0 00		cpy #$00			cpy 	#0 							; no more to do
.4a8b	f0 17		beq $4aa4			beq 	_FFFPPExit
.4a8d	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.4a8f	b0 0c		bcs $4a9d			bcs 	_FFFPPWholeByte
.4a91	5a		phy				phy
.4a92					_FFFPPLeft:
.4a92	0a		asl a				asl 	a
.4a93	88		dey				dey
.4a94	d0 fc		bne $4a92			bne 	_FFFPPLeft
.4a96	7a		ply				ply
.4a97					_FFFPPRight:
.4a97	4a		lsr a				lsr 	a
.4a98	88		dey				dey
.4a99	d0 fc		bne $4a97			bne 	_FFFPPRight
.4a9b	80 07		bra $4aa4			bra 	_FFFPPExit
.4a9d					_FFFPPWholeByte:
.4a9d	98		tya				tya 								; subtract 8 from count
.4a9e	38		sec				sec
.4a9f	e9 08		sbc #$08			sbc 	#8
.4aa1	a8		tay				tay
.4aa2	a9 00		lda #$00			lda 	#0 							; and clear all
.4aa4					_FFFPPExit:
.4aa4	60		rts				rts
.4aa5					FloatIntegerPart:
.4aa5	48		pha				pha
.4aa6	b5 5e		lda $5e,x			lda 	NSExponent,x 				; is it integer already ?
.4aa8	f0 1d		beq $4ac7			beq 	_FIPExit 					; if so do nothing
.4aaa	20 8c 4e	jsr $4e8c			jsr 	FloatIsZero 				; is it zero ?
.4aad	f0 15		beq $4ac4			beq 	_FIPZero 					; if so return zero.
.4aaf	20 bf 4b	jsr $4bbf			jsr 	FloatNormalise 				; normalise
.4ab2	f0 10		beq $4ac4			beq 	_FIPZero 					; normalised to zero, exit zero
.4ab4					_FIPShift:
.4ab4	b5 5e		lda $5e,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.4ab6	10 07		bpl $4abf			bpl 	_FIPCheckZero
.4ab8	20 83 4e	jsr $4e83			jsr 	FloatShiftRight 			; shift mantissa right
.4abb	f6 5e		inc $5e,x			inc 	NSExponent,x 				; bump exponent
.4abd	80 f5		bra $4ab4			bra 	_FIPShift
.4abf					_FIPCheckZero:
.4abf	20 8c 4e	jsr $4e8c			jsr 	FloatIsZero 				; avoid -0 problem
.4ac2	d0 03		bne $4ac7			bne 	_FIPExit 					; set to zero if mantissa zero.
.4ac4					_FIPZero:
.4ac4	20 6a 4e	jsr $4e6a			jsr 	FloatSetZero
.4ac7					_FIPExit:
.4ac7	68		pla				pla
.4ac8	60		rts				rts
.4ac9					FloatIntegerPartDown:
.4ac9	48		pha				pha
.4aca	5a		phy				phy
.4acb	b5 5e		lda $5e,x			lda 	NSExponent,x 				; is it integer already ?
.4acd	f0 36		beq $4b05			beq 	_FIPExit 					; if so do nothing
.4acf	20 8c 4e	jsr $4e8c			jsr 	FloatIsZero 				; is it zero ?
.4ad2	f0 2e		beq $4b02			beq 	_FIPZero 					; if so return zero.
.4ad4	20 bf 4b	jsr $4bbf			jsr 	FloatNormalise 				; normalise
.4ad7	f0 29		beq $4b02			beq 	_FIPZero 					; normalised to zero, exit zero
.4ad9	a0 00		ldy #$00			ldy 	#0 							; reset the count of bits.
.4adb					_FIPShift:
.4adb	b5 5e		lda $5e,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.4add	10 0a		bpl $4ae9			bpl 	_FIPCheckDown
.4adf	20 83 4e	jsr $4e83			jsr 	FloatShiftRight 			; shift mantissa right
.4ae2	90 01		bcc $4ae5			bcc 	_FIPNoFrac 					; shifted a zero out ?
.4ae4	c8		iny				iny
.4ae5					_FIPNoFrac:
.4ae5	f6 5e		inc $5e,x			inc 	NSExponent,x 				; bump exponent
.4ae7	80 f2		bra $4adb			bra 	_FIPShift
.4ae9					_FIPCheckDown:
.4ae9	c0 00		cpy #$00			cpy 	#0 							; were there any fractional bits.
.4aeb	f0 10		beq $4afd			beq 	_FIPCheckZero
.4aed	34 22		bit $22,x			bit 	NSStatus,x 					; +ve
.4aef	10 0c		bpl $4afd			bpl 	_FIPCheckZero
.4af1	e8		inx				inx 								; -ve so round *down*.
.4af2	a9 01		lda #$01			lda 	#1
.4af4	20 6c 4e	jsr $4e6c			jsr 	FloatSetByte
.4af7	20 2c 4e	jsr $4e2c			jsr 	FloatNegate
.4afa	20 8e 48	jsr $488e			jsr 	FloatAdd
.4afd					_FIPCheckZero:
.4afd	20 8c 4e	jsr $4e8c			jsr 	FloatIsZero 				; avoid -0 problem
.4b00	d0 03		bne $4b05			bne 	_FIPExit 					; set to zero if mantissa zero.
.4b02					_FIPZero:
.4b02	20 6a 4e	jsr $4e6a			jsr 	FloatSetZero
.4b05					_FIPExit:
.4b05	7a		ply				ply
.4b06	68		pla				pla
.4b07	60		rts				rts
.4b08					FloatInt8Multiply:
.4b08	5a		phy				phy
.4b09	b5 2e		lda $2e,x			lda 	NSMantissa0,x 				; right shifted multiplier in Y
.4b0b	a8		tay				tay
.4b0c	74 2e		stz $2e,x			stz 	NSMantissa0,x 				; zero the result (already 8 bit constant)
.4b0e					_FI8MLoop:
.4b0e	98		tya				tya 								; shift right shifter right into carry
.4b0f	4a		lsr a				lsr 	a
.4b10	a8		tay				tay
.4b11	90 0d		bcc $4b20			bcc 	_FI8MNoAdd
.4b13	18		clc				clc
.4b14	b5 2e		lda $2e,x			lda 	NSMantissa0,x
.4b16	75 2f		adc $2f,x			adc 	NSMantissa0+1,x
.4b18	95 2e		sta $2e,x			sta 	NSMantissa0,x
.4b1a	b5 3a		lda $3a,x			lda 	NSMantissa1,x
.4b1c	75 3b		adc $3b,x			adc 	NSMantissa1+1,x
.4b1e	95 3a		sta $3a,x			sta 	NSMantissa1,x
.4b20					_FI8MNoAdd:
.4b20	16 2f		asl $2f,x			asl 	NSMantissa0+1,x 			; shift adder left
.4b22	36 3b		rol $3b,x			rol 	NSMantissa1+1,x
.4b24	c0 00		cpy #$00			cpy 	#0
.4b26	d0 e6		bne $4b0e			bne 	_FI8MLoop 					; until right shifter zero.
.4b28	7a		ply				ply
.4b29	60		rts				rts
.4b2a					FloatMultiply:
.4b2a	ca		dex				dex
.4b2b	b5 5e		lda $5e,x			lda 	NSExponent,x 				; can use optimised ?
.4b2d	15 5f		ora $5f,x			ora 	NSExponent+1,x
.4b2f	15 52		ora $52,x			ora 	NSMantissa3,x
.4b31	15 53		ora $53,x			ora 	NSMantissa3+1,x
.4b33	d0 21		bne $4b56			bne 	_FMUseFloat
.4b35	b5 22		lda $22,x			lda 	NSStatus,x 					; check if it is 8 bit unsigned
.4b37	15 23		ora $23,x			ora 	NSStatus+1,x
.4b39	29 80		and #$80			and 	#$80
.4b3b	15 52		ora $52,x			ora 	NSMantissa3,x
.4b3d	15 46		ora $46,x			ora 	NSMantissa2,x
.4b3f	15 3a		ora $3a,x			ora 	NSMantissa1,x
.4b41	15 53		ora $53,x			ora 	NSMantissa3+1,x
.4b43	15 47		ora $47,x			ora 	NSMantissa2+1,x
.4b45	15 3b		ora $3b,x			ora 	NSMantissa1+1,x
.4b47	d0 04		bne $4b4d			bne 	_FMInt32
.4b49	20 08 4b	jsr $4b08			jsr 	FloatInt8Multiply 			; use fast 8x8 multiply.
.4b4c	60		rts				rts
.4b4d					_FMInt32:
.4b4d	20 77 4b	jsr $4b77			jsr 	FloatMultiplyShort			; use the int32 one.
.4b50	18		clc				clc 								; fix it up if gone out of range
.4b51	75 5e		adc $5e,x			adc 	NSExponent,x
.4b53	95 5e		sta $5e,x			sta 	NSExponent,x
.4b55	60		rts				rts
.4b56					_FMUseFloat:
.4b56	20 bf 4b	jsr $4bbf			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.4b59	f0 18		beq $4b73			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.4b5b	e8		inx				inx
.4b5c	20 bf 4b	jsr $4bbf			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.4b5f	ca		dex				dex
.4b60	c9 00		cmp #$00			cmp 	#0
.4b62	f0 0c		beq $4b70			beq 	_FDSetZero
.4b64	20 77 4b	jsr $4b77			jsr 	FloatMultiplyShort 			; calculate the result.
.4b67	75 5e		adc $5e,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.4b69	18		clc				clc
.4b6a	75 5f		adc $5f,x			adc 	NSExponent+1,x
.4b6c	95 5e		sta $5e,x			sta 	NSExponent,x
.4b6e	80 03		bra $4b73			bra 	_FDExit
.4b70					_FDSetZero:
.4b70	20 6a 4e	jsr $4e6a			jsr 	FloatSetZero 				; return 0
.4b73					_FDExit:
.4b73	20 bf 4b	jsr $4bbf			jsr 	FloatNormalise 				; normalise the result
.4b76	60		rts				rts
.4b77					FloatMultiplyShort:
.4b77	5a		phy				phy 								; save Y
.4b78	20 4d 4e	jsr $4e4d			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.4b7b	20 66 4e	jsr $4e66			jsr 	FloatSetZeroMantissaOnly 	; set mantissa S[X] to zero
.4b7e	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.4b80					_I32MLoop:
.4b80	b5 30		lda $30,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.4b82	15 3c		ora $3c,x			ora 	NSMantissa1+2,x
.4b84	15 48		ora $48,x			ora 	NSMantissa2+2,x
.4b86	15 54		ora $54,x			ora 	NSMantissa3+2,x
.4b88	f0 25		beq $4baf			beq 	_I32MExit 					; exit if zero
.4b8a	b5 30		lda $30,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.4b8c	29 01		and #$01			and 	#1
.4b8e	f0 0d		beq $4b9d			beq 	_I32MNoAdd
.4b90	20 f6 4b	jsr $4bf6			jsr 	FloatAddTopTwoStack 		; if so add S[X+1] to S[X+0]
.4b93	b5 52		lda $52,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.4b95	10 06		bpl $4b9d			bpl 	_I32MNoAdd
.4b97					_I32ShiftRight:
.4b97	20 83 4e	jsr $4e83			jsr 	FloatShiftRight 			; shift S[X] right
.4b9a	c8		iny				iny 								; increment shift count
.4b9b	80 09		bra $4ba6			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.4b9d					_I32MNoAdd:
.4b9d	34 53		bit $53,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.4b9f	70 f6		bvs $4b97			bvs 	_I32ShiftRight 				; instead.
.4ba1	e8		inx				inx
.4ba2	20 79 4e	jsr $4e79			jsr 	FloatShiftLeft 				; shift additive S[X+1] left
.4ba5	ca		dex				dex
.4ba6					_I32MShiftUpper:
.4ba6	e8		inx				inx 								; shift S[X+2] right
.4ba7	e8		inx				inx
.4ba8	20 83 4e	jsr $4e83			jsr 	FloatShiftRight
.4bab	ca		dex				dex
.4bac	ca		dex				dex
.4bad	80 d1		bra $4b80			bra 	_I32MLoop 					; try again.
.4baf					_I32MExit:
.4baf	20 b5 4b	jsr $4bb5			jsr 	FloatCalculateSign
.4bb2	98		tya				tya 								; shift in A
.4bb3	7a		ply				ply 								; restore Y and exit
.4bb4	60		rts				rts
.4bb5					FloatCalculateSign:
.4bb5	b5 22		lda $22,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.4bb7	16 22		asl $22,x			asl 	NSStatus,x 					; shift result left
.4bb9	55 23		eor $23,x			eor 	NSStatus+1,x
.4bbb	0a		asl a				asl 	a 							; shift bit 7 into carry
.4bbc	76 22		ror $22,x			ror 	NSStatus,x 					; shift right into status byte.
.4bbe	60		rts				rts
.4bbf					FloatNormalise:
.4bbf	20 8c 4e	jsr $4e8c			jsr 	FloatIsZero 				; if zero exit
.4bc2	d0 07		bne $4bcb			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.4bc4	16 22		asl $22,x			asl 	NSStatus,x 					; clear the sign bit.
.4bc6	76 22		ror $22,x			ror 	NSStatus,x 					; (no -0)
.4bc8	a9 00		lda #$00			lda 	#0 							; set Z flag
.4bca	60		rts				rts
.4bcb					_NSNormaliseOptimise:
.4bcb	b5 52		lda $52,x			lda 	NSMantissa3,x 				; upper byte zero ?
.4bcd	d0 19		bne $4be8			bne 	_NSNormaliseLoop
.4bcf	b5 46		lda $46,x			lda 	NSMantissa2,x 				; byte normalise
.4bd1	30 15		bmi $4be8			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.4bd3	95 52		sta $52,x			sta 	NSMantissa3,x
.4bd5	b5 3a		lda $3a,x			lda 	NSMantissa1,x
.4bd7	95 46		sta $46,x			sta 	NSMantissa2,x
.4bd9	b5 2e		lda $2e,x			lda 	NSMantissa0,x
.4bdb	95 3a		sta $3a,x			sta 	NSMantissa1,x
.4bdd	74 2e		stz $2e,x			stz 	NSMantissa0,x
.4bdf	b5 5e		lda $5e,x			lda 	NSExponent,x
.4be1	38		sec				sec
.4be2	e9 08		sbc #$08			sbc 	#8
.4be4	95 5e		sta $5e,x			sta 	NSExponent,x
.4be6	80 e3		bra $4bcb			bra 	_NSNormaliseOptimise
.4be8					_NSNormaliseLoop:
.4be8	34 52		bit $52,x			bit 	NSMantissa3,x 				; bit 30 set ?
.4bea	70 07		bvs $4bf3			bvs 	_NSNExit 					; exit if so with Z flag clear
.4bec	20 79 4e	jsr $4e79			jsr 	FloatShiftLeft 				; shift mantissa left
.4bef	d6 5e		dec $5e,x			dec 	NSExponent,x 				; adjust exponent
.4bf1	80 f5		bra $4be8			bra 	_NSNormaliseLoop
.4bf3					_NSNExit:
.4bf3	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.4bf5	60		rts				rts
.4bf6					FloatAddTopTwoStack:
.4bf6	18		clc				clc
.4bf7	b5 2e		lda $2e,x			lda		NSMantissa0,x
.4bf9	75 2f		adc $2f,x			adc 		NSMantissa0+1,x
.4bfb	95 2e		sta $2e,x			sta 	NSMantissa0,x
.4bfd	b5 3a		lda $3a,x			lda		NSMantissa1,x
.4bff	75 3b		adc $3b,x			adc 		NSMantissa1+1,x
.4c01	95 3a		sta $3a,x			sta 	NSMantissa1,x
.4c03	b5 46		lda $46,x			lda		NSMantissa2,x
.4c05	75 47		adc $47,x			adc 		NSMantissa2+1,x
.4c07	95 46		sta $46,x			sta 	NSMantissa2,x
.4c09	b5 52		lda $52,x			lda		NSMantissa3,x
.4c0b	75 53		adc $53,x			adc 		NSMantissa3+1,x
.4c0d	95 52		sta $52,x			sta 	NSMantissa3,x
.4c0f	60		rts				rts
.4c10					FloatSubTopTwoStack:
.4c10	38		sec				sec
.4c11	b5 2e		lda $2e,x			lda		NSMantissa0,x
.4c13	f5 2f		sbc $2f,x			sbc 		NSMantissa0+1,x
.4c15	95 2e		sta $2e,x			sta 	NSMantissa0,x
.4c17	b5 3a		lda $3a,x			lda		NSMantissa1,x
.4c19	f5 3b		sbc $3b,x			sbc 		NSMantissa1+1,x
.4c1b	95 3a		sta $3a,x			sta 	NSMantissa1,x
.4c1d	b5 46		lda $46,x			lda		NSMantissa2,x
.4c1f	f5 47		sbc $47,x			sbc 		NSMantissa2+1,x
.4c21	95 46		sta $46,x			sta 	NSMantissa2,x
.4c23	b5 52		lda $52,x			lda		NSMantissa3,x
.4c25	f5 53		sbc $53,x			sbc 		NSMantissa3+1,x
.4c27	95 52		sta $52,x			sta 	NSMantissa3,x
.4c29	60		rts				rts
.4c2a					FloatInt32Add:
.4c2a	b5 22		lda $22,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.4c2c	55 23		eor $23,x			eor 	NSStatus+1,x
.4c2e	30 04		bmi $4c34			bmi 	_DiffSigns
.4c30	20 f6 4b	jsr $4bf6			jsr		FloatAddTopTwoStack
.4c33	60		rts				rts
.4c34					_DiffSigns:
.4c34	20 10 4c	jsr $4c10			jsr 	FloatSubTopTwoStack 		; do a physical subtraction
.4c37	34 52		bit $52,x			bit 	NSMantissa3,x 				; result is +ve, okay
.4c39	10 07		bpl $4c42			bpl 	_AddExit
.4c3b	b5 23		lda $23,x			lda 	NSStatus+1,x 				; sign is that of 11th value
.4c3d	95 22		sta $22,x			sta 	NSStatus,x
.4c3f	20 33 4e	jsr $4e33			jsr 	FloatNegateMantissa 		; negate the mantissa and exit
.4c42					_AddExit:
.4c42	20 8c 4e	jsr $4e8c			jsr 	FloatIsZero 				; check for -0
.4c45	d0 02		bne $4c49			bne 	_AddNonZero
.4c47	74 22		stz $22,x			stz 	NSStatus,x
.4c49					_AddNonZero:
.4c49	60		rts				rts
=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.4c4a					FloatEncodeStart:
.4c4a	38		sec				sec
.4c4b	80 01		bra $4c4e			bra 	FloatEncodeContinue+1
.4c4d					FloatEncodeContinue:
.4c4d	18		clc				clc
.4c4e					FloatEncode:
.4c4e	08		php				php 								; save reset flag.
.4c4f	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.4c51	f0 15		beq $4c68			beq 	_ENIsOkay
.4c53	c9 30		cmp #$30			cmp 	#"0"
.4c55	90 04		bcc $4c5b			bcc 	_ENBadNumber
.4c57	c9 3a		cmp #$3a			cmp 	#"9"+1
.4c59	90 0d		bcc $4c68			bcc 	_ENIsOkay
.4c5b					_ENBadNumber:
.4c5b	28		plp				plp 								; throw saved reset
.4c5c	ad 22 04	lda $0422			lda 	encodeState 				; if in decimal mode, construct final number
.4c5f	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.4c61	d0 03		bne $4c66			bne 	_ENFail
.4c63	4c e0 4c	jmp $4ce0			jmp 	_ENConstructFinal
.4c66					_ENFail:
.4c66	18		clc				clc 								; not allowed
.4c67	60		rts				rts
.4c68					_ENIsOkay:
.4c68	28		plp				plp 								; are we restarting
.4c69	90 15		bcc $4c80			bcc 	_ENNoRestart
.4c6b					_ENStartEncode:
.4c6b	c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.4c6d	f0 0c		beq $4c7b			beq 	_ENFirstDP
.4c6f	29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.4c71	20 6c 4e	jsr $4e6c			jsr 	FloatSetByte 				; in single byte mode.
.4c74	a9 01		lda #$01			lda 	#ESTA_Low
.4c76					_ENExitChange:
.4c76	8d 22 04	sta $0422			sta 	encodeState 				; save new state
.4c79	38		sec				sec
.4c7a	60		rts				rts
.4c7b					_ENFirstDP:
.4c7b	20 6a 4e	jsr $4e6a			jsr 	FloatSetZero 				; clear integer part
.4c7e	80 3c		bra $4cbc			bra 	_ESTASwitchFloat			; go straight to float and exi
.4c80					_ENNoRestart:
.4c80	48		pha				pha 								; save digit or DP on stack.
.4c81	ad 22 04	lda $0422			lda 	encodeState 				; get current state
.4c84	c9 01		cmp #$01			cmp 	#ESTA_Low
.4c86	f0 09		beq $4c91			beq  	_ESTALowState
.4c88	c9 02		cmp #$02			cmp 	#ESTA_High
.4c8a	f0 26		beq $4cb2			beq 	_ESTAHighState
.4c8c	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.4c8e	f0 38		beq $4cc8			beq 	_ESTADecimalState
>4c90	db						.byte 	$DB 						; causes a break in the emulator
.4c91					_ESTALowState:
.4c91	68		pla				pla 								; get value back
.4c92	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.4c94	f0 26		beq $4cbc			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.4c96	29 0f		and #$0f			and 	#15 						; make digit
.4c98	8d 23 04	sta $0423			sta 	digitTemp 					; save it.
.4c9b	b5 2e		lda $2e,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.4c9d	0a		asl a				asl 	a
.4c9e	0a		asl a				asl 	a
.4c9f	75 2e		adc $2e,x			adc 	NSMantissa0,x
.4ca1	0a		asl a				asl 	a
.4ca2	6d 23 04	adc $0423			adc 	digitTemp
.4ca5	95 2e		sta $2e,x			sta 	NSMantissa0,x
.4ca7	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.4ca9	90 05		bcc $4cb0			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.4cab	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.4cad	8d 22 04	sta $0422			sta 	encodeState
.4cb0					_ESTANoSwitch:
.4cb0	38		sec				sec
.4cb1	60		rts				rts
.4cb2					_ESTAHighState:
.4cb2	68		pla				pla 								; get value back
.4cb3	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.4cb5	f0 05		beq $4cbc			beq 	_ESTASwitchFloat
.4cb7	20 12 4d	jsr $4d12			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.4cba	38		sec				sec
.4cbb	60		rts				rts
.4cbc					_ESTASwitchFloat:
.4cbc	9c 24 04	stz $0424			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.4cbf	e8		inx				inx 								; zero the decimal additive.
.4cc0	20 6a 4e	jsr $4e6a			jsr 	FloatSetZero
.4cc3	ca		dex				dex
.4cc4	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.4cc6	80 ae		bra $4c76			bra 	_ENExitChange
.4cc8					_ESTADecimalState:
.4cc8	68		pla				pla 								; digit.
.4cc9	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 11th decimal point.
.4ccb	f0 99		beq $4c66			beq 	_ENFail
.4ccd	e8		inx				inx 								; put digit into fractional part of X+1
.4cce	20 12 4d	jsr $4d12			jsr 	ESTAShiftDigitIntoMantissa
.4cd1	ca		dex				dex
.4cd2	ee 24 04	inc $0424			inc 	decimalCount 				; bump the count of decimals
.4cd5	ad 24 04	lda $0424			lda 	decimalCount 				; too many decimal digits.
.4cd8	c9 0b		cmp #$0b			cmp 	#11
.4cda	f0 02		beq $4cde			beq 	_ESTADSFail
.4cdc	38		sec				sec
.4cdd	60		rts				rts
.4cde					_ESTADSFail:
.4cde	18		clc				clc
.4cdf	60		rts				rts
.4ce0					_ENConstructFinal:
.4ce0	ad 24 04	lda $0424			lda 	decimalCount 				; get decimal count
.4ce3	f0 2b		beq $4d10			beq 	_ENCFExit 					; no decimals
.4ce5	5a		phy				phy
.4ce6	0a		asl a				asl 	a 							; x 4 and CLC
.4ce7	0a		asl a				asl 	a
.4ce8	6d 24 04	adc $0424			adc 	decimalCount
.4ceb	a8		tay				tay
.4cec	b9 77 49	lda $4977,y			lda 	FloatScalarTable-5,y 		; copy decimal scalar to X+2
.4cef	95 30		sta $30,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.4cf1	b9 78 49	lda $4978,y			lda 	FloatScalarTable-5+1,y
.4cf4	95 3c		sta $3c,x			sta 	NSMantissa1+2,x
.4cf6	b9 79 49	lda $4979,y			lda 	FloatScalarTable-5+2,y
.4cf9	95 48		sta $48,x			sta 	NSMantissa2+2,x
.4cfb	b9 7a 49	lda $497a,y			lda 	FloatScalarTable-5+3,y
.4cfe	95 54		sta $54,x			sta 	NSMantissa3+2,x
.4d00	b9 7b 49	lda $497b,y			lda 	FloatScalarTable-5+4,y
.4d03	95 60		sta $60,x			sta 	NSExponent+2,x
.4d05	74 24		stz $24,x			stz 	NSStatus+2,x 				; make +ve
.4d07	e8		inx				inx 								; multiply decimal const by decimal scalar
.4d08	e8		inx				inx
.4d09	20 2a 4b	jsr $4b2a			jsr 	FloatMultiply
.4d0c	20 8e 48	jsr $488e			jsr 	FloatAdd 					; add to integer part.
.4d0f	7a		ply				ply
.4d10					_ENCFExit:
.4d10	18		clc				clc 								; reject the digit.
.4d11	60		rts				rts
.4d12					ESTAShiftDigitIntoMantissa:
.4d12	29 0f		and #$0f			and 	#15 						; save digit
.4d14	48		pha				pha
.4d15	b5 52		lda $52,x			lda 	NSMantissa3,x 				; push mantissa on stack
.4d17	48		pha				pha
.4d18	b5 46		lda $46,x			lda 	NSMantissa2,x
.4d1a	48		pha				pha
.4d1b	b5 3a		lda $3a,x			lda 	NSMantissa1,x
.4d1d	48		pha				pha
.4d1e	b5 2e		lda $2e,x			lda 	NSMantissa0,x
.4d20	48		pha				pha
.4d21	20 79 4e	jsr $4e79			jsr 	FloatShiftLeft 				; x 2
.4d24	20 79 4e	jsr $4e79			jsr 	FloatShiftLeft 				; x 4
.4d27	18		clc				clc 								; pop mantissa and add
.4d28	68		pla				pla
.4d29	75 2e		adc $2e,x			adc 	NSMantissa0,x
.4d2b	95 2e		sta $2e,x			sta 	NSMantissa0,x
.4d2d	68		pla				pla
.4d2e	75 3a		adc $3a,x			adc 	NSMantissa1,x
.4d30	95 3a		sta $3a,x			sta 	NSMantissa1,x
.4d32	68		pla				pla
.4d33	75 46		adc $46,x			adc 	NSMantissa2,x
.4d35	95 46		sta $46,x			sta 	NSMantissa2,x
.4d37	68		pla				pla
.4d38	75 52		adc $52,x			adc 	NSMantissa3,x
.4d3a	95 52		sta $52,x			sta 	NSMantissa3,x 				; x 5
.4d3c	20 79 4e	jsr $4e79			jsr 	FloatShiftLeft 				; x 10
.4d3f	68		pla				pla 								; add digit
.4d40	18		clc				clc
.4d41	75 2e		adc $2e,x			adc 	NSMantissa0,x
.4d43	95 2e		sta $2e,x			sta 	NSMantissa0,x
.4d45	90 0a		bcc $4d51			bcc 	_ESTASDExit
.4d47	f6 3a		inc $3a,x			inc 	NSMantissa1,x
.4d49	d0 06		bne $4d51			bne 	_ESTASDExit
.4d4b	f6 46		inc $46,x			inc 	NSMantissa2,x
.4d4d	d0 02		bne $4d51			bne 	_ESTASDExit
.4d4f	f6 52		inc $52,x			inc 	NSMantissa3,x
.4d51					_ESTASDExit:
.4d51	60		rts				rts
.0422					encodeState:
>0422							.fill 	1
.0423					digitTemp:
>0423							.fill 	1
.0424					decimalCount:
>0424							.fill 	1
.4d52					FloatToString:
.4d52	da		phx				phx
.4d53	5a		phy				phy 								; save code position
.4d54	8d 25 04	sta $0425			sta 	decimalPlaces	 			; save number of DPs.
.4d57	9c 26 04	stz $0426			stz 	dbOffset 					; offset into decimal buffer = start.
.4d5a	b5 22		lda $22,x			lda 	NSStatus,x  				; is it -ve.
.4d5c	10 08		bpl $4d66			bpl 	_CNTSNotNegative
.4d5e	29 7f		and #$7f			and 	#$7F 						; make +ve
.4d60	95 22		sta $22,x			sta 	NSStatus,x
.4d62	a9 2d		lda #$2d			lda 	#"-"
.4d64	80 02		bra $4d68			bra 	_CNTMain
.4d66					_CNTSNotNegative:
.4d66	a9 20		lda #$20			lda 	#" "
.4d68					_CNTMain:
.4d68	20 ca 4d	jsr $4dca			jsr 	WriteDecimalBuffer
.4d6b	b5 5e		lda $5e,x			lda 	NSExponent,x 				; check if decimal
.4d6d	f0 0d		beq $4d7c			beq 	_CNTSNotFloat
.4d6f	e8		inx				inx 								; round up so we don't get too many 6.999999
.4d70	a9 01		lda #$01			lda 	#1
.4d72	20 6c 4e	jsr $4e6c			jsr 	FloatSetByte
.4d75	b5 5d		lda $5d,x			lda		NSExponent-1,x
.4d77	95 5e		sta $5e,x			sta 	NSExponent,x
.4d79	20 8e 48	jsr $488e			jsr 	FloatAdd
.4d7c					_CNTSNotFloat:
.4d7c	20 ac 4d	jsr $4dac			jsr 	MakePlusTwoString 			; do the integer part.
.4d7f	20 4a 4a	jsr $4a4a			jsr 	FloatFractionalPart 		; get the fractional part
.4d82	20 bf 4b	jsr $4bbf			jsr 	FloatNormalise					; normalise , exit if zero
.4d85	f0 22		beq $4da9			beq 	_CNTSExit
.4d87	a9 2e		lda #$2e			lda 	#"."
.4d89	20 ca 4d	jsr $4dca			jsr 	WriteDecimalBuffer 			; write decimal place
.4d8c					_CNTSDecimal:
.4d8c	ce 25 04	dec $0425			dec 	decimalPlaces 				; done all the decimals
.4d8f	30 18		bmi $4da9			bmi 	_CNTSExit
.4d91	e8		inx				inx 								; x 10.0
.4d92	a9 0a		lda #$0a			lda 	#10
.4d94	20 6c 4e	jsr $4e6c			jsr 	FloatSetByte
.4d97	20 2a 4b	jsr $4b2a			jsr 	FloatMultiply
.4d9a	20 ac 4d	jsr $4dac			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.4d9d	20 4a 4a	jsr $4a4a			jsr 	FloatFractionalPart 		; get the fractional part
.4da0	20 bf 4b	jsr $4bbf			jsr 	FloatNormalise 				; normalise it.
.4da3	b5 5e		lda $5e,x			lda 	NSExponent,x 				; gone to zero, exit.
.4da5	c9 d0		cmp #$d0			cmp 	#$D0 						; very small remainder, so don't bother.
.4da7	b0 e3		bcs $4d8c			bcs 	_CNTSDecimal 				; keep going.
.4da9					_CNTSExit:
.4da9	7a		ply				ply
.4daa	fa		plx				plx
.4dab	60		rts				rts
.4dac					MakePlusTwoString:
.4dac	da		phx				phx
.4dad	20 4d 4e	jsr $4e4d			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.4db0	e8		inx				inx 								; access it
.4db1	e8		inx				inx
.4db2	20 a5 4a	jsr $4aa5			jsr 	FloatIntegerPart 			; make it an integer
.4db5	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.4db7	20 e9 4d	jsr $4de9			jsr 	ConvertInt32
.4dba	a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.4dbc					_MPTSCopy:
.4dbc	bd 00 04	lda $0400,x			lda 	numberBuffer,x
.4dbf	20 ca 4d	jsr $4dca			jsr 	WriteDecimalBuffer
.4dc2	e8		inx				inx
.4dc3	bd 00 04	lda $0400,x			lda 	numberBuffer,x
.4dc6	d0 f4		bne $4dbc			bne 	_MPTSCopy
.4dc8	fa		plx				plx
.4dc9	60		rts				rts
.4dca					WriteDecimalBuffer:
.4dca	da		phx				phx
.4dcb	ae 26 04	ldx $0426			ldx 	dbOffset
.4dce	9d 27 04	sta $0427,x			sta 	decimalBuffer,x
.4dd1	9e 28 04	stz $0428,x			stz 	decimalBuffer+1,x
.4dd4	ee 26 04	inc $0426			inc 	dbOffset
.4dd7	fa		plx				plx
.4dd8	60		rts				rts
.0425					decimalPlaces:
>0425							.fill 	1
.0426					dbOffset:
>0426							.fill 	1
.0427					decimalBuffer:
>0427							.fill 	32
.4dd9					ConvertInt16:
.4dd9	85 2e		sta $2e				sta 	NSMantissa0 				; set up as 32 bit conversion
.4ddb	86 3a		stx $3a				stx 	NSMantissa1
.4ddd	64 46		stz $46				stz 	NSMantissa2
.4ddf	64 52		stz $52				stz 	NSMantissa3
.4de1	64 22		stz $22				stz 	NSStatus 					; positive integer
.4de3	a2 00		ldx #$00			ldx 	#0 							; stack level
.4de5	a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.4de7	80 00		bra $4de9			bra 	ConvertInt32
.4de9					ConvertInt32:
.4de9	5a		phy				phy
.4dea	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.4dec	24 22		bit $22				bit 	NSStatus 					; output a - if not negative.
.4dee	10 08		bpl $4df8			bpl 	_CI32NotNeg
.4df0	48		pha				pha
.4df1	a9 2d		lda #$2d			lda 	#'-'
.4df3	99 00 04	sta $0400,y			sta 	numberBuffer,y
.4df6	c8		iny				iny
.4df7	68		pla				pla
.4df8					_CI32NotNeg:
.4df8	20 06 4e	jsr $4e06			jsr 	_CI32DivideConvert 			; recursive conversion
.4dfb	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.4dfd	99 00 04	sta $0400,y			sta 	numberBuffer,y
.4e00	7a		ply				ply
.4e01	a2 04		ldx #$04			ldx 	#numberBuffer >> 8 			; return address in XA
.4e03	a9 00		lda #$00			lda 	#numberBuffer & $FF
.4e05	60		rts				rts
.4e06					_CI32DivideConvert:
.4e06	e8		inx				inx 								; write to next slot up
.4e07	20 6c 4e	jsr $4e6c			jsr 	FloatSetByte 		 		; write the base out.
.4e0a	ca		dex				dex
.4e0b	20 00 4a	jsr $4a00			jsr 	Int32Divide 				; divide
.4e0e	b5 2e		lda $2e,x			lda 	NSMantissa0,x 				; save remainder
.4e10	48		pha				pha
.4e11	20 ef 49	jsr $49ef			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.4e14	20 8c 4e	jsr $4e8c			jsr 	FloatIsZero 				; is it zero ?
.4e17	f0 05		beq $4e1e			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.4e19	b5 2f		lda $2f,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.4e1b	20 06 4e	jsr $4e06			jsr 	_CI32DivideConvert 			; and recusrively call.
.4e1e					_CI32NoRecurse:
.4e1e	68		pla				pla 								; remainder
.4e1f	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.4e21	90 02		bcc $4e25			bcc 	_CI32NotHex
.4e23	69 26		adc #$26			adc 	#6+32
.4e25					_CI32NotHex:
.4e25	69 30		adc #$30			adc 	#48
.4e27	99 00 04	sta $0400,y			sta 	numberBuffer,y 				; write out and exit
.4e2a	c8		iny				iny
.4e2b	60		rts				rts
.4e2c					FloatNegate:
.4e2c	b5 22		lda $22,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.4e2e	49 80		eor #$80			eor 	#$80  						; toggle the negative flag
.4e30	95 22		sta $22,x			sta 	NSStatus,x
.4e32	60		rts				rts
.4e33					FloatNegateMantissa:
.4e33	38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.4e34	a9 00		lda #$00			lda 	#0
.4e36	f5 2e		sbc $2e,x			sbc 	NSMantissa0,x
.4e38	95 2e		sta $2e,x			sta 	NSMantissa0,x
.4e3a	a9 00		lda #$00			lda 	#0
.4e3c	f5 3a		sbc $3a,x			sbc 	NSMantissa1,x
.4e3e	95 3a		sta $3a,x			sta 	NSMantissa1,x
.4e40	a9 00		lda #$00			lda 	#0
.4e42	f5 46		sbc $46,x			sbc 	NSMantissa2,x
.4e44	95 46		sta $46,x			sta 	NSMantissa2,x
.4e46	a9 00		lda #$00			lda 	#0
.4e48	f5 52		sbc $52,x			sbc 	NSMantissa3,x
.4e4a	95 52		sta $52,x			sta 	NSMantissa3,x
.4e4c	60		rts				rts
.4e4d					FloatShiftUpTwo:
.4e4d	b5 2e		lda $2e,x			lda 	NSMantissa0,x
.4e4f	95 30		sta $30,x			sta 	NSMantissa0+2,x
.4e51	b5 3a		lda $3a,x			lda 	NSMantissa1,x
.4e53	95 3c		sta $3c,x			sta 	NSMantissa1+2,x
.4e55	b5 46		lda $46,x			lda 	NSMantissa2,x
.4e57	95 48		sta $48,x			sta 	NSMantissa2+2,x
.4e59	b5 52		lda $52,x			lda 	NSMantissa3,x
.4e5b	95 54		sta $54,x			sta 	NSMantissa3+2,x
.4e5d	b5 5e		lda $5e,x			lda 	NSExponent,x
.4e5f	95 60		sta $60,x			sta 	NSExponent+2,x
.4e61	b5 22		lda $22,x			lda 	NSStatus,x
.4e63	95 24		sta $24,x			sta 	NSStatus+2,x
.4e65	60		rts				rts
.4e66					FloatSetZeroMantissaOnly:
.4e66	74 2e		stz $2e,x			stz 	NSMantissa0,x
.4e68	80 08		bra $4e72			bra 	FloatZero13
.4e6a					FloatSetZero:
.4e6a	a9 00		lda #$00			lda 	#0
.4e6c					FloatSetByte:
.4e6c	74 5e		stz $5e,x			stz 	NSExponent,x 				; zero exponent, as +ve integer value.
.4e6e					FloatSetMantissa:
.4e6e	95 2e		sta $2e,x			sta 	NSMantissa0,x 				; zero mantissa
.4e70	74 22		stz $22,x			stz 	NSStatus,x
.4e72					FloatZero13:
.4e72	74 3a		stz $3a,x			stz 	NSMantissa1,x
.4e74	74 46		stz $46,x			stz 	NSMantissa2,x
.4e76	74 52		stz $52,x			stz 	NSMantissa3,x
.4e78	60		rts				rts
.4e79					FloatShiftLeft:
.4e79	18		clc				clc
.4e7a					FloatRotateLeft:
.4e7a	36 2e		rol $2e,x			rol 	NSMantissa0,x
.4e7c	36 3a		rol $3a,x			rol		NSMantissa1,x
.4e7e	36 46		rol $46,x			rol		NSMantissa2,x
.4e80	36 52		rol $52,x			rol		NSMantissa3,x
.4e82	60		rts				rts
.4e83					FloatShiftRight:
.4e83	56 52		lsr $52,x			lsr 	NSMantissa3,x
.4e85	76 46		ror $46,x			ror		NSMantissa2,x
.4e87	76 3a		ror $3a,x			ror		NSMantissa1,x
.4e89	76 2e		ror $2e,x			ror		NSMantissa0,x
.4e8b	60		rts				rts
.4e8c					FloatIsZero:
.4e8c	b5 52		lda $52,x			lda 	NSMantissa3,x
.4e8e	15 46		ora $46,x			ora		NSMantissa2,x
.4e90	15 3a		ora $3a,x			ora		NSMantissa1,x
.4e92	15 2e		ora $2e,x			ora		NSMantissa0,x
.4e94	60		rts				rts

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/polynomials.library

.4e95					FloatArcTan:
.4e95	20 bf 4b	jsr $4bbf			jsr 	FloatNormalise 					; normalise x
.4e98	b5 22		lda $22,x			lda 	NSStatus,x 						; save sign, make absolute
.4e9a	48		pha				pha
.4e9b	74 22		stz $22,x			stz 	NSStatus,x
.4e9d	b5 5e		lda $5e,x			lda 	NSExponent,x 					; $40000000 ^ $E2 is 1.0
.4e9f	c9 e2		cmp #$e2			cmp 	#$E2
.4ea1	90 25		bcc $4ec8			bcc 	_UANoFixup
.4ea3	8a		txa				txa 									; value in +1
.4ea4	a8		tay				tay
.4ea5	c8		iny				iny
.4ea6	20 4e 50	jsr $504e			jsr 	CopyFloatXY
.4ea9	a9 01		lda #$01			lda 	#1 								; 1.0 in +0
.4eab	20 6c 4e	jsr $4e6c			jsr 	FloatSetByte
.4eae	e8		inx				inx
.4eaf	20 b3 49	jsr $49b3			jsr 	FloatDivide
.4eb2	b0 21		bcs $4ed5			bcs 	_FATError
.4eb4	20 d8 4e	jsr $4ed8			jsr 	CoreAtn 						; calculate the root
.4eb7	20 43 50	jsr $5043			jsr 	CompletePolynomial
.4eba	20 2c 4e	jsr $4e2c			jsr 	FloatNegate 					; make -ve
.4ebd	a9 05		lda #$05			lda 	#Const_PiDiv2-Const_Base
.4ebf	20 9a 50	jsr $509a			jsr 	LoadConstant
.4ec2	e8		inx				inx
.4ec3	20 8e 48	jsr $488e			jsr 	FloatAdd
.4ec6	80 06		bra $4ece			bra 	_UAComplete
.4ec8					_UANoFixup:
.4ec8	20 d8 4e	jsr $4ed8			jsr 	CoreAtn
.4ecb	20 43 50	jsr $5043			jsr 	CompletePolynomial
.4ece					_UAComplete:
.4ece	68		pla				pla 									; apply the result.
.4ecf	55 22		eor $22,x			eor 	NSStatus,x
.4ed1	95 22		sta $22,x			sta 	NSStatus,x
.4ed3	18		clc				clc
.4ed4	60		rts				rts
.4ed5					_FATError:
.4ed5	68		pla				pla
.4ed6	38		sec				sec
.4ed7	60		rts				rts
.4ed8					CoreAtn:
.4ed8	a9 46		lda #$46			lda 	#AtnCoefficients & $FF
.4eda	a0 4f		ldy #$4f			ldy 	#AtnCoefficients >> 8
.4edc	4c 97 51	jmp $5197			jmp 	CorePolySquared
.4edf					ExpCoefficients:
>4edf	07					.byte	7
>4ee0	2b 1f 2c 5a				.dword	$5a2c1f2b ; 2.1498763701e-05
>4ee4	d2					.byte	$d2
>4ee5	8e 59 3f 4b				.dword	$4b3f598e ; 0.00014352314037
>4ee9	d5					.byte	$d5
>4eea	c3 71 f7 57				.dword	$57f771c3 ; 0.0013422634825
>4eee	d8					.byte	$d8
>4eef	15 0e c2 4e				.dword	$4ec20e15 ; 0.0096140170135
>4ef3	db					.byte	$db
>4ef4	05 ac ac 71				.dword	$71acac05 ; 0.05550512686
>4ef8	dd					.byte	$dd
>4ef9	e3 f3 fe 7a				.dword	$7afef3e3 ; 0.2402263846
>4efd	df					.byte	$df
>4efe	08 0c b9 58				.dword	$58b90c08 ; 0.69314718618
>4f02	e1					.byte	$e1
>4f03	00 00 00 40				.dword	$40000000 ; 1.0
>4f07	e2					.byte	$e2
.4f08					SinCoefficients:
>4f08	06					.byte	6
>4f09	8d 16 0d f3				.dword	$f30d168d ; -14.381390672
>4f0d	e5					.byte	$e5
>4f0e	fc fd 03 54				.dword	$5403fdfc ; 42.007797122
>4f12	e7					.byte	$e7
>4f13	81 44 b4 cc				.dword	$ccb44481 ; -76.704170257
>4f17	e8					.byte	$e8
>4f18	f1 ef 9a 51				.dword	$519aeff1 ; 81.605223686
>4f1c	e8					.byte	$e8
>4f1d	94 f3 ae d2				.dword	$d2aef394 ; -41.341702104
>4f21	e7					.byte	$e7
>4f22	51 ed 87 64				.dword	$6487ed51 ; 6.2831853069
>4f26	e4					.byte	$e4
>4f27	00 00 00 00				.dword	$00000000 ; 0.0
>4f2b	00					.byte	$00
.4f2c					LogCoefficients:
>4f2c	04					.byte	4
>4f2d	bd 65 2b 6f				.dword	$6f2b65bd ; 0.43425594189
>4f31	e0					.byte	$e0
>4f32	b2 85 cd 49				.dword	$49cd85b2 ; 0.57658454124
>4f36	e1					.byte	$e1
>4f37	8b 49 1c 7b				.dword	$7b1c498b ; 0.96180075919
>4f3b	e1					.byte	$e1
>4f3c	90 1d 55 5c				.dword	$5c551d90 ; 2.8853900731
>4f40	e3					.byte	$e3
>4f41	00 00 00 c0				.dword	$c0000000 ; -0.5
>4f45	e1					.byte	$e1
.4f46					AtnCoefficients:
>4f46	0c					.byte	12
>4f47	ea de c1 d9				.dword	$d9c1deea ; -0.00068479391189
>4f4b	d7					.byte	$d7
>4f4c	7a 53 7a 4f				.dword	$4f7a537a ; 0.0048509421558
>4f50	da					.byte	$da
>4f51	08 58 fe c1				.dword	$c1fe5808 ; -0.016111701843
>4f55	dc					.byte	$dc
>4f56	e5 b3 0f 46				.dword	$460fb3e5 ; 0.034209638048
>4f5a	dd					.byte	$dd
>4f5b	e1 e5 29 ef				.dword	$ef29e5e1 ; -0.054279132761
>4f5f	dd					.byte	$dd
>4f60	26 38 32 4a				.dword	$4a323826 ; 0.07245719654
>4f64	de					.byte	$de
>4f65	bd 28 f5 db				.dword	$dbf528bd ; -0.089802395378
>4f69	de					.byte	$de
>4f6a	3f 44 98 71				.dword	$7198443f ; 0.11093241343
>4f6e	de					.byte	$de
>4f6f	9d 4c 22 c9				.dword	$c9224c9d ; -0.14283980767
>4f73	df					.byte	$df
>4f74	e3 48 66 66				.dword	$666648e3 ; 0.19999912049
>4f78	df					.byte	$df
>4f79	0a 55 55 d5				.dword	$d555550a ; -0.33333331568
>4f7d	e0					.byte	$e0
>4f7e	00 00 00 40				.dword	$40000000 ; 1.0
>4f82	e2					.byte	$e2
>4f83	00 00 00 00				.dword	$00000000 ; 0.0
>4f87	00					.byte	$00
.4f88					Const_Base:
.4f88					Const_1Div2Pi:
>4f88	b7 c1 7c 51				.dword	$517cc1b7 ; 0.15915494
>4f8c	df					.byte	$df
.4f8d					Const_PiDiv2:
>4f8d	51 ed 87 64				.dword	$6487ed51 ; 1.57079633
>4f91	e2					.byte	$e2
.4f92					Const_Log2_e:
>4f92	95 1d 55 5c				.dword	$5c551d95 ; 1.44269504
>4f96	e2					.byte	$e2
.4f97					Const_sqrt_2:
>4f97	9a 79 82 5a				.dword	$5a82799a ; 1.41421356
>4f9b	e2					.byte	$e2
.4f9c					Const_sqrt_half:
>4f9c	9a 79 82 5a				.dword	$5a82799a ; 0.70710678
>4fa0	e1					.byte	$e1
.4fa1					Const_pi:
>4fa1	51 ed 87 64				.dword	$6487ed51 ; 3.14159265
>4fa5	e3					.byte	$e3
.4fa6					Const_half:
>4fa6	00 00 00 40				.dword	$40000000 ; 0.50000000
>4faa	e1					.byte	$e1
.4fab					Const_ln_e:
>4fab	fc 0b b9 58				.dword	$58b90bfc ; 0.69314718
>4faf	e1					.byte	$e1
.4fb0					FloatCosine:
.4fb0	a9 05		lda #$05			lda 	#Const_PiDiv2-Const_Base
.4fb2	20 9a 50	jsr $509a			jsr 	LoadConstant
.4fb5	e8		inx				inx
.4fb6	20 8e 48	jsr $488e			jsr 	FloatAdd
.4fb9	4c 50 51	jmp $5150			jmp 	FloatSine
.4fbc					FloatExponent:
.4fbc	a9 0a		lda #$0a			lda 	#Const_Log2_e-Const_Base
.4fbe	20 9a 50	jsr $509a			jsr 	LoadConstant
.4fc1	e8		inx				inx
.4fc2	20 2a 4b	jsr $4b2a			jsr 	FloatMultiply
.4fc5	20 07 50	jsr $5007			jsr 	_UECopy01 				; copy 0 to 1, get integer part to 1
.4fc8	e8		inx				inx
.4fc9	20 a5 4a	jsr $4aa5			jsr 	FloatIntegerPart
.4fcc	ca		dex				dex
.4fcd	b5 3b		lda $3b,x			lda 	NSMantissa1+1,x
.4fcf	15 47		ora $47,x			ora 	NSMantissa2+1,x
.4fd1	15 53		ora $53,x			ora 	NSMantissa3+1,x
.4fd3	d0 38		bne $500d			bne 	_UERangeError
.4fd5	b5 2f		lda $2f,x			lda 	NSMantissa0+1,x 		; push integer part on stack.
.4fd7	c9 40		cmp #$40			cmp 	#64
.4fd9	b0 32		bcs $500d			bcs 	_UERangeError
.4fdb	48		pha				pha
.4fdc	b5 22		lda $22,x			lda 	NSStatus,x 				; push sign
.4fde	48		pha				pha
.4fdf	20 4a 4a	jsr $4a4a			jsr 	FloatFractionalPart		; copy 0 to 1, get fractional part to 0
.4fe2	68		pla				pla
.4fe3	10 14		bpl $4ff9			bpl 	_UEPositive
.4fe5	e8		inx				inx 							; 1-x
.4fe6	a9 01		lda #$01			lda 	#1
.4fe8	20 6c 4e	jsr $4e6c			jsr 	FloatSetByte
.4feb	ca		dex				dex
.4fec	20 2c 4e	jsr $4e2c			jsr 	FloatNegate
.4fef	e8		inx				inx
.4ff0	20 8e 48	jsr $488e			jsr 	FloatAdd
.4ff3	68		pla				pla 							; integer part +1 and negated.
.4ff4	1a		inc a				inc 	a
.4ff5	49 ff		eor #$ff			eor 	#$FF
.4ff7	1a		inc a				inc 	a
.4ff8	48		pha				pha
.4ff9					_UEPositive:
.4ff9	20 0f 50	jsr $500f			jsr 	CoreExponent
.4ffc	20 43 50	jsr $5043			jsr 	CompletePolynomial
.4fff	68		pla				pla
.5000	18		clc				clc
.5001	75 5e		adc $5e,x			adc 	NSExponent,x
.5003	95 5e		sta $5e,x			sta 	NSExponent,x
.5005	18		clc				clc
.5006	60		rts				rts
.5007					_UECopy01:
.5007	8a		txa				txa
.5008	a8		tay				tay
.5009	c8		iny				iny
.500a	4c 4e 50	jmp $504e			jmp 	CopyFloatXY
.500d					_UERangeError:
.500d	38		sec				sec
.500e	60		rts				rts
.500f					CoreExponent:
.500f	a9 df		lda #$df			lda 	#ExpCoefficients & $FF
.5011	a0 4e		ldy #$4e			ldy 	#ExpCoefficients >> 8
.5013	20 17 50	jsr $5017			jsr 	CalculateHornerPolynomial
.5016	60		rts				rts
.5017					CalculateHornerPolynomial:
.5017	85 6e		sta $6e				sta 	zTemp0 						; save poly data from YA
.5019	84 6f		sty $6f				sty 	zTemp0+1
.501b	9c 47 04	stz $0447			stz 	coefficientCount 			; zero the count.
.501e	8e 48 04	stx $0448			stx 	xValueSlot 					; save xValue slot.
.5021	e8		inx				inx 								; set the count to zero.
.5022	20 6a 4e	jsr $4e6a			jsr 	FloatSetZero
.5025					_CHPLoop:
.5025	8a		txa				txa 								; copy X-1 to X+1
.5026	a8		tay				tay
.5027	ca		dex				dex
.5028	c8		iny				iny
.5029	20 4e 50	jsr $504e			jsr 	CopyFloatXY 				; e.g. stack is <current> <x>
.502c	e8		inx				inx
.502d	e8		inx				inx
.502e	20 2a 4b	jsr $4b2a			jsr 	FloatMultiply 				; times current by X
.5031	e8		inx				inx
.5032	20 6d 50	jsr $506d			jsr 	GetCoefficient 				; coefficient into X+1
.5035	20 8e 48	jsr $488e			jsr 	FloatAdd 					; and add
.5038	ee 47 04	inc $0447			inc 	coefficientCount
.503b	ad 47 04	lda $0447			lda 	coefficientCount
.503e	d2 6e		cmp ($6e)			cmp 	(zTemp0)
.5040	d0 e3		bne $5025			bne 	_CHPLoop
.5042	60		rts				rts
.5043					CompletePolynomial:
.5043	20 2a 4b	jsr $4b2a			jsr 	FloatMultiply
.5046	e8		inx				inx 								; get the last value
.5047	20 6d 50	jsr $506d			jsr 	GetCoefficient
.504a	20 8e 48	jsr $488e			jsr 	FloatAdd 					; and add it
.504d	60		rts				rts
.504e					CopyFloatXY:
.504e	b5 5e		lda $5e,x			lda 	NSExponent,x
.5050	99 5e 00	sta $005e,y			sta 	NSExponent,y
.5053	b5 22		lda $22,x			lda 	NSStatus,x
.5055	99 22 00	sta $0022,y			sta 	NSStatus,y
.5058	b5 2e		lda $2e,x			lda 	NSMantissa0,x
.505a	99 2e 00	sta $002e,y			sta 	NSMantissa0,y
.505d	b5 3a		lda $3a,x			lda 	NSMantissa1,x
.505f	99 3a 00	sta $003a,y			sta 	NSMantissa1,y
.5062	b5 46		lda $46,x			lda 	NSMantissa2,x
.5064	99 46 00	sta $0046,y			sta 	NSMantissa2,y
.5067	b5 52		lda $52,x			lda 	NSMantissa3,x
.5069	99 52 00	sta $0052,y			sta 	NSMantissa3,y
.506c	60		rts				rts
.506d					GetCoefficient:
.506d	5a		phy				phy
.506e	ad 47 04	lda $0447			lda 	coefficientCount 			; 5 per block
.5071	0a		asl a				asl 	a
.5072	0a		asl a				asl 	a
.5073	38		sec				sec 								; +1 for count
.5074	6d 47 04	adc $0447			adc 	coefficientCount
.5077	a8		tay				tay
.5078	b1 6e		lda ($6e),y			lda 	(zTemp0),y 					; copy mantissa
.507a	95 2e		sta $2e,x			sta 	NSMantissa0,x
.507c	c8		iny				iny
.507d	b1 6e		lda ($6e),y			lda 	(zTemp0),y
.507f	95 3a		sta $3a,x			sta 	NSMantissa1,x
.5081	c8		iny				iny
.5082	b1 6e		lda ($6e),y			lda 	(zTemp0),y
.5084	95 46		sta $46,x			sta 	NSMantissa2,x
.5086	c8		iny				iny
.5087	b1 6e		lda ($6e),y			lda 	(zTemp0),y
.5089	48		pha				pha
.508a	29 7f		and #$7f			and 	#$7F 						; clear sign bit.
.508c	95 52		sta $52,x			sta 	NSMantissa3,x
.508e	c8		iny				iny
.508f	68		pla				pla
.5090	29 80		and #$80			and 	#$80
.5092	95 22		sta $22,x			sta 	NSStatus,x 					; put in status
.5094	b1 6e		lda ($6e),y			lda 	(zTemp0),y
.5096	95 5e		sta $5e,x			sta 	NSExponent,x
.5098	7a		ply				ply
.5099	60		rts				rts
.0447					coefficientCount:
>0447							.fill 	1
.0448					xValueSlot:
>0448							.fill 	1
.509a					LoadConstant:
.509a	5a		phy				phy
.509b	a8		tay				tay
.509c	b9 88 4f	lda $4f88,y			lda 	Const_Base+0,y
.509f	95 2f		sta $2f,x			sta 	NSMantissa0+1,x
.50a1	b9 89 4f	lda $4f89,y			lda 	Const_Base+1,y
.50a4	95 3b		sta $3b,x			sta 	NSMantissa1+1,x
.50a6	b9 8a 4f	lda $4f8a,y			lda 	Const_Base+2,y
.50a9	95 47		sta $47,x			sta 	NSMantissa2+1,x
.50ab	b9 8b 4f	lda $4f8b,y			lda 	Const_Base+3,y
.50ae	48		pha				pha
.50af	29 7f		and #$7f			and 	#$7F
.50b1	95 53		sta $53,x			sta 	NSMantissa3+1,x
.50b3	68		pla				pla
.50b4	29 80		and #$80			and 	#$80
.50b6	95 23		sta $23,x			sta 	NSStatus+1,x
.50b8	b9 8c 4f	lda $4f8c,y			lda 	Const_Base+4,y
.50bb	95 5f		sta $5f,x			sta 	NSExponent+1,x
.50bd	7a		ply				ply
.50be	60		rts				rts
.50bf					FloatLogarithm:
.50bf	b5 22		lda $22,x			lda 	NSStatus,x 					; check > 0
.50c1	30 5f		bmi $5122			bmi 	_ULRange
.50c3	20 8c 4e	jsr $4e8c			jsr 	FloatIsZero
.50c6	f0 5a		beq $5122			beq 	_ULRange
.50c8	20 bf 4b	jsr $4bbf			jsr 	FloatNormalise 				; put into FP mode.
.50cb	b5 5e		lda $5e,x			lda 	NSExponent,x 				; get power
.50cd	48		pha				pha
.50ce	a9 e1		lda #$e1			lda 	#(-31) & $FF 				; force into range 0.5 -> 1
.50d0	95 5e		sta $5e,x			sta 	NSExponent,x
.50d2	a9 14		lda #$14			lda 	#Const_sqrt_half-Const_Base
.50d4	20 9a 50	jsr $509a			jsr 	LoadConstant
.50d7	e8		inx				inx
.50d8	20 8e 48	jsr $488e			jsr 	FloatAdd
.50db	8a		txa				txa 								; divide into sqrt 2.0
.50dc	a8		tay				tay
.50dd	c8		iny				iny
.50de	20 4e 50	jsr $504e			jsr 	CopyFloatXY
.50e1	ca		dex				dex
.50e2	a9 0f		lda #$0f			lda 	#Const_sqrt_2-Const_Base
.50e4	20 9a 50	jsr $509a			jsr 	LoadConstant
.50e7	e8		inx				inx
.50e8	e8		inx				inx
.50e9	20 b3 49	jsr $49b3			jsr 	FloatDivide 				; if zero, error.
.50ec	b0 33		bcs $5121			bcs 	_ULRangePla
.50ee	20 2c 4e	jsr $4e2c			jsr 	FloatNegate 				; subtract from 1
.50f1	e8		inx				inx
.50f2	a9 01		lda #$01			lda 	#1
.50f4	20 6c 4e	jsr $4e6c			jsr 	FloatSetByte
.50f7	20 8e 48	jsr $488e			jsr 	FloatAdd
.50fa	20 24 51	jsr $5124			jsr 	CoreLog
.50fd	20 43 50	jsr $5043			jsr 	CompletePolynomial
.5100	68		pla				pla 								; add exponent
.5101	18		clc				clc
.5102	69 1f		adc #$1f			adc 	#31 						; fix up
.5104	48		pha				pha
.5105	10 03		bpl $510a			bpl 	_LogNotNeg
.5107	49 ff		eor #$ff			eor 	#$FF
.5109	1a		inc a				inc 	a
.510a					_LogNotNeg:
.510a	e8		inx				inx 								; set byte and sign.
.510b	20 6c 4e	jsr $4e6c			jsr 	FloatSetByte
.510e	68		pla				pla
.510f	29 80		and #$80			and 	#$80
.5111	95 22		sta $22,x			sta 	NSStatus,x
.5113	20 8e 48	jsr $488e			jsr 	FloatAdd
.5116	a9 23		lda #$23			lda 	#Const_ln_e-Const_Base
.5118	20 9a 50	jsr $509a			jsr 	LoadConstant
.511b	e8		inx				inx
.511c	20 2a 4b	jsr $4b2a			jsr 	FloatMultiply
.511f	18		clc				clc
.5120	60		rts				rts
.5121					_ULRangePla:
.5121	68		pla				pla
.5122					_ULRange:
.5122	38		sec				sec
.5123	60		rts				rts
.5124					CoreLog:
.5124	a9 2c		lda #$2c			lda 	#LogCoefficients & $FF
.5126	a0 4f		ldy #$4f			ldy 	#LogCoefficients >> 8
.5128	4c 97 51	jmp $5197			jmp 	CorePolySquared
.512b					FloatPI:
.512b	a9 19		lda #$19			lda 	#Const_pi-Const_Base
.512d	20 9a 50	jsr $509a			jsr 	LoadConstant
.5130	e8		inx				inx
.5131	18		clc				clc
.5132	60		rts				rts
.5133					FloatPower:
.5133	ca		dex				dex
.5134	8a		txa				txa 							; copy 0 to 2, so we can process it
.5135	a8		tay				tay
.5136	c8		iny				iny
.5137	c8		iny				iny
.5138	20 4e 50	jsr $504e			jsr 	CopyFloatXY
.513b	e8		inx				inx 							; 2 = Log(0)
.513c	e8		inx				inx
.513d	20 bf 50	jsr $50bf			jsr 	FloatLogarithm
.5140	b0 0d		bcs $514f			bcs 	_FPWExit
.5142	20 2a 4b	jsr $4b2a			jsr 	FloatMultiply			; Multiply by original 1, into 1.
.5145	8a		txa				txa 							; copy to slot 0
.5146	a8		tay				tay
.5147	88		dey				dey
.5148	20 4e 50	jsr $504e			jsr 	CopyFloatXY
.514b	ca		dex				dex  							; Exponent code.
.514c	20 bc 4f	jsr $4fbc			jsr 	FloatExponent
.514f					_FPWExit:
.514f	60		rts				rts
.5150					FloatSine:
.5150	b5 22		lda $22,x			lda 	NSStatus,x 					; save sign
.5152	48		pha				pha
.5153	74 22		stz $22,x			stz 	NSStatus,x 					; make +ve
.5155	a9 00		lda #$00			lda 	#Const_1Div2Pi-Const_Base
.5157	20 9a 50	jsr $509a			jsr 	LoadConstant
.515a	e8		inx				inx
.515b	20 2a 4b	jsr $4b2a			jsr 	FloatMultiply
.515e	20 4a 4a	jsr $4a4a			jsr 	FloatFractionalPart 		; take the fractional part
.5161	b5 5e		lda $5e,x			lda 	NSExponent,x 				; check exponent
.5163	c9 e0		cmp #$e0			cmp 	#$E0 						; < $E0 exponent : 0-0.25
.5165	90 1f		bcc $5186			bcc 	_USProcessExit
.5167	f0 06		beq $516f			beq 	_USSubtractFromHalf 		; = $E0 exponent : 0.25-0.5
.5169	b5 52		lda $52,x			lda 	NSMantissa3,x 				; if > 0.75 which is $60000000:$E1
.516b	c9 60		cmp #$60			cmp 	#$60
.516d	b0 0e		bcs $517d			bcs 	_USSubtractOne
.516f					_USSubtractFromHalf:
.516f	a9 1e		lda #$1e			lda 	#Const_half-Const_Base
.5171	20 9a 50	jsr $509a			jsr 	LoadConstant
.5174	e8		inx				inx
.5175	20 88 48	jsr $4888			jsr 	FloatSubtract
.5178	20 2c 4e	jsr $4e2c			jsr 	FloatNegate 				; then negate it
.517b	80 09		bra $5186			bra 	_USProcessExit 				; and exit
.517d					_USSubtractOne:
.517d	e8		inx				inx
.517e	a9 01		lda #$01			lda 	#1
.5180	20 6c 4e	jsr $4e6c			jsr 	FloatSetByte
.5183	20 88 48	jsr $4888			jsr 	FloatSubtract
.5186					_USProcessExit:
.5186	20 93 51	jsr $5193			jsr 	CoreSine
.5189	20 43 50	jsr $5043			jsr 	CompletePolynomial
.518c	68		pla				pla 								; restore sign and apply
.518d	55 22		eor $22,x			eor 	NSStatus,x
.518f	95 22		sta $22,x			sta 	NSStatus,x
.5191	18		clc				clc
.5192	60		rts				rts
.5193					CoreSine:
.5193	a9 08		lda #$08			lda 	#SinCoefficients & $FF
.5195	a0 4f		ldy #$4f			ldy 	#SinCoefficients >> 8
.5197					CorePolySquared:
.5197	48		pha				pha 								; save coefficient table
.5198	5a		phy				phy
.5199	8a		txa				txa 								; copy X to +1, +2
.519a	a8		tay				tay
.519b	c8		iny				iny
.519c	20 4e 50	jsr $504e			jsr 	CopyFloatXY
.519f	c8		iny				iny
.51a0	20 4e 50	jsr $504e			jsr 	CopyFloatXY
.51a3	e8		inx				inx 								; point to the pair and put x^2 on stack
.51a4	e8		inx				inx
.51a5	20 2a 4b	jsr $4b2a			jsr 	FloatMultiply
.51a8	7a		ply				ply 								; coefficient table back.
.51a9	68		pla				pla
.51aa	20 17 50	jsr $5017			jsr 	CalculateHornerPolynomial
.51ad	8a		txa				txa 								; copy back to slot #1
.51ae	a8		tay				tay
.51af	88		dey				dey
.51b0	20 4e 50	jsr $504e			jsr	 	CopyFloatXY
.51b3	ca		dex				dex 								; point at result
.51b4	60		rts				rts
.51b5					FloatSquareRoot:
.51b5	20 bf 50	jsr $50bf			jsr 	FloatLogarithm
.51b8	b0 06		bcs $51c0			bcs 	_FSQExit
.51ba	d6 5e		dec $5e,x			dec 	NSExponent,x
.51bc	20 bc 4f	jsr $4fbc			jsr 	FloatExponent
.51bf	18		clc				clc
.51c0					_FSQExit:
.51c0	60		rts				rts
.51c1					FloatTangent:
.51c1	da		phx				phx
.51c2	8a		txa				txa 								; sin -> +1
.51c3	a8		tay				tay
.51c4	c8		iny				iny
.51c5	20 4e 50	jsr $504e			jsr 	CopyFloatXY
.51c8	e8		inx				inx
.51c9	20 50 51	jsr $5150			jsr 	FloatSine
.51cc	ca		dex				dex
.51cd	8a		txa				txa 								; cos -> +2
.51ce	a8		tay				tay
.51cf	c8		iny				iny
.51d0	c8		iny				iny
.51d1	20 4e 50	jsr $504e			jsr 	CopyFloatXY
.51d4	e8		inx				inx
.51d5	e8		inx				inx
.51d6	20 b0 4f	jsr $4fb0			jsr 	FloatCosine
.51d9	20 b3 49	jsr $49b3			jsr 	FloatDivide 				; calculate sin/cos
.51dc	b0 07		bcs $51e5			bcs 	_FTExit 					; divide by zero
.51de	8a		txa				txa 								; copy result down.
.51df	a8		tay				tay
.51e0	88		dey				dey
.51e1	20 4e 50	jsr $504e			jsr 	CopyFloatXY
.51e4	18		clc				clc
.51e5					_FTExit:
.51e5	fa		plx				plx
.51e6	60		rts				rts

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/common.library

=$80					C64_END                  = $80 ; $80 end
=$81					C64_FOR                  = $81 ; $81 for
=$82					C64_NEXT                 = $82 ; $82 next
=$83					C64_DATA                 = $83 ; $83 data
=$84					C64_INPUTHASH            = $84 ; $84 input#
=$85					C64_INPUT                = $85 ; $85 input
=$86					C64_DIM                  = $86 ; $86 dim
=$87					C64_READ                 = $87 ; $87 read
=$88					C64_LET                  = $88 ; $88 let
=$89					C64_GOTO                 = $89 ; $89 goto
=$8a					C64_RUN                  = $8a ; $8a run
=$8b					C64_IF                   = $8b ; $8b if
=$8c					C64_RESTORE              = $8c ; $8c restore
=$8d					C64_GOSUB                = $8d ; $8d gosub
=$8e					C64_RETURN               = $8e ; $8e return
=$8f					C64_REM                  = $8f ; $8f rem
=$90					C64_STOP                 = $90 ; $90 stop
=$91					C64_ON                   = $91 ; $91 on
=$92					C64_WAIT                 = $92 ; $92 wait
=$93					C64_LOAD                 = $93 ; $93 load
=$94					C64_SAVE                 = $94 ; $94 save
=$95					C64_VERIFY               = $95 ; $95 verify
=$96					C64_DEF                  = $96 ; $96 def
=$97					C64_POKE                 = $97 ; $97 poke
=$98					C64_PRINTHASH            = $98 ; $98 print#
=$99					C64_PRINT                = $99 ; $99 print
=$9a					C64_CONT                 = $9a ; $9a cont
=$9b					C64_LIST                 = $9b ; $9b list
=$9c					C64_CLR                  = $9c ; $9c clr
=$9d					C64_CMD                  = $9d ; $9d cmd
=$9e					C64_SYS                  = $9e ; $9e sys
=$9f					C64_OPEN                 = $9f ; $9f open
=$a0					C64_CLOSE                = $a0 ; $a0 close
=$a1					C64_GET                  = $a1 ; $a1 get
=$a2					C64_NEW                  = $a2 ; $a2 new
=$a3					C64_TABLB                = $a3 ; $a3 tab(
=$a4					C64_TO                   = $a4 ; $a4 to
=$a5					C64_FN                   = $a5 ; $a5 fn
=$a6					C64_SPCLB                = $a6 ; $a6 spc(
=$a7					C64_THEN                 = $a7 ; $a7 then
=$a8					C64_NOT                  = $a8 ; $a8 not
=$a9					C64_STEP                 = $a9 ; $a9 step
=$aa					C64_PLUS                 = $aa ; $aa +
=$ab					C64_MINUS                = $ab ; $ab -
=$ac					C64_TIMES                = $ac ; $ac *
=$ad					C64_DIVIDE               = $ad ; $ad /
=$ae					C64_POWER                = $ae ; $ae ^
=$af					C64_AND                  = $af ; $af and
=$b0					C64_OR                   = $b0 ; $b0 or
=$b1					C64_GREATER              = $b1 ; $b1 >
=$b2					C64_EQUAL                = $b2 ; $b2 =
=$b3					C64_LESS                 = $b3 ; $b3 <
=$b4					C64_SGN                  = $b4 ; $b4 sgn
=$b5					C64_INT                  = $b5 ; $b5 int
=$b6					C64_ABS                  = $b6 ; $b6 abs
=$b7					C64_USR                  = $b7 ; $b7 usr
=$b8					C64_FRE                  = $b8 ; $b8 fre
=$b9					C64_POS                  = $b9 ; $b9 pos
=$ba					C64_SQR                  = $ba ; $ba sqr
=$bb					C64_RND                  = $bb ; $bb rnd
=$bc					C64_LOG                  = $bc ; $bc log
=$bd					C64_EXP                  = $bd ; $bd exp
=$be					C64_COS                  = $be ; $be cos
=$bf					C64_SIN                  = $bf ; $bf sin
=$c0					C64_TAN                  = $c0 ; $c0 tan
=$c1					C64_ATN                  = $c1 ; $c1 atn
=$c2					C64_PEEK                 = $c2 ; $c2 peek
=$c3					C64_LEN                  = $c3 ; $c3 len
=$c4					C64_STRDOLLAR            = $c4 ; $c4 str$
=$c5					C64_VAL                  = $c5 ; $c5 val
=$c6					C64_ASC                  = $c6 ; $c6 asc
=$c7					C64_CHRDOLLAR            = $c7 ; $c7 chr$
=$c8					C64_LEFTDOLLAR           = $c8 ; $c8 left$
=$c9					C64_RIGHTDOLLAR          = $c9 ; $c9 right$
=$ca					C64_MIDDOLLAR            = $ca ; $ca mid$
=$cb					C64_GO                   = $cb ; $cb go
=$ce80					C64_MON                  = $ce80 ; $ce80 mon
=$ce81					C64_DOS                  = $ce81 ; $ce81 dos
=$ce82					C64_OLD                  = $ce82 ; $ce82 old
=$ce83					C64_GEOS                 = $ce83 ; $ce83 geos
=$ce84					C64_VPOKE                = $ce84 ; $ce84 vpoke
=$ce85					C64_VLOAD                = $ce85 ; $ce85 vload
=$ce86					C64_SCREEN               = $ce86 ; $ce86 screen
=$ce87					C64_PSET                 = $ce87 ; $ce87 pset
=$ce88					C64_LINE                 = $ce88 ; $ce88 line
=$ce89					C64_FRAME                = $ce89 ; $ce89 frame
=$ce8a					C64_RECT                 = $ce8a ; $ce8a rect
=$ce8b					C64_CHAR                 = $ce8b ; $ce8b char
=$ce8c					C64_MOUSE                = $ce8c ; $ce8c mouse
=$ce8d					C64_COLOR                = $ce8d ; $ce8d color
=$ce8e					C64_TEST                 = $ce8e ; $ce8e test
=$ce8f					C64_RESET                = $ce8f ; $ce8f reset
=$ce90					C64_CLS                  = $ce90 ; $ce90 cls
=$ce91					C64_CODEX                = $ce91 ; $ce91 codex
=$ce92					C64_LOCATE               = $ce92 ; $ce92 locate
=$ce93					C64_BOOT                 = $ce93 ; $ce93 boot
=$ce94					C64_KEYMAP               = $ce94 ; $ce94 keymap
=$ce95					C64_BLOAD                = $ce95 ; $ce95 bload
=$ce96					C64_BVLOAD               = $ce96 ; $ce96 bvload
=$ce97					C64_BVERIFY              = $ce97 ; $ce97 bverify
=$ce98					C64_BANK                 = $ce98 ; $ce98 bank
=$ce99					C64_FMINIT               = $ce99 ; $ce99 fminit
=$ce9a					C64_FMNOTE               = $ce9a ; $ce9a fmnote
=$ce9b					C64_FMDRUM               = $ce9b ; $ce9b fmdrum
=$ce9c					C64_FMINST               = $ce9c ; $ce9c fminst
=$ce9d					C64_FMVIB                = $ce9d ; $ce9d fmvib
=$ce9e					C64_FMFREQ               = $ce9e ; $ce9e fmfreq
=$ce9f					C64_FMVOL                = $ce9f ; $ce9f fmvol
=$cea0					C64_FMPAN                = $cea0 ; $cea0 fmpan
=$cea1					C64_FMPLAY               = $cea1 ; $cea1 fmplay
=$cea2					C64_FMCHORD              = $cea2 ; $cea2 fmchord
=$cea3					C64_FMPOKE               = $cea3 ; $cea3 fmpoke
=$cea4					C64_PSGINIT              = $cea4 ; $cea4 psginit
=$cea5					C64_PSGNOTE              = $cea5 ; $cea5 psgnote
=$cea6					C64_PSGVOL               = $cea6 ; $cea6 psgvol
=$cea7					C64_PSGWAV               = $cea7 ; $cea7 psgwav
=$cea8					C64_PSGFREQ              = $cea8 ; $cea8 psgfreq
=$cea9					C64_PSGPAN               = $cea9 ; $cea9 psgpan
=$ceaa					C64_PSGPLAY              = $ceaa ; $ceaa psgplay
=$ceab					C64_PSGCHORD             = $ceab ; $ceab psgchord
=$ceac					C64_REBOOT               = $ceac ; $ceac reboot
=$cead					C64_POWEROFF             = $cead ; $cead poweroff
=$ceae					C64_I2CPOKE              = $ceae ; $ceae i2cpoke
=$ceaf					C64_SLEEP                = $ceaf ; $ceaf sleep
=$ceb0					C64_BSAVE                = $ceb0 ; $ceb0 bsave
=$ceb1					C64_MENU                 = $ceb1 ; $ceb1 menu
=$ceb2					C64_REN                  = $ceb2 ; $ceb2 ren
=$ceb3					C64_LINPUT               = $ceb3 ; $ceb3 linput
=$ceb4					C64_LINPUTHASH           = $ceb4 ; $ceb4 linput#
=$ceb5					C64_BINPUTHASH           = $ceb5 ; $ceb5 binput#
=$ceb6					C64_HELP                 = $ceb6 ; $ceb6 help
=$ced0					C64_VPEEK                = $ced0 ; $ced0 vpeek
=$ced1					C64_MX                   = $ced1 ; $ced1 mx
=$ced2					C64_MY                   = $ced2 ; $ced2 my
=$ced3					C64_MB                   = $ced3 ; $ced3 mb
=$ced4					C64_JOY                  = $ced4 ; $ced4 joy
=$ced5					C64_HEXDOLLAR            = $ced5 ; $ced5 hex$
=$ced6					C64_BINDOLLAR            = $ced6 ; $ced6 bin$
=$ced7					C64_I2CPEEK              = $ced7 ; $ced7 i2cpeek
=$ced8					C64_POINTER              = $ced8 ; $ced8 pointer
=$ced9					C64_STRPTR               = $ced9 ; $ced9 strptr
=$ceda					C64_RPTDOLLAR            = $ceda ; $ceda rpt$
=$801					CodeStart = $801
=$22					ZeroPageMandatory = $22
=$400					MemoryStorage = $400
.006a					codePtr:
>006a							.fill 	2
.006c					objPtr:
>006c							.fill 	2
.006e					zTemp0:
>006e							.fill 	2
.0070					zTemp1:
>0070							.fill 	2
.0072					zTemp2:
>0072							.fill 	2
=$80					PCD_STARTBINARY = $80
=$8d					PCD_ENDBINARY = $8d
=$8d					PCD_STARTCOMMAND = $8d
=$ca					PCD_ENDCOMMAND = $ca
=$ca					PCD_STARTSYSTEM = $ca
=$d5					PCD_ENDSYSTEM = $d5
=$80					PCD_PLUS             = $80 ; +
=$81					PCD_MINUS            = $81 ; -
=$82					PCD_TIMES            = $82 ; *
=$83					PCD_DIVIDE           = $83 ; /
=$84					PCD_POWER            = $84 ; ^
=$85					PCD_AND              = $85 ; and
=$86					PCD_OR               = $86 ; or
=$87					PCD_GREATER          = $87 ; >
=$88					PCD_EQUAL            = $88 ; =
=$89					PCD_LESS             = $89 ; <
=$8a					PCD_GREATEREQUAL     = $8a ; >=
=$8b					PCD_LESSGREATER      = $8b ; <>
=$8c					PCD_LESSEQUAL        = $8c ; <=
=$8d					PCD_ABS              = $8d ; abs
=$8e					PCD_ARRAY            = $8e ; array
=$8f					PCD_ASC              = $8f ; asc
=$90					PCD_ASSERT           = $90 ; assert
=$91					PCD_BINDOLLAR        = $91 ; bin$
=$92					PCD_PRINTCMD_CHR     = $92 ; print.chr
=$93					PCD_CHRDOLLAR        = $93 ; chr$
=$94					PCD_SCMD_CMP         = $94 ; s.cmp
=$95					PCD_FOR              = $95 ; for
=$96					PCD_FRE              = $96 ; fre
=$97					PCD_GET              = $97 ; get
=$98					PCD_RETURN           = $98 ; return
=$99					PCD_PSET             = $99 ; pset
=$9a					PCD_LINE             = $9a ; line
=$9b					PCD_RECT             = $9b ; rect
=$9c					PCD_FRAME            = $9c ; frame
=$9d					PCD_CHAR             = $9d ; char
=$9e					PCD_HEXDOLLAR        = $9e ; hex$
=$9f					PCD_INPUT            = $9f ; input
=$a0					PCD_INPUTDOLLAR      = $a0 ; input$
=$a1					PCD_INPUTCMD_START   = $a1 ; input.start
=$a2					PCD_LEN              = $a2 ; len
=$a3					PCD_FCMD_CMP         = $a3 ; f.cmp
=$a4					PCD_INTCMD_DIV       = $a4 ; int.div
=$a5					PCD_NEGATE           = $a5 ; negate
=$a6					PCD_NEWCMD_LINE      = $a6 ; new.line
=$a7					PCD_NEXT             = $a7 ; next
=$a8					PCD_NOT              = $a8 ; not
=$a9					PCD_ON               = $a9 ; on
=$aa					PCD_MOREON           = $aa ; moreon
=$ab					PCD_PEEK             = $ab ; peek
=$ac					PCD_POKE             = $ac ; poke
=$ad					PCD_POS              = $ad ; pos
=$ae					PCD_GETCHANNEL       = $ae ; getchannel
=$af					PCD_SETCHANNEL       = $af ; setchannel
=$b0					PCD_PRINTCMD_N       = $b0 ; print.n
=$b1					PCD_PRINTCMD_S       = $b1 ; print.s
=$b2					PCD_READ             = $b2 ; read
=$b3					PCD_READDOLLAR       = $b3 ; read$
=$b4					PCD_RND              = $b4 ; rnd
=$b5					PCD_CONCAT           = $b5 ; concat
=$b6					PCD_SGN              = $b6 ; sgn
=$b7					PCD_PRINTCMD_TAB     = $b7 ; print.tab
=$b8					PCD_PRINTCMD_POS     = $b8 ; print.pos
=$b9					PCD_PRINTCMD_SPC     = $b9 ; print.spc
=$ba					PCD_STRDOLLAR        = $ba ; str$
=$bb					PCD_LEFTDOLLAR       = $bb ; left$
=$bc					PCD_RIGHTDOLLAR      = $bc ; right$
=$bd					PCD_MIDDOLLAR        = $bd ; mid$
=$be					PCD_SWAP             = $be ; swap
=$bf					PCD_TI               = $bf ; ti
=$c0					PCD_TIDOLLAR         = $c0 ; ti$
=$c1					PCD_USR              = $c1 ; usr
=$c2					PCD_VAL              = $c2 ; val
=$c3					PCD_CLOSE            = $c3 ; close
=$c4					PCD_EXIT             = $c4 ; exit
=$c5					PCD_DEBUG            = $c5 ; debug
=$c6					PCD_OPEN             = $c6 ; open
=$c7					PCD_SCREEN           = $c7 ; screen
=$c8					PCD_VPOKE            = $c8 ; vpoke
=$c9					PCD_VPEEK            = $c9 ; vpeek
=$ca					PCD_CMD_SHIFT        = $ca ; .shift
=$cb					PCD_CMD_BYTE         = $cb ; .byte
=$cc					PCD_CMD_WORD         = $cc ; .word
=$cd					PCD_CMD_FLOAT        = $cd ; .float
=$ce					PCD_CMD_STRING       = $ce ; .string
=$cf					PCD_CMD_DATA         = $cf ; .data
=$d0					PCD_CMD_GOTO         = $d0 ; .goto
=$d1					PCD_CMD_GOSUB        = $d1 ; .gosub
=$d2					PCD_CMD_GOTOCMD_Z    = $d2 ; .goto.z
=$d3					PCD_CMD_GOTOCMD_NZ   = $d3 ; .goto.nz
=$d4					PCD_CMD_VARSPACE     = $d4 ; .varspace
=$ca80					PCD_CLR              = $ca80 ; clr
=$ca81					PCD_DIM              = $ca81 ; dim
=$ca82					PCD_END              = $ca82 ; end
=$ca83					PCD_JOY              = $ca83 ; joy
=$ca84					PCD_INT              = $ca84 ; int
=$ca85					PCD_SQR              = $ca85 ; sqr
=$ca86					PCD_LOG              = $ca86 ; log
=$ca87					PCD_EXP              = $ca87 ; exp
=$ca88					PCD_COS              = $ca88 ; cos
=$ca89					PCD_SIN              = $ca89 ; sin
=$ca8a					PCD_TAN              = $ca8a ; tan
=$ca8b					PCD_ATN              = $ca8b ; atn
=$ca8c					PCD_MOUSE            = $ca8c ; mouse
=$ca8d					PCD_MB               = $ca8d ; mb
=$ca8e					PCD_MX               = $ca8e ; mx
=$ca8f					PCD_MY               = $ca8f ; my
=$ca90					PCD_RESTORE          = $ca90 ; restore
=$ca91					PCD_STOP             = $ca91 ; stop
=$ca92					PCD_SYS              = $ca92 ; sys
=$ca93					PCD_TIDOLLARCMD_WRITE = $ca93 ; ti$.write
=$ca94					PCD_WAIT             = $ca94 ; wait
=$ca95					PCD_I2CPOKE          = $ca95 ; i2cpoke
=$ca96					PCD_I2CPEEK          = $ca96 ; i2cpeek
=$ca97					PCD_BANK             = $ca97 ; bank
=$ca98					PCD_SLEEP            = $ca98 ; sleep
=$ca99					PCD_FMINIT           = $ca99 ; fminit
=$ca9a					PCD_FMNOTE           = $ca9a ; fmnote
=$ca9b					PCD_FMDRUM           = $ca9b ; fmdrum
=$ca9c					PCD_FMINST           = $ca9c ; fminst
=$ca9d					PCD_FMVIB            = $ca9d ; fmvib
=$ca9e					PCD_FMFREQ           = $ca9e ; fmfreq
=$ca9f					PCD_FMVOL            = $ca9f ; fmvol
=$caa0					PCD_FMPAN            = $caa0 ; fmpan
=$caa1					PCD_FMPLAY           = $caa1 ; fmplay
=$caa2					PCD_FMCHORD          = $caa2 ; fmchord
=$caa3					PCD_FMPOKE           = $caa3 ; fmpoke
=$caa4					PCD_PSGINIT          = $caa4 ; psginit
=$caa5					PCD_PSGNOTE          = $caa5 ; psgnote
=$caa6					PCD_PSGVOL           = $caa6 ; psgvol
=$caa7					PCD_PSGWAV           = $caa7 ; psgwav
=$caa8					PCD_PSGFREQ          = $caa8 ; psgfreq
=$caa9					PCD_PSGPAN           = $caa9 ; psgpan
=$caaa					PCD_PSGPLAY          = $caaa ; psgplay
=$caab					PCD_PSGCHORD         = $caab ; psgchord
=$caac					PCD_CLS              = $caac ; cls
=$caad					PCD_LOCATE           = $caad ; locate
=$caae					PCD_COLOR            = $caae ; color
.51e7					SetErrorHandler:
.51e7	8c 4a 04	sty $044a			sty 	ErrorHandlerVector+1
.51ea	8e 49 04	stx $0449			stx 	ErrorHandlerVector
.51ed	60		rts				rts
.51ee					CallErrorHandler:
.51ee	6c 49 04	jmp ($0449)			jmp 	(ErrorHandlerVector)
.0449					ErrorHandlerVector:
>0449							.fill 	2
.51f1					ErrorV_range:
.51f1	20 ee 51	jsr $51ee		jsr	CallErrorHandler
>51f4	4f 55 54 20 4f 46 20 52			.text	"OUT OF RANGE",0
>51fc	41 4e 47 45 00
.5201					ErrorV_value:
.5201	20 ee 51	jsr $51ee		jsr	CallErrorHandler
>5204	42 41 44 20 56 41 4c 55			.text	"BAD VALUE",0
>520c	45 00
.520e					ErrorV_syntax:
.520e	20 ee 51	jsr $51ee		jsr	CallErrorHandler
>5211	53 59 4e 54 41 58 20 45			.text	"SYNTAX ERROR",0
>5219	52 52 4f 52 00
.521e					ErrorV_type:
.521e	20 ee 51	jsr $51ee		jsr	CallErrorHandler
>5221	54 59 50 45 20 4d 49 53			.text	"TYPE MISMATCH",0
>5229	4d 41 54 43 48 00
.522f					ErrorV_unimplemented:
.522f	20 ee 51	jsr $51ee		jsr	CallErrorHandler
>5232	4e 4f 54 20 49 4d 50 4c			.text	"NOT IMPLEMENTED",0
>523a	45 4d 45 4e 54 45 44 00
.5242					ErrorV_assert:
.5242	20 ee 51	jsr $51ee		jsr	CallErrorHandler
>5245	41 53 53 45 52 54 20 46			.text	"ASSERT FAIL",0
>524d	41 49 4c 00
.5251					ErrorV_line:
.5251	20 ee 51	jsr $51ee		jsr	CallErrorHandler
>5254	55 4e 4b 4e 4f 57 4e 20			.text	"UNKNOWN LINE NUMBER",0
>525c	4c 49 4e 45 20 4e 55 4d 42 45 52 00
.5268					ErrorV_internal:
.5268	20 ee 51	jsr $51ee		jsr	CallErrorHandler
>526b	49 4e 54 45 52 4e 41 4c			.text	"INTERNAL ERROR",0
>5273	20 45 52 52 4f 52 00
.527a					ErrorV_divzero:
.527a	20 ee 51	jsr $51ee		jsr	CallErrorHandler
>527d	44 49 56 49 44 45 20 42			.text	"DIVIDE BY ZERO",0
>5285	59 20 5a 45 52 4f 00
.528c					ErrorV_structure:
.528c	20 ee 51	jsr $51ee		jsr	CallErrorHandler
>528f	53 54 52 55 43 54 55 52			.text	"STRUCTURE IMBALANCE",0
>5297	45 20 49 4d 42 41 4c 41 4e 43 45 00
.52a3					ErrorV_stop:
.52a3	20 ee 51	jsr $51ee		jsr	CallErrorHandler
>52a6	50 52 4f 47 52 41 4d 20			.text	"PROGRAM STOPPED",0
>52ae	53 54 4f 50 50 45 44 00
.52b6					ErrorV_data:
.52b6	20 ee 51	jsr $51ee		jsr	CallErrorHandler
>52b9	4f 55 54 20 4f 46 20 44			.text	"OUT OF DATA",0
>52c1	41 54 41 00
.52c5					ErrorV_undeclared:
.52c5	20 ee 51	jsr $51ee		jsr	CallErrorHandler
>52c8	55 4e 4b 4e 4f 57 4e 20			.text	"UNKNOWN ARRAY",0
>52d0	41 52 52 41 59 00
.52d6					ErrorV_redefine:
.52d6	20 ee 51	jsr $51ee		jsr	CallErrorHandler
>52d9	41 52 52 41 59 20 52 45			.text	"ARRAY REDEFINED",0
>52e1	44 45 46 49 4e 45 44 00
.52e9					ErrorV_index:
.52e9	20 ee 51	jsr $51ee		jsr	CallErrorHandler
>52ec	42 41 44 20 41 52 52 41			.text	"BAD ARRAY INDEX",0
>52f4	59 20 49 4e 44 45 58 00
.52fc					ErrorV_memory:
.52fc	20 ee 51	jsr $51ee		jsr	CallErrorHandler
>52ff	4f 55 54 20 4f 46 20 4d			.text	"OUT OF MEMORY",0
>5307	45 4d 4f 52 59 00
.530d					ErrorV_channel:
.530d	20 ee 51	jsr $51ee		jsr	CallErrorHandler
>5310	49 4e 50 55 54 2f 4f 55			.text	"INPUT/OUTPUT ERROR",0
>5318	54 50 55 54 20 45 52 52 4f 52 00
.5323					MoveObjectForward:
.5323	b2 6c		lda ($6c)			lda 	(objPtr) 					; get next
.5325	c9 ff		cmp #$ff			cmp 	#$FF
.5327	f0 36		beq $535f			beq 	_MOFEnd
.5329	c9 40		cmp #$40			cmp 	#$40 						; 00-3F
.532b	90 24		bcc $5351			bcc 	_MOFAdvance1 				; forward 1
.532d	a0 02		ldy #$02			ldy 	#2 							; 40-6F
.532f	c9 70		cmp #$70			cmp 	#$70 						; forward 2
.5331	90 20		bcc $5353			bcc 	_MOFAdvanceY
.5333	c9 ca		cmp #$ca			cmp 	#PCD_STARTSYSTEM 			; 70 - System tokens.
.5335	90 1a		bcc $5351			bcc 	_MOFAdvance1 				; forward 1
.5337	a8		tay				tay 								; read the size.
.5338	b9 9d 52	lda $529d,y			lda 	MOFSizeTable-PCD_STARTSYSTEM,y
.533b	a8		tay				tay
.533c	c8		iny				iny 								; add 1 for the system token.
.533d	d0 14		bne $5353			bne 	_MOFAdvanceY 				; if 0, was $FF thus a string/data skip.
.533f	a0 01		ldy #$01			ldy 	#1 							; get length byte
.5341	b1 6c		lda ($6c),y			lda 	(objPtr),y
.5343	a8		tay				tay 								; into Y.
.5344	18		clc				clc
.5345	a5 6c		lda $6c				lda 	objPtr						; add 2 to the object pointer
.5347	69 02		adc #$02			adc 	#2
.5349	85 6c		sta $6c				sta 	objPtr
.534b	90 02		bcc $534f			bcc 	_MOFNoCarry1
.534d	e6 6d		inc $6d				inc 	objPtr+1
.534f					_MOFNoCarry1:
.534f	80 02		bra $5353			bra 	_MOFAdvanceY
.5351					_MOFAdvance1:
.5351	a0 01		ldy #$01			ldy 	#1
.5353					_MOFAdvanceY:
.5353	98		tya				tya 								; add Y to objPtr
.5354	18		clc				clc
.5355	65 6c		adc $6c				adc 	objPtr
.5357	85 6c		sta $6c				sta 	objPtr
.5359	90 02		bcc $535d			bcc 	_MOFNoCarry2
.535b	e6 6d		inc $6d				inc 	objPtr+1
.535d					_MOFNoCarry2:
.535d	18		clc				clc 								; not completed.
.535e	60		rts				rts
.535f					_MOFEnd:
.535f	e6 6c		inc $6c				inc 	objPtr
.5361	d0 02		bne $5365			bne 	_MOFENoCarry
.5363	e6 6d		inc $6d				inc 	objPtr+1
.5365					_MOFENoCarry:
.5365	38		sec				sec
.5366	60		rts				rts
.5367					MOFSizeTable:
>5367	01					.byte	1         	; $ca .shift
>5368	01					.byte	1         	; $cb .byte
>5369	02					.byte	2         	; $cc .word
>536a	05					.byte	5         	; $cd .float
>536b	ff					.byte	255       	; $ce .string
>536c	ff					.byte	255       	; $cf .data
>536d	02					.byte	2         	; $d0 .goto
>536e	02					.byte	2         	; $d1 .gosub
>536f	02					.byte	2         	; $d2 .goto.z
>5370	02					.byte	2         	; $d3 .goto.nz
>5371	02					.byte	2         	; $d4 .varspace

;******  End of listing
