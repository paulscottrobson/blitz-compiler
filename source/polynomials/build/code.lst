
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass -c -Wall -o build/code.prg -L build/code.lst -l build/code.lbl /home/paulr/Projects/blitz-compiler/documents/../source/common-source/wrapper.asm testing/testing.asm /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library /home/paulr/Projects/blitz-compiler/documents/../bin/polynomials.library
; Thu Oct  5 08:23:26 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../source/common-source/wrapper.asm

=$1000					CodeStart = $1000
=$22					ZeroPageMandatory = $22
=$400					MemoryStorage = $400
.1000	a2 ff		ldx #$ff			ldx 	#$FF
.1002	9a		txs				txs
.1003	4c 06 10	jmp $1006			jmp 	WrapperBoot
.0022					codePtr:
>0022							.fill 	2
.0024					codePage:
>0024							.fill 	1
.0025					objPtr:
>0025							.fill 	2
.0027					objPage:
>0027							.fill 	1
.0028					zTemp0:
>0028							.fill 	2
.002a					zTemp1:
>002a							.fill 	2
.002c					zTemp2:
>002c							.fill 	2

;******  Processing input file: testing/testing.asm

.1006					WrapperBoot:
.1006	a2 ff		ldx #$ff			ldx 	#255
.1008	20 11 10	jsr $1011			jsr 	TestScript
.100b	86 28		stx $28				stx 	zTemp0
.100d	4c ff ff	jmp $ffff			jmp 	$FFFF
.1010					ErrorHandler:
>1010	db						.byte 	$DB 						; causes a break in the emulator
.1011					TestScript:

;******  Processing file: testing/generated/testcode.dat

.1011	20 5a 50	jsr $505a		jsr	FPPushConstant	; -5.36130234
>1014	f6 e4 c7 55				.dword	$55c7e4f6
>1018	e4 80					.byte	$e4,$80
.101a	20 31 56	jsr $5631		jsr	FloatNegate
.101d	20 5a 50	jsr $505a		jsr	FPPushConstant	; 5.36130234
>1020	f6 e4 c7 55				.dword	$55c7e4f6
>1024	e4 00					.byte	$e4,$00
.1026	20 54 51	jsr $5154		jsr	FloatCompare
.1029	20 1e 51	jsr $511e		jsr	CompareEqual
.102c	20 4a 50	jsr $504a		jsr	FPAssertCheck
.102f	20 5a 50	jsr $505a		jsr	FPPushConstant	; -5.36130234
>1032	f6 e4 c7 55				.dword	$55c7e4f6
>1036	e4 80					.byte	$e4,$80
.1038	20 aa 52	jsr $52aa		jsr	FloatIntegerPart
.103b	20 5a 50	jsr $505a		jsr	FPPushConstant	; -5
>103e	05 00 00 00				.dword	$00000005
>1042	00 80					.byte	$00,$80
.1044	20 54 51	jsr $5154		jsr	FloatCompare
.1047	20 1e 51	jsr $511e		jsr	CompareEqual
.104a	20 4a 50	jsr $504a		jsr	FPAssertCheck
.104d	20 5a 50	jsr $505a		jsr	FPPushConstant	; -10.92
>1050	f6 28 5c 57				.dword	$575c28f6
>1054	e5 80					.byte	$e5,$80
.1056	20 55 59	jsr $5955		jsr	FloatSine
.1059	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.99714562
>105c	ba 77 a2 7f				.dword	$7fa277ba
>1060	e1 00					.byte	$e1,$00
.1062	20 8d 50	jsr $508d		jsr	FloatSubtract
.1065	20 57 50	jsr $5057		jsr	FPAbs
.1068	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>106b	4c 37 89 41				.dword	$4189374c
>106f	d8 00					.byte	$d8,$00
.1071	20 54 51	jsr $5154		jsr	FloatCompare
.1074	20 34 51	jsr $5134		jsr	CompareLess
.1077	20 4a 50	jsr $504a		jsr	FPAssertCheck
.107a	20 5a 50	jsr $505a		jsr	FPPushConstant	; -10.92
>107d	f6 28 5c 57				.dword	$575c28f6
>1081	e5 80					.byte	$e5,$80
.1083	20 b5 57	jsr $57b5		jsr	FloatCosine
.1086	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.07550237
>1089	48 7e 50 4d				.dword	$4d507e48
>108d	de 80					.byte	$de,$80
.108f	20 8d 50	jsr $508d		jsr	FloatSubtract
.1092	20 57 50	jsr $5057		jsr	FPAbs
.1095	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>1098	4c 37 89 41				.dword	$4189374c
>109c	d8 00					.byte	$d8,$00
.109e	20 54 51	jsr $5154		jsr	FloatCompare
.10a1	20 34 51	jsr $5134		jsr	CompareLess
.10a4	20 4a 50	jsr $504a		jsr	FPAssertCheck
.10a7	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.32
>10aa	1f 85 eb 51				.dword	$51eb851f
>10ae	e0 00					.byte	$e0,$00
.10b0	20 c6 59	jsr $59c6		jsr	FloatTangent
.10b3	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.33138941
>10b6	b6 ef d5 54				.dword	$54d5efb6
>10ba	e0 00					.byte	$e0,$00
.10bc	20 8d 50	jsr $508d		jsr	FloatSubtract
.10bf	20 57 50	jsr $5057		jsr	FPAbs
.10c2	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>10c5	4c 37 89 41				.dword	$4189374c
>10c9	d8 00					.byte	$d8,$00
.10cb	20 54 51	jsr $5154		jsr	FloatCompare
.10ce	20 4a 50	jsr $504a		jsr	FPAssertCheck
.10d1	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.155
>10d4	f6 28 5c 4f				.dword	$4f5c28f6
>10d8	df 00					.byte	$df,$00
.10da	20 9a 56	jsr $569a		jsr	FloatArcTan
.10dd	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.1537763
>10e0	67 c4 bb 4e				.dword	$4ebbc467
>10e4	df 00					.byte	$df,$00
.10e6	20 8d 50	jsr $508d		jsr	FloatSubtract
.10e9	20 57 50	jsr $5057		jsr	FPAbs
.10ec	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>10ef	4c 37 89 41				.dword	$4189374c
>10f3	d8 00					.byte	$d8,$00
.10f5	20 54 51	jsr $5154		jsr	FloatCompare
.10f8	20 4a 50	jsr $504a		jsr	FPAssertCheck
.10fb	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.45
>10fe	33 33 33 73				.dword	$73333333
>1102	e0 80					.byte	$e0,$80
.1104	20 c1 57	jsr $57c1		jsr	FloatExponent
.1107	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.63762815
>110a	9a cc 9d 51				.dword	$519dcc9a
>110e	e1 00					.byte	$e1,$00
.1110	20 8d 50	jsr $508d		jsr	FloatSubtract
.1113	20 57 50	jsr $5057		jsr	FPAbs
.1116	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>1119	4c 37 89 41				.dword	$4189374c
>111d	d8 00					.byte	$d8,$00
.111f	20 54 51	jsr $5154		jsr	FloatCompare
.1122	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1125	20 5a 50	jsr $505a		jsr	FPPushConstant	; 55.85
>1128	33 33 b3 6f				.dword	$6fb33333
>112c	e7 00					.byte	$e7,$00
.112e	20 c4 58	jsr $58c4		jsr	FloatLogarithm
.1131	20 5a 50	jsr $505a		jsr	FPPushConstant	; 4.02266953
>1134	ba da 5c 40				.dword	$405cdaba
>1138	e4 00					.byte	$e4,$00
.113a	20 8d 50	jsr $508d		jsr	FloatSubtract
.113d	20 57 50	jsr $5057		jsr	FPAbs
.1140	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>1143	4c 37 89 41				.dword	$4189374c
>1147	d8 00					.byte	$d8,$00
.1149	20 54 51	jsr $5154		jsr	FloatCompare
.114c	20 4a 50	jsr $504a		jsr	FPAssertCheck
.114f	20 5a 50	jsr $505a		jsr	FPPushConstant	; 91.28
>1152	14 ae 47 5b				.dword	$5b47ae14
>1156	e8 00					.byte	$e8,$00
.1158	20 ba 59	jsr $59ba		jsr	FloatSquareRoot
.115b	20 5a 50	jsr $505a		jsr	FPPushConstant	; 9.55405673
>115e	4b b5 6e 4c				.dword	$4c6eb54b
>1162	e5 00					.byte	$e5,$00
.1164	20 8d 50	jsr $508d		jsr	FloatSubtract
.1167	20 57 50	jsr $5057		jsr	FPAbs
.116a	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>116d	4c 37 89 41				.dword	$4189374c
>1171	d8 00					.byte	$d8,$00
.1173	20 54 51	jsr $5154		jsr	FloatCompare
.1176	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1179	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.93333333
>117c	b8 bb bb 7b				.dword	$7bbbbbb8
>1180	e2 00					.byte	$e2,$00
.1182	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.9
>1185	9a 99 99 79				.dword	$7999999a
>1189	e2 00					.byte	$e2,$00
.118b	20 38 59	jsr $5938		jsr	FloatPower
.118e	20 5a 50	jsr $505a		jsr	FPPushConstant	; 3.49931311
>1191	7d 5f fa 6f				.dword	$6ffa5f7d
>1195	e3 00					.byte	$e3,$00
.1197	20 8d 50	jsr $508d		jsr	FloatSubtract
.119a	20 57 50	jsr $5057		jsr	FPAbs
.119d	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.01
>11a0	1f 85 eb 51				.dword	$51eb851f
>11a4	db 00					.byte	$db,$00
.11a6	20 54 51	jsr $5154		jsr	FloatCompare
.11a9	20 4a 50	jsr $504a		jsr	FPAssertCheck
.11ac	20 5a 50	jsr $505a		jsr	FPPushConstant	; -32.99141492
>11af	bd 9a fb 41				.dword	$41fb9abd
>11b3	e7 80					.byte	$e7,$80
.11b5	20 31 56	jsr $5631		jsr	FloatNegate
.11b8	20 5a 50	jsr $505a		jsr	FPPushConstant	; 32.99141492
>11bb	bd 9a fb 41				.dword	$41fb9abd
>11bf	e7 00					.byte	$e7,$00
.11c1	20 54 51	jsr $5154		jsr	FloatCompare
.11c4	20 1e 51	jsr $511e		jsr	CompareEqual
.11c7	20 4a 50	jsr $504a		jsr	FPAssertCheck
.11ca	20 5a 50	jsr $505a		jsr	FPPushConstant	; -32.99141492
>11cd	bd 9a fb 41				.dword	$41fb9abd
>11d1	e7 80					.byte	$e7,$80
.11d3	20 aa 52	jsr $52aa		jsr	FloatIntegerPart
.11d6	20 5a 50	jsr $505a		jsr	FPPushConstant	; -32
>11d9	20 00 00 00				.dword	$00000020
>11dd	00 80					.byte	$00,$80
.11df	20 54 51	jsr $5154		jsr	FloatCompare
.11e2	20 1e 51	jsr $511e		jsr	CompareEqual
.11e5	20 4a 50	jsr $504a		jsr	FPAssertCheck
.11e8	20 5a 50	jsr $505a		jsr	FPPushConstant	; 11.21
>11eb	7b 14 ae 59				.dword	$59ae147b
>11ef	e5 00					.byte	$e5,$00
.11f1	20 55 59	jsr $5955		jsr	FloatSine
.11f4	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.97709876
>11f7	7a 92 11 7d				.dword	$7d11927a
>11fb	e1 80					.byte	$e1,$80
.11fd	20 8d 50	jsr $508d		jsr	FloatSubtract
.1200	20 57 50	jsr $5057		jsr	FPAbs
.1203	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>1206	4c 37 89 41				.dword	$4189374c
>120a	d8 00					.byte	$d8,$00
.120c	20 54 51	jsr $5154		jsr	FloatCompare
.120f	20 34 51	jsr $5134		jsr	CompareLess
.1212	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1215	20 5a 50	jsr $505a		jsr	FPPushConstant	; 11.21
>1218	7b 14 ae 59				.dword	$59ae147b
>121c	e5 00					.byte	$e5,$00
.121e	20 b5 57	jsr $57b5		jsr	FloatCosine
.1221	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.21278633
>1224	71 54 f2 6c				.dword	$6cf25471
>1228	df 00					.byte	$df,$00
.122a	20 8d 50	jsr $508d		jsr	FloatSubtract
.122d	20 57 50	jsr $5057		jsr	FPAbs
.1230	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>1233	4c 37 89 41				.dword	$4189374c
>1237	d8 00					.byte	$d8,$00
.1239	20 54 51	jsr $5154		jsr	FloatCompare
.123c	20 34 51	jsr $5134		jsr	CompareLess
.123f	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1242	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.37
>1245	ec 51 b8 5e				.dword	$5eb851ec
>1249	e0 00					.byte	$e0,$00
.124b	20 c6 59	jsr $59c6		jsr	FloatTangent
.124e	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.38786316
>1251	04 00 4b 63				.dword	$634b0004
>1255	e0 00					.byte	$e0,$00
.1257	20 8d 50	jsr $508d		jsr	FloatSubtract
.125a	20 57 50	jsr $5057		jsr	FPAbs
.125d	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>1260	4c 37 89 41				.dword	$4189374c
>1264	d8 00					.byte	$d8,$00
.1266	20 54 51	jsr $5154		jsr	FloatCompare
.1269	20 4a 50	jsr $504a		jsr	FPAssertCheck
.126c	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.235
>126f	85 eb 51 78				.dword	$7851eb85
>1273	df 00					.byte	$df,$00
.1275	20 9a 56	jsr $569a		jsr	FloatArcTan
.1278	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.23081196
>127b	37 fc 2c 76				.dword	$762cfc37
>127f	df 00					.byte	$df,$00
.1281	20 8d 50	jsr $508d		jsr	FloatSubtract
.1284	20 57 50	jsr $5057		jsr	FPAbs
.1287	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>128a	4c 37 89 41				.dword	$4189374c
>128e	d8 00					.byte	$d8,$00
.1290	20 54 51	jsr $5154		jsr	FloatCompare
.1293	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1296	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.06
>1299	ae 47 e1 7a				.dword	$7ae147ae
>129d	dd 80					.byte	$dd,$80
.129f	20 c1 57	jsr $57c1		jsr	FloatExponent
.12a2	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.94176453
>12a5	78 bd 8b 78				.dword	$788bbd78
>12a9	e1 00					.byte	$e1,$00
.12ab	20 8d 50	jsr $508d		jsr	FloatSubtract
.12ae	20 57 50	jsr $5057		jsr	FPAbs
.12b1	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>12b4	4c 37 89 41				.dword	$4189374c
>12b8	d8 00					.byte	$d8,$00
.12ba	20 54 51	jsr $5154		jsr	FloatCompare
.12bd	20 4a 50	jsr $504a		jsr	FPAssertCheck
.12c0	20 5a 50	jsr $505a		jsr	FPPushConstant	; 73.93
>12c3	7b 14 ee 49				.dword	$49ee147b
>12c7	e8 00					.byte	$e8,$00
.12c9	20 c4 58	jsr $58c4		jsr	FloatLogarithm
.12cc	20 5a 50	jsr $505a		jsr	FPPushConstant	; 4.3031187
>12cf	fe 92 d9 44				.dword	$44d992fe
>12d3	e4 00					.byte	$e4,$00
.12d5	20 8d 50	jsr $508d		jsr	FloatSubtract
.12d8	20 57 50	jsr $5057		jsr	FPAbs
.12db	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>12de	4c 37 89 41				.dword	$4189374c
>12e2	d8 00					.byte	$d8,$00
.12e4	20 54 51	jsr $5154		jsr	FloatCompare
.12e7	20 4a 50	jsr $504a		jsr	FPAssertCheck
.12ea	20 5a 50	jsr $505a		jsr	FPPushConstant	; 62.2
>12ed	66 66 66 7c				.dword	$7c666666
>12f1	e7 00					.byte	$e7,$00
.12f3	20 ba 59	jsr $59ba		jsr	FloatSquareRoot
.12f6	20 5a 50	jsr $505a		jsr	FPPushConstant	; 7.88669766
>12f9	e3 e9 2f 7e				.dword	$7e2fe9e3
>12fd	e4 00					.byte	$e4,$00
.12ff	20 8d 50	jsr $508d		jsr	FloatSubtract
.1302	20 57 50	jsr $5057		jsr	FPAbs
.1305	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>1308	4c 37 89 41				.dword	$4189374c
>130c	d8 00					.byte	$d8,$00
.130e	20 54 51	jsr $5154		jsr	FloatCompare
.1311	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1314	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.02666667
>1317	1f e8 b4 41				.dword	$41b4e81f
>131b	e2 00					.byte	$e2,$00
.131d	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.9
>1320	33 33 33 73				.dword	$73333333
>1324	e1 00					.byte	$e1,$00
.1326	20 38 59	jsr $5938		jsr	FloatPower
.1329	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.02396831
>132c	61 b2 88 41				.dword	$4188b261
>1330	e2 00					.byte	$e2,$00
.1332	20 8d 50	jsr $508d		jsr	FloatSubtract
.1335	20 57 50	jsr $5057		jsr	FPAbs
.1338	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.01
>133b	1f 85 eb 51				.dword	$51eb851f
>133f	db 00					.byte	$db,$00
.1341	20 54 51	jsr $5154		jsr	FloatCompare
.1344	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1347	20 5a 50	jsr $505a		jsr	FPPushConstant	; -28.8925245
>134a	f1 f1 91 73				.dword	$7391f1f1
>134e	e6 80					.byte	$e6,$80
.1350	20 31 56	jsr $5631		jsr	FloatNegate
.1353	20 5a 50	jsr $505a		jsr	FPPushConstant	; 28.8925245
>1356	f1 f1 91 73				.dword	$7391f1f1
>135a	e6 00					.byte	$e6,$00
.135c	20 54 51	jsr $5154		jsr	FloatCompare
.135f	20 1e 51	jsr $511e		jsr	CompareEqual
.1362	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1365	20 5a 50	jsr $505a		jsr	FPPushConstant	; -28.8925245
>1368	f1 f1 91 73				.dword	$7391f1f1
>136c	e6 80					.byte	$e6,$80
.136e	20 aa 52	jsr $52aa		jsr	FloatIntegerPart
.1371	20 5a 50	jsr $505a		jsr	FPPushConstant	; -28
>1374	1c 00 00 00				.dword	$0000001c
>1378	00 80					.byte	$00,$80
.137a	20 54 51	jsr $5154		jsr	FloatCompare
.137d	20 1e 51	jsr $511e		jsr	CompareEqual
.1380	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1383	20 5a 50	jsr $505a		jsr	FPPushConstant	; 16.11
>1386	d7 a3 70 40				.dword	$4070a3d7
>138a	e6 00					.byte	$e6,$00
.138c	20 55 59	jsr $5955		jsr	FloatSine
.138f	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.39129349
>1392	67 cf 2b 64				.dword	$642bcf67
>1396	e0 80					.byte	$e0,$80
.1398	20 8d 50	jsr $508d		jsr	FloatSubtract
.139b	20 57 50	jsr $5057		jsr	FPAbs
.139e	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>13a1	4c 37 89 41				.dword	$4189374c
>13a5	d8 00					.byte	$d8,$00
.13a7	20 54 51	jsr $5154		jsr	FloatCompare
.13aa	20 34 51	jsr $5134		jsr	CompareLess
.13ad	20 4a 50	jsr $504a		jsr	FPAssertCheck
.13b0	20 5a 50	jsr $505a		jsr	FPPushConstant	; 16.11
>13b3	d7 a3 70 40				.dword	$4070a3d7
>13b7	e6 00					.byte	$e6,$00
.13b9	20 b5 57	jsr $57b5		jsr	FloatCosine
.13bc	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.92026594
>13bf	3a 46 cb 75				.dword	$75cb463a
>13c3	e1 80					.byte	$e1,$80
.13c5	20 8d 50	jsr $508d		jsr	FloatSubtract
.13c8	20 57 50	jsr $5057		jsr	FPAbs
.13cb	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>13ce	4c 37 89 41				.dword	$4189374c
>13d2	d8 00					.byte	$d8,$00
.13d4	20 54 51	jsr $5154		jsr	FloatCompare
.13d7	20 34 51	jsr $5134		jsr	CompareLess
.13da	20 4a 50	jsr $504a		jsr	FPAssertCheck
.13dd	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.21
>13e0	b8 1e 85 6b				.dword	$6b851eb8
>13e4	df 00					.byte	$df,$00
.13e6	20 c6 59	jsr $59c6		jsr	FloatTangent
.13e9	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.21314244
>13ec	82 01 21 6d				.dword	$6d210182
>13f0	df 00					.byte	$df,$00
.13f2	20 8d 50	jsr $508d		jsr	FloatSubtract
.13f5	20 57 50	jsr $5057		jsr	FPAbs
.13f8	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>13fb	4c 37 89 41				.dword	$4189374c
>13ff	d8 00					.byte	$d8,$00
.1401	20 54 51	jsr $5154		jsr	FloatCompare
.1404	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1407	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.537
>140a	3f 35 5e 62				.dword	$625e353f
>140e	e2 00					.byte	$e2,$00
.1410	20 9a 56	jsr $569a		jsr	FloatArcTan
.1413	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.99398672
>1416	f4 f4 3a 7f				.dword	$7f3af4f4
>141a	e1 00					.byte	$e1,$00
.141c	20 8d 50	jsr $508d		jsr	FloatSubtract
.141f	20 57 50	jsr $5057		jsr	FPAbs
.1422	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>1425	4c 37 89 41				.dword	$4189374c
>1429	d8 00					.byte	$d8,$00
.142b	20 54 51	jsr $5154		jsr	FloatCompare
.142e	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1431	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.04
>1434	29 5c 8f 42				.dword	$428f5c29
>1438	e2 00					.byte	$e2,$00
.143a	20 c1 57	jsr $57c1		jsr	FloatExponent
.143d	20 5a 50	jsr $505a		jsr	FPPushConstant	; 2.82921701
>1440	1c f2 88 5a				.dword	$5a88f21c
>1444	e3 00					.byte	$e3,$00
.1446	20 8d 50	jsr $508d		jsr	FloatSubtract
.1449	20 57 50	jsr $5057		jsr	FPAbs
.144c	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>144f	4c 37 89 41				.dword	$4189374c
>1453	d8 00					.byte	$d8,$00
.1455	20 54 51	jsr $5154		jsr	FloatCompare
.1458	20 4a 50	jsr $504a		jsr	FPAssertCheck
.145b	20 5a 50	jsr $505a		jsr	FPPushConstant	; 54.25
>145e	00 00 80 6c				.dword	$6c800000
>1462	e7 00					.byte	$e7,$00
.1464	20 c4 58	jsr $58c4		jsr	FloatLogarithm
.1467	20 5a 50	jsr $505a		jsr	FPPushConstant	; 3.99360299
>146a	7f 98 cb 7f				.dword	$7fcb987f
>146e	e3 00					.byte	$e3,$00
.1470	20 8d 50	jsr $508d		jsr	FloatSubtract
.1473	20 57 50	jsr $5057		jsr	FPAbs
.1476	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>1479	4c 37 89 41				.dword	$4189374c
>147d	d8 00					.byte	$d8,$00
.147f	20 54 51	jsr $5154		jsr	FloatCompare
.1482	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1485	20 5a 50	jsr $505a		jsr	FPPushConstant	; 26.82
>1488	14 ae 47 6b				.dword	$6b47ae14
>148c	e6 00					.byte	$e6,$00
.148e	20 ba 59	jsr $59ba		jsr	FloatSquareRoot
.1491	20 5a 50	jsr $505a		jsr	FPPushConstant	; 5.17880295
>1494	7b 60 dc 52				.dword	$52dc607b
>1498	e4 00					.byte	$e4,$00
.149a	20 8d 50	jsr $508d		jsr	FloatSubtract
.149d	20 57 50	jsr $5057		jsr	FPAbs
.14a0	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>14a3	4c 37 89 41				.dword	$4189374c
>14a7	d8 00					.byte	$d8,$00
.14a9	20 54 51	jsr $5154		jsr	FloatCompare
.14ac	20 4a 50	jsr $504a		jsr	FPAssertCheck
.14af	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.73
>14b2	ec 51 b8 6e				.dword	$6eb851ec
>14b6	e2 00					.byte	$e2,$00
.14b8	20 5a 50	jsr $505a		jsr	FPPushConstant	; 2.0
>14bb	02 00 00 00				.dword	$00000002
>14bf	00 00					.byte	$00,$00
.14c1	20 38 59	jsr $5938		jsr	FloatPower
.14c4	20 5a 50	jsr $505a		jsr	FPPushConstant	; 2.9929
>14c7	39 d6 c5 5f				.dword	$5fc5d639
>14cb	e3 00					.byte	$e3,$00
.14cd	20 8d 50	jsr $508d		jsr	FloatSubtract
.14d0	20 57 50	jsr $5057		jsr	FPAbs
.14d3	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.01
>14d6	1f 85 eb 51				.dword	$51eb851f
>14da	db 00					.byte	$db,$00
.14dc	20 54 51	jsr $5154		jsr	FloatCompare
.14df	20 4a 50	jsr $504a		jsr	FPAssertCheck
.14e2	20 5a 50	jsr $505a		jsr	FPPushConstant	; 72.42512351
>14e5	e5 d4 6c 48				.dword	$486cd4e5
>14e9	e8 00					.byte	$e8,$00
.14eb	20 31 56	jsr $5631		jsr	FloatNegate
.14ee	20 5a 50	jsr $505a		jsr	FPPushConstant	; -72.42512351
>14f1	e5 d4 6c 48				.dword	$486cd4e5
>14f5	e8 80					.byte	$e8,$80
.14f7	20 54 51	jsr $5154		jsr	FloatCompare
.14fa	20 1e 51	jsr $511e		jsr	CompareEqual
.14fd	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1500	20 5a 50	jsr $505a		jsr	FPPushConstant	; 72.42512351
>1503	e5 d4 6c 48				.dword	$486cd4e5
>1507	e8 00					.byte	$e8,$00
.1509	20 aa 52	jsr $52aa		jsr	FloatIntegerPart
.150c	20 5a 50	jsr $505a		jsr	FPPushConstant	; 72
>150f	48 00 00 00				.dword	$00000048
>1513	00 00					.byte	$00,$00
.1515	20 54 51	jsr $5154		jsr	FloatCompare
.1518	20 1e 51	jsr $511e		jsr	CompareEqual
.151b	20 4a 50	jsr $504a		jsr	FPAssertCheck
.151e	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.43
>1521	e1 7a 14 6e				.dword	$6e147ae1
>1525	e0 80					.byte	$e0,$80
.1527	20 55 59	jsr $5955		jsr	FloatSine
.152a	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.4168708
>152d	75 0b b8 6a				.dword	$6ab80b75
>1531	e0 80					.byte	$e0,$80
.1533	20 8d 50	jsr $508d		jsr	FloatSubtract
.1536	20 57 50	jsr $5057		jsr	FPAbs
.1539	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>153c	4c 37 89 41				.dword	$4189374c
>1540	d8 00					.byte	$d8,$00
.1542	20 54 51	jsr $5154		jsr	FloatCompare
.1545	20 34 51	jsr $5134		jsr	CompareLess
.1548	20 4a 50	jsr $504a		jsr	FPAssertCheck
.154b	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.43
>154e	e1 7a 14 6e				.dword	$6e147ae1
>1552	e0 80					.byte	$e0,$80
.1554	20 b5 57	jsr $57b5		jsr	FloatCosine
.1557	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.90896575
>155a	5d fd 58 74				.dword	$7458fd5d
>155e	e1 00					.byte	$e1,$00
.1560	20 8d 50	jsr $508d		jsr	FloatSubtract
.1563	20 57 50	jsr $5057		jsr	FPAbs
.1566	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>1569	4c 37 89 41				.dword	$4189374c
>156d	d8 00					.byte	$d8,$00
.156f	20 54 51	jsr $5154		jsr	FloatCompare
.1572	20 34 51	jsr $5134		jsr	CompareLess
.1575	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1578	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.35
>157b	9a 99 99 59				.dword	$5999999a
>157f	e0 00					.byte	$e0,$00
.1581	20 c6 59	jsr $59c6		jsr	FloatTangent
.1584	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.36502849
>1587	d3 81 72 5d				.dword	$5d7281d3
>158b	e0 00					.byte	$e0,$00
.158d	20 8d 50	jsr $508d		jsr	FloatSubtract
.1590	20 57 50	jsr $5057		jsr	FPAbs
.1593	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>1596	4c 37 89 41				.dword	$4189374c
>159a	d8 00					.byte	$d8,$00
.159c	20 54 51	jsr $5154		jsr	FloatCompare
.159f	20 4a 50	jsr $504a		jsr	FPAssertCheck
.15a2	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.335
>15a5	5c 8f c2 55				.dword	$55c28f5c
>15a9	e0 00					.byte	$e0,$00
.15ab	20 9a 56	jsr $569a		jsr	FloatArcTan
.15ae	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.3232498
>15b1	b7 7f c0 52				.dword	$52c07fb7
>15b5	e0 00					.byte	$e0,$00
.15b7	20 8d 50	jsr $508d		jsr	FloatSubtract
.15ba	20 57 50	jsr $5057		jsr	FPAbs
.15bd	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>15c0	4c 37 89 41				.dword	$4189374c
>15c4	d8 00					.byte	$d8,$00
.15c6	20 54 51	jsr $5154		jsr	FloatCompare
.15c9	20 4a 50	jsr $504a		jsr	FPAssertCheck
.15cc	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.5
>15cf	00 00 00 40				.dword	$40000000
>15d3	e1 00					.byte	$e1,$00
.15d5	20 c1 57	jsr $57c1		jsr	FloatExponent
.15d8	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.64872127
>15db	38 a6 84 69				.dword	$6984a638
>15df	e2 00					.byte	$e2,$00
.15e1	20 8d 50	jsr $508d		jsr	FloatSubtract
.15e4	20 57 50	jsr $5057		jsr	FPAbs
.15e7	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>15ea	4c 37 89 41				.dword	$4189374c
>15ee	d8 00					.byte	$d8,$00
.15f0	20 54 51	jsr $5154		jsr	FloatCompare
.15f3	20 4a 50	jsr $504a		jsr	FPAssertCheck
.15f6	20 5a 50	jsr $505a		jsr	FPPushConstant	; 61.91
>15f9	85 eb d1 7b				.dword	$7bd1eb85
>15fd	e7 00					.byte	$e7,$00
.15ff	20 c4 58	jsr $58c4		jsr	FloatLogarithm
.1602	20 5a 50	jsr $505a		jsr	FPPushConstant	; 4.12568172
>1605	d6 ca 02 42				.dword	$4202cad6
>1609	e4 00					.byte	$e4,$00
.160b	20 8d 50	jsr $508d		jsr	FloatSubtract
.160e	20 57 50	jsr $5057		jsr	FPAbs
.1611	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>1614	4c 37 89 41				.dword	$4189374c
>1618	d8 00					.byte	$d8,$00
.161a	20 54 51	jsr $5154		jsr	FloatCompare
.161d	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1620	20 5a 50	jsr $505a		jsr	FPPushConstant	; 16.57
>1623	14 ae 47 42				.dword	$4247ae14
>1627	e6 00					.byte	$e6,$00
.1629	20 ba 59	jsr $59ba		jsr	FloatSquareRoot
.162c	20 5a 50	jsr $505a		jsr	FPPushConstant	; 4.07062649
>162f	3e 49 21 41				.dword	$4121493e
>1633	e4 00					.byte	$e4,$00
.1635	20 8d 50	jsr $508d		jsr	FloatSubtract
.1638	20 57 50	jsr $5057		jsr	FPAbs
.163b	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>163e	4c 37 89 41				.dword	$4189374c
>1642	d8 00					.byte	$d8,$00
.1644	20 54 51	jsr $5154		jsr	FloatCompare
.1647	20 4a 50	jsr $504a		jsr	FPAssertCheck
.164a	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.21666667
>164d	0c ef ee 6e				.dword	$6eeeef0c
>1651	df 00					.byte	$df,$00
.1653	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.3
>1656	cd cc cc 4c				.dword	$4ccccccd
>165a	e0 00					.byte	$e0,$00
.165c	20 38 59	jsr $5938		jsr	FloatPower
.165f	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.63202991
>1662	29 5b e6 50				.dword	$50e65b29
>1666	e1 00					.byte	$e1,$00
.1668	20 8d 50	jsr $508d		jsr	FloatSubtract
.166b	20 57 50	jsr $5057		jsr	FPAbs
.166e	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.01
>1671	1f 85 eb 51				.dword	$51eb851f
>1675	db 00					.byte	$db,$00
.1677	20 54 51	jsr $5154		jsr	FloatCompare
.167a	20 4a 50	jsr $504a		jsr	FPAssertCheck
.167d	20 5a 50	jsr $505a		jsr	FPPushConstant	; 15.18951972
>1680	ea 22 84 79				.dword	$798422ea
>1684	e5 00					.byte	$e5,$00
.1686	20 31 56	jsr $5631		jsr	FloatNegate
.1689	20 5a 50	jsr $505a		jsr	FPPushConstant	; -15.18951972
>168c	ea 22 84 79				.dword	$798422ea
>1690	e5 80					.byte	$e5,$80
.1692	20 54 51	jsr $5154		jsr	FloatCompare
.1695	20 1e 51	jsr $511e		jsr	CompareEqual
.1698	20 4a 50	jsr $504a		jsr	FPAssertCheck
.169b	20 5a 50	jsr $505a		jsr	FPPushConstant	; 15.18951972
>169e	ea 22 84 79				.dword	$798422ea
>16a2	e5 00					.byte	$e5,$00
.16a4	20 aa 52	jsr $52aa		jsr	FloatIntegerPart
.16a7	20 5a 50	jsr $505a		jsr	FPPushConstant	; 15
>16aa	0f 00 00 00				.dword	$0000000f
>16ae	00 00					.byte	$00,$00
.16b0	20 54 51	jsr $5154		jsr	FloatCompare
.16b3	20 1e 51	jsr $511e		jsr	CompareEqual
.16b6	20 4a 50	jsr $504a		jsr	FPAssertCheck
.16b9	20 5a 50	jsr $505a		jsr	FPPushConstant	; -5.97
>16bc	b8 1e 85 5f				.dword	$5f851eb8
>16c0	e4 80					.byte	$e4,$80
.16c2	20 55 59	jsr $5955		jsr	FloatSine
.16c5	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.30809056
>16c8	df 05 df 4e				.dword	$4edf05df
>16cc	e0 00					.byte	$e0,$00
.16ce	20 8d 50	jsr $508d		jsr	FloatSubtract
.16d1	20 57 50	jsr $5057		jsr	FPAbs
.16d4	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>16d7	4c 37 89 41				.dword	$4189374c
>16db	d8 00					.byte	$d8,$00
.16dd	20 54 51	jsr $5154		jsr	FloatCompare
.16e0	20 34 51	jsr $5134		jsr	CompareLess
.16e3	20 4a 50	jsr $504a		jsr	FPAssertCheck
.16e6	20 5a 50	jsr $505a		jsr	FPPushConstant	; -5.97
>16e9	b8 1e 85 5f				.dword	$5f851eb8
>16ed	e4 80					.byte	$e4,$80
.16ef	20 b5 57	jsr $57b5		jsr	FloatCosine
.16f2	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.95135703
>16f5	31 11 c6 79				.dword	$79c61131
>16f9	e1 00					.byte	$e1,$00
.16fb	20 8d 50	jsr $508d		jsr	FloatSubtract
.16fe	20 57 50	jsr $5057		jsr	FPAbs
.1701	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>1704	4c 37 89 41				.dword	$4189374c
>1708	d8 00					.byte	$d8,$00
.170a	20 54 51	jsr $5154		jsr	FloatCompare
.170d	20 34 51	jsr $5134		jsr	CompareLess
.1710	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1713	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.16
>1716	1f 85 eb 51				.dword	$51eb851f
>171a	df 00					.byte	$df,$00
.171c	20 c6 59	jsr $59c6		jsr	FloatTangent
.171f	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.16137946
>1722	1e 54 a0 52				.dword	$52a0541e
>1726	df 00					.byte	$df,$00
.1728	20 8d 50	jsr $508d		jsr	FloatSubtract
.172b	20 57 50	jsr $5057		jsr	FPAbs
.172e	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>1731	4c 37 89 41				.dword	$4189374c
>1735	d8 00					.byte	$d8,$00
.1737	20 54 51	jsr $5154		jsr	FloatCompare
.173a	20 4a 50	jsr $504a		jsr	FPAssertCheck
.173d	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.553
>1740	1d 5a 64 63				.dword	$63645a1d
>1744	e2 00					.byte	$e2,$00
.1746	20 9a 56	jsr $569a		jsr	FloatArcTan
.1749	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.99871068
>174c	66 c0 d5 7f				.dword	$7fd5c066
>1750	e1 00					.byte	$e1,$00
.1752	20 8d 50	jsr $508d		jsr	FloatSubtract
.1755	20 57 50	jsr $5057		jsr	FPAbs
.1758	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>175b	4c 37 89 41				.dword	$4189374c
>175f	d8 00					.byte	$d8,$00
.1761	20 54 51	jsr $5154		jsr	FloatCompare
.1764	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1767	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.98
>176a	d7 a3 70 7d				.dword	$7d70a3d7
>176e	e1 00					.byte	$e1,$00
.1770	20 c1 57	jsr $57c1		jsr	FloatExponent
.1773	20 5a 50	jsr $505a		jsr	FPPushConstant	; 2.66445624
>1776	bc 39 43 55				.dword	$554339bc
>177a	e3 00					.byte	$e3,$00
.177c	20 8d 50	jsr $508d		jsr	FloatSubtract
.177f	20 57 50	jsr $5057		jsr	FPAbs
.1782	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>1785	4c 37 89 41				.dword	$4189374c
>1789	d8 00					.byte	$d8,$00
.178b	20 54 51	jsr $5154		jsr	FloatCompare
.178e	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1791	20 5a 50	jsr $505a		jsr	FPPushConstant	; 60.19
>1794	ae 47 61 78				.dword	$786147ae
>1798	e7 00					.byte	$e7,$00
.179a	20 c4 58	jsr $58c4		jsr	FloatLogarithm
.179d	20 5a 50	jsr $505a		jsr	FPPushConstant	; 4.09750623
>17a0	b1 62 8f 41				.dword	$418f62b1
>17a4	e4 00					.byte	$e4,$00
.17a6	20 8d 50	jsr $508d		jsr	FloatSubtract
.17a9	20 57 50	jsr $5057		jsr	FPAbs
.17ac	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>17af	4c 37 89 41				.dword	$4189374c
>17b3	d8 00					.byte	$d8,$00
.17b5	20 54 51	jsr $5154		jsr	FloatCompare
.17b8	20 4a 50	jsr $504a		jsr	FPAssertCheck
.17bb	20 5a 50	jsr $505a		jsr	FPPushConstant	; 25.66
>17be	0a d7 a3 66				.dword	$66a3d70a
>17c2	e6 00					.byte	$e6,$00
.17c4	20 ba 59	jsr $59ba		jsr	FloatSquareRoot
.17c7	20 5a 50	jsr $505a		jsr	FPPushConstant	; 5.06557006
>17ca	31 93 0c 51				.dword	$510c9331
>17ce	e4 00					.byte	$e4,$00
.17d0	20 8d 50	jsr $508d		jsr	FloatSubtract
.17d3	20 57 50	jsr $5057		jsr	FPAbs
.17d6	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>17d9	4c 37 89 41				.dword	$4189374c
>17dd	d8 00					.byte	$d8,$00
.17df	20 54 51	jsr $5154		jsr	FloatCompare
.17e2	20 4a 50	jsr $504a		jsr	FPAssertCheck
.17e5	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.95333333
>17e8	cd 69 03 7d				.dword	$7d0369cd
>17ec	e2 00					.byte	$e2,$00
.17ee	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.7
>17f1	9a 99 99 59				.dword	$5999999a
>17f5	e1 00					.byte	$e1,$00
.17f7	20 38 59	jsr $5938		jsr	FloatPower
.17fa	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.5978774
>17fd	92 9f 43 66				.dword	$66439f92
>1801	e2 00					.byte	$e2,$00
.1803	20 8d 50	jsr $508d		jsr	FloatSubtract
.1806	20 57 50	jsr $5057		jsr	FPAbs
.1809	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.01
>180c	1f 85 eb 51				.dword	$51eb851f
>1810	db 00					.byte	$db,$00
.1812	20 54 51	jsr $5154		jsr	FloatCompare
.1815	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1818	20 5a 50	jsr $505a		jsr	FPPushConstant	; 53.4513647
>181b	46 19 e7 6a				.dword	$6ae71946
>181f	e7 00					.byte	$e7,$00
.1821	20 31 56	jsr $5631		jsr	FloatNegate
.1824	20 5a 50	jsr $505a		jsr	FPPushConstant	; -53.4513647
>1827	46 19 e7 6a				.dword	$6ae71946
>182b	e7 80					.byte	$e7,$80
.182d	20 54 51	jsr $5154		jsr	FloatCompare
.1830	20 1e 51	jsr $511e		jsr	CompareEqual
.1833	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1836	20 5a 50	jsr $505a		jsr	FPPushConstant	; 53.4513647
>1839	46 19 e7 6a				.dword	$6ae71946
>183d	e7 00					.byte	$e7,$00
.183f	20 aa 52	jsr $52aa		jsr	FloatIntegerPart
.1842	20 5a 50	jsr $505a		jsr	FPPushConstant	; 53
>1845	35 00 00 00				.dword	$00000035
>1849	00 00					.byte	$00,$00
.184b	20 54 51	jsr $5154		jsr	FloatCompare
.184e	20 1e 51	jsr $511e		jsr	CompareEqual
.1851	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1854	20 5a 50	jsr $505a		jsr	FPPushConstant	; -7.71
>1857	f6 28 5c 7b				.dword	$7b5c28f6
>185b	e4 80					.byte	$e4,$80
.185d	20 55 59	jsr $5955		jsr	FloatSine
.1860	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.98965254
>1863	37 ef ac 7e				.dword	$7eacef37
>1867	e1 80					.byte	$e1,$80
.1869	20 8d 50	jsr $508d		jsr	FloatSubtract
.186c	20 57 50	jsr $5057		jsr	FPAbs
.186f	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>1872	4c 37 89 41				.dword	$4189374c
>1876	d8 00					.byte	$d8,$00
.1878	20 54 51	jsr $5154		jsr	FloatCompare
.187b	20 34 51	jsr $5134		jsr	CompareLess
.187e	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1881	20 5a 50	jsr $505a		jsr	FPPushConstant	; -7.71
>1884	f6 28 5c 7b				.dword	$7b5c28f6
>1888	e4 80					.byte	$e4,$80
.188a	20 b5 57	jsr $57b5		jsr	FloatCosine
.188d	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.14348468
>1890	f0 d2 76 49				.dword	$4976d2f0
>1894	df 00					.byte	$df,$00
.1896	20 8d 50	jsr $508d		jsr	FloatSubtract
.1899	20 57 50	jsr $5057		jsr	FPAbs
.189c	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>189f	4c 37 89 41				.dword	$4189374c
>18a3	d8 00					.byte	$d8,$00
.18a5	20 54 51	jsr $5154		jsr	FloatCompare
.18a8	20 34 51	jsr $5134		jsr	CompareLess
.18ab	20 4a 50	jsr $504a		jsr	FPAssertCheck
.18ae	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.34
>18b1	71 3d 0a 57				.dword	$570a3d71
>18b5	e0 00					.byte	$e0,$00
.18b7	20 c6 59	jsr $59c6		jsr	FloatTangent
.18ba	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.35373688
>18bd	0b 80 8e 5a				.dword	$5a8e800b
>18c1	e0 00					.byte	$e0,$00
.18c3	20 8d 50	jsr $508d		jsr	FloatSubtract
.18c6	20 57 50	jsr $5057		jsr	FPAbs
.18c9	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>18cc	4c 37 89 41				.dword	$4189374c
>18d0	d8 00					.byte	$d8,$00
.18d2	20 54 51	jsr $5154		jsr	FloatCompare
.18d5	20 4a 50	jsr $504a		jsr	FPAssertCheck
.18d8	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.854
>18db	9e ef a7 76				.dword	$76a7ef9e
>18df	e2 00					.byte	$e2,$00
.18e1	20 9a 56	jsr $569a		jsr	FloatArcTan
.18e4	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.07614761
>18e7	3a 9a df 44				.dword	$44df9a3a
>18eb	e2 00					.byte	$e2,$00
.18ed	20 8d 50	jsr $508d		jsr	FloatSubtract
.18f0	20 57 50	jsr $5057		jsr	FPAbs
.18f3	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>18f6	4c 37 89 41				.dword	$4189374c
>18fa	d8 00					.byte	$d8,$00
.18fc	20 54 51	jsr $5154		jsr	FloatCompare
.18ff	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1902	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.34
>1905	71 3d 0a 57				.dword	$570a3d71
>1909	e0 00					.byte	$e0,$00
.190b	20 c1 57	jsr $57c1		jsr	FloatExponent
.190e	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.40494759
>1911	4c a9 ea 59				.dword	$59eaa94c
>1915	e2 00					.byte	$e2,$00
.1917	20 8d 50	jsr $508d		jsr	FloatSubtract
.191a	20 57 50	jsr $5057		jsr	FPAbs
.191d	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>1920	4c 37 89 41				.dword	$4189374c
>1924	d8 00					.byte	$d8,$00
.1926	20 54 51	jsr $5154		jsr	FloatCompare
.1929	20 4a 50	jsr $504a		jsr	FPAssertCheck
.192c	20 5a 50	jsr $505a		jsr	FPPushConstant	; 93.26
>192f	5c 8f 42 5d				.dword	$5d428f5c
>1933	e8 00					.byte	$e8,$00
.1935	20 c4 58	jsr $58c4		jsr	FloatLogarithm
.1938	20 5a 50	jsr $505a		jsr	FPPushConstant	; 4.53539129
>193b	75 f6 90 48				.dword	$4890f675
>193f	e4 00					.byte	$e4,$00
.1941	20 8d 50	jsr $508d		jsr	FloatSubtract
.1944	20 57 50	jsr $5057		jsr	FPAbs
.1947	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>194a	4c 37 89 41				.dword	$4189374c
>194e	d8 00					.byte	$d8,$00
.1950	20 54 51	jsr $5154		jsr	FloatCompare
.1953	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1956	20 5a 50	jsr $505a		jsr	FPPushConstant	; 98.06
>1959	29 5c 0f 62				.dword	$620f5c29
>195d	e8 00					.byte	$e8,$00
.195f	20 ba 59	jsr $59ba		jsr	FloatSquareRoot
.1962	20 5a 50	jsr $505a		jsr	FPPushConstant	; 9.90252493
>1965	fe 5e 38 4f				.dword	$4f385efe
>1969	e5 00					.byte	$e5,$00
.196b	20 8d 50	jsr $508d		jsr	FloatSubtract
.196e	20 57 50	jsr $5057		jsr	FPAbs
.1971	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>1974	4c 37 89 41				.dword	$4189374c
>1978	d8 00					.byte	$d8,$00
.197a	20 54 51	jsr $5154		jsr	FloatCompare
.197d	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1980	20 5a 50	jsr $505a		jsr	FPPushConstant	; 2.09666667
>1983	b3 e4 17 43				.dword	$4317e4b3
>1987	e3 00					.byte	$e3,$00
.1989	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.7
>198c	cd cc cc 6c				.dword	$6ccccccd
>1990	e2 00					.byte	$e2,$00
.1992	20 38 59	jsr $5938		jsr	FloatPower
.1995	20 5a 50	jsr $505a		jsr	FPPushConstant	; 3.52046446
>1998	15 a5 a7 70				.dword	$70a7a515
>199c	e3 00					.byte	$e3,$00
.199e	20 8d 50	jsr $508d		jsr	FloatSubtract
.19a1	20 57 50	jsr $5057		jsr	FPAbs
.19a4	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.01
>19a7	1f 85 eb 51				.dword	$51eb851f
>19ab	db 00					.byte	$db,$00
.19ad	20 54 51	jsr $5154		jsr	FloatCompare
.19b0	20 4a 50	jsr $504a		jsr	FPAssertCheck
.19b3	20 5a 50	jsr $505a		jsr	FPPushConstant	; 57.48951162
>19b6	44 a1 fa 72				.dword	$72faa144
>19ba	e7 00					.byte	$e7,$00
.19bc	20 31 56	jsr $5631		jsr	FloatNegate
.19bf	20 5a 50	jsr $505a		jsr	FPPushConstant	; -57.48951162
>19c2	44 a1 fa 72				.dword	$72faa144
>19c6	e7 80					.byte	$e7,$80
.19c8	20 54 51	jsr $5154		jsr	FloatCompare
.19cb	20 1e 51	jsr $511e		jsr	CompareEqual
.19ce	20 4a 50	jsr $504a		jsr	FPAssertCheck
.19d1	20 5a 50	jsr $505a		jsr	FPPushConstant	; 57.48951162
>19d4	44 a1 fa 72				.dword	$72faa144
>19d8	e7 00					.byte	$e7,$00
.19da	20 aa 52	jsr $52aa		jsr	FloatIntegerPart
.19dd	20 5a 50	jsr $505a		jsr	FPPushConstant	; 57
>19e0	39 00 00 00				.dword	$00000039
>19e4	00 00					.byte	$00,$00
.19e6	20 54 51	jsr $5154		jsr	FloatCompare
.19e9	20 1e 51	jsr $511e		jsr	CompareEqual
.19ec	20 4a 50	jsr $504a		jsr	FPAssertCheck
.19ef	20 5a 50	jsr $505a		jsr	FPPushConstant	; -18.69
>19f2	5c 8f c2 4a				.dword	$4ac28f5c
>19f6	e6 80					.byte	$e6,$80
.19f8	20 55 59	jsr $5955		jsr	FloatSine
.19fb	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.15887978
>19fe	c6 b0 58 51				.dword	$5158b0c6
>1a02	df 00					.byte	$df,$00
.1a04	20 8d 50	jsr $508d		jsr	FloatSubtract
.1a07	20 57 50	jsr $5057		jsr	FPAbs
.1a0a	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>1a0d	4c 37 89 41				.dword	$4189374c
>1a11	d8 00					.byte	$d8,$00
.1a13	20 54 51	jsr $5154		jsr	FloatCompare
.1a16	20 34 51	jsr $5134		jsr	CompareLess
.1a19	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1a1c	20 5a 50	jsr $505a		jsr	FPPushConstant	; -18.69
>1a1f	5c 8f c2 4a				.dword	$4ac28f5c
>1a23	e6 80					.byte	$e6,$80
.1a25	20 b5 57	jsr $57b5		jsr	FloatCosine
.1a28	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.98729794
>1a2b	66 c7 5f 7e				.dword	$7e5fc766
>1a2f	e1 00					.byte	$e1,$00
.1a31	20 8d 50	jsr $508d		jsr	FloatSubtract
.1a34	20 57 50	jsr $5057		jsr	FPAbs
.1a37	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>1a3a	4c 37 89 41				.dword	$4189374c
>1a3e	d8 00					.byte	$d8,$00
.1a40	20 54 51	jsr $5154		jsr	FloatCompare
.1a43	20 34 51	jsr $5134		jsr	CompareLess
.1a46	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1a49	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.3
>1a4c	cd cc cc 4c				.dword	$4ccccccd
>1a50	e0 00					.byte	$e0,$00
.1a52	20 c6 59	jsr $59c6		jsr	FloatTangent
.1a55	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.30933625
>1a58	15 a9 30 4f				.dword	$4f30a915
>1a5c	e0 00					.byte	$e0,$00
.1a5e	20 8d 50	jsr $508d		jsr	FloatSubtract
.1a61	20 57 50	jsr $5057		jsr	FPAbs
.1a64	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>1a67	4c 37 89 41				.dword	$4189374c
>1a6b	d8 00					.byte	$d8,$00
.1a6d	20 54 51	jsr $5154		jsr	FloatCompare
.1a70	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1a73	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.835
>1a76	d7 a3 70 75				.dword	$7570a3d7
>1a7a	e2 00					.byte	$e2,$00
.1a7c	20 9a 56	jsr $569a		jsr	FloatArcTan
.1a7f	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.0718315
>1a82	26 e3 98 44				.dword	$4498e326
>1a86	e2 00					.byte	$e2,$00
.1a88	20 8d 50	jsr $508d		jsr	FloatSubtract
.1a8b	20 57 50	jsr $5057		jsr	FPAbs
.1a8e	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>1a91	4c 37 89 41				.dword	$4189374c
>1a95	d8 00					.byte	$d8,$00
.1a97	20 54 51	jsr $5154		jsr	FloatCompare
.1a9a	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1a9d	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.46
>1aa0	5c 8f c2 75				.dword	$75c28f5c
>1aa4	e0 80					.byte	$e0,$80
.1aa6	20 c1 57	jsr $57c1		jsr	FloatExponent
.1aa9	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.63128365
>1aac	14 e7 cd 50				.dword	$50cde714
>1ab0	e1 00					.byte	$e1,$00
.1ab2	20 8d 50	jsr $508d		jsr	FloatSubtract
.1ab5	20 57 50	jsr $5057		jsr	FPAbs
.1ab8	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>1abb	4c 37 89 41				.dword	$4189374c
>1abf	d8 00					.byte	$d8,$00
.1ac1	20 54 51	jsr $5154		jsr	FloatCompare
.1ac4	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1ac7	20 5a 50	jsr $505a		jsr	FPPushConstant	; 19.78
>1aca	52 b8 1e 4f				.dword	$4f1eb852
>1ace	e6 00					.byte	$e6,$00
.1ad0	20 c4 58	jsr $58c4		jsr	FloatLogarithm
.1ad3	20 5a 50	jsr $505a		jsr	FPPushConstant	; 2.98467133
>1ad6	73 6d 82 5f				.dword	$5f826d73
>1ada	e3 00					.byte	$e3,$00
.1adc	20 8d 50	jsr $508d		jsr	FloatSubtract
.1adf	20 57 50	jsr $5057		jsr	FPAbs
.1ae2	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>1ae5	4c 37 89 41				.dword	$4189374c
>1ae9	d8 00					.byte	$d8,$00
.1aeb	20 54 51	jsr $5154		jsr	FloatCompare
.1aee	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1af1	20 5a 50	jsr $505a		jsr	FPPushConstant	; 82.79
>1af4	71 3d ca 52				.dword	$52ca3d71
>1af8	e8 00					.byte	$e8,$00
.1afa	20 ba 59	jsr $59ba		jsr	FloatSquareRoot
.1afd	20 5a 50	jsr $505a		jsr	FPPushConstant	; 9.09890103
>1b00	a0 8c ca 48				.dword	$48ca8ca0
>1b04	e5 00					.byte	$e5,$00
.1b06	20 8d 50	jsr $508d		jsr	FloatSubtract
.1b09	20 57 50	jsr $5057		jsr	FPAbs
.1b0c	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>1b0f	4c 37 89 41				.dword	$4189374c
>1b13	d8 00					.byte	$d8,$00
.1b15	20 54 51	jsr $5154		jsr	FloatCompare
.1b18	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1b1b	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.37333333
>1b1e	7b b1 e4 57				.dword	$57e4b17b
>1b22	e2 00					.byte	$e2,$00
.1b24	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.7
>1b27	9a 99 99 59				.dword	$5999999a
>1b2b	e1 00					.byte	$e1,$00
.1b2d	20 38 59	jsr $5938		jsr	FloatPower
.1b30	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.24865705
>1b33	42 ff e9 4f				.dword	$4fe9ff42
>1b37	e2 00					.byte	$e2,$00
.1b39	20 8d 50	jsr $508d		jsr	FloatSubtract
.1b3c	20 57 50	jsr $5057		jsr	FPAbs
.1b3f	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.01
>1b42	1f 85 eb 51				.dword	$51eb851f
>1b46	db 00					.byte	$db,$00
.1b48	20 54 51	jsr $5154		jsr	FloatCompare
.1b4b	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1b4e	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.01482141
>1b51	e7 bf 6a 79				.dword	$796abfe7
>1b55	db 80					.byte	$db,$80
.1b57	20 31 56	jsr $5631		jsr	FloatNegate
.1b5a	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.01482141
>1b5d	e7 bf 6a 79				.dword	$796abfe7
>1b61	db 00					.byte	$db,$00
.1b63	20 54 51	jsr $5154		jsr	FloatCompare
.1b66	20 1e 51	jsr $511e		jsr	CompareEqual
.1b69	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1b6c	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.01482141
>1b6f	e7 bf 6a 79				.dword	$796abfe7
>1b73	db 80					.byte	$db,$80
.1b75	20 aa 52	jsr $52aa		jsr	FloatIntegerPart
.1b78	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0
>1b7b	00 00 00 00				.dword	$00000000
>1b7f	00 00					.byte	$00,$00
.1b81	20 54 51	jsr $5154		jsr	FloatCompare
.1b84	20 1e 51	jsr $511e		jsr	CompareEqual
.1b87	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1b8a	20 5a 50	jsr $505a		jsr	FPPushConstant	; 8.56
>1b8d	48 e1 7a 44				.dword	$447ae148
>1b91	e5 00					.byte	$e5,$00
.1b93	20 55 59	jsr $5955		jsr	FloatSine
.1b96	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.76095122
>1b99	7e d9 66 61				.dword	$6166d97e
>1b9d	e1 00					.byte	$e1,$00
.1b9f	20 8d 50	jsr $508d		jsr	FloatSubtract
.1ba2	20 57 50	jsr $5057		jsr	FPAbs
.1ba5	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>1ba8	4c 37 89 41				.dword	$4189374c
>1bac	d8 00					.byte	$d8,$00
.1bae	20 54 51	jsr $5154		jsr	FloatCompare
.1bb1	20 34 51	jsr $5134		jsr	CompareLess
.1bb4	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1bb7	20 5a 50	jsr $505a		jsr	FPPushConstant	; 8.56
>1bba	48 e1 7a 44				.dword	$447ae148
>1bbe	e5 00					.byte	$e5,$00
.1bc0	20 b5 57	jsr $57b5		jsr	FloatCosine
.1bc3	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.64880909
>1bc6	1f 2d 0c 53				.dword	$530c2d1f
>1bca	e1 80					.byte	$e1,$80
.1bcc	20 8d 50	jsr $508d		jsr	FloatSubtract
.1bcf	20 57 50	jsr $5057		jsr	FPAbs
.1bd2	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>1bd5	4c 37 89 41				.dword	$4189374c
>1bd9	d8 00					.byte	$d8,$00
.1bdb	20 54 51	jsr $5154		jsr	FloatCompare
.1bde	20 34 51	jsr $5134		jsr	CompareLess
.1be1	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1be4	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.14
>1be7	7b 14 ae 47				.dword	$47ae147b
>1beb	df 00					.byte	$df,$00
.1bed	20 c6 59	jsr $59c6		jsr	FloatTangent
.1bf0	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.14092189
>1bf3	fa e9 26 48				.dword	$4826e9fa
>1bf7	df 00					.byte	$df,$00
.1bf9	20 8d 50	jsr $508d		jsr	FloatSubtract
.1bfc	20 57 50	jsr $5057		jsr	FPAbs
.1bff	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>1c02	4c 37 89 41				.dword	$4189374c
>1c06	d8 00					.byte	$d8,$00
.1c08	20 54 51	jsr $5154		jsr	FloatCompare
.1c0b	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1c0e	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.836
>1c11	4a 0c 02 6b				.dword	$6b020c4a
>1c15	e1 00					.byte	$e1,$00
.1c17	20 9a 56	jsr $569a		jsr	FloatArcTan
.1c1a	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.69630998
>1c1d	78 af 20 59				.dword	$5920af78
>1c21	e1 00					.byte	$e1,$00
.1c23	20 8d 50	jsr $508d		jsr	FloatSubtract
.1c26	20 57 50	jsr $5057		jsr	FPAbs
.1c29	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>1c2c	4c 37 89 41				.dword	$4189374c
>1c30	d8 00					.byte	$d8,$00
.1c32	20 54 51	jsr $5154		jsr	FloatCompare
.1c35	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1c38	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.43
>1c3b	b8 1e 85 5b				.dword	$5b851eb8
>1c3f	e2 00					.byte	$e2,$00
.1c41	20 c1 57	jsr $57c1		jsr	FloatExponent
.1c44	20 5a 50	jsr $505a		jsr	FPPushConstant	; 4.17869919
>1c47	af f3 db 42				.dword	$42dbf3af
>1c4b	e4 00					.byte	$e4,$00
.1c4d	20 8d 50	jsr $508d		jsr	FloatSubtract
.1c50	20 57 50	jsr $5057		jsr	FPAbs
.1c53	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>1c56	4c 37 89 41				.dword	$4189374c
>1c5a	d8 00					.byte	$d8,$00
.1c5c	20 54 51	jsr $5154		jsr	FloatCompare
.1c5f	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1c62	20 5a 50	jsr $505a		jsr	FPPushConstant	; 75.17
>1c65	1f 85 2b 4b				.dword	$4b2b851f
>1c69	e8 00					.byte	$e8,$00
.1c6b	20 c4 58	jsr $58c4		jsr	FloatLogarithm
.1c6e	20 5a 50	jsr $505a		jsr	FPPushConstant	; 4.31975222
>1c71	81 b4 1d 45				.dword	$451db481
>1c75	e4 00					.byte	$e4,$00
.1c77	20 8d 50	jsr $508d		jsr	FloatSubtract
.1c7a	20 57 50	jsr $5057		jsr	FPAbs
.1c7d	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>1c80	4c 37 89 41				.dword	$4189374c
>1c84	d8 00					.byte	$d8,$00
.1c86	20 54 51	jsr $5154		jsr	FloatCompare
.1c89	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1c8c	20 5a 50	jsr $505a		jsr	FPPushConstant	; 55.83
>1c8f	c3 f5 a8 6f				.dword	$6fa8f5c3
>1c93	e7 00					.byte	$e7,$00
.1c95	20 ba 59	jsr $59ba		jsr	FloatSquareRoot
.1c98	20 5a 50	jsr $505a		jsr	FPPushConstant	; 7.47194754
>1c9b	dd 18 8d 77				.dword	$778d18dd
>1c9f	e4 00					.byte	$e4,$00
.1ca1	20 8d 50	jsr $508d		jsr	FloatSubtract
.1ca4	20 57 50	jsr $5057		jsr	FPAbs
.1ca7	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>1caa	4c 37 89 41				.dword	$4189374c
>1cae	d8 00					.byte	$d8,$00
.1cb0	20 54 51	jsr $5154		jsr	FloatCompare
.1cb3	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1cb6	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.98333333
>1cb9	eb ee ee 7e				.dword	$7eeeeeeb
>1cbd	e2 00					.byte	$e2,$00
.1cbf	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.4
>1cc2	9a 99 99 59				.dword	$5999999a
>1cc6	e2 00					.byte	$e2,$00
.1cc8	20 38 59	jsr $5938		jsr	FloatPower
.1ccb	20 5a 50	jsr $505a		jsr	FPPushConstant	; 2.6082787
>1cce	e4 04 77 53				.dword	$537704e4
>1cd2	e3 00					.byte	$e3,$00
.1cd4	20 8d 50	jsr $508d		jsr	FloatSubtract
.1cd7	20 57 50	jsr $5057		jsr	FPAbs
.1cda	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.01
>1cdd	1f 85 eb 51				.dword	$51eb851f
>1ce1	db 00					.byte	$db,$00
.1ce3	20 54 51	jsr $5154		jsr	FloatCompare
.1ce6	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1ce9	20 5a 50	jsr $505a		jsr	FPPushConstant	; 17.04632704
>1cec	5b 70 2f 44				.dword	$442f705b
>1cf0	e6 00					.byte	$e6,$00
.1cf2	20 31 56	jsr $5631		jsr	FloatNegate
.1cf5	20 5a 50	jsr $505a		jsr	FPPushConstant	; -17.04632704
>1cf8	5b 70 2f 44				.dword	$442f705b
>1cfc	e6 80					.byte	$e6,$80
.1cfe	20 54 51	jsr $5154		jsr	FloatCompare
.1d01	20 1e 51	jsr $511e		jsr	CompareEqual
.1d04	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1d07	20 5a 50	jsr $505a		jsr	FPPushConstant	; 17.04632704
>1d0a	5b 70 2f 44				.dword	$442f705b
>1d0e	e6 00					.byte	$e6,$00
.1d10	20 aa 52	jsr $52aa		jsr	FloatIntegerPart
.1d13	20 5a 50	jsr $505a		jsr	FPPushConstant	; 17
>1d16	11 00 00 00				.dword	$00000011
>1d1a	00 00					.byte	$00,$00
.1d1c	20 54 51	jsr $5154		jsr	FloatCompare
.1d1f	20 1e 51	jsr $511e		jsr	CompareEqual
.1d22	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1d25	20 5a 50	jsr $505a		jsr	FPPushConstant	; -4.11
>1d28	5c 8f c2 41				.dword	$41c28f5c
>1d2c	e4 80					.byte	$e4,$80
.1d2e	20 55 59	jsr $5955		jsr	FloatSine
.1d31	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.82398434
>1d34	a0 51 78 69				.dword	$697851a0
>1d38	e1 00					.byte	$e1,$00
.1d3a	20 8d 50	jsr $508d		jsr	FloatSubtract
.1d3d	20 57 50	jsr $5057		jsr	FPAbs
.1d40	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>1d43	4c 37 89 41				.dword	$4189374c
>1d47	d8 00					.byte	$d8,$00
.1d49	20 54 51	jsr $5154		jsr	FloatCompare
.1d4c	20 34 51	jsr $5134		jsr	CompareLess
.1d4f	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1d52	20 5a 50	jsr $505a		jsr	FPPushConstant	; -4.11
>1d55	5c 8f c2 41				.dword	$41c28f5c
>1d59	e4 80					.byte	$e4,$80
.1d5b	20 b5 57	jsr $57b5		jsr	FloatCosine
.1d5e	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.56661257
>1d61	bd c2 86 48				.dword	$4886c2bd
>1d65	e1 80					.byte	$e1,$80
.1d67	20 8d 50	jsr $508d		jsr	FloatSubtract
.1d6a	20 57 50	jsr $5057		jsr	FPAbs
.1d6d	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>1d70	4c 37 89 41				.dword	$4189374c
>1d74	d8 00					.byte	$d8,$00
.1d76	20 54 51	jsr $5154		jsr	FloatCompare
.1d79	20 34 51	jsr $5134		jsr	CompareLess
.1d7c	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1d7f	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.39
>1d82	3d 0a d7 63				.dword	$63d70a3d
>1d86	e0 00					.byte	$e0,$00
.1d88	20 c6 59	jsr $59c6		jsr	FloatTangent
.1d8b	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.41105492
>1d8e	2e e5 3a 69				.dword	$693ae52e
>1d92	e0 00					.byte	$e0,$00
.1d94	20 8d 50	jsr $508d		jsr	FloatSubtract
.1d97	20 57 50	jsr $5057		jsr	FPAbs
.1d9a	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>1d9d	4c 37 89 41				.dword	$4189374c
>1da1	d8 00					.byte	$d8,$00
.1da3	20 54 51	jsr $5154		jsr	FloatCompare
.1da6	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1da9	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.146
>1dac	62 10 58 49				.dword	$49581062
>1db0	e2 00					.byte	$e2,$00
.1db2	20 9a 56	jsr $569a		jsr	FloatArcTan
.1db5	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.85332704
>1db8	09 d2 39 6d				.dword	$6d39d209
>1dbc	e1 00					.byte	$e1,$00
.1dbe	20 8d 50	jsr $508d		jsr	FloatSubtract
.1dc1	20 57 50	jsr $5057		jsr	FPAbs
.1dc4	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>1dc7	4c 37 89 41				.dword	$4189374c
>1dcb	d8 00					.byte	$d8,$00
.1dcd	20 54 51	jsr $5154		jsr	FloatCompare
.1dd0	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1dd3	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.22
>1dd6	0a d7 a3 70				.dword	$70a3d70a
>1dda	df 00					.byte	$df,$00
.1ddc	20 c1 57	jsr $57c1		jsr	FloatExponent
.1ddf	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.24607673
>1de2	9d b8 bf 4f				.dword	$4fbfb89d
>1de6	e2 00					.byte	$e2,$00
.1de8	20 8d 50	jsr $508d		jsr	FloatSubtract
.1deb	20 57 50	jsr $5057		jsr	FPAbs
.1dee	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>1df1	4c 37 89 41				.dword	$4189374c
>1df5	d8 00					.byte	$d8,$00
.1df7	20 54 51	jsr $5154		jsr	FloatCompare
.1dfa	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1dfd	20 5a 50	jsr $505a		jsr	FPPushConstant	; 96.14
>1e00	0a d7 23 60				.dword	$6023d70a
>1e04	e8 00					.byte	$e8,$00
.1e06	20 c4 58	jsr $58c4		jsr	FloatLogarithm
.1e09	20 5a 50	jsr $505a		jsr	FPPushConstant	; 4.56580546
>1e0c	07 8a 0d 49				.dword	$490d8a07
>1e10	e4 00					.byte	$e4,$00
.1e12	20 8d 50	jsr $508d		jsr	FloatSubtract
.1e15	20 57 50	jsr $5057		jsr	FPAbs
.1e18	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>1e1b	4c 37 89 41				.dword	$4189374c
>1e1f	d8 00					.byte	$d8,$00
.1e21	20 54 51	jsr $5154		jsr	FloatCompare
.1e24	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1e27	20 5a 50	jsr $505a		jsr	FPPushConstant	; 36.26
>1e2a	b8 1e 85 48				.dword	$48851eb8
>1e2e	e7 00					.byte	$e7,$00
.1e30	20 ba 59	jsr $59ba		jsr	FloatSquareRoot
.1e33	20 5a 50	jsr $505a		jsr	FPPushConstant	; 6.02162769
>1e36	47 96 58 60				.dword	$60589647
>1e3a	e4 00					.byte	$e4,$00
.1e3c	20 8d 50	jsr $508d		jsr	FloatSubtract
.1e3f	20 57 50	jsr $5057		jsr	FPAbs
.1e42	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>1e45	4c 37 89 41				.dword	$4189374c
>1e49	d8 00					.byte	$d8,$00
.1e4b	20 54 51	jsr $5154		jsr	FloatCompare
.1e4e	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1e51	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.26
>1e54	29 5c 8f 42				.dword	$428f5c29
>1e58	e0 00					.byte	$e0,$00
.1e5a	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.3
>1e5d	33 33 33 53				.dword	$53333333
>1e61	e2 00					.byte	$e2,$00
.1e63	20 38 59	jsr $5938		jsr	FloatPower
.1e66	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.17356628
>1e69	f1 ad dd 58				.dword	$58ddadf1
>1e6d	df 00					.byte	$df,$00
.1e6f	20 8d 50	jsr $508d		jsr	FloatSubtract
.1e72	20 57 50	jsr $5057		jsr	FPAbs
.1e75	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.01
>1e78	1f 85 eb 51				.dword	$51eb851f
>1e7c	db 00					.byte	$db,$00
.1e7e	20 54 51	jsr $5154		jsr	FloatCompare
.1e81	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1e84	20 5a 50	jsr $505a		jsr	FPPushConstant	; -60.3158662
>1e87	37 b9 a1 78				.dword	$78a1b937
>1e8b	e7 80					.byte	$e7,$80
.1e8d	20 31 56	jsr $5631		jsr	FloatNegate
.1e90	20 5a 50	jsr $505a		jsr	FPPushConstant	; 60.3158662
>1e93	37 b9 a1 78				.dword	$78a1b937
>1e97	e7 00					.byte	$e7,$00
.1e99	20 54 51	jsr $5154		jsr	FloatCompare
.1e9c	20 1e 51	jsr $511e		jsr	CompareEqual
.1e9f	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1ea2	20 5a 50	jsr $505a		jsr	FPPushConstant	; -60.3158662
>1ea5	37 b9 a1 78				.dword	$78a1b937
>1ea9	e7 80					.byte	$e7,$80
.1eab	20 aa 52	jsr $52aa		jsr	FloatIntegerPart
.1eae	20 5a 50	jsr $505a		jsr	FPPushConstant	; -60
>1eb1	3c 00 00 00				.dword	$0000003c
>1eb5	00 80					.byte	$00,$80
.1eb7	20 54 51	jsr $5154		jsr	FloatCompare
.1eba	20 1e 51	jsr $511e		jsr	CompareEqual
.1ebd	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1ec0	20 5a 50	jsr $505a		jsr	FPPushConstant	; 18.25
>1ec3	00 00 00 49				.dword	$49000000
>1ec7	e6 00					.byte	$e6,$00
.1ec9	20 55 59	jsr $5955		jsr	FloatSine
.1ecc	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.5642759
>1ecf	54 31 3a 48				.dword	$483a3154
>1ed3	e1 80					.byte	$e1,$80
.1ed5	20 8d 50	jsr $508d		jsr	FloatSubtract
.1ed8	20 57 50	jsr $5057		jsr	FPAbs
.1edb	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>1ede	4c 37 89 41				.dword	$4189374c
>1ee2	d8 00					.byte	$d8,$00
.1ee4	20 54 51	jsr $5154		jsr	FloatCompare
.1ee7	20 34 51	jsr $5134		jsr	CompareLess
.1eea	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1eed	20 5a 50	jsr $505a		jsr	FPPushConstant	; 18.25
>1ef0	00 00 00 49				.dword	$49000000
>1ef4	e6 00					.byte	$e6,$00
.1ef6	20 b5 57	jsr $57b5		jsr	FloatCosine
.1ef9	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.82558628
>1efc	ac cf ac 69				.dword	$69accfac
>1f00	e1 00					.byte	$e1,$00
.1f02	20 8d 50	jsr $508d		jsr	FloatSubtract
.1f05	20 57 50	jsr $5057		jsr	FPAbs
.1f08	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>1f0b	4c 37 89 41				.dword	$4189374c
>1f0f	d8 00					.byte	$d8,$00
.1f11	20 54 51	jsr $5154		jsr	FloatCompare
.1f14	20 34 51	jsr $5134		jsr	CompareLess
.1f17	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1f1a	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.16
>1f1d	1f 85 eb 51				.dword	$51eb851f
>1f21	df 00					.byte	$df,$00
.1f23	20 c6 59	jsr $59c6		jsr	FloatTangent
.1f26	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.16137946
>1f29	1e 54 a0 52				.dword	$52a0541e
>1f2d	df 00					.byte	$df,$00
.1f2f	20 8d 50	jsr $508d		jsr	FloatSubtract
.1f32	20 57 50	jsr $5057		jsr	FPAbs
.1f35	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>1f38	4c 37 89 41				.dword	$4189374c
>1f3c	d8 00					.byte	$d8,$00
.1f3e	20 54 51	jsr $5154		jsr	FloatCompare
.1f41	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1f44	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.848
>1f47	cb a1 45 76				.dword	$7645a1cb
>1f4b	e2 00					.byte	$e2,$00
.1f4d	20 9a 56	jsr $569a		jsr	FloatArcTan
.1f50	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.07479204
>1f53	8d 64 c9 44				.dword	$44c9648d
>1f57	e2 00					.byte	$e2,$00
.1f59	20 8d 50	jsr $508d		jsr	FloatSubtract
.1f5c	20 57 50	jsr $5057		jsr	FPAbs
.1f5f	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>1f62	4c 37 89 41				.dword	$4189374c
>1f66	d8 00					.byte	$d8,$00
.1f68	20 54 51	jsr $5154		jsr	FloatCompare
.1f6b	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1f6e	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.13
>1f71	29 5c 8f 42				.dword	$428f5c29
>1f75	df 00					.byte	$df,$00
.1f77	20 c1 57	jsr $57c1		jsr	FloatExponent
.1f7a	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.13882838
>1f7d	6e 90 e2 48				.dword	$48e2906e
>1f81	e2 00					.byte	$e2,$00
.1f83	20 8d 50	jsr $508d		jsr	FloatSubtract
.1f86	20 57 50	jsr $5057		jsr	FPAbs
.1f89	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>1f8c	4c 37 89 41				.dword	$4189374c
>1f90	d8 00					.byte	$d8,$00
.1f92	20 54 51	jsr $5154		jsr	FloatCompare
.1f95	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1f98	20 5a 50	jsr $505a		jsr	FPPushConstant	; 94.41
>1f9b	c3 f5 68 5e				.dword	$5e68f5c3
>1f9f	e8 00					.byte	$e8,$00
.1fa1	20 c4 58	jsr $58c4		jsr	FloatLogarithm
.1fa4	20 5a 50	jsr $505a		jsr	FPPushConstant	; 4.547647
>1fa7	80 29 c3 48				.dword	$48c32980
>1fab	e4 00					.byte	$e4,$00
.1fad	20 8d 50	jsr $508d		jsr	FloatSubtract
.1fb0	20 57 50	jsr $5057		jsr	FPAbs
.1fb3	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>1fb6	4c 37 89 41				.dword	$4189374c
>1fba	d8 00					.byte	$d8,$00
.1fbc	20 54 51	jsr $5154		jsr	FloatCompare
.1fbf	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1fc2	20 5a 50	jsr $505a		jsr	FPPushConstant	; 7.6
>1fc5	9a 99 99 79				.dword	$7999999a
>1fc9	e4 00					.byte	$e4,$00
.1fcb	20 ba 59	jsr $59ba		jsr	FloatSquareRoot
.1fce	20 5a 50	jsr $505a		jsr	FPPushConstant	; 2.75680975
>1fd1	15 c9 37 58				.dword	$5837c915
>1fd5	e3 00					.byte	$e3,$00
.1fd7	20 8d 50	jsr $508d		jsr	FloatSubtract
.1fda	20 57 50	jsr $5057		jsr	FPAbs
.1fdd	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>1fe0	4c 37 89 41				.dword	$4189374c
>1fe4	d8 00					.byte	$d8,$00
.1fe6	20 54 51	jsr $5154		jsr	FloatCompare
.1fe9	20 4a 50	jsr $504a		jsr	FPAssertCheck
.1fec	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.53666667
>1fef	52 7e b1 44				.dword	$44b17e52
>1ff3	e1 00					.byte	$e1,$00
.1ff5	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.2
>1ff8	66 66 66 66				.dword	$66666666
>1ffc	df 00					.byte	$df,$00
.1ffe	20 38 59	jsr $5938		jsr	FloatPower
.2001	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.88295979
>2004	8f d3 04 71				.dword	$7104d38f
>2008	e1 00					.byte	$e1,$00
.200a	20 8d 50	jsr $508d		jsr	FloatSubtract
.200d	20 57 50	jsr $5057		jsr	FPAbs
.2010	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.01
>2013	1f 85 eb 51				.dword	$51eb851f
>2017	db 00					.byte	$db,$00
.2019	20 54 51	jsr $5154		jsr	FloatCompare
.201c	20 4a 50	jsr $504a		jsr	FPAssertCheck
.201f	20 5a 50	jsr $505a		jsr	FPPushConstant	; 32.86612133
>2022	41 74 bb 41				.dword	$41bb7441
>2026	e7 00					.byte	$e7,$00
.2028	20 31 56	jsr $5631		jsr	FloatNegate
.202b	20 5a 50	jsr $505a		jsr	FPPushConstant	; -32.86612133
>202e	41 74 bb 41				.dword	$41bb7441
>2032	e7 80					.byte	$e7,$80
.2034	20 54 51	jsr $5154		jsr	FloatCompare
.2037	20 1e 51	jsr $511e		jsr	CompareEqual
.203a	20 4a 50	jsr $504a		jsr	FPAssertCheck
.203d	20 5a 50	jsr $505a		jsr	FPPushConstant	; 32.86612133
>2040	41 74 bb 41				.dword	$41bb7441
>2044	e7 00					.byte	$e7,$00
.2046	20 aa 52	jsr $52aa		jsr	FloatIntegerPart
.2049	20 5a 50	jsr $505a		jsr	FPPushConstant	; 32
>204c	20 00 00 00				.dword	$00000020
>2050	00 00					.byte	$00,$00
.2052	20 54 51	jsr $5154		jsr	FloatCompare
.2055	20 1e 51	jsr $511e		jsr	CompareEqual
.2058	20 4a 50	jsr $504a		jsr	FPAssertCheck
.205b	20 5a 50	jsr $505a		jsr	FPPushConstant	; 19.44
>205e	5c 8f c2 4d				.dword	$4dc28f5c
>2062	e6 00					.byte	$e6,$00
.2064	20 55 59	jsr $5955		jsr	FloatSine
.2067	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.55672997
>206a	7b ed 42 47				.dword	$4742ed7b
>206e	e1 00					.byte	$e1,$00
.2070	20 8d 50	jsr $508d		jsr	FloatSubtract
.2073	20 57 50	jsr $5057		jsr	FPAbs
.2076	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>2079	4c 37 89 41				.dword	$4189374c
>207d	d8 00					.byte	$d8,$00
.207f	20 54 51	jsr $5154		jsr	FloatCompare
.2082	20 34 51	jsr $5134		jsr	CompareLess
.2085	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2088	20 5a 50	jsr $505a		jsr	FPPushConstant	; 19.44
>208b	5c 8f c2 4d				.dword	$4dc28f5c
>208f	e6 00					.byte	$e6,$00
.2091	20 b5 57	jsr $57b5		jsr	FloatCosine
.2094	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.83069353
>2097	64 2a 54 6a				.dword	$6a542a64
>209b	e1 00					.byte	$e1,$00
.209d	20 8d 50	jsr $508d		jsr	FloatSubtract
.20a0	20 57 50	jsr $5057		jsr	FPAbs
.20a3	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>20a6	4c 37 89 41				.dword	$4189374c
>20aa	d8 00					.byte	$d8,$00
.20ac	20 54 51	jsr $5154		jsr	FloatCompare
.20af	20 34 51	jsr $5134		jsr	CompareLess
.20b2	20 4a 50	jsr $504a		jsr	FPAssertCheck
.20b5	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.32
>20b8	1f 85 eb 51				.dword	$51eb851f
>20bc	e0 00					.byte	$e0,$00
.20be	20 c6 59	jsr $59c6		jsr	FloatTangent
.20c1	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.33138941
>20c4	b6 ef d5 54				.dword	$54d5efb6
>20c8	e0 00					.byte	$e0,$00
.20ca	20 8d 50	jsr $508d		jsr	FloatSubtract
.20cd	20 57 50	jsr $5057		jsr	FPAbs
.20d0	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>20d3	4c 37 89 41				.dword	$4189374c
>20d7	d8 00					.byte	$d8,$00
.20d9	20 54 51	jsr $5154		jsr	FloatCompare
.20dc	20 4a 50	jsr $504a		jsr	FPAssertCheck
.20df	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.136
>20e2	c1 ca a1 45				.dword	$45a1cac1
>20e6	df 00					.byte	$df,$00
.20e8	20 9a 56	jsr $569a		jsr	FloatArcTan
.20eb	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.1351707
>20ee	10 18 35 45				.dword	$45351810
>20f2	df 00					.byte	$df,$00
.20f4	20 8d 50	jsr $508d		jsr	FloatSubtract
.20f7	20 57 50	jsr $5057		jsr	FPAbs
.20fa	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>20fd	4c 37 89 41				.dword	$4189374c
>2101	d8 00					.byte	$d8,$00
.2103	20 54 51	jsr $5154		jsr	FloatCompare
.2106	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2109	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.32
>210c	48 e1 7a 54				.dword	$547ae148
>2110	e2 00					.byte	$e2,$00
.2112	20 c1 57	jsr $57c1		jsr	FloatExponent
.2115	20 5a 50	jsr $505a		jsr	FPPushConstant	; 3.74342138
>2118	a2 1b ca 77				.dword	$77ca1ba2
>211c	e3 00					.byte	$e3,$00
.211e	20 8d 50	jsr $508d		jsr	FloatSubtract
.2121	20 57 50	jsr $5057		jsr	FPAbs
.2124	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>2127	4c 37 89 41				.dword	$4189374c
>212b	d8 00					.byte	$d8,$00
.212d	20 54 51	jsr $5154		jsr	FloatCompare
.2130	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2133	20 5a 50	jsr $505a		jsr	FPPushConstant	; 70.53
>2136	14 ae 87 46				.dword	$4687ae14
>213a	e8 00					.byte	$e8,$00
.213c	20 c4 58	jsr $58c4		jsr	FloatLogarithm
.213f	20 5a 50	jsr $505a		jsr	FPPushConstant	; 4.25603815
>2142	76 bb 18 44				.dword	$4418bb76
>2146	e4 00					.byte	$e4,$00
.2148	20 8d 50	jsr $508d		jsr	FloatSubtract
.214b	20 57 50	jsr $5057		jsr	FPAbs
.214e	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>2151	4c 37 89 41				.dword	$4189374c
>2155	d8 00					.byte	$d8,$00
.2157	20 54 51	jsr $5154		jsr	FloatCompare
.215a	20 4a 50	jsr $504a		jsr	FPAssertCheck
.215d	20 5a 50	jsr $505a		jsr	FPPushConstant	; 29.63
>2160	b8 1e 85 76				.dword	$76851eb8
>2164	e6 00					.byte	$e6,$00
.2166	20 ba 59	jsr $59ba		jsr	FloatSquareRoot
.2169	20 5a 50	jsr $505a		jsr	FPPushConstant	; 5.44334456
>216c	77 f0 17 57				.dword	$5717f077
>2170	e4 00					.byte	$e4,$00
.2172	20 8d 50	jsr $508d		jsr	FloatSubtract
.2175	20 57 50	jsr $5057		jsr	FPAbs
.2178	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>217b	4c 37 89 41				.dword	$4189374c
>217f	d8 00					.byte	$d8,$00
.2181	20 54 51	jsr $5154		jsr	FloatCompare
.2184	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2187	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.92
>218a	5c 8f c2 75				.dword	$75c28f5c
>218e	e1 00					.byte	$e1,$00
.2190	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.8
>2193	66 66 66 66				.dword	$66666666
>2197	e1 00					.byte	$e1,$00
.2199	20 38 59	jsr $5938		jsr	FloatPower
.219c	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.93547086
>219f	57 82 bd 77				.dword	$77bd8257
>21a3	e1 00					.byte	$e1,$00
.21a5	20 8d 50	jsr $508d		jsr	FloatSubtract
.21a8	20 57 50	jsr $5057		jsr	FPAbs
.21ab	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.01
>21ae	1f 85 eb 51				.dword	$51eb851f
>21b2	db 00					.byte	$db,$00
.21b4	20 54 51	jsr $5154		jsr	FloatCompare
.21b7	20 4a 50	jsr $504a		jsr	FPAssertCheck
.21ba	20 5a 50	jsr $505a		jsr	FPPushConstant	; 45.47963068
>21bd	27 92 f5 5a				.dword	$5af59227
>21c1	e7 00					.byte	$e7,$00
.21c3	20 31 56	jsr $5631		jsr	FloatNegate
.21c6	20 5a 50	jsr $505a		jsr	FPPushConstant	; -45.47963068
>21c9	27 92 f5 5a				.dword	$5af59227
>21cd	e7 80					.byte	$e7,$80
.21cf	20 54 51	jsr $5154		jsr	FloatCompare
.21d2	20 1e 51	jsr $511e		jsr	CompareEqual
.21d5	20 4a 50	jsr $504a		jsr	FPAssertCheck
.21d8	20 5a 50	jsr $505a		jsr	FPPushConstant	; 45.47963068
>21db	27 92 f5 5a				.dword	$5af59227
>21df	e7 00					.byte	$e7,$00
.21e1	20 aa 52	jsr $52aa		jsr	FloatIntegerPart
.21e4	20 5a 50	jsr $505a		jsr	FPPushConstant	; 45
>21e7	2d 00 00 00				.dword	$0000002d
>21eb	00 00					.byte	$00,$00
.21ed	20 54 51	jsr $5154		jsr	FloatCompare
.21f0	20 1e 51	jsr $511e		jsr	CompareEqual
.21f3	20 4a 50	jsr $504a		jsr	FPAssertCheck
.21f6	20 5a 50	jsr $505a		jsr	FPPushConstant	; 8.16
>21f9	14 ae 47 41				.dword	$4147ae14
>21fd	e5 00					.byte	$e5,$00
.21ff	20 55 59	jsr $5955		jsr	FloatSine
.2202	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.95354065
>2205	ba 9e 0d 7a				.dword	$7a0d9eba
>2209	e1 00					.byte	$e1,$00
.220b	20 8d 50	jsr $508d		jsr	FloatSubtract
.220e	20 57 50	jsr $5057		jsr	FPAbs
.2211	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>2214	4c 37 89 41				.dword	$4189374c
>2218	d8 00					.byte	$d8,$00
.221a	20 54 51	jsr $5154		jsr	FloatCompare
.221d	20 34 51	jsr $5134		jsr	CompareLess
.2220	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2223	20 5a 50	jsr $505a		jsr	FPPushConstant	; 8.16
>2226	14 ae 47 41				.dword	$4147ae14
>222a	e5 00					.byte	$e5,$00
.222c	20 b5 57	jsr $57b5		jsr	FloatCosine
.222f	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.30126438
>2232	94 a9 1f 4d				.dword	$4d1fa994
>2236	e0 80					.byte	$e0,$80
.2238	20 8d 50	jsr $508d		jsr	FloatSubtract
.223b	20 57 50	jsr $5057		jsr	FPAbs
.223e	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>2241	4c 37 89 41				.dword	$4189374c
>2245	d8 00					.byte	$d8,$00
.2247	20 54 51	jsr $5154		jsr	FloatCompare
.224a	20 34 51	jsr $5134		jsr	CompareLess
.224d	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2250	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.22
>2253	0a d7 a3 70				.dword	$70a3d70a
>2257	df 00					.byte	$df,$00
.2259	20 c6 59	jsr $59c6		jsr	FloatTangent
.225c	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.22361942
>225f	9f 3e 7e 72				.dword	$727e3e9f
>2263	df 00					.byte	$df,$00
.2265	20 8d 50	jsr $508d		jsr	FloatSubtract
.2268	20 57 50	jsr $5057		jsr	FPAbs
.226b	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>226e	4c 37 89 41				.dword	$4189374c
>2272	d8 00					.byte	$d8,$00
.2274	20 54 51	jsr $5154		jsr	FloatCompare
.2277	20 4a 50	jsr $504a		jsr	FPAssertCheck
.227a	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.256
>227d	4c 37 89 41				.dword	$4189374c
>2281	e0 00					.byte	$e0,$00
.2283	20 9a 56	jsr $569a		jsr	FloatArcTan
.2286	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.2506177
>2289	49 7b 28 40				.dword	$40287b49
>228d	e0 00					.byte	$e0,$00
.228f	20 8d 50	jsr $508d		jsr	FloatSubtract
.2292	20 57 50	jsr $5057		jsr	FPAbs
.2295	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>2298	4c 37 89 41				.dword	$4189374c
>229c	d8 00					.byte	$d8,$00
.229e	20 54 51	jsr $5154		jsr	FloatCompare
.22a1	20 4a 50	jsr $504a		jsr	FPAssertCheck
.22a4	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.1
>22a7	66 66 66 66				.dword	$66666666
>22ab	de 00					.byte	$de,$00
.22ad	20 c1 57	jsr $57c1		jsr	FloatExponent
.22b0	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.10517092
>22b3	cf 1e bb 46				.dword	$46bb1ecf
>22b7	e2 00					.byte	$e2,$00
.22b9	20 8d 50	jsr $508d		jsr	FloatSubtract
.22bc	20 57 50	jsr $5057		jsr	FPAbs
.22bf	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>22c2	4c 37 89 41				.dword	$4189374c
>22c6	d8 00					.byte	$d8,$00
.22c8	20 54 51	jsr $5154		jsr	FloatCompare
.22cb	20 4a 50	jsr $504a		jsr	FPAssertCheck
.22ce	20 5a 50	jsr $505a		jsr	FPPushConstant	; 84.2
>22d1	33 33 33 54				.dword	$54333333
>22d5	e8 00					.byte	$e8,$00
.22d7	20 c4 58	jsr $58c4		jsr	FloatLogarithm
.22da	20 5a 50	jsr $505a		jsr	FPPushConstant	; 4.43319492
>22dd	cc 5d ee 46				.dword	$46ee5dcc
>22e1	e4 00					.byte	$e4,$00
.22e3	20 8d 50	jsr $508d		jsr	FloatSubtract
.22e6	20 57 50	jsr $5057		jsr	FPAbs
.22e9	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>22ec	4c 37 89 41				.dword	$4189374c
>22f0	d8 00					.byte	$d8,$00
.22f2	20 54 51	jsr $5154		jsr	FloatCompare
.22f5	20 4a 50	jsr $504a		jsr	FPAssertCheck
.22f8	20 5a 50	jsr $505a		jsr	FPPushConstant	; 84.13
>22fb	ae 47 21 54				.dword	$542147ae
>22ff	e8 00					.byte	$e8,$00
.2301	20 ba 59	jsr $59ba		jsr	FloatSquareRoot
.2304	20 5a 50	jsr $505a		jsr	FPPushConstant	; 9.17224073
>2307	bf bf 60 49				.dword	$4960bfbf
>230b	e5 00					.byte	$e5,$00
.230d	20 8d 50	jsr $508d		jsr	FloatSubtract
.2310	20 57 50	jsr $5057		jsr	FPAbs
.2313	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>2316	4c 37 89 41				.dword	$4189374c
>231a	d8 00					.byte	$d8,$00
.231c	20 54 51	jsr $5154		jsr	FloatCompare
.231f	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2322	20 5a 50	jsr $505a		jsr	FPPushConstant	; 2.68666667
>2325	61 2c f9 55				.dword	$55f92c61
>2329	e3 00					.byte	$e3,$00
.232b	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.6
>232e	cd cc cc 4c				.dword	$4ccccccd
>2332	e1 00					.byte	$e1,$00
.2334	20 38 59	jsr $5938		jsr	FloatPower
.2337	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.8093737
>233a	59 c7 cc 73				.dword	$73ccc759
>233e	e2 00					.byte	$e2,$00
.2340	20 8d 50	jsr $508d		jsr	FloatSubtract
.2343	20 57 50	jsr $5057		jsr	FPAbs
.2346	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.01
>2349	1f 85 eb 51				.dword	$51eb851f
>234d	db 00					.byte	$db,$00
.234f	20 54 51	jsr $5154		jsr	FloatCompare
.2352	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2355	20 5a 50	jsr $505a		jsr	FPPushConstant	; 51.11703248
>2358	ae eb 3b 66				.dword	$663bebae
>235c	e7 00					.byte	$e7,$00
.235e	20 31 56	jsr $5631		jsr	FloatNegate
.2361	20 5a 50	jsr $505a		jsr	FPPushConstant	; -51.11703248
>2364	ae eb 3b 66				.dword	$663bebae
>2368	e7 80					.byte	$e7,$80
.236a	20 54 51	jsr $5154		jsr	FloatCompare
.236d	20 1e 51	jsr $511e		jsr	CompareEqual
.2370	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2373	20 5a 50	jsr $505a		jsr	FPPushConstant	; 51.11703248
>2376	ae eb 3b 66				.dword	$663bebae
>237a	e7 00					.byte	$e7,$00
.237c	20 aa 52	jsr $52aa		jsr	FloatIntegerPart
.237f	20 5a 50	jsr $505a		jsr	FPPushConstant	; 51
>2382	33 00 00 00				.dword	$00000033
>2386	00 00					.byte	$00,$00
.2388	20 54 51	jsr $5154		jsr	FloatCompare
.238b	20 1e 51	jsr $511e		jsr	CompareEqual
.238e	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2391	20 5a 50	jsr $505a		jsr	FPPushConstant	; 18.37
>2394	48 e1 7a 49				.dword	$497ae148
>2398	e6 00					.byte	$e6,$00
.239a	20 55 59	jsr $5955		jsr	FloatSine
.239d	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.46138523
>23a0	aa 57 1d 76				.dword	$761d57aa
>23a4	e0 80					.byte	$e0,$80
.23a6	20 8d 50	jsr $508d		jsr	FloatSubtract
.23a9	20 57 50	jsr $5057		jsr	FPAbs
.23ac	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>23af	4c 37 89 41				.dword	$4189374c
>23b3	d8 00					.byte	$d8,$00
.23b5	20 54 51	jsr $5154		jsr	FloatCompare
.23b8	20 34 51	jsr $5134		jsr	CompareLess
.23bb	20 4a 50	jsr $504a		jsr	FPAssertCheck
.23be	20 5a 50	jsr $505a		jsr	FPPushConstant	; 18.37
>23c1	48 e1 7a 49				.dword	$497ae148
>23c5	e6 00					.byte	$e6,$00
.23c7	20 b5 57	jsr $57b5		jsr	FloatCosine
.23ca	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.8871999
>23cd	2e c4 8f 71				.dword	$718fc42e
>23d1	e1 00					.byte	$e1,$00
.23d3	20 8d 50	jsr $508d		jsr	FloatSubtract
.23d6	20 57 50	jsr $5057		jsr	FPAbs
.23d9	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>23dc	4c 37 89 41				.dword	$4189374c
>23e0	d8 00					.byte	$d8,$00
.23e2	20 54 51	jsr $5154		jsr	FloatCompare
.23e5	20 34 51	jsr $5134		jsr	CompareLess
.23e8	20 4a 50	jsr $504a		jsr	FPAssertCheck
.23eb	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.17
>23ee	71 3d 0a 57				.dword	$570a3d71
>23f2	df 00					.byte	$df,$00
.23f4	20 c6 59	jsr $59c6		jsr	FloatTangent
.23f7	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.17165682
>23fa	18 67 e3 57				.dword	$57e36718
>23fe	df 00					.byte	$df,$00
.2400	20 8d 50	jsr $508d		jsr	FloatSubtract
.2403	20 57 50	jsr $5057		jsr	FPAbs
.2406	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>2409	4c 37 89 41				.dword	$4189374c
>240d	d8 00					.byte	$d8,$00
.240f	20 54 51	jsr $5154		jsr	FloatCompare
.2412	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2415	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.716
>2418	aa f1 d2 6d				.dword	$6dd2f1aa
>241c	e2 00					.byte	$e2,$00
.241e	20 9a 56	jsr $569a		jsr	FloatArcTan
.2421	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.04315679
>2424	b2 14 c3 42				.dword	$42c314b2
>2428	e2 00					.byte	$e2,$00
.242a	20 8d 50	jsr $508d		jsr	FloatSubtract
.242d	20 57 50	jsr $5057		jsr	FPAbs
.2430	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>2433	4c 37 89 41				.dword	$4189374c
>2437	d8 00					.byte	$d8,$00
.2439	20 54 51	jsr $5154		jsr	FloatCompare
.243c	20 4a 50	jsr $504a		jsr	FPAssertCheck
.243f	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.51
>2442	0a d7 a3 60				.dword	$60a3d70a
>2446	e2 00					.byte	$e2,$00
.2448	20 c1 57	jsr $57c1		jsr	FloatExponent
.244b	20 5a 50	jsr $505a		jsr	FPPushConstant	; 4.52673079
>244e	44 7d 6d 48				.dword	$486d7d44
>2452	e4 00					.byte	$e4,$00
.2454	20 8d 50	jsr $508d		jsr	FloatSubtract
.2457	20 57 50	jsr $5057		jsr	FPAbs
.245a	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>245d	4c 37 89 41				.dword	$4189374c
>2461	d8 00					.byte	$d8,$00
.2463	20 54 51	jsr $5154		jsr	FloatCompare
.2466	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2469	20 5a 50	jsr $505a		jsr	FPPushConstant	; 24.91
>246c	0a d7 a3 63				.dword	$63a3d70a
>2470	e6 00					.byte	$e6,$00
.2472	20 c4 58	jsr $58c4		jsr	FloatLogarithm
.2475	20 5a 50	jsr $505a		jsr	FPPushConstant	; 3.21526933
>2478	82 7c e3 66				.dword	$66e37c82
>247c	e3 00					.byte	$e3,$00
.247e	20 8d 50	jsr $508d		jsr	FloatSubtract
.2481	20 57 50	jsr $5057		jsr	FPAbs
.2484	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>2487	4c 37 89 41				.dword	$4189374c
>248b	d8 00					.byte	$d8,$00
.248d	20 54 51	jsr $5154		jsr	FloatCompare
.2490	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2493	20 5a 50	jsr $505a		jsr	FPPushConstant	; 27.15
>2496	9a 99 99 6c				.dword	$6c99999a
>249a	e6 00					.byte	$e6,$00
.249c	20 ba 59	jsr $59ba		jsr	FloatSquareRoot
.249f	20 5a 50	jsr $505a		jsr	FPPushConstant	; 5.21056619
>24a2	a7 7a 5e 53				.dword	$535e7aa7
>24a6	e4 00					.byte	$e4,$00
.24a8	20 8d 50	jsr $508d		jsr	FloatSubtract
.24ab	20 57 50	jsr $5057		jsr	FPAbs
.24ae	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>24b1	4c 37 89 41				.dword	$4189374c
>24b5	d8 00					.byte	$d8,$00
.24b7	20 54 51	jsr $5154		jsr	FloatCompare
.24ba	20 4a 50	jsr $504a		jsr	FPAssertCheck
.24bd	20 5a 50	jsr $505a		jsr	FPPushConstant	; 2.00333333
>24c0	80 4e 1b 40				.dword	$401b4e80
>24c4	e3 00					.byte	$e3,$00
.24c6	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.9
>24c9	9a 99 99 79				.dword	$7999999a
>24cd	e2 00					.byte	$e2,$00
.24cf	20 38 59	jsr $5938		jsr	FloatPower
.24d2	20 5a 50	jsr $505a		jsr	FPPushConstant	; 3.74395925
>24d5	a1 83 ce 77				.dword	$77ce83a1
>24d9	e3 00					.byte	$e3,$00
.24db	20 8d 50	jsr $508d		jsr	FloatSubtract
.24de	20 57 50	jsr $5057		jsr	FPAbs
.24e1	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.01
>24e4	1f 85 eb 51				.dword	$51eb851f
>24e8	db 00					.byte	$db,$00
.24ea	20 54 51	jsr $5154		jsr	FloatCompare
.24ed	20 4a 50	jsr $504a		jsr	FPAssertCheck
.24f0	20 5a 50	jsr $505a		jsr	FPPushConstant	; 55.57682028
>24f3	fd 54 27 6f				.dword	$6f2754fd
>24f7	e7 00					.byte	$e7,$00
.24f9	20 31 56	jsr $5631		jsr	FloatNegate
.24fc	20 5a 50	jsr $505a		jsr	FPPushConstant	; -55.57682028
>24ff	fd 54 27 6f				.dword	$6f2754fd
>2503	e7 80					.byte	$e7,$80
.2505	20 54 51	jsr $5154		jsr	FloatCompare
.2508	20 1e 51	jsr $511e		jsr	CompareEqual
.250b	20 4a 50	jsr $504a		jsr	FPAssertCheck
.250e	20 5a 50	jsr $505a		jsr	FPPushConstant	; 55.57682028
>2511	fd 54 27 6f				.dword	$6f2754fd
>2515	e7 00					.byte	$e7,$00
.2517	20 aa 52	jsr $52aa		jsr	FloatIntegerPart
.251a	20 5a 50	jsr $505a		jsr	FPPushConstant	; 55
>251d	37 00 00 00				.dword	$00000037
>2521	00 00					.byte	$00,$00
.2523	20 54 51	jsr $5154		jsr	FloatCompare
.2526	20 1e 51	jsr $511e		jsr	CompareEqual
.2529	20 4a 50	jsr $504a		jsr	FPAssertCheck
.252c	20 5a 50	jsr $505a		jsr	FPPushConstant	; 5.0
>252f	05 00 00 00				.dword	$00000005
>2533	00 00					.byte	$00,$00
.2535	20 55 59	jsr $5955		jsr	FloatSine
.2538	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.95892427
>253b	cd 07 be 7a				.dword	$7abe07cd
>253f	e1 80					.byte	$e1,$80
.2541	20 8d 50	jsr $508d		jsr	FloatSubtract
.2544	20 57 50	jsr $5057		jsr	FPAbs
.2547	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>254a	4c 37 89 41				.dword	$4189374c
>254e	d8 00					.byte	$d8,$00
.2550	20 54 51	jsr $5154		jsr	FloatCompare
.2553	20 34 51	jsr $5134		jsr	CompareLess
.2556	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2559	20 5a 50	jsr $505a		jsr	FPPushConstant	; 5.0
>255c	05 00 00 00				.dword	$00000005
>2560	00 00					.byte	$00,$00
.2562	20 b5 57	jsr $57b5		jsr	FloatCosine
.2565	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.28366219
>2568	d5 15 9e 48				.dword	$489e15d5
>256c	e0 00					.byte	$e0,$00
.256e	20 8d 50	jsr $508d		jsr	FloatSubtract
.2571	20 57 50	jsr $5057		jsr	FPAbs
.2574	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>2577	4c 37 89 41				.dword	$4189374c
>257b	d8 00					.byte	$d8,$00
.257d	20 54 51	jsr $5154		jsr	FloatCompare
.2580	20 34 51	jsr $5134		jsr	CompareLess
.2583	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2586	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.17
>2589	71 3d 0a 57				.dword	$570a3d71
>258d	df 00					.byte	$df,$00
.258f	20 c6 59	jsr $59c6		jsr	FloatTangent
.2592	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.17165682
>2595	18 67 e3 57				.dword	$57e36718
>2599	df 00					.byte	$df,$00
.259b	20 8d 50	jsr $508d		jsr	FloatSubtract
.259e	20 57 50	jsr $5057		jsr	FPAbs
.25a1	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>25a4	4c 37 89 41				.dword	$4189374c
>25a8	d8 00					.byte	$d8,$00
.25aa	20 54 51	jsr $5154		jsr	FloatCompare
.25ad	20 4a 50	jsr $504a		jsr	FPAssertCheck
.25b0	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.674
>25b3	e5 d0 22 6b				.dword	$6b22d0e5
>25b7	e2 00					.byte	$e2,$00
.25b9	20 9a 56	jsr $569a		jsr	FloatArcTan
.25bc	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.03231174
>25bf	43 65 11 42				.dword	$42116543
>25c3	e2 00					.byte	$e2,$00
.25c5	20 8d 50	jsr $508d		jsr	FloatSubtract
.25c8	20 57 50	jsr $5057		jsr	FPAbs
.25cb	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>25ce	4c 37 89 41				.dword	$4189374c
>25d2	d8 00					.byte	$d8,$00
.25d4	20 54 51	jsr $5154		jsr	FloatCompare
.25d7	20 4a 50	jsr $504a		jsr	FPAssertCheck
.25da	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.96
>25dd	ae 47 e1 7a				.dword	$7ae147ae
>25e1	e1 00					.byte	$e1,$00
.25e3	20 c1 57	jsr $57c1		jsr	FloatExponent
.25e6	20 5a 50	jsr $505a		jsr	FPPushConstant	; 2.61169647
>25e9	7a 04 93 53				.dword	$5393047a
>25ed	e3 00					.byte	$e3,$00
.25ef	20 8d 50	jsr $508d		jsr	FloatSubtract
.25f2	20 57 50	jsr $5057		jsr	FPAbs
.25f5	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>25f8	4c 37 89 41				.dword	$4189374c
>25fc	d8 00					.byte	$d8,$00
.25fe	20 54 51	jsr $5154		jsr	FloatCompare
.2601	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2604	20 5a 50	jsr $505a		jsr	FPPushConstant	; 80.85
>2607	9a 99 d9 50				.dword	$50d9999a
>260b	e8 00					.byte	$e8,$00
.260d	20 c4 58	jsr $58c4		jsr	FloatLogarithm
.2610	20 5a 50	jsr $505a		jsr	FPPushConstant	; 4.39259559
>2613	50 12 48 46				.dword	$46481250
>2617	e4 00					.byte	$e4,$00
.2619	20 8d 50	jsr $508d		jsr	FloatSubtract
.261c	20 57 50	jsr $5057		jsr	FPAbs
.261f	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>2622	4c 37 89 41				.dword	$4189374c
>2626	d8 00					.byte	$d8,$00
.2628	20 54 51	jsr $5154		jsr	FloatCompare
.262b	20 4a 50	jsr $504a		jsr	FPAssertCheck
.262e	20 5a 50	jsr $505a		jsr	FPPushConstant	; 83.28
>2631	14 ae 47 53				.dword	$5347ae14
>2635	e8 00					.byte	$e8,$00
.2637	20 ba 59	jsr $59ba		jsr	FloatSquareRoot
.263a	20 5a 50	jsr $505a		jsr	FPPushConstant	; 9.12578764
>263d	f3 9c 01 49				.dword	$49019cf3
>2641	e5 00					.byte	$e5,$00
.2643	20 8d 50	jsr $508d		jsr	FloatSubtract
.2646	20 57 50	jsr $5057		jsr	FPAbs
.2649	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>264c	4c 37 89 41				.dword	$4189374c
>2650	d8 00					.byte	$d8,$00
.2652	20 54 51	jsr $5154		jsr	FloatCompare
.2655	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2658	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.95333333
>265b	cd 69 03 7d				.dword	$7d0369cd
>265f	e2 00					.byte	$e2,$00
.2661	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.3
>2664	33 33 33 53				.dword	$53333333
>2668	e2 00					.byte	$e2,$00
.266a	20 38 59	jsr $5938		jsr	FloatPower
.266d	20 5a 50	jsr $505a		jsr	FPPushConstant	; 2.38786225
>2670	18 5e 69 4c				.dword	$4c695e18
>2674	e3 00					.byte	$e3,$00
.2676	20 8d 50	jsr $508d		jsr	FloatSubtract
.2679	20 57 50	jsr $5057		jsr	FPAbs
.267c	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.01
>267f	1f 85 eb 51				.dword	$51eb851f
>2683	db 00					.byte	$db,$00
.2685	20 54 51	jsr $5154		jsr	FloatCompare
.2688	20 4a 50	jsr $504a		jsr	FPAssertCheck
.268b	20 5a 50	jsr $505a		jsr	FPPushConstant	; 31.94994736
>268e	00 bf cc 7f				.dword	$7fccbf00
>2692	e6 00					.byte	$e6,$00
.2694	20 31 56	jsr $5631		jsr	FloatNegate
.2697	20 5a 50	jsr $505a		jsr	FPPushConstant	; -31.94994736
>269a	00 bf cc 7f				.dword	$7fccbf00
>269e	e6 80					.byte	$e6,$80
.26a0	20 54 51	jsr $5154		jsr	FloatCompare
.26a3	20 1e 51	jsr $511e		jsr	CompareEqual
.26a6	20 4a 50	jsr $504a		jsr	FPAssertCheck
.26a9	20 5a 50	jsr $505a		jsr	FPPushConstant	; 31.94994736
>26ac	00 bf cc 7f				.dword	$7fccbf00
>26b0	e6 00					.byte	$e6,$00
.26b2	20 aa 52	jsr $52aa		jsr	FloatIntegerPart
.26b5	20 5a 50	jsr $505a		jsr	FPPushConstant	; 31
>26b8	1f 00 00 00				.dword	$0000001f
>26bc	00 00					.byte	$00,$00
.26be	20 54 51	jsr $5154		jsr	FloatCompare
.26c1	20 1e 51	jsr $511e		jsr	CompareEqual
.26c4	20 4a 50	jsr $504a		jsr	FPAssertCheck
.26c7	20 5a 50	jsr $505a		jsr	FPPushConstant	; 6.8
>26ca	cd cc cc 6c				.dword	$6ccccccd
>26ce	e4 00					.byte	$e4,$00
.26d0	20 55 59	jsr $5955		jsr	FloatSine
.26d3	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.49411335
>26d6	67 36 7e 7e				.dword	$7e7e3667
>26da	e0 00					.byte	$e0,$00
.26dc	20 8d 50	jsr $508d		jsr	FloatSubtract
.26df	20 57 50	jsr $5057		jsr	FPAbs
.26e2	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>26e5	4c 37 89 41				.dword	$4189374c
>26e9	d8 00					.byte	$d8,$00
.26eb	20 54 51	jsr $5154		jsr	FloatCompare
.26ee	20 34 51	jsr $5134		jsr	CompareLess
.26f1	20 4a 50	jsr $504a		jsr	FPAssertCheck
.26f4	20 5a 50	jsr $505a		jsr	FPPushConstant	; 6.8
>26f7	cd cc cc 6c				.dword	$6ccccccd
>26fb	e4 00					.byte	$e4,$00
.26fd	20 b5 57	jsr $57b5		jsr	FloatCosine
.2700	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.86939749
>2703	bd 6a 48 6f				.dword	$6f486abd
>2707	e1 00					.byte	$e1,$00
.2709	20 8d 50	jsr $508d		jsr	FloatSubtract
.270c	20 57 50	jsr $5057		jsr	FPAbs
.270f	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>2712	4c 37 89 41				.dword	$4189374c
>2716	d8 00					.byte	$d8,$00
.2718	20 54 51	jsr $5154		jsr	FloatCompare
.271b	20 34 51	jsr $5134		jsr	CompareLess
.271e	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2721	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.3
>2724	cd cc cc 4c				.dword	$4ccccccd
>2728	e0 00					.byte	$e0,$00
.272a	20 c6 59	jsr $59c6		jsr	FloatTangent
.272d	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.30933625
>2730	15 a9 30 4f				.dword	$4f30a915
>2734	e0 00					.byte	$e0,$00
.2736	20 8d 50	jsr $508d		jsr	FloatSubtract
.2739	20 57 50	jsr $5057		jsr	FPAbs
.273c	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>273f	4c 37 89 41				.dword	$4189374c
>2743	d8 00					.byte	$d8,$00
.2745	20 54 51	jsr $5154		jsr	FloatCompare
.2748	20 4a 50	jsr $504a		jsr	FPAssertCheck
.274b	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.642
>274e	56 0e 2d 52				.dword	$522d0e56
>2752	e1 00					.byte	$e1,$00
.2754	20 9a 56	jsr $569a		jsr	FloatArcTan
.2757	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.57073075
>275a	89 b4 0d 49				.dword	$490db489
>275e	e1 00					.byte	$e1,$00
.2760	20 8d 50	jsr $508d		jsr	FloatSubtract
.2763	20 57 50	jsr $5057		jsr	FPAbs
.2766	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>2769	4c 37 89 41				.dword	$4189374c
>276d	d8 00					.byte	$d8,$00
.276f	20 54 51	jsr $5154		jsr	FloatCompare
.2772	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2775	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.46
>2778	d7 a3 70 5d				.dword	$5d70a3d7
>277c	e2 00					.byte	$e2,$00
.277e	20 c1 57	jsr $57c1		jsr	FloatExponent
.2781	20 5a 50	jsr $505a		jsr	FPPushConstant	; 4.30595953
>2784	d2 35 e5 44				.dword	$44e535d2
>2788	e4 00					.byte	$e4,$00
.278a	20 8d 50	jsr $508d		jsr	FloatSubtract
.278d	20 57 50	jsr $5057		jsr	FPAbs
.2790	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>2793	4c 37 89 41				.dword	$4189374c
>2797	d8 00					.byte	$d8,$00
.2799	20 54 51	jsr $5154		jsr	FloatCompare
.279c	20 4a 50	jsr $504a		jsr	FPAssertCheck
.279f	20 5a 50	jsr $505a		jsr	FPPushConstant	; 70.27
>27a2	b8 1e 45 46				.dword	$46451eb8
>27a6	e8 00					.byte	$e8,$00
.27a8	20 c4 58	jsr $58c4		jsr	FloatLogarithm
.27ab	20 5a 50	jsr $505a		jsr	FPPushConstant	; 4.25234497
>27ae	e1 9a 09 44				.dword	$44099ae1
>27b2	e4 00					.byte	$e4,$00
.27b4	20 8d 50	jsr $508d		jsr	FloatSubtract
.27b7	20 57 50	jsr $5057		jsr	FPAbs
.27ba	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>27bd	4c 37 89 41				.dword	$4189374c
>27c1	d8 00					.byte	$d8,$00
.27c3	20 54 51	jsr $5154		jsr	FloatCompare
.27c6	20 4a 50	jsr $504a		jsr	FPAssertCheck
.27c9	20 5a 50	jsr $505a		jsr	FPPushConstant	; 21.9
>27cc	9a 99 99 57				.dword	$5799999a
>27d0	e6 00					.byte	$e6,$00
.27d2	20 ba 59	jsr $59ba		jsr	FloatSquareRoot
.27d5	20 5a 50	jsr $505a		jsr	FPPushConstant	; 4.67974358
>27d8	ce 3a e0 4a				.dword	$4ae03ace
>27dc	e4 00					.byte	$e4,$00
.27de	20 8d 50	jsr $508d		jsr	FloatSubtract
.27e1	20 57 50	jsr $5057		jsr	FPAbs
.27e4	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>27e7	4c 37 89 41				.dword	$4189374c
>27eb	d8 00					.byte	$d8,$00
.27ed	20 54 51	jsr $5154		jsr	FloatCompare
.27f0	20 4a 50	jsr $504a		jsr	FPAssertCheck
.27f3	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.65
>27f6	9a 99 99 69				.dword	$6999999a
>27fa	e2 00					.byte	$e2,$00
.27fc	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.9
>27ff	9a 99 99 79				.dword	$7999999a
>2803	e2 00					.byte	$e2,$00
.2805	20 38 59	jsr $5938		jsr	FloatPower
.2808	20 5a 50	jsr $505a		jsr	FPPushConstant	; 2.58952134
>280b	db 5b dd 52				.dword	$52dd5bdb
>280f	e3 00					.byte	$e3,$00
.2811	20 8d 50	jsr $508d		jsr	FloatSubtract
.2814	20 57 50	jsr $5057		jsr	FPAbs
.2817	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.01
>281a	1f 85 eb 51				.dword	$51eb851f
>281e	db 00					.byte	$db,$00
.2820	20 54 51	jsr $5154		jsr	FloatCompare
.2823	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2826	20 5a 50	jsr $505a		jsr	FPPushConstant	; -34.75953673
>2829	00 e2 84 45				.dword	$4584e200
>282d	e7 80					.byte	$e7,$80
.282f	20 31 56	jsr $5631		jsr	FloatNegate
.2832	20 5a 50	jsr $505a		jsr	FPPushConstant	; 34.75953673
>2835	00 e2 84 45				.dword	$4584e200
>2839	e7 00					.byte	$e7,$00
.283b	20 54 51	jsr $5154		jsr	FloatCompare
.283e	20 1e 51	jsr $511e		jsr	CompareEqual
.2841	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2844	20 5a 50	jsr $505a		jsr	FPPushConstant	; -34.75953673
>2847	00 e2 84 45				.dword	$4584e200
>284b	e7 80					.byte	$e7,$80
.284d	20 aa 52	jsr $52aa		jsr	FloatIntegerPart
.2850	20 5a 50	jsr $505a		jsr	FPPushConstant	; -34
>2853	22 00 00 00				.dword	$00000022
>2857	00 80					.byte	$00,$80
.2859	20 54 51	jsr $5154		jsr	FloatCompare
.285c	20 1e 51	jsr $511e		jsr	CompareEqual
.285f	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2862	20 5a 50	jsr $505a		jsr	FPPushConstant	; 11.33
>2865	0a d7 a3 5a				.dword	$5aa3d70a
>2869	e5 00					.byte	$e5,$00
.286b	20 55 59	jsr $5955		jsr	FloatSine
.286e	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.94459896
>2871	65 9e e8 78				.dword	$78e89e65
>2875	e1 80					.byte	$e1,$80
.2877	20 8d 50	jsr $508d		jsr	FloatSubtract
.287a	20 57 50	jsr $5057		jsr	FPAbs
.287d	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>2880	4c 37 89 41				.dword	$4189374c
>2884	d8 00					.byte	$d8,$00
.2886	20 54 51	jsr $5154		jsr	FloatCompare
.2889	20 34 51	jsr $5134		jsr	CompareLess
.288c	20 4a 50	jsr $504a		jsr	FPAssertCheck
.288f	20 5a 50	jsr $505a		jsr	FPPushConstant	; 11.33
>2892	0a d7 a3 5a				.dword	$5aa3d70a
>2896	e5 00					.byte	$e5,$00
.2898	20 b5 57	jsr $57b5		jsr	FloatCosine
.289b	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.32822675
>289e	15 ab 06 54				.dword	$5406ab15
>28a2	e0 00					.byte	$e0,$00
.28a4	20 8d 50	jsr $508d		jsr	FloatSubtract
.28a7	20 57 50	jsr $5057		jsr	FPAbs
.28aa	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>28ad	4c 37 89 41				.dword	$4189374c
>28b1	d8 00					.byte	$d8,$00
.28b3	20 54 51	jsr $5154		jsr	FloatCompare
.28b6	20 34 51	jsr $5134		jsr	CompareLess
.28b9	20 4a 50	jsr $504a		jsr	FPAssertCheck
.28bc	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.27
>28bf	52 b8 1e 45				.dword	$451eb852
>28c3	e0 00					.byte	$e0,$00
.28c5	20 c6 59	jsr $59c6		jsr	FloatTangent
.28c8	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.27675814
>28cb	18 9f d9 46				.dword	$46d99f18
>28cf	e0 00					.byte	$e0,$00
.28d1	20 8d 50	jsr $508d		jsr	FloatSubtract
.28d4	20 57 50	jsr $5057		jsr	FPAbs
.28d7	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>28da	4c 37 89 41				.dword	$4189374c
>28de	d8 00					.byte	$d8,$00
.28e0	20 54 51	jsr $5154		jsr	FloatCompare
.28e3	20 4a 50	jsr $504a		jsr	FPAssertCheck
.28e6	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.216
>28e9	aa f1 d2 4d				.dword	$4dd2f1aa
>28ed	e2 00					.byte	$e2,$00
.28ef	20 9a 56	jsr $569a		jsr	FloatArcTan
.28f2	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.88256414
>28f5	9b dc f7 70				.dword	$70f7dc9b
>28f9	e1 00					.byte	$e1,$00
.28fb	20 8d 50	jsr $508d		jsr	FloatSubtract
.28fe	20 57 50	jsr $5057		jsr	FPAbs
.2901	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>2904	4c 37 89 41				.dword	$4189374c
>2908	d8 00					.byte	$d8,$00
.290a	20 54 51	jsr $5154		jsr	FloatCompare
.290d	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2910	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.05
>2913	33 33 33 43				.dword	$43333333
>2917	e2 00					.byte	$e2,$00
.2919	20 c1 57	jsr $57c1		jsr	FloatExponent
.291c	20 5a 50	jsr $505a		jsr	FPPushConstant	; 2.85765112
>291f	c3 e0 71 5b				.dword	$5b71e0c3
>2923	e3 00					.byte	$e3,$00
.2925	20 8d 50	jsr $508d		jsr	FloatSubtract
.2928	20 57 50	jsr $5057		jsr	FPAbs
.292b	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>292e	4c 37 89 41				.dword	$4189374c
>2932	d8 00					.byte	$d8,$00
.2934	20 54 51	jsr $5154		jsr	FloatCompare
.2937	20 4a 50	jsr $504a		jsr	FPAssertCheck
.293a	20 5a 50	jsr $505a		jsr	FPPushConstant	; 31.86
>293d	d7 a3 70 7f				.dword	$7f70a3d7
>2941	e6 00					.byte	$e6,$00
.2943	20 c4 58	jsr $58c4		jsr	FloatLogarithm
.2946	20 5a 50	jsr $505a		jsr	FPPushConstant	; 3.4613513
>2949	cd 63 c3 6e				.dword	$6ec363cd
>294d	e3 00					.byte	$e3,$00
.294f	20 8d 50	jsr $508d		jsr	FloatSubtract
.2952	20 57 50	jsr $5057		jsr	FPAbs
.2955	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>2958	4c 37 89 41				.dword	$4189374c
>295c	d8 00					.byte	$d8,$00
.295e	20 54 51	jsr $5154		jsr	FloatCompare
.2961	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2964	20 5a 50	jsr $505a		jsr	FPPushConstant	; 57.8
>2967	9a 99 99 73				.dword	$7399999a
>296b	e7 00					.byte	$e7,$00
.296d	20 ba 59	jsr $59ba		jsr	FloatSquareRoot
.2970	20 5a 50	jsr $505a		jsr	FPPushConstant	; 7.60263112
>2973	87 60 a4 79				.dword	$79a46087
>2977	e4 00					.byte	$e4,$00
.2979	20 8d 50	jsr $508d		jsr	FloatSubtract
.297c	20 57 50	jsr $5057		jsr	FPAbs
.297f	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>2982	4c 37 89 41				.dword	$4189374c
>2986	d8 00					.byte	$d8,$00
.2988	20 54 51	jsr $5154		jsr	FloatCompare
.298b	20 4a 50	jsr $504a		jsr	FPAssertCheck
.298e	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.72666667
>2991	d7 69 03 5d				.dword	$5d0369d7
>2995	e1 00					.byte	$e1,$00
.2997	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.3
>299a	cd cc cc 4c				.dword	$4ccccccd
>299e	e0 00					.byte	$e0,$00
.29a0	20 38 59	jsr $5938		jsr	FloatPower
.29a3	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.90865825
>29a6	dd e9 4e 74				.dword	$744ee9dd
>29aa	e1 00					.byte	$e1,$00
.29ac	20 8d 50	jsr $508d		jsr	FloatSubtract
.29af	20 57 50	jsr $5057		jsr	FPAbs
.29b2	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.01
>29b5	1f 85 eb 51				.dword	$51eb851f
>29b9	db 00					.byte	$db,$00
.29bb	20 54 51	jsr $5154		jsr	FloatCompare
.29be	20 4a 50	jsr $504a		jsr	FPAssertCheck
.29c1	20 5a 50	jsr $505a		jsr	FPPushConstant	; -1.420588
>29c4	ee e9 ea 5a				.dword	$5aeae9ee
>29c8	e2 80					.byte	$e2,$80
.29ca	20 31 56	jsr $5631		jsr	FloatNegate
.29cd	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.420588
>29d0	ee e9 ea 5a				.dword	$5aeae9ee
>29d4	e2 00					.byte	$e2,$00
.29d6	20 54 51	jsr $5154		jsr	FloatCompare
.29d9	20 1e 51	jsr $511e		jsr	CompareEqual
.29dc	20 4a 50	jsr $504a		jsr	FPAssertCheck
.29df	20 5a 50	jsr $505a		jsr	FPPushConstant	; -1.420588
>29e2	ee e9 ea 5a				.dword	$5aeae9ee
>29e6	e2 80					.byte	$e2,$80
.29e8	20 aa 52	jsr $52aa		jsr	FloatIntegerPart
.29eb	20 5a 50	jsr $505a		jsr	FPPushConstant	; -1
>29ee	01 00 00 00				.dword	$00000001
>29f2	00 80					.byte	$00,$80
.29f4	20 54 51	jsr $5154		jsr	FloatCompare
.29f7	20 1e 51	jsr $511e		jsr	CompareEqual
.29fa	20 4a 50	jsr $504a		jsr	FPAssertCheck
.29fd	20 5a 50	jsr $505a		jsr	FPPushConstant	; -10.1
>2a00	cd cc cc 50				.dword	$50cccccd
>2a04	e5 80					.byte	$e5,$80
.2a06	20 55 59	jsr $5955		jsr	FloatSine
.2a09	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.62507065
>2a0c	a8 50 02 50				.dword	$500250a8
>2a10	e1 00					.byte	$e1,$00
.2a12	20 8d 50	jsr $508d		jsr	FloatSubtract
.2a15	20 57 50	jsr $5057		jsr	FPAbs
.2a18	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>2a1b	4c 37 89 41				.dword	$4189374c
>2a1f	d8 00					.byte	$d8,$00
.2a21	20 54 51	jsr $5154		jsr	FloatCompare
.2a24	20 34 51	jsr $5134		jsr	CompareLess
.2a27	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2a2a	20 5a 50	jsr $505a		jsr	FPPushConstant	; -10.1
>2a2d	cd cc cc 50				.dword	$50cccccd
>2a31	e5 80					.byte	$e5,$80
.2a33	20 b5 57	jsr $57b5		jsr	FloatCosine
.2a36	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.78056818
>2a39	7b a8 e9 63				.dword	$63e9a87b
>2a3d	e1 80					.byte	$e1,$80
.2a3f	20 8d 50	jsr $508d		jsr	FloatSubtract
.2a42	20 57 50	jsr $5057		jsr	FPAbs
.2a45	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>2a48	4c 37 89 41				.dword	$4189374c
>2a4c	d8 00					.byte	$d8,$00
.2a4e	20 54 51	jsr $5154		jsr	FloatCompare
.2a51	20 34 51	jsr $5134		jsr	CompareLess
.2a54	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2a57	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.17
>2a5a	71 3d 0a 57				.dword	$570a3d71
>2a5e	df 00					.byte	$df,$00
.2a60	20 c6 59	jsr $59c6		jsr	FloatTangent
.2a63	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.17165682
>2a66	18 67 e3 57				.dword	$57e36718
>2a6a	df 00					.byte	$df,$00
.2a6c	20 8d 50	jsr $508d		jsr	FloatSubtract
.2a6f	20 57 50	jsr $5057		jsr	FPAbs
.2a72	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>2a75	4c 37 89 41				.dword	$4189374c
>2a79	d8 00					.byte	$d8,$00
.2a7b	20 54 51	jsr $5154		jsr	FloatCompare
.2a7e	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2a81	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.692
>2a84	5e ba 49 6c				.dword	$6c49ba5e
>2a88	e2 00					.byte	$e2,$00
.2a8a	20 9a 56	jsr $569a		jsr	FloatArcTan
.2a8d	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.03700849
>2a90	dc 58 5e 42				.dword	$425e58dc
>2a94	e2 00					.byte	$e2,$00
.2a96	20 8d 50	jsr $508d		jsr	FloatSubtract
.2a99	20 57 50	jsr $5057		jsr	FPAbs
.2a9c	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>2a9f	4c 37 89 41				.dword	$4189374c
>2aa3	d8 00					.byte	$d8,$00
.2aa5	20 54 51	jsr $5154		jsr	FloatCompare
.2aa8	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2aab	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.62
>2aae	7b 14 ae 67				.dword	$67ae147b
>2ab2	e2 00					.byte	$e2,$00
.2ab4	20 c1 57	jsr $57c1		jsr	FloatExponent
.2ab7	20 5a 50	jsr $505a		jsr	FPPushConstant	; 5.05309032
>2aba	3c 75 d9 50				.dword	$50d9753c
>2abe	e4 00					.byte	$e4,$00
.2ac0	20 8d 50	jsr $508d		jsr	FloatSubtract
.2ac3	20 57 50	jsr $5057		jsr	FPAbs
.2ac6	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>2ac9	4c 37 89 41				.dword	$4189374c
>2acd	d8 00					.byte	$d8,$00
.2acf	20 54 51	jsr $5154		jsr	FloatCompare
.2ad2	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2ad5	20 5a 50	jsr $505a		jsr	FPPushConstant	; 10.25
>2ad8	00 00 00 52				.dword	$52000000
>2adc	e5 00					.byte	$e5,$00
.2ade	20 c4 58	jsr $58c4		jsr	FloatLogarithm
.2ae1	20 5a 50	jsr $505a		jsr	FPPushConstant	; 2.32727771
>2ae4	1b 0f 79 4a				.dword	$4a790f1b
>2ae8	e3 00					.byte	$e3,$00
.2aea	20 8d 50	jsr $508d		jsr	FloatSubtract
.2aed	20 57 50	jsr $5057		jsr	FPAbs
.2af0	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>2af3	4c 37 89 41				.dword	$4189374c
>2af7	d8 00					.byte	$d8,$00
.2af9	20 54 51	jsr $5154		jsr	FloatCompare
.2afc	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2aff	20 5a 50	jsr $505a		jsr	FPPushConstant	; 90.51
>2b02	5c 8f 82 5a				.dword	$5a828f5c
>2b06	e8 00					.byte	$e8,$00
.2b08	20 ba 59	jsr $59ba		jsr	FloatSquareRoot
.2b0b	20 5a 50	jsr $505a		jsr	FPPushConstant	; 9.51367437
>2b0e	4f 01 1c 4c				.dword	$4c1c014f
>2b12	e5 00					.byte	$e5,$00
.2b14	20 8d 50	jsr $508d		jsr	FloatSubtract
.2b17	20 57 50	jsr $5057		jsr	FPAbs
.2b1a	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>2b1d	4c 37 89 41				.dword	$4189374c
>2b21	d8 00					.byte	$d8,$00
.2b23	20 54 51	jsr $5154		jsr	FloatCompare
.2b26	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2b29	20 5a 50	jsr $505a		jsr	FPPushConstant	; 2.73666667
>2b2c	fb c5 92 57				.dword	$5792c5fb
>2b30	e3 00					.byte	$e3,$00
.2b32	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.8
>2b35	66 66 66 66				.dword	$66666666
>2b39	e1 00					.byte	$e1,$00
.2b3b	20 38 59	jsr $5938		jsr	FloatPower
.2b3e	20 5a 50	jsr $505a		jsr	FPPushConstant	; 2.23757459
>2b41	07 36 9a 47				.dword	$479a3607
>2b45	e3 00					.byte	$e3,$00
.2b47	20 8d 50	jsr $508d		jsr	FloatSubtract
.2b4a	20 57 50	jsr $5057		jsr	FPAbs
.2b4d	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.01
>2b50	1f 85 eb 51				.dword	$51eb851f
>2b54	db 00					.byte	$db,$00
.2b56	20 54 51	jsr $5154		jsr	FloatCompare
.2b59	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2b5c	20 5a 50	jsr $505a		jsr	FPPushConstant	; -9.32040172
>2b5f	c7 2e 90 4a				.dword	$4a902ec7
>2b63	e5 80					.byte	$e5,$80
.2b65	20 31 56	jsr $5631		jsr	FloatNegate
.2b68	20 5a 50	jsr $505a		jsr	FPPushConstant	; 9.32040172
>2b6b	c7 2e 90 4a				.dword	$4a902ec7
>2b6f	e5 00					.byte	$e5,$00
.2b71	20 54 51	jsr $5154		jsr	FloatCompare
.2b74	20 1e 51	jsr $511e		jsr	CompareEqual
.2b77	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2b7a	20 5a 50	jsr $505a		jsr	FPPushConstant	; -9.32040172
>2b7d	c7 2e 90 4a				.dword	$4a902ec7
>2b81	e5 80					.byte	$e5,$80
.2b83	20 aa 52	jsr $52aa		jsr	FloatIntegerPart
.2b86	20 5a 50	jsr $505a		jsr	FPPushConstant	; -9
>2b89	09 00 00 00				.dword	$00000009
>2b8d	00 80					.byte	$00,$80
.2b8f	20 54 51	jsr $5154		jsr	FloatCompare
.2b92	20 1e 51	jsr $511e		jsr	CompareEqual
.2b95	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2b98	20 5a 50	jsr $505a		jsr	FPPushConstant	; 10.06
>2b9b	48 e1 7a 50				.dword	$507ae148
>2b9f	e5 00					.byte	$e5,$00
.2ba1	20 55 59	jsr $5955		jsr	FloatSine
.2ba4	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.59335626
>2ba7	12 19 f3 4b				.dword	$4bf31912
>2bab	e1 80					.byte	$e1,$80
.2bad	20 8d 50	jsr $508d		jsr	FloatSubtract
.2bb0	20 57 50	jsr $5057		jsr	FPAbs
.2bb3	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>2bb6	4c 37 89 41				.dword	$4189374c
>2bba	d8 00					.byte	$d8,$00
.2bbc	20 54 51	jsr $5154		jsr	FloatCompare
.2bbf	20 34 51	jsr $5134		jsr	CompareLess
.2bc2	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2bc5	20 5a 50	jsr $505a		jsr	FPPushConstant	; 10.06
>2bc8	48 e1 7a 50				.dword	$507ae148
>2bcc	e5 00					.byte	$e5,$00
.2bce	20 b5 57	jsr $57b5		jsr	FloatCosine
.2bd1	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.80493997
>2bd4	df 45 08 67				.dword	$670845df
>2bd8	e1 80					.byte	$e1,$80
.2bda	20 8d 50	jsr $508d		jsr	FloatSubtract
.2bdd	20 57 50	jsr $5057		jsr	FPAbs
.2be0	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>2be3	4c 37 89 41				.dword	$4189374c
>2be7	d8 00					.byte	$d8,$00
.2be9	20 54 51	jsr $5154		jsr	FloatCompare
.2bec	20 34 51	jsr $5134		jsr	CompareLess
.2bef	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2bf2	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.38
>2bf5	14 ae 47 61				.dword	$6147ae14
>2bf9	e0 00					.byte	$e0,$00
.2bfb	20 c6 59	jsr $59c6		jsr	FloatTangent
.2bfe	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.39941272
>2c01	7a e9 3f 66				.dword	$663fe97a
>2c05	e0 00					.byte	$e0,$00
.2c07	20 8d 50	jsr $508d		jsr	FloatSubtract
.2c0a	20 57 50	jsr $5057		jsr	FPAbs
.2c0d	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>2c10	4c 37 89 41				.dword	$4189374c
>2c14	d8 00					.byte	$d8,$00
.2c16	20 54 51	jsr $5154		jsr	FloatCompare
.2c19	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2c1c	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.788
>2c1f	8d 97 6e 72				.dword	$726e978d
>2c23	e2 00					.byte	$e2,$00
.2c25	20 9a 56	jsr $569a		jsr	FloatArcTan
.2c28	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.06085315
>2c2b	9c 04 e5 43				.dword	$43e5049c
>2c2f	e2 00					.byte	$e2,$00
.2c31	20 8d 50	jsr $508d		jsr	FloatSubtract
.2c34	20 57 50	jsr $5057		jsr	FPAbs
.2c37	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>2c3a	4c 37 89 41				.dword	$4189374c
>2c3e	d8 00					.byte	$d8,$00
.2c40	20 54 51	jsr $5154		jsr	FloatCompare
.2c43	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2c46	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.28
>2c49	1f 85 eb 51				.dword	$51eb851f
>2c4d	e2 00					.byte	$e2,$00
.2c4f	20 c1 57	jsr $57c1		jsr	FloatExponent
.2c52	20 5a 50	jsr $505a		jsr	FPPushConstant	; 3.59663973
>2c55	34 ac 17 73				.dword	$7317ac34
>2c59	e3 00					.byte	$e3,$00
.2c5b	20 8d 50	jsr $508d		jsr	FloatSubtract
.2c5e	20 57 50	jsr $5057		jsr	FPAbs
.2c61	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>2c64	4c 37 89 41				.dword	$4189374c
>2c68	d8 00					.byte	$d8,$00
.2c6a	20 54 51	jsr $5154		jsr	FloatCompare
.2c6d	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2c70	20 5a 50	jsr $505a		jsr	FPPushConstant	; 82.23
>2c73	48 e1 3a 52				.dword	$523ae148
>2c77	e8 00					.byte	$e8,$00
.2c79	20 c4 58	jsr $58c4		jsr	FloatLogarithm
.2c7c	20 5a 50	jsr $505a		jsr	FPPushConstant	; 4.4095202
>2c7f	0e 65 8d 46				.dword	$468d650e
>2c83	e4 00					.byte	$e4,$00
.2c85	20 8d 50	jsr $508d		jsr	FloatSubtract
.2c88	20 57 50	jsr $5057		jsr	FPAbs
.2c8b	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>2c8e	4c 37 89 41				.dword	$4189374c
>2c92	d8 00					.byte	$d8,$00
.2c94	20 54 51	jsr $5154		jsr	FloatCompare
.2c97	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2c9a	20 5a 50	jsr $505a		jsr	FPPushConstant	; 14.47
>2c9d	5c 8f c2 73				.dword	$73c28f5c
>2ca1	e5 00					.byte	$e5,$00
.2ca3	20 ba 59	jsr $59ba		jsr	FloatSquareRoot
.2ca6	20 5a 50	jsr $505a		jsr	FPPushConstant	; 3.80394532
>2ca9	89 eb b9 79				.dword	$79b9eb89
>2cad	e3 00					.byte	$e3,$00
.2caf	20 8d 50	jsr $508d		jsr	FloatSubtract
.2cb2	20 57 50	jsr $5057		jsr	FPAbs
.2cb5	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>2cb8	4c 37 89 41				.dword	$4189374c
>2cbc	d8 00					.byte	$d8,$00
.2cbe	20 54 51	jsr $5154		jsr	FloatCompare
.2cc1	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2cc4	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.03333333
>2cc7	1f 22 22 42				.dword	$4222221f
>2ccb	e2 00					.byte	$e2,$00
.2ccd	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.6
>2cd0	66 66 66 66				.dword	$66666666
>2cd4	e2 00					.byte	$e2,$00
.2cd6	20 38 59	jsr $5938		jsr	FloatPower
.2cd9	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.05386432
>2cdc	55 83 72 43				.dword	$43728355
>2ce0	e2 00					.byte	$e2,$00
.2ce2	20 8d 50	jsr $508d		jsr	FloatSubtract
.2ce5	20 57 50	jsr $5057		jsr	FPAbs
.2ce8	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.01
>2ceb	1f 85 eb 51				.dword	$51eb851f
>2cef	db 00					.byte	$db,$00
.2cf1	20 54 51	jsr $5154		jsr	FloatCompare
.2cf4	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2cf7	20 5a 50	jsr $505a		jsr	FPPushConstant	; -32.77597797
>2cfa	fc 4c 8d 41				.dword	$418d4cfc
>2cfe	e7 80					.byte	$e7,$80
.2d00	20 31 56	jsr $5631		jsr	FloatNegate
.2d03	20 5a 50	jsr $505a		jsr	FPPushConstant	; 32.77597797
>2d06	fc 4c 8d 41				.dword	$418d4cfc
>2d0a	e7 00					.byte	$e7,$00
.2d0c	20 54 51	jsr $5154		jsr	FloatCompare
.2d0f	20 1e 51	jsr $511e		jsr	CompareEqual
.2d12	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2d15	20 5a 50	jsr $505a		jsr	FPPushConstant	; -32.77597797
>2d18	fc 4c 8d 41				.dword	$418d4cfc
>2d1c	e7 80					.byte	$e7,$80
.2d1e	20 aa 52	jsr $52aa		jsr	FloatIntegerPart
.2d21	20 5a 50	jsr $505a		jsr	FPPushConstant	; -32
>2d24	20 00 00 00				.dword	$00000020
>2d28	00 80					.byte	$00,$80
.2d2a	20 54 51	jsr $5154		jsr	FloatCompare
.2d2d	20 1e 51	jsr $511e		jsr	CompareEqual
.2d30	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2d33	20 5a 50	jsr $505a		jsr	FPPushConstant	; -12.6
>2d36	cd cc cc 64				.dword	$64cccccd
>2d3a	e5 80					.byte	$e5,$80
.2d3c	20 55 59	jsr $5955		jsr	FloatSine
.2d3f	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.03362305
>2d42	61 29 dc 44				.dword	$44dc2961
>2d46	dd 80					.byte	$dd,$80
.2d48	20 8d 50	jsr $508d		jsr	FloatSubtract
.2d4b	20 57 50	jsr $5057		jsr	FPAbs
.2d4e	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>2d51	4c 37 89 41				.dword	$4189374c
>2d55	d8 00					.byte	$d8,$00
.2d57	20 54 51	jsr $5154		jsr	FloatCompare
.2d5a	20 34 51	jsr $5134		jsr	CompareLess
.2d5d	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2d60	20 5a 50	jsr $505a		jsr	FPPushConstant	; -12.6
>2d63	cd cc cc 64				.dword	$64cccccd
>2d67	e5 80					.byte	$e5,$80
.2d69	20 b5 57	jsr $57b5		jsr	FloatCosine
.2d6c	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.99943459
>2d6f	ff 78 ed 7f				.dword	$7fed78ff
>2d73	e1 00					.byte	$e1,$00
.2d75	20 8d 50	jsr $508d		jsr	FloatSubtract
.2d78	20 57 50	jsr $5057		jsr	FPAbs
.2d7b	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>2d7e	4c 37 89 41				.dword	$4189374c
>2d82	d8 00					.byte	$d8,$00
.2d84	20 54 51	jsr $5154		jsr	FloatCompare
.2d87	20 34 51	jsr $5134		jsr	CompareLess
.2d8a	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2d8d	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.4
>2d90	66 66 66 66				.dword	$66666666
>2d94	e0 00					.byte	$e0,$00
.2d96	20 c6 59	jsr $59c6		jsr	FloatTangent
.2d99	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.42279322
>2d9c	2d 2d 3c 6c				.dword	$6c3c2d2d
>2da0	e0 00					.byte	$e0,$00
.2da2	20 8d 50	jsr $508d		jsr	FloatSubtract
.2da5	20 57 50	jsr $5057		jsr	FPAbs
.2da8	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>2dab	4c 37 89 41				.dword	$4189374c
>2daf	d8 00					.byte	$d8,$00
.2db1	20 54 51	jsr $5154		jsr	FloatCompare
.2db4	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2db7	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.884
>2dba	bc 74 93 78				.dword	$789374bc
>2dbe	e2 00					.byte	$e2,$00
.2dc0	20 9a 56	jsr $569a		jsr	FloatArcTan
.2dc3	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.08282466
>2dc6	ce ff 4c 45				.dword	$454cffce
>2dca	e2 00					.byte	$e2,$00
.2dcc	20 8d 50	jsr $508d		jsr	FloatSubtract
.2dcf	20 57 50	jsr $5057		jsr	FPAbs
.2dd2	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>2dd5	4c 37 89 41				.dword	$4189374c
>2dd9	d8 00					.byte	$d8,$00
.2ddb	20 54 51	jsr $5154		jsr	FloatCompare
.2dde	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2de1	20 5a 50	jsr $505a		jsr	FPPushConstant	; -1.14
>2de4	8f c2 f5 48				.dword	$48f5c28f
>2de8	e2 80					.byte	$e2,$80
.2dea	20 c1 57	jsr $57c1		jsr	FloatExponent
.2ded	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.31981902
>2df0	c8 a8 df 51				.dword	$51dfa8c8
>2df4	e0 00					.byte	$e0,$00
.2df6	20 8d 50	jsr $508d		jsr	FloatSubtract
.2df9	20 57 50	jsr $5057		jsr	FPAbs
.2dfc	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>2dff	4c 37 89 41				.dword	$4189374c
>2e03	d8 00					.byte	$d8,$00
.2e05	20 54 51	jsr $5154		jsr	FloatCompare
.2e08	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2e0b	20 5a 50	jsr $505a		jsr	FPPushConstant	; 93.92
>2e0e	1f 85 eb 5d				.dword	$5deb851f
>2e12	e8 00					.byte	$e8,$00
.2e14	20 c4 58	jsr $58c4		jsr	FloatLogarithm
.2e17	20 5a 50	jsr $505a		jsr	FPPushConstant	; 4.54244336
>2e1a	17 d9 ad 48				.dword	$48add917
>2e1e	e4 00					.byte	$e4,$00
.2e20	20 8d 50	jsr $508d		jsr	FloatSubtract
.2e23	20 57 50	jsr $5057		jsr	FPAbs
.2e26	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>2e29	4c 37 89 41				.dword	$4189374c
>2e2d	d8 00					.byte	$d8,$00
.2e2f	20 54 51	jsr $5154		jsr	FloatCompare
.2e32	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2e35	20 5a 50	jsr $505a		jsr	FPPushConstant	; 84.89
>2e38	0a d7 e3 54				.dword	$54e3d70a
>2e3c	e8 00					.byte	$e8,$00
.2e3e	20 ba 59	jsr $59ba		jsr	FloatSquareRoot
.2e41	20 5a 50	jsr $505a		jsr	FPPushConstant	; 9.21357694
>2e44	d4 67 b5 49				.dword	$49b567d4
>2e48	e5 00					.byte	$e5,$00
.2e4a	20 8d 50	jsr $508d		jsr	FloatSubtract
.2e4d	20 57 50	jsr $5057		jsr	FPAbs
.2e50	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>2e53	4c 37 89 41				.dword	$4189374c
>2e57	d8 00					.byte	$d8,$00
.2e59	20 54 51	jsr $5154		jsr	FloatCompare
.2e5c	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2e5f	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.5
>2e62	00 00 00 60				.dword	$60000000
>2e66	e2 00					.byte	$e2,$00
.2e68	20 5a 50	jsr $505a		jsr	FPPushConstant	; 2.0
>2e6b	02 00 00 00				.dword	$00000002
>2e6f	00 00					.byte	$00,$00
.2e71	20 38 59	jsr $5938		jsr	FloatPower
.2e74	20 5a 50	jsr $505a		jsr	FPPushConstant	; 2.25
>2e77	00 00 00 48				.dword	$48000000
>2e7b	e3 00					.byte	$e3,$00
.2e7d	20 8d 50	jsr $508d		jsr	FloatSubtract
.2e80	20 57 50	jsr $5057		jsr	FPAbs
.2e83	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.01
>2e86	1f 85 eb 51				.dword	$51eb851f
>2e8a	db 00					.byte	$db,$00
.2e8c	20 54 51	jsr $5154		jsr	FloatCompare
.2e8f	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2e92	20 5a 50	jsr $505a		jsr	FPPushConstant	; -6.03612213
>2e95	cc f4 93 60				.dword	$6093f4cc
>2e99	e4 80					.byte	$e4,$80
.2e9b	20 31 56	jsr $5631		jsr	FloatNegate
.2e9e	20 5a 50	jsr $505a		jsr	FPPushConstant	; 6.03612213
>2ea1	cc f4 93 60				.dword	$6093f4cc
>2ea5	e4 00					.byte	$e4,$00
.2ea7	20 54 51	jsr $5154		jsr	FloatCompare
.2eaa	20 1e 51	jsr $511e		jsr	CompareEqual
.2ead	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2eb0	20 5a 50	jsr $505a		jsr	FPPushConstant	; -6.03612213
>2eb3	cc f4 93 60				.dword	$6093f4cc
>2eb7	e4 80					.byte	$e4,$80
.2eb9	20 aa 52	jsr $52aa		jsr	FloatIntegerPart
.2ebc	20 5a 50	jsr $505a		jsr	FPPushConstant	; -6
>2ebf	06 00 00 00				.dword	$00000006
>2ec3	00 80					.byte	$00,$80
.2ec5	20 54 51	jsr $5154		jsr	FloatCompare
.2ec8	20 1e 51	jsr $511e		jsr	CompareEqual
.2ecb	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2ece	20 5a 50	jsr $505a		jsr	FPPushConstant	; 11.6
>2ed1	cd cc cc 5c				.dword	$5ccccccd
>2ed5	e5 00					.byte	$e5,$00
.2ed7	20 55 59	jsr $5955		jsr	FloatSine
.2eda	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.82282859
>2edd	7e 72 52 69				.dword	$6952727e
>2ee1	e1 80					.byte	$e1,$80
.2ee3	20 8d 50	jsr $508d		jsr	FloatSubtract
.2ee6	20 57 50	jsr $5057		jsr	FPAbs
.2ee9	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>2eec	4c 37 89 41				.dword	$4189374c
>2ef0	d8 00					.byte	$d8,$00
.2ef2	20 54 51	jsr $5154		jsr	FloatCompare
.2ef5	20 34 51	jsr $5134		jsr	CompareLess
.2ef8	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2efb	20 5a 50	jsr $505a		jsr	FPPushConstant	; 11.6
>2efe	cd cc cc 5c				.dword	$5ccccccd
>2f02	e5 00					.byte	$e5,$00
.2f04	20 b5 57	jsr $57b5		jsr	FloatCosine
.2f07	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.56828963
>2f0a	f0 b6 bd 48				.dword	$48bdb6f0
>2f0e	e1 00					.byte	$e1,$00
.2f10	20 8d 50	jsr $508d		jsr	FloatSubtract
.2f13	20 57 50	jsr $5057		jsr	FPAbs
.2f16	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>2f19	4c 37 89 41				.dword	$4189374c
>2f1d	d8 00					.byte	$d8,$00
.2f1f	20 54 51	jsr $5154		jsr	FloatCompare
.2f22	20 34 51	jsr $5134		jsr	CompareLess
.2f25	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2f28	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.21
>2f2b	b8 1e 85 6b				.dword	$6b851eb8
>2f2f	df 00					.byte	$df,$00
.2f31	20 c6 59	jsr $59c6		jsr	FloatTangent
.2f34	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.21314244
>2f37	82 01 21 6d				.dword	$6d210182
>2f3b	df 00					.byte	$df,$00
.2f3d	20 8d 50	jsr $508d		jsr	FloatSubtract
.2f40	20 57 50	jsr $5057		jsr	FPAbs
.2f43	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>2f46	4c 37 89 41				.dword	$4189374c
>2f4a	d8 00					.byte	$d8,$00
.2f4c	20 54 51	jsr $5154		jsr	FloatCompare
.2f4f	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2f52	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.881
>2f55	d3 4d 62 78				.dword	$78624dd3
>2f59	e2 00					.byte	$e2,$00
.2f5b	20 9a 56	jsr $569a		jsr	FloatArcTan
.2f5e	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.08216442
>2f61	8e 2e 42 45				.dword	$45422e8e
>2f65	e2 00					.byte	$e2,$00
.2f67	20 8d 50	jsr $508d		jsr	FloatSubtract
.2f6a	20 57 50	jsr $5057		jsr	FPAbs
.2f6d	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>2f70	4c 37 89 41				.dword	$4189374c
>2f74	d8 00					.byte	$d8,$00
.2f76	20 54 51	jsr $5154		jsr	FloatCompare
.2f79	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2f7c	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.08
>2f7f	52 b8 1e 45				.dword	$451eb852
>2f83	e2 00					.byte	$e2,$00
.2f85	20 c1 57	jsr $57c1		jsr	FloatExponent
.2f88	20 5a 50	jsr $505a		jsr	FPPushConstant	; 2.94467955
>2f8b	9c d0 3a 5e				.dword	$5e3ad09c
>2f8f	e3 00					.byte	$e3,$00
.2f91	20 8d 50	jsr $508d		jsr	FloatSubtract
.2f94	20 57 50	jsr $5057		jsr	FPAbs
.2f97	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>2f9a	4c 37 89 41				.dword	$4189374c
>2f9e	d8 00					.byte	$d8,$00
.2fa0	20 54 51	jsr $5154		jsr	FloatCompare
.2fa3	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2fa6	20 5a 50	jsr $505a		jsr	FPPushConstant	; 86.67
>2fa9	1f 85 ab 56				.dword	$56ab851f
>2fad	e8 00					.byte	$e8,$00
.2faf	20 c4 58	jsr $58c4		jsr	FloatLogarithm
.2fb2	20 5a 50	jsr $505a		jsr	FPPushConstant	; 4.4621078
>2fb5	26 cb 64 47				.dword	$4764cb26
>2fb9	e4 00					.byte	$e4,$00
.2fbb	20 8d 50	jsr $508d		jsr	FloatSubtract
.2fbe	20 57 50	jsr $5057		jsr	FPAbs
.2fc1	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>2fc4	4c 37 89 41				.dword	$4189374c
>2fc8	d8 00					.byte	$d8,$00
.2fca	20 54 51	jsr $5154		jsr	FloatCompare
.2fcd	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2fd0	20 5a 50	jsr $505a		jsr	FPPushConstant	; 9.89
>2fd3	52 b8 1e 4f				.dword	$4f1eb852
>2fd7	e5 00					.byte	$e5,$00
.2fd9	20 ba 59	jsr $59ba		jsr	FloatSquareRoot
.2fdc	20 5a 50	jsr $505a		jsr	FPPushConstant	; 3.14483704
>2fdf	4a 81 a2 64				.dword	$64a2814a
>2fe3	e3 00					.byte	$e3,$00
.2fe5	20 8d 50	jsr $508d		jsr	FloatSubtract
.2fe8	20 57 50	jsr $5057		jsr	FPAbs
.2feb	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>2fee	4c 37 89 41				.dword	$4189374c
>2ff2	d8 00					.byte	$d8,$00
.2ff4	20 54 51	jsr $5154		jsr	FloatCompare
.2ff7	20 4a 50	jsr $504a		jsr	FPAssertCheck
.2ffa	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.67333333
>2ffd	5c c9 2f 56				.dword	$562fc95c
>3001	e1 00					.byte	$e1,$00
.3003	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.3
>3006	33 33 33 53				.dword	$53333333
>300a	e2 00					.byte	$e2,$00
.300c	20 38 59	jsr $5938		jsr	FloatPower
.300f	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.5979972
>3012	19 2c 8b 4c				.dword	$4c8b2c19
>3016	e1 00					.byte	$e1,$00
.3018	20 8d 50	jsr $508d		jsr	FloatSubtract
.301b	20 57 50	jsr $5057		jsr	FPAbs
.301e	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.01
>3021	1f 85 eb 51				.dword	$51eb851f
>3025	db 00					.byte	$db,$00
.3027	20 54 51	jsr $5154		jsr	FloatCompare
.302a	20 4a 50	jsr $504a		jsr	FPAssertCheck
.302d	20 5a 50	jsr $505a		jsr	FPPushConstant	; -76.02931886
>3030	71 81 07 4c				.dword	$4c078171
>3034	e8 80					.byte	$e8,$80
.3036	20 31 56	jsr $5631		jsr	FloatNegate
.3039	20 5a 50	jsr $505a		jsr	FPPushConstant	; 76.02931886
>303c	71 81 07 4c				.dword	$4c078171
>3040	e8 00					.byte	$e8,$00
.3042	20 54 51	jsr $5154		jsr	FloatCompare
.3045	20 1e 51	jsr $511e		jsr	CompareEqual
.3048	20 4a 50	jsr $504a		jsr	FPAssertCheck
.304b	20 5a 50	jsr $505a		jsr	FPPushConstant	; -76.02931886
>304e	71 81 07 4c				.dword	$4c078171
>3052	e8 80					.byte	$e8,$80
.3054	20 aa 52	jsr $52aa		jsr	FloatIntegerPart
.3057	20 5a 50	jsr $505a		jsr	FPPushConstant	; -76
>305a	4c 00 00 00				.dword	$0000004c
>305e	00 80					.byte	$00,$80
.3060	20 54 51	jsr $5154		jsr	FloatCompare
.3063	20 1e 51	jsr $511e		jsr	CompareEqual
.3066	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3069	20 5a 50	jsr $505a		jsr	FPPushConstant	; 11.51
>306c	e1 7a 14 5c				.dword	$5c147ae1
>3070	e5 00					.byte	$e5,$00
.3072	20 55 59	jsr $5955		jsr	FloatSine
.3075	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.87057544
>3078	1a 04 6f 6f				.dword	$6f6f041a
>307c	e1 80					.byte	$e1,$80
.307e	20 8d 50	jsr $508d		jsr	FloatSubtract
.3081	20 57 50	jsr $5057		jsr	FPAbs
.3084	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>3087	4c 37 89 41				.dword	$4189374c
>308b	d8 00					.byte	$d8,$00
.308d	20 54 51	jsr $5154		jsr	FloatCompare
.3090	20 34 51	jsr $5134		jsr	CompareLess
.3093	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3096	20 5a 50	jsr $505a		jsr	FPPushConstant	; 11.51
>3099	e1 7a 14 5c				.dword	$5c147ae1
>309d	e5 00					.byte	$e5,$00
.309f	20 b5 57	jsr $57b5		jsr	FloatCosine
.30a2	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.49203497
>30a5	f9 00 f6 7d				.dword	$7df600f9
>30a9	e0 00					.byte	$e0,$00
.30ab	20 8d 50	jsr $508d		jsr	FloatSubtract
.30ae	20 57 50	jsr $5057		jsr	FPAbs
.30b1	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>30b4	4c 37 89 41				.dword	$4189374c
>30b8	d8 00					.byte	$d8,$00
.30ba	20 54 51	jsr $5154		jsr	FloatCompare
.30bd	20 34 51	jsr $5134		jsr	CompareLess
.30c0	20 4a 50	jsr $504a		jsr	FPAssertCheck
.30c3	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.14
>30c6	7b 14 ae 47				.dword	$47ae147b
>30ca	df 00					.byte	$df,$00
.30cc	20 c6 59	jsr $59c6		jsr	FloatTangent
.30cf	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.14092189
>30d2	fa e9 26 48				.dword	$4826e9fa
>30d6	df 00					.byte	$df,$00
.30d8	20 8d 50	jsr $508d		jsr	FloatSubtract
.30db	20 57 50	jsr $5057		jsr	FPAbs
.30de	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>30e1	4c 37 89 41				.dword	$4189374c
>30e5	d8 00					.byte	$d8,$00
.30e7	20 54 51	jsr $5154		jsr	FloatCompare
.30ea	20 4a 50	jsr $504a		jsr	FPAssertCheck
.30ed	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.352
>30f0	02 2b 87 56				.dword	$56872b02
>30f4	e2 00					.byte	$e2,$00
.30f6	20 9a 56	jsr $569a		jsr	FloatArcTan
.30f9	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.93395544
>30fc	13 da 8b 77				.dword	$778bda13
>3100	e1 00					.byte	$e1,$00
.3102	20 8d 50	jsr $508d		jsr	FloatSubtract
.3105	20 57 50	jsr $5057		jsr	FPAbs
.3108	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>310b	4c 37 89 41				.dword	$4189374c
>310f	d8 00					.byte	$d8,$00
.3111	20 54 51	jsr $5154		jsr	FloatCompare
.3114	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3117	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.32
>311a	1f 85 eb 51				.dword	$51eb851f
>311e	e0 80					.byte	$e0,$80
.3120	20 c1 57	jsr $57c1		jsr	FloatExponent
.3123	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.72614904
>3126	a5 73 f2 5c				.dword	$5cf273a5
>312a	e1 00					.byte	$e1,$00
.312c	20 8d 50	jsr $508d		jsr	FloatSubtract
.312f	20 57 50	jsr $5057		jsr	FPAbs
.3132	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>3135	4c 37 89 41				.dword	$4189374c
>3139	d8 00					.byte	$d8,$00
.313b	20 54 51	jsr $5154		jsr	FloatCompare
.313e	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3141	20 5a 50	jsr $505a		jsr	FPPushConstant	; 63.17
>3144	3d 0a 57 7e				.dword	$7e570a3d
>3148	e7 00					.byte	$e7,$00
.314a	20 c4 58	jsr $58c4		jsr	FloatLogarithm
.314d	20 5a 50	jsr $505a		jsr	FPPushConstant	; 4.1458295
>3150	50 51 55 42				.dword	$42555150
>3154	e4 00					.byte	$e4,$00
.3156	20 8d 50	jsr $508d		jsr	FloatSubtract
.3159	20 57 50	jsr $5057		jsr	FPAbs
.315c	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>315f	4c 37 89 41				.dword	$4189374c
>3163	d8 00					.byte	$d8,$00
.3165	20 54 51	jsr $5154		jsr	FloatCompare
.3168	20 4a 50	jsr $504a		jsr	FPAssertCheck
.316b	20 5a 50	jsr $505a		jsr	FPPushConstant	; 28.73
>316e	1f 85 eb 72				.dword	$72eb851f
>3172	e6 00					.byte	$e6,$00
.3174	20 ba 59	jsr $59ba		jsr	FloatSquareRoot
.3177	20 5a 50	jsr $505a		jsr	FPPushConstant	; 5.36003731
>317a	7b b6 c2 55				.dword	$55c2b67b
>317e	e4 00					.byte	$e4,$00
.3180	20 8d 50	jsr $508d		jsr	FloatSubtract
.3183	20 57 50	jsr $5057		jsr	FPAbs
.3186	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>3189	4c 37 89 41				.dword	$4189374c
>318d	d8 00					.byte	$d8,$00
.318f	20 54 51	jsr $5154		jsr	FloatCompare
.3192	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3195	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.24333333
>3198	f6 c5 92 4f				.dword	$4f92c5f6
>319c	e2 00					.byte	$e2,$00
.319e	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.3
>31a1	cd cc cc 4c				.dword	$4ccccccd
>31a5	e0 00					.byte	$e0,$00
.31a7	20 38 59	jsr $5938		jsr	FloatPower
.31aa	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.06752062
>31ad	02 42 52 44				.dword	$44524202
>31b1	e2 00					.byte	$e2,$00
.31b3	20 8d 50	jsr $508d		jsr	FloatSubtract
.31b6	20 57 50	jsr $5057		jsr	FPAbs
.31b9	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.01
>31bc	1f 85 eb 51				.dword	$51eb851f
>31c0	db 00					.byte	$db,$00
.31c2	20 54 51	jsr $5154		jsr	FloatCompare
.31c5	20 4a 50	jsr $504a		jsr	FPAssertCheck
.31c8	20 5a 50	jsr $505a		jsr	FPPushConstant	; 4.71734024
>31cb	c2 39 7a 4b				.dword	$4b7a39c2
>31cf	e4 00					.byte	$e4,$00
.31d1	20 31 56	jsr $5631		jsr	FloatNegate
.31d4	20 5a 50	jsr $505a		jsr	FPPushConstant	; -4.71734024
>31d7	c2 39 7a 4b				.dword	$4b7a39c2
>31db	e4 80					.byte	$e4,$80
.31dd	20 54 51	jsr $5154		jsr	FloatCompare
.31e0	20 1e 51	jsr $511e		jsr	CompareEqual
.31e3	20 4a 50	jsr $504a		jsr	FPAssertCheck
.31e6	20 5a 50	jsr $505a		jsr	FPPushConstant	; 4.71734024
>31e9	c2 39 7a 4b				.dword	$4b7a39c2
>31ed	e4 00					.byte	$e4,$00
.31ef	20 aa 52	jsr $52aa		jsr	FloatIntegerPart
.31f2	20 5a 50	jsr $505a		jsr	FPPushConstant	; 4
>31f5	04 00 00 00				.dword	$00000004
>31f9	00 00					.byte	$00,$00
.31fb	20 54 51	jsr $5154		jsr	FloatCompare
.31fe	20 1e 51	jsr $511e		jsr	CompareEqual
.3201	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3204	20 5a 50	jsr $505a		jsr	FPPushConstant	; -8.06
>3207	48 e1 7a 40				.dword	$407ae148
>320b	e5 80					.byte	$e5,$80
.320d	20 55 59	jsr $5955		jsr	FloatSine
.3210	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.97885317
>3213	88 0f 4b 7d				.dword	$7d4b0f88
>3217	e1 80					.byte	$e1,$80
.3219	20 8d 50	jsr $508d		jsr	FloatSubtract
.321c	20 57 50	jsr $5057		jsr	FPAbs
.321f	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>3222	4c 37 89 41				.dword	$4189374c
>3226	d8 00					.byte	$d8,$00
.3228	20 54 51	jsr $5154		jsr	FloatCompare
.322b	20 34 51	jsr $5134		jsr	CompareLess
.322e	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3231	20 5a 50	jsr $505a		jsr	FPPushConstant	; -8.06
>3234	48 e1 7a 40				.dword	$407ae148
>3238	e5 80					.byte	$e5,$80
.323a	20 b5 57	jsr $57b5		jsr	FloatCosine
.323d	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.2045641
>3240	2f a0 bc 68				.dword	$68bca02f
>3244	df 80					.byte	$df,$80
.3246	20 8d 50	jsr $508d		jsr	FloatSubtract
.3249	20 57 50	jsr $5057		jsr	FPAbs
.324c	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>324f	4c 37 89 41				.dword	$4189374c
>3253	d8 00					.byte	$d8,$00
.3255	20 54 51	jsr $5154		jsr	FloatCompare
.3258	20 34 51	jsr $5134		jsr	CompareLess
.325b	20 4a 50	jsr $504a		jsr	FPAssertCheck
.325e	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.36
>3261	c3 f5 28 5c				.dword	$5c28f5c3
>3265	e0 00					.byte	$e0,$00
.3267	20 c6 59	jsr $59c6		jsr	FloatTangent
.326a	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.37640285
>326d	eb ef 5b 60				.dword	$605befeb
>3271	e0 00					.byte	$e0,$00
.3273	20 8d 50	jsr $508d		jsr	FloatSubtract
.3276	20 57 50	jsr $5057		jsr	FPAbs
.3279	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>327c	4c 37 89 41				.dword	$4189374c
>3280	d8 00					.byte	$d8,$00
.3282	20 54 51	jsr $5154		jsr	FloatCompare
.3285	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3288	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.194
>328b	fa 7e 6a 4c				.dword	$4c6a7efa
>328f	e2 00					.byte	$e2,$00
.3291	20 9a 56	jsr $569a		jsr	FloatArcTan
.3294	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.87359176
>3297	d4 da d1 6f				.dword	$6fd1dad4
>329b	e1 00					.byte	$e1,$00
.329d	20 8d 50	jsr $508d		jsr	FloatSubtract
.32a0	20 57 50	jsr $5057		jsr	FPAbs
.32a3	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>32a6	4c 37 89 41				.dword	$4189374c
>32aa	d8 00					.byte	$d8,$00
.32ac	20 54 51	jsr $5154		jsr	FloatCompare
.32af	20 4a 50	jsr $504a		jsr	FPAssertCheck
.32b2	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.7
>32b5	cd cc cc 6c				.dword	$6ccccccd
>32b9	e2 00					.byte	$e2,$00
.32bb	20 c1 57	jsr $57c1		jsr	FloatExponent
.32be	20 5a 50	jsr $505a		jsr	FPPushConstant	; 5.47394739
>32c1	dc 49 95 57				.dword	$579549dc
>32c5	e4 00					.byte	$e4,$00
.32c7	20 8d 50	jsr $508d		jsr	FloatSubtract
.32ca	20 57 50	jsr $5057		jsr	FPAbs
.32cd	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>32d0	4c 37 89 41				.dword	$4189374c
>32d4	d8 00					.byte	$d8,$00
.32d6	20 54 51	jsr $5154		jsr	FloatCompare
.32d9	20 4a 50	jsr $504a		jsr	FPAssertCheck
.32dc	20 5a 50	jsr $505a		jsr	FPPushConstant	; 57.74
>32df	48 e1 7a 73				.dword	$737ae148
>32e3	e7 00					.byte	$e7,$00
.32e5	20 c4 58	jsr $58c4		jsr	FloatLogarithm
.32e8	20 5a 50	jsr $505a		jsr	FPPushConstant	; 4.05595017
>32eb	01 2c e5 40				.dword	$40e52c01
>32ef	e4 00					.byte	$e4,$00
.32f1	20 8d 50	jsr $508d		jsr	FloatSubtract
.32f4	20 57 50	jsr $5057		jsr	FPAbs
.32f7	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>32fa	4c 37 89 41				.dword	$4189374c
>32fe	d8 00					.byte	$d8,$00
.3300	20 54 51	jsr $5154		jsr	FloatCompare
.3303	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3306	20 5a 50	jsr $505a		jsr	FPPushConstant	; 56.91
>3309	85 eb d1 71				.dword	$71d1eb85
>330d	e7 00					.byte	$e7,$00
.330f	20 ba 59	jsr $59ba		jsr	FloatSquareRoot
.3312	20 5a 50	jsr $505a		jsr	FPPushConstant	; 7.54387169
>3315	cd b2 b3 78				.dword	$78b3b2cd
>3319	e4 00					.byte	$e4,$00
.331b	20 8d 50	jsr $508d		jsr	FloatSubtract
.331e	20 57 50	jsr $5057		jsr	FPAbs
.3321	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>3324	4c 37 89 41				.dword	$4189374c
>3328	d8 00					.byte	$d8,$00
.332a	20 54 51	jsr $5154		jsr	FloatCompare
.332d	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3330	20 5a 50	jsr $505a		jsr	FPPushConstant	; 2.32
>3333	a4 70 3d 4a				.dword	$4a3d70a4
>3337	e3 00					.byte	$e3,$00
.3339	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.6
>333c	66 66 66 66				.dword	$66666666
>3340	e2 00					.byte	$e2,$00
.3342	20 38 59	jsr $5938		jsr	FloatPower
.3345	20 5a 50	jsr $505a		jsr	FPPushConstant	; 3.84397696
>3348	f8 db 01 7b				.dword	$7b01dbf8
>334c	e3 00					.byte	$e3,$00
.334e	20 8d 50	jsr $508d		jsr	FloatSubtract
.3351	20 57 50	jsr $5057		jsr	FPAbs
.3354	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.01
>3357	1f 85 eb 51				.dword	$51eb851f
>335b	db 00					.byte	$db,$00
.335d	20 54 51	jsr $5154		jsr	FloatCompare
.3360	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3363	20 5a 50	jsr $505a		jsr	FPPushConstant	; 16.26281688
>3366	de 1f 0d 41				.dword	$410d1fde
>336a	e6 00					.byte	$e6,$00
.336c	20 31 56	jsr $5631		jsr	FloatNegate
.336f	20 5a 50	jsr $505a		jsr	FPPushConstant	; -16.26281688
>3372	de 1f 0d 41				.dword	$410d1fde
>3376	e6 80					.byte	$e6,$80
.3378	20 54 51	jsr $5154		jsr	FloatCompare
.337b	20 1e 51	jsr $511e		jsr	CompareEqual
.337e	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3381	20 5a 50	jsr $505a		jsr	FPPushConstant	; 16.26281688
>3384	de 1f 0d 41				.dword	$410d1fde
>3388	e6 00					.byte	$e6,$00
.338a	20 aa 52	jsr $52aa		jsr	FloatIntegerPart
.338d	20 5a 50	jsr $505a		jsr	FPPushConstant	; 16
>3390	10 00 00 00				.dword	$00000010
>3394	00 00					.byte	$00,$00
.3396	20 54 51	jsr $5154		jsr	FloatCompare
.3399	20 1e 51	jsr $511e		jsr	CompareEqual
.339c	20 4a 50	jsr $504a		jsr	FPAssertCheck
.339f	20 5a 50	jsr $505a		jsr	FPPushConstant	; -6.0
>33a2	06 00 00 00				.dword	$00000006
>33a6	00 80					.byte	$00,$80
.33a8	20 55 59	jsr $5955		jsr	FloatSine
.33ab	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.2794155
>33ae	32 c6 87 47				.dword	$4787c632
>33b2	e0 00					.byte	$e0,$00
.33b4	20 8d 50	jsr $508d		jsr	FloatSubtract
.33b7	20 57 50	jsr $5057		jsr	FPAbs
.33ba	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>33bd	4c 37 89 41				.dword	$4189374c
>33c1	d8 00					.byte	$d8,$00
.33c3	20 54 51	jsr $5154		jsr	FloatCompare
.33c6	20 34 51	jsr $5134		jsr	CompareLess
.33c9	20 4a 50	jsr $504a		jsr	FPAssertCheck
.33cc	20 5a 50	jsr $505a		jsr	FPPushConstant	; -6.0
>33cf	06 00 00 00				.dword	$00000006
>33d3	00 80					.byte	$00,$80
.33d5	20 b5 57	jsr $57b5		jsr	FloatCosine
.33d8	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.96017029
>33db	2d dc e6 7a				.dword	$7ae6dc2d
>33df	e1 00					.byte	$e1,$00
.33e1	20 8d 50	jsr $508d		jsr	FloatSubtract
.33e4	20 57 50	jsr $5057		jsr	FPAbs
.33e7	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>33ea	4c 37 89 41				.dword	$4189374c
>33ee	d8 00					.byte	$d8,$00
.33f0	20 54 51	jsr $5154		jsr	FloatCompare
.33f3	20 34 51	jsr $5134		jsr	CompareLess
.33f6	20 4a 50	jsr $504a		jsr	FPAssertCheck
.33f9	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.1
>33fc	66 66 66 66				.dword	$66666666
>3400	de 00					.byte	$de,$00
.3402	20 c6 59	jsr $59c6		jsr	FloatTangent
.3405	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.10033467
>3408	b9 21 be 66				.dword	$66be21b9
>340c	de 00					.byte	$de,$00
.340e	20 8d 50	jsr $508d		jsr	FloatSubtract
.3411	20 57 50	jsr $5057		jsr	FPAbs
.3414	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>3417	4c 37 89 41				.dword	$4189374c
>341b	d8 00					.byte	$d8,$00
.341d	20 54 51	jsr $5154		jsr	FloatCompare
.3420	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3423	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.124
>3426	23 db f9 7e				.dword	$7ef9db23
>342a	de 00					.byte	$de,$00
.342c	20 9a 56	jsr $569a		jsr	FloatArcTan
.342f	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.12337026
>3432	00 c6 54 7e				.dword	$7e54c600
>3436	de 00					.byte	$de,$00
.3438	20 8d 50	jsr $508d		jsr	FloatSubtract
.343b	20 57 50	jsr $5057		jsr	FPAbs
.343e	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>3441	4c 37 89 41				.dword	$4189374c
>3445	d8 00					.byte	$d8,$00
.3447	20 54 51	jsr $5154		jsr	FloatCompare
.344a	20 4a 50	jsr $504a		jsr	FPAssertCheck
.344d	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.28
>3450	7b 14 ae 47				.dword	$47ae147b
>3454	e0 00					.byte	$e0,$00
.3456	20 c1 57	jsr $57c1		jsr	FloatExponent
.3459	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.32312981
>345c	a8 28 ae 54				.dword	$54ae28a8
>3460	e2 00					.byte	$e2,$00
.3462	20 8d 50	jsr $508d		jsr	FloatSubtract
.3465	20 57 50	jsr $5057		jsr	FPAbs
.3468	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>346b	4c 37 89 41				.dword	$4189374c
>346f	d8 00					.byte	$d8,$00
.3471	20 54 51	jsr $5154		jsr	FloatCompare
.3474	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3477	20 5a 50	jsr $505a		jsr	FPPushConstant	; 94.45
>347a	33 33 73 5e				.dword	$5e733333
>347e	e8 00					.byte	$e8,$00
.3480	20 c4 58	jsr $58c4		jsr	FloatLogarithm
.3483	20 5a 50	jsr $505a		jsr	FPPushConstant	; 4.54807059
>3486	ab e5 c4 48				.dword	$48c4e5ab
>348a	e4 00					.byte	$e4,$00
.348c	20 8d 50	jsr $508d		jsr	FloatSubtract
.348f	20 57 50	jsr $5057		jsr	FPAbs
.3492	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>3495	4c 37 89 41				.dword	$4189374c
>3499	d8 00					.byte	$d8,$00
.349b	20 54 51	jsr $5154		jsr	FloatCompare
.349e	20 4a 50	jsr $504a		jsr	FPAssertCheck
.34a1	20 5a 50	jsr $505a		jsr	FPPushConstant	; 83.83
>34a4	e1 7a d4 53				.dword	$53d47ae1
>34a8	e8 00					.byte	$e8,$00
.34aa	20 ba 59	jsr $59ba		jsr	FloatSquareRoot
.34ad	20 5a 50	jsr $505a		jsr	FPPushConstant	; 9.15587243
>34b0	0b 3a 3f 49				.dword	$493f3a0b
>34b4	e5 00					.byte	$e5,$00
.34b6	20 8d 50	jsr $508d		jsr	FloatSubtract
.34b9	20 57 50	jsr $5057		jsr	FPAbs
.34bc	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>34bf	4c 37 89 41				.dword	$4189374c
>34c3	d8 00					.byte	$d8,$00
.34c5	20 54 51	jsr $5154		jsr	FloatCompare
.34c8	20 4a 50	jsr $504a		jsr	FPAssertCheck
.34cb	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.36666667
>34ce	ec dd dd 5d				.dword	$5dddddec
>34d2	e0 00					.byte	$e0,$00
.34d4	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.1
>34d7	66 66 66 46				.dword	$46666666
>34db	e2 00					.byte	$e2,$00
.34dd	20 38 59	jsr $5938		jsr	FloatPower
.34e0	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.33166418
>34e3	96 f1 e7 54				.dword	$54e7f196
>34e7	e0 00					.byte	$e0,$00
.34e9	20 8d 50	jsr $508d		jsr	FloatSubtract
.34ec	20 57 50	jsr $5057		jsr	FPAbs
.34ef	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.01
>34f2	1f 85 eb 51				.dword	$51eb851f
>34f6	db 00					.byte	$db,$00
.34f8	20 54 51	jsr $5154		jsr	FloatCompare
.34fb	20 4a 50	jsr $504a		jsr	FPAssertCheck
.34fe	20 5a 50	jsr $505a		jsr	FPPushConstant	; 39.40819632
>3501	1c ff d0 4e				.dword	$4ed0ff1c
>3505	e7 00					.byte	$e7,$00
.3507	20 31 56	jsr $5631		jsr	FloatNegate
.350a	20 5a 50	jsr $505a		jsr	FPPushConstant	; -39.40819632
>350d	1c ff d0 4e				.dword	$4ed0ff1c
>3511	e7 80					.byte	$e7,$80
.3513	20 54 51	jsr $5154		jsr	FloatCompare
.3516	20 1e 51	jsr $511e		jsr	CompareEqual
.3519	20 4a 50	jsr $504a		jsr	FPAssertCheck
.351c	20 5a 50	jsr $505a		jsr	FPPushConstant	; 39.40819632
>351f	1c ff d0 4e				.dword	$4ed0ff1c
>3523	e7 00					.byte	$e7,$00
.3525	20 aa 52	jsr $52aa		jsr	FloatIntegerPart
.3528	20 5a 50	jsr $505a		jsr	FPPushConstant	; 39
>352b	27 00 00 00				.dword	$00000027
>352f	00 00					.byte	$00,$00
.3531	20 54 51	jsr $5154		jsr	FloatCompare
.3534	20 1e 51	jsr $511e		jsr	CompareEqual
.3537	20 4a 50	jsr $504a		jsr	FPAssertCheck
.353a	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.72
>353d	e1 7a 14 6e				.dword	$6e147ae1
>3541	e2 00					.byte	$e2,$00
.3543	20 55 59	jsr $5955		jsr	FloatSine
.3546	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.98888977
>3549	a3 f0 93 7e				.dword	$7e93f0a3
>354d	e1 00					.byte	$e1,$00
.354f	20 8d 50	jsr $508d		jsr	FloatSubtract
.3552	20 57 50	jsr $5057		jsr	FPAbs
.3555	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>3558	4c 37 89 41				.dword	$4189374c
>355c	d8 00					.byte	$d8,$00
.355e	20 54 51	jsr $5154		jsr	FloatCompare
.3561	20 34 51	jsr $5134		jsr	CompareLess
.3564	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3567	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.72
>356a	e1 7a 14 6e				.dword	$6e147ae1
>356e	e2 00					.byte	$e2,$00
.3570	20 b5 57	jsr $57b5		jsr	FloatCosine
.3573	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.1486507
>3576	ce f1 1b 4c				.dword	$4c1bf1ce
>357a	df 80					.byte	$df,$80
.357c	20 8d 50	jsr $508d		jsr	FloatSubtract
.357f	20 57 50	jsr $5057		jsr	FPAbs
.3582	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>3585	4c 37 89 41				.dword	$4189374c
>3589	d8 00					.byte	$d8,$00
.358b	20 54 51	jsr $5154		jsr	FloatCompare
.358e	20 34 51	jsr $5134		jsr	CompareLess
.3591	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3594	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.32
>3597	1f 85 eb 51				.dword	$51eb851f
>359b	e0 00					.byte	$e0,$00
.359d	20 c6 59	jsr $59c6		jsr	FloatTangent
.35a0	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.33138941
>35a3	b6 ef d5 54				.dword	$54d5efb6
>35a7	e0 00					.byte	$e0,$00
.35a9	20 8d 50	jsr $508d		jsr	FloatSubtract
.35ac	20 57 50	jsr $5057		jsr	FPAbs
.35af	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>35b2	4c 37 89 41				.dword	$4189374c
>35b6	d8 00					.byte	$d8,$00
.35b8	20 54 51	jsr $5154		jsr	FloatCompare
.35bb	20 4a 50	jsr $504a		jsr	FPAssertCheck
.35be	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.179
>35c1	6a bc 74 4b				.dword	$4b74bc6a
>35c5	e2 00					.byte	$e2,$00
.35c7	20 9a 56	jsr $569a		jsr	FloatArcTan
.35ca	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.8673619
>35cd	f9 b6 05 6f				.dword	$6f05b6f9
>35d1	e1 00					.byte	$e1,$00
.35d3	20 8d 50	jsr $508d		jsr	FloatSubtract
.35d6	20 57 50	jsr $5057		jsr	FPAbs
.35d9	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>35dc	4c 37 89 41				.dword	$4189374c
>35e0	d8 00					.byte	$d8,$00
.35e2	20 54 51	jsr $5154		jsr	FloatCompare
.35e5	20 4a 50	jsr $504a		jsr	FPAssertCheck
.35e8	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.87
>35eb	f6 28 5c 6f				.dword	$6f5c28f6
>35ef	e1 80					.byte	$e1,$80
.35f1	20 c1 57	jsr $57c1		jsr	FloatExponent
.35f4	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.41895155
>35f7	a6 68 40 6b				.dword	$6b4068a6
>35fb	e0 00					.byte	$e0,$00
.35fd	20 8d 50	jsr $508d		jsr	FloatSubtract
.3600	20 57 50	jsr $5057		jsr	FPAbs
.3603	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>3606	4c 37 89 41				.dword	$4189374c
>360a	d8 00					.byte	$d8,$00
.360c	20 54 51	jsr $5154		jsr	FloatCompare
.360f	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3612	20 5a 50	jsr $505a		jsr	FPPushConstant	; 9.91
>3615	14 ae 47 4f				.dword	$4f47ae14
>3619	e5 00					.byte	$e5,$00
.361b	20 c4 58	jsr $58c4		jsr	FloatLogarithm
.361e	20 5a 50	jsr $505a		jsr	FPPushConstant	; 2.29354435
>3621	1f b7 64 49				.dword	$4964b71f
>3625	e3 00					.byte	$e3,$00
.3627	20 8d 50	jsr $508d		jsr	FloatSubtract
.362a	20 57 50	jsr $5057		jsr	FPAbs
.362d	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>3630	4c 37 89 41				.dword	$4189374c
>3634	d8 00					.byte	$d8,$00
.3636	20 54 51	jsr $5154		jsr	FloatCompare
.3639	20 4a 50	jsr $504a		jsr	FPAssertCheck
.363c	20 5a 50	jsr $505a		jsr	FPPushConstant	; 51.1
>363f	33 33 33 66				.dword	$66333333
>3643	e7 00					.byte	$e7,$00
.3645	20 ba 59	jsr $59ba		jsr	FloatSquareRoot
.3648	20 5a 50	jsr $505a		jsr	FPPushConstant	; 7.1484264
>364b	5c f4 5f 72				.dword	$725ff45c
>364f	e4 00					.byte	$e4,$00
.3651	20 8d 50	jsr $508d		jsr	FloatSubtract
.3654	20 57 50	jsr $5057		jsr	FPAbs
.3657	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>365a	4c 37 89 41				.dword	$4189374c
>365e	d8 00					.byte	$d8,$00
.3660	20 54 51	jsr $5154		jsr	FloatCompare
.3663	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3666	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.75
>3669	00 00 00 70				.dword	$70000000
>366d	e2 00					.byte	$e2,$00
.366f	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.5
>3672	00 00 00 40				.dword	$40000000
>3676	e1 00					.byte	$e1,$00
.3678	20 38 59	jsr $5938		jsr	FloatPower
.367b	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.32287566
>367e	ac fe a9 54				.dword	$54a9feac
>3682	e2 00					.byte	$e2,$00
.3684	20 8d 50	jsr $508d		jsr	FloatSubtract
.3687	20 57 50	jsr $5057		jsr	FPAbs
.368a	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.01
>368d	1f 85 eb 51				.dword	$51eb851f
>3691	db 00					.byte	$db,$00
.3693	20 54 51	jsr $5154		jsr	FloatCompare
.3696	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3699	20 5a 50	jsr $505a		jsr	FPPushConstant	; -62.08957642
>369c	f6 dc 2d 7c				.dword	$7c2ddcf6
>36a0	e7 80					.byte	$e7,$80
.36a2	20 31 56	jsr $5631		jsr	FloatNegate
.36a5	20 5a 50	jsr $505a		jsr	FPPushConstant	; 62.08957642
>36a8	f6 dc 2d 7c				.dword	$7c2ddcf6
>36ac	e7 00					.byte	$e7,$00
.36ae	20 54 51	jsr $5154		jsr	FloatCompare
.36b1	20 1e 51	jsr $511e		jsr	CompareEqual
.36b4	20 4a 50	jsr $504a		jsr	FPAssertCheck
.36b7	20 5a 50	jsr $505a		jsr	FPPushConstant	; -62.08957642
>36ba	f6 dc 2d 7c				.dword	$7c2ddcf6
>36be	e7 80					.byte	$e7,$80
.36c0	20 aa 52	jsr $52aa		jsr	FloatIntegerPart
.36c3	20 5a 50	jsr $505a		jsr	FPPushConstant	; -62
>36c6	3e 00 00 00				.dword	$0000003e
>36ca	00 80					.byte	$00,$80
.36cc	20 54 51	jsr $5154		jsr	FloatCompare
.36cf	20 1e 51	jsr $511e		jsr	CompareEqual
.36d2	20 4a 50	jsr $504a		jsr	FPAssertCheck
.36d5	20 5a 50	jsr $505a		jsr	FPPushConstant	; 10.82
>36d8	29 5c 8f 56				.dword	$568f5c29
>36dc	e5 00					.byte	$e5,$00
.36de	20 55 59	jsr $5955		jsr	FloatSine
.36e1	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.98462639
>36e4	d0 3c 08 7e				.dword	$7e083cd0
>36e8	e1 80					.byte	$e1,$80
.36ea	20 8d 50	jsr $508d		jsr	FloatSubtract
.36ed	20 57 50	jsr $5057		jsr	FPAbs
.36f0	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>36f3	4c 37 89 41				.dword	$4189374c
>36f7	d8 00					.byte	$d8,$00
.36f9	20 54 51	jsr $5154		jsr	FloatCompare
.36fc	20 34 51	jsr $5134		jsr	CompareLess
.36ff	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3702	20 5a 50	jsr $505a		jsr	FPPushConstant	; 10.82
>3705	29 5c 8f 56				.dword	$568f5c29
>3709	e5 00					.byte	$e5,$00
.370b	20 b5 57	jsr $57b5		jsr	FloatCosine
.370e	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.17467363
>3711	71 d2 6e 59				.dword	$596ed271
>3715	df 80					.byte	$df,$80
.3717	20 8d 50	jsr $508d		jsr	FloatSubtract
.371a	20 57 50	jsr $5057		jsr	FPAbs
.371d	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>3720	4c 37 89 41				.dword	$4189374c
>3724	d8 00					.byte	$d8,$00
.3726	20 54 51	jsr $5154		jsr	FloatCompare
.3729	20 34 51	jsr $5134		jsr	CompareLess
.372c	20 4a 50	jsr $504a		jsr	FPAssertCheck
.372f	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.25
>3732	00 00 00 40				.dword	$40000000
>3736	e0 00					.byte	$e0,$00
.3738	20 c6 59	jsr $59c6		jsr	FloatTangent
.373b	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.25534192
>373e	8c 16 5e 41				.dword	$415e168c
>3742	e0 00					.byte	$e0,$00
.3744	20 8d 50	jsr $508d		jsr	FloatSubtract
.3747	20 57 50	jsr $5057		jsr	FPAbs
.374a	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>374d	4c 37 89 41				.dword	$4189374c
>3751	d8 00					.byte	$d8,$00
.3753	20 54 51	jsr $5154		jsr	FloatCompare
.3756	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3759	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.733
>375c	d5 78 e9 6e				.dword	$6ee978d5
>3760	e2 00					.byte	$e2,$00
.3762	20 9a 56	jsr $569a		jsr	FloatArcTan
.3765	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.04743475
>3768	c3 2b 09 43				.dword	$43092bc3
>376c	e2 00					.byte	$e2,$00
.376e	20 8d 50	jsr $508d		jsr	FloatSubtract
.3771	20 57 50	jsr $5057		jsr	FPAbs
.3774	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>3777	4c 37 89 41				.dword	$4189374c
>377b	d8 00					.byte	$d8,$00
.377d	20 54 51	jsr $5154		jsr	FloatCompare
.3780	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3783	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.12
>3786	ae 47 e1 7a				.dword	$7ae147ae
>378a	de 00					.byte	$de,$00
.378c	20 c1 57	jsr $57c1		jsr	FloatExponent
.378f	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.12749685
>3792	8c e8 28 48				.dword	$4828e88c
>3796	e2 00					.byte	$e2,$00
.3798	20 8d 50	jsr $508d		jsr	FloatSubtract
.379b	20 57 50	jsr $5057		jsr	FPAbs
.379e	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>37a1	4c 37 89 41				.dword	$4189374c
>37a5	d8 00					.byte	$d8,$00
.37a7	20 54 51	jsr $5154		jsr	FloatCompare
.37aa	20 4a 50	jsr $504a		jsr	FPAssertCheck
.37ad	20 5a 50	jsr $505a		jsr	FPPushConstant	; 51.61
>37b0	ec 51 38 67				.dword	$673851ec
>37b4	e7 00					.byte	$e7,$00
.37b6	20 c4 58	jsr $58c4		jsr	FloatLogarithm
.37b9	20 5a 50	jsr $505a		jsr	FPPushConstant	; 3.94371545
>37bc	be ea 32 7e				.dword	$7e32eabe
>37c0	e3 00					.byte	$e3,$00
.37c2	20 8d 50	jsr $508d		jsr	FloatSubtract
.37c5	20 57 50	jsr $5057		jsr	FPAbs
.37c8	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>37cb	4c 37 89 41				.dword	$4189374c
>37cf	d8 00					.byte	$d8,$00
.37d1	20 54 51	jsr $5154		jsr	FloatCompare
.37d4	20 4a 50	jsr $504a		jsr	FPAssertCheck
.37d7	20 5a 50	jsr $505a		jsr	FPPushConstant	; 49.09
>37da	7b 14 2e 62				.dword	$622e147b
>37de	e7 00					.byte	$e7,$00
.37e0	20 ba 59	jsr $59ba		jsr	FloatSquareRoot
.37e3	20 5a 50	jsr $505a		jsr	FPPushConstant	; 7.00642562
>37e6	c0 51 1a 70				.dword	$701a51c0
>37ea	e4 00					.byte	$e4,$00
.37ec	20 8d 50	jsr $508d		jsr	FloatSubtract
.37ef	20 57 50	jsr $5057		jsr	FPAbs
.37f2	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>37f5	4c 37 89 41				.dword	$4189374c
>37f9	d8 00					.byte	$d8,$00
.37fb	20 54 51	jsr $5154		jsr	FloatCompare
.37fe	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3801	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.72666667
>3804	d7 69 03 5d				.dword	$5d0369d7
>3808	e1 00					.byte	$e1,$00
.380a	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.5
>380d	00 00 00 60				.dword	$60000000
>3811	e2 00					.byte	$e2,$00
.3813	20 38 59	jsr $5938		jsr	FloatPower
.3816	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.61944515
>3819	8a fa 49 4f				.dword	$4f49fa8a
>381d	e1 00					.byte	$e1,$00
.381f	20 8d 50	jsr $508d		jsr	FloatSubtract
.3822	20 57 50	jsr $5057		jsr	FPAbs
.3825	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.01
>3828	1f 85 eb 51				.dword	$51eb851f
>382c	db 00					.byte	$db,$00
.382e	20 54 51	jsr $5154		jsr	FloatCompare
.3831	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3834	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.70316676
>3837	4f 5e 01 5a				.dword	$5a015e4f
>383b	e1 00					.byte	$e1,$00
.383d	20 31 56	jsr $5631		jsr	FloatNegate
.3840	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.70316676
>3843	4f 5e 01 5a				.dword	$5a015e4f
>3847	e1 80					.byte	$e1,$80
.3849	20 54 51	jsr $5154		jsr	FloatCompare
.384c	20 1e 51	jsr $511e		jsr	CompareEqual
.384f	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3852	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.70316676
>3855	4f 5e 01 5a				.dword	$5a015e4f
>3859	e1 00					.byte	$e1,$00
.385b	20 aa 52	jsr $52aa		jsr	FloatIntegerPart
.385e	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0
>3861	00 00 00 00				.dword	$00000000
>3865	00 00					.byte	$00,$00
.3867	20 54 51	jsr $5154		jsr	FloatCompare
.386a	20 1e 51	jsr $511e		jsr	CompareEqual
.386d	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3870	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.48
>3873	ae 47 e1 7a				.dword	$7ae147ae
>3877	e0 00					.byte	$e0,$00
.3879	20 55 59	jsr $5955		jsr	FloatSine
.387c	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.46177918
>387f	0c 29 37 76				.dword	$7637290c
>3883	e0 00					.byte	$e0,$00
.3885	20 8d 50	jsr $508d		jsr	FloatSubtract
.3888	20 57 50	jsr $5057		jsr	FPAbs
.388b	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>388e	4c 37 89 41				.dword	$4189374c
>3892	d8 00					.byte	$d8,$00
.3894	20 54 51	jsr $5154		jsr	FloatCompare
.3897	20 34 51	jsr $5134		jsr	CompareLess
.389a	20 4a 50	jsr $504a		jsr	FPAssertCheck
.389d	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.48
>38a0	ae 47 e1 7a				.dword	$7ae147ae
>38a4	e0 00					.byte	$e0,$00
.38a6	20 b5 57	jsr $57b5		jsr	FloatCosine
.38a9	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.88699492
>38ac	af 0c 89 71				.dword	$71890caf
>38b0	e1 00					.byte	$e1,$00
.38b2	20 8d 50	jsr $508d		jsr	FloatSubtract
.38b5	20 57 50	jsr $5057		jsr	FPAbs
.38b8	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>38bb	4c 37 89 41				.dword	$4189374c
>38bf	d8 00					.byte	$d8,$00
.38c1	20 54 51	jsr $5154		jsr	FloatCompare
.38c4	20 34 51	jsr $5134		jsr	CompareLess
.38c7	20 4a 50	jsr $504a		jsr	FPAssertCheck
.38ca	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.17
>38cd	71 3d 0a 57				.dword	$570a3d71
>38d1	df 00					.byte	$df,$00
.38d3	20 c6 59	jsr $59c6		jsr	FloatTangent
.38d6	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.17165682
>38d9	18 67 e3 57				.dword	$57e36718
>38dd	df 00					.byte	$df,$00
.38df	20 8d 50	jsr $508d		jsr	FloatSubtract
.38e2	20 57 50	jsr $5057		jsr	FPAbs
.38e5	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>38e8	4c 37 89 41				.dword	$4189374c
>38ec	d8 00					.byte	$d8,$00
.38ee	20 54 51	jsr $5154		jsr	FloatCompare
.38f1	20 4a 50	jsr $504a		jsr	FPAssertCheck
.38f4	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.197
>38f7	e3 a5 9b 4c				.dword	$4c9ba5e3
>38fb	e2 00					.byte	$e2,$00
.38fd	20 9a 56	jsr $569a		jsr	FloatArcTan
.3900	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.87482673
>3903	82 52 fa 6f				.dword	$6ffa5282
>3907	e1 00					.byte	$e1,$00
.3909	20 8d 50	jsr $508d		jsr	FloatSubtract
.390c	20 57 50	jsr $5057		jsr	FPAbs
.390f	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>3912	4c 37 89 41				.dword	$4189374c
>3916	d8 00					.byte	$d8,$00
.3918	20 54 51	jsr $5154		jsr	FloatCompare
.391b	20 4a 50	jsr $504a		jsr	FPAssertCheck
.391e	20 5a 50	jsr $505a		jsr	FPPushConstant	; -1.91
>3921	a4 70 3d 7a				.dword	$7a3d70a4
>3925	e2 80					.byte	$e2,$80
.3927	20 c1 57	jsr $57c1		jsr	FloatExponent
.392a	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.14808039
>392d	60 31 d1 4b				.dword	$4bd13160
>3931	df 00					.byte	$df,$00
.3933	20 8d 50	jsr $508d		jsr	FloatSubtract
.3936	20 57 50	jsr $5057		jsr	FPAbs
.3939	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>393c	4c 37 89 41				.dword	$4189374c
>3940	d8 00					.byte	$d8,$00
.3942	20 54 51	jsr $5154		jsr	FloatCompare
.3945	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3948	20 5a 50	jsr $505a		jsr	FPPushConstant	; 50.47
>394b	d7 a3 f0 64				.dword	$64f0a3d7
>394f	e7 00					.byte	$e7,$00
.3951	20 c4 58	jsr $58c4		jsr	FloatLogarithm
.3954	20 5a 50	jsr $505a		jsr	FPPushConstant	; 3.9213791
>3957	06 f0 7b 7d				.dword	$7d7bf006
>395b	e3 00					.byte	$e3,$00
.395d	20 8d 50	jsr $508d		jsr	FloatSubtract
.3960	20 57 50	jsr $5057		jsr	FPAbs
.3963	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>3966	4c 37 89 41				.dword	$4189374c
>396a	d8 00					.byte	$d8,$00
.396c	20 54 51	jsr $5154		jsr	FloatCompare
.396f	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3972	20 5a 50	jsr $505a		jsr	FPPushConstant	; 87.12
>3975	52 b8 1e 57				.dword	$571eb852
>3979	e8 00					.byte	$e8,$00
.397b	20 ba 59	jsr $59ba		jsr	FloatSquareRoot
.397e	20 5a 50	jsr $505a		jsr	FPPushConstant	; 9.33380951
>3981	52 a4 ab 4a				.dword	$4aaba452
>3985	e5 00					.byte	$e5,$00
.3987	20 8d 50	jsr $508d		jsr	FloatSubtract
.398a	20 57 50	jsr $5057		jsr	FPAbs
.398d	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>3990	4c 37 89 41				.dword	$4189374c
>3994	d8 00					.byte	$d8,$00
.3996	20 54 51	jsr $5154		jsr	FloatCompare
.3999	20 4a 50	jsr $504a		jsr	FPAssertCheck
.399c	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.76333333
>399f	0a 74 da 70				.dword	$70da740a
>39a3	e2 00					.byte	$e2,$00
.39a5	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.2
>39a8	66 66 66 66				.dword	$66666666
>39ac	df 00					.byte	$df,$00
.39ae	20 38 59	jsr $5938		jsr	FloatPower
.39b1	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.12012601
>39b4	01 25 b0 47				.dword	$47b02501
>39b8	e2 00					.byte	$e2,$00
.39ba	20 8d 50	jsr $508d		jsr	FloatSubtract
.39bd	20 57 50	jsr $5057		jsr	FPAbs
.39c0	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.01
>39c3	1f 85 eb 51				.dword	$51eb851f
>39c7	db 00					.byte	$db,$00
.39c9	20 54 51	jsr $5154		jsr	FloatCompare
.39cc	20 4a 50	jsr $504a		jsr	FPAssertCheck
.39cf	20 5a 50	jsr $505a		jsr	FPPushConstant	; 14.63602495
>39d2	40 94 16 75				.dword	$75169440
>39d6	e5 00					.byte	$e5,$00
.39d8	20 31 56	jsr $5631		jsr	FloatNegate
.39db	20 5a 50	jsr $505a		jsr	FPPushConstant	; -14.63602495
>39de	40 94 16 75				.dword	$75169440
>39e2	e5 80					.byte	$e5,$80
.39e4	20 54 51	jsr $5154		jsr	FloatCompare
.39e7	20 1e 51	jsr $511e		jsr	CompareEqual
.39ea	20 4a 50	jsr $504a		jsr	FPAssertCheck
.39ed	20 5a 50	jsr $505a		jsr	FPPushConstant	; 14.63602495
>39f0	40 94 16 75				.dword	$75169440
>39f4	e5 00					.byte	$e5,$00
.39f6	20 aa 52	jsr $52aa		jsr	FloatIntegerPart
.39f9	20 5a 50	jsr $505a		jsr	FPPushConstant	; 14
>39fc	0e 00 00 00				.dword	$0000000e
>3a00	00 00					.byte	$00,$00
.3a02	20 54 51	jsr $5154		jsr	FloatCompare
.3a05	20 1e 51	jsr $511e		jsr	CompareEqual
.3a08	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3a0b	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.06
>3a0e	ae 47 e1 7a				.dword	$7ae147ae
>3a12	dd 80					.byte	$dd,$80
.3a14	20 55 59	jsr $5955		jsr	FloatSine
.3a17	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.05996401
>3a1a	2f 69 ce 7a				.dword	$7ace692f
>3a1e	dd 80					.byte	$dd,$80
.3a20	20 8d 50	jsr $508d		jsr	FloatSubtract
.3a23	20 57 50	jsr $5057		jsr	FPAbs
.3a26	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>3a29	4c 37 89 41				.dword	$4189374c
>3a2d	d8 00					.byte	$d8,$00
.3a2f	20 54 51	jsr $5154		jsr	FloatCompare
.3a32	20 34 51	jsr $5134		jsr	CompareLess
.3a35	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3a38	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.06
>3a3b	ae 47 e1 7a				.dword	$7ae147ae
>3a3f	dd 80					.byte	$dd,$80
.3a41	20 b5 57	jsr $57b5		jsr	FloatCosine
.3a44	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.99820054
>3a47	09 09 c5 7f				.dword	$7fc50909
>3a4b	e1 00					.byte	$e1,$00
.3a4d	20 8d 50	jsr $508d		jsr	FloatSubtract
.3a50	20 57 50	jsr $5057		jsr	FPAbs
.3a53	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>3a56	4c 37 89 41				.dword	$4189374c
>3a5a	d8 00					.byte	$d8,$00
.3a5c	20 54 51	jsr $5154		jsr	FloatCompare
.3a5f	20 34 51	jsr $5134		jsr	CompareLess
.3a62	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3a65	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.36
>3a68	c3 f5 28 5c				.dword	$5c28f5c3
>3a6c	e0 00					.byte	$e0,$00
.3a6e	20 c6 59	jsr $59c6		jsr	FloatTangent
.3a71	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.37640285
>3a74	eb ef 5b 60				.dword	$605befeb
>3a78	e0 00					.byte	$e0,$00
.3a7a	20 8d 50	jsr $508d		jsr	FloatSubtract
.3a7d	20 57 50	jsr $5057		jsr	FPAbs
.3a80	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>3a83	4c 37 89 41				.dword	$4189374c
>3a87	d8 00					.byte	$d8,$00
.3a89	20 54 51	jsr $5154		jsr	FloatCompare
.3a8c	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3a8f	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.608
>3a92	d5 78 e9 66				.dword	$66e978d5
>3a96	e2 00					.byte	$e2,$00
.3a98	20 9a 56	jsr $569a		jsr	FloatArcTan
.3a9b	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.01443615
>3a9e	9a 85 ec 40				.dword	$40ec859a
>3aa2	e2 00					.byte	$e2,$00
.3aa4	20 8d 50	jsr $508d		jsr	FloatSubtract
.3aa7	20 57 50	jsr $5057		jsr	FPAbs
.3aaa	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>3aad	4c 37 89 41				.dword	$4189374c
>3ab1	d8 00					.byte	$d8,$00
.3ab3	20 54 51	jsr $5154		jsr	FloatCompare
.3ab6	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3ab9	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.01
>3abc	0a d7 a3 40				.dword	$40a3d70a
>3ac0	e2 00					.byte	$e2,$00
.3ac2	20 c1 57	jsr $57c1		jsr	FloatExponent
.3ac5	20 5a 50	jsr $505a		jsr	FPPushConstant	; 2.74560102
>3ac8	ac f6 db 57				.dword	$57dbf6ac
>3acc	e3 00					.byte	$e3,$00
.3ace	20 8d 50	jsr $508d		jsr	FloatSubtract
.3ad1	20 57 50	jsr $5057		jsr	FPAbs
.3ad4	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>3ad7	4c 37 89 41				.dword	$4189374c
>3adb	d8 00					.byte	$d8,$00
.3add	20 54 51	jsr $5154		jsr	FloatCompare
.3ae0	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3ae3	20 5a 50	jsr $505a		jsr	FPPushConstant	; 30.4
>3ae6	9a 99 99 79				.dword	$7999999a
>3aea	e6 00					.byte	$e6,$00
.3aec	20 c4 58	jsr $58c4		jsr	FloatLogarithm
.3aef	20 5a 50	jsr $505a		jsr	FPPushConstant	; 3.41444261
>3af2	26 1d 43 6d				.dword	$6d431d26
>3af6	e3 00					.byte	$e3,$00
.3af8	20 8d 50	jsr $508d		jsr	FloatSubtract
.3afb	20 57 50	jsr $5057		jsr	FPAbs
.3afe	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>3b01	4c 37 89 41				.dword	$4189374c
>3b05	d8 00					.byte	$d8,$00
.3b07	20 54 51	jsr $5154		jsr	FloatCompare
.3b0a	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3b0d	20 5a 50	jsr $505a		jsr	FPPushConstant	; 43.99
>3b10	48 e1 fa 57				.dword	$57fae148
>3b14	e7 00					.byte	$e7,$00
.3b16	20 ba 59	jsr $59ba		jsr	FloatSquareRoot
.3b19	20 5a 50	jsr $505a		jsr	FPPushConstant	; 6.63249576
>3b1c	e0 b3 1e 6a				.dword	$6a1eb3e0
>3b20	e4 00					.byte	$e4,$00
.3b22	20 8d 50	jsr $508d		jsr	FloatSubtract
.3b25	20 57 50	jsr $5057		jsr	FPAbs
.3b28	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>3b2b	4c 37 89 41				.dword	$4189374c
>3b2f	d8 00					.byte	$d8,$00
.3b31	20 54 51	jsr $5154		jsr	FloatCompare
.3b34	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3b37	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.05
>3b3a	33 33 33 43				.dword	$43333333
>3b3e	e2 00					.byte	$e2,$00
.3b40	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.1
>3b43	66 66 66 66				.dword	$66666666
>3b47	de 00					.byte	$de,$00
.3b49	20 38 59	jsr $5938		jsr	FloatPower
.3b4c	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.00489094
>3b4f	17 22 50 40				.dword	$40502217
>3b53	e2 00					.byte	$e2,$00
.3b55	20 8d 50	jsr $508d		jsr	FloatSubtract
.3b58	20 57 50	jsr $5057		jsr	FPAbs
.3b5b	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.01
>3b5e	1f 85 eb 51				.dword	$51eb851f
>3b62	db 00					.byte	$db,$00
.3b64	20 54 51	jsr $5154		jsr	FloatCompare
.3b67	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3b6a	20 5a 50	jsr $505a		jsr	FPPushConstant	; -8.75937475
>3b6d	12 33 13 46				.dword	$46133312
>3b71	e5 80					.byte	$e5,$80
.3b73	20 31 56	jsr $5631		jsr	FloatNegate
.3b76	20 5a 50	jsr $505a		jsr	FPPushConstant	; 8.75937475
>3b79	12 33 13 46				.dword	$46133312
>3b7d	e5 00					.byte	$e5,$00
.3b7f	20 54 51	jsr $5154		jsr	FloatCompare
.3b82	20 1e 51	jsr $511e		jsr	CompareEqual
.3b85	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3b88	20 5a 50	jsr $505a		jsr	FPPushConstant	; -8.75937475
>3b8b	12 33 13 46				.dword	$46133312
>3b8f	e5 80					.byte	$e5,$80
.3b91	20 aa 52	jsr $52aa		jsr	FloatIntegerPart
.3b94	20 5a 50	jsr $505a		jsr	FPPushConstant	; -8
>3b97	08 00 00 00				.dword	$00000008
>3b9b	00 80					.byte	$00,$80
.3b9d	20 54 51	jsr $5154		jsr	FloatCompare
.3ba0	20 1e 51	jsr $511e		jsr	CompareEqual
.3ba3	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3ba6	20 5a 50	jsr $505a		jsr	FPPushConstant	; -16.9
>3ba9	9a 99 99 43				.dword	$4399999a
>3bad	e6 80					.byte	$e6,$80
.3baf	20 55 59	jsr $5955		jsr	FloatSine
.3bb2	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.92912401
>3bb5	1a 89 ed 76				.dword	$76ed891a
>3bb9	e1 00					.byte	$e1,$00
.3bbb	20 8d 50	jsr $508d		jsr	FloatSubtract
.3bbe	20 57 50	jsr $5057		jsr	FPAbs
.3bc1	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>3bc4	4c 37 89 41				.dword	$4189374c
>3bc8	d8 00					.byte	$d8,$00
.3bca	20 54 51	jsr $5154		jsr	FloatCompare
.3bcd	20 34 51	jsr $5134		jsr	CompareLess
.3bd0	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3bd3	20 5a 50	jsr $505a		jsr	FPPushConstant	; -16.9
>3bd6	9a 99 99 43				.dword	$4399999a
>3bda	e6 80					.byte	$e6,$80
.3bdc	20 b5 57	jsr $57b5		jsr	FloatCosine
.3bdf	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.36976826
>3be2	f8 21 a9 5e				.dword	$5ea921f8
>3be6	e0 80					.byte	$e0,$80
.3be8	20 8d 50	jsr $508d		jsr	FloatSubtract
.3beb	20 57 50	jsr $5057		jsr	FPAbs
.3bee	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>3bf1	4c 37 89 41				.dword	$4189374c
>3bf5	d8 00					.byte	$d8,$00
.3bf7	20 54 51	jsr $5154		jsr	FloatCompare
.3bfa	20 34 51	jsr $5134		jsr	CompareLess
.3bfd	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3c00	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.35
>3c03	9a 99 99 59				.dword	$5999999a
>3c07	e0 00					.byte	$e0,$00
.3c09	20 c6 59	jsr $59c6		jsr	FloatTangent
.3c0c	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.36502849
>3c0f	d3 81 72 5d				.dword	$5d7281d3
>3c13	e0 00					.byte	$e0,$00
.3c15	20 8d 50	jsr $508d		jsr	FloatSubtract
.3c18	20 57 50	jsr $5057		jsr	FPAbs
.3c1b	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>3c1e	4c 37 89 41				.dword	$4189374c
>3c22	d8 00					.byte	$d8,$00
.3c24	20 54 51	jsr $5154		jsr	FloatCompare
.3c27	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3c2a	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.806
>3c2d	06 81 95 73				.dword	$73958106
>3c31	e2 00					.byte	$e2,$00
.3c33	20 9a 56	jsr $569a		jsr	FloatArcTan
.3c36	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.06510932
>3c39	48 c0 2a 44				.dword	$442ac048
>3c3d	e2 00					.byte	$e2,$00
.3c3f	20 8d 50	jsr $508d		jsr	FloatSubtract
.3c42	20 57 50	jsr $5057		jsr	FPAbs
.3c45	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>3c48	4c 37 89 41				.dword	$4189374c
>3c4c	d8 00					.byte	$d8,$00
.3c4e	20 54 51	jsr $5154		jsr	FloatCompare
.3c51	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3c54	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.13
>3c57	85 eb 51 48				.dword	$4851eb85
>3c5b	e2 00					.byte	$e2,$00
.3c5d	20 c1 57	jsr $57c1		jsr	FloatExponent
.3c60	20 5a 50	jsr $505a		jsr	FPPushConstant	; 3.0956565
>3c63	38 9e 0f 63				.dword	$630f9e38
>3c67	e3 00					.byte	$e3,$00
.3c69	20 8d 50	jsr $508d		jsr	FloatSubtract
.3c6c	20 57 50	jsr $5057		jsr	FPAbs
.3c6f	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>3c72	4c 37 89 41				.dword	$4189374c
>3c76	d8 00					.byte	$d8,$00
.3c78	20 54 51	jsr $5154		jsr	FloatCompare
.3c7b	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3c7e	20 5a 50	jsr $505a		jsr	FPPushConstant	; 17.9
>3c81	9a 99 99 47				.dword	$4799999a
>3c85	e6 00					.byte	$e6,$00
.3c87	20 c4 58	jsr $58c4		jsr	FloatLogarithm
.3c8a	20 5a 50	jsr $505a		jsr	FPPushConstant	; 2.88480071
>3c8d	94 49 50 5c				.dword	$5c504994
>3c91	e3 00					.byte	$e3,$00
.3c93	20 8d 50	jsr $508d		jsr	FloatSubtract
.3c96	20 57 50	jsr $5057		jsr	FPAbs
.3c99	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>3c9c	4c 37 89 41				.dword	$4189374c
>3ca0	d8 00					.byte	$d8,$00
.3ca2	20 54 51	jsr $5154		jsr	FloatCompare
.3ca5	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3ca8	20 5a 50	jsr $505a		jsr	FPPushConstant	; 50.91
>3cab	85 eb d1 65				.dword	$65d1eb85
>3caf	e7 00					.byte	$e7,$00
.3cb1	20 ba 59	jsr $59ba		jsr	FloatSquareRoot
.3cb4	20 5a 50	jsr $505a		jsr	FPPushConstant	; 7.13512439
>3cb7	31 78 29 72				.dword	$72297831
>3cbb	e4 00					.byte	$e4,$00
.3cbd	20 8d 50	jsr $508d		jsr	FloatSubtract
.3cc0	20 57 50	jsr $5057		jsr	FPAbs
.3cc3	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>3cc6	4c 37 89 41				.dword	$4189374c
>3cca	d8 00					.byte	$d8,$00
.3ccc	20 54 51	jsr $5154		jsr	FloatCompare
.3ccf	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3cd2	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.35
>3cd5	66 66 66 56				.dword	$56666666
>3cd9	e2 00					.byte	$e2,$00
.3cdb	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.2
>3cde	66 66 66 66				.dword	$66666666
>3ce2	df 00					.byte	$df,$00
.3ce4	20 38 59	jsr $5938		jsr	FloatPower
.3ce7	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.06185876
>3cea	72 7e f5 43				.dword	$43f57e72
>3cee	e2 00					.byte	$e2,$00
.3cf0	20 8d 50	jsr $508d		jsr	FloatSubtract
.3cf3	20 57 50	jsr $5057		jsr	FPAbs
.3cf6	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.01
>3cf9	1f 85 eb 51				.dword	$51eb851f
>3cfd	db 00					.byte	$db,$00
.3cff	20 54 51	jsr $5154		jsr	FloatCompare
.3d02	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3d05	20 5a 50	jsr $505a		jsr	FPPushConstant	; 2.15396453
>3d08	06 47 ed 44				.dword	$44ed4706
>3d0c	e3 00					.byte	$e3,$00
.3d0e	20 31 56	jsr $5631		jsr	FloatNegate
.3d11	20 5a 50	jsr $505a		jsr	FPPushConstant	; -2.15396453
>3d14	06 47 ed 44				.dword	$44ed4706
>3d18	e3 80					.byte	$e3,$80
.3d1a	20 54 51	jsr $5154		jsr	FloatCompare
.3d1d	20 1e 51	jsr $511e		jsr	CompareEqual
.3d20	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3d23	20 5a 50	jsr $505a		jsr	FPPushConstant	; 2.15396453
>3d26	06 47 ed 44				.dword	$44ed4706
>3d2a	e3 00					.byte	$e3,$00
.3d2c	20 aa 52	jsr $52aa		jsr	FloatIntegerPart
.3d2f	20 5a 50	jsr $505a		jsr	FPPushConstant	; 2
>3d32	02 00 00 00				.dword	$00000002
>3d36	00 00					.byte	$00,$00
.3d38	20 54 51	jsr $5154		jsr	FloatCompare
.3d3b	20 1e 51	jsr $511e		jsr	CompareEqual
.3d3e	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3d41	20 5a 50	jsr $505a		jsr	FPPushConstant	; -13.74
>3d44	1f 85 eb 6d				.dword	$6deb851f
>3d48	e5 80					.byte	$e5,$80
.3d4a	20 55 59	jsr $5955		jsr	FloatSine
.3d4d	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.92216054
>3d50	48 5b 09 76				.dword	$76095b48
>3d54	e1 80					.byte	$e1,$80
.3d56	20 8d 50	jsr $508d		jsr	FloatSubtract
.3d59	20 57 50	jsr $5057		jsr	FPAbs
.3d5c	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>3d5f	4c 37 89 41				.dword	$4189374c
>3d63	d8 00					.byte	$d8,$00
.3d65	20 54 51	jsr $5154		jsr	FloatCompare
.3d68	20 34 51	jsr $5134		jsr	CompareLess
.3d6b	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3d6e	20 5a 50	jsr $505a		jsr	FPPushConstant	; -13.74
>3d71	1f 85 eb 6d				.dword	$6deb851f
>3d75	e5 80					.byte	$e5,$80
.3d77	20 b5 57	jsr $57b5		jsr	FloatCosine
.3d7a	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.38680736
>3d7d	a1 ce 05 63				.dword	$6305cea1
>3d81	e0 00					.byte	$e0,$00
.3d83	20 8d 50	jsr $508d		jsr	FloatSubtract
.3d86	20 57 50	jsr $5057		jsr	FPAbs
.3d89	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>3d8c	4c 37 89 41				.dword	$4189374c
>3d90	d8 00					.byte	$d8,$00
.3d92	20 54 51	jsr $5154		jsr	FloatCompare
.3d95	20 34 51	jsr $5134		jsr	CompareLess
.3d98	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3d9b	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.1
>3d9e	66 66 66 66				.dword	$66666666
>3da2	de 00					.byte	$de,$00
.3da4	20 c6 59	jsr $59c6		jsr	FloatTangent
.3da7	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.10033467
>3daa	b9 21 be 66				.dword	$66be21b9
>3dae	de 00					.byte	$de,$00
.3db0	20 8d 50	jsr $508d		jsr	FloatSubtract
.3db3	20 57 50	jsr $5057		jsr	FPAbs
.3db6	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>3db9	4c 37 89 41				.dword	$4189374c
>3dbd	d8 00					.byte	$d8,$00
.3dbf	20 54 51	jsr $5154		jsr	FloatCompare
.3dc2	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3dc5	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.873
>3dc8	64 3b df 77				.dword	$77df3b64
>3dcc	e2 00					.byte	$e2,$00
.3dce	20 9a 56	jsr $569a		jsr	FloatArcTan
.3dd1	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.08039573
>3dd4	22 34 25 45				.dword	$45253422
>3dd8	e2 00					.byte	$e2,$00
.3dda	20 8d 50	jsr $508d		jsr	FloatSubtract
.3ddd	20 57 50	jsr $5057		jsr	FPAbs
.3de0	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>3de3	4c 37 89 41				.dword	$4189374c
>3de7	d8 00					.byte	$d8,$00
.3de9	20 54 51	jsr $5154		jsr	FloatCompare
.3dec	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3def	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.78
>3df2	3d 0a d7 63				.dword	$63d70a3d
>3df6	e1 80					.byte	$e1,$80
.3df8	20 c1 57	jsr $57c1		jsr	FloatExponent
.3dfb	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.45840601
>3dfe	a5 18 5a 75				.dword	$755a18a5
>3e02	e0 00					.byte	$e0,$00
.3e04	20 8d 50	jsr $508d		jsr	FloatSubtract
.3e07	20 57 50	jsr $5057		jsr	FPAbs
.3e0a	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>3e0d	4c 37 89 41				.dword	$4189374c
>3e11	d8 00					.byte	$d8,$00
.3e13	20 54 51	jsr $5154		jsr	FloatCompare
.3e16	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3e19	20 5a 50	jsr $505a		jsr	FPPushConstant	; 75.84
>3e1c	3d 0a d7 4b				.dword	$4bd70a3d
>3e20	e8 00					.byte	$e8,$00
.3e22	20 c4 58	jsr $58c4		jsr	FloatLogarithm
.3e25	20 5a 50	jsr $505a		jsr	FPPushConstant	; 4.32862586
>3e28	31 0d 42 45				.dword	$45420d31
>3e2c	e4 00					.byte	$e4,$00
.3e2e	20 8d 50	jsr $508d		jsr	FloatSubtract
.3e31	20 57 50	jsr $5057		jsr	FPAbs
.3e34	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>3e37	4c 37 89 41				.dword	$4189374c
>3e3b	d8 00					.byte	$d8,$00
.3e3d	20 54 51	jsr $5154		jsr	FloatCompare
.3e40	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3e43	20 5a 50	jsr $505a		jsr	FPPushConstant	; 42.77
>3e46	71 3d 8a 55				.dword	$558a3d71
>3e4a	e7 00					.byte	$e7,$00
.3e4c	20 ba 59	jsr $59ba		jsr	FloatSquareRoot
.3e4f	20 5a 50	jsr $505a		jsr	FPPushConstant	; 6.53987767
>3e52	c5 56 a3 68				.dword	$68a356c5
>3e56	e4 00					.byte	$e4,$00
.3e58	20 8d 50	jsr $508d		jsr	FloatSubtract
.3e5b	20 57 50	jsr $5057		jsr	FPAbs
.3e5e	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>3e61	4c 37 89 41				.dword	$4189374c
>3e65	d8 00					.byte	$d8,$00
.3e67	20 54 51	jsr $5154		jsr	FloatCompare
.3e6a	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3e6d	20 5a 50	jsr $505a		jsr	FPPushConstant	; 2.97
>3e70	71 3d 0a 5f				.dword	$5f0a3d71
>3e74	e3 00					.byte	$e3,$00
.3e76	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.8
>3e79	66 66 66 66				.dword	$66666666
>3e7d	e1 00					.byte	$e1,$00
.3e7f	20 38 59	jsr $5938		jsr	FloatPower
.3e82	20 5a 50	jsr $505a		jsr	FPPushConstant	; 2.38893954
>3e85	56 31 72 4c				.dword	$4c723156
>3e89	e3 00					.byte	$e3,$00
.3e8b	20 8d 50	jsr $508d		jsr	FloatSubtract
.3e8e	20 57 50	jsr $5057		jsr	FPAbs
.3e91	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.01
>3e94	1f 85 eb 51				.dword	$51eb851f
>3e98	db 00					.byte	$db,$00
.3e9a	20 54 51	jsr $5154		jsr	FloatCompare
.3e9d	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3ea0	20 5a 50	jsr $505a		jsr	FPPushConstant	; -72.15777112
>3ea3	b0 63 28 48				.dword	$482863b0
>3ea7	e8 80					.byte	$e8,$80
.3ea9	20 31 56	jsr $5631		jsr	FloatNegate
.3eac	20 5a 50	jsr $505a		jsr	FPPushConstant	; 72.15777112
>3eaf	b0 63 28 48				.dword	$482863b0
>3eb3	e8 00					.byte	$e8,$00
.3eb5	20 54 51	jsr $5154		jsr	FloatCompare
.3eb8	20 1e 51	jsr $511e		jsr	CompareEqual
.3ebb	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3ebe	20 5a 50	jsr $505a		jsr	FPPushConstant	; -72.15777112
>3ec1	b0 63 28 48				.dword	$482863b0
>3ec5	e8 80					.byte	$e8,$80
.3ec7	20 aa 52	jsr $52aa		jsr	FloatIntegerPart
.3eca	20 5a 50	jsr $505a		jsr	FPPushConstant	; -72
>3ecd	48 00 00 00				.dword	$00000048
>3ed1	00 80					.byte	$00,$80
.3ed3	20 54 51	jsr $5154		jsr	FloatCompare
.3ed6	20 1e 51	jsr $511e		jsr	CompareEqual
.3ed9	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3edc	20 5a 50	jsr $505a		jsr	FPPushConstant	; -12.39
>3edf	52 b8 1e 63				.dword	$631eb852
>3ee3	e5 80					.byte	$e5,$80
.3ee5	20 55 59	jsr $5955		jsr	FloatSine
.3ee8	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.17545765
>3eeb	c9 95 d5 59				.dword	$59d595c9
>3eef	df 00					.byte	$df,$00
.3ef1	20 8d 50	jsr $508d		jsr	FloatSubtract
.3ef4	20 57 50	jsr $5057		jsr	FPAbs
.3ef7	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>3efa	4c 37 89 41				.dword	$4189374c
>3efe	d8 00					.byte	$d8,$00
.3f00	20 54 51	jsr $5154		jsr	FloatCompare
.3f03	20 34 51	jsr $5134		jsr	CompareLess
.3f06	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3f09	20 5a 50	jsr $505a		jsr	FPPushConstant	; -12.39
>3f0c	52 b8 1e 63				.dword	$631eb852
>3f10	e5 80					.byte	$e5,$80
.3f12	20 b5 57	jsr $57b5		jsr	FloatCosine
.3f15	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.98448698
>3f18	5b ab 03 7e				.dword	$7e03ab5b
>3f1c	e1 00					.byte	$e1,$00
.3f1e	20 8d 50	jsr $508d		jsr	FloatSubtract
.3f21	20 57 50	jsr $5057		jsr	FPAbs
.3f24	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>3f27	4c 37 89 41				.dword	$4189374c
>3f2b	d8 00					.byte	$d8,$00
.3f2d	20 54 51	jsr $5154		jsr	FloatCompare
.3f30	20 34 51	jsr $5134		jsr	CompareLess
.3f33	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3f36	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.19
>3f39	14 ae 47 61				.dword	$6147ae14
>3f3d	df 00					.byte	$df,$00
.3f3f	20 c6 59	jsr $59c6		jsr	FloatTangent
.3f42	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.19231984
>3f45	fe be 77 62				.dword	$6277befe
>3f49	df 00					.byte	$df,$00
.3f4b	20 8d 50	jsr $508d		jsr	FloatSubtract
.3f4e	20 57 50	jsr $5057		jsr	FPAbs
.3f51	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>3f54	4c 37 89 41				.dword	$4189374c
>3f58	d8 00					.byte	$d8,$00
.3f5a	20 54 51	jsr $5154		jsr	FloatCompare
.3f5d	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3f60	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.52
>3f63	29 5c 8f 42				.dword	$428f5c29
>3f67	e1 00					.byte	$e1,$00
.3f69	20 9a 56	jsr $569a		jsr	FloatArcTan
.3f6c	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.47951929
>3f6f	b4 c6 c1 7a				.dword	$7ac1c6b4
>3f73	e0 00					.byte	$e0,$00
.3f75	20 8d 50	jsr $508d		jsr	FloatSubtract
.3f78	20 57 50	jsr $5057		jsr	FPAbs
.3f7b	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>3f7e	4c 37 89 41				.dword	$4189374c
>3f82	d8 00					.byte	$d8,$00
.3f84	20 54 51	jsr $5154		jsr	FloatCompare
.3f87	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3f8a	20 5a 50	jsr $505a		jsr	FPPushConstant	; -1.95
>3f8d	cd cc cc 7c				.dword	$7ccccccd
>3f91	e2 80					.byte	$e2,$80
.3f93	20 c1 57	jsr $57c1		jsr	FloatExponent
.3f96	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.14227407
>3f99	9b 25 d8 48				.dword	$48d8259b
>3f9d	df 00					.byte	$df,$00
.3f9f	20 8d 50	jsr $508d		jsr	FloatSubtract
.3fa2	20 57 50	jsr $5057		jsr	FPAbs
.3fa5	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>3fa8	4c 37 89 41				.dword	$4189374c
>3fac	d8 00					.byte	$d8,$00
.3fae	20 54 51	jsr $5154		jsr	FloatCompare
.3fb1	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3fb4	20 5a 50	jsr $505a		jsr	FPPushConstant	; 85.41
>3fb7	c3 f5 68 55				.dword	$5568f5c3
>3fbb	e8 00					.byte	$e8,$00
.3fbd	20 c4 58	jsr $58c4		jsr	FloatLogarithm
.3fc0	20 5a 50	jsr $505a		jsr	FPPushConstant	; 4.44746319
>3fc3	29 cf 28 47				.dword	$4728cf29
>3fc7	e4 00					.byte	$e4,$00
.3fc9	20 8d 50	jsr $508d		jsr	FloatSubtract
.3fcc	20 57 50	jsr $5057		jsr	FPAbs
.3fcf	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>3fd2	4c 37 89 41				.dword	$4189374c
>3fd6	d8 00					.byte	$d8,$00
.3fd8	20 54 51	jsr $5154		jsr	FloatCompare
.3fdb	20 4a 50	jsr $504a		jsr	FPAssertCheck
.3fde	20 5a 50	jsr $505a		jsr	FPPushConstant	; 63.43
>3fe1	f6 28 dc 7e				.dword	$7edc28f6
>3fe5	e7 00					.byte	$e7,$00
.3fe7	20 ba 59	jsr $59ba		jsr	FloatSquareRoot
.3fea	20 5a 50	jsr $505a		jsr	FPPushConstant	; 7.96429532
>3fed	ee c0 6d 7f				.dword	$7f6dc0ee
>3ff1	e4 00					.byte	$e4,$00
.3ff3	20 8d 50	jsr $508d		jsr	FloatSubtract
.3ff6	20 57 50	jsr $5057		jsr	FPAbs
.3ff9	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>3ffc	4c 37 89 41				.dword	$4189374c
>4000	d8 00					.byte	$d8,$00
.4002	20 54 51	jsr $5154		jsr	FloatCompare
.4005	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4008	20 5a 50	jsr $505a		jsr	FPPushConstant	; 3.24
>400b	7b 14 ae 67				.dword	$67ae147b
>400f	e3 00					.byte	$e3,$00
.4011	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.4
>4014	66 66 66 66				.dword	$66666666
>4018	e0 00					.byte	$e0,$00
.401a	20 38 59	jsr $5938		jsr	FloatPower
.401d	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.60036117
>4020	42 51 6c 66				.dword	$666c5142
>4024	e2 00					.byte	$e2,$00
.4026	20 8d 50	jsr $508d		jsr	FloatSubtract
.4029	20 57 50	jsr $5057		jsr	FPAbs
.402c	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.01
>402f	1f 85 eb 51				.dword	$51eb851f
>4033	db 00					.byte	$db,$00
.4035	20 54 51	jsr $5154		jsr	FloatCompare
.4038	20 4a 50	jsr $504a		jsr	FPAssertCheck
.403b	20 5a 50	jsr $505a		jsr	FPPushConstant	; 27.88207662
>403e	18 3f 87 6f				.dword	$6f873f18
>4042	e6 00					.byte	$e6,$00
.4044	20 31 56	jsr $5631		jsr	FloatNegate
.4047	20 5a 50	jsr $505a		jsr	FPPushConstant	; -27.88207662
>404a	18 3f 87 6f				.dword	$6f873f18
>404e	e6 80					.byte	$e6,$80
.4050	20 54 51	jsr $5154		jsr	FloatCompare
.4053	20 1e 51	jsr $511e		jsr	CompareEqual
.4056	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4059	20 5a 50	jsr $505a		jsr	FPPushConstant	; 27.88207662
>405c	18 3f 87 6f				.dword	$6f873f18
>4060	e6 00					.byte	$e6,$00
.4062	20 aa 52	jsr $52aa		jsr	FloatIntegerPart
.4065	20 5a 50	jsr $505a		jsr	FPPushConstant	; 27
>4068	1b 00 00 00				.dword	$0000001b
>406c	00 00					.byte	$00,$00
.406e	20 54 51	jsr $5154		jsr	FloatCompare
.4071	20 1e 51	jsr $511e		jsr	CompareEqual
.4074	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4077	20 5a 50	jsr $505a		jsr	FPPushConstant	; -3.78
>407a	8f c2 f5 78				.dword	$78f5c28f
>407e	e3 80					.byte	$e3,$80
.4080	20 55 59	jsr $5955		jsr	FloatSine
.4083	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.59591722
>4086	f6 03 47 4c				.dword	$4c4703f6
>408a	e1 00					.byte	$e1,$00
.408c	20 8d 50	jsr $508d		jsr	FloatSubtract
.408f	20 57 50	jsr $5057		jsr	FPAbs
.4092	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>4095	4c 37 89 41				.dword	$4189374c
>4099	d8 00					.byte	$d8,$00
.409b	20 54 51	jsr $5154		jsr	FloatCompare
.409e	20 34 51	jsr $5134		jsr	CompareLess
.40a1	20 4a 50	jsr $504a		jsr	FPAssertCheck
.40a4	20 5a 50	jsr $505a		jsr	FPPushConstant	; -3.78
>40a7	8f c2 f5 78				.dword	$78f5c28f
>40ab	e3 80					.byte	$e3,$80
.40ad	20 b5 57	jsr $57b5		jsr	FloatCosine
.40b0	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.80304587
>40b3	02 35 ca 66				.dword	$66ca3502
>40b7	e1 80					.byte	$e1,$80
.40b9	20 8d 50	jsr $508d		jsr	FloatSubtract
.40bc	20 57 50	jsr $5057		jsr	FPAbs
.40bf	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>40c2	4c 37 89 41				.dword	$4189374c
>40c6	d8 00					.byte	$d8,$00
.40c8	20 54 51	jsr $5154		jsr	FloatCompare
.40cb	20 34 51	jsr $5134		jsr	CompareLess
.40ce	20 4a 50	jsr $504a		jsr	FPAssertCheck
.40d1	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.3
>40d4	cd cc cc 4c				.dword	$4ccccccd
>40d8	e0 00					.byte	$e0,$00
.40da	20 c6 59	jsr $59c6		jsr	FloatTangent
.40dd	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.30933625
>40e0	15 a9 30 4f				.dword	$4f30a915
>40e4	e0 00					.byte	$e0,$00
.40e6	20 8d 50	jsr $508d		jsr	FloatSubtract
.40e9	20 57 50	jsr $5057		jsr	FPAbs
.40ec	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>40ef	4c 37 89 41				.dword	$4189374c
>40f3	d8 00					.byte	$d8,$00
.40f5	20 54 51	jsr $5154		jsr	FloatCompare
.40f8	20 4a 50	jsr $504a		jsr	FPAssertCheck
.40fb	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.832
>40fe	db f9 7e 6a				.dword	$6a7ef9db
>4102	e1 00					.byte	$e1,$00
.4104	20 9a 56	jsr $569a		jsr	FloatArcTan
.4107	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.69395087
>410a	d2 61 d3 58				.dword	$58d361d2
>410e	e1 00					.byte	$e1,$00
.4110	20 8d 50	jsr $508d		jsr	FloatSubtract
.4113	20 57 50	jsr $5057		jsr	FPAbs
.4116	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>4119	4c 37 89 41				.dword	$4189374c
>411d	d8 00					.byte	$d8,$00
.411f	20 54 51	jsr $5154		jsr	FloatCompare
.4122	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4125	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.77
>4128	29 5c 8f 62				.dword	$628f5c29
>412c	e1 00					.byte	$e1,$00
.412e	20 c1 57	jsr $57c1		jsr	FloatExponent
.4131	20 5a 50	jsr $505a		jsr	FPPushConstant	; 2.15976625
>4134	1c ce 1c 45				.dword	$451cce1c
>4138	e3 00					.byte	$e3,$00
.413a	20 8d 50	jsr $508d		jsr	FloatSubtract
.413d	20 57 50	jsr $5057		jsr	FPAbs
.4140	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>4143	4c 37 89 41				.dword	$4189374c
>4147	d8 00					.byte	$d8,$00
.4149	20 54 51	jsr $5154		jsr	FloatCompare
.414c	20 4a 50	jsr $504a		jsr	FPAssertCheck
.414f	20 5a 50	jsr $505a		jsr	FPPushConstant	; 7.82
>4152	52 b8 1e 7d				.dword	$7d1eb852
>4156	e4 00					.byte	$e4,$00
.4158	20 c4 58	jsr $58c4		jsr	FloatLogarithm
.415b	20 5a 50	jsr $505a		jsr	FPPushConstant	; 2.05668455
>415e	1e 5c d0 41				.dword	$41d05c1e
>4162	e3 00					.byte	$e3,$00
.4164	20 8d 50	jsr $508d		jsr	FloatSubtract
.4167	20 57 50	jsr $5057		jsr	FPAbs
.416a	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>416d	4c 37 89 41				.dword	$4189374c
>4171	d8 00					.byte	$d8,$00
.4173	20 54 51	jsr $5154		jsr	FloatCompare
.4176	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4179	20 5a 50	jsr $505a		jsr	FPPushConstant	; 99.3
>417c	cd cc 4c 63				.dword	$634ccccd
>4180	e8 00					.byte	$e8,$00
.4182	20 ba 59	jsr $59ba		jsr	FloatSquareRoot
.4185	20 5a 50	jsr $505a		jsr	FPPushConstant	; 9.96493853
>4188	b1 31 b8 4f				.dword	$4fb831b1
>418c	e5 00					.byte	$e5,$00
.418e	20 8d 50	jsr $508d		jsr	FloatSubtract
.4191	20 57 50	jsr $5057		jsr	FPAbs
.4194	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>4197	4c 37 89 41				.dword	$4189374c
>419b	d8 00					.byte	$d8,$00
.419d	20 54 51	jsr $5154		jsr	FloatCompare
.41a0	20 4a 50	jsr $504a		jsr	FPAssertCheck
.41a3	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.39333333
>41a6	3d 7e b1 64				.dword	$64b17e3d
>41aa	e0 00					.byte	$e0,$00
.41ac	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.5
>41af	00 00 00 40				.dword	$40000000
>41b3	e1 00					.byte	$e1,$00
.41b5	20 38 59	jsr $5938		jsr	FloatPower
.41b8	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.62716292
>41bb	e3 df 46 50				.dword	$5046dfe3
>41bf	e1 00					.byte	$e1,$00
.41c1	20 8d 50	jsr $508d		jsr	FloatSubtract
.41c4	20 57 50	jsr $5057		jsr	FPAbs
.41c7	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.01
>41ca	1f 85 eb 51				.dword	$51eb851f
>41ce	db 00					.byte	$db,$00
.41d0	20 54 51	jsr $5154		jsr	FloatCompare
.41d3	20 4a 50	jsr $504a		jsr	FPAssertCheck
.41d6	20 5a 50	jsr $505a		jsr	FPPushConstant	; -10.0981615
>41d9	e6 08 c9 50				.dword	$50c908e6
>41dd	e5 80					.byte	$e5,$80
.41df	20 31 56	jsr $5631		jsr	FloatNegate
.41e2	20 5a 50	jsr $505a		jsr	FPPushConstant	; 10.0981615
>41e5	e6 08 c9 50				.dword	$50c908e6
>41e9	e5 00					.byte	$e5,$00
.41eb	20 54 51	jsr $5154		jsr	FloatCompare
.41ee	20 1e 51	jsr $511e		jsr	CompareEqual
.41f1	20 4a 50	jsr $504a		jsr	FPAssertCheck
.41f4	20 5a 50	jsr $505a		jsr	FPPushConstant	; -10.0981615
>41f7	e6 08 c9 50				.dword	$50c908e6
>41fb	e5 80					.byte	$e5,$80
.41fd	20 aa 52	jsr $52aa		jsr	FloatIntegerPart
.4200	20 5a 50	jsr $505a		jsr	FPPushConstant	; -10
>4203	0a 00 00 00				.dword	$0000000a
>4207	00 80					.byte	$00,$80
.4209	20 54 51	jsr $5154		jsr	FloatCompare
.420c	20 1e 51	jsr $511e		jsr	CompareEqual
.420f	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4212	20 5a 50	jsr $505a		jsr	FPPushConstant	; 15.85
>4215	cd cc cc 7e				.dword	$7ecccccd
>4219	e5 00					.byte	$e5,$00
.421b	20 55 59	jsr $5955		jsr	FloatSine
.421e	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.14155963
>4221	fb 80 7a 48				.dword	$487a80fb
>4225	df 80					.byte	$df,$80
.4227	20 8d 50	jsr $508d		jsr	FloatSubtract
.422a	20 57 50	jsr $5057		jsr	FPAbs
.422d	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>4230	4c 37 89 41				.dword	$4189374c
>4234	d8 00					.byte	$d8,$00
.4236	20 54 51	jsr $5154		jsr	FloatCompare
.4239	20 34 51	jsr $5134		jsr	CompareLess
.423c	20 4a 50	jsr $504a		jsr	FPAssertCheck
.423f	20 5a 50	jsr $505a		jsr	FPPushConstant	; 15.85
>4242	cd cc cc 7e				.dword	$7ecccccd
>4246	e5 00					.byte	$e5,$00
.4248	20 b5 57	jsr $57b5		jsr	FloatCosine
.424b	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.98992973
>424e	74 04 b6 7e				.dword	$7eb60474
>4252	e1 80					.byte	$e1,$80
.4254	20 8d 50	jsr $508d		jsr	FloatSubtract
.4257	20 57 50	jsr $5057		jsr	FPAbs
.425a	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>425d	4c 37 89 41				.dword	$4189374c
>4261	d8 00					.byte	$d8,$00
.4263	20 54 51	jsr $5154		jsr	FloatCompare
.4266	20 34 51	jsr $5134		jsr	CompareLess
.4269	20 4a 50	jsr $504a		jsr	FPAssertCheck
.426c	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.13
>426f	29 5c 8f 42				.dword	$428f5c29
>4273	df 00					.byte	$df,$00
.4275	20 c6 59	jsr $59c6		jsr	FloatTangent
.4278	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.13073732
>427b	84 00 f0 42				.dword	$42f00084
>427f	df 00					.byte	$df,$00
.4281	20 8d 50	jsr $508d		jsr	FloatSubtract
.4284	20 57 50	jsr $5057		jsr	FPAbs
.4287	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>428a	4c 37 89 41				.dword	$4189374c
>428e	d8 00					.byte	$d8,$00
.4290	20 54 51	jsr $5154		jsr	FloatCompare
.4293	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4296	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.149
>4299	5e ba 49 4c				.dword	$4c49ba5e
>429d	df 00					.byte	$df,$00
.429f	20 9a 56	jsr $569a		jsr	FloatArcTan
.42a2	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.14791181
>42a5	c5 18 bb 4b				.dword	$4bbb18c5
>42a9	df 00					.byte	$df,$00
.42ab	20 8d 50	jsr $508d		jsr	FloatSubtract
.42ae	20 57 50	jsr $5057		jsr	FPAbs
.42b1	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>42b4	4c 37 89 41				.dword	$4189374c
>42b8	d8 00					.byte	$d8,$00
.42ba	20 54 51	jsr $5154		jsr	FloatCompare
.42bd	20 4a 50	jsr $504a		jsr	FPAssertCheck
.42c0	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.26
>42c3	0a d7 a3 50				.dword	$50a3d70a
>42c7	e2 00					.byte	$e2,$00
.42c9	20 c1 57	jsr $57c1		jsr	FloatExponent
.42cc	20 5a 50	jsr $505a		jsr	FPPushConstant	; 3.52542149
>42cf	bb 40 d0 70				.dword	$70d040bb
>42d3	e3 00					.byte	$e3,$00
.42d5	20 8d 50	jsr $508d		jsr	FloatSubtract
.42d8	20 57 50	jsr $5057		jsr	FPAbs
.42db	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>42de	4c 37 89 41				.dword	$4189374c
>42e2	d8 00					.byte	$d8,$00
.42e4	20 54 51	jsr $5154		jsr	FloatCompare
.42e7	20 4a 50	jsr $504a		jsr	FPAssertCheck
.42ea	20 5a 50	jsr $505a		jsr	FPPushConstant	; 76.92
>42ed	1f 85 eb 4c				.dword	$4ceb851f
>42f1	e8 00					.byte	$e8,$00
.42f3	20 c4 58	jsr $58c4		jsr	FloatLogarithm
.42f6	20 5a 50	jsr $505a		jsr	FPPushConstant	; 4.34276592
>42f9	1e f8 7b 45				.dword	$457bf81e
>42fd	e4 00					.byte	$e4,$00
.42ff	20 8d 50	jsr $508d		jsr	FloatSubtract
.4302	20 57 50	jsr $5057		jsr	FPAbs
.4305	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>4308	4c 37 89 41				.dword	$4189374c
>430c	d8 00					.byte	$d8,$00
.430e	20 54 51	jsr $5154		jsr	FloatCompare
.4311	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4314	20 5a 50	jsr $505a		jsr	FPPushConstant	; 8.97
>4317	5c 8f c2 47				.dword	$47c28f5c
>431b	e5 00					.byte	$e5,$00
.431d	20 ba 59	jsr $59ba		jsr	FloatSquareRoot
.4320	20 5a 50	jsr $505a		jsr	FPPushConstant	; 2.99499583
>4323	7f 01 d7 5f				.dword	$5fd7017f
>4327	e3 00					.byte	$e3,$00
.4329	20 8d 50	jsr $508d		jsr	FloatSubtract
.432c	20 57 50	jsr $5057		jsr	FPAbs
.432f	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>4332	4c 37 89 41				.dword	$4189374c
>4336	d8 00					.byte	$d8,$00
.4338	20 54 51	jsr $5154		jsr	FloatCompare
.433b	20 4a 50	jsr $504a		jsr	FPAssertCheck
.433e	20 5a 50	jsr $505a		jsr	FPPushConstant	; 2.96
>4341	ec 51 b8 5e				.dword	$5eb851ec
>4345	e3 00					.byte	$e3,$00
.4347	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.4
>434a	66 66 66 66				.dword	$66666666
>434e	e0 00					.byte	$e0,$00
.4350	20 38 59	jsr $5938		jsr	FloatPower
.4353	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.54353572
>4356	0b 4a c9 62				.dword	$62c94a0b
>435a	e2 00					.byte	$e2,$00
.435c	20 8d 50	jsr $508d		jsr	FloatSubtract
.435f	20 57 50	jsr $5057		jsr	FPAbs
.4362	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.01
>4365	1f 85 eb 51				.dword	$51eb851f
>4369	db 00					.byte	$db,$00
.436b	20 54 51	jsr $5154		jsr	FloatCompare
.436e	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4371	20 5a 50	jsr $505a		jsr	FPPushConstant	; 31.91998056
>4374	62 0f ae 7f				.dword	$7fae0f62
>4378	e6 00					.byte	$e6,$00
.437a	20 31 56	jsr $5631		jsr	FloatNegate
.437d	20 5a 50	jsr $505a		jsr	FPPushConstant	; -31.91998056
>4380	62 0f ae 7f				.dword	$7fae0f62
>4384	e6 80					.byte	$e6,$80
.4386	20 54 51	jsr $5154		jsr	FloatCompare
.4389	20 1e 51	jsr $511e		jsr	CompareEqual
.438c	20 4a 50	jsr $504a		jsr	FPAssertCheck
.438f	20 5a 50	jsr $505a		jsr	FPPushConstant	; 31.91998056
>4392	62 0f ae 7f				.dword	$7fae0f62
>4396	e6 00					.byte	$e6,$00
.4398	20 aa 52	jsr $52aa		jsr	FloatIntegerPart
.439b	20 5a 50	jsr $505a		jsr	FPPushConstant	; 31
>439e	1f 00 00 00				.dword	$0000001f
>43a2	00 00					.byte	$00,$00
.43a4	20 54 51	jsr $5154		jsr	FloatCompare
.43a7	20 1e 51	jsr $511e		jsr	CompareEqual
.43aa	20 4a 50	jsr $504a		jsr	FPAssertCheck
.43ad	20 5a 50	jsr $505a		jsr	FPPushConstant	; 10.93
>43b0	d7 a3 70 57				.dword	$5770a3d7
>43b4	e5 00					.byte	$e5,$00
.43b6	20 55 59	jsr $5955		jsr	FloatSine
.43b9	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.99785078
>43bc	09 93 b9 7f				.dword	$7fb99309
>43c0	e1 80					.byte	$e1,$80
.43c2	20 8d 50	jsr $508d		jsr	FloatSubtract
.43c5	20 57 50	jsr $5057		jsr	FPAbs
.43c8	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>43cb	4c 37 89 41				.dword	$4189374c
>43cf	d8 00					.byte	$d8,$00
.43d1	20 54 51	jsr $5154		jsr	FloatCompare
.43d4	20 34 51	jsr $5134		jsr	CompareLess
.43d7	20 4a 50	jsr $504a		jsr	FPAssertCheck
.43da	20 5a 50	jsr $505a		jsr	FPPushConstant	; 10.93
>43dd	d7 a3 70 57				.dword	$5770a3d7
>43e1	e5 00					.byte	$e5,$00
.43e3	20 b5 57	jsr $57b5		jsr	FloatCosine
.43e6	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.0655273
>43e9	aa 96 19 43				.dword	$431996aa
>43ed	de 80					.byte	$de,$80
.43ef	20 8d 50	jsr $508d		jsr	FloatSubtract
.43f2	20 57 50	jsr $5057		jsr	FPAbs
.43f5	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>43f8	4c 37 89 41				.dword	$4189374c
>43fc	d8 00					.byte	$d8,$00
.43fe	20 54 51	jsr $5154		jsr	FloatCompare
.4401	20 34 51	jsr $5134		jsr	CompareLess
.4404	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4407	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.12
>440a	ae 47 e1 7a				.dword	$7ae147ae
>440e	de 00					.byte	$de,$00
.4410	20 c6 59	jsr $59c6		jsr	FloatTangent
.4413	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.12057934
>4416	87 26 79 7b				.dword	$7b792687
>441a	de 00					.byte	$de,$00
.441c	20 8d 50	jsr $508d		jsr	FloatSubtract
.441f	20 57 50	jsr $5057		jsr	FPAbs
.4422	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>4425	4c 37 89 41				.dword	$4189374c
>4429	d8 00					.byte	$d8,$00
.442b	20 54 51	jsr $5154		jsr	FloatCompare
.442e	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4431	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.102
>4434	02 2b 87 46				.dword	$46872b02
>4438	e2 00					.byte	$e2,$00
.443a	20 9a 56	jsr $569a		jsr	FloatArcTan
.443d	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.83388534
>4440	3c c1 bc 6a				.dword	$6abcc13c
>4444	e1 00					.byte	$e1,$00
.4446	20 8d 50	jsr $508d		jsr	FloatSubtract
.4449	20 57 50	jsr $5057		jsr	FPAbs
.444c	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>444f	4c 37 89 41				.dword	$4189374c
>4453	d8 00					.byte	$d8,$00
.4455	20 54 51	jsr $5154		jsr	FloatCompare
.4458	20 4a 50	jsr $504a		jsr	FPAssertCheck
.445b	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.18
>445e	c3 f5 28 5c				.dword	$5c28f5c3
>4462	df 80					.byte	$df,$80
.4464	20 c1 57	jsr $57c1		jsr	FloatExponent
.4467	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.83527021
>446a	5e 22 ea 6a				.dword	$6aea225e
>446e	e1 00					.byte	$e1,$00
.4470	20 8d 50	jsr $508d		jsr	FloatSubtract
.4473	20 57 50	jsr $5057		jsr	FPAbs
.4476	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>4479	4c 37 89 41				.dword	$4189374c
>447d	d8 00					.byte	$d8,$00
.447f	20 54 51	jsr $5154		jsr	FloatCompare
.4482	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4485	20 5a 50	jsr $505a		jsr	FPPushConstant	; 3.84
>4488	ae 47 e1 7a				.dword	$7ae147ae
>448c	e3 00					.byte	$e3,$00
.448e	20 c4 58	jsr $58c4		jsr	FloatLogarithm
.4491	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.34547237
>4494	25 38 1c 56				.dword	$561c3825
>4498	e2 00					.byte	$e2,$00
.449a	20 8d 50	jsr $508d		jsr	FloatSubtract
.449d	20 57 50	jsr $5057		jsr	FPAbs
.44a0	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>44a3	4c 37 89 41				.dword	$4189374c
>44a7	d8 00					.byte	$d8,$00
.44a9	20 54 51	jsr $5154		jsr	FloatCompare
.44ac	20 4a 50	jsr $504a		jsr	FPAssertCheck
.44af	20 5a 50	jsr $505a		jsr	FPPushConstant	; 94.52
>44b2	b8 1e 85 5e				.dword	$5e851eb8
>44b6	e8 00					.byte	$e8,$00
.44b8	20 ba 59	jsr $59ba		jsr	FloatSquareRoot
.44bb	20 5a 50	jsr $505a		jsr	FPPushConstant	; 9.72213968
>44be	2b f1 c6 4d				.dword	$4dc6f12b
>44c2	e5 00					.byte	$e5,$00
.44c4	20 8d 50	jsr $508d		jsr	FloatSubtract
.44c7	20 57 50	jsr $5057		jsr	FPAbs
.44ca	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>44cd	4c 37 89 41				.dword	$4189374c
>44d1	d8 00					.byte	$d8,$00
.44d3	20 54 51	jsr $5154		jsr	FloatCompare
.44d6	20 4a 50	jsr $504a		jsr	FPAssertCheck
.44d9	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.06333333
>44dc	3d a7 0d 44				.dword	$440da73d
>44e0	e2 00					.byte	$e2,$00
.44e2	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.2
>44e5	66 66 66 66				.dword	$66666666
>44e9	df 00					.byte	$df,$00
.44eb	20 38 59	jsr $5938		jsr	FloatPower
.44ee	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.01235746
>44f1	f2 76 ca 40				.dword	$40ca76f2
>44f5	e2 00					.byte	$e2,$00
.44f7	20 8d 50	jsr $508d		jsr	FloatSubtract
.44fa	20 57 50	jsr $5057		jsr	FPAbs
.44fd	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.01
>4500	1f 85 eb 51				.dword	$51eb851f
>4504	db 00					.byte	$db,$00
.4506	20 54 51	jsr $5154		jsr	FloatCompare
.4509	20 4a 50	jsr $504a		jsr	FPAssertCheck
.450c	20 5a 50	jsr $505a		jsr	FPPushConstant	; 18.86433952
>450f	6b 15 75 4b				.dword	$4b75156b
>4513	e6 00					.byte	$e6,$00
.4515	20 31 56	jsr $5631		jsr	FloatNegate
.4518	20 5a 50	jsr $505a		jsr	FPPushConstant	; -18.86433952
>451b	6b 15 75 4b				.dword	$4b75156b
>451f	e6 80					.byte	$e6,$80
.4521	20 54 51	jsr $5154		jsr	FloatCompare
.4524	20 1e 51	jsr $511e		jsr	CompareEqual
.4527	20 4a 50	jsr $504a		jsr	FPAssertCheck
.452a	20 5a 50	jsr $505a		jsr	FPPushConstant	; 18.86433952
>452d	6b 15 75 4b				.dword	$4b75156b
>4531	e6 00					.byte	$e6,$00
.4533	20 aa 52	jsr $52aa		jsr	FloatIntegerPart
.4536	20 5a 50	jsr $505a		jsr	FPPushConstant	; 18
>4539	12 00 00 00				.dword	$00000012
>453d	00 00					.byte	$00,$00
.453f	20 54 51	jsr $5154		jsr	FloatCompare
.4542	20 1e 51	jsr $511e		jsr	CompareEqual
.4545	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4548	20 5a 50	jsr $505a		jsr	FPPushConstant	; 2.23
>454b	f6 28 5c 47				.dword	$475c28f6
>454f	e3 00					.byte	$e3,$00
.4551	20 55 59	jsr $5955		jsr	FloatSine
.4554	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.79048022
>4557	b3 74 2e 65				.dword	$652e74b3
>455b	e1 00					.byte	$e1,$00
.455d	20 8d 50	jsr $508d		jsr	FloatSubtract
.4560	20 57 50	jsr $5057		jsr	FPAbs
.4563	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>4566	4c 37 89 41				.dword	$4189374c
>456a	d8 00					.byte	$d8,$00
.456c	20 54 51	jsr $5154		jsr	FloatCompare
.456f	20 34 51	jsr $5134		jsr	CompareLess
.4572	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4575	20 5a 50	jsr $505a		jsr	FPPushConstant	; 2.23
>4578	f6 28 5c 47				.dword	$475c28f6
>457c	e3 00					.byte	$e3,$00
.457e	20 b5 57	jsr $57b5		jsr	FloatCosine
.4581	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.61248757
>4584	21 fe 65 4e				.dword	$4e65fe21
>4588	e1 80					.byte	$e1,$80
.458a	20 8d 50	jsr $508d		jsr	FloatSubtract
.458d	20 57 50	jsr $5057		jsr	FPAbs
.4590	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>4593	4c 37 89 41				.dword	$4189374c
>4597	d8 00					.byte	$d8,$00
.4599	20 54 51	jsr $5154		jsr	FloatCompare
.459c	20 34 51	jsr $5134		jsr	CompareLess
.459f	20 4a 50	jsr $504a		jsr	FPAssertCheck
.45a2	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.2
>45a5	66 66 66 66				.dword	$66666666
>45a9	df 00					.byte	$df,$00
.45ab	20 c6 59	jsr $59c6		jsr	FloatTangent
.45ae	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.20271004
>45b1	41 9c c9 67				.dword	$67c99c41
>45b5	df 00					.byte	$df,$00
.45b7	20 8d 50	jsr $508d		jsr	FloatSubtract
.45ba	20 57 50	jsr $5057		jsr	FPAbs
.45bd	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>45c0	4c 37 89 41				.dword	$4189374c
>45c4	d8 00					.byte	$d8,$00
.45c6	20 54 51	jsr $5154		jsr	FloatCompare
.45c9	20 4a 50	jsr $504a		jsr	FPAssertCheck
.45cc	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.556
>45cf	06 81 95 63				.dword	$63958106
>45d3	e2 00					.byte	$e2,$00
.45d5	20 9a 56	jsr $569a		jsr	FloatArcTan
.45d8	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.99958878
>45db	70 86 f2 7f				.dword	$7ff28670
>45df	e1 00					.byte	$e1,$00
.45e1	20 8d 50	jsr $508d		jsr	FloatSubtract
.45e4	20 57 50	jsr $5057		jsr	FPAbs
.45e7	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>45ea	4c 37 89 41				.dword	$4189374c
>45ee	d8 00					.byte	$d8,$00
.45f0	20 54 51	jsr $5154		jsr	FloatCompare
.45f3	20 4a 50	jsr $504a		jsr	FPAssertCheck
.45f6	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.79
>45f9	52 b8 1e 65				.dword	$651eb852
>45fd	e1 80					.byte	$e1,$80
.45ff	20 c1 57	jsr $57c1		jsr	FloatExponent
.4602	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.4538448
>4605	3d 2c 2f 74				.dword	$742f2c3d
>4609	e0 00					.byte	$e0,$00
.460b	20 8d 50	jsr $508d		jsr	FloatSubtract
.460e	20 57 50	jsr $5057		jsr	FPAbs
.4611	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>4614	4c 37 89 41				.dword	$4189374c
>4618	d8 00					.byte	$d8,$00
.461a	20 54 51	jsr $5154		jsr	FloatCompare
.461d	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4620	20 5a 50	jsr $505a		jsr	FPPushConstant	; 74.55
>4623	cd cc 8c 4a				.dword	$4a8ccccd
>4627	e8 00					.byte	$e8,$00
.4629	20 c4 58	jsr $58c4		jsr	FloatLogarithm
.462c	20 5a 50	jsr $505a		jsr	FPPushConstant	; 4.31147004
>462f	02 c8 fb 44				.dword	$44fbc802
>4633	e4 00					.byte	$e4,$00
.4635	20 8d 50	jsr $508d		jsr	FloatSubtract
.4638	20 57 50	jsr $5057		jsr	FPAbs
.463b	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>463e	4c 37 89 41				.dword	$4189374c
>4642	d8 00					.byte	$d8,$00
.4644	20 54 51	jsr $5154		jsr	FloatCompare
.4647	20 4a 50	jsr $504a		jsr	FPAssertCheck
.464a	20 5a 50	jsr $505a		jsr	FPPushConstant	; 55.82
>464d	0a d7 a3 6f				.dword	$6fa3d70a
>4651	e7 00					.byte	$e7,$00
.4653	20 ba 59	jsr $59ba		jsr	FloatSquareRoot
.4656	20 5a 50	jsr $505a		jsr	FPPushConstant	; 7.47127834
>4659	28 5b 8a 77				.dword	$778a5b28
>465d	e4 00					.byte	$e4,$00
.465f	20 8d 50	jsr $508d		jsr	FloatSubtract
.4662	20 57 50	jsr $5057		jsr	FPAbs
.4665	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>4668	4c 37 89 41				.dword	$4189374c
>466c	d8 00					.byte	$d8,$00
.466e	20 54 51	jsr $5154		jsr	FloatCompare
.4671	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4674	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.99
>4677	f6 28 5c 7f				.dword	$7f5c28f6
>467b	e2 00					.byte	$e2,$00
.467d	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.5
>4680	00 00 00 60				.dword	$60000000
>4684	e2 00					.byte	$e2,$00
.4686	20 38 59	jsr $5938		jsr	FloatPower
.4689	20 5a 50	jsr $505a		jsr	FPPushConstant	; 2.80724046
>468c	f2 e9 d4 59				.dword	$59d4e9f2
>4690	e3 00					.byte	$e3,$00
.4692	20 8d 50	jsr $508d		jsr	FloatSubtract
.4695	20 57 50	jsr $5057		jsr	FPAbs
.4698	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.01
>469b	1f 85 eb 51				.dword	$51eb851f
>469f	db 00					.byte	$db,$00
.46a1	20 54 51	jsr $5154		jsr	FloatCompare
.46a4	20 4a 50	jsr $504a		jsr	FPAssertCheck
.46a7	20 5a 50	jsr $505a		jsr	FPPushConstant	; -53.1653843
>46aa	40 ad 54 6a				.dword	$6a54ad40
>46ae	e7 80					.byte	$e7,$80
.46b0	20 31 56	jsr $5631		jsr	FloatNegate
.46b3	20 5a 50	jsr $505a		jsr	FPPushConstant	; 53.1653843
>46b6	40 ad 54 6a				.dword	$6a54ad40
>46ba	e7 00					.byte	$e7,$00
.46bc	20 54 51	jsr $5154		jsr	FloatCompare
.46bf	20 1e 51	jsr $511e		jsr	CompareEqual
.46c2	20 4a 50	jsr $504a		jsr	FPAssertCheck
.46c5	20 5a 50	jsr $505a		jsr	FPPushConstant	; -53.1653843
>46c8	40 ad 54 6a				.dword	$6a54ad40
>46cc	e7 80					.byte	$e7,$80
.46ce	20 aa 52	jsr $52aa		jsr	FloatIntegerPart
.46d1	20 5a 50	jsr $505a		jsr	FPPushConstant	; -53
>46d4	35 00 00 00				.dword	$00000035
>46d8	00 80					.byte	$00,$80
.46da	20 54 51	jsr $5154		jsr	FloatCompare
.46dd	20 1e 51	jsr $511e		jsr	CompareEqual
.46e0	20 4a 50	jsr $504a		jsr	FPAssertCheck
.46e3	20 5a 50	jsr $505a		jsr	FPPushConstant	; -13.3
>46e6	66 66 66 6a				.dword	$6a666666
>46ea	e5 80					.byte	$e5,$80
.46ec	20 55 59	jsr $5955		jsr	FloatSine
.46ef	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.66956976
>46f2	3f 76 b4 55				.dword	$55b4763f
>46f6	e1 80					.byte	$e1,$80
.46f8	20 8d 50	jsr $508d		jsr	FloatSubtract
.46fb	20 57 50	jsr $5057		jsr	FPAbs
.46fe	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>4701	4c 37 89 41				.dword	$4189374c
>4705	d8 00					.byte	$d8,$00
.4707	20 54 51	jsr $5154		jsr	FloatCompare
.470a	20 34 51	jsr $5134		jsr	CompareLess
.470d	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4710	20 5a 50	jsr $505a		jsr	FPPushConstant	; -13.3
>4713	66 66 66 6a				.dword	$6a666666
>4717	e5 80					.byte	$e5,$80
.4719	20 b5 57	jsr $57b5		jsr	FloatCosine
.471c	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.74274917
>471f	a1 67 12 5f				.dword	$5f1267a1
>4723	e1 00					.byte	$e1,$00
.4725	20 8d 50	jsr $508d		jsr	FloatSubtract
.4728	20 57 50	jsr $5057		jsr	FPAbs
.472b	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>472e	4c 37 89 41				.dword	$4189374c
>4732	d8 00					.byte	$d8,$00
.4734	20 54 51	jsr $5154		jsr	FloatCompare
.4737	20 34 51	jsr $5134		jsr	CompareLess
.473a	20 4a 50	jsr $504a		jsr	FPAssertCheck
.473d	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.31
>4740	f6 28 5c 4f				.dword	$4f5c28f6
>4744	e0 00					.byte	$e0,$00
.4746	20 c6 59	jsr $59c6		jsr	FloatTangent
.4749	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.32032751
>474c	d3 fb 00 52				.dword	$5200fbd3
>4750	e0 00					.byte	$e0,$00
.4752	20 8d 50	jsr $508d		jsr	FloatSubtract
.4755	20 57 50	jsr $5057		jsr	FPAbs
.4758	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>475b	4c 37 89 41				.dword	$4189374c
>475f	d8 00					.byte	$d8,$00
.4761	20 54 51	jsr $5154		jsr	FloatCompare
.4764	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4767	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.192
>476a	5e ba 49 4c				.dword	$4c49ba5e
>476e	e2 00					.byte	$e2,$00
.4770	20 9a 56	jsr $569a		jsr	FloatArcTan
.4773	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.87276642
>4776	5f cf b6 6f				.dword	$6fb6cf5f
>477a	e1 00					.byte	$e1,$00
.477c	20 8d 50	jsr $508d		jsr	FloatSubtract
.477f	20 57 50	jsr $5057		jsr	FPAbs
.4782	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>4785	4c 37 89 41				.dword	$4189374c
>4789	d8 00					.byte	$d8,$00
.478b	20 54 51	jsr $5154		jsr	FloatCompare
.478e	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4791	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.78
>4794	3d 0a d7 63				.dword	$63d70a3d
>4798	e1 80					.byte	$e1,$80
.479a	20 c1 57	jsr $57c1		jsr	FloatExponent
.479d	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.45840601
>47a0	a5 18 5a 75				.dword	$755a18a5
>47a4	e0 00					.byte	$e0,$00
.47a6	20 8d 50	jsr $508d		jsr	FloatSubtract
.47a9	20 57 50	jsr $5057		jsr	FPAbs
.47ac	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>47af	4c 37 89 41				.dword	$4189374c
>47b3	d8 00					.byte	$d8,$00
.47b5	20 54 51	jsr $5154		jsr	FloatCompare
.47b8	20 4a 50	jsr $504a		jsr	FPAssertCheck
.47bb	20 5a 50	jsr $505a		jsr	FPPushConstant	; 76.59
>47be	3d 0a 97 4c				.dword	$4c970a3d
>47c2	e8 00					.byte	$e8,$00
.47c4	20 c4 58	jsr $58c4		jsr	FloatLogarithm
.47c7	20 5a 50	jsr $505a		jsr	FPPushConstant	; 4.33846652
>47ca	df 5b 6a 45				.dword	$456a5bdf
>47ce	e4 00					.byte	$e4,$00
.47d0	20 8d 50	jsr $508d		jsr	FloatSubtract
.47d3	20 57 50	jsr $5057		jsr	FPAbs
.47d6	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>47d9	4c 37 89 41				.dword	$4189374c
>47dd	d8 00					.byte	$d8,$00
.47df	20 54 51	jsr $5154		jsr	FloatCompare
.47e2	20 4a 50	jsr $504a		jsr	FPAssertCheck
.47e5	20 5a 50	jsr $505a		jsr	FPPushConstant	; 41.55
>47e8	9a 99 19 53				.dword	$5319999a
>47ec	e7 00					.byte	$e7,$00
.47ee	20 ba 59	jsr $59ba		jsr	FloatSquareRoot
.47f1	20 5a 50	jsr $505a		jsr	FPPushConstant	; 6.44592895
>47f4	65 86 22 67				.dword	$67228665
>47f8	e4 00					.byte	$e4,$00
.47fa	20 8d 50	jsr $508d		jsr	FloatSubtract
.47fd	20 57 50	jsr $5057		jsr	FPAbs
.4800	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>4803	4c 37 89 41				.dword	$4189374c
>4807	d8 00					.byte	$d8,$00
.4809	20 54 51	jsr $5154		jsr	FloatCompare
.480c	20 4a 50	jsr $504a		jsr	FPAssertCheck
.480f	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.82333333
>4812	8f fc 62 69				.dword	$6962fc8f
>4816	e1 00					.byte	$e1,$00
.4818	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.2
>481b	66 66 66 66				.dword	$66666666
>481f	df 00					.byte	$df,$00
.4821	20 38 59	jsr $5938		jsr	FloatPower
.4824	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.96186725
>4827	4f 77 1e 7b				.dword	$7b1e774f
>482b	e1 00					.byte	$e1,$00
.482d	20 8d 50	jsr $508d		jsr	FloatSubtract
.4830	20 57 50	jsr $5057		jsr	FPAbs
.4833	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.01
>4836	1f 85 eb 51				.dword	$51eb851f
>483a	db 00					.byte	$db,$00
.483c	20 54 51	jsr $5154		jsr	FloatCompare
.483f	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4842	20 5a 50	jsr $505a		jsr	FPPushConstant	; -4.82125213
>4845	46 d9 23 4d				.dword	$4d23d946
>4849	e4 80					.byte	$e4,$80
.484b	20 31 56	jsr $5631		jsr	FloatNegate
.484e	20 5a 50	jsr $505a		jsr	FPPushConstant	; 4.82125213
>4851	46 d9 23 4d				.dword	$4d23d946
>4855	e4 00					.byte	$e4,$00
.4857	20 54 51	jsr $5154		jsr	FloatCompare
.485a	20 1e 51	jsr $511e		jsr	CompareEqual
.485d	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4860	20 5a 50	jsr $505a		jsr	FPPushConstant	; -4.82125213
>4863	46 d9 23 4d				.dword	$4d23d946
>4867	e4 80					.byte	$e4,$80
.4869	20 aa 52	jsr $52aa		jsr	FloatIntegerPart
.486c	20 5a 50	jsr $505a		jsr	FPPushConstant	; -4
>486f	04 00 00 00				.dword	$00000004
>4873	00 80					.byte	$00,$80
.4875	20 54 51	jsr $5154		jsr	FloatCompare
.4878	20 1e 51	jsr $511e		jsr	CompareEqual
.487b	20 4a 50	jsr $504a		jsr	FPAssertCheck
.487e	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.76
>4881	14 ae 47 61				.dword	$6147ae14
>4885	e1 00					.byte	$e1,$00
.4887	20 55 59	jsr $5955		jsr	FloatSine
.488a	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.68892145
>488d	fd 93 2e 58				.dword	$582e93fd
>4891	e1 00					.byte	$e1,$00
.4893	20 8d 50	jsr $508d		jsr	FloatSubtract
.4896	20 57 50	jsr $5057		jsr	FPAbs
.4899	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>489c	4c 37 89 41				.dword	$4189374c
>48a0	d8 00					.byte	$d8,$00
.48a2	20 54 51	jsr $5154		jsr	FloatCompare
.48a5	20 34 51	jsr $5134		jsr	CompareLess
.48a8	20 4a 50	jsr $504a		jsr	FPAssertCheck
.48ab	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.76
>48ae	14 ae 47 61				.dword	$6147ae14
>48b2	e1 00					.byte	$e1,$00
.48b4	20 b5 57	jsr $57b5		jsr	FloatCosine
.48b7	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.72483601
>48ba	27 6d c7 5c				.dword	$5cc76d27
>48be	e1 00					.byte	$e1,$00
.48c0	20 8d 50	jsr $508d		jsr	FloatSubtract
.48c3	20 57 50	jsr $5057		jsr	FPAbs
.48c6	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>48c9	4c 37 89 41				.dword	$4189374c
>48cd	d8 00					.byte	$d8,$00
.48cf	20 54 51	jsr $5154		jsr	FloatCompare
.48d2	20 34 51	jsr $5134		jsr	CompareLess
.48d5	20 4a 50	jsr $504a		jsr	FPAssertCheck
.48d8	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.17
>48db	71 3d 0a 57				.dword	$570a3d71
>48df	df 00					.byte	$df,$00
.48e1	20 c6 59	jsr $59c6		jsr	FloatTangent
.48e4	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.17165682
>48e7	18 67 e3 57				.dword	$57e36718
>48eb	df 00					.byte	$df,$00
.48ed	20 8d 50	jsr $508d		jsr	FloatSubtract
.48f0	20 57 50	jsr $5057		jsr	FPAbs
.48f3	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>48f6	4c 37 89 41				.dword	$4189374c
>48fa	d8 00					.byte	$d8,$00
.48fc	20 54 51	jsr $5154		jsr	FloatCompare
.48ff	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4902	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.272
>4905	b0 72 68 51				.dword	$516872b0
>4909	e2 00					.byte	$e2,$00
.490b	20 9a 56	jsr $569a		jsr	FloatArcTan
.490e	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.90454939
>4911	40 46 c8 73				.dword	$73c84640
>4915	e1 00					.byte	$e1,$00
.4917	20 8d 50	jsr $508d		jsr	FloatSubtract
.491a	20 57 50	jsr $5057		jsr	FPAbs
.491d	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>4920	4c 37 89 41				.dword	$4189374c
>4924	d8 00					.byte	$d8,$00
.4926	20 54 51	jsr $5154		jsr	FloatCompare
.4929	20 4a 50	jsr $504a		jsr	FPAssertCheck
.492c	20 5a 50	jsr $505a		jsr	FPPushConstant	; -1.7
>492f	cd cc cc 6c				.dword	$6ccccccd
>4933	e2 80					.byte	$e2,$80
.4935	20 c1 57	jsr $57c1		jsr	FloatExponent
.4938	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.18268352
>493b	c0 b1 88 5d				.dword	$5d88b1c0
>493f	df 00					.byte	$df,$00
.4941	20 8d 50	jsr $508d		jsr	FloatSubtract
.4944	20 57 50	jsr $5057		jsr	FPAbs
.4947	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>494a	4c 37 89 41				.dword	$4189374c
>494e	d8 00					.byte	$d8,$00
.4950	20 54 51	jsr $5154		jsr	FloatCompare
.4953	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4956	20 5a 50	jsr $505a		jsr	FPPushConstant	; 11.34
>4959	ec 51 b8 5a				.dword	$5ab851ec
>495d	e5 00					.byte	$e5,$00
.495f	20 c4 58	jsr $58c4		jsr	FloatLogarithm
.4962	20 5a 50	jsr $505a		jsr	FPPushConstant	; 2.4283363
>4965	54 ee b4 4d				.dword	$4db4ee54
>4969	e3 00					.byte	$e3,$00
.496b	20 8d 50	jsr $508d		jsr	FloatSubtract
.496e	20 57 50	jsr $5057		jsr	FPAbs
.4971	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>4974	4c 37 89 41				.dword	$4189374c
>4978	d8 00					.byte	$d8,$00
.497a	20 54 51	jsr $5154		jsr	FloatCompare
.497d	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4980	20 5a 50	jsr $505a		jsr	FPPushConstant	; 73.95
>4983	33 33 f3 49				.dword	$49f33333
>4987	e8 00					.byte	$e8,$00
.4989	20 ba 59	jsr $59ba		jsr	FloatSquareRoot
.498c	20 5a 50	jsr $505a		jsr	FPPushConstant	; 8.59941858
>498f	f8 9b cb 44				.dword	$44cb9bf8
>4993	e5 00					.byte	$e5,$00
.4995	20 8d 50	jsr $508d		jsr	FloatSubtract
.4998	20 57 50	jsr $5057		jsr	FPAbs
.499b	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>499e	4c 37 89 41				.dword	$4189374c
>49a2	d8 00					.byte	$d8,$00
.49a4	20 54 51	jsr $5154		jsr	FloatCompare
.49a7	20 4a 50	jsr $504a		jsr	FPAssertCheck
.49aa	20 5a 50	jsr $505a		jsr	FPPushConstant	; 3.33333333
>49ad	a9 aa aa 6a				.dword	$6aaaaaa9
>49b1	e3 00					.byte	$e3,$00
.49b3	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.3
>49b6	cd cc cc 4c				.dword	$4ccccccd
>49ba	e0 00					.byte	$e0,$00
.49bc	20 38 59	jsr $5938		jsr	FloatPower
.49bf	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.43503873
>49c2	af ac d7 5b				.dword	$5bd7acaf
>49c6	e2 00					.byte	$e2,$00
.49c8	20 8d 50	jsr $508d		jsr	FloatSubtract
.49cb	20 57 50	jsr $5057		jsr	FPAbs
.49ce	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.01
>49d1	1f 85 eb 51				.dword	$51eb851f
>49d5	db 00					.byte	$db,$00
.49d7	20 54 51	jsr $5154		jsr	FloatCompare
.49da	20 4a 50	jsr $504a		jsr	FPAssertCheck
.49dd	20 5a 50	jsr $505a		jsr	FPPushConstant	; 77.79760266
>49e0	b0 2f cc 4d				.dword	$4dcc2fb0
>49e4	e8 00					.byte	$e8,$00
.49e6	20 31 56	jsr $5631		jsr	FloatNegate
.49e9	20 5a 50	jsr $505a		jsr	FPPushConstant	; -77.79760266
>49ec	b0 2f cc 4d				.dword	$4dcc2fb0
>49f0	e8 80					.byte	$e8,$80
.49f2	20 54 51	jsr $5154		jsr	FloatCompare
.49f5	20 1e 51	jsr $511e		jsr	CompareEqual
.49f8	20 4a 50	jsr $504a		jsr	FPAssertCheck
.49fb	20 5a 50	jsr $505a		jsr	FPPushConstant	; 77.79760266
>49fe	b0 2f cc 4d				.dword	$4dcc2fb0
>4a02	e8 00					.byte	$e8,$00
.4a04	20 aa 52	jsr $52aa		jsr	FloatIntegerPart
.4a07	20 5a 50	jsr $505a		jsr	FPPushConstant	; 77
>4a0a	4d 00 00 00				.dword	$0000004d
>4a0e	00 00					.byte	$00,$00
.4a10	20 54 51	jsr $5154		jsr	FloatCompare
.4a13	20 1e 51	jsr $511e		jsr	CompareEqual
.4a16	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4a19	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.05
>4a1c	66 66 66 66				.dword	$66666666
>4a20	dd 80					.byte	$dd,$80
.4a22	20 55 59	jsr $5955		jsr	FloatSine
.4a25	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.04997917
>4a28	a5 7a 5b 66				.dword	$665b7aa5
>4a2c	dd 80					.byte	$dd,$80
.4a2e	20 8d 50	jsr $508d		jsr	FloatSubtract
.4a31	20 57 50	jsr $5057		jsr	FPAbs
.4a34	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>4a37	4c 37 89 41				.dword	$4189374c
>4a3b	d8 00					.byte	$d8,$00
.4a3d	20 54 51	jsr $5154		jsr	FloatCompare
.4a40	20 34 51	jsr $5134		jsr	CompareLess
.4a43	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4a46	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.05
>4a49	66 66 66 66				.dword	$66666666
>4a4d	dd 80					.byte	$dd,$80
.4a4f	20 b5 57	jsr $57b5		jsr	FloatCosine
.4a52	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.99875026
>4a55	6c 0c d7 7f				.dword	$7fd70c6c
>4a59	e1 00					.byte	$e1,$00
.4a5b	20 8d 50	jsr $508d		jsr	FloatSubtract
.4a5e	20 57 50	jsr $5057		jsr	FPAbs
.4a61	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>4a64	4c 37 89 41				.dword	$4189374c
>4a68	d8 00					.byte	$d8,$00
.4a6a	20 54 51	jsr $5154		jsr	FloatCompare
.4a6d	20 34 51	jsr $5134		jsr	CompareLess
.4a70	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4a73	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.37
>4a76	ec 51 b8 5e				.dword	$5eb851ec
>4a7a	e0 00					.byte	$e0,$00
.4a7c	20 c6 59	jsr $59c6		jsr	FloatTangent
.4a7f	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.38786316
>4a82	04 00 4b 63				.dword	$634b0004
>4a86	e0 00					.byte	$e0,$00
.4a88	20 8d 50	jsr $508d		jsr	FloatSubtract
.4a8b	20 57 50	jsr $5057		jsr	FPAbs
.4a8e	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>4a91	4c 37 89 41				.dword	$4189374c
>4a95	d8 00					.byte	$d8,$00
.4a97	20 54 51	jsr $5154		jsr	FloatCompare
.4a9a	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4a9d	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.793
>4aa0	25 06 81 65				.dword	$65810625
>4aa4	e1 00					.byte	$e1,$00
.4aa6	20 9a 56	jsr $569a		jsr	FloatArcTan
.4aa9	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.67045805
>4aac	c3 91 d1 55				.dword	$55d191c3
>4ab0	e1 00					.byte	$e1,$00
.4ab2	20 8d 50	jsr $508d		jsr	FloatSubtract
.4ab5	20 57 50	jsr $5057		jsr	FPAbs
.4ab8	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>4abb	4c 37 89 41				.dword	$4189374c
>4abf	d8 00					.byte	$d8,$00
.4ac1	20 54 51	jsr $5154		jsr	FloatCompare
.4ac4	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4ac7	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.76
>4aca	14 ae 47 61				.dword	$6147ae14
>4ace	e1 80					.byte	$e1,$80
.4ad0	20 c1 57	jsr $57c1		jsr	FloatExponent
.4ad3	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.46766643
>4ad6	b6 fc b8 77				.dword	$77b8fcb6
>4ada	e0 00					.byte	$e0,$00
.4adc	20 8d 50	jsr $508d		jsr	FloatSubtract
.4adf	20 57 50	jsr $5057		jsr	FPAbs
.4ae2	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>4ae5	4c 37 89 41				.dword	$4189374c
>4ae9	d8 00					.byte	$d8,$00
.4aeb	20 54 51	jsr $5154		jsr	FloatCompare
.4aee	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4af1	20 5a 50	jsr $505a		jsr	FPPushConstant	; 38.74
>4af4	48 e1 7a 4d				.dword	$4d7ae148
>4af8	e7 00					.byte	$e7,$00
.4afa	20 c4 58	jsr $58c4		jsr	FloatLogarithm
.4afd	20 5a 50	jsr $505a		jsr	FPPushConstant	; 3.65687266
>4b00	d0 19 05 75				.dword	$750519d0
>4b04	e3 00					.byte	$e3,$00
.4b06	20 8d 50	jsr $508d		jsr	FloatSubtract
.4b09	20 57 50	jsr $5057		jsr	FPAbs
.4b0c	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>4b0f	4c 37 89 41				.dword	$4189374c
>4b13	d8 00					.byte	$d8,$00
.4b15	20 54 51	jsr $5154		jsr	FloatCompare
.4b18	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4b1b	20 5a 50	jsr $505a		jsr	FPPushConstant	; 91.38
>4b1e	ae 47 61 5b				.dword	$5b6147ae
>4b22	e8 00					.byte	$e8,$00
.4b24	20 ba 59	jsr $59ba		jsr	FloatSquareRoot
.4b27	20 5a 50	jsr $505a		jsr	FPPushConstant	; 9.55928868
>4b2a	58 6c 79 4c				.dword	$4c796c58
>4b2e	e5 00					.byte	$e5,$00
.4b30	20 8d 50	jsr $508d		jsr	FloatSubtract
.4b33	20 57 50	jsr $5057		jsr	FPAbs
.4b36	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>4b39	4c 37 89 41				.dword	$4189374c
>4b3d	d8 00					.byte	$d8,$00
.4b3f	20 54 51	jsr $5154		jsr	FloatCompare
.4b42	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4b45	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.27
>4b48	14 ae 47 51				.dword	$5147ae14
>4b4c	e2 00					.byte	$e2,$00
.4b4e	20 5a 50	jsr $505a		jsr	FPPushConstant	; 2.0
>4b51	02 00 00 00				.dword	$00000002
>4b55	00 00					.byte	$00,$00
.4b57	20 38 59	jsr $5938		jsr	FloatPower
.4b5a	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.6129
>4b5d	ec c0 39 67				.dword	$6739c0ec
>4b61	e2 00					.byte	$e2,$00
.4b63	20 8d 50	jsr $508d		jsr	FloatSubtract
.4b66	20 57 50	jsr $5057		jsr	FPAbs
.4b69	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.01
>4b6c	1f 85 eb 51				.dword	$51eb851f
>4b70	db 00					.byte	$db,$00
.4b72	20 54 51	jsr $5154		jsr	FloatCompare
.4b75	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4b78	20 5a 50	jsr $505a		jsr	FPPushConstant	; 62.35538997
>4b7b	ad f5 b5 7c				.dword	$7cb5f5ad
>4b7f	e7 00					.byte	$e7,$00
.4b81	20 31 56	jsr $5631		jsr	FloatNegate
.4b84	20 5a 50	jsr $505a		jsr	FPPushConstant	; -62.35538997
>4b87	ad f5 b5 7c				.dword	$7cb5f5ad
>4b8b	e7 80					.byte	$e7,$80
.4b8d	20 54 51	jsr $5154		jsr	FloatCompare
.4b90	20 1e 51	jsr $511e		jsr	CompareEqual
.4b93	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4b96	20 5a 50	jsr $505a		jsr	FPPushConstant	; 62.35538997
>4b99	ad f5 b5 7c				.dword	$7cb5f5ad
>4b9d	e7 00					.byte	$e7,$00
.4b9f	20 aa 52	jsr $52aa		jsr	FloatIntegerPart
.4ba2	20 5a 50	jsr $505a		jsr	FPPushConstant	; 62
>4ba5	3e 00 00 00				.dword	$0000003e
>4ba9	00 00					.byte	$00,$00
.4bab	20 54 51	jsr $5154		jsr	FloatCompare
.4bae	20 1e 51	jsr $511e		jsr	CompareEqual
.4bb1	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4bb4	20 5a 50	jsr $505a		jsr	FPPushConstant	; -4.91
>4bb7	29 5c 8f 4e				.dword	$4e8f5c29
>4bbb	e4 80					.byte	$e4,$80
.4bbd	20 55 59	jsr $5955		jsr	FloatSine
.4bc0	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.9805384
>4bc3	44 48 82 7d				.dword	$7d824844
>4bc7	e1 00					.byte	$e1,$00
.4bc9	20 8d 50	jsr $508d		jsr	FloatSubtract
.4bcc	20 57 50	jsr $5057		jsr	FPAbs
.4bcf	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>4bd2	4c 37 89 41				.dword	$4189374c
>4bd6	d8 00					.byte	$d8,$00
.4bd8	20 54 51	jsr $5154		jsr	FloatCompare
.4bdb	20 34 51	jsr $5134		jsr	CompareLess
.4bde	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4be1	20 5a 50	jsr $505a		jsr	FPPushConstant	; -4.91
>4be4	29 5c 8f 4e				.dword	$4e8f5c29
>4be8	e4 80					.byte	$e4,$80
.4bea	20 b5 57	jsr $57b5		jsr	FloatCosine
.4bed	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.19632741
>4bf0	bb 06 85 64				.dword	$648506bb
>4bf4	df 00					.byte	$df,$00
.4bf6	20 8d 50	jsr $508d		jsr	FloatSubtract
.4bf9	20 57 50	jsr $5057		jsr	FPAbs
.4bfc	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>4bff	4c 37 89 41				.dword	$4189374c
>4c03	d8 00					.byte	$d8,$00
.4c05	20 54 51	jsr $5154		jsr	FloatCompare
.4c08	20 34 51	jsr $5134		jsr	CompareLess
.4c0b	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4c0e	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.21
>4c11	b8 1e 85 6b				.dword	$6b851eb8
>4c15	df 00					.byte	$df,$00
.4c17	20 c6 59	jsr $59c6		jsr	FloatTangent
.4c1a	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.21314244
>4c1d	82 01 21 6d				.dword	$6d210182
>4c21	df 00					.byte	$df,$00
.4c23	20 8d 50	jsr $508d		jsr	FloatSubtract
.4c26	20 57 50	jsr $5057		jsr	FPAbs
.4c29	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>4c2c	4c 37 89 41				.dword	$4189374c
>4c30	d8 00					.byte	$d8,$00
.4c32	20 54 51	jsr $5154		jsr	FloatCompare
.4c35	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4c38	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.824
>4c3b	7f 6a bc 74				.dword	$74bc6a7f
>4c3f	e2 00					.byte	$e2,$00
.4c41	20 9a 56	jsr $569a		jsr	FloatArcTan
.4c44	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.06930105
>4c47	ac 6d 6f 44				.dword	$446f6dac
>4c4b	e2 00					.byte	$e2,$00
.4c4d	20 8d 50	jsr $508d		jsr	FloatSubtract
.4c50	20 57 50	jsr $5057		jsr	FPAbs
.4c53	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>4c56	4c 37 89 41				.dword	$4189374c
>4c5a	d8 00					.byte	$d8,$00
.4c5c	20 54 51	jsr $5154		jsr	FloatCompare
.4c5f	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4c62	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.19
>4c65	14 ae 47 61				.dword	$6147ae14
>4c69	df 00					.byte	$df,$00
.4c6b	20 c1 57	jsr $57c1		jsr	FloatExponent
.4c6e	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.2092496
>4c71	6f 58 64 4d				.dword	$4d64586f
>4c75	e2 00					.byte	$e2,$00
.4c77	20 8d 50	jsr $508d		jsr	FloatSubtract
.4c7a	20 57 50	jsr $5057		jsr	FPAbs
.4c7d	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>4c80	4c 37 89 41				.dword	$4189374c
>4c84	d8 00					.byte	$d8,$00
.4c86	20 54 51	jsr $5154		jsr	FloatCompare
.4c89	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4c8c	20 5a 50	jsr $505a		jsr	FPPushConstant	; 77.92
>4c8f	1f 85 eb 4d				.dword	$4deb851f
>4c93	e8 00					.byte	$e8,$00
.4c95	20 c4 58	jsr $58c4		jsr	FloatLogarithm
.4c98	20 5a 50	jsr $505a		jsr	FPPushConstant	; 4.35568266
>4c9b	4d e0 b0 45				.dword	$45b0e04d
>4c9f	e4 00					.byte	$e4,$00
.4ca1	20 8d 50	jsr $508d		jsr	FloatSubtract
.4ca4	20 57 50	jsr $5057		jsr	FPAbs
.4ca7	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>4caa	4c 37 89 41				.dword	$4189374c
>4cae	d8 00					.byte	$d8,$00
.4cb0	20 54 51	jsr $5154		jsr	FloatCompare
.4cb3	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4cb6	20 5a 50	jsr $505a		jsr	FPPushConstant	; 16.28
>4cb9	52 b8 1e 41				.dword	$411eb852
>4cbd	e6 00					.byte	$e6,$00
.4cbf	20 ba 59	jsr $59ba		jsr	FloatSquareRoot
.4cc2	20 5a 50	jsr $505a		jsr	FPPushConstant	; 4.0348482
>4cc5	fc bc 8e 40				.dword	$408ebcfc
>4cc9	e4 00					.byte	$e4,$00
.4ccb	20 8d 50	jsr $508d		jsr	FloatSubtract
.4cce	20 57 50	jsr $5057		jsr	FPAbs
.4cd1	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>4cd4	4c 37 89 41				.dword	$4189374c
>4cd8	d8 00					.byte	$d8,$00
.4cda	20 54 51	jsr $5154		jsr	FloatCompare
.4cdd	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4ce0	20 5a 50	jsr $505a		jsr	FPPushConstant	; 2.07666667
>4ce3	a9 0d 74 42				.dword	$42740da9
>4ce7	e3 00					.byte	$e3,$00
.4ce9	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.3
>4cec	33 33 33 53				.dword	$53333333
>4cf0	e2 00					.byte	$e2,$00
.4cf2	20 38 59	jsr $5938		jsr	FloatPower
.4cf5	20 5a 50	jsr $505a		jsr	FPPushConstant	; 2.58569222
>4cf8	9c fd bd 52				.dword	$52bdfd9c
>4cfc	e3 00					.byte	$e3,$00
.4cfe	20 8d 50	jsr $508d		jsr	FloatSubtract
.4d01	20 57 50	jsr $5057		jsr	FPAbs
.4d04	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.01
>4d07	1f 85 eb 51				.dword	$51eb851f
>4d0b	db 00					.byte	$db,$00
.4d0d	20 54 51	jsr $5154		jsr	FloatCompare
.4d10	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4d13	20 5a 50	jsr $505a		jsr	FPPushConstant	; 3.07548392
>4d16	41 5d 6a 62				.dword	$626a5d41
>4d1a	e3 00					.byte	$e3,$00
.4d1c	20 31 56	jsr $5631		jsr	FloatNegate
.4d1f	20 5a 50	jsr $505a		jsr	FPPushConstant	; -3.07548392
>4d22	41 5d 6a 62				.dword	$626a5d41
>4d26	e3 80					.byte	$e3,$80
.4d28	20 54 51	jsr $5154		jsr	FloatCompare
.4d2b	20 1e 51	jsr $511e		jsr	CompareEqual
.4d2e	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4d31	20 5a 50	jsr $505a		jsr	FPPushConstant	; 3.07548392
>4d34	41 5d 6a 62				.dword	$626a5d41
>4d38	e3 00					.byte	$e3,$00
.4d3a	20 aa 52	jsr $52aa		jsr	FloatIntegerPart
.4d3d	20 5a 50	jsr $505a		jsr	FPPushConstant	; 3
>4d40	03 00 00 00				.dword	$00000003
>4d44	00 00					.byte	$00,$00
.4d46	20 54 51	jsr $5154		jsr	FloatCompare
.4d49	20 1e 51	jsr $511e		jsr	CompareEqual
.4d4c	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4d4f	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.35
>4d52	9a 99 99 59				.dword	$5999999a
>4d56	e0 80					.byte	$e0,$80
.4d58	20 55 59	jsr $5955		jsr	FloatSine
.4d5b	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.34289781
>4d5e	a0 26 c8 57				.dword	$57c826a0
>4d62	e0 80					.byte	$e0,$80
.4d64	20 8d 50	jsr $508d		jsr	FloatSubtract
.4d67	20 57 50	jsr $5057		jsr	FPAbs
.4d6a	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>4d6d	4c 37 89 41				.dword	$4189374c
>4d71	d8 00					.byte	$d8,$00
.4d73	20 54 51	jsr $5154		jsr	FloatCompare
.4d76	20 34 51	jsr $5134		jsr	CompareLess
.4d79	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4d7c	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.35
>4d7f	9a 99 99 59				.dword	$5999999a
>4d83	e0 80					.byte	$e0,$80
.4d85	20 b5 57	jsr $57b5		jsr	FloatCosine
.4d88	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.93937271
>4d8b	6e 5d 3d 78				.dword	$783d5d6e
>4d8f	e1 00					.byte	$e1,$00
.4d91	20 8d 50	jsr $508d		jsr	FloatSubtract
.4d94	20 57 50	jsr $5057		jsr	FPAbs
.4d97	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>4d9a	4c 37 89 41				.dword	$4189374c
>4d9e	d8 00					.byte	$d8,$00
.4da0	20 54 51	jsr $5154		jsr	FloatCompare
.4da3	20 34 51	jsr $5134		jsr	CompareLess
.4da6	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4da9	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.4
>4dac	66 66 66 66				.dword	$66666666
>4db0	e0 00					.byte	$e0,$00
.4db2	20 c6 59	jsr $59c6		jsr	FloatTangent
.4db5	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.42279322
>4db8	2d 2d 3c 6c				.dword	$6c3c2d2d
>4dbc	e0 00					.byte	$e0,$00
.4dbe	20 8d 50	jsr $508d		jsr	FloatSubtract
.4dc1	20 57 50	jsr $5057		jsr	FPAbs
.4dc4	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>4dc7	4c 37 89 41				.dword	$4189374c
>4dcb	d8 00					.byte	$d8,$00
.4dcd	20 54 51	jsr $5154		jsr	FloatCompare
.4dd0	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4dd3	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.165
>4dd6	48 e1 7a 54				.dword	$547ae148
>4dda	df 00					.byte	$df,$00
.4ddc	20 9a 56	jsr $569a		jsr	FloatArcTan
.4ddf	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.16352662
>4de2	da c2 b9 53				.dword	$53b9c2da
>4de6	df 00					.byte	$df,$00
.4de8	20 8d 50	jsr $508d		jsr	FloatSubtract
.4deb	20 57 50	jsr $5057		jsr	FPAbs
.4dee	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>4df1	4c 37 89 41				.dword	$4189374c
>4df5	d8 00					.byte	$d8,$00
.4df7	20 54 51	jsr $5154		jsr	FloatCompare
.4dfa	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4dfd	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.19
>4e00	c3 f5 28 4c				.dword	$4c28f5c3
>4e04	e2 00					.byte	$e2,$00
.4e06	20 c1 57	jsr $57c1		jsr	FloatExponent
.4e09	20 5a 50	jsr $505a		jsr	FPPushConstant	; 3.28708121
>4e0c	ef c4 2f 69				.dword	$692fc4ef
>4e10	e3 00					.byte	$e3,$00
.4e12	20 8d 50	jsr $508d		jsr	FloatSubtract
.4e15	20 57 50	jsr $5057		jsr	FPAbs
.4e18	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>4e1b	4c 37 89 41				.dword	$4189374c
>4e1f	d8 00					.byte	$d8,$00
.4e21	20 54 51	jsr $5154		jsr	FloatCompare
.4e24	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4e27	20 5a 50	jsr $505a		jsr	FPPushConstant	; 63.84
>4e2a	7b 14 ae 7f				.dword	$7fae147b
>4e2e	e7 00					.byte	$e7,$00
.4e30	20 c4 58	jsr $58c4		jsr	FloatLogarithm
.4e33	20 5a 50	jsr $505a		jsr	FPPushConstant	; 4.15637995
>4e36	43 88 80 42				.dword	$42808843
>4e3a	e4 00					.byte	$e4,$00
.4e3c	20 8d 50	jsr $508d		jsr	FloatSubtract
.4e3f	20 57 50	jsr $5057		jsr	FPAbs
.4e42	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>4e45	4c 37 89 41				.dword	$4189374c
>4e49	d8 00					.byte	$d8,$00
.4e4b	20 54 51	jsr $5154		jsr	FloatCompare
.4e4e	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4e51	20 5a 50	jsr $505a		jsr	FPPushConstant	; 70.94
>4e54	d7 a3 f0 46				.dword	$46f0a3d7
>4e58	e8 00					.byte	$e8,$00
.4e5a	20 ba 59	jsr $59ba		jsr	FloatSquareRoot
.4e5d	20 5a 50	jsr $505a		jsr	FPPushConstant	; 8.42258868
>4e60	2d 76 61 43				.dword	$4361762d
>4e64	e5 00					.byte	$e5,$00
.4e66	20 8d 50	jsr $508d		jsr	FloatSubtract
.4e69	20 57 50	jsr $5057		jsr	FPAbs
.4e6c	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>4e6f	4c 37 89 41				.dword	$4189374c
>4e73	d8 00					.byte	$d8,$00
.4e75	20 54 51	jsr $5154		jsr	FloatCompare
.4e78	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4e7b	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.99333333
>4e7e	f6 c5 92 7f				.dword	$7f92c5f6
>4e82	e2 00					.byte	$e2,$00
.4e84	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.8
>4e87	33 33 33 73				.dword	$73333333
>4e8b	e2 00					.byte	$e2,$00
.4e8d	20 38 59	jsr $5938		jsr	FloatPower
.4e90	20 5a 50	jsr $505a		jsr	FPPushConstant	; 3.4613369
>4e93	9a 45 c3 6e				.dword	$6ec3459a
>4e97	e3 00					.byte	$e3,$00
.4e99	20 8d 50	jsr $508d		jsr	FloatSubtract
.4e9c	20 57 50	jsr $5057		jsr	FPAbs
.4e9f	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.01
>4ea2	1f 85 eb 51				.dword	$51eb851f
>4ea6	db 00					.byte	$db,$00
.4ea8	20 54 51	jsr $5154		jsr	FloatCompare
.4eab	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4eae	20 5a 50	jsr $505a		jsr	FPPushConstant	; 54.74884587
>4eb1	ba 68 7f 6d				.dword	$6d7f68ba
>4eb5	e7 00					.byte	$e7,$00
.4eb7	20 31 56	jsr $5631		jsr	FloatNegate
.4eba	20 5a 50	jsr $505a		jsr	FPPushConstant	; -54.74884587
>4ebd	ba 68 7f 6d				.dword	$6d7f68ba
>4ec1	e7 80					.byte	$e7,$80
.4ec3	20 54 51	jsr $5154		jsr	FloatCompare
.4ec6	20 1e 51	jsr $511e		jsr	CompareEqual
.4ec9	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4ecc	20 5a 50	jsr $505a		jsr	FPPushConstant	; 54.74884587
>4ecf	ba 68 7f 6d				.dword	$6d7f68ba
>4ed3	e7 00					.byte	$e7,$00
.4ed5	20 aa 52	jsr $52aa		jsr	FloatIntegerPart
.4ed8	20 5a 50	jsr $505a		jsr	FPPushConstant	; 54
>4edb	36 00 00 00				.dword	$00000036
>4edf	00 00					.byte	$00,$00
.4ee1	20 54 51	jsr $5154		jsr	FloatCompare
.4ee4	20 1e 51	jsr $511e		jsr	CompareEqual
.4ee7	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4eea	20 5a 50	jsr $505a		jsr	FPPushConstant	; 16.44
>4eed	5c 8f c2 41				.dword	$41c28f5c
>4ef1	e6 00					.byte	$e6,$00
.4ef3	20 55 59	jsr $5955		jsr	FloatSine
.4ef6	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.66838597
>4ef9	e5 ab 8d 55				.dword	$558dabe5
>4efd	e1 80					.byte	$e1,$80
.4eff	20 8d 50	jsr $508d		jsr	FloatSubtract
.4f02	20 57 50	jsr $5057		jsr	FPAbs
.4f05	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>4f08	4c 37 89 41				.dword	$4189374c
>4f0c	d8 00					.byte	$d8,$00
.4f0e	20 54 51	jsr $5154		jsr	FloatCompare
.4f11	20 34 51	jsr $5134		jsr	CompareLess
.4f14	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4f17	20 5a 50	jsr $505a		jsr	FPPushConstant	; 16.44
>4f1a	5c 8f c2 41				.dword	$41c28f5c
>4f1e	e6 00					.byte	$e6,$00
.4f20	20 b5 57	jsr $57b5		jsr	FloatCosine
.4f23	20 5a 50	jsr $505a		jsr	FPPushConstant	; -0.74381462
>4f26	46 51 35 5f				.dword	$5f355146
>4f2a	e1 80					.byte	$e1,$80
.4f2c	20 8d 50	jsr $508d		jsr	FloatSubtract
.4f2f	20 57 50	jsr $5057		jsr	FPAbs
.4f32	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>4f35	4c 37 89 41				.dword	$4189374c
>4f39	d8 00					.byte	$d8,$00
.4f3b	20 54 51	jsr $5154		jsr	FloatCompare
.4f3e	20 34 51	jsr $5134		jsr	CompareLess
.4f41	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4f44	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.23
>4f47	5c 8f c2 75				.dword	$75c28f5c
>4f4b	df 00					.byte	$df,$00
.4f4d	20 c6 59	jsr $59c6		jsr	FloatTangent
.4f50	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.23414336
>4f53	74 a3 e1 77				.dword	$77e1a374
>4f57	df 00					.byte	$df,$00
.4f59	20 8d 50	jsr $508d		jsr	FloatSubtract
.4f5c	20 57 50	jsr $5057		jsr	FPAbs
.4f5f	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>4f62	4c 37 89 41				.dword	$4189374c
>4f66	d8 00					.byte	$d8,$00
.4f68	20 54 51	jsr $5154		jsr	FloatCompare
.4f6b	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4f6e	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.465
>4f71	5c 8f c2 5d				.dword	$5dc28f5c
>4f75	e2 00					.byte	$e2,$00
.4f77	20 9a 56	jsr $569a		jsr	FloatArcTan
.4f7a	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.97184811
>4f7d	d5 84 65 7c				.dword	$7c6584d5
>4f81	e1 00					.byte	$e1,$00
.4f83	20 8d 50	jsr $508d		jsr	FloatSubtract
.4f86	20 57 50	jsr $5057		jsr	FPAbs
.4f89	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>4f8c	4c 37 89 41				.dword	$4189374c
>4f90	d8 00					.byte	$d8,$00
.4f92	20 54 51	jsr $5154		jsr	FloatCompare
.4f95	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4f98	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.43
>4f9b	e1 7a 14 6e				.dword	$6e147ae1
>4f9f	e0 00					.byte	$e0,$00
.4fa1	20 c1 57	jsr $57c1		jsr	FloatExponent
.4fa4	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.53725752
>4fa7	5d 6d 62 62				.dword	$62626d5d
>4fab	e2 00					.byte	$e2,$00
.4fad	20 8d 50	jsr $508d		jsr	FloatSubtract
.4fb0	20 57 50	jsr $5057		jsr	FPAbs
.4fb3	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>4fb6	4c 37 89 41				.dword	$4189374c
>4fba	d8 00					.byte	$d8,$00
.4fbc	20 54 51	jsr $5154		jsr	FloatCompare
.4fbf	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4fc2	20 5a 50	jsr $505a		jsr	FPPushConstant	; 99.24
>4fc5	a4 70 3d 63				.dword	$633d70a4
>4fc9	e8 00					.byte	$e8,$00
.4fcb	20 c4 58	jsr $58c4		jsr	FloatLogarithm
.4fce	20 5a 50	jsr $505a		jsr	FPPushConstant	; 4.59754116
>4fd1	52 87 8f 49				.dword	$498f8752
>4fd5	e4 00					.byte	$e4,$00
.4fd7	20 8d 50	jsr $508d		jsr	FloatSubtract
.4fda	20 57 50	jsr $5057		jsr	FPAbs
.4fdd	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>4fe0	4c 37 89 41				.dword	$4189374c
>4fe4	d8 00					.byte	$d8,$00
.4fe6	20 54 51	jsr $5154		jsr	FloatCompare
.4fe9	20 4a 50	jsr $504a		jsr	FPAssertCheck
.4fec	20 5a 50	jsr $505a		jsr	FPPushConstant	; 42.19
>4fef	ae 47 61 54				.dword	$546147ae
>4ff3	e7 00					.byte	$e7,$00
.4ff5	20 ba 59	jsr $59ba		jsr	FloatSquareRoot
.4ff8	20 5a 50	jsr $505a		jsr	FPPushConstant	; 6.49538298
>4ffb	b4 16 ed 67				.dword	$67ed16b4
>4fff	e4 00					.byte	$e4,$00
.5001	20 8d 50	jsr $508d		jsr	FloatSubtract
.5004	20 57 50	jsr $5057		jsr	FPAbs
.5007	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.001
>500a	4c 37 89 41				.dword	$4189374c
>500e	d8 00					.byte	$d8,$00
.5010	20 54 51	jsr $5154		jsr	FloatCompare
.5013	20 4a 50	jsr $504a		jsr	FPAssertCheck
.5016	20 5a 50	jsr $505a		jsr	FPPushConstant	; 2.11
>5019	b8 1e 85 43				.dword	$43851eb8
>501d	e3 00					.byte	$e3,$00
.501f	20 5a 50	jsr $505a		jsr	FPPushConstant	; 1.6
>5022	66 66 66 66				.dword	$66666666
>5026	e2 00					.byte	$e2,$00
.5028	20 38 59	jsr $5938		jsr	FloatPower
.502b	20 5a 50	jsr $505a		jsr	FPPushConstant	; 3.30256922
>502e	a5 a5 ae 69				.dword	$69aea5a5
>5032	e3 00					.byte	$e3,$00
.5034	20 8d 50	jsr $508d		jsr	FloatSubtract
.5037	20 57 50	jsr $5057		jsr	FPAbs
.503a	20 5a 50	jsr $505a		jsr	FPPushConstant	; 0.01
>503d	1f 85 eb 51				.dword	$51eb851f
>5041	db 00					.byte	$db,$00
.5043	20 54 51	jsr $5154		jsr	FloatCompare
.5046	20 4a 50	jsr $504a		jsr	FPAssertCheck

;******  Return to file: testing/testing.asm

.5049	60		rts				rts
.504a					FPAssertCheck:
.504a	e0 00		cpx #$00			cpx 	#0
.504c	d0 06		bne $5054			bne 	_FPACFail
.504e	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.5050	f0 02		beq $5054			beq 	_FPACFail
.5052	ca		dex				dex
.5053	60		rts				rts
.5054					_FPACFail:
>5054	db						.byte 	$DB 						; causes a break in the emulator
.5055	80 fd		bra $5054			bra 	_FPACFail
.5057					FPAbs:
.5057	74 2e		stz $2e,x			stz 	NSStatus,x
.5059	60		rts				rts
.505a					FPPushConstant:
.505a	e8		inx				inx
.505b	68		pla				pla
.505c	7a		ply				ply
.505d	85 28		sta $28				sta 	zTemp0
.505f	84 29		sty $29				sty 	zTemp0+1
.5061	a0 01		ldy #$01			ldy 	#1
.5063	b1 28		lda ($28),y			lda 	(zTemp0),y
.5065	95 3a		sta $3a,x			sta 	NSMantissa0,x
.5067	c8		iny				iny
.5068	b1 28		lda ($28),y			lda 	(zTemp0),y
.506a	95 46		sta $46,x			sta 	NSMantissa1,x
.506c	c8		iny				iny
.506d	b1 28		lda ($28),y			lda 	(zTemp0),y
.506f	95 52		sta $52,x			sta 	NSMantissa2,x
.5071	c8		iny				iny
.5072	b1 28		lda ($28),y			lda 	(zTemp0),y
.5074	95 5e		sta $5e,x			sta 	NSMantissa3,x
.5076	c8		iny				iny
.5077	b1 28		lda ($28),y			lda 	(zTemp0),y
.5079	95 6a		sta $6a,x			sta 	NSExponent,x
.507b	c8		iny				iny
.507c	b1 28		lda ($28),y			lda 	(zTemp0),y
.507e	95 2e		sta $2e,x			sta 	NSStatus,x
.5080	a5 28		lda $28				lda 	zTemp0
.5082	a4 29		ldy $29				ldy 	zTemp0+1
.5084	18		clc				clc
.5085	69 06		adc #$06			adc 	#6
.5087	90 01		bcc $508a			bcc 	_FPPCNoCarry
.5089	c8		iny				iny
.508a					_FPPCNoCarry:
.508a	5a		phy				phy
.508b	48		pha				pha
.508c	60		rts				rts

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library

=12					MathStackSize = 12
=$40					NSSString = $40 							; string vs typemask
=$00					NSSIFloat = $00 							; ifloat vs typemask
=$20					NSSIInt16 = $20								; when set, a reference is a 16 bit reference (e.g. a%)
=$40					NSSTypeMask = $40
=$80					NSSArray = $80  							; array (in variable code)
.002e					NSStatus:
>002e							.fill 	MathStackSize
.003a					NSMantissa0:
>003a							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0046					NSMantissa1:
>0046							.fill 	MathStackSize
.0052					NSMantissa2:
>0052							.fill 	MathStackSize
.005e					NSMantissa3:
>005e							.fill 	MathStackSize
.006a					NSExponent:
>006a							.fill 	MathStackSize
.0400					numberBuffer:
>0400							.fill 	34
.508d					FloatSubtract:
.508d	b5 2e		lda $2e,x			lda 	NSStatus,x 					; negate top of stack
.508f	49 80		eor #$80			eor 	#$80
.5091	95 2e		sta $2e,x			sta 	NSStatus,x					; and fall through.
.5093					FloatAdd:
.5093	ca		dex				dex
.5094	b5 6a		lda $6a,x			lda 	NSExponent,x 				; can use optimised.
.5096	15 6b		ora $6b,x			ora 	NSExponent+1,x
.5098	15 5e		ora $5e,x			ora 	NSMantissa3,x
.509a	15 5f		ora $5f,x			ora 	NSMantissa3+1,x
.509c	d0 04		bne $50a2			bne 	_FAUseFloat
.509e	20 2f 54	jsr $542f			jsr 	FloatInt32Add 				; use the int32 one.
.50a1	60		rts				rts
.50a2					_FAUseFloat:
.50a2	20 c4 53	jsr $53c4			jsr 	FloatNormalise 				; normalise S[X]
.50a5	f0 51		beq $50f8			beq 	_FAReturn1
.50a7	e8		inx				inx 								; normalise S[X+1]
.50a8	20 c4 53	jsr $53c4			jsr 	FloatNormalise
.50ab	ca		dex				dex
.50ac	c9 00		cmp #$00			cmp 	#0
.50ae	f0 60		beq $5110			beq 	_FAExit 					; if so, just return A
.50b0	b5 6a		lda $6a,x			lda 	NSExponent,x 				; are the exponents the same ?
.50b2	d5 6b		cmp $6b,x			cmp 	NSExponent+1,x
.50b4	f0 18		beq $50ce			beq 	_FAExponentsEqual
.50b6	b5 6a		lda $6a,x			lda 	NSExponent,x 				; work out the larger exponent
.50b8	a8		tay				tay
.50b9	38		sec				sec 								; do a signed comparison of the exponents.
.50ba	f5 6b		sbc $6b,x			sbc 	NSExponent+1,x
.50bc	50 02		bvc $50c0			bvc 	_FANoSignedChange
.50be	49 80		eor #$80			eor 	#$80
.50c0					_FANoSignedChange:
.50c0	29 80		and #$80			and 	#$80
.50c2	10 02		bpl $50c6			bpl 	_FAHaveMax
.50c4	b4 6b		ldy $6b,x			ldy 	NSExponent+1,x
.50c6					_FAHaveMax:
.50c6	20 11 51	jsr $5111			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.50c9	e8		inx				inx
.50ca	20 11 51	jsr $5111			jsr 	_FAShiftToExponent
.50cd	ca		dex				dex
.50ce					_FAExponentsEqual:
.50ce	b5 2e		lda $2e,x			lda 	NSStatus,x 					; are the signs the same
.50d0	55 2f		eor $2f,x			eor 	NSStatus+1,x
.50d2	30 0e		bmi $50e2			bmi 	_FADifferentSigns
.50d4	20 fb 53	jsr $53fb			jsr 	FloatAddTopTwoStack 		; do the add of the mantissae
.50d7	b5 5e		lda $5e,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.50d9	10 35		bpl $5110			bpl 	_FAExit 					; if no, we are done.
.50db	20 88 56	jsr $5688			jsr 	FloatShiftRight 				; shift A right, renormalising it.
.50de	f6 6a		inc $6a,x			inc 	NSExponent,x 				; bump the exponent and exit
.50e0	80 2e		bra $5110			bra 	_FAExit
.50e2					_FADifferentSigns:
.50e2	20 15 54	jsr $5415			jsr 	FloatSubTopTwoStack 		; subtract mantissa B from A
.50e5	b5 5e		lda $5e,x			lda 	NSMantissa3,x 				; is the result negative ?
.50e7	10 06		bpl $50ef			bpl 	_FACheckZero 				; if no, check for -0
.50e9	20 31 56	jsr $5631			jsr 	FloatNegate 					; netate result
.50ec	20 38 56	jsr $5638			jsr 	FloatNegateMantissa 			; negate (2'c) the mantissa
.50ef					_FACheckZero:
.50ef	20 91 56	jsr $5691			jsr 	FloatIsZero	 				; check for -0
.50f2	d0 1c		bne $5110			bne 	_FAExit
.50f4	74 2e		stz $2e,x			stz 	NSStatus,x
.50f6	80 18		bra $5110			bra 	_FAExit
.50f8					_FAReturn1:
.50f8	b5 3b		lda $3b,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.50fa	95 3a		sta $3a,x			sta 	NSMantissa0,x
.50fc	b5 47		lda $47,x			lda 	NSMantissa1+1,x
.50fe	95 46		sta $46,x			sta 	NSMantissa1,x
.5100	b5 53		lda $53,x			lda 	NSMantissa2+1,x
.5102	95 52		sta $52,x			sta 	NSMantissa2,x
.5104	b5 5f		lda $5f,x			lda 	NSMantissa3+1,x
.5106	95 5e		sta $5e,x			sta 	NSMantissa3,x
.5108	b5 6b		lda $6b,x			lda 	NSExponent+1,x
.510a	95 6a		sta $6a,x			sta 	NSExponent,x
.510c	b5 2f		lda $2f,x			lda 	NSStatus+1,x
.510e	95 2e		sta $2e,x			sta 	NSStatus,x
.5110					_FAExit:
.5110	60		rts				rts
.5111					_FAShiftToExponent:
.5111					_FAShiftToExponent2:
.5111	98		tya				tya 								; compare Y to exponent
.5112	d5 6a		cmp $6a,x			cmp 	NSExponent,x 				; reached the exponent required ?
.5114	f0 07		beq $511d			beq 	_FASEExit 					; exit if so.
.5116	20 88 56	jsr $5688			jsr 	FloatShiftRight	 			; shift the mantissa right
.5119	f6 6a		inc $6a,x			inc 	NSExponent,x 				; increment exponent
.511b	80 f4		bra $5111			bra 	_FAShiftToExponent2
.511d					_FASEExit:
.511d	60		rts				rts
.511e					CompareEqual:
.511e	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.5120	d0 09		bne $512b			bne 	ReturnFalse
.5122					ReturnTrue:
.5122	a9 01		lda #$01			lda 	#1
.5124	95 3a		sta $3a,x			sta 	NSMantissa0,x
.5126	a9 80		lda #$80			lda 	#$80
.5128	95 2e		sta $2e,x			sta 	NSStatus,x
.512a	60		rts				rts
.512b					ReturnFalse:
.512b	74 3a		stz $3a,x			stz 	NSMantissa0,x
.512d	60		rts				rts
.512e					CompareNotEqual:
.512e	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.5130	d0 f0		bne $5122			bne 	ReturnTrue
.5132	80 f7		bra $512b			bra 	ReturnFalse
.5134					CompareLess:
.5134	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.5136	c9 ff		cmp #$ff			cmp 	#$FF
.5138	f0 e8		beq $5122			beq 	ReturnTrue
.513a	80 ef		bra $512b			bra 	ReturnFalse
.513c					CompareGreater:
.513c	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.513e	c9 01		cmp #$01			cmp 	#$01
.5140	f0 e0		beq $5122			beq 	ReturnTrue
.5142	80 e7		bra $512b			bra 	ReturnFalse
.5144					CompareLessEqual:
.5144	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.5146	c9 01		cmp #$01			cmp 	#$01
.5148	d0 d8		bne $5122			bne 	ReturnTrue
.514a	80 df		bra $512b			bra 	ReturnFalse
.514c					CompareGreaterEqual:
.514c	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.514e	c9 ff		cmp #$ff			cmp 	#$FF
.5150	d0 d0		bne $5122			bne 	ReturnTrue
.5152	80 d7		bra $512b			bra 	ReturnFalse
.5154					FloatCompare:
.5154	b5 6a		lda $6a,x			lda 	NSExponent,x 				; float comparison.
.5156	15 69		ora $69,x			ora 	NSExponent-1,x 				; integer if both integer.
.5158	48		pha				pha
.5159	20 8d 50	jsr $508d			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.515c	68		pla				pla
.515d	d0 0c		bne $516b			bne 	_FCCompareFloat
.515f	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.5161	15 46		ora $46,x			ora 	NSMantissa1,x
.5163	15 52		ora $52,x			ora 	NSMantissa2,x
.5165	15 5e		ora $5e,x			ora 	NSMantissa3,x
.5167	f0 14		beq $517d			beq 	_FCExit 					; if zero, return zero
.5169	80 0a		bra $5175			bra 	_FCSign
.516b					_FCCompareFloat:
.516b	b5 46		lda $46,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.516d	29 f0		and #$f0			and 	#$F0
.516f	15 52		ora $52,x			ora 	NSMantissa2,x
.5171	15 5e		ora $5e,x			ora 	NSMantissa3,x
.5173	f0 08		beq $517d			beq 	_FCExit 					; zero, so approximately identical
.5175					_FCSign:
.5175	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.5177	34 2e		bit $2e,x			bit 	NSStatus,x
.5179	10 02		bpl $517d			bpl 	_FCExit
.517b					_FCNegative:
.517b	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.517d					_FCExit:
.517d	20 71 56	jsr $5671			jsr 	FloatSetByte 				; set the result 255,0,1
.5180	60		rts				rts
.5181					FloatScalarTable:
>5181	66 66 66 66				.dword $66666666 ; 0.1
>5185	de					.byte $de
>5186	1f 85 eb 51				.dword $51eb851f ; 0.01
>518a	db					.byte $db
>518b	4c 37 89 41				.dword $4189374c ; 0.001
>518f	d8					.byte $d8
>5190	ac 8b db 68				.dword $68db8bac ; 0.0001
>5194	d4					.byte $d4
>5195	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>5199	d1					.byte $d1
>519a	83 de 1b 43				.dword $431bde83 ; 1e-06
>519e	ce					.byte $ce
>519f	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>51a3	ca					.byte $ca
>51a4	89 3b e6 55				.dword $55e63b89 ; 1e-08
>51a8	c7					.byte $c7
>51a9	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>51ad	c4					.byte $c4
>51ae	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>51b2	c0					.byte $c0
>51b3	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>51b7	bd					.byte $bd
.51b8					FloatDivide:
.51b8	48		pha				pha
.51b9	20 c4 53	jsr $53c4			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.51bc	ca		dex				dex
.51bd	c9 00		cmp #$00			cmp 	#0
.51bf	f0 1e		beq $51df			beq 	_FDZero
.51c1	20 c4 53	jsr $53c4			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.51c4	f0 16		beq $51dc			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.51c6	20 27 52	jsr $5227			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.51c9	20 f4 51	jsr $51f4			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.51cc	20 c4 53	jsr $53c4			jsr		FloatNormalise 				; renormalise
.51cf	20 ba 53	jsr $53ba			jsr 	FloatCalculateSign 			; calculate result sign
.51d2	b5 6a		lda $6a,x			lda 	NSExponent,x 				; calculate exponent
.51d4	38		sec				sec
.51d5	f5 6b		sbc $6b,x			sbc 	NSExponent+1,x
.51d7	38		sec				sec
.51d8	e9 1e		sbc #$1e			sbc 	#30
.51da	95 6a		sta $6a,x			sta 	NSExponent,x
.51dc					_FDExit:
.51dc	68		pla				pla
.51dd	18		clc				clc
.51de	60		rts				rts
.51df					_FDZero:
.51df	68		pla				pla
.51e0	38		sec				sec
.51e1	60		rts				rts
.51e2					DivideInt32:
.51e2	20 aa 52	jsr $52aa			jsr 	FloatIntegerPart 			; make both integers
.51e5	ca		dex				dex
.51e6	20 aa 52	jsr $52aa			jsr 	FloatIntegerPart
.51e9	20 05 52	jsr $5205			jsr 	Int32Divide 				; divide
.51ec	20 f4 51	jsr $51f4			jsr 	NSMCopyPlusTwoToZero 		; copy result
.51ef	20 ba 53	jsr $53ba			jsr 	FloatCalculateSign 			; calculate result sign
.51f2	18		clc				clc
.51f3	60		rts				rts
.51f4					NSMCopyPlusTwoToZero:
.51f4	b5 3c		lda $3c,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.51f6	95 3a		sta $3a,x			sta 	NSMantissa0,x
.51f8	b5 48		lda $48,x			lda 	NSMantissa1+2,x
.51fa	95 46		sta $46,x			sta 	NSMantissa1,x
.51fc	b5 54		lda $54,x			lda 	NSMantissa2+2,x
.51fe	95 52		sta $52,x			sta 	NSMantissa2,x
.5200	b5 60		lda $60,x			lda 	NSMantissa3+2,x
.5202	95 5e		sta $5e,x			sta 	NSMantissa3,x
.5204	60		rts				rts
.5205					Int32Divide:
.5205	48		pha				pha 								; save AXY
.5206	5a		phy				phy
.5207	20 52 56	jsr $5652			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.520a	20 6b 56	jsr $566b			jsr 	FloatSetZeroMantissaOnly 	; set S[X] to zero
.520d	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.520f					_I32DivideLoop:
.520f	e8		inx				inx
.5210	e8		inx				inx
.5211	20 7e 56	jsr $567e			jsr 	FloatShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.5214	ca		dex				dex
.5215	ca		dex				dex
.5216	20 7f 56	jsr $567f			jsr 	FloatRotateLeft
.5219	20 45 52	jsr $5245			jsr 	FloatDivideCheck 			; check if subtract possible
.521c	90 02		bcc $5220			bcc 	_I32DivideNoCarryIn
.521e	f6 3c		inc $3c,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.5220					_I32DivideNoCarryIn:
.5220	88		dey				dey 								; loop round till division completed.
.5221	d0 ec		bne $520f			bne 	_I32DivideLoop
.5223	7a		ply				ply 								; restore AXY and exit
.5224	68		pla				pla
.5225	18		clc				clc
.5226	60		rts				rts
.5227					Int32ShiftDivide:
.5227	48		pha				pha 								; save AY
.5228	5a		phy				phy
.5229	e8		inx				inx 								; clear S[X+2]
.522a	e8		inx				inx
.522b	20 6f 56	jsr $566f			jsr 	FloatSetZero
.522e	ca		dex				dex
.522f	ca		dex				dex
.5230	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.5232					_I32SDLoop:
.5232	20 45 52	jsr $5245			jsr 	FloatDivideCheck 			; check if subtract possible
.5235	e8		inx				inx
.5236	e8		inx				inx
.5237	20 7f 56	jsr $567f			jsr 	FloatRotateLeft				; shift 64 bit FPA left, rotating carry in
.523a	ca		dex				dex
.523b	ca		dex				dex
.523c	20 7f 56	jsr $567f			jsr 	FloatRotateLeft
.523f	88		dey				dey 	 							; do 31 times
.5240	d0 f0		bne $5232			bne 	_I32SDLoop
.5242	7a		ply				ply 								; restore AY and exit
.5243	68		pla				pla
.5244	60		rts				rts
.5245					FloatDivideCheck:
.5245	20 15 54	jsr $5415			jsr 	FloatSubTopTwoStack 		; subtract Stack[X+1] from Stack[X+0]
.5248	b0 04		bcs $524e			bcs 	_DCSExit 					; if carry set, then could do, exit
.524a	20 fb 53	jsr $53fb			jsr 	FloatAddTopTwoStack 		; add it back in
.524d	18		clc				clc 								; and return False
.524e					_DCSExit:
.524e	60		rts				rts
.524f					FloatFractionalPart:
.524f	5a		phy				phy
.5250	b5 2e		lda $2e,x			lda 	NSStatus,x 					; take absolute value
.5252	29 7f		and #$7f			and 	#$7F
.5254	95 2e		sta $2e,x			sta 	NSStatus,x
.5256	20 c4 53	jsr $53c4			jsr 	FloatNormalise
.5259	b5 6a		lda $6a,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.525b	38		sec				sec
.525c	e9 e0		sbc #$e0			sbc 	#$E0
.525e	90 29		bcc $5289			bcc 	_FFPExit 					; already fractional
.5260	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.5262	b0 22		bcs $5286			bcs 	_FFPZero
.5264	a8		tay				tay 								; put count to do in Y
.5265	b5 5e		lda $5e,x			lda 	NSMantissa3,x 				; do each in turn.
.5267	20 8e 52	jsr $528e			jsr 	_FFPPartial
.526a	95 5e		sta $5e,x			sta 	NSMantissa3,x
.526c	b5 52		lda $52,x			lda 	NSMantissa2,x
.526e	20 8e 52	jsr $528e			jsr 	_FFPPartial
.5271	95 52		sta $52,x			sta 	NSMantissa2,x
.5273	b5 46		lda $46,x			lda 	NSMantissa1,x
.5275	20 8e 52	jsr $528e			jsr 	_FFPPartial
.5278	95 46		sta $46,x			sta 	NSMantissa1,x
.527a	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.527c	20 8e 52	jsr $528e			jsr 	_FFPPartial
.527f	95 3a		sta $3a,x			sta 	NSMantissa0,x
.5281	20 91 56	jsr $5691			jsr 	FloatIsZero 					; zeroed check.
.5284	d0 03		bne $5289			bne 	_FFPExit
.5286					_FFPZero:
.5286	20 6f 56	jsr $566f			jsr 	FloatSetZero
.5289					_FFPExit:
.5289	20 c4 53	jsr $53c4			jsr 	FloatNormalise
.528c	7a		ply				ply
.528d	60		rts				rts
.528e					_FFPPartial:
.528e	c0 00		cpy #$00			cpy 	#0 							; no more to do
.5290	f0 17		beq $52a9			beq 	_FFFPPExit
.5292	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.5294	b0 0c		bcs $52a2			bcs 	_FFFPPWholeByte
.5296	5a		phy				phy
.5297					_FFFPPLeft:
.5297	0a		asl a				asl 	a
.5298	88		dey				dey
.5299	d0 fc		bne $5297			bne 	_FFFPPLeft
.529b	7a		ply				ply
.529c					_FFFPPRight:
.529c	4a		lsr a				lsr 	a
.529d	88		dey				dey
.529e	d0 fc		bne $529c			bne 	_FFFPPRight
.52a0	80 07		bra $52a9			bra 	_FFFPPExit
.52a2					_FFFPPWholeByte:
.52a2	98		tya				tya 								; subtract 8 from count
.52a3	38		sec				sec
.52a4	e9 08		sbc #$08			sbc 	#8
.52a6	a8		tay				tay
.52a7	a9 00		lda #$00			lda 	#0 							; and clear all
.52a9					_FFFPPExit:
.52a9	60		rts				rts
.52aa					FloatIntegerPart:
.52aa	48		pha				pha
.52ab	b5 6a		lda $6a,x			lda 	NSExponent,x 				; is it integer already ?
.52ad	f0 1d		beq $52cc			beq 	_FIPExit 					; if so do nothing
.52af	20 91 56	jsr $5691			jsr 	FloatIsZero 				; is it zero ?
.52b2	f0 15		beq $52c9			beq 	_FIPZero 					; if so return zero.
.52b4	20 c4 53	jsr $53c4			jsr 	FloatNormalise 				; normalise
.52b7	f0 10		beq $52c9			beq 	_FIPZero 					; normalised to zero, exit zero
.52b9					_FIPShift:
.52b9	b5 6a		lda $6a,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.52bb	10 07		bpl $52c4			bpl 	_FIPCheckZero
.52bd	20 88 56	jsr $5688			jsr 	FloatShiftRight 			; shift mantissa right
.52c0	f6 6a		inc $6a,x			inc 	NSExponent,x 				; bump exponent
.52c2	80 f5		bra $52b9			bra 	_FIPShift
.52c4					_FIPCheckZero:
.52c4	20 91 56	jsr $5691			jsr 	FloatIsZero 				; avoid -0 problem
.52c7	d0 03		bne $52cc			bne 	_FIPExit 					; set to zero if mantissa zero.
.52c9					_FIPZero:
.52c9	20 6f 56	jsr $566f			jsr 	FloatSetZero
.52cc					_FIPExit:
.52cc	68		pla				pla
.52cd	60		rts				rts
.52ce					FloatIntegerPartDown:
.52ce	48		pha				pha
.52cf	5a		phy				phy
.52d0	b5 6a		lda $6a,x			lda 	NSExponent,x 				; is it integer already ?
.52d2	f0 36		beq $530a			beq 	_FIPExit 					; if so do nothing
.52d4	20 91 56	jsr $5691			jsr 	FloatIsZero 				; is it zero ?
.52d7	f0 2e		beq $5307			beq 	_FIPZero 					; if so return zero.
.52d9	20 c4 53	jsr $53c4			jsr 	FloatNormalise 				; normalise
.52dc	f0 29		beq $5307			beq 	_FIPZero 					; normalised to zero, exit zero
.52de	a0 00		ldy #$00			ldy 	#0 							; reset the count of bits.
.52e0					_FIPShift:
.52e0	b5 6a		lda $6a,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.52e2	10 0a		bpl $52ee			bpl 	_FIPCheckDown
.52e4	20 88 56	jsr $5688			jsr 	FloatShiftRight 			; shift mantissa right
.52e7	90 01		bcc $52ea			bcc 	_FIPNoFrac 					; shifted a zero out ?
.52e9	c8		iny				iny
.52ea					_FIPNoFrac:
.52ea	f6 6a		inc $6a,x			inc 	NSExponent,x 				; bump exponent
.52ec	80 f2		bra $52e0			bra 	_FIPShift
.52ee					_FIPCheckDown:
.52ee	c0 00		cpy #$00			cpy 	#0 							; were there any fractional bits.
.52f0	f0 10		beq $5302			beq 	_FIPCheckZero
.52f2	34 2e		bit $2e,x			bit 	NSStatus,x 					; +ve
.52f4	10 0c		bpl $5302			bpl 	_FIPCheckZero
.52f6	e8		inx				inx 								; -ve so round *down*.
.52f7	a9 01		lda #$01			lda 	#1
.52f9	20 71 56	jsr $5671			jsr 	FloatSetByte
.52fc	20 31 56	jsr $5631			jsr 	FloatNegate
.52ff	20 93 50	jsr $5093			jsr 	FloatAdd
.5302					_FIPCheckZero:
.5302	20 91 56	jsr $5691			jsr 	FloatIsZero 				; avoid -0 problem
.5305	d0 03		bne $530a			bne 	_FIPExit 					; set to zero if mantissa zero.
.5307					_FIPZero:
.5307	20 6f 56	jsr $566f			jsr 	FloatSetZero
.530a					_FIPExit:
.530a	7a		ply				ply
.530b	68		pla				pla
.530c	60		rts				rts
.530d					FloatInt8Multiply:
.530d	5a		phy				phy
.530e	b5 3a		lda $3a,x			lda 	NSMantissa0,x 				; right shifted multiplier in Y
.5310	a8		tay				tay
.5311	74 3a		stz $3a,x			stz 	NSMantissa0,x 				; zero the result (already 8 bit constant)
.5313					_FI8MLoop:
.5313	98		tya				tya 								; shift right shifter right into carry
.5314	4a		lsr a				lsr 	a
.5315	a8		tay				tay
.5316	90 0d		bcc $5325			bcc 	_FI8MNoAdd
.5318	18		clc				clc
.5319	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.531b	75 3b		adc $3b,x			adc 	NSMantissa0+1,x
.531d	95 3a		sta $3a,x			sta 	NSMantissa0,x
.531f	b5 46		lda $46,x			lda 	NSMantissa1,x
.5321	75 47		adc $47,x			adc 	NSMantissa1+1,x
.5323	95 46		sta $46,x			sta 	NSMantissa1,x
.5325					_FI8MNoAdd:
.5325	16 3b		asl $3b,x			asl 	NSMantissa0+1,x 			; shift adder left
.5327	36 47		rol $47,x			rol 	NSMantissa1+1,x
.5329	c0 00		cpy #$00			cpy 	#0
.532b	d0 e6		bne $5313			bne 	_FI8MLoop 					; until right shifter zero.
.532d	7a		ply				ply
.532e	60		rts				rts
.532f					FloatMultiply:
.532f	ca		dex				dex
.5330	b5 6a		lda $6a,x			lda 	NSExponent,x 				; can use optimised ?
.5332	15 6b		ora $6b,x			ora 	NSExponent+1,x
.5334	15 5e		ora $5e,x			ora 	NSMantissa3,x
.5336	15 5f		ora $5f,x			ora 	NSMantissa3+1,x
.5338	d0 21		bne $535b			bne 	_FMUseFloat
.533a	b5 2e		lda $2e,x			lda 	NSStatus,x 					; check if it is 8 bit unsigned
.533c	15 2f		ora $2f,x			ora 	NSStatus+1,x
.533e	29 80		and #$80			and 	#$80
.5340	15 5e		ora $5e,x			ora 	NSMantissa3,x
.5342	15 52		ora $52,x			ora 	NSMantissa2,x
.5344	15 46		ora $46,x			ora 	NSMantissa1,x
.5346	15 5f		ora $5f,x			ora 	NSMantissa3+1,x
.5348	15 53		ora $53,x			ora 	NSMantissa2+1,x
.534a	15 47		ora $47,x			ora 	NSMantissa1+1,x
.534c	d0 04		bne $5352			bne 	_FMInt32
.534e	20 0d 53	jsr $530d			jsr 	FloatInt8Multiply 			; use fast 8x8 multiply.
.5351	60		rts				rts
.5352					_FMInt32:
.5352	20 7c 53	jsr $537c			jsr 	FloatMultiplyShort			; use the int32 one.
.5355	18		clc				clc 								; fix it up if gone out of range
.5356	75 6a		adc $6a,x			adc 	NSExponent,x
.5358	95 6a		sta $6a,x			sta 	NSExponent,x
.535a	60		rts				rts
.535b					_FMUseFloat:
.535b	20 c4 53	jsr $53c4			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.535e	f0 18		beq $5378			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.5360	e8		inx				inx
.5361	20 c4 53	jsr $53c4			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.5364	ca		dex				dex
.5365	c9 00		cmp #$00			cmp 	#0
.5367	f0 0c		beq $5375			beq 	_FDSetZero
.5369	20 7c 53	jsr $537c			jsr 	FloatMultiplyShort 			; calculate the result.
.536c	75 6a		adc $6a,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.536e	18		clc				clc
.536f	75 6b		adc $6b,x			adc 	NSExponent+1,x
.5371	95 6a		sta $6a,x			sta 	NSExponent,x
.5373	80 03		bra $5378			bra 	_FDExit
.5375					_FDSetZero:
.5375	20 6f 56	jsr $566f			jsr 	FloatSetZero 				; return 0
.5378					_FDExit:
.5378	20 c4 53	jsr $53c4			jsr 	FloatNormalise 				; normalise the result
.537b	60		rts				rts
.537c					FloatMultiplyShort:
.537c	5a		phy				phy 								; save Y
.537d	20 52 56	jsr $5652			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.5380	20 6b 56	jsr $566b			jsr 	FloatSetZeroMantissaOnly 	; set mantissa S[X] to zero
.5383	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.5385					_I32MLoop:
.5385	b5 3c		lda $3c,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.5387	15 48		ora $48,x			ora 	NSMantissa1+2,x
.5389	15 54		ora $54,x			ora 	NSMantissa2+2,x
.538b	15 60		ora $60,x			ora 	NSMantissa3+2,x
.538d	f0 25		beq $53b4			beq 	_I32MExit 					; exit if zero
.538f	b5 3c		lda $3c,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.5391	29 01		and #$01			and 	#1
.5393	f0 0d		beq $53a2			beq 	_I32MNoAdd
.5395	20 fb 53	jsr $53fb			jsr 	FloatAddTopTwoStack 		; if so add S[X+1] to S[X+0]
.5398	b5 5e		lda $5e,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.539a	10 06		bpl $53a2			bpl 	_I32MNoAdd
.539c					_I32ShiftRight:
.539c	20 88 56	jsr $5688			jsr 	FloatShiftRight 			; shift S[X] right
.539f	c8		iny				iny 								; increment shift count
.53a0	80 09		bra $53ab			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.53a2					_I32MNoAdd:
.53a2	34 5f		bit $5f,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.53a4	70 f6		bvs $539c			bvs 	_I32ShiftRight 				; instead.
.53a6	e8		inx				inx
.53a7	20 7e 56	jsr $567e			jsr 	FloatShiftLeft 				; shift additive S[X+1] left
.53aa	ca		dex				dex
.53ab					_I32MShiftUpper:
.53ab	e8		inx				inx 								; shift S[X+2] right
.53ac	e8		inx				inx
.53ad	20 88 56	jsr $5688			jsr 	FloatShiftRight
.53b0	ca		dex				dex
.53b1	ca		dex				dex
.53b2	80 d1		bra $5385			bra 	_I32MLoop 					; try again.
.53b4					_I32MExit:
.53b4	20 ba 53	jsr $53ba			jsr 	FloatCalculateSign
.53b7	98		tya				tya 								; shift in A
.53b8	7a		ply				ply 								; restore Y and exit
.53b9	60		rts				rts
.53ba					FloatCalculateSign:
.53ba	b5 2e		lda $2e,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.53bc	16 2e		asl $2e,x			asl 	NSStatus,x 					; shift result left
.53be	55 2f		eor $2f,x			eor 	NSStatus+1,x
.53c0	0a		asl a				asl 	a 							; shift bit 7 into carry
.53c1	76 2e		ror $2e,x			ror 	NSStatus,x 					; shift right into status byte.
.53c3	60		rts				rts
.53c4					FloatNormalise:
.53c4	20 91 56	jsr $5691			jsr 	FloatIsZero 				; if zero exit
.53c7	d0 07		bne $53d0			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.53c9	16 2e		asl $2e,x			asl 	NSStatus,x 					; clear the sign bit.
.53cb	76 2e		ror $2e,x			ror 	NSStatus,x 					; (no -0)
.53cd	a9 00		lda #$00			lda 	#0 							; set Z flag
.53cf	60		rts				rts
.53d0					_NSNormaliseOptimise:
.53d0	b5 5e		lda $5e,x			lda 	NSMantissa3,x 				; upper byte zero ?
.53d2	d0 19		bne $53ed			bne 	_NSNormaliseLoop
.53d4	b5 52		lda $52,x			lda 	NSMantissa2,x 				; byte normalise
.53d6	30 15		bmi $53ed			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.53d8	95 5e		sta $5e,x			sta 	NSMantissa3,x
.53da	b5 46		lda $46,x			lda 	NSMantissa1,x
.53dc	95 52		sta $52,x			sta 	NSMantissa2,x
.53de	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.53e0	95 46		sta $46,x			sta 	NSMantissa1,x
.53e2	74 3a		stz $3a,x			stz 	NSMantissa0,x
.53e4	b5 6a		lda $6a,x			lda 	NSExponent,x
.53e6	38		sec				sec
.53e7	e9 08		sbc #$08			sbc 	#8
.53e9	95 6a		sta $6a,x			sta 	NSExponent,x
.53eb	80 e3		bra $53d0			bra 	_NSNormaliseOptimise
.53ed					_NSNormaliseLoop:
.53ed	34 5e		bit $5e,x			bit 	NSMantissa3,x 				; bit 30 set ?
.53ef	70 07		bvs $53f8			bvs 	_NSNExit 					; exit if so with Z flag clear
.53f1	20 7e 56	jsr $567e			jsr 	FloatShiftLeft 				; shift mantissa left
.53f4	d6 6a		dec $6a,x			dec 	NSExponent,x 				; adjust exponent
.53f6	80 f5		bra $53ed			bra 	_NSNormaliseLoop
.53f8					_NSNExit:
.53f8	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.53fa	60		rts				rts
.53fb					FloatAddTopTwoStack:
.53fb	18		clc				clc
.53fc	b5 3a		lda $3a,x			lda		NSMantissa0,x
.53fe	75 3b		adc $3b,x			adc 		NSMantissa0+1,x
.5400	95 3a		sta $3a,x			sta 	NSMantissa0,x
.5402	b5 46		lda $46,x			lda		NSMantissa1,x
.5404	75 47		adc $47,x			adc 		NSMantissa1+1,x
.5406	95 46		sta $46,x			sta 	NSMantissa1,x
.5408	b5 52		lda $52,x			lda		NSMantissa2,x
.540a	75 53		adc $53,x			adc 		NSMantissa2+1,x
.540c	95 52		sta $52,x			sta 	NSMantissa2,x
.540e	b5 5e		lda $5e,x			lda		NSMantissa3,x
.5410	75 5f		adc $5f,x			adc 		NSMantissa3+1,x
.5412	95 5e		sta $5e,x			sta 	NSMantissa3,x
.5414	60		rts				rts
.5415					FloatSubTopTwoStack:
.5415	38		sec				sec
.5416	b5 3a		lda $3a,x			lda		NSMantissa0,x
.5418	f5 3b		sbc $3b,x			sbc 		NSMantissa0+1,x
.541a	95 3a		sta $3a,x			sta 	NSMantissa0,x
.541c	b5 46		lda $46,x			lda		NSMantissa1,x
.541e	f5 47		sbc $47,x			sbc 		NSMantissa1+1,x
.5420	95 46		sta $46,x			sta 	NSMantissa1,x
.5422	b5 52		lda $52,x			lda		NSMantissa2,x
.5424	f5 53		sbc $53,x			sbc 		NSMantissa2+1,x
.5426	95 52		sta $52,x			sta 	NSMantissa2,x
.5428	b5 5e		lda $5e,x			lda		NSMantissa3,x
.542a	f5 5f		sbc $5f,x			sbc 		NSMantissa3+1,x
.542c	95 5e		sta $5e,x			sta 	NSMantissa3,x
.542e	60		rts				rts
.542f					FloatInt32Add:
.542f	b5 2e		lda $2e,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.5431	55 2f		eor $2f,x			eor 	NSStatus+1,x
.5433	30 04		bmi $5439			bmi 	_DiffSigns
.5435	20 fb 53	jsr $53fb			jsr		FloatAddTopTwoStack
.5438	60		rts				rts
.5439					_DiffSigns:
.5439	20 15 54	jsr $5415			jsr 	FloatSubTopTwoStack 		; do a physical subtraction
.543c	34 5e		bit $5e,x			bit 	NSMantissa3,x 				; result is +ve, okay
.543e	10 07		bpl $5447			bpl 	_AddExit
.5440	b5 2f		lda $2f,x			lda 	NSStatus+1,x 				; sign is that of 11th value
.5442	95 2e		sta $2e,x			sta 	NSStatus,x
.5444	20 38 56	jsr $5638			jsr 	FloatNegateMantissa 		; negate the mantissa and exit
.5447					_AddExit:
.5447	20 91 56	jsr $5691			jsr 	FloatIsZero 				; check for -0
.544a	d0 02		bne $544e			bne 	_AddNonZero
.544c	74 2e		stz $2e,x			stz 	NSStatus,x
.544e					_AddNonZero:
.544e	60		rts				rts
=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.544f					FloatEncodeStart:
.544f	38		sec				sec
.5450	80 01		bra $5453			bra 	FloatEncodeContinue+1
.5452					FloatEncodeContinue:
.5452	18		clc				clc
.5453					FloatEncode:
.5453	08		php				php 								; save reset flag.
.5454	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.5456	f0 15		beq $546d			beq 	_ENIsOkay
.5458	c9 30		cmp #$30			cmp 	#"0"
.545a	90 04		bcc $5460			bcc 	_ENBadNumber
.545c	c9 3a		cmp #$3a			cmp 	#"9"+1
.545e	90 0d		bcc $546d			bcc 	_ENIsOkay
.5460					_ENBadNumber:
.5460	28		plp				plp 								; throw saved reset
.5461	ad 22 04	lda $0422			lda 	encodeState 				; if in decimal mode, construct final number
.5464	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.5466	d0 03		bne $546b			bne 	_ENFail
.5468	4c e5 54	jmp $54e5			jmp 	_ENConstructFinal
.546b					_ENFail:
.546b	18		clc				clc 								; not allowed
.546c	60		rts				rts
.546d					_ENIsOkay:
.546d	28		plp				plp 								; are we restarting
.546e	90 15		bcc $5485			bcc 	_ENNoRestart
.5470					_ENStartEncode:
.5470	c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.5472	f0 0c		beq $5480			beq 	_ENFirstDP
.5474	29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.5476	20 71 56	jsr $5671			jsr 	FloatSetByte 				; in single byte mode.
.5479	a9 01		lda #$01			lda 	#ESTA_Low
.547b					_ENExitChange:
.547b	8d 22 04	sta $0422			sta 	encodeState 				; save new state
.547e	38		sec				sec
.547f	60		rts				rts
.5480					_ENFirstDP:
.5480	20 6f 56	jsr $566f			jsr 	FloatSetZero 				; clear integer part
.5483	80 3c		bra $54c1			bra 	_ESTASwitchFloat			; go straight to float and exi
.5485					_ENNoRestart:
.5485	48		pha				pha 								; save digit or DP on stack.
.5486	ad 22 04	lda $0422			lda 	encodeState 				; get current state
.5489	c9 01		cmp #$01			cmp 	#ESTA_Low
.548b	f0 09		beq $5496			beq  	_ESTALowState
.548d	c9 02		cmp #$02			cmp 	#ESTA_High
.548f	f0 26		beq $54b7			beq 	_ESTAHighState
.5491	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.5493	f0 38		beq $54cd			beq 	_ESTADecimalState
>5495	db						.byte 	$DB 						; causes a break in the emulator
.5496					_ESTALowState:
.5496	68		pla				pla 								; get value back
.5497	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.5499	f0 26		beq $54c1			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.549b	29 0f		and #$0f			and 	#15 						; make digit
.549d	8d 23 04	sta $0423			sta 	digitTemp 					; save it.
.54a0	b5 3a		lda $3a,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.54a2	0a		asl a				asl 	a
.54a3	0a		asl a				asl 	a
.54a4	75 3a		adc $3a,x			adc 	NSMantissa0,x
.54a6	0a		asl a				asl 	a
.54a7	6d 23 04	adc $0423			adc 	digitTemp
.54aa	95 3a		sta $3a,x			sta 	NSMantissa0,x
.54ac	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.54ae	90 05		bcc $54b5			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.54b0	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.54b2	8d 22 04	sta $0422			sta 	encodeState
.54b5					_ESTANoSwitch:
.54b5	38		sec				sec
.54b6	60		rts				rts
.54b7					_ESTAHighState:
.54b7	68		pla				pla 								; get value back
.54b8	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.54ba	f0 05		beq $54c1			beq 	_ESTASwitchFloat
.54bc	20 17 55	jsr $5517			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.54bf	38		sec				sec
.54c0	60		rts				rts
.54c1					_ESTASwitchFloat:
.54c1	9c 24 04	stz $0424			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.54c4	e8		inx				inx 								; zero the decimal additive.
.54c5	20 6f 56	jsr $566f			jsr 	FloatSetZero
.54c8	ca		dex				dex
.54c9	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.54cb	80 ae		bra $547b			bra 	_ENExitChange
.54cd					_ESTADecimalState:
.54cd	68		pla				pla 								; digit.
.54ce	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 11th decimal point.
.54d0	f0 99		beq $546b			beq 	_ENFail
.54d2	e8		inx				inx 								; put digit into fractional part of X+1
.54d3	20 17 55	jsr $5517			jsr 	ESTAShiftDigitIntoMantissa
.54d6	ca		dex				dex
.54d7	ee 24 04	inc $0424			inc 	decimalCount 				; bump the count of decimals
.54da	ad 24 04	lda $0424			lda 	decimalCount 				; too many decimal digits.
.54dd	c9 0b		cmp #$0b			cmp 	#11
.54df	f0 02		beq $54e3			beq 	_ESTADSFail
.54e1	38		sec				sec
.54e2	60		rts				rts
.54e3					_ESTADSFail:
.54e3	18		clc				clc
.54e4	60		rts				rts
.54e5					_ENConstructFinal:
.54e5	ad 24 04	lda $0424			lda 	decimalCount 				; get decimal count
.54e8	f0 2b		beq $5515			beq 	_ENCFExit 					; no decimals
.54ea	5a		phy				phy
.54eb	0a		asl a				asl 	a 							; x 4 and CLC
.54ec	0a		asl a				asl 	a
.54ed	6d 24 04	adc $0424			adc 	decimalCount
.54f0	a8		tay				tay
.54f1	b9 7c 51	lda $517c,y			lda 	FloatScalarTable-5,y 		; copy decimal scalar to X+2
.54f4	95 3c		sta $3c,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.54f6	b9 7d 51	lda $517d,y			lda 	FloatScalarTable-5+1,y
.54f9	95 48		sta $48,x			sta 	NSMantissa1+2,x
.54fb	b9 7e 51	lda $517e,y			lda 	FloatScalarTable-5+2,y
.54fe	95 54		sta $54,x			sta 	NSMantissa2+2,x
.5500	b9 7f 51	lda $517f,y			lda 	FloatScalarTable-5+3,y
.5503	95 60		sta $60,x			sta 	NSMantissa3+2,x
.5505	b9 80 51	lda $5180,y			lda 	FloatScalarTable-5+4,y
.5508	95 6c		sta $6c,x			sta 	NSExponent+2,x
.550a	74 30		stz $30,x			stz 	NSStatus+2,x 				; make +ve
.550c	e8		inx				inx 								; multiply decimal const by decimal scalar
.550d	e8		inx				inx
.550e	20 2f 53	jsr $532f			jsr 	FloatMultiply
.5511	20 93 50	jsr $5093			jsr 	FloatAdd 					; add to integer part.
.5514	7a		ply				ply
.5515					_ENCFExit:
.5515	18		clc				clc 								; reject the digit.
.5516	60		rts				rts
.5517					ESTAShiftDigitIntoMantissa:
.5517	29 0f		and #$0f			and 	#15 						; save digit
.5519	48		pha				pha
.551a	b5 5e		lda $5e,x			lda 	NSMantissa3,x 				; push mantissa on stack
.551c	48		pha				pha
.551d	b5 52		lda $52,x			lda 	NSMantissa2,x
.551f	48		pha				pha
.5520	b5 46		lda $46,x			lda 	NSMantissa1,x
.5522	48		pha				pha
.5523	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.5525	48		pha				pha
.5526	20 7e 56	jsr $567e			jsr 	FloatShiftLeft 				; x 2
.5529	20 7e 56	jsr $567e			jsr 	FloatShiftLeft 				; x 4
.552c	18		clc				clc 								; pop mantissa and add
.552d	68		pla				pla
.552e	75 3a		adc $3a,x			adc 	NSMantissa0,x
.5530	95 3a		sta $3a,x			sta 	NSMantissa0,x
.5532	68		pla				pla
.5533	75 46		adc $46,x			adc 	NSMantissa1,x
.5535	95 46		sta $46,x			sta 	NSMantissa1,x
.5537	68		pla				pla
.5538	75 52		adc $52,x			adc 	NSMantissa2,x
.553a	95 52		sta $52,x			sta 	NSMantissa2,x
.553c	68		pla				pla
.553d	75 5e		adc $5e,x			adc 	NSMantissa3,x
.553f	95 5e		sta $5e,x			sta 	NSMantissa3,x 				; x 5
.5541	20 7e 56	jsr $567e			jsr 	FloatShiftLeft 				; x 10
.5544	68		pla				pla 								; add digit
.5545	18		clc				clc
.5546	75 3a		adc $3a,x			adc 	NSMantissa0,x
.5548	95 3a		sta $3a,x			sta 	NSMantissa0,x
.554a	90 0a		bcc $5556			bcc 	_ESTASDExit
.554c	f6 46		inc $46,x			inc 	NSMantissa1,x
.554e	d0 06		bne $5556			bne 	_ESTASDExit
.5550	f6 52		inc $52,x			inc 	NSMantissa2,x
.5552	d0 02		bne $5556			bne 	_ESTASDExit
.5554	f6 5e		inc $5e,x			inc 	NSMantissa3,x
.5556					_ESTASDExit:
.5556	60		rts				rts
.0422					encodeState:
>0422							.fill 	1
.0423					digitTemp:
>0423							.fill 	1
.0424					decimalCount:
>0424							.fill 	1
.5557					FloatToString:
.5557	da		phx				phx
.5558	5a		phy				phy 								; save code position
.5559	8d 25 04	sta $0425			sta 	decimalPlaces	 			; save number of DPs.
.555c	9c 26 04	stz $0426			stz 	dbOffset 					; offset into decimal buffer = start.
.555f	b5 2e		lda $2e,x			lda 	NSStatus,x  				; is it -ve.
.5561	10 08		bpl $556b			bpl 	_CNTSNotNegative
.5563	29 7f		and #$7f			and 	#$7F 						; make +ve
.5565	95 2e		sta $2e,x			sta 	NSStatus,x
.5567	a9 2d		lda #$2d			lda 	#"-"
.5569	80 02		bra $556d			bra 	_CNTMain
.556b					_CNTSNotNegative:
.556b	a9 20		lda #$20			lda 	#" "
.556d					_CNTMain:
.556d	20 cf 55	jsr $55cf			jsr 	WriteDecimalBuffer
.5570	b5 6a		lda $6a,x			lda 	NSExponent,x 				; check if decimal
.5572	f0 0d		beq $5581			beq 	_CNTSNotFloat
.5574	e8		inx				inx 								; round up so we don't get too many 6.999999
.5575	a9 01		lda #$01			lda 	#1
.5577	20 71 56	jsr $5671			jsr 	FloatSetByte
.557a	b5 69		lda $69,x			lda		NSExponent-1,x
.557c	95 6a		sta $6a,x			sta 	NSExponent,x
.557e	20 93 50	jsr $5093			jsr 	FloatAdd
.5581					_CNTSNotFloat:
.5581	20 b1 55	jsr $55b1			jsr 	MakePlusTwoString 			; do the integer part.
.5584	20 4f 52	jsr $524f			jsr 	FloatFractionalPart 		; get the fractional part
.5587	20 c4 53	jsr $53c4			jsr 	FloatNormalise					; normalise , exit if zero
.558a	f0 22		beq $55ae			beq 	_CNTSExit
.558c	a9 2e		lda #$2e			lda 	#"."
.558e	20 cf 55	jsr $55cf			jsr 	WriteDecimalBuffer 			; write decimal place
.5591					_CNTSDecimal:
.5591	ce 25 04	dec $0425			dec 	decimalPlaces 				; done all the decimals
.5594	30 18		bmi $55ae			bmi 	_CNTSExit
.5596	e8		inx				inx 								; x 10.0
.5597	a9 0a		lda #$0a			lda 	#10
.5599	20 71 56	jsr $5671			jsr 	FloatSetByte
.559c	20 2f 53	jsr $532f			jsr 	FloatMultiply
.559f	20 b1 55	jsr $55b1			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.55a2	20 4f 52	jsr $524f			jsr 	FloatFractionalPart 		; get the fractional part
.55a5	20 c4 53	jsr $53c4			jsr 	FloatNormalise 				; normalise it.
.55a8	b5 6a		lda $6a,x			lda 	NSExponent,x 				; gone to zero, exit.
.55aa	c9 d0		cmp #$d0			cmp 	#$D0 						; very small remainder, so don't bother.
.55ac	b0 e3		bcs $5591			bcs 	_CNTSDecimal 				; keep going.
.55ae					_CNTSExit:
.55ae	7a		ply				ply
.55af	fa		plx				plx
.55b0	60		rts				rts
.55b1					MakePlusTwoString:
.55b1	da		phx				phx
.55b2	20 52 56	jsr $5652			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.55b5	e8		inx				inx 								; access it
.55b6	e8		inx				inx
.55b7	20 aa 52	jsr $52aa			jsr 	FloatIntegerPart 			; make it an integer
.55ba	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.55bc	20 ee 55	jsr $55ee			jsr 	ConvertInt32
.55bf	a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.55c1					_MPTSCopy:
.55c1	bd 00 04	lda $0400,x			lda 	numberBuffer,x
.55c4	20 cf 55	jsr $55cf			jsr 	WriteDecimalBuffer
.55c7	e8		inx				inx
.55c8	bd 00 04	lda $0400,x			lda 	numberBuffer,x
.55cb	d0 f4		bne $55c1			bne 	_MPTSCopy
.55cd	fa		plx				plx
.55ce	60		rts				rts
.55cf					WriteDecimalBuffer:
.55cf	da		phx				phx
.55d0	ae 26 04	ldx $0426			ldx 	dbOffset
.55d3	9d 27 04	sta $0427,x			sta 	decimalBuffer,x
.55d6	9e 28 04	stz $0428,x			stz 	decimalBuffer+1,x
.55d9	ee 26 04	inc $0426			inc 	dbOffset
.55dc	fa		plx				plx
.55dd	60		rts				rts
.0425					decimalPlaces:
>0425							.fill 	1
.0426					dbOffset:
>0426							.fill 	1
.0427					decimalBuffer:
>0427							.fill 	32
.55de					ConvertInt16:
.55de	85 3a		sta $3a				sta 	NSMantissa0 				; set up as 32 bit conversion
.55e0	86 46		stx $46				stx 	NSMantissa1
.55e2	64 52		stz $52				stz 	NSMantissa2
.55e4	64 5e		stz $5e				stz 	NSMantissa3
.55e6	64 2e		stz $2e				stz 	NSStatus 					; positive integer
.55e8	a2 00		ldx #$00			ldx 	#0 							; stack level
.55ea	a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.55ec	80 00		bra $55ee			bra 	ConvertInt32
.55ee					ConvertInt32:
.55ee	5a		phy				phy
.55ef	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.55f1	24 2e		bit $2e				bit 	NSStatus 					; output a - if not negative.
.55f3	10 08		bpl $55fd			bpl 	_CI32NotNeg
.55f5	48		pha				pha
.55f6	a9 2d		lda #$2d			lda 	#'-'
.55f8	99 00 04	sta $0400,y			sta 	numberBuffer,y
.55fb	c8		iny				iny
.55fc	68		pla				pla
.55fd					_CI32NotNeg:
.55fd	20 0b 56	jsr $560b			jsr 	_CI32DivideConvert 			; recursive conversion
.5600	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.5602	99 00 04	sta $0400,y			sta 	numberBuffer,y
.5605	7a		ply				ply
.5606	a2 04		ldx #$04			ldx 	#numberBuffer >> 8 			; return address in XA
.5608	a9 00		lda #$00			lda 	#numberBuffer & $FF
.560a	60		rts				rts
.560b					_CI32DivideConvert:
.560b	e8		inx				inx 								; write to next slot up
.560c	20 71 56	jsr $5671			jsr 	FloatSetByte 		 		; write the base out.
.560f	ca		dex				dex
.5610	20 05 52	jsr $5205			jsr 	Int32Divide 				; divide
.5613	b5 3a		lda $3a,x			lda 	NSMantissa0,x 				; save remainder
.5615	48		pha				pha
.5616	20 f4 51	jsr $51f4			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.5619	20 91 56	jsr $5691			jsr 	FloatIsZero 				; is it zero ?
.561c	f0 05		beq $5623			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.561e	b5 3b		lda $3b,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.5620	20 0b 56	jsr $560b			jsr 	_CI32DivideConvert 			; and recusrively call.
.5623					_CI32NoRecurse:
.5623	68		pla				pla 								; remainder
.5624	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.5626	90 02		bcc $562a			bcc 	_CI32NotHex
.5628	69 26		adc #$26			adc 	#6+32
.562a					_CI32NotHex:
.562a	69 30		adc #$30			adc 	#48
.562c	99 00 04	sta $0400,y			sta 	numberBuffer,y 				; write out and exit
.562f	c8		iny				iny
.5630	60		rts				rts
.5631					FloatNegate:
.5631	b5 2e		lda $2e,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.5633	49 80		eor #$80			eor 	#$80  						; toggle the negative flag
.5635	95 2e		sta $2e,x			sta 	NSStatus,x
.5637	60		rts				rts
.5638					FloatNegateMantissa:
.5638	38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.5639	a9 00		lda #$00			lda 	#0
.563b	f5 3a		sbc $3a,x			sbc 	NSMantissa0,x
.563d	95 3a		sta $3a,x			sta 	NSMantissa0,x
.563f	a9 00		lda #$00			lda 	#0
.5641	f5 46		sbc $46,x			sbc 	NSMantissa1,x
.5643	95 46		sta $46,x			sta 	NSMantissa1,x
.5645	a9 00		lda #$00			lda 	#0
.5647	f5 52		sbc $52,x			sbc 	NSMantissa2,x
.5649	95 52		sta $52,x			sta 	NSMantissa2,x
.564b	a9 00		lda #$00			lda 	#0
.564d	f5 5e		sbc $5e,x			sbc 	NSMantissa3,x
.564f	95 5e		sta $5e,x			sta 	NSMantissa3,x
.5651	60		rts				rts
.5652					FloatShiftUpTwo:
.5652	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.5654	95 3c		sta $3c,x			sta 	NSMantissa0+2,x
.5656	b5 46		lda $46,x			lda 	NSMantissa1,x
.5658	95 48		sta $48,x			sta 	NSMantissa1+2,x
.565a	b5 52		lda $52,x			lda 	NSMantissa2,x
.565c	95 54		sta $54,x			sta 	NSMantissa2+2,x
.565e	b5 5e		lda $5e,x			lda 	NSMantissa3,x
.5660	95 60		sta $60,x			sta 	NSMantissa3+2,x
.5662	b5 6a		lda $6a,x			lda 	NSExponent,x
.5664	95 6c		sta $6c,x			sta 	NSExponent+2,x
.5666	b5 2e		lda $2e,x			lda 	NSStatus,x
.5668	95 30		sta $30,x			sta 	NSStatus+2,x
.566a	60		rts				rts
.566b					FloatSetZeroMantissaOnly:
.566b	74 3a		stz $3a,x			stz 	NSMantissa0,x
.566d	80 08		bra $5677			bra 	FloatZero13
.566f					FloatSetZero:
.566f	a9 00		lda #$00			lda 	#0
.5671					FloatSetByte:
.5671	74 6a		stz $6a,x			stz 	NSExponent,x 				; zero exponent, as +ve integer value.
.5673					FloatSetMantissa:
.5673	95 3a		sta $3a,x			sta 	NSMantissa0,x 				; zero mantissa
.5675	74 2e		stz $2e,x			stz 	NSStatus,x
.5677					FloatZero13:
.5677	74 46		stz $46,x			stz 	NSMantissa1,x
.5679	74 52		stz $52,x			stz 	NSMantissa2,x
.567b	74 5e		stz $5e,x			stz 	NSMantissa3,x
.567d	60		rts				rts
.567e					FloatShiftLeft:
.567e	18		clc				clc
.567f					FloatRotateLeft:
.567f	36 3a		rol $3a,x			rol 	NSMantissa0,x
.5681	36 46		rol $46,x			rol		NSMantissa1,x
.5683	36 52		rol $52,x			rol		NSMantissa2,x
.5685	36 5e		rol $5e,x			rol		NSMantissa3,x
.5687	60		rts				rts
.5688					FloatShiftRight:
.5688	56 5e		lsr $5e,x			lsr 	NSMantissa3,x
.568a	76 52		ror $52,x			ror		NSMantissa2,x
.568c	76 46		ror $46,x			ror		NSMantissa1,x
.568e	76 3a		ror $3a,x			ror		NSMantissa0,x
.5690	60		rts				rts
.5691					FloatIsZero:
.5691	b5 5e		lda $5e,x			lda 	NSMantissa3,x
.5693	15 52		ora $52,x			ora		NSMantissa2,x
.5695	15 46		ora $46,x			ora		NSMantissa1,x
.5697	15 3a		ora $3a,x			ora		NSMantissa0,x
.5699	60		rts				rts

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/polynomials.library

.569a					FloatArcTan:
.569a	20 c4 53	jsr $53c4			jsr 	FloatNormalise 					; normalise x
.569d	b5 2e		lda $2e,x			lda 	NSStatus,x 						; save sign, make absolute
.569f	48		pha				pha
.56a0	74 2e		stz $2e,x			stz 	NSStatus,x
.56a2	b5 6a		lda $6a,x			lda 	NSExponent,x 					; $40000000 ^ $E2 is 1.0
.56a4	c9 e2		cmp #$e2			cmp 	#$E2
.56a6	90 25		bcc $56cd			bcc 	_UANoFixup
.56a8	8a		txa				txa 									; value in +1
.56a9	a8		tay				tay
.56aa	c8		iny				iny
.56ab	20 53 58	jsr $5853			jsr 	CopyFloatXY
.56ae	a9 01		lda #$01			lda 	#1 								; 1.0 in +0
.56b0	20 71 56	jsr $5671			jsr 	FloatSetByte
.56b3	e8		inx				inx
.56b4	20 b8 51	jsr $51b8			jsr 	FloatDivide
.56b7	b0 21		bcs $56da			bcs 	_FATError
.56b9	20 dd 56	jsr $56dd			jsr 	CoreAtn 						; calculate the root
.56bc	20 48 58	jsr $5848			jsr 	CompletePolynomial
.56bf	20 31 56	jsr $5631			jsr 	FloatNegate 					; make -ve
.56c2	a9 05		lda #$05			lda 	#Const_PiDiv2-Const_Base
.56c4	20 9f 58	jsr $589f			jsr 	LoadConstant
.56c7	e8		inx				inx
.56c8	20 93 50	jsr $5093			jsr 	FloatAdd
.56cb	80 06		bra $56d3			bra 	_UAComplete
.56cd					_UANoFixup:
.56cd	20 dd 56	jsr $56dd			jsr 	CoreAtn
.56d0	20 48 58	jsr $5848			jsr 	CompletePolynomial
.56d3					_UAComplete:
.56d3	68		pla				pla 									; apply the result.
.56d4	55 2e		eor $2e,x			eor 	NSStatus,x
.56d6	95 2e		sta $2e,x			sta 	NSStatus,x
.56d8	18		clc				clc
.56d9	60		rts				rts
.56da					_FATError:
.56da	68		pla				pla
.56db	38		sec				sec
.56dc	60		rts				rts
.56dd					CoreAtn:
.56dd	a9 4b		lda #$4b			lda 	#AtnCoefficients & $FF
.56df	a0 57		ldy #$57			ldy 	#AtnCoefficients >> 8
.56e1	4c 9c 59	jmp $599c			jmp 	CorePolySquared
.56e4					ExpCoefficients:
>56e4	07					.byte	7
>56e5	2b 1f 2c 5a				.dword	$5a2c1f2b ; 2.1498763701e-05
>56e9	d2					.byte	$d2
>56ea	8e 59 3f 4b				.dword	$4b3f598e ; 0.00014352314037
>56ee	d5					.byte	$d5
>56ef	c3 71 f7 57				.dword	$57f771c3 ; 0.0013422634825
>56f3	d8					.byte	$d8
>56f4	15 0e c2 4e				.dword	$4ec20e15 ; 0.0096140170135
>56f8	db					.byte	$db
>56f9	05 ac ac 71				.dword	$71acac05 ; 0.05550512686
>56fd	dd					.byte	$dd
>56fe	e3 f3 fe 7a				.dword	$7afef3e3 ; 0.2402263846
>5702	df					.byte	$df
>5703	08 0c b9 58				.dword	$58b90c08 ; 0.69314718618
>5707	e1					.byte	$e1
>5708	00 00 00 40				.dword	$40000000 ; 1.0
>570c	e2					.byte	$e2
.570d					SinCoefficients:
>570d	06					.byte	6
>570e	8d 16 0d f3				.dword	$f30d168d ; -14.381390672
>5712	e5					.byte	$e5
>5713	fc fd 03 54				.dword	$5403fdfc ; 42.007797122
>5717	e7					.byte	$e7
>5718	81 44 b4 cc				.dword	$ccb44481 ; -76.704170257
>571c	e8					.byte	$e8
>571d	f1 ef 9a 51				.dword	$519aeff1 ; 81.605223686
>5721	e8					.byte	$e8
>5722	94 f3 ae d2				.dword	$d2aef394 ; -41.341702104
>5726	e7					.byte	$e7
>5727	51 ed 87 64				.dword	$6487ed51 ; 6.2831853069
>572b	e4					.byte	$e4
>572c	00 00 00 00				.dword	$00000000 ; 0.0
>5730	00					.byte	$00
.5731					LogCoefficients:
>5731	04					.byte	4
>5732	bd 65 2b 6f				.dword	$6f2b65bd ; 0.43425594189
>5736	e0					.byte	$e0
>5737	b2 85 cd 49				.dword	$49cd85b2 ; 0.57658454124
>573b	e1					.byte	$e1
>573c	8b 49 1c 7b				.dword	$7b1c498b ; 0.96180075919
>5740	e1					.byte	$e1
>5741	90 1d 55 5c				.dword	$5c551d90 ; 2.8853900731
>5745	e3					.byte	$e3
>5746	00 00 00 c0				.dword	$c0000000 ; -0.5
>574a	e1					.byte	$e1
.574b					AtnCoefficients:
>574b	0c					.byte	12
>574c	ea de c1 d9				.dword	$d9c1deea ; -0.00068479391189
>5750	d7					.byte	$d7
>5751	7a 53 7a 4f				.dword	$4f7a537a ; 0.0048509421558
>5755	da					.byte	$da
>5756	08 58 fe c1				.dword	$c1fe5808 ; -0.016111701843
>575a	dc					.byte	$dc
>575b	e5 b3 0f 46				.dword	$460fb3e5 ; 0.034209638048
>575f	dd					.byte	$dd
>5760	e1 e5 29 ef				.dword	$ef29e5e1 ; -0.054279132761
>5764	dd					.byte	$dd
>5765	26 38 32 4a				.dword	$4a323826 ; 0.07245719654
>5769	de					.byte	$de
>576a	bd 28 f5 db				.dword	$dbf528bd ; -0.089802395378
>576e	de					.byte	$de
>576f	3f 44 98 71				.dword	$7198443f ; 0.11093241343
>5773	de					.byte	$de
>5774	9d 4c 22 c9				.dword	$c9224c9d ; -0.14283980767
>5778	df					.byte	$df
>5779	e3 48 66 66				.dword	$666648e3 ; 0.19999912049
>577d	df					.byte	$df
>577e	0a 55 55 d5				.dword	$d555550a ; -0.33333331568
>5782	e0					.byte	$e0
>5783	00 00 00 40				.dword	$40000000 ; 1.0
>5787	e2					.byte	$e2
>5788	00 00 00 00				.dword	$00000000 ; 0.0
>578c	00					.byte	$00
.578d					Const_Base:
.578d					Const_1Div2Pi:
>578d	b7 c1 7c 51				.dword	$517cc1b7 ; 0.15915494
>5791	df					.byte	$df
.5792					Const_PiDiv2:
>5792	51 ed 87 64				.dword	$6487ed51 ; 1.57079633
>5796	e2					.byte	$e2
.5797					Const_Log2_e:
>5797	95 1d 55 5c				.dword	$5c551d95 ; 1.44269504
>579b	e2					.byte	$e2
.579c					Const_sqrt_2:
>579c	9a 79 82 5a				.dword	$5a82799a ; 1.41421356
>57a0	e2					.byte	$e2
.57a1					Const_sqrt_half:
>57a1	9a 79 82 5a				.dword	$5a82799a ; 0.70710678
>57a5	e1					.byte	$e1
.57a6					Const_pi:
>57a6	51 ed 87 64				.dword	$6487ed51 ; 3.14159265
>57aa	e3					.byte	$e3
.57ab					Const_half:
>57ab	00 00 00 40				.dword	$40000000 ; 0.50000000
>57af	e1					.byte	$e1
.57b0					Const_ln_e:
>57b0	fc 0b b9 58				.dword	$58b90bfc ; 0.69314718
>57b4	e1					.byte	$e1
.57b5					FloatCosine:
.57b5	a9 05		lda #$05			lda 	#Const_PiDiv2-Const_Base
.57b7	20 9f 58	jsr $589f			jsr 	LoadConstant
.57ba	e8		inx				inx
.57bb	20 93 50	jsr $5093			jsr 	FloatAdd
.57be	4c 55 59	jmp $5955			jmp 	FloatSine
.57c1					FloatExponent:
.57c1	a9 0a		lda #$0a			lda 	#Const_Log2_e-Const_Base
.57c3	20 9f 58	jsr $589f			jsr 	LoadConstant
.57c6	e8		inx				inx
.57c7	20 2f 53	jsr $532f			jsr 	FloatMultiply
.57ca	20 0c 58	jsr $580c			jsr 	_UECopy01 				; copy 0 to 1, get integer part to 1
.57cd	e8		inx				inx
.57ce	20 aa 52	jsr $52aa			jsr 	FloatIntegerPart
.57d1	ca		dex				dex
.57d2	b5 47		lda $47,x			lda 	NSMantissa1+1,x
.57d4	15 53		ora $53,x			ora 	NSMantissa2+1,x
.57d6	15 5f		ora $5f,x			ora 	NSMantissa3+1,x
.57d8	d0 38		bne $5812			bne 	_UERangeError
.57da	b5 3b		lda $3b,x			lda 	NSMantissa0+1,x 		; push integer part on stack.
.57dc	c9 40		cmp #$40			cmp 	#64
.57de	b0 32		bcs $5812			bcs 	_UERangeError
.57e0	48		pha				pha
.57e1	b5 2e		lda $2e,x			lda 	NSStatus,x 				; push sign
.57e3	48		pha				pha
.57e4	20 4f 52	jsr $524f			jsr 	FloatFractionalPart		; copy 0 to 1, get fractional part to 0
.57e7	68		pla				pla
.57e8	10 14		bpl $57fe			bpl 	_UEPositive
.57ea	e8		inx				inx 							; 1-x
.57eb	a9 01		lda #$01			lda 	#1
.57ed	20 71 56	jsr $5671			jsr 	FloatSetByte
.57f0	ca		dex				dex
.57f1	20 31 56	jsr $5631			jsr 	FloatNegate
.57f4	e8		inx				inx
.57f5	20 93 50	jsr $5093			jsr 	FloatAdd
.57f8	68		pla				pla 							; integer part +1 and negated.
.57f9	1a		inc a				inc 	a
.57fa	49 ff		eor #$ff			eor 	#$FF
.57fc	1a		inc a				inc 	a
.57fd	48		pha				pha
.57fe					_UEPositive:
.57fe	20 14 58	jsr $5814			jsr 	CoreExponent
.5801	20 48 58	jsr $5848			jsr 	CompletePolynomial
.5804	68		pla				pla
.5805	18		clc				clc
.5806	75 6a		adc $6a,x			adc 	NSExponent,x
.5808	95 6a		sta $6a,x			sta 	NSExponent,x
.580a	18		clc				clc
.580b	60		rts				rts
.580c					_UECopy01:
.580c	8a		txa				txa
.580d	a8		tay				tay
.580e	c8		iny				iny
.580f	4c 53 58	jmp $5853			jmp 	CopyFloatXY
.5812					_UERangeError:
.5812	38		sec				sec
.5813	60		rts				rts
.5814					CoreExponent:
.5814	a9 e4		lda #$e4			lda 	#ExpCoefficients & $FF
.5816	a0 56		ldy #$56			ldy 	#ExpCoefficients >> 8
.5818	20 1c 58	jsr $581c			jsr 	CalculateHornerPolynomial
.581b	60		rts				rts
.581c					CalculateHornerPolynomial:
.581c	85 28		sta $28				sta 	zTemp0 						; save poly data from YA
.581e	84 29		sty $29				sty 	zTemp0+1
.5820	9c 47 04	stz $0447			stz 	coefficientCount 			; zero the count.
.5823	8e 48 04	stx $0448			stx 	xValueSlot 					; save xValue slot.
.5826	e8		inx				inx 								; set the count to zero.
.5827	20 6f 56	jsr $566f			jsr 	FloatSetZero
.582a					_CHPLoop:
.582a	8a		txa				txa 								; copy X-1 to X+1
.582b	a8		tay				tay
.582c	ca		dex				dex
.582d	c8		iny				iny
.582e	20 53 58	jsr $5853			jsr 	CopyFloatXY 				; e.g. stack is <current> <x>
.5831	e8		inx				inx
.5832	e8		inx				inx
.5833	20 2f 53	jsr $532f			jsr 	FloatMultiply 				; times current by X
.5836	e8		inx				inx
.5837	20 72 58	jsr $5872			jsr 	GetCoefficient 				; coefficient into X+1
.583a	20 93 50	jsr $5093			jsr 	FloatAdd 					; and add
.583d	ee 47 04	inc $0447			inc 	coefficientCount
.5840	ad 47 04	lda $0447			lda 	coefficientCount
.5843	d2 28		cmp ($28)			cmp 	(zTemp0)
.5845	d0 e3		bne $582a			bne 	_CHPLoop
.5847	60		rts				rts
.5848					CompletePolynomial:
.5848	20 2f 53	jsr $532f			jsr 	FloatMultiply
.584b	e8		inx				inx 								; get the last value
.584c	20 72 58	jsr $5872			jsr 	GetCoefficient
.584f	20 93 50	jsr $5093			jsr 	FloatAdd 					; and add it
.5852	60		rts				rts
.5853					CopyFloatXY:
.5853	b5 6a		lda $6a,x			lda 	NSExponent,x
.5855	99 6a 00	sta $006a,y			sta 	NSExponent,y
.5858	b5 2e		lda $2e,x			lda 	NSStatus,x
.585a	99 2e 00	sta $002e,y			sta 	NSStatus,y
.585d	b5 3a		lda $3a,x			lda 	NSMantissa0,x
.585f	99 3a 00	sta $003a,y			sta 	NSMantissa0,y
.5862	b5 46		lda $46,x			lda 	NSMantissa1,x
.5864	99 46 00	sta $0046,y			sta 	NSMantissa1,y
.5867	b5 52		lda $52,x			lda 	NSMantissa2,x
.5869	99 52 00	sta $0052,y			sta 	NSMantissa2,y
.586c	b5 5e		lda $5e,x			lda 	NSMantissa3,x
.586e	99 5e 00	sta $005e,y			sta 	NSMantissa3,y
.5871	60		rts				rts
.5872					GetCoefficient:
.5872	5a		phy				phy
.5873	ad 47 04	lda $0447			lda 	coefficientCount 			; 5 per block
.5876	0a		asl a				asl 	a
.5877	0a		asl a				asl 	a
.5878	38		sec				sec 								; +1 for count
.5879	6d 47 04	adc $0447			adc 	coefficientCount
.587c	a8		tay				tay
.587d	b1 28		lda ($28),y			lda 	(zTemp0),y 					; copy mantissa
.587f	95 3a		sta $3a,x			sta 	NSMantissa0,x
.5881	c8		iny				iny
.5882	b1 28		lda ($28),y			lda 	(zTemp0),y
.5884	95 46		sta $46,x			sta 	NSMantissa1,x
.5886	c8		iny				iny
.5887	b1 28		lda ($28),y			lda 	(zTemp0),y
.5889	95 52		sta $52,x			sta 	NSMantissa2,x
.588b	c8		iny				iny
.588c	b1 28		lda ($28),y			lda 	(zTemp0),y
.588e	48		pha				pha
.588f	29 7f		and #$7f			and 	#$7F 						; clear sign bit.
.5891	95 5e		sta $5e,x			sta 	NSMantissa3,x
.5893	c8		iny				iny
.5894	68		pla				pla
.5895	29 80		and #$80			and 	#$80
.5897	95 2e		sta $2e,x			sta 	NSStatus,x 					; put in status
.5899	b1 28		lda ($28),y			lda 	(zTemp0),y
.589b	95 6a		sta $6a,x			sta 	NSExponent,x
.589d	7a		ply				ply
.589e	60		rts				rts
.0447					coefficientCount:
>0447							.fill 	1
.0448					xValueSlot:
>0448							.fill 	1
.589f					LoadConstant:
.589f	5a		phy				phy
.58a0	a8		tay				tay
.58a1	b9 8d 57	lda $578d,y			lda 	Const_Base+0,y
.58a4	95 3b		sta $3b,x			sta 	NSMantissa0+1,x
.58a6	b9 8e 57	lda $578e,y			lda 	Const_Base+1,y
.58a9	95 47		sta $47,x			sta 	NSMantissa1+1,x
.58ab	b9 8f 57	lda $578f,y			lda 	Const_Base+2,y
.58ae	95 53		sta $53,x			sta 	NSMantissa2+1,x
.58b0	b9 90 57	lda $5790,y			lda 	Const_Base+3,y
.58b3	48		pha				pha
.58b4	29 7f		and #$7f			and 	#$7F
.58b6	95 5f		sta $5f,x			sta 	NSMantissa3+1,x
.58b8	68		pla				pla
.58b9	29 80		and #$80			and 	#$80
.58bb	95 2f		sta $2f,x			sta 	NSStatus+1,x
.58bd	b9 91 57	lda $5791,y			lda 	Const_Base+4,y
.58c0	95 6b		sta $6b,x			sta 	NSExponent+1,x
.58c2	7a		ply				ply
.58c3	60		rts				rts
.58c4					FloatLogarithm:
.58c4	b5 2e		lda $2e,x			lda 	NSStatus,x 					; check > 0
.58c6	30 5f		bmi $5927			bmi 	_ULRange
.58c8	20 91 56	jsr $5691			jsr 	FloatIsZero
.58cb	f0 5a		beq $5927			beq 	_ULRange
.58cd	20 c4 53	jsr $53c4			jsr 	FloatNormalise 				; put into FP mode.
.58d0	b5 6a		lda $6a,x			lda 	NSExponent,x 				; get power
.58d2	48		pha				pha
.58d3	a9 e1		lda #$e1			lda 	#(-31) & $FF 				; force into range 0.5 -> 1
.58d5	95 6a		sta $6a,x			sta 	NSExponent,x
.58d7	a9 14		lda #$14			lda 	#Const_sqrt_half-Const_Base
.58d9	20 9f 58	jsr $589f			jsr 	LoadConstant
.58dc	e8		inx				inx
.58dd	20 93 50	jsr $5093			jsr 	FloatAdd
.58e0	8a		txa				txa 								; divide into sqrt 2.0
.58e1	a8		tay				tay
.58e2	c8		iny				iny
.58e3	20 53 58	jsr $5853			jsr 	CopyFloatXY
.58e6	ca		dex				dex
.58e7	a9 0f		lda #$0f			lda 	#Const_sqrt_2-Const_Base
.58e9	20 9f 58	jsr $589f			jsr 	LoadConstant
.58ec	e8		inx				inx
.58ed	e8		inx				inx
.58ee	20 b8 51	jsr $51b8			jsr 	FloatDivide 				; if zero, error.
.58f1	b0 33		bcs $5926			bcs 	_ULRangePla
.58f3	20 31 56	jsr $5631			jsr 	FloatNegate 				; subtract from 1
.58f6	e8		inx				inx
.58f7	a9 01		lda #$01			lda 	#1
.58f9	20 71 56	jsr $5671			jsr 	FloatSetByte
.58fc	20 93 50	jsr $5093			jsr 	FloatAdd
.58ff	20 29 59	jsr $5929			jsr 	CoreLog
.5902	20 48 58	jsr $5848			jsr 	CompletePolynomial
.5905	68		pla				pla 								; add exponent
.5906	18		clc				clc
.5907	69 1f		adc #$1f			adc 	#31 						; fix up
.5909	48		pha				pha
.590a	10 03		bpl $590f			bpl 	_LogNotNeg
.590c	49 ff		eor #$ff			eor 	#$FF
.590e	1a		inc a				inc 	a
.590f					_LogNotNeg:
.590f	e8		inx				inx 								; set byte and sign.
.5910	20 71 56	jsr $5671			jsr 	FloatSetByte
.5913	68		pla				pla
.5914	29 80		and #$80			and 	#$80
.5916	95 2e		sta $2e,x			sta 	NSStatus,x
.5918	20 93 50	jsr $5093			jsr 	FloatAdd
.591b	a9 23		lda #$23			lda 	#Const_ln_e-Const_Base
.591d	20 9f 58	jsr $589f			jsr 	LoadConstant
.5920	e8		inx				inx
.5921	20 2f 53	jsr $532f			jsr 	FloatMultiply
.5924	18		clc				clc
.5925	60		rts				rts
.5926					_ULRangePla:
.5926	68		pla				pla
.5927					_ULRange:
.5927	38		sec				sec
.5928	60		rts				rts
.5929					CoreLog:
.5929	a9 31		lda #$31			lda 	#LogCoefficients & $FF
.592b	a0 57		ldy #$57			ldy 	#LogCoefficients >> 8
.592d	4c 9c 59	jmp $599c			jmp 	CorePolySquared
.5930					FloatPI:
.5930	a9 19		lda #$19			lda 	#Const_pi-Const_Base
.5932	20 9f 58	jsr $589f			jsr 	LoadConstant
.5935	e8		inx				inx
.5936	18		clc				clc
.5937	60		rts				rts
.5938					FloatPower:
.5938	ca		dex				dex
.5939	8a		txa				txa 							; copy 0 to 2, so we can process it
.593a	a8		tay				tay
.593b	c8		iny				iny
.593c	c8		iny				iny
.593d	20 53 58	jsr $5853			jsr 	CopyFloatXY
.5940	e8		inx				inx 							; 2 = Log(0)
.5941	e8		inx				inx
.5942	20 c4 58	jsr $58c4			jsr 	FloatLogarithm
.5945	b0 0d		bcs $5954			bcs 	_FPWExit
.5947	20 2f 53	jsr $532f			jsr 	FloatMultiply			; Multiply by original 1, into 1.
.594a	8a		txa				txa 							; copy to slot 0
.594b	a8		tay				tay
.594c	88		dey				dey
.594d	20 53 58	jsr $5853			jsr 	CopyFloatXY
.5950	ca		dex				dex  							; Exponent code.
.5951	20 c1 57	jsr $57c1			jsr 	FloatExponent
.5954					_FPWExit:
.5954	60		rts				rts
.5955					FloatSine:
.5955	b5 2e		lda $2e,x			lda 	NSStatus,x 					; save sign
.5957	48		pha				pha
.5958	74 2e		stz $2e,x			stz 	NSStatus,x 					; make +ve
.595a	a9 00		lda #$00			lda 	#Const_1Div2Pi-Const_Base
.595c	20 9f 58	jsr $589f			jsr 	LoadConstant
.595f	e8		inx				inx
.5960	20 2f 53	jsr $532f			jsr 	FloatMultiply
.5963	20 4f 52	jsr $524f			jsr 	FloatFractionalPart 		; take the fractional part
.5966	b5 6a		lda $6a,x			lda 	NSExponent,x 				; check exponent
.5968	c9 e0		cmp #$e0			cmp 	#$E0 						; < $E0 exponent : 0-0.25
.596a	90 1f		bcc $598b			bcc 	_USProcessExit
.596c	f0 06		beq $5974			beq 	_USSubtractFromHalf 		; = $E0 exponent : 0.25-0.5
.596e	b5 5e		lda $5e,x			lda 	NSMantissa3,x 				; if > 0.75 which is $60000000:$E1
.5970	c9 60		cmp #$60			cmp 	#$60
.5972	b0 0e		bcs $5982			bcs 	_USSubtractOne
.5974					_USSubtractFromHalf:
.5974	a9 1e		lda #$1e			lda 	#Const_half-Const_Base
.5976	20 9f 58	jsr $589f			jsr 	LoadConstant
.5979	e8		inx				inx
.597a	20 8d 50	jsr $508d			jsr 	FloatSubtract
.597d	20 31 56	jsr $5631			jsr 	FloatNegate 				; then negate it
.5980	80 09		bra $598b			bra 	_USProcessExit 				; and exit
.5982					_USSubtractOne:
.5982	e8		inx				inx
.5983	a9 01		lda #$01			lda 	#1
.5985	20 71 56	jsr $5671			jsr 	FloatSetByte
.5988	20 8d 50	jsr $508d			jsr 	FloatSubtract
.598b					_USProcessExit:
.598b	20 98 59	jsr $5998			jsr 	CoreSine
.598e	20 48 58	jsr $5848			jsr 	CompletePolynomial
.5991	68		pla				pla 								; restore sign and apply
.5992	55 2e		eor $2e,x			eor 	NSStatus,x
.5994	95 2e		sta $2e,x			sta 	NSStatus,x
.5996	18		clc				clc
.5997	60		rts				rts
.5998					CoreSine:
.5998	a9 0d		lda #$0d			lda 	#SinCoefficients & $FF
.599a	a0 57		ldy #$57			ldy 	#SinCoefficients >> 8
.599c					CorePolySquared:
.599c	48		pha				pha 								; save coefficient table
.599d	5a		phy				phy
.599e	8a		txa				txa 								; copy X to +1, +2
.599f	a8		tay				tay
.59a0	c8		iny				iny
.59a1	20 53 58	jsr $5853			jsr 	CopyFloatXY
.59a4	c8		iny				iny
.59a5	20 53 58	jsr $5853			jsr 	CopyFloatXY
.59a8	e8		inx				inx 								; point to the pair and put x^2 on stack
.59a9	e8		inx				inx
.59aa	20 2f 53	jsr $532f			jsr 	FloatMultiply
.59ad	7a		ply				ply 								; coefficient table back.
.59ae	68		pla				pla
.59af	20 1c 58	jsr $581c			jsr 	CalculateHornerPolynomial
.59b2	8a		txa				txa 								; copy back to slot #1
.59b3	a8		tay				tay
.59b4	88		dey				dey
.59b5	20 53 58	jsr $5853			jsr	 	CopyFloatXY
.59b8	ca		dex				dex 								; point at result
.59b9	60		rts				rts
.59ba					FloatSquareRoot:
.59ba	20 c4 58	jsr $58c4			jsr 	FloatLogarithm
.59bd	b0 06		bcs $59c5			bcs 	_FSQExit
.59bf	d6 6a		dec $6a,x			dec 	NSExponent,x
.59c1	20 c1 57	jsr $57c1			jsr 	FloatExponent
.59c4	18		clc				clc
.59c5					_FSQExit:
.59c5	60		rts				rts
.59c6					FloatTangent:
.59c6	da		phx				phx
.59c7	8a		txa				txa 								; sin -> +1
.59c8	a8		tay				tay
.59c9	c8		iny				iny
.59ca	20 53 58	jsr $5853			jsr 	CopyFloatXY
.59cd	e8		inx				inx
.59ce	20 55 59	jsr $5955			jsr 	FloatSine
.59d1	ca		dex				dex
.59d2	8a		txa				txa 								; cos -> +2
.59d3	a8		tay				tay
.59d4	c8		iny				iny
.59d5	c8		iny				iny
.59d6	20 53 58	jsr $5853			jsr 	CopyFloatXY
.59d9	e8		inx				inx
.59da	e8		inx				inx
.59db	20 b5 57	jsr $57b5			jsr 	FloatCosine
.59de	20 b8 51	jsr $51b8			jsr 	FloatDivide 				; calculate sin/cos
.59e1	b0 07		bcs $59ea			bcs 	_FTExit 					; divide by zero
.59e3	8a		txa				txa 								; copy result down.
.59e4	a8		tay				tay
.59e5	88		dey				dey
.59e6	20 53 58	jsr $5853			jsr 	CopyFloatXY
.59e9	18		clc				clc
.59ea					_FTExit:
.59ea	fa		plx				plx
.59eb	60		rts				rts

;******  End of listing
