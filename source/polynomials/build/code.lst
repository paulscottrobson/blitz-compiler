
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass -c -Wall -o build/code.prg -L build/code.lst -l build/code.lbl testing/testing.asm /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library /home/paulr/Projects/blitz-compiler/documents/../bin/polynomials.library /home/paulr/Projects/blitz-compiler/documents/../bin/common.library
; Sat Oct  7 08:19:32 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: testing/testing.asm

.1000					WrapperBoot:
.1000	a2 ff		ldx #$ff			ldx 	#255
.1002	20 0b 10	jsr $100b			jsr 	TestScript
.1005	86 70		stx $70				stx 	zTemp0
.1007	4c ff ff	jmp $ffff			jmp 	$FFFF
.100a					ErrorHandler:
>100a	db						.byte 	$DB 						; causes a break in the emulator
.100b					TestScript:

;******  Processing file: testing/generated/testcode.dat

.100b	20 54 50	jsr $5054		jsr	FPPushConstant	; -68.89665506
>100e	30 8b e5 44				.dword	$44e58b30
>1012	e8 80					.byte	$e8,$80
.1014	20 2b 56	jsr $562b		jsr	FloatNegate
.1017	20 54 50	jsr $5054		jsr	FPPushConstant	; 68.89665506
>101a	30 8b e5 44				.dword	$44e58b30
>101e	e8 00					.byte	$e8,$00
.1020	20 4e 51	jsr $514e		jsr	FloatCompare
.1023	20 18 51	jsr $5118		jsr	CompareEqual
.1026	20 44 50	jsr $5044		jsr	FPAssertCheck
.1029	20 54 50	jsr $5054		jsr	FPPushConstant	; -68.89665506
>102c	30 8b e5 44				.dword	$44e58b30
>1030	e8 80					.byte	$e8,$80
.1032	20 a4 52	jsr $52a4		jsr	FloatIntegerPart
.1035	20 54 50	jsr $5054		jsr	FPPushConstant	; -68
>1038	44 00 00 00				.dword	$00000044
>103c	00 80					.byte	$00,$80
.103e	20 4e 51	jsr $514e		jsr	FloatCompare
.1041	20 18 51	jsr $5118		jsr	CompareEqual
.1044	20 44 50	jsr $5044		jsr	FPAssertCheck
.1047	20 54 50	jsr $5054		jsr	FPPushConstant	; -1.5
>104a	00 00 00 60				.dword	$60000000
>104e	e2 80					.byte	$e2,$80
.1050	20 4f 59	jsr $594f		jsr	FloatSine
.1053	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.99749499
>1056	74 ea ad 7f				.dword	$7fadea74
>105a	e1 80					.byte	$e1,$80
.105c	20 87 50	jsr $5087		jsr	FloatSubtract
.105f	20 51 50	jsr $5051		jsr	FPAbs
.1062	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>1065	4c 37 89 41				.dword	$4189374c
>1069	d8 00					.byte	$d8,$00
.106b	20 4e 51	jsr $514e		jsr	FloatCompare
.106e	20 2e 51	jsr $512e		jsr	CompareLess
.1071	20 44 50	jsr $5044		jsr	FPAssertCheck
.1074	20 54 50	jsr $5054		jsr	FPPushConstant	; -1.5
>1077	00 00 00 60				.dword	$60000000
>107b	e2 80					.byte	$e2,$80
.107d	20 af 57	jsr $57af		jsr	FloatCosine
.1080	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.0707372
>1083	22 55 6f 48				.dword	$486f5522
>1087	de 00					.byte	$de,$00
.1089	20 87 50	jsr $5087		jsr	FloatSubtract
.108c	20 51 50	jsr $5051		jsr	FPAbs
.108f	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>1092	4c 37 89 41				.dword	$4189374c
>1096	d8 00					.byte	$d8,$00
.1098	20 4e 51	jsr $514e		jsr	FloatCompare
.109b	20 2e 51	jsr $512e		jsr	CompareLess
.109e	20 44 50	jsr $5044		jsr	FPAssertCheck
.10a1	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.25
>10a4	00 00 00 40				.dword	$40000000
>10a8	e0 00					.byte	$e0,$00
.10aa	20 c0 59	jsr $59c0		jsr	FloatTangent
.10ad	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.25534192
>10b0	8c 16 5e 41				.dword	$415e168c
>10b4	e0 00					.byte	$e0,$00
.10b6	20 87 50	jsr $5087		jsr	FloatSubtract
.10b9	20 51 50	jsr $5051		jsr	FPAbs
.10bc	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>10bf	4c 37 89 41				.dword	$4189374c
>10c3	d8 00					.byte	$d8,$00
.10c5	20 4e 51	jsr $514e		jsr	FloatCompare
.10c8	20 44 50	jsr $5044		jsr	FPAssertCheck
.10cb	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.511
>10ce	b0 72 68 41				.dword	$416872b0
>10d2	e1 00					.byte	$e1,$00
.10d4	20 94 56	jsr $5694		jsr	FloatArcTan
.10d7	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.47240883
>10da	fb c8 ef 78				.dword	$78efc8fb
>10de	e0 00					.byte	$e0,$00
.10e0	20 87 50	jsr $5087		jsr	FloatSubtract
.10e3	20 51 50	jsr $5051		jsr	FPAbs
.10e6	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>10e9	4c 37 89 41				.dword	$4189374c
>10ed	d8 00					.byte	$d8,$00
.10ef	20 4e 51	jsr $514e		jsr	FloatCompare
.10f2	20 44 50	jsr $5044		jsr	FPAssertCheck
.10f5	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.03
>10f8	1f 85 eb 41				.dword	$41eb851f
>10fc	e2 00					.byte	$e2,$00
.10fe	20 bb 57	jsr $57bb		jsr	FloatExponent
.1101	20 54 50	jsr $5054		jsr	FPPushConstant	; 2.80106583
>1104	cf 54 a2 59				.dword	$59a254cf
>1108	e3 00					.byte	$e3,$00
.110a	20 87 50	jsr $5087		jsr	FloatSubtract
.110d	20 51 50	jsr $5051		jsr	FPAbs
.1110	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>1113	4c 37 89 41				.dword	$4189374c
>1117	d8 00					.byte	$d8,$00
.1119	20 4e 51	jsr $514e		jsr	FloatCompare
.111c	20 44 50	jsr $5044		jsr	FPAssertCheck
.111f	20 54 50	jsr $5054		jsr	FPPushConstant	; 31.56
>1122	a4 70 3d 7e				.dword	$7e3d70a4
>1126	e6 00					.byte	$e6,$00
.1128	20 be 58	jsr $58be		jsr	FloatLogarithm
.112b	20 54 50	jsr $5054		jsr	FPPushConstant	; 3.4518905
>112e	11 e3 75 6e				.dword	$6e75e311
>1132	e3 00					.byte	$e3,$00
.1134	20 87 50	jsr $5087		jsr	FloatSubtract
.1137	20 51 50	jsr $5051		jsr	FPAbs
.113a	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>113d	4c 37 89 41				.dword	$4189374c
>1141	d8 00					.byte	$d8,$00
.1143	20 4e 51	jsr $514e		jsr	FloatCompare
.1146	20 44 50	jsr $5044		jsr	FPAssertCheck
.1149	20 54 50	jsr $5054		jsr	FPPushConstant	; 6.28
>114c	48 e1 7a 64				.dword	$647ae148
>1150	e4 00					.byte	$e4,$00
.1152	20 b4 59	jsr $59b4		jsr	FloatSquareRoot
.1155	20 54 50	jsr $5054		jsr	FPPushConstant	; 2.50599282
>1158	db 17 31 50				.dword	$503117db
>115c	e3 00					.byte	$e3,$00
.115e	20 87 50	jsr $5087		jsr	FloatSubtract
.1161	20 51 50	jsr $5051		jsr	FPAbs
.1164	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>1167	4c 37 89 41				.dword	$4189374c
>116b	d8 00					.byte	$d8,$00
.116d	20 4e 51	jsr $514e		jsr	FloatCompare
.1170	20 44 50	jsr $5044		jsr	FPAssertCheck
.1173	20 54 50	jsr $5054		jsr	FPPushConstant	; 3.00333333
>1176	80 4e 1b 60				.dword	$601b4e80
>117a	e3 00					.byte	$e3,$00
.117c	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.0
>117f	01 00 00 00				.dword	$00000001
>1183	00 00					.byte	$00,$00
.1185	20 32 59	jsr $5932		jsr	FloatPower
.1188	20 54 50	jsr $5054		jsr	FPPushConstant	; 3.00333333
>118b	80 4e 1b 60				.dword	$601b4e80
>118f	e3 00					.byte	$e3,$00
.1191	20 87 50	jsr $5087		jsr	FloatSubtract
.1194	20 51 50	jsr $5051		jsr	FPAbs
.1197	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.01
>119a	1f 85 eb 51				.dword	$51eb851f
>119e	db 00					.byte	$db,$00
.11a0	20 4e 51	jsr $514e		jsr	FloatCompare
.11a3	20 44 50	jsr $5044		jsr	FPAssertCheck
.11a6	20 54 50	jsr $5054		jsr	FPPushConstant	; 11.36114036
>11a9	8f 9d e3 5a				.dword	$5ae39d8f
>11ad	e5 00					.byte	$e5,$00
.11af	20 2b 56	jsr $562b		jsr	FloatNegate
.11b2	20 54 50	jsr $5054		jsr	FPPushConstant	; -11.36114036
>11b5	8f 9d e3 5a				.dword	$5ae39d8f
>11b9	e5 80					.byte	$e5,$80
.11bb	20 4e 51	jsr $514e		jsr	FloatCompare
.11be	20 18 51	jsr $5118		jsr	CompareEqual
.11c1	20 44 50	jsr $5044		jsr	FPAssertCheck
.11c4	20 54 50	jsr $5054		jsr	FPPushConstant	; 11.36114036
>11c7	8f 9d e3 5a				.dword	$5ae39d8f
>11cb	e5 00					.byte	$e5,$00
.11cd	20 a4 52	jsr $52a4		jsr	FloatIntegerPart
.11d0	20 54 50	jsr $5054		jsr	FPPushConstant	; 11
>11d3	0b 00 00 00				.dword	$0000000b
>11d7	00 00					.byte	$00,$00
.11d9	20 4e 51	jsr $514e		jsr	FloatCompare
.11dc	20 18 51	jsr $5118		jsr	CompareEqual
.11df	20 44 50	jsr $5044		jsr	FPAssertCheck
.11e2	20 54 50	jsr $5054		jsr	FPPushConstant	; 5.19
>11e5	71 3d 0a 53				.dword	$530a3d71
>11e9	e4 00					.byte	$e4,$00
.11eb	20 4f 59	jsr $594f		jsr	FloatSine
.11ee	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.88809557
>11f1	9a 1d ad 71				.dword	$71ad1d9a
>11f5	e1 80					.byte	$e1,$80
.11f7	20 87 50	jsr $5087		jsr	FloatSubtract
.11fa	20 51 50	jsr $5051		jsr	FPAbs
.11fd	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>1200	4c 37 89 41				.dword	$4189374c
>1204	d8 00					.byte	$d8,$00
.1206	20 4e 51	jsr $514e		jsr	FloatCompare
.1209	20 2e 51	jsr $512e		jsr	CompareLess
.120c	20 44 50	jsr $5044		jsr	FPAssertCheck
.120f	20 54 50	jsr $5054		jsr	FPPushConstant	; 5.19
>1212	71 3d 0a 53				.dword	$530a3d71
>1216	e4 00					.byte	$e4,$00
.1218	20 af 57	jsr $57af		jsr	FloatCosine
.121b	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.45965885
>121e	d0 33 ac 75				.dword	$75ac33d0
>1222	e0 00					.byte	$e0,$00
.1224	20 87 50	jsr $5087		jsr	FloatSubtract
.1227	20 51 50	jsr $5051		jsr	FPAbs
.122a	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>122d	4c 37 89 41				.dword	$4189374c
>1231	d8 00					.byte	$d8,$00
.1233	20 4e 51	jsr $514e		jsr	FloatCompare
.1236	20 2e 51	jsr $512e		jsr	CompareLess
.1239	20 44 50	jsr $5044		jsr	FPAssertCheck
.123c	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.12
>123f	ae 47 e1 7a				.dword	$7ae147ae
>1243	de 00					.byte	$de,$00
.1245	20 c0 59	jsr $59c0		jsr	FloatTangent
.1248	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.12057934
>124b	87 26 79 7b				.dword	$7b792687
>124f	de 00					.byte	$de,$00
.1251	20 87 50	jsr $5087		jsr	FloatSubtract
.1254	20 51 50	jsr $5051		jsr	FPAbs
.1257	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>125a	4c 37 89 41				.dword	$4189374c
>125e	d8 00					.byte	$d8,$00
.1260	20 4e 51	jsr $514e		jsr	FloatCompare
.1263	20 44 50	jsr $5044		jsr	FPAssertCheck
.1266	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.776
>1269	cf f7 53 63				.dword	$6353f7cf
>126d	e1 00					.byte	$e1,$00
.126f	20 94 56	jsr $5694		jsr	FloatArcTan
.1272	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.65993452
>1275	fe bb 78 54				.dword	$5478bbfe
>1279	e1 00					.byte	$e1,$00
.127b	20 87 50	jsr $5087		jsr	FloatSubtract
.127e	20 51 50	jsr $5051		jsr	FPAbs
.1281	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>1284	4c 37 89 41				.dword	$4189374c
>1288	d8 00					.byte	$d8,$00
.128a	20 4e 51	jsr $514e		jsr	FloatCompare
.128d	20 44 50	jsr $5044		jsr	FPAssertCheck
.1290	20 54 50	jsr $5054		jsr	FPPushConstant	; -1.43
>1293	b8 1e 85 5b				.dword	$5b851eb8
>1297	e2 80					.byte	$e2,$80
.1299	20 bb 57	jsr $57bb		jsr	FloatExponent
.129c	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.23930892
>129f	e2 b2 86 7a				.dword	$7a86b2e2
>12a3	df 00					.byte	$df,$00
.12a5	20 87 50	jsr $5087		jsr	FloatSubtract
.12a8	20 51 50	jsr $5051		jsr	FPAbs
.12ab	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>12ae	4c 37 89 41				.dword	$4189374c
>12b2	d8 00					.byte	$d8,$00
.12b4	20 4e 51	jsr $514e		jsr	FloatCompare
.12b7	20 44 50	jsr $5044		jsr	FPAssertCheck
.12ba	20 54 50	jsr $5054		jsr	FPPushConstant	; 17.82
>12bd	14 ae 47 47				.dword	$4747ae14
>12c1	e6 00					.byte	$e6,$00
.12c3	20 be 58	jsr $58be		jsr	FloatLogarithm
.12c6	20 54 50	jsr $5054		jsr	FPPushConstant	; 2.88032142
>12c9	d4 97 2b 5c				.dword	$5c2b97d4
>12cd	e3 00					.byte	$e3,$00
.12cf	20 87 50	jsr $5087		jsr	FloatSubtract
.12d2	20 51 50	jsr $5051		jsr	FPAbs
.12d5	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>12d8	4c 37 89 41				.dword	$4189374c
>12dc	d8 00					.byte	$d8,$00
.12de	20 4e 51	jsr $514e		jsr	FloatCompare
.12e1	20 44 50	jsr $5044		jsr	FPAssertCheck
.12e4	20 54 50	jsr $5054		jsr	FPPushConstant	; 6.4
>12e7	66 66 66 66				.dword	$66666666
>12eb	e4 00					.byte	$e4,$00
.12ed	20 b4 59	jsr $59b4		jsr	FloatSquareRoot
.12f0	20 54 50	jsr $5054		jsr	FPPushConstant	; 2.52982213
>12f3	8a 4d f4 50				.dword	$50f44d8a
>12f7	e3 00					.byte	$e3,$00
.12f9	20 87 50	jsr $5087		jsr	FloatSubtract
.12fc	20 51 50	jsr $5051		jsr	FPAbs
.12ff	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>1302	4c 37 89 41				.dword	$4189374c
>1306	d8 00					.byte	$d8,$00
.1308	20 4e 51	jsr $514e		jsr	FloatCompare
.130b	20 44 50	jsr $5044		jsr	FPAssertCheck
.130e	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.4
>1311	66 66 66 66				.dword	$66666666
>1315	e0 00					.byte	$e0,$00
.1317	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.3
>131a	33 33 33 53				.dword	$53333333
>131e	e2 00					.byte	$e2,$00
.1320	20 32 59	jsr $5932		jsr	FloatPower
.1323	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.30386312
>1326	33 f9 c9 4d				.dword	$4dc9f933
>132a	e0 00					.byte	$e0,$00
.132c	20 87 50	jsr $5087		jsr	FloatSubtract
.132f	20 51 50	jsr $5051		jsr	FPAbs
.1332	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.01
>1335	1f 85 eb 51				.dword	$51eb851f
>1339	db 00					.byte	$db,$00
.133b	20 4e 51	jsr $514e		jsr	FloatCompare
.133e	20 44 50	jsr $5044		jsr	FPAssertCheck
.1341	20 54 50	jsr $5054		jsr	FPPushConstant	; -18.52822548
>1344	24 e7 1c 4a				.dword	$4a1ce724
>1348	e6 80					.byte	$e6,$80
.134a	20 2b 56	jsr $562b		jsr	FloatNegate
.134d	20 54 50	jsr $5054		jsr	FPPushConstant	; 18.52822548
>1350	24 e7 1c 4a				.dword	$4a1ce724
>1354	e6 00					.byte	$e6,$00
.1356	20 4e 51	jsr $514e		jsr	FloatCompare
.1359	20 18 51	jsr $5118		jsr	CompareEqual
.135c	20 44 50	jsr $5044		jsr	FPAssertCheck
.135f	20 54 50	jsr $5054		jsr	FPPushConstant	; -18.52822548
>1362	24 e7 1c 4a				.dword	$4a1ce724
>1366	e6 80					.byte	$e6,$80
.1368	20 a4 52	jsr $52a4		jsr	FloatIntegerPart
.136b	20 54 50	jsr $5054		jsr	FPPushConstant	; -18
>136e	12 00 00 00				.dword	$00000012
>1372	00 80					.byte	$00,$80
.1374	20 4e 51	jsr $514e		jsr	FloatCompare
.1377	20 18 51	jsr $5118		jsr	CompareEqual
.137a	20 44 50	jsr $5044		jsr	FPAssertCheck
.137d	20 54 50	jsr $5054		jsr	FPPushConstant	; -3.51
>1380	85 eb 51 70				.dword	$7051eb85
>1384	e3 80					.byte	$e3,$80
.1386	20 4f 59	jsr $594f		jsr	FloatSine
.1389	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.3601301
>138c	7a 7c 31 5c				.dword	$5c317c7a
>1390	e0 00					.byte	$e0,$00
.1392	20 87 50	jsr $5087		jsr	FloatSubtract
.1395	20 51 50	jsr $5051		jsr	FPAbs
.1398	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>139b	4c 37 89 41				.dword	$4189374c
>139f	d8 00					.byte	$d8,$00
.13a1	20 4e 51	jsr $514e		jsr	FloatCompare
.13a4	20 2e 51	jsr $512e		jsr	CompareLess
.13a7	20 44 50	jsr $5044		jsr	FPAssertCheck
.13aa	20 54 50	jsr $5054		jsr	FPPushConstant	; -3.51
>13ad	85 eb 51 70				.dword	$7051eb85
>13b1	e3 80					.byte	$e3,$80
.13b3	20 af 57	jsr $57af		jsr	FloatCosine
.13b6	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.93290209
>13b9	ef 55 69 77				.dword	$776955ef
>13bd	e1 80					.byte	$e1,$80
.13bf	20 87 50	jsr $5087		jsr	FloatSubtract
.13c2	20 51 50	jsr $5051		jsr	FPAbs
.13c5	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>13c8	4c 37 89 41				.dword	$4189374c
>13cc	d8 00					.byte	$d8,$00
.13ce	20 4e 51	jsr $514e		jsr	FloatCompare
.13d1	20 2e 51	jsr $512e		jsr	CompareLess
.13d4	20 44 50	jsr $5044		jsr	FPAssertCheck
.13d7	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.39
>13da	3d 0a d7 63				.dword	$63d70a3d
>13de	e0 00					.byte	$e0,$00
.13e0	20 c0 59	jsr $59c0		jsr	FloatTangent
.13e3	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.41105492
>13e6	2e e5 3a 69				.dword	$693ae52e
>13ea	e0 00					.byte	$e0,$00
.13ec	20 87 50	jsr $5087		jsr	FloatSubtract
.13ef	20 51 50	jsr $5051		jsr	FPAbs
.13f2	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>13f5	4c 37 89 41				.dword	$4189374c
>13f9	d8 00					.byte	$d8,$00
.13fb	20 4e 51	jsr $514e		jsr	FloatCompare
.13fe	20 44 50	jsr $5044		jsr	FPAssertCheck
.1401	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.182
>1404	54 e3 a5 4b				.dword	$4ba5e354
>1408	e2 00					.byte	$e2,$00
.140a	20 94 56	jsr $5694		jsr	FloatArcTan
.140d	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.86861525
>1410	d6 c8 2e 6f				.dword	$6f2ec8d6
>1414	e1 00					.byte	$e1,$00
.1416	20 87 50	jsr $5087		jsr	FloatSubtract
.1419	20 51 50	jsr $5051		jsr	FPAbs
.141c	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>141f	4c 37 89 41				.dword	$4189374c
>1423	d8 00					.byte	$d8,$00
.1425	20 4e 51	jsr $514e		jsr	FloatCompare
.1428	20 44 50	jsr $5044		jsr	FPAssertCheck
.142b	20 54 50	jsr $5054		jsr	FPPushConstant	; -1.61
>142e	71 3d 0a 67				.dword	$670a3d71
>1432	e2 80					.byte	$e2,$80
.1434	20 bb 57	jsr $57bb		jsr	FloatExponent
.1437	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.19988761
>143a	38 ab 57 66				.dword	$6657ab38
>143e	df 00					.byte	$df,$00
.1440	20 87 50	jsr $5087		jsr	FloatSubtract
.1443	20 51 50	jsr $5051		jsr	FPAbs
.1446	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>1449	4c 37 89 41				.dword	$4189374c
>144d	d8 00					.byte	$d8,$00
.144f	20 4e 51	jsr $514e		jsr	FloatCompare
.1452	20 44 50	jsr $5044		jsr	FPAssertCheck
.1455	20 54 50	jsr $5054		jsr	FPPushConstant	; 56.95
>1458	66 66 e6 71				.dword	$71e66666
>145c	e7 00					.byte	$e7,$00
.145e	20 be 58	jsr $58be		jsr	FloatLogarithm
.1461	20 54 50	jsr $5054		jsr	FPPushConstant	; 4.04217369
>1464	52 be ac 40				.dword	$40acbe52
>1468	e4 00					.byte	$e4,$00
.146a	20 87 50	jsr $5087		jsr	FloatSubtract
.146d	20 51 50	jsr $5051		jsr	FPAbs
.1470	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>1473	4c 37 89 41				.dword	$4189374c
>1477	d8 00					.byte	$d8,$00
.1479	20 4e 51	jsr $514e		jsr	FloatCompare
.147c	20 44 50	jsr $5044		jsr	FPAssertCheck
.147f	20 54 50	jsr $5054		jsr	FPPushConstant	; 43.32
>1482	0a d7 a3 56				.dword	$56a3d70a
>1486	e7 00					.byte	$e7,$00
.1488	20 b4 59	jsr $59b4		jsr	FloatSquareRoot
.148b	20 54 50	jsr $5054		jsr	FPPushConstant	; 6.58179307
>148e	40 06 4f 69				.dword	$694f0640
>1492	e4 00					.byte	$e4,$00
.1494	20 87 50	jsr $5087		jsr	FloatSubtract
.1497	20 51 50	jsr $5051		jsr	FPAbs
.149a	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>149d	4c 37 89 41				.dword	$4189374c
>14a1	d8 00					.byte	$d8,$00
.14a3	20 4e 51	jsr $514e		jsr	FloatCompare
.14a6	20 44 50	jsr $5044		jsr	FPAssertCheck
.14a9	20 54 50	jsr $5054		jsr	FPPushConstant	; 2.87
>14ac	3d 0a d7 5b				.dword	$5bd70a3d
>14b0	e3 00					.byte	$e3,$00
.14b2	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.9
>14b5	9a 99 99 79				.dword	$7999999a
>14b9	e2 00					.byte	$e2,$00
.14bb	20 32 59	jsr $5932		jsr	FloatPower
.14be	20 54 50	jsr $5054		jsr	FPPushConstant	; 7.412686
>14c1	a3 5c 9a 76				.dword	$769a5ca3
>14c5	e4 00					.byte	$e4,$00
.14c7	20 87 50	jsr $5087		jsr	FloatSubtract
.14ca	20 51 50	jsr $5051		jsr	FPAbs
.14cd	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.01
>14d0	1f 85 eb 51				.dword	$51eb851f
>14d4	db 00					.byte	$db,$00
.14d6	20 4e 51	jsr $514e		jsr	FloatCompare
.14d9	20 44 50	jsr $5044		jsr	FPAssertCheck
.14dc	20 54 50	jsr $5054		jsr	FPPushConstant	; -79.40244594
>14df	b2 06 67 4f				.dword	$4f6706b2
>14e3	e8 80					.byte	$e8,$80
.14e5	20 2b 56	jsr $562b		jsr	FloatNegate
.14e8	20 54 50	jsr $5054		jsr	FPPushConstant	; 79.40244594
>14eb	b2 06 67 4f				.dword	$4f6706b2
>14ef	e8 00					.byte	$e8,$00
.14f1	20 4e 51	jsr $514e		jsr	FloatCompare
.14f4	20 18 51	jsr $5118		jsr	CompareEqual
.14f7	20 44 50	jsr $5044		jsr	FPAssertCheck
.14fa	20 54 50	jsr $5054		jsr	FPPushConstant	; -79.40244594
>14fd	b2 06 67 4f				.dword	$4f6706b2
>1501	e8 80					.byte	$e8,$80
.1503	20 a4 52	jsr $52a4		jsr	FloatIntegerPart
.1506	20 54 50	jsr $5054		jsr	FPPushConstant	; -79
>1509	4f 00 00 00				.dword	$0000004f
>150d	00 80					.byte	$00,$80
.150f	20 4e 51	jsr $514e		jsr	FloatCompare
.1512	20 18 51	jsr $5118		jsr	CompareEqual
.1515	20 44 50	jsr $5044		jsr	FPAssertCheck
.1518	20 54 50	jsr $5054		jsr	FPPushConstant	; 10.74
>151b	1f 85 eb 55				.dword	$55eb851f
>151f	e5 00					.byte	$e5,$00
.1521	20 4f 59	jsr $594f		jsr	FloatSine
.1524	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.96751827
>1527	80 a3 d7 7b				.dword	$7bd7a380
>152b	e1 80					.byte	$e1,$80
.152d	20 87 50	jsr $5087		jsr	FloatSubtract
.1530	20 51 50	jsr $5051		jsr	FPAbs
.1533	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>1536	4c 37 89 41				.dword	$4189374c
>153a	d8 00					.byte	$d8,$00
.153c	20 4e 51	jsr $514e		jsr	FloatCompare
.153f	20 2e 51	jsr $512e		jsr	CompareLess
.1542	20 44 50	jsr $5044		jsr	FPAssertCheck
.1545	20 54 50	jsr $5054		jsr	FPPushConstant	; 10.74
>1548	1f 85 eb 55				.dword	$55eb851f
>154c	e5 00					.byte	$e5,$00
.154e	20 af 57	jsr $57af		jsr	FloatCosine
.1551	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.25280108
>1554	53 92 b7 40				.dword	$40b79253
>1558	e0 80					.byte	$e0,$80
.155a	20 87 50	jsr $5087		jsr	FloatSubtract
.155d	20 51 50	jsr $5051		jsr	FPAbs
.1560	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>1563	4c 37 89 41				.dword	$4189374c
>1567	d8 00					.byte	$d8,$00
.1569	20 4e 51	jsr $514e		jsr	FloatCompare
.156c	20 2e 51	jsr $512e		jsr	CompareLess
.156f	20 44 50	jsr $5044		jsr	FPAssertCheck
.1572	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.3
>1575	cd cc cc 4c				.dword	$4ccccccd
>1579	e0 00					.byte	$e0,$00
.157b	20 c0 59	jsr $59c0		jsr	FloatTangent
.157e	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.30933625
>1581	15 a9 30 4f				.dword	$4f30a915
>1585	e0 00					.byte	$e0,$00
.1587	20 87 50	jsr $5087		jsr	FloatSubtract
.158a	20 51 50	jsr $5051		jsr	FPAbs
.158d	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>1590	4c 37 89 41				.dword	$4189374c
>1594	d8 00					.byte	$d8,$00
.1596	20 4e 51	jsr $514e		jsr	FloatCompare
.1599	20 44 50	jsr $5044		jsr	FPAssertCheck
.159c	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.158
>159f	42 60 e5 50				.dword	$50e56042
>15a3	df 00					.byte	$df,$00
.15a5	20 94 56	jsr $5694		jsr	FloatArcTan
.15a8	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.15670458
>15ab	2c 95 3b 50				.dword	$503b952c
>15af	df 00					.byte	$df,$00
.15b1	20 87 50	jsr $5087		jsr	FloatSubtract
.15b4	20 51 50	jsr $5051		jsr	FPAbs
.15b7	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>15ba	4c 37 89 41				.dword	$4189374c
>15be	d8 00					.byte	$d8,$00
.15c0	20 4e 51	jsr $514e		jsr	FloatCompare
.15c3	20 44 50	jsr $5044		jsr	FPAssertCheck
.15c6	20 54 50	jsr $5054		jsr	FPPushConstant	; -1.04
>15c9	29 5c 8f 42				.dword	$428f5c29
>15cd	e2 80					.byte	$e2,$80
.15cf	20 bb 57	jsr $57bb		jsr	FloatExponent
.15d2	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.35345468
>15d5	83 01 7c 5a				.dword	$5a7c0183
>15d9	e0 00					.byte	$e0,$00
.15db	20 87 50	jsr $5087		jsr	FloatSubtract
.15de	20 51 50	jsr $5051		jsr	FPAbs
.15e1	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>15e4	4c 37 89 41				.dword	$4189374c
>15e8	d8 00					.byte	$d8,$00
.15ea	20 4e 51	jsr $514e		jsr	FloatCompare
.15ed	20 44 50	jsr $5044		jsr	FPAssertCheck
.15f0	20 54 50	jsr $5054		jsr	FPPushConstant	; 83.33
>15f3	e1 7a 54 53				.dword	$53547ae1
>15f7	e8 00					.byte	$e8,$00
.15f9	20 be 58	jsr $58be		jsr	FloatLogarithm
.15fc	20 54 50	jsr $5054		jsr	FPPushConstant	; 4.42280863
>15ff	fb d2 c3 46				.dword	$46c3d2fb
>1603	e4 00					.byte	$e4,$00
.1605	20 87 50	jsr $5087		jsr	FloatSubtract
.1608	20 51 50	jsr $5051		jsr	FPAbs
.160b	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>160e	4c 37 89 41				.dword	$4189374c
>1612	d8 00					.byte	$d8,$00
.1614	20 4e 51	jsr $514e		jsr	FloatCompare
.1617	20 44 50	jsr $5044		jsr	FPAssertCheck
.161a	20 54 50	jsr $5054		jsr	FPPushConstant	; 12.61
>161d	ae 47 e1 64				.dword	$64e147ae
>1621	e5 00					.byte	$e5,$00
.1623	20 b4 59	jsr $59b4		jsr	FloatSquareRoot
.1626	20 54 50	jsr $5054		jsr	FPPushConstant	; 3.55105618
>1629	92 40 a2 71				.dword	$71a24092
>162d	e3 00					.byte	$e3,$00
.162f	20 87 50	jsr $5087		jsr	FloatSubtract
.1632	20 51 50	jsr $5051		jsr	FPAbs
.1635	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>1638	4c 37 89 41				.dword	$4189374c
>163c	d8 00					.byte	$d8,$00
.163e	20 4e 51	jsr $514e		jsr	FloatCompare
.1641	20 44 50	jsr $5044		jsr	FPAssertCheck
.1644	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.28666667
>1647	a5 fc 62 49				.dword	$4962fca5
>164b	e0 00					.byte	$e0,$00
.164d	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.0
>1650	01 00 00 00				.dword	$00000001
>1654	00 00					.byte	$00,$00
.1656	20 32 59	jsr $5932		jsr	FloatPower
.1659	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.28666667
>165c	a5 fc 62 49				.dword	$4962fca5
>1660	e0 00					.byte	$e0,$00
.1662	20 87 50	jsr $5087		jsr	FloatSubtract
.1665	20 51 50	jsr $5051		jsr	FPAbs
.1668	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.01
>166b	1f 85 eb 51				.dword	$51eb851f
>166f	db 00					.byte	$db,$00
.1671	20 4e 51	jsr $514e		jsr	FloatCompare
.1674	20 44 50	jsr $5044		jsr	FPAssertCheck
.1677	20 54 50	jsr $5054		jsr	FPPushConstant	; 51.11646554
>167a	5f a1 3b 66				.dword	$663ba15f
>167e	e7 00					.byte	$e7,$00
.1680	20 2b 56	jsr $562b		jsr	FloatNegate
.1683	20 54 50	jsr $5054		jsr	FPPushConstant	; -51.11646554
>1686	5f a1 3b 66				.dword	$663ba15f
>168a	e7 80					.byte	$e7,$80
.168c	20 4e 51	jsr $514e		jsr	FloatCompare
.168f	20 18 51	jsr $5118		jsr	CompareEqual
.1692	20 44 50	jsr $5044		jsr	FPAssertCheck
.1695	20 54 50	jsr $5054		jsr	FPPushConstant	; 51.11646554
>1698	5f a1 3b 66				.dword	$663ba15f
>169c	e7 00					.byte	$e7,$00
.169e	20 a4 52	jsr $52a4		jsr	FloatIntegerPart
.16a1	20 54 50	jsr $5054		jsr	FPPushConstant	; 51
>16a4	33 00 00 00				.dword	$00000033
>16a8	00 00					.byte	$00,$00
.16aa	20 4e 51	jsr $514e		jsr	FloatCompare
.16ad	20 18 51	jsr $5118		jsr	CompareEqual
.16b0	20 44 50	jsr $5044		jsr	FPAssertCheck
.16b3	20 54 50	jsr $5054		jsr	FPPushConstant	; 17.8
>16b6	33 33 33 47				.dword	$47333333
>16ba	e6 00					.byte	$e6,$00
.16bc	20 4f 59	jsr $594f		jsr	FloatSine
.16bf	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.86720218
>16c2	25 7b 00 6f				.dword	$6f007b25
>16c6	e1 80					.byte	$e1,$80
.16c8	20 87 50	jsr $5087		jsr	FloatSubtract
.16cb	20 51 50	jsr $5051		jsr	FPAbs
.16ce	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>16d1	4c 37 89 41				.dword	$4189374c
>16d5	d8 00					.byte	$d8,$00
.16d7	20 4e 51	jsr $514e		jsr	FloatCompare
.16da	20 2e 51	jsr $512e		jsr	CompareLess
.16dd	20 44 50	jsr $5044		jsr	FPAssertCheck
.16e0	20 54 50	jsr $5054		jsr	FPPushConstant	; 17.8
>16e3	33 33 33 47				.dword	$47333333
>16e7	e6 00					.byte	$e6,$00
.16e9	20 af 57	jsr $57af		jsr	FloatCosine
.16ec	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.4979562
>16ef	ba 0e 7a 7f				.dword	$7f7a0eba
>16f3	e0 00					.byte	$e0,$00
.16f5	20 87 50	jsr $5087		jsr	FloatSubtract
.16f8	20 51 50	jsr $5051		jsr	FPAbs
.16fb	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>16fe	4c 37 89 41				.dword	$4189374c
>1702	d8 00					.byte	$d8,$00
.1704	20 4e 51	jsr $514e		jsr	FloatCompare
.1707	20 2e 51	jsr $512e		jsr	CompareLess
.170a	20 44 50	jsr $5044		jsr	FPAssertCheck
.170d	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.11
>1710	0a d7 a3 70				.dword	$70a3d70a
>1714	de 00					.byte	$de,$00
.1716	20 c0 59	jsr $59c0		jsr	FloatTangent
.1719	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.11044582
>171c	84 b5 18 71				.dword	$7118b584
>1720	de 00					.byte	$de,$00
.1722	20 87 50	jsr $5087		jsr	FloatSubtract
.1725	20 51 50	jsr $5051		jsr	FPAbs
.1728	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>172b	4c 37 89 41				.dword	$4189374c
>172f	d8 00					.byte	$d8,$00
.1731	20 4e 51	jsr $514e		jsr	FloatCompare
.1734	20 44 50	jsr $5044		jsr	FPAssertCheck
.1737	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.402
>173a	35 5e ba 59				.dword	$59ba5e35
>173e	e2 00					.byte	$e2,$00
.1740	20 94 56	jsr $5694		jsr	FloatArcTan
.1743	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.95122188
>1746	79 a3 c1 79				.dword	$79c1a379
>174a	e1 00					.byte	$e1,$00
.174c	20 87 50	jsr $5087		jsr	FloatSubtract
.174f	20 51 50	jsr $5051		jsr	FPAbs
.1752	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>1755	4c 37 89 41				.dword	$4189374c
>1759	d8 00					.byte	$d8,$00
.175b	20 4e 51	jsr $514e		jsr	FloatCompare
.175e	20 44 50	jsr $5044		jsr	FPAssertCheck
.1761	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.09
>1764	c3 f5 28 5c				.dword	$5c28f5c3
>1768	de 00					.byte	$de,$00
.176a	20 bb 57	jsr $57bb		jsr	FloatExponent
.176d	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.09417428
>1770	8f f3 06 46				.dword	$4606f38f
>1774	e2 00					.byte	$e2,$00
.1776	20 87 50	jsr $5087		jsr	FloatSubtract
.1779	20 51 50	jsr $5051		jsr	FPAbs
.177c	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>177f	4c 37 89 41				.dword	$4189374c
>1783	d8 00					.byte	$d8,$00
.1785	20 4e 51	jsr $514e		jsr	FloatCompare
.1788	20 44 50	jsr $5044		jsr	FPAssertCheck
.178b	20 54 50	jsr $5054		jsr	FPPushConstant	; 37.11
>178e	ec 51 38 4a				.dword	$4a3851ec
>1792	e7 00					.byte	$e7,$00
.1794	20 be 58	jsr $58be		jsr	FloatLogarithm
.1797	20 54 50	jsr $5054		jsr	FPPushConstant	; 3.61388648
>179a	42 f5 a4 73				.dword	$73a4f542
>179e	e3 00					.byte	$e3,$00
.17a0	20 87 50	jsr $5087		jsr	FloatSubtract
.17a3	20 51 50	jsr $5051		jsr	FPAbs
.17a6	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>17a9	4c 37 89 41				.dword	$4189374c
>17ad	d8 00					.byte	$d8,$00
.17af	20 4e 51	jsr $514e		jsr	FloatCompare
.17b2	20 44 50	jsr $5044		jsr	FPAssertCheck
.17b5	20 54 50	jsr $5054		jsr	FPPushConstant	; 55.22
>17b8	d7 a3 70 6e				.dword	$6e70a3d7
>17bc	e7 00					.byte	$e7,$00
.17be	20 b4 59	jsr $59b4		jsr	FloatSquareRoot
.17c1	20 54 50	jsr $5054		jsr	FPPushConstant	; 7.43101608
>17c4	1e 71 e5 76				.dword	$76e5711e
>17c8	e4 00					.byte	$e4,$00
.17ca	20 87 50	jsr $5087		jsr	FloatSubtract
.17cd	20 51 50	jsr $5051		jsr	FPAbs
.17d0	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>17d3	4c 37 89 41				.dword	$4189374c
>17d7	d8 00					.byte	$d8,$00
.17d9	20 4e 51	jsr $514e		jsr	FloatCompare
.17dc	20 44 50	jsr $5044		jsr	FPAssertCheck
.17df	20 54 50	jsr $5054		jsr	FPPushConstant	; 2.43666667
>17e2	61 2c f9 4d				.dword	$4df92c61
>17e6	e3 00					.byte	$e3,$00
.17e8	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.0
>17eb	01 00 00 00				.dword	$00000001
>17ef	00 00					.byte	$00,$00
.17f1	20 32 59	jsr $5932		jsr	FloatPower
.17f4	20 54 50	jsr $5054		jsr	FPPushConstant	; 2.43666667
>17f7	61 2c f9 4d				.dword	$4df92c61
>17fb	e3 00					.byte	$e3,$00
.17fd	20 87 50	jsr $5087		jsr	FloatSubtract
.1800	20 51 50	jsr $5051		jsr	FPAbs
.1803	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.01
>1806	1f 85 eb 51				.dword	$51eb851f
>180a	db 00					.byte	$db,$00
.180c	20 4e 51	jsr $514e		jsr	FloatCompare
.180f	20 44 50	jsr $5044		jsr	FPAssertCheck
.1812	20 54 50	jsr $5054		jsr	FPPushConstant	; -35.59504333
>1815	85 a9 30 47				.dword	$4730a985
>1819	e7 80					.byte	$e7,$80
.181b	20 2b 56	jsr $562b		jsr	FloatNegate
.181e	20 54 50	jsr $5054		jsr	FPPushConstant	; 35.59504333
>1821	85 a9 30 47				.dword	$4730a985
>1825	e7 00					.byte	$e7,$00
.1827	20 4e 51	jsr $514e		jsr	FloatCompare
.182a	20 18 51	jsr $5118		jsr	CompareEqual
.182d	20 44 50	jsr $5044		jsr	FPAssertCheck
.1830	20 54 50	jsr $5054		jsr	FPPushConstant	; -35.59504333
>1833	85 a9 30 47				.dword	$4730a985
>1837	e7 80					.byte	$e7,$80
.1839	20 a4 52	jsr $52a4		jsr	FloatIntegerPart
.183c	20 54 50	jsr $5054		jsr	FPPushConstant	; -35
>183f	23 00 00 00				.dword	$00000023
>1843	00 80					.byte	$00,$80
.1845	20 4e 51	jsr $514e		jsr	FloatCompare
.1848	20 18 51	jsr $5118		jsr	CompareEqual
.184b	20 44 50	jsr $5044		jsr	FPAssertCheck
.184e	20 54 50	jsr $5054		jsr	FPPushConstant	; -18.49
>1851	8f c2 f5 49				.dword	$49f5c28f
>1855	e6 80					.byte	$e6,$80
.1857	20 4f 59	jsr $594f		jsr	FloatSine
.185a	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.35185859
>185d	91 67 13 5a				.dword	$5a136791
>1861	e0 00					.byte	$e0,$00
.1863	20 87 50	jsr $5087		jsr	FloatSubtract
.1866	20 51 50	jsr $5051		jsr	FPAbs
.1869	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>186c	4c 37 89 41				.dword	$4189374c
>1870	d8 00					.byte	$d8,$00
.1872	20 4e 51	jsr $514e		jsr	FloatCompare
.1875	20 2e 51	jsr $512e		jsr	CompareLess
.1878	20 44 50	jsr $5044		jsr	FPAssertCheck
.187b	20 54 50	jsr $5054		jsr	FPPushConstant	; -18.49
>187e	8f c2 f5 49				.dword	$49f5c28f
>1882	e6 80					.byte	$e6,$80
.1884	20 af 57	jsr $57af		jsr	FloatCosine
.1887	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.93605317
>188a	1c 97 d0 77				.dword	$77d0971c
>188e	e1 00					.byte	$e1,$00
.1890	20 87 50	jsr $5087		jsr	FloatSubtract
.1893	20 51 50	jsr $5051		jsr	FPAbs
.1896	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>1899	4c 37 89 41				.dword	$4189374c
>189d	d8 00					.byte	$d8,$00
.189f	20 4e 51	jsr $514e		jsr	FloatCompare
.18a2	20 2e 51	jsr $512e		jsr	CompareLess
.18a5	20 44 50	jsr $5044		jsr	FPAssertCheck
.18a8	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.23
>18ab	5c 8f c2 75				.dword	$75c28f5c
>18af	df 00					.byte	$df,$00
.18b1	20 c0 59	jsr $59c0		jsr	FloatTangent
.18b4	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.23414336
>18b7	74 a3 e1 77				.dword	$77e1a374
>18bb	df 00					.byte	$df,$00
.18bd	20 87 50	jsr $5087		jsr	FloatSubtract
.18c0	20 51 50	jsr $5051		jsr	FPAbs
.18c3	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>18c6	4c 37 89 41				.dword	$4189374c
>18ca	d8 00					.byte	$d8,$00
.18cc	20 4e 51	jsr $514e		jsr	FloatCompare
.18cf	20 44 50	jsr $5044		jsr	FPAssertCheck
.18d2	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.747
>18d5	2d b2 9d 5f				.dword	$5f9db22d
>18d9	e1 00					.byte	$e1,$00
.18db	20 94 56	jsr $5694		jsr	FloatArcTan
.18de	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.64157834
>18e1	32 3d 1f 52				.dword	$521f3d32
>18e5	e1 00					.byte	$e1,$00
.18e7	20 87 50	jsr $5087		jsr	FloatSubtract
.18ea	20 51 50	jsr $5051		jsr	FPAbs
.18ed	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>18f0	4c 37 89 41				.dword	$4189374c
>18f4	d8 00					.byte	$d8,$00
.18f6	20 4e 51	jsr $514e		jsr	FloatCompare
.18f9	20 44 50	jsr $5044		jsr	FPAssertCheck
.18fc	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.82
>18ff	8f c2 f5 68				.dword	$68f5c28f
>1903	e1 80					.byte	$e1,$80
.1905	20 bb 57	jsr $57bb		jsr	FloatExponent
.1908	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.44043165
>190b	ed 20 c0 70				.dword	$70c020ed
>190f	e0 00					.byte	$e0,$00
.1911	20 87 50	jsr $5087		jsr	FloatSubtract
.1914	20 51 50	jsr $5051		jsr	FPAbs
.1917	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>191a	4c 37 89 41				.dword	$4189374c
>191e	d8 00					.byte	$d8,$00
.1920	20 4e 51	jsr $514e		jsr	FloatCompare
.1923	20 44 50	jsr $5044		jsr	FPAssertCheck
.1926	20 54 50	jsr $5054		jsr	FPPushConstant	; 17.17
>1929	7b 14 ae 44				.dword	$44ae147b
>192d	e6 00					.byte	$e6,$00
.192f	20 be 58	jsr $58be		jsr	FloatLogarithm
.1932	20 54 50	jsr $5054		jsr	FPPushConstant	; 2.84316367
>1935	60 32 fb 5a				.dword	$5afb3260
>1939	e3 00					.byte	$e3,$00
.193b	20 87 50	jsr $5087		jsr	FloatSubtract
.193e	20 51 50	jsr $5051		jsr	FPAbs
.1941	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>1944	4c 37 89 41				.dword	$4189374c
>1948	d8 00					.byte	$d8,$00
.194a	20 4e 51	jsr $514e		jsr	FloatCompare
.194d	20 44 50	jsr $5044		jsr	FPAssertCheck
.1950	20 54 50	jsr $5054		jsr	FPPushConstant	; 7.13
>1953	e1 7a 14 72				.dword	$72147ae1
>1957	e4 00					.byte	$e4,$00
.1959	20 b4 59	jsr $59b4		jsr	FloatSquareRoot
.195c	20 54 50	jsr $5054		jsr	FPPushConstant	; 2.67020598
>195f	d0 53 72 55				.dword	$557253d0
>1963	e3 00					.byte	$e3,$00
.1965	20 87 50	jsr $5087		jsr	FloatSubtract
.1968	20 51 50	jsr $5051		jsr	FPAbs
.196b	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>196e	4c 37 89 41				.dword	$4189374c
>1972	d8 00					.byte	$d8,$00
.1974	20 4e 51	jsr $514e		jsr	FloatCompare
.1977	20 44 50	jsr $5044		jsr	FPAssertCheck
.197a	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.09666667
>197d	67 c9 2f 46				.dword	$462fc967
>1981	e2 00					.byte	$e2,$00
.1983	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.7
>1986	9a 99 99 59				.dword	$5999999a
>198a	e1 00					.byte	$e1,$00
.198c	20 32 59	jsr $5932		jsr	FloatPower
.198f	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.06672445
>1992	a1 36 45 44				.dword	$444536a1
>1996	e2 00					.byte	$e2,$00
.1998	20 87 50	jsr $5087		jsr	FloatSubtract
.199b	20 51 50	jsr $5051		jsr	FPAbs
.199e	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.01
>19a1	1f 85 eb 51				.dword	$51eb851f
>19a5	db 00					.byte	$db,$00
.19a7	20 4e 51	jsr $514e		jsr	FloatCompare
.19aa	20 44 50	jsr $5044		jsr	FPAssertCheck
.19ad	20 54 50	jsr $5054		jsr	FPPushConstant	; 21.36008747
>19b0	c5 ba 70 55				.dword	$5570bac5
>19b4	e6 00					.byte	$e6,$00
.19b6	20 2b 56	jsr $562b		jsr	FloatNegate
.19b9	20 54 50	jsr $5054		jsr	FPPushConstant	; -21.36008747
>19bc	c5 ba 70 55				.dword	$5570bac5
>19c0	e6 80					.byte	$e6,$80
.19c2	20 4e 51	jsr $514e		jsr	FloatCompare
.19c5	20 18 51	jsr $5118		jsr	CompareEqual
.19c8	20 44 50	jsr $5044		jsr	FPAssertCheck
.19cb	20 54 50	jsr $5054		jsr	FPPushConstant	; 21.36008747
>19ce	c5 ba 70 55				.dword	$5570bac5
>19d2	e6 00					.byte	$e6,$00
.19d4	20 a4 52	jsr $52a4		jsr	FloatIntegerPart
.19d7	20 54 50	jsr $5054		jsr	FPPushConstant	; 21
>19da	15 00 00 00				.dword	$00000015
>19de	00 00					.byte	$00,$00
.19e0	20 4e 51	jsr $514e		jsr	FloatCompare
.19e3	20 18 51	jsr $5118		jsr	CompareEqual
.19e6	20 44 50	jsr $5044		jsr	FPAssertCheck
.19e9	20 54 50	jsr $5054		jsr	FPPushConstant	; 9.39
>19ec	52 b8 1e 4b				.dword	$4b1eb852
>19f0	e5 00					.byte	$e5,$00
.19f2	20 4f 59	jsr $594f		jsr	FloatSine
.19f5	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.03477095
>19f8	e9 fd 35 47				.dword	$4735fde9
>19fc	dd 00					.byte	$dd,$00
.19fe	20 87 50	jsr $5087		jsr	FloatSubtract
.1a01	20 51 50	jsr $5051		jsr	FPAbs
.1a04	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>1a07	4c 37 89 41				.dword	$4189374c
>1a0b	d8 00					.byte	$d8,$00
.1a0d	20 4e 51	jsr $514e		jsr	FloatCompare
.1a10	20 2e 51	jsr $512e		jsr	CompareLess
.1a13	20 44 50	jsr $5044		jsr	FPAssertCheck
.1a16	20 54 50	jsr $5054		jsr	FPPushConstant	; 9.39
>1a19	52 b8 1e 4b				.dword	$4b1eb852
>1a1d	e5 00					.byte	$e5,$00
.1a1f	20 af 57	jsr $57af		jsr	FloatCosine
.1a22	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.99939531
>1a25	7e 2f ec 7f				.dword	$7fec2f7e
>1a29	e1 80					.byte	$e1,$80
.1a2b	20 87 50	jsr $5087		jsr	FloatSubtract
.1a2e	20 51 50	jsr $5051		jsr	FPAbs
.1a31	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>1a34	4c 37 89 41				.dword	$4189374c
>1a38	d8 00					.byte	$d8,$00
.1a3a	20 4e 51	jsr $514e		jsr	FloatCompare
.1a3d	20 2e 51	jsr $512e		jsr	CompareLess
.1a40	20 44 50	jsr $5044		jsr	FPAssertCheck
.1a43	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.25
>1a46	00 00 00 40				.dword	$40000000
>1a4a	e0 00					.byte	$e0,$00
.1a4c	20 c0 59	jsr $59c0		jsr	FloatTangent
.1a4f	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.25534192
>1a52	8c 16 5e 41				.dword	$415e168c
>1a56	e0 00					.byte	$e0,$00
.1a58	20 87 50	jsr $5087		jsr	FloatSubtract
.1a5b	20 51 50	jsr $5051		jsr	FPAbs
.1a5e	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>1a61	4c 37 89 41				.dword	$4189374c
>1a65	d8 00					.byte	$d8,$00
.1a67	20 4e 51	jsr $514e		jsr	FloatCompare
.1a6a	20 44 50	jsr $5044		jsr	FPAssertCheck
.1a6d	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.408
>1a70	21 b0 72 68				.dword	$6872b021
>1a74	e0 00					.byte	$e0,$00
.1a76	20 94 56	jsr $5694		jsr	FloatArcTan
.1a79	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.38738385
>1a7c	87 96 2b 63				.dword	$632b9687
>1a80	e0 00					.byte	$e0,$00
.1a82	20 87 50	jsr $5087		jsr	FloatSubtract
.1a85	20 51 50	jsr $5051		jsr	FPAbs
.1a88	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>1a8b	4c 37 89 41				.dword	$4189374c
>1a8f	d8 00					.byte	$d8,$00
.1a91	20 4e 51	jsr $514e		jsr	FloatCompare
.1a94	20 44 50	jsr $5044		jsr	FPAssertCheck
.1a97	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.77
>1a9a	29 5c 8f 62				.dword	$628f5c29
>1a9e	e1 00					.byte	$e1,$00
.1aa0	20 bb 57	jsr $57bb		jsr	FloatExponent
.1aa3	20 54 50	jsr $5054		jsr	FPPushConstant	; 2.15976625
>1aa6	1c ce 1c 45				.dword	$451cce1c
>1aaa	e3 00					.byte	$e3,$00
.1aac	20 87 50	jsr $5087		jsr	FloatSubtract
.1aaf	20 51 50	jsr $5051		jsr	FPAbs
.1ab2	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>1ab5	4c 37 89 41				.dword	$4189374c
>1ab9	d8 00					.byte	$d8,$00
.1abb	20 4e 51	jsr $514e		jsr	FloatCompare
.1abe	20 44 50	jsr $5044		jsr	FPAssertCheck
.1ac1	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.13
>1ac4	85 eb 51 48				.dword	$4851eb85
>1ac8	e2 00					.byte	$e2,$00
.1aca	20 be 58	jsr $58be		jsr	FloatLogarithm
.1acd	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.12221763
>1ad0	4f 9e 26 7d				.dword	$7d269e4f
>1ad4	de 00					.byte	$de,$00
.1ad6	20 87 50	jsr $5087		jsr	FloatSubtract
.1ad9	20 51 50	jsr $5051		jsr	FPAbs
.1adc	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>1adf	4c 37 89 41				.dword	$4189374c
>1ae3	d8 00					.byte	$d8,$00
.1ae5	20 4e 51	jsr $514e		jsr	FloatCompare
.1ae8	20 44 50	jsr $5044		jsr	FPAssertCheck
.1aeb	20 54 50	jsr $5054		jsr	FPPushConstant	; 60.76
>1aee	b8 1e 85 79				.dword	$79851eb8
>1af2	e7 00					.byte	$e7,$00
.1af4	20 b4 59	jsr $59b4		jsr	FloatSquareRoot
.1af7	20 54 50	jsr $5054		jsr	FPPushConstant	; 7.79487011
>1afa	b8 c9 b7 7c				.dword	$7cb7c9b8
>1afe	e4 00					.byte	$e4,$00
.1b00	20 87 50	jsr $5087		jsr	FloatSubtract
.1b03	20 51 50	jsr $5051		jsr	FPAbs
.1b06	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>1b09	4c 37 89 41				.dword	$4189374c
>1b0d	d8 00					.byte	$d8,$00
.1b0f	20 4e 51	jsr $514e		jsr	FloatCompare
.1b12	20 44 50	jsr $5044		jsr	FPAssertCheck
.1b15	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.87
>1b18	7b 14 ae 77				.dword	$77ae147b
>1b1c	e2 00					.byte	$e2,$00
.1b1e	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.1
>1b21	66 66 66 46				.dword	$46666666
>1b25	e2 00					.byte	$e2,$00
.1b27	20 32 59	jsr $5932		jsr	FloatPower
.1b2a	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.99079145
>1b2d	8b 20 69 7f				.dword	$7f69208b
>1b31	e2 00					.byte	$e2,$00
.1b33	20 87 50	jsr $5087		jsr	FloatSubtract
.1b36	20 51 50	jsr $5051		jsr	FPAbs
.1b39	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.01
>1b3c	1f 85 eb 51				.dword	$51eb851f
>1b40	db 00					.byte	$db,$00
.1b42	20 4e 51	jsr $514e		jsr	FloatCompare
.1b45	20 44 50	jsr $5044		jsr	FPAssertCheck
.1b48	20 54 50	jsr $5054		jsr	FPPushConstant	; 73.32550417
>1b4b	3e 54 53 49				.dword	$4953543e
>1b4f	e8 00					.byte	$e8,$00
.1b51	20 2b 56	jsr $562b		jsr	FloatNegate
.1b54	20 54 50	jsr $5054		jsr	FPPushConstant	; -73.32550417
>1b57	3e 54 53 49				.dword	$4953543e
>1b5b	e8 80					.byte	$e8,$80
.1b5d	20 4e 51	jsr $514e		jsr	FloatCompare
.1b60	20 18 51	jsr $5118		jsr	CompareEqual
.1b63	20 44 50	jsr $5044		jsr	FPAssertCheck
.1b66	20 54 50	jsr $5054		jsr	FPPushConstant	; 73.32550417
>1b69	3e 54 53 49				.dword	$4953543e
>1b6d	e8 00					.byte	$e8,$00
.1b6f	20 a4 52	jsr $52a4		jsr	FloatIntegerPart
.1b72	20 54 50	jsr $5054		jsr	FPPushConstant	; 73
>1b75	49 00 00 00				.dword	$00000049
>1b79	00 00					.byte	$00,$00
.1b7b	20 4e 51	jsr $514e		jsr	FloatCompare
.1b7e	20 18 51	jsr $5118		jsr	CompareEqual
.1b81	20 44 50	jsr $5044		jsr	FPAssertCheck
.1b84	20 54 50	jsr $5054		jsr	FPPushConstant	; -7.76
>1b87	c3 f5 28 7c				.dword	$7c28f5c3
>1b8b	e4 80					.byte	$e4,$80
.1b8d	20 4f 59	jsr $594f		jsr	FloatSine
.1b90	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.99558698
>1b93	e8 64 6f 7f				.dword	$7f6f64e8
>1b97	e1 80					.byte	$e1,$80
.1b99	20 87 50	jsr $5087		jsr	FloatSubtract
.1b9c	20 51 50	jsr $5051		jsr	FPAbs
.1b9f	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>1ba2	4c 37 89 41				.dword	$4189374c
>1ba6	d8 00					.byte	$d8,$00
.1ba8	20 4e 51	jsr $514e		jsr	FloatCompare
.1bab	20 2e 51	jsr $512e		jsr	CompareLess
.1bae	20 44 50	jsr $5044		jsr	FPAssertCheck
.1bb1	20 54 50	jsr $5054		jsr	FPPushConstant	; -7.76
>1bb4	c3 f5 28 7c				.dword	$7c28f5c3
>1bb8	e4 80					.byte	$e4,$80
.1bba	20 af 57	jsr $57af		jsr	FloatCosine
.1bbd	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.09384335
>1bc0	9d 78 18 60				.dword	$6018789d
>1bc4	de 00					.byte	$de,$00
.1bc6	20 87 50	jsr $5087		jsr	FloatSubtract
.1bc9	20 51 50	jsr $5051		jsr	FPAbs
.1bcc	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>1bcf	4c 37 89 41				.dword	$4189374c
>1bd3	d8 00					.byte	$d8,$00
.1bd5	20 4e 51	jsr $514e		jsr	FloatCompare
.1bd8	20 2e 51	jsr $512e		jsr	CompareLess
.1bdb	20 44 50	jsr $5044		jsr	FPAssertCheck
.1bde	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.21
>1be1	b8 1e 85 6b				.dword	$6b851eb8
>1be5	df 00					.byte	$df,$00
.1be7	20 c0 59	jsr $59c0		jsr	FloatTangent
.1bea	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.21314244
>1bed	82 01 21 6d				.dword	$6d210182
>1bf1	df 00					.byte	$df,$00
.1bf3	20 87 50	jsr $5087		jsr	FloatSubtract
.1bf6	20 51 50	jsr $5051		jsr	FPAbs
.1bf9	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>1bfc	4c 37 89 41				.dword	$4189374c
>1c00	d8 00					.byte	$d8,$00
.1c02	20 4e 51	jsr $514e		jsr	FloatCompare
.1c05	20 44 50	jsr $5044		jsr	FPAssertCheck
.1c08	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.852
>1c0b	04 56 0e 6d				.dword	$6d0e5604
>1c0f	e1 00					.byte	$e1,$00
.1c11	20 94 56	jsr $5694		jsr	FloatArcTan
.1c14	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.70565402
>1c17	f5 de 52 5a				.dword	$5a52def5
>1c1b	e1 00					.byte	$e1,$00
.1c1d	20 87 50	jsr $5087		jsr	FloatSubtract
.1c20	20 51 50	jsr $5051		jsr	FPAbs
.1c23	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>1c26	4c 37 89 41				.dword	$4189374c
>1c2a	d8 00					.byte	$d8,$00
.1c2c	20 4e 51	jsr $514e		jsr	FloatCompare
.1c2f	20 44 50	jsr $5044		jsr	FPAssertCheck
.1c32	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.36
>1c35	71 3d 0a 57				.dword	$570a3d71
>1c39	e2 00					.byte	$e2,$00
.1c3b	20 bb 57	jsr $57bb		jsr	FloatExponent
.1c3e	20 54 50	jsr $5054		jsr	FPPushConstant	; 3.8961933
>1c41	92 9d ad 7c				.dword	$7cad9d92
>1c45	e3 00					.byte	$e3,$00
.1c47	20 87 50	jsr $5087		jsr	FloatSubtract
.1c4a	20 51 50	jsr $5051		jsr	FPAbs
.1c4d	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>1c50	4c 37 89 41				.dword	$4189374c
>1c54	d8 00					.byte	$d8,$00
.1c56	20 4e 51	jsr $514e		jsr	FloatCompare
.1c59	20 44 50	jsr $5044		jsr	FPAssertCheck
.1c5c	20 54 50	jsr $5054		jsr	FPPushConstant	; 47.29
>1c5f	e1 7a 94 5e				.dword	$5e947ae1
>1c63	e7 00					.byte	$e7,$00
.1c65	20 be 58	jsr $58be		jsr	FloatLogarithm
.1c68	20 54 50	jsr $5054		jsr	FPPushConstant	; 3.85629886
>1c6b	de cc 66 7b				.dword	$7b66ccde
>1c6f	e3 00					.byte	$e3,$00
.1c71	20 87 50	jsr $5087		jsr	FloatSubtract
.1c74	20 51 50	jsr $5051		jsr	FPAbs
.1c77	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>1c7a	4c 37 89 41				.dword	$4189374c
>1c7e	d8 00					.byte	$d8,$00
.1c80	20 4e 51	jsr $514e		jsr	FloatCompare
.1c83	20 44 50	jsr $5044		jsr	FPAssertCheck
.1c86	20 54 50	jsr $5054		jsr	FPPushConstant	; 30.52
>1c89	e1 7a 14 7a				.dword	$7a147ae1
>1c8d	e6 00					.byte	$e6,$00
.1c8f	20 b4 59	jsr $59b4		jsr	FloatSquareRoot
.1c92	20 54 50	jsr $5054		jsr	FPPushConstant	; 5.52449093
>1c95	9a 50 64 58				.dword	$5864509a
>1c99	e4 00					.byte	$e4,$00
.1c9b	20 87 50	jsr $5087		jsr	FloatSubtract
.1c9e	20 51 50	jsr $5051		jsr	FPAbs
.1ca1	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>1ca4	4c 37 89 41				.dword	$4189374c
>1ca8	d8 00					.byte	$d8,$00
.1caa	20 4e 51	jsr $514e		jsr	FloatCompare
.1cad	20 44 50	jsr $5044		jsr	FPAssertCheck
.1cb0	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.76333333
>1cb3	0a 74 da 70				.dword	$70da740a
>1cb7	e2 00					.byte	$e2,$00
.1cb9	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.9
>1cbc	9a 99 99 79				.dword	$7999999a
>1cc0	e2 00					.byte	$e2,$00
.1cc2	20 32 59	jsr $5932		jsr	FloatPower
.1cc5	20 54 50	jsr $5054		jsr	FPPushConstant	; 2.93788907
>1cc8	f0 2f 03 5e				.dword	$5e032ff0
>1ccc	e3 00					.byte	$e3,$00
.1cce	20 87 50	jsr $5087		jsr	FloatSubtract
.1cd1	20 51 50	jsr $5051		jsr	FPAbs
.1cd4	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.01
>1cd7	1f 85 eb 51				.dword	$51eb851f
>1cdb	db 00					.byte	$db,$00
.1cdd	20 4e 51	jsr $514e		jsr	FloatCompare
.1ce0	20 44 50	jsr $5044		jsr	FPAssertCheck
.1ce3	20 54 50	jsr $5054		jsr	FPPushConstant	; 12.0523204
>1ce6	f5 26 6b 60				.dword	$606b26f5
>1cea	e5 00					.byte	$e5,$00
.1cec	20 2b 56	jsr $562b		jsr	FloatNegate
.1cef	20 54 50	jsr $5054		jsr	FPPushConstant	; -12.0523204
>1cf2	f5 26 6b 60				.dword	$606b26f5
>1cf6	e5 80					.byte	$e5,$80
.1cf8	20 4e 51	jsr $514e		jsr	FloatCompare
.1cfb	20 18 51	jsr $5118		jsr	CompareEqual
.1cfe	20 44 50	jsr $5044		jsr	FPAssertCheck
.1d01	20 54 50	jsr $5054		jsr	FPPushConstant	; 12.0523204
>1d04	f5 26 6b 60				.dword	$606b26f5
>1d08	e5 00					.byte	$e5,$00
.1d0a	20 a4 52	jsr $52a4		jsr	FloatIntegerPart
.1d0d	20 54 50	jsr $5054		jsr	FPPushConstant	; 12
>1d10	0c 00 00 00				.dword	$0000000c
>1d14	00 00					.byte	$00,$00
.1d16	20 4e 51	jsr $514e		jsr	FloatCompare
.1d19	20 18 51	jsr $5118		jsr	CompareEqual
.1d1c	20 44 50	jsr $5044		jsr	FPAssertCheck
.1d1f	20 54 50	jsr $5054		jsr	FPPushConstant	; 2.39
>1d22	48 e1 7a 4c				.dword	$4c7ae148
>1d26	e3 00					.byte	$e3,$00
.1d28	20 4f 59	jsr $594f		jsr	FloatSine
.1d2b	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.68280322
>1d2e	8e 18 66 57				.dword	$5766188e
>1d32	e1 00					.byte	$e1,$00
.1d34	20 87 50	jsr $5087		jsr	FloatSubtract
.1d37	20 51 50	jsr $5051		jsr	FPAbs
.1d3a	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>1d3d	4c 37 89 41				.dword	$4189374c
>1d41	d8 00					.byte	$d8,$00
.1d43	20 4e 51	jsr $514e		jsr	FloatCompare
.1d46	20 2e 51	jsr $512e		jsr	CompareLess
.1d49	20 44 50	jsr $5044		jsr	FPAssertCheck
.1d4c	20 54 50	jsr $5054		jsr	FPPushConstant	; 2.39
>1d4f	48 e1 7a 4c				.dword	$4c7ae148
>1d53	e3 00					.byte	$e3,$00
.1d55	20 af 57	jsr $57af		jsr	FloatCosine
.1d58	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.73060233
>1d5b	8d 60 84 5d				.dword	$5d84608d
>1d5f	e1 80					.byte	$e1,$80
.1d61	20 87 50	jsr $5087		jsr	FloatSubtract
.1d64	20 51 50	jsr $5051		jsr	FPAbs
.1d67	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>1d6a	4c 37 89 41				.dword	$4189374c
>1d6e	d8 00					.byte	$d8,$00
.1d70	20 4e 51	jsr $514e		jsr	FloatCompare
.1d73	20 2e 51	jsr $512e		jsr	CompareLess
.1d76	20 44 50	jsr $5044		jsr	FPAssertCheck
.1d79	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.14
>1d7c	7b 14 ae 47				.dword	$47ae147b
>1d80	df 00					.byte	$df,$00
.1d82	20 c0 59	jsr $59c0		jsr	FloatTangent
.1d85	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.14092189
>1d88	fa e9 26 48				.dword	$4826e9fa
>1d8c	df 00					.byte	$df,$00
.1d8e	20 87 50	jsr $5087		jsr	FloatSubtract
.1d91	20 51 50	jsr $5051		jsr	FPAbs
.1d94	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>1d97	4c 37 89 41				.dword	$4189374c
>1d9b	d8 00					.byte	$d8,$00
.1d9d	20 4e 51	jsr $514e		jsr	FloatCompare
.1da0	20 44 50	jsr $5044		jsr	FPAssertCheck
.1da3	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.258
>1da6	6f 12 83 50				.dword	$5083126f
>1daa	e2 00					.byte	$e2,$00
.1dac	20 94 56	jsr $5694		jsr	FloatArcTan
.1daf	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.89916519
>1db2	4e d8 17 73				.dword	$7317d84e
>1db6	e1 00					.byte	$e1,$00
.1db8	20 87 50	jsr $5087		jsr	FloatSubtract
.1dbb	20 51 50	jsr $5051		jsr	FPAbs
.1dbe	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>1dc1	4c 37 89 41				.dword	$4189374c
>1dc5	d8 00					.byte	$d8,$00
.1dc7	20 4e 51	jsr $514e		jsr	FloatCompare
.1dca	20 44 50	jsr $5044		jsr	FPAssertCheck
.1dcd	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.45
>1dd0	cd cc cc 5c				.dword	$5ccccccd
>1dd4	e2 00					.byte	$e2,$00
.1dd6	20 bb 57	jsr $57bb		jsr	FloatExponent
.1dd9	20 54 50	jsr $5054		jsr	FPPushConstant	; 4.26311452
>1ddc	92 b7 35 44				.dword	$4435b792
>1de0	e4 00					.byte	$e4,$00
.1de2	20 87 50	jsr $5087		jsr	FloatSubtract
.1de5	20 51 50	jsr $5051		jsr	FPAbs
.1de8	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>1deb	4c 37 89 41				.dword	$4189374c
>1def	d8 00					.byte	$d8,$00
.1df1	20 4e 51	jsr $514e		jsr	FloatCompare
.1df4	20 44 50	jsr $5044		jsr	FPAssertCheck
.1df7	20 54 50	jsr $5054		jsr	FPPushConstant	; 59.73
>1dfa	8f c2 75 77				.dword	$7775c28f
>1dfe	e7 00					.byte	$e7,$00
.1e00	20 be 58	jsr $58be		jsr	FloatLogarithm
.1e03	20 54 50	jsr $5054		jsr	FPPushConstant	; 4.08983441
>1e06	35 f6 6f 41				.dword	$416ff635
>1e0a	e4 00					.byte	$e4,$00
.1e0c	20 87 50	jsr $5087		jsr	FloatSubtract
.1e0f	20 51 50	jsr $5051		jsr	FPAbs
.1e12	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>1e15	4c 37 89 41				.dword	$4189374c
>1e19	d8 00					.byte	$d8,$00
.1e1b	20 4e 51	jsr $514e		jsr	FloatCompare
.1e1e	20 44 50	jsr $5044		jsr	FPAssertCheck
.1e21	20 54 50	jsr $5054		jsr	FPPushConstant	; 65.05
>1e24	cd cc 0c 41				.dword	$410ccccd
>1e28	e8 00					.byte	$e8,$00
.1e2a	20 b4 59	jsr $59b4		jsr	FloatSquareRoot
.1e2d	20 54 50	jsr $5054		jsr	FPPushConstant	; 8.06535802
>1e30	6d da 85 40				.dword	$4085da6d
>1e34	e5 00					.byte	$e5,$00
.1e36	20 87 50	jsr $5087		jsr	FloatSubtract
.1e39	20 51 50	jsr $5051		jsr	FPAbs
.1e3c	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>1e3f	4c 37 89 41				.dword	$4189374c
>1e43	d8 00					.byte	$d8,$00
.1e45	20 4e 51	jsr $514e		jsr	FloatCompare
.1e48	20 44 50	jsr $5044		jsr	FPAssertCheck
.1e4b	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.84333333
>1e4e	5c 2c f9 75				.dword	$75f92c5c
>1e52	e2 00					.byte	$e2,$00
.1e54	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.3
>1e57	33 33 33 53				.dword	$53333333
>1e5b	e2 00					.byte	$e2,$00
.1e5d	20 32 59	jsr $5932		jsr	FloatPower
.1e60	20 54 50	jsr $5054		jsr	FPPushConstant	; 2.2145477
>1e63	23 93 dd 46				.dword	$46dd9323
>1e67	e3 00					.byte	$e3,$00
.1e69	20 87 50	jsr $5087		jsr	FloatSubtract
.1e6c	20 51 50	jsr $5051		jsr	FPAbs
.1e6f	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.01
>1e72	1f 85 eb 51				.dword	$51eb851f
>1e76	db 00					.byte	$db,$00
.1e78	20 4e 51	jsr $514e		jsr	FloatCompare
.1e7b	20 44 50	jsr $5044		jsr	FPAssertCheck
.1e7e	20 54 50	jsr $5054		jsr	FPPushConstant	; -68.53381388
>1e81	07 a8 88 44				.dword	$4488a807
>1e85	e8 80					.byte	$e8,$80
.1e87	20 2b 56	jsr $562b		jsr	FloatNegate
.1e8a	20 54 50	jsr $5054		jsr	FPPushConstant	; 68.53381388
>1e8d	07 a8 88 44				.dword	$4488a807
>1e91	e8 00					.byte	$e8,$00
.1e93	20 4e 51	jsr $514e		jsr	FloatCompare
.1e96	20 18 51	jsr $5118		jsr	CompareEqual
.1e99	20 44 50	jsr $5044		jsr	FPAssertCheck
.1e9c	20 54 50	jsr $5054		jsr	FPPushConstant	; -68.53381388
>1e9f	07 a8 88 44				.dword	$4488a807
>1ea3	e8 80					.byte	$e8,$80
.1ea5	20 a4 52	jsr $52a4		jsr	FloatIntegerPart
.1ea8	20 54 50	jsr $5054		jsr	FPPushConstant	; -68
>1eab	44 00 00 00				.dword	$00000044
>1eaf	00 80					.byte	$00,$80
.1eb1	20 4e 51	jsr $514e		jsr	FloatCompare
.1eb4	20 18 51	jsr $5118		jsr	CompareEqual
.1eb7	20 44 50	jsr $5044		jsr	FPAssertCheck
.1eba	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.1
>1ebd	66 66 66 46				.dword	$46666666
>1ec1	e2 00					.byte	$e2,$00
.1ec3	20 4f 59	jsr $594f		jsr	FloatSine
.1ec6	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.89120736
>1ec9	31 15 13 72				.dword	$72131531
>1ecd	e1 00					.byte	$e1,$00
.1ecf	20 87 50	jsr $5087		jsr	FloatSubtract
.1ed2	20 51 50	jsr $5051		jsr	FPAbs
.1ed5	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>1ed8	4c 37 89 41				.dword	$4189374c
>1edc	d8 00					.byte	$d8,$00
.1ede	20 4e 51	jsr $514e		jsr	FloatCompare
.1ee1	20 2e 51	jsr $512e		jsr	CompareLess
.1ee4	20 44 50	jsr $5044		jsr	FPAssertCheck
.1ee7	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.1
>1eea	66 66 66 46				.dword	$46666666
>1eee	e2 00					.byte	$e2,$00
.1ef0	20 af 57	jsr $57af		jsr	FloatCosine
.1ef3	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.45359612
>1ef6	15 e0 1e 74				.dword	$741ee015
>1efa	e0 00					.byte	$e0,$00
.1efc	20 87 50	jsr $5087		jsr	FloatSubtract
.1eff	20 51 50	jsr $5051		jsr	FPAbs
.1f02	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>1f05	4c 37 89 41				.dword	$4189374c
>1f09	d8 00					.byte	$d8,$00
.1f0b	20 4e 51	jsr $514e		jsr	FloatCompare
.1f0e	20 2e 51	jsr $512e		jsr	CompareLess
.1f11	20 44 50	jsr $5044		jsr	FPAssertCheck
.1f14	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.21
>1f17	b8 1e 85 6b				.dword	$6b851eb8
>1f1b	df 00					.byte	$df,$00
.1f1d	20 c0 59	jsr $59c0		jsr	FloatTangent
.1f20	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.21314244
>1f23	82 01 21 6d				.dword	$6d210182
>1f27	df 00					.byte	$df,$00
.1f29	20 87 50	jsr $5087		jsr	FloatSubtract
.1f2c	20 51 50	jsr $5051		jsr	FPAbs
.1f2f	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>1f32	4c 37 89 41				.dword	$4189374c
>1f36	d8 00					.byte	$d8,$00
.1f38	20 4e 51	jsr $514e		jsr	FloatCompare
.1f3b	20 44 50	jsr $5044		jsr	FPAssertCheck
.1f3e	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.712
>1f41	73 68 91 6d				.dword	$6d916873
>1f45	e2 00					.byte	$e2,$00
.1f47	20 94 56	jsr $5694		jsr	FloatArcTan
.1f4a	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.04214099
>1f4d	1f 70 b2 42				.dword	$42b2701f
>1f51	e2 00					.byte	$e2,$00
.1f53	20 87 50	jsr $5087		jsr	FloatSubtract
.1f56	20 51 50	jsr $5051		jsr	FPAbs
.1f59	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>1f5c	4c 37 89 41				.dword	$4189374c
>1f60	d8 00					.byte	$d8,$00
.1f62	20 4e 51	jsr $514e		jsr	FloatCompare
.1f65	20 44 50	jsr $5044		jsr	FPAssertCheck
.1f68	20 54 50	jsr $5054		jsr	FPPushConstant	; -1.33
>1f6b	52 b8 1e 55				.dword	$551eb852
>1f6f	e2 80					.byte	$e2,$80
.1f71	20 bb 57	jsr $57bb		jsr	FloatExponent
.1f74	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.26447726
>1f77	1e c8 b4 43				.dword	$43b4c81e
>1f7b	e0 00					.byte	$e0,$00
.1f7d	20 87 50	jsr $5087		jsr	FloatSubtract
.1f80	20 51 50	jsr $5051		jsr	FPAbs
.1f83	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>1f86	4c 37 89 41				.dword	$4189374c
>1f8a	d8 00					.byte	$d8,$00
.1f8c	20 4e 51	jsr $514e		jsr	FloatCompare
.1f8f	20 44 50	jsr $5044		jsr	FPAssertCheck
.1f92	20 54 50	jsr $5054		jsr	FPPushConstant	; 45.37
>1f95	a4 70 bd 5a				.dword	$5abd70a4
>1f99	e7 00					.byte	$e7,$00
.1f9b	20 be 58	jsr $58be		jsr	FloatLogarithm
.1f9e	20 54 50	jsr $5054		jsr	FPPushConstant	; 3.81485109
>1fa1	98 42 13 7a				.dword	$7a134298
>1fa5	e3 00					.byte	$e3,$00
.1fa7	20 87 50	jsr $5087		jsr	FloatSubtract
.1faa	20 51 50	jsr $5051		jsr	FPAbs
.1fad	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>1fb0	4c 37 89 41				.dword	$4189374c
>1fb4	d8 00					.byte	$d8,$00
.1fb6	20 4e 51	jsr $514e		jsr	FloatCompare
.1fb9	20 44 50	jsr $5044		jsr	FPAssertCheck
.1fbc	20 54 50	jsr $5054		jsr	FPPushConstant	; 53.22
>1fbf	d7 a3 70 6a				.dword	$6a70a3d7
>1fc3	e7 00					.byte	$e7,$00
.1fc5	20 b4 59	jsr $59b4		jsr	FloatSquareRoot
.1fc8	20 54 50	jsr $5054		jsr	FPPushConstant	; 7.2952039
>1fcb	ba 27 b9 74				.dword	$74b927ba
>1fcf	e4 00					.byte	$e4,$00
.1fd1	20 87 50	jsr $5087		jsr	FloatSubtract
.1fd4	20 51 50	jsr $5051		jsr	FPAbs
.1fd7	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>1fda	4c 37 89 41				.dword	$4189374c
>1fde	d8 00					.byte	$d8,$00
.1fe0	20 4e 51	jsr $514e		jsr	FloatCompare
.1fe3	20 44 50	jsr $5044		jsr	FPAssertCheck
.1fe6	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.09
>1fe9	5c 8f c2 45				.dword	$45c28f5c
>1fed	e2 00					.byte	$e2,$00
.1fef	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.0
>1ff2	01 00 00 00				.dword	$00000001
>1ff6	00 00					.byte	$00,$00
.1ff8	20 32 59	jsr $5932		jsr	FloatPower
.1ffb	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.09
>1ffe	5c 8f c2 45				.dword	$45c28f5c
>2002	e2 00					.byte	$e2,$00
.2004	20 87 50	jsr $5087		jsr	FloatSubtract
.2007	20 51 50	jsr $5051		jsr	FPAbs
.200a	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.01
>200d	1f 85 eb 51				.dword	$51eb851f
>2011	db 00					.byte	$db,$00
.2013	20 4e 51	jsr $514e		jsr	FloatCompare
.2016	20 44 50	jsr $5044		jsr	FPAssertCheck
.2019	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.20968656
>201c	2d 81 6b 4d				.dword	$4d6b812d
>2020	e2 00					.byte	$e2,$00
.2022	20 2b 56	jsr $562b		jsr	FloatNegate
.2025	20 54 50	jsr $5054		jsr	FPPushConstant	; -1.20968656
>2028	2d 81 6b 4d				.dword	$4d6b812d
>202c	e2 80					.byte	$e2,$80
.202e	20 4e 51	jsr $514e		jsr	FloatCompare
.2031	20 18 51	jsr $5118		jsr	CompareEqual
.2034	20 44 50	jsr $5044		jsr	FPAssertCheck
.2037	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.20968656
>203a	2d 81 6b 4d				.dword	$4d6b812d
>203e	e2 00					.byte	$e2,$00
.2040	20 a4 52	jsr $52a4		jsr	FloatIntegerPart
.2043	20 54 50	jsr $5054		jsr	FPPushConstant	; 1
>2046	01 00 00 00				.dword	$00000001
>204a	00 00					.byte	$00,$00
.204c	20 4e 51	jsr $514e		jsr	FloatCompare
.204f	20 18 51	jsr $5118		jsr	CompareEqual
.2052	20 44 50	jsr $5044		jsr	FPAssertCheck
.2055	20 54 50	jsr $5054		jsr	FPPushConstant	; 7.83
>2058	14 ae 47 7d				.dword	$7d47ae14
>205c	e4 00					.byte	$e4,$00
.205e	20 4f 59	jsr $594f		jsr	FloatSine
.2061	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.99971245
>2064	db 93 f6 7f				.dword	$7ff693db
>2068	e1 00					.byte	$e1,$00
.206a	20 87 50	jsr $5087		jsr	FloatSubtract
.206d	20 51 50	jsr $5051		jsr	FPAbs
.2070	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>2073	4c 37 89 41				.dword	$4189374c
>2077	d8 00					.byte	$d8,$00
.2079	20 4e 51	jsr $514e		jsr	FloatCompare
.207c	20 2e 51	jsr $512e		jsr	CompareLess
.207f	20 44 50	jsr $5044		jsr	FPAssertCheck
.2082	20 54 50	jsr $5054		jsr	FPPushConstant	; 7.83
>2085	14 ae 47 7d				.dword	$7d47ae14
>2089	e4 00					.byte	$e4,$00
.208b	20 af 57	jsr $57af		jsr	FloatCosine
.208e	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.02397934
>2091	11 29 38 62				.dword	$62382911
>2095	dc 00					.byte	$dc,$00
.2097	20 87 50	jsr $5087		jsr	FloatSubtract
.209a	20 51 50	jsr $5051		jsr	FPAbs
.209d	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>20a0	4c 37 89 41				.dword	$4189374c
>20a4	d8 00					.byte	$d8,$00
.20a6	20 4e 51	jsr $514e		jsr	FloatCompare
.20a9	20 2e 51	jsr $512e		jsr	CompareLess
.20ac	20 44 50	jsr $5044		jsr	FPAssertCheck
.20af	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.16
>20b2	1f 85 eb 51				.dword	$51eb851f
>20b6	df 00					.byte	$df,$00
.20b8	20 c0 59	jsr $59c0		jsr	FloatTangent
.20bb	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.16137946
>20be	1e 54 a0 52				.dword	$52a0541e
>20c2	df 00					.byte	$df,$00
.20c4	20 87 50	jsr $5087		jsr	FloatSubtract
.20c7	20 51 50	jsr $5051		jsr	FPAbs
.20ca	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>20cd	4c 37 89 41				.dword	$4189374c
>20d1	d8 00					.byte	$d8,$00
.20d3	20 4e 51	jsr $514e		jsr	FloatCompare
.20d6	20 44 50	jsr $5044		jsr	FPAssertCheck
.20d9	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.261
>20dc	60 e5 d0 42				.dword	$42d0e560
>20e0	e0 00					.byte	$e0,$00
.20e2	20 94 56	jsr $5694		jsr	FloatArcTan
.20e5	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.25530451
>20e8	e9 a2 5b 41				.dword	$415ba2e9
>20ec	e0 00					.byte	$e0,$00
.20ee	20 87 50	jsr $5087		jsr	FloatSubtract
.20f1	20 51 50	jsr $5051		jsr	FPAbs
.20f4	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>20f7	4c 37 89 41				.dword	$4189374c
>20fb	d8 00					.byte	$d8,$00
.20fd	20 4e 51	jsr $514e		jsr	FloatCompare
.2100	20 44 50	jsr $5044		jsr	FPAssertCheck
.2103	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.53
>2106	1f 85 eb 61				.dword	$61eb851f
>210a	e2 00					.byte	$e2,$00
.210c	20 bb 57	jsr $57bb		jsr	FloatExponent
.210f	20 54 50	jsr $5054		jsr	FPPushConstant	; 4.61817682
>2112	61 0d e4 49				.dword	$49e40d61
>2116	e4 00					.byte	$e4,$00
.2118	20 87 50	jsr $5087		jsr	FloatSubtract
.211b	20 51 50	jsr $5051		jsr	FPAbs
.211e	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>2121	4c 37 89 41				.dword	$4189374c
>2125	d8 00					.byte	$d8,$00
.2127	20 4e 51	jsr $514e		jsr	FloatCompare
.212a	20 44 50	jsr $5044		jsr	FPAssertCheck
.212d	20 54 50	jsr $5054		jsr	FPPushConstant	; 83.65
>2130	66 66 a6 53				.dword	$53a66666
>2134	e8 00					.byte	$e8,$00
.2136	20 be 58	jsr $58be		jsr	FloatLogarithm
.2139	20 54 50	jsr $5054		jsr	FPPushConstant	; 4.42664143
>213c	f7 85 d3 46				.dword	$46d385f7
>2140	e4 00					.byte	$e4,$00
.2142	20 87 50	jsr $5087		jsr	FloatSubtract
.2145	20 51 50	jsr $5051		jsr	FPAbs
.2148	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>214b	4c 37 89 41				.dword	$4189374c
>214f	d8 00					.byte	$d8,$00
.2151	20 4e 51	jsr $514e		jsr	FloatCompare
.2154	20 44 50	jsr $5044		jsr	FPAssertCheck
.2157	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.31
>215a	3d 0a d7 53				.dword	$53d70a3d
>215e	e2 00					.byte	$e2,$00
.2160	20 b4 59	jsr $59b4		jsr	FloatSquareRoot
.2163	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.14455231
>2166	55 58 40 49				.dword	$49405855
>216a	e2 00					.byte	$e2,$00
.216c	20 87 50	jsr $5087		jsr	FloatSubtract
.216f	20 51 50	jsr $5051		jsr	FPAbs
.2172	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>2175	4c 37 89 41				.dword	$4189374c
>2179	d8 00					.byte	$d8,$00
.217b	20 4e 51	jsr $514e		jsr	FloatCompare
.217e	20 44 50	jsr $5044		jsr	FPAssertCheck
.2181	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.36333333
>2184	c2 69 03 5d				.dword	$5d0369c2
>2188	e0 00					.byte	$e0,$00
.218a	20 54 50	jsr $5054		jsr	FPPushConstant	; 2.0
>218d	02 00 00 00				.dword	$00000002
>2191	00 00					.byte	$00,$00
.2193	20 32 59	jsr $5932		jsr	FloatPower
.2196	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.13201111
>2199	d0 f5 96 43				.dword	$4396f5d0
>219d	df 00					.byte	$df,$00
.219f	20 87 50	jsr $5087		jsr	FloatSubtract
.21a2	20 51 50	jsr $5051		jsr	FPAbs
.21a5	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.01
>21a8	1f 85 eb 51				.dword	$51eb851f
>21ac	db 00					.byte	$db,$00
.21ae	20 4e 51	jsr $514e		jsr	FloatCompare
.21b1	20 44 50	jsr $5044		jsr	FPAssertCheck
.21b4	20 54 50	jsr $5054		jsr	FPPushConstant	; 63.99554548
>21b7	23 b8 fd 7f				.dword	$7ffdb823
>21bb	e7 00					.byte	$e7,$00
.21bd	20 2b 56	jsr $562b		jsr	FloatNegate
.21c0	20 54 50	jsr $5054		jsr	FPPushConstant	; -63.99554548
>21c3	23 b8 fd 7f				.dword	$7ffdb823
>21c7	e7 80					.byte	$e7,$80
.21c9	20 4e 51	jsr $514e		jsr	FloatCompare
.21cc	20 18 51	jsr $5118		jsr	CompareEqual
.21cf	20 44 50	jsr $5044		jsr	FPAssertCheck
.21d2	20 54 50	jsr $5054		jsr	FPPushConstant	; 63.99554548
>21d5	23 b8 fd 7f				.dword	$7ffdb823
>21d9	e7 00					.byte	$e7,$00
.21db	20 a4 52	jsr $52a4		jsr	FloatIntegerPart
.21de	20 54 50	jsr $5054		jsr	FPPushConstant	; 63
>21e1	3f 00 00 00				.dword	$0000003f
>21e5	00 00					.byte	$00,$00
.21e7	20 4e 51	jsr $514e		jsr	FloatCompare
.21ea	20 18 51	jsr $5118		jsr	CompareEqual
.21ed	20 44 50	jsr $5044		jsr	FPAssertCheck
.21f0	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.0
>21f3	00 00 00 00				.dword	$00000000
>21f7	00 00					.byte	$00,$00
.21f9	20 4f 59	jsr $594f		jsr	FloatSine
.21fc	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.0
>21ff	00 00 00 00				.dword	$00000000
>2203	00 00					.byte	$00,$00
.2205	20 87 50	jsr $5087		jsr	FloatSubtract
.2208	20 51 50	jsr $5051		jsr	FPAbs
.220b	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>220e	4c 37 89 41				.dword	$4189374c
>2212	d8 00					.byte	$d8,$00
.2214	20 4e 51	jsr $514e		jsr	FloatCompare
.2217	20 2e 51	jsr $512e		jsr	CompareLess
.221a	20 44 50	jsr $5044		jsr	FPAssertCheck
.221d	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.0
>2220	00 00 00 00				.dword	$00000000
>2224	00 00					.byte	$00,$00
.2226	20 af 57	jsr $57af		jsr	FloatCosine
.2229	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.0
>222c	01 00 00 00				.dword	$00000001
>2230	00 00					.byte	$00,$00
.2232	20 87 50	jsr $5087		jsr	FloatSubtract
.2235	20 51 50	jsr $5051		jsr	FPAbs
.2238	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>223b	4c 37 89 41				.dword	$4189374c
>223f	d8 00					.byte	$d8,$00
.2241	20 4e 51	jsr $514e		jsr	FloatCompare
.2244	20 2e 51	jsr $512e		jsr	CompareLess
.2247	20 44 50	jsr $5044		jsr	FPAssertCheck
.224a	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.1
>224d	66 66 66 66				.dword	$66666666
>2251	de 00					.byte	$de,$00
.2253	20 c0 59	jsr $59c0		jsr	FloatTangent
.2256	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.10033467
>2259	b9 21 be 66				.dword	$66be21b9
>225d	de 00					.byte	$de,$00
.225f	20 87 50	jsr $5087		jsr	FloatSubtract
.2262	20 51 50	jsr $5051		jsr	FPAbs
.2265	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>2268	4c 37 89 41				.dword	$4189374c
>226c	d8 00					.byte	$d8,$00
.226e	20 4e 51	jsr $514e		jsr	FloatCompare
.2271	20 44 50	jsr $5044		jsr	FPAssertCheck
.2274	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.616
>2277	87 16 d9 4e				.dword	$4ed91687
>227b	e1 00					.byte	$e1,$00
.227d	20 94 56	jsr $5694		jsr	FloatArcTan
.2280	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.55210121
>2283	a1 40 ab 46				.dword	$46ab40a1
>2287	e1 00					.byte	$e1,$00
.2289	20 87 50	jsr $5087		jsr	FloatSubtract
.228c	20 51 50	jsr $5051		jsr	FPAbs
.228f	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>2292	4c 37 89 41				.dword	$4189374c
>2296	d8 00					.byte	$d8,$00
.2298	20 4e 51	jsr $514e		jsr	FloatCompare
.229b	20 44 50	jsr $5044		jsr	FPAssertCheck
.229e	20 54 50	jsr $5054		jsr	FPPushConstant	; -1.35
>22a1	66 66 66 56				.dword	$56666666
>22a5	e2 80					.byte	$e2,$80
.22a7	20 bb 57	jsr $57bb		jsr	FloatExponent
.22aa	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.25924026
>22ad	d7 91 5d 42				.dword	$425d91d7
>22b1	e0 00					.byte	$e0,$00
.22b3	20 87 50	jsr $5087		jsr	FloatSubtract
.22b6	20 51 50	jsr $5051		jsr	FPAbs
.22b9	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>22bc	4c 37 89 41				.dword	$4189374c
>22c0	d8 00					.byte	$d8,$00
.22c2	20 4e 51	jsr $514e		jsr	FloatCompare
.22c5	20 44 50	jsr $5044		jsr	FPAssertCheck
.22c8	20 54 50	jsr $5054		jsr	FPPushConstant	; 46.03
>22cb	29 5c 0f 5c				.dword	$5c0f5c29
>22cf	e7 00					.byte	$e7,$00
.22d1	20 be 58	jsr $58be		jsr	FloatLogarithm
.22d4	20 54 50	jsr $5054		jsr	FPPushConstant	; 3.82929336
>22d7	3a 92 89 7a				.dword	$7a89923a
>22db	e3 00					.byte	$e3,$00
.22dd	20 87 50	jsr $5087		jsr	FloatSubtract
.22e0	20 51 50	jsr $5051		jsr	FPAbs
.22e3	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>22e6	4c 37 89 41				.dword	$4189374c
>22ea	d8 00					.byte	$d8,$00
.22ec	20 4e 51	jsr $514e		jsr	FloatCompare
.22ef	20 44 50	jsr $5044		jsr	FPAssertCheck
.22f2	20 54 50	jsr $5054		jsr	FPPushConstant	; 89.52
>22f5	b8 1e 85 59				.dword	$59851eb8
>22f9	e8 00					.byte	$e8,$00
.22fb	20 b4 59	jsr $59b4		jsr	FloatSquareRoot
.22fe	20 54 50	jsr $5054		jsr	FPPushConstant	; 9.46150094
>2301	68 27 b1 4b				.dword	$4bb12768
>2305	e5 00					.byte	$e5,$00
.2307	20 87 50	jsr $5087		jsr	FloatSubtract
.230a	20 51 50	jsr $5051		jsr	FPAbs
.230d	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>2310	4c 37 89 41				.dword	$4189374c
>2314	d8 00					.byte	$d8,$00
.2316	20 4e 51	jsr $514e		jsr	FloatCompare
.2319	20 44 50	jsr $5044		jsr	FPAssertCheck
.231c	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.58666667
>231f	5c f2 8b 65				.dword	$658bf25c
>2323	e2 00					.byte	$e2,$00
.2325	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.5
>2328	00 00 00 60				.dword	$60000000
>232c	e2 00					.byte	$e2,$00
.232e	20 32 59	jsr $5932		jsr	FloatPower
.2331	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.99861226
>2334	66 43 e9 7f				.dword	$7fe94366
>2338	e2 00					.byte	$e2,$00
.233a	20 87 50	jsr $5087		jsr	FloatSubtract
.233d	20 51 50	jsr $5051		jsr	FPAbs
.2340	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.01
>2343	1f 85 eb 51				.dword	$51eb851f
>2347	db 00					.byte	$db,$00
.2349	20 4e 51	jsr $514e		jsr	FloatCompare
.234c	20 44 50	jsr $5044		jsr	FPAssertCheck
.234f	20 54 50	jsr $5054		jsr	FPPushConstant	; 4.52449988
>2352	fc 59 64 48				.dword	$486459fc
>2356	e4 00					.byte	$e4,$00
.2358	20 2b 56	jsr $562b		jsr	FloatNegate
.235b	20 54 50	jsr $5054		jsr	FPPushConstant	; -4.52449988
>235e	fc 59 64 48				.dword	$486459fc
>2362	e4 80					.byte	$e4,$80
.2364	20 4e 51	jsr $514e		jsr	FloatCompare
.2367	20 18 51	jsr $5118		jsr	CompareEqual
.236a	20 44 50	jsr $5044		jsr	FPAssertCheck
.236d	20 54 50	jsr $5054		jsr	FPPushConstant	; 4.52449988
>2370	fc 59 64 48				.dword	$486459fc
>2374	e4 00					.byte	$e4,$00
.2376	20 a4 52	jsr $52a4		jsr	FloatIntegerPart
.2379	20 54 50	jsr $5054		jsr	FPPushConstant	; 4
>237c	04 00 00 00				.dword	$00000004
>2380	00 00					.byte	$00,$00
.2382	20 4e 51	jsr $514e		jsr	FloatCompare
.2385	20 18 51	jsr $5118		jsr	CompareEqual
.2388	20 44 50	jsr $5044		jsr	FPAssertCheck
.238b	20 54 50	jsr $5054		jsr	FPPushConstant	; 12.63
>238e	71 3d 0a 65				.dword	$650a3d71
>2392	e5 00					.byte	$e5,$00
.2394	20 4f 59	jsr $594f		jsr	FloatSine
.2397	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.06358646
>239a	19 cf 1c 41				.dword	$411ccf19
>239e	de 00					.byte	$de,$00
.23a0	20 87 50	jsr $5087		jsr	FloatSubtract
.23a3	20 51 50	jsr $5051		jsr	FPAbs
.23a6	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>23a9	4c 37 89 41				.dword	$4189374c
>23ad	d8 00					.byte	$d8,$00
.23af	20 4e 51	jsr $514e		jsr	FloatCompare
.23b2	20 2e 51	jsr $512e		jsr	CompareLess
.23b5	20 44 50	jsr $5044		jsr	FPAssertCheck
.23b8	20 54 50	jsr $5054		jsr	FPPushConstant	; 12.63
>23bb	71 3d 0a 65				.dword	$650a3d71
>23bf	e5 00					.byte	$e5,$00
.23c1	20 af 57	jsr $57af		jsr	FloatCosine
.23c4	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.99797633
>23c7	3a b0 bd 7f				.dword	$7fbdb03a
>23cb	e1 00					.byte	$e1,$00
.23cd	20 87 50	jsr $5087		jsr	FloatSubtract
.23d0	20 51 50	jsr $5051		jsr	FPAbs
.23d3	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>23d6	4c 37 89 41				.dword	$4189374c
>23da	d8 00					.byte	$d8,$00
.23dc	20 4e 51	jsr $514e		jsr	FloatCompare
.23df	20 2e 51	jsr $512e		jsr	CompareLess
.23e2	20 44 50	jsr $5044		jsr	FPAssertCheck
.23e5	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.32
>23e8	1f 85 eb 51				.dword	$51eb851f
>23ec	e0 00					.byte	$e0,$00
.23ee	20 c0 59	jsr $59c0		jsr	FloatTangent
.23f1	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.33138941
>23f4	b6 ef d5 54				.dword	$54d5efb6
>23f8	e0 00					.byte	$e0,$00
.23fa	20 87 50	jsr $5087		jsr	FloatSubtract
.23fd	20 51 50	jsr $5051		jsr	FPAbs
.2400	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>2403	4c 37 89 41				.dword	$4189374c
>2407	d8 00					.byte	$d8,$00
.2409	20 4e 51	jsr $514e		jsr	FloatCompare
.240c	20 44 50	jsr $5044		jsr	FPAssertCheck
.240f	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.17
>2412	71 3d 0a 57				.dword	$570a3d71
>2416	df 00					.byte	$df,$00
.2418	20 94 56	jsr $5694		jsr	FloatArcTan
.241b	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.16839016
>241e	2c 3c 37 56				.dword	$56373c2c
>2422	df 00					.byte	$df,$00
.2424	20 87 50	jsr $5087		jsr	FloatSubtract
.2427	20 51 50	jsr $5051		jsr	FPAbs
.242a	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>242d	4c 37 89 41				.dword	$4189374c
>2431	d8 00					.byte	$d8,$00
.2433	20 4e 51	jsr $514e		jsr	FloatCompare
.2436	20 44 50	jsr $5044		jsr	FPAssertCheck
.2439	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.65
>243c	9a 99 99 69				.dword	$6999999a
>2440	e2 00					.byte	$e2,$00
.2442	20 bb 57	jsr $57bb		jsr	FloatExponent
.2445	20 54 50	jsr $5054		jsr	FPPushConstant	; 5.20697983
>2448	15 ca 4f 53				.dword	$534fca15
>244c	e4 00					.byte	$e4,$00
.244e	20 87 50	jsr $5087		jsr	FloatSubtract
.2451	20 51 50	jsr $5051		jsr	FPAbs
.2454	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>2457	4c 37 89 41				.dword	$4189374c
>245b	d8 00					.byte	$d8,$00
.245d	20 4e 51	jsr $514e		jsr	FloatCompare
.2460	20 44 50	jsr $5044		jsr	FPAssertCheck
.2463	20 54 50	jsr $5054		jsr	FPPushConstant	; 7.99
>2466	3d 0a d7 7f				.dword	$7fd70a3d
>246a	e4 00					.byte	$e4,$00
.246c	20 be 58	jsr $58be		jsr	FloatLogarithm
.246f	20 54 50	jsr $5054		jsr	FPPushConstant	; 2.07819076
>2472	e9 89 80 42				.dword	$428089e9
>2476	e3 00					.byte	$e3,$00
.2478	20 87 50	jsr $5087		jsr	FloatSubtract
.247b	20 51 50	jsr $5051		jsr	FPAbs
.247e	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>2481	4c 37 89 41				.dword	$4189374c
>2485	d8 00					.byte	$d8,$00
.2487	20 4e 51	jsr $514e		jsr	FloatCompare
.248a	20 44 50	jsr $5044		jsr	FPAssertCheck
.248d	20 54 50	jsr $5054		jsr	FPPushConstant	; 22.66
>2490	0a d7 a3 5a				.dword	$5aa3d70a
>2494	e6 00					.byte	$e6,$00
.2496	20 b4 59	jsr $59b4		jsr	FloatSquareRoot
.2499	20 54 50	jsr $5054		jsr	FPPushConstant	; 4.76025209
>249c	18 fe 29 4c				.dword	$4c29fe18
>24a0	e4 00					.byte	$e4,$00
.24a2	20 87 50	jsr $5087		jsr	FloatSubtract
.24a5	20 51 50	jsr $5051		jsr	FPAbs
.24a8	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>24ab	4c 37 89 41				.dword	$4189374c
>24af	d8 00					.byte	$d8,$00
.24b1	20 4e 51	jsr $514e		jsr	FloatCompare
.24b4	20 44 50	jsr $5044		jsr	FPAssertCheck
.24b7	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.62666667
>24ba	0b 9d 36 50				.dword	$50369d0b
>24be	e1 00					.byte	$e1,$00
.24c0	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.7
>24c3	9a 99 99 59				.dword	$5999999a
>24c7	e1 00					.byte	$e1,$00
.24c9	20 32 59	jsr $5932		jsr	FloatPower
.24cc	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.72098398
>24cf	fc 33 49 5c				.dword	$5c4933fc
>24d3	e1 00					.byte	$e1,$00
.24d5	20 87 50	jsr $5087		jsr	FloatSubtract
.24d8	20 51 50	jsr $5051		jsr	FPAbs
.24db	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.01
>24de	1f 85 eb 51				.dword	$51eb851f
>24e2	db 00					.byte	$db,$00
.24e4	20 4e 51	jsr $514e		jsr	FloatCompare
.24e7	20 44 50	jsr $5044		jsr	FPAssertCheck
.24ea	20 54 50	jsr $5054		jsr	FPPushConstant	; -6.4906455
>24ed	19 af d9 67				.dword	$67d9af19
>24f1	e4 80					.byte	$e4,$80
.24f3	20 2b 56	jsr $562b		jsr	FloatNegate
.24f6	20 54 50	jsr $5054		jsr	FPPushConstant	; 6.4906455
>24f9	19 af d9 67				.dword	$67d9af19
>24fd	e4 00					.byte	$e4,$00
.24ff	20 4e 51	jsr $514e		jsr	FloatCompare
.2502	20 18 51	jsr $5118		jsr	CompareEqual
.2505	20 44 50	jsr $5044		jsr	FPAssertCheck
.2508	20 54 50	jsr $5054		jsr	FPPushConstant	; -6.4906455
>250b	19 af d9 67				.dword	$67d9af19
>250f	e4 80					.byte	$e4,$80
.2511	20 a4 52	jsr $52a4		jsr	FloatIntegerPart
.2514	20 54 50	jsr $5054		jsr	FPPushConstant	; -6
>2517	06 00 00 00				.dword	$00000006
>251b	00 80					.byte	$00,$80
.251d	20 4e 51	jsr $514e		jsr	FloatCompare
.2520	20 18 51	jsr $5118		jsr	CompareEqual
.2523	20 44 50	jsr $5044		jsr	FPAssertCheck
.2526	20 54 50	jsr $5054		jsr	FPPushConstant	; 10.57
>2529	29 5c 8f 54				.dword	$548f5c29
>252d	e5 00					.byte	$e5,$00
.252f	20 4f 59	jsr $594f		jsr	FloatSine
.2532	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.91080179
>2535	2f 27 95 74				.dword	$7495272f
>2539	e1 80					.byte	$e1,$80
.253b	20 87 50	jsr $5087		jsr	FloatSubtract
.253e	20 51 50	jsr $5051		jsr	FPAbs
.2541	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>2544	4c 37 89 41				.dword	$4189374c
>2548	d8 00					.byte	$d8,$00
.254a	20 4e 51	jsr $514e		jsr	FloatCompare
.254d	20 2e 51	jsr $512e		jsr	CompareLess
.2550	20 44 50	jsr $5044		jsr	FPAssertCheck
.2553	20 54 50	jsr $5054		jsr	FPPushConstant	; 10.57
>2556	29 5c 8f 54				.dword	$548f5c29
>255a	e5 00					.byte	$e5,$00
.255c	20 af 57	jsr $57af		jsr	FloatCosine
.255f	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.41284391
>2562	74 23 b0 69				.dword	$69b02374
>2566	e0 80					.byte	$e0,$80
.2568	20 87 50	jsr $5087		jsr	FloatSubtract
.256b	20 51 50	jsr $5051		jsr	FPAbs
.256e	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>2571	4c 37 89 41				.dword	$4189374c
>2575	d8 00					.byte	$d8,$00
.2577	20 4e 51	jsr $514e		jsr	FloatCompare
.257a	20 2e 51	jsr $512e		jsr	CompareLess
.257d	20 44 50	jsr $5044		jsr	FPAssertCheck
.2580	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.2
>2583	66 66 66 66				.dword	$66666666
>2587	df 00					.byte	$df,$00
.2589	20 c0 59	jsr $59c0		jsr	FloatTangent
.258c	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.20271004
>258f	41 9c c9 67				.dword	$67c99c41
>2593	df 00					.byte	$df,$00
.2595	20 87 50	jsr $5087		jsr	FloatSubtract
.2598	20 51 50	jsr $5051		jsr	FPAbs
.259b	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>259e	4c 37 89 41				.dword	$4189374c
>25a2	d8 00					.byte	$d8,$00
.25a4	20 4e 51	jsr $514e		jsr	FloatCompare
.25a7	20 44 50	jsr $5044		jsr	FPAssertCheck
.25aa	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.103
>25ad	fe d4 78 69				.dword	$6978d4fe
>25b1	de 00					.byte	$de,$00
.25b3	20 94 56	jsr $5694		jsr	FloatArcTan
.25b6	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.10263806
>25b9	9c f3 19 69				.dword	$6919f39c
>25bd	de 00					.byte	$de,$00
.25bf	20 87 50	jsr $5087		jsr	FloatSubtract
.25c2	20 51 50	jsr $5051		jsr	FPAbs
.25c5	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>25c8	4c 37 89 41				.dword	$4189374c
>25cc	d8 00					.byte	$d8,$00
.25ce	20 4e 51	jsr $514e		jsr	FloatCompare
.25d1	20 44 50	jsr $5044		jsr	FPAssertCheck
.25d4	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.15
>25d7	cd cc cc 4c				.dword	$4ccccccd
>25db	df 80					.byte	$df,$80
.25dd	20 bb 57	jsr $57bb		jsr	FloatExponent
.25e0	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.86070798
>25e3	d9 ad 2b 6e				.dword	$6e2badd9
>25e7	e1 00					.byte	$e1,$00
.25e9	20 87 50	jsr $5087		jsr	FloatSubtract
.25ec	20 51 50	jsr $5051		jsr	FPAbs
.25ef	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>25f2	4c 37 89 41				.dword	$4189374c
>25f6	d8 00					.byte	$d8,$00
.25f8	20 4e 51	jsr $514e		jsr	FloatCompare
.25fb	20 44 50	jsr $5044		jsr	FPAssertCheck
.25fe	20 54 50	jsr $5054		jsr	FPPushConstant	; 21.81
>2601	a4 70 3d 57				.dword	$573d70a4
>2605	e6 00					.byte	$e6,$00
.2607	20 be 58	jsr $58be		jsr	FloatLogarithm
.260a	20 54 50	jsr $5054		jsr	FPPushConstant	; 3.08236858
>260d	6f c3 a2 62				.dword	$62a2c36f
>2611	e3 00					.byte	$e3,$00
.2613	20 87 50	jsr $5087		jsr	FloatSubtract
.2616	20 51 50	jsr $5051		jsr	FPAbs
.2619	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>261c	4c 37 89 41				.dword	$4189374c
>2620	d8 00					.byte	$d8,$00
.2622	20 4e 51	jsr $514e		jsr	FloatCompare
.2625	20 44 50	jsr $5044		jsr	FPAssertCheck
.2628	20 54 50	jsr $5054		jsr	FPPushConstant	; 8.19
>262b	b8 1e 85 41				.dword	$41851eb8
>262f	e5 00					.byte	$e5,$00
.2631	20 b4 59	jsr $59b4		jsr	FloatSquareRoot
.2634	20 54 50	jsr $5054		jsr	FPPushConstant	; 2.8618176
>2637	81 02 94 5b				.dword	$5b940281
>263b	e3 00					.byte	$e3,$00
.263d	20 87 50	jsr $5087		jsr	FloatSubtract
.2640	20 51 50	jsr $5051		jsr	FPAbs
.2643	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>2646	4c 37 89 41				.dword	$4189374c
>264a	d8 00					.byte	$d8,$00
.264c	20 4e 51	jsr $514e		jsr	FloatCompare
.264f	20 44 50	jsr $5044		jsr	FPAssertCheck
.2652	20 54 50	jsr $5054		jsr	FPPushConstant	; 2.44666667
>2655	e6 17 4b 4e				.dword	$4e4b17e6
>2659	e3 00					.byte	$e3,$00
.265b	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.7
>265e	9a 99 99 59				.dword	$5999999a
>2662	e1 00					.byte	$e1,$00
.2664	20 32 59	jsr $5932		jsr	FloatPower
.2667	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.87069232
>266a	48 6c b9 77				.dword	$77b96c48
>266e	e2 00					.byte	$e2,$00
.2670	20 87 50	jsr $5087		jsr	FloatSubtract
.2673	20 51 50	jsr $5051		jsr	FPAbs
.2676	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.01
>2679	1f 85 eb 51				.dword	$51eb851f
>267d	db 00					.byte	$db,$00
.267f	20 4e 51	jsr $514e		jsr	FloatCompare
.2682	20 44 50	jsr $5044		jsr	FPAssertCheck
.2685	20 54 50	jsr $5054		jsr	FPPushConstant	; -78.69328582
>2688	2e 7b b1 4e				.dword	$4eb17b2e
>268c	e8 80					.byte	$e8,$80
.268e	20 2b 56	jsr $562b		jsr	FloatNegate
.2691	20 54 50	jsr $5054		jsr	FPPushConstant	; 78.69328582
>2694	2e 7b b1 4e				.dword	$4eb17b2e
>2698	e8 00					.byte	$e8,$00
.269a	20 4e 51	jsr $514e		jsr	FloatCompare
.269d	20 18 51	jsr $5118		jsr	CompareEqual
.26a0	20 44 50	jsr $5044		jsr	FPAssertCheck
.26a3	20 54 50	jsr $5054		jsr	FPPushConstant	; -78.69328582
>26a6	2e 7b b1 4e				.dword	$4eb17b2e
>26aa	e8 80					.byte	$e8,$80
.26ac	20 a4 52	jsr $52a4		jsr	FloatIntegerPart
.26af	20 54 50	jsr $5054		jsr	FPPushConstant	; -78
>26b2	4e 00 00 00				.dword	$0000004e
>26b6	00 80					.byte	$00,$80
.26b8	20 4e 51	jsr $514e		jsr	FloatCompare
.26bb	20 18 51	jsr $5118		jsr	CompareEqual
.26be	20 44 50	jsr $5044		jsr	FPAssertCheck
.26c1	20 54 50	jsr $5054		jsr	FPPushConstant	; -12.66
>26c4	14 ae 47 65				.dword	$6547ae14
>26c8	e5 80					.byte	$e5,$80
.26ca	20 4f 59	jsr $594f		jsr	FloatSine
.26cd	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.09349265
>26d0	89 89 bc 5f				.dword	$5fbc8989
>26d4	de 80					.byte	$de,$80
.26d6	20 87 50	jsr $5087		jsr	FloatSubtract
.26d9	20 51 50	jsr $5051		jsr	FPAbs
.26dc	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>26df	4c 37 89 41				.dword	$4189374c
>26e3	d8 00					.byte	$d8,$00
.26e5	20 4e 51	jsr $514e		jsr	FloatCompare
.26e8	20 2e 51	jsr $512e		jsr	CompareLess
.26eb	20 44 50	jsr $5044		jsr	FPAssertCheck
.26ee	20 54 50	jsr $5054		jsr	FPPushConstant	; -12.66
>26f1	14 ae 47 65				.dword	$6547ae14
>26f5	e5 80					.byte	$e5,$80
.26f7	20 af 57	jsr $57af		jsr	FloatCosine
.26fa	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.99561997
>26fd	a5 79 70 7f				.dword	$7f7079a5
>2701	e1 00					.byte	$e1,$00
.2703	20 87 50	jsr $5087		jsr	FloatSubtract
.2706	20 51 50	jsr $5051		jsr	FPAbs
.2709	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>270c	4c 37 89 41				.dword	$4189374c
>2710	d8 00					.byte	$d8,$00
.2712	20 4e 51	jsr $514e		jsr	FloatCompare
.2715	20 2e 51	jsr $512e		jsr	CompareLess
.2718	20 44 50	jsr $5044		jsr	FPAssertCheck
.271b	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.39
>271e	3d 0a d7 63				.dword	$63d70a3d
>2722	e0 00					.byte	$e0,$00
.2724	20 c0 59	jsr $59c0		jsr	FloatTangent
.2727	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.41105492
>272a	2e e5 3a 69				.dword	$693ae52e
>272e	e0 00					.byte	$e0,$00
.2730	20 87 50	jsr $5087		jsr	FloatSubtract
.2733	20 51 50	jsr $5051		jsr	FPAbs
.2736	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>2739	4c 37 89 41				.dword	$4189374c
>273d	d8 00					.byte	$d8,$00
.273f	20 4e 51	jsr $514e		jsr	FloatCompare
.2742	20 44 50	jsr $5044		jsr	FPAssertCheck
.2745	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.762
>2748	4c 37 89 61				.dword	$6189374c
>274c	e1 00					.byte	$e1,$00
.274e	20 94 56	jsr $5694		jsr	FloatArcTan
.2751	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.65113698
>2754	e1 74 58 53				.dword	$535874e1
>2758	e1 00					.byte	$e1,$00
.275a	20 87 50	jsr $5087		jsr	FloatSubtract
.275d	20 51 50	jsr $5051		jsr	FPAbs
.2760	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>2763	4c 37 89 41				.dword	$4189374c
>2767	d8 00					.byte	$d8,$00
.2769	20 4e 51	jsr $514e		jsr	FloatCompare
.276c	20 44 50	jsr $5044		jsr	FPAssertCheck
.276f	20 54 50	jsr $5054		jsr	FPPushConstant	; -1.26
>2772	0a d7 a3 50				.dword	$50a3d70a
>2776	e2 80					.byte	$e2,$80
.2778	20 bb 57	jsr $57bb		jsr	FloatExponent
.277b	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.28365403
>277e	ee 8c 9d 48				.dword	$489d8cee
>2782	e0 00					.byte	$e0,$00
.2784	20 87 50	jsr $5087		jsr	FloatSubtract
.2787	20 51 50	jsr $5051		jsr	FPAbs
.278a	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>278d	4c 37 89 41				.dword	$4189374c
>2791	d8 00					.byte	$d8,$00
.2793	20 4e 51	jsr $514e		jsr	FloatCompare
.2796	20 44 50	jsr $5044		jsr	FPAssertCheck
.2799	20 54 50	jsr $5054		jsr	FPPushConstant	; 23.51
>279c	71 3d 0a 5e				.dword	$5e0a3d71
>27a0	e6 00					.byte	$e6,$00
.27a2	20 be 58	jsr $58be		jsr	FloatLogarithm
.27a5	20 54 50	jsr $5054		jsr	FPPushConstant	; 3.15742586
>27a8	f5 a1 09 65				.dword	$6509a1f5
>27ac	e3 00					.byte	$e3,$00
.27ae	20 87 50	jsr $5087		jsr	FloatSubtract
.27b1	20 51 50	jsr $5051		jsr	FPAbs
.27b4	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>27b7	4c 37 89 41				.dword	$4189374c
>27bb	d8 00					.byte	$d8,$00
.27bd	20 4e 51	jsr $514e		jsr	FloatCompare
.27c0	20 44 50	jsr $5044		jsr	FPAssertCheck
.27c3	20 54 50	jsr $5054		jsr	FPPushConstant	; 23.68
>27c6	ec 51 b8 5e				.dword	$5eb851ec
>27ca	e6 00					.byte	$e6,$00
.27cc	20 b4 59	jsr $59b4		jsr	FloatSquareRoot
.27cf	20 54 50	jsr $5054		jsr	FPPushConstant	; 4.86621002
>27d2	0a ff db 4d				.dword	$4ddbff0a
>27d6	e4 00					.byte	$e4,$00
.27d8	20 87 50	jsr $5087		jsr	FloatSubtract
.27db	20 51 50	jsr $5051		jsr	FPAbs
.27de	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>27e1	4c 37 89 41				.dword	$4189374c
>27e5	d8 00					.byte	$d8,$00
.27e7	20 4e 51	jsr $514e		jsr	FloatCompare
.27ea	20 44 50	jsr $5044		jsr	FPAssertCheck
.27ed	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.86
>27f0	e1 7a 14 6e				.dword	$6e147ae1
>27f4	e1 00					.byte	$e1,$00
.27f6	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.6
>27f9	66 66 66 66				.dword	$66666666
>27fd	e2 00					.byte	$e2,$00
.27ff	20 32 59	jsr $5932		jsr	FloatPower
.2802	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.78559285
>2805	77 4e 8e 64				.dword	$648e4e77
>2809	e1 00					.byte	$e1,$00
.280b	20 87 50	jsr $5087		jsr	FloatSubtract
.280e	20 51 50	jsr $5051		jsr	FPAbs
.2811	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.01
>2814	1f 85 eb 51				.dword	$51eb851f
>2818	db 00					.byte	$db,$00
.281a	20 4e 51	jsr $514e		jsr	FloatCompare
.281d	20 44 50	jsr $5044		jsr	FPAssertCheck
.2820	20 54 50	jsr $5054		jsr	FPPushConstant	; 41.85721228
>2823	87 e4 b6 53				.dword	$53b6e487
>2827	e7 00					.byte	$e7,$00
.2829	20 2b 56	jsr $562b		jsr	FloatNegate
.282c	20 54 50	jsr $5054		jsr	FPPushConstant	; -41.85721228
>282f	87 e4 b6 53				.dword	$53b6e487
>2833	e7 80					.byte	$e7,$80
.2835	20 4e 51	jsr $514e		jsr	FloatCompare
.2838	20 18 51	jsr $5118		jsr	CompareEqual
.283b	20 44 50	jsr $5044		jsr	FPAssertCheck
.283e	20 54 50	jsr $5054		jsr	FPPushConstant	; 41.85721228
>2841	87 e4 b6 53				.dword	$53b6e487
>2845	e7 00					.byte	$e7,$00
.2847	20 a4 52	jsr $52a4		jsr	FloatIntegerPart
.284a	20 54 50	jsr $5054		jsr	FPPushConstant	; 41
>284d	29 00 00 00				.dword	$00000029
>2851	00 00					.byte	$00,$00
.2853	20 4e 51	jsr $514e		jsr	FloatCompare
.2856	20 18 51	jsr $5118		jsr	CompareEqual
.2859	20 44 50	jsr $5044		jsr	FPAssertCheck
.285c	20 54 50	jsr $5054		jsr	FPPushConstant	; -12.58
>285f	0a d7 a3 64				.dword	$64a3d70a
>2863	e5 80					.byte	$e5,$80
.2865	20 4f 59	jsr $594f		jsr	FloatSine
.2868	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.01362896
>286b	2f 00 a6 6f				.dword	$6fa6002f
>286f	db 80					.byte	$db,$80
.2871	20 87 50	jsr $5087		jsr	FloatSubtract
.2874	20 51 50	jsr $5051		jsr	FPAbs
.2877	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>287a	4c 37 89 41				.dword	$4189374c
>287e	d8 00					.byte	$d8,$00
.2880	20 4e 51	jsr $514e		jsr	FloatCompare
.2883	20 2e 51	jsr $512e		jsr	CompareLess
.2886	20 44 50	jsr $5044		jsr	FPAssertCheck
.2889	20 54 50	jsr $5054		jsr	FPPushConstant	; -12.58
>288c	0a d7 a3 64				.dword	$64a3d70a
>2890	e5 80					.byte	$e5,$80
.2892	20 af 57	jsr $57af		jsr	FloatCosine
.2895	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.99990712
>2898	de f4 fc 7f				.dword	$7ffcf4de
>289c	e1 00					.byte	$e1,$00
.289e	20 87 50	jsr $5087		jsr	FloatSubtract
.28a1	20 51 50	jsr $5051		jsr	FPAbs
.28a4	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>28a7	4c 37 89 41				.dword	$4189374c
>28ab	d8 00					.byte	$d8,$00
.28ad	20 4e 51	jsr $514e		jsr	FloatCompare
.28b0	20 2e 51	jsr $512e		jsr	CompareLess
.28b3	20 44 50	jsr $5044		jsr	FPAssertCheck
.28b6	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.13
>28b9	29 5c 8f 42				.dword	$428f5c29
>28bd	df 00					.byte	$df,$00
.28bf	20 c0 59	jsr $59c0		jsr	FloatTangent
.28c2	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.13073732
>28c5	84 00 f0 42				.dword	$42f00084
>28c9	df 00					.byte	$df,$00
.28cb	20 87 50	jsr $5087		jsr	FloatSubtract
.28ce	20 51 50	jsr $5051		jsr	FPAbs
.28d1	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>28d4	4c 37 89 41				.dword	$4189374c
>28d8	d8 00					.byte	$d8,$00
.28da	20 4e 51	jsr $514e		jsr	FloatCompare
.28dd	20 44 50	jsr $5044		jsr	FPAssertCheck
.28e0	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.261
>28e3	58 39 b4 50				.dword	$50b43958
>28e7	e2 00					.byte	$e2,$00
.28e9	20 94 56	jsr $5694		jsr	FloatArcTan
.28ec	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.90032513
>28ef	97 da 3d 73				.dword	$733dda97
>28f3	e1 00					.byte	$e1,$00
.28f5	20 87 50	jsr $5087		jsr	FloatSubtract
.28f8	20 51 50	jsr $5051		jsr	FPAbs
.28fb	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>28fe	4c 37 89 41				.dword	$4189374c
>2902	d8 00					.byte	$d8,$00
.2904	20 4e 51	jsr $514e		jsr	FloatCompare
.2907	20 44 50	jsr $5044		jsr	FPAssertCheck
.290a	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.73
>290d	ec 51 b8 6e				.dword	$6eb851ec
>2911	e2 00					.byte	$e2,$00
.2913	20 bb 57	jsr $57bb		jsr	FloatExponent
.2916	20 54 50	jsr $5054		jsr	FPPushConstant	; 5.64065391
>2919	50 1e 40 5a				.dword	$5a401e50
>291d	e4 00					.byte	$e4,$00
.291f	20 87 50	jsr $5087		jsr	FloatSubtract
.2922	20 51 50	jsr $5051		jsr	FPAbs
.2925	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>2928	4c 37 89 41				.dword	$4189374c
>292c	d8 00					.byte	$d8,$00
.292e	20 4e 51	jsr $514e		jsr	FloatCompare
.2931	20 44 50	jsr $5044		jsr	FPAssertCheck
.2934	20 54 50	jsr $5054		jsr	FPPushConstant	; 87.04
>2937	71 3d 0a 57				.dword	$570a3d71
>293b	e8 00					.byte	$e8,$00
.293d	20 be 58	jsr $58be		jsr	FloatLogarithm
.2940	20 54 50	jsr $5054		jsr	FPPushConstant	; 4.46636778
>2943	10 3e 76 47				.dword	$47763e10
>2947	e4 00					.byte	$e4,$00
.2949	20 87 50	jsr $5087		jsr	FloatSubtract
.294c	20 51 50	jsr $5051		jsr	FPAbs
.294f	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>2952	4c 37 89 41				.dword	$4189374c
>2956	d8 00					.byte	$d8,$00
.2958	20 4e 51	jsr $514e		jsr	FloatCompare
.295b	20 44 50	jsr $5044		jsr	FPAssertCheck
.295e	20 54 50	jsr $5054		jsr	FPPushConstant	; 95.65
>2961	66 66 a6 5f				.dword	$5fa66666
>2965	e8 00					.byte	$e8,$00
.2967	20 b4 59	jsr $59b4		jsr	FloatSquareRoot
.296a	20 54 50	jsr $5054		jsr	FPPushConstant	; 9.7800818
>296d	87 9b 3d 4e				.dword	$4e3d9b87
>2971	e5 00					.byte	$e5,$00
.2973	20 87 50	jsr $5087		jsr	FloatSubtract
.2976	20 51 50	jsr $5051		jsr	FPAbs
.2979	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>297c	4c 37 89 41				.dword	$4189374c
>2980	d8 00					.byte	$d8,$00
.2982	20 4e 51	jsr $514e		jsr	FloatCompare
.2985	20 44 50	jsr $5044		jsr	FPAssertCheck
.2988	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.73666667
>298b	ec 17 4b 5e				.dword	$5e4b17ec
>298f	e1 00					.byte	$e1,$00
.2991	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.9
>2994	9a 99 99 79				.dword	$7999999a
>2998	e2 00					.byte	$e2,$00
.299a	20 32 59	jsr $5932		jsr	FloatPower
.299d	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.55951913
>29a0	a6 52 9e 47				.dword	$479e52a6
>29a4	e1 00					.byte	$e1,$00
.29a6	20 87 50	jsr $5087		jsr	FloatSubtract
.29a9	20 51 50	jsr $5051		jsr	FPAbs
.29ac	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.01
>29af	1f 85 eb 51				.dword	$51eb851f
>29b3	db 00					.byte	$db,$00
.29b5	20 4e 51	jsr $514e		jsr	FloatCompare
.29b8	20 44 50	jsr $5044		jsr	FPAssertCheck
.29bb	20 54 50	jsr $5054		jsr	FPPushConstant	; -76.57892605
>29be	7f 34 94 4c				.dword	$4c94347f
>29c2	e8 80					.byte	$e8,$80
.29c4	20 2b 56	jsr $562b		jsr	FloatNegate
.29c7	20 54 50	jsr $5054		jsr	FPPushConstant	; 76.57892605
>29ca	7f 34 94 4c				.dword	$4c94347f
>29ce	e8 00					.byte	$e8,$00
.29d0	20 4e 51	jsr $514e		jsr	FloatCompare
.29d3	20 18 51	jsr $5118		jsr	CompareEqual
.29d6	20 44 50	jsr $5044		jsr	FPAssertCheck
.29d9	20 54 50	jsr $5054		jsr	FPPushConstant	; -76.57892605
>29dc	7f 34 94 4c				.dword	$4c94347f
>29e0	e8 80					.byte	$e8,$80
.29e2	20 a4 52	jsr $52a4		jsr	FloatIntegerPart
.29e5	20 54 50	jsr $5054		jsr	FPPushConstant	; -76
>29e8	4c 00 00 00				.dword	$0000004c
>29ec	00 80					.byte	$00,$80
.29ee	20 4e 51	jsr $514e		jsr	FloatCompare
.29f1	20 18 51	jsr $5118		jsr	CompareEqual
.29f4	20 44 50	jsr $5044		jsr	FPAssertCheck
.29f7	20 54 50	jsr $5054		jsr	FPPushConstant	; 9.51
>29fa	e1 7a 14 4c				.dword	$4c147ae1
>29fe	e5 00					.byte	$e5,$00
.2a00	20 4f 59	jsr $594f		jsr	FloatSine
.2a03	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.08511892
>2a06	07 6a 29 57				.dword	$57296a07
>2a0a	de 80					.byte	$de,$80
.2a0c	20 87 50	jsr $5087		jsr	FloatSubtract
.2a0f	20 51 50	jsr $5051		jsr	FPAbs
.2a12	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>2a15	4c 37 89 41				.dword	$4189374c
>2a19	d8 00					.byte	$d8,$00
.2a1b	20 4e 51	jsr $514e		jsr	FloatCompare
.2a1e	20 2e 51	jsr $512e		jsr	CompareLess
.2a21	20 44 50	jsr $5044		jsr	FPAssertCheck
.2a24	20 54 50	jsr $5054		jsr	FPPushConstant	; 9.51
>2a27	e1 7a 14 4c				.dword	$4c147ae1
>2a2b	e5 00					.byte	$e5,$00
.2a2d	20 af 57	jsr $57af		jsr	FloatCosine
.2a30	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.9963708
>2a33	10 14 89 7f				.dword	$7f891410
>2a37	e1 80					.byte	$e1,$80
.2a39	20 87 50	jsr $5087		jsr	FloatSubtract
.2a3c	20 51 50	jsr $5051		jsr	FPAbs
.2a3f	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>2a42	4c 37 89 41				.dword	$4189374c
>2a46	d8 00					.byte	$d8,$00
.2a48	20 4e 51	jsr $514e		jsr	FloatCompare
.2a4b	20 2e 51	jsr $512e		jsr	CompareLess
.2a4e	20 44 50	jsr $5044		jsr	FPAssertCheck
.2a51	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.36
>2a54	c3 f5 28 5c				.dword	$5c28f5c3
>2a58	e0 00					.byte	$e0,$00
.2a5a	20 c0 59	jsr $59c0		jsr	FloatTangent
.2a5d	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.37640285
>2a60	eb ef 5b 60				.dword	$605befeb
>2a64	e0 00					.byte	$e0,$00
.2a66	20 87 50	jsr $5087		jsr	FloatSubtract
.2a69	20 51 50	jsr $5051		jsr	FPAbs
.2a6c	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>2a6f	4c 37 89 41				.dword	$4189374c
>2a73	d8 00					.byte	$d8,$00
.2a75	20 4e 51	jsr $514e		jsr	FloatCompare
.2a78	20 44 50	jsr $5044		jsr	FPAssertCheck
.2a7b	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.111
>2a7e	e7 fb a9 71				.dword	$71a9fbe7
>2a82	de 00					.byte	$de,$00
.2a84	20 94 56	jsr $5694		jsr	FloatArcTan
.2a87	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.11054746
>2a8a	75 5a 33 71				.dword	$71335a75
>2a8e	de 00					.byte	$de,$00
.2a90	20 87 50	jsr $5087		jsr	FloatSubtract
.2a93	20 51 50	jsr $5051		jsr	FPAbs
.2a96	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>2a99	4c 37 89 41				.dword	$4189374c
>2a9d	d8 00					.byte	$d8,$00
.2a9f	20 4e 51	jsr $514e		jsr	FloatCompare
.2aa2	20 44 50	jsr $5044		jsr	FPAssertCheck
.2aa5	20 54 50	jsr $5054		jsr	FPPushConstant	; -1.26
>2aa8	0a d7 a3 50				.dword	$50a3d70a
>2aac	e2 80					.byte	$e2,$80
.2aae	20 bb 57	jsr $57bb		jsr	FloatExponent
.2ab1	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.28365403
>2ab4	ee 8c 9d 48				.dword	$489d8cee
>2ab8	e0 00					.byte	$e0,$00
.2aba	20 87 50	jsr $5087		jsr	FloatSubtract
.2abd	20 51 50	jsr $5051		jsr	FPAbs
.2ac0	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>2ac3	4c 37 89 41				.dword	$4189374c
>2ac7	d8 00					.byte	$d8,$00
.2ac9	20 4e 51	jsr $514e		jsr	FloatCompare
.2acc	20 44 50	jsr $5044		jsr	FPAssertCheck
.2acf	20 54 50	jsr $5054		jsr	FPPushConstant	; 15.1
>2ad2	cd cc cc 78				.dword	$78cccccd
>2ad6	e5 00					.byte	$e5,$00
.2ad8	20 be 58	jsr $58be		jsr	FloatLogarithm
.2adb	20 54 50	jsr $5054		jsr	FPPushConstant	; 2.71469474
>2ade	81 c7 de 56				.dword	$56dec781
>2ae2	e3 00					.byte	$e3,$00
.2ae4	20 87 50	jsr $5087		jsr	FloatSubtract
.2ae7	20 51 50	jsr $5051		jsr	FPAbs
.2aea	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>2aed	4c 37 89 41				.dword	$4189374c
>2af1	d8 00					.byte	$d8,$00
.2af3	20 4e 51	jsr $514e		jsr	FloatCompare
.2af6	20 44 50	jsr $5044		jsr	FPAssertCheck
.2af9	20 54 50	jsr $5054		jsr	FPPushConstant	; 53.52
>2afc	71 3d 0a 6b				.dword	$6b0a3d71
>2b00	e7 00					.byte	$e7,$00
.2b02	20 b4 59	jsr $59b4		jsr	FloatSquareRoot
.2b05	20 54 50	jsr $5054		jsr	FPPushConstant	; 7.31573646
>2b08	ad 41 0d 75				.dword	$750d41ad
>2b0c	e4 00					.byte	$e4,$00
.2b0e	20 87 50	jsr $5087		jsr	FloatSubtract
.2b11	20 51 50	jsr $5051		jsr	FPAbs
.2b14	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>2b17	4c 37 89 41				.dword	$4189374c
>2b1b	d8 00					.byte	$d8,$00
.2b1d	20 4e 51	jsr $514e		jsr	FloatCompare
.2b20	20 44 50	jsr $5044		jsr	FPAssertCheck
.2b23	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.55333333
>2b26	66 a0 d3 46				.dword	$46d3a066
>2b2a	e1 00					.byte	$e1,$00
.2b2c	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.3
>2b2f	cd cc cc 4c				.dword	$4ccccccd
>2b33	e0 00					.byte	$e0,$00
.2b35	20 32 59	jsr $5932		jsr	FloatPower
.2b38	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.83732884
>2b3b	68 97 2d 6b				.dword	$6b2d9768
>2b3f	e1 00					.byte	$e1,$00
.2b41	20 87 50	jsr $5087		jsr	FloatSubtract
.2b44	20 51 50	jsr $5051		jsr	FPAbs
.2b47	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.01
>2b4a	1f 85 eb 51				.dword	$51eb851f
>2b4e	db 00					.byte	$db,$00
.2b50	20 4e 51	jsr $514e		jsr	FloatCompare
.2b53	20 44 50	jsr $5044		jsr	FPAssertCheck
.2b56	20 54 50	jsr $5054		jsr	FPPushConstant	; 38.23746659
>2b59	39 95 79 4c				.dword	$4c799539
>2b5d	e7 00					.byte	$e7,$00
.2b5f	20 2b 56	jsr $562b		jsr	FloatNegate
.2b62	20 54 50	jsr $5054		jsr	FPPushConstant	; -38.23746659
>2b65	39 95 79 4c				.dword	$4c799539
>2b69	e7 80					.byte	$e7,$80
.2b6b	20 4e 51	jsr $514e		jsr	FloatCompare
.2b6e	20 18 51	jsr $5118		jsr	CompareEqual
.2b71	20 44 50	jsr $5044		jsr	FPAssertCheck
.2b74	20 54 50	jsr $5054		jsr	FPPushConstant	; 38.23746659
>2b77	39 95 79 4c				.dword	$4c799539
>2b7b	e7 00					.byte	$e7,$00
.2b7d	20 a4 52	jsr $52a4		jsr	FloatIntegerPart
.2b80	20 54 50	jsr $5054		jsr	FPPushConstant	; 38
>2b83	26 00 00 00				.dword	$00000026
>2b87	00 00					.byte	$00,$00
.2b89	20 4e 51	jsr $514e		jsr	FloatCompare
.2b8c	20 18 51	jsr $5118		jsr	CompareEqual
.2b8f	20 44 50	jsr $5044		jsr	FPAssertCheck
.2b92	20 54 50	jsr $5054		jsr	FPPushConstant	; 16.44
>2b95	5c 8f c2 41				.dword	$41c28f5c
>2b99	e6 00					.byte	$e6,$00
.2b9b	20 4f 59	jsr $594f		jsr	FloatSine
.2b9e	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.66838597
>2ba1	e5 ab 8d 55				.dword	$558dabe5
>2ba5	e1 80					.byte	$e1,$80
.2ba7	20 87 50	jsr $5087		jsr	FloatSubtract
.2baa	20 51 50	jsr $5051		jsr	FPAbs
.2bad	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>2bb0	4c 37 89 41				.dword	$4189374c
>2bb4	d8 00					.byte	$d8,$00
.2bb6	20 4e 51	jsr $514e		jsr	FloatCompare
.2bb9	20 2e 51	jsr $512e		jsr	CompareLess
.2bbc	20 44 50	jsr $5044		jsr	FPAssertCheck
.2bbf	20 54 50	jsr $5054		jsr	FPPushConstant	; 16.44
>2bc2	5c 8f c2 41				.dword	$41c28f5c
>2bc6	e6 00					.byte	$e6,$00
.2bc8	20 af 57	jsr $57af		jsr	FloatCosine
.2bcb	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.74381462
>2bce	46 51 35 5f				.dword	$5f355146
>2bd2	e1 80					.byte	$e1,$80
.2bd4	20 87 50	jsr $5087		jsr	FloatSubtract
.2bd7	20 51 50	jsr $5051		jsr	FPAbs
.2bda	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>2bdd	4c 37 89 41				.dword	$4189374c
>2be1	d8 00					.byte	$d8,$00
.2be3	20 4e 51	jsr $514e		jsr	FloatCompare
.2be6	20 2e 51	jsr $512e		jsr	CompareLess
.2be9	20 44 50	jsr $5044		jsr	FPAssertCheck
.2bec	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.34
>2bef	71 3d 0a 57				.dword	$570a3d71
>2bf3	e0 00					.byte	$e0,$00
.2bf5	20 c0 59	jsr $59c0		jsr	FloatTangent
.2bf8	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.35373688
>2bfb	0b 80 8e 5a				.dword	$5a8e800b
>2bff	e0 00					.byte	$e0,$00
.2c01	20 87 50	jsr $5087		jsr	FloatSubtract
.2c04	20 51 50	jsr $5051		jsr	FPAbs
.2c07	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>2c0a	4c 37 89 41				.dword	$4189374c
>2c0e	d8 00					.byte	$d8,$00
.2c10	20 4e 51	jsr $514e		jsr	FloatCompare
.2c13	20 44 50	jsr $5044		jsr	FPAssertCheck
.2c16	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.12
>2c19	ae 47 e1 7a				.dword	$7ae147ae
>2c1d	de 00					.byte	$de,$00
.2c1f	20 94 56	jsr $5694		jsr	FloatArcTan
.2c22	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.11942893
>2c25	d2 93 4b 7a				.dword	$7a4b93d2
>2c29	de 00					.byte	$de,$00
.2c2b	20 87 50	jsr $5087		jsr	FloatSubtract
.2c2e	20 51 50	jsr $5051		jsr	FPAbs
.2c31	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>2c34	4c 37 89 41				.dword	$4189374c
>2c38	d8 00					.byte	$d8,$00
.2c3a	20 4e 51	jsr $514e		jsr	FloatCompare
.2c3d	20 44 50	jsr $5044		jsr	FPAssertCheck
.2c40	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.4
>2c43	66 66 66 66				.dword	$66666666
>2c47	e0 80					.byte	$e0,$80
.2c49	20 bb 57	jsr $57bb		jsr	FloatExponent
.2c4c	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.67032005
>2c4f	22 0c cd 55				.dword	$55cd0c22
>2c53	e1 00					.byte	$e1,$00
.2c55	20 87 50	jsr $5087		jsr	FloatSubtract
.2c58	20 51 50	jsr $5051		jsr	FPAbs
.2c5b	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>2c5e	4c 37 89 41				.dword	$4189374c
>2c62	d8 00					.byte	$d8,$00
.2c64	20 4e 51	jsr $514e		jsr	FloatCompare
.2c67	20 44 50	jsr $5044		jsr	FPAssertCheck
.2c6a	20 54 50	jsr $5054		jsr	FPPushConstant	; 95.92
>2c6d	1f 85 eb 5f				.dword	$5feb851f
>2c71	e8 00					.byte	$e8,$00
.2c73	20 be 58	jsr $58be		jsr	FloatLogarithm
.2c76	20 54 50	jsr $5054		jsr	FPPushConstant	; 4.56351451
>2c79	ca 27 04 49				.dword	$490427ca
>2c7d	e4 00					.byte	$e4,$00
.2c7f	20 87 50	jsr $5087		jsr	FloatSubtract
.2c82	20 51 50	jsr $5051		jsr	FPAbs
.2c85	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>2c88	4c 37 89 41				.dword	$4189374c
>2c8c	d8 00					.byte	$d8,$00
.2c8e	20 4e 51	jsr $514e		jsr	FloatCompare
.2c91	20 44 50	jsr $5044		jsr	FPAssertCheck
.2c94	20 54 50	jsr $5054		jsr	FPPushConstant	; 31.71
>2c97	3d 0a d7 7e				.dword	$7ed70a3d
>2c9b	e6 00					.byte	$e6,$00
.2c9d	20 b4 59	jsr $59b4		jsr	FloatSquareRoot
.2ca0	20 54 50	jsr $5054		jsr	FPPushConstant	; 5.63116329
>2ca3	ae 3e 19 5a				.dword	$5a193eae
>2ca7	e4 00					.byte	$e4,$00
.2ca9	20 87 50	jsr $5087		jsr	FloatSubtract
.2cac	20 51 50	jsr $5051		jsr	FPAbs
.2caf	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>2cb2	4c 37 89 41				.dword	$4189374c
>2cb6	d8 00					.byte	$d8,$00
.2cb8	20 4e 51	jsr $514e		jsr	FloatCompare
.2cbb	20 44 50	jsr $5044		jsr	FPAssertCheck
.2cbe	20 54 50	jsr $5054		jsr	FPPushConstant	; 2.70666667
>2cc1	6c 03 9d 56				.dword	$569d036c
>2cc5	e3 00					.byte	$e3,$00
.2cc7	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.5
>2cca	00 00 00 40				.dword	$40000000
>2cce	e1 00					.byte	$e1,$00
.2cd0	20 32 59	jsr $5932		jsr	FloatPower
.2cd3	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.64519502
>2cd6	0e e0 4a 69				.dword	$694ae00e
>2cda	e2 00					.byte	$e2,$00
.2cdc	20 87 50	jsr $5087		jsr	FloatSubtract
.2cdf	20 51 50	jsr $5051		jsr	FPAbs
.2ce2	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.01
>2ce5	1f 85 eb 51				.dword	$51eb851f
>2ce9	db 00					.byte	$db,$00
.2ceb	20 4e 51	jsr $514e		jsr	FloatCompare
.2cee	20 44 50	jsr $5044		jsr	FPAssertCheck
.2cf1	20 54 50	jsr $5054		jsr	FPPushConstant	; -53.13784725
>2cf4	ea 93 46 6a				.dword	$6a4693ea
>2cf8	e7 80					.byte	$e7,$80
.2cfa	20 2b 56	jsr $562b		jsr	FloatNegate
.2cfd	20 54 50	jsr $5054		jsr	FPPushConstant	; 53.13784725
>2d00	ea 93 46 6a				.dword	$6a4693ea
>2d04	e7 00					.byte	$e7,$00
.2d06	20 4e 51	jsr $514e		jsr	FloatCompare
.2d09	20 18 51	jsr $5118		jsr	CompareEqual
.2d0c	20 44 50	jsr $5044		jsr	FPAssertCheck
.2d0f	20 54 50	jsr $5054		jsr	FPPushConstant	; -53.13784725
>2d12	ea 93 46 6a				.dword	$6a4693ea
>2d16	e7 80					.byte	$e7,$80
.2d18	20 a4 52	jsr $52a4		jsr	FloatIntegerPart
.2d1b	20 54 50	jsr $5054		jsr	FPPushConstant	; -53
>2d1e	35 00 00 00				.dword	$00000035
>2d22	00 80					.byte	$00,$80
.2d24	20 4e 51	jsr $514e		jsr	FloatCompare
.2d27	20 18 51	jsr $5118		jsr	CompareEqual
.2d2a	20 44 50	jsr $5044		jsr	FPAssertCheck
.2d2d	20 54 50	jsr $5054		jsr	FPPushConstant	; 8.75
>2d30	00 00 00 46				.dword	$46000000
>2d34	e5 00					.byte	$e5,$00
.2d36	20 4f 59	jsr $594f		jsr	FloatSine
.2d39	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.62472395
>2d3c	53 f4 f6 4f				.dword	$4ff6f453
>2d40	e1 00					.byte	$e1,$00
.2d42	20 87 50	jsr $5087		jsr	FloatSubtract
.2d45	20 51 50	jsr $5051		jsr	FPAbs
.2d48	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>2d4b	4c 37 89 41				.dword	$4189374c
>2d4f	d8 00					.byte	$d8,$00
.2d51	20 4e 51	jsr $514e		jsr	FloatCompare
.2d54	20 2e 51	jsr $512e		jsr	CompareLess
.2d57	20 44 50	jsr $5044		jsr	FPAssertCheck
.2d5a	20 54 50	jsr $5054		jsr	FPPushConstant	; 8.75
>2d5d	00 00 00 46				.dword	$46000000
>2d61	e5 00					.byte	$e5,$00
.2d63	20 af 57	jsr $57af		jsr	FloatCosine
.2d66	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.78084568
>2d69	51 c0 f2 63				.dword	$63f2c051
>2d6d	e1 80					.byte	$e1,$80
.2d6f	20 87 50	jsr $5087		jsr	FloatSubtract
.2d72	20 51 50	jsr $5051		jsr	FPAbs
.2d75	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>2d78	4c 37 89 41				.dword	$4189374c
>2d7c	d8 00					.byte	$d8,$00
.2d7e	20 4e 51	jsr $514e		jsr	FloatCompare
.2d81	20 2e 51	jsr $512e		jsr	CompareLess
.2d84	20 44 50	jsr $5044		jsr	FPAssertCheck
.2d87	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.29
>2d8a	a4 70 3d 4a				.dword	$4a3d70a4
>2d8e	e0 00					.byte	$e0,$00
.2d90	20 c0 59	jsr $59c0		jsr	FloatTangent
.2d93	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.29841279
>2d96	d6 c7 64 4c				.dword	$4c64c7d6
>2d9a	e0 00					.byte	$e0,$00
.2d9c	20 87 50	jsr $5087		jsr	FloatSubtract
.2d9f	20 51 50	jsr $5051		jsr	FPAbs
.2da2	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>2da5	4c 37 89 41				.dword	$4189374c
>2da9	d8 00					.byte	$d8,$00
.2dab	20 4e 51	jsr $514e		jsr	FloatCompare
.2dae	20 44 50	jsr $5044		jsr	FPAssertCheck
.2db1	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.56
>2db4	3d 0a d7 63				.dword	$63d70a3d
>2db8	e2 00					.byte	$e2,$00
.2dba	20 94 56	jsr $5694		jsr	FloatArcTan
.2dbd	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.00075586
>2dc0	4e 62 0c 40				.dword	$400c624e
>2dc4	e2 00					.byte	$e2,$00
.2dc6	20 87 50	jsr $5087		jsr	FloatSubtract
.2dc9	20 51 50	jsr $5051		jsr	FPAbs
.2dcc	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>2dcf	4c 37 89 41				.dword	$4189374c
>2dd3	d8 00					.byte	$d8,$00
.2dd5	20 4e 51	jsr $514e		jsr	FloatCompare
.2dd8	20 44 50	jsr $5044		jsr	FPAssertCheck
.2ddb	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.68
>2dde	b8 1e 85 6b				.dword	$6b851eb8
>2de2	e2 00					.byte	$e2,$00
.2de4	20 bb 57	jsr $57bb		jsr	FloatExponent
.2de7	20 54 50	jsr $5054		jsr	FPPushConstant	; 5.36555597
>2dea	38 51 d9 55				.dword	$55d95138
>2dee	e4 00					.byte	$e4,$00
.2df0	20 87 50	jsr $5087		jsr	FloatSubtract
.2df3	20 51 50	jsr $5051		jsr	FPAbs
.2df6	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>2df9	4c 37 89 41				.dword	$4189374c
>2dfd	d8 00					.byte	$d8,$00
.2dff	20 4e 51	jsr $514e		jsr	FloatCompare
.2e02	20 44 50	jsr $5044		jsr	FPAssertCheck
.2e05	20 54 50	jsr $5054		jsr	FPPushConstant	; 97.28
>2e08	14 ae 47 61				.dword	$6147ae14
>2e0c	e8 00					.byte	$e8,$00
.2e0e	20 be 58	jsr $58be		jsr	FloatLogarithm
.2e11	20 54 50	jsr $5054		jsr	FPPushConstant	; 4.57759342
>2e14	99 d2 3d 49				.dword	$493dd299
>2e18	e4 00					.byte	$e4,$00
.2e1a	20 87 50	jsr $5087		jsr	FloatSubtract
.2e1d	20 51 50	jsr $5051		jsr	FPAbs
.2e20	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>2e23	4c 37 89 41				.dword	$4189374c
>2e27	d8 00					.byte	$d8,$00
.2e29	20 4e 51	jsr $514e		jsr	FloatCompare
.2e2c	20 44 50	jsr $5044		jsr	FPAssertCheck
.2e2f	20 54 50	jsr $5054		jsr	FPPushConstant	; 3.77
>2e32	0a d7 a3 78				.dword	$78a3d70a
>2e36	e3 00					.byte	$e3,$00
.2e38	20 b4 59	jsr $59b4		jsr	FloatSquareRoot
.2e3b	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.94164878
>2e3e	3f f9 43 7c				.dword	$7c43f93f
>2e42	e2 00					.byte	$e2,$00
.2e44	20 87 50	jsr $5087		jsr	FloatSubtract
.2e47	20 51 50	jsr $5051		jsr	FPAbs
.2e4a	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>2e4d	4c 37 89 41				.dword	$4189374c
>2e51	d8 00					.byte	$d8,$00
.2e53	20 4e 51	jsr $514e		jsr	FloatCompare
.2e56	20 44 50	jsr $5044		jsr	FPAssertCheck
.2e59	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.13666667
>2e5c	7c 2c f9 45				.dword	$45f92c7c
>2e60	df 00					.byte	$df,$00
.2e62	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.1
>2e65	66 66 66 46				.dword	$46666666
>2e69	e2 00					.byte	$e2,$00
.2e6b	20 32 59	jsr $5932		jsr	FloatPower
.2e6e	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.1120028
>2e71	ac dc b0 72				.dword	$72b0dcac
>2e75	de 00					.byte	$de,$00
.2e77	20 87 50	jsr $5087		jsr	FloatSubtract
.2e7a	20 51 50	jsr $5051		jsr	FPAbs
.2e7d	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.01
>2e80	1f 85 eb 51				.dword	$51eb851f
>2e84	db 00					.byte	$db,$00
.2e86	20 4e 51	jsr $514e		jsr	FloatCompare
.2e89	20 44 50	jsr $5044		jsr	FPAssertCheck
.2e8c	20 54 50	jsr $5054		jsr	FPPushConstant	; -57.03296347
>2e8f	97 e0 10 72				.dword	$7210e097
>2e93	e7 80					.byte	$e7,$80
.2e95	20 2b 56	jsr $562b		jsr	FloatNegate
.2e98	20 54 50	jsr $5054		jsr	FPPushConstant	; 57.03296347
>2e9b	97 e0 10 72				.dword	$7210e097
>2e9f	e7 00					.byte	$e7,$00
.2ea1	20 4e 51	jsr $514e		jsr	FloatCompare
.2ea4	20 18 51	jsr $5118		jsr	CompareEqual
.2ea7	20 44 50	jsr $5044		jsr	FPAssertCheck
.2eaa	20 54 50	jsr $5054		jsr	FPPushConstant	; -57.03296347
>2ead	97 e0 10 72				.dword	$7210e097
>2eb1	e7 80					.byte	$e7,$80
.2eb3	20 a4 52	jsr $52a4		jsr	FloatIntegerPart
.2eb6	20 54 50	jsr $5054		jsr	FPPushConstant	; -57
>2eb9	39 00 00 00				.dword	$00000039
>2ebd	00 80					.byte	$00,$80
.2ebf	20 4e 51	jsr $514e		jsr	FloatCompare
.2ec2	20 18 51	jsr $5118		jsr	CompareEqual
.2ec5	20 44 50	jsr $5044		jsr	FPAssertCheck
.2ec8	20 54 50	jsr $5054		jsr	FPPushConstant	; 9.82
>2ecb	29 5c 8f 4e				.dword	$4e8f5c29
>2ecf	e5 00					.byte	$e5,$00
.2ed1	20 4f 59	jsr $594f		jsr	FloatSine
.2ed4	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.38501312
>2ed7	47 38 90 62				.dword	$62903847
>2edb	e0 80					.byte	$e0,$80
.2edd	20 87 50	jsr $5087		jsr	FloatSubtract
.2ee0	20 51 50	jsr $5051		jsr	FPAbs
.2ee3	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>2ee6	4c 37 89 41				.dword	$4189374c
>2eea	d8 00					.byte	$d8,$00
.2eec	20 4e 51	jsr $514e		jsr	FloatCompare
.2eef	20 2e 51	jsr $512e		jsr	CompareLess
.2ef2	20 44 50	jsr $5044		jsr	FPAssertCheck
.2ef5	20 54 50	jsr $5054		jsr	FPPushConstant	; 9.82
>2ef8	29 5c 8f 4e				.dword	$4e8f5c29
>2efc	e5 00					.byte	$e5,$00
.2efe	20 af 57	jsr $57af		jsr	FloatCosine
.2f01	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.9229111
>2f04	70 f3 21 76				.dword	$7621f370
>2f08	e1 80					.byte	$e1,$80
.2f0a	20 87 50	jsr $5087		jsr	FloatSubtract
.2f0d	20 51 50	jsr $5051		jsr	FPAbs
.2f10	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>2f13	4c 37 89 41				.dword	$4189374c
>2f17	d8 00					.byte	$d8,$00
.2f19	20 4e 51	jsr $514e		jsr	FloatCompare
.2f1c	20 2e 51	jsr $512e		jsr	CompareLess
.2f1f	20 44 50	jsr $5044		jsr	FPAssertCheck
.2f22	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.18
>2f25	c3 f5 28 5c				.dword	$5c28f5c3
>2f29	df 00					.byte	$df,$00
.2f2b	20 c0 59	jsr $59c0		jsr	FloatTangent
.2f2e	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.18196953
>2f31	38 1c 2b 5d				.dword	$5d2b1c38
>2f35	df 00					.byte	$df,$00
.2f37	20 87 50	jsr $5087		jsr	FloatSubtract
.2f3a	20 51 50	jsr $5051		jsr	FPAbs
.2f3d	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>2f40	4c 37 89 41				.dword	$4189374c
>2f44	d8 00					.byte	$d8,$00
.2f46	20 4e 51	jsr $514e		jsr	FloatCompare
.2f49	20 44 50	jsr $5044		jsr	FPAssertCheck
.2f4c	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.126
>2f4f	6f 12 83 40				.dword	$4083126f
>2f53	df 00					.byte	$df,$00
.2f55	20 94 56	jsr $5694		jsr	FloatArcTan
.2f58	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.12533949
>2f5b	65 7f 2c 40				.dword	$402c7f65
>2f5f	df 00					.byte	$df,$00
.2f61	20 87 50	jsr $5087		jsr	FloatSubtract
.2f64	20 51 50	jsr $5051		jsr	FPAbs
.2f67	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>2f6a	4c 37 89 41				.dword	$4189374c
>2f6e	d8 00					.byte	$d8,$00
.2f70	20 4e 51	jsr $514e		jsr	FloatCompare
.2f73	20 44 50	jsr $5044		jsr	FPAssertCheck
.2f76	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.79
>2f79	52 b8 1e 65				.dword	$651eb852
>2f7d	e1 80					.byte	$e1,$80
.2f7f	20 bb 57	jsr $57bb		jsr	FloatExponent
.2f82	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.4538448
>2f85	3d 2c 2f 74				.dword	$742f2c3d
>2f89	e0 00					.byte	$e0,$00
.2f8b	20 87 50	jsr $5087		jsr	FloatSubtract
.2f8e	20 51 50	jsr $5051		jsr	FPAbs
.2f91	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>2f94	4c 37 89 41				.dword	$4189374c
>2f98	d8 00					.byte	$d8,$00
.2f9a	20 4e 51	jsr $514e		jsr	FloatCompare
.2f9d	20 44 50	jsr $5044		jsr	FPAssertCheck
.2fa0	20 54 50	jsr $5054		jsr	FPPushConstant	; 35.81
>2fa3	52 b8 9e 47				.dword	$479eb852
>2fa7	e7 00					.byte	$e7,$00
.2fa9	20 be 58	jsr $58be		jsr	FloatLogarithm
.2fac	20 54 50	jsr $5054		jsr	FPPushConstant	; 3.57822718
>2faf	49 d6 80 72				.dword	$7280d649
>2fb3	e3 00					.byte	$e3,$00
.2fb5	20 87 50	jsr $5087		jsr	FloatSubtract
.2fb8	20 51 50	jsr $5051		jsr	FPAbs
.2fbb	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>2fbe	4c 37 89 41				.dword	$4189374c
>2fc2	d8 00					.byte	$d8,$00
.2fc4	20 4e 51	jsr $514e		jsr	FloatCompare
.2fc7	20 44 50	jsr $5044		jsr	FPAssertCheck
.2fca	20 54 50	jsr $5054		jsr	FPPushConstant	; 59.7
>2fcd	66 66 66 77				.dword	$77666666
>2fd1	e7 00					.byte	$e7,$00
.2fd3	20 b4 59	jsr $59b4		jsr	FloatSquareRoot
.2fd6	20 54 50	jsr $5054		jsr	FPPushConstant	; 7.72657751
>2fd9	bd 0f a0 7b				.dword	$7ba00fbd
>2fdd	e4 00					.byte	$e4,$00
.2fdf	20 87 50	jsr $5087		jsr	FloatSubtract
.2fe2	20 51 50	jsr $5051		jsr	FPAbs
.2fe5	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>2fe8	4c 37 89 41				.dword	$4189374c
>2fec	d8 00					.byte	$d8,$00
.2fee	20 4e 51	jsr $514e		jsr	FloatCompare
.2ff1	20 44 50	jsr $5044		jsr	FPAssertCheck
.2ff4	20 54 50	jsr $5054		jsr	FPPushConstant	; 2.16333333
>2ff7	d2 06 3a 45				.dword	$453a06d2
>2ffb	e3 00					.byte	$e3,$00
.2ffd	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.4
>3000	9a 99 99 59				.dword	$5999999a
>3004	e2 00					.byte	$e2,$00
.3006	20 32 59	jsr $5932		jsr	FloatPower
.3009	20 54 50	jsr $5054		jsr	FPPushConstant	; 2.94559354
>300c	62 4d 42 5e				.dword	$5e424d62
>3010	e3 00					.byte	$e3,$00
.3012	20 87 50	jsr $5087		jsr	FloatSubtract
.3015	20 51 50	jsr $5051		jsr	FPAbs
.3018	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.01
>301b	1f 85 eb 51				.dword	$51eb851f
>301f	db 00					.byte	$db,$00
.3021	20 4e 51	jsr $514e		jsr	FloatCompare
.3024	20 44 50	jsr $5044		jsr	FPAssertCheck
.3027	20 54 50	jsr $5054		jsr	FPPushConstant	; -46.93374909
>302a	5c 14 de 5d				.dword	$5dde145c
>302e	e7 80					.byte	$e7,$80
.3030	20 2b 56	jsr $562b		jsr	FloatNegate
.3033	20 54 50	jsr $5054		jsr	FPPushConstant	; 46.93374909
>3036	5c 14 de 5d				.dword	$5dde145c
>303a	e7 00					.byte	$e7,$00
.303c	20 4e 51	jsr $514e		jsr	FloatCompare
.303f	20 18 51	jsr $5118		jsr	CompareEqual
.3042	20 44 50	jsr $5044		jsr	FPAssertCheck
.3045	20 54 50	jsr $5054		jsr	FPPushConstant	; -46.93374909
>3048	5c 14 de 5d				.dword	$5dde145c
>304c	e7 80					.byte	$e7,$80
.304e	20 a4 52	jsr $52a4		jsr	FloatIntegerPart
.3051	20 54 50	jsr $5054		jsr	FPPushConstant	; -46
>3054	2e 00 00 00				.dword	$0000002e
>3058	00 80					.byte	$00,$80
.305a	20 4e 51	jsr $514e		jsr	FloatCompare
.305d	20 18 51	jsr $5118		jsr	CompareEqual
.3060	20 44 50	jsr $5044		jsr	FPAssertCheck
.3063	20 54 50	jsr $5054		jsr	FPPushConstant	; -7.33
>3066	14 ae 47 75				.dword	$7547ae14
>306a	e4 80					.byte	$e4,$80
.306c	20 4f 59	jsr $594f		jsr	FloatSine
.306f	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.86583391
>3072	44 a5 d3 6e				.dword	$6ed3a544
>3076	e1 80					.byte	$e1,$80
.3078	20 87 50	jsr $5087		jsr	FloatSubtract
.307b	20 51 50	jsr $5051		jsr	FPAbs
.307e	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>3081	4c 37 89 41				.dword	$4189374c
>3085	d8 00					.byte	$d8,$00
.3087	20 4e 51	jsr $514e		jsr	FloatCompare
.308a	20 2e 51	jsr $512e		jsr	CompareLess
.308d	20 44 50	jsr $5044		jsr	FPAssertCheck
.3090	20 54 50	jsr $5054		jsr	FPPushConstant	; -7.33
>3093	14 ae 47 75				.dword	$7547ae14
>3097	e4 80					.byte	$e4,$80
.3099	20 af 57	jsr $57af		jsr	FloatCosine
.309c	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.50033153
>309f	13 dd 0a 40				.dword	$400add13
>30a3	e1 00					.byte	$e1,$00
.30a5	20 87 50	jsr $5087		jsr	FloatSubtract
.30a8	20 51 50	jsr $5051		jsr	FPAbs
.30ab	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>30ae	4c 37 89 41				.dword	$4189374c
>30b2	d8 00					.byte	$d8,$00
.30b4	20 4e 51	jsr $514e		jsr	FloatCompare
.30b7	20 2e 51	jsr $512e		jsr	CompareLess
.30ba	20 44 50	jsr $5044		jsr	FPAssertCheck
.30bd	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.28
>30c0	7b 14 ae 47				.dword	$47ae147b
>30c4	e0 00					.byte	$e0,$00
.30c6	20 c0 59	jsr $59c0		jsr	FloatTangent
.30c9	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.28755433
>30cc	1b 29 9d 49				.dword	$499d291b
>30d0	e0 00					.byte	$e0,$00
.30d2	20 87 50	jsr $5087		jsr	FloatSubtract
.30d5	20 51 50	jsr $5051		jsr	FPAbs
.30d8	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>30db	4c 37 89 41				.dword	$4189374c
>30df	d8 00					.byte	$d8,$00
.30e1	20 4e 51	jsr $514e		jsr	FloatCompare
.30e4	20 44 50	jsr $5044		jsr	FPAssertCheck
.30e7	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.844
>30ea	93 18 04 76				.dword	$76041893
>30ee	e2 00					.byte	$e2,$00
.30f0	20 94 56	jsr $5694		jsr	FloatArcTan
.30f3	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.07388454
>30f6	39 86 ba 44				.dword	$44ba8639
>30fa	e2 00					.byte	$e2,$00
.30fc	20 87 50	jsr $5087		jsr	FloatSubtract
.30ff	20 51 50	jsr $5051		jsr	FPAbs
.3102	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>3105	4c 37 89 41				.dword	$4189374c
>3109	d8 00					.byte	$d8,$00
.310b	20 4e 51	jsr $514e		jsr	FloatCompare
.310e	20 44 50	jsr $5044		jsr	FPAssertCheck
.3111	20 54 50	jsr $5054		jsr	FPPushConstant	; -1.53
>3114	1f 85 eb 61				.dword	$61eb851f
>3118	e2 80					.byte	$e2,$80
.311a	20 bb 57	jsr $57bb		jsr	FloatExponent
.311d	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.21653567
>3120	6a c3 dd 6e				.dword	$6eddc36a
>3124	df 00					.byte	$df,$00
.3126	20 87 50	jsr $5087		jsr	FloatSubtract
.3129	20 51 50	jsr $5051		jsr	FPAbs
.312c	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>312f	4c 37 89 41				.dword	$4189374c
>3133	d8 00					.byte	$d8,$00
.3135	20 4e 51	jsr $514e		jsr	FloatCompare
.3138	20 44 50	jsr $5044		jsr	FPAssertCheck
.313b	20 54 50	jsr $5054		jsr	FPPushConstant	; 65.47
>313e	ec 51 78 41				.dword	$417851ec
>3142	e8 00					.byte	$e8,$00
.3144	20 be 58	jsr $58be		jsr	FloatLogarithm
.3147	20 54 50	jsr $5054		jsr	FPPushConstant	; 4.18159202
>314a	09 cd e7 42				.dword	$42e7cd09
>314e	e4 00					.byte	$e4,$00
.3150	20 87 50	jsr $5087		jsr	FloatSubtract
.3153	20 51 50	jsr $5051		jsr	FPAbs
.3156	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>3159	4c 37 89 41				.dword	$4189374c
>315d	d8 00					.byte	$d8,$00
.315f	20 4e 51	jsr $514e		jsr	FloatCompare
.3162	20 44 50	jsr $5044		jsr	FPAssertCheck
.3165	20 54 50	jsr $5054		jsr	FPPushConstant	; 79.05
>3168	cd cc 0c 4f				.dword	$4f0ccccd
>316c	e8 00					.byte	$e8,$00
.316e	20 b4 59	jsr $59b4		jsr	FloatSquareRoot
.3171	20 54 50	jsr $5054		jsr	FPPushConstant	; 8.89100669
>3174	1e c8 20 47				.dword	$4720c81e
>3178	e5 00					.byte	$e5,$00
.317a	20 87 50	jsr $5087		jsr	FloatSubtract
.317d	20 51 50	jsr $5051		jsr	FPAbs
.3180	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>3183	4c 37 89 41				.dword	$4189374c
>3187	d8 00					.byte	$d8,$00
.3189	20 4e 51	jsr $514e		jsr	FloatCompare
.318c	20 44 50	jsr $5044		jsr	FPAssertCheck
.318f	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.73666667
>3192	ec 17 4b 5e				.dword	$5e4b17ec
>3196	e1 00					.byte	$e1,$00
.3198	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.7
>319b	cd cc cc 6c				.dword	$6ccccccd
>319f	e2 00					.byte	$e2,$00
.31a1	20 32 59	jsr $5932		jsr	FloatPower
.31a4	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.59478599
>31a7	84 f2 21 4c				.dword	$4c21f284
>31ab	e1 00					.byte	$e1,$00
.31ad	20 87 50	jsr $5087		jsr	FloatSubtract
.31b0	20 51 50	jsr $5051		jsr	FPAbs
.31b3	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.01
>31b6	1f 85 eb 51				.dword	$51eb851f
>31ba	db 00					.byte	$db,$00
.31bc	20 4e 51	jsr $514e		jsr	FloatCompare
.31bf	20 44 50	jsr $5044		jsr	FPAssertCheck
.31c2	20 54 50	jsr $5054		jsr	FPPushConstant	; -10.41394671
>31c5	4b c3 4f 53				.dword	$534fc34b
>31c9	e5 80					.byte	$e5,$80
.31cb	20 2b 56	jsr $562b		jsr	FloatNegate
.31ce	20 54 50	jsr $5054		jsr	FPPushConstant	; 10.41394671
>31d1	4b c3 4f 53				.dword	$534fc34b
>31d5	e5 00					.byte	$e5,$00
.31d7	20 4e 51	jsr $514e		jsr	FloatCompare
.31da	20 18 51	jsr $5118		jsr	CompareEqual
.31dd	20 44 50	jsr $5044		jsr	FPAssertCheck
.31e0	20 54 50	jsr $5054		jsr	FPPushConstant	; -10.41394671
>31e3	4b c3 4f 53				.dword	$534fc34b
>31e7	e5 80					.byte	$e5,$80
.31e9	20 a4 52	jsr $52a4		jsr	FloatIntegerPart
.31ec	20 54 50	jsr $5054		jsr	FPPushConstant	; -10
>31ef	0a 00 00 00				.dword	$0000000a
>31f3	00 80					.byte	$00,$80
.31f5	20 4e 51	jsr $514e		jsr	FloatCompare
.31f8	20 18 51	jsr $5118		jsr	CompareEqual
.31fb	20 44 50	jsr $5044		jsr	FPAssertCheck
.31fe	20 54 50	jsr $5054		jsr	FPPushConstant	; -17.24
>3201	8f c2 f5 44				.dword	$44f5c28f
>3205	e6 80					.byte	$e6,$80
.3207	20 4f 59	jsr $594f		jsr	FloatSine
.320a	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.99924894
>320d	a7 63 e7 7f				.dword	$7fe763a7
>3211	e1 00					.byte	$e1,$00
.3213	20 87 50	jsr $5087		jsr	FloatSubtract
.3216	20 51 50	jsr $5051		jsr	FPAbs
.3219	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>321c	4c 37 89 41				.dword	$4189374c
>3220	d8 00					.byte	$d8,$00
.3222	20 4e 51	jsr $514e		jsr	FloatCompare
.3225	20 2e 51	jsr $512e		jsr	CompareLess
.3228	20 44 50	jsr $5044		jsr	FPAssertCheck
.322b	20 54 50	jsr $5054		jsr	FPPushConstant	; -17.24
>322e	8f c2 f5 44				.dword	$44f5c28f
>3232	e6 80					.byte	$e6,$80
.3234	20 af 57	jsr $57af		jsr	FloatCosine
.3237	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.03874989
>323a	32 1a 5c 4f				.dword	$4f5c1a32
>323e	dd 80					.byte	$dd,$80
.3240	20 87 50	jsr $5087		jsr	FloatSubtract
.3243	20 51 50	jsr $5051		jsr	FPAbs
.3246	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>3249	4c 37 89 41				.dword	$4189374c
>324d	d8 00					.byte	$d8,$00
.324f	20 4e 51	jsr $514e		jsr	FloatCompare
.3252	20 2e 51	jsr $512e		jsr	CompareLess
.3255	20 44 50	jsr $5044		jsr	FPAssertCheck
.3258	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.11
>325b	0a d7 a3 70				.dword	$70a3d70a
>325f	de 00					.byte	$de,$00
.3261	20 c0 59	jsr $59c0		jsr	FloatTangent
.3264	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.11044582
>3267	84 b5 18 71				.dword	$7118b584
>326b	de 00					.byte	$de,$00
.326d	20 87 50	jsr $5087		jsr	FloatSubtract
.3270	20 51 50	jsr $5051		jsr	FPAbs
.3273	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>3276	4c 37 89 41				.dword	$4189374c
>327a	d8 00					.byte	$d8,$00
.327c	20 4e 51	jsr $514e		jsr	FloatCompare
.327f	20 44 50	jsr $5044		jsr	FPAssertCheck
.3282	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.153
>3285	19 04 56 4e				.dword	$4e560419
>3289	df 00					.byte	$df,$00
.328b	20 94 56	jsr $5694		jsr	FloatArcTan
.328e	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.15182263
>3291	1d b2 bb 4d				.dword	$4dbbb21d
>3295	df 00					.byte	$df,$00
.3297	20 87 50	jsr $5087		jsr	FloatSubtract
.329a	20 51 50	jsr $5051		jsr	FPAbs
.329d	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>32a0	4c 37 89 41				.dword	$4189374c
>32a4	d8 00					.byte	$d8,$00
.32a6	20 4e 51	jsr $514e		jsr	FloatCompare
.32a9	20 44 50	jsr $5044		jsr	FPAssertCheck
.32ac	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.7
>32af	9a 99 99 59				.dword	$5999999a
>32b3	e1 80					.byte	$e1,$80
.32b5	20 bb 57	jsr $57bb		jsr	FloatExponent
.32b8	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.4965853
>32bb	d7 36 20 7f				.dword	$7f2036d7
>32bf	e0 00					.byte	$e0,$00
.32c1	20 87 50	jsr $5087		jsr	FloatSubtract
.32c4	20 51 50	jsr $5051		jsr	FPAbs
.32c7	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>32ca	4c 37 89 41				.dword	$4189374c
>32ce	d8 00					.byte	$d8,$00
.32d0	20 4e 51	jsr $514e		jsr	FloatCompare
.32d3	20 44 50	jsr $5044		jsr	FPAssertCheck
.32d6	20 54 50	jsr $5054		jsr	FPPushConstant	; 76.94
>32d9	d7 a3 f0 4c				.dword	$4cf0a3d7
>32dd	e8 00					.byte	$e8,$00
.32df	20 be 58	jsr $58be		jsr	FloatLogarithm
.32e2	20 54 50	jsr $5054		jsr	FPPushConstant	; 4.3430259
>32e5	ba 08 7d 45				.dword	$457d08ba
>32e9	e4 00					.byte	$e4,$00
.32eb	20 87 50	jsr $5087		jsr	FloatSubtract
.32ee	20 51 50	jsr $5051		jsr	FPAbs
.32f1	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>32f4	4c 37 89 41				.dword	$4189374c
>32f8	d8 00					.byte	$d8,$00
.32fa	20 4e 51	jsr $514e		jsr	FloatCompare
.32fd	20 44 50	jsr $5044		jsr	FPAssertCheck
.3300	20 54 50	jsr $5054		jsr	FPPushConstant	; 90.14
>3303	0a d7 23 5a				.dword	$5a23d70a
>3307	e8 00					.byte	$e8,$00
.3309	20 b4 59	jsr $59b4		jsr	FloatSquareRoot
.330c	20 54 50	jsr $5054		jsr	FPPushConstant	; 9.49420876
>330f	b9 23 f4 4b				.dword	$4bf423b9
>3313	e5 00					.byte	$e5,$00
.3315	20 87 50	jsr $5087		jsr	FloatSubtract
.3318	20 51 50	jsr $5051		jsr	FPAbs
.331b	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>331e	4c 37 89 41				.dword	$4189374c
>3322	d8 00					.byte	$d8,$00
.3324	20 4e 51	jsr $514e		jsr	FloatCompare
.3327	20 44 50	jsr $5044		jsr	FPAssertCheck
.332a	20 54 50	jsr $5054		jsr	FPPushConstant	; 2.42666667
>332d	dc 40 a7 4d				.dword	$4da740dc
>3331	e3 00					.byte	$e3,$00
.3333	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.9
>3336	9a 99 99 79				.dword	$7999999a
>333a	e2 00					.byte	$e2,$00
.333c	20 32 59	jsr $5932		jsr	FloatPower
.333f	20 54 50	jsr $5054		jsr	FPPushConstant	; 5.38913716
>3342	e3 e7 39 56				.dword	$5639e7e3
>3346	e4 00					.byte	$e4,$00
.3348	20 87 50	jsr $5087		jsr	FloatSubtract
.334b	20 51 50	jsr $5051		jsr	FPAbs
.334e	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.01
>3351	1f 85 eb 51				.dword	$51eb851f
>3355	db 00					.byte	$db,$00
.3357	20 4e 51	jsr $514e		jsr	FloatCompare
.335a	20 44 50	jsr $5044		jsr	FPAssertCheck
.335d	20 54 50	jsr $5054		jsr	FPPushConstant	; -65.01830404
>3360	93 af 04 41				.dword	$4104af93
>3364	e8 80					.byte	$e8,$80
.3366	20 2b 56	jsr $562b		jsr	FloatNegate
.3369	20 54 50	jsr $5054		jsr	FPPushConstant	; 65.01830404
>336c	93 af 04 41				.dword	$4104af93
>3370	e8 00					.byte	$e8,$00
.3372	20 4e 51	jsr $514e		jsr	FloatCompare
.3375	20 18 51	jsr $5118		jsr	CompareEqual
.3378	20 44 50	jsr $5044		jsr	FPAssertCheck
.337b	20 54 50	jsr $5054		jsr	FPPushConstant	; -65.01830404
>337e	93 af 04 41				.dword	$4104af93
>3382	e8 80					.byte	$e8,$80
.3384	20 a4 52	jsr $52a4		jsr	FloatIntegerPart
.3387	20 54 50	jsr $5054		jsr	FPPushConstant	; -65
>338a	41 00 00 00				.dword	$00000041
>338e	00 80					.byte	$00,$80
.3390	20 4e 51	jsr $514e		jsr	FloatCompare
.3393	20 18 51	jsr $5118		jsr	CompareEqual
.3396	20 44 50	jsr $5044		jsr	FPAssertCheck
.3399	20 54 50	jsr $5054		jsr	FPPushConstant	; 6.29
>339c	0a d7 a3 64				.dword	$64a3d70a
>33a0	e4 00					.byte	$e4,$00
.33a2	20 4f 59	jsr $594f		jsr	FloatSine
.33a5	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.00681464
>33a8	fc ab a6 6f				.dword	$6fa6abfc
>33ac	da 00					.byte	$da,$00
.33ae	20 87 50	jsr $5087		jsr	FloatSubtract
.33b1	20 51 50	jsr $5051		jsr	FPAbs
.33b4	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>33b7	4c 37 89 41				.dword	$4189374c
>33bb	d8 00					.byte	$d8,$00
.33bd	20 4e 51	jsr $514e		jsr	FloatCompare
.33c0	20 2e 51	jsr $512e		jsr	CompareLess
.33c3	20 44 50	jsr $5044		jsr	FPAssertCheck
.33c6	20 54 50	jsr $5054		jsr	FPPushConstant	; 6.29
>33c9	0a d7 a3 64				.dword	$64a3d70a
>33cd	e4 00					.byte	$e4,$00
.33cf	20 af 57	jsr $57af		jsr	FloatCosine
.33d2	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.99997678
>33d5	37 3d ff 7f				.dword	$7fff3d37
>33d9	e1 00					.byte	$e1,$00
.33db	20 87 50	jsr $5087		jsr	FloatSubtract
.33de	20 51 50	jsr $5051		jsr	FPAbs
.33e1	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>33e4	4c 37 89 41				.dword	$4189374c
>33e8	d8 00					.byte	$d8,$00
.33ea	20 4e 51	jsr $514e		jsr	FloatCompare
.33ed	20 2e 51	jsr $512e		jsr	CompareLess
.33f0	20 44 50	jsr $5044		jsr	FPAssertCheck
.33f3	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.4
>33f6	66 66 66 66				.dword	$66666666
>33fa	e0 00					.byte	$e0,$00
.33fc	20 c0 59	jsr $59c0		jsr	FloatTangent
.33ff	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.42279322
>3402	2d 2d 3c 6c				.dword	$6c3c2d2d
>3406	e0 00					.byte	$e0,$00
.3408	20 87 50	jsr $5087		jsr	FloatSubtract
.340b	20 51 50	jsr $5051		jsr	FPAbs
.340e	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>3411	4c 37 89 41				.dword	$4189374c
>3415	d8 00					.byte	$d8,$00
.3417	20 4e 51	jsr $514e		jsr	FloatCompare
.341a	20 44 50	jsr $5044		jsr	FPAssertCheck
.341d	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.878
>3420	e9 26 31 78				.dword	$783126e9
>3424	e2 00					.byte	$e2,$00
.3426	20 94 56	jsr $5694		jsr	FloatArcTan
.3429	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.08150253
>342c	63 56 37 45				.dword	$45375663
>3430	e2 00					.byte	$e2,$00
.3432	20 87 50	jsr $5087		jsr	FloatSubtract
.3435	20 51 50	jsr $5051		jsr	FPAbs
.3438	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>343b	4c 37 89 41				.dword	$4189374c
>343f	d8 00					.byte	$d8,$00
.3441	20 4e 51	jsr $514e		jsr	FloatCompare
.3444	20 44 50	jsr $5044		jsr	FPAssertCheck
.3447	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.66
>344a	48 e1 7a 54				.dword	$547ae148
>344e	e1 00					.byte	$e1,$00
.3450	20 bb 57	jsr $57bb		jsr	FloatExponent
.3453	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.93479233
>3456	35 a3 d3 7b				.dword	$7bd3a335
>345a	e2 00					.byte	$e2,$00
.345c	20 87 50	jsr $5087		jsr	FloatSubtract
.345f	20 51 50	jsr $5051		jsr	FPAbs
.3462	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>3465	4c 37 89 41				.dword	$4189374c
>3469	d8 00					.byte	$d8,$00
.346b	20 4e 51	jsr $514e		jsr	FloatCompare
.346e	20 44 50	jsr $5044		jsr	FPAssertCheck
.3471	20 54 50	jsr $5054		jsr	FPPushConstant	; 81.88
>3474	ae 47 e1 51				.dword	$51e147ae
>3478	e8 00					.byte	$e8,$00
.347a	20 be 58	jsr $58be		jsr	FloatLogarithm
.347d	20 54 50	jsr $5054		jsr	FPPushConstant	; 4.40525476
>3480	6a ec 7b 46				.dword	$467bec6a
>3484	e4 00					.byte	$e4,$00
.3486	20 87 50	jsr $5087		jsr	FloatSubtract
.3489	20 51 50	jsr $5051		jsr	FPAbs
.348c	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>348f	4c 37 89 41				.dword	$4189374c
>3493	d8 00					.byte	$d8,$00
.3495	20 4e 51	jsr $514e		jsr	FloatCompare
.3498	20 44 50	jsr $5044		jsr	FPAssertCheck
.349b	20 54 50	jsr $5054		jsr	FPPushConstant	; 52.01
>349e	b8 1e 05 68				.dword	$68051eb8
>34a2	e7 00					.byte	$e7,$00
.34a4	20 b4 59	jsr $59b4		jsr	FloatSquareRoot
.34a7	20 54 50	jsr $5054		jsr	FPPushConstant	; 7.21179589
>34aa	16 84 63 73				.dword	$73638416
>34ae	e4 00					.byte	$e4,$00
.34b0	20 87 50	jsr $5087		jsr	FloatSubtract
.34b3	20 51 50	jsr $5051		jsr	FPAbs
.34b6	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>34b9	4c 37 89 41				.dword	$4189374c
>34bd	d8 00					.byte	$d8,$00
.34bf	20 4e 51	jsr $514e		jsr	FloatCompare
.34c2	20 44 50	jsr $5044		jsr	FPAssertCheck
.34c5	20 54 50	jsr $5054		jsr	FPPushConstant	; 2.77
>34c8	0a d7 a3 58				.dword	$58a3d70a
>34cc	e3 00					.byte	$e3,$00
.34ce	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.9
>34d1	33 33 33 73				.dword	$73333333
>34d5	e1 00					.byte	$e1,$00
.34d7	20 32 59	jsr $5932		jsr	FloatPower
.34da	20 54 50	jsr $5054		jsr	FPPushConstant	; 2.50168021
>34dd	a8 c3 0d 50				.dword	$500dc3a8
>34e1	e3 00					.byte	$e3,$00
.34e3	20 87 50	jsr $5087		jsr	FloatSubtract
.34e6	20 51 50	jsr $5051		jsr	FPAbs
.34e9	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.01
>34ec	1f 85 eb 51				.dword	$51eb851f
>34f0	db 00					.byte	$db,$00
.34f2	20 4e 51	jsr $514e		jsr	FloatCompare
.34f5	20 44 50	jsr $5044		jsr	FPAssertCheck
.34f8	20 54 50	jsr $5054		jsr	FPPushConstant	; -78.33433223
>34fb	cc 96 55 4e				.dword	$4e5596cc
>34ff	e8 80					.byte	$e8,$80
.3501	20 2b 56	jsr $562b		jsr	FloatNegate
.3504	20 54 50	jsr $5054		jsr	FPPushConstant	; 78.33433223
>3507	cc 96 55 4e				.dword	$4e5596cc
>350b	e8 00					.byte	$e8,$00
.350d	20 4e 51	jsr $514e		jsr	FloatCompare
.3510	20 18 51	jsr $5118		jsr	CompareEqual
.3513	20 44 50	jsr $5044		jsr	FPAssertCheck
.3516	20 54 50	jsr $5054		jsr	FPPushConstant	; -78.33433223
>3519	cc 96 55 4e				.dword	$4e5596cc
>351d	e8 80					.byte	$e8,$80
.351f	20 a4 52	jsr $52a4		jsr	FloatIntegerPart
.3522	20 54 50	jsr $5054		jsr	FPPushConstant	; -78
>3525	4e 00 00 00				.dword	$0000004e
>3529	00 80					.byte	$00,$80
.352b	20 4e 51	jsr $514e		jsr	FloatCompare
.352e	20 18 51	jsr $5118		jsr	CompareEqual
.3531	20 44 50	jsr $5044		jsr	FPAssertCheck
.3534	20 54 50	jsr $5054		jsr	FPPushConstant	; -17.4
>3537	9a 99 99 45				.dword	$4599999a
>353b	e6 80					.byte	$e6,$80
.353d	20 4f 59	jsr $594f		jsr	FloatSine
.3540	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.99265938
>3543	6b 76 0f 7f				.dword	$7f0f766b
>3547	e1 00					.byte	$e1,$00
.3549	20 87 50	jsr $5087		jsr	FloatSubtract
.354c	20 51 50	jsr $5051		jsr	FPAbs
.354f	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>3552	4c 37 89 41				.dword	$4189374c
>3556	d8 00					.byte	$d8,$00
.3558	20 4e 51	jsr $514e		jsr	FloatCompare
.355b	20 2e 51	jsr $512e		jsr	CompareLess
.355e	20 44 50	jsr $5044		jsr	FPAssertCheck
.3561	20 54 50	jsr $5054		jsr	FPPushConstant	; -17.4
>3564	9a 99 99 45				.dword	$4599999a
>3568	e6 80					.byte	$e6,$80
.356a	20 af 57	jsr $57af		jsr	FloatCosine
.356d	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.1209436
>3570	9b a3 d8 7b				.dword	$7bd8a39b
>3574	de 00					.byte	$de,$00
.3576	20 87 50	jsr $5087		jsr	FloatSubtract
.3579	20 51 50	jsr $5051		jsr	FPAbs
.357c	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>357f	4c 37 89 41				.dword	$4189374c
>3583	d8 00					.byte	$d8,$00
.3585	20 4e 51	jsr $514e		jsr	FloatCompare
.3588	20 2e 51	jsr $512e		jsr	CompareLess
.358b	20 44 50	jsr $5044		jsr	FPAssertCheck
.358e	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.27
>3591	52 b8 1e 45				.dword	$451eb852
>3595	e0 00					.byte	$e0,$00
.3597	20 c0 59	jsr $59c0		jsr	FloatTangent
.359a	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.27675814
>359d	18 9f d9 46				.dword	$46d99f18
>35a1	e0 00					.byte	$e0,$00
.35a3	20 87 50	jsr $5087		jsr	FloatSubtract
.35a6	20 51 50	jsr $5051		jsr	FPAbs
.35a9	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>35ac	4c 37 89 41				.dword	$4189374c
>35b0	d8 00					.byte	$d8,$00
.35b2	20 4e 51	jsr $514e		jsr	FloatCompare
.35b5	20 44 50	jsr $5044		jsr	FPAssertCheck
.35b8	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.59
>35bb	b8 1e 85 4b				.dword	$4b851eb8
>35bf	e1 00					.byte	$e1,$00
.35c1	20 94 56	jsr $5694		jsr	FloatArcTan
.35c4	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.53303411
>35c7	33 76 3a 44				.dword	$443a7633
>35cb	e1 00					.byte	$e1,$00
.35cd	20 87 50	jsr $5087		jsr	FloatSubtract
.35d0	20 51 50	jsr $5051		jsr	FPAbs
.35d3	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>35d6	4c 37 89 41				.dword	$4189374c
>35da	d8 00					.byte	$d8,$00
.35dc	20 4e 51	jsr $514e		jsr	FloatCompare
.35df	20 44 50	jsr $5044		jsr	FPAssertCheck
.35e2	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.51
>35e5	0a d7 a3 60				.dword	$60a3d70a
>35e9	e2 00					.byte	$e2,$00
.35eb	20 bb 57	jsr $57bb		jsr	FloatExponent
.35ee	20 54 50	jsr $5054		jsr	FPPushConstant	; 4.52673079
>35f1	44 7d 6d 48				.dword	$486d7d44
>35f5	e4 00					.byte	$e4,$00
.35f7	20 87 50	jsr $5087		jsr	FloatSubtract
.35fa	20 51 50	jsr $5051		jsr	FPAbs
.35fd	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>3600	4c 37 89 41				.dword	$4189374c
>3604	d8 00					.byte	$d8,$00
.3606	20 4e 51	jsr $514e		jsr	FloatCompare
.3609	20 44 50	jsr $5044		jsr	FPAssertCheck
.360c	20 54 50	jsr $5054		jsr	FPPushConstant	; 92.01
>360f	5c 8f 02 5c				.dword	$5c028f5c
>3613	e8 00					.byte	$e8,$00
.3615	20 be 58	jsr $58be		jsr	FloatLogarithm
.3618	20 54 50	jsr $5054		jsr	FPPushConstant	; 4.52189727
>361b	f4 b0 59 48				.dword	$4859b0f4
>361f	e4 00					.byte	$e4,$00
.3621	20 87 50	jsr $5087		jsr	FloatSubtract
.3624	20 51 50	jsr $5051		jsr	FPAbs
.3627	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>362a	4c 37 89 41				.dword	$4189374c
>362e	d8 00					.byte	$d8,$00
.3630	20 4e 51	jsr $514e		jsr	FloatCompare
.3633	20 44 50	jsr $5044		jsr	FPAssertCheck
.3636	20 54 50	jsr $5054		jsr	FPPushConstant	; 67.18
>3639	7b 14 2e 43				.dword	$432e147b
>363d	e8 00					.byte	$e8,$00
.363f	20 b4 59	jsr $59b4		jsr	FloatSquareRoot
.3642	20 54 50	jsr $5054		jsr	FPPushConstant	; 8.19634065
>3645	0c 1b 92 41				.dword	$41921b0c
>3649	e5 00					.byte	$e5,$00
.364b	20 87 50	jsr $5087		jsr	FloatSubtract
.364e	20 51 50	jsr $5051		jsr	FPAbs
.3651	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>3654	4c 37 89 41				.dword	$4189374c
>3658	d8 00					.byte	$d8,$00
.365a	20 4e 51	jsr $514e		jsr	FloatCompare
.365d	20 44 50	jsr $5044		jsr	FPAssertCheck
.3660	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.62
>3663	7b 14 ae 67				.dword	$67ae147b
>3667	e2 00					.byte	$e2,$00
.3669	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.4
>366c	9a 99 99 59				.dword	$5999999a
>3670	e2 00					.byte	$e2,$00
.3672	20 32 59	jsr $5932		jsr	FloatPower
.3675	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.96481208
>3678	2b 7b bf 7d				.dword	$7dbf7b2b
>367c	e2 00					.byte	$e2,$00
.367e	20 87 50	jsr $5087		jsr	FloatSubtract
.3681	20 51 50	jsr $5051		jsr	FPAbs
.3684	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.01
>3687	1f 85 eb 51				.dword	$51eb851f
>368b	db 00					.byte	$db,$00
.368d	20 4e 51	jsr $514e		jsr	FloatCompare
.3690	20 44 50	jsr $5044		jsr	FPAssertCheck
.3693	20 54 50	jsr $5054		jsr	FPPushConstant	; 66.68138009
>3696	ed 6e ae 42				.dword	$42ae6eed
>369a	e8 00					.byte	$e8,$00
.369c	20 2b 56	jsr $562b		jsr	FloatNegate
.369f	20 54 50	jsr $5054		jsr	FPPushConstant	; -66.68138009
>36a2	ed 6e ae 42				.dword	$42ae6eed
>36a6	e8 80					.byte	$e8,$80
.36a8	20 4e 51	jsr $514e		jsr	FloatCompare
.36ab	20 18 51	jsr $5118		jsr	CompareEqual
.36ae	20 44 50	jsr $5044		jsr	FPAssertCheck
.36b1	20 54 50	jsr $5054		jsr	FPPushConstant	; 66.68138009
>36b4	ed 6e ae 42				.dword	$42ae6eed
>36b8	e8 00					.byte	$e8,$00
.36ba	20 a4 52	jsr $52a4		jsr	FloatIntegerPart
.36bd	20 54 50	jsr $5054		jsr	FPPushConstant	; 66
>36c0	42 00 00 00				.dword	$00000042
>36c4	00 00					.byte	$00,$00
.36c6	20 4e 51	jsr $514e		jsr	FloatCompare
.36c9	20 18 51	jsr $5118		jsr	CompareEqual
.36cc	20 44 50	jsr $5044		jsr	FPAssertCheck
.36cf	20 54 50	jsr $5054		jsr	FPPushConstant	; -14.91
>36d2	14 ae 47 77				.dword	$7747ae14
>36d6	e5 80					.byte	$e5,$80
.36d8	20 4f 59	jsr $594f		jsr	FloatSine
.36db	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.7159356
>36de	1a c7 a3 5b				.dword	$5ba3c71a
>36e2	e1 80					.byte	$e1,$80
.36e4	20 87 50	jsr $5087		jsr	FloatSubtract
.36e7	20 51 50	jsr $5051		jsr	FPAbs
.36ea	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>36ed	4c 37 89 41				.dword	$4189374c
>36f1	d8 00					.byte	$d8,$00
.36f3	20 4e 51	jsr $514e		jsr	FloatCompare
.36f6	20 2e 51	jsr $512e		jsr	CompareLess
.36f9	20 44 50	jsr $5044		jsr	FPAssertCheck
.36fc	20 54 50	jsr $5054		jsr	FPPushConstant	; -14.91
>36ff	14 ae 47 77				.dword	$7747ae14
>3703	e5 80					.byte	$e5,$80
.3705	20 af 57	jsr $57af		jsr	FloatCosine
.3708	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.69816633
>370b	a9 83 5d 59				.dword	$595d83a9
>370f	e1 80					.byte	$e1,$80
.3711	20 87 50	jsr $5087		jsr	FloatSubtract
.3714	20 51 50	jsr $5051		jsr	FPAbs
.3717	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>371a	4c 37 89 41				.dword	$4189374c
>371e	d8 00					.byte	$d8,$00
.3720	20 4e 51	jsr $514e		jsr	FloatCompare
.3723	20 2e 51	jsr $512e		jsr	CompareLess
.3726	20 44 50	jsr $5044		jsr	FPAssertCheck
.3729	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.28
>372c	7b 14 ae 47				.dword	$47ae147b
>3730	e0 00					.byte	$e0,$00
.3732	20 c0 59	jsr $59c0		jsr	FloatTangent
.3735	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.28755433
>3738	1b 29 9d 49				.dword	$499d291b
>373c	e0 00					.byte	$e0,$00
.373e	20 87 50	jsr $5087		jsr	FloatSubtract
.3741	20 51 50	jsr $5051		jsr	FPAbs
.3744	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>3747	4c 37 89 41				.dword	$4189374c
>374b	d8 00					.byte	$d8,$00
.374d	20 4e 51	jsr $514e		jsr	FloatCompare
.3750	20 44 50	jsr $5044		jsr	FPAssertCheck
.3753	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.434
>3756	be 9f 1a 6f				.dword	$6f1a9fbe
>375a	e0 00					.byte	$e0,$00
.375c	20 94 56	jsr $5694		jsr	FloatArcTan
.375f	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.40946896
>3762	30 f5 d2 68				.dword	$68d2f530
>3766	e0 00					.byte	$e0,$00
.3768	20 87 50	jsr $5087		jsr	FloatSubtract
.376b	20 51 50	jsr $5051		jsr	FPAbs
.376e	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>3771	4c 37 89 41				.dword	$4189374c
>3775	d8 00					.byte	$d8,$00
.3777	20 4e 51	jsr $514e		jsr	FloatCompare
.377a	20 44 50	jsr $5044		jsr	FPAssertCheck
.377d	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.93
>3780	71 3d 0a 77				.dword	$770a3d71
>3784	e1 00					.byte	$e1,$00
.3786	20 bb 57	jsr $57bb		jsr	FloatExponent
.3789	20 54 50	jsr $5054		jsr	FPPushConstant	; 2.53450918
>378c	ff b2 1a 51				.dword	$511ab2ff
>3790	e3 00					.byte	$e3,$00
.3792	20 87 50	jsr $5087		jsr	FloatSubtract
.3795	20 51 50	jsr $5051		jsr	FPAbs
.3798	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>379b	4c 37 89 41				.dword	$4189374c
>379f	d8 00					.byte	$d8,$00
.37a1	20 4e 51	jsr $514e		jsr	FloatCompare
.37a4	20 44 50	jsr $5044		jsr	FPAssertCheck
.37a7	20 54 50	jsr $5054		jsr	FPPushConstant	; 6.19
>37aa	71 3d 0a 63				.dword	$630a3d71
>37ae	e4 00					.byte	$e4,$00
.37b0	20 be 58	jsr $58be		jsr	FloatLogarithm
.37b3	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.82293509
>37b6	f1 f7 aa 74				.dword	$74aaf7f1
>37ba	e2 00					.byte	$e2,$00
.37bc	20 87 50	jsr $5087		jsr	FloatSubtract
.37bf	20 51 50	jsr $5051		jsr	FPAbs
.37c2	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>37c5	4c 37 89 41				.dword	$4189374c
>37c9	d8 00					.byte	$d8,$00
.37cb	20 4e 51	jsr $514e		jsr	FloatCompare
.37ce	20 44 50	jsr $5044		jsr	FPAssertCheck
.37d1	20 54 50	jsr $5054		jsr	FPPushConstant	; 49.2
>37d4	66 66 66 62				.dword	$62666666
>37d8	e7 00					.byte	$e7,$00
.37da	20 b4 59	jsr $59b4		jsr	FloatSquareRoot
.37dd	20 54 50	jsr $5054		jsr	FPPushConstant	; 7.01427117
>37e0	68 74 3a 70				.dword	$703a7468
>37e4	e4 00					.byte	$e4,$00
.37e6	20 87 50	jsr $5087		jsr	FloatSubtract
.37e9	20 51 50	jsr $5051		jsr	FPAbs
.37ec	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>37ef	4c 37 89 41				.dword	$4189374c
>37f3	d8 00					.byte	$d8,$00
.37f5	20 4e 51	jsr $514e		jsr	FloatCompare
.37f8	20 44 50	jsr $5044		jsr	FPAssertCheck
.37fb	20 54 50	jsr $5054		jsr	FPPushConstant	; 2.35
>37fe	33 33 33 4b				.dword	$4b333333
>3802	e3 00					.byte	$e3,$00
.3804	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.8
>3807	33 33 33 73				.dword	$73333333
>380b	e2 00					.byte	$e2,$00
.380d	20 32 59	jsr $5932		jsr	FloatPower
.3810	20 54 50	jsr $5054		jsr	FPPushConstant	; 4.65502644
>3813	01 fd 7a 4a				.dword	$4a7afd01
>3817	e4 00					.byte	$e4,$00
.3819	20 87 50	jsr $5087		jsr	FloatSubtract
.381c	20 51 50	jsr $5051		jsr	FPAbs
.381f	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.01
>3822	1f 85 eb 51				.dword	$51eb851f
>3826	db 00					.byte	$db,$00
.3828	20 4e 51	jsr $514e		jsr	FloatCompare
.382b	20 44 50	jsr $5044		jsr	FPAssertCheck
.382e	20 54 50	jsr $5054		jsr	FPPushConstant	; 24.44853001
>3831	73 4b cb 61				.dword	$61cb4b73
>3835	e6 00					.byte	$e6,$00
.3837	20 2b 56	jsr $562b		jsr	FloatNegate
.383a	20 54 50	jsr $5054		jsr	FPPushConstant	; -24.44853001
>383d	73 4b cb 61				.dword	$61cb4b73
>3841	e6 80					.byte	$e6,$80
.3843	20 4e 51	jsr $514e		jsr	FloatCompare
.3846	20 18 51	jsr $5118		jsr	CompareEqual
.3849	20 44 50	jsr $5044		jsr	FPAssertCheck
.384c	20 54 50	jsr $5054		jsr	FPPushConstant	; 24.44853001
>384f	73 4b cb 61				.dword	$61cb4b73
>3853	e6 00					.byte	$e6,$00
.3855	20 a4 52	jsr $52a4		jsr	FloatIntegerPart
.3858	20 54 50	jsr $5054		jsr	FPPushConstant	; 24
>385b	18 00 00 00				.dword	$00000018
>385f	00 00					.byte	$00,$00
.3861	20 4e 51	jsr $514e		jsr	FloatCompare
.3864	20 18 51	jsr $5118		jsr	CompareEqual
.3867	20 44 50	jsr $5044		jsr	FPAssertCheck
.386a	20 54 50	jsr $5054		jsr	FPPushConstant	; -10.21
>386d	7b 14 ae 51				.dword	$51ae147b
>3871	e5 80					.byte	$e5,$80
.3873	20 4f 59	jsr $594f		jsr	FloatSine
.3876	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.70698223
>3879	ca 64 7e 5a				.dword	$5a7e64ca
>387d	e1 00					.byte	$e1,$00
.387f	20 87 50	jsr $5087		jsr	FloatSubtract
.3882	20 51 50	jsr $5051		jsr	FPAbs
.3885	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>3888	4c 37 89 41				.dword	$4189374c
>388c	d8 00					.byte	$d8,$00
.388e	20 4e 51	jsr $514e		jsr	FloatCompare
.3891	20 2e 51	jsr $512e		jsr	CompareLess
.3894	20 44 50	jsr $5044		jsr	FPAssertCheck
.3897	20 54 50	jsr $5054		jsr	FPPushConstant	; -10.21
>389a	7b 14 ae 51				.dword	$51ae147b
>389e	e5 80					.byte	$e5,$80
.38a0	20 af 57	jsr $57af		jsr	FloatCosine
.38a3	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.70723131
>38a6	3a 8e 86 5a				.dword	$5a868e3a
>38aa	e1 80					.byte	$e1,$80
.38ac	20 87 50	jsr $5087		jsr	FloatSubtract
.38af	20 51 50	jsr $5051		jsr	FPAbs
.38b2	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>38b5	4c 37 89 41				.dword	$4189374c
>38b9	d8 00					.byte	$d8,$00
.38bb	20 4e 51	jsr $514e		jsr	FloatCompare
.38be	20 2e 51	jsr $512e		jsr	CompareLess
.38c1	20 44 50	jsr $5044		jsr	FPAssertCheck
.38c4	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.26
>38c7	29 5c 8f 42				.dword	$428f5c29
>38cb	e0 00					.byte	$e0,$00
.38cd	20 c0 59	jsr $59c0		jsr	FloatTangent
.38d0	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.26602154
>38d3	d6 fc 19 44				.dword	$4419fcd6
>38d7	e0 00					.byte	$e0,$00
.38d9	20 87 50	jsr $5087		jsr	FloatSubtract
.38dc	20 51 50	jsr $5051		jsr	FPAbs
.38df	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>38e2	4c 37 89 41				.dword	$4189374c
>38e6	d8 00					.byte	$d8,$00
.38e8	20 4e 51	jsr $514e		jsr	FloatCompare
.38eb	20 44 50	jsr $5044		jsr	FPAssertCheck
.38ee	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.312
>38f1	d9 ce f7 53				.dword	$53f7ced9
>38f5	e2 00					.byte	$e2,$00
.38f7	20 94 56	jsr $5694		jsr	FloatArcTan
.38fa	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.91953592
>38fd	60 5a b3 75				.dword	$75b35a60
>3901	e1 00					.byte	$e1,$00
.3903	20 87 50	jsr $5087		jsr	FloatSubtract
.3906	20 51 50	jsr $5051		jsr	FPAbs
.3909	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>390c	4c 37 89 41				.dword	$4189374c
>3910	d8 00					.byte	$d8,$00
.3912	20 4e 51	jsr $514e		jsr	FloatCompare
.3915	20 44 50	jsr $5044		jsr	FPAssertCheck
.3918	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.92
>391b	5c 8f c2 75				.dword	$75c28f5c
>391f	e1 80					.byte	$e1,$80
.3921	20 bb 57	jsr $57bb		jsr	FloatExponent
.3924	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.39851904
>3927	04 58 05 66				.dword	$66055804
>392b	e0 00					.byte	$e0,$00
.392d	20 87 50	jsr $5087		jsr	FloatSubtract
.3930	20 51 50	jsr $5051		jsr	FPAbs
.3933	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>3936	4c 37 89 41				.dword	$4189374c
>393a	d8 00					.byte	$d8,$00
.393c	20 4e 51	jsr $514e		jsr	FloatCompare
.393f	20 44 50	jsr $5044		jsr	FPAssertCheck
.3942	20 54 50	jsr $5054		jsr	FPPushConstant	; 62.52
>3945	71 3d 0a 7d				.dword	$7d0a3d71
>3949	e7 00					.byte	$e7,$00
.394b	20 be 58	jsr $58be		jsr	FloatLogarithm
.394e	20 54 50	jsr $5054		jsr	FPPushConstant	; 4.13548651
>3951	e7 f3 2a 42				.dword	$422af3e7
>3955	e4 00					.byte	$e4,$00
.3957	20 87 50	jsr $5087		jsr	FloatSubtract
.395a	20 51 50	jsr $5051		jsr	FPAbs
.395d	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>3960	4c 37 89 41				.dword	$4189374c
>3964	d8 00					.byte	$d8,$00
.3966	20 4e 51	jsr $514e		jsr	FloatCompare
.3969	20 44 50	jsr $5044		jsr	FPAssertCheck
.396c	20 54 50	jsr $5054		jsr	FPPushConstant	; 80.99
>396f	a4 70 fd 50				.dword	$50fd70a4
>3973	e8 00					.byte	$e8,$00
.3975	20 b4 59	jsr $59b4		jsr	FloatSquareRoot
.3978	20 54 50	jsr $5054		jsr	FPPushConstant	; 8.99944443
>397b	b9 dc fe 47				.dword	$47fedcb9
>397f	e5 00					.byte	$e5,$00
.3981	20 87 50	jsr $5087		jsr	FloatSubtract
.3984	20 51 50	jsr $5051		jsr	FPAbs
.3987	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>398a	4c 37 89 41				.dword	$4189374c
>398e	d8 00					.byte	$d8,$00
.3990	20 4e 51	jsr $514e		jsr	FloatCompare
.3993	20 44 50	jsr $5044		jsr	FPAssertCheck
.3996	20 54 50	jsr $5054		jsr	FPPushConstant	; 3.2
>3999	66 66 66 66				.dword	$66666666
>399d	e3 00					.byte	$e3,$00
.399f	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.8
>39a2	66 66 66 66				.dword	$66666666
>39a6	e1 00					.byte	$e1,$00
.39a8	20 32 59	jsr $5932		jsr	FloatPower
.39ab	20 54 50	jsr $5054		jsr	FPPushConstant	; 2.53582911
>39ae	17 83 25 51				.dword	$51258317
>39b2	e3 00					.byte	$e3,$00
.39b4	20 87 50	jsr $5087		jsr	FloatSubtract
.39b7	20 51 50	jsr $5051		jsr	FPAbs
.39ba	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.01
>39bd	1f 85 eb 51				.dword	$51eb851f
>39c1	db 00					.byte	$db,$00
.39c3	20 4e 51	jsr $514e		jsr	FloatCompare
.39c6	20 44 50	jsr $5044		jsr	FPAssertCheck
.39c9	20 54 50	jsr $5054		jsr	FPPushConstant	; 6.51389001
>39cc	bb e4 38 68				.dword	$6838e4bb
>39d0	e4 00					.byte	$e4,$00
.39d2	20 2b 56	jsr $562b		jsr	FloatNegate
.39d5	20 54 50	jsr $5054		jsr	FPPushConstant	; -6.51389001
>39d8	bb e4 38 68				.dword	$6838e4bb
>39dc	e4 80					.byte	$e4,$80
.39de	20 4e 51	jsr $514e		jsr	FloatCompare
.39e1	20 18 51	jsr $5118		jsr	CompareEqual
.39e4	20 44 50	jsr $5044		jsr	FPAssertCheck
.39e7	20 54 50	jsr $5054		jsr	FPPushConstant	; 6.51389001
>39ea	bb e4 38 68				.dword	$6838e4bb
>39ee	e4 00					.byte	$e4,$00
.39f0	20 a4 52	jsr $52a4		jsr	FloatIntegerPart
.39f3	20 54 50	jsr $5054		jsr	FPPushConstant	; 6
>39f6	06 00 00 00				.dword	$00000006
>39fa	00 00					.byte	$00,$00
.39fc	20 4e 51	jsr $514e		jsr	FloatCompare
.39ff	20 18 51	jsr $5118		jsr	CompareEqual
.3a02	20 44 50	jsr $5044		jsr	FPAssertCheck
.3a05	20 54 50	jsr $5054		jsr	FPPushConstant	; -4.7
>3a08	33 33 33 4b				.dword	$4b333333
>3a0c	e4 80					.byte	$e4,$80
.3a0e	20 4f 59	jsr $594f		jsr	FloatSine
.3a11	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.99992326
>3a14	42 7c fd 7f				.dword	$7ffd7c42
>3a18	e1 00					.byte	$e1,$00
.3a1a	20 87 50	jsr $5087		jsr	FloatSubtract
.3a1d	20 51 50	jsr $5051		jsr	FPAbs
.3a20	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>3a23	4c 37 89 41				.dword	$4189374c
>3a27	d8 00					.byte	$d8,$00
.3a29	20 4e 51	jsr $514e		jsr	FloatCompare
.3a2c	20 2e 51	jsr $512e		jsr	CompareLess
.3a2f	20 44 50	jsr $5044		jsr	FPAssertCheck
.3a32	20 54 50	jsr $5054		jsr	FPPushConstant	; -4.7
>3a35	33 33 33 4b				.dword	$4b333333
>3a39	e4 80					.byte	$e4,$80
.3a3b	20 af 57	jsr $57af		jsr	FloatCosine
.3a3e	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.01238866
>3a41	31 e7 7c 65				.dword	$657ce731
>3a45	db 80					.byte	$db,$80
.3a47	20 87 50	jsr $5087		jsr	FloatSubtract
.3a4a	20 51 50	jsr $5051		jsr	FPAbs
.3a4d	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>3a50	4c 37 89 41				.dword	$4189374c
>3a54	d8 00					.byte	$d8,$00
.3a56	20 4e 51	jsr $514e		jsr	FloatCompare
.3a59	20 2e 51	jsr $512e		jsr	CompareLess
.3a5c	20 44 50	jsr $5044		jsr	FPAssertCheck
.3a5f	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.29
>3a62	a4 70 3d 4a				.dword	$4a3d70a4
>3a66	e0 00					.byte	$e0,$00
.3a68	20 c0 59	jsr $59c0		jsr	FloatTangent
.3a6b	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.29841279
>3a6e	d6 c7 64 4c				.dword	$4c64c7d6
>3a72	e0 00					.byte	$e0,$00
.3a74	20 87 50	jsr $5087		jsr	FloatSubtract
.3a77	20 51 50	jsr $5051		jsr	FPAbs
.3a7a	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>3a7d	4c 37 89 41				.dword	$4189374c
>3a81	d8 00					.byte	$d8,$00
.3a83	20 4e 51	jsr $514e		jsr	FloatCompare
.3a86	20 44 50	jsr $5044		jsr	FPAssertCheck
.3a89	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.45
>3a8c	cd cc cc 5c				.dword	$5ccccccd
>3a90	e2 00					.byte	$e2,$00
.3a92	20 94 56	jsr $5694		jsr	FloatArcTan
.3a95	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.96704699
>3a98	1e 32 c8 7b				.dword	$7bc8321e
>3a9c	e1 00					.byte	$e1,$00
.3a9e	20 87 50	jsr $5087		jsr	FloatSubtract
.3aa1	20 51 50	jsr $5051		jsr	FPAbs
.3aa4	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>3aa7	4c 37 89 41				.dword	$4189374c
>3aab	d8 00					.byte	$d8,$00
.3aad	20 4e 51	jsr $514e		jsr	FloatCompare
.3ab0	20 44 50	jsr $5044		jsr	FPAssertCheck
.3ab3	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.77
>3ab6	14 ae 47 71				.dword	$7147ae14
>3aba	e2 00					.byte	$e2,$00
.3abc	20 bb 57	jsr $57bb		jsr	FloatExponent
.3abf	20 54 50	jsr $5054		jsr	FPPushConstant	; 5.87085336
>3ac2	ef 03 ef 5d				.dword	$5def03ef
>3ac6	e4 00					.byte	$e4,$00
.3ac8	20 87 50	jsr $5087		jsr	FloatSubtract
.3acb	20 51 50	jsr $5051		jsr	FPAbs
.3ace	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>3ad1	4c 37 89 41				.dword	$4189374c
>3ad5	d8 00					.byte	$d8,$00
.3ad7	20 4e 51	jsr $514e		jsr	FloatCompare
.3ada	20 44 50	jsr $5044		jsr	FPAssertCheck
.3add	20 54 50	jsr $5054		jsr	FPPushConstant	; 19.54
>3ae0	c3 f5 28 4e				.dword	$4e28f5c3
>3ae4	e6 00					.byte	$e6,$00
.3ae6	20 be 58	jsr $58be		jsr	FloatLogarithm
.3ae9	20 54 50	jsr $5054		jsr	FPPushConstant	; 2.97246365
>3aec	17 6c 1e 5f				.dword	$5f1e6c17
>3af0	e3 00					.byte	$e3,$00
.3af2	20 87 50	jsr $5087		jsr	FloatSubtract
.3af5	20 51 50	jsr $5051		jsr	FPAbs
.3af8	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>3afb	4c 37 89 41				.dword	$4189374c
>3aff	d8 00					.byte	$d8,$00
.3b01	20 4e 51	jsr $514e		jsr	FloatCompare
.3b04	20 44 50	jsr $5044		jsr	FPAssertCheck
.3b07	20 54 50	jsr $5054		jsr	FPPushConstant	; 66.39
>3b0a	0a d7 63 42				.dword	$4263d70a
>3b0e	e8 00					.byte	$e8,$00
.3b10	20 b4 59	jsr $59b4		jsr	FloatSquareRoot
.3b13	20 54 50	jsr $5054		jsr	FPPushConstant	; 8.14800589
>3b16	b6 1d 2f 41				.dword	$412f1db6
>3b1a	e5 00					.byte	$e5,$00
.3b1c	20 87 50	jsr $5087		jsr	FloatSubtract
.3b1f	20 51 50	jsr $5051		jsr	FPAbs
.3b22	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>3b25	4c 37 89 41				.dword	$4189374c
>3b29	d8 00					.byte	$d8,$00
.3b2b	20 4e 51	jsr $514e		jsr	FloatCompare
.3b2e	20 44 50	jsr $5044		jsr	FPAssertCheck
.3b31	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.58
>3b34	a4 70 3d 4a				.dword	$4a3d70a4
>3b38	e1 00					.byte	$e1,$00
.3b3a	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.8
>3b3d	33 33 33 73				.dword	$73333333
>3b41	e2 00					.byte	$e2,$00
.3b43	20 32 59	jsr $5932		jsr	FloatPower
.3b46	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.37512015
>3b49	c8 df 07 60				.dword	$6007dfc8
>3b4d	e0 00					.byte	$e0,$00
.3b4f	20 87 50	jsr $5087		jsr	FloatSubtract
.3b52	20 51 50	jsr $5051		jsr	FPAbs
.3b55	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.01
>3b58	1f 85 eb 51				.dword	$51eb851f
>3b5c	db 00					.byte	$db,$00
.3b5e	20 4e 51	jsr $514e		jsr	FloatCompare
.3b61	20 44 50	jsr $5044		jsr	FPAssertCheck
.3b64	20 54 50	jsr $5054		jsr	FPPushConstant	; -1.45152669
>3b67	34 d0 e5 5c				.dword	$5ce5d034
>3b6b	e2 80					.byte	$e2,$80
.3b6d	20 2b 56	jsr $562b		jsr	FloatNegate
.3b70	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.45152669
>3b73	34 d0 e5 5c				.dword	$5ce5d034
>3b77	e2 00					.byte	$e2,$00
.3b79	20 4e 51	jsr $514e		jsr	FloatCompare
.3b7c	20 18 51	jsr $5118		jsr	CompareEqual
.3b7f	20 44 50	jsr $5044		jsr	FPAssertCheck
.3b82	20 54 50	jsr $5054		jsr	FPPushConstant	; -1.45152669
>3b85	34 d0 e5 5c				.dword	$5ce5d034
>3b89	e2 80					.byte	$e2,$80
.3b8b	20 a4 52	jsr $52a4		jsr	FloatIntegerPart
.3b8e	20 54 50	jsr $5054		jsr	FPPushConstant	; -1
>3b91	01 00 00 00				.dword	$00000001
>3b95	00 80					.byte	$00,$80
.3b97	20 4e 51	jsr $514e		jsr	FloatCompare
.3b9a	20 18 51	jsr $5118		jsr	CompareEqual
.3b9d	20 44 50	jsr $5044		jsr	FPAssertCheck
.3ba0	20 54 50	jsr $5054		jsr	FPPushConstant	; -16.71
>3ba3	3d 0a d7 42				.dword	$42d70a3d
>3ba7	e6 80					.byte	$e6,$80
.3ba9	20 4f 59	jsr $594f		jsr	FloatSine
.3bac	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.84256969
>3baf	d8 52 d9 6b				.dword	$6bd952d8
>3bb3	e1 00					.byte	$e1,$00
.3bb5	20 87 50	jsr $5087		jsr	FloatSubtract
.3bb8	20 51 50	jsr $5051		jsr	FPAbs
.3bbb	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>3bbe	4c 37 89 41				.dword	$4189374c
>3bc2	d8 00					.byte	$d8,$00
.3bc4	20 4e 51	jsr $514e		jsr	FloatCompare
.3bc7	20 2e 51	jsr $512e		jsr	CompareLess
.3bca	20 44 50	jsr $5044		jsr	FPAssertCheck
.3bcd	20 54 50	jsr $5054		jsr	FPPushConstant	; -16.71
>3bd0	3d 0a d7 42				.dword	$42d70a3d
>3bd4	e6 80					.byte	$e6,$80
.3bd6	20 af 57	jsr $57af		jsr	FloatCosine
.3bd9	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.53858734
>3bdc	12 6e f0 44				.dword	$44f06e12
>3be0	e1 80					.byte	$e1,$80
.3be2	20 87 50	jsr $5087		jsr	FloatSubtract
.3be5	20 51 50	jsr $5051		jsr	FPAbs
.3be8	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>3beb	4c 37 89 41				.dword	$4189374c
>3bef	d8 00					.byte	$d8,$00
.3bf1	20 4e 51	jsr $514e		jsr	FloatCompare
.3bf4	20 2e 51	jsr $512e		jsr	CompareLess
.3bf7	20 44 50	jsr $5044		jsr	FPAssertCheck
.3bfa	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.37
>3bfd	ec 51 b8 5e				.dword	$5eb851ec
>3c01	e0 00					.byte	$e0,$00
.3c03	20 c0 59	jsr $59c0		jsr	FloatTangent
.3c06	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.38786316
>3c09	04 00 4b 63				.dword	$634b0004
>3c0d	e0 00					.byte	$e0,$00
.3c0f	20 87 50	jsr $5087		jsr	FloatSubtract
.3c12	20 51 50	jsr $5051		jsr	FPAbs
.3c15	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>3c18	4c 37 89 41				.dword	$4189374c
>3c1c	d8 00					.byte	$d8,$00
.3c1e	20 4e 51	jsr $514e		jsr	FloatCompare
.3c21	20 44 50	jsr $5044		jsr	FPAssertCheck
.3c24	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.132
>3c27	21 b0 72 48				.dword	$4872b021
>3c2b	e2 00					.byte	$e2,$00
.3c2d	20 94 56	jsr $5694		jsr	FloatArcTan
.3c30	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.84723293
>3c33	ef 20 72 6c				.dword	$6c7220ef
>3c37	e1 00					.byte	$e1,$00
.3c39	20 87 50	jsr $5087		jsr	FloatSubtract
.3c3c	20 51 50	jsr $5051		jsr	FPAbs
.3c3f	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>3c42	4c 37 89 41				.dword	$4189374c
>3c46	d8 00					.byte	$d8,$00
.3c48	20 4e 51	jsr $514e		jsr	FloatCompare
.3c4b	20 44 50	jsr $5044		jsr	FPAssertCheck
.3c4e	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.12
>3c51	ae 47 e1 7a				.dword	$7ae147ae
>3c55	de 80					.byte	$de,$80
.3c57	20 bb 57	jsr $57bb		jsr	FloatExponent
.3c5a	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.88692044
>3c5d	e6 9b 86 71				.dword	$71869be6
>3c61	e1 00					.byte	$e1,$00
.3c63	20 87 50	jsr $5087		jsr	FloatSubtract
.3c66	20 51 50	jsr $5051		jsr	FPAbs
.3c69	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>3c6c	4c 37 89 41				.dword	$4189374c
>3c70	d8 00					.byte	$d8,$00
.3c72	20 4e 51	jsr $514e		jsr	FloatCompare
.3c75	20 44 50	jsr $5044		jsr	FPAssertCheck
.3c78	20 54 50	jsr $5054		jsr	FPPushConstant	; 13.78
>3c7b	a4 70 3d 6e				.dword	$6e3d70a4
>3c7f	e5 00					.byte	$e5,$00
.3c81	20 be 58	jsr $58be		jsr	FloatLogarithm
.3c84	20 54 50	jsr $5054		jsr	FPPushConstant	; 2.62321827
>3c87	71 67 f1 53				.dword	$53f16771
>3c8b	e3 00					.byte	$e3,$00
.3c8d	20 87 50	jsr $5087		jsr	FloatSubtract
.3c90	20 51 50	jsr $5051		jsr	FPAbs
.3c93	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>3c96	4c 37 89 41				.dword	$4189374c
>3c9a	d8 00					.byte	$d8,$00
.3c9c	20 4e 51	jsr $514e		jsr	FloatCompare
.3c9f	20 44 50	jsr $5044		jsr	FPAssertCheck
.3ca2	20 54 50	jsr $5054		jsr	FPPushConstant	; 5.15
>3ca5	66 66 66 52				.dword	$52666666
>3ca9	e4 00					.byte	$e4,$00
.3cab	20 b4 59	jsr $59b4		jsr	FloatSquareRoot
.3cae	20 54 50	jsr $5054		jsr	FPPushConstant	; 2.26936114
>3cb1	41 9b 9e 48				.dword	$489e9b41
>3cb5	e3 00					.byte	$e3,$00
.3cb7	20 87 50	jsr $5087		jsr	FloatSubtract
.3cba	20 51 50	jsr $5051		jsr	FPAbs
.3cbd	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>3cc0	4c 37 89 41				.dword	$4189374c
>3cc4	d8 00					.byte	$d8,$00
.3cc6	20 4e 51	jsr $514e		jsr	FloatCompare
.3cc9	20 44 50	jsr $5044		jsr	FPAssertCheck
.3ccc	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.88666667
>3ccf	90 25 bf 78				.dword	$78bf2590
>3cd3	e2 00					.byte	$e2,$00
.3cd5	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.3
>3cd8	33 33 33 53				.dword	$53333333
>3cdc	e2 00					.byte	$e2,$00
.3cde	20 32 59	jsr $5932		jsr	FloatPower
.3ce1	20 54 50	jsr $5054		jsr	FPPushConstant	; 2.28246291
>3ce4	a8 ef 09 49				.dword	$4909efa8
>3ce8	e3 00					.byte	$e3,$00
.3cea	20 87 50	jsr $5087		jsr	FloatSubtract
.3ced	20 51 50	jsr $5051		jsr	FPAbs
.3cf0	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.01
>3cf3	1f 85 eb 51				.dword	$51eb851f
>3cf7	db 00					.byte	$db,$00
.3cf9	20 4e 51	jsr $514e		jsr	FloatCompare
.3cfc	20 44 50	jsr $5044		jsr	FPAssertCheck
.3cff	20 54 50	jsr $5054		jsr	FPPushConstant	; -9.12278286
>3d02	95 75 fb 48				.dword	$48fb7595
>3d06	e5 80					.byte	$e5,$80
.3d08	20 2b 56	jsr $562b		jsr	FloatNegate
.3d0b	20 54 50	jsr $5054		jsr	FPPushConstant	; 9.12278286
>3d0e	95 75 fb 48				.dword	$48fb7595
>3d12	e5 00					.byte	$e5,$00
.3d14	20 4e 51	jsr $514e		jsr	FloatCompare
.3d17	20 18 51	jsr $5118		jsr	CompareEqual
.3d1a	20 44 50	jsr $5044		jsr	FPAssertCheck
.3d1d	20 54 50	jsr $5054		jsr	FPPushConstant	; -9.12278286
>3d20	95 75 fb 48				.dword	$48fb7595
>3d24	e5 80					.byte	$e5,$80
.3d26	20 a4 52	jsr $52a4		jsr	FloatIntegerPart
.3d29	20 54 50	jsr $5054		jsr	FPPushConstant	; -9
>3d2c	09 00 00 00				.dword	$00000009
>3d30	00 80					.byte	$00,$80
.3d32	20 4e 51	jsr $514e		jsr	FloatCompare
.3d35	20 18 51	jsr $5118		jsr	CompareEqual
.3d38	20 44 50	jsr $5044		jsr	FPAssertCheck
.3d3b	20 54 50	jsr $5054		jsr	FPPushConstant	; 13.69
>3d3e	b8 1e 85 6d				.dword	$6d851eb8
>3d42	e5 00					.byte	$e5,$00
.3d44	20 4f 59	jsr $594f		jsr	FloatSine
.3d47	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.90167577
>3d4a	94 1c 6a 73				.dword	$736a1c94
>3d4e	e1 00					.byte	$e1,$00
.3d50	20 87 50	jsr $5087		jsr	FloatSubtract
.3d53	20 51 50	jsr $5051		jsr	FPAbs
.3d56	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>3d59	4c 37 89 41				.dword	$4189374c
>3d5d	d8 00					.byte	$d8,$00
.3d5f	20 4e 51	jsr $514e		jsr	FloatCompare
.3d62	20 2e 51	jsr $512e		jsr	CompareLess
.3d65	20 44 50	jsr $5044		jsr	FPAssertCheck
.3d68	20 54 50	jsr $5054		jsr	FPPushConstant	; 13.69
>3d6b	b8 1e 85 6d				.dword	$6d851eb8
>3d6f	e5 00					.byte	$e5,$00
.3d71	20 af 57	jsr $57af		jsr	FloatCosine
.3d74	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.43241277
>3d77	72 9a b2 6e				.dword	$6eb29a72
>3d7b	e0 00					.byte	$e0,$00
.3d7d	20 87 50	jsr $5087		jsr	FloatSubtract
.3d80	20 51 50	jsr $5051		jsr	FPAbs
.3d83	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>3d86	4c 37 89 41				.dword	$4189374c
>3d8a	d8 00					.byte	$d8,$00
.3d8c	20 4e 51	jsr $514e		jsr	FloatCompare
.3d8f	20 2e 51	jsr $512e		jsr	CompareLess
.3d92	20 44 50	jsr $5044		jsr	FPAssertCheck
.3d95	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.11
>3d98	0a d7 a3 70				.dword	$70a3d70a
>3d9c	de 00					.byte	$de,$00
.3d9e	20 c0 59	jsr $59c0		jsr	FloatTangent
.3da1	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.11044582
>3da4	84 b5 18 71				.dword	$7118b584
>3da8	de 00					.byte	$de,$00
.3daa	20 87 50	jsr $5087		jsr	FloatSubtract
.3dad	20 51 50	jsr $5051		jsr	FPAbs
.3db0	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>3db3	4c 37 89 41				.dword	$4189374c
>3db7	d8 00					.byte	$d8,$00
.3db9	20 4e 51	jsr $514e		jsr	FloatCompare
.3dbc	20 44 50	jsr $5044		jsr	FPAssertCheck
.3dbf	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.736
>3dc2	7d 3f 35 5e				.dword	$5e353f7d
>3dc6	e1 00					.byte	$e1,$00
.3dc8	20 94 56	jsr $5694		jsr	FloatArcTan
.3dcb	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.63448073
>3dce	21 aa 36 51				.dword	$5136aa21
>3dd2	e1 00					.byte	$e1,$00
.3dd4	20 87 50	jsr $5087		jsr	FloatSubtract
.3dd7	20 51 50	jsr $5051		jsr	FPAbs
.3dda	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>3ddd	4c 37 89 41				.dword	$4189374c
>3de1	d8 00					.byte	$d8,$00
.3de3	20 4e 51	jsr $514e		jsr	FloatCompare
.3de6	20 44 50	jsr $5044		jsr	FPAssertCheck
.3de9	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.12
>3dec	ae 47 e1 7a				.dword	$7ae147ae
>3df0	de 80					.byte	$de,$80
.3df2	20 bb 57	jsr $57bb		jsr	FloatExponent
.3df5	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.88692044
>3df8	e6 9b 86 71				.dword	$71869be6
>3dfc	e1 00					.byte	$e1,$00
.3dfe	20 87 50	jsr $5087		jsr	FloatSubtract
.3e01	20 51 50	jsr $5051		jsr	FPAbs
.3e04	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>3e07	4c 37 89 41				.dword	$4189374c
>3e0b	d8 00					.byte	$d8,$00
.3e0d	20 4e 51	jsr $514e		jsr	FloatCompare
.3e10	20 44 50	jsr $5044		jsr	FPAssertCheck
.3e13	20 54 50	jsr $5054		jsr	FPPushConstant	; 56.36
>3e16	ec 51 b8 70				.dword	$70b851ec
>3e1a	e7 00					.byte	$e7,$00
.3e1c	20 be 58	jsr $58be		jsr	FloatLogarithm
.3e1f	20 54 50	jsr $5054		jsr	FPPushConstant	; 4.03175969
>3e22	73 16 82 40				.dword	$40821673
>3e26	e4 00					.byte	$e4,$00
.3e28	20 87 50	jsr $5087		jsr	FloatSubtract
.3e2b	20 51 50	jsr $5051		jsr	FPAbs
.3e2e	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>3e31	4c 37 89 41				.dword	$4189374c
>3e35	d8 00					.byte	$d8,$00
.3e37	20 4e 51	jsr $514e		jsr	FloatCompare
.3e3a	20 44 50	jsr $5044		jsr	FPAssertCheck
.3e3d	20 54 50	jsr $5054		jsr	FPPushConstant	; 39.17
>3e40	3d 0a 57 4e				.dword	$4e570a3d
>3e44	e7 00					.byte	$e7,$00
.3e46	20 b4 59	jsr $59b4		jsr	FloatSquareRoot
.3e49	20 54 50	jsr $5054		jsr	FPPushConstant	; 6.25859409
>3e4c	8e 33 23 64				.dword	$6423338e
>3e50	e4 00					.byte	$e4,$00
.3e52	20 87 50	jsr $5087		jsr	FloatSubtract
.3e55	20 51 50	jsr $5051		jsr	FPAbs
.3e58	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>3e5b	4c 37 89 41				.dword	$4189374c
>3e5f	d8 00					.byte	$d8,$00
.3e61	20 4e 51	jsr $514e		jsr	FloatCompare
.3e64	20 44 50	jsr $5044		jsr	FPAssertCheck
.3e67	20 54 50	jsr $5054		jsr	FPPushConstant	; 2.53333333
>3e6a	0f 11 11 51				.dword	$5111110f
>3e6e	e3 00					.byte	$e3,$00
.3e70	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.4
>3e73	9a 99 99 59				.dword	$5999999a
>3e77	e2 00					.byte	$e2,$00
.3e79	20 32 59	jsr $5932		jsr	FloatPower
.3e7c	20 54 50	jsr $5054		jsr	FPPushConstant	; 3.67425482
>3e7f	d8 7e 93 75				.dword	$75937ed8
>3e83	e3 00					.byte	$e3,$00
.3e85	20 87 50	jsr $5087		jsr	FloatSubtract
.3e88	20 51 50	jsr $5051		jsr	FPAbs
.3e8b	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.01
>3e8e	1f 85 eb 51				.dword	$51eb851f
>3e92	db 00					.byte	$db,$00
.3e94	20 4e 51	jsr $514e		jsr	FloatCompare
.3e97	20 44 50	jsr $5044		jsr	FPAssertCheck
.3e9a	20 54 50	jsr $5054		jsr	FPPushConstant	; 44.121487
>3e9d	8b 33 3e 58				.dword	$583e338b
>3ea1	e7 00					.byte	$e7,$00
.3ea3	20 2b 56	jsr $562b		jsr	FloatNegate
.3ea6	20 54 50	jsr $5054		jsr	FPPushConstant	; -44.121487
>3ea9	8b 33 3e 58				.dword	$583e338b
>3ead	e7 80					.byte	$e7,$80
.3eaf	20 4e 51	jsr $514e		jsr	FloatCompare
.3eb2	20 18 51	jsr $5118		jsr	CompareEqual
.3eb5	20 44 50	jsr $5044		jsr	FPAssertCheck
.3eb8	20 54 50	jsr $5054		jsr	FPPushConstant	; 44.121487
>3ebb	8b 33 3e 58				.dword	$583e338b
>3ebf	e7 00					.byte	$e7,$00
.3ec1	20 a4 52	jsr $52a4		jsr	FloatIntegerPart
.3ec4	20 54 50	jsr $5054		jsr	FPPushConstant	; 44
>3ec7	2c 00 00 00				.dword	$0000002c
>3ecb	00 00					.byte	$00,$00
.3ecd	20 4e 51	jsr $514e		jsr	FloatCompare
.3ed0	20 18 51	jsr $5118		jsr	CompareEqual
.3ed3	20 44 50	jsr $5044		jsr	FPAssertCheck
.3ed6	20 54 50	jsr $5054		jsr	FPPushConstant	; -9.85
>3ed9	cd cc cc 4e				.dword	$4ecccccd
>3edd	e5 80					.byte	$e5,$80
.3edf	20 4f 59	jsr $594f		jsr	FloatSine
.3ee2	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.41252306
>3ee5	7c 1c 9b 69				.dword	$699b1c7c
>3ee9	e0 00					.byte	$e0,$00
.3eeb	20 87 50	jsr $5087		jsr	FloatSubtract
.3eee	20 51 50	jsr $5051		jsr	FPAbs
.3ef1	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>3ef4	4c 37 89 41				.dword	$4189374c
>3ef8	d8 00					.byte	$d8,$00
.3efa	20 4e 51	jsr $514e		jsr	FloatCompare
.3efd	20 2e 51	jsr $512e		jsr	CompareLess
.3f00	20 44 50	jsr $5044		jsr	FPAssertCheck
.3f03	20 54 50	jsr $5054		jsr	FPPushConstant	; -9.85
>3f06	cd cc cc 4e				.dword	$4ecccccd
>3f0a	e5 80					.byte	$e5,$80
.3f0c	20 af 57	jsr $57af		jsr	FloatCosine
.3f0f	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.91094716
>3f12	a2 ea 99 74				.dword	$7499eaa2
>3f16	e1 80					.byte	$e1,$80
.3f18	20 87 50	jsr $5087		jsr	FloatSubtract
.3f1b	20 51 50	jsr $5051		jsr	FPAbs
.3f1e	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>3f21	4c 37 89 41				.dword	$4189374c
>3f25	d8 00					.byte	$d8,$00
.3f27	20 4e 51	jsr $514e		jsr	FloatCompare
.3f2a	20 2e 51	jsr $512e		jsr	CompareLess
.3f2d	20 44 50	jsr $5044		jsr	FPAssertCheck
.3f30	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.12
>3f33	ae 47 e1 7a				.dword	$7ae147ae
>3f37	de 00					.byte	$de,$00
.3f39	20 c0 59	jsr $59c0		jsr	FloatTangent
.3f3c	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.12057934
>3f3f	87 26 79 7b				.dword	$7b792687
>3f43	de 00					.byte	$de,$00
.3f45	20 87 50	jsr $5087		jsr	FloatSubtract
.3f48	20 51 50	jsr $5051		jsr	FPAbs
.3f4b	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>3f4e	4c 37 89 41				.dword	$4189374c
>3f52	d8 00					.byte	$d8,$00
.3f54	20 4e 51	jsr $514e		jsr	FloatCompare
.3f57	20 44 50	jsr $5044		jsr	FPAssertCheck
.3f5a	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.169
>3f5d	02 2b 87 56				.dword	$56872b02
>3f61	df 00					.byte	$df,$00
.3f63	20 94 56	jsr $5694		jsr	FloatArcTan
.3f66	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.16741809
>3f69	eb d2 b7 55				.dword	$55b7d2eb
>3f6d	df 00					.byte	$df,$00
.3f6f	20 87 50	jsr $5087		jsr	FloatSubtract
.3f72	20 51 50	jsr $5051		jsr	FPAbs
.3f75	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>3f78	4c 37 89 41				.dword	$4189374c
>3f7c	d8 00					.byte	$d8,$00
.3f7e	20 4e 51	jsr $514e		jsr	FloatCompare
.3f81	20 44 50	jsr $5044		jsr	FPAssertCheck
.3f84	20 54 50	jsr $5054		jsr	FPPushConstant	; -1.56
>3f87	3d 0a d7 63				.dword	$63d70a3d
>3f8b	e2 80					.byte	$e2,$80
.3f8d	20 bb 57	jsr $57bb		jsr	FloatExponent
.3f90	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.21013607
>3f93	79 f4 96 6b				.dword	$6b96f479
>3f97	df 00					.byte	$df,$00
.3f99	20 87 50	jsr $5087		jsr	FloatSubtract
.3f9c	20 51 50	jsr $5051		jsr	FPAbs
.3f9f	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>3fa2	4c 37 89 41				.dword	$4189374c
>3fa6	d8 00					.byte	$d8,$00
.3fa8	20 4e 51	jsr $514e		jsr	FloatCompare
.3fab	20 44 50	jsr $5044		jsr	FPAssertCheck
.3fae	20 54 50	jsr $5054		jsr	FPPushConstant	; 38.77
>3fb1	71 3d 8a 4d				.dword	$4d8a3d71
>3fb5	e7 00					.byte	$e7,$00
.3fb7	20 be 58	jsr $58be		jsr	FloatLogarithm
.3fba	20 54 50	jsr $5054		jsr	FPPushConstant	; 3.65764675
>3fbd	32 71 0b 75				.dword	$750b7132
>3fc1	e3 00					.byte	$e3,$00
.3fc3	20 87 50	jsr $5087		jsr	FloatSubtract
.3fc6	20 51 50	jsr $5051		jsr	FPAbs
.3fc9	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>3fcc	4c 37 89 41				.dword	$4189374c
>3fd0	d8 00					.byte	$d8,$00
.3fd2	20 4e 51	jsr $514e		jsr	FloatCompare
.3fd5	20 44 50	jsr $5044		jsr	FPAssertCheck
.3fd8	20 54 50	jsr $5054		jsr	FPPushConstant	; 86.89
>3fdb	0a d7 e3 56				.dword	$56e3d70a
>3fdf	e8 00					.byte	$e8,$00
.3fe1	20 b4 59	jsr $59b4		jsr	FloatSquareRoot
.3fe4	20 54 50	jsr $5054		jsr	FPPushConstant	; 9.32148057
>3fe7	68 64 92 4a				.dword	$4a926468
>3feb	e5 00					.byte	$e5,$00
.3fed	20 87 50	jsr $5087		jsr	FloatSubtract
.3ff0	20 51 50	jsr $5051		jsr	FPAbs
.3ff3	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>3ff6	4c 37 89 41				.dword	$4189374c
>3ffa	d8 00					.byte	$d8,$00
.3ffc	20 4e 51	jsr $514e		jsr	FloatCompare
.3fff	20 44 50	jsr $5044		jsr	FPAssertCheck
.4002	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.02666667
>4005	1f e8 b4 41				.dword	$41b4e81f
>4009	e2 00					.byte	$e2,$00
.400b	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.8
>400e	33 33 33 73				.dword	$73333333
>4012	e2 00					.byte	$e2,$00
.4014	20 32 59	jsr $5932		jsr	FloatPower
.4017	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.0485111
>401a	4d ce 1a 43				.dword	$431ace4d
>401e	e2 00					.byte	$e2,$00
.4020	20 87 50	jsr $5087		jsr	FloatSubtract
.4023	20 51 50	jsr $5051		jsr	FPAbs
.4026	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.01
>4029	1f 85 eb 51				.dword	$51eb851f
>402d	db 00					.byte	$db,$00
.402f	20 4e 51	jsr $514e		jsr	FloatCompare
.4032	20 44 50	jsr $5044		jsr	FPAssertCheck
.4035	20 54 50	jsr $5054		jsr	FPPushConstant	; -78.79452499
>4038	fd 65 cb 4e				.dword	$4ecb65fd
>403c	e8 80					.byte	$e8,$80
.403e	20 2b 56	jsr $562b		jsr	FloatNegate
.4041	20 54 50	jsr $5054		jsr	FPPushConstant	; 78.79452499
>4044	fd 65 cb 4e				.dword	$4ecb65fd
>4048	e8 00					.byte	$e8,$00
.404a	20 4e 51	jsr $514e		jsr	FloatCompare
.404d	20 18 51	jsr $5118		jsr	CompareEqual
.4050	20 44 50	jsr $5044		jsr	FPAssertCheck
.4053	20 54 50	jsr $5054		jsr	FPPushConstant	; -78.79452499
>4056	fd 65 cb 4e				.dword	$4ecb65fd
>405a	e8 80					.byte	$e8,$80
.405c	20 a4 52	jsr $52a4		jsr	FloatIntegerPart
.405f	20 54 50	jsr $5054		jsr	FPPushConstant	; -78
>4062	4e 00 00 00				.dword	$0000004e
>4066	00 80					.byte	$00,$80
.4068	20 4e 51	jsr $514e		jsr	FloatCompare
.406b	20 18 51	jsr $5118		jsr	CompareEqual
.406e	20 44 50	jsr $5044		jsr	FPAssertCheck
.4071	20 54 50	jsr $5054		jsr	FPPushConstant	; 8.45
>4074	9a 99 99 43				.dword	$4399999a
>4078	e5 00					.byte	$e5,$00
.407a	20 4f 59	jsr $594f		jsr	FloatSine
.407d	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.82757727
>4080	4f 0d ee 69				.dword	$69ee0d4f
>4084	e1 00					.byte	$e1,$00
.4086	20 87 50	jsr $5087		jsr	FloatSubtract
.4089	20 51 50	jsr $5051		jsr	FPAbs
.408c	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>408f	4c 37 89 41				.dword	$4189374c
>4093	d8 00					.byte	$d8,$00
.4095	20 4e 51	jsr $514e		jsr	FloatCompare
.4098	20 2e 51	jsr $512e		jsr	CompareLess
.409b	20 44 50	jsr $5044		jsr	FPAssertCheck
.409e	20 54 50	jsr $5054		jsr	FPPushConstant	; 8.45
>40a1	9a 99 99 43				.dword	$4399999a
>40a5	e5 00					.byte	$e5,$00
.40a7	20 af 57	jsr $57af		jsr	FloatCosine
.40aa	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.56135182
>40ad	5e 60 da 47				.dword	$47da605e
>40b1	e1 80					.byte	$e1,$80
.40b3	20 87 50	jsr $5087		jsr	FloatSubtract
.40b6	20 51 50	jsr $5051		jsr	FPAbs
.40b9	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>40bc	4c 37 89 41				.dword	$4189374c
>40c0	d8 00					.byte	$d8,$00
.40c2	20 4e 51	jsr $514e		jsr	FloatCompare
.40c5	20 2e 51	jsr $512e		jsr	CompareLess
.40c8	20 44 50	jsr $5044		jsr	FPAssertCheck
.40cb	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.32
>40ce	1f 85 eb 51				.dword	$51eb851f
>40d2	e0 00					.byte	$e0,$00
.40d4	20 c0 59	jsr $59c0		jsr	FloatTangent
.40d7	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.33138941
>40da	b6 ef d5 54				.dword	$54d5efb6
>40de	e0 00					.byte	$e0,$00
.40e0	20 87 50	jsr $5087		jsr	FloatSubtract
.40e3	20 51 50	jsr $5051		jsr	FPAbs
.40e6	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>40e9	4c 37 89 41				.dword	$4189374c
>40ed	d8 00					.byte	$d8,$00
.40ef	20 4e 51	jsr $514e		jsr	FloatCompare
.40f2	20 44 50	jsr $5044		jsr	FPAssertCheck
.40f5	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.643
>40f8	79 e9 26 69				.dword	$6926e979
>40fc	e2 00					.byte	$e2,$00
.40fe	20 94 56	jsr $5694		jsr	FloatArcTan
.4101	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.0240461
>4104	a7 f8 89 41				.dword	$4189f8a7
>4108	e2 00					.byte	$e2,$00
.410a	20 87 50	jsr $5087		jsr	FloatSubtract
.410d	20 51 50	jsr $5051		jsr	FPAbs
.4110	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>4113	4c 37 89 41				.dword	$4189374c
>4117	d8 00					.byte	$d8,$00
.4119	20 4e 51	jsr $514e		jsr	FloatCompare
.411c	20 44 50	jsr $5044		jsr	FPAssertCheck
.411f	20 54 50	jsr $5054		jsr	FPPushConstant	; -1.15
>4122	9a 99 99 49				.dword	$4999999a
>4126	e2 80					.byte	$e2,$80
.4128	20 bb 57	jsr $57bb		jsr	FloatExponent
.412b	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.31663677
>412e	7c 1b 0f 51				.dword	$510f1b7c
>4132	e0 00					.byte	$e0,$00
.4134	20 87 50	jsr $5087		jsr	FloatSubtract
.4137	20 51 50	jsr $5051		jsr	FPAbs
.413a	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>413d	4c 37 89 41				.dword	$4189374c
>4141	d8 00					.byte	$d8,$00
.4143	20 4e 51	jsr $514e		jsr	FloatCompare
.4146	20 44 50	jsr $5044		jsr	FPAssertCheck
.4149	20 54 50	jsr $5054		jsr	FPPushConstant	; 63.74
>414c	48 e1 7a 7f				.dword	$7f7ae148
>4150	e7 00					.byte	$e7,$00
.4152	20 be 58	jsr $58be		jsr	FloatLogarithm
.4155	20 54 50	jsr $5054		jsr	FPPushConstant	; 4.15481231
>4158	79 1c 7a 42				.dword	$427a1c79
>415c	e4 00					.byte	$e4,$00
.415e	20 87 50	jsr $5087		jsr	FloatSubtract
.4161	20 51 50	jsr $5051		jsr	FPAbs
.4164	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>4167	4c 37 89 41				.dword	$4189374c
>416b	d8 00					.byte	$d8,$00
.416d	20 4e 51	jsr $514e		jsr	FloatCompare
.4170	20 44 50	jsr $5044		jsr	FPAssertCheck
.4173	20 54 50	jsr $5054		jsr	FPPushConstant	; 39.5
>4176	00 00 00 4f				.dword	$4f000000
>417a	e7 00					.byte	$e7,$00
.417c	20 b4 59	jsr $59b4		jsr	FloatSquareRoot
.417f	20 54 50	jsr $5054		jsr	FPPushConstant	; 6.28490254
>4182	f7 f5 8e 64				.dword	$648ef5f7
>4186	e4 00					.byte	$e4,$00
.4188	20 87 50	jsr $5087		jsr	FloatSubtract
.418b	20 51 50	jsr $5051		jsr	FPAbs
.418e	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>4191	4c 37 89 41				.dword	$4189374c
>4195	d8 00					.byte	$d8,$00
.4197	20 4e 51	jsr $514e		jsr	FloatCompare
.419a	20 44 50	jsr $5044		jsr	FPAssertCheck
.419d	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.16666667
>41a0	ae aa aa 4a				.dword	$4aaaaaae
>41a4	e2 00					.byte	$e2,$00
.41a6	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.2
>41a9	cd cc cc 4c				.dword	$4ccccccd
>41ad	e2 00					.byte	$e2,$00
.41af	20 32 59	jsr $5932		jsr	FloatPower
.41b2	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.20319536
>41b5	1c 27 01 4d				.dword	$4d01271c
>41b9	e2 00					.byte	$e2,$00
.41bb	20 87 50	jsr $5087		jsr	FloatSubtract
.41be	20 51 50	jsr $5051		jsr	FPAbs
.41c1	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.01
>41c4	1f 85 eb 51				.dword	$51eb851f
>41c8	db 00					.byte	$db,$00
.41ca	20 4e 51	jsr $514e		jsr	FloatCompare
.41cd	20 44 50	jsr $5044		jsr	FPAssertCheck
.41d0	20 54 50	jsr $5054		jsr	FPPushConstant	; 46.88750304
>41d3	cc 66 c6 5d				.dword	$5dc666cc
>41d7	e7 00					.byte	$e7,$00
.41d9	20 2b 56	jsr $562b		jsr	FloatNegate
.41dc	20 54 50	jsr $5054		jsr	FPPushConstant	; -46.88750304
>41df	cc 66 c6 5d				.dword	$5dc666cc
>41e3	e7 80					.byte	$e7,$80
.41e5	20 4e 51	jsr $514e		jsr	FloatCompare
.41e8	20 18 51	jsr $5118		jsr	CompareEqual
.41eb	20 44 50	jsr $5044		jsr	FPAssertCheck
.41ee	20 54 50	jsr $5054		jsr	FPPushConstant	; 46.88750304
>41f1	cc 66 c6 5d				.dword	$5dc666cc
>41f5	e7 00					.byte	$e7,$00
.41f7	20 a4 52	jsr $52a4		jsr	FloatIntegerPart
.41fa	20 54 50	jsr $5054		jsr	FPPushConstant	; 46
>41fd	2e 00 00 00				.dword	$0000002e
>4201	00 00					.byte	$00,$00
.4203	20 4e 51	jsr $514e		jsr	FloatCompare
.4206	20 18 51	jsr $5118		jsr	CompareEqual
.4209	20 44 50	jsr $5044		jsr	FPAssertCheck
.420c	20 54 50	jsr $5054		jsr	FPPushConstant	; 18.88
>420f	b8 1e 85 4b				.dword	$4b851eb8
>4213	e6 00					.byte	$e6,$00
.4215	20 4f 59	jsr $594f		jsr	FloatSine
.4218	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.03043938
>421b	da 00 ae 7c				.dword	$7cae00da
>421f	dc 00					.byte	$dc,$00
.4221	20 87 50	jsr $5087		jsr	FloatSubtract
.4224	20 51 50	jsr $5051		jsr	FPAbs
.4227	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>422a	4c 37 89 41				.dword	$4189374c
>422e	d8 00					.byte	$d8,$00
.4230	20 4e 51	jsr $514e		jsr	FloatCompare
.4233	20 2e 51	jsr $512e		jsr	CompareLess
.4236	20 44 50	jsr $5044		jsr	FPAssertCheck
.4239	20 54 50	jsr $5054		jsr	FPPushConstant	; 18.88
>423c	b8 1e 85 4b				.dword	$4b851eb8
>4240	e6 00					.byte	$e6,$00
.4242	20 af 57	jsr $57af		jsr	FloatCosine
.4245	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.99953661
>4248	ce d0 f0 7f				.dword	$7ff0d0ce
>424c	e1 00					.byte	$e1,$00
.424e	20 87 50	jsr $5087		jsr	FloatSubtract
.4251	20 51 50	jsr $5051		jsr	FPAbs
.4254	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>4257	4c 37 89 41				.dword	$4189374c
>425b	d8 00					.byte	$d8,$00
.425d	20 4e 51	jsr $514e		jsr	FloatCompare
.4260	20 2e 51	jsr $512e		jsr	CompareLess
.4263	20 44 50	jsr $5044		jsr	FPAssertCheck
.4266	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.13
>4269	29 5c 8f 42				.dword	$428f5c29
>426d	df 00					.byte	$df,$00
.426f	20 c0 59	jsr $59c0		jsr	FloatTangent
.4272	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.13073732
>4275	84 00 f0 42				.dword	$42f00084
>4279	df 00					.byte	$df,$00
.427b	20 87 50	jsr $5087		jsr	FloatSubtract
.427e	20 51 50	jsr $5051		jsr	FPAbs
.4281	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>4284	4c 37 89 41				.dword	$4189374c
>4288	d8 00					.byte	$d8,$00
.428a	20 4e 51	jsr $514e		jsr	FloatCompare
.428d	20 44 50	jsr $5044		jsr	FPAssertCheck
.4290	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.313
>4293	27 31 08 54				.dword	$54083127
>4297	e2 00					.byte	$e2,$00
.4299	20 94 56	jsr $5694		jsr	FloatArcTan
.429c	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.91990321
>429f	6d 63 bf 75				.dword	$75bf636d
>42a3	e1 00					.byte	$e1,$00
.42a5	20 87 50	jsr $5087		jsr	FloatSubtract
.42a8	20 51 50	jsr $5051		jsr	FPAbs
.42ab	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>42ae	4c 37 89 41				.dword	$4189374c
>42b2	d8 00					.byte	$d8,$00
.42b4	20 4e 51	jsr $514e		jsr	FloatCompare
.42b7	20 44 50	jsr $5044		jsr	FPAssertCheck
.42ba	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.62
>42bd	f6 28 5c 4f				.dword	$4f5c28f6
>42c1	e1 00					.byte	$e1,$00
.42c3	20 bb 57	jsr $57bb		jsr	FloatExponent
.42c6	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.85892804
>42c9	50 ad f8 76				.dword	$76f8ad50
>42cd	e2 00					.byte	$e2,$00
.42cf	20 87 50	jsr $5087		jsr	FloatSubtract
.42d2	20 51 50	jsr $5051		jsr	FPAbs
.42d5	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>42d8	4c 37 89 41				.dword	$4189374c
>42dc	d8 00					.byte	$d8,$00
.42de	20 4e 51	jsr $514e		jsr	FloatCompare
.42e1	20 44 50	jsr $5044		jsr	FPAssertCheck
.42e4	20 54 50	jsr $5054		jsr	FPPushConstant	; 66.73
>42e7	48 e1 ba 42				.dword	$42bae148
>42eb	e8 00					.byte	$e8,$00
.42ed	20 be 58	jsr $58be		jsr	FloatLogarithm
.42f0	20 54 50	jsr $5054		jsr	FPPushConstant	; 4.20065463
>42f3	a1 e1 35 43				.dword	$4335e1a1
>42f7	e4 00					.byte	$e4,$00
.42f9	20 87 50	jsr $5087		jsr	FloatSubtract
.42fc	20 51 50	jsr $5051		jsr	FPAbs
.42ff	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>4302	4c 37 89 41				.dword	$4189374c
>4306	d8 00					.byte	$d8,$00
.4308	20 4e 51	jsr $514e		jsr	FloatCompare
.430b	20 44 50	jsr $5044		jsr	FPAssertCheck
.430e	20 54 50	jsr $5054		jsr	FPPushConstant	; 70.15
>4311	66 66 26 46				.dword	$46266666
>4315	e8 00					.byte	$e8,$00
.4317	20 b4 59	jsr $59b4		jsr	FloatSquareRoot
.431a	20 54 50	jsr $5054		jsr	FPPushConstant	; 8.37555968
>431d	6f 25 01 43				.dword	$4301256f
>4321	e5 00					.byte	$e5,$00
.4323	20 87 50	jsr $5087		jsr	FloatSubtract
.4326	20 51 50	jsr $5051		jsr	FPAbs
.4329	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>432c	4c 37 89 41				.dword	$4189374c
>4330	d8 00					.byte	$d8,$00
.4332	20 4e 51	jsr $514e		jsr	FloatCompare
.4335	20 44 50	jsr $5044		jsr	FPAssertCheck
.4338	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.29
>433b	a4 70 3d 4a				.dword	$4a3d70a4
>433f	e0 00					.byte	$e0,$00
.4341	20 54 50	jsr $5054		jsr	FPPushConstant	; 2.0
>4344	02 00 00 00				.dword	$00000002
>4348	00 00					.byte	$00,$00
.434a	20 32 59	jsr $5932		jsr	FloatPower
.434d	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.0841
>4350	76 4f 1e 56				.dword	$561e4f76
>4354	de 00					.byte	$de,$00
.4356	20 87 50	jsr $5087		jsr	FloatSubtract
.4359	20 51 50	jsr $5051		jsr	FPAbs
.435c	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.01
>435f	1f 85 eb 51				.dword	$51eb851f
>4363	db 00					.byte	$db,$00
.4365	20 4e 51	jsr $514e		jsr	FloatCompare
.4368	20 44 50	jsr $5044		jsr	FPAssertCheck
.436b	20 54 50	jsr $5054		jsr	FPPushConstant	; 42.34591399
>436e	a3 1b b1 54				.dword	$54b11ba3
>4372	e7 00					.byte	$e7,$00
.4374	20 2b 56	jsr $562b		jsr	FloatNegate
.4377	20 54 50	jsr $5054		jsr	FPPushConstant	; -42.34591399
>437a	a3 1b b1 54				.dword	$54b11ba3
>437e	e7 80					.byte	$e7,$80
.4380	20 4e 51	jsr $514e		jsr	FloatCompare
.4383	20 18 51	jsr $5118		jsr	CompareEqual
.4386	20 44 50	jsr $5044		jsr	FPAssertCheck
.4389	20 54 50	jsr $5054		jsr	FPPushConstant	; 42.34591399
>438c	a3 1b b1 54				.dword	$54b11ba3
>4390	e7 00					.byte	$e7,$00
.4392	20 a4 52	jsr $52a4		jsr	FloatIntegerPart
.4395	20 54 50	jsr $5054		jsr	FPPushConstant	; 42
>4398	2a 00 00 00				.dword	$0000002a
>439c	00 00					.byte	$00,$00
.439e	20 4e 51	jsr $514e		jsr	FloatCompare
.43a1	20 18 51	jsr $5118		jsr	CompareEqual
.43a4	20 44 50	jsr $5044		jsr	FPAssertCheck
.43a7	20 54 50	jsr $5054		jsr	FPPushConstant	; -10.02
>43aa	c3 f5 28 50				.dword	$5028f5c3
>43ae	e5 80					.byte	$e5,$80
.43b0	20 4f 59	jsr $594f		jsr	FloatSine
.43b3	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.56069262
>43b6	99 c6 c4 47				.dword	$47c4c699
>43ba	e1 00					.byte	$e1,$00
.43bc	20 87 50	jsr $5087		jsr	FloatSubtract
.43bf	20 51 50	jsr $5051		jsr	FPAbs
.43c2	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>43c5	4c 37 89 41				.dword	$4189374c
>43c9	d8 00					.byte	$d8,$00
.43cb	20 4e 51	jsr $514e		jsr	FloatCompare
.43ce	20 2e 51	jsr $512e		jsr	CompareLess
.43d1	20 44 50	jsr $5044		jsr	FPAssertCheck
.43d4	20 54 50	jsr $5054		jsr	FPPushConstant	; -10.02
>43d7	c3 f5 28 50				.dword	$5028f5c3
>43db	e5 80					.byte	$e5,$80
.43dd	20 af 57	jsr $57af		jsr	FloatCosine
.43e0	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.82802402
>43e3	eb b0 fc 69				.dword	$69fcb0eb
>43e7	e1 80					.byte	$e1,$80
.43e9	20 87 50	jsr $5087		jsr	FloatSubtract
.43ec	20 51 50	jsr $5051		jsr	FPAbs
.43ef	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>43f2	4c 37 89 41				.dword	$4189374c
>43f6	d8 00					.byte	$d8,$00
.43f8	20 4e 51	jsr $514e		jsr	FloatCompare
.43fb	20 2e 51	jsr $512e		jsr	CompareLess
.43fe	20 44 50	jsr $5044		jsr	FPAssertCheck
.4401	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.38
>4404	14 ae 47 61				.dword	$6147ae14
>4408	e0 00					.byte	$e0,$00
.440a	20 c0 59	jsr $59c0		jsr	FloatTangent
.440d	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.39941272
>4410	7a e9 3f 66				.dword	$663fe97a
>4414	e0 00					.byte	$e0,$00
.4416	20 87 50	jsr $5087		jsr	FloatSubtract
.4419	20 51 50	jsr $5051		jsr	FPAbs
.441c	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>441f	4c 37 89 41				.dword	$4189374c
>4423	d8 00					.byte	$d8,$00
.4425	20 4e 51	jsr $514e		jsr	FloatCompare
.4428	20 44 50	jsr $5044		jsr	FPAssertCheck
.442b	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.642
>442e	56 0e 2d 52				.dword	$522d0e56
>4432	e1 00					.byte	$e1,$00
.4434	20 94 56	jsr $5694		jsr	FloatArcTan
.4437	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.57073075
>443a	89 b4 0d 49				.dword	$490db489
>443e	e1 00					.byte	$e1,$00
.4440	20 87 50	jsr $5087		jsr	FloatSubtract
.4443	20 51 50	jsr $5051		jsr	FPAbs
.4446	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>4449	4c 37 89 41				.dword	$4189374c
>444d	d8 00					.byte	$d8,$00
.444f	20 4e 51	jsr $514e		jsr	FloatCompare
.4452	20 44 50	jsr $5044		jsr	FPAssertCheck
.4455	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.47
>4458	e1 7a 14 5e				.dword	$5e147ae1
>445c	e2 00					.byte	$e2,$00
.445e	20 bb 57	jsr $57bb		jsr	FloatExponent
.4461	20 54 50	jsr $5054		jsr	FPPushConstant	; 4.34923514
>4464	96 77 96 45				.dword	$45967796
>4468	e4 00					.byte	$e4,$00
.446a	20 87 50	jsr $5087		jsr	FloatSubtract
.446d	20 51 50	jsr $5051		jsr	FPAbs
.4470	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>4473	4c 37 89 41				.dword	$4189374c
>4477	d8 00					.byte	$d8,$00
.4479	20 4e 51	jsr $514e		jsr	FloatCompare
.447c	20 44 50	jsr $5044		jsr	FPAssertCheck
.447f	20 54 50	jsr $5054		jsr	FPPushConstant	; 10.02
>4482	c3 f5 28 50				.dword	$5028f5c3
>4486	e5 00					.byte	$e5,$00
.4488	20 be 58	jsr $58be		jsr	FloatLogarithm
.448b	20 54 50	jsr $5054		jsr	FPPushConstant	; 2.3045831
>448e	0f 25 bf 49				.dword	$49bf250f
>4492	e3 00					.byte	$e3,$00
.4494	20 87 50	jsr $5087		jsr	FloatSubtract
.4497	20 51 50	jsr $5051		jsr	FPAbs
.449a	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>449d	4c 37 89 41				.dword	$4189374c
>44a1	d8 00					.byte	$d8,$00
.44a3	20 4e 51	jsr $514e		jsr	FloatCompare
.44a6	20 44 50	jsr $5044		jsr	FPAssertCheck
.44a9	20 54 50	jsr $5054		jsr	FPPushConstant	; 52.44
>44ac	ae 47 e1 68				.dword	$68e147ae
>44b0	e7 00					.byte	$e7,$00
.44b2	20 b4 59	jsr $59b4		jsr	FloatSquareRoot
.44b5	20 54 50	jsr $5054		jsr	FPPushConstant	; 7.2415468
>44b8	2d 60 dd 73				.dword	$73dd602d
>44bc	e4 00					.byte	$e4,$00
.44be	20 87 50	jsr $5087		jsr	FloatSubtract
.44c1	20 51 50	jsr $5051		jsr	FPAbs
.44c4	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>44c7	4c 37 89 41				.dword	$4189374c
>44cb	d8 00					.byte	$d8,$00
.44cd	20 4e 51	jsr $514e		jsr	FloatCompare
.44d0	20 44 50	jsr $5044		jsr	FPAssertCheck
.44d3	20 54 50	jsr $5054		jsr	FPPushConstant	; 2.19333333
>44d6	61 c9 2f 46				.dword	$462fc961
>44da	e3 00					.byte	$e3,$00
.44dc	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.3
>44df	33 33 33 53				.dword	$53333333
>44e3	e2 00					.byte	$e2,$00
.44e5	20 32 59	jsr $5932		jsr	FloatPower
.44e8	20 54 50	jsr $5054		jsr	FPPushConstant	; 2.77610591
>44eb	10 dc d5 58				.dword	$58d5dc10
>44ef	e3 00					.byte	$e3,$00
.44f1	20 87 50	jsr $5087		jsr	FloatSubtract
.44f4	20 51 50	jsr $5051		jsr	FPAbs
.44f7	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.01
>44fa	1f 85 eb 51				.dword	$51eb851f
>44fe	db 00					.byte	$db,$00
.4500	20 4e 51	jsr $514e		jsr	FloatCompare
.4503	20 44 50	jsr $5044		jsr	FPAssertCheck
.4506	20 54 50	jsr $5054		jsr	FPPushConstant	; -48.64550093
>4509	19 7f 4a 61				.dword	$614a7f19
>450d	e7 80					.byte	$e7,$80
.450f	20 2b 56	jsr $562b		jsr	FloatNegate
.4512	20 54 50	jsr $5054		jsr	FPPushConstant	; 48.64550093
>4515	19 7f 4a 61				.dword	$614a7f19
>4519	e7 00					.byte	$e7,$00
.451b	20 4e 51	jsr $514e		jsr	FloatCompare
.451e	20 18 51	jsr $5118		jsr	CompareEqual
.4521	20 44 50	jsr $5044		jsr	FPAssertCheck
.4524	20 54 50	jsr $5054		jsr	FPPushConstant	; -48.64550093
>4527	19 7f 4a 61				.dword	$614a7f19
>452b	e7 80					.byte	$e7,$80
.452d	20 a4 52	jsr $52a4		jsr	FloatIntegerPart
.4530	20 54 50	jsr $5054		jsr	FPPushConstant	; -48
>4533	30 00 00 00				.dword	$00000030
>4537	00 80					.byte	$00,$80
.4539	20 4e 51	jsr $514e		jsr	FloatCompare
.453c	20 18 51	jsr $5118		jsr	CompareEqual
.453f	20 44 50	jsr $5044		jsr	FPAssertCheck
.4542	20 54 50	jsr $5054		jsr	FPPushConstant	; -4.73
>4545	7b 14 ae 4b				.dword	$4bae147b
>4549	e4 80					.byte	$e4,$80
.454b	20 4f 59	jsr $594f		jsr	FloatSine
.454e	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.99984493
>4551	2e eb fa 7f				.dword	$7ffaeb2e
>4555	e1 00					.byte	$e1,$00
.4557	20 87 50	jsr $5087		jsr	FloatSubtract
.455a	20 51 50	jsr $5051		jsr	FPAbs
.455d	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>4560	4c 37 89 41				.dword	$4189374c
>4564	d8 00					.byte	$d8,$00
.4566	20 4e 51	jsr $514e		jsr	FloatCompare
.4569	20 2e 51	jsr $512e		jsr	CompareLess
.456c	20 44 50	jsr $5044		jsr	FPAssertCheck
.456f	20 54 50	jsr $5054		jsr	FPPushConstant	; -4.73
>4572	7b 14 ae 4b				.dword	$4bae147b
>4576	e4 80					.byte	$e4,$80
.4578	20 af 57	jsr $57af		jsr	FloatCosine
.457b	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.01761011
>457e	e8 89 21 48				.dword	$482189e8
>4582	dc 00					.byte	$dc,$00
.4584	20 87 50	jsr $5087		jsr	FloatSubtract
.4587	20 51 50	jsr $5051		jsr	FPAbs
.458a	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>458d	4c 37 89 41				.dword	$4189374c
>4591	d8 00					.byte	$d8,$00
.4593	20 4e 51	jsr $514e		jsr	FloatCompare
.4596	20 2e 51	jsr $512e		jsr	CompareLess
.4599	20 44 50	jsr $5044		jsr	FPAssertCheck
.459c	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.28
>459f	7b 14 ae 47				.dword	$47ae147b
>45a3	e0 00					.byte	$e0,$00
.45a5	20 c0 59	jsr $59c0		jsr	FloatTangent
.45a8	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.28755433
>45ab	1b 29 9d 49				.dword	$499d291b
>45af	e0 00					.byte	$e0,$00
.45b1	20 87 50	jsr $5087		jsr	FloatSubtract
.45b4	20 51 50	jsr $5051		jsr	FPAbs
.45b7	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>45ba	4c 37 89 41				.dword	$4189374c
>45be	d8 00					.byte	$d8,$00
.45c0	20 4e 51	jsr $514e		jsr	FloatCompare
.45c3	20 44 50	jsr $5044		jsr	FPAssertCheck
.45c6	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.516
>45c9	ba 49 0c 42				.dword	$420c49ba
>45cd	e1 00					.byte	$e1,$00
.45cf	20 94 56	jsr $5694		jsr	FloatArcTan
.45d2	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.47636552
>45d5	39 17 f3 79				.dword	$79f31739
>45d9	e0 00					.byte	$e0,$00
.45db	20 87 50	jsr $5087		jsr	FloatSubtract
.45de	20 51 50	jsr $5051		jsr	FPAbs
.45e1	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>45e4	4c 37 89 41				.dword	$4189374c
>45e8	d8 00					.byte	$d8,$00
.45ea	20 4e 51	jsr $514e		jsr	FloatCompare
.45ed	20 44 50	jsr $5044		jsr	FPAssertCheck
.45f0	20 54 50	jsr $5054		jsr	FPPushConstant	; -1.69
>45f3	c3 f5 28 6c				.dword	$6c28f5c3
>45f7	e2 80					.byte	$e2,$80
.45f9	20 bb 57	jsr $57bb		jsr	FloatExponent
.45fc	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.18451952
>45ff	b0 57 79 5e				.dword	$5e7957b0
>4603	df 00					.byte	$df,$00
.4605	20 87 50	jsr $5087		jsr	FloatSubtract
.4608	20 51 50	jsr $5051		jsr	FPAbs
.460b	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>460e	4c 37 89 41				.dword	$4189374c
>4612	d8 00					.byte	$d8,$00
.4614	20 4e 51	jsr $514e		jsr	FloatCompare
.4617	20 44 50	jsr $5044		jsr	FPAssertCheck
.461a	20 54 50	jsr $5054		jsr	FPPushConstant	; 68.76
>461d	5c 8f c2 44				.dword	$44c28f5c
>4621	e8 00					.byte	$e8,$00
.4623	20 be 58	jsr $58be		jsr	FloatLogarithm
.4626	20 54 50	jsr $5054		jsr	FPPushConstant	; 4.23062218
>4629	e2 a0 b0 43				.dword	$43b0a0e2
>462d	e4 00					.byte	$e4,$00
.462f	20 87 50	jsr $5087		jsr	FloatSubtract
.4632	20 51 50	jsr $5051		jsr	FPAbs
.4635	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>4638	4c 37 89 41				.dword	$4189374c
>463c	d8 00					.byte	$d8,$00
.463e	20 4e 51	jsr $514e		jsr	FloatCompare
.4641	20 44 50	jsr $5044		jsr	FPAssertCheck
.4644	20 54 50	jsr $5054		jsr	FPPushConstant	; 67.32
>4647	85 eb 51 43				.dword	$4351eb85
>464b	e8 00					.byte	$e8,$00
.464d	20 b4 59	jsr $59b4		jsr	FloatSquareRoot
.4650	20 54 50	jsr $5054		jsr	FPPushConstant	; 8.2048766
>4653	58 96 a3 41				.dword	$41a39658
>4657	e5 00					.byte	$e5,$00
.4659	20 87 50	jsr $5087		jsr	FloatSubtract
.465c	20 51 50	jsr $5051		jsr	FPAbs
.465f	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>4662	4c 37 89 41				.dword	$4189374c
>4666	d8 00					.byte	$d8,$00
.4668	20 4e 51	jsr $514e		jsr	FloatCompare
.466b	20 44 50	jsr $5044		jsr	FPAssertCheck
.466e	20 54 50	jsr $5054		jsr	FPPushConstant	; 2.04
>4671	14 ae 47 41				.dword	$4147ae14
>4675	e3 00					.byte	$e3,$00
.4677	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.3
>467a	33 33 33 53				.dword	$53333333
>467e	e2 00					.byte	$e2,$00
.4680	20 32 59	jsr $5932		jsr	FloatPower
.4683	20 54 50	jsr $5054		jsr	FPPushConstant	; 2.52649951
>4686	80 15 d9 50				.dword	$50d91580
>468a	e3 00					.byte	$e3,$00
.468c	20 87 50	jsr $5087		jsr	FloatSubtract
.468f	20 51 50	jsr $5051		jsr	FPAbs
.4692	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.01
>4695	1f 85 eb 51				.dword	$51eb851f
>4699	db 00					.byte	$db,$00
.469b	20 4e 51	jsr $514e		jsr	FloatCompare
.469e	20 44 50	jsr $5044		jsr	FPAssertCheck
.46a1	20 54 50	jsr $5054		jsr	FPPushConstant	; -37.24402689
>46a4	18 f1 7c 4a				.dword	$4a7cf118
>46a8	e7 80					.byte	$e7,$80
.46aa	20 2b 56	jsr $562b		jsr	FloatNegate
.46ad	20 54 50	jsr $5054		jsr	FPPushConstant	; 37.24402689
>46b0	18 f1 7c 4a				.dword	$4a7cf118
>46b4	e7 00					.byte	$e7,$00
.46b6	20 4e 51	jsr $514e		jsr	FloatCompare
.46b9	20 18 51	jsr $5118		jsr	CompareEqual
.46bc	20 44 50	jsr $5044		jsr	FPAssertCheck
.46bf	20 54 50	jsr $5054		jsr	FPPushConstant	; -37.24402689
>46c2	18 f1 7c 4a				.dword	$4a7cf118
>46c6	e7 80					.byte	$e7,$80
.46c8	20 a4 52	jsr $52a4		jsr	FloatIntegerPart
.46cb	20 54 50	jsr $5054		jsr	FPPushConstant	; -37
>46ce	25 00 00 00				.dword	$00000025
>46d2	00 80					.byte	$00,$80
.46d4	20 4e 51	jsr $514e		jsr	FloatCompare
.46d7	20 18 51	jsr $5118		jsr	CompareEqual
.46da	20 44 50	jsr $5044		jsr	FPAssertCheck
.46dd	20 54 50	jsr $5054		jsr	FPPushConstant	; -3.36
>46e0	b8 1e 85 6b				.dword	$6b851eb8
>46e4	e3 80					.byte	$e3,$80
.46e6	20 4f 59	jsr $594f		jsr	FloatSine
.46e9	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.21667508
>46ec	3d 09 f0 6e				.dword	$6ef0093d
>46f0	df 00					.byte	$df,$00
.46f2	20 87 50	jsr $5087		jsr	FloatSubtract
.46f5	20 51 50	jsr $5051		jsr	FPAbs
.46f8	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>46fb	4c 37 89 41				.dword	$4189374c
>46ff	d8 00					.byte	$d8,$00
.4701	20 4e 51	jsr $514e		jsr	FloatCompare
.4704	20 2e 51	jsr $512e		jsr	CompareLess
.4707	20 44 50	jsr $5044		jsr	FPAssertCheck
.470a	20 54 50	jsr $5054		jsr	FPPushConstant	; -3.36
>470d	b8 1e 85 6b				.dword	$6b851eb8
>4711	e3 80					.byte	$e3,$80
.4713	20 af 57	jsr $57af		jsr	FloatCosine
.4716	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.97624378
>4719	62 8e f5 7c				.dword	$7cf58e62
>471d	e1 80					.byte	$e1,$80
.471f	20 87 50	jsr $5087		jsr	FloatSubtract
.4722	20 51 50	jsr $5051		jsr	FPAbs
.4725	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>4728	4c 37 89 41				.dword	$4189374c
>472c	d8 00					.byte	$d8,$00
.472e	20 4e 51	jsr $514e		jsr	FloatCompare
.4731	20 2e 51	jsr $512e		jsr	CompareLess
.4734	20 44 50	jsr $5044		jsr	FPAssertCheck
.4737	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.24
>473a	ae 47 e1 7a				.dword	$7ae147ae
>473e	df 00					.byte	$df,$00
.4740	20 c0 59	jsr $59c0		jsr	FloatTangent
.4743	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.2447167
>4746	df 81 4b 7d				.dword	$7d4b81df
>474a	df 00					.byte	$df,$00
.474c	20 87 50	jsr $5087		jsr	FloatSubtract
.474f	20 51 50	jsr $5051		jsr	FPAbs
.4752	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>4755	4c 37 89 41				.dword	$4189374c
>4759	d8 00					.byte	$d8,$00
.475b	20 4e 51	jsr $514e		jsr	FloatCompare
.475e	20 44 50	jsr $5044		jsr	FPAssertCheck
.4761	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.194
>4764	cf f7 53 63				.dword	$6353f7cf
>4768	df 00					.byte	$df,$00
.476a	20 94 56	jsr $5694		jsr	FloatArcTan
.476d	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.19161973
>4770	33 fb 1b 62				.dword	$621bfb33
>4774	df 00					.byte	$df,$00
.4776	20 87 50	jsr $5087		jsr	FloatSubtract
.4779	20 51 50	jsr $5051		jsr	FPAbs
.477c	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>477f	4c 37 89 41				.dword	$4189374c
>4783	d8 00					.byte	$d8,$00
.4785	20 4e 51	jsr $514e		jsr	FloatCompare
.4788	20 44 50	jsr $5044		jsr	FPAssertCheck
.478b	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.86
>478e	71 3d 0a 77				.dword	$770a3d71
>4792	e2 00					.byte	$e2,$00
.4794	20 bb 57	jsr $57bb		jsr	FloatExponent
.4797	20 54 50	jsr $5054		jsr	FPPushConstant	; 6.42373677
>479a	35 a0 c7 66				.dword	$66c7a035
>479e	e4 00					.byte	$e4,$00
.47a0	20 87 50	jsr $5087		jsr	FloatSubtract
.47a3	20 51 50	jsr $5051		jsr	FPAbs
.47a6	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>47a9	4c 37 89 41				.dword	$4189374c
>47ad	d8 00					.byte	$d8,$00
.47af	20 4e 51	jsr $514e		jsr	FloatCompare
.47b2	20 44 50	jsr $5044		jsr	FPAssertCheck
.47b5	20 54 50	jsr $5054		jsr	FPPushConstant	; 99.93
>47b8	7b 14 ee 63				.dword	$63ee147b
>47bc	e8 00					.byte	$e8,$00
.47be	20 be 58	jsr $58be		jsr	FloatLogarithm
.47c1	20 54 50	jsr $5054		jsr	FPPushConstant	; 4.60446994
>47c4	ac e8 ab 49				.dword	$49abe8ac
>47c8	e4 00					.byte	$e4,$00
.47ca	20 87 50	jsr $5087		jsr	FloatSubtract
.47cd	20 51 50	jsr $5051		jsr	FPAbs
.47d0	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>47d3	4c 37 89 41				.dword	$4189374c
>47d7	d8 00					.byte	$d8,$00
.47d9	20 4e 51	jsr $514e		jsr	FloatCompare
.47dc	20 44 50	jsr $5044		jsr	FPAssertCheck
.47df	20 54 50	jsr $5054		jsr	FPPushConstant	; 76.43
>47e2	7b 14 6e 4c				.dword	$4c6e147b
>47e6	e8 00					.byte	$e8,$00
.47e8	20 b4 59	jsr $59b4		jsr	FloatSquareRoot
.47eb	20 54 50	jsr $5054		jsr	FPPushConstant	; 8.74242529
>47ee	ac 7c f0 45				.dword	$45f07cac
>47f2	e5 00					.byte	$e5,$00
.47f4	20 87 50	jsr $5087		jsr	FloatSubtract
.47f7	20 51 50	jsr $5051		jsr	FPAbs
.47fa	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>47fd	4c 37 89 41				.dword	$4189374c
>4801	d8 00					.byte	$d8,$00
.4803	20 4e 51	jsr $514e		jsr	FloatCompare
.4806	20 44 50	jsr $5044		jsr	FPAssertCheck
.4809	20 54 50	jsr $5054		jsr	FPPushConstant	; 2.67
>480c	d7 a3 70 55				.dword	$5570a3d7
>4810	e3 00					.byte	$e3,$00
.4812	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.4
>4815	9a 99 99 59				.dword	$5999999a
>4819	e2 00					.byte	$e2,$00
.481b	20 32 59	jsr $5932		jsr	FloatPower
.481e	20 54 50	jsr $5054		jsr	FPPushConstant	; 3.95472023
>4821	71 11 8d 7e				.dword	$7e8d1171
>4825	e3 00					.byte	$e3,$00
.4827	20 87 50	jsr $5087		jsr	FloatSubtract
.482a	20 51 50	jsr $5051		jsr	FPAbs
.482d	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.01
>4830	1f 85 eb 51				.dword	$51eb851f
>4834	db 00					.byte	$db,$00
.4836	20 4e 51	jsr $514e		jsr	FloatCompare
.4839	20 44 50	jsr $5044		jsr	FPAssertCheck
.483c	20 54 50	jsr $5054		jsr	FPPushConstant	; 49.41451365
>483f	22 3b d4 62				.dword	$62d43b22
>4843	e7 00					.byte	$e7,$00
.4845	20 2b 56	jsr $562b		jsr	FloatNegate
.4848	20 54 50	jsr $5054		jsr	FPPushConstant	; -49.41451365
>484b	22 3b d4 62				.dword	$62d43b22
>484f	e7 80					.byte	$e7,$80
.4851	20 4e 51	jsr $514e		jsr	FloatCompare
.4854	20 18 51	jsr $5118		jsr	CompareEqual
.4857	20 44 50	jsr $5044		jsr	FPAssertCheck
.485a	20 54 50	jsr $5054		jsr	FPPushConstant	; 49.41451365
>485d	22 3b d4 62				.dword	$62d43b22
>4861	e7 00					.byte	$e7,$00
.4863	20 a4 52	jsr $52a4		jsr	FloatIntegerPart
.4866	20 54 50	jsr $5054		jsr	FPPushConstant	; 49
>4869	31 00 00 00				.dword	$00000031
>486d	00 00					.byte	$00,$00
.486f	20 4e 51	jsr $514e		jsr	FloatCompare
.4872	20 18 51	jsr $5118		jsr	CompareEqual
.4875	20 44 50	jsr $5044		jsr	FPAssertCheck
.4878	20 54 50	jsr $5054		jsr	FPPushConstant	; -4.81
>487b	8f c2 f5 4c				.dword	$4cf5c28f
>487f	e4 80					.byte	$e4,$80
.4881	20 4f 59	jsr $594f		jsr	FloatSine
.4884	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.99523983
>4887	cd 04 64 7f				.dword	$7f6404cd
>488b	e1 00					.byte	$e1,$00
.488d	20 87 50	jsr $5087		jsr	FloatSubtract
.4890	20 51 50	jsr $5051		jsr	FPAbs
.4893	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>4896	4c 37 89 41				.dword	$4189374c
>489a	d8 00					.byte	$d8,$00
.489c	20 4e 51	jsr $514e		jsr	FloatCompare
.489f	20 2e 51	jsr $512e		jsr	CompareLess
.48a2	20 44 50	jsr $5044		jsr	FPAssertCheck
.48a5	20 54 50	jsr $5054		jsr	FPPushConstant	; -4.81
>48a8	8f c2 f5 4c				.dword	$4cf5c28f
>48ac	e4 80					.byte	$e4,$80
.48ae	20 af 57	jsr $57af		jsr	FloatCosine
.48b1	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.09745609
>48b4	7d 87 cb 63				.dword	$63cb877d
>48b8	de 00					.byte	$de,$00
.48ba	20 87 50	jsr $5087		jsr	FloatSubtract
.48bd	20 51 50	jsr $5051		jsr	FPAbs
.48c0	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>48c3	4c 37 89 41				.dword	$4189374c
>48c7	d8 00					.byte	$d8,$00
.48c9	20 4e 51	jsr $514e		jsr	FloatCompare
.48cc	20 2e 51	jsr $512e		jsr	CompareLess
.48cf	20 44 50	jsr $5044		jsr	FPAssertCheck
.48d2	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.15
>48d5	cd cc cc 4c				.dword	$4ccccccd
>48d9	df 00					.byte	$df,$00
.48db	20 c0 59	jsr $59c0		jsr	FloatTangent
.48de	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.15113522
>48e1	76 98 61 4d				.dword	$4d619876
>48e5	df 00					.byte	$df,$00
.48e7	20 87 50	jsr $5087		jsr	FloatSubtract
.48ea	20 51 50	jsr $5051		jsr	FPAbs
.48ed	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>48f0	4c 37 89 41				.dword	$4189374c
>48f4	d8 00					.byte	$d8,$00
.48f6	20 4e 51	jsr $514e		jsr	FloatCompare
.48f9	20 44 50	jsr $5044		jsr	FPAssertCheck
.48fc	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.198
>48ff	31 08 ac 4c				.dword	$4cac0831
>4903	e2 00					.byte	$e2,$00
.4905	20 94 56	jsr $5694		jsr	FloatArcTan
.4908	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.87523757
>490b	e2 c8 07 70				.dword	$7007c8e2
>490f	e1 00					.byte	$e1,$00
.4911	20 87 50	jsr $5087		jsr	FloatSubtract
.4914	20 51 50	jsr $5051		jsr	FPAbs
.4917	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>491a	4c 37 89 41				.dword	$4189374c
>491e	d8 00					.byte	$d8,$00
.4920	20 4e 51	jsr $514e		jsr	FloatCompare
.4923	20 44 50	jsr $5044		jsr	FPAssertCheck
.4926	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.87
>4929	f6 28 5c 6f				.dword	$6f5c28f6
>492d	e1 00					.byte	$e1,$00
.492f	20 bb 57	jsr $57bb		jsr	FloatExponent
.4932	20 54 50	jsr $5054		jsr	FPPushConstant	; 2.38691085
>4935	dd 92 61 4c				.dword	$4c6192dd
>4939	e3 00					.byte	$e3,$00
.493b	20 87 50	jsr $5087		jsr	FloatSubtract
.493e	20 51 50	jsr $5051		jsr	FPAbs
.4941	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>4944	4c 37 89 41				.dword	$4189374c
>4948	d8 00					.byte	$d8,$00
.494a	20 4e 51	jsr $514e		jsr	FloatCompare
.494d	20 44 50	jsr $5044		jsr	FPAssertCheck
.4950	20 54 50	jsr $5054		jsr	FPPushConstant	; 81.56
>4953	29 5c 8f 51				.dword	$518f5c29
>4957	e8 00					.byte	$e8,$00
.4959	20 be 58	jsr $58be		jsr	FloatLogarithm
.495c	20 54 50	jsr $5054		jsr	FPPushConstant	; 4.40133895
>495f	64 e2 6b 46				.dword	$466be264
>4963	e4 00					.byte	$e4,$00
.4965	20 87 50	jsr $5087		jsr	FloatSubtract
.4968	20 51 50	jsr $5051		jsr	FPAbs
.496b	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>496e	4c 37 89 41				.dword	$4189374c
>4972	d8 00					.byte	$d8,$00
.4974	20 4e 51	jsr $514e		jsr	FloatCompare
.4977	20 44 50	jsr $5044		jsr	FPAssertCheck
.497a	20 54 50	jsr $5054		jsr	FPPushConstant	; 53.28
>497d	29 5c 8f 6a				.dword	$6a8f5c29
>4981	e7 00					.byte	$e7,$00
.4983	20 b4 59	jsr $59b4		jsr	FloatSquareRoot
.4986	20 54 50	jsr $5054		jsr	FPPushConstant	; 7.29931504
>4989	91 fe c9 74				.dword	$74c9fe91
>498d	e4 00					.byte	$e4,$00
.498f	20 87 50	jsr $5087		jsr	FloatSubtract
.4992	20 51 50	jsr $5051		jsr	FPAbs
.4995	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>4998	4c 37 89 41				.dword	$4189374c
>499c	d8 00					.byte	$d8,$00
.499e	20 4e 51	jsr $514e		jsr	FloatCompare
.49a1	20 44 50	jsr $5044		jsr	FPAssertCheck
.49a4	20 54 50	jsr $5054		jsr	FPPushConstant	; 3.29333333
>49a7	94 fc 62 69				.dword	$6962fc94
>49ab	e3 00					.byte	$e3,$00
.49ad	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.6
>49b0	66 66 66 66				.dword	$66666666
>49b4	e2 00					.byte	$e2,$00
.49b6	20 32 59	jsr $5932		jsr	FloatPower
.49b9	20 54 50	jsr $5054		jsr	FPPushConstant	; 6.73313161
>49bc	36 e8 ba 6b				.dword	$6bbae836
>49c0	e4 00					.byte	$e4,$00
.49c2	20 87 50	jsr $5087		jsr	FloatSubtract
.49c5	20 51 50	jsr $5051		jsr	FPAbs
.49c8	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.01
>49cb	1f 85 eb 51				.dword	$51eb851f
>49cf	db 00					.byte	$db,$00
.49d1	20 4e 51	jsr $514e		jsr	FloatCompare
.49d4	20 44 50	jsr $5044		jsr	FPAssertCheck
.49d7	20 54 50	jsr $5054		jsr	FPPushConstant	; 32.28233579
>49da	51 8e 90 40				.dword	$40908e51
>49de	e7 00					.byte	$e7,$00
.49e0	20 2b 56	jsr $562b		jsr	FloatNegate
.49e3	20 54 50	jsr $5054		jsr	FPPushConstant	; -32.28233579
>49e6	51 8e 90 40				.dword	$40908e51
>49ea	e7 80					.byte	$e7,$80
.49ec	20 4e 51	jsr $514e		jsr	FloatCompare
.49ef	20 18 51	jsr $5118		jsr	CompareEqual
.49f2	20 44 50	jsr $5044		jsr	FPAssertCheck
.49f5	20 54 50	jsr $5054		jsr	FPPushConstant	; 32.28233579
>49f8	51 8e 90 40				.dword	$40908e51
>49fc	e7 00					.byte	$e7,$00
.49fe	20 a4 52	jsr $52a4		jsr	FloatIntegerPart
.4a01	20 54 50	jsr $5054		jsr	FPPushConstant	; 32
>4a04	20 00 00 00				.dword	$00000020
>4a08	00 00					.byte	$00,$00
.4a0a	20 4e 51	jsr $514e		jsr	FloatCompare
.4a0d	20 18 51	jsr $5118		jsr	CompareEqual
.4a10	20 44 50	jsr $5044		jsr	FPAssertCheck
.4a13	20 54 50	jsr $5054		jsr	FPPushConstant	; 10.54
>4a16	85 eb 51 54				.dword	$5451eb85
>4a1a	e5 00					.byte	$e5,$00
.4a1c	20 4f 59	jsr $594f		jsr	FloatSine
.4a1f	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.8980085
>4a22	4a f1 f1 72				.dword	$72f1f14a
>4a26	e1 80					.byte	$e1,$80
.4a28	20 87 50	jsr $5087		jsr	FloatSubtract
.4a2b	20 51 50	jsr $5051		jsr	FPAbs
.4a2e	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>4a31	4c 37 89 41				.dword	$4189374c
>4a35	d8 00					.byte	$d8,$00
.4a37	20 4e 51	jsr $514e		jsr	FloatCompare
.4a3a	20 2e 51	jsr $512e		jsr	CompareLess
.4a3d	20 44 50	jsr $5044		jsr	FPAssertCheck
.4a40	20 54 50	jsr $5054		jsr	FPPushConstant	; 10.54
>4a43	85 eb 51 54				.dword	$5451eb85
>4a47	e5 00					.byte	$e5,$00
.4a49	20 af 57	jsr $57af		jsr	FloatCosine
.4a4c	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.4399781
>4a4f	9e 67 a2 70				.dword	$70a2679e
>4a53	e0 80					.byte	$e0,$80
.4a55	20 87 50	jsr $5087		jsr	FloatSubtract
.4a58	20 51 50	jsr $5051		jsr	FPAbs
.4a5b	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>4a5e	4c 37 89 41				.dword	$4189374c
>4a62	d8 00					.byte	$d8,$00
.4a64	20 4e 51	jsr $514e		jsr	FloatCompare
.4a67	20 2e 51	jsr $512e		jsr	CompareLess
.4a6a	20 44 50	jsr $5044		jsr	FPAssertCheck
.4a6d	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.36
>4a70	c3 f5 28 5c				.dword	$5c28f5c3
>4a74	e0 00					.byte	$e0,$00
.4a76	20 c0 59	jsr $59c0		jsr	FloatTangent
.4a79	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.37640285
>4a7c	eb ef 5b 60				.dword	$605befeb
>4a80	e0 00					.byte	$e0,$00
.4a82	20 87 50	jsr $5087		jsr	FloatSubtract
.4a85	20 51 50	jsr $5051		jsr	FPAbs
.4a88	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>4a8b	4c 37 89 41				.dword	$4189374c
>4a8f	d8 00					.byte	$d8,$00
.4a91	20 4e 51	jsr $514e		jsr	FloatCompare
.4a94	20 44 50	jsr $5044		jsr	FPAssertCheck
.4a97	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.62
>4a9a	f6 28 5c 4f				.dword	$4f5c28f6
>4a9e	e1 00					.byte	$e1,$00
.4aa0	20 94 56	jsr $5694		jsr	FloatArcTan
.4aa3	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.55499573
>4aa6	9f 19 0a 47				.dword	$470a199f
>4aaa	e1 00					.byte	$e1,$00
.4aac	20 87 50	jsr $5087		jsr	FloatSubtract
.4aaf	20 51 50	jsr $5051		jsr	FPAbs
.4ab2	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>4ab5	4c 37 89 41				.dword	$4189374c
>4ab9	d8 00					.byte	$d8,$00
.4abb	20 4e 51	jsr $514e		jsr	FloatCompare
.4abe	20 44 50	jsr $5044		jsr	FPAssertCheck
.4ac1	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.69
>4ac4	85 eb 51 58				.dword	$5851eb85
>4ac8	e1 80					.byte	$e1,$80
.4aca	20 bb 57	jsr $57bb		jsr	FloatExponent
.4acd	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.50157607
>4ad0	09 a5 33 40				.dword	$4033a509
>4ad4	e1 00					.byte	$e1,$00
.4ad6	20 87 50	jsr $5087		jsr	FloatSubtract
.4ad9	20 51 50	jsr $5051		jsr	FPAbs
.4adc	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>4adf	4c 37 89 41				.dword	$4189374c
>4ae3	d8 00					.byte	$d8,$00
.4ae5	20 4e 51	jsr $514e		jsr	FloatCompare
.4ae8	20 44 50	jsr $5044		jsr	FPAssertCheck
.4aeb	20 54 50	jsr $5054		jsr	FPPushConstant	; 85.35
>4aee	9a 99 59 55				.dword	$5559999a
>4af2	e8 00					.byte	$e8,$00
.4af4	20 be 58	jsr $58be		jsr	FloatLogarithm
.4af7	20 54 50	jsr $5054		jsr	FPPushConstant	; 4.44676045
>4afa	49 ee 25 47				.dword	$4725ee49
>4afe	e4 00					.byte	$e4,$00
.4b00	20 87 50	jsr $5087		jsr	FloatSubtract
.4b03	20 51 50	jsr $5051		jsr	FPAbs
.4b06	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>4b09	4c 37 89 41				.dword	$4189374c
>4b0d	d8 00					.byte	$d8,$00
.4b0f	20 4e 51	jsr $514e		jsr	FloatCompare
.4b12	20 44 50	jsr $5044		jsr	FPAssertCheck
.4b15	20 54 50	jsr $5054		jsr	FPPushConstant	; 66.04
>4b18	71 3d 0a 42				.dword	$420a3d71
>4b1c	e8 00					.byte	$e8,$00
.4b1e	20 b4 59	jsr $59b4		jsr	FloatSquareRoot
.4b21	20 54 50	jsr $5054		jsr	FPPushConstant	; 8.12649986
>4b24	5c 12 03 41				.dword	$4103125c
>4b28	e5 00					.byte	$e5,$00
.4b2a	20 87 50	jsr $5087		jsr	FloatSubtract
.4b2d	20 51 50	jsr $5051		jsr	FPAbs
.4b30	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>4b33	4c 37 89 41				.dword	$4189374c
>4b37	d8 00					.byte	$d8,$00
.4b39	20 4e 51	jsr $514e		jsr	FloatCompare
.4b3c	20 44 50	jsr $5044		jsr	FPAssertCheck
.4b3f	20 54 50	jsr $5054		jsr	FPPushConstant	; 3.25666667
>4b42	05 9d 36 68				.dword	$68369d05
>4b46	e3 00					.byte	$e3,$00
.4b48	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.8
>4b4b	66 66 66 66				.dword	$66666666
>4b4f	e1 00					.byte	$e1,$00
.4b51	20 32 59	jsr $5932		jsr	FloatPower
.4b54	20 54 50	jsr $5054		jsr	FPPushConstant	; 2.57169018
>4b57	34 49 4b 52				.dword	$524b4934
>4b5b	e3 00					.byte	$e3,$00
.4b5d	20 87 50	jsr $5087		jsr	FloatSubtract
.4b60	20 51 50	jsr $5051		jsr	FPAbs
.4b63	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.01
>4b66	1f 85 eb 51				.dword	$51eb851f
>4b6a	db 00					.byte	$db,$00
.4b6c	20 4e 51	jsr $514e		jsr	FloatCompare
.4b6f	20 44 50	jsr $5044		jsr	FPAssertCheck
.4b72	20 54 50	jsr $5054		jsr	FPPushConstant	; -72.15129181
>4b75	0f bb 26 48				.dword	$4826bb0f
>4b79	e8 80					.byte	$e8,$80
.4b7b	20 2b 56	jsr $562b		jsr	FloatNegate
.4b7e	20 54 50	jsr $5054		jsr	FPPushConstant	; 72.15129181
>4b81	0f bb 26 48				.dword	$4826bb0f
>4b85	e8 00					.byte	$e8,$00
.4b87	20 4e 51	jsr $514e		jsr	FloatCompare
.4b8a	20 18 51	jsr $5118		jsr	CompareEqual
.4b8d	20 44 50	jsr $5044		jsr	FPAssertCheck
.4b90	20 54 50	jsr $5054		jsr	FPPushConstant	; -72.15129181
>4b93	0f bb 26 48				.dword	$4826bb0f
>4b97	e8 80					.byte	$e8,$80
.4b99	20 a4 52	jsr $52a4		jsr	FloatIntegerPart
.4b9c	20 54 50	jsr $5054		jsr	FPPushConstant	; -72
>4b9f	48 00 00 00				.dword	$00000048
>4ba3	00 80					.byte	$00,$80
.4ba5	20 4e 51	jsr $514e		jsr	FloatCompare
.4ba8	20 18 51	jsr $5118		jsr	CompareEqual
.4bab	20 44 50	jsr $5044		jsr	FPAssertCheck
.4bae	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.66
>4bb1	48 e1 7a 54				.dword	$547ae148
>4bb5	e1 80					.byte	$e1,$80
.4bb7	20 4f 59	jsr $594f		jsr	FloatSine
.4bba	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.61311685
>4bbd	ea 9c 7a 4e				.dword	$4e7a9cea
>4bc1	e1 80					.byte	$e1,$80
.4bc3	20 87 50	jsr $5087		jsr	FloatSubtract
.4bc6	20 51 50	jsr $5051		jsr	FPAbs
.4bc9	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>4bcc	4c 37 89 41				.dword	$4189374c
>4bd0	d8 00					.byte	$d8,$00
.4bd2	20 4e 51	jsr $514e		jsr	FloatCompare
.4bd5	20 2e 51	jsr $512e		jsr	CompareLess
.4bd8	20 44 50	jsr $5044		jsr	FPAssertCheck
.4bdb	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.66
>4bde	48 e1 7a 54				.dword	$547ae148
>4be2	e1 80					.byte	$e1,$80
.4be4	20 af 57	jsr $57af		jsr	FloatCosine
.4be7	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.78999223
>4bea	24 77 1e 65				.dword	$651e7724
>4bee	e1 00					.byte	$e1,$00
.4bf0	20 87 50	jsr $5087		jsr	FloatSubtract
.4bf3	20 51 50	jsr $5051		jsr	FPAbs
.4bf6	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>4bf9	4c 37 89 41				.dword	$4189374c
>4bfd	d8 00					.byte	$d8,$00
.4bff	20 4e 51	jsr $514e		jsr	FloatCompare
.4c02	20 2e 51	jsr $512e		jsr	CompareLess
.4c05	20 44 50	jsr $5044		jsr	FPAssertCheck
.4c08	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.23
>4c0b	5c 8f c2 75				.dword	$75c28f5c
>4c0f	df 00					.byte	$df,$00
.4c11	20 c0 59	jsr $59c0		jsr	FloatTangent
.4c14	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.23414336
>4c17	74 a3 e1 77				.dword	$77e1a374
>4c1b	df 00					.byte	$df,$00
.4c1d	20 87 50	jsr $5087		jsr	FloatSubtract
.4c20	20 51 50	jsr $5051		jsr	FPAbs
.4c23	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>4c26	4c 37 89 41				.dword	$4189374c
>4c2a	d8 00					.byte	$d8,$00
.4c2c	20 4e 51	jsr $514e		jsr	FloatCompare
.4c2f	20 44 50	jsr $5044		jsr	FPAssertCheck
.4c32	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.42
>4c35	b8 1e 85 6b				.dword	$6b851eb8
>4c39	e0 00					.byte	$e0,$00
.4c3b	20 94 56	jsr $5694		jsr	FloatArcTan
.4c3e	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.39762799
>4c41	ad f2 ca 65				.dword	$65caf2ad
>4c45	e0 00					.byte	$e0,$00
.4c47	20 87 50	jsr $5087		jsr	FloatSubtract
.4c4a	20 51 50	jsr $5051		jsr	FPAbs
.4c4d	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>4c50	4c 37 89 41				.dword	$4189374c
>4c54	d8 00					.byte	$d8,$00
.4c56	20 4e 51	jsr $514e		jsr	FloatCompare
.4c59	20 44 50	jsr $5044		jsr	FPAssertCheck
.4c5c	20 54 50	jsr $5054		jsr	FPPushConstant	; -1.9
>4c5f	9a 99 99 79				.dword	$7999999a
>4c63	e2 80					.byte	$e2,$80
.4c65	20 bb 57	jsr $57bb		jsr	FloatExponent
.4c68	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.14956862
>4c6b	17 42 94 4c				.dword	$4c944217
>4c6f	df 00					.byte	$df,$00
.4c71	20 87 50	jsr $5087		jsr	FloatSubtract
.4c74	20 51 50	jsr $5051		jsr	FPAbs
.4c77	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>4c7a	4c 37 89 41				.dword	$4189374c
>4c7e	d8 00					.byte	$d8,$00
.4c80	20 4e 51	jsr $514e		jsr	FloatCompare
.4c83	20 44 50	jsr $5044		jsr	FPAssertCheck
.4c86	20 54 50	jsr $5054		jsr	FPPushConstant	; 41.36
>4c89	ec 51 b8 52				.dword	$52b851ec
>4c8d	e7 00					.byte	$e7,$00
.4c8f	20 be 58	jsr $58be		jsr	FloatLogarithm
.4c92	20 54 50	jsr $5054		jsr	FPPushConstant	; 3.72231423
>4c95	bb 32 1d 77				.dword	$771d32bb
>4c99	e3 00					.byte	$e3,$00
.4c9b	20 87 50	jsr $5087		jsr	FloatSubtract
.4c9e	20 51 50	jsr $5051		jsr	FPAbs
.4ca1	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>4ca4	4c 37 89 41				.dword	$4189374c
>4ca8	d8 00					.byte	$d8,$00
.4caa	20 4e 51	jsr $514e		jsr	FloatCompare
.4cad	20 44 50	jsr $5044		jsr	FPAssertCheck
.4cb0	20 54 50	jsr $5054		jsr	FPPushConstant	; 40.0
>4cb3	28 00 00 00				.dword	$00000028
>4cb7	00 00					.byte	$00,$00
.4cb9	20 b4 59	jsr $59b4		jsr	FloatSquareRoot
.4cbc	20 54 50	jsr $5054		jsr	FPPushConstant	; 6.32455532
>4cbf	eb 60 31 65				.dword	$653160eb
>4cc3	e4 00					.byte	$e4,$00
.4cc5	20 87 50	jsr $5087		jsr	FloatSubtract
.4cc8	20 51 50	jsr $5051		jsr	FPAbs
.4ccb	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>4cce	4c 37 89 41				.dword	$4189374c
>4cd2	d8 00					.byte	$d8,$00
.4cd4	20 4e 51	jsr $514e		jsr	FloatCompare
.4cd7	20 44 50	jsr $5044		jsr	FPAssertCheck
.4cda	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.88333333
>4cdd	0a 11 11 71				.dword	$7111110a
>4ce1	e1 00					.byte	$e1,$00
.4ce3	20 54 50	jsr $5054		jsr	FPPushConstant	; 2.0
>4ce6	02 00 00 00				.dword	$00000002
>4cea	00 00					.byte	$00,$00
.4cec	20 32 59	jsr $5932		jsr	FloatPower
.4cef	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.78027778
>4cf2	6d 24 e0 63				.dword	$63e0246d
>4cf6	e1 00					.byte	$e1,$00
.4cf8	20 87 50	jsr $5087		jsr	FloatSubtract
.4cfb	20 51 50	jsr $5051		jsr	FPAbs
.4cfe	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.01
>4d01	1f 85 eb 51				.dword	$51eb851f
>4d05	db 00					.byte	$db,$00
.4d07	20 4e 51	jsr $514e		jsr	FloatCompare
.4d0a	20 44 50	jsr $5044		jsr	FPAssertCheck
.4d0d	20 54 50	jsr $5054		jsr	FPPushConstant	; 3.26759537
>4d10	2a 24 90 68				.dword	$6890242a
>4d14	e3 00					.byte	$e3,$00
.4d16	20 2b 56	jsr $562b		jsr	FloatNegate
.4d19	20 54 50	jsr $5054		jsr	FPPushConstant	; -3.26759537
>4d1c	2a 24 90 68				.dword	$6890242a
>4d20	e3 80					.byte	$e3,$80
.4d22	20 4e 51	jsr $514e		jsr	FloatCompare
.4d25	20 18 51	jsr $5118		jsr	CompareEqual
.4d28	20 44 50	jsr $5044		jsr	FPAssertCheck
.4d2b	20 54 50	jsr $5054		jsr	FPPushConstant	; 3.26759537
>4d2e	2a 24 90 68				.dword	$6890242a
>4d32	e3 00					.byte	$e3,$00
.4d34	20 a4 52	jsr $52a4		jsr	FloatIntegerPart
.4d37	20 54 50	jsr $5054		jsr	FPPushConstant	; 3
>4d3a	03 00 00 00				.dword	$00000003
>4d3e	00 00					.byte	$00,$00
.4d40	20 4e 51	jsr $514e		jsr	FloatCompare
.4d43	20 18 51	jsr $5118		jsr	CompareEqual
.4d46	20 44 50	jsr $5044		jsr	FPAssertCheck
.4d49	20 54 50	jsr $5054		jsr	FPPushConstant	; 18.46
>4d4c	3d 0a d7 49				.dword	$49d70a3d
>4d50	e6 00					.byte	$e6,$00
.4d52	20 4f 59	jsr $594f		jsr	FloatSine
.4d55	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.37977765
>4d58	ab 1b 39 61				.dword	$61391bab
>4d5c	e0 80					.byte	$e0,$80
.4d5e	20 87 50	jsr $5087		jsr	FloatSubtract
.4d61	20 51 50	jsr $5051		jsr	FPAbs
.4d64	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>4d67	4c 37 89 41				.dword	$4189374c
>4d6b	d8 00					.byte	$d8,$00
.4d6d	20 4e 51	jsr $514e		jsr	FloatCompare
.4d70	20 2e 51	jsr $512e		jsr	CompareLess
.4d73	20 44 50	jsr $5044		jsr	FPAssertCheck
.4d76	20 54 50	jsr $5054		jsr	FPPushConstant	; 18.46
>4d79	3d 0a d7 49				.dword	$49d70a3d
>4d7d	e6 00					.byte	$e6,$00
.4d7f	20 af 57	jsr $57af		jsr	FloatCosine
.4d82	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.9250778
>4d85	09 f3 68 76				.dword	$7668f309
>4d89	e1 00					.byte	$e1,$00
.4d8b	20 87 50	jsr $5087		jsr	FloatSubtract
.4d8e	20 51 50	jsr $5051		jsr	FPAbs
.4d91	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>4d94	4c 37 89 41				.dword	$4189374c
>4d98	d8 00					.byte	$d8,$00
.4d9a	20 4e 51	jsr $514e		jsr	FloatCompare
.4d9d	20 2e 51	jsr $512e		jsr	CompareLess
.4da0	20 44 50	jsr $5044		jsr	FPAssertCheck
.4da3	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.39
>4da6	3d 0a d7 63				.dword	$63d70a3d
>4daa	e0 00					.byte	$e0,$00
.4dac	20 c0 59	jsr $59c0		jsr	FloatTangent
.4daf	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.41105492
>4db2	2e e5 3a 69				.dword	$693ae52e
>4db6	e0 00					.byte	$e0,$00
.4db8	20 87 50	jsr $5087		jsr	FloatSubtract
.4dbb	20 51 50	jsr $5051		jsr	FPAbs
.4dbe	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>4dc1	4c 37 89 41				.dword	$4189374c
>4dc5	d8 00					.byte	$d8,$00
.4dc7	20 4e 51	jsr $514e		jsr	FloatCompare
.4dca	20 44 50	jsr $5044		jsr	FPAssertCheck
.4dcd	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.24
>4dd0	f6 28 5c 4f				.dword	$4f5c28f6
>4dd4	e2 00					.byte	$e2,$00
.4dd6	20 94 56	jsr $5694		jsr	FloatArcTan
.4dd9	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.89213384
>4ddc	11 71 31 72				.dword	$72317111
>4de0	e1 00					.byte	$e1,$00
.4de2	20 87 50	jsr $5087		jsr	FloatSubtract
.4de5	20 51 50	jsr $5051		jsr	FPAbs
.4de8	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>4deb	4c 37 89 41				.dword	$4189374c
>4def	d8 00					.byte	$d8,$00
.4df1	20 4e 51	jsr $514e		jsr	FloatCompare
.4df4	20 44 50	jsr $5044		jsr	FPAssertCheck
.4df7	20 54 50	jsr $5054		jsr	FPPushConstant	; -1.57
>4dfa	48 e1 7a 64				.dword	$647ae148
>4dfe	e2 80					.byte	$e2,$80
.4e00	20 bb 57	jsr $57bb		jsr	FloatExponent
.4e03	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.20804518
>4e06	d8 e5 84 6a				.dword	$6a84e5d8
>4e0a	df 00					.byte	$df,$00
.4e0c	20 87 50	jsr $5087		jsr	FloatSubtract
.4e0f	20 51 50	jsr $5051		jsr	FPAbs
.4e12	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>4e15	4c 37 89 41				.dword	$4189374c
>4e19	d8 00					.byte	$d8,$00
.4e1b	20 4e 51	jsr $514e		jsr	FloatCompare
.4e1e	20 44 50	jsr $5044		jsr	FPAssertCheck
.4e21	20 54 50	jsr $5054		jsr	FPPushConstant	; 79.0
>4e24	4f 00 00 00				.dword	$0000004f
>4e28	00 00					.byte	$00,$00
.4e2a	20 be 58	jsr $58be		jsr	FloatLogarithm
.4e2d	20 54 50	jsr $5054		jsr	FPPushConstant	; 4.36944785
>4e30	26 42 e9 45				.dword	$45e94226
>4e34	e4 00					.byte	$e4,$00
.4e36	20 87 50	jsr $5087		jsr	FloatSubtract
.4e39	20 51 50	jsr $5051		jsr	FPAbs
.4e3c	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>4e3f	4c 37 89 41				.dword	$4189374c
>4e43	d8 00					.byte	$d8,$00
.4e45	20 4e 51	jsr $514e		jsr	FloatCompare
.4e48	20 44 50	jsr $5044		jsr	FPAssertCheck
.4e4b	20 54 50	jsr $5054		jsr	FPPushConstant	; 53.21
>4e4e	1f 85 6b 6a				.dword	$6a6b851f
>4e52	e7 00					.byte	$e7,$00
.4e54	20 b4 59	jsr $59b4		jsr	FloatSquareRoot
.4e57	20 54 50	jsr $5054		jsr	FPPushConstant	; 7.29451849
>4e5a	05 59 b6 74				.dword	$74b65905
>4e5e	e4 00					.byte	$e4,$00
.4e60	20 87 50	jsr $5087		jsr	FloatSubtract
.4e63	20 51 50	jsr $5051		jsr	FPAbs
.4e66	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>4e69	4c 37 89 41				.dword	$4189374c
>4e6d	d8 00					.byte	$d8,$00
.4e6f	20 4e 51	jsr $514e		jsr	FloatCompare
.4e72	20 44 50	jsr $5044		jsr	FPAssertCheck
.4e75	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.06333333
>4e78	3d a7 0d 44				.dword	$440da73d
>4e7c	e2 00					.byte	$e2,$00
.4e7e	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.4
>4e81	66 66 66 66				.dword	$66666666
>4e85	e0 00					.byte	$e0,$00
.4e87	20 32 59	jsr $5932		jsr	FloatPower
.4e8a	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.02486762
>4e8d	5c 6e 97 41				.dword	$41976e5c
>4e91	e2 00					.byte	$e2,$00
.4e93	20 87 50	jsr $5087		jsr	FloatSubtract
.4e96	20 51 50	jsr $5051		jsr	FPAbs
.4e99	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.01
>4e9c	1f 85 eb 51				.dword	$51eb851f
>4ea0	db 00					.byte	$db,$00
.4ea2	20 4e 51	jsr $514e		jsr	FloatCompare
.4ea5	20 44 50	jsr $5044		jsr	FPAssertCheck
.4ea8	20 54 50	jsr $5054		jsr	FPPushConstant	; -69.95108123
>4eab	0f 7a f3 45				.dword	$45f37a0f
>4eaf	e8 80					.byte	$e8,$80
.4eb1	20 2b 56	jsr $562b		jsr	FloatNegate
.4eb4	20 54 50	jsr $5054		jsr	FPPushConstant	; 69.95108123
>4eb7	0f 7a f3 45				.dword	$45f37a0f
>4ebb	e8 00					.byte	$e8,$00
.4ebd	20 4e 51	jsr $514e		jsr	FloatCompare
.4ec0	20 18 51	jsr $5118		jsr	CompareEqual
.4ec3	20 44 50	jsr $5044		jsr	FPAssertCheck
.4ec6	20 54 50	jsr $5054		jsr	FPPushConstant	; -69.95108123
>4ec9	0f 7a f3 45				.dword	$45f37a0f
>4ecd	e8 80					.byte	$e8,$80
.4ecf	20 a4 52	jsr $52a4		jsr	FloatIntegerPart
.4ed2	20 54 50	jsr $5054		jsr	FPPushConstant	; -69
>4ed5	45 00 00 00				.dword	$00000045
>4ed9	00 80					.byte	$00,$80
.4edb	20 4e 51	jsr $514e		jsr	FloatCompare
.4ede	20 18 51	jsr $5118		jsr	CompareEqual
.4ee1	20 44 50	jsr $5044		jsr	FPAssertCheck
.4ee4	20 54 50	jsr $5054		jsr	FPPushConstant	; 14.73
>4ee7	3d 0a d7 75				.dword	$75d70a3d
>4eeb	e5 00					.byte	$e5,$00
.4eed	20 4f 59	jsr $594f		jsr	FloatSine
.4ef0	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.82936114
>4ef3	7e 81 28 6a				.dword	$6a28817e
>4ef7	e1 00					.byte	$e1,$00
.4ef9	20 87 50	jsr $5087		jsr	FloatSubtract
.4efc	20 51 50	jsr $5051		jsr	FPAbs
.4eff	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>4f02	4c 37 89 41				.dword	$4189374c
>4f06	d8 00					.byte	$d8,$00
.4f08	20 4e 51	jsr $514e		jsr	FloatCompare
.4f0b	20 2e 51	jsr $512e		jsr	CompareLess
.4f0e	20 44 50	jsr $5044		jsr	FPAssertCheck
.4f11	20 54 50	jsr $5054		jsr	FPPushConstant	; 14.73
>4f14	3d 0a d7 75				.dword	$75d70a3d
>4f18	e5 00					.byte	$e5,$00
.4f1a	20 af 57	jsr $57af		jsr	FloatCosine
.4f1d	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.55871289
>4f20	6b e7 83 47				.dword	$4783e76b
>4f24	e1 80					.byte	$e1,$80
.4f26	20 87 50	jsr $5087		jsr	FloatSubtract
.4f29	20 51 50	jsr $5051		jsr	FPAbs
.4f2c	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>4f2f	4c 37 89 41				.dword	$4189374c
>4f33	d8 00					.byte	$d8,$00
.4f35	20 4e 51	jsr $514e		jsr	FloatCompare
.4f38	20 2e 51	jsr $512e		jsr	CompareLess
.4f3b	20 44 50	jsr $5044		jsr	FPAssertCheck
.4f3e	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.16
>4f41	1f 85 eb 51				.dword	$51eb851f
>4f45	df 00					.byte	$df,$00
.4f47	20 c0 59	jsr $59c0		jsr	FloatTangent
.4f4a	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.16137946
>4f4d	1e 54 a0 52				.dword	$52a0541e
>4f51	df 00					.byte	$df,$00
.4f53	20 87 50	jsr $5087		jsr	FloatSubtract
.4f56	20 51 50	jsr $5051		jsr	FPAbs
.4f59	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>4f5c	4c 37 89 41				.dword	$4189374c
>4f60	d8 00					.byte	$d8,$00
.4f62	20 4e 51	jsr $514e		jsr	FloatCompare
.4f65	20 44 50	jsr $5044		jsr	FPAssertCheck
.4f68	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.61
>4f6b	71 3d 0a 67				.dword	$670a3d71
>4f6f	e2 00					.byte	$e2,$00
.4f71	20 94 56	jsr $5694		jsr	FloatArcTan
.4f74	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.01499342
>4f77	f6 a6 f5 40				.dword	$40f5a6f6
>4f7b	e2 00					.byte	$e2,$00
.4f7d	20 87 50	jsr $5087		jsr	FloatSubtract
.4f80	20 51 50	jsr $5051		jsr	FPAbs
.4f83	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>4f86	4c 37 89 41				.dword	$4189374c
>4f8a	d8 00					.byte	$d8,$00
.4f8c	20 4e 51	jsr $514e		jsr	FloatCompare
.4f8f	20 44 50	jsr $5044		jsr	FPAssertCheck
.4f92	20 54 50	jsr $5054		jsr	FPPushConstant	; -0.6
>4f95	cd cc cc 4c				.dword	$4ccccccd
>4f99	e1 80					.byte	$e1,$80
.4f9b	20 bb 57	jsr $57bb		jsr	FloatExponent
.4f9e	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.54881164
>4fa1	b7 75 3f 46				.dword	$463f75b7
>4fa5	e1 00					.byte	$e1,$00
.4fa7	20 87 50	jsr $5087		jsr	FloatSubtract
.4faa	20 51 50	jsr $5051		jsr	FPAbs
.4fad	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>4fb0	4c 37 89 41				.dword	$4189374c
>4fb4	d8 00					.byte	$d8,$00
.4fb6	20 4e 51	jsr $514e		jsr	FloatCompare
.4fb9	20 44 50	jsr $5044		jsr	FPAssertCheck
.4fbc	20 54 50	jsr $5054		jsr	FPPushConstant	; 36.13
>4fbf	5c 8f 42 48				.dword	$48428f5c
>4fc3	e7 00					.byte	$e7,$00
.4fc5	20 be 58	jsr $58be		jsr	FloatLogarithm
.4fc8	20 54 50	jsr $5054		jsr	FPPushConstant	; 3.58712355
>4fcb	54 b7 c9 72				.dword	$72c9b754
>4fcf	e3 00					.byte	$e3,$00
.4fd1	20 87 50	jsr $5087		jsr	FloatSubtract
.4fd4	20 51 50	jsr $5051		jsr	FPAbs
.4fd7	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>4fda	4c 37 89 41				.dword	$4189374c
>4fde	d8 00					.byte	$d8,$00
.4fe0	20 4e 51	jsr $514e		jsr	FloatCompare
.4fe3	20 44 50	jsr $5044		jsr	FPAssertCheck
.4fe6	20 54 50	jsr $5054		jsr	FPPushConstant	; 13.1
>4fe9	cd cc cc 68				.dword	$68cccccd
>4fed	e5 00					.byte	$e5,$00
.4fef	20 b4 59	jsr $59b4		jsr	FloatSquareRoot
.4ff2	20 54 50	jsr $5054		jsr	FPPushConstant	; 3.61939221
>4ff5	9d 0f d2 73				.dword	$73d20f9d
>4ff9	e3 00					.byte	$e3,$00
.4ffb	20 87 50	jsr $5087		jsr	FloatSubtract
.4ffe	20 51 50	jsr $5051		jsr	FPAbs
.5001	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.001
>5004	4c 37 89 41				.dword	$4189374c
>5008	d8 00					.byte	$d8,$00
.500a	20 4e 51	jsr $514e		jsr	FloatCompare
.500d	20 44 50	jsr $5044		jsr	FPAssertCheck
.5010	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.68666667
>5013	c3 58 f2 6b				.dword	$6bf258c3
>5017	e2 00					.byte	$e2,$00
.5019	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.2
>501c	66 66 66 66				.dword	$66666666
>5020	df 00					.byte	$df,$00
.5022	20 32 59	jsr $5932		jsr	FloatPower
.5025	20 54 50	jsr $5054		jsr	FPPushConstant	; 1.11021183
>5028	eb b5 0d 47				.dword	$470db5eb
>502c	e2 00					.byte	$e2,$00
.502e	20 87 50	jsr $5087		jsr	FloatSubtract
.5031	20 51 50	jsr $5051		jsr	FPAbs
.5034	20 54 50	jsr $5054		jsr	FPPushConstant	; 0.01
>5037	1f 85 eb 51				.dword	$51eb851f
>503b	db 00					.byte	$db,$00
.503d	20 4e 51	jsr $514e		jsr	FloatCompare
.5040	20 44 50	jsr $5044		jsr	FPAssertCheck

;******  Return to file: testing/testing.asm

.5043	60		rts				rts
.5044					FPAssertCheck:
.5044	e0 00		cpx #$00			cpx 	#0
.5046	d0 06		bne $504e			bne 	_FPACFail
.5048	b5 2e		lda $2e,x			lda 	NSMantissa0,x
.504a	f0 02		beq $504e			beq 	_FPACFail
.504c	ca		dex				dex
.504d	60		rts				rts
.504e					_FPACFail:
>504e	db						.byte 	$DB 						; causes a break in the emulator
.504f	80 fd		bra $504e			bra 	_FPACFail
.5051					FPAbs:
.5051	74 22		stz $22,x			stz 	NSStatus,x
.5053	60		rts				rts
.5054					FPPushConstant:
.5054	e8		inx				inx
.5055	68		pla				pla
.5056	7a		ply				ply
.5057	85 70		sta $70				sta 	zTemp0
.5059	84 71		sty $71				sty 	zTemp0+1
.505b	a0 01		ldy #$01			ldy 	#1
.505d	b1 70		lda ($70),y			lda 	(zTemp0),y
.505f	95 2e		sta $2e,x			sta 	NSMantissa0,x
.5061	c8		iny				iny
.5062	b1 70		lda ($70),y			lda 	(zTemp0),y
.5064	95 3a		sta $3a,x			sta 	NSMantissa1,x
.5066	c8		iny				iny
.5067	b1 70		lda ($70),y			lda 	(zTemp0),y
.5069	95 46		sta $46,x			sta 	NSMantissa2,x
.506b	c8		iny				iny
.506c	b1 70		lda ($70),y			lda 	(zTemp0),y
.506e	95 52		sta $52,x			sta 	NSMantissa3,x
.5070	c8		iny				iny
.5071	b1 70		lda ($70),y			lda 	(zTemp0),y
.5073	95 5e		sta $5e,x			sta 	NSExponent,x
.5075	c8		iny				iny
.5076	b1 70		lda ($70),y			lda 	(zTemp0),y
.5078	95 22		sta $22,x			sta 	NSStatus,x
.507a	a5 70		lda $70				lda 	zTemp0
.507c	a4 71		ldy $71				ldy 	zTemp0+1
.507e	18		clc				clc
.507f	69 06		adc #$06			adc 	#6
.5081	90 01		bcc $5084			bcc 	_FPPCNoCarry
.5083	c8		iny				iny
.5084					_FPPCNoCarry:
.5084	5a		phy				phy
.5085	48		pha				pha
.5086	60		rts				rts

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library

=12					MathStackSize = 12
=$40					NSSString = $40 							; string vs typemask
=$00					NSSIFloat = $00 							; ifloat vs typemask
=$20					NSSIInt16 = $20								; when set, a reference is a 16 bit reference (e.g. a%)
=$40					NSSTypeMask = $40
=$80					NSSArray = $80  							; array (in variable code)
.0022					NSStatus:
>0022							.fill 	MathStackSize
.002e					NSMantissa0:
>002e							.fill 	MathStackSize 				; (this is my integer mantissa system)
.003a					NSMantissa1:
>003a							.fill 	MathStackSize
.0046					NSMantissa2:
>0046							.fill 	MathStackSize
.0052					NSMantissa3:
>0052							.fill 	MathStackSize
.005e					NSExponent:
>005e							.fill 	MathStackSize
.0400					numberBuffer:
>0400							.fill 	34
.5087					FloatSubtract:
.5087	b5 22		lda $22,x			lda 	NSStatus,x 					; negate top of stack
.5089	49 80		eor #$80			eor 	#$80
.508b	95 22		sta $22,x			sta 	NSStatus,x					; and fall through.
.508d					FloatAdd:
.508d	ca		dex				dex
.508e	b5 5e		lda $5e,x			lda 	NSExponent,x 				; can use optimised.
.5090	15 5f		ora $5f,x			ora 	NSExponent+1,x
.5092	15 52		ora $52,x			ora 	NSMantissa3,x
.5094	15 53		ora $53,x			ora 	NSMantissa3+1,x
.5096	d0 04		bne $509c			bne 	_FAUseFloat
.5098	20 29 54	jsr $5429			jsr 	FloatInt32Add 				; use the int32 one.
.509b	60		rts				rts
.509c					_FAUseFloat:
.509c	20 be 53	jsr $53be			jsr 	FloatNormalise 				; normalise S[X]
.509f	f0 51		beq $50f2			beq 	_FAReturn1
.50a1	e8		inx				inx 								; normalise S[X+1]
.50a2	20 be 53	jsr $53be			jsr 	FloatNormalise
.50a5	ca		dex				dex
.50a6	c9 00		cmp #$00			cmp 	#0
.50a8	f0 60		beq $510a			beq 	_FAExit 					; if so, just return A
.50aa	b5 5e		lda $5e,x			lda 	NSExponent,x 				; are the exponents the same ?
.50ac	d5 5f		cmp $5f,x			cmp 	NSExponent+1,x
.50ae	f0 18		beq $50c8			beq 	_FAExponentsEqual
.50b0	b5 5e		lda $5e,x			lda 	NSExponent,x 				; work out the larger exponent
.50b2	a8		tay				tay
.50b3	38		sec				sec 								; do a signed comparison of the exponents.
.50b4	f5 5f		sbc $5f,x			sbc 	NSExponent+1,x
.50b6	50 02		bvc $50ba			bvc 	_FANoSignedChange
.50b8	49 80		eor #$80			eor 	#$80
.50ba					_FANoSignedChange:
.50ba	29 80		and #$80			and 	#$80
.50bc	10 02		bpl $50c0			bpl 	_FAHaveMax
.50be	b4 5f		ldy $5f,x			ldy 	NSExponent+1,x
.50c0					_FAHaveMax:
.50c0	20 0b 51	jsr $510b			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.50c3	e8		inx				inx
.50c4	20 0b 51	jsr $510b			jsr 	_FAShiftToExponent
.50c7	ca		dex				dex
.50c8					_FAExponentsEqual:
.50c8	b5 22		lda $22,x			lda 	NSStatus,x 					; are the signs the same
.50ca	55 23		eor $23,x			eor 	NSStatus+1,x
.50cc	30 0e		bmi $50dc			bmi 	_FADifferentSigns
.50ce	20 f5 53	jsr $53f5			jsr 	FloatAddTopTwoStack 		; do the add of the mantissae
.50d1	b5 52		lda $52,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.50d3	10 35		bpl $510a			bpl 	_FAExit 					; if no, we are done.
.50d5	20 82 56	jsr $5682			jsr 	FloatShiftRight 				; shift A right, renormalising it.
.50d8	f6 5e		inc $5e,x			inc 	NSExponent,x 				; bump the exponent and exit
.50da	80 2e		bra $510a			bra 	_FAExit
.50dc					_FADifferentSigns:
.50dc	20 0f 54	jsr $540f			jsr 	FloatSubTopTwoStack 		; subtract mantissa B from A
.50df	b5 52		lda $52,x			lda 	NSMantissa3,x 				; is the result negative ?
.50e1	10 06		bpl $50e9			bpl 	_FACheckZero 				; if no, check for -0
.50e3	20 2b 56	jsr $562b			jsr 	FloatNegate 					; netate result
.50e6	20 32 56	jsr $5632			jsr 	FloatNegateMantissa 			; negate (2'c) the mantissa
.50e9					_FACheckZero:
.50e9	20 8b 56	jsr $568b			jsr 	FloatIsZero	 				; check for -0
.50ec	d0 1c		bne $510a			bne 	_FAExit
.50ee	74 22		stz $22,x			stz 	NSStatus,x
.50f0	80 18		bra $510a			bra 	_FAExit
.50f2					_FAReturn1:
.50f2	b5 2f		lda $2f,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.50f4	95 2e		sta $2e,x			sta 	NSMantissa0,x
.50f6	b5 3b		lda $3b,x			lda 	NSMantissa1+1,x
.50f8	95 3a		sta $3a,x			sta 	NSMantissa1,x
.50fa	b5 47		lda $47,x			lda 	NSMantissa2+1,x
.50fc	95 46		sta $46,x			sta 	NSMantissa2,x
.50fe	b5 53		lda $53,x			lda 	NSMantissa3+1,x
.5100	95 52		sta $52,x			sta 	NSMantissa3,x
.5102	b5 5f		lda $5f,x			lda 	NSExponent+1,x
.5104	95 5e		sta $5e,x			sta 	NSExponent,x
.5106	b5 23		lda $23,x			lda 	NSStatus+1,x
.5108	95 22		sta $22,x			sta 	NSStatus,x
.510a					_FAExit:
.510a	60		rts				rts
.510b					_FAShiftToExponent:
.510b					_FAShiftToExponent2:
.510b	98		tya				tya 								; compare Y to exponent
.510c	d5 5e		cmp $5e,x			cmp 	NSExponent,x 				; reached the exponent required ?
.510e	f0 07		beq $5117			beq 	_FASEExit 					; exit if so.
.5110	20 82 56	jsr $5682			jsr 	FloatShiftRight	 			; shift the mantissa right
.5113	f6 5e		inc $5e,x			inc 	NSExponent,x 				; increment exponent
.5115	80 f4		bra $510b			bra 	_FAShiftToExponent2
.5117					_FASEExit:
.5117	60		rts				rts
.5118					CompareEqual:
.5118	b5 2e		lda $2e,x			lda 	NSMantissa0,x
.511a	d0 09		bne $5125			bne 	ReturnFalse
.511c					ReturnTrue:
.511c	a9 01		lda #$01			lda 	#1
.511e	95 2e		sta $2e,x			sta 	NSMantissa0,x
.5120	a9 80		lda #$80			lda 	#$80
.5122	95 22		sta $22,x			sta 	NSStatus,x
.5124	60		rts				rts
.5125					ReturnFalse:
.5125	74 2e		stz $2e,x			stz 	NSMantissa0,x
.5127	60		rts				rts
.5128					CompareNotEqual:
.5128	b5 2e		lda $2e,x			lda 	NSMantissa0,x
.512a	d0 f0		bne $511c			bne 	ReturnTrue
.512c	80 f7		bra $5125			bra 	ReturnFalse
.512e					CompareLess:
.512e	b5 2e		lda $2e,x			lda 	NSMantissa0,x
.5130	c9 ff		cmp #$ff			cmp 	#$FF
.5132	f0 e8		beq $511c			beq 	ReturnTrue
.5134	80 ef		bra $5125			bra 	ReturnFalse
.5136					CompareGreater:
.5136	b5 2e		lda $2e,x			lda 	NSMantissa0,x
.5138	c9 01		cmp #$01			cmp 	#$01
.513a	f0 e0		beq $511c			beq 	ReturnTrue
.513c	80 e7		bra $5125			bra 	ReturnFalse
.513e					CompareLessEqual:
.513e	b5 2e		lda $2e,x			lda 	NSMantissa0,x
.5140	c9 01		cmp #$01			cmp 	#$01
.5142	d0 d8		bne $511c			bne 	ReturnTrue
.5144	80 df		bra $5125			bra 	ReturnFalse
.5146					CompareGreaterEqual:
.5146	b5 2e		lda $2e,x			lda 	NSMantissa0,x
.5148	c9 ff		cmp #$ff			cmp 	#$FF
.514a	d0 d0		bne $511c			bne 	ReturnTrue
.514c	80 d7		bra $5125			bra 	ReturnFalse
.514e					FloatCompare:
.514e	b5 5e		lda $5e,x			lda 	NSExponent,x 				; float comparison.
.5150	15 5d		ora $5d,x			ora 	NSExponent-1,x 				; integer if both integer.
.5152	48		pha				pha
.5153	20 87 50	jsr $5087			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.5156	68		pla				pla
.5157	d0 0c		bne $5165			bne 	_FCCompareFloat
.5159	b5 2e		lda $2e,x			lda 	NSMantissa0,x
.515b	15 3a		ora $3a,x			ora 	NSMantissa1,x
.515d	15 46		ora $46,x			ora 	NSMantissa2,x
.515f	15 52		ora $52,x			ora 	NSMantissa3,x
.5161	f0 14		beq $5177			beq 	_FCExit 					; if zero, return zero
.5163	80 0a		bra $516f			bra 	_FCSign
.5165					_FCCompareFloat:
.5165	b5 3a		lda $3a,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.5167	29 f0		and #$f0			and 	#$F0
.5169	15 46		ora $46,x			ora 	NSMantissa2,x
.516b	15 52		ora $52,x			ora 	NSMantissa3,x
.516d	f0 08		beq $5177			beq 	_FCExit 					; zero, so approximately identical
.516f					_FCSign:
.516f	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.5171	34 22		bit $22,x			bit 	NSStatus,x
.5173	10 02		bpl $5177			bpl 	_FCExit
.5175					_FCNegative:
.5175	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.5177					_FCExit:
.5177	20 6b 56	jsr $566b			jsr 	FloatSetByte 				; set the result 255,0,1
.517a	60		rts				rts
.517b					FloatScalarTable:
>517b	66 66 66 66				.dword $66666666 ; 0.1
>517f	de					.byte $de
>5180	1f 85 eb 51				.dword $51eb851f ; 0.01
>5184	db					.byte $db
>5185	4c 37 89 41				.dword $4189374c ; 0.001
>5189	d8					.byte $d8
>518a	ac 8b db 68				.dword $68db8bac ; 0.0001
>518e	d4					.byte $d4
>518f	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>5193	d1					.byte $d1
>5194	83 de 1b 43				.dword $431bde83 ; 1e-06
>5198	ce					.byte $ce
>5199	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>519d	ca					.byte $ca
>519e	89 3b e6 55				.dword $55e63b89 ; 1e-08
>51a2	c7					.byte $c7
>51a3	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>51a7	c4					.byte $c4
>51a8	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>51ac	c0					.byte $c0
>51ad	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>51b1	bd					.byte $bd
.51b2					FloatDivide:
.51b2	48		pha				pha
.51b3	20 be 53	jsr $53be			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.51b6	ca		dex				dex
.51b7	c9 00		cmp #$00			cmp 	#0
.51b9	f0 1e		beq $51d9			beq 	_FDZero
.51bb	20 be 53	jsr $53be			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.51be	f0 16		beq $51d6			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.51c0	20 21 52	jsr $5221			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.51c3	20 ee 51	jsr $51ee			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.51c6	20 be 53	jsr $53be			jsr		FloatNormalise 				; renormalise
.51c9	20 b4 53	jsr $53b4			jsr 	FloatCalculateSign 			; calculate result sign
.51cc	b5 5e		lda $5e,x			lda 	NSExponent,x 				; calculate exponent
.51ce	38		sec				sec
.51cf	f5 5f		sbc $5f,x			sbc 	NSExponent+1,x
.51d1	38		sec				sec
.51d2	e9 1e		sbc #$1e			sbc 	#30
.51d4	95 5e		sta $5e,x			sta 	NSExponent,x
.51d6					_FDExit:
.51d6	68		pla				pla
.51d7	18		clc				clc
.51d8	60		rts				rts
.51d9					_FDZero:
.51d9	68		pla				pla
.51da	38		sec				sec
.51db	60		rts				rts
.51dc					DivideInt32:
.51dc	20 a4 52	jsr $52a4			jsr 	FloatIntegerPart 			; make both integers
.51df	ca		dex				dex
.51e0	20 a4 52	jsr $52a4			jsr 	FloatIntegerPart
.51e3	20 ff 51	jsr $51ff			jsr 	Int32Divide 				; divide
.51e6	20 ee 51	jsr $51ee			jsr 	NSMCopyPlusTwoToZero 		; copy result
.51e9	20 b4 53	jsr $53b4			jsr 	FloatCalculateSign 			; calculate result sign
.51ec	18		clc				clc
.51ed	60		rts				rts
.51ee					NSMCopyPlusTwoToZero:
.51ee	b5 30		lda $30,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.51f0	95 2e		sta $2e,x			sta 	NSMantissa0,x
.51f2	b5 3c		lda $3c,x			lda 	NSMantissa1+2,x
.51f4	95 3a		sta $3a,x			sta 	NSMantissa1,x
.51f6	b5 48		lda $48,x			lda 	NSMantissa2+2,x
.51f8	95 46		sta $46,x			sta 	NSMantissa2,x
.51fa	b5 54		lda $54,x			lda 	NSMantissa3+2,x
.51fc	95 52		sta $52,x			sta 	NSMantissa3,x
.51fe	60		rts				rts
.51ff					Int32Divide:
.51ff	48		pha				pha 								; save AXY
.5200	5a		phy				phy
.5201	20 4c 56	jsr $564c			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.5204	20 65 56	jsr $5665			jsr 	FloatSetZeroMantissaOnly 	; set S[X] to zero
.5207	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.5209					_I32DivideLoop:
.5209	e8		inx				inx
.520a	e8		inx				inx
.520b	20 78 56	jsr $5678			jsr 	FloatShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.520e	ca		dex				dex
.520f	ca		dex				dex
.5210	20 79 56	jsr $5679			jsr 	FloatRotateLeft
.5213	20 3f 52	jsr $523f			jsr 	FloatDivideCheck 			; check if subtract possible
.5216	90 02		bcc $521a			bcc 	_I32DivideNoCarryIn
.5218	f6 30		inc $30,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.521a					_I32DivideNoCarryIn:
.521a	88		dey				dey 								; loop round till division completed.
.521b	d0 ec		bne $5209			bne 	_I32DivideLoop
.521d	7a		ply				ply 								; restore AXY and exit
.521e	68		pla				pla
.521f	18		clc				clc
.5220	60		rts				rts
.5221					Int32ShiftDivide:
.5221	48		pha				pha 								; save AY
.5222	5a		phy				phy
.5223	e8		inx				inx 								; clear S[X+2]
.5224	e8		inx				inx
.5225	20 69 56	jsr $5669			jsr 	FloatSetZero
.5228	ca		dex				dex
.5229	ca		dex				dex
.522a	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.522c					_I32SDLoop:
.522c	20 3f 52	jsr $523f			jsr 	FloatDivideCheck 			; check if subtract possible
.522f	e8		inx				inx
.5230	e8		inx				inx
.5231	20 79 56	jsr $5679			jsr 	FloatRotateLeft				; shift 64 bit FPA left, rotating carry in
.5234	ca		dex				dex
.5235	ca		dex				dex
.5236	20 79 56	jsr $5679			jsr 	FloatRotateLeft
.5239	88		dey				dey 	 							; do 31 times
.523a	d0 f0		bne $522c			bne 	_I32SDLoop
.523c	7a		ply				ply 								; restore AY and exit
.523d	68		pla				pla
.523e	60		rts				rts
.523f					FloatDivideCheck:
.523f	20 0f 54	jsr $540f			jsr 	FloatSubTopTwoStack 		; subtract Stack[X+1] from Stack[X+0]
.5242	b0 04		bcs $5248			bcs 	_DCSExit 					; if carry set, then could do, exit
.5244	20 f5 53	jsr $53f5			jsr 	FloatAddTopTwoStack 		; add it back in
.5247	18		clc				clc 								; and return False
.5248					_DCSExit:
.5248	60		rts				rts
.5249					FloatFractionalPart:
.5249	5a		phy				phy
.524a	b5 22		lda $22,x			lda 	NSStatus,x 					; take absolute value
.524c	29 7f		and #$7f			and 	#$7F
.524e	95 22		sta $22,x			sta 	NSStatus,x
.5250	20 be 53	jsr $53be			jsr 	FloatNormalise
.5253	b5 5e		lda $5e,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.5255	38		sec				sec
.5256	e9 e0		sbc #$e0			sbc 	#$E0
.5258	90 29		bcc $5283			bcc 	_FFPExit 					; already fractional
.525a	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.525c	b0 22		bcs $5280			bcs 	_FFPZero
.525e	a8		tay				tay 								; put count to do in Y
.525f	b5 52		lda $52,x			lda 	NSMantissa3,x 				; do each in turn.
.5261	20 88 52	jsr $5288			jsr 	_FFPPartial
.5264	95 52		sta $52,x			sta 	NSMantissa3,x
.5266	b5 46		lda $46,x			lda 	NSMantissa2,x
.5268	20 88 52	jsr $5288			jsr 	_FFPPartial
.526b	95 46		sta $46,x			sta 	NSMantissa2,x
.526d	b5 3a		lda $3a,x			lda 	NSMantissa1,x
.526f	20 88 52	jsr $5288			jsr 	_FFPPartial
.5272	95 3a		sta $3a,x			sta 	NSMantissa1,x
.5274	b5 2e		lda $2e,x			lda 	NSMantissa0,x
.5276	20 88 52	jsr $5288			jsr 	_FFPPartial
.5279	95 2e		sta $2e,x			sta 	NSMantissa0,x
.527b	20 8b 56	jsr $568b			jsr 	FloatIsZero 					; zeroed check.
.527e	d0 03		bne $5283			bne 	_FFPExit
.5280					_FFPZero:
.5280	20 69 56	jsr $5669			jsr 	FloatSetZero
.5283					_FFPExit:
.5283	20 be 53	jsr $53be			jsr 	FloatNormalise
.5286	7a		ply				ply
.5287	60		rts				rts
.5288					_FFPPartial:
.5288	c0 00		cpy #$00			cpy 	#0 							; no more to do
.528a	f0 17		beq $52a3			beq 	_FFFPPExit
.528c	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.528e	b0 0c		bcs $529c			bcs 	_FFFPPWholeByte
.5290	5a		phy				phy
.5291					_FFFPPLeft:
.5291	0a		asl a				asl 	a
.5292	88		dey				dey
.5293	d0 fc		bne $5291			bne 	_FFFPPLeft
.5295	7a		ply				ply
.5296					_FFFPPRight:
.5296	4a		lsr a				lsr 	a
.5297	88		dey				dey
.5298	d0 fc		bne $5296			bne 	_FFFPPRight
.529a	80 07		bra $52a3			bra 	_FFFPPExit
.529c					_FFFPPWholeByte:
.529c	98		tya				tya 								; subtract 8 from count
.529d	38		sec				sec
.529e	e9 08		sbc #$08			sbc 	#8
.52a0	a8		tay				tay
.52a1	a9 00		lda #$00			lda 	#0 							; and clear all
.52a3					_FFFPPExit:
.52a3	60		rts				rts
.52a4					FloatIntegerPart:
.52a4	48		pha				pha
.52a5	b5 5e		lda $5e,x			lda 	NSExponent,x 				; is it integer already ?
.52a7	f0 1d		beq $52c6			beq 	_FIPExit 					; if so do nothing
.52a9	20 8b 56	jsr $568b			jsr 	FloatIsZero 				; is it zero ?
.52ac	f0 15		beq $52c3			beq 	_FIPZero 					; if so return zero.
.52ae	20 be 53	jsr $53be			jsr 	FloatNormalise 				; normalise
.52b1	f0 10		beq $52c3			beq 	_FIPZero 					; normalised to zero, exit zero
.52b3					_FIPShift:
.52b3	b5 5e		lda $5e,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.52b5	10 07		bpl $52be			bpl 	_FIPCheckZero
.52b7	20 82 56	jsr $5682			jsr 	FloatShiftRight 			; shift mantissa right
.52ba	f6 5e		inc $5e,x			inc 	NSExponent,x 				; bump exponent
.52bc	80 f5		bra $52b3			bra 	_FIPShift
.52be					_FIPCheckZero:
.52be	20 8b 56	jsr $568b			jsr 	FloatIsZero 				; avoid -0 problem
.52c1	d0 03		bne $52c6			bne 	_FIPExit 					; set to zero if mantissa zero.
.52c3					_FIPZero:
.52c3	20 69 56	jsr $5669			jsr 	FloatSetZero
.52c6					_FIPExit:
.52c6	68		pla				pla
.52c7	60		rts				rts
.52c8					FloatIntegerPartDown:
.52c8	48		pha				pha
.52c9	5a		phy				phy
.52ca	b5 5e		lda $5e,x			lda 	NSExponent,x 				; is it integer already ?
.52cc	f0 36		beq $5304			beq 	_FIPExit 					; if so do nothing
.52ce	20 8b 56	jsr $568b			jsr 	FloatIsZero 				; is it zero ?
.52d1	f0 2e		beq $5301			beq 	_FIPZero 					; if so return zero.
.52d3	20 be 53	jsr $53be			jsr 	FloatNormalise 				; normalise
.52d6	f0 29		beq $5301			beq 	_FIPZero 					; normalised to zero, exit zero
.52d8	a0 00		ldy #$00			ldy 	#0 							; reset the count of bits.
.52da					_FIPShift:
.52da	b5 5e		lda $5e,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.52dc	10 0a		bpl $52e8			bpl 	_FIPCheckDown
.52de	20 82 56	jsr $5682			jsr 	FloatShiftRight 			; shift mantissa right
.52e1	90 01		bcc $52e4			bcc 	_FIPNoFrac 					; shifted a zero out ?
.52e3	c8		iny				iny
.52e4					_FIPNoFrac:
.52e4	f6 5e		inc $5e,x			inc 	NSExponent,x 				; bump exponent
.52e6	80 f2		bra $52da			bra 	_FIPShift
.52e8					_FIPCheckDown:
.52e8	c0 00		cpy #$00			cpy 	#0 							; were there any fractional bits.
.52ea	f0 10		beq $52fc			beq 	_FIPCheckZero
.52ec	34 22		bit $22,x			bit 	NSStatus,x 					; +ve
.52ee	10 0c		bpl $52fc			bpl 	_FIPCheckZero
.52f0	e8		inx				inx 								; -ve so round *down*.
.52f1	a9 01		lda #$01			lda 	#1
.52f3	20 6b 56	jsr $566b			jsr 	FloatSetByte
.52f6	20 2b 56	jsr $562b			jsr 	FloatNegate
.52f9	20 8d 50	jsr $508d			jsr 	FloatAdd
.52fc					_FIPCheckZero:
.52fc	20 8b 56	jsr $568b			jsr 	FloatIsZero 				; avoid -0 problem
.52ff	d0 03		bne $5304			bne 	_FIPExit 					; set to zero if mantissa zero.
.5301					_FIPZero:
.5301	20 69 56	jsr $5669			jsr 	FloatSetZero
.5304					_FIPExit:
.5304	7a		ply				ply
.5305	68		pla				pla
.5306	60		rts				rts
.5307					FloatInt8Multiply:
.5307	5a		phy				phy
.5308	b5 2e		lda $2e,x			lda 	NSMantissa0,x 				; right shifted multiplier in Y
.530a	a8		tay				tay
.530b	74 2e		stz $2e,x			stz 	NSMantissa0,x 				; zero the result (already 8 bit constant)
.530d					_FI8MLoop:
.530d	98		tya				tya 								; shift right shifter right into carry
.530e	4a		lsr a				lsr 	a
.530f	a8		tay				tay
.5310	90 0d		bcc $531f			bcc 	_FI8MNoAdd
.5312	18		clc				clc
.5313	b5 2e		lda $2e,x			lda 	NSMantissa0,x
.5315	75 2f		adc $2f,x			adc 	NSMantissa0+1,x
.5317	95 2e		sta $2e,x			sta 	NSMantissa0,x
.5319	b5 3a		lda $3a,x			lda 	NSMantissa1,x
.531b	75 3b		adc $3b,x			adc 	NSMantissa1+1,x
.531d	95 3a		sta $3a,x			sta 	NSMantissa1,x
.531f					_FI8MNoAdd:
.531f	16 2f		asl $2f,x			asl 	NSMantissa0+1,x 			; shift adder left
.5321	36 3b		rol $3b,x			rol 	NSMantissa1+1,x
.5323	c0 00		cpy #$00			cpy 	#0
.5325	d0 e6		bne $530d			bne 	_FI8MLoop 					; until right shifter zero.
.5327	7a		ply				ply
.5328	60		rts				rts
.5329					FloatMultiply:
.5329	ca		dex				dex
.532a	b5 5e		lda $5e,x			lda 	NSExponent,x 				; can use optimised ?
.532c	15 5f		ora $5f,x			ora 	NSExponent+1,x
.532e	15 52		ora $52,x			ora 	NSMantissa3,x
.5330	15 53		ora $53,x			ora 	NSMantissa3+1,x
.5332	d0 21		bne $5355			bne 	_FMUseFloat
.5334	b5 22		lda $22,x			lda 	NSStatus,x 					; check if it is 8 bit unsigned
.5336	15 23		ora $23,x			ora 	NSStatus+1,x
.5338	29 80		and #$80			and 	#$80
.533a	15 52		ora $52,x			ora 	NSMantissa3,x
.533c	15 46		ora $46,x			ora 	NSMantissa2,x
.533e	15 3a		ora $3a,x			ora 	NSMantissa1,x
.5340	15 53		ora $53,x			ora 	NSMantissa3+1,x
.5342	15 47		ora $47,x			ora 	NSMantissa2+1,x
.5344	15 3b		ora $3b,x			ora 	NSMantissa1+1,x
.5346	d0 04		bne $534c			bne 	_FMInt32
.5348	20 07 53	jsr $5307			jsr 	FloatInt8Multiply 			; use fast 8x8 multiply.
.534b	60		rts				rts
.534c					_FMInt32:
.534c	20 76 53	jsr $5376			jsr 	FloatMultiplyShort			; use the int32 one.
.534f	18		clc				clc 								; fix it up if gone out of range
.5350	75 5e		adc $5e,x			adc 	NSExponent,x
.5352	95 5e		sta $5e,x			sta 	NSExponent,x
.5354	60		rts				rts
.5355					_FMUseFloat:
.5355	20 be 53	jsr $53be			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.5358	f0 18		beq $5372			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.535a	e8		inx				inx
.535b	20 be 53	jsr $53be			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.535e	ca		dex				dex
.535f	c9 00		cmp #$00			cmp 	#0
.5361	f0 0c		beq $536f			beq 	_FDSetZero
.5363	20 76 53	jsr $5376			jsr 	FloatMultiplyShort 			; calculate the result.
.5366	75 5e		adc $5e,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.5368	18		clc				clc
.5369	75 5f		adc $5f,x			adc 	NSExponent+1,x
.536b	95 5e		sta $5e,x			sta 	NSExponent,x
.536d	80 03		bra $5372			bra 	_FDExit
.536f					_FDSetZero:
.536f	20 69 56	jsr $5669			jsr 	FloatSetZero 				; return 0
.5372					_FDExit:
.5372	20 be 53	jsr $53be			jsr 	FloatNormalise 				; normalise the result
.5375	60		rts				rts
.5376					FloatMultiplyShort:
.5376	5a		phy				phy 								; save Y
.5377	20 4c 56	jsr $564c			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.537a	20 65 56	jsr $5665			jsr 	FloatSetZeroMantissaOnly 	; set mantissa S[X] to zero
.537d	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.537f					_I32MLoop:
.537f	b5 30		lda $30,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.5381	15 3c		ora $3c,x			ora 	NSMantissa1+2,x
.5383	15 48		ora $48,x			ora 	NSMantissa2+2,x
.5385	15 54		ora $54,x			ora 	NSMantissa3+2,x
.5387	f0 25		beq $53ae			beq 	_I32MExit 					; exit if zero
.5389	b5 30		lda $30,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.538b	29 01		and #$01			and 	#1
.538d	f0 0d		beq $539c			beq 	_I32MNoAdd
.538f	20 f5 53	jsr $53f5			jsr 	FloatAddTopTwoStack 		; if so add S[X+1] to S[X+0]
.5392	b5 52		lda $52,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.5394	10 06		bpl $539c			bpl 	_I32MNoAdd
.5396					_I32ShiftRight:
.5396	20 82 56	jsr $5682			jsr 	FloatShiftRight 			; shift S[X] right
.5399	c8		iny				iny 								; increment shift count
.539a	80 09		bra $53a5			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.539c					_I32MNoAdd:
.539c	34 53		bit $53,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.539e	70 f6		bvs $5396			bvs 	_I32ShiftRight 				; instead.
.53a0	e8		inx				inx
.53a1	20 78 56	jsr $5678			jsr 	FloatShiftLeft 				; shift additive S[X+1] left
.53a4	ca		dex				dex
.53a5					_I32MShiftUpper:
.53a5	e8		inx				inx 								; shift S[X+2] right
.53a6	e8		inx				inx
.53a7	20 82 56	jsr $5682			jsr 	FloatShiftRight
.53aa	ca		dex				dex
.53ab	ca		dex				dex
.53ac	80 d1		bra $537f			bra 	_I32MLoop 					; try again.
.53ae					_I32MExit:
.53ae	20 b4 53	jsr $53b4			jsr 	FloatCalculateSign
.53b1	98		tya				tya 								; shift in A
.53b2	7a		ply				ply 								; restore Y and exit
.53b3	60		rts				rts
.53b4					FloatCalculateSign:
.53b4	b5 22		lda $22,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.53b6	16 22		asl $22,x			asl 	NSStatus,x 					; shift result left
.53b8	55 23		eor $23,x			eor 	NSStatus+1,x
.53ba	0a		asl a				asl 	a 							; shift bit 7 into carry
.53bb	76 22		ror $22,x			ror 	NSStatus,x 					; shift right into status byte.
.53bd	60		rts				rts
.53be					FloatNormalise:
.53be	20 8b 56	jsr $568b			jsr 	FloatIsZero 				; if zero exit
.53c1	d0 07		bne $53ca			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.53c3	16 22		asl $22,x			asl 	NSStatus,x 					; clear the sign bit.
.53c5	76 22		ror $22,x			ror 	NSStatus,x 					; (no -0)
.53c7	a9 00		lda #$00			lda 	#0 							; set Z flag
.53c9	60		rts				rts
.53ca					_NSNormaliseOptimise:
.53ca	b5 52		lda $52,x			lda 	NSMantissa3,x 				; upper byte zero ?
.53cc	d0 19		bne $53e7			bne 	_NSNormaliseLoop
.53ce	b5 46		lda $46,x			lda 	NSMantissa2,x 				; byte normalise
.53d0	30 15		bmi $53e7			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.53d2	95 52		sta $52,x			sta 	NSMantissa3,x
.53d4	b5 3a		lda $3a,x			lda 	NSMantissa1,x
.53d6	95 46		sta $46,x			sta 	NSMantissa2,x
.53d8	b5 2e		lda $2e,x			lda 	NSMantissa0,x
.53da	95 3a		sta $3a,x			sta 	NSMantissa1,x
.53dc	74 2e		stz $2e,x			stz 	NSMantissa0,x
.53de	b5 5e		lda $5e,x			lda 	NSExponent,x
.53e0	38		sec				sec
.53e1	e9 08		sbc #$08			sbc 	#8
.53e3	95 5e		sta $5e,x			sta 	NSExponent,x
.53e5	80 e3		bra $53ca			bra 	_NSNormaliseOptimise
.53e7					_NSNormaliseLoop:
.53e7	34 52		bit $52,x			bit 	NSMantissa3,x 				; bit 30 set ?
.53e9	70 07		bvs $53f2			bvs 	_NSNExit 					; exit if so with Z flag clear
.53eb	20 78 56	jsr $5678			jsr 	FloatShiftLeft 				; shift mantissa left
.53ee	d6 5e		dec $5e,x			dec 	NSExponent,x 				; adjust exponent
.53f0	80 f5		bra $53e7			bra 	_NSNormaliseLoop
.53f2					_NSNExit:
.53f2	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.53f4	60		rts				rts
.53f5					FloatAddTopTwoStack:
.53f5	18		clc				clc
.53f6	b5 2e		lda $2e,x			lda		NSMantissa0,x
.53f8	75 2f		adc $2f,x			adc 		NSMantissa0+1,x
.53fa	95 2e		sta $2e,x			sta 	NSMantissa0,x
.53fc	b5 3a		lda $3a,x			lda		NSMantissa1,x
.53fe	75 3b		adc $3b,x			adc 		NSMantissa1+1,x
.5400	95 3a		sta $3a,x			sta 	NSMantissa1,x
.5402	b5 46		lda $46,x			lda		NSMantissa2,x
.5404	75 47		adc $47,x			adc 		NSMantissa2+1,x
.5406	95 46		sta $46,x			sta 	NSMantissa2,x
.5408	b5 52		lda $52,x			lda		NSMantissa3,x
.540a	75 53		adc $53,x			adc 		NSMantissa3+1,x
.540c	95 52		sta $52,x			sta 	NSMantissa3,x
.540e	60		rts				rts
.540f					FloatSubTopTwoStack:
.540f	38		sec				sec
.5410	b5 2e		lda $2e,x			lda		NSMantissa0,x
.5412	f5 2f		sbc $2f,x			sbc 		NSMantissa0+1,x
.5414	95 2e		sta $2e,x			sta 	NSMantissa0,x
.5416	b5 3a		lda $3a,x			lda		NSMantissa1,x
.5418	f5 3b		sbc $3b,x			sbc 		NSMantissa1+1,x
.541a	95 3a		sta $3a,x			sta 	NSMantissa1,x
.541c	b5 46		lda $46,x			lda		NSMantissa2,x
.541e	f5 47		sbc $47,x			sbc 		NSMantissa2+1,x
.5420	95 46		sta $46,x			sta 	NSMantissa2,x
.5422	b5 52		lda $52,x			lda		NSMantissa3,x
.5424	f5 53		sbc $53,x			sbc 		NSMantissa3+1,x
.5426	95 52		sta $52,x			sta 	NSMantissa3,x
.5428	60		rts				rts
.5429					FloatInt32Add:
.5429	b5 22		lda $22,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.542b	55 23		eor $23,x			eor 	NSStatus+1,x
.542d	30 04		bmi $5433			bmi 	_DiffSigns
.542f	20 f5 53	jsr $53f5			jsr		FloatAddTopTwoStack
.5432	60		rts				rts
.5433					_DiffSigns:
.5433	20 0f 54	jsr $540f			jsr 	FloatSubTopTwoStack 		; do a physical subtraction
.5436	34 52		bit $52,x			bit 	NSMantissa3,x 				; result is +ve, okay
.5438	10 07		bpl $5441			bpl 	_AddExit
.543a	b5 23		lda $23,x			lda 	NSStatus+1,x 				; sign is that of 11th value
.543c	95 22		sta $22,x			sta 	NSStatus,x
.543e	20 32 56	jsr $5632			jsr 	FloatNegateMantissa 		; negate the mantissa and exit
.5441					_AddExit:
.5441	20 8b 56	jsr $568b			jsr 	FloatIsZero 				; check for -0
.5444	d0 02		bne $5448			bne 	_AddNonZero
.5446	74 22		stz $22,x			stz 	NSStatus,x
.5448					_AddNonZero:
.5448	60		rts				rts
=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.5449					FloatEncodeStart:
.5449	38		sec				sec
.544a	80 01		bra $544d			bra 	FloatEncodeContinue+1
.544c					FloatEncodeContinue:
.544c	18		clc				clc
.544d					FloatEncode:
.544d	08		php				php 								; save reset flag.
.544e	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.5450	f0 15		beq $5467			beq 	_ENIsOkay
.5452	c9 30		cmp #$30			cmp 	#"0"
.5454	90 04		bcc $545a			bcc 	_ENBadNumber
.5456	c9 3a		cmp #$3a			cmp 	#"9"+1
.5458	90 0d		bcc $5467			bcc 	_ENIsOkay
.545a					_ENBadNumber:
.545a	28		plp				plp 								; throw saved reset
.545b	ad 22 04	lda $0422			lda 	encodeState 				; if in decimal mode, construct final number
.545e	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.5460	d0 03		bne $5465			bne 	_ENFail
.5462	4c df 54	jmp $54df			jmp 	_ENConstructFinal
.5465					_ENFail:
.5465	18		clc				clc 								; not allowed
.5466	60		rts				rts
.5467					_ENIsOkay:
.5467	28		plp				plp 								; are we restarting
.5468	90 15		bcc $547f			bcc 	_ENNoRestart
.546a					_ENStartEncode:
.546a	c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.546c	f0 0c		beq $547a			beq 	_ENFirstDP
.546e	29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.5470	20 6b 56	jsr $566b			jsr 	FloatSetByte 				; in single byte mode.
.5473	a9 01		lda #$01			lda 	#ESTA_Low
.5475					_ENExitChange:
.5475	8d 22 04	sta $0422			sta 	encodeState 				; save new state
.5478	38		sec				sec
.5479	60		rts				rts
.547a					_ENFirstDP:
.547a	20 69 56	jsr $5669			jsr 	FloatSetZero 				; clear integer part
.547d	80 3c		bra $54bb			bra 	_ESTASwitchFloat			; go straight to float and exi
.547f					_ENNoRestart:
.547f	48		pha				pha 								; save digit or DP on stack.
.5480	ad 22 04	lda $0422			lda 	encodeState 				; get current state
.5483	c9 01		cmp #$01			cmp 	#ESTA_Low
.5485	f0 09		beq $5490			beq  	_ESTALowState
.5487	c9 02		cmp #$02			cmp 	#ESTA_High
.5489	f0 26		beq $54b1			beq 	_ESTAHighState
.548b	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.548d	f0 38		beq $54c7			beq 	_ESTADecimalState
>548f	db						.byte 	$DB 						; causes a break in the emulator
.5490					_ESTALowState:
.5490	68		pla				pla 								; get value back
.5491	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.5493	f0 26		beq $54bb			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.5495	29 0f		and #$0f			and 	#15 						; make digit
.5497	8d 23 04	sta $0423			sta 	digitTemp 					; save it.
.549a	b5 2e		lda $2e,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.549c	0a		asl a				asl 	a
.549d	0a		asl a				asl 	a
.549e	75 2e		adc $2e,x			adc 	NSMantissa0,x
.54a0	0a		asl a				asl 	a
.54a1	6d 23 04	adc $0423			adc 	digitTemp
.54a4	95 2e		sta $2e,x			sta 	NSMantissa0,x
.54a6	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.54a8	90 05		bcc $54af			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.54aa	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.54ac	8d 22 04	sta $0422			sta 	encodeState
.54af					_ESTANoSwitch:
.54af	38		sec				sec
.54b0	60		rts				rts
.54b1					_ESTAHighState:
.54b1	68		pla				pla 								; get value back
.54b2	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.54b4	f0 05		beq $54bb			beq 	_ESTASwitchFloat
.54b6	20 11 55	jsr $5511			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.54b9	38		sec				sec
.54ba	60		rts				rts
.54bb					_ESTASwitchFloat:
.54bb	9c 24 04	stz $0424			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.54be	e8		inx				inx 								; zero the decimal additive.
.54bf	20 69 56	jsr $5669			jsr 	FloatSetZero
.54c2	ca		dex				dex
.54c3	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.54c5	80 ae		bra $5475			bra 	_ENExitChange
.54c7					_ESTADecimalState:
.54c7	68		pla				pla 								; digit.
.54c8	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 11th decimal point.
.54ca	f0 99		beq $5465			beq 	_ENFail
.54cc	e8		inx				inx 								; put digit into fractional part of X+1
.54cd	20 11 55	jsr $5511			jsr 	ESTAShiftDigitIntoMantissa
.54d0	ca		dex				dex
.54d1	ee 24 04	inc $0424			inc 	decimalCount 				; bump the count of decimals
.54d4	ad 24 04	lda $0424			lda 	decimalCount 				; too many decimal digits.
.54d7	c9 0b		cmp #$0b			cmp 	#11
.54d9	f0 02		beq $54dd			beq 	_ESTADSFail
.54db	38		sec				sec
.54dc	60		rts				rts
.54dd					_ESTADSFail:
.54dd	18		clc				clc
.54de	60		rts				rts
.54df					_ENConstructFinal:
.54df	ad 24 04	lda $0424			lda 	decimalCount 				; get decimal count
.54e2	f0 2b		beq $550f			beq 	_ENCFExit 					; no decimals
.54e4	5a		phy				phy
.54e5	0a		asl a				asl 	a 							; x 4 and CLC
.54e6	0a		asl a				asl 	a
.54e7	6d 24 04	adc $0424			adc 	decimalCount
.54ea	a8		tay				tay
.54eb	b9 76 51	lda $5176,y			lda 	FloatScalarTable-5,y 		; copy decimal scalar to X+2
.54ee	95 30		sta $30,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.54f0	b9 77 51	lda $5177,y			lda 	FloatScalarTable-5+1,y
.54f3	95 3c		sta $3c,x			sta 	NSMantissa1+2,x
.54f5	b9 78 51	lda $5178,y			lda 	FloatScalarTable-5+2,y
.54f8	95 48		sta $48,x			sta 	NSMantissa2+2,x
.54fa	b9 79 51	lda $5179,y			lda 	FloatScalarTable-5+3,y
.54fd	95 54		sta $54,x			sta 	NSMantissa3+2,x
.54ff	b9 7a 51	lda $517a,y			lda 	FloatScalarTable-5+4,y
.5502	95 60		sta $60,x			sta 	NSExponent+2,x
.5504	74 24		stz $24,x			stz 	NSStatus+2,x 				; make +ve
.5506	e8		inx				inx 								; multiply decimal const by decimal scalar
.5507	e8		inx				inx
.5508	20 29 53	jsr $5329			jsr 	FloatMultiply
.550b	20 8d 50	jsr $508d			jsr 	FloatAdd 					; add to integer part.
.550e	7a		ply				ply
.550f					_ENCFExit:
.550f	18		clc				clc 								; reject the digit.
.5510	60		rts				rts
.5511					ESTAShiftDigitIntoMantissa:
.5511	29 0f		and #$0f			and 	#15 						; save digit
.5513	48		pha				pha
.5514	b5 52		lda $52,x			lda 	NSMantissa3,x 				; push mantissa on stack
.5516	48		pha				pha
.5517	b5 46		lda $46,x			lda 	NSMantissa2,x
.5519	48		pha				pha
.551a	b5 3a		lda $3a,x			lda 	NSMantissa1,x
.551c	48		pha				pha
.551d	b5 2e		lda $2e,x			lda 	NSMantissa0,x
.551f	48		pha				pha
.5520	20 78 56	jsr $5678			jsr 	FloatShiftLeft 				; x 2
.5523	20 78 56	jsr $5678			jsr 	FloatShiftLeft 				; x 4
.5526	18		clc				clc 								; pop mantissa and add
.5527	68		pla				pla
.5528	75 2e		adc $2e,x			adc 	NSMantissa0,x
.552a	95 2e		sta $2e,x			sta 	NSMantissa0,x
.552c	68		pla				pla
.552d	75 3a		adc $3a,x			adc 	NSMantissa1,x
.552f	95 3a		sta $3a,x			sta 	NSMantissa1,x
.5531	68		pla				pla
.5532	75 46		adc $46,x			adc 	NSMantissa2,x
.5534	95 46		sta $46,x			sta 	NSMantissa2,x
.5536	68		pla				pla
.5537	75 52		adc $52,x			adc 	NSMantissa3,x
.5539	95 52		sta $52,x			sta 	NSMantissa3,x 				; x 5
.553b	20 78 56	jsr $5678			jsr 	FloatShiftLeft 				; x 10
.553e	68		pla				pla 								; add digit
.553f	18		clc				clc
.5540	75 2e		adc $2e,x			adc 	NSMantissa0,x
.5542	95 2e		sta $2e,x			sta 	NSMantissa0,x
.5544	90 0a		bcc $5550			bcc 	_ESTASDExit
.5546	f6 3a		inc $3a,x			inc 	NSMantissa1,x
.5548	d0 06		bne $5550			bne 	_ESTASDExit
.554a	f6 46		inc $46,x			inc 	NSMantissa2,x
.554c	d0 02		bne $5550			bne 	_ESTASDExit
.554e	f6 52		inc $52,x			inc 	NSMantissa3,x
.5550					_ESTASDExit:
.5550	60		rts				rts
.0422					encodeState:
>0422							.fill 	1
.0423					digitTemp:
>0423							.fill 	1
.0424					decimalCount:
>0424							.fill 	1
.5551					FloatToString:
.5551	da		phx				phx
.5552	5a		phy				phy 								; save code position
.5553	8d 25 04	sta $0425			sta 	decimalPlaces	 			; save number of DPs.
.5556	9c 26 04	stz $0426			stz 	dbOffset 					; offset into decimal buffer = start.
.5559	b5 22		lda $22,x			lda 	NSStatus,x  				; is it -ve.
.555b	10 08		bpl $5565			bpl 	_CNTSNotNegative
.555d	29 7f		and #$7f			and 	#$7F 						; make +ve
.555f	95 22		sta $22,x			sta 	NSStatus,x
.5561	a9 2d		lda #$2d			lda 	#"-"
.5563	80 02		bra $5567			bra 	_CNTMain
.5565					_CNTSNotNegative:
.5565	a9 20		lda #$20			lda 	#" "
.5567					_CNTMain:
.5567	20 c9 55	jsr $55c9			jsr 	WriteDecimalBuffer
.556a	b5 5e		lda $5e,x			lda 	NSExponent,x 				; check if decimal
.556c	f0 0d		beq $557b			beq 	_CNTSNotFloat
.556e	e8		inx				inx 								; round up so we don't get too many 6.999999
.556f	a9 01		lda #$01			lda 	#1
.5571	20 6b 56	jsr $566b			jsr 	FloatSetByte
.5574	b5 5d		lda $5d,x			lda		NSExponent-1,x
.5576	95 5e		sta $5e,x			sta 	NSExponent,x
.5578	20 8d 50	jsr $508d			jsr 	FloatAdd
.557b					_CNTSNotFloat:
.557b	20 ab 55	jsr $55ab			jsr 	MakePlusTwoString 			; do the integer part.
.557e	20 49 52	jsr $5249			jsr 	FloatFractionalPart 		; get the fractional part
.5581	20 be 53	jsr $53be			jsr 	FloatNormalise					; normalise , exit if zero
.5584	f0 22		beq $55a8			beq 	_CNTSExit
.5586	a9 2e		lda #$2e			lda 	#"."
.5588	20 c9 55	jsr $55c9			jsr 	WriteDecimalBuffer 			; write decimal place
.558b					_CNTSDecimal:
.558b	ce 25 04	dec $0425			dec 	decimalPlaces 				; done all the decimals
.558e	30 18		bmi $55a8			bmi 	_CNTSExit
.5590	e8		inx				inx 								; x 10.0
.5591	a9 0a		lda #$0a			lda 	#10
.5593	20 6b 56	jsr $566b			jsr 	FloatSetByte
.5596	20 29 53	jsr $5329			jsr 	FloatMultiply
.5599	20 ab 55	jsr $55ab			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.559c	20 49 52	jsr $5249			jsr 	FloatFractionalPart 		; get the fractional part
.559f	20 be 53	jsr $53be			jsr 	FloatNormalise 				; normalise it.
.55a2	b5 5e		lda $5e,x			lda 	NSExponent,x 				; gone to zero, exit.
.55a4	c9 d0		cmp #$d0			cmp 	#$D0 						; very small remainder, so don't bother.
.55a6	b0 e3		bcs $558b			bcs 	_CNTSDecimal 				; keep going.
.55a8					_CNTSExit:
.55a8	7a		ply				ply
.55a9	fa		plx				plx
.55aa	60		rts				rts
.55ab					MakePlusTwoString:
.55ab	da		phx				phx
.55ac	20 4c 56	jsr $564c			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.55af	e8		inx				inx 								; access it
.55b0	e8		inx				inx
.55b1	20 a4 52	jsr $52a4			jsr 	FloatIntegerPart 			; make it an integer
.55b4	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.55b6	20 e8 55	jsr $55e8			jsr 	ConvertInt32
.55b9	a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.55bb					_MPTSCopy:
.55bb	bd 00 04	lda $0400,x			lda 	numberBuffer,x
.55be	20 c9 55	jsr $55c9			jsr 	WriteDecimalBuffer
.55c1	e8		inx				inx
.55c2	bd 00 04	lda $0400,x			lda 	numberBuffer,x
.55c5	d0 f4		bne $55bb			bne 	_MPTSCopy
.55c7	fa		plx				plx
.55c8	60		rts				rts
.55c9					WriteDecimalBuffer:
.55c9	da		phx				phx
.55ca	ae 26 04	ldx $0426			ldx 	dbOffset
.55cd	9d 27 04	sta $0427,x			sta 	decimalBuffer,x
.55d0	9e 28 04	stz $0428,x			stz 	decimalBuffer+1,x
.55d3	ee 26 04	inc $0426			inc 	dbOffset
.55d6	fa		plx				plx
.55d7	60		rts				rts
.0425					decimalPlaces:
>0425							.fill 	1
.0426					dbOffset:
>0426							.fill 	1
.0427					decimalBuffer:
>0427							.fill 	32
.55d8					ConvertInt16:
.55d8	85 2e		sta $2e				sta 	NSMantissa0 				; set up as 32 bit conversion
.55da	86 3a		stx $3a				stx 	NSMantissa1
.55dc	64 46		stz $46				stz 	NSMantissa2
.55de	64 52		stz $52				stz 	NSMantissa3
.55e0	64 22		stz $22				stz 	NSStatus 					; positive integer
.55e2	a2 00		ldx #$00			ldx 	#0 							; stack level
.55e4	a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.55e6	80 00		bra $55e8			bra 	ConvertInt32
.55e8					ConvertInt32:
.55e8	5a		phy				phy
.55e9	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.55eb	24 22		bit $22				bit 	NSStatus 					; output a - if not negative.
.55ed	10 08		bpl $55f7			bpl 	_CI32NotNeg
.55ef	48		pha				pha
.55f0	a9 2d		lda #$2d			lda 	#'-'
.55f2	99 00 04	sta $0400,y			sta 	numberBuffer,y
.55f5	c8		iny				iny
.55f6	68		pla				pla
.55f7					_CI32NotNeg:
.55f7	20 05 56	jsr $5605			jsr 	_CI32DivideConvert 			; recursive conversion
.55fa	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.55fc	99 00 04	sta $0400,y			sta 	numberBuffer,y
.55ff	7a		ply				ply
.5600	a2 04		ldx #$04			ldx 	#numberBuffer >> 8 			; return address in XA
.5602	a9 00		lda #$00			lda 	#numberBuffer & $FF
.5604	60		rts				rts
.5605					_CI32DivideConvert:
.5605	e8		inx				inx 								; write to next slot up
.5606	20 6b 56	jsr $566b			jsr 	FloatSetByte 		 		; write the base out.
.5609	ca		dex				dex
.560a	20 ff 51	jsr $51ff			jsr 	Int32Divide 				; divide
.560d	b5 2e		lda $2e,x			lda 	NSMantissa0,x 				; save remainder
.560f	48		pha				pha
.5610	20 ee 51	jsr $51ee			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.5613	20 8b 56	jsr $568b			jsr 	FloatIsZero 				; is it zero ?
.5616	f0 05		beq $561d			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.5618	b5 2f		lda $2f,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.561a	20 05 56	jsr $5605			jsr 	_CI32DivideConvert 			; and recusrively call.
.561d					_CI32NoRecurse:
.561d	68		pla				pla 								; remainder
.561e	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.5620	90 02		bcc $5624			bcc 	_CI32NotHex
.5622	69 26		adc #$26			adc 	#6+32
.5624					_CI32NotHex:
.5624	69 30		adc #$30			adc 	#48
.5626	99 00 04	sta $0400,y			sta 	numberBuffer,y 				; write out and exit
.5629	c8		iny				iny
.562a	60		rts				rts
.562b					FloatNegate:
.562b	b5 22		lda $22,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.562d	49 80		eor #$80			eor 	#$80  						; toggle the negative flag
.562f	95 22		sta $22,x			sta 	NSStatus,x
.5631	60		rts				rts
.5632					FloatNegateMantissa:
.5632	38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.5633	a9 00		lda #$00			lda 	#0
.5635	f5 2e		sbc $2e,x			sbc 	NSMantissa0,x
.5637	95 2e		sta $2e,x			sta 	NSMantissa0,x
.5639	a9 00		lda #$00			lda 	#0
.563b	f5 3a		sbc $3a,x			sbc 	NSMantissa1,x
.563d	95 3a		sta $3a,x			sta 	NSMantissa1,x
.563f	a9 00		lda #$00			lda 	#0
.5641	f5 46		sbc $46,x			sbc 	NSMantissa2,x
.5643	95 46		sta $46,x			sta 	NSMantissa2,x
.5645	a9 00		lda #$00			lda 	#0
.5647	f5 52		sbc $52,x			sbc 	NSMantissa3,x
.5649	95 52		sta $52,x			sta 	NSMantissa3,x
.564b	60		rts				rts
.564c					FloatShiftUpTwo:
.564c	b5 2e		lda $2e,x			lda 	NSMantissa0,x
.564e	95 30		sta $30,x			sta 	NSMantissa0+2,x
.5650	b5 3a		lda $3a,x			lda 	NSMantissa1,x
.5652	95 3c		sta $3c,x			sta 	NSMantissa1+2,x
.5654	b5 46		lda $46,x			lda 	NSMantissa2,x
.5656	95 48		sta $48,x			sta 	NSMantissa2+2,x
.5658	b5 52		lda $52,x			lda 	NSMantissa3,x
.565a	95 54		sta $54,x			sta 	NSMantissa3+2,x
.565c	b5 5e		lda $5e,x			lda 	NSExponent,x
.565e	95 60		sta $60,x			sta 	NSExponent+2,x
.5660	b5 22		lda $22,x			lda 	NSStatus,x
.5662	95 24		sta $24,x			sta 	NSStatus+2,x
.5664	60		rts				rts
.5665					FloatSetZeroMantissaOnly:
.5665	74 2e		stz $2e,x			stz 	NSMantissa0,x
.5667	80 08		bra $5671			bra 	FloatZero13
.5669					FloatSetZero:
.5669	a9 00		lda #$00			lda 	#0
.566b					FloatSetByte:
.566b	74 5e		stz $5e,x			stz 	NSExponent,x 				; zero exponent, as +ve integer value.
.566d					FloatSetMantissa:
.566d	95 2e		sta $2e,x			sta 	NSMantissa0,x 				; zero mantissa
.566f	74 22		stz $22,x			stz 	NSStatus,x
.5671					FloatZero13:
.5671	74 3a		stz $3a,x			stz 	NSMantissa1,x
.5673	74 46		stz $46,x			stz 	NSMantissa2,x
.5675	74 52		stz $52,x			stz 	NSMantissa3,x
.5677	60		rts				rts
.5678					FloatShiftLeft:
.5678	18		clc				clc
.5679					FloatRotateLeft:
.5679	36 2e		rol $2e,x			rol 	NSMantissa0,x
.567b	36 3a		rol $3a,x			rol		NSMantissa1,x
.567d	36 46		rol $46,x			rol		NSMantissa2,x
.567f	36 52		rol $52,x			rol		NSMantissa3,x
.5681	60		rts				rts
.5682					FloatShiftRight:
.5682	56 52		lsr $52,x			lsr 	NSMantissa3,x
.5684	76 46		ror $46,x			ror		NSMantissa2,x
.5686	76 3a		ror $3a,x			ror		NSMantissa1,x
.5688	76 2e		ror $2e,x			ror		NSMantissa0,x
.568a	60		rts				rts
.568b					FloatIsZero:
.568b	b5 52		lda $52,x			lda 	NSMantissa3,x
.568d	15 46		ora $46,x			ora		NSMantissa2,x
.568f	15 3a		ora $3a,x			ora		NSMantissa1,x
.5691	15 2e		ora $2e,x			ora		NSMantissa0,x
.5693	60		rts				rts

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/polynomials.library

.5694					FloatArcTan:
.5694	20 be 53	jsr $53be			jsr 	FloatNormalise 					; normalise x
.5697	b5 22		lda $22,x			lda 	NSStatus,x 						; save sign, make absolute
.5699	48		pha				pha
.569a	74 22		stz $22,x			stz 	NSStatus,x
.569c	b5 5e		lda $5e,x			lda 	NSExponent,x 					; $40000000 ^ $E2 is 1.0
.569e	c9 e2		cmp #$e2			cmp 	#$E2
.56a0	90 25		bcc $56c7			bcc 	_UANoFixup
.56a2	8a		txa				txa 									; value in +1
.56a3	a8		tay				tay
.56a4	c8		iny				iny
.56a5	20 4d 58	jsr $584d			jsr 	CopyFloatXY
.56a8	a9 01		lda #$01			lda 	#1 								; 1.0 in +0
.56aa	20 6b 56	jsr $566b			jsr 	FloatSetByte
.56ad	e8		inx				inx
.56ae	20 b2 51	jsr $51b2			jsr 	FloatDivide
.56b1	b0 21		bcs $56d4			bcs 	_FATError
.56b3	20 d7 56	jsr $56d7			jsr 	CoreAtn 						; calculate the root
.56b6	20 42 58	jsr $5842			jsr 	CompletePolynomial
.56b9	20 2b 56	jsr $562b			jsr 	FloatNegate 					; make -ve
.56bc	a9 05		lda #$05			lda 	#Const_PiDiv2-Const_Base
.56be	20 99 58	jsr $5899			jsr 	LoadConstant
.56c1	e8		inx				inx
.56c2	20 8d 50	jsr $508d			jsr 	FloatAdd
.56c5	80 06		bra $56cd			bra 	_UAComplete
.56c7					_UANoFixup:
.56c7	20 d7 56	jsr $56d7			jsr 	CoreAtn
.56ca	20 42 58	jsr $5842			jsr 	CompletePolynomial
.56cd					_UAComplete:
.56cd	68		pla				pla 									; apply the result.
.56ce	55 22		eor $22,x			eor 	NSStatus,x
.56d0	95 22		sta $22,x			sta 	NSStatus,x
.56d2	18		clc				clc
.56d3	60		rts				rts
.56d4					_FATError:
.56d4	68		pla				pla
.56d5	38		sec				sec
.56d6	60		rts				rts
.56d7					CoreAtn:
.56d7	a9 45		lda #$45			lda 	#AtnCoefficients & $FF
.56d9	a0 57		ldy #$57			ldy 	#AtnCoefficients >> 8
.56db	4c 96 59	jmp $5996			jmp 	CorePolySquared
.56de					ExpCoefficients:
>56de	07					.byte	7
>56df	2b 1f 2c 5a				.dword	$5a2c1f2b ; 2.1498763701e-05
>56e3	d2					.byte	$d2
>56e4	8e 59 3f 4b				.dword	$4b3f598e ; 0.00014352314037
>56e8	d5					.byte	$d5
>56e9	c3 71 f7 57				.dword	$57f771c3 ; 0.0013422634825
>56ed	d8					.byte	$d8
>56ee	15 0e c2 4e				.dword	$4ec20e15 ; 0.0096140170135
>56f2	db					.byte	$db
>56f3	05 ac ac 71				.dword	$71acac05 ; 0.05550512686
>56f7	dd					.byte	$dd
>56f8	e3 f3 fe 7a				.dword	$7afef3e3 ; 0.2402263846
>56fc	df					.byte	$df
>56fd	08 0c b9 58				.dword	$58b90c08 ; 0.69314718618
>5701	e1					.byte	$e1
>5702	00 00 00 40				.dword	$40000000 ; 1.0
>5706	e2					.byte	$e2
.5707					SinCoefficients:
>5707	06					.byte	6
>5708	8d 16 0d f3				.dword	$f30d168d ; -14.381390672
>570c	e5					.byte	$e5
>570d	fc fd 03 54				.dword	$5403fdfc ; 42.007797122
>5711	e7					.byte	$e7
>5712	81 44 b4 cc				.dword	$ccb44481 ; -76.704170257
>5716	e8					.byte	$e8
>5717	f1 ef 9a 51				.dword	$519aeff1 ; 81.605223686
>571b	e8					.byte	$e8
>571c	94 f3 ae d2				.dword	$d2aef394 ; -41.341702104
>5720	e7					.byte	$e7
>5721	51 ed 87 64				.dword	$6487ed51 ; 6.2831853069
>5725	e4					.byte	$e4
>5726	00 00 00 00				.dword	$00000000 ; 0.0
>572a	00					.byte	$00
.572b					LogCoefficients:
>572b	04					.byte	4
>572c	bd 65 2b 6f				.dword	$6f2b65bd ; 0.43425594189
>5730	e0					.byte	$e0
>5731	b2 85 cd 49				.dword	$49cd85b2 ; 0.57658454124
>5735	e1					.byte	$e1
>5736	8b 49 1c 7b				.dword	$7b1c498b ; 0.96180075919
>573a	e1					.byte	$e1
>573b	90 1d 55 5c				.dword	$5c551d90 ; 2.8853900731
>573f	e3					.byte	$e3
>5740	00 00 00 c0				.dword	$c0000000 ; -0.5
>5744	e1					.byte	$e1
.5745					AtnCoefficients:
>5745	0c					.byte	12
>5746	ea de c1 d9				.dword	$d9c1deea ; -0.00068479391189
>574a	d7					.byte	$d7
>574b	7a 53 7a 4f				.dword	$4f7a537a ; 0.0048509421558
>574f	da					.byte	$da
>5750	08 58 fe c1				.dword	$c1fe5808 ; -0.016111701843
>5754	dc					.byte	$dc
>5755	e5 b3 0f 46				.dword	$460fb3e5 ; 0.034209638048
>5759	dd					.byte	$dd
>575a	e1 e5 29 ef				.dword	$ef29e5e1 ; -0.054279132761
>575e	dd					.byte	$dd
>575f	26 38 32 4a				.dword	$4a323826 ; 0.07245719654
>5763	de					.byte	$de
>5764	bd 28 f5 db				.dword	$dbf528bd ; -0.089802395378
>5768	de					.byte	$de
>5769	3f 44 98 71				.dword	$7198443f ; 0.11093241343
>576d	de					.byte	$de
>576e	9d 4c 22 c9				.dword	$c9224c9d ; -0.14283980767
>5772	df					.byte	$df
>5773	e3 48 66 66				.dword	$666648e3 ; 0.19999912049
>5777	df					.byte	$df
>5778	0a 55 55 d5				.dword	$d555550a ; -0.33333331568
>577c	e0					.byte	$e0
>577d	00 00 00 40				.dword	$40000000 ; 1.0
>5781	e2					.byte	$e2
>5782	00 00 00 00				.dword	$00000000 ; 0.0
>5786	00					.byte	$00
.5787					Const_Base:
.5787					Const_1Div2Pi:
>5787	b7 c1 7c 51				.dword	$517cc1b7 ; 0.15915494
>578b	df					.byte	$df
.578c					Const_PiDiv2:
>578c	51 ed 87 64				.dword	$6487ed51 ; 1.57079633
>5790	e2					.byte	$e2
.5791					Const_Log2_e:
>5791	95 1d 55 5c				.dword	$5c551d95 ; 1.44269504
>5795	e2					.byte	$e2
.5796					Const_sqrt_2:
>5796	9a 79 82 5a				.dword	$5a82799a ; 1.41421356
>579a	e2					.byte	$e2
.579b					Const_sqrt_half:
>579b	9a 79 82 5a				.dword	$5a82799a ; 0.70710678
>579f	e1					.byte	$e1
.57a0					Const_pi:
>57a0	51 ed 87 64				.dword	$6487ed51 ; 3.14159265
>57a4	e3					.byte	$e3
.57a5					Const_half:
>57a5	00 00 00 40				.dword	$40000000 ; 0.50000000
>57a9	e1					.byte	$e1
.57aa					Const_ln_e:
>57aa	fc 0b b9 58				.dword	$58b90bfc ; 0.69314718
>57ae	e1					.byte	$e1
.57af					FloatCosine:
.57af	a9 05		lda #$05			lda 	#Const_PiDiv2-Const_Base
.57b1	20 99 58	jsr $5899			jsr 	LoadConstant
.57b4	e8		inx				inx
.57b5	20 8d 50	jsr $508d			jsr 	FloatAdd
.57b8	4c 4f 59	jmp $594f			jmp 	FloatSine
.57bb					FloatExponent:
.57bb	a9 0a		lda #$0a			lda 	#Const_Log2_e-Const_Base
.57bd	20 99 58	jsr $5899			jsr 	LoadConstant
.57c0	e8		inx				inx
.57c1	20 29 53	jsr $5329			jsr 	FloatMultiply
.57c4	20 06 58	jsr $5806			jsr 	_UECopy01 				; copy 0 to 1, get integer part to 1
.57c7	e8		inx				inx
.57c8	20 a4 52	jsr $52a4			jsr 	FloatIntegerPart
.57cb	ca		dex				dex
.57cc	b5 3b		lda $3b,x			lda 	NSMantissa1+1,x
.57ce	15 47		ora $47,x			ora 	NSMantissa2+1,x
.57d0	15 53		ora $53,x			ora 	NSMantissa3+1,x
.57d2	d0 38		bne $580c			bne 	_UERangeError
.57d4	b5 2f		lda $2f,x			lda 	NSMantissa0+1,x 		; push integer part on stack.
.57d6	c9 40		cmp #$40			cmp 	#64
.57d8	b0 32		bcs $580c			bcs 	_UERangeError
.57da	48		pha				pha
.57db	b5 22		lda $22,x			lda 	NSStatus,x 				; push sign
.57dd	48		pha				pha
.57de	20 49 52	jsr $5249			jsr 	FloatFractionalPart		; copy 0 to 1, get fractional part to 0
.57e1	68		pla				pla
.57e2	10 14		bpl $57f8			bpl 	_UEPositive
.57e4	e8		inx				inx 							; 1-x
.57e5	a9 01		lda #$01			lda 	#1
.57e7	20 6b 56	jsr $566b			jsr 	FloatSetByte
.57ea	ca		dex				dex
.57eb	20 2b 56	jsr $562b			jsr 	FloatNegate
.57ee	e8		inx				inx
.57ef	20 8d 50	jsr $508d			jsr 	FloatAdd
.57f2	68		pla				pla 							; integer part +1 and negated.
.57f3	1a		inc a				inc 	a
.57f4	49 ff		eor #$ff			eor 	#$FF
.57f6	1a		inc a				inc 	a
.57f7	48		pha				pha
.57f8					_UEPositive:
.57f8	20 0e 58	jsr $580e			jsr 	CoreExponent
.57fb	20 42 58	jsr $5842			jsr 	CompletePolynomial
.57fe	68		pla				pla
.57ff	18		clc				clc
.5800	75 5e		adc $5e,x			adc 	NSExponent,x
.5802	95 5e		sta $5e,x			sta 	NSExponent,x
.5804	18		clc				clc
.5805	60		rts				rts
.5806					_UECopy01:
.5806	8a		txa				txa
.5807	a8		tay				tay
.5808	c8		iny				iny
.5809	4c 4d 58	jmp $584d			jmp 	CopyFloatXY
.580c					_UERangeError:
.580c	38		sec				sec
.580d	60		rts				rts
.580e					CoreExponent:
.580e	a9 de		lda #$de			lda 	#ExpCoefficients & $FF
.5810	a0 56		ldy #$56			ldy 	#ExpCoefficients >> 8
.5812	20 16 58	jsr $5816			jsr 	CalculateHornerPolynomial
.5815	60		rts				rts
.5816					CalculateHornerPolynomial:
.5816	85 70		sta $70				sta 	zTemp0 						; save poly data from YA
.5818	84 71		sty $71				sty 	zTemp0+1
.581a	9c 47 04	stz $0447			stz 	coefficientCount 			; zero the count.
.581d	8e 48 04	stx $0448			stx 	xValueSlot 					; save xValue slot.
.5820	e8		inx				inx 								; set the count to zero.
.5821	20 69 56	jsr $5669			jsr 	FloatSetZero
.5824					_CHPLoop:
.5824	8a		txa				txa 								; copy X-1 to X+1
.5825	a8		tay				tay
.5826	ca		dex				dex
.5827	c8		iny				iny
.5828	20 4d 58	jsr $584d			jsr 	CopyFloatXY 				; e.g. stack is <current> <x>
.582b	e8		inx				inx
.582c	e8		inx				inx
.582d	20 29 53	jsr $5329			jsr 	FloatMultiply 				; times current by X
.5830	e8		inx				inx
.5831	20 6c 58	jsr $586c			jsr 	GetCoefficient 				; coefficient into X+1
.5834	20 8d 50	jsr $508d			jsr 	FloatAdd 					; and add
.5837	ee 47 04	inc $0447			inc 	coefficientCount
.583a	ad 47 04	lda $0447			lda 	coefficientCount
.583d	d2 70		cmp ($70)			cmp 	(zTemp0)
.583f	d0 e3		bne $5824			bne 	_CHPLoop
.5841	60		rts				rts
.5842					CompletePolynomial:
.5842	20 29 53	jsr $5329			jsr 	FloatMultiply
.5845	e8		inx				inx 								; get the last value
.5846	20 6c 58	jsr $586c			jsr 	GetCoefficient
.5849	20 8d 50	jsr $508d			jsr 	FloatAdd 					; and add it
.584c	60		rts				rts
.584d					CopyFloatXY:
.584d	b5 5e		lda $5e,x			lda 	NSExponent,x
.584f	99 5e 00	sta $005e,y			sta 	NSExponent,y
.5852	b5 22		lda $22,x			lda 	NSStatus,x
.5854	99 22 00	sta $0022,y			sta 	NSStatus,y
.5857	b5 2e		lda $2e,x			lda 	NSMantissa0,x
.5859	99 2e 00	sta $002e,y			sta 	NSMantissa0,y
.585c	b5 3a		lda $3a,x			lda 	NSMantissa1,x
.585e	99 3a 00	sta $003a,y			sta 	NSMantissa1,y
.5861	b5 46		lda $46,x			lda 	NSMantissa2,x
.5863	99 46 00	sta $0046,y			sta 	NSMantissa2,y
.5866	b5 52		lda $52,x			lda 	NSMantissa3,x
.5868	99 52 00	sta $0052,y			sta 	NSMantissa3,y
.586b	60		rts				rts
.586c					GetCoefficient:
.586c	5a		phy				phy
.586d	ad 47 04	lda $0447			lda 	coefficientCount 			; 5 per block
.5870	0a		asl a				asl 	a
.5871	0a		asl a				asl 	a
.5872	38		sec				sec 								; +1 for count
.5873	6d 47 04	adc $0447			adc 	coefficientCount
.5876	a8		tay				tay
.5877	b1 70		lda ($70),y			lda 	(zTemp0),y 					; copy mantissa
.5879	95 2e		sta $2e,x			sta 	NSMantissa0,x
.587b	c8		iny				iny
.587c	b1 70		lda ($70),y			lda 	(zTemp0),y
.587e	95 3a		sta $3a,x			sta 	NSMantissa1,x
.5880	c8		iny				iny
.5881	b1 70		lda ($70),y			lda 	(zTemp0),y
.5883	95 46		sta $46,x			sta 	NSMantissa2,x
.5885	c8		iny				iny
.5886	b1 70		lda ($70),y			lda 	(zTemp0),y
.5888	48		pha				pha
.5889	29 7f		and #$7f			and 	#$7F 						; clear sign bit.
.588b	95 52		sta $52,x			sta 	NSMantissa3,x
.588d	c8		iny				iny
.588e	68		pla				pla
.588f	29 80		and #$80			and 	#$80
.5891	95 22		sta $22,x			sta 	NSStatus,x 					; put in status
.5893	b1 70		lda ($70),y			lda 	(zTemp0),y
.5895	95 5e		sta $5e,x			sta 	NSExponent,x
.5897	7a		ply				ply
.5898	60		rts				rts
.0447					coefficientCount:
>0447							.fill 	1
.0448					xValueSlot:
>0448							.fill 	1
.5899					LoadConstant:
.5899	5a		phy				phy
.589a	a8		tay				tay
.589b	b9 87 57	lda $5787,y			lda 	Const_Base+0,y
.589e	95 2f		sta $2f,x			sta 	NSMantissa0+1,x
.58a0	b9 88 57	lda $5788,y			lda 	Const_Base+1,y
.58a3	95 3b		sta $3b,x			sta 	NSMantissa1+1,x
.58a5	b9 89 57	lda $5789,y			lda 	Const_Base+2,y
.58a8	95 47		sta $47,x			sta 	NSMantissa2+1,x
.58aa	b9 8a 57	lda $578a,y			lda 	Const_Base+3,y
.58ad	48		pha				pha
.58ae	29 7f		and #$7f			and 	#$7F
.58b0	95 53		sta $53,x			sta 	NSMantissa3+1,x
.58b2	68		pla				pla
.58b3	29 80		and #$80			and 	#$80
.58b5	95 23		sta $23,x			sta 	NSStatus+1,x
.58b7	b9 8b 57	lda $578b,y			lda 	Const_Base+4,y
.58ba	95 5f		sta $5f,x			sta 	NSExponent+1,x
.58bc	7a		ply				ply
.58bd	60		rts				rts
.58be					FloatLogarithm:
.58be	b5 22		lda $22,x			lda 	NSStatus,x 					; check > 0
.58c0	30 5f		bmi $5921			bmi 	_ULRange
.58c2	20 8b 56	jsr $568b			jsr 	FloatIsZero
.58c5	f0 5a		beq $5921			beq 	_ULRange
.58c7	20 be 53	jsr $53be			jsr 	FloatNormalise 				; put into FP mode.
.58ca	b5 5e		lda $5e,x			lda 	NSExponent,x 				; get power
.58cc	48		pha				pha
.58cd	a9 e1		lda #$e1			lda 	#(-31) & $FF 				; force into range 0.5 -> 1
.58cf	95 5e		sta $5e,x			sta 	NSExponent,x
.58d1	a9 14		lda #$14			lda 	#Const_sqrt_half-Const_Base
.58d3	20 99 58	jsr $5899			jsr 	LoadConstant
.58d6	e8		inx				inx
.58d7	20 8d 50	jsr $508d			jsr 	FloatAdd
.58da	8a		txa				txa 								; divide into sqrt 2.0
.58db	a8		tay				tay
.58dc	c8		iny				iny
.58dd	20 4d 58	jsr $584d			jsr 	CopyFloatXY
.58e0	ca		dex				dex
.58e1	a9 0f		lda #$0f			lda 	#Const_sqrt_2-Const_Base
.58e3	20 99 58	jsr $5899			jsr 	LoadConstant
.58e6	e8		inx				inx
.58e7	e8		inx				inx
.58e8	20 b2 51	jsr $51b2			jsr 	FloatDivide 				; if zero, error.
.58eb	b0 33		bcs $5920			bcs 	_ULRangePla
.58ed	20 2b 56	jsr $562b			jsr 	FloatNegate 				; subtract from 1
.58f0	e8		inx				inx
.58f1	a9 01		lda #$01			lda 	#1
.58f3	20 6b 56	jsr $566b			jsr 	FloatSetByte
.58f6	20 8d 50	jsr $508d			jsr 	FloatAdd
.58f9	20 23 59	jsr $5923			jsr 	CoreLog
.58fc	20 42 58	jsr $5842			jsr 	CompletePolynomial
.58ff	68		pla				pla 								; add exponent
.5900	18		clc				clc
.5901	69 1f		adc #$1f			adc 	#31 						; fix up
.5903	48		pha				pha
.5904	10 03		bpl $5909			bpl 	_LogNotNeg
.5906	49 ff		eor #$ff			eor 	#$FF
.5908	1a		inc a				inc 	a
.5909					_LogNotNeg:
.5909	e8		inx				inx 								; set byte and sign.
.590a	20 6b 56	jsr $566b			jsr 	FloatSetByte
.590d	68		pla				pla
.590e	29 80		and #$80			and 	#$80
.5910	95 22		sta $22,x			sta 	NSStatus,x
.5912	20 8d 50	jsr $508d			jsr 	FloatAdd
.5915	a9 23		lda #$23			lda 	#Const_ln_e-Const_Base
.5917	20 99 58	jsr $5899			jsr 	LoadConstant
.591a	e8		inx				inx
.591b	20 29 53	jsr $5329			jsr 	FloatMultiply
.591e	18		clc				clc
.591f	60		rts				rts
.5920					_ULRangePla:
.5920	68		pla				pla
.5921					_ULRange:
.5921	38		sec				sec
.5922	60		rts				rts
.5923					CoreLog:
.5923	a9 2b		lda #$2b			lda 	#LogCoefficients & $FF
.5925	a0 57		ldy #$57			ldy 	#LogCoefficients >> 8
.5927	4c 96 59	jmp $5996			jmp 	CorePolySquared
.592a					FloatPI:
.592a	a9 19		lda #$19			lda 	#Const_pi-Const_Base
.592c	20 99 58	jsr $5899			jsr 	LoadConstant
.592f	e8		inx				inx
.5930	18		clc				clc
.5931	60		rts				rts
.5932					FloatPower:
.5932	ca		dex				dex
.5933	8a		txa				txa 							; copy 0 to 2, so we can process it
.5934	a8		tay				tay
.5935	c8		iny				iny
.5936	c8		iny				iny
.5937	20 4d 58	jsr $584d			jsr 	CopyFloatXY
.593a	e8		inx				inx 							; 2 = Log(0)
.593b	e8		inx				inx
.593c	20 be 58	jsr $58be			jsr 	FloatLogarithm
.593f	b0 0d		bcs $594e			bcs 	_FPWExit
.5941	20 29 53	jsr $5329			jsr 	FloatMultiply			; Multiply by original 1, into 1.
.5944	8a		txa				txa 							; copy to slot 0
.5945	a8		tay				tay
.5946	88		dey				dey
.5947	20 4d 58	jsr $584d			jsr 	CopyFloatXY
.594a	ca		dex				dex  							; Exponent code.
.594b	20 bb 57	jsr $57bb			jsr 	FloatExponent
.594e					_FPWExit:
.594e	60		rts				rts
.594f					FloatSine:
.594f	b5 22		lda $22,x			lda 	NSStatus,x 					; save sign
.5951	48		pha				pha
.5952	74 22		stz $22,x			stz 	NSStatus,x 					; make +ve
.5954	a9 00		lda #$00			lda 	#Const_1Div2Pi-Const_Base
.5956	20 99 58	jsr $5899			jsr 	LoadConstant
.5959	e8		inx				inx
.595a	20 29 53	jsr $5329			jsr 	FloatMultiply
.595d	20 49 52	jsr $5249			jsr 	FloatFractionalPart 		; take the fractional part
.5960	b5 5e		lda $5e,x			lda 	NSExponent,x 				; check exponent
.5962	c9 e0		cmp #$e0			cmp 	#$E0 						; < $E0 exponent : 0-0.25
.5964	90 1f		bcc $5985			bcc 	_USProcessExit
.5966	f0 06		beq $596e			beq 	_USSubtractFromHalf 		; = $E0 exponent : 0.25-0.5
.5968	b5 52		lda $52,x			lda 	NSMantissa3,x 				; if > 0.75 which is $60000000:$E1
.596a	c9 60		cmp #$60			cmp 	#$60
.596c	b0 0e		bcs $597c			bcs 	_USSubtractOne
.596e					_USSubtractFromHalf:
.596e	a9 1e		lda #$1e			lda 	#Const_half-Const_Base
.5970	20 99 58	jsr $5899			jsr 	LoadConstant
.5973	e8		inx				inx
.5974	20 87 50	jsr $5087			jsr 	FloatSubtract
.5977	20 2b 56	jsr $562b			jsr 	FloatNegate 				; then negate it
.597a	80 09		bra $5985			bra 	_USProcessExit 				; and exit
.597c					_USSubtractOne:
.597c	e8		inx				inx
.597d	a9 01		lda #$01			lda 	#1
.597f	20 6b 56	jsr $566b			jsr 	FloatSetByte
.5982	20 87 50	jsr $5087			jsr 	FloatSubtract
.5985					_USProcessExit:
.5985	20 92 59	jsr $5992			jsr 	CoreSine
.5988	20 42 58	jsr $5842			jsr 	CompletePolynomial
.598b	68		pla				pla 								; restore sign and apply
.598c	55 22		eor $22,x			eor 	NSStatus,x
.598e	95 22		sta $22,x			sta 	NSStatus,x
.5990	18		clc				clc
.5991	60		rts				rts
.5992					CoreSine:
.5992	a9 07		lda #$07			lda 	#SinCoefficients & $FF
.5994	a0 57		ldy #$57			ldy 	#SinCoefficients >> 8
.5996					CorePolySquared:
.5996	48		pha				pha 								; save coefficient table
.5997	5a		phy				phy
.5998	8a		txa				txa 								; copy X to +1, +2
.5999	a8		tay				tay
.599a	c8		iny				iny
.599b	20 4d 58	jsr $584d			jsr 	CopyFloatXY
.599e	c8		iny				iny
.599f	20 4d 58	jsr $584d			jsr 	CopyFloatXY
.59a2	e8		inx				inx 								; point to the pair and put x^2 on stack
.59a3	e8		inx				inx
.59a4	20 29 53	jsr $5329			jsr 	FloatMultiply
.59a7	7a		ply				ply 								; coefficient table back.
.59a8	68		pla				pla
.59a9	20 16 58	jsr $5816			jsr 	CalculateHornerPolynomial
.59ac	8a		txa				txa 								; copy back to slot #1
.59ad	a8		tay				tay
.59ae	88		dey				dey
.59af	20 4d 58	jsr $584d			jsr	 	CopyFloatXY
.59b2	ca		dex				dex 								; point at result
.59b3	60		rts				rts
.59b4					FloatSquareRoot:
.59b4	20 be 58	jsr $58be			jsr 	FloatLogarithm
.59b7	b0 06		bcs $59bf			bcs 	_FSQExit
.59b9	d6 5e		dec $5e,x			dec 	NSExponent,x
.59bb	20 bb 57	jsr $57bb			jsr 	FloatExponent
.59be	18		clc				clc
.59bf					_FSQExit:
.59bf	60		rts				rts
.59c0					FloatTangent:
.59c0	da		phx				phx
.59c1	8a		txa				txa 								; sin -> +1
.59c2	a8		tay				tay
.59c3	c8		iny				iny
.59c4	20 4d 58	jsr $584d			jsr 	CopyFloatXY
.59c7	e8		inx				inx
.59c8	20 4f 59	jsr $594f			jsr 	FloatSine
.59cb	ca		dex				dex
.59cc	8a		txa				txa 								; cos -> +2
.59cd	a8		tay				tay
.59ce	c8		iny				iny
.59cf	c8		iny				iny
.59d0	20 4d 58	jsr $584d			jsr 	CopyFloatXY
.59d3	e8		inx				inx
.59d4	e8		inx				inx
.59d5	20 af 57	jsr $57af			jsr 	FloatCosine
.59d8	20 b2 51	jsr $51b2			jsr 	FloatDivide 				; calculate sin/cos
.59db	b0 07		bcs $59e4			bcs 	_FTExit 					; divide by zero
.59dd	8a		txa				txa 								; copy result down.
.59de	a8		tay				tay
.59df	88		dey				dey
.59e0	20 4d 58	jsr $584d			jsr 	CopyFloatXY
.59e3	18		clc				clc
.59e4					_FTExit:
.59e4	fa		plx				plx
.59e5	60		rts				rts

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/common.library

=$80					C64_END                  = $80 ; $80 end
=$81					C64_FOR                  = $81 ; $81 for
=$82					C64_NEXT                 = $82 ; $82 next
=$83					C64_DATA                 = $83 ; $83 data
=$84					C64_INPUTHASH            = $84 ; $84 input#
=$85					C64_INPUT                = $85 ; $85 input
=$86					C64_DIM                  = $86 ; $86 dim
=$87					C64_READ                 = $87 ; $87 read
=$88					C64_LET                  = $88 ; $88 let
=$89					C64_GOTO                 = $89 ; $89 goto
=$8a					C64_RUN                  = $8a ; $8a run
=$8b					C64_IF                   = $8b ; $8b if
=$8c					C64_RESTORE              = $8c ; $8c restore
=$8d					C64_GOSUB                = $8d ; $8d gosub
=$8e					C64_RETURN               = $8e ; $8e return
=$8f					C64_REM                  = $8f ; $8f rem
=$90					C64_STOP                 = $90 ; $90 stop
=$91					C64_ON                   = $91 ; $91 on
=$92					C64_WAIT                 = $92 ; $92 wait
=$93					C64_LOAD                 = $93 ; $93 load
=$94					C64_SAVE                 = $94 ; $94 save
=$95					C64_VERIFY               = $95 ; $95 verify
=$96					C64_DEF                  = $96 ; $96 def
=$97					C64_POKE                 = $97 ; $97 poke
=$98					C64_PRINTHASH            = $98 ; $98 print#
=$99					C64_PRINT                = $99 ; $99 print
=$9a					C64_CONT                 = $9a ; $9a cont
=$9b					C64_LIST                 = $9b ; $9b list
=$9c					C64_CLR                  = $9c ; $9c clr
=$9d					C64_CMD                  = $9d ; $9d cmd
=$9e					C64_SYS                  = $9e ; $9e sys
=$9f					C64_OPEN                 = $9f ; $9f open
=$a0					C64_CLOSE                = $a0 ; $a0 close
=$a1					C64_GET                  = $a1 ; $a1 get
=$a2					C64_NEW                  = $a2 ; $a2 new
=$a3					C64_TABLB                = $a3 ; $a3 tab(
=$a4					C64_TO                   = $a4 ; $a4 to
=$a5					C64_FN                   = $a5 ; $a5 fn
=$a6					C64_SPCLB                = $a6 ; $a6 spc(
=$a7					C64_THEN                 = $a7 ; $a7 then
=$a8					C64_NOT                  = $a8 ; $a8 not
=$a9					C64_STEP                 = $a9 ; $a9 step
=$aa					C64_PLUS                 = $aa ; $aa +
=$ab					C64_MINUS                = $ab ; $ab -
=$ac					C64_TIMES                = $ac ; $ac *
=$ad					C64_DIVIDE               = $ad ; $ad /
=$ae					C64_POWER                = $ae ; $ae ^
=$af					C64_AND                  = $af ; $af and
=$b0					C64_OR                   = $b0 ; $b0 or
=$b1					C64_GREATER              = $b1 ; $b1 >
=$b2					C64_EQUAL                = $b2 ; $b2 =
=$b3					C64_LESS                 = $b3 ; $b3 <
=$b4					C64_SGN                  = $b4 ; $b4 sgn
=$b5					C64_INT                  = $b5 ; $b5 int
=$b6					C64_ABS                  = $b6 ; $b6 abs
=$b7					C64_USR                  = $b7 ; $b7 usr
=$b8					C64_FRE                  = $b8 ; $b8 fre
=$b9					C64_POS                  = $b9 ; $b9 pos
=$ba					C64_SQR                  = $ba ; $ba sqr
=$bb					C64_RND                  = $bb ; $bb rnd
=$bc					C64_LOG                  = $bc ; $bc log
=$bd					C64_EXP                  = $bd ; $bd exp
=$be					C64_COS                  = $be ; $be cos
=$bf					C64_SIN                  = $bf ; $bf sin
=$c0					C64_TAN                  = $c0 ; $c0 tan
=$c1					C64_ATN                  = $c1 ; $c1 atn
=$c2					C64_PEEK                 = $c2 ; $c2 peek
=$c3					C64_LEN                  = $c3 ; $c3 len
=$c4					C64_STRDOLLAR            = $c4 ; $c4 str$
=$c5					C64_VAL                  = $c5 ; $c5 val
=$c6					C64_ASC                  = $c6 ; $c6 asc
=$c7					C64_CHRDOLLAR            = $c7 ; $c7 chr$
=$c8					C64_LEFTDOLLAR           = $c8 ; $c8 left$
=$c9					C64_RIGHTDOLLAR          = $c9 ; $c9 right$
=$ca					C64_MIDDOLLAR            = $ca ; $ca mid$
=$cb					C64_GO                   = $cb ; $cb go
=$ce80					C64_MON                  = $ce80 ; $ce80 mon
=$ce81					C64_DOS                  = $ce81 ; $ce81 dos
=$ce82					C64_OLD                  = $ce82 ; $ce82 old
=$ce83					C64_GEOS                 = $ce83 ; $ce83 geos
=$ce84					C64_VPOKE                = $ce84 ; $ce84 vpoke
=$ce85					C64_VLOAD                = $ce85 ; $ce85 vload
=$ce86					C64_SCREEN               = $ce86 ; $ce86 screen
=$ce87					C64_PSET                 = $ce87 ; $ce87 pset
=$ce88					C64_LINE                 = $ce88 ; $ce88 line
=$ce89					C64_FRAME                = $ce89 ; $ce89 frame
=$ce8a					C64_RECT                 = $ce8a ; $ce8a rect
=$ce8b					C64_CHAR                 = $ce8b ; $ce8b char
=$ce8c					C64_MOUSE                = $ce8c ; $ce8c mouse
=$ce8d					C64_COLOR                = $ce8d ; $ce8d color
=$ce8e					C64_TEST                 = $ce8e ; $ce8e test
=$ce8f					C64_RESET                = $ce8f ; $ce8f reset
=$ce90					C64_CLS                  = $ce90 ; $ce90 cls
=$ce91					C64_CODEX                = $ce91 ; $ce91 codex
=$ce92					C64_LOCATE               = $ce92 ; $ce92 locate
=$ce93					C64_BOOT                 = $ce93 ; $ce93 boot
=$ce94					C64_KEYMAP               = $ce94 ; $ce94 keymap
=$ce95					C64_BLOAD                = $ce95 ; $ce95 bload
=$ce96					C64_BVLOAD               = $ce96 ; $ce96 bvload
=$ce97					C64_BVERIFY              = $ce97 ; $ce97 bverify
=$ce98					C64_BANK                 = $ce98 ; $ce98 bank
=$ce99					C64_FMINIT               = $ce99 ; $ce99 fminit
=$ce9a					C64_FMNOTE               = $ce9a ; $ce9a fmnote
=$ce9b					C64_FMDRUM               = $ce9b ; $ce9b fmdrum
=$ce9c					C64_FMINST               = $ce9c ; $ce9c fminst
=$ce9d					C64_FMVIB                = $ce9d ; $ce9d fmvib
=$ce9e					C64_FMFREQ               = $ce9e ; $ce9e fmfreq
=$ce9f					C64_FMVOL                = $ce9f ; $ce9f fmvol
=$cea0					C64_FMPAN                = $cea0 ; $cea0 fmpan
=$cea1					C64_FMPLAY               = $cea1 ; $cea1 fmplay
=$cea2					C64_FMCHORD              = $cea2 ; $cea2 fmchord
=$cea3					C64_FMPOKE               = $cea3 ; $cea3 fmpoke
=$cea4					C64_PSGINIT              = $cea4 ; $cea4 psginit
=$cea5					C64_PSGNOTE              = $cea5 ; $cea5 psgnote
=$cea6					C64_PSGVOL               = $cea6 ; $cea6 psgvol
=$cea7					C64_PSGWAV               = $cea7 ; $cea7 psgwav
=$cea8					C64_PSGFREQ              = $cea8 ; $cea8 psgfreq
=$cea9					C64_PSGPAN               = $cea9 ; $cea9 psgpan
=$ceaa					C64_PSGPLAY              = $ceaa ; $ceaa psgplay
=$ceab					C64_PSGCHORD             = $ceab ; $ceab psgchord
=$ceac					C64_REBOOT               = $ceac ; $ceac reboot
=$cead					C64_POWEROFF             = $cead ; $cead poweroff
=$ceae					C64_I2CPOKE              = $ceae ; $ceae i2cpoke
=$ceaf					C64_SLEEP                = $ceaf ; $ceaf sleep
=$ceb0					C64_BSAVE                = $ceb0 ; $ceb0 bsave
=$ceb1					C64_MENU                 = $ceb1 ; $ceb1 menu
=$ceb2					C64_REN                  = $ceb2 ; $ceb2 ren
=$ceb3					C64_LINPUT               = $ceb3 ; $ceb3 linput
=$ceb4					C64_LINPUTHASH           = $ceb4 ; $ceb4 linput#
=$ceb5					C64_BINPUTHASH           = $ceb5 ; $ceb5 binput#
=$ceb6					C64_HELP                 = $ceb6 ; $ceb6 help
=$ced0					C64_VPEEK                = $ced0 ; $ced0 vpeek
=$ced1					C64_MX                   = $ced1 ; $ced1 mx
=$ced2					C64_MY                   = $ced2 ; $ced2 my
=$ced3					C64_MB                   = $ced3 ; $ced3 mb
=$ced4					C64_JOY                  = $ced4 ; $ced4 joy
=$ced5					C64_HEXDOLLAR            = $ced5 ; $ced5 hex$
=$ced6					C64_BINDOLLAR            = $ced6 ; $ced6 bin$
=$ced7					C64_I2CPEEK              = $ced7 ; $ced7 i2cpeek
=$ced8					C64_POINTER              = $ced8 ; $ced8 pointer
=$ced9					C64_STRPTR               = $ced9 ; $ced9 strptr
=$ceda					C64_RPTDOLLAR            = $ceda ; $ceda rpt$
=$1000					CodeStart = $1000
=$22					ZeroPageMandatory = $22
=$400					MemoryStorage = $400
.006a					codePtr:
>006a							.fill 	2
.006c					codePage:
>006c							.fill 	1
.006d					objPtr:
>006d							.fill 	2
.006f					objPage:
>006f							.fill 	1
.0070					zTemp0:
>0070							.fill 	2
.0072					zTemp1:
>0072							.fill 	2
.0074					zTemp2:
>0074							.fill 	2
=$80					PCD_STARTBINARY = $80
=$8d					PCD_ENDBINARY = $8d
=$8d					PCD_STARTCOMMAND = $8d
=$ca					PCD_ENDCOMMAND = $ca
=$ca					PCD_STARTSYSTEM = $ca
=$d5					PCD_ENDSYSTEM = $d5
=$80					PCD_PLUS             = $80 ; +
=$81					PCD_MINUS            = $81 ; -
=$82					PCD_TIMES            = $82 ; *
=$83					PCD_DIVIDE           = $83 ; /
=$84					PCD_POWER            = $84 ; ^
=$85					PCD_AND              = $85 ; and
=$86					PCD_OR               = $86 ; or
=$87					PCD_GREATER          = $87 ; >
=$88					PCD_EQUAL            = $88 ; =
=$89					PCD_LESS             = $89 ; <
=$8a					PCD_GREATEREQUAL     = $8a ; >=
=$8b					PCD_LESSGREATER      = $8b ; <>
=$8c					PCD_LESSEQUAL        = $8c ; <=
=$8d					PCD_ABS              = $8d ; abs
=$8e					PCD_ARRAY            = $8e ; array
=$8f					PCD_ASC              = $8f ; asc
=$90					PCD_ASSERT           = $90 ; assert
=$91					PCD_BINDOLLAR        = $91 ; bin$
=$92					PCD_PRINTCMD_CHR     = $92 ; print.chr
=$93					PCD_CHRDOLLAR        = $93 ; chr$
=$94					PCD_SCMD_CMP         = $94 ; s.cmp
=$95					PCD_FOR              = $95 ; for
=$96					PCD_FRE              = $96 ; fre
=$97					PCD_GET              = $97 ; get
=$98					PCD_RETURN           = $98 ; return
=$99					PCD_PSET             = $99 ; pset
=$9a					PCD_LINE             = $9a ; line
=$9b					PCD_RECT             = $9b ; rect
=$9c					PCD_FRAME            = $9c ; frame
=$9d					PCD_CHAR             = $9d ; char
=$9e					PCD_HEXDOLLAR        = $9e ; hex$
=$9f					PCD_INPUT            = $9f ; input
=$a0					PCD_INPUTDOLLAR      = $a0 ; input$
=$a1					PCD_INPUTCMD_START   = $a1 ; input.start
=$a2					PCD_LEN              = $a2 ; len
=$a3					PCD_FCMD_CMP         = $a3 ; f.cmp
=$a4					PCD_INTCMD_DIV       = $a4 ; int.div
=$a5					PCD_NEGATE           = $a5 ; negate
=$a6					PCD_NEWCMD_LINE      = $a6 ; new.line
=$a7					PCD_NEXT             = $a7 ; next
=$a8					PCD_NOT              = $a8 ; not
=$a9					PCD_ON               = $a9 ; on
=$aa					PCD_MOREON           = $aa ; moreon
=$ab					PCD_PEEK             = $ab ; peek
=$ac					PCD_POKE             = $ac ; poke
=$ad					PCD_POS              = $ad ; pos
=$ae					PCD_GETCHANNEL       = $ae ; getchannel
=$af					PCD_SETCHANNEL       = $af ; setchannel
=$b0					PCD_PRINTCMD_N       = $b0 ; print.n
=$b1					PCD_PRINTCMD_S       = $b1 ; print.s
=$b2					PCD_READ             = $b2 ; read
=$b3					PCD_READDOLLAR       = $b3 ; read$
=$b4					PCD_RND              = $b4 ; rnd
=$b5					PCD_CONCAT           = $b5 ; concat
=$b6					PCD_SGN              = $b6 ; sgn
=$b7					PCD_PRINTCMD_TAB     = $b7 ; print.tab
=$b8					PCD_PRINTCMD_POS     = $b8 ; print.pos
=$b9					PCD_PRINTCMD_SPC     = $b9 ; print.spc
=$ba					PCD_STRDOLLAR        = $ba ; str$
=$bb					PCD_LEFTDOLLAR       = $bb ; left$
=$bc					PCD_RIGHTDOLLAR      = $bc ; right$
=$bd					PCD_MIDDOLLAR        = $bd ; mid$
=$be					PCD_SWAP             = $be ; swap
=$bf					PCD_TI               = $bf ; ti
=$c0					PCD_TIDOLLAR         = $c0 ; ti$
=$c1					PCD_USR              = $c1 ; usr
=$c2					PCD_VAL              = $c2 ; val
=$c3					PCD_CLOSE            = $c3 ; close
=$c4					PCD_EXIT             = $c4 ; exit
=$c5					PCD_DEBUG            = $c5 ; debug
=$c6					PCD_OPEN             = $c6 ; open
=$c7					PCD_SCREEN           = $c7 ; screen
=$c8					PCD_VPOKE            = $c8 ; vpoke
=$c9					PCD_VPEEK            = $c9 ; vpeek
=$ca					PCD_CMD_SHIFT        = $ca ; .shift
=$cb					PCD_CMD_BYTE         = $cb ; .byte
=$cc					PCD_CMD_WORD         = $cc ; .word
=$cd					PCD_CMD_FLOAT        = $cd ; .float
=$ce					PCD_CMD_STRING       = $ce ; .string
=$cf					PCD_CMD_DATA         = $cf ; .data
=$d0					PCD_CMD_GOTO         = $d0 ; .goto
=$d1					PCD_CMD_GOSUB        = $d1 ; .gosub
=$d2					PCD_CMD_GOTOCMD_Z    = $d2 ; .goto.z
=$d3					PCD_CMD_GOTOCMD_NZ   = $d3 ; .goto.nz
=$d4					PCD_CMD_VARSPACE     = $d4 ; .varspace
=$ca80					PCD_CLR              = $ca80 ; clr
=$ca81					PCD_DIM              = $ca81 ; dim
=$ca82					PCD_END              = $ca82 ; end
=$ca83					PCD_JOY              = $ca83 ; joy
=$ca84					PCD_INT              = $ca84 ; int
=$ca85					PCD_SQR              = $ca85 ; sqr
=$ca86					PCD_LOG              = $ca86 ; log
=$ca87					PCD_EXP              = $ca87 ; exp
=$ca88					PCD_COS              = $ca88 ; cos
=$ca89					PCD_SIN              = $ca89 ; sin
=$ca8a					PCD_TAN              = $ca8a ; tan
=$ca8b					PCD_ATN              = $ca8b ; atn
=$ca8c					PCD_MOUSE            = $ca8c ; mouse
=$ca8d					PCD_MB               = $ca8d ; mb
=$ca8e					PCD_MX               = $ca8e ; mx
=$ca8f					PCD_MY               = $ca8f ; my
=$ca90					PCD_RESTORE          = $ca90 ; restore
=$ca91					PCD_STOP             = $ca91 ; stop
=$ca92					PCD_SYS              = $ca92 ; sys
=$ca93					PCD_TIDOLLARCMD_WRITE = $ca93 ; ti$.write
=$ca94					PCD_WAIT             = $ca94 ; wait
=$ca95					PCD_I2CPOKE          = $ca95 ; i2cpoke
=$ca96					PCD_I2CPEEK          = $ca96 ; i2cpeek
=$ca97					PCD_BANK             = $ca97 ; bank
=$ca98					PCD_SLEEP            = $ca98 ; sleep
=$ca99					PCD_FMINIT           = $ca99 ; fminit
=$ca9a					PCD_FMNOTE           = $ca9a ; fmnote
=$ca9b					PCD_FMDRUM           = $ca9b ; fmdrum
=$ca9c					PCD_FMINST           = $ca9c ; fminst
=$ca9d					PCD_FMVIB            = $ca9d ; fmvib
=$ca9e					PCD_FMFREQ           = $ca9e ; fmfreq
=$ca9f					PCD_FMVOL            = $ca9f ; fmvol
=$caa0					PCD_FMPAN            = $caa0 ; fmpan
=$caa1					PCD_FMPLAY           = $caa1 ; fmplay
=$caa2					PCD_FMCHORD          = $caa2 ; fmchord
=$caa3					PCD_FMPOKE           = $caa3 ; fmpoke
=$caa4					PCD_PSGINIT          = $caa4 ; psginit
=$caa5					PCD_PSGNOTE          = $caa5 ; psgnote
=$caa6					PCD_PSGVOL           = $caa6 ; psgvol
=$caa7					PCD_PSGWAV           = $caa7 ; psgwav
=$caa8					PCD_PSGFREQ          = $caa8 ; psgfreq
=$caa9					PCD_PSGPAN           = $caa9 ; psgpan
=$caaa					PCD_PSGPLAY          = $caaa ; psgplay
=$caab					PCD_PSGCHORD         = $caab ; psgchord
=$caac					PCD_CLS              = $caac ; cls
=$caad					PCD_LOCATE           = $caad ; locate
=$caae					PCD_COLOR            = $caae ; color
.59e6					ErrorV_range:
.59e6	20 0a 10	jsr $100a		jsr	ErrorHandler
>59e9	4f 55 54 20 4f 46 20 52			.text	"OUT OF RANGE",0
>59f1	41 4e 47 45 00
.59f6					ErrorV_value:
.59f6	20 0a 10	jsr $100a		jsr	ErrorHandler
>59f9	42 41 44 20 56 41 4c 55			.text	"BAD VALUE",0
>5a01	45 00
.5a03					ErrorV_syntax:
.5a03	20 0a 10	jsr $100a		jsr	ErrorHandler
>5a06	53 59 4e 54 41 58 20 45			.text	"SYNTAX ERROR",0
>5a0e	52 52 4f 52 00
.5a13					ErrorV_type:
.5a13	20 0a 10	jsr $100a		jsr	ErrorHandler
>5a16	54 59 50 45 20 4d 49 53			.text	"TYPE MISMATCH",0
>5a1e	4d 41 54 43 48 00
.5a24					ErrorV_unimplemented:
.5a24	20 0a 10	jsr $100a		jsr	ErrorHandler
>5a27	4e 4f 54 20 49 4d 50 4c			.text	"NOT IMPLEMENTED",0
>5a2f	45 4d 45 4e 54 45 44 00
.5a37					ErrorV_assert:
.5a37	20 0a 10	jsr $100a		jsr	ErrorHandler
>5a3a	41 53 53 45 52 54 20 46			.text	"ASSERT FAIL",0
>5a42	41 49 4c 00
.5a46					ErrorV_line:
.5a46	20 0a 10	jsr $100a		jsr	ErrorHandler
>5a49	55 4e 4b 4e 4f 57 4e 20			.text	"UNKNOWN LINE NUMBER",0
>5a51	4c 49 4e 45 20 4e 55 4d 42 45 52 00
.5a5d					ErrorV_internal:
.5a5d	20 0a 10	jsr $100a		jsr	ErrorHandler
>5a60	49 4e 54 45 52 4e 41 4c			.text	"INTERNAL ERROR",0
>5a68	20 45 52 52 4f 52 00
.5a6f					ErrorV_divzero:
.5a6f	20 0a 10	jsr $100a		jsr	ErrorHandler
>5a72	44 49 56 49 44 45 20 42			.text	"DIVIDE BY ZERO",0
>5a7a	59 20 5a 45 52 4f 00
.5a81					ErrorV_structure:
.5a81	20 0a 10	jsr $100a		jsr	ErrorHandler
>5a84	53 54 52 55 43 54 55 52			.text	"STRUCTURE IMBALANCE",0
>5a8c	45 20 49 4d 42 41 4c 41 4e 43 45 00
.5a98					ErrorV_stop:
.5a98	20 0a 10	jsr $100a		jsr	ErrorHandler
>5a9b	50 52 4f 47 52 41 4d 20			.text	"PROGRAM STOPPED",0
>5aa3	53 54 4f 50 50 45 44 00
.5aab					ErrorV_data:
.5aab	20 0a 10	jsr $100a		jsr	ErrorHandler
>5aae	4f 55 54 20 4f 46 20 44			.text	"OUT OF DATA",0
>5ab6	41 54 41 00
.5aba					ErrorV_undeclared:
.5aba	20 0a 10	jsr $100a		jsr	ErrorHandler
>5abd	55 4e 4b 4e 4f 57 4e 20			.text	"UNKNOWN ARRAY",0
>5ac5	41 52 52 41 59 00
.5acb					ErrorV_redefine:
.5acb	20 0a 10	jsr $100a		jsr	ErrorHandler
>5ace	41 52 52 41 59 20 52 45			.text	"ARRAY REDEFINED",0
>5ad6	44 45 46 49 4e 45 44 00
.5ade					ErrorV_index:
.5ade	20 0a 10	jsr $100a		jsr	ErrorHandler
>5ae1	42 41 44 20 41 52 52 41			.text	"BAD ARRAY INDEX",0
>5ae9	59 20 49 4e 44 45 58 00
.5af1					ErrorV_memory:
.5af1	20 0a 10	jsr $100a		jsr	ErrorHandler
>5af4	4f 55 54 20 4f 46 20 4d			.text	"OUT OF MEMORY",0
>5afc	45 4d 4f 52 59 00
.5b02					ErrorV_channel:
.5b02	20 0a 10	jsr $100a		jsr	ErrorHandler
>5b05	49 4e 50 55 54 2f 4f 55			.text	"INPUT/OUTPUT ERROR",0
>5b0d	54 50 55 54 20 45 52 52 4f 52 00
.5b18					MoveObjectForward:
.5b18	b2 6d		lda ($6d)			lda 	(objPtr) 					; get next
.5b1a	c9 ff		cmp #$ff			cmp 	#$FF
.5b1c	f0 36		beq $5b54			beq 	_MOFEnd
.5b1e	c9 40		cmp #$40			cmp 	#$40 						; 00-3F
.5b20	90 24		bcc $5b46			bcc 	_MOFAdvance1 				; forward 1
.5b22	a0 02		ldy #$02			ldy 	#2 							; 40-6F
.5b24	c9 70		cmp #$70			cmp 	#$70 						; forward 2
.5b26	90 20		bcc $5b48			bcc 	_MOFAdvanceY
.5b28	c9 ca		cmp #$ca			cmp 	#PCD_STARTSYSTEM 			; 70 - System tokens.
.5b2a	90 1a		bcc $5b46			bcc 	_MOFAdvance1 				; forward 1
.5b2c	a8		tay				tay 								; read the size.
.5b2d	b9 92 5a	lda $5a92,y			lda 	MOFSizeTable-PCD_STARTSYSTEM,y
.5b30	a8		tay				tay
.5b31	c8		iny				iny 								; add 1 for the system token.
.5b32	d0 14		bne $5b48			bne 	_MOFAdvanceY 				; if 0, was $FF thus a string/data skip.
.5b34	a0 01		ldy #$01			ldy 	#1 							; get length byte
.5b36	b1 6d		lda ($6d),y			lda 	(objPtr),y
.5b38	a8		tay				tay 								; into Y.
.5b39	18		clc				clc
.5b3a	a5 6d		lda $6d				lda 	objPtr						; add 2 to the object pointer
.5b3c	69 02		adc #$02			adc 	#2
.5b3e	85 6d		sta $6d				sta 	objPtr
.5b40	90 02		bcc $5b44			bcc 	_MOFNoCarry1
.5b42	e6 6e		inc $6e				inc 	objPtr+1
.5b44					_MOFNoCarry1:
.5b44	80 02		bra $5b48			bra 	_MOFAdvanceY
.5b46					_MOFAdvance1:
.5b46	a0 01		ldy #$01			ldy 	#1
.5b48					_MOFAdvanceY:
.5b48	98		tya				tya 								; add X to objPtr
.5b49	18		clc				clc
.5b4a	65 6d		adc $6d				adc 	objPtr
.5b4c	85 6d		sta $6d				sta 	objPtr
.5b4e	90 02		bcc $5b52			bcc 	_MOFNoCarry2
.5b50	e6 6e		inc $6e				inc 	objPtr+1
.5b52					_MOFNoCarry2:
.5b52	18		clc				clc 								; not completed.
.5b53	60		rts				rts
.5b54					_MOFEnd:
.5b54	e6 6d		inc $6d				inc 	objPtr
.5b56	d0 02		bne $5b5a			bne 	_MOFENoCarry
.5b58	e6 6e		inc $6e				inc 	objPtr+1
.5b5a					_MOFENoCarry:
.5b5a	38		sec				sec
.5b5b	60		rts				rts
.5b5c					MOFSizeTable:
>5b5c	01					.byte	1         	; $ca .shift
>5b5d	01					.byte	1         	; $cb .byte
>5b5e	02					.byte	2         	; $cc .word
>5b5f	05					.byte	5         	; $cd .float
>5b60	ff					.byte	255       	; $ce .string
>5b61	ff					.byte	255       	; $cf .data
>5b62	03					.byte	3         	; $d0 .goto
>5b63	03					.byte	3         	; $d1 .gosub
>5b64	03					.byte	3         	; $d2 .goto.z
>5b65	03					.byte	3         	; $d3 .goto.nz
>5b66	02					.byte	2         	; $d4 .varspace

;******  End of listing
