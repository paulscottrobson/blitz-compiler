
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass -q -c -Wall -o build/code.prg -L build/code.lst -l build/code.lbl testing/testing.asm /home/paulr/Projects/blitz-compiler/documents/../bin/runtime.library /home/paulr/Projects/blitz-compiler/documents/../bin/common.library /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library /home/paulr/Projects/blitz-compiler/documents/../bin/polynomials.library testing/testend.asm
; Mon Oct  9 14:14:57 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: testing/testing.asm

.0801					WrapperBoot:
.0801	a9 2a		lda #$2a			lda 	#ObjectCode >> 8 			; address of object code to run.
.0803	a2 81		ldx #$81			ldx 	#$81 						; first page of allocatable memory
.0805	a0 9f		ldy #$9f			ldy 	#$9F 						; byte after end of last page.
.0807	20 0d 08	jsr $080d			jsr 	StartRuntime 				; try to run it
.080a	4c ff ff	jmp $ffff			jmp 	$FFFF 						; then exit.

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/runtime.library

.0022					zsTemp:
>0022							.fill 	2
.0024					runtimeStackPtr:
>0024							.fill 	2
.0400					stringLowMemory:
>0400							.fill 	2
.0402					stringHighMemory:
>0402							.fill 	2
=$e4					FRAME_GOSUB = $E4 							; Gosub has 4 bytes
=211					FRAME_FOR = $C0+19 							; For has 19 bytes
=$9f20					VRAMLow0 = $9F20
=$9f21					VRAMMed0 = $9F21
=$9f22					VRAMHigh0 = $9F22
=$9f23					VRAMData0 = $9F23
=$c09f					X16A_audio_init=$C09F
=$c08d					X16A_bas_fmchordstring=$C08D
=$c000					X16A_bas_fmfreq=$C000
=$c003					X16A_bas_fmnote=$C003
=$c006					X16A_bas_fmplaystring=$C006
=$c009					X16A_bas_fmvib=$C009
=$c00c					X16A_bas_playstringvoice=$C00C
=$c090					X16A_bas_psgchordstring=$C090
=$c00f					X16A_bas_psgfreq=$C00F
=$c012					X16A_bas_psgnote=$C012
=$c015					X16A_bas_psgwav=$C015
=$c018					X16A_bas_psgplaystring=$C018
=$c01b					X16A_notecon_bas2fm=$C01B
=$c01e					X16A_notecon_bas2midi=$C01E
=$c021					X16A_notecon_bas2psg=$C021
=$c024					X16A_notecon_fm2bas=$C024
=$c027					X16A_notecon_fm2midi=$C027
=$c02a					X16A_notecon_fm2psg=$C02A
=$c02d					X16A_notecon_freq2bas=$C02D
=$c030					X16A_notecon_freq2fm=$C030
=$c033					X16A_notecon_freq2midi=$C033
=$c036					X16A_notecon_freq2psg=$C036
=$c039					X16A_notecon_midi2bas=$C039
=$c03c					X16A_notecon_midi2fm=$C03C
=$c03f					X16A_notecon_midi2psg=$C03F
=$c042					X16A_notecon_psg2bas=$C042
=$c045					X16A_notecon_psg2fm=$C045
=$c048					X16A_notecon_psg2midi=$C048
=$c093					X16A_psg_getatten=$C093
=$c096					X16A_psg_getpan=$C096
=$c04b					X16A_psg_init=$C04B
=$c04e					X16A_psg_playfreq=$C04E
=$c051					X16A_psg_read=$C051
=$c054					X16A_psg_setatten=$C054
=$c057					X16A_psg_setfreq=$C057
=$c05a					X16A_psg_setpan=$C05A
=$c05d					X16A_psg_setvol=$C05D
=$c060					X16A_psg_write=$C060
=$c0a2					X16A_psg_write_fast=$C0A2
=$c099					X16A_ym_getatten=$C099
=$c09c					X16A_ym_getpan=$C09C
=$c063					X16A_ym_init=$C063
=$c066					X16A_ym_loaddefpatches=$C066
=$c069					X16A_ym_loadpatch=$C069
=$c06c					X16A_ym_loadpatchlfn=$C06C
=$c06f					X16A_ym_playdrum=$C06F
=$c072					X16A_ym_playnote=$C072
=$c075					X16A_ym_setatten=$C075
=$c078					X16A_ym_setdrum=$C078
=$c07b					X16A_ym_setnote=$C07B
=$c07e					X16A_ym_setpan=$C07E
=$c081					X16A_ym_read=$C081
=$c084					X16A_ym_release=$C084
=$c087					X16A_ym_trigger=$C087
=$c08a					X16A_ym_write=$C08A
=2					X16_r0 = 2
=4					X16_r1 = 4
=6					X16_r2 = 6
=8					X16_r3 = 8
=10					X16_r4 = 10
=$ffa5					X16_ACPTR=$FFA5
=$ffcf					X16_BASIN=$FFCF
=$feba					X16_BSAVE=$FEBA
=$ffd2					X16_BSOUT=$FFD2
=$ffa8					X16_CIOUT=$FFA8
=$ffe7					X16_CLALL=$FFE7
=$ffc3					X16_CLOSE=$FFC3
=$ffc6					X16_CHKIN=$FFC6
=$ffc9					X16_CHKOUT=$FFC9
=$ff50					X16_clock_get_date_time=$FF50
=$ff4d					X16_clock_set_date_time=$FF4D
=$ffcf					X16_CHRIN=$FFCF
=$ffd2					X16_CHROUT=$FFD2
=$ff4a					X16_CLOSE_ALL=$FF4A
=$ffcc					X16_CLRCHN=$FFCC
=$fedb					X16_console_init=$FEDB
=$fee1					X16_console_get_char=$FEE1
=$fede					X16_console_put_char=$FEDE
=$fed8					X16_console_put_image=$FED8
=$fed5					X16_console_set_paging_message=$FED5
=$ff47					X16_enter_basic=$FF47
=$fecf					X16_entropy_get=$FECF
=$ff74					X16_fetch=$FF74
=$ff02					X16_FB_cursor_next_line=$FF02
=$feff					X16_FB_cursor_position=$FEFF
=$ff17					X16_FB_fill_pixels=$FF17
=$ff1a					X16_FB_filter_pixels=$FF1A
=$fef9					X16_FB_get_info=$FEF9
=$ff05					X16_FB_get_pixel=$FF05
=$ff08					X16_FB_get_pixels=$FF08
=$fef6					X16_FB_init=$FEF6
=$ff1d					X16_FB_move_pixels=$FF1D
=$ff11					X16_FB_set_8_pixels=$FF11
=$ff14					X16_FB_set_8_pixels_opaque=$FF14
=$fefc					X16_FB_set_palette=$FEFC
=$ff0b					X16_FB_set_pixel=$FF0B
=$ff0e					X16_FB_set_pixels=$FF0E
=$ffe4					X16_GETIN=$FFE4
=$ff23					X16_GRAPH_clear=$FF23
=$ff38					X16_GRAPH_draw_image=$FF38
=$ff2c					X16_GRAPH_draw_line=$FF2C
=$ff35					X16_GRAPH_draw_oval=$FF35
=$ff2f					X16_GRAPH_draw_rect=$FF2F
=$ff3e					X16_GRAPH_get_char_size=$FF3E
=$ff20					X16_GRAPH_init=$FF20
=$ff32					X16_GRAPH_move_rect=$FF32
=$ff41					X16_GRAPH_put_char=$FF41
=$ff29					X16_GRAPH_set_colors=$FF29
=$ff3b					X16_GRAPH_set_font=$FF3B
=$ff26					X16_GRAPH_set_window=$FF26
=$fec6					X16_i2c_read_byte=$FEC6
=$fec9					X16_i2c_write_byte=$FEC9
=$fff3					X16_IOBASE=$FFF3
=$ff6e					X16_JSRFAR=$FF6E
=$ff56					X16_joystick_get=$FF56
=$ff53					X16_joystick_scan=$FF53
=$fec0					X16_kbdbuf_get_modifiers=$FEC0
=$febd					X16_kbdbuf_peek=$FEBD
=$fec3					X16_kbdbuf_put=$FEC3
=$fed2					X16_keymap=$FED2
=$ffb1					X16_LISTEN=$FFB1
=$ff59					X16_LKUPLA=$FF59
=$ff5c					X16_LKUPSA=$FF5C
=$ffd5					X16_LOAD=$FFD5
=$ff44					X16_MACPTR=$FF44
=$ff9c					X16_MEMBOT=$FF9C
=$fee7					X16_memory_copy=$FEE7
=$feea					X16_memory_crc=$FEEA
=$feed					X16_memory_decompress=$FEED
=$fee4					X16_memory_fill=$FEE4
=$ff99					X16_MEMTOP=$FF99
=$fecc					X16_monitor=$FECC
=$ff68					X16_mouse_config=$FF68
=$ff6b					X16_mouse_get=$FF6B
=$ff71					X16_mouse_scan=$FF71
=$ffc0					X16_OPEN=$FFC0
=$ff65					X16_PFKEY=$FF65
=$fff0					X16_PLOT=$FFF0
=$ff7d					X16_PRIMM=$FF7D
=$ffde					X16_RDTIM=$FFDE
=$ffb7					X16_READST=$FFB7
=$ffd8					X16_SAVE=$FFD8
=$ffed					X16_SCREEN=$FFED
=$ff5f					X16_screen_mode=$FF5F
=$ff62					X16_screen_set_charset=$FF62
=$ff93					X16_SECOND=$FF93
=$ffba					X16_SETLFS=$FFBA
=$ff90					X16_SETMSG=$FF90
=$ffbd					X16_SETNAM=$FFBD
=$ffdb					X16_SETTIM=$FFDB
=$ffa2					X16_SETTMO=$FFA2
=$fef0					X16_sprite_set_image=$FEF0
=$fef3					X16_sprite_set_position=$FEF3
=$ff77					X16_stash=$FF77
=$ffe1					X16_STOP=$FFE1
=$ffb4					X16_TALK=$FFB4
=$ff96					X16_TKSA=$FF96
=$ffea					X16_UDTIM=$FFEA
=$ffae					X16_UNLSN=$FFAE
=$ffab					X16_UNTLK=$FFAB
=$311					USRRoutineAddress = $311
=$30c					SYS_Reg_A = $30C
=$30d					SYS_Reg_X = $30D
=$30e					SYS_Reg_Y = $30E
=$30f					SYS_Reg_S = $30F
=0					SelectRAMBank = 0
=1					SelectROMBank = 1
=$0a					X16_AudioCodeBank = $0A
.080d					StartRuntime:
.080d	8d 04 04	sta $0404			sta 	runtimeHigh 				; save address of code.
.0810	85 29		sta $29				sta 	codePtr+1 					; set pointer to code.
.0812	64 28		stz $28				stz 	codePtr
.0814	8e 05 04	stx $0405			stx 	storeStartHigh 				; save from-to address.
.0817	8c 06 04	sty $0406			sty 	storeEndHigh
.081a	8e 07 04	stx $0407			stx 	variableStartPage
.081d	ba		tsx				tsx 								; save the stack.
.081e	8e 08 04	stx $0408			stx 	Runtime6502SP
.0821	a0 0c		ldy #$0c			ldy 	#RuntimeErrorHandler >> 8 	; set error handler to runtime one.
.0823	a2 2d		ldx #$2d			ldx 	#RuntimeErrorHandler & $FF
.0825	20 b5 1e	jsr $1eb5			jsr 	SetErrorHandler
.0828	20 5a 0a	jsr $0a5a			jsr 	ClearMemory 				; clear memory.
.082b	20 3c 16	jsr $163c			jsr 	XRuntimeSetup 				; initialise the runtime stuff.
.082e	20 3e 13	jsr $133e		 	jsr		SetDefaultChannel			; set default input/output channel.
.0831	20 74 15	jsr $1574			jsr 	RestoreCode 				; which we now call
.0834	a0 00		ldy #$00			ldy 	#0
.0836					NextCommand:
.0836	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.0838	30 5b		bmi $0895			bmi 	NXCommand 					; -if -ve command
.083a	c8		iny				iny
.083b	c9 40		cmp #$40			cmp 	#64 						; 64..127 is load and store.
.083d	90 39		bcc $0878			bcc 	PushByteA 					; 0..63 is short constants.
.083f					NXLoadStore:
.083f	c9 78		cmp #$78			cmp		#120 						; is it an indirect read/write
.0841	b0 19		bcs $085c			bcs 	NXIndirectLoadStore
.0843	4a		lsr a				lsr 	a 							; / 4, so $48 => $12,
.0844	4a		lsr a				lsr 	a
.0845	29 0e		and #$0e			and 	#$0E
.0847	da		phx				phx 								; get ready to jump
.0848	aa		tax				tax
.0849	7c 4c 08	jmp ($084c,x)			jmp 	(ReadWriteVectors,x) 		; go via the jump table.
.084c					ReadWriteVectors:
>084c	aa 14						.word 	ReadFloatCommand			; read float
>084e	85 1a						.word 	WriteFloatCommand 			; write float
>0850	e6 14						.word 	ReadIntegerCommand 			; read integer
>0852	c1 1a						.word 	WriteIntegerCommand 		; write integer
>0854	2b 15						.word 	ReadStringCommand 			; read string
>0856	00 1b						.word 	WriteStringCommand 			; write string
>0858	2a 0c						.word 	Unimplemented
>085a	2a 0c						.word 	Unimplemented
.085c					NXIndirectLoadStore:
.085c	29 07		and #$07			and 	#7
.085e	0a		asl a				asl 	a
.085f	da		phx				phx
.0860	aa		tax				tax
.0861	7c 64 08	jmp ($0864,x)			jmp 	(IndirectVectors,x)
.0864					IndirectVectors:
>0864	e0 0e						.word 	IndFloatRead 				; float read
>0866	f4 0e						.word 	IndInt16Read 				; int16 read
>0868	08 0f						.word 	IndStringRead 				; string read
>086a	2a 0c						.word 	Unimplemented
>086c	1c 0f						.word 	IndFloatWrite				; float write
>086e	30 0f						.word 	IndInt16Write 				; int16 write
>0870	44 0f						.word 	IndStringWrite 				; string write
>0872	2a 0c						.word 	Unimplemented
.0874					PushByteCommand:
.0874	fa		plx				plx
.0875	b1 28		lda ($28),y			lda 	(codePtr),y 				; get byte to write.
.0877	c8		iny				iny
.0878					PushByteA:
.0878	e8		inx				inx 								; push constant on stack
.0879	95 3e		sta $3e,x			sta 	NSMantissa0,x 				; save byte
.087b	74 4a		stz $4a,x			stz 	NSMantissa1,x 				; clear MSB
.087d					ClearRestWord:
.087d	74 56		stz $56,x			stz 	NSMantissa2,x 				; zero upper bytes, exponent, make iFloat32
.087f	74 62		stz $62,x			stz 	NSMantissa3,x
.0881	74 6e		stz $6e,x			stz 	NSExponent,x
.0883	74 32		stz $32,x			stz 	NSStatus,x
.0885	80 af		bra $0836			bra 	NextCommand
.0887					PushWordCommand:
.0887	fa		plx				plx
.0888	e8		inx				inx
.0889	b1 28		lda ($28),y			lda 	(codePtr),y 				; word to stack
.088b	c8		iny				iny
.088c	95 3e		sta $3e,x			sta 	NSMantissa0,x
.088e	b1 28		lda ($28),y			lda 	(codePtr),y
.0890	c8		iny				iny
.0891	95 4a		sta $4a,x			sta 	NSMantissa1,x
.0893	80 e8		bra $087d			bra 	ClearRestWord 				; handle everything else.
.0895					NXCommand:
.0895	c8		iny				iny 								; consume command.
.0896	10 03		bpl $089b			bpl 	_NXCommandNoFixUp
.0898	20 a1 08	jsr $08a1			jsr 	FixUpY
.089b					_NXCommandNoFixUp:
.089b	0a		asl a				asl 	a 							; shift left
.089c	da		phx				phx 								; save SP on stack
.089d	aa		tax				tax				 					; and jump indirect
.089e	7c 66 19	jmp ($1966,x)			jmp 	(VectorTable,x)
.08a1					FixUpY:
.08a1	48		pha				pha
.08a2	98		tya				tya
.08a3	18		clc				clc
.08a4	65 28		adc $28				adc 	codePtr
.08a6	85 28		sta $28				sta 	codePtr
.08a8	90 02		bcc $08ac			bcc 	_NoCPCarry
.08aa	e6 29		inc $29				inc 	codePtr+1
.08ac					_NoCPCarry:
.08ac	a0 00		ldy #$00			ldy 	#0
.08ae	68		pla				pla
.08af	60		rts				rts
.0404					runtimeHigh:
>0404							.fill 	1
.0405					storeStartHigh:
>0405							.fill 	1
.0406					storeEndHigh:
>0406							.fill 	1
.0407					variableStartPage:
>0407							.fill 	1
.0408					Runtime6502SP:
>0408							.fill 	1
.08b0					AbsoluteTOS:
.08b0	fa		plx				plx
.08b1	74 32		stz $32,x			stz 	NSStatus,x 					; dereferenced so just clear the status byte.
.08b3	4c 36 08	jmp $0836			jmp 	NextCommand
.08b6					CommandVarSpace:
.08b6	fa		plx				plx
.08b7	b1 28		lda ($28),y			lda 	(codePtr),y					; 3 byte opcode, which is 'free' memory in variable area.
.08b9	85 26		sta $26				sta 	availableMemory
.08bb	c8		iny				iny
.08bc	b1 28		lda ($28),y			lda 	(codePtr),y
.08be	18		clc				clc
.08bf	6d 07 04	adc $0407			adc 	variableStartPage			; offset to actual address.
.08c2	85 27		sta $27				sta 	availableMemory+1
.08c4	c8		iny				iny
.08c5	4c 36 08	jmp $0836			jmp 	NextCommand
.0026					availableMemory:
>0026							.fill 	2
.08c8					BinaryAnd:
.08c8	fa		plx				plx
.08c9	38		sec				sec
.08ca	80 02		bra $08ce			bra 	AndOrCommon
.08cc					BinaryOr:
.08cc	fa		plx				plx
.08cd	18		clc				clc
.08ce					AndOrCommon:
.08ce	08		php				php 								; save AND/OR flag
.08cf	20 1b 10	jsr $101b			jsr 	GetInteger16Bit
.08d2	ca		dex				dex
.08d3	20 1b 10	jsr $101b			jsr 	GetInteger16Bit
.08d6	28		plp				plp
.08d7	90 0e		bcc $08e7			bcc 	_AOCOrCode
.08d9	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; AND code
.08db	35 3f		and $3f,x			and		NSMantissa0+1,x
.08dd	95 3e		sta $3e,x			sta 	NSMantissa0,x
.08df	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.08e1	35 4b		and $4b,x			and		NSMantissa1+1,x
.08e3	95 4a		sta $4a,x			sta 	NSMantissa1,x
.08e5	80 0c		bra $08f3			bra 	_AOCComplete
.08e7					_AOCOrCode:
.08e7	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; OR code
.08e9	15 3f		ora $3f,x			ora		NSMantissa0+1,x
.08eb	95 3e		sta $3e,x			sta 	NSMantissa0,x
.08ed	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.08ef	15 4b		ora $4b,x			ora		NSMantissa1+1,x
.08f1	95 4a		sta $4a,x			sta 	NSMantissa1,x
.08f3					_AOCComplete:
.08f3	74 32		stz $32,x			stz 	NSStatus,x 					; make integer ?
.08f5	34 4a		bit $4a,x			bit 	NSMantissa1,x 				; result is -ve
.08f7	10 07		bpl $0900			bpl 	_AOCExit
.08f9	20 2b 10	jsr $102b			jsr 	Negate16Bit 				; 2's complement
.08fc	a9 80		lda #$80			lda 	#$80 						; make it -ve
.08fe	95 32		sta $32,x			sta 	NSStatus,x
.0900					_AOCExit:
.0900	4c 36 08	jmp $0836			jmp 	NextCommand
.0903					ArrayConvert:
.0903	fa		plx				plx
.0904	5a		phy				phy
.0905	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.0907	85 2e		sta $2e				sta 	zTemp1
.0909	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.090b	18		clc				clc
.090c	6d 07 04	adc $0407			adc 	variableStartPage
.090f	85 2f		sta $2f				sta 	zTemp1+1
.0911	ca		dex				dex 								; count of indices to follow -> zTemp2
.0912	20 15 10	jsr $1015			jsr 	GetInteger8Bit
.0915	85 30		sta $30				sta 	zTemp2 						; subtract from stack.
.0917	8a		txa				txa
.0918	38		sec				sec
.0919	e5 30		sbc $30				sbc 	zTemp2
.091b	aa		tax				tax
.091c	da		phx				phx 								; stack points at the first index, which will be replaced.
.091d					_ACIndexLoop:
.091d	20 5d 22	jsr $225d			jsr 	FloatIntegerPart 			; integer array index
.0920	20 1b 10	jsr $101b			jsr 	GetInteger16Bit 			; get the index => zTemp0
.0923	a0 01		ldy #$01			ldy 	#1 							; compare against the index count.
.0925	a5 2c		lda $2c				lda 	zTemp0
.0927	d2 2e		cmp ($2e)			cmp 	(zTemp1)
.0929	a5 2d		lda $2d				lda 	zTemp0+1
.092b	f1 2e		sbc ($2e),y			sbc 	(zTemp1),y
.092d	b0 79		bcs $09a8			bcs 	_ACBadIndex 				; index error.
.092f	c6 30		dec $30				dec 	zTemp2 						; decrement count, if zero, then innermost level
.0931	f0 29		beq $095c			beq 	_ACInnerLevel
.0933	a0 02		ldy #$02			ldy 	#2 							; check sub index.
.0935	b1 2e		lda ($2e),y			lda 	(zTemp1),y
.0937	10 6f		bpl $09a8			bpl 	_ACBadIndex
.0939	06 2c		asl $2c				asl 	zTemp0 						; double the index and add it to the base address
.093b	26 2d		rol $2d				rol 	zTemp0+1
.093d	18		clc				clc
.093e	a5 2c		lda $2c				lda		zTemp0
.0940	65 2e		adc $2e				adc 	zTemp1
.0942	85 2c		sta $2c				sta 	zTemp0
.0944	a5 2d		lda $2d				lda		zTemp0+1
.0946	65 2f		adc $2f				adc 	zTemp1+1
.0948	85 2d		sta $2d				sta 	zTemp0+1
.094a	a0 03		ldy #$03			ldy 	#3 							; we offset by 3 because 3 at entry, now get the address
.094c	b1 2c		lda ($2c),y			lda 	(zTemp0),y 					; into zTemp1 as a real address, not offset
.094e	85 2e		sta $2e				sta 	zTemp1
.0950	c8		iny				iny
.0951	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.0953	18		clc				clc
.0954	6d 07 04	adc $0407			adc 	variableStartPage
.0957	85 2f		sta $2f				sta 	zTemp1+1
.0959	e8		inx				inx 								; next index
.095a	80 c1		bra $091d			bra 	_ACIndexLoop
.095c					_ACInnerLevel:
.095c	a0 02		ldy #$02			ldy 	#2
.095e	b1 2e		lda ($2e),y			lda 	(zTemp1),y
.0960	30 46		bmi $09a8			bmi 	_ACBadIndex 				; it has sub arrays, so bad index.
.0962	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16 		; check if it is an iFloat
.0964	c9 00		cmp #$00			cmp 	#NSSIFloat
.0966	d0 13		bne $097b			bne 	_ACNotFloat
.0968	a5 2d		lda $2d				lda 	zTemp0+1 					; double and add zTemp0 (x3)
.096a	48		pha				pha
.096b	a5 2c		lda $2c				lda 	zTemp0
.096d	06 2c		asl $2c				asl 	zTemp0 						; x 2
.096f	26 2d		rol $2d				rol 	zTemp0+1
.0971	18		clc				clc 								; add back x 3
.0972	65 2c		adc $2c				adc 	zTemp0
.0974	85 2c		sta $2c				sta 	zTemp0
.0976	68		pla				pla
.0977	65 2d		adc $2d				adc 	zTemp0+1
.0979	85 2d		sta $2d				sta 	zTemp0+1
.097b					_ACNotFloat:
.097b	06 2c		asl $2c				asl 	zTemp0 						; x 2 or x 6 depending.
.097d	26 2d		rol $2d				rol 	zTemp0+1
.097f	18		clc				clc
.0980	a5 2c		lda $2c				lda 	zTemp0
.0982	69 03		adc #$03			adc 	#3
.0984	85 2c		sta $2c				sta 	zTemp0
.0986	90 02		bcc $098a			bcc 	_ACNoCarry
.0988	e6 2d		inc $2d				inc 	zTemp0+1
.098a					_ACNoCarry:
.098a	fa		plx				plx 								; X points to first slot of array parameters
.098b	18		clc				clc
.098c	a5 2c		lda $2c				lda 	zTemp0
.098e	65 2e		adc $2e				adc 	zTemp1
.0990	95 3e		sta $3e,x			sta 	NSMantissa0,x
.0992	a5 2d		lda $2d				lda 	zTemp0+1
.0994	65 2f		adc $2f				adc 	zTemp1+1
.0996	38		sec				sec
.0997	ed 07 04	sbc $0407			sbc 	variableStartPage
.099a	95 4a		sta $4a,x			sta 	NSMantissa1,x
.099c	74 56		stz $56,x			stz 	NSMantissa2,x
.099e	74 62		stz $62,x			stz 	NSMantissa3,x
.09a0	74 32		stz $32,x			stz 	NSStatus,x
.09a2	74 6e		stz $6e,x			stz 	NSExponent,x
.09a4	7a		ply				ply 	 							; restore code pointer
.09a5	4c 36 08	jmp $0836			jmp 	NextCommand
.09a8					_ACBadIndex:
.09a8	4c b7 1f	jmp $1fb7		jmp	ErrorV_index
.09ab					UnaryAsc:
.09ab	fa		plx				plx
.09ac	5a		phy				phy
.09ad	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; string address.
.09af	85 2c		sta $2c				sta 	zTemp0
.09b1	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.09b3	85 2d		sta $2d				sta 	zTemp0+1
.09b5	b2 2c		lda ($2c)			lda 	(zTemp0) 					; if empty string return zero
.09b7	f0 06		beq $09bf			beq 	_UAExit
.09b9	5a		phy				phy 								; otherwise first character
.09ba	a0 01		ldy #$01			ldy 	#1
.09bc	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.09be	7a		ply				ply
.09bf					_UAExit:
.09bf	20 24 26	jsr $2624			jsr 	FloatSetByte
.09c2	7a		ply				ply
.09c3	4c 36 08	jmp $0836			jmp 	NextCommand
.09c6					CommandAssert:
.09c6	fa		plx				plx
.09c7	e0 00		cpx #$00			cpx 	#0 							; check only one element on stack
.09c9	d0 09		bne $09d4			bne 	_CAFail
.09cb	20 44 26	jsr $2644			jsr 	FloatIsZero 				; is it zero ?
.09ce	f0 04		beq $09d4			beq 	_CAFail
.09d0	ca		dex				dex
.09d1	4c 36 08	jmp $0836			jmp 	NextCommand
.09d4					_CAFail:
.09d4	4c 10 1f	jmp $1f10		jmp	ErrorV_assert
.09d7					X16_Audio_Parameters8_16:
.09d7	20 dd 09	jsr $09dd			jsr 	X16_Audio_Parameters8_8
.09da	a4 4b		ldy $4b				ldy 	NSMantissa1+1
.09dc	60		rts				rts
.09dd					X16_Audio_Parameters8_8:
.09dd	a2 01		ldx #$01			ldx 	#1
.09df	20 5d 22	jsr $225d			jsr 	FloatIntegerPart
.09e2	ca		dex				dex
.09e3	20 5d 22	jsr $225d			jsr 	FloatIntegerPart
.09e6	20 15 10	jsr $1015			jsr 	GetInteger8Bit
.09e9	a6 3f		ldx $3f				ldx 	NSMantissa0+1
.09eb	a0 00		ldy #$00			ldy 	#0
.09ed	60		rts				rts
.09ee					X16_Audio_Parameters8_String:
.09ee	20 d7 09	jsr $09d7			jsr 	X16_Audio_Parameters8_16 	; get as numbers.
.09f1	da		phx				phx 								; set the voice
.09f2	5a		phy				phy
.09f3	20 6e ff	jsr $ff6e			jsr 	X16_JSRFAR
.09f6	20 0c c0	jsr $c00c			jsr 	X16A_bas_playstringvoice
>09f9	0a						.byte 	X16_AudioCodeBank
.09fa	7a		ply				ply
.09fb	fa		plx				plx
.09fc	86 2c		stx $2c				stx 	zTemp0
.09fe	84 2d		sty $2d				sty 	zTemp0+1
.0a00	b2 2c		lda ($2c)			lda 	(zTemp0) 					; read length
.0a02	e8		inx				inx 								; point YX to first character.
.0a03	d0 01		bne $0a06			bne 	_X16APSSkip
.0a05	c8		iny				iny
.0a06					_X16APSSkip:
.0a06	60		rts				rts
.0a07					Unary16Bin:
.0a07	fa		plx				plx
.0a08	20 1b 10	jsr $101b			jsr 	GetInteger16Bit				; 16 bit int
.0a0b	a9 10		lda #$10			lda 	#16 						; allocate / set 16 bytes.
.0a0d	20 e5 16	jsr $16e5			jsr 	StringAllocTemp
.0a10	a5 2d		lda $2d				lda 	zTemp0+1
.0a12	f0 03		beq $0a17			beq 	_UBNoHigh
.0a14	20 1f 0a	jsr $0a1f			jsr 	_UBWriteBinary
.0a17					_UBNoHigh:
.0a17	a5 2c		lda $2c				lda 	zTemp0
.0a19	20 1f 0a	jsr $0a1f			jsr 	_UBWriteBinary
.0a1c	4c 36 08	jmp $0836			jmp 	NextCommand
.0a1f					_UBWriteBinary:
.0a1f	5a		phy				phy
.0a20	a0 08		ldy #$08			ldy 	#8
.0a22					_UBWLoop:
.0a22	0a		asl a				asl 	a
.0a23	48		pha				pha
.0a24	a9 00		lda #$00			lda  	#0
.0a26	69 30		adc #$30			adc 	#48
.0a28	20 0e 17	jsr $170e			jsr 	StringWriteChar
.0a2b	68		pla				pla
.0a2c	88		dey				dey
.0a2d	d0 f3		bne $0a22			bne 	_UBWLoop
.0a2f	7a		ply				ply
.0a30	60		rts				rts
.0a31					PrintCharacterX:
.0a31	fa		plx				plx
.0a32	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.0a34	ca		dex				dex
.0a35	20 42 13	jsr $1342			jsr 	VectorPrintCharacter
.0a38	4c 36 08	jmp $0836			jmp 	NextCommand
.0a3b					UnaryChr:
.0a3b	fa		plx				plx
.0a3c	20 15 10	jsr $1015			jsr 	GetInteger8Bit 				; get integer to convert.
.0a3f	48		pha				pha 								; save it and allocate for it
.0a40	a9 01		lda #$01			lda 	#1 							; 1 character
.0a42	20 e5 16	jsr $16e5			jsr 	StringAllocTemp
.0a45	a9 01		lda #$01			lda 	#1 							; length 1.
.0a47	92 22		sta ($22)			sta 	(zsTemp)
.0a49	68		pla				pla 								; character code makes string.
.0a4a	5a		phy				phy
.0a4b	a0 01		ldy #$01			ldy 	#1
.0a4d	91 22		sta ($22),y			sta 	(zsTemp),y
.0a4f	7a		ply				ply
.0a50	4c 36 08	jmp $0836			jmp 	NextCommand
.0a53					CommandClr:
.0a53	fa		plx				plx
.0a54	20 5a 0a	jsr $0a5a			jsr 	ClearMemory
.0a57	4c 36 08	jmp $0836			jmp 	NextCommand
.0a5a					ClearMemory:
.0a5a	ad 05 04	lda $0405			lda 	storeStartHigh 							; erase the work area
.0a5d	85 2d		sta $2d				sta 	zTemp0+1
.0a5f	64 2c		stz $2c				stz 	zTemp0
.0a61	5a		phy				phy
.0a62	a0 00		ldy #$00			ldy 	#0
.0a64					_ClearLoop1:
.0a64	a9 00		lda #$00			lda 	#0
.0a66	91 2c		sta ($2c),y			sta 	(zTemp0),y
.0a68	c8		iny				iny
.0a69	d0 f9		bne $0a64			bne 	_ClearLoop1
.0a6b	e6 2d		inc $2d				inc 	zTemp0+1
.0a6d	a5 2d		lda $2d				lda 	zTemp0+1
.0a6f	cd 06 04	cmp $0406			cmp 	storeEndHigh
.0a72	d0 f0		bne $0a64			bne 	_ClearLoop1
.0a74	38		sec				sec 											; stack space = number of pages in total / 4
.0a75	ad 06 04	lda $0406			lda 	storeEndHigh
.0a78	ed 05 04	sbc $0405			sbc		storeStartHigh
.0a7b	4a		lsr a				lsr 	a
.0a7c	4a		lsr a				lsr 	a
.0a7d	d0 02		bne $0a81			bne 	_NotEmpty 								; at least 1 !
.0a7f	a9 01		lda #$01			lda 	#1
.0a81					_NotEmpty:
.0a81	38		sec				sec 											; subtract from high to give string high memory
.0a82	49 ff		eor #$ff			eor 	#$FF
.0a84	6d 06 04	adc $0406			adc 	storeEndHigh
.0a87	8d 03 04	sta $0403			sta 	stringHighMemory+1
.0a8a	9c 02 04	stz $0402			stz 	stringHighMemory
.0a8d	9c 69 05	stz $0569			stz 	stringInitialised 						; string system not initialised
.0a90	ad 05 04	lda $0405			lda 	storeStartHigh 							; stack at end of start memory.
.0a93	3a		dec a				dec 	a
.0a94	85 25		sta $25				sta 	runtimeStackPtr+1
.0a96	a9 ff		lda #$ff			lda 	#$FF
.0a98	85 24		sta $24				sta 	runtimeStackPtr
.0a9a	a9 ff		lda #$ff			lda 	#$FF 									; duff marker in case we try to remove it.
.0a9c	92 24		sta ($24)			sta 	(runtimeStackPtr)
.0a9e	7a		ply				ply
.0a9f	60		rts				rts
.0aa0					CompareStrings:
.0aa0	fa		plx				plx
.0aa1	ca		dex				dex
.0aa2	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; copy strings to zTemp0 and zTemp1
.0aa4	85 2c		sta $2c				sta 	zTemp0
.0aa6	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.0aa8	85 2d		sta $2d				sta 	zTemp0+1
.0aaa	b5 3f		lda $3f,x			lda 	NSMantissa0+1,x
.0aac	85 2e		sta $2e				sta 	zTemp1
.0aae	b5 4b		lda $4b,x			lda 	NSMantissa1+1,x
.0ab0	85 2f		sta $2f				sta 	zTemp1+1
.0ab2	da		phx				phx
.0ab3	5a		phy				phy
.0ab4	b2 2c		lda ($2c)			lda 	(zTemp0)					; work out number to compare
.0ab6	d2 2e		cmp ($2e)			cmp 	(zTemp1)
.0ab8	90 02		bcc $0abc			bcc 	_CSNIsSmallest 				; as min(len(s1),len(s2))
.0aba	b2 2e		lda ($2e)			lda 	(zTemp1)
.0abc					_CSNIsSmallest:
.0abc	aa		tax				tax 								; count in X
.0abd	f0 0c		beq $0acb			beq 	_CSNMatches 				; if zero already matches as far as we can go.
.0abf	a0 00		ldy #$00			ldy 	#0 							; start from offset 1
.0ac1					_CSNCompareString:
.0ac1	c8		iny				iny 								; pre increment
.0ac2	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.0ac4	d1 2e		cmp ($2e),y			cmp 	(zTemp1),y
.0ac6	d0 0a		bne $0ad2			bne 	_CSNDifferent 				; numbers are different.
.0ac8	ca		dex				dex
.0ac9	d0 f6		bne $0ac1			bne 	_CSNCompareString 			; compare common characters in two strings.
.0acb					_CSNMatches:
.0acb	38		sec				sec
.0acc	b2 2c		lda ($2c)			lda 	(zTemp0)					; compare lengths
.0ace	f2 2e		sbc ($2e)			sbc 	(zTemp1)
.0ad0	f0 06		beq $0ad8			beq 	_CSNSExit 					; if zero, then strings match and exit.
.0ad2					_CSNDifferent:
.0ad2	a9 ff		lda #$ff			lda 	#$FF
.0ad4	90 02		bcc $0ad8			bcc 	_CSNSExit
.0ad6	a9 01		lda #$01			lda 	#$01
.0ad8					_CSNSExit:
.0ad8	7a		ply				ply
.0ad9	fa		plx				plx
.0ada	c9 00		cmp #$00			cmp 	#0 							; set the flags.
.0adc	20 24 26	jsr $2624			jsr 	FloatSetByte 				; output the byte
.0adf	4c 36 08	jmp $0836			jmp 	NextCommand
.0ae2					StringConcrete:
.0ae2	9c 69 05	stz $0569			stz 	stringInitialised	 		; initialise next usage
.0ae5	84 31		sty $31				sty 	zTemp2+1 					; save pointer to new string
.0ae7	85 30		sta $30				sta 	zTemp2
.0ae9	b2 30		lda ($30)			lda 	(zTemp2) 					; length required
.0aeb	4a		lsr a				lsr 	a 							; allow half as much for expansion.
.0aec	18		clc				clc
.0aed	72 30		adc ($30)			adc 	(zTemp2)
.0aef	90 02		bcc $0af3			bcc 	_SCNoOverflow
.0af1	a9 ff		lda #$ff			lda 	#255
.0af3					_SCNoOverflow:
.0af3	c9 0a		cmp #$0a			cmp 	#10 						; and a minimum of 10
.0af5	b0 02		bcs $0af9			bcs 	_SCNoMinimum
.0af7	a9 0a		lda #$0a			lda 	#10
.0af9					_SCNoMinimum:
.0af9	85 2e		sta $2e				sta 	zTemp1 						; save max length.
.0afb	38		sec				sec
.0afc	ad 02 04	lda $0402			lda		stringHighMemory 			; subtract max length from high memory.
.0aff	e5 2e		sbc $2e				sbc 	zTemp1
.0b01	a8		tay				tay
.0b02	ad 03 04	lda $0403			lda 	stringHighMemory+1
.0b05	e9 00		sbc #$00			sbc 	#0
.0b07	48		pha				pha
.0b08	38		sec				sec 								; subtract 3 more
.0b09	98		tya				tya
.0b0a	e9 03		sbc #$03			sbc 	#3
.0b0c	8d 02 04	sta $0402			sta 	stringHighMemory 			; to string high memory/zsTemp
.0b0f	85 22		sta $22				sta 	zsTemp
.0b11	68		pla				pla
.0b12	e9 00		sbc #$00			sbc 	#0
.0b14	8d 03 04	sta $0403			sta 	stringHighMemory+1
.0b17	85 23		sta $23				sta 	zsTemp+1
.0b19	a5 2e		lda $2e				lda 	zTemp1 						; set max length.
.0b1b	92 22		sta ($22)			sta 	(zsTemp)
.0b1d	a0 01		ldy #$01			ldy 	#1 							; clear control byte.
.0b1f	a9 00		lda #$00			lda 	#0
.0b21	91 22		sta ($22),y			sta 	(zsTemp),y
.0b23	a5 22		lda $22				lda 	zsTemp 						; new empty string in YA.
.0b25	a4 23		ldy $23				ldy 	zsTemp+1
.0b27	60		rts				rts
.0b28					CommandXData:
.0b28	fa		plx				plx
.0b29	98		tya				tya 								; data length +1 added to Y
.0b2a	38		sec				sec
.0b2b	71 28		adc ($28),y			adc 	(codePtr),y 				; next instruction
.0b2d	a8		tay				tay
.0b2e	4c 36 08	jmp $0836			jmp 	NextCommand
.0b31					CommandXDIM:
.0b31	fa		plx				plx
.0b32	5a		phy				phy
.0b33	20 15 10	jsr $1015			jsr 	GetInteger8Bit 				; get the type we are building for (bits 6 & 5)
.0b36	8d 09 04	sta $0409			sta 	dimType
.0b39	ca		dex				dex 								; this is the number of indices
.0b3a	20 15 10	jsr $1015			jsr 	GetInteger8Bit
.0b3d	85 2e		sta $2e				sta 	zTemp1 						; subtract n from X so X points at the *first*
.0b3f	8a		txa				txa 								; dimension.
.0b40	38		sec				sec
.0b41	e5 2e		sbc $2e				sbc 	zTemp1
.0b43	aa		tax				tax
.0b44	a5 2e		lda $2e				lda 	zTemp1 						; number of indices.
.0b46	20 5a 0b	jsr $0b5a			jsr 	DIMCreateOneLevel 			; create one at this level
.0b49	95 3e		sta $3e,x			sta 	NSMantissa0,x 				; set it as a return address as an integer
.0b4b	98		tya				tya
.0b4c	95 4a		sta $4a,x			sta 	NSMantissa1,x
.0b4e	74 56		stz $56,x			stz 	NSMantissa2,x
.0b50	74 62		stz $62,x			stz 	NSMantissa3,x
.0b52	74 32		stz $32,x			stz 	NSStatus,x
.0b54	74 6e		stz $6e,x			stz 	NSExponent,x
.0b56	7a		ply				ply
.0b57	4c 36 08	jmp $0836			jmp 	NextCommand
.0b5a					DIMCreateOneLevel:
.0b5a	a4 26		ldy $26				ldy 	availableMemory 			; push the start of this block on the stack.
.0b5c	5a		phy				phy
.0b5d	a4 27		ldy $27				ldy 	availableMemory+1
.0b5f	5a		phy				phy
.0b60	a8		tay				tay 			 					; save current level into Y
.0b61	20 1b 10	jsr $101b			jsr		GetInteger16Bit 			; size of dimension to zTemp0
.0b64	e6 2c		inc $2c				inc 	zTemp0 						; bump the size of the dimension as we need one more
.0b66	d0 02		bne $0b6a			bne 	_DCOLNoCarry
.0b68	e6 2d		inc $2d				inc 	zTemp0+1
.0b6a					_DCOLNoCarry:
.0b6a	a5 2c		lda $2c				lda 	zTemp0 						; write out the +1 size of the dimension
.0b6c	20 0d 0c	jsr $0c0d			jsr 	DIMWriteByte
.0b6f	a5 2d		lda $2d				lda 	zTemp0+1
.0b71	20 0d 0c	jsr $0c0d			jsr 	DIMWriteByte
.0b74	ad 09 04	lda $0409			lda 	dimType 					; get type information
.0b77	29 7f		and #$7f			and 	#$7F
.0b79	c0 01		cpy #$01			cpy 	#1
.0b7b	f0 02		beq $0b7f			beq 	_DCOLNoSubLevel
.0b7d	09 80		ora #$80			ora 	#$80 						; set sublevel bit if there is one.
.0b7f					_DCOLNoSubLevel:
.0b7f	20 0d 0c	jsr $0c0d			jsr 	DIMWriteByte
.0b82	a5 26		lda $26				lda 	availableMemory
.0b84	85 2e		sta $2e				sta 	zTemp1
.0b86	a5 27		lda $27				lda 	availableMemory+1
.0b88	85 2f		sta $2f				sta 	zTemp1+1
.0b8a	a5 2c		lda $2c				lda 	zTemp0
.0b8c	85 30		sta $30				sta 	zTemp2
.0b8e	a5 2d		lda $2d				lda 	zTemp0+1
.0b90	85 31		sta $31				sta 	zTemp2+1
.0b92					_DCOLFillArray:
.0b92	20 f1 0b	jsr $0bf1			jsr 	DIMWriteElement 			; write out an element, could be a sub-level or individual data
.0b95	a5 2c		lda $2c				lda 	zTemp0 						; decrement one from count.
.0b97	d0 02		bne $0b9b			bne 	_DCOLNoBorrow
.0b99	c6 2d		dec $2d				dec 	zTemp0+1
.0b9b					_DCOLNoBorrow:
.0b9b	c6 2c		dec $2c				dec 	zTemp0
.0b9d	a5 2c		lda $2c				lda 	zTemp0 						; until completed.
.0b9f	05 2d		ora $2d				ora 	zTemp0+1
.0ba1	d0 ef		bne $0b92			bne 	_DCOLFillArray
.0ba3	c0 01		cpy #$01			cpy 	#1
.0ba5	f0 42		beq $0be9			beq 	_DCOLExit
.0ba7					_DCOLRecursionLoop:
.0ba7	da		phx				phx 								; save XY
.0ba8	5a		phy				phy
.0ba9	a5 2e		lda $2e				lda 	zTemp1 						; push zTemp1 (position) zTemp2 (count)
.0bab	48		pha				pha
.0bac	a5 2f		lda $2f				lda 	zTemp1+1
.0bae	48		pha				pha
.0baf	a5 30		lda $30				lda 	zTemp2
.0bb1	48		pha				pha
.0bb2	a5 31		lda $31				lda 	zTemp2+1
.0bb4	48		pha				pha
.0bb5	88		dey				dey  								; lower level -> A
.0bb6	98		tya				tya
.0bb7	e8		inx				inx 								; next index size
.0bb8	20 5a 0b	jsr $0b5a			jsr 	DIMCreateOneLevel 			; create a level, return in YA
.0bbb	fa		plx				plx 								; restore zTemp2 (count) and zTemp1 (position)
.0bbc	86 31		stx $31				stx 	zTemp2+1
.0bbe	fa		plx				plx
.0bbf	86 30		stx $30				stx 	zTemp2
.0bc1	fa		plx				plx
.0bc2	86 2f		stx $2f				stx 	zTemp1+1
.0bc4	fa		plx				plx
.0bc5	86 2e		stx $2e				stx 	zTemp1
.0bc7	92 2e		sta ($2e)			sta 	(zTemp1) 					; write out position
.0bc9	98		tya				tya
.0bca	a0 01		ldy #$01			ldy 	#1
.0bcc	91 2e		sta ($2e),y			sta 	(zTemp1),y
.0bce	7a		ply				ply 								; restore XY
.0bcf	fa		plx				plx
.0bd0	18		clc				clc
.0bd1	a5 2e		lda $2e				lda 	zTemp1 						; add 2 to zTemp1
.0bd3	69 02		adc #$02			adc 	#2
.0bd5	85 2e		sta $2e				sta 	zTemp1
.0bd7	90 02		bcc $0bdb			bcc 	_DCOLRNoCarry
.0bd9	e6 2f		inc $2f				inc 	zTemp1+1
.0bdb					_DCOLRNoCarry:
.0bdb	a5 30		lda $30				lda 	zTemp2 						; decrement one from count in zTemp2
.0bdd	d0 02		bne $0be1			bne 	_DCOLRNoBorrow
.0bdf	c6 31		dec $31				dec 	zTemp2+1
.0be1					_DCOLRNoBorrow:
.0be1	c6 30		dec $30				dec 	zTemp2
.0be3	a5 30		lda $30				lda 	zTemp2 						; until completed.
.0be5	05 31		ora $31				ora 	zTemp2+1
.0be7	d0 be		bne $0ba7			bne 	_DCOLRecursionLoop
.0be9					_DCOLExit:
.0be9	68		pla				pla 								; get MSB, make offset again
.0bea	38		sec				sec
.0beb	ed 07 04	sbc $0407			sbc 	variableStartPage
.0bee	a8		tay				tay
.0bef	68		pla				pla 								; YA now contains offset address.
.0bf0	60		rts				rts
.0bf1					DIMWriteElement:
.0bf1	da		phx				phx
.0bf2	a2 02		ldx #$02			ldx	 	#2 							; work out size is 2 or 6
.0bf4	c0 01		cpy #$01			cpy 	#1 							; do we have a sub level, if so 2.
.0bf6	d0 0b		bne $0c03			bne 	_DIMWENotFloat
.0bf8	ad 09 04	lda $0409			lda 	dimType
.0bfb	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16
.0bfd	c9 00		cmp #$00			cmp 	#NSSIFloat
.0bff	d0 02		bne $0c03			bne 	_DIMWENotFloat
.0c01	a2 06		ldx #$06			ldx 	#6
.0c03					_DIMWENotFloat:
.0c03	a9 00		lda #$00			lda 	#0
.0c05	20 0d 0c	jsr $0c0d			jsr 	DIMWriteByte
.0c08	ca		dex				dex
.0c09	d0 f8		bne $0c03			bne 	_DIMWENotFloat
.0c0b	fa		plx				plx
.0c0c	60		rts				rts
.0c0d					DIMWriteByte:
.0c0d	92 26		sta ($26)			sta 	(availableMemory)
.0c0f	e6 26		inc $26				inc 	availableMemory
.0c11	d0 0b		bne $0c1e			bne 	_DIMWBSkip
.0c13	e6 27		inc $27				inc 	availableMemory+1
.0c15	48		pha				pha
.0c16	a5 27		lda $27				lda 	availableMemory+1 			; check out of memory
.0c18	cd 03 04	cmp $0403			cmp 	stringHighMemory+1
.0c1b	b0 02		bcs $0c1f			bcs 	_DIMWBMemory
.0c1d	68		pla				pla
.0c1e					_DIMWBSkip:
.0c1e	60		rts				rts
.0c1f					_DIMWBMemory:
.0c1f	4c ca 1f	jmp $1fca		jmp	ErrorV_memory
.0409					dimType:
>0409							.fill 	1
.0c22					CommandEnd:
.0c22	fa		plx				plx
.0c23	86 2c		stx $2c				stx 	zTemp0
.0c25					EndRuntime:
.0c25	ae 08 04	ldx $0408			ldx 	Runtime6502SP 				; set up the stack pointer
.0c28	9a		txs				txs
.0c29	60		rts				rts
.0c2a					Unimplemented:
.0c2a	4c fd 1e	jmp $1efd			jmp 	ErrorV_unimplemented
.0c2d					RuntimeErrorHandler:
.0c2d	98		tya				tya
.0c2e	18		clc				clc
.0c2f	65 28		adc $28				adc 	codePtr
.0c31	85 28		sta $28				sta 	codePtr
.0c33	90 02		bcc $0c37			bcc 	_EHNoCarry
.0c35	e6 29		inc $29				inc 	codePtr+1
.0c37					_EHNoCarry:
.0c37	68		pla				pla
.0c38	7a		ply				ply
.0c39	85 2c		sta $2c				sta 	zTemp0
.0c3b	84 2d		sty $2d				sty 	zTemp0+1
.0c3d	a2 00		ldx #$00			ldx 	#0 							; output to channel #0
.0c3f	a0 01		ldy #$01			ldy 	#1
.0c41					_EHDisplayMsg:
.0c41	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.0c43	20 5a 1c	jsr $1c5a			jsr 	XPrintCharacterToChannel
.0c46	c8		iny				iny
.0c47	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.0c49	d0 f6		bne $0c41			bne 	_EHDisplayMsg
.0c4b	a9 20		lda #$20			lda 	#32
.0c4d	20 5a 1c	jsr $1c5a			jsr 	XPrintCharacterToChannel
.0c50	a9 40		lda #$40			lda 	#64
.0c52	20 5a 1c	jsr $1c5a			jsr 	XPrintCharacterToChannel
.0c55	a9 20		lda #$20			lda 	#32
.0c57	20 5a 1c	jsr $1c5a			jsr 	XPrintCharacterToChannel
.0c5a	20 60 0c	jsr $0c60			jsr 	EHDisplayCodePtr
.0c5d	4c 25 0c	jmp $0c25			jmp 	EndRuntime
.0c60					EHDisplayCodePtr:
.0c60	a9 24		lda #$24			lda 	#'$'
.0c62	20 5a 1c	jsr $1c5a			jsr 	XPrintCharacterToChannel
.0c65	38		sec				sec
.0c66	a5 29		lda $29				lda 	codePtr+1 					; display the p-code address of the error.
.0c68	ed 04 04	sbc $0404			sbc 	runtimeHigh
.0c6b	20 74 0c	jsr $0c74			jsr 	_EHDisplayHex
.0c6e	a5 28		lda $28				lda 	codePtr
.0c70	20 74 0c	jsr $0c74			jsr 	_EHDisplayHex
.0c73	60		rts				rts
.0c74					_EHDisplayHex:
.0c74	48		pha				pha
.0c75	4a		lsr a				lsr 	a
.0c76	4a		lsr a				lsr 	a
.0c77	4a		lsr a				lsr 	a
.0c78	4a		lsr a				lsr 	a
.0c79	20 7d 0c	jsr $0c7d			jsr 	_EHDisplayNibble
.0c7c	68		pla				pla
.0c7d					_EHDisplayNibble:
.0c7d	29 0f		and #$0f			and 	#15
.0c7f	c9 0a		cmp #$0a			cmp 	#10
.0c81	90 02		bcc $0c85			bcc 	_EHNotHex
.0c83	69 06		adc #$06			adc 	#6
.0c85					_EHNotHex:
.0c85	69 30		adc #$30			adc 	#48
.0c87	4c 5a 1c	jmp $1c5a			jmp 	XPrintCharacterToChannel
.0c8a					CommandXFor:
.0c8a	fa		plx				plx
.0c8b	a9 d3		lda #$d3			lda 	#FRAME_FOR 					; open frame
.0c8d	20 0d 0d	jsr $0d0d			jsr 	StackOpenFrame
.0c90	20 4c 11	jsr $114c			jsr 	StackSaveCurrentPosition 	; normalise to Y=0 and save position.
.0c93	a0 07		ldy #$07			ldy 	#7 							; copy step out
.0c95	20 ef 0c	jsr $0cef			jsr 	CopyTOSToOffsetY
.0c98	ca		dex				dex
.0c99	a0 0d		ldy #$0d			ldy 	#13 						; copy terminal value.
.0c9b	20 ef 0c	jsr $0cef			jsr 	CopyTOSToOffsetY
.0c9e	ca		dex				dex
.0c9f	b5 4a		lda $4a,x			lda 	NSMantissa1,x 				; bit 15 of reference indicates type int16
.0ca1	29 80		and #$80			and 	#$80
.0ca3	a0 04		ldy #$04			ldy 	#4
.0ca5	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.0ca7	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; copy the reference address
.0ca9	a0 05		ldy #$05			ldy 	#5 							; adjusted to be a real address
.0cab	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.0cad	85 2c		sta $2c				sta 	zTemp0 						; also to zTemp0
.0caf	c8		iny				iny
.0cb0	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.0cb2	18		clc				clc
.0cb3	29 7f		and #$7f			and 	#$7F 						; throw the type bit.
.0cb5	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.0cb7	6d 07 04	adc $0407			adc 	variableStartPage 			; point to variable page.
.0cba	85 2d		sta $2d				sta 	zTemp0+1
.0cbc	ca		dex				dex 								; throw reference.
.0cbd	a0 05		ldy #$05			ldy 	#5 							; check the index, step and terminal values
.0cbf	b1 2c		lda ($2c),y			lda 	(zTemp0),y 					; are all +ve integers, sign bits first.
.0cc1	a0 0c		ldy #$0c			ldy 	#12
.0cc3	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.0cc5	a0 12		ldy #$12			ldy 	#18
.0cc7	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.0cc9	29 80		and #$80			and 	#$80 						; only interested in sign bit.
.0ccb	88		dey				dey 								; now the exponents.
.0ccc	11 2c		ora ($2c),y			ora 	(zTemp0),y
.0cce	a0 0b		ldy #$0b			ldy 	#11
.0cd0	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.0cd2	a0 11		ldy #$11			ldy 	#17
.0cd4	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.0cd6	a0 08		ldy #$08			ldy 	#8 							; step must be 1 byte.
.0cd8	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.0cda	c8		iny				iny
.0cdb	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.0cdd	c8		iny				iny
.0cde	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.0ce0	d0 08		bne $0cea			bne 	_CFNoOptimise
.0ce2	a0 04		ldy #$04			ldy 	#4 							; set the runtime stack pointer optimisation flag.
.0ce4	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.0ce6	09 40		ora #$40			ora 	#$40
.0ce8	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.0cea					_CFNoOptimise:
.0cea	a0 00		ldy #$00			ldy 	#0
.0cec	4c 36 08	jmp $0836			jmp 	NextCommand
.0cef					CopyTOSToOffsetY:
.0cef	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.0cf1	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.0cf3	c8		iny				iny
.0cf4	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.0cf6	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.0cf8	c8		iny				iny
.0cf9	b5 56		lda $56,x			lda 	NSMantissa2,x
.0cfb	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.0cfd	c8		iny				iny
.0cfe	b5 62		lda $62,x			lda 	NSMantissa3,x
.0d00	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.0d02	c8		iny				iny
.0d03	b5 6e		lda $6e,x			lda 	NSExponent,x
.0d05	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.0d07	c8		iny				iny
.0d08	b5 32		lda $32,x			lda 	NSStatus,x
.0d0a	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.0d0c	60		rts				rts
.0d0d					StackOpenFrame:
.0d0d	48		pha				pha 								; save frame marker
.0d0e	29 1f		and #$1f			and 	#$1F 						; bytes required.
.0d10	85 2c		sta $2c				sta 	zTemp0
.0d12	38		sec				sec 								; subtract from runtime stack pointer.
.0d13	a5 24		lda $24				lda		runtimeStackPtr
.0d15	e5 2c		sbc $2c				sbc 	zTemp0
.0d17	85 24		sta $24				sta 	runtimeStackPtr
.0d19	a5 25		lda $25				lda		runtimeStackPtr+1
.0d1b	e9 00		sbc #$00			sbc 	#0
.0d1d	85 25		sta $25				sta 	runtimeStackPtr+1
.0d1f	68		pla				pla 								; put frame marker at +0
.0d20	92 24		sta ($24)			sta 	(runtimeStackPtr)
.0d22	60		rts				rts
.0d23					StackCloseFrame:
.0d23	b2 24		lda ($24)			lda 	(runtimeStackPtr)			; get frame marker
.0d25	29 1f		and #$1f			and 	#$1F 						; size
.0d27	18		clc				clc
.0d28	65 24		adc $24				adc 	runtimeStackPtr
.0d2a	85 24		sta $24				sta 	runtimeStackPtr
.0d2c	90 02		bcc $0d30			bcc 	_SCFNoCarry
.0d2e	e6 25		inc $25				inc 	runtimeStackPtr+1
.0d30					_SCFNoCarry:
.0d30	60		rts				rts
.0d31					StackFindFrame:
.0d31	8d 0a 04	sta $040a			sta 	requiredFrame
.0d34					_SFFLoop:
.0d34	b2 24		lda ($24)			lda 	(runtimeStackPtr) 			; get TOS
.0d36	c9 ff		cmp #$ff			cmp 	#$FF 						; if found $FF then this is a fail.
.0d38	f0 10		beq $0d4a			beq 	SCFFail
.0d3a	cd 0a 04	cmp $040a			cmp 	requiredFrame 				; found this type ?
.0d3d	f0 05		beq $0d44			beq 	_SFFFound
.0d3f	20 23 0d	jsr $0d23			jsr 	StackCloseFrame 			; close the top frame
.0d42	80 f0		bra $0d34			bra 	_SFFLoop 					; and try te next.
.0d44					_SFFFound:
.0d44	60		rts				rts
.0d45					StackCheckFrame:
.0d45	d2 24		cmp ($24)			cmp 	(runtimeStackPtr) 			; matches current frame
.0d47	d0 01		bne $0d4a			bne 	SCFFail
.0d49	60		rts				rts
.0d4a					SCFFail:
.0d4a	4c 5a 1f	jmp $1f5a		jmp	ErrorV_structure
.040a					requiredFrame:
>040a							.fill 	1
.0d4d					UnaryFre:
.0d4d	fa		plx				plx
.0d4e	20 22 26	jsr $2622			jsr 	FloatSetZero 				; zero the result (32 bit integer)
.0d51	38		sec				sec
.0d52	ad 02 04	lda $0402			lda 	stringHighMemory 			; calculate the free memory.
.0d55	ed 00 04	sbc $0400			sbc 	stringLowMemory
.0d58	95 3e		sta $3e,x			sta		NSMantissa0,x
.0d5a	ad 03 04	lda $0403			lda 	stringHighMemory+1
.0d5d	ed 01 04	sbc $0401			sbc 	stringLowMemory+1
.0d60	95 4a		sta $4a,x			sta		NSMantissa1,x
.0d62	4c 36 08	jmp $0836			jmp 	NextCommand
.0d65					CommandXGet:
.0d65	fa		plx				plx
.0d66	e8		inx				inx
.0d67	a9 01		lda #$01			lda 	#1 							; 1 character space
.0d69	20 e5 16	jsr $16e5			jsr 	StringAllocTemp
.0d6c	20 4b 13	jsr $134b			jsr 	VectorGetCharacter 			; get a character
.0d6f	c9 00		cmp #$00			cmp 	#0
.0d71	f0 09		beq $0d7c			beq 	_CGNone
.0d73	5a		phy				phy
.0d74	a0 01		ldy #$01			ldy 	#1 							; store char
.0d76	91 22		sta ($22),y			sta 	(zsTemp),y
.0d78	98		tya				tya 								; store length.
.0d79	92 22		sta ($22)			sta 	(zsTemp)
.0d7b	7a		ply				ply
.0d7c					_CGNone:
.0d7c	4c 36 08	jmp $0836			jmp 	NextCommand
.0d7f					CommandXGosub:
.0d7f	fa		plx				plx
.0d80	a9 e4		lda #$e4			lda 	#FRAME_GOSUB
.0d82	20 0d 0d	jsr $0d0d			jsr 	StackOpenFrame
.0d85	20 4c 11	jsr $114c			jsr 	StackSaveCurrentPosition
.0d88	4c 9d 0d	jmp $0d9d			jmp 	PerformGOTO
.0d8b					CommandReturn:
.0d8b	fa		plx				plx
.0d8c	a9 e4		lda #$e4			lda 	#FRAME_GOSUB
.0d8e	20 31 0d	jsr $0d31			jsr 	StackFindFrame
.0d91	20 5d 11	jsr $115d			jsr 	StackLoadCurrentPosition
.0d94	c8		iny				iny
.0d95	c8		iny				iny
.0d96	20 23 0d	jsr $0d23			jsr 	StackCloseFrame
.0d99	4c 36 08	jmp $0836			jmp 	NextCommand
.0d9c					CommandXGoto:
.0d9c	fa		plx				plx
.0d9d					PerformGOTO:
.0d9d	c8		iny				iny 								; push MSB of offset on stack
.0d9e	b1 28		lda ($28),y			lda 	(codePtr),y
.0da0	48		pha				pha
.0da1	88		dey				dey 								; point LSB of offset
.0da2	18		clc				clc 								; add LSB
.0da3	b1 28		lda ($28),y			lda 	(codePtr),y
.0da5	65 28		adc $28				adc 	codePtr
.0da7	85 28		sta $28				sta 	codePtr
.0da9	68		pla				pla 								; restore offset MSB and add
.0daa	65 29		adc $29				adc 	codePtr+1
.0dac	85 29		sta $29				sta 	codePtr+1
.0dae	4c 36 08	jmp $0836			jmp 	NextCommand
.0db1					CommandGotoZ:
.0db1	fa		plx				plx
.0db2	20 44 26	jsr $2644			jsr 	FloatIsZero
.0db5	ca		dex				dex
.0db6	c9 00		cmp #$00			cmp 	#0
.0db8	f0 e3		beq $0d9d			beq 	PerformGOTO
.0dba	c8		iny				iny
.0dbb	c8		iny				iny
.0dbc	4c 36 08	jmp $0836			jmp 	NextCommand
.0dbf					CommandGotoNZ:
.0dbf	fa		plx				plx
.0dc0	20 44 26	jsr $2644			jsr 	FloatIsZero
.0dc3	ca		dex				dex
.0dc4	c9 00		cmp #$00			cmp 	#0
.0dc6	d0 d5		bne $0d9d			bne 	PerformGOTO
.0dc8	c8		iny				iny
.0dc9	c8		iny				iny
.0dca	4c 36 08	jmp $0836			jmp 	NextCommand
.0dcd					Command_PSET:
.0dcd	fa		plx				plx
.0dce	5a		phy				phy
.0dcf	20 15 10	jsr $1015			jsr 	GetInteger8Bit 				; get the colour
.0dd2	48		pha				pha
.0dd3	a2 00		ldx #$00			ldx 	#0 							; copy 0/1 to r0,r1
.0dd5	a0 02		ldy #$02			ldy 	#X16_r0
.0dd7	20 59 0e	jsr $0e59			jsr 	GraphicsCopy2
.0dda	20 ff fe	jsr $feff			jsr 	X16_FB_cursor_position 		; set position.
.0ddd	68		pla				pla 								; set pixel.
.0dde	20 0b ff	jsr $ff0b			jsr 	X16_FB_set_pixel
.0de1	7a		ply				ply
.0de2	a2 ff		ldx #$ff			ldx 	#$FF
.0de4	4c 36 08	jmp $0836			jmp 	NextCommand
.0de7					Command_LINE:
.0de7	fa		plx				plx
.0de8	5a		phy				phy
.0de9	20 4c 0e	jsr $0e4c			jsr 	GraphicsColour
.0dec	a2 00		ldx #$00			ldx 	#0 							; copy 0/1/2/3 to r0,1,2,3
.0dee	a0 02		ldy #$02			ldy 	#X16_r0
.0df0	20 56 0e	jsr $0e56			jsr 	GraphicsCopy4
.0df3	20 2c ff	jsr $ff2c			jsr 	X16_GRAPH_draw_line
.0df6	7a		ply				ply
.0df7	a2 ff		ldx #$ff			ldx 	#$FF
.0df9	4c 36 08	jmp $0836			jmp 	NextCommand
.0dfc					Command_RECT:
.0dfc	fa		plx				plx
.0dfd	5a		phy				phy
.0dfe	20 6d 0e	jsr $0e6d			jsr 	GraphicsRectCoords
.0e01	38		sec				sec
.0e02	20 2f ff	jsr $ff2f			jsr 	X16_GRAPH_draw_rect
.0e05	7a		ply				ply
.0e06	a2 ff		ldx #$ff			ldx 	#$FF
.0e08	4c 36 08	jmp $0836			jmp 	NextCommand
.0e0b					Command_FRAME:
.0e0b	fa		plx				plx
.0e0c	5a		phy				phy
.0e0d	20 6d 0e	jsr $0e6d			jsr 	GraphicsRectCoords
.0e10	18		clc				clc
.0e11	20 2f ff	jsr $ff2f			jsr 	X16_GRAPH_draw_rect
.0e14	7a		ply				ply
.0e15	a2 ff		ldx #$ff			ldx 	#$FF
.0e17	4c 36 08	jmp $0836			jmp 	NextCommand
.0e1a					Command_CHAR:
.0e1a	fa		plx				plx
.0e1b	5a		phy				phy
.0e1c	ca		dex				dex  								; set the draw colour
.0e1d	20 4c 0e	jsr $0e4c			jsr 	GraphicsColour
.0e20	a2 00		ldx #$00			ldx 	#0 							; copy 0/1 to r0,r1
.0e22	a0 02		ldy #$02			ldy 	#X16_r0
.0e24	20 59 0e	jsr $0e59			jsr 	GraphicsCopy2
.0e27	a5 41		lda $41				lda 	NSMantissa0+3 				; copy string address to zTemp0
.0e29	85 2c		sta $2c				sta 	zTemp0
.0e2b	a5 4d		lda $4d				lda 	NSMantissa1+3
.0e2d	85 2d		sta $2d				sta 	zTemp0+1
.0e2f	b2 2c		lda ($2c)			lda 	(zTemp0) 					; count of chars to zTemp1
.0e31	85 2e		sta $2e				sta 	zTemp1
.0e33					_CCLoop:
.0e33	a5 2e		lda $2e				lda 	zTemp1 						; done all chars ?
.0e35	f0 0f		beq $0e46			beq 	_CCExit
.0e37	c6 2e		dec $2e				dec 	zTemp1 						; dec counter
.0e39	e6 2c		inc $2c				inc 	zTemp0 						; pre-bump pointer
.0e3b	d0 02		bne $0e3f			bne 	_CCNoCarry
.0e3d	e6 2d		inc $2d				inc 	zTemp0+1
.0e3f					_CCNoCarry:
.0e3f	b2 2c		lda ($2c)			lda 	(zTemp0) 					; get character
.0e41	20 41 ff	jsr $ff41			jsr 	X16_GRAPH_put_char 			; write it
.0e44	80 ed		bra $0e33			bra 	_CCLoop						; go round.
.0e46					_CCExit:
.0e46	7a		ply				ply
.0e47	a2 ff		ldx #$ff			ldx 	#$FF
.0e49	4c 36 08	jmp $0836			jmp 	NextCommand
.0e4c					GraphicsColour:
.0e4c	20 15 10	jsr $1015			jsr 	GetInteger8Bit
.0e4f	aa		tax				tax
.0e50	a0 00		ldy #$00			ldy 	#0
.0e52	20 29 ff	jsr $ff29			jsr 	X16_GRAPH_set_colors
.0e55	60		rts				rts
.0e56					GraphicsCopy4:
.0e56	20 59 0e	jsr $0e59			jsr 	GraphicsCopy2
.0e59					GraphicsCopy2:
.0e59	20 5c 0e	jsr $0e5c			jsr 	GraphicsCopy1
.0e5c					GraphicsCopy1:
.0e5c	20 5d 22	jsr $225d			jsr 	FloatIntegerPart
.0e5f	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.0e61	99 00 00	sta $0000,y			sta 	0,y
.0e64	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.0e66	99 01 00	sta $0001,y			sta 	1,y
.0e69	e8		inx				inx
.0e6a	c8		iny				iny
.0e6b	c8		iny				iny
.0e6c	60		rts				rts
.0e6d					GraphicsRectCoords:
.0e6d	20 4c 0e	jsr $0e4c			jsr 	GraphicsColour 				; set colour
.0e70	a2 00		ldx #$00			ldx 	#0 							; copy in order.
.0e72	a0 02		ldy #$02			ldy 	#X16_r0
.0e74	20 56 0e	jsr $0e56			jsr 	GraphicsCopy4
.0e77	a2 02		ldx #$02			ldx 	#X16_r0 					; sort r0/r2
.0e79	20 86 0e	jsr $0e86			jsr 	_GRCSortSubtract
.0e7c	a2 04		ldx #$04			ldx 	#X16_r1 					; sort r1/r3
.0e7e	20 86 0e	jsr $0e86			jsr 	_GRCSortSubtract
.0e81	74 08		stz $08,x			stz 	8,x 						; zero rounding
.0e83	74 09		stz $09,x			stz 	9,x
.0e85	60		rts				rts
.0e86					_GRCSortSubtract:
.0e86	b5 04		lda $04,x			lda 	4,x 						; calculate r2-r0
.0e88	d5 00		cmp $00,x			cmp 	0,x
.0e8a	b5 05		lda $05,x			lda 	5,x
.0e8c	f5 01		sbc $01,x			sbc 	1,x
.0e8e	b0 08		bcs $0e98			bcs 	_GRCNoSwap 					; >= swap.
.0e90	20 a6 0e	jsr $0ea6			jsr 	_GRCSwapByte 				; swap 0/2
.0e93	e8		inx				inx
.0e94	20 a6 0e	jsr $0ea6			jsr 	_GRCSwapByte 				; swap 1/3
.0e97	ca		dex				dex
.0e98					_GRCNoSwap:
.0e98	38		sec				sec 								; calculate width/height into 4,5
.0e99	b5 04		lda $04,x			lda 	4,x
.0e9b	f5 00		sbc $00,x			sbc 	0,x
.0e9d	95 04		sta $04,x			sta 	4,x
.0e9f	b5 05		lda $05,x			lda 	5,x
.0ea1	f5 01		sbc $01,x			sbc 	1,x
.0ea3	95 05		sta $05,x			sta 	5,x
.0ea5	60		rts				rts
.0ea6					_GRCSwapByte:
.0ea6	b5 04		lda $04,x			lda 	4,x
.0ea8	48		pha				pha
.0ea9	b5 00		lda $00,x			lda 	0,x
.0eab	95 04		sta $04,x			sta 	4,x
.0ead	68		pla				pla
.0eae	95 00		sta $00,x			sta 	0,x
.0eb0	60		rts				rts
.0eb1					Unary16Hex:
.0eb1	fa		plx				plx
.0eb2	20 1b 10	jsr $101b			jsr 	GetInteger16Bit
.0eb5	a9 04		lda #$04			lda 	#4 							; allocate / set 4 bytes.
.0eb7	20 e5 16	jsr $16e5			jsr 	StringAllocTemp
.0eba	a5 2d		lda $2d				lda 	zTemp0+1
.0ebc	f0 03		beq $0ec1			beq 	_UHNoHigh
.0ebe	20 c9 0e	jsr $0ec9			jsr 	_UHWriteHex
.0ec1					_UHNoHigh:
.0ec1	a5 2c		lda $2c				lda 	zTemp0
.0ec3	20 c9 0e	jsr $0ec9			jsr 	_UHWriteHex
.0ec6	4c 36 08	jmp $0836			jmp 	NextCommand
.0ec9					_UHWriteHex:
.0ec9	48		pha				pha
.0eca	4a		lsr a				lsr 	a
.0ecb	4a		lsr a				lsr 	a
.0ecc	4a		lsr a				lsr 	a
.0ecd	4a		lsr a				lsr 	a
.0ece	20 d2 0e	jsr $0ed2			jsr 	_UHWriteNibl
.0ed1	68		pla				pla
.0ed2					_UHWriteNibl:
.0ed2	29 0f		and #$0f			and 	#15
.0ed4	c9 0a		cmp #$0a			cmp 	#10
.0ed6	90 02		bcc $0eda			bcc 	_UHDigit
.0ed8	69 06		adc #$06			adc 	#6
.0eda					_UHDigit:
.0eda	69 30		adc #$30			adc 	#48
.0edc	20 0e 17	jsr $170e			jsr 	StringWriteChar
.0edf	60		rts				rts
.0ee0					IndFloatRead:
.0ee0	fa		plx				plx
.0ee1	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; copy address
.0ee3	85 2c		sta $2c				sta 	zTemp0
.0ee5	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.0ee7	18		clc				clc
.0ee8	6d 07 04	adc $0407			adc 	variableStartPage
.0eeb	85 2d		sta $2d				sta 	zTemp0+1
.0eed	ca		dex				dex 								; throw the address
.0eee	20 c4 14	jsr $14c4			jsr 	ReadFloatZTemp0Sub 							; call read routine
.0ef1	4c 36 08	jmp $0836			jmp 	NextCommand
.0ef4					IndInt16Read:
.0ef4	fa		plx				plx
.0ef5	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; copy address
.0ef7	85 2c		sta $2c				sta 	zTemp0
.0ef9	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.0efb	18		clc				clc
.0efc	6d 07 04	adc $0407			adc 	variableStartPage
.0eff	85 2d		sta $2d				sta 	zTemp0+1
.0f01	ca		dex				dex 								; throw the address
.0f02	20 00 15	jsr $1500			jsr 	ReadIntegerZTemp0Sub 							; call read routine
.0f05	4c 36 08	jmp $0836			jmp 	NextCommand
.0f08					IndStringRead:
.0f08	fa		plx				plx
.0f09	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; copy address
.0f0b	85 2c		sta $2c				sta 	zTemp0
.0f0d	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.0f0f	18		clc				clc
.0f10	6d 07 04	adc $0407			adc 	variableStartPage
.0f13	85 2d		sta $2d				sta 	zTemp0+1
.0f15	ca		dex				dex 								; throw the address
.0f16	20 45 15	jsr $1545			jsr 	ReadStringZTemp0Sub 							; call read routine
.0f19	4c 36 08	jmp $0836			jmp 	NextCommand
.0f1c					IndFloatWrite:
.0f1c	fa		plx				plx
.0f1d	b5 3d		lda $3d,x			lda 	NSMantissa0-1,x 			; copy address
.0f1f	85 2c		sta $2c				sta 	zTemp0
.0f21	b5 49		lda $49,x			lda 	NSMantissa1-1,x
.0f23	18		clc				clc
.0f24	6d 07 04	adc $0407			adc 	variableStartPage
.0f27	85 2d		sta $2d				sta 	zTemp0+1
.0f29	20 9f 1a	jsr $1a9f			jsr 	WriteFloatZTemp0Sub 							; call write routine
.0f2c	ca		dex				dex 								; throw the address as well.
.0f2d	4c 36 08	jmp $0836			jmp 	NextCommand
.0f30					IndInt16Write:
.0f30	fa		plx				plx
.0f31	b5 3d		lda $3d,x			lda 	NSMantissa0-1,x 			; copy address
.0f33	85 2c		sta $2c				sta 	zTemp0
.0f35	b5 49		lda $49,x			lda 	NSMantissa1-1,x
.0f37	18		clc				clc
.0f38	6d 07 04	adc $0407			adc 	variableStartPage
.0f3b	85 2d		sta $2d				sta 	zTemp0+1
.0f3d	20 db 1a	jsr $1adb			jsr 	WriteIntegerZTemp0Sub 							; call write routine
.0f40	ca		dex				dex 								; throw the address as well.
.0f41	4c 36 08	jmp $0836			jmp 	NextCommand
.0f44					IndStringWrite:
.0f44	fa		plx				plx
.0f45	b5 3d		lda $3d,x			lda 	NSMantissa0-1,x 			; copy address
.0f47	85 2c		sta $2c				sta 	zTemp0
.0f49	b5 49		lda $49,x			lda 	NSMantissa1-1,x
.0f4b	18		clc				clc
.0f4c	6d 07 04	adc $0407			adc 	variableStartPage
.0f4f	85 2d		sta $2d				sta 	zTemp0+1
.0f51	20 1a 1b	jsr $1b1a			jsr 	WriteStringZTemp0Sub 							; call write routine
.0f54	ca		dex				dex 								; throw the address as well.
.0f55	4c 36 08	jmp $0836			jmp 	NextCommand
.0f58					CommandXInput:
.0f58	fa		plx				plx
.0f59	5a		phy				phy 								; save Y
.0f5a	e8		inx				inx									; space on stack
.0f5b					_INError:
.0f5b	20 8f 0f	jsr $0f8f			jsr 	InputStringToBuffer 		; input from keyboard
.0f5e	a9 60		lda #$60			lda 	#((ReadBufferSize) & $FF)
.0f60	85 2c		sta $2c				sta 	0+zTemp0
.0f62	a9 04		lda #$04			lda 	#((ReadBufferSize) >> 8) & $FF
.0f64	85 2d		sta $2d				sta 	1+zTemp0
.0f66	20 2c 19	jsr $192c			jsr 	ValEvaluateZTemp0
.0f69	b0 f0		bcs $0f5b			bcs 	_INError 					; failed, try again.
.0f6b	7a		ply				ply 								; restore Y
.0f6c	4c 36 08	jmp $0836			jmp 	NextCommand
.0f6f					CommandInputString:
.0f6f	fa		plx				plx
.0f70	5a		phy				phy 								; save Y
.0f71	20 8f 0f	jsr $0f8f			jsr 	InputStringToBuffer 		; input from keyboard
.0f74	e8		inx				inx 								; make space on stack
.0f75	20 22 26	jsr $2622			jsr 	FloatSetZero 				; store as string on stack
.0f78	a9 60		lda #$60			lda 	#ReadBufferSize & $FF
.0f7a	95 3e		sta $3e,x			sta 	NSMantissa0,x
.0f7c	a9 04		lda #$04			lda 	#ReadBufferSize >> 8
.0f7e	95 4a		sta $4a,x			sta 	NSMantissa1,x
.0f80	a9 40		lda #$40			lda 	#NSSString
.0f82	95 32		sta $32,x			sta 	NSStatus,x
.0f84	7a		ply				ply 								; restore Y
.0f85	4c 36 08	jmp $0836			jmp 	NextCommand
.0f88					CommandInputReset:
.0f88	fa		plx				plx
.0f89	9c 0b 04	stz $040b			stz 	InputBuffer
.0f8c	4c 36 08	jmp $0836			jmp 	NextCommand
.0f8f					InputStringToBuffer:
.0f8f	a9 c9		lda #$c9			lda 	#((InputBumpNext) & $FF)
.0f91	8d 60 05	sta $0560			sta 	0+ReadBumpNextVec
.0f94	a9 0f		lda #$0f			lda 	#((InputBumpNext) >> 8) & $FF
.0f96	8d 61 05	sta $0561			sta 	1+ReadBumpNextVec
.0f99	a9 a6		lda #$a6			lda 	#((InputLookNext) & $FF)
.0f9b	8d 62 05	sta $0562			sta 	0+ReadLookNextVec
.0f9e	a9 0f		lda #$0f			lda 	#((InputLookNext) >> 8) & $FF
.0fa0	8d 63 05	sta $0563			sta 	1+ReadLookNextVec
.0fa3	4c 21 14	jmp $1421			jmp 	GetStringToBuffer
.0fa6					InputLookNext:
.0fa6	da		phx				phx
.0fa7					_ILNRetry:
.0fa7	ad 0b 04	lda $040b			lda 	InputBuffer 				; do we need to read more (e.g. the buffer is empty)
.0faa	d0 08		bne $0fb4			bne 	_ILNNotEmpty
.0fac	20 cd 0f	jsr $0fcd			jsr 	InputGetNewLine 			; get a new line
.0faf	9c 5c 04	stz $045c			stz 	InputBufferPos 				; reset read position.
.0fb2	80 f3		bra $0fa7			bra 	_ILNRetry
.0fb4					_ILNNotEmpty:
.0fb4	ae 5c 04	ldx $045c			ldx 	InputBufferPos 				; get head available character
.0fb7	bd 0b 04	lda $040b,x			lda 	InputBuffer,x
.0fba	d0 08		bne $0fc4			bne 	_ILNExit 					; if not EOS return it with CC.
.0fbc					_ILNNextLine:
.0fbc	9c 0b 04	stz $040b			stz 	InputBuffer 				; clear the buffer, indicating new line next time.
.0fbf	38		sec				sec 								; return CS,Zero
.0fc0	fa		plx				plx
.0fc1	a9 0d		lda #$0d			lda 	#13
.0fc3	60		rts				rts
.0fc4					_ILNExit:
.0fc4	fa		plx				plx
.0fc5	c9 00		cmp #$00			cmp 	#0 							; return CC, Z Flag set.
.0fc7	18		clc				clc
.0fc8	60		rts				rts
.0fc9					InputBumpNext:
.0fc9	ee 5c 04	inc $045c			inc 	InputBufferPos
.0fcc	60		rts				rts
.0fcd					InputGetNewLine:
.0fcd	48		pha				pha
.0fce	da		phx				phx
.0fcf	5a		phy				phy
.0fd0	a9 3f		lda #$3f			lda 	#"?"
.0fd2	20 0c 10	jsr $100c			jsr 	IGNLEchoIfScreen
.0fd5	a0 00		ldy #$00			ldy 	#0 							; line position.
.0fd7					_IGNLLoop:
.0fd7	20 4b 13	jsr $134b			jsr 	VectorGetCharacter 			; get a character
.0fda	c9 00		cmp #$00			cmp 	#0
.0fdc	f0 f9		beq $0fd7			beq 	_IGNLLoop
.0fde	c9 14		cmp #$14			cmp 	#$14 						; Backspace ?
.0fe0	f0 11		beq $0ff3			beq 	_IGNBackspace
.0fe2	c9 0d		cmp #$0d			cmp 	#$0D 						; Return ?
.0fe4	f0 17		beq $0ffd			beq 	_IGNExit
.0fe6	c0 50		cpy #$50			cpy 	#80 						; buffer full ?
.0fe8	f0 ed		beq $0fd7			beq 	_IGNLLoop
.0fea	99 0b 04	sta $040b,y			sta 	InputBuffer,y
.0fed	c8		iny				iny
.0fee	20 0c 10	jsr $100c			jsr 	IGNLEchoIfScreen
.0ff1	80 e4		bra $0fd7			bra 	_IGNLLoop
.0ff3					_IGNBackspace:
.0ff3	c0 00		cpy #$00			cpy 	#0
.0ff5	f0 e0		beq $0fd7			beq 	_IGNLLoop
.0ff7	20 0c 10	jsr $100c			jsr 	IGNLEchoIfScreen
.0ffa	88		dey				dey
.0ffb	80 da		bra $0fd7			bra 	_IGNLLoop
.0ffd					_IGNExit:
.0ffd	20 0c 10	jsr $100c			jsr 	IGNLEchoIfScreen
.1000	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.1002	99 0b 04	sta $040b,y			sta 	InputBuffer,y
.1005	9c 5c 04	stz $045c			stz 	InputBufferPos 				; reset position to start of input buffer.
.1008	7a		ply				ply
.1009	fa		plx				plx
.100a	68		pla				pla
.100b	60		rts				rts
.100c					IGNLEchoIfScreen:
.100c	ae 5e 04	ldx $045e			ldx 	currentChannel
.100f	d0 03		bne $1014			bne 	_IGNLEExit
.1011	20 42 13	jsr $1342			jsr 	VectorPrintCharacter
.1014					_IGNLEExit:
.1014	60		rts				rts
.040b					InputBuffer:
>040b							.fill 	81
.045c					InputBufferPos:
>045c							.fill 	1
.1015					GetInteger8Bit:
.1015	20 5d 22	jsr $225d			jsr 	FloatIntegerPart
.1018	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.101a	60		rts				rts
.101b					GetInteger16Bit:
.101b	20 5d 22	jsr $225d			jsr 	FloatIntegerPart
.101e	34 32		bit $32,x			bit 	NSStatus,x
.1020	30 09		bmi $102b			bmi 	Negate16Bit
.1022	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.1024	85 2c		sta $2c				sta 	zTemp0
.1026	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.1028	85 2d		sta $2d				sta 	zTemp0+1
.102a	60		rts				rts
.102b					Negate16Bit:
.102b	38		sec				sec
.102c	a9 00		lda #$00			lda 	#0
.102e	f5 3e		sbc $3e,x			sbc 	NSMantissa0,x
.1030	95 3e		sta $3e,x			sta 	NSMantissa0,x
.1032	85 2c		sta $2c				sta 	zTemp0
.1034	a9 00		lda #$00			lda 	#0
.1036	f5 4a		sbc $4a,x			sbc 	NSMantissa1,x
.1038	95 4a		sta $4a,x			sta 	NSMantissa1,x
.103a	85 2d		sta $2d				sta 	zTemp0+1
.103c	60		rts				rts
.103d					UnaryJoy:
.103d	fa		plx				plx
.103e	20 15 10	jsr $1015			jsr 	GetInteger8Bit 				; port #
.1041	48		pha				pha 								; zero the result.
.1042	20 22 26	jsr $2622			jsr 	FloatSetZero
.1045	68		pla				pla
.1046	5a		phy				phy
.1047	da		phx				phx
.1048	20 56 ff	jsr $ff56			jsr 	X16_joystick_get 			; read joystick.
.104b	c0 00		cpy #$00			cpy 	#0 							; check no hardware
.104d	d0 10		bne $105f			bne 	_UJNoHardware
.104f	a8		tay				tay 								; move XA -> AY
.1050	8a		txa				txa
.1051	fa		plx				plx 								; we can update it now.
.1052	49 ff		eor #$ff			eor 	#$FF
.1054	95 4a		sta $4a,x			sta 	NSMantissa1,x
.1056	98		tya				tya
.1057	49 ff		eor #$ff			eor 	#$FF
.1059	95 3e		sta $3e,x			sta 	NSMantissa0,x
.105b	7a		ply				ply 								; restore Y
.105c	4c 36 08	jmp $0836			jmp 	NextCommand
.105f					_UJNoHardware:
.105f	fa		plx				plx
.1060	7a		ply				ply
.1061	a9 01		lda #$01			lda 	#1 							; set result to -1
.1063	20 24 26	jsr $2624			jsr 	FloatSetByte
.1066	20 e4 25	jsr $25e4			jsr 	FloatNegate
.1069	4c 36 08	jmp $0836			jmp 	NextCommand
.106c					UnaryLen:
.106c	fa		plx				plx
.106d	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; string address.
.106f	85 2c		sta $2c				sta 	zTemp0
.1071	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.1073	85 2d		sta $2d				sta 	zTemp0+1
.1075	b2 2c		lda ($2c)			lda 	(zTemp0) 					; get length
.1077	20 24 26	jsr $2624			jsr 	FloatSetByte
.107a	4c 36 08	jmp $0836			jmp 	NextCommand
.107d					LinkFloatAdd:
.107d	fa		plx				plx
.107e	5a		phy			phy
.107f	20 46 20	jsr $2046		jsr	FloatAdd
.1082	7a		ply			ply
.1083	4c 36 08	jmp $0836			jmp 	NextCommand
.1086					LinkFloatSubtract:
.1086	fa		plx				plx
.1087	5a		phy			phy
.1088	20 40 20	jsr $2040		jsr	FloatSubtract
.108b	7a		ply			ply
.108c	4c 36 08	jmp $0836			jmp 	NextCommand
.108f					LinkFloatMultiply:
.108f	fa		plx				plx
.1090	5a		phy			phy
.1091	20 e2 22	jsr $22e2		jsr	FloatMultiply
.1094	7a		ply			ply
.1095	4c 36 08	jmp $0836			jmp 	NextCommand
.1098					LinkFloatDivide:
.1098	fa		plx				plx
.1099	5a		phy			phy
.109a	20 6b 21	jsr $216b		jsr	FloatDivide
.109d	b0 5c		bcs $10fb		bcs	DivZeroError
.109f	7a		ply			ply
.10a0	4c 36 08	jmp $0836			jmp 	NextCommand
.10a3					LinkFloatPower:
.10a3	fa		plx				plx
.10a4	5a		phy			phy
.10a5	20 eb 28	jsr $28eb		jsr	FloatPower
.10a8	b0 4e		bcs $10f8		bcs	MapRangeError
.10aa	7a		ply			ply
.10ab	4c 36 08	jmp $0836			jmp 	NextCommand
.10ae					LinkCompareGreater:
.10ae	fa		plx				plx
.10af	5a		phy			phy
.10b0	20 ef 20	jsr $20ef		jsr	CompareGreater
.10b3	7a		ply			ply
.10b4	4c 36 08	jmp $0836			jmp 	NextCommand
.10b7					LinkCompareEqual:
.10b7	fa		plx				plx
.10b8	5a		phy			phy
.10b9	20 d1 20	jsr $20d1		jsr	CompareEqual
.10bc	7a		ply			ply
.10bd	4c 36 08	jmp $0836			jmp 	NextCommand
.10c0					LinkCompareLess:
.10c0	fa		plx				plx
.10c1	5a		phy			phy
.10c2	20 e7 20	jsr $20e7		jsr	CompareLess
.10c5	7a		ply			ply
.10c6	4c 36 08	jmp $0836			jmp 	NextCommand
.10c9					LinkCompareGreaterEqual:
.10c9	fa		plx				plx
.10ca	5a		phy			phy
.10cb	20 ff 20	jsr $20ff		jsr	CompareGreaterEqual
.10ce	7a		ply			ply
.10cf	4c 36 08	jmp $0836			jmp 	NextCommand
.10d2					LinkCompareNotEqual:
.10d2	fa		plx				plx
.10d3	5a		phy			phy
.10d4	20 e1 20	jsr $20e1		jsr	CompareNotEqual
.10d7	7a		ply			ply
.10d8	4c 36 08	jmp $0836			jmp 	NextCommand
.10db					LinkCompareLessEqual:
.10db	fa		plx				plx
.10dc	5a		phy			phy
.10dd	20 f7 20	jsr $20f7		jsr	CompareLessEqual
.10e0	7a		ply			ply
.10e1	4c 36 08	jmp $0836			jmp 	NextCommand
.10e4					LinkFloatIntegerPartDown:
.10e4	fa		plx				plx
.10e5	5a		phy			phy
.10e6	20 81 22	jsr $2281		jsr	FloatIntegerPartDown
.10e9	7a		ply			ply
.10ea	4c 36 08	jmp $0836			jmp 	NextCommand
.10ed					LinkFloatSquareRoot:
.10ed	fa		plx				plx
.10ee	5a		phy			phy
.10ef	20 6d 29	jsr $296d		jsr	FloatSquareRoot
.10f2	b0 04		bcs $10f8		bcs	MapRangeError
.10f4	7a		ply			ply
.10f5	4c 36 08	jmp $0836			jmp 	NextCommand
.10f8					MapRangeError:
.10f8	4c bf 1e	jmp $1ebf		jmp	ErrorV_range
.10fb					DivZeroError:
.10fb	4c 48 1f	jmp $1f48		jmp	ErrorV_divzero
.10fe					LinkFloatLogarithm:
.10fe	fa		plx				plx
.10ff	5a		phy			phy
.1100	20 77 28	jsr $2877		jsr	FloatLogarithm
.1103	b0 f3		bcs $10f8		bcs	MapRangeError
.1105	7a		ply			ply
.1106	4c 36 08	jmp $0836			jmp 	NextCommand
.1109					LinkFloatExponent:
.1109	fa		plx				plx
.110a	5a		phy			phy
.110b	20 74 27	jsr $2774		jsr	FloatExponent
.110e	7a		ply			ply
.110f	4c 36 08	jmp $0836			jmp 	NextCommand
.1112					LinkFloatCosine:
.1112	fa		plx				plx
.1113	5a		phy			phy
.1114	20 68 27	jsr $2768		jsr	FloatCosine
.1117	7a		ply			ply
.1118	4c 36 08	jmp $0836			jmp 	NextCommand
.111b					LinkFloatSine:
.111b	fa		plx				plx
.111c	5a		phy			phy
.111d	20 08 29	jsr $2908		jsr	FloatSine
.1120	7a		ply			ply
.1121	4c 36 08	jmp $0836			jmp 	NextCommand
.1124					LinkFloatTangent:
.1124	fa		plx				plx
.1125	5a		phy			phy
.1126	20 79 29	jsr $2979		jsr	FloatTangent
.1129	7a		ply			ply
.112a	4c 36 08	jmp $0836			jmp 	NextCommand
.112d					LinkFloatArcTan:
.112d	fa		plx				plx
.112e	5a		phy			phy
.112f	20 4d 26	jsr $264d		jsr	FloatArcTan
.1132	b0 c4		bcs $10f8		bcs	MapRangeError
.1134	7a		ply			ply
.1135	4c 36 08	jmp $0836			jmp 	NextCommand
.1138					LinkFloatCompare:
.1138	fa		plx				plx
.1139	5a		phy			phy
.113a	20 07 21	jsr $2107		jsr	FloatCompare
.113d	7a		ply			ply
.113e	4c 36 08	jmp $0836			jmp 	NextCommand
.1141					LinkDivideInt32:
.1141	fa		plx				plx
.1142	5a		phy			phy
.1143	20 95 21	jsr $2195		jsr	DivideInt32
.1146	b0 b0		bcs $10f8		bcs	MapRangeError
.1148	7a		ply			ply
.1149	4c 36 08	jmp $0836			jmp 	NextCommand
.114c					StackSaveCurrentPosition:
.114c	20 a1 08	jsr $08a1			jsr 	FixUpY 						; codePtr,Y is corrected so Y = 0
.114f	5a		phy				phy
.1150	a0 02		ldy #$02			ldy 	#2
.1152	a5 28		lda $28				lda 	codePtr
.1154	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.1156	c8		iny				iny
.1157	a5 29		lda $29				lda 	codePtr+1
.1159	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.115b	7a		ply				ply
.115c	60		rts				rts
.115d					StackLoadCurrentPosition:
.115d	a0 02		ldy #$02			ldy 	#2
.115f	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1161	85 28		sta $28				sta 	codePtr
.1163	c8		iny				iny
.1164	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1166	85 29		sta $29				sta 	codePtr+1
.1168	a0 00		ldy #$00			ldy 	#0
.116a	60		rts				rts
.116b					XCommandMouse:
.116b	fa		plx				plx
.116c	20 15 10	jsr $1015			jsr 	GetInteger8Bit 				; mouse control.
.116f	ca		dex				dex
.1170	da		phx				phx
.1171	5a		phy				phy
.1172	48		pha				pha
.1173	38		sec				sec 								; get screen resolution
.1174	20 5f ff	jsr $ff5f			jsr 	X16_screen_mode
.1177	68		pla				pla
.1178	20 68 ff	jsr $ff68			jsr 	X16_mouse_config 			; config the mouse
.117b	7a		ply				ply
.117c	fa		plx				plx
.117d	4c 36 08	jmp $0836			jmp 	NextCommand
.1180					XUnaryMB:
.1180	fa		plx				plx
.1181	20 af 11	jsr $11af			jsr 	XUnaryMouseCommon
.1184	a5 30		lda $30				lda 	zTemp2
.1186	e8		inx				inx
.1187	20 24 26	jsr $2624			jsr 	FloatSetByte
.118a	4c 36 08	jmp $0836			jmp 	NextCommand
.118d					XUnaryMX:
.118d	fa		plx				plx
.118e	20 af 11	jsr $11af			jsr 	XUnaryMouseCommon
.1191	a5 2c		lda $2c				lda 	zTemp0
.1193	e8		inx				inx
.1194	20 24 26	jsr $2624			jsr 	FloatSetByte
.1197	a5 2d		lda $2d				lda 	zTemp0+1
.1199	95 4a		sta $4a,x			sta 	NSMantissa1,x
.119b	4c 36 08	jmp $0836			jmp 	NextCommand
.119e					XUnaryMY:
.119e	fa		plx				plx
.119f	20 af 11	jsr $11af			jsr 	XUnaryMouseCommon
.11a2	a5 2e		lda $2e				lda 	zTemp1
.11a4	e8		inx				inx
.11a5	20 24 26	jsr $2624			jsr 	FloatSetByte
.11a8	a5 2f		lda $2f				lda 	zTemp1+1
.11aa	95 4a		sta $4a,x			sta 	NSMantissa1,x
.11ac	4c 36 08	jmp $0836			jmp 	NextCommand
.11af					XUnaryMouseCommon:
.11af	da		phx				phx
.11b0	5a		phy				phy
.11b1	a2 2c		ldx #$2c			ldx 	#zTemp0
.11b3	20 6b ff	jsr $ff6b			jsr 	X16_mouse_get
.11b6	85 30		sta $30				sta 	zTemp2
.11b8	7a		ply				ply
.11b9	fa		plx				plx
.11ba	60		rts				rts
.11bb					NegateTOS:
.11bb	fa		plx				plx
.11bc	20 e4 25	jsr $25e4			jsr 	FloatNegate
.11bf	4c 36 08	jmp $0836			jmp 	NextCommand
.11c2					CommandNewLine:
.11c2	fa		plx				plx
.11c3	9c 69 05	stz $0569			stz 	stringInitialised
.11c6	a2 ff		ldx #$ff			ldx 	#$FF
.11c8	4c 36 08	jmp $0836			jmp 	NextCommand
.11cb					CommandXNext:
.11cb	fa		plx				plx
.11cc					_CNRetry:
.11cc	a9 d3		lda #$d3			lda 	#FRAME_FOR 					; find the FOR
.11ce	20 31 0d	jsr $0d31			jsr 	StackFindFrame
.11d1	20 a1 08	jsr $08a1			jsr 	FixUpY 						; so we can use Y
.11d4	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; check no index variable, both are $FF
.11d6	35 4a		and $4a,x			and 	NSMantissa1,x
.11d8	c9 ff		cmp #$ff			cmp 	#$FF
.11da	f0 16		beq $11f2			beq 	_CNNoIndexVariable
.11dc	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.11de	a0 05		ldy #$05			ldy 	#5
.11e0	d1 24		cmp ($24),y			cmp 	(runtimeStackPtr),y
.11e2	d0 07		bne $11eb			bne 	_CNNIndexFail
.11e4	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.11e6	c8		iny				iny
.11e7	d1 24		cmp ($24),y			cmp 	(runtimeStackPtr),y
.11e9	f0 07		beq $11f2			beq 	_CNNoIndexVariable
.11eb					_CNNIndexFail:
.11eb	a0 00		ldy #$00			ldy 	#0 							; so we don't fix up Y again !
.11ed	20 23 0d	jsr $0d23			jsr 	StackCloseFrame 			; close this frame
.11f0	80 da		bra $11cc			bra 	_CNRetry
.11f2					_CNNoIndexVariable:
.11f2	ca		dex				dex
.11f3	a0 04		ldy #$04			ldy 	#4 							; check for optimised NEXT
.11f5	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.11f7	29 40		and #$40			and 	#$40	 					; bit 6
.11f9	d0 55		bne $1250			bne 	_CNOptimisedNext
.11fb	a0 05		ldy #$05			ldy 	#5 							; copy address to zTemp0, save for write back
.11fd	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.11ff	48		pha				pha
.1200	85 2c		sta $2c				sta 	zTemp0
.1202	c8		iny				iny
.1203	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1205	18		clc				clc
.1206	6d 07 04	adc $0407			adc 	variableStartPage 			; point to variable page.
.1209	48		pha				pha
.120a	85 2d		sta $2d				sta 	zTemp0+1
.120c	20 c4 14	jsr $14c4			jsr 	ReadFloatZTemp0Sub 			; read current index onto stack.
.120f	a0 07		ldy #$07			ldy 	#7  						; read step onto stack +1
.1211	e8		inx				inx
.1212	20 93 12	jsr $1293			jsr 	CopyOffsetYToTOS
.1215	20 46 20	jsr $2046			jsr 	FloatAdd
.1218	68		pla				pla 								; restore address
.1219	85 2d		sta $2d				sta 	zTemp0+1
.121b	68		pla				pla
.121c	85 2c		sta $2c				sta 	zTemp0
.121e	20 9f 1a	jsr $1a9f			jsr 	WriteFloatZTemp0Sub			; write float.
.1221	e8		inx				inx  								; recover written
.1222	e8		inx				inx 								; load offset
.1223	a0 0d		ldy #$0d			ldy 	#13
.1225	20 93 12	jsr $1293			jsr 	CopyOffsetYToTOS
.1228	20 07 21	jsr $2107			jsr 	FloatCompare 				; and compare the floats.
.122b	ca		dex				dex 								; throw result (in NSMantissa0+1)
.122c	a0 0c		ldy #$0c			ldy 	#12 						; get the sign of the step.
.122e	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1230	30 08		bmi $123a			bmi 	_CNDownStep
.1232	b5 3f		lda $3f,x			lda 	NSMantissa0+1,x 			; get comparator
.1234	c9 01		cmp #$01			cmp 	#1 							; gone higher
.1236	f0 10		beq $1248			beq 	_CNExitFor 					; if so exit the loop
.1238	80 06		bra $1240			bra 	_CNLoopBack
.123a					_CNDownStep:
.123a	b5 3f		lda $3f,x			lda 	NSMantissa0+1,x 			; get comparator
.123c	c9 ff		cmp #$ff			cmp 	#255 						; gone lower
.123e	f0 08		beq $1248			beq 	_CNExitFor
.1240					_CNLoopBack:
.1240	20 5d 11	jsr $115d			jsr 	StackLoadCurrentPosition 	; loop back
.1243	a0 00		ldy #$00			ldy 	#0
.1245	4c 36 08	jmp $0836			jmp 	NextCommand
.1248					_CNExitFor:
.1248	20 23 0d	jsr $0d23			jsr 	StackCloseFrame 			; remove the frame and exit
.124b	a0 00		ldy #$00			ldy 	#0
.124d	4c 36 08	jmp $0836			jmp 	NextCommand
.1250					_CNOptimisedNext:
.1250	a0 05		ldy #$05			ldy 	#5 							; copy address to zTemp0, save for write back
.1252	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1254	85 2c		sta $2c				sta 	zTemp0
.1256	c8		iny				iny
.1257	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1259	18		clc				clc
.125a	6d 07 04	adc $0407			adc 	variableStartPage 			; point to variable page.
.125d	85 2d		sta $2d				sta 	zTemp0+1
.125f	a0 07		ldy #$07			ldy 	#7 							; STEP value
.1261	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1263	a0 ff		ldy #$ff			ldy 	#$FF
.1265	18		clc				clc
.1266					_CNOIncrement:
.1266	c8		iny				iny
.1267	71 2c		adc ($2c),y			adc 	(zTemp0),y
.1269	91 2c		sta ($2c),y			sta 	(zTemp0),y
.126b	f0 f9		beq $1266			beq 	_CNOIncrement
.126d	18		clc				clc
.126e	a5 24		lda $24				lda 	runtimeStackPtr
.1270	69 0d		adc #$0d			adc 	#13
.1272	85 2e		sta $2e				sta 	zTemp1
.1274	a5 25		lda $25				lda 	runtimeStackPtr+1
.1276	69 00		adc #$00			adc 	#0
.1278	85 2f		sta $2f				sta 	zTemp1+1
.127a	a0 00		ldy #$00			ldy 	#0
.127c	b1 2e		lda ($2e),y			lda 	(zTemp1),y 					; byte 0
.127e	d1 2c		cmp ($2c),y			cmp 	(zTemp0),y
.1280	c8		iny				iny
.1281	b1 2e		lda ($2e),y			lda 	(zTemp1),y 					; byte 1
.1283	f1 2c		sbc ($2c),y			sbc 	(zTemp0),y
.1285	c8		iny				iny
.1286	b1 2e		lda ($2e),y			lda 	(zTemp1),y 					; byte 2
.1288	f1 2c		sbc ($2c),y			sbc 	(zTemp0),y
.128a	c8		iny				iny
.128b	b1 2e		lda ($2e),y			lda 	(zTemp1),y 					; byte 3
.128d	f1 2c		sbc ($2c),y			sbc 	(zTemp0),y
.128f	90 b7		bcc $1248			bcc	 	_CNExitFor
.1291	80 ad		bra $1240			bra 	_CNLoopBack
.1293					CopyOffsetYToTOS:
.1293	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1295	95 3e		sta $3e,x			sta 	NSMantissa0,x
.1297	c8		iny				iny
.1298	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.129a	95 4a		sta $4a,x			sta 	NSMantissa1,x
.129c	c8		iny				iny
.129d	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.129f	95 56		sta $56,x			sta 	NSMantissa2,x
.12a1	c8		iny				iny
.12a2	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.12a4	95 62		sta $62,x			sta 	NSMantissa3,x
.12a6	c8		iny				iny
.12a7	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.12a9	95 6e		sta $6e,x			sta 	NSExponent,x
.12ab	c8		iny				iny
.12ac	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.12ae	95 32		sta $32,x			sta 	NSStatus,x
.12b0	60		rts				rts
.12b1	4c 36 08	jmp $0836			jmp 	NextCommand
.12b4					NotTOS:
.12b4	fa		plx				plx
.12b5	20 5d 22	jsr $225d			jsr 	FloatIntegerPart
.12b8	74 56		stz $56,x			stz 	NSMantissa2,x 				; chop down to 16 bit.
.12ba	74 62		stz $62,x			stz 	NSMantissa3,x
.12bc	20 e4 25	jsr $25e4			jsr 	FloatNegate		 			; negate
.12bf	e8		inx				inx 								; and subtract 1.
.12c0	a9 01		lda #$01			lda 	#1
.12c2	20 24 26	jsr $2624			jsr 	FloatSetByte
.12c5	20 40 20	jsr $2040			jsr 	FloatSubtract
.12c8					_NotTOSSkip:
.12c8	4c 36 08	jmp $0836			jmp 	NextCommand
.12cb					CommandXOn:
.12cb	fa		plx				plx
.12cc	20 15 10	jsr $1015			jsr 	GetInteger8Bit 				; get the integer part, the ON x GOTO bit
.12cf	8d 5d 04	sta $045d			sta 	onCount 					; save it.
.12d2	20 a1 08	jsr $08a1			jsr 	FixUpY 						; Y = 0
.12d5					_CONFind:
.12d5	ce 5d 04	dec $045d			dec 	onCount 					; reached zero, do this one
.12d8	f0 0b		beq $12e5			beq 	_CONFound
.12da	c8		iny				iny 								; skip over the token (GOTO or GOSUB page, and line #)
.12db	c8		iny				iny
.12dc	c8		iny				iny
.12dd	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a moreon after it, if so we can keep going.
.12df	c8		iny				iny
.12e0	c9 aa		cmp #$aa			cmp 	#PCD_MOREON
.12e2	f0 f1		beq $12d5			beq 	_CONFind
.12e4	88		dey				dey 								; point to character after last GOTO/GOSUB
.12e5					_CONFound:
.12e5	4c 36 08	jmp $0836			jmp 	NextCommand
.12e8					CommandMoreOn:
.12e8	fa		plx				plx
.12e9	c8		iny				iny 								; so it goes to the first non-goto/gosub
.12ea	c8		iny				iny
.12eb	c8		iny				iny
.12ec	4c 36 08	jmp $0836			jmp 	NextCommand
.045d					onCount:
>045d							.fill 	1
.12ef					UnaryPeek:
.12ef	fa		plx				plx
.12f0	20 1b 10	jsr $101b			jsr 	GetInteger16Bit
.12f3	da		phx				phx
.12f4	5a		phy				phy
.12f5	a6 2c		ldx $2c				ldx 	zTemp0
.12f7	a4 2d		ldy $2d				ldy 	zTemp0+1
.12f9	20 30 1c	jsr $1c30			jsr 	XPeekMemory
.12fc	7a		ply				ply
.12fd	fa		plx				plx
.12fe	20 24 26	jsr $2624			jsr 	FloatSetByte
.1301	4c 36 08	jmp $0836			jmp 	NextCommand
.1304					CommandPOKE:
.1304	fa		plx				plx
.1305	da		phx				phx 								; save XY
.1306	5a		phy				phy
.1307	20 15 10	jsr $1015			jsr 	GetInteger8Bit 				; get byte to POKE and save it
.130a	48		pha				pha
.130b	b5 49		lda $49,x			lda 	NSMantissa1-1,x 			; YX = address from Mantissa next up
.130d	a8		tay				tay
.130e	b5 3d		lda $3d,x			lda 	NSMantissa0-1,x
.1310	aa		tax				tax
.1311	68		pla				pla
.1312	20 1c 1c	jsr $1c1c			jsr 	XPokeMemory
.1315	7a		ply				ply 								; restore YX and drop 2
.1316	fa		plx				plx
.1317	ca		dex				dex
.1318	ca		dex				dex
.1319	4c 36 08	jmp $0836			jmp 	NextCommand
.131c					UnaryPos:
.131c	fa		plx				plx
.131d	20 af 1b	jsr $1baf			jsr 	XGetHPos
.1320	20 24 26	jsr $2624			jsr 	FloatSetByte
.1323	4c 36 08	jmp $0836			jmp 	NextCommand
.1326					GetChannel:
.1326	fa		plx				plx
.1327	ad 5e 04	lda $045e			lda 	currentChannel
.132a	e8		inx				inx
.132b	20 24 26	jsr $2624			jsr 	FloatSetByte
.132e	4c 36 08	jmp $0836			jmp 	NextCommand
.1331					SetChannel:
.1331	fa		plx				plx
.1332	20 5d 22	jsr $225d			jsr 	FloatIntegerPart
.1335	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.1337	8d 5e 04	sta $045e			sta 	currentChannel
.133a	ca		dex				dex
.133b	4c 36 08	jmp $0836			jmp 	NextCommand
.133e					SetDefaultChannel:
.133e	9c 5e 04	stz $045e			stz 	currentChannel
.1341	60		rts				rts
.1342					VectorPrintCharacter:
.1342	da		phx				phx
.1343	ae 5e 04	ldx $045e			ldx 	currentChannel
.1346	20 5a 1c	jsr $1c5a			jsr 	XPrintCharacterToChannel
.1349	fa		plx				plx
.134a	60		rts				rts
.134b					VectorGetCharacter:
.134b	da		phx				phx
.134c	ae 5e 04	ldx $045e			ldx 	currentChannel
.134f	20 93 1b	jsr $1b93			jsr 	XGetCharacterFromChannel
.1352	fa		plx				plx
.1353	60		rts				rts
.045e					currentChannel:
>045e							.fill 	1
.1354					PrintNumber:
.1354	fa		plx				plx
.1355	a9 07		lda #$07			lda 	#7
.1357	20 0a 25	jsr $250a			jsr 	FloatToString 				; to number in decimal buffer
.135a	ca		dex				dex 								; drop
.135b	da		phx				phx
.135c	a2 00		ldx #$00			ldx 	#0 							; print buffer.
.135e					_PNLoop:
.135e	bd 97 05	lda $0597,x			lda 	decimalBuffer,x
.1361	20 42 13	jsr $1342			jsr 	VectorPrintCharacter
.1364	e8		inx				inx
.1365	bd 97 05	lda $0597,x			lda	 	decimalBuffer,x
.1368	d0 f4		bne $135e			bne 	_PNLoop
.136a	a9 20		lda #$20			lda 	#32 						; trailing space
.136c	20 42 13	jsr $1342			jsr 	VectorPrintCharacter
.136f	fa		plx				plx
.1370	4c 36 08	jmp $0836			jmp 	NextCommand
.1373					PrintString:
.1373	fa		plx				plx
.1374	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; point zTemp0 to string
.1376	85 2c		sta $2c				sta 	zTemp0
.1378	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.137a	85 2d		sta $2d				sta 	zTemp0+1
.137c	ca		dex				dex 								; drop
.137d	da		phx				phx
.137e	5a		phy				phy
.137f	b2 2c		lda ($2c)			lda 	(zTemp0) 					; X = count
.1381	aa		tax				tax
.1382	a0 01		ldy #$01			ldy 	#1 							; Y = position
.1384					_PSLoop:
.1384	e0 00		cpx #$00			cpx 	#0 							; complete ?
.1386	f0 09		beq $1391			beq 	_PSExit
.1388	ca		dex				dex 								; dec count
.1389	b1 2c		lda ($2c),y			lda 	(zTemp0),y 					; print char and bump
.138b	20 42 13	jsr $1342			jsr 	VectorPrintCharacter
.138e	c8		iny				iny
.138f	80 f3		bra $1384			bra 	_PSLoop
.1391					_PSExit:
.1391	7a		ply				ply
.1392	fa		plx				plx
.1393	4c 36 08	jmp $0836			jmp 	NextCommand
.1396					CommandPushN:
.1396	fa		plx				plx
.1397	e8		inx				inx 								; next slot on stack
.1398	b1 28		lda ($28),y			lda 	(codePtr),y 				; exponent
.139a	95 6e		sta $6e,x			sta 	NSExponent,x
.139c	c8		iny				iny
.139d	b1 28		lda ($28),y			lda 	(codePtr),y 				; mantissa
.139f	95 3e		sta $3e,x			sta 	NSMantissa0,x
.13a1	c8		iny				iny
.13a2	b1 28		lda ($28),y			lda 	(codePtr),y
.13a4	95 4a		sta $4a,x			sta 	NSMantissa1,x
.13a6	c8		iny				iny
.13a7	b1 28		lda ($28),y			lda 	(codePtr),y
.13a9	95 56		sta $56,x			sta 	NSMantissa2,x
.13ab	c8		iny				iny
.13ac	b1 28		lda ($28),y			lda 	(codePtr),y
.13ae	48		pha				pha
.13af	29 7f		and #$7f			and 	#$7F
.13b1	95 62		sta $62,x			sta 	NSMantissa3,x
.13b3	68		pla				pla 								; sign in mantissa3:7
.13b4	29 80		and #$80			and 	#$80
.13b6	95 32		sta $32,x			sta 	NSStatus,x
.13b8	c8		iny				iny
.13b9	4c 36 08	jmp $0836			jmp 	NextCommand
.13bc					CommandPushS:
.13bc	fa		plx				plx
.13bd	e8		inx				inx 								; next slot on stack
.13be	18		clc				clc
.13bf	98		tya				tya
.13c0	65 28		adc $28				adc 	codePtr 					; the string is inline
.13c2	95 3e		sta $3e,x			sta 	NSMantissa0,x
.13c4	a5 29		lda $29				lda 	codePtr+1
.13c6	69 00		adc #$00			adc 	#0
.13c8	95 4a		sta $4a,x			sta 	NSMantissa1,x
.13ca	74 56		stz $56,x			stz 	NSMantissa2,x
.13cc	74 62		stz $62,x			stz 	NSMantissa3,x
.13ce	a9 40		lda #$40			lda 	#NSSString
.13d0	95 32		sta $32,x			sta 	NSStatus,x
.13d2	98		tya				tya 								; string length +1 added to Y
.13d3	38		sec				sec
.13d4	71 28		adc ($28),y			adc 	(codePtr),y 				; next instruction
.13d6	a8		tay				tay
.13d7	4c 36 08	jmp $0836			jmp 	NextCommand
.13da					CommandXRead:
.13da	fa		plx				plx
.13db	5a		phy				phy 								; save Y
.13dc	20 0d 14	jsr $140d			jsr 	ReadStringToBuffer 			; read element into buffer
.13df	e8		inx				inx									; space on stack
.13e0	a9 60		lda #$60			lda 	#((ReadBufferSize) & $FF)
.13e2	85 2c		sta $2c				sta 	0+zTemp0
.13e4	a9 04		lda #$04			lda 	#((ReadBufferSize) >> 8) & $FF
.13e6	85 2d		sta $2d				sta 	1+zTemp0
.13e8	20 2c 19	jsr $192c			jsr 	ValEvaluateZTemp0
.13eb	b0 04		bcs $13f1			bcs 	_CRError 					; failed
.13ed	7a		ply				ply 								; restore Y
.13ee	4c 36 08	jmp $0836			jmp 	NextCommand
.13f1					_CRError:
.13f1	4c cf 1e	jmp $1ecf		jmp	ErrorV_value
.13f4					CommandReadString:
.13f4	fa		plx				plx
.13f5	5a		phy				phy 								; save Y
.13f6	20 0d 14	jsr $140d			jsr 	ReadStringToBuffer 			; read text
.13f9	e8		inx				inx 								; make space on stack
.13fa	20 22 26	jsr $2622			jsr 	FloatSetZero 				; store as string on stack
.13fd	a9 60		lda #$60			lda 	#ReadBufferSize & $FF
.13ff	95 3e		sta $3e,x			sta 	NSMantissa0,x
.1401	a9 04		lda #$04			lda 	#ReadBufferSize >> 8
.1403	95 4a		sta $4a,x			sta 	NSMantissa1,x
.1405	a9 40		lda #$40			lda 	#NSSString
.1407	95 32		sta $32,x			sta 	NSStatus,x
.1409	7a		ply				ply 								; restore Y
.140a	4c 36 08	jmp $0836			jmp 	NextCommand
.140d					ReadStringToBuffer:
.140d	a9 a0		lda #$a0			lda 	#((ReadBumpNext) & $FF)
.140f	8d 60 05	sta $0560			sta 	0+ReadBumpNextVec
.1412	a9 14		lda #$14			lda 	#((ReadBumpNext) >> 8) & $FF
.1414	8d 61 05	sta $0561			sta 	1+ReadBumpNextVec
.1417	a9 73		lda #$73			lda 	#((ReadLookNext) & $FF)
.1419	8d 62 05	sta $0562			sta 	0+ReadLookNextVec
.141c	a9 14		lda #$14			lda 	#((ReadLookNext) >> 8) & $FF
.141e	8d 63 05	sta $0563			sta 	1+ReadLookNextVec
.1421					GetStringToBuffer:
.1421	20 70 14	jsr $1470			jsr		GetLookNext 				; skip all leading spaces.
.1424	f0 44		beq $146a			beq 	_RBError 					; end of data
.1426	b0 f9		bcs $1421			bcs 	GetStringToBuffer 			; switched to new data line.
.1428	c9 20		cmp #$20			cmp 	#' ' 						; non space got something
.142a	b0 05		bcs $1431			bcs 	_RBNoSpace
.142c	20 6d 14	jsr $146d			jsr 	GetBumpNext 				; consume space and loop round.
.142f	80 f0		bra $1421			bra 	GetStringToBuffer
.1431					_RBNoSpace:
.1431	9c 60 04	stz $0460			stz 	ReadBufferSize 				; empty the buffer.
.1434	c9 22		cmp #$22			cmp 	#'"' 						; is it a '"'
.1436	d0 08		bne $1440			bne 	_RBCommaSep
.1438	8d 5f 04	sta $045f			sta 	ReadSep 					; use as a seperator
.143b	20 6d 14	jsr $146d			jsr 	GetBumpNext 				; consume the '"'
.143e	80 05		bra $1445			bra 	_RBGetText
.1440					_RBCommaSep:
.1440	a9 2c		lda #$2c			lda 	#","						; get till comma
.1442	8d 5f 04	sta $045f			sta 	ReadSep
.1445					_RBGetText:
.1445	20 70 14	jsr $1470			jsr 	GetLookNext 				; what follows
.1448	b0 18		bcs $1462			bcs 	_RBEndGet 					; if new DATA line, the end without consumption
.144a	20 6d 14	jsr $146d			jsr 	GetBumpNext 				; consume it whatever
.144d	cd 5f 04	cmp $045f			cmp 	ReadSep 					; if found the seperator.
.1450	f0 10		beq $1462			beq 	_RBEndGet 					; exit after consumption
.1452	da		phx				phx
.1453	ae 60 04	ldx $0460			ldx 	ReadBufferSize 				; copy into buffer.
.1456	ee 60 04	inc $0460			inc 	ReadBufferSize
.1459	9d 61 04	sta $0461,x			sta 	ReadBuffer,x
.145c	9e 62 04	stz $0462,x			stz 	ReadBuffer+1,x 				; make ASCIIZ as well.
.145f	fa		plx				plx
.1460	80 e3		bra $1445			bra 	_RBGetText
.1462					_RBEndGet:
.1462	c9 22		cmp #$22			cmp 	#'"'
.1464	d0 03		bne $1469			bne 	_RBNotQuote
.1466	20 6d 14	jsr $146d			jsr 	GetBumpNext
.1469					_RBNotQuote:
.1469	60		rts				rts
.146a					_RBError:
.146a	4c 84 1f	jmp $1f84		jmp	ErrorV_data
.146d					GetBumpNext:
.146d	6c 60 05	jmp ($0560)			jmp 	(ReadBumpNextVec)
.1470					GetLookNext:
.1470	6c 62 05	jmp ($0562)			jmp 	(ReadLookNextVec)
.1473					ReadLookNext:
.1473	ad 64 05	lda $0564			lda 	dataRemaining 				; any data remaining
.1476	f0 04		beq $147c			beq 	_RLNFindData
.1478	b2 2a		lda ($2a)			lda 	(objPtr) 					; return that object.
.147a	18		clc				clc
.147b	60		rts				rts
.147c					_RLNFindData:
.147c	b2 2a		lda ($2a)			lda 	(objPtr) 					; see where we are
.147e	c9 ff		cmp #$ff			cmp 	#$FF 						; if at $FF then end, error.
.1480	f0 1a		beq $149c			beq 	_RLNNoData
.1482	c9 cf		cmp #$cf			cmp 	#PCD_CMD_DATA 				; Found DATA
.1484	f0 05		beq $148b			beq 	_RLNHaveData
.1486					_RLNNext:
.1486	20 f1 1f	jsr $1ff1			jsr 	MoveObjectForward			; else scan forward.
.1489	80 f1		bra $147c			bra 	_RLNFindData
.148b					_RLNHaveData:
.148b	a0 01		ldy #$01			ldy 	#1 							; get length
.148d	b1 2a		lda ($2a),y			lda 	(objPtr),y
.148f	f0 f5		beq $1486			beq 	_RLNNext 					; skip if DATA alone
.1491	20 a0 14	jsr $14a0			jsr 	ReadBumpNext 				; advance by two
.1494	20 a0 14	jsr $14a0			jsr 	ReadBumpNext
.1497	8d 64 05	sta $0564			sta 	dataRemaining 				; set data left count.
.149a	38		sec				sec
.149b	60		rts				rts
.149c					_RLNNoData:
.149c	a9 00		lda #$00			lda 	#0
.149e	38		sec				sec
.149f	60		rts				rts
.14a0					ReadBumpNext:
.14a0	e6 2a		inc $2a				inc 	objPtr
.14a2	d0 02		bne $14a6			bne 	_RBNSkip
.14a4	e6 2b		inc $2b				inc 	objPtr+1
.14a6					_RBNSkip:
.14a6	ce 64 05	dec $0564			dec 	dataRemaining
.14a9	60		rts				rts
.045f					ReadSep:
>045f							.fill 	1
.0460					ReadBufferSize:
>0460							.fill 	1
.0461					ReadBuffer:
>0461							.fill 	255
.0560					ReadBumpNextVec:
>0560							.fill 	2
.0562					ReadLookNextVec:
>0562							.fill 	2
.14aa					ReadFloatCommand:
.14aa	fa		plx				plx
.14ab	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.14ad	85 2c		sta $2c				sta 	zTemp0 						; save in MSB
.14af	88		dey				dey 								; get the upper 3 bits
.14b0	b1 28		lda ($28),y			lda 	(codePtr),y
.14b2	29 07		and #$07			and 	#7
.14b4	c8		iny				iny
.14b5	c8		iny				iny
.14b6	06 2c		asl $2c				asl 	zTemp0 						; shift zTemp0:A left
.14b8	2a		rol a				rol 	a 							; carry will be clear.
.14b9	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.14bc	85 2d		sta $2d				sta 	zTemp0+1
.14be	20 c4 14	jsr $14c4			jsr 	ReadFloatZTemp0Sub
.14c1	4c 36 08	jmp $0836			jmp 	NextCommand
.14c4					ReadFloatZTemp0Sub:
.14c4	5a		phy				phy 								; start write
.14c5	a0 01		ldy #$01			ldy 	#1
.14c7	e8		inx				inx
.14c8	b2 2c		lda ($2c)			lda 	(zTemp0)
.14ca	95 3e		sta $3e,x			sta 	NSMantissa0,x
.14cc	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.14ce	95 4a		sta $4a,x			sta 	NSMantissa1,x
.14d0	c8		iny				iny
.14d1	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.14d3	95 56		sta $56,x			sta 	NSMantissa2,x
.14d5	c8		iny				iny
.14d6	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.14d8	95 62		sta $62,x			sta 	NSMantissa3,x
.14da	c8		iny				iny
.14db	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.14dd	95 6e		sta $6e,x			sta 	NSExponent,x
.14df	c8		iny				iny
.14e0	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.14e2	95 32		sta $32,x			sta 	NSStatus,x
.14e4	7a		ply				ply
.14e5	60		rts				rts
.14e6					ReadIntegerCommand:
.14e6	fa		plx				plx
.14e7	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.14e9	85 2c		sta $2c				sta 	zTemp0 						; save in MSB
.14eb	88		dey				dey 								; get the upper 3 bits
.14ec	b1 28		lda ($28),y			lda 	(codePtr),y
.14ee	29 07		and #$07			and 	#7
.14f0	c8		iny				iny
.14f1	c8		iny				iny
.14f2	06 2c		asl $2c				asl 	zTemp0 						; shift zTemp0:A left
.14f4	2a		rol a				rol 	a 							; carry will be clear.
.14f5	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.14f8	85 2d		sta $2d				sta 	zTemp0+1
.14fa	20 00 15	jsr $1500			jsr 	ReadIntegerZTemp0Sub
.14fd	4c 36 08	jmp $0836			jmp 	NextCommand
.1500					ReadIntegerZTemp0Sub:
.1500	5a		phy				phy 								; start write
.1501	a0 01		ldy #$01			ldy 	#1
.1503	e8		inx				inx 								; prepare
.1504	74 56		stz $56,x			stz 	NSMantissa2,x
.1506	74 62		stz $62,x			stz 	NSMantissa3,x
.1508	74 6e		stz $6e,x			stz 	NSExponent,x
.150a	74 32		stz $32,x			stz 	NSStatus,x
.150c	b1 2c		lda ($2c),y			lda 	(zTemp0),y 					; get MSB, do -ve code.
.150e	30 08		bmi $1518			bmi 	_RIZNegative
.1510	95 4a		sta $4a,x			sta 	NSMantissa1,x 				; +ve read
.1512	b2 2c		lda ($2c)			lda 	(zTemp0)
.1514	95 3e		sta $3e,x			sta 	NSMantissa0,x
.1516	7a		ply				ply
.1517	60		rts				rts
.1518					_RIZNegative:
.1518	38		sec				sec 								; -ve read
.1519	a9 00		lda #$00			lda 	#0
.151b	f2 2c		sbc ($2c)			sbc 	(zTemp0)
.151d	95 3e		sta $3e,x			sta 	NSMantissa0,x
.151f	a9 00		lda #$00			lda 	#0
.1521	f1 2c		sbc ($2c),y			sbc 	(zTemp0),y
.1523	95 4a		sta $4a,x			sta 	NSMantissa1,x
.1525	a9 80		lda #$80			lda 	#$80
.1527	95 32		sta $32,x			sta 	NSStatus,x
.1529	7a		ply				ply
.152a	60		rts				rts
.152b					ReadStringCommand:
.152b	fa		plx				plx
.152c	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.152e	85 2c		sta $2c				sta 	zTemp0 						; save in MSB
.1530	88		dey				dey 								; get the upper 3 bits
.1531	b1 28		lda ($28),y			lda 	(codePtr),y
.1533	29 07		and #$07			and 	#7
.1535	c8		iny				iny
.1536	c8		iny				iny
.1537	06 2c		asl $2c				asl 	zTemp0 						; shift zTemp0:A left
.1539	2a		rol a				rol 	a 							; carry will be clear.
.153a	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.153d	85 2d		sta $2d				sta 	zTemp0+1
.153f	20 45 15	jsr $1545			jsr 	ReadStringZTemp0Sub
.1542	4c 36 08	jmp $0836			jmp 	NextCommand
.1545					ReadStringZTemp0Sub:
.1545	5a		phy				phy 								; start write
.1546	e8		inx				inx 								; prepare
.1547	74 56		stz $56,x			stz 	NSMantissa2,x
.1549	74 62		stz $62,x			stz 	NSMantissa3,x
.154b	74 6e		stz $6e,x			stz 	NSExponent,x
.154d	a9 40		lda #$40			lda 	#NSSString
.154f	74 32		stz $32,x			stz 	NSStatus,x
.1551	18		clc				clc
.1552	b2 2c		lda ($2c)			lda 	(zTemp0)					; read address of block add 2.
.1554	69 02		adc #$02			adc 	#2 							; this points to actual data
.1556	95 3e		sta $3e,x			sta 	NSMantissa0,x 				; if address 0 the MSB will still be 0
.1558	a0 01		ldy #$01			ldy 	#1
.155a	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.155c	69 00		adc #$00			adc 	#0
.155e	95 4a		sta $4a,x			sta 	NSMantissa1,x 				; +ve read
.1560	d0 08		bne $156a			bne 	_RSZNoDefault 				; if read $00 use a default value.
.1562	a9 6c		lda #$6c			lda 	#_RSZNull & $FF
.1564	95 3e		sta $3e,x			sta 	NSMantissa0,x
.1566	a9 15		lda #$15			lda 	#_RSZNull >> 8
.1568	95 4a		sta $4a,x			sta 	NSMantissa1,x
.156a					_RSZNoDefault:
.156a	7a		ply				ply
.156b	60		rts				rts
.156c					_RSZNull:
>156c	00						.byte 	0
.156d					CommandRestore:
.156d	fa		plx				plx
.156e	20 74 15	jsr $1574			jsr 	RestoreCode
.1571	4c 36 08	jmp $0836			jmp 	NextCommand
.1574					RestoreCode:
.1574	ad 04 04	lda $0404			lda 	runtimeHigh 				; reset pointer
.1577	85 2b		sta $2b				sta 	objPtr+1
.1579	64 2a		stz $2a				stz 	objPtr
.157b	9c 64 05	stz $0564			stz 	dataRemaining 				; no data remaining.
.157e	60		rts				rts
.0564					dataRemaining:
>0564							.fill 	1		 					; 0 if not in data statement
.157f					UnaryRND:
.157f	fa		plx				plx
.1580	34 32		bit $32,x			bit 	NSStatus,x 					; -ve then set seed from operand
.1582	10 17		bpl $159b			bpl 	_URNoSeed
.1584	20 77 23	jsr $2377			jsr 	FloatNormalise 				; some float value
.1587	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; copy to Mantissa
.1589	8d 65 05	sta $0565			sta 	randomSeed+0
.158c	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.158e	8d 66 05	sta $0566			sta 	randomSeed+1
.1591	b5 56		lda $56,x			lda 	NSMantissa2,x
.1593	8d 67 05	sta $0567			sta 	randomSeed+2
.1596	b5 62		lda $62,x			lda 	NSMantissa3,x
.1598	8d 68 05	sta $0568			sta 	randomSeed+3
.159b					_URNoSeed:
.159b	20 bd 15	jsr $15bd			jsr 	RandomNumberGenerator 		; create a number and copy to mantissa
.159e	ad 65 05	lda $0565			lda 	randomSeed+0
.15a1	95 3e		sta $3e,x			sta 	NSMantissa0,x
.15a3	ad 66 05	lda $0566			lda 	randomSeed+1
.15a6	95 4a		sta $4a,x			sta 	NSMantissa1,x
.15a8	ad 67 05	lda $0567			lda 	randomSeed+2
.15ab	95 56		sta $56,x			sta 	NSMantissa2,x
.15ad	ad 68 05	lda $0568			lda 	randomSeed+3
.15b0	29 7f		and #$7f			and 	#$7F
.15b2	95 62		sta $62,x			sta 	NSMantissa3,x
.15b4	a9 e1		lda #$e1			lda 	#(-31 & $FF)
.15b6	95 6e		sta $6e,x			sta 	NSExponent,x
.15b8	74 32		stz $32,x			stz 	NSStatus,x
.15ba	4c 36 08	jmp $0836			jmp 	NextCommand
.15bd					RandomNumberGenerator:
.15bd	5a		phy				phy
.15be	ad 65 05	lda $0565			lda 	randomSeed+0 				; check if zero
.15c1	0d 66 05	ora $0566			ora 	randomSeed+1
.15c4	0d 67 05	ora $0567			ora 	randomSeed+2
.15c7	0d 68 05	ora $0568			ora 	randomSeed+3
.15ca	d0 07		bne $15d3			bne 	_RNGNoSeed
.15cc	ce 68 05	dec $0568			dec 	randomSeed+3 				; if so tweak and flog
.15cf	a0 64		ldy #$64			ldy 	#100
.15d1	80 05		bra $15d8			bra 	_RNGLoop
.15d3					_RNGNoSeed:
.15d3	a0 08		ldy #$08			ldy 	#8
.15d5	ad 65 05	lda $0565			lda 	randomSeed+0
.15d8					_RNGLoop:
.15d8	0a		asl a				asl		a
.15d9	2e 66 05	rol $0566			rol 	randomSeed+1
.15dc	2e 67 05	rol $0567			rol 	randomSeed+2
.15df	2e 68 05	rol $0568			rol 	randomSeed+3
.15e2	90 02		bcc $15e6			bcc		_RNGSkip
.15e4	49 c5		eor #$c5			eor 	#$C5
.15e6					_RNGSkip:
.15e6	88		dey				dey
.15e7	d0 ef		bne $15d8			bne		_RNGLoop
.15e9	8d 65 05	sta $0565			sta 	randomSeed+0
.15ec	7a		ply				ply
.15ed	60		rts				rts
.0565					randomSeed:
>0565							.fill 	4
.15ee					StringConcatenate:
.15ee	fa		plx				plx
.15ef	ca		dex				dex
.15f0	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; copy strings to zTemp1 and zTemp2
.15f2	85 2e		sta $2e				sta 	zTemp1
.15f4	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.15f6	85 2f		sta $2f				sta 	zTemp1+1
.15f8	b5 3f		lda $3f,x			lda 	NSMantissa0+1,x
.15fa	85 30		sta $30				sta 	zTemp2
.15fc	b5 4b		lda $4b,x			lda 	NSMantissa1+1,x
.15fe	85 31		sta $31				sta 	zTemp2+1
.1600	18		clc				clc 								; work out total length
.1601	b2 2e		lda ($2e)			lda 	(zTemp1)
.1603	72 30		adc ($30)			adc 	(zTemp2)
.1605	b0 18		bcs $161f			bcs 	_BCLength 					; more than 255 characters.
.1607	48		pha				pha 								; save total
.1608	20 e5 16	jsr $16e5			jsr 	StringAllocTemp 			; space for result.
.160b	68		pla				pla 								; write total as first.
.160c	92 22		sta ($22)			sta 	(zsTemp)
.160e	20 22 16	jsr $1622			jsr 	_BCCopyZTemp1 				; copy zTemp1 to target
.1611	a5 30		lda $30				lda 	zTemp2 						; copy address zTemp2->1
.1613	85 2e		sta $2e				sta 	zTemp1
.1615	a5 31		lda $31				lda 	zTemp2+1
.1617	85 2f		sta $2f				sta 	zTemp1+1
.1619	20 22 16	jsr $1622			jsr 	_BCCopyZTemp1 				; and copy it, e.g. zTemp2
.161c	4c 36 08	jmp $0836			jmp 	NextCommand
.161f					_BCLength:
.161f	4c bf 1e	jmp $1ebf		jmp	ErrorV_range
.1622					_BCCopyZTemp1:
.1622	b2 2e		lda ($2e)			lda 	(zTemp1) 					; bytes to copy
.1624	f0 15		beq $163b			beq 	_BCCExit 					; none.
.1626	da		phx				phx 								; save XY
.1627	5a		phy				phy
.1628	aa		tax				tax 								; count in X.
.1629	a0 01		ldy #$01			ldy 	#1
.162b					_BCCLoop:
.162b	e6 22		inc $22				inc 	zsTemp 						; bump pointer, pre-increment
.162d	d0 02		bne $1631			bne 	_BCCNoCarry
.162f	e6 23		inc $23				inc 	zsTemp+1
.1631					_BCCNoCarry:
.1631	b1 2e		lda ($2e),y			lda 	(zTemp1),y				 	; copy bytes
.1633	92 22		sta ($22)			sta 	(zsTemp)
.1635	c8		iny				iny
.1636	ca		dex				dex 								; X times
.1637	d0 f2		bne $162b			bne 	_BCCLoop
.1639	7a		ply				ply 								; restore YX
.163a	fa		plx				plx
.163b					_BCCExit:
.163b	60		rts				rts
.163c					XRuntimeSetup:
.163c	a9 ff		lda #$ff	 		lda 	#$FF 						; default banks to access.
.163e	8d 6c 05	sta $056c	 		sta 	ramBank
.1641	8d 6d 05	sta $056d	 		sta 	romBank
.1644	60		rts				rts
.1645					SignTOS:
.1645	fa		plx				plx
.1646	20 44 26	jsr $2644			jsr 	FloatIsZero 				; if zero
.1649	f0 0f		beq $165a			beq 	_SGZero  					; return Int Zero
.164b	b5 32		lda $32,x			lda 	NSStatus,x 					; get status w/sign
.164d	48		pha				pha
.164e	a9 01		lda #$01			lda 	#1 							; set result to 1
.1650	20 24 26	jsr $2624			jsr 	FloatSetByte
.1653	68		pla				pla
.1654	29 80		and #$80			and		#$80 						; copy the sign byte out
.1656	95 32		sta $32,x			sta 	NSStatus,x  				; so it will be -1 or 1
.1658	80 03		bra $165d			bra 	_SGExit
.165a					_SGZero:
.165a	20 22 26	jsr $2622			jsr 	FloatSetZero
.165d					_SGExit:
.165d	4c 36 08	jmp $0836			jmp 	NextCommand
.1660					CommandShift:
.1660	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted command (X already pushed)
.1662	c8		iny				iny
.1663	0a		asl a				asl 	a 							; double into X
.1664	aa		tax				tax
.1665	7c 10 1a	jmp ($1a10,x)			jmp 	(ShiftVectorTable,x) 		; go there.
.1668					PrintTab:
.1668	fa		plx				plx
.1669	20 af 1b	jsr $1baf			jsr 	XGetHPos
.166c					_PTMod10:
.166c	38		sec				sec
.166d	e9 0a		sbc #$0a			sbc 	#10
.166f	b0 fb		bcs $166c			bcs 	_PTMod10
.1671	49 ff		eor #$ff			eor 	#255 						; subtract from 10 effectively. negate it
.1673	1a		inc a				inc 	a 							; if modulus is 0, then this will be -10 => 10
.1674	80 15		bra $168b			bra 	PrintSpaceLoop
.1676					PrintPos:
.1676	fa		plx				plx
.1677	20 af 1b	jsr $1baf			jsr		XGetHPos 					; get current position
.167a	85 2c		sta $2c				sta 	zTemp0
.167c	38		sec				sec 								; calculate spaces required
.167d	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.167f	ca		dex				dex
.1680	e5 2c		sbc $2c				sbc 	zTemp0
.1682	b0 07		bcs $168b			bcs 	PrintSpaceLoop 				; if >= 0 then do that many spaces
.1684	4c 36 08	jmp $0836			jmp 	NextCommand
.1687					PrintSpace:
.1687	fa		plx				plx
.1688	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.168a	ca		dex				dex
.168b					PrintSpaceLoop:
.168b	c9 00		cmp #$00			cmp 	#0
.168d	f0 0a		beq $1699			beq 	_PSExit
.168f	48		pha				pha
.1690	a9 20		lda #$20			lda 	#" "
.1692	20 42 13	jsr $1342			jsr 	VectorPrintCharacter
.1695	68		pla				pla
.1696	3a		dec a				dec 	a
.1697	80 f2		bra $168b			bra 	PrintSpaceLoop
.1699					_PSExit:
.1699	4c 36 08	jmp $0836			jmp 	NextCommand
.169c					CommandStop:
.169c	fa		plx				plx
.169d	4c 71 1f	jmp $1f71		jmp	ErrorV_stop
.16a0					Unary_Str:
.16a0	fa		plx				plx
.16a1	5a		phy				phy
.16a2	a9 08		lda #$08			lda 	#8 							; maximum decimal places.
.16a4	20 0a 25	jsr $250a			jsr 	FloatToString 				; do the conversion.
.16a7	a9 21		lda #$21			lda		#33 						; create buffer
.16a9	20 e5 16	jsr $16e5			jsr 	StringAllocTemp 			; allocate memory
.16ac	a0 01		ldy #$01			ldy 	#1  						; copy the converted string into the buffer.
.16ae					_USCopy:
.16ae	b9 96 05	lda $0596,y			lda 	decimalBuffer-1,y
.16b1	f0 05		beq $16b8			beq 	_USExit
.16b3	91 22		sta ($22),y			sta 	(zsTemp),y
.16b5	c8		iny				iny
.16b6	80 f6		bra $16ae			bra 	_USCopy
.16b8					_USExit:
.16b8	98		tya				tya
.16b9	3a		dec a				dec 	a
.16ba	92 22		sta ($22)			sta 	(zsTemp)
.16bc	7a		ply				ply
.16bd	4c 36 08	jmp $0836			jmp 	NextCommand
.16c0					StringInitialise:
.16c0	48		pha				pha
.16c1	ad 69 05	lda $0569			lda 	stringInitialised 			; already done
.16c4	d0 11		bne $16d7			bne 	_SIExit
.16c6	ad 02 04	lda $0402			lda 	stringHighMemory 			; copy high memory - 512 => stringTempPointer
.16c9	8d 6a 05	sta $056a			sta 	stringTempPointer
.16cc	ad 03 04	lda $0403			lda 	stringHighMemory+1
.16cf	3a		dec a				dec 	a
.16d0	3a		dec a				dec 	a
.16d1	8d 6b 05	sta $056b			sta 	stringTempPointer+1
.16d4	ce 69 05	dec $0569			dec 	stringInitialised 			; set the initialised flag.
.16d7					_SIExit:
.16d7	a5 27		lda $27				lda 	availableMemory+1 			; check out of memory
.16d9	1a		inc a				inc 	a
.16da	1a		inc a				inc 	a
.16db	cd 03 04	cmp $0403			cmp 	stringHighMemory+1
.16de	b0 02		bcs $16e2			bcs 	_SIMemory
.16e0	68		pla				pla
.16e1	60		rts				rts
.16e2					_SIMemory:
.16e2	4c ca 1f	jmp $1fca		jmp	ErrorV_memory
.16e5					StringAllocTemp:
.16e5	20 c0 16	jsr $16c0			jsr 	StringInitialise 			; check it is initialised.
.16e8	49 ff		eor #$ff			eor 	#$FF 						; subtract A+1 from temp pointer.
.16ea	18		clc				clc
.16eb	6d 6a 05	adc $056a			adc 	stringTempPointer 			; subtract 32 from temp pointer and
.16ee	8d 6a 05	sta $056a			sta 	stringTempPointer 			; save in zsTemp and stackas well.
.16f1	85 22		sta $22				sta 	zsTemp
.16f3	95 3e		sta $3e,x			sta 	NSMantissa0,x
.16f5	ad 6b 05	lda $056b			lda 	stringTempPointer+1
.16f8	69 ff		adc #$ff			adc 	#$FF
.16fa	8d 6b 05	sta $056b			sta 	stringTempPointer+1
.16fd	85 23		sta $23				sta 	zsTemp+1
.16ff	95 4a		sta $4a,x			sta 	NSMantissa1,x
.1701	74 56		stz $56,x			stz 	NSMantissa2,x
.1703	74 62		stz $62,x			stz 	NSMantissa3,x
.1705	a9 00		lda #$00			lda 	#0 							; clear string.
.1707	92 22		sta ($22)			sta 	(zsTemp)
.1709	a9 40		lda #$40			lda 	#NSSString 			 		; mark as string
.170b	95 32		sta $32,x			sta 	NSStatus,x
.170d	60		rts				rts
.170e					StringWriteChar:
.170e	5a		phy				phy
.170f	48		pha				pha
.1710	b2 22		lda ($22)			lda 	(zsTemp)
.1712	1a		inc a				inc 	a
.1713	92 22		sta ($22)			sta 	(zsTemp)
.1715	a8		tay				tay
.1716	68		pla				pla
.1717	91 22		sta ($22),y			sta 	(zsTemp),y
.1719	7a		ply				ply
.171a	60		rts				rts
.0569					stringInitialised:
>0569							.fill 	1
.056a					stringTempPointer:
>056a							.fill 	2
.171b					Unary_Left:
.171b	fa		plx				plx
.171c	5a		phy				phy
.171d	18		clc				clc 								; only one parameter
.171e	20 15 10	jsr $1015			jsr 	GetInteger8Bit 				; push the length of the string.
.1721	48		pha				pha
.1722	ca		dex				dex
.1723	a9 00		lda #$00			lda 	#0 							; push the start position.
.1725	48		pha				pha
.1726	20 5e 17	jsr $175e			jsr 	UnarySStringToZTemp0
.1729	80 3c		bra $1767			bra 	SubstringMain 				; stack now points to the string to slice.
.172b					Unary_Right:
.172b	fa		plx				plx
.172c	5a		phy				phy
.172d	a9 ff		lda #$ff			lda 	#255 						; push 255, we want all the string.
.172f	20 15 10	jsr $1015			jsr 	GetInteger8Bit 				; push the right length of the string.
.1732	48		pha				pha
.1733	ca		dex				dex
.1734	20 5e 17	jsr $175e			jsr 	UnarySStringToZTemp0
.1737	68		pla				pla 								; this is the right requirement
.1738	38		sec				sec
.1739	49 ff		eor #$ff			eor 	#$FF
.173b	72 2c		adc ($2c)			adc 	(zTemp0)
.173d	b0 02		bcs $1741			bcs 	_URHaveCount
.173f	a9 00		lda #$00			lda 	#0 							; overflow, start from 0
.1741					_URHaveCount:
.1741	a0 ff		ldy #$ff			ldy 	#255 						; whole string
.1743	5a		phy				phy
.1744	48		pha				pha 								; start position
.1745	80 20		bra $1767			bra 	SubstringMain
.1747					Unary_Mid:
.1747	fa		plx				plx
.1748	5a		phy				phy
.1749	20 15 10	jsr $1015			jsr 	GetInteger8Bit 				; push the length of the string required.
.174c	48		pha				pha
.174d	ca		dex				dex
.174e	20 15 10	jsr $1015			jsr 	GetInteger8Bit 				; put the start position.
.1751	f0 08		beq $175b			beq 	_UMError
.1753	3a		dec a				dec 	a
.1754	48		pha				pha
.1755	ca		dex				dex
.1756	20 5e 17	jsr $175e			jsr 	UnarySStringToZTemp0
.1759	80 0c		bra $1767			bra 	SubstringMain 				; stack now points to the string to slice.
.175b					_UMError:
.175b	4c bf 1e	jmp $1ebf		jmp	ErrorV_range
.175e					UnarySStringToZTemp0:
.175e	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.1760	85 2c		sta $2c				sta 	zTemp0
.1762	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.1764	85 2d		sta $2d				sta 	zTemp0+1
.1766	60		rts				rts
.1767					SubstringMain:
.1767	68		pla				pla 								; get the start offset
.1768	7a		ply				ply 								; get the count to do.
.1769	d2 2c		cmp ($2c)			cmp 	(zTemp0) 					; if start >= length then return NULL.
.176b	b0 38		bcs $17a5			bcs 	_SSReturnNull
.176d	85 2e		sta $2e				sta 	zTemp1 						; save start position.
.176f	84 2f		sty $2f				sty 	zTemp1+1 					; save count
.1771	18		clc				clc
.1772	65 2f		adc $2f				adc 	zTemp1+1 					; this is the end position.
.1774	b0 06		bcs $177c			bcs 	_SMTruncateToEnd 			; if overflow, limit to length-start.
.1776	d2 2c		cmp ($2c)			cmp 	(zTemp0) 					; ok if limit is <= length.
.1778	f0 04		beq $177e			beq 	_SMIsOkay
.177a	90 02		bcc $177e			bcc 	_SMIsOkay
.177c					_SMTruncateToEnd:
.177c	b2 2c		lda ($2c)			lda 	(zTemp0) 					; end position is length.
.177e					_SMIsOkay:
.177e	85 2f		sta $2f				sta 	zTemp1+1
.1780	38		sec				sec		 							; work out size
.1781	a5 2f		lda $2f				lda 	zTemp1+1
.1783	e5 2e		sbc $2e				sbc 	zTemp1
.1785	f0 1e		beq $17a5			beq 	_SSReturnNull 				; if size = 0 then return empty string.
.1787	20 e5 16	jsr $16e5			jsr 	StringAllocTemp 			; zsTemp & mantissa = the new string.
.178a	a4 2e		ldy $2e				ldy 	zTemp1 						; start
.178c					_SMCopy:
.178c	c4 2f		cpy $2f				cpy 	zTemp1+1 					; exit if reached end
.178e	f0 11		beq $17a1			beq 	_SMExit
.1790	c8		iny				iny 								; bump and
.1791	b1 2c		lda ($2c),y			lda 	(zTemp0),y 					; get character (prefix)
.1793	5a		phy				phy
.1794	48		pha				pha
.1795	b2 22		lda ($22)			lda 	(zsTemp) 					; bump length => Y
.1797	1a		inc a				inc 	a
.1798	a8		tay				tay
.1799	92 22		sta ($22)			sta 	(zsTemp)
.179b	68		pla				pla 								; write character out
.179c	91 22		sta ($22),y			sta 	(zsTemp),y
.179e	7a		ply				ply 								; restore Y
.179f	80 eb		bra $178c			bra 	_SMCopy
.17a1					_SMExit:
.17a1	7a		ply				ply
.17a2	4c 36 08	jmp $0836			jmp 	NextCommand
.17a5					_SSReturnNull:
.17a5	a9 b7		lda #$b7			lda 	#SSRNull & $FF 				; set up mantissa
.17a7	95 3e		sta $3e,x			sta 	NSMantissa0,x
.17a9	a9 17		lda #$17			lda 	#SSRNull >> 8
.17ab	95 4a		sta $4a,x			sta 	NSMantissa1,x
.17ad	74 56		stz $56,x			stz 	NSMantissa2,x
.17af	74 62		stz $62,x			stz 	NSMantissa3,x
.17b1	a9 40		lda #$40			lda 	#NSSString
.17b3	95 32		sta $32,x			sta 	NSStatus,x
.17b5	80 ea		bra $17a1			bra 	_SMExit
.17b7					SSRNull:
>17b7	00 00						.word 	0
.17b9					CommandSwap:
.17b9	fa		plx				plx
.17ba	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.17bc	48		pha				pha
.17bd	b5 3d		lda $3d,x			lda 	NSMantissa0-1,x
.17bf	95 3e		sta $3e,x			sta 	NSMantissa0,x
.17c1	68		pla				pla
.17c2	95 3d		sta $3d,x			sta 	NSMantissa0-1,x
.17c4	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.17c6	48		pha				pha
.17c7	b5 49		lda $49,x			lda 	NSMantissa1-1,x
.17c9	95 4a		sta $4a,x			sta 	NSMantissa1,x
.17cb	68		pla				pla
.17cc	95 49		sta $49,x			sta 	NSMantissa1-1,x
.17ce	b5 56		lda $56,x			lda 	NSMantissa2,x
.17d0	48		pha				pha
.17d1	b5 55		lda $55,x			lda 	NSMantissa2-1,x
.17d3	95 56		sta $56,x			sta 	NSMantissa2,x
.17d5	68		pla				pla
.17d6	95 55		sta $55,x			sta 	NSMantissa2-1,x
.17d8	b5 62		lda $62,x			lda 	NSMantissa3,x
.17da	48		pha				pha
.17db	b5 61		lda $61,x			lda 	NSMantissa3-1,x
.17dd	95 62		sta $62,x			sta 	NSMantissa3,x
.17df	68		pla				pla
.17e0	95 61		sta $61,x			sta 	NSMantissa3-1,x
.17e2	b5 6e		lda $6e,x			lda 	NSExponent,x
.17e4	48		pha				pha
.17e5	b5 6d		lda $6d,x			lda 	NSExponent-1,x
.17e7	95 6e		sta $6e,x			sta 	NSExponent,x
.17e9	68		pla				pla
.17ea	95 6d		sta $6d,x			sta 	NSExponent-1,x
.17ec	b5 32		lda $32,x			lda 	NSStatus,x
.17ee	48		pha				pha
.17ef	b5 31		lda $31,x			lda 	NSStatus-1,x
.17f1	95 32		sta $32,x			sta 	NSStatus,x
.17f3	68		pla				pla
.17f4	95 31		sta $31,x			sta 	NSStatus-1,x
.17f6	4c 36 08	jmp $0836			jmp 	NextCommand
.17f9					CommandSYS:
.17f9	fa		plx				plx
.17fa	da		phx				phx 								; save XY
.17fb	5a		phy				phy
.17fc	20 5d 22	jsr $225d			jsr 	FloatIntegerPart
.17ff	b5 4a		lda $4a,x			lda 	NSMantissa1,x 				; get call address => zTemp0
.1801	85 2d		sta $2d				sta 	zTemp0+1
.1803	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.1805	85 2c		sta $2c				sta 	zTemp0
.1807	ae 0d 03	ldx $030d			ldx 	SYS_Reg_X 					; load registers
.180a	ac 0e 03	ldy $030e			ldy 	SYS_Reg_Y
.180d	ad 0f 03	lda $030f			lda 	SYS_Reg_S
.1810	48		pha				pha
.1811	ad 0c 03	lda $030c			lda 	SYS_Reg_A
.1814	28		plp				plp
.1815	20 2c 18	jsr $182c			jsr 	_CSZTemp0
.1818	08		php				php
.1819	8e 0d 03	stx $030d			stx 	SYS_Reg_X 					; load registers
.181c	8c 0e 03	sty $030e			sty 	SYS_Reg_Y
.181f	8d 0c 03	sta $030c			sta 	SYS_Reg_A
.1822	68		pla				pla
.1823	8d 0f 03	sta $030f			sta 	SYS_Reg_S
.1826	7a		ply				ply 								; restore YX and drop 2
.1827	fa		plx				plx
.1828	ca		dex				dex
.1829	4c 36 08	jmp $0836			jmp 	NextCommand
.182c					_CSZTemp0:
.182c	6c 2c 00	jmp ($002c)			jmp 	(zTemp0)
.182f					TimeTOS:
.182f	fa		plx				plx
.1830	20 8a 18	jsr $188a			jsr 	TIPushClock 				; push clock to TOS
.1833	4c 36 08	jmp $0836			jmp 	NextCommand
.1836					TimeString:
.1836	fa		plx				plx
.1837	20 8a 18	jsr $188a			jsr 	TIPushClock 				; push clock to TOS
.183a	20 5f 18	jsr $185f			jsr 	_TSDivMod60 				; result in seconds
.183d	20 5f 18	jsr $185f			jsr 	_TSDivMod60 				; seconds
.1840	48		pha				pha
.1841	20 5f 18	jsr $185f			jsr 	_TSDivMod60 				; minutes
.1844	48		pha				pha
.1845	a9 18		lda #$18			lda 	#24 						; hours
.1847	20 61 18	jsr $1861			jsr 	_TSDivModA
.184a	48		pha				pha
.184b	a9 06		lda #$06			lda 	#6
.184d	20 e5 16	jsr $16e5			jsr 	StringAllocTemp
.1850	68		pla				pla
.1851	20 71 18	jsr $1871			jsr 	_TSWriteDecimal
.1854	68		pla				pla
.1855	20 71 18	jsr $1871			jsr 	_TSWriteDecimal
.1858	68		pla				pla
.1859	20 71 18	jsr $1871			jsr 	_TSWriteDecimal
.185c	4c 36 08	jmp $0836			jmp 	NextCommand
.185f					_TSDivMod60:
.185f	a9 3c		lda #$3c			lda 	#60
.1861					_TSDivModA:
.1861	e8		inx				inx
.1862	20 24 26	jsr $2624			jsr 	FloatSetByte
.1865	ca		dex				dex
.1866	20 b8 21	jsr $21b8			jsr 	Int32Divide
.1869	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; get modulus
.186b	48		pha				pha
.186c	20 a7 21	jsr $21a7			jsr 	NSMCopyPlusTwoToZero
.186f	68		pla				pla
.1870	60		rts				rts
.1871					_TSWriteDecimal:
.1871	da		phx				phx
.1872	a2 30		ldx #$30			ldx 	#'0'
.1874					_TSWDLoop:
.1874	c9 0a		cmp #$0a			cmp 	#10
.1876	90 05		bcc $187d			bcc 	_TSWDEnd
.1878	e9 0a		sbc #$0a			sbc 	#10
.187a	e8		inx				inx
.187b	80 f7		bra $1874			bra 	_TSWDLoop
.187d					_TSWDEnd:
.187d	48		pha				pha
.187e	8a		txa				txa
.187f	20 0e 17	jsr $170e			jsr 	StringWriteChar
.1882	68		pla				pla
.1883	09 30		ora #$30			ora 	#'0'
.1885	20 0e 17	jsr $170e			jsr 	StringWriteChar
.1888	fa		plx				plx
.1889	60		rts				rts
.188a					TIPushClock:
.188a	5a		phy				phy
.188b	e8		inx				inx 								; push 0 on the stack
.188c	20 22 26	jsr $2622			jsr 	FloatSetZero
.188f	da		phx				phx
.1890	20 7a 1c	jsr $1c7a			jsr 	XReadClock 					; read time into YXA
.1893	86 2c		stx $2c				stx 	zTemp0
.1895	fa		plx				plx
.1896	95 3e		sta $3e,x			sta 	NSMantissa0,x
.1898	a5 2c		lda $2c				lda 	zTemp0
.189a	95 4a		sta $4a,x			sta 	NSMantissa1,x
.189c	98		tya				tya
.189d	95 56		sta $56,x			sta 	NSMantissa2,x
.189f	7a		ply				ply
.18a0	60		rts				rts
.18a1					CommandTIWrite:
.18a1	fa		plx				plx
.18a2	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; copy string address to ZSTemp
.18a4	85 22		sta $22				sta 	zsTemp
.18a6	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.18a8	85 23		sta $23				sta 	zsTemp+1
.18aa	b2 22		lda ($22)			lda 	(zsTemp) 					; check if it is six
.18ac	c9 06		cmp #$06			cmp 	#6
.18ae	d0 59		bne $1909			bne 	_CTIWError
.18b0	20 22 26	jsr $2622			jsr 	FloatSetZero
.18b3	20 d5 18	jsr $18d5			jsr 	_CTIWDigitPair 				; do a digit pair 3 times
.18b6	20 d5 18	jsr $18d5			jsr 	_CTIWDigitPair
.18b9	20 d5 18	jsr $18d5			jsr 	_CTIWDigitPair
.18bc	a9 3c		lda #$3c			lda 	#60 						; multiply the result by 60.
.18be	20 00 19	jsr $1900			jsr 	_CTIWMultiply
.18c1	da		phx				phx
.18c2	5a		phy				phy
.18c3	b5 4a		lda $4a,x			lda 	NSMantissa1,x 				; get time into YXA
.18c5	48		pha				pha
.18c6	b5 56		lda $56,x			lda 	NSMantissa2,x
.18c8	a8		tay				tay
.18c9	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.18cb	fa		plx				plx
.18cc	20 7e 1c	jsr $1c7e			jsr 	XWriteClock 				; update the clock.
.18cf	7a		ply				ply
.18d0	fa		plx				plx
.18d1	ca		dex				dex 								; throw result.
.18d2	4c 36 08	jmp $0836			jmp 	NextCommand
.18d5					_CTIWDigitPair:
.18d5	a9 06		lda #$06			lda 	#6 							; x 6
.18d7	20 00 19	jsr $1900			jsr 	_CTIWMultiply
.18da	20 e6 18	jsr $18e6			jsr 	_CTIWAddDigit 				; add digit
.18dd	a9 0a		lda #$0a			lda 	#10 						; x 10
.18df	20 00 19	jsr $1900			jsr 	_CTIWMultiply
.18e2	20 e6 18	jsr $18e6			jsr 	_CTIWAddDigit 				; add digit
.18e5	60		rts				rts
.18e6					_CTIWAddDigit:
.18e6	e6 22		inc $22				inc 	zsTemp 						; pre-increment
.18e8	d0 02		bne $18ec			bne 	_CTIWASkip
.18ea	e6 23		inc $23				inc 	zsTemp+1
.18ec					_CTIWASkip:
.18ec	b2 22		lda ($22)			lda 	(zsTemp) 					; read and validate it
.18ee	38		sec				sec
.18ef	e9 30		sbc #$30			sbc 	#"0"
.18f1	90 16		bcc $1909			bcc 	_CTIWError
.18f3	c9 0a		cmp #$0a			cmp 	#9+1
.18f5	b0 12		bcs $1909			bcs 	_CTIWError
.18f7	e8		inx				inx 								; store at +1
.18f8	20 24 26	jsr $2624			jsr 	FloatSetByte
.18fb	ca		dex				dex
.18fc	20 ae 23	jsr $23ae			jsr 	FloatAddTopTwoStack
.18ff	60		rts				rts
.1900					_CTIWMultiply:
.1900	e8		inx				inx
.1901	20 24 26	jsr $2624			jsr 	FloatSetByte
.1904	ca		dex				dex
.1905	20 2f 23	jsr $232f			jsr 	FloatMultiplyShort
.1908	60		rts				rts
.1909					_CTIWError:
.1909	4c cf 1e	jmp $1ecf		jmp	ErrorV_value
.190c					UnaryUsr:
.190c	fa		plx				plx
.190d	5a		phy				phy
.190e	20 15 19	jsr $1915			jsr 	_UUCallVector
.1911	7a		ply				ply
.1912	4c 36 08	jmp $0836			jmp 	NextCommand
.1915					_UUCallVector:
.1915	6c 11 03	jmp ($0311)			jmp 	(USRRoutineAddress)
.1918					ValUnary:
.1918	fa		plx				plx
.1919	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.191b	85 2c		sta $2c				sta 	zTemp0
.191d	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.191f	85 2d		sta $2d				sta 	zTemp0+1
.1921	20 2c 19	jsr $192c			jsr 	ValEvaluateZTemp0
.1924	b0 03		bcs $1929			bcs 	_VUError 					; couldn't convert
.1926	4c 36 08	jmp $0836			jmp 	NextCommand
.1929					_VUError:
.1929	4c cf 1e	jmp $1ecf		jmp	ErrorV_value
.192c					ValEvaluateZTemp0:
.192c	5a		phy				phy
.192d	b2 2c		lda ($2c)			lda 	(zTemp0) 					; check not empty string
.192f	f0 22		beq $1953			beq 	_VMCFail2
.1931	a0 00		ldy #$00			ldy 	#0 							; start position
.1933					_VMCSpaces:
.1933	c8		iny				iny 								; skip leading spaces
.1934	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.1936	c9 20		cmp #$20			cmp 	#" "
.1938	f0 f9		beq $1933			beq 	_VMCSpaces
.193a	48		pha				pha 								; save first character
.193b	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.193d	d0 01		bne $1940			bne 	_VMCStart
.193f	c8		iny				iny 								; skip over - if so.
.1940					_VMCStart:
.1940	38		sec				sec 								; initialise first time round.
.1941					_VMCNext:
.1941	98		tya				tya 								; reached end of string
.1942	3a		dec a				dec 	a
.1943	52 2c		eor ($2c)			eor 	(zTemp0) 					; compare length preserve carry.
.1945	f0 0f		beq $1956			beq 	_VMCSuccess 				; successful.
.1947	b1 2c		lda ($2c),y			lda 	(zTemp0),y 					; encode a number.
.1949	c8		iny				iny
.194a	20 06 24	jsr $2406			jsr 	FloatEncode 				; send it to the number-builder
.194d	90 03		bcc $1952			bcc 	_VMCFail 					; if failed, give up.
.194f	18		clc				clc 								; next time round, countinue
.1950	80 ef		bra $1941			bra 	_VMCNext
.1952					_VMCFail:
.1952	68		pla				pla
.1953					_VMCFail2:
.1953	7a		ply				ply
.1954	38		sec				sec
.1955	60		rts				rts
.1956					_VMCSuccess:
.1956	a9 00		lda #$00			lda 	#0 							; construct final
.1958	20 06 24	jsr $2406			jsr 	FloatEncode 				; by sending a duff value.
.195b	68		pla				pla 								; if it was -ve
.195c	c9 2d		cmp #$2d			cmp 	#"-"
.195e	d0 03		bne $1963			bne 	_VMCNotNegative
.1960	20 e4 25	jsr $25e4			jsr		FloatNegate 				; negate it.
.1963					_VMCNotNegative:
.1963	7a		ply				ply
.1964	18		clc				clc
.1965	60		rts				rts
.1966					VectorTable:
>1966	7d 10					.word	LinkFloatAdd             ; $80 +
>1968	86 10					.word	LinkFloatSubtract        ; $81 -
>196a	8f 10					.word	LinkFloatMultiply        ; $82 *
>196c	98 10					.word	LinkFloatDivide          ; $83 /
>196e	a3 10					.word	LinkFloatPower           ; $84 ^
>1970	c8 08					.word	BinaryAnd                ; $85 and
>1972	cc 08					.word	BinaryOr                 ; $86 or
>1974	ae 10					.word	LinkCompareGreater       ; $87 >
>1976	b7 10					.word	LinkCompareEqual         ; $88 =
>1978	c0 10					.word	LinkCompareLess          ; $89 <
>197a	c9 10					.word	LinkCompareGreaterEqual  ; $8a >=
>197c	d2 10					.word	LinkCompareNotEqual      ; $8b <>
>197e	db 10					.word	LinkCompareLessEqual     ; $8c <=
>1980	b0 08					.word	AbsoluteTOS              ; $8d abs
>1982	03 09					.word	ArrayConvert             ; $8e array
>1984	ab 09					.word	UnaryAsc                 ; $8f asc
>1986	c6 09					.word	CommandAssert            ; $90 assert
>1988	07 0a					.word	Unary16Bin               ; $91 bin$
>198a	31 0a					.word	PrintCharacterX          ; $92 print.chr
>198c	3b 0a					.word	UnaryChr                 ; $93 chr$
>198e	a0 0a					.word	CompareStrings           ; $94 s.cmp
>1990	8a 0c					.word	CommandXFor              ; $95 for
>1992	4d 0d					.word	UnaryFre                 ; $96 fre
>1994	65 0d					.word	CommandXGet              ; $97 get
>1996	8b 0d					.word	CommandReturn            ; $98 return
>1998	cd 0d					.word	Command_PSET             ; $99 pset
>199a	e7 0d					.word	Command_LINE             ; $9a line
>199c	fc 0d					.word	Command_RECT             ; $9b rect
>199e	0b 0e					.word	Command_FRAME            ; $9c frame
>19a0	1a 0e					.word	Command_CHAR             ; $9d char
>19a2	b1 0e					.word	Unary16Hex               ; $9e hex$
>19a4	58 0f					.word	CommandXInput            ; $9f input
>19a6	6f 0f					.word	CommandInputString       ; $a0 input$
>19a8	88 0f					.word	CommandInputReset        ; $a1 input.start
>19aa	6c 10					.word	UnaryLen                 ; $a2 len
>19ac	38 11					.word	LinkFloatCompare         ; $a3 f.cmp
>19ae	41 11					.word	LinkDivideInt32          ; $a4 int.div
>19b0	bb 11					.word	NegateTOS                ; $a5 negate
>19b2	c2 11					.word	CommandNewLine           ; $a6 new.line
>19b4	cb 11					.word	CommandXNext             ; $a7 next
>19b6	b4 12					.word	NotTOS                   ; $a8 not
>19b8	cb 12					.word	CommandXOn               ; $a9 on
>19ba	e8 12					.word	CommandMoreOn            ; $aa moreon
>19bc	ef 12					.word	UnaryPeek                ; $ab peek
>19be	04 13					.word	CommandPOKE              ; $ac poke
>19c0	1c 13					.word	UnaryPos                 ; $ad pos
>19c2	26 13					.word	GetChannel               ; $ae getchannel
>19c4	31 13					.word	SetChannel               ; $af setchannel
>19c6	54 13					.word	PrintNumber              ; $b0 print.n
>19c8	73 13					.word	PrintString              ; $b1 print.s
>19ca	da 13					.word	CommandXRead             ; $b2 read
>19cc	f4 13					.word	CommandReadString        ; $b3 read$
>19ce	7f 15					.word	UnaryRND                 ; $b4 rnd
>19d0	ee 15					.word	StringConcatenate        ; $b5 concat
>19d2	45 16					.word	SignTOS                  ; $b6 sgn
>19d4	68 16					.word	PrintTab                 ; $b7 print.tab
>19d6	76 16					.word	PrintPos                 ; $b8 print.pos
>19d8	87 16					.word	PrintSpace               ; $b9 print.spc
>19da	a0 16					.word	Unary_Str                ; $ba str$
>19dc	1b 17					.word	Unary_Left               ; $bb left$
>19de	2b 17					.word	Unary_Right              ; $bc right$
>19e0	47 17					.word	Unary_Mid                ; $bd mid$
>19e2	b9 17					.word	CommandSwap              ; $be swap
>19e4	2f 18					.word	TimeTOS                  ; $bf ti
>19e6	36 18					.word	TimeString               ; $c0 ti$
>19e8	0c 19					.word	UnaryUsr                 ; $c1 usr
>19ea	18 19					.word	ValUnary                 ; $c2 val
>19ec	76 1b					.word	CommandClose             ; $c3 close
>19ee	88 1b					.word	CommandExit              ; $c4 exit
>19f0	8e 1b					.word	CommandDebug             ; $c5 debug
>19f2	f4 1b					.word	CommandXOpen             ; $c6 open
>19f4	88 1c					.word	CommandScreen            ; $c7 screen
>19f6	6f 1e					.word	CommandVPOKE             ; $c8 vpoke
>19f8	94 1e					.word	CommandVPEEK             ; $c9 vpeek
>19fa	60 16					.word	CommandShift             ; $ca .shift
>19fc	74 08					.word	PushByteCommand          ; $cb .byte
>19fe	87 08					.word	PushWordCommand          ; $cc .word
>1a00	96 13					.word	CommandPushN             ; $cd .float
>1a02	bc 13					.word	CommandPushS             ; $ce .string
>1a04	28 0b					.word	CommandXData             ; $cf .data
>1a06	9c 0d					.word	CommandXGoto             ; $d0 .goto
>1a08	7f 0d					.word	CommandXGosub            ; $d1 .gosub
>1a0a	b1 0d					.word	CommandGotoZ             ; $d2 .goto.z
>1a0c	bf 0d					.word	CommandGotoNZ            ; $d3 .goto.nz
>1a0e	b6 08					.word	CommandVarSpace          ; $d4 .varspace
.1a10					ShiftVectorTable:
>1a10	53 0a					.word	CommandClr               ; $ca80 clr
>1a12	31 0b					.word	CommandXDIM              ; $ca81 dim
>1a14	22 0c					.word	CommandEnd               ; $ca82 end
>1a16	3d 10					.word	UnaryJoy                 ; $ca83 joy
>1a18	e4 10					.word	LinkFloatIntegerPartDown ; $ca84 int
>1a1a	ed 10					.word	LinkFloatSquareRoot      ; $ca85 sqr
>1a1c	fe 10					.word	LinkFloatLogarithm       ; $ca86 log
>1a1e	09 11					.word	LinkFloatExponent        ; $ca87 exp
>1a20	12 11					.word	LinkFloatCosine          ; $ca88 cos
>1a22	1b 11					.word	LinkFloatSine            ; $ca89 sin
>1a24	24 11					.word	LinkFloatTangent         ; $ca8a tan
>1a26	2d 11					.word	LinkFloatArcTan          ; $ca8b atn
>1a28	6b 11					.word	XCommandMouse            ; $ca8c mouse
>1a2a	80 11					.word	XUnaryMB                 ; $ca8d mb
>1a2c	8d 11					.word	XUnaryMX                 ; $ca8e mx
>1a2e	9e 11					.word	XUnaryMY                 ; $ca8f my
>1a30	6d 15					.word	CommandRestore           ; $ca90 restore
>1a32	9c 16					.word	CommandStop              ; $ca91 stop
>1a34	f9 17					.word	CommandSYS               ; $ca92 sys
>1a36	a1 18					.word	CommandTIWrite           ; $ca93 ti$.write
>1a38	6e 1a					.word	CommandXWAIT             ; $ca94 wait
>1a3a	b9 1b					.word	X16I2CPoke               ; $ca95 i2cpoke
>1a3c	d9 1b					.word	X16I2CPeek               ; $ca96 i2cpeek
>1a3e	44 1c					.word	CommandBank              ; $ca97 bank
>1a40	97 1c					.word	XCommandSleep            ; $ca98 sleep
>1a42	bb 1c					.word	X16_Audio_FMINIT         ; $ca99 fminit
>1a44	c9 1c					.word	X16_Audio_FMNOTE         ; $ca9a fmnote
>1a46	db 1c					.word	X16_Audio_FMDRUM         ; $ca9b fmdrum
>1a48	ed 1c					.word	X16_Audio_FMINST         ; $ca9c fminst
>1a4a	ff 1c					.word	X16_Audio_FMVIB          ; $ca9d fmvib
>1a4c	11 1d					.word	X16_Audio_FMFREQ         ; $ca9e fmfreq
>1a4e	22 1d					.word	X16_Audio_FMVOL          ; $ca9f fmvol
>1a50	34 1d					.word	X16_Audio_FMPAN          ; $caa0 fmpan
>1a52	46 1d					.word	X16_Audio_FMPLAY         ; $caa1 fmplay
>1a54	57 1d					.word	X16_Audio_FMCHORD        ; $caa2 fmchord
>1a56	68 1d					.word	X16_Audio_FMPOKE         ; $caa3 fmpoke
>1a58	7a 1d					.word	X16_Audio_PSGINIT        ; $caa4 psginit
>1a5a	88 1d					.word	X16_Audio_PSGNOTE        ; $caa5 psgnote
>1a5c	9a 1d					.word	X16_Audio_PSGVOL         ; $caa6 psgvol
>1a5e	ac 1d					.word	X16_Audio_PSGWAV         ; $caa7 psgwav
>1a60	be 1d					.word	X16_Audio_PSGFREQ        ; $caa8 psgfreq
>1a62	cf 1d					.word	X16_Audio_PSGPAN         ; $caa9 psgpan
>1a64	e1 1d					.word	X16_Audio_PSGPLAY        ; $caaa psgplay
>1a66	f2 1d					.word	X16_Audio_PSGCHORD       ; $caab psgchord
>1a68	03 1e					.word	CommandCls               ; $caac cls
>1a6a	0c 1e					.word	CommandLocate            ; $caad locate
>1a6c	36 1e					.word	CommandColor             ; $caae color
.1a6e					CommandXWAIT:
.1a6e	fa		plx				plx
.1a6f	b5 3c		lda $3c,x			lda 	NSMantissa0-2,x 			; get wait address
.1a71	85 2c		sta $2c				sta 	zTemp0
.1a73	b5 48		lda $48,x			lda 	NSMantissa1-2,x
.1a75	85 2d		sta $2d				sta 	zTemp0+1
.1a77					_WaitLoop:
.1a77	b2 2c		lda ($2c)			lda 	(zTemp0) 					; read it
.1a79	35 3d		and $3d,x			and 	NSMantissa0-1,x		 		; and with mask
.1a7b	55 3e		eor $3e,x			eor 	NSMantissa0-0,x 			; toggle
.1a7d	f0 f8		beq $1a77			beq 	_WaitLoop 					; keep going if zero
.1a7f	ca		dex				dex 								; drop 3.
.1a80	ca		dex				dex
.1a81	ca		dex				dex
.1a82	4c 36 08	jmp $0836			jmp 	NextCommand
.1a85					WriteFloatCommand:
.1a85	fa		plx				plx
.1a86	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.1a88	85 2c		sta $2c				sta 	zTemp0 						; save in MSB
.1a8a	88		dey				dey 								; get the upper 3 bits
.1a8b	b1 28		lda ($28),y			lda 	(codePtr),y
.1a8d	29 07		and #$07			and 	#7
.1a8f	c8		iny				iny
.1a90	c8		iny				iny
.1a91	06 2c		asl $2c				asl 	zTemp0 						; shift zTemp0:A left
.1a93	2a		rol a				rol 	a 							; carry will be clear.
.1a94	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.1a97	85 2d		sta $2d				sta 	zTemp0+1
.1a99	20 9f 1a	jsr $1a9f			jsr 	WriteFloatZTemp0Sub
.1a9c	4c 36 08	jmp $0836			jmp 	NextCommand
.1a9f					WriteFloatZTemp0Sub:
.1a9f	5a		phy				phy 								; ldart write
.1aa0	a0 01		ldy #$01			ldy 	#1
.1aa2	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.1aa4	92 2c		sta ($2c)			sta 	(zTemp0)
.1aa6	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.1aa8	91 2c		sta ($2c),y			sta 	(zTemp0),y
.1aaa	c8		iny				iny
.1aab	b5 56		lda $56,x			lda 	NSMantissa2,x
.1aad	91 2c		sta ($2c),y			sta 	(zTemp0),y
.1aaf	c8		iny				iny
.1ab0	b5 62		lda $62,x			lda 	NSMantissa3,x
.1ab2	91 2c		sta ($2c),y			sta 	(zTemp0),y
.1ab4	c8		iny				iny
.1ab5	b5 6e		lda $6e,x			lda 	NSExponent,x
.1ab7	91 2c		sta ($2c),y			sta 	(zTemp0),y
.1ab9	c8		iny				iny
.1aba	b5 32		lda $32,x			lda 	NSStatus,x
.1abc	91 2c		sta ($2c),y			sta 	(zTemp0),y
.1abe	ca		dex				dex
.1abf	7a		ply				ply
.1ac0	60		rts				rts
.1ac1					WriteIntegerCommand:
.1ac1	fa		plx				plx
.1ac2	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.1ac4	85 2c		sta $2c				sta 	zTemp0 						; save in MSB
.1ac6	88		dey				dey 								; get the upper 3 bits
.1ac7	b1 28		lda ($28),y			lda 	(codePtr),y
.1ac9	29 07		and #$07			and 	#7
.1acb	c8		iny				iny
.1acc	c8		iny				iny
.1acd	06 2c		asl $2c				asl 	zTemp0 						; shift zTemp0:A left
.1acf	2a		rol a				rol 	a 							; carry will be clear.
.1ad0	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.1ad3	85 2d		sta $2d				sta 	zTemp0+1
.1ad5	20 db 1a	jsr $1adb			jsr 	WriteIntegerZTemp0Sub
.1ad8	4c 36 08	jmp $0836			jmp 	NextCommand
.1adb					WriteIntegerZTemp0Sub:
.1adb	20 5d 22	jsr $225d			jsr 	FloatIntegerPart
.1ade	5a		phy				phy 								; start write
.1adf	a0 01		ldy #$01			ldy 	#1
.1ae1	b5 32		lda $32,x			lda 	NSStatus,x 					; negate 2's comp if -ve
.1ae3	30 0b		bmi $1af0			bmi 	_WIZNegative
.1ae5	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; +ve write
.1ae7	92 2c		sta ($2c)			sta 	(zTemp0)
.1ae9	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.1aeb	91 2c		sta ($2c),y			sta 	(zTemp0),y
.1aed	7a		ply				ply
.1aee	ca		dex				dex
.1aef	60		rts				rts
.1af0					_WIZNegative:
.1af0	38		sec				sec 								; -ve read
.1af1	a9 00		lda #$00			lda 	#0
.1af3	f5 3e		sbc $3e,x			sbc 	NSMantissa0,x
.1af5	92 2c		sta ($2c)			sta 	(zTemp0)
.1af7	a9 00		lda #$00			lda 	#0
.1af9	f5 4a		sbc $4a,x			sbc 	NSMantissa1,x
.1afb	91 2c		sta ($2c),y			sta 	(zTemp0),y
.1afd	7a		ply				ply
.1afe	ca		dex				dex
.1aff	60		rts				rts
.1b00					WriteStringCommand:
.1b00	fa		plx				plx
.1b01	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.1b03	85 2c		sta $2c				sta 	zTemp0 						; save in MSB
.1b05	88		dey				dey 								; get the upper 3 bits
.1b06	b1 28		lda ($28),y			lda 	(codePtr),y
.1b08	29 07		and #$07			and 	#7
.1b0a	c8		iny				iny
.1b0b	c8		iny				iny
.1b0c	06 2c		asl $2c				asl 	zTemp0 						; shift zTemp0:A left
.1b0e	2a		rol a				rol 	a 							; carry will be clear.
.1b0f	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.1b12	85 2d		sta $2d				sta 	zTemp0+1
.1b14	20 1a 1b	jsr $1b1a			jsr 	WriteStringZTemp0Sub
.1b17	4c 36 08	jmp $0836			jmp 	NextCommand
.1b1a					WriteStringZTemp0Sub:
.1b1a	5a		phy				phy
.1b1b	a0 01		ldy #$01			ldy 	#1 							; if it is zero we must concrete whatever.
.1b1d	b2 2c		lda ($2c)			lda 	(zTemp0)
.1b1f	11 2c		ora ($2c),y			ora 	(zTemp0),y
.1b21	f0 1e		beq $1b41			beq 	_WSConcrete
.1b23	b2 2c		lda ($2c)			lda 	(zTemp0) 					; put address of actual string in zTemp1
.1b25	85 2e		sta $2e				sta 	zTemp1
.1b27	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.1b29	85 2f		sta $2f				sta 	zTemp1+1
.1b2b	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; copy source to zTemp2
.1b2d	85 30		sta $30				sta 	zTemp2
.1b2f	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.1b31	85 31		sta $31				sta 	zTemp2+1
.1b33	b2 2e		lda ($2e)			lda 	(zTemp1) 					; space available
.1b35	d2 30		cmp ($30)			cmp 	(zTemp2) 					; if >= required length then copy
.1b37	b0 17		bcs $1b50			bcs 	_WSCopy
.1b39	a0 01		ldy #$01			ldy 	#1 							; set the 'available for reclaim' flag
.1b3b	b1 2e		lda ($2e),y			lda 	(zTemp1),y
.1b3d	09 80		ora #$80			ora 	#$80
.1b3f	91 2e		sta ($2e),y			sta 	(zTemp1),y
.1b41					_WSConcrete:
.1b41	b5 4a		lda $4a,x			lda 	NSMantissa1,x 				; string in YA
.1b43	a8		tay				tay
.1b44	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.1b46	20 e2 0a	jsr $0ae2			jsr 	StringConcrete
.1b49	92 2c		sta ($2c)			sta 	(zTemp0) 					; save returned address
.1b4b	98		tya				tya
.1b4c	a0 01		ldy #$01			ldy 	#1
.1b4e	91 2c		sta ($2c),y			sta 	(zTemp0),y
.1b50					_WSCopy
.1b50	18		clc				clc  								; copy target+2 to zTemp2
.1b51	b2 2c		lda ($2c)			lda 	(zTemp0)
.1b53	69 02		adc #$02			adc 	#2
.1b55	85 30		sta $30				sta 	zTemp2
.1b57	a0 01		ldy #$01			ldy 	#1
.1b59	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.1b5b	69 00		adc #$00			adc 	#0
.1b5d	85 31		sta $31				sta 	zTemp2+1
.1b5f	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; copy source to zTemp1
.1b61	85 2e		sta $2e				sta 	zTemp1
.1b63	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.1b65	85 2f		sta $2f				sta 	zTemp1+1
.1b67	b2 2e		lda ($2e)			lda 	(zTemp1) 					; length of string .. 0 inclusive
.1b69	a8		tay				tay
.1b6a					_WSCopyLoop:
.1b6a	b1 2e		lda ($2e),y			lda 	(zTemp1),y
.1b6c	91 30		sta ($30),y			sta 	(zTemp2),y
.1b6e	88		dey				dey
.1b6f	c0 ff		cpy #$ff			cpy 	#$FF
.1b71	d0 f7		bne $1b6a			bne 	_WSCopyLoop
.1b73	ca		dex				dex
.1b74	7a		ply				ply
.1b75	60		rts				rts
.1b76					CommandClose:
.1b76	fa		plx				plx
.1b77	20 15 10	jsr $1015			jsr 	GetInteger8Bit 				; channel to close
.1b7a	cd 5e 04	cmp $045e			cmp 	currentChannel 				; is it the current channel
.1b7d	d0 03		bne $1b82			bne 	_CCNotCurrent
.1b7f	9c 5e 04	stz $045e			stz 	currentChannel 				; effectively disables CMD
.1b82					_CCNotCurrent:
.1b82	20 c3 ff	jsr $ffc3			jsr 	X16_CLOSE 					; close the file
.1b85	4c 36 08	jmp $0836			jmp 	NextCommand
.1b88					CommandExit:
.1b88	fa		plx				plx
.1b89	86 2c		stx $2c				stx 	zTemp0 						; stack position.
.1b8b	4c ff ff	jmp $ffff			jmp 	$FFFF 						; exits the emulator.
.1b8e					CommandDebug:
.1b8e	fa		plx				plx
>1b8f	db						.byte 	$DB 						; causes a break in the emulator
.1b90	4c 36 08	jmp $0836			jmp 	NextCommand
.1b93					XGetCharacterFromChannel:
.1b93	da		phx				phx
.1b94	5a		phy				phy
.1b95	e0 00		cpx #$00			cpx 	#0 							; is it default
.1b97	d0 05		bne $1b9e			bne 	_XGetChannel
.1b99	20 cc ff	jsr $ffcc			jsr 	X16_CLRCHN 					; set default channel
.1b9c	80 08		bra $1ba6			bra 	_XGetChar
.1b9e					_XGetChannel:
.1b9e	20 c6 ff	jsr $ffc6			jsr 	X16_CHKIN					; CHKIN set channel
.1ba1	20 b7 ff	jsr $ffb7			jsr 	X16_READST 					; check okay
.1ba4	d0 06		bne $1bac			bne 	_XGCError
.1ba6					_XGetChar:
.1ba6	20 e4 ff	jsr $ffe4			jsr 	X16_GETIN
.1ba9	7a		ply				ply
.1baa	fa		plx				plx
.1bab	60		rts				rts
.1bac					_XGCError:
.1bac	4c db 1f	jmp $1fdb		jmp	ErrorV_channel
.1baf					XGetHPos:
.1baf	da		phx				phx
.1bb0	5a		phy				phy
.1bb1	38		sec				sec
.1bb2	20 f0 ff	jsr $fff0			jsr 	X16_PLOT
.1bb5	98		tya				tya
.1bb6	7a		ply				ply
.1bb7	fa		plx				plx
.1bb8	60		rts				rts
.1bb9					X16I2CPoke:
.1bb9	fa		plx				plx
.1bba	5a		phy				phy
.1bbb	20 15 10	jsr $1015			jsr 	GetInteger8Bit 				; value
.1bbe	48		pha				pha
.1bbf	ca		dex				dex
.1bc0	20 15 10	jsr $1015			jsr 	GetInteger8Bit 				; register
.1bc3	48		pha				pha
.1bc4	ca		dex				dex
.1bc5	20 15 10	jsr $1015			jsr 	GetInteger8Bit 				; device
.1bc8	aa		tax				tax
.1bc9	7a		ply				ply
.1bca	68		pla				pla
.1bcb	20 c9 fe	jsr $fec9			jsr 	X16_i2c_write_byte 			; write the byte out.
.1bce	b0 06		bcs $1bd6			bcs 	X16I2CError
.1bd0	7a		ply				ply
.1bd1	a2 ff		ldx #$ff			ldx 	#$FF
.1bd3	4c 36 08	jmp $0836			jmp 	NextCommand
.1bd6					X16I2CError:
.1bd6	4c db 1f	jmp $1fdb		jmp	ErrorV_channel
.1bd9					X16I2CPeek:
.1bd9	fa		plx				plx
.1bda	da		phx				phx
.1bdb	5a		phy				phy
.1bdc	20 15 10	jsr $1015			jsr 	GetInteger8Bit 				; register
.1bdf	48		pha				pha
.1be0	ca		dex				dex
.1be1	20 15 10	jsr $1015			jsr 	GetInteger8Bit 				; device
.1be4	aa		tax				tax 								; X device
.1be5	7a		ply				ply 								; Y register
.1be6	20 c6 fe	jsr $fec6			jsr 	X16_i2c_read_byte 			; read I2C
.1be9	b0 eb		bcs $1bd6			bcs 	X16I2CError
.1beb	7a		ply				ply 								; restore Y/X
.1bec	fa		plx				plx
.1bed	ca		dex				dex 								; drop TOS (register)
.1bee	20 24 26	jsr $2624			jsr 	FloatSetByte 				; write read value to TOS.
.1bf1	4c 36 08	jmp $0836			jmp 	NextCommand
.1bf4					CommandXOpen:
.1bf4	fa		plx				plx
.1bf5	a5 41		lda $41				lda 	NSMantissa0+3  				; point zTemp0 to string head, also in XY
.1bf7	85 2c		sta $2c				sta 	zTemp0
.1bf9	aa		tax				tax
.1bfa	a5 4d		lda $4d				lda 	NSMantissa1+3
.1bfc	85 2d		sta $2d				sta 	zTemp0+1
.1bfe	a8		tay				tay
.1bff	e8		inx				inx 								; XY points to first character
.1c00	d0 01		bne $1c03			bne 	_CONoCarry
.1c02	c8		iny				iny
.1c03					_CONoCarry:
.1c03	b2 2c		lda ($2c)			lda 	(zTemp0) 					; get length of filename
.1c05	20 bd ff	jsr $ffbd			jsr 	X16_SETNAM
.1c08	a5 3e		lda $3e				lda 	NSMantissa0+0
.1c0a	a6 3f		ldx $3f				ldx 	NSMantissa0+1
.1c0c	a4 40		ldy $40				ldy 	NSMantissa0+2
.1c0e	20 ba ff	jsr $ffba			jsr 	X16_SETLFS
.1c11	20 c0 ff	jsr $ffc0			jsr 	X16_OPEN
.1c14	b0 03		bcs $1c19			bcs 	_COError
.1c16	4c 36 08	jmp $0836			jmp 	NextCommand
.1c19					_COError:
.1c19	4c db 1f	jmp $1fdb		jmp	ErrorV_channel
.1c1c					XPokeMemory:
.1c1c	86 2c		stx $2c				stx 	zTemp0
.1c1e	84 2d		sty $2d				sty 	zTemp0+1
.1c20	a4 00		ldy $00				ldy 	SelectRAMBank 				; old RAM bank in Y
.1c22	ae 6c 05	ldx $056c			ldx 	ramBank 					; switch to BANKed RAMBank if not $FF
.1c25	e0 ff		cpx #$ff			cpx 	#$FF
.1c27	f0 02		beq $1c2b			beq 	_XPMNoSwitch
.1c29	86 00		stx $00				stx 	SelectRAMBank
.1c2b					_XPMNoSwitch:
.1c2b	92 2c		sta ($2c)			sta 	(zTemp0) 					; do the POKE
.1c2d	84 00		sty $00				sty 	SelectRAMBank 				; reselect previous RAM Bank.
.1c2f					_XPMExit:
.1c2f	60		rts				rts
.1c30					XPeekMemory:
.1c30	86 2c		stx $2c				stx 	zTemp0
.1c32	84 2d		sty $2d				sty 	zTemp0+1
.1c34	a4 00		ldy $00				ldy 	SelectRAMBank 				; old RAM bank in Y
.1c36	ae 6c 05	ldx $056c			ldx 	ramBank 					; switch to BANKed RAMBank if not $FF
.1c39	e0 ff		cpx #$ff			cpx 	#$FF
.1c3b	f0 02		beq $1c3f			beq 	_XPMNoSwitch
.1c3d	86 00		stx $00				stx 	SelectRAMBank
.1c3f					_XPMNoSwitch:
.1c3f	b2 2c		lda ($2c)			lda 	(zTemp0) 					; do the PEEK
.1c41	84 00		sty $00				sty 	SelectRAMBank 				; reselect previous RAM bank.
.1c43	60		rts				rts
.1c44					CommandBank:
.1c44	fa		plx				plx
.1c45	a5 3e		lda $3e				lda 	NSMantissa0 				; RAM bank
.1c47	8d 6c 05	sta $056c			sta 	ramBank 					; store & make current
.1c4a	85 00		sta $00				sta 	SelectRAMBank
.1c4c	a5 3f		lda $3f				lda 	NSMantissa0+1 		 		; ROM specified
.1c4e	c9 ff		cmp #$ff			cmp 	#$FF
.1c50	f0 03		beq $1c55			beq 	_CBNoUpdate
.1c52	8d 6d 05	sta $056d			sta 	romBank 					; this doesn't set the hardware page.
.1c55					_CBNoUpdate:
.1c55	a2 ff		ldx #$ff			ldx 	#$FF
.1c57	4c 36 08	jmp $0836			jmp 	NextCommand
.056c					ramBank:
>056c							.fill 	1
.056d					romBank:
>056d							.fill 	1
.1c5a					XPrintCharacterToChannel:
.1c5a	48		pha				pha
.1c5b	da		phx				phx
.1c5c	5a		phy				phy
.1c5d	48		pha				pha  								; save char
.1c5e	e0 00		cpx #$00			cpx 	#0 							; check default (0)
.1c60	d0 05		bne $1c67			bne 	_XPCNotDefault
.1c62	20 cc ff	jsr $ffcc			jsr 	X16_CLRCHN					; set default channel
.1c65	80 08		bra $1c6f			bra 	_XPCSend
.1c67					_XPCNotDefault:
.1c67	20 c9 ff	jsr $ffc9			jsr 	X16_CHKOUT 					; CHKOUT set channel
.1c6a	20 b7 ff	jsr $ffb7			jsr 	X16_READST 					; check okay
.1c6d	d0 08		bne $1c77			bne 	_XPCError
.1c6f					_XPCSend:
.1c6f	68		pla				pla 								; restore character
.1c70	20 d2 ff	jsr $ffd2			jsr 	X16_BSOUT 					; print
.1c73	7a		ply				ply
.1c74	fa		plx				plx
.1c75	68		pla				pla
.1c76	60		rts				rts
.1c77					_XPCError:
.1c77	4c db 1f	jmp $1fdb		jmp	ErrorV_channel
.1c7a					XReadClock:
.1c7a	20 de ff	jsr $ffde			jsr 	X16_RDTIM
.1c7d	60		rts				rts
.1c7e					XWriteClock:
.1c7e	48		pha				pha
.1c7f	da		phx				phx
.1c80	5a		phy				phy
.1c81	20 db ff	jsr $ffdb			jsr 	X16_SETTIM
.1c84	7a		ply				ply
.1c85	fa		plx				plx
.1c86	68		pla				pla
.1c87	60		rts				rts
.1c88					CommandScreen:
.1c88	fa		plx				plx
.1c89	da		phx				phx
.1c8a	5a		phy				phy
.1c8b	20 15 10	jsr $1015			jsr 	GetInteger8Bit
.1c8e	18		clc				clc
.1c8f	20 5f ff	jsr $ff5f			jsr 	X16_screen_mode
.1c92	7a		ply				ply
.1c93	fa		plx				plx
.1c94	4c 36 08	jmp $0836			jmp 	NextCommand
.1c97					XCommandSleep:
.1c97	fa		plx				plx
.1c98	5a		phy				phy
.1c99	20 5d 22	jsr $225d			jsr 	FloatIntegerPart
.1c9c	ca		dex				dex
.1c9d	20 7a 1c	jsr $1c7a			jsr 	XReadClock 					; read clock to YXA
.1ca0	18		clc				clc 								; calculate end time in zTemp0
.1ca1	65 3e		adc $3e				adc 	NSMantissa0
.1ca3	85 2c		sta $2c				sta 	zTemp0
.1ca5	8a		txa				txa
.1ca6	65 4a		adc $4a				adc 	NSMantissa1
.1ca8	85 2d		sta $2d				sta 	zTemp0+1
.1caa					_XCWait:
.1caa	20 7a 1c	jsr $1c7a			jsr 	XReadClock 					; and wait for it.
.1cad	c5 2c		cmp $2c				cmp 	zTemp0
.1caf	d0 f9		bne $1caa			bne 	_XCWait
.1cb1	e4 2d		cpx $2d				cpx 	zTemp0+1
.1cb3	d0 f5		bne $1caa			bne 	_XCWait
.1cb5	a2 ff		ldx #$ff			ldx 	#$FF
.1cb7	7a		ply				ply
.1cb8	4c 36 08	jmp $0836			jmp 	NextCommand
.1cbb					X16_Audio_FMINIT:
.1cbb	fa		plx				plx
.1cbc	5a		phy			phy
.1cbd	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1cc0	63 c0					.word	X16A_ym_init
>1cc2	0a					.byte	X16_AudioCodeBank
.1cc3	a2 ff		ldx #$ff		ldx	#$FF
.1cc5	7a		ply			ply
.1cc6	4c 36 08	jmp $0836			jmp 	NextCommand
.1cc9					X16_Audio_FMNOTE:
.1cc9	fa		plx				plx
.1cca	5a		phy			phy
.1ccb	20 dd 09	jsr $09dd		jsr		X16_Audio_Parameters8_8
.1cce	18		clc			clc
.1ccf	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1cd2	03 c0					.word	X16A_bas_fmnote
>1cd4	0a					.byte	X16_AudioCodeBank
.1cd5	a2 ff		ldx #$ff		ldx	#$FF
.1cd7	7a		ply			ply
.1cd8	4c 36 08	jmp $0836			jmp 	NextCommand
.1cdb					X16_Audio_FMDRUM:
.1cdb	fa		plx				plx
.1cdc	5a		phy			phy
.1cdd	20 dd 09	jsr $09dd		jsr		X16_Audio_Parameters8_8
.1ce0	18		clc			clc
.1ce1	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1ce4	6f c0					.word	X16A_ym_playdrum
>1ce6	0a					.byte	X16_AudioCodeBank
.1ce7	a2 ff		ldx #$ff		ldx	#$FF
.1ce9	7a		ply			ply
.1cea	4c 36 08	jmp $0836			jmp 	NextCommand
.1ced					X16_Audio_FMINST:
.1ced	fa		plx				plx
.1cee	5a		phy			phy
.1cef	20 dd 09	jsr $09dd		jsr		X16_Audio_Parameters8_8
.1cf2	38		sec			sec
.1cf3	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1cf6	69 c0					.word	X16A_ym_loadpatch
>1cf8	0a					.byte	X16_AudioCodeBank
.1cf9	a2 ff		ldx #$ff		ldx	#$FF
.1cfb	7a		ply			ply
.1cfc	4c 36 08	jmp $0836			jmp 	NextCommand
.1cff					X16_Audio_FMVIB:
.1cff	fa		plx				plx
.1d00	5a		phy			phy
.1d01	20 dd 09	jsr $09dd		jsr		X16_Audio_Parameters8_8
.1d04	18		clc			clc
.1d05	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1d08	09 c0					.word	X16A_bas_fmvib
>1d0a	0a					.byte	X16_AudioCodeBank
.1d0b	a2 ff		ldx #$ff		ldx	#$FF
.1d0d	7a		ply			ply
.1d0e	4c 36 08	jmp $0836			jmp 	NextCommand
.1d11					X16_Audio_FMFREQ:
.1d11	fa		plx				plx
.1d12	5a		phy			phy
.1d13	20 d7 09	jsr $09d7		jsr		X16_Audio_Parameters8_16
.1d16	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1d19	00 c0					.word	X16A_bas_fmfreq
>1d1b	0a					.byte	X16_AudioCodeBank
.1d1c	a2 ff		ldx #$ff		ldx	#$FF
.1d1e	7a		ply			ply
.1d1f	4c 36 08	jmp $0836			jmp 	NextCommand
.1d22					X16_Audio_FMVOL:
.1d22	fa		plx				plx
.1d23	5a		phy			phy
.1d24	20 dd 09	jsr $09dd		jsr		X16_Audio_Parameters8_8
.1d27	18		clc			clc
.1d28	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1d2b	75 c0					.word	X16A_ym_setatten
>1d2d	0a					.byte	X16_AudioCodeBank
.1d2e	a2 ff		ldx #$ff		ldx	#$FF
.1d30	7a		ply			ply
.1d31	4c 36 08	jmp $0836			jmp 	NextCommand
.1d34					X16_Audio_FMPAN:
.1d34	fa		plx				plx
.1d35	5a		phy			phy
.1d36	20 dd 09	jsr $09dd		jsr		X16_Audio_Parameters8_8
.1d39	18		clc			clc
.1d3a	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1d3d	7e c0					.word	X16A_ym_setpan
>1d3f	0a					.byte	X16_AudioCodeBank
.1d40	a2 ff		ldx #$ff		ldx	#$FF
.1d42	7a		ply			ply
.1d43	4c 36 08	jmp $0836			jmp 	NextCommand
.1d46					X16_Audio_FMPLAY:
.1d46	fa		plx				plx
.1d47	5a		phy			phy
.1d48	20 ee 09	jsr $09ee		jsr		X16_Audio_Parameters8_String
.1d4b	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1d4e	06 c0					.word	X16A_bas_fmplaystring
>1d50	0a					.byte	X16_AudioCodeBank
.1d51	a2 ff		ldx #$ff		ldx	#$FF
.1d53	7a		ply			ply
.1d54	4c 36 08	jmp $0836			jmp 	NextCommand
.1d57					X16_Audio_FMCHORD:
.1d57	fa		plx				plx
.1d58	5a		phy			phy
.1d59	20 ee 09	jsr $09ee		jsr		X16_Audio_Parameters8_String
.1d5c	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1d5f	8d c0					.word	X16A_bas_fmchordstring
>1d61	0a					.byte	X16_AudioCodeBank
.1d62	a2 ff		ldx #$ff		ldx	#$FF
.1d64	7a		ply			ply
.1d65	4c 36 08	jmp $0836			jmp 	NextCommand
.1d68					X16_Audio_FMPOKE:
.1d68	fa		plx				plx
.1d69	5a		phy			phy
.1d6a	20 dd 09	jsr $09dd		jsr		X16_Audio_Parameters8_8
.1d6d	18		clc			clc
.1d6e	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1d71	8a c0					.word	X16A_ym_write
>1d73	0a					.byte	X16_AudioCodeBank
.1d74	a2 ff		ldx #$ff		ldx	#$FF
.1d76	7a		ply			ply
.1d77	4c 36 08	jmp $0836			jmp 	NextCommand
.1d7a					X16_Audio_PSGINIT:
.1d7a	fa		plx				plx
.1d7b	5a		phy			phy
.1d7c	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1d7f	4b c0					.word	X16A_psg_init
>1d81	0a					.byte	X16_AudioCodeBank
.1d82	a2 ff		ldx #$ff		ldx	#$FF
.1d84	7a		ply			ply
.1d85	4c 36 08	jmp $0836			jmp 	NextCommand
.1d88					X16_Audio_PSGNOTE:
.1d88	fa		plx				plx
.1d89	5a		phy			phy
.1d8a	20 dd 09	jsr $09dd		jsr		X16_Audio_Parameters8_8
.1d8d	18		clc			clc
.1d8e	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1d91	12 c0					.word	X16A_bas_psgnote
>1d93	0a					.byte	X16_AudioCodeBank
.1d94	a2 ff		ldx #$ff		ldx	#$FF
.1d96	7a		ply			ply
.1d97	4c 36 08	jmp $0836			jmp 	NextCommand
.1d9a					X16_Audio_PSGVOL:
.1d9a	fa		plx				plx
.1d9b	5a		phy			phy
.1d9c	20 dd 09	jsr $09dd		jsr		X16_Audio_Parameters8_8
.1d9f	18		clc			clc
.1da0	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1da3	54 c0					.word	X16A_psg_setatten
>1da5	0a					.byte	X16_AudioCodeBank
.1da6	a2 ff		ldx #$ff		ldx	#$FF
.1da8	7a		ply			ply
.1da9	4c 36 08	jmp $0836			jmp 	NextCommand
.1dac					X16_Audio_PSGWAV:
.1dac	fa		plx				plx
.1dad	5a		phy			phy
.1dae	20 dd 09	jsr $09dd		jsr		X16_Audio_Parameters8_8
.1db1	18		clc			clc
.1db2	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1db5	15 c0					.word	X16A_bas_psgwav
>1db7	0a					.byte	X16_AudioCodeBank
.1db8	a2 ff		ldx #$ff		ldx	#$FF
.1dba	7a		ply			ply
.1dbb	4c 36 08	jmp $0836			jmp 	NextCommand
.1dbe					X16_Audio_PSGFREQ:
.1dbe	fa		plx				plx
.1dbf	5a		phy			phy
.1dc0	20 d7 09	jsr $09d7		jsr		X16_Audio_Parameters8_16
.1dc3	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1dc6	0f c0					.word	X16A_bas_psgfreq
>1dc8	0a					.byte	X16_AudioCodeBank
.1dc9	a2 ff		ldx #$ff		ldx	#$FF
.1dcb	7a		ply			ply
.1dcc	4c 36 08	jmp $0836			jmp 	NextCommand
.1dcf					X16_Audio_PSGPAN:
.1dcf	fa		plx				plx
.1dd0	5a		phy			phy
.1dd1	20 dd 09	jsr $09dd		jsr		X16_Audio_Parameters8_8
.1dd4	18		clc			clc
.1dd5	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1dd8	5a c0					.word	X16A_psg_setpan
>1dda	0a					.byte	X16_AudioCodeBank
.1ddb	a2 ff		ldx #$ff		ldx	#$FF
.1ddd	7a		ply			ply
.1dde	4c 36 08	jmp $0836			jmp 	NextCommand
.1de1					X16_Audio_PSGPLAY:
.1de1	fa		plx				plx
.1de2	5a		phy			phy
.1de3	20 ee 09	jsr $09ee		jsr		X16_Audio_Parameters8_String
.1de6	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1de9	18 c0					.word	X16A_bas_psgplaystring
>1deb	0a					.byte	X16_AudioCodeBank
.1dec	a2 ff		ldx #$ff		ldx	#$FF
.1dee	7a		ply			ply
.1def	4c 36 08	jmp $0836			jmp 	NextCommand
.1df2					X16_Audio_PSGCHORD:
.1df2	fa		plx				plx
.1df3	5a		phy			phy
.1df4	20 ee 09	jsr $09ee		jsr		X16_Audio_Parameters8_String
.1df7	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1dfa	90 c0					.word	X16A_bas_psgchordstring
>1dfc	0a					.byte	X16_AudioCodeBank
.1dfd	a2 ff		ldx #$ff		ldx	#$FF
.1dff	7a		ply			ply
.1e00	4c 36 08	jmp $0836			jmp 	NextCommand
.1e03					CommandCls:
.1e03	fa		plx				plx
.1e04	a9 93		lda #$93			lda 	#147
.1e06	20 5a 1c	jsr $1c5a			jsr 	XPrintCharacterToChannel
.1e09	4c 36 08	jmp $0836			jmp 	NextCommand
.1e0c					CommandLocate:
.1e0c	fa		plx				plx
.1e0d	20 5d 22	jsr $225d			jsr 	FloatIntegerPart
.1e10	ca		dex				dex
.1e11	20 5d 22	jsr $225d			jsr 	FloatIntegerPart
.1e14	ca		dex				dex
.1e15	a9 13		lda #$13			lda 	#$13 						; home.
.1e17	20 5a 1c	jsr $1c5a			jsr 	XPrintCharacterToChannel
.1e1a	a9 1d		lda #$1d			lda 	#$1D 						; do cursor rights
.1e1c	a6 3f		ldx $3f				ldx 	NSMantissa0+1
.1e1e	20 2b 1e	jsr $1e2b			jsr 	_CLOutputXA
.1e21	a9 11		lda #$11			lda 	#$11 						; do cursor downs.
.1e23	a6 3e		ldx $3e				ldx 	NSMantissa0
.1e25	20 2b 1e	jsr $1e2b			jsr 	_CLOutputXA
.1e28	4c 36 08	jmp $0836			jmp 	NextCommand
.1e2b					_CLOutputXA:
.1e2b	ca		dex				dex
.1e2c	f0 07		beq $1e35			beq 	_CLOExit
.1e2e	30 05		bmi $1e35			bmi 	_CLOExit
.1e30	20 5a 1c	jsr $1c5a			jsr 	XPrintCharacterToChannel
.1e33	80 f6		bra $1e2b			bra 	_CLOutputXA
.1e35					_CLOExit:
.1e35	60		rts				rts
.1e36					CommandColor:
.1e36	fa		plx				plx
.1e37	20 5d 22	jsr $225d			jsr 	FloatIntegerPart
.1e3a	ca		dex				dex
.1e3b	20 5d 22	jsr $225d			jsr 	FloatIntegerPart
.1e3e	ca		dex				dex
.1e3f	a5 3f		lda $3f				lda 	NSMantissa0+1 				; bgr specified
.1e41	c9 ff		cmp #$ff			cmp 	#$FF
.1e43	f0 08		beq $1e4d			beq 	_CCNoBGR 					; if so, change background
.1e45	20 55 1e	jsr $1e55			jsr 	_CCSetColour
.1e48	a9 01		lda #$01			lda 	#$01 						; swap FGR/BGR
.1e4a	20 5a 1c	jsr $1c5a			jsr 	XPrintCharacterToChannel
.1e4d					_CCNoBGR:
.1e4d	a5 3e		lda $3e				lda 	NSMantissa0
.1e4f	20 55 1e	jsr $1e55			jsr 	_CCSetColour
.1e52	4c 36 08	jmp $0836			jmp 	NextCommand
.1e55					_CCSetColour:
.1e55	29 0f		and #$0f			and 	#15 						; look up in control codes table.
.1e57	aa		tax				tax
.1e58	bd 5f 1e	lda $1e5f,x			lda 	_CCCommandTable,x
.1e5b	20 5a 1c	jsr $1c5a			jsr 	XPrintCharacterToChannel
.1e5e	60		rts				rts
.1e5f					_CCCommandTable:
>1e5f	90 05 1c 9f 9c 1e 1f 9e				.byte	 $90,$05,$1c,$9f,$9c,$1e,$1f,$9e
>1e67	81 95 96 97 98 99 9a 9b				.byte	 $81,$95,$96,$97,$98,$99,$9a,$9b
.1e6f					CommandVPOKE:
.1e6f	fa		plx				plx
.1e70	20 15 10	jsr $1015			jsr 	GetInteger8Bit 				; poke value
.1e73	48		pha				pha
.1e74	ca		dex				dex
.1e75	20 5d 22	jsr $225d			jsr 	FloatIntegerPart
.1e78	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.1e7a	8d 20 9f	sta $9f20			sta 	VRAMLow0
.1e7d	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.1e7f	8d 21 9f	sta $9f21			sta 	VRAMMed0
.1e82	ca		dex				dex
.1e83	20 5d 22	jsr $225d			jsr 	FloatIntegerPart
.1e86	20 15 10	jsr $1015			jsr 	GetInteger8Bit
.1e89	8d 22 9f	sta $9f22			sta 	VRAMHigh0
.1e8c	ca		dex				dex
.1e8d	68		pla				pla 								; poke value back
.1e8e	8d 23 9f	sta $9f23			sta 	VRAMData0					; and write it out.
.1e91	4c 36 08	jmp $0836			jmp 	NextCommand
.1e94					CommandVPEEK:
.1e94	fa		plx				plx
.1e95	20 5d 22	jsr $225d			jsr 	FloatIntegerPart
.1e98	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.1e9a	8d 20 9f	sta $9f20			sta 	VRAMLow0
.1e9d	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.1e9f	8d 21 9f	sta $9f21			sta 	VRAMMed0
.1ea2	ca		dex				dex
.1ea3	20 5d 22	jsr $225d			jsr 	FloatIntegerPart
.1ea6	20 15 10	jsr $1015			jsr 	GetInteger8Bit
.1ea9	8d 22 9f	sta $9f22			sta 	VRAMHigh0
.1eac	ad 23 9f	lda $9f23			lda 	VRAMData0					; read data
.1eaf	20 24 26	jsr $2624			jsr 	FloatSetByte 				; return as byte
.1eb2	4c 36 08	jmp $0836			jmp 	NextCommand

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/common.library

=$80					C64_END                  = $80 ; $80 end
=$81					C64_FOR                  = $81 ; $81 for
=$82					C64_NEXT                 = $82 ; $82 next
=$83					C64_DATA                 = $83 ; $83 data
=$84					C64_INPUTHASH            = $84 ; $84 input#
=$85					C64_INPUT                = $85 ; $85 input
=$86					C64_DIM                  = $86 ; $86 dim
=$87					C64_READ                 = $87 ; $87 read
=$88					C64_LET                  = $88 ; $88 let
=$89					C64_GOTO                 = $89 ; $89 goto
=$8a					C64_RUN                  = $8a ; $8a run
=$8b					C64_IF                   = $8b ; $8b if
=$8c					C64_RESTORE              = $8c ; $8c restore
=$8d					C64_GOSUB                = $8d ; $8d gosub
=$8e					C64_RETURN               = $8e ; $8e return
=$8f					C64_REM                  = $8f ; $8f rem
=$90					C64_STOP                 = $90 ; $90 stop
=$91					C64_ON                   = $91 ; $91 on
=$92					C64_WAIT                 = $92 ; $92 wait
=$93					C64_LOAD                 = $93 ; $93 load
=$94					C64_SAVE                 = $94 ; $94 save
=$95					C64_VERIFY               = $95 ; $95 verify
=$96					C64_DEF                  = $96 ; $96 def
=$97					C64_POKE                 = $97 ; $97 poke
=$98					C64_PRINTHASH            = $98 ; $98 print#
=$99					C64_PRINT                = $99 ; $99 print
=$9a					C64_CONT                 = $9a ; $9a cont
=$9b					C64_LIST                 = $9b ; $9b list
=$9c					C64_CLR                  = $9c ; $9c clr
=$9d					C64_CMD                  = $9d ; $9d cmd
=$9e					C64_SYS                  = $9e ; $9e sys
=$9f					C64_OPEN                 = $9f ; $9f open
=$a0					C64_CLOSE                = $a0 ; $a0 close
=$a1					C64_GET                  = $a1 ; $a1 get
=$a2					C64_NEW                  = $a2 ; $a2 new
=$a3					C64_TABLB                = $a3 ; $a3 tab(
=$a4					C64_TO                   = $a4 ; $a4 to
=$a5					C64_FN                   = $a5 ; $a5 fn
=$a6					C64_SPCLB                = $a6 ; $a6 spc(
=$a7					C64_THEN                 = $a7 ; $a7 then
=$a8					C64_NOT                  = $a8 ; $a8 not
=$a9					C64_STEP                 = $a9 ; $a9 step
=$aa					C64_PLUS                 = $aa ; $aa +
=$ab					C64_MINUS                = $ab ; $ab -
=$ac					C64_TIMES                = $ac ; $ac *
=$ad					C64_DIVIDE               = $ad ; $ad /
=$ae					C64_POWER                = $ae ; $ae ^
=$af					C64_AND                  = $af ; $af and
=$b0					C64_OR                   = $b0 ; $b0 or
=$b1					C64_GREATER              = $b1 ; $b1 >
=$b2					C64_EQUAL                = $b2 ; $b2 =
=$b3					C64_LESS                 = $b3 ; $b3 <
=$b4					C64_SGN                  = $b4 ; $b4 sgn
=$b5					C64_INT                  = $b5 ; $b5 int
=$b6					C64_ABS                  = $b6 ; $b6 abs
=$b7					C64_USR                  = $b7 ; $b7 usr
=$b8					C64_FRE                  = $b8 ; $b8 fre
=$b9					C64_POS                  = $b9 ; $b9 pos
=$ba					C64_SQR                  = $ba ; $ba sqr
=$bb					C64_RND                  = $bb ; $bb rnd
=$bc					C64_LOG                  = $bc ; $bc log
=$bd					C64_EXP                  = $bd ; $bd exp
=$be					C64_COS                  = $be ; $be cos
=$bf					C64_SIN                  = $bf ; $bf sin
=$c0					C64_TAN                  = $c0 ; $c0 tan
=$c1					C64_ATN                  = $c1 ; $c1 atn
=$c2					C64_PEEK                 = $c2 ; $c2 peek
=$c3					C64_LEN                  = $c3 ; $c3 len
=$c4					C64_STRDOLLAR            = $c4 ; $c4 str$
=$c5					C64_VAL                  = $c5 ; $c5 val
=$c6					C64_ASC                  = $c6 ; $c6 asc
=$c7					C64_CHRDOLLAR            = $c7 ; $c7 chr$
=$c8					C64_LEFTDOLLAR           = $c8 ; $c8 left$
=$c9					C64_RIGHTDOLLAR          = $c9 ; $c9 right$
=$ca					C64_MIDDOLLAR            = $ca ; $ca mid$
=$cb					C64_GO                   = $cb ; $cb go
=$ce80					C64_MON                  = $ce80 ; $ce80 mon
=$ce81					C64_DOS                  = $ce81 ; $ce81 dos
=$ce82					C64_OLD                  = $ce82 ; $ce82 old
=$ce83					C64_GEOS                 = $ce83 ; $ce83 geos
=$ce84					C64_VPOKE                = $ce84 ; $ce84 vpoke
=$ce85					C64_VLOAD                = $ce85 ; $ce85 vload
=$ce86					C64_SCREEN               = $ce86 ; $ce86 screen
=$ce87					C64_PSET                 = $ce87 ; $ce87 pset
=$ce88					C64_LINE                 = $ce88 ; $ce88 line
=$ce89					C64_FRAME                = $ce89 ; $ce89 frame
=$ce8a					C64_RECT                 = $ce8a ; $ce8a rect
=$ce8b					C64_CHAR                 = $ce8b ; $ce8b char
=$ce8c					C64_MOUSE                = $ce8c ; $ce8c mouse
=$ce8d					C64_COLOR                = $ce8d ; $ce8d color
=$ce8e					C64_TEST                 = $ce8e ; $ce8e test
=$ce8f					C64_RESET                = $ce8f ; $ce8f reset
=$ce90					C64_CLS                  = $ce90 ; $ce90 cls
=$ce91					C64_CODEX                = $ce91 ; $ce91 codex
=$ce92					C64_LOCATE               = $ce92 ; $ce92 locate
=$ce93					C64_BOOT                 = $ce93 ; $ce93 boot
=$ce94					C64_KEYMAP               = $ce94 ; $ce94 keymap
=$ce95					C64_BLOAD                = $ce95 ; $ce95 bload
=$ce96					C64_BVLOAD               = $ce96 ; $ce96 bvload
=$ce97					C64_BVERIFY              = $ce97 ; $ce97 bverify
=$ce98					C64_BANK                 = $ce98 ; $ce98 bank
=$ce99					C64_FMINIT               = $ce99 ; $ce99 fminit
=$ce9a					C64_FMNOTE               = $ce9a ; $ce9a fmnote
=$ce9b					C64_FMDRUM               = $ce9b ; $ce9b fmdrum
=$ce9c					C64_FMINST               = $ce9c ; $ce9c fminst
=$ce9d					C64_FMVIB                = $ce9d ; $ce9d fmvib
=$ce9e					C64_FMFREQ               = $ce9e ; $ce9e fmfreq
=$ce9f					C64_FMVOL                = $ce9f ; $ce9f fmvol
=$cea0					C64_FMPAN                = $cea0 ; $cea0 fmpan
=$cea1					C64_FMPLAY               = $cea1 ; $cea1 fmplay
=$cea2					C64_FMCHORD              = $cea2 ; $cea2 fmchord
=$cea3					C64_FMPOKE               = $cea3 ; $cea3 fmpoke
=$cea4					C64_PSGINIT              = $cea4 ; $cea4 psginit
=$cea5					C64_PSGNOTE              = $cea5 ; $cea5 psgnote
=$cea6					C64_PSGVOL               = $cea6 ; $cea6 psgvol
=$cea7					C64_PSGWAV               = $cea7 ; $cea7 psgwav
=$cea8					C64_PSGFREQ              = $cea8 ; $cea8 psgfreq
=$cea9					C64_PSGPAN               = $cea9 ; $cea9 psgpan
=$ceaa					C64_PSGPLAY              = $ceaa ; $ceaa psgplay
=$ceab					C64_PSGCHORD             = $ceab ; $ceab psgchord
=$ceac					C64_REBOOT               = $ceac ; $ceac reboot
=$cead					C64_POWEROFF             = $cead ; $cead poweroff
=$ceae					C64_I2CPOKE              = $ceae ; $ceae i2cpoke
=$ceaf					C64_SLEEP                = $ceaf ; $ceaf sleep
=$ceb0					C64_BSAVE                = $ceb0 ; $ceb0 bsave
=$ceb1					C64_MENU                 = $ceb1 ; $ceb1 menu
=$ceb2					C64_REN                  = $ceb2 ; $ceb2 ren
=$ceb3					C64_LINPUT               = $ceb3 ; $ceb3 linput
=$ceb4					C64_LINPUTHASH           = $ceb4 ; $ceb4 linput#
=$ceb5					C64_BINPUTHASH           = $ceb5 ; $ceb5 binput#
=$ceb6					C64_HELP                 = $ceb6 ; $ceb6 help
=$ced0					C64_VPEEK                = $ced0 ; $ced0 vpeek
=$ced1					C64_MX                   = $ced1 ; $ced1 mx
=$ced2					C64_MY                   = $ced2 ; $ced2 my
=$ced3					C64_MB                   = $ced3 ; $ced3 mb
=$ced4					C64_JOY                  = $ced4 ; $ced4 joy
=$ced5					C64_HEXDOLLAR            = $ced5 ; $ced5 hex$
=$ced6					C64_BINDOLLAR            = $ced6 ; $ced6 bin$
=$ced7					C64_I2CPEEK              = $ced7 ; $ced7 i2cpeek
=$ced8					C64_POINTER              = $ced8 ; $ced8 pointer
=$ced9					C64_STRPTR               = $ced9 ; $ced9 strptr
=$ceda					C64_RPTDOLLAR            = $ceda ; $ceda rpt$
=$801					CodeStart = $801
=$22					ZeroPageMandatory = $22
=$400					MemoryStorage = $400
.0028					codePtr:
>0028							.fill 	2
.002a					objPtr:
>002a							.fill 	2
.002c					zTemp0:
>002c							.fill 	2
.002e					zTemp1:
>002e							.fill 	2
.0030					zTemp2:
>0030							.fill 	2
=$80					PCD_STARTBINARY = $80
=$8d					PCD_ENDBINARY = $8d
=$8d					PCD_STARTCOMMAND = $8d
=$ca					PCD_ENDCOMMAND = $ca
=$ca					PCD_STARTSYSTEM = $ca
=$d5					PCD_ENDSYSTEM = $d5
=$80					PCD_PLUS             = $80 ; +
=$81					PCD_MINUS            = $81 ; -
=$82					PCD_TIMES            = $82 ; *
=$83					PCD_DIVIDE           = $83 ; /
=$84					PCD_POWER            = $84 ; ^
=$85					PCD_AND              = $85 ; and
=$86					PCD_OR               = $86 ; or
=$87					PCD_GREATER          = $87 ; >
=$88					PCD_EQUAL            = $88 ; =
=$89					PCD_LESS             = $89 ; <
=$8a					PCD_GREATEREQUAL     = $8a ; >=
=$8b					PCD_LESSGREATER      = $8b ; <>
=$8c					PCD_LESSEQUAL        = $8c ; <=
=$8d					PCD_ABS              = $8d ; abs
=$8e					PCD_ARRAY            = $8e ; array
=$8f					PCD_ASC              = $8f ; asc
=$90					PCD_ASSERT           = $90 ; assert
=$91					PCD_BINDOLLAR        = $91 ; bin$
=$92					PCD_PRINTCMD_CHR     = $92 ; print.chr
=$93					PCD_CHRDOLLAR        = $93 ; chr$
=$94					PCD_SCMD_CMP         = $94 ; s.cmp
=$95					PCD_FOR              = $95 ; for
=$96					PCD_FRE              = $96 ; fre
=$97					PCD_GET              = $97 ; get
=$98					PCD_RETURN           = $98 ; return
=$99					PCD_PSET             = $99 ; pset
=$9a					PCD_LINE             = $9a ; line
=$9b					PCD_RECT             = $9b ; rect
=$9c					PCD_FRAME            = $9c ; frame
=$9d					PCD_CHAR             = $9d ; char
=$9e					PCD_HEXDOLLAR        = $9e ; hex$
=$9f					PCD_INPUT            = $9f ; input
=$a0					PCD_INPUTDOLLAR      = $a0 ; input$
=$a1					PCD_INPUTCMD_START   = $a1 ; input.start
=$a2					PCD_LEN              = $a2 ; len
=$a3					PCD_FCMD_CMP         = $a3 ; f.cmp
=$a4					PCD_INTCMD_DIV       = $a4 ; int.div
=$a5					PCD_NEGATE           = $a5 ; negate
=$a6					PCD_NEWCMD_LINE      = $a6 ; new.line
=$a7					PCD_NEXT             = $a7 ; next
=$a8					PCD_NOT              = $a8 ; not
=$a9					PCD_ON               = $a9 ; on
=$aa					PCD_MOREON           = $aa ; moreon
=$ab					PCD_PEEK             = $ab ; peek
=$ac					PCD_POKE             = $ac ; poke
=$ad					PCD_POS              = $ad ; pos
=$ae					PCD_GETCHANNEL       = $ae ; getchannel
=$af					PCD_SETCHANNEL       = $af ; setchannel
=$b0					PCD_PRINTCMD_N       = $b0 ; print.n
=$b1					PCD_PRINTCMD_S       = $b1 ; print.s
=$b2					PCD_READ             = $b2 ; read
=$b3					PCD_READDOLLAR       = $b3 ; read$
=$b4					PCD_RND              = $b4 ; rnd
=$b5					PCD_CONCAT           = $b5 ; concat
=$b6					PCD_SGN              = $b6 ; sgn
=$b7					PCD_PRINTCMD_TAB     = $b7 ; print.tab
=$b8					PCD_PRINTCMD_POS     = $b8 ; print.pos
=$b9					PCD_PRINTCMD_SPC     = $b9 ; print.spc
=$ba					PCD_STRDOLLAR        = $ba ; str$
=$bb					PCD_LEFTDOLLAR       = $bb ; left$
=$bc					PCD_RIGHTDOLLAR      = $bc ; right$
=$bd					PCD_MIDDOLLAR        = $bd ; mid$
=$be					PCD_SWAP             = $be ; swap
=$bf					PCD_TI               = $bf ; ti
=$c0					PCD_TIDOLLAR         = $c0 ; ti$
=$c1					PCD_USR              = $c1 ; usr
=$c2					PCD_VAL              = $c2 ; val
=$c3					PCD_CLOSE            = $c3 ; close
=$c4					PCD_EXIT             = $c4 ; exit
=$c5					PCD_DEBUG            = $c5 ; debug
=$c6					PCD_OPEN             = $c6 ; open
=$c7					PCD_SCREEN           = $c7 ; screen
=$c8					PCD_VPOKE            = $c8 ; vpoke
=$c9					PCD_VPEEK            = $c9 ; vpeek
=$ca					PCD_CMD_SHIFT        = $ca ; .shift
=$cb					PCD_CMD_BYTE         = $cb ; .byte
=$cc					PCD_CMD_WORD         = $cc ; .word
=$cd					PCD_CMD_FLOAT        = $cd ; .float
=$ce					PCD_CMD_STRING       = $ce ; .string
=$cf					PCD_CMD_DATA         = $cf ; .data
=$d0					PCD_CMD_GOTO         = $d0 ; .goto
=$d1					PCD_CMD_GOSUB        = $d1 ; .gosub
=$d2					PCD_CMD_GOTOCMD_Z    = $d2 ; .goto.z
=$d3					PCD_CMD_GOTOCMD_NZ   = $d3 ; .goto.nz
=$d4					PCD_CMD_VARSPACE     = $d4 ; .varspace
=$ca80					PCD_CLR              = $ca80 ; clr
=$ca81					PCD_DIM              = $ca81 ; dim
=$ca82					PCD_END              = $ca82 ; end
=$ca83					PCD_JOY              = $ca83 ; joy
=$ca84					PCD_INT              = $ca84 ; int
=$ca85					PCD_SQR              = $ca85 ; sqr
=$ca86					PCD_LOG              = $ca86 ; log
=$ca87					PCD_EXP              = $ca87 ; exp
=$ca88					PCD_COS              = $ca88 ; cos
=$ca89					PCD_SIN              = $ca89 ; sin
=$ca8a					PCD_TAN              = $ca8a ; tan
=$ca8b					PCD_ATN              = $ca8b ; atn
=$ca8c					PCD_MOUSE            = $ca8c ; mouse
=$ca8d					PCD_MB               = $ca8d ; mb
=$ca8e					PCD_MX               = $ca8e ; mx
=$ca8f					PCD_MY               = $ca8f ; my
=$ca90					PCD_RESTORE          = $ca90 ; restore
=$ca91					PCD_STOP             = $ca91 ; stop
=$ca92					PCD_SYS              = $ca92 ; sys
=$ca93					PCD_TIDOLLARCMD_WRITE = $ca93 ; ti$.write
=$ca94					PCD_WAIT             = $ca94 ; wait
=$ca95					PCD_I2CPOKE          = $ca95 ; i2cpoke
=$ca96					PCD_I2CPEEK          = $ca96 ; i2cpeek
=$ca97					PCD_BANK             = $ca97 ; bank
=$ca98					PCD_SLEEP            = $ca98 ; sleep
=$ca99					PCD_FMINIT           = $ca99 ; fminit
=$ca9a					PCD_FMNOTE           = $ca9a ; fmnote
=$ca9b					PCD_FMDRUM           = $ca9b ; fmdrum
=$ca9c					PCD_FMINST           = $ca9c ; fminst
=$ca9d					PCD_FMVIB            = $ca9d ; fmvib
=$ca9e					PCD_FMFREQ           = $ca9e ; fmfreq
=$ca9f					PCD_FMVOL            = $ca9f ; fmvol
=$caa0					PCD_FMPAN            = $caa0 ; fmpan
=$caa1					PCD_FMPLAY           = $caa1 ; fmplay
=$caa2					PCD_FMCHORD          = $caa2 ; fmchord
=$caa3					PCD_FMPOKE           = $caa3 ; fmpoke
=$caa4					PCD_PSGINIT          = $caa4 ; psginit
=$caa5					PCD_PSGNOTE          = $caa5 ; psgnote
=$caa6					PCD_PSGVOL           = $caa6 ; psgvol
=$caa7					PCD_PSGWAV           = $caa7 ; psgwav
=$caa8					PCD_PSGFREQ          = $caa8 ; psgfreq
=$caa9					PCD_PSGPAN           = $caa9 ; psgpan
=$caaa					PCD_PSGPLAY          = $caaa ; psgplay
=$caab					PCD_PSGCHORD         = $caab ; psgchord
=$caac					PCD_CLS              = $caac ; cls
=$caad					PCD_LOCATE           = $caad ; locate
=$caae					PCD_COLOR            = $caae ; color
.1eb5					SetErrorHandler:
.1eb5	8c 6f 05	sty $056f			sty 	ErrorHandlerVector+1
.1eb8	8e 6e 05	stx $056e			stx 	ErrorHandlerVector
.1ebb	60		rts				rts
.1ebc					CallErrorHandler:
.1ebc	6c 6e 05	jmp ($056e)			jmp 	(ErrorHandlerVector)
.056e					ErrorHandlerVector:
>056e							.fill 	2
.1ebf					ErrorV_range:
.1ebf	20 bc 1e	jsr $1ebc		jsr	CallErrorHandler
>1ec2	4f 55 54 20 4f 46 20 52			.text	"OUT OF RANGE",0
>1eca	41 4e 47 45 00
.1ecf					ErrorV_value:
.1ecf	20 bc 1e	jsr $1ebc		jsr	CallErrorHandler
>1ed2	42 41 44 20 56 41 4c 55			.text	"BAD VALUE",0
>1eda	45 00
.1edc					ErrorV_syntax:
.1edc	20 bc 1e	jsr $1ebc		jsr	CallErrorHandler
>1edf	53 59 4e 54 41 58 20 45			.text	"SYNTAX ERROR",0
>1ee7	52 52 4f 52 00
.1eec					ErrorV_type:
.1eec	20 bc 1e	jsr $1ebc		jsr	CallErrorHandler
>1eef	54 59 50 45 20 4d 49 53			.text	"TYPE MISMATCH",0
>1ef7	4d 41 54 43 48 00
.1efd					ErrorV_unimplemented:
.1efd	20 bc 1e	jsr $1ebc		jsr	CallErrorHandler
>1f00	4e 4f 54 20 49 4d 50 4c			.text	"NOT IMPLEMENTED",0
>1f08	45 4d 45 4e 54 45 44 00
.1f10					ErrorV_assert:
.1f10	20 bc 1e	jsr $1ebc		jsr	CallErrorHandler
>1f13	41 53 53 45 52 54 20 46			.text	"ASSERT FAIL",0
>1f1b	41 49 4c 00
.1f1f					ErrorV_line:
.1f1f	20 bc 1e	jsr $1ebc		jsr	CallErrorHandler
>1f22	55 4e 4b 4e 4f 57 4e 20			.text	"UNKNOWN LINE NUMBER",0
>1f2a	4c 49 4e 45 20 4e 55 4d 42 45 52 00
.1f36					ErrorV_internal:
.1f36	20 bc 1e	jsr $1ebc		jsr	CallErrorHandler
>1f39	49 4e 54 45 52 4e 41 4c			.text	"INTERNAL ERROR",0
>1f41	20 45 52 52 4f 52 00
.1f48					ErrorV_divzero:
.1f48	20 bc 1e	jsr $1ebc		jsr	CallErrorHandler
>1f4b	44 49 56 49 44 45 20 42			.text	"DIVIDE BY ZERO",0
>1f53	59 20 5a 45 52 4f 00
.1f5a					ErrorV_structure:
.1f5a	20 bc 1e	jsr $1ebc		jsr	CallErrorHandler
>1f5d	53 54 52 55 43 54 55 52			.text	"STRUCTURE IMBALANCE",0
>1f65	45 20 49 4d 42 41 4c 41 4e 43 45 00
.1f71					ErrorV_stop:
.1f71	20 bc 1e	jsr $1ebc		jsr	CallErrorHandler
>1f74	50 52 4f 47 52 41 4d 20			.text	"PROGRAM STOPPED",0
>1f7c	53 54 4f 50 50 45 44 00
.1f84					ErrorV_data:
.1f84	20 bc 1e	jsr $1ebc		jsr	CallErrorHandler
>1f87	4f 55 54 20 4f 46 20 44			.text	"OUT OF DATA",0
>1f8f	41 54 41 00
.1f93					ErrorV_undeclared:
.1f93	20 bc 1e	jsr $1ebc		jsr	CallErrorHandler
>1f96	55 4e 4b 4e 4f 57 4e 20			.text	"UNKNOWN ARRAY",0
>1f9e	41 52 52 41 59 00
.1fa4					ErrorV_redefine:
.1fa4	20 bc 1e	jsr $1ebc		jsr	CallErrorHandler
>1fa7	41 52 52 41 59 20 52 45			.text	"ARRAY REDEFINED",0
>1faf	44 45 46 49 4e 45 44 00
.1fb7					ErrorV_index:
.1fb7	20 bc 1e	jsr $1ebc		jsr	CallErrorHandler
>1fba	42 41 44 20 41 52 52 41			.text	"BAD ARRAY INDEX",0
>1fc2	59 20 49 4e 44 45 58 00
.1fca					ErrorV_memory:
.1fca	20 bc 1e	jsr $1ebc		jsr	CallErrorHandler
>1fcd	4f 55 54 20 4f 46 20 4d			.text	"OUT OF MEMORY",0
>1fd5	45 4d 4f 52 59 00
.1fdb					ErrorV_channel:
.1fdb	20 bc 1e	jsr $1ebc		jsr	CallErrorHandler
>1fde	49 4e 50 55 54 2f 4f 55			.text	"INPUT/OUTPUT ERROR",0
>1fe6	54 50 55 54 20 45 52 52 4f 52 00
.1ff1					MoveObjectForward:
.1ff1	b2 2a		lda ($2a)			lda 	(objPtr) 					; get next
.1ff3	c9 ff		cmp #$ff			cmp 	#$FF
.1ff5	f0 36		beq $202d			beq 	_MOFEnd
.1ff7	c9 40		cmp #$40			cmp 	#$40 						; 00-3F
.1ff9	90 24		bcc $201f			bcc 	_MOFAdvance1 				; forward 1
.1ffb	a0 02		ldy #$02			ldy 	#2 							; 40-6F
.1ffd	c9 70		cmp #$70			cmp 	#$70 						; forward 2
.1fff	90 20		bcc $2021			bcc 	_MOFAdvanceY
.2001	c9 ca		cmp #$ca			cmp 	#PCD_STARTSYSTEM 			; 70 - System tokens.
.2003	90 1a		bcc $201f			bcc 	_MOFAdvance1 				; forward 1
.2005	a8		tay				tay 								; read the size.
.2006	b9 6b 1f	lda $1f6b,y			lda 	MOFSizeTable-PCD_STARTSYSTEM,y
.2009	a8		tay				tay
.200a	c8		iny				iny 								; add 1 for the system token.
.200b	d0 14		bne $2021			bne 	_MOFAdvanceY 				; if 0, was $FF thus a string/data skip.
.200d	a0 01		ldy #$01			ldy 	#1 							; get length byte
.200f	b1 2a		lda ($2a),y			lda 	(objPtr),y
.2011	a8		tay				tay 								; into Y.
.2012	18		clc				clc
.2013	a5 2a		lda $2a				lda 	objPtr						; add 2 to the object pointer
.2015	69 02		adc #$02			adc 	#2
.2017	85 2a		sta $2a				sta 	objPtr
.2019	90 02		bcc $201d			bcc 	_MOFNoCarry1
.201b	e6 2b		inc $2b				inc 	objPtr+1
.201d					_MOFNoCarry1:
.201d	80 02		bra $2021			bra 	_MOFAdvanceY
.201f					_MOFAdvance1:
.201f	a0 01		ldy #$01			ldy 	#1
.2021					_MOFAdvanceY:
.2021	98		tya				tya 								; add Y to objPtr
.2022	18		clc				clc
.2023	65 2a		adc $2a				adc 	objPtr
.2025	85 2a		sta $2a				sta 	objPtr
.2027	90 02		bcc $202b			bcc 	_MOFNoCarry2
.2029	e6 2b		inc $2b				inc 	objPtr+1
.202b					_MOFNoCarry2:
.202b	18		clc				clc 								; not completed.
.202c	60		rts				rts
.202d					_MOFEnd:
.202d	e6 2a		inc $2a				inc 	objPtr
.202f	d0 02		bne $2033			bne 	_MOFENoCarry
.2031	e6 2b		inc $2b				inc 	objPtr+1
.2033					_MOFENoCarry:
.2033	38		sec				sec
.2034	60		rts				rts
.2035					MOFSizeTable:
>2035	01					.byte	1         	; $ca .shift
>2036	01					.byte	1         	; $cb .byte
>2037	02					.byte	2         	; $cc .word
>2038	05					.byte	5         	; $cd .float
>2039	ff					.byte	255       	; $ce .string
>203a	ff					.byte	255       	; $cf .data
>203b	02					.byte	2         	; $d0 .goto
>203c	02					.byte	2         	; $d1 .gosub
>203d	02					.byte	2         	; $d2 .goto.z
>203e	02					.byte	2         	; $d3 .goto.nz
>203f	02					.byte	2         	; $d4 .varspace

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library

=12					MathStackSize = 12
=$40					NSSString = $40 							; string vs typemask
=$00					NSSIFloat = $00 							; ifloat vs typemask
=$20					NSSIInt16 = $20								; when set, a reference is a 16 bit reference (e.g. a%)
=$40					NSSTypeMask = $40
=$80					NSSArray = $80  							; array (in variable code)
.0032					NSStatus:
>0032							.fill 	MathStackSize
.003e					NSMantissa0:
>003e							.fill 	MathStackSize 				; (this is my integer mantissa system)
.004a					NSMantissa1:
>004a							.fill 	MathStackSize
.0056					NSMantissa2:
>0056							.fill 	MathStackSize
.0062					NSMantissa3:
>0062							.fill 	MathStackSize
.006e					NSExponent:
>006e							.fill 	MathStackSize
.0570					numberBuffer:
>0570							.fill 	34
.2040					FloatSubtract:
.2040	b5 32		lda $32,x			lda 	NSStatus,x 					; negate top of stack
.2042	49 80		eor #$80			eor 	#$80
.2044	95 32		sta $32,x			sta 	NSStatus,x					; and fall through.
.2046					FloatAdd:
.2046	ca		dex				dex
.2047	b5 6e		lda $6e,x			lda 	NSExponent,x 				; can use optimised.
.2049	15 6f		ora $6f,x			ora 	NSExponent+1,x
.204b	15 62		ora $62,x			ora 	NSMantissa3,x
.204d	15 63		ora $63,x			ora 	NSMantissa3+1,x
.204f	d0 04		bne $2055			bne 	_FAUseFloat
.2051	20 e2 23	jsr $23e2			jsr 	FloatInt32Add 				; use the int32 one.
.2054	60		rts				rts
.2055					_FAUseFloat:
.2055	20 77 23	jsr $2377			jsr 	FloatNormalise 				; normalise S[X]
.2058	f0 51		beq $20ab			beq 	_FAReturn1
.205a	e8		inx				inx 								; normalise S[X+1]
.205b	20 77 23	jsr $2377			jsr 	FloatNormalise
.205e	ca		dex				dex
.205f	c9 00		cmp #$00			cmp 	#0
.2061	f0 60		beq $20c3			beq 	_FAExit 					; if so, just return A
.2063	b5 6e		lda $6e,x			lda 	NSExponent,x 				; are the exponents the same ?
.2065	d5 6f		cmp $6f,x			cmp 	NSExponent+1,x
.2067	f0 18		beq $2081			beq 	_FAExponentsEqual
.2069	b5 6e		lda $6e,x			lda 	NSExponent,x 				; work out the larger exponent
.206b	a8		tay				tay
.206c	38		sec				sec 								; do a signed comparison of the exponents.
.206d	f5 6f		sbc $6f,x			sbc 	NSExponent+1,x
.206f	50 02		bvc $2073			bvc 	_FANoSignedChange
.2071	49 80		eor #$80			eor 	#$80
.2073					_FANoSignedChange:
.2073	29 80		and #$80			and 	#$80
.2075	10 02		bpl $2079			bpl 	_FAHaveMax
.2077	b4 6f		ldy $6f,x			ldy 	NSExponent+1,x
.2079					_FAHaveMax:
.2079	20 c4 20	jsr $20c4			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.207c	e8		inx				inx
.207d	20 c4 20	jsr $20c4			jsr 	_FAShiftToExponent
.2080	ca		dex				dex
.2081					_FAExponentsEqual:
.2081	b5 32		lda $32,x			lda 	NSStatus,x 					; are the signs the same
.2083	55 33		eor $33,x			eor 	NSStatus+1,x
.2085	30 0e		bmi $2095			bmi 	_FADifferentSigns
.2087	20 ae 23	jsr $23ae			jsr 	FloatAddTopTwoStack 		; do the add of the mantissae
.208a	b5 62		lda $62,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.208c	10 35		bpl $20c3			bpl 	_FAExit 					; if no, we are done.
.208e	20 3b 26	jsr $263b			jsr 	FloatShiftRight 				; shift A right, renormalising it.
.2091	f6 6e		inc $6e,x			inc 	NSExponent,x 				; bump the exponent and exit
.2093	80 2e		bra $20c3			bra 	_FAExit
.2095					_FADifferentSigns:
.2095	20 c8 23	jsr $23c8			jsr 	FloatSubTopTwoStack 		; subtract mantissa B from A
.2098	b5 62		lda $62,x			lda 	NSMantissa3,x 				; is the result negative ?
.209a	10 06		bpl $20a2			bpl 	_FACheckZero 				; if no, check for -0
.209c	20 e4 25	jsr $25e4			jsr 	FloatNegate 					; netate result
.209f	20 eb 25	jsr $25eb			jsr 	FloatNegateMantissa 			; negate (2'c) the mantissa
.20a2					_FACheckZero:
.20a2	20 44 26	jsr $2644			jsr 	FloatIsZero	 				; check for -0
.20a5	d0 1c		bne $20c3			bne 	_FAExit
.20a7	74 32		stz $32,x			stz 	NSStatus,x
.20a9	80 18		bra $20c3			bra 	_FAExit
.20ab					_FAReturn1:
.20ab	b5 3f		lda $3f,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.20ad	95 3e		sta $3e,x			sta 	NSMantissa0,x
.20af	b5 4b		lda $4b,x			lda 	NSMantissa1+1,x
.20b1	95 4a		sta $4a,x			sta 	NSMantissa1,x
.20b3	b5 57		lda $57,x			lda 	NSMantissa2+1,x
.20b5	95 56		sta $56,x			sta 	NSMantissa2,x
.20b7	b5 63		lda $63,x			lda 	NSMantissa3+1,x
.20b9	95 62		sta $62,x			sta 	NSMantissa3,x
.20bb	b5 6f		lda $6f,x			lda 	NSExponent+1,x
.20bd	95 6e		sta $6e,x			sta 	NSExponent,x
.20bf	b5 33		lda $33,x			lda 	NSStatus+1,x
.20c1	95 32		sta $32,x			sta 	NSStatus,x
.20c3					_FAExit:
.20c3	60		rts				rts
.20c4					_FAShiftToExponent:
.20c4					_FAShiftToExponent2:
.20c4	98		tya				tya 								; compare Y to exponent
.20c5	d5 6e		cmp $6e,x			cmp 	NSExponent,x 				; reached the exponent required ?
.20c7	f0 07		beq $20d0			beq 	_FASEExit 					; exit if so.
.20c9	20 3b 26	jsr $263b			jsr 	FloatShiftRight	 			; shift the mantissa right
.20cc	f6 6e		inc $6e,x			inc 	NSExponent,x 				; increment exponent
.20ce	80 f4		bra $20c4			bra 	_FAShiftToExponent2
.20d0					_FASEExit:
.20d0	60		rts				rts
.20d1					CompareEqual:
.20d1	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.20d3	d0 09		bne $20de			bne 	ReturnFalse
.20d5					ReturnTrue:
.20d5	a9 01		lda #$01			lda 	#1
.20d7	95 3e		sta $3e,x			sta 	NSMantissa0,x
.20d9	a9 80		lda #$80			lda 	#$80
.20db	95 32		sta $32,x			sta 	NSStatus,x
.20dd	60		rts				rts
.20de					ReturnFalse:
.20de	74 3e		stz $3e,x			stz 	NSMantissa0,x
.20e0	60		rts				rts
.20e1					CompareNotEqual:
.20e1	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.20e3	d0 f0		bne $20d5			bne 	ReturnTrue
.20e5	80 f7		bra $20de			bra 	ReturnFalse
.20e7					CompareLess:
.20e7	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.20e9	c9 ff		cmp #$ff			cmp 	#$FF
.20eb	f0 e8		beq $20d5			beq 	ReturnTrue
.20ed	80 ef		bra $20de			bra 	ReturnFalse
.20ef					CompareGreater:
.20ef	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.20f1	c9 01		cmp #$01			cmp 	#$01
.20f3	f0 e0		beq $20d5			beq 	ReturnTrue
.20f5	80 e7		bra $20de			bra 	ReturnFalse
.20f7					CompareLessEqual:
.20f7	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.20f9	c9 01		cmp #$01			cmp 	#$01
.20fb	d0 d8		bne $20d5			bne 	ReturnTrue
.20fd	80 df		bra $20de			bra 	ReturnFalse
.20ff					CompareGreaterEqual:
.20ff	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.2101	c9 ff		cmp #$ff			cmp 	#$FF
.2103	d0 d0		bne $20d5			bne 	ReturnTrue
.2105	80 d7		bra $20de			bra 	ReturnFalse
.2107					FloatCompare:
.2107	b5 6e		lda $6e,x			lda 	NSExponent,x 				; float comparison.
.2109	15 6d		ora $6d,x			ora 	NSExponent-1,x 				; integer if both integer.
.210b	48		pha				pha
.210c	20 40 20	jsr $2040			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.210f	68		pla				pla
.2110	d0 0c		bne $211e			bne 	_FCCompareFloat
.2112	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.2114	15 4a		ora $4a,x			ora 	NSMantissa1,x
.2116	15 56		ora $56,x			ora 	NSMantissa2,x
.2118	15 62		ora $62,x			ora 	NSMantissa3,x
.211a	f0 14		beq $2130			beq 	_FCExit 					; if zero, return zero
.211c	80 0a		bra $2128			bra 	_FCSign
.211e					_FCCompareFloat:
.211e	b5 4a		lda $4a,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.2120	29 f0		and #$f0			and 	#$F0
.2122	15 56		ora $56,x			ora 	NSMantissa2,x
.2124	15 62		ora $62,x			ora 	NSMantissa3,x
.2126	f0 08		beq $2130			beq 	_FCExit 					; zero, so approximately identical
.2128					_FCSign:
.2128	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.212a	34 32		bit $32,x			bit 	NSStatus,x
.212c	10 02		bpl $2130			bpl 	_FCExit
.212e					_FCNegative:
.212e	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.2130					_FCExit:
.2130	20 24 26	jsr $2624			jsr 	FloatSetByte 				; set the result 255,0,1
.2133	60		rts				rts
.2134					FloatScalarTable:
>2134	66 66 66 66				.dword $66666666 ; 0.1
>2138	de					.byte $de
>2139	1f 85 eb 51				.dword $51eb851f ; 0.01
>213d	db					.byte $db
>213e	4c 37 89 41				.dword $4189374c ; 0.001
>2142	d8					.byte $d8
>2143	ac 8b db 68				.dword $68db8bac ; 0.0001
>2147	d4					.byte $d4
>2148	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>214c	d1					.byte $d1
>214d	83 de 1b 43				.dword $431bde83 ; 1e-06
>2151	ce					.byte $ce
>2152	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>2156	ca					.byte $ca
>2157	89 3b e6 55				.dword $55e63b89 ; 1e-08
>215b	c7					.byte $c7
>215c	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>2160	c4					.byte $c4
>2161	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>2165	c0					.byte $c0
>2166	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>216a	bd					.byte $bd
.216b					FloatDivide:
.216b	48		pha				pha
.216c	20 77 23	jsr $2377			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.216f	ca		dex				dex
.2170	c9 00		cmp #$00			cmp 	#0
.2172	f0 1e		beq $2192			beq 	_FDZero
.2174	20 77 23	jsr $2377			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.2177	f0 16		beq $218f			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.2179	20 da 21	jsr $21da			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.217c	20 a7 21	jsr $21a7			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.217f	20 77 23	jsr $2377			jsr		FloatNormalise 				; renormalise
.2182	20 6d 23	jsr $236d			jsr 	FloatCalculateSign 			; calculate result sign
.2185	b5 6e		lda $6e,x			lda 	NSExponent,x 				; calculate exponent
.2187	38		sec				sec
.2188	f5 6f		sbc $6f,x			sbc 	NSExponent+1,x
.218a	38		sec				sec
.218b	e9 1e		sbc #$1e			sbc 	#30
.218d	95 6e		sta $6e,x			sta 	NSExponent,x
.218f					_FDExit:
.218f	68		pla				pla
.2190	18		clc				clc
.2191	60		rts				rts
.2192					_FDZero:
.2192	68		pla				pla
.2193	38		sec				sec
.2194	60		rts				rts
.2195					DivideInt32:
.2195	20 5d 22	jsr $225d			jsr 	FloatIntegerPart 			; make both integers
.2198	ca		dex				dex
.2199	20 5d 22	jsr $225d			jsr 	FloatIntegerPart
.219c	20 b8 21	jsr $21b8			jsr 	Int32Divide 				; divide
.219f	20 a7 21	jsr $21a7			jsr 	NSMCopyPlusTwoToZero 		; copy result
.21a2	20 6d 23	jsr $236d			jsr 	FloatCalculateSign 			; calculate result sign
.21a5	18		clc				clc
.21a6	60		rts				rts
.21a7					NSMCopyPlusTwoToZero:
.21a7	b5 40		lda $40,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.21a9	95 3e		sta $3e,x			sta 	NSMantissa0,x
.21ab	b5 4c		lda $4c,x			lda 	NSMantissa1+2,x
.21ad	95 4a		sta $4a,x			sta 	NSMantissa1,x
.21af	b5 58		lda $58,x			lda 	NSMantissa2+2,x
.21b1	95 56		sta $56,x			sta 	NSMantissa2,x
.21b3	b5 64		lda $64,x			lda 	NSMantissa3+2,x
.21b5	95 62		sta $62,x			sta 	NSMantissa3,x
.21b7	60		rts				rts
.21b8					Int32Divide:
.21b8	48		pha				pha 								; save AXY
.21b9	5a		phy				phy
.21ba	20 05 26	jsr $2605			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.21bd	20 1e 26	jsr $261e			jsr 	FloatSetZeroMantissaOnly 	; set S[X] to zero
.21c0	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.21c2					_I32DivideLoop:
.21c2	e8		inx				inx
.21c3	e8		inx				inx
.21c4	20 31 26	jsr $2631			jsr 	FloatShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.21c7	ca		dex				dex
.21c8	ca		dex				dex
.21c9	20 32 26	jsr $2632			jsr 	FloatRotateLeft
.21cc	20 f8 21	jsr $21f8			jsr 	FloatDivideCheck 			; check if subtract possible
.21cf	90 02		bcc $21d3			bcc 	_I32DivideNoCarryIn
.21d1	f6 40		inc $40,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.21d3					_I32DivideNoCarryIn:
.21d3	88		dey				dey 								; loop round till division completed.
.21d4	d0 ec		bne $21c2			bne 	_I32DivideLoop
.21d6	7a		ply				ply 								; restore AXY and exit
.21d7	68		pla				pla
.21d8	18		clc				clc
.21d9	60		rts				rts
.21da					Int32ShiftDivide:
.21da	48		pha				pha 								; save AY
.21db	5a		phy				phy
.21dc	e8		inx				inx 								; clear S[X+2]
.21dd	e8		inx				inx
.21de	20 22 26	jsr $2622			jsr 	FloatSetZero
.21e1	ca		dex				dex
.21e2	ca		dex				dex
.21e3	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.21e5					_I32SDLoop:
.21e5	20 f8 21	jsr $21f8			jsr 	FloatDivideCheck 			; check if subtract possible
.21e8	e8		inx				inx
.21e9	e8		inx				inx
.21ea	20 32 26	jsr $2632			jsr 	FloatRotateLeft				; shift 64 bit FPA left, rotating carry in
.21ed	ca		dex				dex
.21ee	ca		dex				dex
.21ef	20 32 26	jsr $2632			jsr 	FloatRotateLeft
.21f2	88		dey				dey 	 							; do 31 times
.21f3	d0 f0		bne $21e5			bne 	_I32SDLoop
.21f5	7a		ply				ply 								; restore AY and exit
.21f6	68		pla				pla
.21f7	60		rts				rts
.21f8					FloatDivideCheck:
.21f8	20 c8 23	jsr $23c8			jsr 	FloatSubTopTwoStack 		; subtract Stack[X+1] from Stack[X+0]
.21fb	b0 04		bcs $2201			bcs 	_DCSExit 					; if carry set, then could do, exit
.21fd	20 ae 23	jsr $23ae			jsr 	FloatAddTopTwoStack 		; add it back in
.2200	18		clc				clc 								; and return False
.2201					_DCSExit:
.2201	60		rts				rts
.2202					FloatFractionalPart:
.2202	5a		phy				phy
.2203	b5 32		lda $32,x			lda 	NSStatus,x 					; take absolute value
.2205	29 7f		and #$7f			and 	#$7F
.2207	95 32		sta $32,x			sta 	NSStatus,x
.2209	20 77 23	jsr $2377			jsr 	FloatNormalise
.220c	b5 6e		lda $6e,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.220e	38		sec				sec
.220f	e9 e0		sbc #$e0			sbc 	#$E0
.2211	90 29		bcc $223c			bcc 	_FFPExit 					; already fractional
.2213	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.2215	b0 22		bcs $2239			bcs 	_FFPZero
.2217	a8		tay				tay 								; put count to do in Y
.2218	b5 62		lda $62,x			lda 	NSMantissa3,x 				; do each in turn.
.221a	20 41 22	jsr $2241			jsr 	_FFPPartial
.221d	95 62		sta $62,x			sta 	NSMantissa3,x
.221f	b5 56		lda $56,x			lda 	NSMantissa2,x
.2221	20 41 22	jsr $2241			jsr 	_FFPPartial
.2224	95 56		sta $56,x			sta 	NSMantissa2,x
.2226	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.2228	20 41 22	jsr $2241			jsr 	_FFPPartial
.222b	95 4a		sta $4a,x			sta 	NSMantissa1,x
.222d	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.222f	20 41 22	jsr $2241			jsr 	_FFPPartial
.2232	95 3e		sta $3e,x			sta 	NSMantissa0,x
.2234	20 44 26	jsr $2644			jsr 	FloatIsZero 					; zeroed check.
.2237	d0 03		bne $223c			bne 	_FFPExit
.2239					_FFPZero:
.2239	20 22 26	jsr $2622			jsr 	FloatSetZero
.223c					_FFPExit:
.223c	20 77 23	jsr $2377			jsr 	FloatNormalise
.223f	7a		ply				ply
.2240	60		rts				rts
.2241					_FFPPartial:
.2241	c0 00		cpy #$00			cpy 	#0 							; no more to do
.2243	f0 17		beq $225c			beq 	_FFFPPExit
.2245	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.2247	b0 0c		bcs $2255			bcs 	_FFFPPWholeByte
.2249	5a		phy				phy
.224a					_FFFPPLeft:
.224a	0a		asl a				asl 	a
.224b	88		dey				dey
.224c	d0 fc		bne $224a			bne 	_FFFPPLeft
.224e	7a		ply				ply
.224f					_FFFPPRight:
.224f	4a		lsr a				lsr 	a
.2250	88		dey				dey
.2251	d0 fc		bne $224f			bne 	_FFFPPRight
.2253	80 07		bra $225c			bra 	_FFFPPExit
.2255					_FFFPPWholeByte:
.2255	98		tya				tya 								; subtract 8 from count
.2256	38		sec				sec
.2257	e9 08		sbc #$08			sbc 	#8
.2259	a8		tay				tay
.225a	a9 00		lda #$00			lda 	#0 							; and clear all
.225c					_FFFPPExit:
.225c	60		rts				rts
.225d					FloatIntegerPart:
.225d	48		pha				pha
.225e	b5 6e		lda $6e,x			lda 	NSExponent,x 				; is it integer already ?
.2260	f0 1d		beq $227f			beq 	_FIPExit 					; if so do nothing
.2262	20 44 26	jsr $2644			jsr 	FloatIsZero 				; is it zero ?
.2265	f0 15		beq $227c			beq 	_FIPZero 					; if so return zero.
.2267	20 77 23	jsr $2377			jsr 	FloatNormalise 				; normalise
.226a	f0 10		beq $227c			beq 	_FIPZero 					; normalised to zero, exit zero
.226c					_FIPShift:
.226c	b5 6e		lda $6e,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.226e	10 07		bpl $2277			bpl 	_FIPCheckZero
.2270	20 3b 26	jsr $263b			jsr 	FloatShiftRight 			; shift mantissa right
.2273	f6 6e		inc $6e,x			inc 	NSExponent,x 				; bump exponent
.2275	80 f5		bra $226c			bra 	_FIPShift
.2277					_FIPCheckZero:
.2277	20 44 26	jsr $2644			jsr 	FloatIsZero 				; avoid -0 problem
.227a	d0 03		bne $227f			bne 	_FIPExit 					; set to zero if mantissa zero.
.227c					_FIPZero:
.227c	20 22 26	jsr $2622			jsr 	FloatSetZero
.227f					_FIPExit:
.227f	68		pla				pla
.2280	60		rts				rts
.2281					FloatIntegerPartDown:
.2281	48		pha				pha
.2282	5a		phy				phy
.2283	b5 6e		lda $6e,x			lda 	NSExponent,x 				; is it integer already ?
.2285	f0 36		beq $22bd			beq 	_FIPExit 					; if so do nothing
.2287	20 44 26	jsr $2644			jsr 	FloatIsZero 				; is it zero ?
.228a	f0 2e		beq $22ba			beq 	_FIPZero 					; if so return zero.
.228c	20 77 23	jsr $2377			jsr 	FloatNormalise 				; normalise
.228f	f0 29		beq $22ba			beq 	_FIPZero 					; normalised to zero, exit zero
.2291	a0 00		ldy #$00			ldy 	#0 							; reset the count of bits.
.2293					_FIPShift:
.2293	b5 6e		lda $6e,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.2295	10 0a		bpl $22a1			bpl 	_FIPCheckDown
.2297	20 3b 26	jsr $263b			jsr 	FloatShiftRight 			; shift mantissa right
.229a	90 01		bcc $229d			bcc 	_FIPNoFrac 					; shifted a zero out ?
.229c	c8		iny				iny
.229d					_FIPNoFrac:
.229d	f6 6e		inc $6e,x			inc 	NSExponent,x 				; bump exponent
.229f	80 f2		bra $2293			bra 	_FIPShift
.22a1					_FIPCheckDown:
.22a1	c0 00		cpy #$00			cpy 	#0 							; were there any fractional bits.
.22a3	f0 10		beq $22b5			beq 	_FIPCheckZero
.22a5	34 32		bit $32,x			bit 	NSStatus,x 					; +ve
.22a7	10 0c		bpl $22b5			bpl 	_FIPCheckZero
.22a9	e8		inx				inx 								; -ve so round *down*.
.22aa	a9 01		lda #$01			lda 	#1
.22ac	20 24 26	jsr $2624			jsr 	FloatSetByte
.22af	20 e4 25	jsr $25e4			jsr 	FloatNegate
.22b2	20 46 20	jsr $2046			jsr 	FloatAdd
.22b5					_FIPCheckZero:
.22b5	20 44 26	jsr $2644			jsr 	FloatIsZero 				; avoid -0 problem
.22b8	d0 03		bne $22bd			bne 	_FIPExit 					; set to zero if mantissa zero.
.22ba					_FIPZero:
.22ba	20 22 26	jsr $2622			jsr 	FloatSetZero
.22bd					_FIPExit:
.22bd	7a		ply				ply
.22be	68		pla				pla
.22bf	60		rts				rts
.22c0					FloatInt8Multiply:
.22c0	5a		phy				phy
.22c1	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; right shifted multiplier in Y
.22c3	a8		tay				tay
.22c4	74 3e		stz $3e,x			stz 	NSMantissa0,x 				; zero the result (already 8 bit constant)
.22c6					_FI8MLoop:
.22c6	98		tya				tya 								; shift right shifter right into carry
.22c7	4a		lsr a				lsr 	a
.22c8	a8		tay				tay
.22c9	90 0d		bcc $22d8			bcc 	_FI8MNoAdd
.22cb	18		clc				clc
.22cc	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.22ce	75 3f		adc $3f,x			adc 	NSMantissa0+1,x
.22d0	95 3e		sta $3e,x			sta 	NSMantissa0,x
.22d2	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.22d4	75 4b		adc $4b,x			adc 	NSMantissa1+1,x
.22d6	95 4a		sta $4a,x			sta 	NSMantissa1,x
.22d8					_FI8MNoAdd:
.22d8	16 3f		asl $3f,x			asl 	NSMantissa0+1,x 			; shift adder left
.22da	36 4b		rol $4b,x			rol 	NSMantissa1+1,x
.22dc	c0 00		cpy #$00			cpy 	#0
.22de	d0 e6		bne $22c6			bne 	_FI8MLoop 					; until right shifter zero.
.22e0	7a		ply				ply
.22e1	60		rts				rts
.22e2					FloatMultiply:
.22e2	ca		dex				dex
.22e3	b5 6e		lda $6e,x			lda 	NSExponent,x 				; can use optimised ?
.22e5	15 6f		ora $6f,x			ora 	NSExponent+1,x
.22e7	15 62		ora $62,x			ora 	NSMantissa3,x
.22e9	15 63		ora $63,x			ora 	NSMantissa3+1,x
.22eb	d0 21		bne $230e			bne 	_FMUseFloat
.22ed	b5 32		lda $32,x			lda 	NSStatus,x 					; check if it is 8 bit unsigned
.22ef	15 33		ora $33,x			ora 	NSStatus+1,x
.22f1	29 80		and #$80			and 	#$80
.22f3	15 62		ora $62,x			ora 	NSMantissa3,x
.22f5	15 56		ora $56,x			ora 	NSMantissa2,x
.22f7	15 4a		ora $4a,x			ora 	NSMantissa1,x
.22f9	15 63		ora $63,x			ora 	NSMantissa3+1,x
.22fb	15 57		ora $57,x			ora 	NSMantissa2+1,x
.22fd	15 4b		ora $4b,x			ora 	NSMantissa1+1,x
.22ff	d0 04		bne $2305			bne 	_FMInt32
.2301	20 c0 22	jsr $22c0			jsr 	FloatInt8Multiply 			; use fast 8x8 multiply.
.2304	60		rts				rts
.2305					_FMInt32:
.2305	20 2f 23	jsr $232f			jsr 	FloatMultiplyShort			; use the int32 one.
.2308	18		clc				clc 								; fix it up if gone out of range
.2309	75 6e		adc $6e,x			adc 	NSExponent,x
.230b	95 6e		sta $6e,x			sta 	NSExponent,x
.230d	60		rts				rts
.230e					_FMUseFloat:
.230e	20 77 23	jsr $2377			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.2311	f0 18		beq $232b			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.2313	e8		inx				inx
.2314	20 77 23	jsr $2377			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.2317	ca		dex				dex
.2318	c9 00		cmp #$00			cmp 	#0
.231a	f0 0c		beq $2328			beq 	_FDSetZero
.231c	20 2f 23	jsr $232f			jsr 	FloatMultiplyShort 			; calculate the result.
.231f	75 6e		adc $6e,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.2321	18		clc				clc
.2322	75 6f		adc $6f,x			adc 	NSExponent+1,x
.2324	95 6e		sta $6e,x			sta 	NSExponent,x
.2326	80 03		bra $232b			bra 	_FDExit
.2328					_FDSetZero:
.2328	20 22 26	jsr $2622			jsr 	FloatSetZero 				; return 0
.232b					_FDExit:
.232b	20 77 23	jsr $2377			jsr 	FloatNormalise 				; normalise the result
.232e	60		rts				rts
.232f					FloatMultiplyShort:
.232f	5a		phy				phy 								; save Y
.2330	20 05 26	jsr $2605			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.2333	20 1e 26	jsr $261e			jsr 	FloatSetZeroMantissaOnly 	; set mantissa S[X] to zero
.2336	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.2338					_I32MLoop:
.2338	b5 40		lda $40,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.233a	15 4c		ora $4c,x			ora 	NSMantissa1+2,x
.233c	15 58		ora $58,x			ora 	NSMantissa2+2,x
.233e	15 64		ora $64,x			ora 	NSMantissa3+2,x
.2340	f0 25		beq $2367			beq 	_I32MExit 					; exit if zero
.2342	b5 40		lda $40,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.2344	29 01		and #$01			and 	#1
.2346	f0 0d		beq $2355			beq 	_I32MNoAdd
.2348	20 ae 23	jsr $23ae			jsr 	FloatAddTopTwoStack 		; if so add S[X+1] to S[X+0]
.234b	b5 62		lda $62,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.234d	10 06		bpl $2355			bpl 	_I32MNoAdd
.234f					_I32ShiftRight:
.234f	20 3b 26	jsr $263b			jsr 	FloatShiftRight 			; shift S[X] right
.2352	c8		iny				iny 								; increment shift count
.2353	80 09		bra $235e			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.2355					_I32MNoAdd:
.2355	34 63		bit $63,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.2357	70 f6		bvs $234f			bvs 	_I32ShiftRight 				; instead.
.2359	e8		inx				inx
.235a	20 31 26	jsr $2631			jsr 	FloatShiftLeft 				; shift additive S[X+1] left
.235d	ca		dex				dex
.235e					_I32MShiftUpper:
.235e	e8		inx				inx 								; shift S[X+2] right
.235f	e8		inx				inx
.2360	20 3b 26	jsr $263b			jsr 	FloatShiftRight
.2363	ca		dex				dex
.2364	ca		dex				dex
.2365	80 d1		bra $2338			bra 	_I32MLoop 					; try again.
.2367					_I32MExit:
.2367	20 6d 23	jsr $236d			jsr 	FloatCalculateSign
.236a	98		tya				tya 								; shift in A
.236b	7a		ply				ply 								; restore Y and exit
.236c	60		rts				rts
.236d					FloatCalculateSign:
.236d	b5 32		lda $32,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.236f	16 32		asl $32,x			asl 	NSStatus,x 					; shift result left
.2371	55 33		eor $33,x			eor 	NSStatus+1,x
.2373	0a		asl a				asl 	a 							; shift bit 7 into carry
.2374	76 32		ror $32,x			ror 	NSStatus,x 					; shift right into status byte.
.2376	60		rts				rts
.2377					FloatNormalise:
.2377	20 44 26	jsr $2644			jsr 	FloatIsZero 				; if zero exit
.237a	d0 07		bne $2383			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.237c	16 32		asl $32,x			asl 	NSStatus,x 					; clear the sign bit.
.237e	76 32		ror $32,x			ror 	NSStatus,x 					; (no -0)
.2380	a9 00		lda #$00			lda 	#0 							; set Z flag
.2382	60		rts				rts
.2383					_NSNormaliseOptimise:
.2383	b5 62		lda $62,x			lda 	NSMantissa3,x 				; upper byte zero ?
.2385	d0 19		bne $23a0			bne 	_NSNormaliseLoop
.2387	b5 56		lda $56,x			lda 	NSMantissa2,x 				; byte normalise
.2389	30 15		bmi $23a0			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.238b	95 62		sta $62,x			sta 	NSMantissa3,x
.238d	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.238f	95 56		sta $56,x			sta 	NSMantissa2,x
.2391	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.2393	95 4a		sta $4a,x			sta 	NSMantissa1,x
.2395	74 3e		stz $3e,x			stz 	NSMantissa0,x
.2397	b5 6e		lda $6e,x			lda 	NSExponent,x
.2399	38		sec				sec
.239a	e9 08		sbc #$08			sbc 	#8
.239c	95 6e		sta $6e,x			sta 	NSExponent,x
.239e	80 e3		bra $2383			bra 	_NSNormaliseOptimise
.23a0					_NSNormaliseLoop:
.23a0	34 62		bit $62,x			bit 	NSMantissa3,x 				; bit 30 set ?
.23a2	70 07		bvs $23ab			bvs 	_NSNExit 					; exit if so with Z flag clear
.23a4	20 31 26	jsr $2631			jsr 	FloatShiftLeft 				; shift mantissa left
.23a7	d6 6e		dec $6e,x			dec 	NSExponent,x 				; adjust exponent
.23a9	80 f5		bra $23a0			bra 	_NSNormaliseLoop
.23ab					_NSNExit:
.23ab	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.23ad	60		rts				rts
.23ae					FloatAddTopTwoStack:
.23ae	18		clc				clc
.23af	b5 3e		lda $3e,x			lda		NSMantissa0,x
.23b1	75 3f		adc $3f,x			adc 		NSMantissa0+1,x
.23b3	95 3e		sta $3e,x			sta 	NSMantissa0,x
.23b5	b5 4a		lda $4a,x			lda		NSMantissa1,x
.23b7	75 4b		adc $4b,x			adc 		NSMantissa1+1,x
.23b9	95 4a		sta $4a,x			sta 	NSMantissa1,x
.23bb	b5 56		lda $56,x			lda		NSMantissa2,x
.23bd	75 57		adc $57,x			adc 		NSMantissa2+1,x
.23bf	95 56		sta $56,x			sta 	NSMantissa2,x
.23c1	b5 62		lda $62,x			lda		NSMantissa3,x
.23c3	75 63		adc $63,x			adc 		NSMantissa3+1,x
.23c5	95 62		sta $62,x			sta 	NSMantissa3,x
.23c7	60		rts				rts
.23c8					FloatSubTopTwoStack:
.23c8	38		sec				sec
.23c9	b5 3e		lda $3e,x			lda		NSMantissa0,x
.23cb	f5 3f		sbc $3f,x			sbc 		NSMantissa0+1,x
.23cd	95 3e		sta $3e,x			sta 	NSMantissa0,x
.23cf	b5 4a		lda $4a,x			lda		NSMantissa1,x
.23d1	f5 4b		sbc $4b,x			sbc 		NSMantissa1+1,x
.23d3	95 4a		sta $4a,x			sta 	NSMantissa1,x
.23d5	b5 56		lda $56,x			lda		NSMantissa2,x
.23d7	f5 57		sbc $57,x			sbc 		NSMantissa2+1,x
.23d9	95 56		sta $56,x			sta 	NSMantissa2,x
.23db	b5 62		lda $62,x			lda		NSMantissa3,x
.23dd	f5 63		sbc $63,x			sbc 		NSMantissa3+1,x
.23df	95 62		sta $62,x			sta 	NSMantissa3,x
.23e1	60		rts				rts
.23e2					FloatInt32Add:
.23e2	b5 32		lda $32,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.23e4	55 33		eor $33,x			eor 	NSStatus+1,x
.23e6	30 04		bmi $23ec			bmi 	_DiffSigns
.23e8	20 ae 23	jsr $23ae			jsr		FloatAddTopTwoStack
.23eb	60		rts				rts
.23ec					_DiffSigns:
.23ec	20 c8 23	jsr $23c8			jsr 	FloatSubTopTwoStack 		; do a physical subtraction
.23ef	34 62		bit $62,x			bit 	NSMantissa3,x 				; result is +ve, okay
.23f1	10 07		bpl $23fa			bpl 	_AddExit
.23f3	b5 33		lda $33,x			lda 	NSStatus+1,x 				; sign is that of 11th value
.23f5	95 32		sta $32,x			sta 	NSStatus,x
.23f7	20 eb 25	jsr $25eb			jsr 	FloatNegateMantissa 		; negate the mantissa and exit
.23fa					_AddExit:
.23fa	20 44 26	jsr $2644			jsr 	FloatIsZero 				; check for -0
.23fd	d0 02		bne $2401			bne 	_AddNonZero
.23ff	74 32		stz $32,x			stz 	NSStatus,x
.2401					_AddNonZero:
.2401	60		rts				rts
=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.2402					FloatEncodeStart:
.2402	38		sec				sec
.2403	80 01		bra $2406			bra 	FloatEncodeContinue+1
.2405					FloatEncodeContinue:
.2405	18		clc				clc
.2406					FloatEncode:
.2406	08		php				php 								; save reset flag.
.2407	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.2409	f0 15		beq $2420			beq 	_ENIsOkay
.240b	c9 30		cmp #$30			cmp 	#"0"
.240d	90 04		bcc $2413			bcc 	_ENBadNumber
.240f	c9 3a		cmp #$3a			cmp 	#"9"+1
.2411	90 0d		bcc $2420			bcc 	_ENIsOkay
.2413					_ENBadNumber:
.2413	28		plp				plp 								; throw saved reset
.2414	ad 92 05	lda $0592			lda 	encodeState 				; if in decimal mode, construct final number
.2417	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.2419	d0 03		bne $241e			bne 	_ENFail
.241b	4c 98 24	jmp $2498			jmp 	_ENConstructFinal
.241e					_ENFail:
.241e	18		clc				clc 								; not allowed
.241f	60		rts				rts
.2420					_ENIsOkay:
.2420	28		plp				plp 								; are we restarting
.2421	90 15		bcc $2438			bcc 	_ENNoRestart
.2423					_ENStartEncode:
.2423	c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.2425	f0 0c		beq $2433			beq 	_ENFirstDP
.2427	29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.2429	20 24 26	jsr $2624			jsr 	FloatSetByte 				; in single byte mode.
.242c	a9 01		lda #$01			lda 	#ESTA_Low
.242e					_ENExitChange:
.242e	8d 92 05	sta $0592			sta 	encodeState 				; save new state
.2431	38		sec				sec
.2432	60		rts				rts
.2433					_ENFirstDP:
.2433	20 22 26	jsr $2622			jsr 	FloatSetZero 				; clear integer part
.2436	80 3c		bra $2474			bra 	_ESTASwitchFloat			; go straight to float and exi
.2438					_ENNoRestart:
.2438	48		pha				pha 								; save digit or DP on stack.
.2439	ad 92 05	lda $0592			lda 	encodeState 				; get current state
.243c	c9 01		cmp #$01			cmp 	#ESTA_Low
.243e	f0 09		beq $2449			beq  	_ESTALowState
.2440	c9 02		cmp #$02			cmp 	#ESTA_High
.2442	f0 26		beq $246a			beq 	_ESTAHighState
.2444	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.2446	f0 38		beq $2480			beq 	_ESTADecimalState
>2448	db						.byte 	$DB 						; causes a break in the emulator
.2449					_ESTALowState:
.2449	68		pla				pla 								; get value back
.244a	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.244c	f0 26		beq $2474			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.244e	29 0f		and #$0f			and 	#15 						; make digit
.2450	8d 93 05	sta $0593			sta 	digitTemp 					; save it.
.2453	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.2455	0a		asl a				asl 	a
.2456	0a		asl a				asl 	a
.2457	75 3e		adc $3e,x			adc 	NSMantissa0,x
.2459	0a		asl a				asl 	a
.245a	6d 93 05	adc $0593			adc 	digitTemp
.245d	95 3e		sta $3e,x			sta 	NSMantissa0,x
.245f	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.2461	90 05		bcc $2468			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.2463	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.2465	8d 92 05	sta $0592			sta 	encodeState
.2468					_ESTANoSwitch:
.2468	38		sec				sec
.2469	60		rts				rts
.246a					_ESTAHighState:
.246a	68		pla				pla 								; get value back
.246b	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.246d	f0 05		beq $2474			beq 	_ESTASwitchFloat
.246f	20 ca 24	jsr $24ca			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.2472	38		sec				sec
.2473	60		rts				rts
.2474					_ESTASwitchFloat:
.2474	9c 94 05	stz $0594			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.2477	e8		inx				inx 								; zero the decimal additive.
.2478	20 22 26	jsr $2622			jsr 	FloatSetZero
.247b	ca		dex				dex
.247c	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.247e	80 ae		bra $242e			bra 	_ENExitChange
.2480					_ESTADecimalState:
.2480	68		pla				pla 								; digit.
.2481	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 11th decimal point.
.2483	f0 99		beq $241e			beq 	_ENFail
.2485	e8		inx				inx 								; put digit into fractional part of X+1
.2486	20 ca 24	jsr $24ca			jsr 	ESTAShiftDigitIntoMantissa
.2489	ca		dex				dex
.248a	ee 94 05	inc $0594			inc 	decimalCount 				; bump the count of decimals
.248d	ad 94 05	lda $0594			lda 	decimalCount 				; too many decimal digits.
.2490	c9 0b		cmp #$0b			cmp 	#11
.2492	f0 02		beq $2496			beq 	_ESTADSFail
.2494	38		sec				sec
.2495	60		rts				rts
.2496					_ESTADSFail:
.2496	18		clc				clc
.2497	60		rts				rts
.2498					_ENConstructFinal:
.2498	ad 94 05	lda $0594			lda 	decimalCount 				; get decimal count
.249b	f0 2b		beq $24c8			beq 	_ENCFExit 					; no decimals
.249d	5a		phy				phy
.249e	0a		asl a				asl 	a 							; x 4 and CLC
.249f	0a		asl a				asl 	a
.24a0	6d 94 05	adc $0594			adc 	decimalCount
.24a3	a8		tay				tay
.24a4	b9 2f 21	lda $212f,y			lda 	FloatScalarTable-5,y 		; copy decimal scalar to X+2
.24a7	95 40		sta $40,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.24a9	b9 30 21	lda $2130,y			lda 	FloatScalarTable-5+1,y
.24ac	95 4c		sta $4c,x			sta 	NSMantissa1+2,x
.24ae	b9 31 21	lda $2131,y			lda 	FloatScalarTable-5+2,y
.24b1	95 58		sta $58,x			sta 	NSMantissa2+2,x
.24b3	b9 32 21	lda $2132,y			lda 	FloatScalarTable-5+3,y
.24b6	95 64		sta $64,x			sta 	NSMantissa3+2,x
.24b8	b9 33 21	lda $2133,y			lda 	FloatScalarTable-5+4,y
.24bb	95 70		sta $70,x			sta 	NSExponent+2,x
.24bd	74 34		stz $34,x			stz 	NSStatus+2,x 				; make +ve
.24bf	e8		inx				inx 								; multiply decimal const by decimal scalar
.24c0	e8		inx				inx
.24c1	20 e2 22	jsr $22e2			jsr 	FloatMultiply
.24c4	20 46 20	jsr $2046			jsr 	FloatAdd 					; add to integer part.
.24c7	7a		ply				ply
.24c8					_ENCFExit:
.24c8	18		clc				clc 								; reject the digit.
.24c9	60		rts				rts
.24ca					ESTAShiftDigitIntoMantissa:
.24ca	29 0f		and #$0f			and 	#15 						; save digit
.24cc	48		pha				pha
.24cd	b5 62		lda $62,x			lda 	NSMantissa3,x 				; push mantissa on stack
.24cf	48		pha				pha
.24d0	b5 56		lda $56,x			lda 	NSMantissa2,x
.24d2	48		pha				pha
.24d3	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.24d5	48		pha				pha
.24d6	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.24d8	48		pha				pha
.24d9	20 31 26	jsr $2631			jsr 	FloatShiftLeft 				; x 2
.24dc	20 31 26	jsr $2631			jsr 	FloatShiftLeft 				; x 4
.24df	18		clc				clc 								; pop mantissa and add
.24e0	68		pla				pla
.24e1	75 3e		adc $3e,x			adc 	NSMantissa0,x
.24e3	95 3e		sta $3e,x			sta 	NSMantissa0,x
.24e5	68		pla				pla
.24e6	75 4a		adc $4a,x			adc 	NSMantissa1,x
.24e8	95 4a		sta $4a,x			sta 	NSMantissa1,x
.24ea	68		pla				pla
.24eb	75 56		adc $56,x			adc 	NSMantissa2,x
.24ed	95 56		sta $56,x			sta 	NSMantissa2,x
.24ef	68		pla				pla
.24f0	75 62		adc $62,x			adc 	NSMantissa3,x
.24f2	95 62		sta $62,x			sta 	NSMantissa3,x 				; x 5
.24f4	20 31 26	jsr $2631			jsr 	FloatShiftLeft 				; x 10
.24f7	68		pla				pla 								; add digit
.24f8	18		clc				clc
.24f9	75 3e		adc $3e,x			adc 	NSMantissa0,x
.24fb	95 3e		sta $3e,x			sta 	NSMantissa0,x
.24fd	90 0a		bcc $2509			bcc 	_ESTASDExit
.24ff	f6 4a		inc $4a,x			inc 	NSMantissa1,x
.2501	d0 06		bne $2509			bne 	_ESTASDExit
.2503	f6 56		inc $56,x			inc 	NSMantissa2,x
.2505	d0 02		bne $2509			bne 	_ESTASDExit
.2507	f6 62		inc $62,x			inc 	NSMantissa3,x
.2509					_ESTASDExit:
.2509	60		rts				rts
.0592					encodeState:
>0592							.fill 	1
.0593					digitTemp:
>0593							.fill 	1
.0594					decimalCount:
>0594							.fill 	1
.250a					FloatToString:
.250a	da		phx				phx
.250b	5a		phy				phy 								; save code position
.250c	8d 95 05	sta $0595			sta 	decimalPlaces	 			; save number of DPs.
.250f	9c 96 05	stz $0596			stz 	dbOffset 					; offset into decimal buffer = start.
.2512	b5 32		lda $32,x			lda 	NSStatus,x  				; is it -ve.
.2514	10 08		bpl $251e			bpl 	_CNTSNotNegative
.2516	29 7f		and #$7f			and 	#$7F 						; make +ve
.2518	95 32		sta $32,x			sta 	NSStatus,x
.251a	a9 2d		lda #$2d			lda 	#"-"
.251c	80 02		bra $2520			bra 	_CNTMain
.251e					_CNTSNotNegative:
.251e	a9 20		lda #$20			lda 	#" "
.2520					_CNTMain:
.2520	20 82 25	jsr $2582			jsr 	WriteDecimalBuffer
.2523	b5 6e		lda $6e,x			lda 	NSExponent,x 				; check if decimal
.2525	f0 0d		beq $2534			beq 	_CNTSNotFloat
.2527	e8		inx				inx 								; round up so we don't get too many 6.999999
.2528	a9 01		lda #$01			lda 	#1
.252a	20 24 26	jsr $2624			jsr 	FloatSetByte
.252d	b5 6d		lda $6d,x			lda		NSExponent-1,x
.252f	95 6e		sta $6e,x			sta 	NSExponent,x
.2531	20 46 20	jsr $2046			jsr 	FloatAdd
.2534					_CNTSNotFloat:
.2534	20 64 25	jsr $2564			jsr 	MakePlusTwoString 			; do the integer part.
.2537	20 02 22	jsr $2202			jsr 	FloatFractionalPart 		; get the fractional part
.253a	20 77 23	jsr $2377			jsr 	FloatNormalise					; normalise , exit if zero
.253d	f0 22		beq $2561			beq 	_CNTSExit
.253f	a9 2e		lda #$2e			lda 	#"."
.2541	20 82 25	jsr $2582			jsr 	WriteDecimalBuffer 			; write decimal place
.2544					_CNTSDecimal:
.2544	ce 95 05	dec $0595			dec 	decimalPlaces 				; done all the decimals
.2547	30 18		bmi $2561			bmi 	_CNTSExit
.2549	e8		inx				inx 								; x 10.0
.254a	a9 0a		lda #$0a			lda 	#10
.254c	20 24 26	jsr $2624			jsr 	FloatSetByte
.254f	20 e2 22	jsr $22e2			jsr 	FloatMultiply
.2552	20 64 25	jsr $2564			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.2555	20 02 22	jsr $2202			jsr 	FloatFractionalPart 		; get the fractional part
.2558	20 77 23	jsr $2377			jsr 	FloatNormalise 				; normalise it.
.255b	b5 6e		lda $6e,x			lda 	NSExponent,x 				; gone to zero, exit.
.255d	c9 d0		cmp #$d0			cmp 	#$D0 						; very small remainder, so don't bother.
.255f	b0 e3		bcs $2544			bcs 	_CNTSDecimal 				; keep going.
.2561					_CNTSExit:
.2561	7a		ply				ply
.2562	fa		plx				plx
.2563	60		rts				rts
.2564					MakePlusTwoString:
.2564	da		phx				phx
.2565	20 05 26	jsr $2605			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.2568	e8		inx				inx 								; access it
.2569	e8		inx				inx
.256a	20 5d 22	jsr $225d			jsr 	FloatIntegerPart 			; make it an integer
.256d	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.256f	20 a1 25	jsr $25a1			jsr 	ConvertInt32
.2572	a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.2574					_MPTSCopy:
.2574	bd 70 05	lda $0570,x			lda 	numberBuffer,x
.2577	20 82 25	jsr $2582			jsr 	WriteDecimalBuffer
.257a	e8		inx				inx
.257b	bd 70 05	lda $0570,x			lda 	numberBuffer,x
.257e	d0 f4		bne $2574			bne 	_MPTSCopy
.2580	fa		plx				plx
.2581	60		rts				rts
.2582					WriteDecimalBuffer:
.2582	da		phx				phx
.2583	ae 96 05	ldx $0596			ldx 	dbOffset
.2586	9d 97 05	sta $0597,x			sta 	decimalBuffer,x
.2589	9e 98 05	stz $0598,x			stz 	decimalBuffer+1,x
.258c	ee 96 05	inc $0596			inc 	dbOffset
.258f	fa		plx				plx
.2590	60		rts				rts
.0595					decimalPlaces:
>0595							.fill 	1
.0596					dbOffset:
>0596							.fill 	1
.0597					decimalBuffer:
>0597							.fill 	32
.2591					ConvertInt16:
.2591	85 3e		sta $3e				sta 	NSMantissa0 				; set up as 32 bit conversion
.2593	86 4a		stx $4a				stx 	NSMantissa1
.2595	64 56		stz $56				stz 	NSMantissa2
.2597	64 62		stz $62				stz 	NSMantissa3
.2599	64 32		stz $32				stz 	NSStatus 					; positive integer
.259b	a2 00		ldx #$00			ldx 	#0 							; stack level
.259d	a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.259f	80 00		bra $25a1			bra 	ConvertInt32
.25a1					ConvertInt32:
.25a1	5a		phy				phy
.25a2	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.25a4	24 32		bit $32				bit 	NSStatus 					; output a - if not negative.
.25a6	10 08		bpl $25b0			bpl 	_CI32NotNeg
.25a8	48		pha				pha
.25a9	a9 2d		lda #$2d			lda 	#'-'
.25ab	99 70 05	sta $0570,y			sta 	numberBuffer,y
.25ae	c8		iny				iny
.25af	68		pla				pla
.25b0					_CI32NotNeg:
.25b0	20 be 25	jsr $25be			jsr 	_CI32DivideConvert 			; recursive conversion
.25b3	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.25b5	99 70 05	sta $0570,y			sta 	numberBuffer,y
.25b8	7a		ply				ply
.25b9	a2 05		ldx #$05			ldx 	#numberBuffer >> 8 			; return address in XA
.25bb	a9 70		lda #$70			lda 	#numberBuffer & $FF
.25bd	60		rts				rts
.25be					_CI32DivideConvert:
.25be	e8		inx				inx 								; write to next slot up
.25bf	20 24 26	jsr $2624			jsr 	FloatSetByte 		 		; write the base out.
.25c2	ca		dex				dex
.25c3	20 b8 21	jsr $21b8			jsr 	Int32Divide 				; divide
.25c6	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; save remainder
.25c8	48		pha				pha
.25c9	20 a7 21	jsr $21a7			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.25cc	20 44 26	jsr $2644			jsr 	FloatIsZero 				; is it zero ?
.25cf	f0 05		beq $25d6			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.25d1	b5 3f		lda $3f,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.25d3	20 be 25	jsr $25be			jsr 	_CI32DivideConvert 			; and recusrively call.
.25d6					_CI32NoRecurse:
.25d6	68		pla				pla 								; remainder
.25d7	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.25d9	90 02		bcc $25dd			bcc 	_CI32NotHex
.25db	69 26		adc #$26			adc 	#6+32
.25dd					_CI32NotHex:
.25dd	69 30		adc #$30			adc 	#48
.25df	99 70 05	sta $0570,y			sta 	numberBuffer,y 				; write out and exit
.25e2	c8		iny				iny
.25e3	60		rts				rts
.25e4					FloatNegate:
.25e4	b5 32		lda $32,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.25e6	49 80		eor #$80			eor 	#$80  						; toggle the negative flag
.25e8	95 32		sta $32,x			sta 	NSStatus,x
.25ea	60		rts				rts
.25eb					FloatNegateMantissa:
.25eb	38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.25ec	a9 00		lda #$00			lda 	#0
.25ee	f5 3e		sbc $3e,x			sbc 	NSMantissa0,x
.25f0	95 3e		sta $3e,x			sta 	NSMantissa0,x
.25f2	a9 00		lda #$00			lda 	#0
.25f4	f5 4a		sbc $4a,x			sbc 	NSMantissa1,x
.25f6	95 4a		sta $4a,x			sta 	NSMantissa1,x
.25f8	a9 00		lda #$00			lda 	#0
.25fa	f5 56		sbc $56,x			sbc 	NSMantissa2,x
.25fc	95 56		sta $56,x			sta 	NSMantissa2,x
.25fe	a9 00		lda #$00			lda 	#0
.2600	f5 62		sbc $62,x			sbc 	NSMantissa3,x
.2602	95 62		sta $62,x			sta 	NSMantissa3,x
.2604	60		rts				rts
.2605					FloatShiftUpTwo:
.2605	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.2607	95 40		sta $40,x			sta 	NSMantissa0+2,x
.2609	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.260b	95 4c		sta $4c,x			sta 	NSMantissa1+2,x
.260d	b5 56		lda $56,x			lda 	NSMantissa2,x
.260f	95 58		sta $58,x			sta 	NSMantissa2+2,x
.2611	b5 62		lda $62,x			lda 	NSMantissa3,x
.2613	95 64		sta $64,x			sta 	NSMantissa3+2,x
.2615	b5 6e		lda $6e,x			lda 	NSExponent,x
.2617	95 70		sta $70,x			sta 	NSExponent+2,x
.2619	b5 32		lda $32,x			lda 	NSStatus,x
.261b	95 34		sta $34,x			sta 	NSStatus+2,x
.261d	60		rts				rts
.261e					FloatSetZeroMantissaOnly:
.261e	74 3e		stz $3e,x			stz 	NSMantissa0,x
.2620	80 08		bra $262a			bra 	FloatZero13
.2622					FloatSetZero:
.2622	a9 00		lda #$00			lda 	#0
.2624					FloatSetByte:
.2624	74 6e		stz $6e,x			stz 	NSExponent,x 				; zero exponent, as +ve integer value.
.2626					FloatSetMantissa:
.2626	95 3e		sta $3e,x			sta 	NSMantissa0,x 				; zero mantissa
.2628	74 32		stz $32,x			stz 	NSStatus,x
.262a					FloatZero13:
.262a	74 4a		stz $4a,x			stz 	NSMantissa1,x
.262c	74 56		stz $56,x			stz 	NSMantissa2,x
.262e	74 62		stz $62,x			stz 	NSMantissa3,x
.2630	60		rts				rts
.2631					FloatShiftLeft:
.2631	18		clc				clc
.2632					FloatRotateLeft:
.2632	36 3e		rol $3e,x			rol 	NSMantissa0,x
.2634	36 4a		rol $4a,x			rol		NSMantissa1,x
.2636	36 56		rol $56,x			rol		NSMantissa2,x
.2638	36 62		rol $62,x			rol		NSMantissa3,x
.263a	60		rts				rts
.263b					FloatShiftRight:
.263b	56 62		lsr $62,x			lsr 	NSMantissa3,x
.263d	76 56		ror $56,x			ror		NSMantissa2,x
.263f	76 4a		ror $4a,x			ror		NSMantissa1,x
.2641	76 3e		ror $3e,x			ror		NSMantissa0,x
.2643	60		rts				rts
.2644					FloatIsZero:
.2644	b5 62		lda $62,x			lda 	NSMantissa3,x
.2646	15 56		ora $56,x			ora		NSMantissa2,x
.2648	15 4a		ora $4a,x			ora		NSMantissa1,x
.264a	15 3e		ora $3e,x			ora		NSMantissa0,x
.264c	60		rts				rts

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/polynomials.library

.264d					FloatArcTan:
.264d	20 77 23	jsr $2377			jsr 	FloatNormalise 					; normalise x
.2650	b5 32		lda $32,x			lda 	NSStatus,x 						; save sign, make absolute
.2652	48		pha				pha
.2653	74 32		stz $32,x			stz 	NSStatus,x
.2655	b5 6e		lda $6e,x			lda 	NSExponent,x 					; $40000000 ^ $E2 is 1.0
.2657	c9 e2		cmp #$e2			cmp 	#$E2
.2659	90 25		bcc $2680			bcc 	_UANoFixup
.265b	8a		txa				txa 									; value in +1
.265c	a8		tay				tay
.265d	c8		iny				iny
.265e	20 06 28	jsr $2806			jsr 	CopyFloatXY
.2661	a9 01		lda #$01			lda 	#1 								; 1.0 in +0
.2663	20 24 26	jsr $2624			jsr 	FloatSetByte
.2666	e8		inx				inx
.2667	20 6b 21	jsr $216b			jsr 	FloatDivide
.266a	b0 21		bcs $268d			bcs 	_FATError
.266c	20 90 26	jsr $2690			jsr 	CoreAtn 						; calculate the root
.266f	20 fb 27	jsr $27fb			jsr 	CompletePolynomial
.2672	20 e4 25	jsr $25e4			jsr 	FloatNegate 					; make -ve
.2675	a9 05		lda #$05			lda 	#Const_PiDiv2-Const_Base
.2677	20 52 28	jsr $2852			jsr 	LoadConstant
.267a	e8		inx				inx
.267b	20 46 20	jsr $2046			jsr 	FloatAdd
.267e	80 06		bra $2686			bra 	_UAComplete
.2680					_UANoFixup:
.2680	20 90 26	jsr $2690			jsr 	CoreAtn
.2683	20 fb 27	jsr $27fb			jsr 	CompletePolynomial
.2686					_UAComplete:
.2686	68		pla				pla 									; apply the result.
.2687	55 32		eor $32,x			eor 	NSStatus,x
.2689	95 32		sta $32,x			sta 	NSStatus,x
.268b	18		clc				clc
.268c	60		rts				rts
.268d					_FATError:
.268d	68		pla				pla
.268e	38		sec				sec
.268f	60		rts				rts
.2690					CoreAtn:
.2690	a9 fe		lda #$fe			lda 	#AtnCoefficients & $FF
.2692	a0 26		ldy #$26			ldy 	#AtnCoefficients >> 8
.2694	4c 4f 29	jmp $294f			jmp 	CorePolySquared
.2697					ExpCoefficients:
>2697	07					.byte	7
>2698	2b 1f 2c 5a				.dword	$5a2c1f2b ; 2.1498763701e-05
>269c	d2					.byte	$d2
>269d	8e 59 3f 4b				.dword	$4b3f598e ; 0.00014352314037
>26a1	d5					.byte	$d5
>26a2	c3 71 f7 57				.dword	$57f771c3 ; 0.0013422634825
>26a6	d8					.byte	$d8
>26a7	15 0e c2 4e				.dword	$4ec20e15 ; 0.0096140170135
>26ab	db					.byte	$db
>26ac	05 ac ac 71				.dword	$71acac05 ; 0.05550512686
>26b0	dd					.byte	$dd
>26b1	e3 f3 fe 7a				.dword	$7afef3e3 ; 0.2402263846
>26b5	df					.byte	$df
>26b6	08 0c b9 58				.dword	$58b90c08 ; 0.69314718618
>26ba	e1					.byte	$e1
>26bb	00 00 00 40				.dword	$40000000 ; 1.0
>26bf	e2					.byte	$e2
.26c0					SinCoefficients:
>26c0	06					.byte	6
>26c1	8d 16 0d f3				.dword	$f30d168d ; -14.381390672
>26c5	e5					.byte	$e5
>26c6	fc fd 03 54				.dword	$5403fdfc ; 42.007797122
>26ca	e7					.byte	$e7
>26cb	81 44 b4 cc				.dword	$ccb44481 ; -76.704170257
>26cf	e8					.byte	$e8
>26d0	f1 ef 9a 51				.dword	$519aeff1 ; 81.605223686
>26d4	e8					.byte	$e8
>26d5	94 f3 ae d2				.dword	$d2aef394 ; -41.341702104
>26d9	e7					.byte	$e7
>26da	51 ed 87 64				.dword	$6487ed51 ; 6.2831853069
>26de	e4					.byte	$e4
>26df	00 00 00 00				.dword	$00000000 ; 0.0
>26e3	00					.byte	$00
.26e4					LogCoefficients:
>26e4	04					.byte	4
>26e5	bd 65 2b 6f				.dword	$6f2b65bd ; 0.43425594189
>26e9	e0					.byte	$e0
>26ea	b2 85 cd 49				.dword	$49cd85b2 ; 0.57658454124
>26ee	e1					.byte	$e1
>26ef	8b 49 1c 7b				.dword	$7b1c498b ; 0.96180075919
>26f3	e1					.byte	$e1
>26f4	90 1d 55 5c				.dword	$5c551d90 ; 2.8853900731
>26f8	e3					.byte	$e3
>26f9	00 00 00 c0				.dword	$c0000000 ; -0.5
>26fd	e1					.byte	$e1
.26fe					AtnCoefficients:
>26fe	0c					.byte	12
>26ff	ea de c1 d9				.dword	$d9c1deea ; -0.00068479391189
>2703	d7					.byte	$d7
>2704	7a 53 7a 4f				.dword	$4f7a537a ; 0.0048509421558
>2708	da					.byte	$da
>2709	08 58 fe c1				.dword	$c1fe5808 ; -0.016111701843
>270d	dc					.byte	$dc
>270e	e5 b3 0f 46				.dword	$460fb3e5 ; 0.034209638048
>2712	dd					.byte	$dd
>2713	e1 e5 29 ef				.dword	$ef29e5e1 ; -0.054279132761
>2717	dd					.byte	$dd
>2718	26 38 32 4a				.dword	$4a323826 ; 0.07245719654
>271c	de					.byte	$de
>271d	bd 28 f5 db				.dword	$dbf528bd ; -0.089802395378
>2721	de					.byte	$de
>2722	3f 44 98 71				.dword	$7198443f ; 0.11093241343
>2726	de					.byte	$de
>2727	9d 4c 22 c9				.dword	$c9224c9d ; -0.14283980767
>272b	df					.byte	$df
>272c	e3 48 66 66				.dword	$666648e3 ; 0.19999912049
>2730	df					.byte	$df
>2731	0a 55 55 d5				.dword	$d555550a ; -0.33333331568
>2735	e0					.byte	$e0
>2736	00 00 00 40				.dword	$40000000 ; 1.0
>273a	e2					.byte	$e2
>273b	00 00 00 00				.dword	$00000000 ; 0.0
>273f	00					.byte	$00
.2740					Const_Base:
.2740					Const_1Div2Pi:
>2740	b7 c1 7c 51				.dword	$517cc1b7 ; 0.15915494
>2744	df					.byte	$df
.2745					Const_PiDiv2:
>2745	51 ed 87 64				.dword	$6487ed51 ; 1.57079633
>2749	e2					.byte	$e2
.274a					Const_Log2_e:
>274a	95 1d 55 5c				.dword	$5c551d95 ; 1.44269504
>274e	e2					.byte	$e2
.274f					Const_sqrt_2:
>274f	9a 79 82 5a				.dword	$5a82799a ; 1.41421356
>2753	e2					.byte	$e2
.2754					Const_sqrt_half:
>2754	9a 79 82 5a				.dword	$5a82799a ; 0.70710678
>2758	e1					.byte	$e1
.2759					Const_pi:
>2759	51 ed 87 64				.dword	$6487ed51 ; 3.14159265
>275d	e3					.byte	$e3
.275e					Const_half:
>275e	00 00 00 40				.dword	$40000000 ; 0.50000000
>2762	e1					.byte	$e1
.2763					Const_ln_e:
>2763	fc 0b b9 58				.dword	$58b90bfc ; 0.69314718
>2767	e1					.byte	$e1
.2768					FloatCosine:
.2768	a9 05		lda #$05			lda 	#Const_PiDiv2-Const_Base
.276a	20 52 28	jsr $2852			jsr 	LoadConstant
.276d	e8		inx				inx
.276e	20 46 20	jsr $2046			jsr 	FloatAdd
.2771	4c 08 29	jmp $2908			jmp 	FloatSine
.2774					FloatExponent:
.2774	a9 0a		lda #$0a			lda 	#Const_Log2_e-Const_Base
.2776	20 52 28	jsr $2852			jsr 	LoadConstant
.2779	e8		inx				inx
.277a	20 e2 22	jsr $22e2			jsr 	FloatMultiply
.277d	20 bf 27	jsr $27bf			jsr 	_UECopy01 				; copy 0 to 1, get integer part to 1
.2780	e8		inx				inx
.2781	20 5d 22	jsr $225d			jsr 	FloatIntegerPart
.2784	ca		dex				dex
.2785	b5 4b		lda $4b,x			lda 	NSMantissa1+1,x
.2787	15 57		ora $57,x			ora 	NSMantissa2+1,x
.2789	15 63		ora $63,x			ora 	NSMantissa3+1,x
.278b	d0 38		bne $27c5			bne 	_UERangeError
.278d	b5 3f		lda $3f,x			lda 	NSMantissa0+1,x 		; push integer part on stack.
.278f	c9 40		cmp #$40			cmp 	#64
.2791	b0 32		bcs $27c5			bcs 	_UERangeError
.2793	48		pha				pha
.2794	b5 32		lda $32,x			lda 	NSStatus,x 				; push sign
.2796	48		pha				pha
.2797	20 02 22	jsr $2202			jsr 	FloatFractionalPart		; copy 0 to 1, get fractional part to 0
.279a	68		pla				pla
.279b	10 14		bpl $27b1			bpl 	_UEPositive
.279d	e8		inx				inx 							; 1-x
.279e	a9 01		lda #$01			lda 	#1
.27a0	20 24 26	jsr $2624			jsr 	FloatSetByte
.27a3	ca		dex				dex
.27a4	20 e4 25	jsr $25e4			jsr 	FloatNegate
.27a7	e8		inx				inx
.27a8	20 46 20	jsr $2046			jsr 	FloatAdd
.27ab	68		pla				pla 							; integer part +1 and negated.
.27ac	1a		inc a				inc 	a
.27ad	49 ff		eor #$ff			eor 	#$FF
.27af	1a		inc a				inc 	a
.27b0	48		pha				pha
.27b1					_UEPositive:
.27b1	20 c7 27	jsr $27c7			jsr 	CoreExponent
.27b4	20 fb 27	jsr $27fb			jsr 	CompletePolynomial
.27b7	68		pla				pla
.27b8	18		clc				clc
.27b9	75 6e		adc $6e,x			adc 	NSExponent,x
.27bb	95 6e		sta $6e,x			sta 	NSExponent,x
.27bd	18		clc				clc
.27be	60		rts				rts
.27bf					_UECopy01:
.27bf	8a		txa				txa
.27c0	a8		tay				tay
.27c1	c8		iny				iny
.27c2	4c 06 28	jmp $2806			jmp 	CopyFloatXY
.27c5					_UERangeError:
.27c5	38		sec				sec
.27c6	60		rts				rts
.27c7					CoreExponent:
.27c7	a9 97		lda #$97			lda 	#ExpCoefficients & $FF
.27c9	a0 26		ldy #$26			ldy 	#ExpCoefficients >> 8
.27cb	20 cf 27	jsr $27cf			jsr 	CalculateHornerPolynomial
.27ce	60		rts				rts
.27cf					CalculateHornerPolynomial:
.27cf	85 2c		sta $2c				sta 	zTemp0 						; save poly data from YA
.27d1	84 2d		sty $2d				sty 	zTemp0+1
.27d3	9c b7 05	stz $05b7			stz 	coefficientCount 			; zero the count.
.27d6	8e b8 05	stx $05b8			stx 	xValueSlot 					; save xValue slot.
.27d9	e8		inx				inx 								; set the count to zero.
.27da	20 22 26	jsr $2622			jsr 	FloatSetZero
.27dd					_CHPLoop:
.27dd	8a		txa				txa 								; copy X-1 to X+1
.27de	a8		tay				tay
.27df	ca		dex				dex
.27e0	c8		iny				iny
.27e1	20 06 28	jsr $2806			jsr 	CopyFloatXY 				; e.g. stack is <current> <x>
.27e4	e8		inx				inx
.27e5	e8		inx				inx
.27e6	20 e2 22	jsr $22e2			jsr 	FloatMultiply 				; times current by X
.27e9	e8		inx				inx
.27ea	20 25 28	jsr $2825			jsr 	GetCoefficient 				; coefficient into X+1
.27ed	20 46 20	jsr $2046			jsr 	FloatAdd 					; and add
.27f0	ee b7 05	inc $05b7			inc 	coefficientCount
.27f3	ad b7 05	lda $05b7			lda 	coefficientCount
.27f6	d2 2c		cmp ($2c)			cmp 	(zTemp0)
.27f8	d0 e3		bne $27dd			bne 	_CHPLoop
.27fa	60		rts				rts
.27fb					CompletePolynomial:
.27fb	20 e2 22	jsr $22e2			jsr 	FloatMultiply
.27fe	e8		inx				inx 								; get the last value
.27ff	20 25 28	jsr $2825			jsr 	GetCoefficient
.2802	20 46 20	jsr $2046			jsr 	FloatAdd 					; and add it
.2805	60		rts				rts
.2806					CopyFloatXY:
.2806	b5 6e		lda $6e,x			lda 	NSExponent,x
.2808	99 6e 00	sta $006e,y			sta 	NSExponent,y
.280b	b5 32		lda $32,x			lda 	NSStatus,x
.280d	99 32 00	sta $0032,y			sta 	NSStatus,y
.2810	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.2812	99 3e 00	sta $003e,y			sta 	NSMantissa0,y
.2815	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.2817	99 4a 00	sta $004a,y			sta 	NSMantissa1,y
.281a	b5 56		lda $56,x			lda 	NSMantissa2,x
.281c	99 56 00	sta $0056,y			sta 	NSMantissa2,y
.281f	b5 62		lda $62,x			lda 	NSMantissa3,x
.2821	99 62 00	sta $0062,y			sta 	NSMantissa3,y
.2824	60		rts				rts
.2825					GetCoefficient:
.2825	5a		phy				phy
.2826	ad b7 05	lda $05b7			lda 	coefficientCount 			; 5 per block
.2829	0a		asl a				asl 	a
.282a	0a		asl a				asl 	a
.282b	38		sec				sec 								; +1 for count
.282c	6d b7 05	adc $05b7			adc 	coefficientCount
.282f	a8		tay				tay
.2830	b1 2c		lda ($2c),y			lda 	(zTemp0),y 					; copy mantissa
.2832	95 3e		sta $3e,x			sta 	NSMantissa0,x
.2834	c8		iny				iny
.2835	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.2837	95 4a		sta $4a,x			sta 	NSMantissa1,x
.2839	c8		iny				iny
.283a	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.283c	95 56		sta $56,x			sta 	NSMantissa2,x
.283e	c8		iny				iny
.283f	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.2841	48		pha				pha
.2842	29 7f		and #$7f			and 	#$7F 						; clear sign bit.
.2844	95 62		sta $62,x			sta 	NSMantissa3,x
.2846	c8		iny				iny
.2847	68		pla				pla
.2848	29 80		and #$80			and 	#$80
.284a	95 32		sta $32,x			sta 	NSStatus,x 					; put in status
.284c	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.284e	95 6e		sta $6e,x			sta 	NSExponent,x
.2850	7a		ply				ply
.2851	60		rts				rts
.05b7					coefficientCount:
>05b7							.fill 	1
.05b8					xValueSlot:
>05b8							.fill 	1
.2852					LoadConstant:
.2852	5a		phy				phy
.2853	a8		tay				tay
.2854	b9 40 27	lda $2740,y			lda 	Const_Base+0,y
.2857	95 3f		sta $3f,x			sta 	NSMantissa0+1,x
.2859	b9 41 27	lda $2741,y			lda 	Const_Base+1,y
.285c	95 4b		sta $4b,x			sta 	NSMantissa1+1,x
.285e	b9 42 27	lda $2742,y			lda 	Const_Base+2,y
.2861	95 57		sta $57,x			sta 	NSMantissa2+1,x
.2863	b9 43 27	lda $2743,y			lda 	Const_Base+3,y
.2866	48		pha				pha
.2867	29 7f		and #$7f			and 	#$7F
.2869	95 63		sta $63,x			sta 	NSMantissa3+1,x
.286b	68		pla				pla
.286c	29 80		and #$80			and 	#$80
.286e	95 33		sta $33,x			sta 	NSStatus+1,x
.2870	b9 44 27	lda $2744,y			lda 	Const_Base+4,y
.2873	95 6f		sta $6f,x			sta 	NSExponent+1,x
.2875	7a		ply				ply
.2876	60		rts				rts
.2877					FloatLogarithm:
.2877	b5 32		lda $32,x			lda 	NSStatus,x 					; check > 0
.2879	30 5f		bmi $28da			bmi 	_ULRange
.287b	20 44 26	jsr $2644			jsr 	FloatIsZero
.287e	f0 5a		beq $28da			beq 	_ULRange
.2880	20 77 23	jsr $2377			jsr 	FloatNormalise 				; put into FP mode.
.2883	b5 6e		lda $6e,x			lda 	NSExponent,x 				; get power
.2885	48		pha				pha
.2886	a9 e1		lda #$e1			lda 	#(-31) & $FF 				; force into range 0.5 -> 1
.2888	95 6e		sta $6e,x			sta 	NSExponent,x
.288a	a9 14		lda #$14			lda 	#Const_sqrt_half-Const_Base
.288c	20 52 28	jsr $2852			jsr 	LoadConstant
.288f	e8		inx				inx
.2890	20 46 20	jsr $2046			jsr 	FloatAdd
.2893	8a		txa				txa 								; divide into sqrt 2.0
.2894	a8		tay				tay
.2895	c8		iny				iny
.2896	20 06 28	jsr $2806			jsr 	CopyFloatXY
.2899	ca		dex				dex
.289a	a9 0f		lda #$0f			lda 	#Const_sqrt_2-Const_Base
.289c	20 52 28	jsr $2852			jsr 	LoadConstant
.289f	e8		inx				inx
.28a0	e8		inx				inx
.28a1	20 6b 21	jsr $216b			jsr 	FloatDivide 				; if zero, error.
.28a4	b0 33		bcs $28d9			bcs 	_ULRangePla
.28a6	20 e4 25	jsr $25e4			jsr 	FloatNegate 				; subtract from 1
.28a9	e8		inx				inx
.28aa	a9 01		lda #$01			lda 	#1
.28ac	20 24 26	jsr $2624			jsr 	FloatSetByte
.28af	20 46 20	jsr $2046			jsr 	FloatAdd
.28b2	20 dc 28	jsr $28dc			jsr 	CoreLog
.28b5	20 fb 27	jsr $27fb			jsr 	CompletePolynomial
.28b8	68		pla				pla 								; add exponent
.28b9	18		clc				clc
.28ba	69 1f		adc #$1f			adc 	#31 						; fix up
.28bc	48		pha				pha
.28bd	10 03		bpl $28c2			bpl 	_LogNotNeg
.28bf	49 ff		eor #$ff			eor 	#$FF
.28c1	1a		inc a				inc 	a
.28c2					_LogNotNeg:
.28c2	e8		inx				inx 								; set byte and sign.
.28c3	20 24 26	jsr $2624			jsr 	FloatSetByte
.28c6	68		pla				pla
.28c7	29 80		and #$80			and 	#$80
.28c9	95 32		sta $32,x			sta 	NSStatus,x
.28cb	20 46 20	jsr $2046			jsr 	FloatAdd
.28ce	a9 23		lda #$23			lda 	#Const_ln_e-Const_Base
.28d0	20 52 28	jsr $2852			jsr 	LoadConstant
.28d3	e8		inx				inx
.28d4	20 e2 22	jsr $22e2			jsr 	FloatMultiply
.28d7	18		clc				clc
.28d8	60		rts				rts
.28d9					_ULRangePla:
.28d9	68		pla				pla
.28da					_ULRange:
.28da	38		sec				sec
.28db	60		rts				rts
.28dc					CoreLog:
.28dc	a9 e4		lda #$e4			lda 	#LogCoefficients & $FF
.28de	a0 26		ldy #$26			ldy 	#LogCoefficients >> 8
.28e0	4c 4f 29	jmp $294f			jmp 	CorePolySquared
.28e3					FloatPI:
.28e3	a9 19		lda #$19			lda 	#Const_pi-Const_Base
.28e5	20 52 28	jsr $2852			jsr 	LoadConstant
.28e8	e8		inx				inx
.28e9	18		clc				clc
.28ea	60		rts				rts
.28eb					FloatPower:
.28eb	ca		dex				dex
.28ec	8a		txa				txa 							; copy 0 to 2, so we can process it
.28ed	a8		tay				tay
.28ee	c8		iny				iny
.28ef	c8		iny				iny
.28f0	20 06 28	jsr $2806			jsr 	CopyFloatXY
.28f3	e8		inx				inx 							; 2 = Log(0)
.28f4	e8		inx				inx
.28f5	20 77 28	jsr $2877			jsr 	FloatLogarithm
.28f8	b0 0d		bcs $2907			bcs 	_FPWExit
.28fa	20 e2 22	jsr $22e2			jsr 	FloatMultiply			; Multiply by original 1, into 1.
.28fd	8a		txa				txa 							; copy to slot 0
.28fe	a8		tay				tay
.28ff	88		dey				dey
.2900	20 06 28	jsr $2806			jsr 	CopyFloatXY
.2903	ca		dex				dex  							; Exponent code.
.2904	20 74 27	jsr $2774			jsr 	FloatExponent
.2907					_FPWExit:
.2907	60		rts				rts
.2908					FloatSine:
.2908	b5 32		lda $32,x			lda 	NSStatus,x 					; save sign
.290a	48		pha				pha
.290b	74 32		stz $32,x			stz 	NSStatus,x 					; make +ve
.290d	a9 00		lda #$00			lda 	#Const_1Div2Pi-Const_Base
.290f	20 52 28	jsr $2852			jsr 	LoadConstant
.2912	e8		inx				inx
.2913	20 e2 22	jsr $22e2			jsr 	FloatMultiply
.2916	20 02 22	jsr $2202			jsr 	FloatFractionalPart 		; take the fractional part
.2919	b5 6e		lda $6e,x			lda 	NSExponent,x 				; check exponent
.291b	c9 e0		cmp #$e0			cmp 	#$E0 						; < $E0 exponent : 0-0.25
.291d	90 1f		bcc $293e			bcc 	_USProcessExit
.291f	f0 06		beq $2927			beq 	_USSubtractFromHalf 		; = $E0 exponent : 0.25-0.5
.2921	b5 62		lda $62,x			lda 	NSMantissa3,x 				; if > 0.75 which is $60000000:$E1
.2923	c9 60		cmp #$60			cmp 	#$60
.2925	b0 0e		bcs $2935			bcs 	_USSubtractOne
.2927					_USSubtractFromHalf:
.2927	a9 1e		lda #$1e			lda 	#Const_half-Const_Base
.2929	20 52 28	jsr $2852			jsr 	LoadConstant
.292c	e8		inx				inx
.292d	20 40 20	jsr $2040			jsr 	FloatSubtract
.2930	20 e4 25	jsr $25e4			jsr 	FloatNegate 				; then negate it
.2933	80 09		bra $293e			bra 	_USProcessExit 				; and exit
.2935					_USSubtractOne:
.2935	e8		inx				inx
.2936	a9 01		lda #$01			lda 	#1
.2938	20 24 26	jsr $2624			jsr 	FloatSetByte
.293b	20 40 20	jsr $2040			jsr 	FloatSubtract
.293e					_USProcessExit:
.293e	20 4b 29	jsr $294b			jsr 	CoreSine
.2941	20 fb 27	jsr $27fb			jsr 	CompletePolynomial
.2944	68		pla				pla 								; restore sign and apply
.2945	55 32		eor $32,x			eor 	NSStatus,x
.2947	95 32		sta $32,x			sta 	NSStatus,x
.2949	18		clc				clc
.294a	60		rts				rts
.294b					CoreSine:
.294b	a9 c0		lda #$c0			lda 	#SinCoefficients & $FF
.294d	a0 26		ldy #$26			ldy 	#SinCoefficients >> 8
.294f					CorePolySquared:
.294f	48		pha				pha 								; save coefficient table
.2950	5a		phy				phy
.2951	8a		txa				txa 								; copy X to +1, +2
.2952	a8		tay				tay
.2953	c8		iny				iny
.2954	20 06 28	jsr $2806			jsr 	CopyFloatXY
.2957	c8		iny				iny
.2958	20 06 28	jsr $2806			jsr 	CopyFloatXY
.295b	e8		inx				inx 								; point to the pair and put x^2 on stack
.295c	e8		inx				inx
.295d	20 e2 22	jsr $22e2			jsr 	FloatMultiply
.2960	7a		ply				ply 								; coefficient table back.
.2961	68		pla				pla
.2962	20 cf 27	jsr $27cf			jsr 	CalculateHornerPolynomial
.2965	8a		txa				txa 								; copy back to slot #1
.2966	a8		tay				tay
.2967	88		dey				dey
.2968	20 06 28	jsr $2806			jsr	 	CopyFloatXY
.296b	ca		dex				dex 								; point at result
.296c	60		rts				rts
.296d					FloatSquareRoot:
.296d	20 77 28	jsr $2877			jsr 	FloatLogarithm
.2970	b0 06		bcs $2978			bcs 	_FSQExit
.2972	d6 6e		dec $6e,x			dec 	NSExponent,x
.2974	20 74 27	jsr $2774			jsr 	FloatExponent
.2977	18		clc				clc
.2978					_FSQExit:
.2978	60		rts				rts
.2979					FloatTangent:
.2979	da		phx				phx
.297a	8a		txa				txa 								; sin -> +1
.297b	a8		tay				tay
.297c	c8		iny				iny
.297d	20 06 28	jsr $2806			jsr 	CopyFloatXY
.2980	e8		inx				inx
.2981	20 08 29	jsr $2908			jsr 	FloatSine
.2984	ca		dex				dex
.2985	8a		txa				txa 								; cos -> +2
.2986	a8		tay				tay
.2987	c8		iny				iny
.2988	c8		iny				iny
.2989	20 06 28	jsr $2806			jsr 	CopyFloatXY
.298c	e8		inx				inx
.298d	e8		inx				inx
.298e	20 68 27	jsr $2768			jsr 	FloatCosine
.2991	20 6b 21	jsr $216b			jsr 	FloatDivide 				; calculate sin/cos
.2994	b0 07		bcs $299d			bcs 	_FTExit 					; divide by zero
.2996	8a		txa				txa 								; copy result down.
.2997	a8		tay				tay
.2998	88		dey				dey
.2999	20 06 28	jsr $2806			jsr 	CopyFloatXY
.299c	18		clc				clc
.299d					_FTExit:
.299d	fa		plx				plx
.299e	60		rts				rts

;******  Processing input file: testing/testend.asm

=$2a00							nextPage = (* + $FF) & $FF00 		; so I can include with that f*****g header.
.29fe					ObjectCodePreHeader:
>29fe	00 a0 d4 00 00 a6 ce 0e				.binary "code/code.bin"
>2a06	48 45 4c 4c 4f 2c 20 57 4f 52 4c 44 20 21 b1 0d
>2a16	92 a6 ca 91 c4 ff
=10752					ObjectCode = ObjectCodePreHeader+2 			; so the code is at XX00

;******  End of listing
