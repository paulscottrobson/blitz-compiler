
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass -c -Wall -o build/code.prg -L build/code.lst -l build/code.lbl testing/testing.asm /home/paulr/Projects/blitz-compiler/documents/../bin/runtime.library /home/paulr/Projects/blitz-compiler/documents/../bin/common.library /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library /home/paulr/Projects/blitz-compiler/documents/../bin/polynomials.library testing/testend.asm
; Sat Oct  7 12:22:28 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: testing/testing.asm

.1000					WrapperBoot:
.1000	a9 32		lda #$32			lda 	#ObjectCode >> 8 			; address of object code to run.
.1002	a2 81		ldx #$81			ldx 	#$81 						; first page of allocatable memory
.1004	a0 9f		ldy #$9f			ldy 	#$9F 						; byte after end of last page.
.1006	4c 09 10	jmp $1009			jmp 	StartRuntime

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/runtime.library

.0022					zsTemp:
>0022							.fill 	2
.0024					runtimeStackPtr:
>0024							.fill 	2
.0400					stringLowMemory:
>0400							.fill 	2
.0402					stringHighMemory:
>0402							.fill 	2
=$e4					FRAME_GOSUB = $E4 							; Gosub has 4 bytes
=211					FRAME_FOR = $C0+19 							; For has 19 bytes
=$9f20					VRAMLow0 = $9F20
=$9f21					VRAMMed0 = $9F21
=$9f22					VRAMHigh0 = $9F22
=$9f23					VRAMData0 = $9F23
=$c09f					X16A_audio_init=$C09F
=$c08d					X16A_bas_fmchordstring=$C08D
=$c000					X16A_bas_fmfreq=$C000
=$c003					X16A_bas_fmnote=$C003
=$c006					X16A_bas_fmplaystring=$C006
=$c009					X16A_bas_fmvib=$C009
=$c00c					X16A_bas_playstringvoice=$C00C
=$c090					X16A_bas_psgchordstring=$C090
=$c00f					X16A_bas_psgfreq=$C00F
=$c012					X16A_bas_psgnote=$C012
=$c015					X16A_bas_psgwav=$C015
=$c018					X16A_bas_psgplaystring=$C018
=$c01b					X16A_notecon_bas2fm=$C01B
=$c01e					X16A_notecon_bas2midi=$C01E
=$c021					X16A_notecon_bas2psg=$C021
=$c024					X16A_notecon_fm2bas=$C024
=$c027					X16A_notecon_fm2midi=$C027
=$c02a					X16A_notecon_fm2psg=$C02A
=$c02d					X16A_notecon_freq2bas=$C02D
=$c030					X16A_notecon_freq2fm=$C030
=$c033					X16A_notecon_freq2midi=$C033
=$c036					X16A_notecon_freq2psg=$C036
=$c039					X16A_notecon_midi2bas=$C039
=$c03c					X16A_notecon_midi2fm=$C03C
=$c03f					X16A_notecon_midi2psg=$C03F
=$c042					X16A_notecon_psg2bas=$C042
=$c045					X16A_notecon_psg2fm=$C045
=$c048					X16A_notecon_psg2midi=$C048
=$c093					X16A_psg_getatten=$C093
=$c096					X16A_psg_getpan=$C096
=$c04b					X16A_psg_init=$C04B
=$c04e					X16A_psg_playfreq=$C04E
=$c051					X16A_psg_read=$C051
=$c054					X16A_psg_setatten=$C054
=$c057					X16A_psg_setfreq=$C057
=$c05a					X16A_psg_setpan=$C05A
=$c05d					X16A_psg_setvol=$C05D
=$c060					X16A_psg_write=$C060
=$c0a2					X16A_psg_write_fast=$C0A2
=$c099					X16A_ym_getatten=$C099
=$c09c					X16A_ym_getpan=$C09C
=$c063					X16A_ym_init=$C063
=$c066					X16A_ym_loaddefpatches=$C066
=$c069					X16A_ym_loadpatch=$C069
=$c06c					X16A_ym_loadpatchlfn=$C06C
=$c06f					X16A_ym_playdrum=$C06F
=$c072					X16A_ym_playnote=$C072
=$c075					X16A_ym_setatten=$C075
=$c078					X16A_ym_setdrum=$C078
=$c07b					X16A_ym_setnote=$C07B
=$c07e					X16A_ym_setpan=$C07E
=$c081					X16A_ym_read=$C081
=$c084					X16A_ym_release=$C084
=$c087					X16A_ym_trigger=$C087
=$c08a					X16A_ym_write=$C08A
=2					X16_r0 = 2
=4					X16_r1 = 4
=6					X16_r2 = 6
=8					X16_r3 = 8
=10					X16_r4 = 10
=$ffa5					X16_ACPTR=$FFA5
=$ffcf					X16_BASIN=$FFCF
=$feba					X16_BSAVE=$FEBA
=$ffd2					X16_BSOUT=$FFD2
=$ffa8					X16_CIOUT=$FFA8
=$ffe7					X16_CLALL=$FFE7
=$ffc3					X16_CLOSE=$FFC3
=$ffc6					X16_CHKIN=$FFC6
=$ffc9					X16_CHKOUT=$FFC9
=$ff50					X16_clock_get_date_time=$FF50
=$ff4d					X16_clock_set_date_time=$FF4D
=$ffcf					X16_CHRIN=$FFCF
=$ffd2					X16_CHROUT=$FFD2
=$ff4a					X16_CLOSE_ALL=$FF4A
=$ffcc					X16_CLRCHN=$FFCC
=$fedb					X16_console_init=$FEDB
=$fee1					X16_console_get_char=$FEE1
=$fede					X16_console_put_char=$FEDE
=$fed8					X16_console_put_image=$FED8
=$fed5					X16_console_set_paging_message=$FED5
=$ff47					X16_enter_basic=$FF47
=$fecf					X16_entropy_get=$FECF
=$ff74					X16_fetch=$FF74
=$ff02					X16_FB_cursor_next_line=$FF02
=$feff					X16_FB_cursor_position=$FEFF
=$ff17					X16_FB_fill_pixels=$FF17
=$ff1a					X16_FB_filter_pixels=$FF1A
=$fef9					X16_FB_get_info=$FEF9
=$ff05					X16_FB_get_pixel=$FF05
=$ff08					X16_FB_get_pixels=$FF08
=$fef6					X16_FB_init=$FEF6
=$ff1d					X16_FB_move_pixels=$FF1D
=$ff11					X16_FB_set_8_pixels=$FF11
=$ff14					X16_FB_set_8_pixels_opaque=$FF14
=$fefc					X16_FB_set_palette=$FEFC
=$ff0b					X16_FB_set_pixel=$FF0B
=$ff0e					X16_FB_set_pixels=$FF0E
=$ffe4					X16_GETIN=$FFE4
=$ff23					X16_GRAPH_clear=$FF23
=$ff38					X16_GRAPH_draw_image=$FF38
=$ff2c					X16_GRAPH_draw_line=$FF2C
=$ff35					X16_GRAPH_draw_oval=$FF35
=$ff2f					X16_GRAPH_draw_rect=$FF2F
=$ff3e					X16_GRAPH_get_char_size=$FF3E
=$ff20					X16_GRAPH_init=$FF20
=$ff32					X16_GRAPH_move_rect=$FF32
=$ff41					X16_GRAPH_put_char=$FF41
=$ff29					X16_GRAPH_set_colors=$FF29
=$ff3b					X16_GRAPH_set_font=$FF3B
=$ff26					X16_GRAPH_set_window=$FF26
=$fec6					X16_i2c_read_byte=$FEC6
=$fec9					X16_i2c_write_byte=$FEC9
=$fff3					X16_IOBASE=$FFF3
=$ff6e					X16_JSRFAR=$FF6E
=$ff56					X16_joystick_get=$FF56
=$ff53					X16_joystick_scan=$FF53
=$fec0					X16_kbdbuf_get_modifiers=$FEC0
=$febd					X16_kbdbuf_peek=$FEBD
=$fec3					X16_kbdbuf_put=$FEC3
=$fed2					X16_keymap=$FED2
=$ffb1					X16_LISTEN=$FFB1
=$ff59					X16_LKUPLA=$FF59
=$ff5c					X16_LKUPSA=$FF5C
=$ffd5					X16_LOAD=$FFD5
=$ff44					X16_MACPTR=$FF44
=$ff9c					X16_MEMBOT=$FF9C
=$fee7					X16_memory_copy=$FEE7
=$feea					X16_memory_crc=$FEEA
=$feed					X16_memory_decompress=$FEED
=$fee4					X16_memory_fill=$FEE4
=$ff99					X16_MEMTOP=$FF99
=$fecc					X16_monitor=$FECC
=$ff68					X16_mouse_config=$FF68
=$ff6b					X16_mouse_get=$FF6B
=$ff71					X16_mouse_scan=$FF71
=$ffc0					X16_OPEN=$FFC0
=$ff65					X16_PFKEY=$FF65
=$fff0					X16_PLOT=$FFF0
=$ff7d					X16_PRIMM=$FF7D
=$ffde					X16_RDTIM=$FFDE
=$ffb7					X16_READST=$FFB7
=$ffd8					X16_SAVE=$FFD8
=$ffed					X16_SCREEN=$FFED
=$ff5f					X16_screen_mode=$FF5F
=$ff62					X16_screen_set_charset=$FF62
=$ff93					X16_SECOND=$FF93
=$ffba					X16_SETLFS=$FFBA
=$ff90					X16_SETMSG=$FF90
=$ffbd					X16_SETNAM=$FFBD
=$ffdb					X16_SETTIM=$FFDB
=$ffa2					X16_SETTMO=$FFA2
=$fef0					X16_sprite_set_image=$FEF0
=$fef3					X16_sprite_set_position=$FEF3
=$ff77					X16_stash=$FF77
=$ffe1					X16_STOP=$FFE1
=$ffb4					X16_TALK=$FFB4
=$ff96					X16_TKSA=$FF96
=$ffea					X16_UDTIM=$FFEA
=$ffae					X16_UNLSN=$FFAE
=$ffab					X16_UNTLK=$FFAB
=$311					USRRoutineAddress = $311
=$30c					SYS_Reg_A = $30C
=$30d					SYS_Reg_X = $30D
=$30e					SYS_Reg_Y = $30E
=$30f					SYS_Reg_S = $30F
=0					SelectRAMBank = 0
=1					SelectROMBank = 1
=$0a					X16_AudioCodeBank = $0A
.1009					StartRuntime:
.1009	8d 04 04	sta $0404			sta 	runtimeHigh 				; save address of code.
.100c	85 29		sta $29				sta 	codePtr+1 					; set pointer to code.
.100e	64 28		stz $28				stz 	codePtr
.1010	64 2a		stz $2a				stz 	codePage 					; zero current page.
.1012	8e 05 04	stx $0405			stx 	storeStartHigh 				; save from-to address.
.1015	8c 06 04	sty $0406			sty 	storeEndHigh
.1018	8e 07 04	stx $0407			stx 	variableStartPage
.101b	20 4d 12	jsr $124d			jsr 	ClearMemory 				; clear memory.
.101e	20 2f 1e	jsr $1e2f			jsr 	XRuntimeSetup 				; initialise the runtime stuff.
.1021	20 31 1b	jsr $1b31		 	jsr		SetDefaultChannel			; set default input/output channel.
.1024	20 67 1d	jsr $1d67			jsr 	RestoreCode 				; which we now call
.1027	a0 00		ldy #$00			ldy 	#0
.1029					NextCommand:
.1029	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.102b	30 5b		bmi $1088			bmi 	NXCommand 					; -if -ve command
.102d	c8		iny				iny
.102e	c9 40		cmp #$40			cmp 	#64 						; 64..127 is load and store.
.1030	90 39		bcc $106b			bcc 	PushByteA 					; 0..63 is short constants.
.1032					NXLoadStore:
.1032	c9 78		cmp #$78			cmp		#120 						; is it an indirect read/write
.1034	b0 19		bcs $104f			bcs 	NXIndirectLoadStore
.1036	4a		lsr a				lsr 	a 							; / 4, so $48 => $12,
.1037	4a		lsr a				lsr 	a
.1038	29 0e		and #$0e			and 	#$0E
.103a	da		phx				phx 								; get ready to jump
.103b	aa		tax				tax
.103c	7c 3f 10	jmp ($103f,x)			jmp 	(ReadWriteVectors,x) 		; go via the jump table.
.103f					ReadWriteVectors:
>103f	9d 1c						.word 	ReadFloatCommand			; read float
>1041	78 22						.word 	WriteFloatCommand 			; write float
>1043	d9 1c						.word 	ReadIntegerCommand 			; read integer
>1045	b4 22						.word 	WriteIntegerCommand 		; write integer
>1047	1e 1d						.word 	ReadStringCommand 			; read string
>1049	f3 22						.word 	WriteStringCommand 			; write string
>104b	1b 14						.word 	Unimplemented
>104d	1b 14						.word 	Unimplemented
.104f					NXIndirectLoadStore:
.104f	29 07		and #$07			and 	#7
.1051	0a		asl a				asl 	a
.1052	da		phx				phx
.1053	aa		tax				tax
.1054	7c 57 10	jmp ($1057,x)			jmp 	(IndirectVectors,x)
.1057					IndirectVectors:
>1057	d2 16						.word 	IndFloatRead 				; float read
>1059	e6 16						.word 	IndInt16Read 				; int16 read
>105b	fa 16						.word 	IndStringRead 				; string read
>105d	1b 14						.word 	Unimplemented
>105f	0e 17						.word 	IndFloatWrite				; float write
>1061	22 17						.word 	IndInt16Write 				; int16 write
>1063	36 17						.word 	IndStringWrite 				; string write
>1065	1b 14						.word 	Unimplemented
.1067					PushByteCommand:
.1067	fa		plx				plx
.1068	b1 28		lda ($28),y			lda 	(codePtr),y 				; get byte to write.
.106a	c8		iny				iny
.106b					PushByteA:
.106b	e8		inx				inx 								; push constant on stack
.106c	95 41		sta $41,x			sta 	NSMantissa0,x 				; save byte
.106e	74 4d		stz $4d,x			stz 	NSMantissa1,x 				; clear MSB
.1070					ClearRestWord:
.1070	74 59		stz $59,x			stz 	NSMantissa2,x 				; zero upper bytes, exponent, make iFloat32
.1072	74 65		stz $65,x			stz 	NSMantissa3,x
.1074	74 71		stz $71,x			stz 	NSExponent,x
.1076	74 35		stz $35,x			stz 	NSStatus,x
.1078	80 af		bra $1029			bra 	NextCommand
.107a					PushWordCommand:
.107a	fa		plx				plx
.107b	e8		inx				inx
.107c	b1 28		lda ($28),y			lda 	(codePtr),y 				; word to stack
.107e	c8		iny				iny
.107f	95 41		sta $41,x			sta 	NSMantissa0,x
.1081	b1 28		lda ($28),y			lda 	(codePtr),y
.1083	c8		iny				iny
.1084	95 4d		sta $4d,x			sta 	NSMantissa1,x
.1086	80 e8		bra $1070			bra 	ClearRestWord 				; handle everything else.
.1088					NXCommand:
.1088	c8		iny				iny 								; consume command.
.1089	10 03		bpl $108e			bpl 	_NXCommandNoFixUp
.108b	20 94 10	jsr $1094			jsr 	FixUpY
.108e					_NXCommandNoFixUp:
.108e	0a		asl a				asl 	a 							; shift left
.108f	da		phx				phx 								; save SP on stack
.1090	aa		tax				tax				 					; and jump indirect
.1091	7c 59 21	jmp ($2159,x)			jmp 	(VectorTable,x)
.1094					FixUpY:
.1094	48		pha				pha
.1095	98		tya				tya
.1096	18		clc				clc
.1097	65 28		adc $28				adc 	codePtr
.1099	85 28		sta $28				sta 	codePtr
.109b	90 02		bcc $109f			bcc 	_NoCPCarry
.109d	e6 29		inc $29				inc 	codePtr+1
.109f					_NoCPCarry:
.109f	a0 00		ldy #$00			ldy 	#0
.10a1	68		pla				pla
.10a2	60		rts				rts
.0404					runtimeHigh:
>0404							.fill 	1
.0405					storeStartHigh:
>0405							.fill 	1
.0406					storeEndHigh:
>0406							.fill 	1
.0407					variableStartPage:
>0407							.fill 	1
.10a3					AbsoluteTOS:
.10a3	fa		plx				plx
.10a4	74 35		stz $35,x			stz 	NSStatus,x 					; dereferenced so just clear the status byte.
.10a6	4c 29 10	jmp $1029			jmp 	NextCommand
.10a9					CommandVarSpace:
.10a9	fa		plx				plx
.10aa	b1 28		lda ($28),y			lda 	(codePtr),y					; 3 byte opcode, which is 'free' memory in variable area.
.10ac	85 26		sta $26				sta 	availableMemory
.10ae	c8		iny				iny
.10af	b1 28		lda ($28),y			lda 	(codePtr),y
.10b1	18		clc				clc
.10b2	6d 07 04	adc $0407			adc 	variableStartPage			; offset to actual address.
.10b5	85 27		sta $27				sta 	availableMemory+1
.10b7	c8		iny				iny
.10b8	4c 29 10	jmp $1029			jmp 	NextCommand
.0026					availableMemory:
>0026							.fill 	2
.10bb					BinaryAnd:
.10bb	fa		plx				plx
.10bc	38		sec				sec
.10bd	80 02		bra $10c1			bra 	AndOrCommon
.10bf					BinaryOr:
.10bf	fa		plx				plx
.10c0	18		clc				clc
.10c1					AndOrCommon:
.10c1	08		php				php 								; save AND/OR flag
.10c2	20 0d 18	jsr $180d			jsr 	GetInteger16Bit
.10c5	ca		dex				dex
.10c6	20 0d 18	jsr $180d			jsr 	GetInteger16Bit
.10c9	28		plp				plp
.10ca	90 0e		bcc $10da			bcc 	_AOCOrCode
.10cc	b5 41		lda $41,x			lda 	NSMantissa0,x 				; AND code
.10ce	35 42		and $42,x			and		NSMantissa0+1,x
.10d0	95 41		sta $41,x			sta 	NSMantissa0,x
.10d2	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.10d4	35 4e		and $4e,x			and		NSMantissa1+1,x
.10d6	95 4d		sta $4d,x			sta 	NSMantissa1,x
.10d8	80 0c		bra $10e6			bra 	_AOCComplete
.10da					_AOCOrCode:
.10da	b5 41		lda $41,x			lda 	NSMantissa0,x 				; OR code
.10dc	15 42		ora $42,x			ora		NSMantissa0+1,x
.10de	95 41		sta $41,x			sta 	NSMantissa0,x
.10e0	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.10e2	15 4e		ora $4e,x			ora		NSMantissa1+1,x
.10e4	95 4d		sta $4d,x			sta 	NSMantissa1,x
.10e6					_AOCComplete:
.10e6	74 35		stz $35,x			stz 	NSStatus,x 					; make integer ?
.10e8	34 4d		bit $4d,x			bit 	NSMantissa1,x 				; result is -ve
.10ea	10 07		bpl $10f3			bpl 	_AOCExit
.10ec	20 1d 18	jsr $181d			jsr 	Negate16Bit 				; 2's complement
.10ef	a9 80		lda #$80			lda 	#$80 						; make it -ve
.10f1	95 35		sta $35,x			sta 	NSStatus,x
.10f3					_AOCExit:
.10f3	4c 29 10	jmp $1029			jmp 	NextCommand
.10f6					ArrayConvert:
.10f6	fa		plx				plx
.10f7	5a		phy				phy
.10f8	b5 41		lda $41,x			lda 	NSMantissa0,x
.10fa	85 31		sta $31				sta 	zTemp1
.10fc	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.10fe	18		clc				clc
.10ff	6d 07 04	adc $0407			adc 	variableStartPage
.1102	85 32		sta $32				sta 	zTemp1+1
.1104	ca		dex				dex 								; count of indices to follow -> zTemp2
.1105	20 07 18	jsr $1807			jsr 	GetInteger8Bit
.1108	85 33		sta $33				sta 	zTemp2 						; subtract from stack.
.110a	8a		txa				txa
.110b	38		sec				sec
.110c	e5 33		sbc $33				sbc 	zTemp2
.110e	aa		tax				tax
.110f	da		phx				phx 								; stack points at the first index, which will be replaced.
.1110					_ACIndexLoop:
.1110	20 46 2a	jsr $2a46			jsr 	FloatIntegerPart 			; integer array index
.1113	20 0d 18	jsr $180d			jsr 	GetInteger16Bit 			; get the index => zTemp0
.1116	a0 01		ldy #$01			ldy 	#1 							; compare against the index count.
.1118	a5 2f		lda $2f				lda 	zTemp0
.111a	d2 31		cmp ($31)			cmp 	(zTemp1)
.111c	a5 30		lda $30				lda 	zTemp0+1
.111e	f1 31		sbc ($31),y			sbc 	(zTemp1),y
.1120	b0 79		bcs $119b			bcs 	_ACBadIndex 				; index error.
.1122	c6 33		dec $33				dec 	zTemp2 						; decrement count, if zero, then innermost level
.1124	f0 29		beq $114f			beq 	_ACInnerLevel
.1126	a0 02		ldy #$02			ldy 	#2 							; check sub index.
.1128	b1 31		lda ($31),y			lda 	(zTemp1),y
.112a	10 6f		bpl $119b			bpl 	_ACBadIndex
.112c	06 2f		asl $2f				asl 	zTemp0 						; double the index and add it to the base address
.112e	26 30		rol $30				rol 	zTemp0+1
.1130	18		clc				clc
.1131	a5 2f		lda $2f				lda		zTemp0
.1133	65 31		adc $31				adc 	zTemp1
.1135	85 2f		sta $2f				sta 	zTemp0
.1137	a5 30		lda $30				lda		zTemp0+1
.1139	65 32		adc $32				adc 	zTemp1+1
.113b	85 30		sta $30				sta 	zTemp0+1
.113d	a0 03		ldy #$03			ldy 	#3 							; we offset by 3 because 3 at entry, now get the address
.113f	b1 2f		lda ($2f),y			lda 	(zTemp0),y 					; into zTemp1 as a real address, not offset
.1141	85 31		sta $31				sta 	zTemp1
.1143	c8		iny				iny
.1144	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.1146	18		clc				clc
.1147	6d 07 04	adc $0407			adc 	variableStartPage
.114a	85 32		sta $32				sta 	zTemp1+1
.114c	e8		inx				inx 								; next index
.114d	80 c1		bra $1110			bra 	_ACIndexLoop
.114f					_ACInnerLevel:
.114f	a0 02		ldy #$02			ldy 	#2
.1151	b1 31		lda ($31),y			lda 	(zTemp1),y
.1153	30 46		bmi $119b			bmi 	_ACBadIndex 				; it has sub arrays, so bad index.
.1155	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16 		; check if it is an iFloat
.1157	c9 00		cmp #$00			cmp 	#NSSIFloat
.1159	d0 13		bne $116e			bne 	_ACNotFloat
.115b	a5 30		lda $30				lda 	zTemp0+1 					; double and add zTemp0 (x3)
.115d	48		pha				pha
.115e	a5 2f		lda $2f				lda 	zTemp0
.1160	06 2f		asl $2f				asl 	zTemp0 						; x 2
.1162	26 30		rol $30				rol 	zTemp0+1
.1164	18		clc				clc 								; add back x 3
.1165	65 2f		adc $2f				adc 	zTemp0
.1167	85 2f		sta $2f				sta 	zTemp0
.1169	68		pla				pla
.116a	65 30		adc $30				adc 	zTemp0+1
.116c	85 30		sta $30				sta 	zTemp0+1
.116e					_ACNotFloat:
.116e	06 2f		asl $2f				asl 	zTemp0 						; x 2 or x 6 depending.
.1170	26 30		rol $30				rol 	zTemp0+1
.1172	18		clc				clc
.1173	a5 2f		lda $2f				lda 	zTemp0
.1175	69 03		adc #$03			adc 	#3
.1177	85 2f		sta $2f				sta 	zTemp0
.1179	90 02		bcc $117d			bcc 	_ACNoCarry
.117b	e6 30		inc $30				inc 	zTemp0+1
.117d					_ACNoCarry:
.117d	fa		plx				plx 								; X points to first slot of array parameters
.117e	18		clc				clc
.117f	a5 2f		lda $2f				lda 	zTemp0
.1181	65 31		adc $31				adc 	zTemp1
.1183	95 41		sta $41,x			sta 	NSMantissa0,x
.1185	a5 30		lda $30				lda 	zTemp0+1
.1187	65 32		adc $32				adc 	zTemp1+1
.1189	38		sec				sec
.118a	ed 07 04	sbc $0407			sbc 	variableStartPage
.118d	95 4d		sta $4d,x			sta 	NSMantissa1,x
.118f	74 59		stz $59,x			stz 	NSMantissa2,x
.1191	74 65		stz $65,x			stz 	NSMantissa3,x
.1193	74 35		stz $35,x			stz 	NSStatus,x
.1195	74 71		stz $71,x			stz 	NSExponent,x
.1197	7a		ply				ply 	 							; restore code pointer
.1198	4c 29 10	jmp $1029			jmp 	NextCommand
.119b					_ACBadIndex:
.119b	4c a0 27	jmp $27a0		jmp	ErrorV_index
.119e					UnaryAsc:
.119e	fa		plx				plx
.119f	5a		phy				phy
.11a0	b5 41		lda $41,x			lda 	NSMantissa0,x 				; string address.
.11a2	85 2f		sta $2f				sta 	zTemp0
.11a4	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.11a6	85 30		sta $30				sta 	zTemp0+1
.11a8	b2 2f		lda ($2f)			lda 	(zTemp0) 					; if empty string return zero
.11aa	f0 06		beq $11b2			beq 	_UAExit
.11ac	5a		phy				phy 								; otherwise first character
.11ad	a0 01		ldy #$01			ldy 	#1
.11af	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.11b1	7a		ply				ply
.11b2					_UAExit:
.11b2	20 0d 2e	jsr $2e0d			jsr 	FloatSetByte
.11b5	7a		ply				ply
.11b6	4c 29 10	jmp $1029			jmp 	NextCommand
.11b9					CommandAssert:
.11b9	fa		plx				plx
.11ba	e0 00		cpx #$00			cpx 	#0 							; check only one element on stack
.11bc	d0 09		bne $11c7			bne 	_CAFail
.11be	20 2d 2e	jsr $2e2d			jsr 	FloatIsZero 				; is it zero ?
.11c1	f0 04		beq $11c7			beq 	_CAFail
.11c3	ca		dex				dex
.11c4	4c 29 10	jmp $1029			jmp 	NextCommand
.11c7					_CAFail:
.11c7	4c f9 26	jmp $26f9		jmp	ErrorV_assert
.11ca					X16_Audio_Parameters8_16:
.11ca	20 d0 11	jsr $11d0			jsr 	X16_Audio_Parameters8_8
.11cd	a4 4e		ldy $4e				ldy 	NSMantissa1+1
.11cf	60		rts				rts
.11d0					X16_Audio_Parameters8_8:
.11d0	a2 01		ldx #$01			ldx 	#1
.11d2	20 46 2a	jsr $2a46			jsr 	FloatIntegerPart
.11d5	ca		dex				dex
.11d6	20 46 2a	jsr $2a46			jsr 	FloatIntegerPart
.11d9	20 07 18	jsr $1807			jsr 	GetInteger8Bit
.11dc	a6 42		ldx $42				ldx 	NSMantissa0+1
.11de	a0 00		ldy #$00			ldy 	#0
.11e0	60		rts				rts
.11e1					X16_Audio_Parameters8_String:
.11e1	20 ca 11	jsr $11ca			jsr 	X16_Audio_Parameters8_16 	; get as numbers.
.11e4	da		phx				phx 								; set the voice
.11e5	5a		phy				phy
.11e6	20 6e ff	jsr $ff6e			jsr 	X16_JSRFAR
.11e9	20 0c c0	jsr $c00c			jsr 	X16A_bas_playstringvoice
>11ec	0a						.byte 	X16_AudioCodeBank
.11ed	7a		ply				ply
.11ee	fa		plx				plx
.11ef	86 2f		stx $2f				stx 	zTemp0
.11f1	84 30		sty $30				sty 	zTemp0+1
.11f3	b2 2f		lda ($2f)			lda 	(zTemp0) 					; read length
.11f5	e8		inx				inx 								; point YX to first character.
.11f6	d0 01		bne $11f9			bne 	_X16APSSkip
.11f8	c8		iny				iny
.11f9					_X16APSSkip:
.11f9	60		rts				rts
.11fa					Unary16Bin:
.11fa	fa		plx				plx
.11fb	20 0d 18	jsr $180d			jsr 	GetInteger16Bit				; 16 bit int
.11fe	a9 10		lda #$10			lda 	#16 						; allocate / set 16 bytes.
.1200	20 d8 1e	jsr $1ed8			jsr 	StringAllocTemp
.1203	a5 30		lda $30				lda 	zTemp0+1
.1205	f0 03		beq $120a			beq 	_UBNoHigh
.1207	20 12 12	jsr $1212			jsr 	_UBWriteBinary
.120a					_UBNoHigh:
.120a	a5 2f		lda $2f				lda 	zTemp0
.120c	20 12 12	jsr $1212			jsr 	_UBWriteBinary
.120f	4c 29 10	jmp $1029			jmp 	NextCommand
.1212					_UBWriteBinary:
.1212	5a		phy				phy
.1213	a0 08		ldy #$08			ldy 	#8
.1215					_UBWLoop:
.1215	0a		asl a				asl 	a
.1216	48		pha				pha
.1217	a9 00		lda #$00			lda  	#0
.1219	69 30		adc #$30			adc 	#48
.121b	20 01 1f	jsr $1f01			jsr 	StringWriteChar
.121e	68		pla				pla
.121f	88		dey				dey
.1220	d0 f3		bne $1215			bne 	_UBWLoop
.1222	7a		ply				ply
.1223	60		rts				rts
.1224					PrintCharacter:
.1224	fa		plx				plx
.1225	b5 41		lda $41,x			lda 	NSMantissa0,x
.1227	ca		dex				dex
.1228	20 35 1b	jsr $1b35			jsr 	VectorPrintCharacter
.122b	4c 29 10	jmp $1029			jmp 	NextCommand
.122e					UnaryChr:
.122e	fa		plx				plx
.122f	20 07 18	jsr $1807			jsr 	GetInteger8Bit 				; get integer to convert.
.1232	48		pha				pha 								; save it and allocate for it
.1233	a9 01		lda #$01			lda 	#1 							; 1 character
.1235	20 d8 1e	jsr $1ed8			jsr 	StringAllocTemp
.1238	a9 01		lda #$01			lda 	#1 							; length 1.
.123a	92 22		sta ($22)			sta 	(zsTemp)
.123c	68		pla				pla 								; character code makes string.
.123d	5a		phy				phy
.123e	a0 01		ldy #$01			ldy 	#1
.1240	91 22		sta ($22),y			sta 	(zsTemp),y
.1242	7a		ply				ply
.1243	4c 29 10	jmp $1029			jmp 	NextCommand
.1246					CommandClr:
.1246	fa		plx				plx
.1247	20 4d 12	jsr $124d			jsr 	ClearMemory
.124a	4c 29 10	jmp $1029			jmp 	NextCommand
.124d					ClearMemory:
.124d	ad 05 04	lda $0405			lda 	storeStartHigh 							; erase the work area
.1250	85 30		sta $30				sta 	zTemp0+1
.1252	64 2f		stz $2f				stz 	zTemp0
.1254	5a		phy				phy
.1255	a0 00		ldy #$00			ldy 	#0
.1257					_ClearLoop1:
.1257	a9 00		lda #$00			lda 	#0
.1259	91 2f		sta ($2f),y			sta 	(zTemp0),y
.125b	c8		iny				iny
.125c	d0 f9		bne $1257			bne 	_ClearLoop1
.125e	e6 30		inc $30				inc 	zTemp0+1
.1260	a5 30		lda $30				lda 	zTemp0+1
.1262	cd 06 04	cmp $0406			cmp 	storeEndHigh
.1265	d0 f0		bne $1257			bne 	_ClearLoop1
.1267	38		sec				sec 											; stack space = number of pages in total / 4
.1268	ad 06 04	lda $0406			lda 	storeEndHigh
.126b	ed 05 04	sbc $0405			sbc		storeStartHigh
.126e	4a		lsr a				lsr 	a
.126f	4a		lsr a				lsr 	a
.1270	d0 02		bne $1274			bne 	_NotEmpty 								; at least 1 !
.1272	a9 01		lda #$01			lda 	#1
.1274					_NotEmpty:
.1274	38		sec				sec 											; subtract from high to give string high memory
.1275	49 ff		eor #$ff			eor 	#$FF
.1277	6d 06 04	adc $0406			adc 	storeEndHigh
.127a	8d 03 04	sta $0403			sta 	stringHighMemory+1
.127d	9c 02 04	stz $0402			stz 	stringHighMemory
.1280	9c 68 05	stz $0568			stz 	stringInitialised 						; string system not initialised
.1283	ad 05 04	lda $0405			lda 	storeStartHigh 							; stack at end of start memory.
.1286	3a		dec a				dec 	a
.1287	85 25		sta $25				sta 	runtimeStackPtr+1
.1289	a9 ff		lda #$ff			lda 	#$FF
.128b	85 24		sta $24				sta 	runtimeStackPtr
.128d	a9 ff		lda #$ff			lda 	#$FF 									; duff marker in case we try to remove it.
.128f	92 24		sta ($24)			sta 	(runtimeStackPtr)
.1291	7a		ply				ply
.1292	60		rts				rts
.1293					CompareStrings:
.1293	fa		plx				plx
.1294	ca		dex				dex
.1295	b5 41		lda $41,x			lda 	NSMantissa0,x 				; copy strings to zTemp0 and zTemp1
.1297	85 2f		sta $2f				sta 	zTemp0
.1299	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.129b	85 30		sta $30				sta 	zTemp0+1
.129d	b5 42		lda $42,x			lda 	NSMantissa0+1,x
.129f	85 31		sta $31				sta 	zTemp1
.12a1	b5 4e		lda $4e,x			lda 	NSMantissa1+1,x
.12a3	85 32		sta $32				sta 	zTemp1+1
.12a5	da		phx				phx
.12a6	5a		phy				phy
.12a7	b2 2f		lda ($2f)			lda 	(zTemp0)					; work out number to compare
.12a9	d2 31		cmp ($31)			cmp 	(zTemp1)
.12ab	90 02		bcc $12af			bcc 	_CSNIsSmallest 				; as min(len(s1),len(s2))
.12ad	b2 31		lda ($31)			lda 	(zTemp1)
.12af					_CSNIsSmallest:
.12af	aa		tax				tax 								; count in X
.12b0	f0 0c		beq $12be			beq 	_CSNMatches 				; if zero already matches as far as we can go.
.12b2	a0 00		ldy #$00			ldy 	#0 							; start from offset 1
.12b4					_CSNCompareString:
.12b4	c8		iny				iny 								; pre increment
.12b5	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.12b7	d1 31		cmp ($31),y			cmp 	(zTemp1),y
.12b9	d0 0a		bne $12c5			bne 	_CSNDifferent 				; numbers are different.
.12bb	ca		dex				dex
.12bc	d0 f6		bne $12b4			bne 	_CSNCompareString 			; compare common characters in two strings.
.12be					_CSNMatches:
.12be	38		sec				sec
.12bf	b2 2f		lda ($2f)			lda 	(zTemp0)					; compare lengths
.12c1	f2 31		sbc ($31)			sbc 	(zTemp1)
.12c3	f0 06		beq $12cb			beq 	_CSNSExit 					; if zero, then strings match and exit.
.12c5					_CSNDifferent:
.12c5	a9 ff		lda #$ff			lda 	#$FF
.12c7	90 02		bcc $12cb			bcc 	_CSNSExit
.12c9	a9 01		lda #$01			lda 	#$01
.12cb					_CSNSExit:
.12cb	7a		ply				ply
.12cc	fa		plx				plx
.12cd	c9 00		cmp #$00			cmp 	#0 							; set the flags.
.12cf	20 0d 2e	jsr $2e0d			jsr 	FloatSetByte 				; output the byte
.12d2	4c 29 10	jmp $1029			jmp 	NextCommand
.12d5					StringConcrete:
.12d5	9c 68 05	stz $0568			stz 	stringInitialised	 		; initialise next usage
.12d8	84 34		sty $34				sty 	zTemp2+1 					; save pointer to new string
.12da	85 33		sta $33				sta 	zTemp2
.12dc	b2 33		lda ($33)			lda 	(zTemp2) 					; length required
.12de	4a		lsr a				lsr 	a 							; allow half as much for expansion.
.12df	18		clc				clc
.12e0	72 33		adc ($33)			adc 	(zTemp2)
.12e2	90 02		bcc $12e6			bcc 	_SCNoOverflow
.12e4	a9 ff		lda #$ff			lda 	#255
.12e6					_SCNoOverflow:
.12e6	c9 0a		cmp #$0a			cmp 	#10 						; and a minimum of 10
.12e8	b0 02		bcs $12ec			bcs 	_SCNoMinimum
.12ea	a9 0a		lda #$0a			lda 	#10
.12ec					_SCNoMinimum:
.12ec	85 31		sta $31				sta 	zTemp1 						; save max length.
.12ee	38		sec				sec
.12ef	ad 02 04	lda $0402			lda		stringHighMemory 			; subtract max length from high memory.
.12f2	e5 31		sbc $31				sbc 	zTemp1
.12f4	a8		tay				tay
.12f5	ad 03 04	lda $0403			lda 	stringHighMemory+1
.12f8	e9 00		sbc #$00			sbc 	#0
.12fa	48		pha				pha
.12fb	38		sec				sec 								; subtract 3 more
.12fc	98		tya				tya
.12fd	e9 03		sbc #$03			sbc 	#3
.12ff	8d 02 04	sta $0402			sta 	stringHighMemory 			; to string high memory/zsTemp
.1302	85 22		sta $22				sta 	zsTemp
.1304	68		pla				pla
.1305	e9 00		sbc #$00			sbc 	#0
.1307	8d 03 04	sta $0403			sta 	stringHighMemory+1
.130a	85 23		sta $23				sta 	zsTemp+1
.130c	a5 31		lda $31				lda 	zTemp1 						; set max length.
.130e	92 22		sta ($22)			sta 	(zsTemp)
.1310	a0 01		ldy #$01			ldy 	#1 							; clear control byte.
.1312	a9 00		lda #$00			lda 	#0
.1314	91 22		sta ($22),y			sta 	(zsTemp),y
.1316	a5 22		lda $22				lda 	zsTemp 						; new empty string in YA.
.1318	a4 23		ldy $23				ldy 	zsTemp+1
.131a	60		rts				rts
.131b					CommandData:
.131b	fa		plx				plx
.131c	98		tya				tya 								; data length +1 added to Y
.131d	38		sec				sec
.131e	71 28		adc ($28),y			adc 	(codePtr),y 				; next instruction
.1320	a8		tay				tay
.1321	4c 29 10	jmp $1029			jmp 	NextCommand
.1324					CommandDIM:
.1324	fa		plx				plx
.1325	5a		phy				phy
.1326	20 07 18	jsr $1807			jsr 	GetInteger8Bit 				; get the type we are building for (bits 6 & 5)
.1329	8d 08 04	sta $0408			sta 	dimType
.132c	ca		dex				dex 								; this is the number of indices
.132d	20 07 18	jsr $1807			jsr 	GetInteger8Bit
.1330	85 31		sta $31				sta 	zTemp1 						; subtract n from X so X points at the *first*
.1332	8a		txa				txa 								; dimension.
.1333	38		sec				sec
.1334	e5 31		sbc $31				sbc 	zTemp1
.1336	aa		tax				tax
.1337	a5 31		lda $31				lda 	zTemp1 						; number of indices.
.1339	20 4d 13	jsr $134d			jsr 	DIMCreateOneLevel 			; create one at this level
.133c	95 41		sta $41,x			sta 	NSMantissa0,x 				; set it as a return address as an integer
.133e	98		tya				tya
.133f	95 4d		sta $4d,x			sta 	NSMantissa1,x
.1341	74 59		stz $59,x			stz 	NSMantissa2,x
.1343	74 65		stz $65,x			stz 	NSMantissa3,x
.1345	74 35		stz $35,x			stz 	NSStatus,x
.1347	74 71		stz $71,x			stz 	NSExponent,x
.1349	7a		ply				ply
.134a	4c 29 10	jmp $1029			jmp 	NextCommand
.134d					DIMCreateOneLevel:
.134d	a4 26		ldy $26				ldy 	availableMemory 			; push the start of this block on the stack.
.134f	5a		phy				phy
.1350	a4 27		ldy $27				ldy 	availableMemory+1
.1352	5a		phy				phy
.1353	a8		tay				tay 			 					; save current level into Y
.1354	20 0d 18	jsr $180d			jsr		GetInteger16Bit 			; size of dimension to zTemp0
.1357	e6 2f		inc $2f				inc 	zTemp0 						; bump the size of the dimension as we need one more
.1359	d0 02		bne $135d			bne 	_DCOLNoCarry
.135b	e6 30		inc $30				inc 	zTemp0+1
.135d					_DCOLNoCarry:
.135d	a5 2f		lda $2f				lda 	zTemp0 						; write out the +1 size of the dimension
.135f	20 00 14	jsr $1400			jsr 	DIMWriteByte
.1362	a5 30		lda $30				lda 	zTemp0+1
.1364	20 00 14	jsr $1400			jsr 	DIMWriteByte
.1367	ad 08 04	lda $0408			lda 	dimType 					; get type information
.136a	29 7f		and #$7f			and 	#$7F
.136c	c0 01		cpy #$01			cpy 	#1
.136e	f0 02		beq $1372			beq 	_DCOLNoSubLevel
.1370	09 80		ora #$80			ora 	#$80 						; set sublevel bit if there is one.
.1372					_DCOLNoSubLevel:
.1372	20 00 14	jsr $1400			jsr 	DIMWriteByte
.1375	a5 26		lda $26				lda 	availableMemory
.1377	85 31		sta $31				sta 	zTemp1
.1379	a5 27		lda $27				lda 	availableMemory+1
.137b	85 32		sta $32				sta 	zTemp1+1
.137d	a5 2f		lda $2f				lda 	zTemp0
.137f	85 33		sta $33				sta 	zTemp2
.1381	a5 30		lda $30				lda 	zTemp0+1
.1383	85 34		sta $34				sta 	zTemp2+1
.1385					_DCOLFillArray:
.1385	20 e4 13	jsr $13e4			jsr 	DIMWriteElement 			; write out an element, could be a sub-level or individual data
.1388	a5 2f		lda $2f				lda 	zTemp0 						; decrement one from count.
.138a	d0 02		bne $138e			bne 	_DCOLNoBorrow
.138c	c6 30		dec $30				dec 	zTemp0+1
.138e					_DCOLNoBorrow:
.138e	c6 2f		dec $2f				dec 	zTemp0
.1390	a5 2f		lda $2f				lda 	zTemp0 						; until completed.
.1392	05 30		ora $30				ora 	zTemp0+1
.1394	d0 ef		bne $1385			bne 	_DCOLFillArray
.1396	c0 01		cpy #$01			cpy 	#1
.1398	f0 42		beq $13dc			beq 	_DCOLExit
.139a					_DCOLRecursionLoop:
.139a	da		phx				phx 								; save XY
.139b	5a		phy				phy
.139c	a5 31		lda $31				lda 	zTemp1 						; push zTemp1 (position) zTemp2 (count)
.139e	48		pha				pha
.139f	a5 32		lda $32				lda 	zTemp1+1
.13a1	48		pha				pha
.13a2	a5 33		lda $33				lda 	zTemp2
.13a4	48		pha				pha
.13a5	a5 34		lda $34				lda 	zTemp2+1
.13a7	48		pha				pha
.13a8	88		dey				dey  								; lower level -> A
.13a9	98		tya				tya
.13aa	e8		inx				inx 								; next index size
.13ab	20 4d 13	jsr $134d			jsr 	DIMCreateOneLevel 			; create a level, return in YA
.13ae	fa		plx				plx 								; restore zTemp2 (count) and zTemp1 (position)
.13af	86 34		stx $34				stx 	zTemp2+1
.13b1	fa		plx				plx
.13b2	86 33		stx $33				stx 	zTemp2
.13b4	fa		plx				plx
.13b5	86 32		stx $32				stx 	zTemp1+1
.13b7	fa		plx				plx
.13b8	86 31		stx $31				stx 	zTemp1
.13ba	92 31		sta ($31)			sta 	(zTemp1) 					; write out position
.13bc	98		tya				tya
.13bd	a0 01		ldy #$01			ldy 	#1
.13bf	91 31		sta ($31),y			sta 	(zTemp1),y
.13c1	7a		ply				ply 								; restore XY
.13c2	fa		plx				plx
.13c3	18		clc				clc
.13c4	a5 31		lda $31				lda 	zTemp1 						; add 2 to zTemp1
.13c6	69 02		adc #$02			adc 	#2
.13c8	85 31		sta $31				sta 	zTemp1
.13ca	90 02		bcc $13ce			bcc 	_DCOLRNoCarry
.13cc	e6 32		inc $32				inc 	zTemp1+1
.13ce					_DCOLRNoCarry:
.13ce	a5 33		lda $33				lda 	zTemp2 						; decrement one from count in zTemp2
.13d0	d0 02		bne $13d4			bne 	_DCOLRNoBorrow
.13d2	c6 34		dec $34				dec 	zTemp2+1
.13d4					_DCOLRNoBorrow:
.13d4	c6 33		dec $33				dec 	zTemp2
.13d6	a5 33		lda $33				lda 	zTemp2 						; until completed.
.13d8	05 34		ora $34				ora 	zTemp2+1
.13da	d0 be		bne $139a			bne 	_DCOLRecursionLoop
.13dc					_DCOLExit:
.13dc	68		pla				pla 								; get MSB, make offset again
.13dd	38		sec				sec
.13de	ed 07 04	sbc $0407			sbc 	variableStartPage
.13e1	a8		tay				tay
.13e2	68		pla				pla 								; YA now contains offset address.
.13e3	60		rts				rts
.13e4					DIMWriteElement:
.13e4	da		phx				phx
.13e5	a2 02		ldx #$02			ldx	 	#2 							; work out size is 2 or 6
.13e7	c0 01		cpy #$01			cpy 	#1 							; do we have a sub level, if so 2.
.13e9	d0 0b		bne $13f6			bne 	_DIMWENotFloat
.13eb	ad 08 04	lda $0408			lda 	dimType
.13ee	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16
.13f0	c9 00		cmp #$00			cmp 	#NSSIFloat
.13f2	d0 02		bne $13f6			bne 	_DIMWENotFloat
.13f4	a2 06		ldx #$06			ldx 	#6
.13f6					_DIMWENotFloat:
.13f6	a9 00		lda #$00			lda 	#0
.13f8	20 00 14	jsr $1400			jsr 	DIMWriteByte
.13fb	ca		dex				dex
.13fc	d0 f8		bne $13f6			bne 	_DIMWENotFloat
.13fe	fa		plx				plx
.13ff	60		rts				rts
.1400					DIMWriteByte:
.1400	92 26		sta ($26)			sta 	(availableMemory)
.1402	e6 26		inc $26				inc 	availableMemory
.1404	d0 0b		bne $1411			bne 	_DIMWBSkip
.1406	e6 27		inc $27				inc 	availableMemory+1
.1408	48		pha				pha
.1409	a5 27		lda $27				lda 	availableMemory+1 			; check out of memory
.140b	cd 03 04	cmp $0403			cmp 	stringHighMemory+1
.140e	b0 02		bcs $1412			bcs 	_DIMWBMemory
.1410	68		pla				pla
.1411					_DIMWBSkip:
.1411	60		rts				rts
.1412					_DIMWBMemory:
.1412	4c b3 27	jmp $27b3		jmp	ErrorV_memory
.0408					dimType:
>0408							.fill 	1
.1415					CommandEnd:
.1415	fa		plx				plx
.1416	86 2f		stx $2f				stx 	zTemp0
.1418	4c ff ff	jmp $ffff			jmp 	$FFFF
.141b					Unimplemented:
.141b	4c e6 26	jmp $26e6			jmp 	ErrorV_unimplemented
.141e					ErrorHandler:
.141e	98		tya				tya
.141f	18		clc				clc
.1420	65 28		adc $28				adc 	codePtr
.1422	85 28		sta $28				sta 	codePtr
.1424	90 02		bcc $1428			bcc 	_EHNoCarry
.1426	e6 29		inc $29				inc 	codePtr+1
.1428					_EHNoCarry:
.1428	68		pla				pla
.1429	7a		ply				ply
.142a	85 2f		sta $2f				sta 	zTemp0
.142c	84 30		sty $30				sty 	zTemp0+1
.142e	a2 00		ldx #$00			ldx 	#0 							; output to channel #0
.1430	a0 01		ldy #$01			ldy 	#1
.1432					_EHDisplayMsg:
.1432	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.1434	20 4d 24	jsr $244d			jsr 	XPrintCharacterToChannel
.1437	c8		iny				iny
.1438	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.143a	d0 f6		bne $1432			bne 	_EHDisplayMsg
.143c	a9 20		lda #$20			lda 	#32
.143e	20 4d 24	jsr $244d			jsr 	XPrintCharacterToChannel
.1441	a9 40		lda #$40			lda 	#64
.1443	20 4d 24	jsr $244d			jsr 	XPrintCharacterToChannel
.1446	a9 20		lda #$20			lda 	#32
.1448	20 4d 24	jsr $244d			jsr 	XPrintCharacterToChannel
.144b	20 50 14	jsr $1450			jsr 	EHDisplayCodePtr
.144e	80 fe		bra $144e	_EHStop:bra 	_EHStop
.1450					EHDisplayCodePtr:
.1450	a9 20		lda #$20			lda 	#32
.1452	20 4d 24	jsr $244d			jsr 	XPrintCharacterToChannel
.1455	38		sec				sec
.1456	a5 29		lda $29				lda 	codePtr+1 					; display the p-code address of the error.
.1458	ed 04 04	sbc $0404			sbc 	runtimeHigh
.145b	20 64 14	jsr $1464			jsr 	_EHDisplayHex
.145e	a5 28		lda $28				lda 	codePtr
.1460	20 64 14	jsr $1464			jsr 	_EHDisplayHex
.1463	60		rts				rts
.1464					_EHDisplayHex:
.1464	48		pha				pha
.1465	4a		lsr a				lsr 	a
.1466	4a		lsr a				lsr 	a
.1467	4a		lsr a				lsr 	a
.1468	4a		lsr a				lsr 	a
.1469	20 6d 14	jsr $146d			jsr 	_EHDisplayNibble
.146c	68		pla				pla
.146d					_EHDisplayNibble:
.146d	29 0f		and #$0f			and 	#15
.146f	c9 0a		cmp #$0a			cmp 	#10
.1471	90 02		bcc $1475			bcc 	_EHNotHex
.1473	69 06		adc #$06			adc 	#6
.1475					_EHNotHex:
.1475	69 30		adc #$30			adc 	#48
.1477	4c 4d 24	jmp $244d			jmp 	XPrintCharacterToChannel
.147a					CommandFor:
.147a	fa		plx				plx
.147b	a9 d3		lda #$d3			lda 	#FRAME_FOR 					; open frame
.147d	20 fd 14	jsr $14fd			jsr 	StackOpenFrame
.1480	20 3e 19	jsr $193e			jsr 	StackSaveCurrentPosition 	; normalise to Y=0 and save position.
.1483	a0 07		ldy #$07			ldy 	#7 							; copy step out
.1485	20 df 14	jsr $14df			jsr 	CopyTOSToOffsetY
.1488	ca		dex				dex
.1489	a0 0d		ldy #$0d			ldy 	#13 						; copy terminal value.
.148b	20 df 14	jsr $14df			jsr 	CopyTOSToOffsetY
.148e	ca		dex				dex
.148f	b5 4d		lda $4d,x			lda 	NSMantissa1,x 				; bit 15 of reference indicates type int16
.1491	29 80		and #$80			and 	#$80
.1493	a0 04		ldy #$04			ldy 	#4
.1495	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.1497	b5 41		lda $41,x			lda 	NSMantissa0,x 				; copy the reference address
.1499	a0 05		ldy #$05			ldy 	#5 							; adjusted to be a real address
.149b	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.149d	85 2f		sta $2f				sta 	zTemp0 						; also to zTemp0
.149f	c8		iny				iny
.14a0	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.14a2	18		clc				clc
.14a3	29 7f		and #$7f			and 	#$7F 						; throw the type bit.
.14a5	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.14a7	6d 07 04	adc $0407			adc 	variableStartPage 			; point to variable page.
.14aa	85 30		sta $30				sta 	zTemp0+1
.14ac	ca		dex				dex 								; throw reference.
.14ad	a0 05		ldy #$05			ldy 	#5 							; check the index, step and terminal values
.14af	b1 2f		lda ($2f),y			lda 	(zTemp0),y 					; are all +ve integers, sign bits first.
.14b1	a0 0c		ldy #$0c			ldy 	#12
.14b3	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.14b5	a0 12		ldy #$12			ldy 	#18
.14b7	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.14b9	29 80		and #$80			and 	#$80 						; only interested in sign bit.
.14bb	88		dey				dey 								; now the exponents.
.14bc	11 2f		ora ($2f),y			ora 	(zTemp0),y
.14be	a0 0b		ldy #$0b			ldy 	#11
.14c0	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.14c2	a0 11		ldy #$11			ldy 	#17
.14c4	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.14c6	a0 08		ldy #$08			ldy 	#8 							; step must be 1 byte.
.14c8	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.14ca	c8		iny				iny
.14cb	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.14cd	c8		iny				iny
.14ce	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.14d0	d0 08		bne $14da			bne 	_CFNoOptimise
.14d2	a0 04		ldy #$04			ldy 	#4 							; set the runtime stack pointer optimisation flag.
.14d4	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.14d6	09 40		ora #$40			ora 	#$40
.14d8	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.14da					_CFNoOptimise:
.14da	a0 00		ldy #$00			ldy 	#0
.14dc	4c 29 10	jmp $1029			jmp 	NextCommand
.14df					CopyTOSToOffsetY:
.14df	b5 41		lda $41,x			lda 	NSMantissa0,x
.14e1	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.14e3	c8		iny				iny
.14e4	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.14e6	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.14e8	c8		iny				iny
.14e9	b5 59		lda $59,x			lda 	NSMantissa2,x
.14eb	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.14ed	c8		iny				iny
.14ee	b5 65		lda $65,x			lda 	NSMantissa3,x
.14f0	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.14f2	c8		iny				iny
.14f3	b5 71		lda $71,x			lda 	NSExponent,x
.14f5	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.14f7	c8		iny				iny
.14f8	b5 35		lda $35,x			lda 	NSStatus,x
.14fa	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.14fc	60		rts				rts
.14fd					StackOpenFrame:
.14fd	48		pha				pha 								; save frame marker
.14fe	29 1f		and #$1f			and 	#$1F 						; bytes required.
.1500	85 2f		sta $2f				sta 	zTemp0
.1502	38		sec				sec 								; subtract from runtime stack pointer.
.1503	a5 24		lda $24				lda		runtimeStackPtr
.1505	e5 2f		sbc $2f				sbc 	zTemp0
.1507	85 24		sta $24				sta 	runtimeStackPtr
.1509	a5 25		lda $25				lda		runtimeStackPtr+1
.150b	e9 00		sbc #$00			sbc 	#0
.150d	85 25		sta $25				sta 	runtimeStackPtr+1
.150f	68		pla				pla 								; put frame marker at +0
.1510	92 24		sta ($24)			sta 	(runtimeStackPtr)
.1512	60		rts				rts
.1513					StackCloseFrame:
.1513	b2 24		lda ($24)			lda 	(runtimeStackPtr)			; get frame marker
.1515	29 1f		and #$1f			and 	#$1F 						; size
.1517	18		clc				clc
.1518	65 24		adc $24				adc 	runtimeStackPtr
.151a	85 24		sta $24				sta 	runtimeStackPtr
.151c	90 02		bcc $1520			bcc 	_SCFNoCarry
.151e	e6 25		inc $25				inc 	runtimeStackPtr+1
.1520					_SCFNoCarry:
.1520	60		rts				rts
.1521					StackFindFrame:
.1521	8d 09 04	sta $0409			sta 	requiredFrame
.1524					_SFFLoop:
.1524	b2 24		lda ($24)			lda 	(runtimeStackPtr) 			; get TOS
.1526	c9 ff		cmp #$ff			cmp 	#$FF 						; if found $FF then this is a fail.
.1528	f0 10		beq $153a			beq 	SCFFail
.152a	cd 09 04	cmp $0409			cmp 	requiredFrame 				; found this type ?
.152d	f0 05		beq $1534			beq 	_SFFFound
.152f	20 13 15	jsr $1513			jsr 	StackCloseFrame 			; close the top frame
.1532	80 f0		bra $1524			bra 	_SFFLoop 					; and try te next.
.1534					_SFFFound:
.1534	60		rts				rts
.1535					StackCheckFrame:
.1535	d2 24		cmp ($24)			cmp 	(runtimeStackPtr) 			; matches current frame
.1537	d0 01		bne $153a			bne 	SCFFail
.1539	60		rts				rts
.153a					SCFFail:
.153a	4c 43 27	jmp $2743		jmp	ErrorV_structure
.0409					requiredFrame:
>0409							.fill 	1
.153d					UnaryFre:
.153d	fa		plx				plx
.153e	20 0b 2e	jsr $2e0b			jsr 	FloatSetZero 				; zero the result (32 bit integer)
.1541	38		sec				sec
.1542	ad 02 04	lda $0402			lda 	stringHighMemory 			; calculate the free memory.
.1545	ed 00 04	sbc $0400			sbc 	stringLowMemory
.1548	95 41		sta $41,x			sta		NSMantissa0,x
.154a	ad 03 04	lda $0403			lda 	stringHighMemory+1
.154d	ed 01 04	sbc $0401			sbc 	stringLowMemory+1
.1550	95 4d		sta $4d,x			sta		NSMantissa1,x
.1552	4c 29 10	jmp $1029			jmp 	NextCommand
.1555					CommandGet:
.1555	fa		plx				plx
.1556	e8		inx				inx
.1557	a9 01		lda #$01			lda 	#1 							; 1 character space
.1559	20 d8 1e	jsr $1ed8			jsr 	StringAllocTemp
.155c	20 3e 1b	jsr $1b3e			jsr 	VectorGetCharacter 			; get a character
.155f	c9 00		cmp #$00			cmp 	#0
.1561	f0 09		beq $156c			beq 	_CGNone
.1563	5a		phy				phy
.1564	a0 01		ldy #$01			ldy 	#1 							; store char
.1566	91 22		sta ($22),y			sta 	(zsTemp),y
.1568	98		tya				tya 								; store length.
.1569	92 22		sta ($22)			sta 	(zsTemp)
.156b	7a		ply				ply
.156c					_CGNone:
.156c	4c 29 10	jmp $1029			jmp 	NextCommand
.156f					CommandGosub:
.156f	fa		plx				plx
.1570	a9 e4		lda #$e4			lda 	#FRAME_GOSUB
.1572	20 fd 14	jsr $14fd			jsr 	StackOpenFrame
.1575	20 3e 19	jsr $193e			jsr 	StackSaveCurrentPosition
.1578	4c 8e 15	jmp $158e			jmp 	PerformGOTO
.157b					CommandReturn:
.157b	fa		plx				plx
.157c	a9 e4		lda #$e4			lda 	#FRAME_GOSUB
.157e	20 21 15	jsr $1521			jsr 	StackFindFrame
.1581	20 4f 19	jsr $194f			jsr 	StackLoadCurrentPosition
.1584	c8		iny				iny
.1585	c8		iny				iny
.1586	c8		iny				iny
.1587	20 13 15	jsr $1513			jsr 	StackCloseFrame
.158a	4c 29 10	jmp $1029			jmp 	NextCommand
.158d					CommandGoto:
.158d	fa		plx				plx
.158e					PerformGOTO:
.158e	c8		iny				iny 								; push MSB of offset on stack
.158f	b1 28		lda ($28),y			lda 	(codePtr),y
.1591	48		pha				pha
.1592	88		dey				dey 								; point LSB of offset
.1593	18		clc				clc 								; add LSB
.1594	b1 28		lda ($28),y			lda 	(codePtr),y
.1596	65 28		adc $28				adc 	codePtr
.1598	85 28		sta $28				sta 	codePtr
.159a	68		pla				pla 								; restore offset MSB and add
.159b	65 29		adc $29				adc 	codePtr+1
.159d	85 29		sta $29				sta 	codePtr+1
.159f	88		dey				dey 								; fix up.
.15a0	4c 29 10	jmp $1029			jmp 	NextCommand
.15a3					CommandGotoZ:
.15a3	fa		plx				plx
.15a4	20 2d 2e	jsr $2e2d			jsr 	FloatIsZero
.15a7	ca		dex				dex
.15a8	c9 00		cmp #$00			cmp 	#0
.15aa	f0 e2		beq $158e			beq 	PerformGOTO
.15ac	c8		iny				iny
.15ad	c8		iny				iny
.15ae	4c 29 10	jmp $1029			jmp 	NextCommand
.15b1					CommandGotoNZ:
.15b1	fa		plx				plx
.15b2	20 2d 2e	jsr $2e2d			jsr 	FloatIsZero
.15b5	ca		dex				dex
.15b6	c9 00		cmp #$00			cmp 	#0
.15b8	d0 d4		bne $158e			bne 	PerformGOTO
.15ba	c8		iny				iny
.15bb	c8		iny				iny
.15bc	4c 29 10	jmp $1029			jmp 	NextCommand
.15bf					Command_PSET:
.15bf	fa		plx				plx
.15c0	5a		phy				phy
.15c1	20 07 18	jsr $1807			jsr 	GetInteger8Bit 				; get the colour
.15c4	48		pha				pha
.15c5	a2 00		ldx #$00			ldx 	#0 							; copy 0/1 to r0,r1
.15c7	a0 02		ldy #$02			ldy 	#X16_r0
.15c9	20 4b 16	jsr $164b			jsr 	GraphicsCopy2
.15cc	20 ff fe	jsr $feff			jsr 	X16_FB_cursor_position 		; set position.
.15cf	68		pla				pla 								; set pixel.
.15d0	20 0b ff	jsr $ff0b			jsr 	X16_FB_set_pixel
.15d3	7a		ply				ply
.15d4	a2 ff		ldx #$ff			ldx 	#$FF
.15d6	4c 29 10	jmp $1029			jmp 	NextCommand
.15d9					Command_LINE:
.15d9	fa		plx				plx
.15da	5a		phy				phy
.15db	20 3e 16	jsr $163e			jsr 	GraphicsColour
.15de	a2 00		ldx #$00			ldx 	#0 							; copy 0/1/2/3 to r0,1,2,3
.15e0	a0 02		ldy #$02			ldy 	#X16_r0
.15e2	20 48 16	jsr $1648			jsr 	GraphicsCopy4
.15e5	20 2c ff	jsr $ff2c			jsr 	X16_GRAPH_draw_line
.15e8	7a		ply				ply
.15e9	a2 ff		ldx #$ff			ldx 	#$FF
.15eb	4c 29 10	jmp $1029			jmp 	NextCommand
.15ee					Command_RECT:
.15ee	fa		plx				plx
.15ef	5a		phy				phy
.15f0	20 5f 16	jsr $165f			jsr 	GraphicsRectCoords
.15f3	38		sec				sec
.15f4	20 2f ff	jsr $ff2f			jsr 	X16_GRAPH_draw_rect
.15f7	7a		ply				ply
.15f8	a2 ff		ldx #$ff			ldx 	#$FF
.15fa	4c 29 10	jmp $1029			jmp 	NextCommand
.15fd					Command_FRAME:
.15fd	fa		plx				plx
.15fe	5a		phy				phy
.15ff	20 5f 16	jsr $165f			jsr 	GraphicsRectCoords
.1602	18		clc				clc
.1603	20 2f ff	jsr $ff2f			jsr 	X16_GRAPH_draw_rect
.1606	7a		ply				ply
.1607	a2 ff		ldx #$ff			ldx 	#$FF
.1609	4c 29 10	jmp $1029			jmp 	NextCommand
.160c					Command_CHAR:
.160c	fa		plx				plx
.160d	5a		phy				phy
.160e	ca		dex				dex  								; set the draw colour
.160f	20 3e 16	jsr $163e			jsr 	GraphicsColour
.1612	a2 00		ldx #$00			ldx 	#0 							; copy 0/1 to r0,r1
.1614	a0 02		ldy #$02			ldy 	#X16_r0
.1616	20 4b 16	jsr $164b			jsr 	GraphicsCopy2
.1619	a5 44		lda $44				lda 	NSMantissa0+3 				; copy string address to zTemp0
.161b	85 2f		sta $2f				sta 	zTemp0
.161d	a5 50		lda $50				lda 	NSMantissa1+3
.161f	85 30		sta $30				sta 	zTemp0+1
.1621	b2 2f		lda ($2f)			lda 	(zTemp0) 					; count of chars to zTemp1
.1623	85 31		sta $31				sta 	zTemp1
.1625					_CCLoop:
.1625	a5 31		lda $31				lda 	zTemp1 						; done all chars ?
.1627	f0 0f		beq $1638			beq 	_CCExit
.1629	c6 31		dec $31				dec 	zTemp1 						; dec counter
.162b	e6 2f		inc $2f				inc 	zTemp0 						; pre-bump pointer
.162d	d0 02		bne $1631			bne 	_CCNoCarry
.162f	e6 30		inc $30				inc 	zTemp0+1
.1631					_CCNoCarry:
.1631	b2 2f		lda ($2f)			lda 	(zTemp0) 					; get character
.1633	20 41 ff	jsr $ff41			jsr 	X16_GRAPH_put_char 			; write it
.1636	80 ed		bra $1625			bra 	_CCLoop						; go round.
.1638					_CCExit:
.1638	7a		ply				ply
.1639	a2 ff		ldx #$ff			ldx 	#$FF
.163b	4c 29 10	jmp $1029			jmp 	NextCommand
.163e					GraphicsColour:
.163e	20 07 18	jsr $1807			jsr 	GetInteger8Bit
.1641	aa		tax				tax
.1642	a0 00		ldy #$00			ldy 	#0
.1644	20 29 ff	jsr $ff29			jsr 	X16_GRAPH_set_colors
.1647	60		rts				rts
.1648					GraphicsCopy4:
.1648	20 4b 16	jsr $164b			jsr 	GraphicsCopy2
.164b					GraphicsCopy2:
.164b	20 4e 16	jsr $164e			jsr 	GraphicsCopy1
.164e					GraphicsCopy1:
.164e	20 46 2a	jsr $2a46			jsr 	FloatIntegerPart
.1651	b5 41		lda $41,x			lda 	NSMantissa0,x
.1653	99 00 00	sta $0000,y			sta 	0,y
.1656	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.1658	99 01 00	sta $0001,y			sta 	1,y
.165b	e8		inx				inx
.165c	c8		iny				iny
.165d	c8		iny				iny
.165e	60		rts				rts
.165f					GraphicsRectCoords:
.165f	20 3e 16	jsr $163e			jsr 	GraphicsColour 				; set colour
.1662	a2 00		ldx #$00			ldx 	#0 							; copy in order.
.1664	a0 02		ldy #$02			ldy 	#X16_r0
.1666	20 48 16	jsr $1648			jsr 	GraphicsCopy4
.1669	a2 02		ldx #$02			ldx 	#X16_r0 					; sort r0/r2
.166b	20 78 16	jsr $1678			jsr 	_GRCSortSubtract
.166e	a2 04		ldx #$04			ldx 	#X16_r1 					; sort r1/r3
.1670	20 78 16	jsr $1678			jsr 	_GRCSortSubtract
.1673	74 08		stz $08,x			stz 	8,x 						; zero rounding
.1675	74 09		stz $09,x			stz 	9,x
.1677	60		rts				rts
.1678					_GRCSortSubtract:
.1678	b5 04		lda $04,x			lda 	4,x 						; calculate r2-r0
.167a	d5 00		cmp $00,x			cmp 	0,x
.167c	b5 05		lda $05,x			lda 	5,x
.167e	f5 01		sbc $01,x			sbc 	1,x
.1680	b0 08		bcs $168a			bcs 	_GRCNoSwap 					; >= swap.
.1682	20 98 16	jsr $1698			jsr 	_GRCSwapByte 				; swap 0/2
.1685	e8		inx				inx
.1686	20 98 16	jsr $1698			jsr 	_GRCSwapByte 				; swap 1/3
.1689	ca		dex				dex
.168a					_GRCNoSwap:
.168a	38		sec				sec 								; calculate width/height into 4,5
.168b	b5 04		lda $04,x			lda 	4,x
.168d	f5 00		sbc $00,x			sbc 	0,x
.168f	95 04		sta $04,x			sta 	4,x
.1691	b5 05		lda $05,x			lda 	5,x
.1693	f5 01		sbc $01,x			sbc 	1,x
.1695	95 05		sta $05,x			sta 	5,x
.1697	60		rts				rts
.1698					_GRCSwapByte:
.1698	b5 04		lda $04,x			lda 	4,x
.169a	48		pha				pha
.169b	b5 00		lda $00,x			lda 	0,x
.169d	95 04		sta $04,x			sta 	4,x
.169f	68		pla				pla
.16a0	95 00		sta $00,x			sta 	0,x
.16a2	60		rts				rts
.16a3					Unary16Hex:
.16a3	fa		plx				plx
.16a4	20 0d 18	jsr $180d			jsr 	GetInteger16Bit
.16a7	a9 04		lda #$04			lda 	#4 							; allocate / set 4 bytes.
.16a9	20 d8 1e	jsr $1ed8			jsr 	StringAllocTemp
.16ac	a5 30		lda $30				lda 	zTemp0+1
.16ae	f0 03		beq $16b3			beq 	_UHNoHigh
.16b0	20 bb 16	jsr $16bb			jsr 	_UHWriteHex
.16b3					_UHNoHigh:
.16b3	a5 2f		lda $2f				lda 	zTemp0
.16b5	20 bb 16	jsr $16bb			jsr 	_UHWriteHex
.16b8	4c 29 10	jmp $1029			jmp 	NextCommand
.16bb					_UHWriteHex:
.16bb	48		pha				pha
.16bc	4a		lsr a				lsr 	a
.16bd	4a		lsr a				lsr 	a
.16be	4a		lsr a				lsr 	a
.16bf	4a		lsr a				lsr 	a
.16c0	20 c4 16	jsr $16c4			jsr 	_UHWriteNibl
.16c3	68		pla				pla
.16c4					_UHWriteNibl:
.16c4	29 0f		and #$0f			and 	#15
.16c6	c9 0a		cmp #$0a			cmp 	#10
.16c8	90 02		bcc $16cc			bcc 	_UHDigit
.16ca	69 06		adc #$06			adc 	#6
.16cc					_UHDigit:
.16cc	69 30		adc #$30			adc 	#48
.16ce	20 01 1f	jsr $1f01			jsr 	StringWriteChar
.16d1	60		rts				rts
.16d2					IndFloatRead:
.16d2	fa		plx				plx
.16d3	b5 41		lda $41,x			lda 	NSMantissa0,x 				; copy address
.16d5	85 2f		sta $2f				sta 	zTemp0
.16d7	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.16d9	18		clc				clc
.16da	6d 07 04	adc $0407			adc 	variableStartPage
.16dd	85 30		sta $30				sta 	zTemp0+1
.16df	ca		dex				dex 								; throw the address
.16e0	20 b7 1c	jsr $1cb7			jsr 	ReadFloatZTemp0Sub 							; call read routine
.16e3	4c 29 10	jmp $1029			jmp 	NextCommand
.16e6					IndInt16Read:
.16e6	fa		plx				plx
.16e7	b5 41		lda $41,x			lda 	NSMantissa0,x 				; copy address
.16e9	85 2f		sta $2f				sta 	zTemp0
.16eb	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.16ed	18		clc				clc
.16ee	6d 07 04	adc $0407			adc 	variableStartPage
.16f1	85 30		sta $30				sta 	zTemp0+1
.16f3	ca		dex				dex 								; throw the address
.16f4	20 f3 1c	jsr $1cf3			jsr 	ReadIntegerZTemp0Sub 							; call read routine
.16f7	4c 29 10	jmp $1029			jmp 	NextCommand
.16fa					IndStringRead:
.16fa	fa		plx				plx
.16fb	b5 41		lda $41,x			lda 	NSMantissa0,x 				; copy address
.16fd	85 2f		sta $2f				sta 	zTemp0
.16ff	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.1701	18		clc				clc
.1702	6d 07 04	adc $0407			adc 	variableStartPage
.1705	85 30		sta $30				sta 	zTemp0+1
.1707	ca		dex				dex 								; throw the address
.1708	20 38 1d	jsr $1d38			jsr 	ReadStringZTemp0Sub 							; call read routine
.170b	4c 29 10	jmp $1029			jmp 	NextCommand
.170e					IndFloatWrite:
.170e	fa		plx				plx
.170f	b5 40		lda $40,x			lda 	NSMantissa0-1,x 			; copy address
.1711	85 2f		sta $2f				sta 	zTemp0
.1713	b5 4c		lda $4c,x			lda 	NSMantissa1-1,x
.1715	18		clc				clc
.1716	6d 07 04	adc $0407			adc 	variableStartPage
.1719	85 30		sta $30				sta 	zTemp0+1
.171b	20 92 22	jsr $2292			jsr 	WriteFloatZTemp0Sub 							; call write routine
.171e	ca		dex				dex 								; throw the address as well.
.171f	4c 29 10	jmp $1029			jmp 	NextCommand
.1722					IndInt16Write:
.1722	fa		plx				plx
.1723	b5 40		lda $40,x			lda 	NSMantissa0-1,x 			; copy address
.1725	85 2f		sta $2f				sta 	zTemp0
.1727	b5 4c		lda $4c,x			lda 	NSMantissa1-1,x
.1729	18		clc				clc
.172a	6d 07 04	adc $0407			adc 	variableStartPage
.172d	85 30		sta $30				sta 	zTemp0+1
.172f	20 ce 22	jsr $22ce			jsr 	WriteIntegerZTemp0Sub 							; call write routine
.1732	ca		dex				dex 								; throw the address as well.
.1733	4c 29 10	jmp $1029			jmp 	NextCommand
.1736					IndStringWrite:
.1736	fa		plx				plx
.1737	b5 40		lda $40,x			lda 	NSMantissa0-1,x 			; copy address
.1739	85 2f		sta $2f				sta 	zTemp0
.173b	b5 4c		lda $4c,x			lda 	NSMantissa1-1,x
.173d	18		clc				clc
.173e	6d 07 04	adc $0407			adc 	variableStartPage
.1741	85 30		sta $30				sta 	zTemp0+1
.1743	20 0d 23	jsr $230d			jsr 	WriteStringZTemp0Sub 							; call write routine
.1746	ca		dex				dex 								; throw the address as well.
.1747	4c 29 10	jmp $1029			jmp 	NextCommand
.174a					CommandInput:
.174a	fa		plx				plx
.174b	5a		phy				phy 								; save Y
.174c	e8		inx				inx									; space on stack
.174d					_INError:
.174d	20 81 17	jsr $1781			jsr 	InputStringToBuffer 		; input from keyboard
.1750	a9 5f		lda #$5f			lda 	#((ReadBufferSize) & $FF)
.1752	85 2f		sta $2f				sta 	0+zTemp0
.1754	a9 04		lda #$04			lda 	#((ReadBufferSize) >> 8) & $FF
.1756	85 30		sta $30				sta 	1+zTemp0
.1758	20 1f 21	jsr $211f			jsr 	ValEvaluateZTemp0
.175b	b0 f0		bcs $174d			bcs 	_INError 					; failed, try again.
.175d	7a		ply				ply 								; restore Y
.175e	4c 29 10	jmp $1029			jmp 	NextCommand
.1761					CommandInputString:
.1761	fa		plx				plx
.1762	5a		phy				phy 								; save Y
.1763	20 81 17	jsr $1781			jsr 	InputStringToBuffer 		; input from keyboard
.1766	e8		inx				inx 								; make space on stack
.1767	20 0b 2e	jsr $2e0b			jsr 	FloatSetZero 				; store as string on stack
.176a	a9 5f		lda #$5f			lda 	#ReadBufferSize & $FF
.176c	95 41		sta $41,x			sta 	NSMantissa0,x
.176e	a9 04		lda #$04			lda 	#ReadBufferSize >> 8
.1770	95 4d		sta $4d,x			sta 	NSMantissa1,x
.1772	a9 40		lda #$40			lda 	#NSSString
.1774	95 35		sta $35,x			sta 	NSStatus,x
.1776	7a		ply				ply 								; restore Y
.1777	4c 29 10	jmp $1029			jmp 	NextCommand
.177a					CommandInputReset:
.177a	fa		plx				plx
.177b	9c 0a 04	stz $040a			stz 	InputBuffer
.177e	4c 29 10	jmp $1029			jmp 	NextCommand
.1781					InputStringToBuffer:
.1781	a9 bb		lda #$bb			lda 	#((InputBumpNext) & $FF)
.1783	8d 5f 05	sta $055f			sta 	0+ReadBumpNextVec
.1786	a9 17		lda #$17			lda 	#((InputBumpNext) >> 8) & $FF
.1788	8d 60 05	sta $0560			sta 	1+ReadBumpNextVec
.178b	a9 98		lda #$98			lda 	#((InputLookNext) & $FF)
.178d	8d 61 05	sta $0561			sta 	0+ReadLookNextVec
.1790	a9 17		lda #$17			lda 	#((InputLookNext) >> 8) & $FF
.1792	8d 62 05	sta $0562			sta 	1+ReadLookNextVec
.1795	4c 14 1c	jmp $1c14			jmp 	GetStringToBuffer
.1798					InputLookNext:
.1798	da		phx				phx
.1799					_ILNRetry:
.1799	ad 0a 04	lda $040a			lda 	InputBuffer 				; do we need to read more (e.g. the buffer is empty)
.179c	d0 08		bne $17a6			bne 	_ILNNotEmpty
.179e	20 bf 17	jsr $17bf			jsr 	InputGetNewLine 			; get a new line
.17a1	9c 5b 04	stz $045b			stz 	InputBufferPos 				; reset read position.
.17a4	80 f3		bra $1799			bra 	_ILNRetry
.17a6					_ILNNotEmpty:
.17a6	ae 5b 04	ldx $045b			ldx 	InputBufferPos 				; get head available character
.17a9	bd 0a 04	lda $040a,x			lda 	InputBuffer,x
.17ac	d0 08		bne $17b6			bne 	_ILNExit 					; if not EOS return it with CC.
.17ae					_ILNNextLine:
.17ae	9c 0a 04	stz $040a			stz 	InputBuffer 				; clear the buffer, indicating new line next time.
.17b1	38		sec				sec 								; return CS,Zero
.17b2	fa		plx				plx
.17b3	a9 0d		lda #$0d			lda 	#13
.17b5	60		rts				rts
.17b6					_ILNExit:
.17b6	fa		plx				plx
.17b7	c9 00		cmp #$00			cmp 	#0 							; return CC, Z Flag set.
.17b9	18		clc				clc
.17ba	60		rts				rts
.17bb					InputBumpNext:
.17bb	ee 5b 04	inc $045b			inc 	InputBufferPos
.17be	60		rts				rts
.17bf					InputGetNewLine:
.17bf	48		pha				pha
.17c0	da		phx				phx
.17c1	5a		phy				phy
.17c2	a9 3f		lda #$3f			lda 	#"?"
.17c4	20 fe 17	jsr $17fe			jsr 	IGNLEchoIfScreen
.17c7	a0 00		ldy #$00			ldy 	#0 							; line position.
.17c9					_IGNLLoop:
.17c9	20 3e 1b	jsr $1b3e			jsr 	VectorGetCharacter 			; get a character
.17cc	c9 00		cmp #$00			cmp 	#0
.17ce	f0 f9		beq $17c9			beq 	_IGNLLoop
.17d0	c9 14		cmp #$14			cmp 	#$14 						; Backspace ?
.17d2	f0 11		beq $17e5			beq 	_IGNBackspace
.17d4	c9 0d		cmp #$0d			cmp 	#$0D 						; Return ?
.17d6	f0 17		beq $17ef			beq 	_IGNExit
.17d8	c0 50		cpy #$50			cpy 	#80 						; buffer full ?
.17da	f0 ed		beq $17c9			beq 	_IGNLLoop
.17dc	99 0a 04	sta $040a,y			sta 	InputBuffer,y
.17df	c8		iny				iny
.17e0	20 fe 17	jsr $17fe			jsr 	IGNLEchoIfScreen
.17e3	80 e4		bra $17c9			bra 	_IGNLLoop
.17e5					_IGNBackspace:
.17e5	c0 00		cpy #$00			cpy 	#0
.17e7	f0 e0		beq $17c9			beq 	_IGNLLoop
.17e9	20 fe 17	jsr $17fe			jsr 	IGNLEchoIfScreen
.17ec	88		dey				dey
.17ed	80 da		bra $17c9			bra 	_IGNLLoop
.17ef					_IGNExit:
.17ef	20 fe 17	jsr $17fe			jsr 	IGNLEchoIfScreen
.17f2	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.17f4	99 0a 04	sta $040a,y			sta 	InputBuffer,y
.17f7	9c 5b 04	stz $045b			stz 	InputBufferPos 				; reset position to start of input buffer.
.17fa	7a		ply				ply
.17fb	fa		plx				plx
.17fc	68		pla				pla
.17fd	60		rts				rts
.17fe					IGNLEchoIfScreen:
.17fe	ae 5d 04	ldx $045d			ldx 	currentChannel
.1801	d0 03		bne $1806			bne 	_IGNLEExit
.1803	20 35 1b	jsr $1b35			jsr 	VectorPrintCharacter
.1806					_IGNLEExit:
.1806	60		rts				rts
.040a					InputBuffer:
>040a							.fill 	81
.045b					InputBufferPos:
>045b							.fill 	1
.1807					GetInteger8Bit:
.1807	20 46 2a	jsr $2a46			jsr 	FloatIntegerPart
.180a	b5 41		lda $41,x			lda 	NSMantissa0,x
.180c	60		rts				rts
.180d					GetInteger16Bit:
.180d	20 46 2a	jsr $2a46			jsr 	FloatIntegerPart
.1810	34 35		bit $35,x			bit 	NSStatus,x
.1812	30 09		bmi $181d			bmi 	Negate16Bit
.1814	b5 41		lda $41,x			lda 	NSMantissa0,x
.1816	85 2f		sta $2f				sta 	zTemp0
.1818	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.181a	85 30		sta $30				sta 	zTemp0+1
.181c	60		rts				rts
.181d					Negate16Bit:
.181d	38		sec				sec
.181e	a9 00		lda #$00			lda 	#0
.1820	f5 41		sbc $41,x			sbc 	NSMantissa0,x
.1822	95 41		sta $41,x			sta 	NSMantissa0,x
.1824	85 2f		sta $2f				sta 	zTemp0
.1826	a9 00		lda #$00			lda 	#0
.1828	f5 4d		sbc $4d,x			sbc 	NSMantissa1,x
.182a	95 4d		sta $4d,x			sta 	NSMantissa1,x
.182c	85 30		sta $30				sta 	zTemp0+1
.182e	60		rts				rts
.182f					UnaryJoy:
.182f	fa		plx				plx
.1830	20 07 18	jsr $1807			jsr 	GetInteger8Bit 				; port #
.1833	48		pha				pha 								; zero the result.
.1834	20 0b 2e	jsr $2e0b			jsr 	FloatSetZero
.1837	68		pla				pla
.1838	5a		phy				phy
.1839	da		phx				phx
.183a	20 56 ff	jsr $ff56			jsr 	X16_joystick_get 			; read joystick.
.183d	c0 00		cpy #$00			cpy 	#0 							; check no hardware
.183f	d0 10		bne $1851			bne 	_UJNoHardware
.1841	a8		tay				tay 								; move XA -> AY
.1842	8a		txa				txa
.1843	fa		plx				plx 								; we can update it now.
.1844	49 ff		eor #$ff			eor 	#$FF
.1846	95 4d		sta $4d,x			sta 	NSMantissa1,x
.1848	98		tya				tya
.1849	49 ff		eor #$ff			eor 	#$FF
.184b	95 41		sta $41,x			sta 	NSMantissa0,x
.184d	7a		ply				ply 								; restore Y
.184e	4c 29 10	jmp $1029			jmp 	NextCommand
.1851					_UJNoHardware:
.1851	fa		plx				plx
.1852	7a		ply				ply
.1853	a9 01		lda #$01			lda 	#1 							; set result to -1
.1855	20 0d 2e	jsr $2e0d			jsr 	FloatSetByte
.1858	20 cd 2d	jsr $2dcd			jsr 	FloatNegate
.185b	4c 29 10	jmp $1029			jmp 	NextCommand
.185e					UnaryLen:
.185e	fa		plx				plx
.185f	b5 41		lda $41,x			lda 	NSMantissa0,x 				; string address.
.1861	85 2f		sta $2f				sta 	zTemp0
.1863	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.1865	85 30		sta $30				sta 	zTemp0+1
.1867	b2 2f		lda ($2f)			lda 	(zTemp0) 					; get length
.1869	20 0d 2e	jsr $2e0d			jsr 	FloatSetByte
.186c	4c 29 10	jmp $1029			jmp 	NextCommand
.186f					LinkFloatAdd:
.186f	fa		plx				plx
.1870	5a		phy			phy
.1871	20 2f 28	jsr $282f		jsr	FloatAdd
.1874	7a		ply			ply
.1875	4c 29 10	jmp $1029			jmp 	NextCommand
.1878					LinkFloatSubtract:
.1878	fa		plx				plx
.1879	5a		phy			phy
.187a	20 29 28	jsr $2829		jsr	FloatSubtract
.187d	7a		ply			ply
.187e	4c 29 10	jmp $1029			jmp 	NextCommand
.1881					LinkFloatMultiply:
.1881	fa		plx				plx
.1882	5a		phy			phy
.1883	20 cb 2a	jsr $2acb		jsr	FloatMultiply
.1886	7a		ply			ply
.1887	4c 29 10	jmp $1029			jmp 	NextCommand
.188a					LinkFloatDivide:
.188a	fa		plx				plx
.188b	5a		phy			phy
.188c	20 54 29	jsr $2954		jsr	FloatDivide
.188f	b0 5c		bcs $18ed		bcs	DivZeroError
.1891	7a		ply			ply
.1892	4c 29 10	jmp $1029			jmp 	NextCommand
.1895					LinkFloatPower:
.1895	fa		plx				plx
.1896	5a		phy			phy
.1897	20 d4 30	jsr $30d4		jsr	FloatPower
.189a	b0 4e		bcs $18ea		bcs	MapRangeError
.189c	7a		ply			ply
.189d	4c 29 10	jmp $1029			jmp 	NextCommand
.18a0					LinkCompareGreater:
.18a0	fa		plx				plx
.18a1	5a		phy			phy
.18a2	20 d8 28	jsr $28d8		jsr	CompareGreater
.18a5	7a		ply			ply
.18a6	4c 29 10	jmp $1029			jmp 	NextCommand
.18a9					LinkCompareEqual:
.18a9	fa		plx				plx
.18aa	5a		phy			phy
.18ab	20 ba 28	jsr $28ba		jsr	CompareEqual
.18ae	7a		ply			ply
.18af	4c 29 10	jmp $1029			jmp 	NextCommand
.18b2					LinkCompareLess:
.18b2	fa		plx				plx
.18b3	5a		phy			phy
.18b4	20 d0 28	jsr $28d0		jsr	CompareLess
.18b7	7a		ply			ply
.18b8	4c 29 10	jmp $1029			jmp 	NextCommand
.18bb					LinkCompareGreaterEqual:
.18bb	fa		plx				plx
.18bc	5a		phy			phy
.18bd	20 e8 28	jsr $28e8		jsr	CompareGreaterEqual
.18c0	7a		ply			ply
.18c1	4c 29 10	jmp $1029			jmp 	NextCommand
.18c4					LinkCompareNotEqual:
.18c4	fa		plx				plx
.18c5	5a		phy			phy
.18c6	20 ca 28	jsr $28ca		jsr	CompareNotEqual
.18c9	7a		ply			ply
.18ca	4c 29 10	jmp $1029			jmp 	NextCommand
.18cd					LinkCompareLessEqual:
.18cd	fa		plx				plx
.18ce	5a		phy			phy
.18cf	20 e0 28	jsr $28e0		jsr	CompareLessEqual
.18d2	7a		ply			ply
.18d3	4c 29 10	jmp $1029			jmp 	NextCommand
.18d6					LinkFloatIntegerPartDown:
.18d6	fa		plx				plx
.18d7	5a		phy			phy
.18d8	20 6a 2a	jsr $2a6a		jsr	FloatIntegerPartDown
.18db	7a		ply			ply
.18dc	4c 29 10	jmp $1029			jmp 	NextCommand
.18df					LinkFloatSquareRoot:
.18df	fa		plx				plx
.18e0	5a		phy			phy
.18e1	20 56 31	jsr $3156		jsr	FloatSquareRoot
.18e4	b0 04		bcs $18ea		bcs	MapRangeError
.18e6	7a		ply			ply
.18e7	4c 29 10	jmp $1029			jmp 	NextCommand
.18ea					MapRangeError:
.18ea	4c a8 26	jmp $26a8		jmp	ErrorV_range
.18ed					DivZeroError:
.18ed	4c 31 27	jmp $2731		jmp	ErrorV_divzero
.18f0					LinkFloatLogarithm:
.18f0	fa		plx				plx
.18f1	5a		phy			phy
.18f2	20 60 30	jsr $3060		jsr	FloatLogarithm
.18f5	b0 f3		bcs $18ea		bcs	MapRangeError
.18f7	7a		ply			ply
.18f8	4c 29 10	jmp $1029			jmp 	NextCommand
.18fb					LinkFloatExponent:
.18fb	fa		plx				plx
.18fc	5a		phy			phy
.18fd	20 5d 2f	jsr $2f5d		jsr	FloatExponent
.1900	7a		ply			ply
.1901	4c 29 10	jmp $1029			jmp 	NextCommand
.1904					LinkFloatCosine:
.1904	fa		plx				plx
.1905	5a		phy			phy
.1906	20 51 2f	jsr $2f51		jsr	FloatCosine
.1909	7a		ply			ply
.190a	4c 29 10	jmp $1029			jmp 	NextCommand
.190d					LinkFloatSine:
.190d	fa		plx				plx
.190e	5a		phy			phy
.190f	20 f1 30	jsr $30f1		jsr	FloatSine
.1912	7a		ply			ply
.1913	4c 29 10	jmp $1029			jmp 	NextCommand
.1916					LinkFloatTangent:
.1916	fa		plx				plx
.1917	5a		phy			phy
.1918	20 62 31	jsr $3162		jsr	FloatTangent
.191b	7a		ply			ply
.191c	4c 29 10	jmp $1029			jmp 	NextCommand
.191f					LinkFloatArcTan:
.191f	fa		plx				plx
.1920	5a		phy			phy
.1921	20 36 2e	jsr $2e36		jsr	FloatArcTan
.1924	b0 c4		bcs $18ea		bcs	MapRangeError
.1926	7a		ply			ply
.1927	4c 29 10	jmp $1029			jmp 	NextCommand
.192a					LinkFloatCompare:
.192a	fa		plx				plx
.192b	5a		phy			phy
.192c	20 f0 28	jsr $28f0		jsr	FloatCompare
.192f	7a		ply			ply
.1930	4c 29 10	jmp $1029			jmp 	NextCommand
.1933					LinkDivideInt32:
.1933	fa		plx				plx
.1934	5a		phy			phy
.1935	20 7e 29	jsr $297e		jsr	DivideInt32
.1938	b0 b0		bcs $18ea		bcs	MapRangeError
.193a	7a		ply			ply
.193b	4c 29 10	jmp $1029			jmp 	NextCommand
.193e					StackSaveCurrentPosition:
.193e	20 94 10	jsr $1094			jsr 	FixUpY 						; codePtr,Y is corrected so Y = 0
.1941	5a		phy				phy
.1942	a0 02		ldy #$02			ldy 	#2
.1944	a5 28		lda $28				lda 	codePtr
.1946	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.1948	c8		iny				iny
.1949	a5 29		lda $29				lda 	codePtr+1
.194b	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.194d	7a		ply				ply
.194e	60		rts				rts
.194f					StackLoadCurrentPosition:
.194f	a0 02		ldy #$02			ldy 	#2
.1951	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1953	85 28		sta $28				sta 	codePtr
.1955	c8		iny				iny
.1956	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1958	85 29		sta $29				sta 	codePtr+1
.195a	a0 00		ldy #$00			ldy 	#0
.195c	60		rts				rts
.195d					XCommandMouse:
.195d	fa		plx				plx
.195e	20 07 18	jsr $1807			jsr 	GetInteger8Bit 				; mouse control.
.1961	ca		dex				dex
.1962	da		phx				phx
.1963	5a		phy				phy
.1964	48		pha				pha
.1965	38		sec				sec 								; get screen resolution
.1966	20 5f ff	jsr $ff5f			jsr 	X16_screen_mode
.1969	68		pla				pla
.196a	20 68 ff	jsr $ff68			jsr 	X16_mouse_config 			; config the mouse
.196d	7a		ply				ply
.196e	fa		plx				plx
.196f	4c 29 10	jmp $1029			jmp 	NextCommand
.1972					XUnaryMB:
.1972	fa		plx				plx
.1973	20 a1 19	jsr $19a1			jsr 	XUnaryMouseCommon
.1976	a5 33		lda $33				lda 	zTemp2
.1978	e8		inx				inx
.1979	20 0d 2e	jsr $2e0d			jsr 	FloatSetByte
.197c	4c 29 10	jmp $1029			jmp 	NextCommand
.197f					XUnaryMX:
.197f	fa		plx				plx
.1980	20 a1 19	jsr $19a1			jsr 	XUnaryMouseCommon
.1983	a5 2f		lda $2f				lda 	zTemp0
.1985	e8		inx				inx
.1986	20 0d 2e	jsr $2e0d			jsr 	FloatSetByte
.1989	a5 30		lda $30				lda 	zTemp0+1
.198b	95 4d		sta $4d,x			sta 	NSMantissa1,x
.198d	4c 29 10	jmp $1029			jmp 	NextCommand
.1990					XUnaryMY:
.1990	fa		plx				plx
.1991	20 a1 19	jsr $19a1			jsr 	XUnaryMouseCommon
.1994	a5 31		lda $31				lda 	zTemp1
.1996	e8		inx				inx
.1997	20 0d 2e	jsr $2e0d			jsr 	FloatSetByte
.199a	a5 32		lda $32				lda 	zTemp1+1
.199c	95 4d		sta $4d,x			sta 	NSMantissa1,x
.199e	4c 29 10	jmp $1029			jmp 	NextCommand
.19a1					XUnaryMouseCommon:
.19a1	da		phx				phx
.19a2	5a		phy				phy
.19a3	a2 2f		ldx #$2f			ldx 	#zTemp0
.19a5	20 6b ff	jsr $ff6b			jsr 	X16_mouse_get
.19a8	85 33		sta $33				sta 	zTemp2
.19aa	7a		ply				ply
.19ab	fa		plx				plx
.19ac	60		rts				rts
.19ad					NegateTOS:
.19ad	fa		plx				plx
.19ae	20 cd 2d	jsr $2dcd			jsr 	FloatNegate
.19b1	4c 29 10	jmp $1029			jmp 	NextCommand
.19b4					CommandNewLine:
.19b4	fa		plx				plx
.19b5	9c 68 05	stz $0568			stz 	stringInitialised
.19b8	a2 ff		ldx #$ff			ldx 	#$FF
.19ba	4c 29 10	jmp $1029			jmp 	NextCommand
.19bd					CommandNext:
.19bd	fa		plx				plx
.19be					_CNRetry:
.19be	a9 d3		lda #$d3			lda 	#FRAME_FOR 					; find the FOR
.19c0	20 21 15	jsr $1521			jsr 	StackFindFrame
.19c3	20 94 10	jsr $1094			jsr 	FixUpY 						; so we can use Y
.19c6	b5 41		lda $41,x			lda 	NSMantissa0,x 				; check no index variable, both are $FF
.19c8	35 4d		and $4d,x			and 	NSMantissa1,x
.19ca	c9 ff		cmp #$ff			cmp 	#$FF
.19cc	f0 16		beq $19e4			beq 	_CNNoIndexVariable
.19ce	b5 41		lda $41,x			lda 	NSMantissa0,x
.19d0	a0 05		ldy #$05			ldy 	#5
.19d2	d1 24		cmp ($24),y			cmp 	(runtimeStackPtr),y
.19d4	d0 07		bne $19dd			bne 	_CNNIndexFail
.19d6	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.19d8	c8		iny				iny
.19d9	d1 24		cmp ($24),y			cmp 	(runtimeStackPtr),y
.19db	f0 07		beq $19e4			beq 	_CNNoIndexVariable
.19dd					_CNNIndexFail:
.19dd	a0 00		ldy #$00			ldy 	#0 							; so we don't fix up Y again !
.19df	20 13 15	jsr $1513			jsr 	StackCloseFrame 			; close this frame
.19e2	80 da		bra $19be			bra 	_CNRetry
.19e4					_CNNoIndexVariable:
.19e4	ca		dex				dex
.19e5	a0 04		ldy #$04			ldy 	#4 							; check for optimised NEXT
.19e7	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.19e9	29 40		and #$40			and 	#$40	 					; bit 6
.19eb	d0 55		bne $1a42			bne 	_CNOptimisedNext
.19ed	a0 05		ldy #$05			ldy 	#5 							; copy address to zTemp0, save for write back
.19ef	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.19f1	48		pha				pha
.19f2	85 2f		sta $2f				sta 	zTemp0
.19f4	c8		iny				iny
.19f5	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.19f7	18		clc				clc
.19f8	6d 07 04	adc $0407			adc 	variableStartPage 			; point to variable page.
.19fb	48		pha				pha
.19fc	85 30		sta $30				sta 	zTemp0+1
.19fe	20 b7 1c	jsr $1cb7			jsr 	ReadFloatZTemp0Sub 			; read current index onto stack.
.1a01	a0 07		ldy #$07			ldy 	#7  						; read step onto stack +1
.1a03	e8		inx				inx
.1a04	20 85 1a	jsr $1a85			jsr 	CopyOffsetYToTOS
.1a07	20 2f 28	jsr $282f			jsr 	FloatAdd
.1a0a	68		pla				pla 								; restore address
.1a0b	85 30		sta $30				sta 	zTemp0+1
.1a0d	68		pla				pla
.1a0e	85 2f		sta $2f				sta 	zTemp0
.1a10	20 92 22	jsr $2292			jsr 	WriteFloatZTemp0Sub			; write float.
.1a13	e8		inx				inx  								; recover written
.1a14	e8		inx				inx 								; load offset
.1a15	a0 0d		ldy #$0d			ldy 	#13
.1a17	20 85 1a	jsr $1a85			jsr 	CopyOffsetYToTOS
.1a1a	20 f0 28	jsr $28f0			jsr 	FloatCompare 				; and compare the floats.
.1a1d	ca		dex				dex 								; throw result (in NSMantissa0+1)
.1a1e	a0 0c		ldy #$0c			ldy 	#12 						; get the sign of the step.
.1a20	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1a22	30 08		bmi $1a2c			bmi 	_CNDownStep
.1a24	b5 42		lda $42,x			lda 	NSMantissa0+1,x 			; get comparator
.1a26	c9 01		cmp #$01			cmp 	#1 							; gone higher
.1a28	f0 10		beq $1a3a			beq 	_CNExitFor 					; if so exit the loop
.1a2a	80 06		bra $1a32			bra 	_CNLoopBack
.1a2c					_CNDownStep:
.1a2c	b5 42		lda $42,x			lda 	NSMantissa0+1,x 			; get comparator
.1a2e	c9 ff		cmp #$ff			cmp 	#255 						; gone lower
.1a30	f0 08		beq $1a3a			beq 	_CNExitFor
.1a32					_CNLoopBack:
.1a32	20 4f 19	jsr $194f			jsr 	StackLoadCurrentPosition 	; loop back
.1a35	a0 00		ldy #$00			ldy 	#0
.1a37	4c 29 10	jmp $1029			jmp 	NextCommand
.1a3a					_CNExitFor:
.1a3a	20 13 15	jsr $1513			jsr 	StackCloseFrame 			; remove the frame and exit
.1a3d	a0 00		ldy #$00			ldy 	#0
.1a3f	4c 29 10	jmp $1029			jmp 	NextCommand
.1a42					_CNOptimisedNext:
.1a42	a0 05		ldy #$05			ldy 	#5 							; copy address to zTemp0, save for write back
.1a44	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1a46	85 2f		sta $2f				sta 	zTemp0
.1a48	c8		iny				iny
.1a49	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1a4b	18		clc				clc
.1a4c	6d 07 04	adc $0407			adc 	variableStartPage 			; point to variable page.
.1a4f	85 30		sta $30				sta 	zTemp0+1
.1a51	a0 07		ldy #$07			ldy 	#7 							; STEP value
.1a53	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1a55	a0 ff		ldy #$ff			ldy 	#$FF
.1a57	18		clc				clc
.1a58					_CNOIncrement:
.1a58	c8		iny				iny
.1a59	71 2f		adc ($2f),y			adc 	(zTemp0),y
.1a5b	91 2f		sta ($2f),y			sta 	(zTemp0),y
.1a5d	f0 f9		beq $1a58			beq 	_CNOIncrement
.1a5f	18		clc				clc
.1a60	a5 24		lda $24				lda 	runtimeStackPtr
.1a62	69 0d		adc #$0d			adc 	#13
.1a64	85 31		sta $31				sta 	zTemp1
.1a66	a5 25		lda $25				lda 	runtimeStackPtr+1
.1a68	69 00		adc #$00			adc 	#0
.1a6a	85 32		sta $32				sta 	zTemp1+1
.1a6c	a0 00		ldy #$00			ldy 	#0
.1a6e	b1 31		lda ($31),y			lda 	(zTemp1),y 					; byte 0
.1a70	d1 2f		cmp ($2f),y			cmp 	(zTemp0),y
.1a72	c8		iny				iny
.1a73	b1 31		lda ($31),y			lda 	(zTemp1),y 					; byte 1
.1a75	f1 2f		sbc ($2f),y			sbc 	(zTemp0),y
.1a77	c8		iny				iny
.1a78	b1 31		lda ($31),y			lda 	(zTemp1),y 					; byte 2
.1a7a	f1 2f		sbc ($2f),y			sbc 	(zTemp0),y
.1a7c	c8		iny				iny
.1a7d	b1 31		lda ($31),y			lda 	(zTemp1),y 					; byte 3
.1a7f	f1 2f		sbc ($2f),y			sbc 	(zTemp0),y
.1a81	90 b7		bcc $1a3a			bcc	 	_CNExitFor
.1a83	80 ad		bra $1a32			bra 	_CNLoopBack
.1a85					CopyOffsetYToTOS:
.1a85	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1a87	95 41		sta $41,x			sta 	NSMantissa0,x
.1a89	c8		iny				iny
.1a8a	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1a8c	95 4d		sta $4d,x			sta 	NSMantissa1,x
.1a8e	c8		iny				iny
.1a8f	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1a91	95 59		sta $59,x			sta 	NSMantissa2,x
.1a93	c8		iny				iny
.1a94	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1a96	95 65		sta $65,x			sta 	NSMantissa3,x
.1a98	c8		iny				iny
.1a99	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1a9b	95 71		sta $71,x			sta 	NSExponent,x
.1a9d	c8		iny				iny
.1a9e	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1aa0	95 35		sta $35,x			sta 	NSStatus,x
.1aa2	60		rts				rts
.1aa3	4c 29 10	jmp $1029			jmp 	NextCommand
.1aa6					NotTOS:
.1aa6	fa		plx				plx
.1aa7	20 46 2a	jsr $2a46			jsr 	FloatIntegerPart
.1aaa	74 59		stz $59,x			stz 	NSMantissa2,x 				; chop down to 16 bit.
.1aac	74 65		stz $65,x			stz 	NSMantissa3,x
.1aae	20 cd 2d	jsr $2dcd			jsr 	FloatNegate		 			; negate
.1ab1	e8		inx				inx 								; and subtract 1.
.1ab2	a9 01		lda #$01			lda 	#1
.1ab4	20 0d 2e	jsr $2e0d			jsr 	FloatSetByte
.1ab7	20 29 28	jsr $2829			jsr 	FloatSubtract
.1aba					_NotTOSSkip:
.1aba	4c 29 10	jmp $1029			jmp 	NextCommand
.1abd					CommandOn:
.1abd	fa		plx				plx
.1abe	20 07 18	jsr $1807			jsr 	GetInteger8Bit 				; get the integer part, the ON x GOTO bit
.1ac1	8d 5c 04	sta $045c			sta 	onCount 					; save it.
.1ac4	20 94 10	jsr $1094			jsr 	FixUpY 						; Y = 0
.1ac7					_CONFind:
.1ac7	ce 5c 04	dec $045c			dec 	onCount 					; reached zero, do this one
.1aca	f0 0c		beq $1ad8			beq 	_CONFound
.1acc	c8		iny				iny 								; skip over the token (GOTO or GOSUB page, and line #)
.1acd	c8		iny				iny
.1ace	c8		iny				iny
.1acf	c8		iny				iny
.1ad0	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a moreon after it, if so we can keep going.
.1ad2	c8		iny				iny
.1ad3	c9 aa		cmp #$aa			cmp 	#PCD_MOREON
.1ad5	f0 f0		beq $1ac7			beq 	_CONFind
.1ad7	88		dey				dey 								; point to character after last GOTO/GOSUB
.1ad8					_CONFound:
.1ad8	4c 29 10	jmp $1029			jmp 	NextCommand
.1adb					CommandMoreOn:
.1adb	fa		plx				plx
.1adc	c8		iny				iny 								; so it goes to the first non-goto/gosub
.1add	c8		iny				iny
.1ade	c8		iny				iny
.1adf	4c 29 10	jmp $1029			jmp 	NextCommand
.045c					onCount:
>045c							.fill 	1
.1ae2					UnaryPeek:
.1ae2	fa		plx				plx
.1ae3	20 0d 18	jsr $180d			jsr 	GetInteger16Bit
.1ae6	da		phx				phx
.1ae7	5a		phy				phy
.1ae8	a6 2f		ldx $2f				ldx 	zTemp0
.1aea	a4 30		ldy $30				ldy 	zTemp0+1
.1aec	20 23 24	jsr $2423			jsr 	XPeekMemory
.1aef	7a		ply				ply
.1af0	fa		plx				plx
.1af1	20 0d 2e	jsr $2e0d			jsr 	FloatSetByte
.1af4	4c 29 10	jmp $1029			jmp 	NextCommand
.1af7					CommandPOKE:
.1af7	fa		plx				plx
.1af8	da		phx				phx 								; save XY
.1af9	5a		phy				phy
.1afa	20 07 18	jsr $1807			jsr 	GetInteger8Bit 				; get byte to POKE and save it
.1afd	48		pha				pha
.1afe	b5 4c		lda $4c,x			lda 	NSMantissa1-1,x 			; YX = address from Mantissa next up
.1b00	a8		tay				tay
.1b01	b5 40		lda $40,x			lda 	NSMantissa0-1,x
.1b03	aa		tax				tax
.1b04	68		pla				pla
.1b05	20 0f 24	jsr $240f			jsr 	XPokeMemory
.1b08	7a		ply				ply 								; restore YX and drop 2
.1b09	fa		plx				plx
.1b0a	ca		dex				dex
.1b0b	ca		dex				dex
.1b0c	4c 29 10	jmp $1029			jmp 	NextCommand
.1b0f					UnaryPos:
.1b0f	fa		plx				plx
.1b10	20 a2 23	jsr $23a2			jsr 	XGetHPos
.1b13	20 0d 2e	jsr $2e0d			jsr 	FloatSetByte
.1b16	4c 29 10	jmp $1029			jmp 	NextCommand
.1b19					GetChannel:
.1b19	fa		plx				plx
.1b1a	ad 5d 04	lda $045d			lda 	currentChannel
.1b1d	e8		inx				inx
.1b1e	20 0d 2e	jsr $2e0d			jsr 	FloatSetByte
.1b21	4c 29 10	jmp $1029			jmp 	NextCommand
.1b24					SetChannel:
.1b24	fa		plx				plx
.1b25	20 46 2a	jsr $2a46			jsr 	FloatIntegerPart
.1b28	b5 41		lda $41,x			lda 	NSMantissa0,x
.1b2a	8d 5d 04	sta $045d			sta 	currentChannel
.1b2d	ca		dex				dex
.1b2e	4c 29 10	jmp $1029			jmp 	NextCommand
.1b31					SetDefaultChannel:
.1b31	9c 5d 04	stz $045d			stz 	currentChannel
.1b34	60		rts				rts
.1b35					VectorPrintCharacter:
.1b35	da		phx				phx
.1b36	ae 5d 04	ldx $045d			ldx 	currentChannel
.1b39	20 4d 24	jsr $244d			jsr 	XPrintCharacterToChannel
.1b3c	fa		plx				plx
.1b3d	60		rts				rts
.1b3e					VectorGetCharacter:
.1b3e	da		phx				phx
.1b3f	ae 5d 04	ldx $045d			ldx 	currentChannel
.1b42	20 86 23	jsr $2386			jsr 	XGetCharacterFromChannel
.1b45	fa		plx				plx
.1b46	60		rts				rts
.045d					currentChannel:
>045d							.fill 	1
.1b47					PrintNumber:
.1b47	fa		plx				plx
.1b48	a9 07		lda #$07			lda 	#7
.1b4a	20 f3 2c	jsr $2cf3			jsr 	FloatToString 				; to number in decimal buffer
.1b4d	ca		dex				dex 								; drop
.1b4e	da		phx				phx
.1b4f	a2 00		ldx #$00			ldx 	#0 							; print buffer.
.1b51					_PNLoop:
.1b51	bd 94 05	lda $0594,x			lda 	decimalBuffer,x
.1b54	20 35 1b	jsr $1b35			jsr 	VectorPrintCharacter
.1b57	e8		inx				inx
.1b58	bd 94 05	lda $0594,x			lda	 	decimalBuffer,x
.1b5b	d0 f4		bne $1b51			bne 	_PNLoop
.1b5d	a9 20		lda #$20			lda 	#32 						; trailing space
.1b5f	20 35 1b	jsr $1b35			jsr 	VectorPrintCharacter
.1b62	fa		plx				plx
.1b63	4c 29 10	jmp $1029			jmp 	NextCommand
.1b66					PrintString:
.1b66	fa		plx				plx
.1b67	b5 41		lda $41,x			lda 	NSMantissa0,x 				; point zTemp0 to string
.1b69	85 2f		sta $2f				sta 	zTemp0
.1b6b	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.1b6d	85 30		sta $30				sta 	zTemp0+1
.1b6f	ca		dex				dex 								; drop
.1b70	da		phx				phx
.1b71	5a		phy				phy
.1b72	b2 2f		lda ($2f)			lda 	(zTemp0) 					; X = count
.1b74	aa		tax				tax
.1b75	a0 01		ldy #$01			ldy 	#1 							; Y = position
.1b77					_PSLoop:
.1b77	e0 00		cpx #$00			cpx 	#0 							; complete ?
.1b79	f0 09		beq $1b84			beq 	_PSExit
.1b7b	ca		dex				dex 								; dec count
.1b7c	b1 2f		lda ($2f),y			lda 	(zTemp0),y 					; print char and bump
.1b7e	20 35 1b	jsr $1b35			jsr 	VectorPrintCharacter
.1b81	c8		iny				iny
.1b82	80 f3		bra $1b77			bra 	_PSLoop
.1b84					_PSExit:
.1b84	7a		ply				ply
.1b85	fa		plx				plx
.1b86	4c 29 10	jmp $1029			jmp 	NextCommand
.1b89					CommandPushN:
.1b89	fa		plx				plx
.1b8a	e8		inx				inx 								; next slot on stack
.1b8b	b1 28		lda ($28),y			lda 	(codePtr),y 				; exponent
.1b8d	95 71		sta $71,x			sta 	NSExponent,x
.1b8f	c8		iny				iny
.1b90	b1 28		lda ($28),y			lda 	(codePtr),y 				; mantissa
.1b92	95 41		sta $41,x			sta 	NSMantissa0,x
.1b94	c8		iny				iny
.1b95	b1 28		lda ($28),y			lda 	(codePtr),y
.1b97	95 4d		sta $4d,x			sta 	NSMantissa1,x
.1b99	c8		iny				iny
.1b9a	b1 28		lda ($28),y			lda 	(codePtr),y
.1b9c	95 59		sta $59,x			sta 	NSMantissa2,x
.1b9e	c8		iny				iny
.1b9f	b1 28		lda ($28),y			lda 	(codePtr),y
.1ba1	48		pha				pha
.1ba2	29 7f		and #$7f			and 	#$7F
.1ba4	95 65		sta $65,x			sta 	NSMantissa3,x
.1ba6	68		pla				pla 								; sign in mantissa3:7
.1ba7	29 80		and #$80			and 	#$80
.1ba9	95 35		sta $35,x			sta 	NSStatus,x
.1bab	c8		iny				iny
.1bac	4c 29 10	jmp $1029			jmp 	NextCommand
.1baf					CommandPushS:
.1baf	fa		plx				plx
.1bb0	e8		inx				inx 								; next slot on stack
.1bb1	18		clc				clc
.1bb2	98		tya				tya
.1bb3	65 28		adc $28				adc 	codePtr 					; the string is inline
.1bb5	95 41		sta $41,x			sta 	NSMantissa0,x
.1bb7	a5 29		lda $29				lda 	codePtr+1
.1bb9	69 00		adc #$00			adc 	#0
.1bbb	95 4d		sta $4d,x			sta 	NSMantissa1,x
.1bbd	74 59		stz $59,x			stz 	NSMantissa2,x
.1bbf	74 65		stz $65,x			stz 	NSMantissa3,x
.1bc1	a9 40		lda #$40			lda 	#NSSString
.1bc3	95 35		sta $35,x			sta 	NSStatus,x
.1bc5	98		tya				tya 								; string length +1 added to Y
.1bc6	38		sec				sec
.1bc7	71 28		adc ($28),y			adc 	(codePtr),y 				; next instruction
.1bc9	a8		tay				tay
.1bca	4c 29 10	jmp $1029			jmp 	NextCommand
.1bcd					CommandRead:
.1bcd	fa		plx				plx
.1bce	5a		phy				phy 								; save Y
.1bcf	20 00 1c	jsr $1c00			jsr 	ReadStringToBuffer 			; read element into buffer
.1bd2	e8		inx				inx									; space on stack
.1bd3	a9 5f		lda #$5f			lda 	#((ReadBufferSize) & $FF)
.1bd5	85 2f		sta $2f				sta 	0+zTemp0
.1bd7	a9 04		lda #$04			lda 	#((ReadBufferSize) >> 8) & $FF
.1bd9	85 30		sta $30				sta 	1+zTemp0
.1bdb	20 1f 21	jsr $211f			jsr 	ValEvaluateZTemp0
.1bde	b0 04		bcs $1be4			bcs 	_CRError 					; failed
.1be0	7a		ply				ply 								; restore Y
.1be1	4c 29 10	jmp $1029			jmp 	NextCommand
.1be4					_CRError:
.1be4	4c b8 26	jmp $26b8		jmp	ErrorV_value
.1be7					CommandReadString:
.1be7	fa		plx				plx
.1be8	5a		phy				phy 								; save Y
.1be9	20 00 1c	jsr $1c00			jsr 	ReadStringToBuffer 			; read text
.1bec	e8		inx				inx 								; make space on stack
.1bed	20 0b 2e	jsr $2e0b			jsr 	FloatSetZero 				; store as string on stack
.1bf0	a9 5f		lda #$5f			lda 	#ReadBufferSize & $FF
.1bf2	95 41		sta $41,x			sta 	NSMantissa0,x
.1bf4	a9 04		lda #$04			lda 	#ReadBufferSize >> 8
.1bf6	95 4d		sta $4d,x			sta 	NSMantissa1,x
.1bf8	a9 40		lda #$40			lda 	#NSSString
.1bfa	95 35		sta $35,x			sta 	NSStatus,x
.1bfc	7a		ply				ply 								; restore Y
.1bfd	4c 29 10	jmp $1029			jmp 	NextCommand
.1c00					ReadStringToBuffer:
.1c00	a9 93		lda #$93			lda 	#((ReadBumpNext) & $FF)
.1c02	8d 5f 05	sta $055f			sta 	0+ReadBumpNextVec
.1c05	a9 1c		lda #$1c			lda 	#((ReadBumpNext) >> 8) & $FF
.1c07	8d 60 05	sta $0560			sta 	1+ReadBumpNextVec
.1c0a	a9 66		lda #$66			lda 	#((ReadLookNext) & $FF)
.1c0c	8d 61 05	sta $0561			sta 	0+ReadLookNextVec
.1c0f	a9 1c		lda #$1c			lda 	#((ReadLookNext) >> 8) & $FF
.1c11	8d 62 05	sta $0562			sta 	1+ReadLookNextVec
.1c14					GetStringToBuffer:
.1c14	20 63 1c	jsr $1c63			jsr		GetLookNext 				; skip all leading spaces.
.1c17	f0 44		beq $1c5d			beq 	_RBError 					; end of data
.1c19	b0 f9		bcs $1c14			bcs 	GetStringToBuffer 			; switched to new data line.
.1c1b	c9 20		cmp #$20			cmp 	#' ' 						; non space got something
.1c1d	b0 05		bcs $1c24			bcs 	_RBNoSpace
.1c1f	20 60 1c	jsr $1c60			jsr 	GetBumpNext 				; consume space and loop round.
.1c22	80 f0		bra $1c14			bra 	GetStringToBuffer
.1c24					_RBNoSpace:
.1c24	9c 5f 04	stz $045f			stz 	ReadBufferSize 				; empty the buffer.
.1c27	c9 22		cmp #$22			cmp 	#'"' 						; is it a '"'
.1c29	d0 08		bne $1c33			bne 	_RBCommaSep
.1c2b	8d 5e 04	sta $045e			sta 	ReadSep 					; use as a seperator
.1c2e	20 60 1c	jsr $1c60			jsr 	GetBumpNext 				; consume the '"'
.1c31	80 05		bra $1c38			bra 	_RBGetText
.1c33					_RBCommaSep:
.1c33	a9 2c		lda #$2c			lda 	#","						; get till comma
.1c35	8d 5e 04	sta $045e			sta 	ReadSep
.1c38					_RBGetText:
.1c38	20 63 1c	jsr $1c63			jsr 	GetLookNext 				; what follows
.1c3b	b0 18		bcs $1c55			bcs 	_RBEndGet 					; if new DATA line, the end without consumption
.1c3d	20 60 1c	jsr $1c60			jsr 	GetBumpNext 				; consume it whatever
.1c40	cd 5e 04	cmp $045e			cmp 	ReadSep 					; if found the seperator.
.1c43	f0 10		beq $1c55			beq 	_RBEndGet 					; exit after consumption
.1c45	da		phx				phx
.1c46	ae 5f 04	ldx $045f			ldx 	ReadBufferSize 				; copy into buffer.
.1c49	ee 5f 04	inc $045f			inc 	ReadBufferSize
.1c4c	9d 60 04	sta $0460,x			sta 	ReadBuffer,x
.1c4f	9e 61 04	stz $0461,x			stz 	ReadBuffer+1,x 				; make ASCIIZ as well.
.1c52	fa		plx				plx
.1c53	80 e3		bra $1c38			bra 	_RBGetText
.1c55					_RBEndGet:
.1c55	c9 22		cmp #$22			cmp 	#'"'
.1c57	d0 03		bne $1c5c			bne 	_RBNotQuote
.1c59	20 60 1c	jsr $1c60			jsr 	GetBumpNext
.1c5c					_RBNotQuote:
.1c5c	60		rts				rts
.1c5d					_RBError:
.1c5d	4c 6d 27	jmp $276d		jmp	ErrorV_data
.1c60					GetBumpNext:
.1c60	6c 5f 05	jmp ($055f)			jmp 	(ReadBumpNextVec)
.1c63					GetLookNext:
.1c63	6c 61 05	jmp ($0561)			jmp 	(ReadLookNextVec)
.1c66					ReadLookNext:
.1c66	ad 63 05	lda $0563			lda 	dataRemaining 				; any data remaining
.1c69	f0 04		beq $1c6f			beq 	_RLNFindData
.1c6b	b2 2b		lda ($2b)			lda 	(objPtr) 					; return that object.
.1c6d	18		clc				clc
.1c6e	60		rts				rts
.1c6f					_RLNFindData:
.1c6f	b2 2b		lda ($2b)			lda 	(objPtr) 					; see where we are
.1c71	c9 ff		cmp #$ff			cmp 	#$FF 						; if at $FF then end, error.
.1c73	f0 1a		beq $1c8f			beq 	_RLNNoData
.1c75	c9 cf		cmp #$cf			cmp 	#PCD_CMD_DATA 				; Found DATA
.1c77	f0 05		beq $1c7e			beq 	_RLNHaveData
.1c79					_RLNNext:
.1c79	20 da 27	jsr $27da			jsr 	MoveObjectForward			; else scan forward.
.1c7c	80 f1		bra $1c6f			bra 	_RLNFindData
.1c7e					_RLNHaveData:
.1c7e	a0 01		ldy #$01			ldy 	#1 							; get length
.1c80	b1 2b		lda ($2b),y			lda 	(objPtr),y
.1c82	f0 f5		beq $1c79			beq 	_RLNNext 					; skip if DATA alone
.1c84	20 93 1c	jsr $1c93			jsr 	ReadBumpNext 				; advance by two
.1c87	20 93 1c	jsr $1c93			jsr 	ReadBumpNext
.1c8a	8d 63 05	sta $0563			sta 	dataRemaining 				; set data left count.
.1c8d	38		sec				sec
.1c8e	60		rts				rts
.1c8f					_RLNNoData:
.1c8f	a9 00		lda #$00			lda 	#0
.1c91	38		sec				sec
.1c92	60		rts				rts
.1c93					ReadBumpNext:
.1c93	e6 2b		inc $2b				inc 	objPtr
.1c95	d0 02		bne $1c99			bne 	_RBNSkip
.1c97	e6 2c		inc $2c				inc 	objPtr+1
.1c99					_RBNSkip:
.1c99	ce 63 05	dec $0563			dec 	dataRemaining
.1c9c	60		rts				rts
.045e					ReadSep:
>045e							.fill 	1
.045f					ReadBufferSize:
>045f							.fill 	1
.0460					ReadBuffer:
>0460							.fill 	255
.055f					ReadBumpNextVec:
>055f							.fill 	2
.0561					ReadLookNextVec:
>0561							.fill 	2
.1c9d					ReadFloatCommand:
.1c9d	fa		plx				plx
.1c9e	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.1ca0	85 2f		sta $2f				sta 	zTemp0 						; save in MSB
.1ca2	88		dey				dey 								; get the upper 3 bits
.1ca3	b1 28		lda ($28),y			lda 	(codePtr),y
.1ca5	29 07		and #$07			and 	#7
.1ca7	c8		iny				iny
.1ca8	c8		iny				iny
.1ca9	06 2f		asl $2f				asl 	zTemp0 						; shift zTemp0:A left
.1cab	2a		rol a				rol 	a 							; carry will be clear.
.1cac	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.1caf	85 30		sta $30				sta 	zTemp0+1
.1cb1	20 b7 1c	jsr $1cb7			jsr 	ReadFloatZTemp0Sub
.1cb4	4c 29 10	jmp $1029			jmp 	NextCommand
.1cb7					ReadFloatZTemp0Sub:
.1cb7	5a		phy				phy 								; start write
.1cb8	a0 01		ldy #$01			ldy 	#1
.1cba	e8		inx				inx
.1cbb	b2 2f		lda ($2f)			lda 	(zTemp0)
.1cbd	95 41		sta $41,x			sta 	NSMantissa0,x
.1cbf	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.1cc1	95 4d		sta $4d,x			sta 	NSMantissa1,x
.1cc3	c8		iny				iny
.1cc4	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.1cc6	95 59		sta $59,x			sta 	NSMantissa2,x
.1cc8	c8		iny				iny
.1cc9	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.1ccb	95 65		sta $65,x			sta 	NSMantissa3,x
.1ccd	c8		iny				iny
.1cce	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.1cd0	95 71		sta $71,x			sta 	NSExponent,x
.1cd2	c8		iny				iny
.1cd3	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.1cd5	95 35		sta $35,x			sta 	NSStatus,x
.1cd7	7a		ply				ply
.1cd8	60		rts				rts
.1cd9					ReadIntegerCommand:
.1cd9	fa		plx				plx
.1cda	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.1cdc	85 2f		sta $2f				sta 	zTemp0 						; save in MSB
.1cde	88		dey				dey 								; get the upper 3 bits
.1cdf	b1 28		lda ($28),y			lda 	(codePtr),y
.1ce1	29 07		and #$07			and 	#7
.1ce3	c8		iny				iny
.1ce4	c8		iny				iny
.1ce5	06 2f		asl $2f				asl 	zTemp0 						; shift zTemp0:A left
.1ce7	2a		rol a				rol 	a 							; carry will be clear.
.1ce8	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.1ceb	85 30		sta $30				sta 	zTemp0+1
.1ced	20 f3 1c	jsr $1cf3			jsr 	ReadIntegerZTemp0Sub
.1cf0	4c 29 10	jmp $1029			jmp 	NextCommand
.1cf3					ReadIntegerZTemp0Sub:
.1cf3	5a		phy				phy 								; start write
.1cf4	a0 01		ldy #$01			ldy 	#1
.1cf6	e8		inx				inx 								; prepare
.1cf7	74 59		stz $59,x			stz 	NSMantissa2,x
.1cf9	74 65		stz $65,x			stz 	NSMantissa3,x
.1cfb	74 71		stz $71,x			stz 	NSExponent,x
.1cfd	74 35		stz $35,x			stz 	NSStatus,x
.1cff	b1 2f		lda ($2f),y			lda 	(zTemp0),y 					; get MSB, do -ve code.
.1d01	30 08		bmi $1d0b			bmi 	_RIZNegative
.1d03	95 4d		sta $4d,x			sta 	NSMantissa1,x 				; +ve read
.1d05	b2 2f		lda ($2f)			lda 	(zTemp0)
.1d07	95 41		sta $41,x			sta 	NSMantissa0,x
.1d09	7a		ply				ply
.1d0a	60		rts				rts
.1d0b					_RIZNegative:
.1d0b	38		sec				sec 								; -ve read
.1d0c	a9 00		lda #$00			lda 	#0
.1d0e	f2 2f		sbc ($2f)			sbc 	(zTemp0)
.1d10	95 41		sta $41,x			sta 	NSMantissa0,x
.1d12	a9 00		lda #$00			lda 	#0
.1d14	f1 2f		sbc ($2f),y			sbc 	(zTemp0),y
.1d16	95 4d		sta $4d,x			sta 	NSMantissa1,x
.1d18	a9 80		lda #$80			lda 	#$80
.1d1a	95 35		sta $35,x			sta 	NSStatus,x
.1d1c	7a		ply				ply
.1d1d	60		rts				rts
.1d1e					ReadStringCommand:
.1d1e	fa		plx				plx
.1d1f	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.1d21	85 2f		sta $2f				sta 	zTemp0 						; save in MSB
.1d23	88		dey				dey 								; get the upper 3 bits
.1d24	b1 28		lda ($28),y			lda 	(codePtr),y
.1d26	29 07		and #$07			and 	#7
.1d28	c8		iny				iny
.1d29	c8		iny				iny
.1d2a	06 2f		asl $2f				asl 	zTemp0 						; shift zTemp0:A left
.1d2c	2a		rol a				rol 	a 							; carry will be clear.
.1d2d	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.1d30	85 30		sta $30				sta 	zTemp0+1
.1d32	20 38 1d	jsr $1d38			jsr 	ReadStringZTemp0Sub
.1d35	4c 29 10	jmp $1029			jmp 	NextCommand
.1d38					ReadStringZTemp0Sub:
.1d38	5a		phy				phy 								; start write
.1d39	e8		inx				inx 								; prepare
.1d3a	74 59		stz $59,x			stz 	NSMantissa2,x
.1d3c	74 65		stz $65,x			stz 	NSMantissa3,x
.1d3e	74 71		stz $71,x			stz 	NSExponent,x
.1d40	a9 40		lda #$40			lda 	#NSSString
.1d42	74 35		stz $35,x			stz 	NSStatus,x
.1d44	18		clc				clc
.1d45	b2 2f		lda ($2f)			lda 	(zTemp0)					; read address of block add 2.
.1d47	69 02		adc #$02			adc 	#2 							; this points to actual data
.1d49	95 41		sta $41,x			sta 	NSMantissa0,x 				; if address 0 the MSB will still be 0
.1d4b	a0 01		ldy #$01			ldy 	#1
.1d4d	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.1d4f	69 00		adc #$00			adc 	#0
.1d51	95 4d		sta $4d,x			sta 	NSMantissa1,x 				; +ve read
.1d53	d0 08		bne $1d5d			bne 	_RSZNoDefault 				; if read $00 use a default value.
.1d55	a9 5f		lda #$5f			lda 	#_RSZNull & $FF
.1d57	95 41		sta $41,x			sta 	NSMantissa0,x
.1d59	a9 1d		lda #$1d			lda 	#_RSZNull >> 8
.1d5b	95 4d		sta $4d,x			sta 	NSMantissa1,x
.1d5d					_RSZNoDefault:
.1d5d	7a		ply				ply
.1d5e	60		rts				rts
.1d5f					_RSZNull:
>1d5f	00						.byte 	0
.1d60					CommandRestore:
.1d60	fa		plx				plx
.1d61	20 67 1d	jsr $1d67			jsr 	RestoreCode
.1d64	4c 29 10	jmp $1029			jmp 	NextCommand
.1d67					RestoreCode:
.1d67	ad 04 04	lda $0404			lda 	runtimeHigh 				; reset pointer and page
.1d6a	85 2e		sta $2e				sta 	objPage+1
.1d6c	64 2d		stz $2d				stz  	objPage
.1d6e	9c 63 05	stz $0563			stz 	dataRemaining 				; no data remaining.
.1d71	60		rts				rts
.0563					dataRemaining:
>0563							.fill 	1		 					; 0 if not in data statement
.1d72					UnaryRND:
.1d72	fa		plx				plx
.1d73	34 35		bit $35,x			bit 	NSStatus,x 					; -ve then set seed from operand
.1d75	10 17		bpl $1d8e			bpl 	_URNoSeed
.1d77	20 60 2b	jsr $2b60			jsr 	FloatNormalise 				; some float value
.1d7a	b5 41		lda $41,x			lda 	NSMantissa0,x 				; copy to Mantissa
.1d7c	8d 64 05	sta $0564			sta 	randomSeed+0
.1d7f	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.1d81	8d 65 05	sta $0565			sta 	randomSeed+1
.1d84	b5 59		lda $59,x			lda 	NSMantissa2,x
.1d86	8d 66 05	sta $0566			sta 	randomSeed+2
.1d89	b5 65		lda $65,x			lda 	NSMantissa3,x
.1d8b	8d 67 05	sta $0567			sta 	randomSeed+3
.1d8e					_URNoSeed:
.1d8e	20 b0 1d	jsr $1db0			jsr 	RandomNumberGenerator 		; create a number and copy to mantissa
.1d91	ad 64 05	lda $0564			lda 	randomSeed+0
.1d94	95 41		sta $41,x			sta 	NSMantissa0,x
.1d96	ad 65 05	lda $0565			lda 	randomSeed+1
.1d99	95 4d		sta $4d,x			sta 	NSMantissa1,x
.1d9b	ad 66 05	lda $0566			lda 	randomSeed+2
.1d9e	95 59		sta $59,x			sta 	NSMantissa2,x
.1da0	ad 67 05	lda $0567			lda 	randomSeed+3
.1da3	29 7f		and #$7f			and 	#$7F
.1da5	95 65		sta $65,x			sta 	NSMantissa3,x
.1da7	a9 e1		lda #$e1			lda 	#(-31 & $FF)
.1da9	95 71		sta $71,x			sta 	NSExponent,x
.1dab	74 35		stz $35,x			stz 	NSStatus,x
.1dad	4c 29 10	jmp $1029			jmp 	NextCommand
.1db0					RandomNumberGenerator:
.1db0	5a		phy				phy
.1db1	ad 64 05	lda $0564			lda 	randomSeed+0 				; check if zero
.1db4	0d 65 05	ora $0565			ora 	randomSeed+1
.1db7	0d 66 05	ora $0566			ora 	randomSeed+2
.1dba	0d 67 05	ora $0567			ora 	randomSeed+3
.1dbd	d0 07		bne $1dc6			bne 	_RNGNoSeed
.1dbf	ce 67 05	dec $0567			dec 	randomSeed+3 				; if so tweak and flog
.1dc2	a0 64		ldy #$64			ldy 	#100
.1dc4	80 05		bra $1dcb			bra 	_RNGLoop
.1dc6					_RNGNoSeed:
.1dc6	a0 08		ldy #$08			ldy 	#8
.1dc8	ad 64 05	lda $0564			lda 	randomSeed+0
.1dcb					_RNGLoop:
.1dcb	0a		asl a				asl		a
.1dcc	2e 65 05	rol $0565			rol 	randomSeed+1
.1dcf	2e 66 05	rol $0566			rol 	randomSeed+2
.1dd2	2e 67 05	rol $0567			rol 	randomSeed+3
.1dd5	90 02		bcc $1dd9			bcc		_RNGSkip
.1dd7	49 c5		eor #$c5			eor 	#$C5
.1dd9					_RNGSkip:
.1dd9	88		dey				dey
.1dda	d0 ef		bne $1dcb			bne		_RNGLoop
.1ddc	8d 64 05	sta $0564			sta 	randomSeed+0
.1ddf	7a		ply				ply
.1de0	60		rts				rts
.0564					randomSeed:
>0564							.fill 	4
.1de1					StringConcatenate:
.1de1	fa		plx				plx
.1de2	ca		dex				dex
.1de3	b5 41		lda $41,x			lda 	NSMantissa0,x 				; copy strings to zTemp1 and zTemp2
.1de5	85 31		sta $31				sta 	zTemp1
.1de7	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.1de9	85 32		sta $32				sta 	zTemp1+1
.1deb	b5 42		lda $42,x			lda 	NSMantissa0+1,x
.1ded	85 33		sta $33				sta 	zTemp2
.1def	b5 4e		lda $4e,x			lda 	NSMantissa1+1,x
.1df1	85 34		sta $34				sta 	zTemp2+1
.1df3	18		clc				clc 								; work out total length
.1df4	b2 31		lda ($31)			lda 	(zTemp1)
.1df6	72 33		adc ($33)			adc 	(zTemp2)
.1df8	b0 18		bcs $1e12			bcs 	_BCLength 					; more than 255 characters.
.1dfa	48		pha				pha 								; save total
.1dfb	20 d8 1e	jsr $1ed8			jsr 	StringAllocTemp 			; space for result.
.1dfe	68		pla				pla 								; write total as first.
.1dff	92 22		sta ($22)			sta 	(zsTemp)
.1e01	20 15 1e	jsr $1e15			jsr 	_BCCopyZTemp1 				; copy zTemp1 to target
.1e04	a5 33		lda $33				lda 	zTemp2 						; copy address zTemp2->1
.1e06	85 31		sta $31				sta 	zTemp1
.1e08	a5 34		lda $34				lda 	zTemp2+1
.1e0a	85 32		sta $32				sta 	zTemp1+1
.1e0c	20 15 1e	jsr $1e15			jsr 	_BCCopyZTemp1 				; and copy it, e.g. zTemp2
.1e0f	4c 29 10	jmp $1029			jmp 	NextCommand
.1e12					_BCLength:
.1e12	4c a8 26	jmp $26a8		jmp	ErrorV_range
.1e15					_BCCopyZTemp1:
.1e15	b2 31		lda ($31)			lda 	(zTemp1) 					; bytes to copy
.1e17	f0 15		beq $1e2e			beq 	_BCCExit 					; none.
.1e19	da		phx				phx 								; save XY
.1e1a	5a		phy				phy
.1e1b	aa		tax				tax 								; count in X.
.1e1c	a0 01		ldy #$01			ldy 	#1
.1e1e					_BCCLoop:
.1e1e	e6 22		inc $22				inc 	zsTemp 						; bump pointer, pre-increment
.1e20	d0 02		bne $1e24			bne 	_BCCNoCarry
.1e22	e6 23		inc $23				inc 	zsTemp+1
.1e24					_BCCNoCarry:
.1e24	b1 31		lda ($31),y			lda 	(zTemp1),y				 	; copy bytes
.1e26	92 22		sta ($22)			sta 	(zsTemp)
.1e28	c8		iny				iny
.1e29	ca		dex				dex 								; X times
.1e2a	d0 f2		bne $1e1e			bne 	_BCCLoop
.1e2c	7a		ply				ply 								; restore YX
.1e2d	fa		plx				plx
.1e2e					_BCCExit:
.1e2e	60		rts				rts
.1e2f					XRuntimeSetup:
.1e2f	a9 ff		lda #$ff	 		lda 	#$FF 						; default banks to access.
.1e31	8d 6b 05	sta $056b	 		sta 	ramBank
.1e34	8d 6c 05	sta $056c	 		sta 	romBank
.1e37	60		rts				rts
.1e38					SignTOS:
.1e38	fa		plx				plx
.1e39	20 2d 2e	jsr $2e2d			jsr 	FloatIsZero 				; if zero
.1e3c	f0 0f		beq $1e4d			beq 	_SGZero  					; return Int Zero
.1e3e	b5 35		lda $35,x			lda 	NSStatus,x 					; get status w/sign
.1e40	48		pha				pha
.1e41	a9 01		lda #$01			lda 	#1 							; set result to 1
.1e43	20 0d 2e	jsr $2e0d			jsr 	FloatSetByte
.1e46	68		pla				pla
.1e47	29 80		and #$80			and		#$80 						; copy the sign byte out
.1e49	95 35		sta $35,x			sta 	NSStatus,x  				; so it will be -1 or 1
.1e4b	80 03		bra $1e50			bra 	_SGExit
.1e4d					_SGZero:
.1e4d	20 0b 2e	jsr $2e0b			jsr 	FloatSetZero
.1e50					_SGExit:
.1e50	4c 29 10	jmp $1029			jmp 	NextCommand
.1e53					CommandShift:
.1e53	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted command (X already pushed)
.1e55	c8		iny				iny
.1e56	0a		asl a				asl 	a 							; double into X
.1e57	aa		tax				tax
.1e58	7c 03 22	jmp ($2203,x)			jmp 	(ShiftVectorTable,x) 		; go there.
.1e5b					PrintTab:
.1e5b	fa		plx				plx
.1e5c	20 a2 23	jsr $23a2			jsr 	XGetHPos
.1e5f					_PTMod10:
.1e5f	38		sec				sec
.1e60	e9 0a		sbc #$0a			sbc 	#10
.1e62	b0 fb		bcs $1e5f			bcs 	_PTMod10
.1e64	49 ff		eor #$ff			eor 	#255 						; subtract from 10 effectively. negate it
.1e66	1a		inc a				inc 	a 							; if modulus is 0, then this will be -10 => 10
.1e67	80 15		bra $1e7e			bra 	PrintSpaceLoop
.1e69					PrintPos:
.1e69	fa		plx				plx
.1e6a	20 a2 23	jsr $23a2			jsr		XGetHPos 					; get current position
.1e6d	85 2f		sta $2f				sta 	zTemp0
.1e6f	38		sec				sec 								; calculate spaces required
.1e70	b5 41		lda $41,x			lda 	NSMantissa0,x
.1e72	ca		dex				dex
.1e73	e5 2f		sbc $2f				sbc 	zTemp0
.1e75	b0 07		bcs $1e7e			bcs 	PrintSpaceLoop 				; if >= 0 then do that many spaces
.1e77	4c 29 10	jmp $1029			jmp 	NextCommand
.1e7a					PrintSpace:
.1e7a	fa		plx				plx
.1e7b	b5 41		lda $41,x			lda 	NSMantissa0,x
.1e7d	ca		dex				dex
.1e7e					PrintSpaceLoop:
.1e7e	c9 00		cmp #$00			cmp 	#0
.1e80	f0 0a		beq $1e8c			beq 	_PSExit
.1e82	48		pha				pha
.1e83	a9 20		lda #$20			lda 	#" "
.1e85	20 35 1b	jsr $1b35			jsr 	VectorPrintCharacter
.1e88	68		pla				pla
.1e89	3a		dec a				dec 	a
.1e8a	80 f2		bra $1e7e			bra 	PrintSpaceLoop
.1e8c					_PSExit:
.1e8c	4c 29 10	jmp $1029			jmp 	NextCommand
.1e8f					CommandStop:
.1e8f	fa		plx				plx
.1e90	4c 5a 27	jmp $275a		jmp	ErrorV_stop
.1e93					Unary_Str:
.1e93	fa		plx				plx
.1e94	5a		phy				phy
.1e95	a9 08		lda #$08			lda 	#8 							; maximum decimal places.
.1e97	20 f3 2c	jsr $2cf3			jsr 	FloatToString 				; do the conversion.
.1e9a	a9 21		lda #$21			lda		#33 						; create buffer
.1e9c	20 d8 1e	jsr $1ed8			jsr 	StringAllocTemp 			; allocate memory
.1e9f	a0 01		ldy #$01			ldy 	#1  						; copy the converted string into the buffer.
.1ea1					_USCopy:
.1ea1	b9 93 05	lda $0593,y			lda 	decimalBuffer-1,y
.1ea4	f0 05		beq $1eab			beq 	_USExit
.1ea6	91 22		sta ($22),y			sta 	(zsTemp),y
.1ea8	c8		iny				iny
.1ea9	80 f6		bra $1ea1			bra 	_USCopy
.1eab					_USExit:
.1eab	98		tya				tya
.1eac	3a		dec a				dec 	a
.1ead	92 22		sta ($22)			sta 	(zsTemp)
.1eaf	7a		ply				ply
.1eb0	4c 29 10	jmp $1029			jmp 	NextCommand
.1eb3					StringInitialise:
.1eb3	48		pha				pha
.1eb4	ad 68 05	lda $0568			lda 	stringInitialised 			; already done
.1eb7	d0 11		bne $1eca			bne 	_SIExit
.1eb9	ad 02 04	lda $0402			lda 	stringHighMemory 			; copy high memory - 512 => stringTempPointer
.1ebc	8d 69 05	sta $0569			sta 	stringTempPointer
.1ebf	ad 03 04	lda $0403			lda 	stringHighMemory+1
.1ec2	3a		dec a				dec 	a
.1ec3	3a		dec a				dec 	a
.1ec4	8d 6a 05	sta $056a			sta 	stringTempPointer+1
.1ec7	ce 68 05	dec $0568			dec 	stringInitialised 			; set the initialised flag.
.1eca					_SIExit:
.1eca	a5 27		lda $27				lda 	availableMemory+1 			; check out of memory
.1ecc	1a		inc a				inc 	a
.1ecd	1a		inc a				inc 	a
.1ece	cd 03 04	cmp $0403			cmp 	stringHighMemory+1
.1ed1	b0 02		bcs $1ed5			bcs 	_SIMemory
.1ed3	68		pla				pla
.1ed4	60		rts				rts
.1ed5					_SIMemory:
.1ed5	4c b3 27	jmp $27b3		jmp	ErrorV_memory
.1ed8					StringAllocTemp:
.1ed8	20 b3 1e	jsr $1eb3			jsr 	StringInitialise 			; check it is initialised.
.1edb	49 ff		eor #$ff			eor 	#$FF 						; subtract A+1 from temp pointer.
.1edd	18		clc				clc
.1ede	6d 69 05	adc $0569			adc 	stringTempPointer 			; subtract 32 from temp pointer and
.1ee1	8d 69 05	sta $0569			sta 	stringTempPointer 			; save in zsTemp and stackas well.
.1ee4	85 22		sta $22				sta 	zsTemp
.1ee6	95 41		sta $41,x			sta 	NSMantissa0,x
.1ee8	ad 6a 05	lda $056a			lda 	stringTempPointer+1
.1eeb	69 ff		adc #$ff			adc 	#$FF
.1eed	8d 6a 05	sta $056a			sta 	stringTempPointer+1
.1ef0	85 23		sta $23				sta 	zsTemp+1
.1ef2	95 4d		sta $4d,x			sta 	NSMantissa1,x
.1ef4	74 59		stz $59,x			stz 	NSMantissa2,x
.1ef6	74 65		stz $65,x			stz 	NSMantissa3,x
.1ef8	a9 00		lda #$00			lda 	#0 							; clear string.
.1efa	92 22		sta ($22)			sta 	(zsTemp)
.1efc	a9 40		lda #$40			lda 	#NSSString 			 		; mark as string
.1efe	95 35		sta $35,x			sta 	NSStatus,x
.1f00	60		rts				rts
.1f01					StringWriteChar:
.1f01	5a		phy				phy
.1f02	48		pha				pha
.1f03	b2 22		lda ($22)			lda 	(zsTemp)
.1f05	1a		inc a				inc 	a
.1f06	92 22		sta ($22)			sta 	(zsTemp)
.1f08	a8		tay				tay
.1f09	68		pla				pla
.1f0a	91 22		sta ($22),y			sta 	(zsTemp),y
.1f0c	7a		ply				ply
.1f0d	60		rts				rts
.0568					stringInitialised:
>0568							.fill 	1
.0569					stringTempPointer:
>0569							.fill 	2
.1f0e					Unary_Left:
.1f0e	fa		plx				plx
.1f0f	5a		phy				phy
.1f10	18		clc				clc 								; only one parameter
.1f11	20 07 18	jsr $1807			jsr 	GetInteger8Bit 				; push the length of the string.
.1f14	48		pha				pha
.1f15	ca		dex				dex
.1f16	a9 00		lda #$00			lda 	#0 							; push the start position.
.1f18	48		pha				pha
.1f19	20 51 1f	jsr $1f51			jsr 	UnarySStringToZTemp0
.1f1c	80 3c		bra $1f5a			bra 	SubstringMain 				; stack now points to the string to slice.
.1f1e					Unary_Right:
.1f1e	fa		plx				plx
.1f1f	5a		phy				phy
.1f20	a9 ff		lda #$ff			lda 	#255 						; push 255, we want all the string.
.1f22	20 07 18	jsr $1807			jsr 	GetInteger8Bit 				; push the right length of the string.
.1f25	48		pha				pha
.1f26	ca		dex				dex
.1f27	20 51 1f	jsr $1f51			jsr 	UnarySStringToZTemp0
.1f2a	68		pla				pla 								; this is the right requirement
.1f2b	38		sec				sec
.1f2c	49 ff		eor #$ff			eor 	#$FF
.1f2e	72 2f		adc ($2f)			adc 	(zTemp0)
.1f30	b0 02		bcs $1f34			bcs 	_URHaveCount
.1f32	a9 00		lda #$00			lda 	#0 							; overflow, start from 0
.1f34					_URHaveCount:
.1f34	a0 ff		ldy #$ff			ldy 	#255 						; whole string
.1f36	5a		phy				phy
.1f37	48		pha				pha 								; start position
.1f38	80 20		bra $1f5a			bra 	SubstringMain
.1f3a					Unary_Mid:
.1f3a	fa		plx				plx
.1f3b	5a		phy				phy
.1f3c	20 07 18	jsr $1807			jsr 	GetInteger8Bit 				; push the length of the string required.
.1f3f	48		pha				pha
.1f40	ca		dex				dex
.1f41	20 07 18	jsr $1807			jsr 	GetInteger8Bit 				; put the start position.
.1f44	f0 08		beq $1f4e			beq 	_UMError
.1f46	3a		dec a				dec 	a
.1f47	48		pha				pha
.1f48	ca		dex				dex
.1f49	20 51 1f	jsr $1f51			jsr 	UnarySStringToZTemp0
.1f4c	80 0c		bra $1f5a			bra 	SubstringMain 				; stack now points to the string to slice.
.1f4e					_UMError:
.1f4e	4c a8 26	jmp $26a8		jmp	ErrorV_range
.1f51					UnarySStringToZTemp0:
.1f51	b5 41		lda $41,x			lda 	NSMantissa0,x
.1f53	85 2f		sta $2f				sta 	zTemp0
.1f55	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.1f57	85 30		sta $30				sta 	zTemp0+1
.1f59	60		rts				rts
.1f5a					SubstringMain:
.1f5a	68		pla				pla 								; get the start offset
.1f5b	7a		ply				ply 								; get the count to do.
.1f5c	d2 2f		cmp ($2f)			cmp 	(zTemp0) 					; if start >= length then return NULL.
.1f5e	b0 38		bcs $1f98			bcs 	_SSReturnNull
.1f60	85 31		sta $31				sta 	zTemp1 						; save start position.
.1f62	84 32		sty $32				sty 	zTemp1+1 					; save count
.1f64	18		clc				clc
.1f65	65 32		adc $32				adc 	zTemp1+1 					; this is the end position.
.1f67	b0 06		bcs $1f6f			bcs 	_SMTruncateToEnd 			; if overflow, limit to length-start.
.1f69	d2 2f		cmp ($2f)			cmp 	(zTemp0) 					; ok if limit is <= length.
.1f6b	f0 04		beq $1f71			beq 	_SMIsOkay
.1f6d	90 02		bcc $1f71			bcc 	_SMIsOkay
.1f6f					_SMTruncateToEnd:
.1f6f	b2 2f		lda ($2f)			lda 	(zTemp0) 					; end position is length.
.1f71					_SMIsOkay:
.1f71	85 32		sta $32				sta 	zTemp1+1
.1f73	38		sec				sec		 							; work out size
.1f74	a5 32		lda $32				lda 	zTemp1+1
.1f76	e5 31		sbc $31				sbc 	zTemp1
.1f78	f0 1e		beq $1f98			beq 	_SSReturnNull 				; if size = 0 then return empty string.
.1f7a	20 d8 1e	jsr $1ed8			jsr 	StringAllocTemp 			; zsTemp & mantissa = the new string.
.1f7d	a4 31		ldy $31				ldy 	zTemp1 						; start
.1f7f					_SMCopy:
.1f7f	c4 32		cpy $32				cpy 	zTemp1+1 					; exit if reached end
.1f81	f0 11		beq $1f94			beq 	_SMExit
.1f83	c8		iny				iny 								; bump and
.1f84	b1 2f		lda ($2f),y			lda 	(zTemp0),y 					; get character (prefix)
.1f86	5a		phy				phy
.1f87	48		pha				pha
.1f88	b2 22		lda ($22)			lda 	(zsTemp) 					; bump length => Y
.1f8a	1a		inc a				inc 	a
.1f8b	a8		tay				tay
.1f8c	92 22		sta ($22)			sta 	(zsTemp)
.1f8e	68		pla				pla 								; write character out
.1f8f	91 22		sta ($22),y			sta 	(zsTemp),y
.1f91	7a		ply				ply 								; restore Y
.1f92	80 eb		bra $1f7f			bra 	_SMCopy
.1f94					_SMExit:
.1f94	7a		ply				ply
.1f95	4c 29 10	jmp $1029			jmp 	NextCommand
.1f98					_SSReturnNull:
.1f98	a9 aa		lda #$aa			lda 	#SSRNull & $FF 				; set up mantissa
.1f9a	95 41		sta $41,x			sta 	NSMantissa0,x
.1f9c	a9 1f		lda #$1f			lda 	#SSRNull >> 8
.1f9e	95 4d		sta $4d,x			sta 	NSMantissa1,x
.1fa0	74 59		stz $59,x			stz 	NSMantissa2,x
.1fa2	74 65		stz $65,x			stz 	NSMantissa3,x
.1fa4	a9 40		lda #$40			lda 	#NSSString
.1fa6	95 35		sta $35,x			sta 	NSStatus,x
.1fa8	80 ea		bra $1f94			bra 	_SMExit
.1faa					SSRNull:
>1faa	00 00						.word 	0
.1fac					CommandSwap:
.1fac	fa		plx				plx
.1fad	b5 41		lda $41,x			lda 	NSMantissa0,x
.1faf	48		pha				pha
.1fb0	b5 40		lda $40,x			lda 	NSMantissa0-1,x
.1fb2	95 41		sta $41,x			sta 	NSMantissa0,x
.1fb4	68		pla				pla
.1fb5	95 40		sta $40,x			sta 	NSMantissa0-1,x
.1fb7	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.1fb9	48		pha				pha
.1fba	b5 4c		lda $4c,x			lda 	NSMantissa1-1,x
.1fbc	95 4d		sta $4d,x			sta 	NSMantissa1,x
.1fbe	68		pla				pla
.1fbf	95 4c		sta $4c,x			sta 	NSMantissa1-1,x
.1fc1	b5 59		lda $59,x			lda 	NSMantissa2,x
.1fc3	48		pha				pha
.1fc4	b5 58		lda $58,x			lda 	NSMantissa2-1,x
.1fc6	95 59		sta $59,x			sta 	NSMantissa2,x
.1fc8	68		pla				pla
.1fc9	95 58		sta $58,x			sta 	NSMantissa2-1,x
.1fcb	b5 65		lda $65,x			lda 	NSMantissa3,x
.1fcd	48		pha				pha
.1fce	b5 64		lda $64,x			lda 	NSMantissa3-1,x
.1fd0	95 65		sta $65,x			sta 	NSMantissa3,x
.1fd2	68		pla				pla
.1fd3	95 64		sta $64,x			sta 	NSMantissa3-1,x
.1fd5	b5 71		lda $71,x			lda 	NSExponent,x
.1fd7	48		pha				pha
.1fd8	b5 70		lda $70,x			lda 	NSExponent-1,x
.1fda	95 71		sta $71,x			sta 	NSExponent,x
.1fdc	68		pla				pla
.1fdd	95 70		sta $70,x			sta 	NSExponent-1,x
.1fdf	b5 35		lda $35,x			lda 	NSStatus,x
.1fe1	48		pha				pha
.1fe2	b5 34		lda $34,x			lda 	NSStatus-1,x
.1fe4	95 35		sta $35,x			sta 	NSStatus,x
.1fe6	68		pla				pla
.1fe7	95 34		sta $34,x			sta 	NSStatus-1,x
.1fe9	4c 29 10	jmp $1029			jmp 	NextCommand
.1fec					CommandSYS:
.1fec	fa		plx				plx
.1fed	da		phx				phx 								; save XY
.1fee	5a		phy				phy
.1fef	20 46 2a	jsr $2a46			jsr 	FloatIntegerPart
.1ff2	b5 4d		lda $4d,x			lda 	NSMantissa1,x 				; get call address => zTemp0
.1ff4	85 30		sta $30				sta 	zTemp0+1
.1ff6	b5 41		lda $41,x			lda 	NSMantissa0,x
.1ff8	85 2f		sta $2f				sta 	zTemp0
.1ffa	ae 0d 03	ldx $030d			ldx 	SYS_Reg_X 					; load registers
.1ffd	ac 0e 03	ldy $030e			ldy 	SYS_Reg_Y
.2000	ad 0f 03	lda $030f			lda 	SYS_Reg_S
.2003	48		pha				pha
.2004	ad 0c 03	lda $030c			lda 	SYS_Reg_A
.2007	28		plp				plp
.2008	20 1f 20	jsr $201f			jsr 	_CSZTemp0
.200b	08		php				php
.200c	8e 0d 03	stx $030d			stx 	SYS_Reg_X 					; load registers
.200f	8c 0e 03	sty $030e			sty 	SYS_Reg_Y
.2012	8d 0c 03	sta $030c			sta 	SYS_Reg_A
.2015	68		pla				pla
.2016	8d 0f 03	sta $030f			sta 	SYS_Reg_S
.2019	7a		ply				ply 								; restore YX and drop 2
.201a	fa		plx				plx
.201b	ca		dex				dex
.201c	4c 29 10	jmp $1029			jmp 	NextCommand
.201f					_CSZTemp0:
.201f	6c 2f 00	jmp ($002f)			jmp 	(zTemp0)
.2022					TimeTOS:
.2022	fa		plx				plx
.2023	20 7d 20	jsr $207d			jsr 	TIPushClock 				; push clock to TOS
.2026	4c 29 10	jmp $1029			jmp 	NextCommand
.2029					TimeString:
.2029	fa		plx				plx
.202a	20 7d 20	jsr $207d			jsr 	TIPushClock 				; push clock to TOS
.202d	20 52 20	jsr $2052			jsr 	_TSDivMod60 				; result in seconds
.2030	20 52 20	jsr $2052			jsr 	_TSDivMod60 				; seconds
.2033	48		pha				pha
.2034	20 52 20	jsr $2052			jsr 	_TSDivMod60 				; minutes
.2037	48		pha				pha
.2038	a9 18		lda #$18			lda 	#24 						; hours
.203a	20 54 20	jsr $2054			jsr 	_TSDivModA
.203d	48		pha				pha
.203e	a9 06		lda #$06			lda 	#6
.2040	20 d8 1e	jsr $1ed8			jsr 	StringAllocTemp
.2043	68		pla				pla
.2044	20 64 20	jsr $2064			jsr 	_TSWriteDecimal
.2047	68		pla				pla
.2048	20 64 20	jsr $2064			jsr 	_TSWriteDecimal
.204b	68		pla				pla
.204c	20 64 20	jsr $2064			jsr 	_TSWriteDecimal
.204f	4c 29 10	jmp $1029			jmp 	NextCommand
.2052					_TSDivMod60:
.2052	a9 3c		lda #$3c			lda 	#60
.2054					_TSDivModA:
.2054	e8		inx				inx
.2055	20 0d 2e	jsr $2e0d			jsr 	FloatSetByte
.2058	ca		dex				dex
.2059	20 a1 29	jsr $29a1			jsr 	Int32Divide
.205c	b5 41		lda $41,x			lda 	NSMantissa0,x 				; get modulus
.205e	48		pha				pha
.205f	20 90 29	jsr $2990			jsr 	NSMCopyPlusTwoToZero
.2062	68		pla				pla
.2063	60		rts				rts
.2064					_TSWriteDecimal:
.2064	da		phx				phx
.2065	a2 30		ldx #$30			ldx 	#'0'
.2067					_TSWDLoop:
.2067	c9 0a		cmp #$0a			cmp 	#10
.2069	90 05		bcc $2070			bcc 	_TSWDEnd
.206b	e9 0a		sbc #$0a			sbc 	#10
.206d	e8		inx				inx
.206e	80 f7		bra $2067			bra 	_TSWDLoop
.2070					_TSWDEnd:
.2070	48		pha				pha
.2071	8a		txa				txa
.2072	20 01 1f	jsr $1f01			jsr 	StringWriteChar
.2075	68		pla				pla
.2076	09 30		ora #$30			ora 	#'0'
.2078	20 01 1f	jsr $1f01			jsr 	StringWriteChar
.207b	fa		plx				plx
.207c	60		rts				rts
.207d					TIPushClock:
.207d	5a		phy				phy
.207e	e8		inx				inx 								; push 0 on the stack
.207f	20 0b 2e	jsr $2e0b			jsr 	FloatSetZero
.2082	da		phx				phx
.2083	20 6d 24	jsr $246d			jsr 	XReadClock 					; read time into YXA
.2086	86 2f		stx $2f				stx 	zTemp0
.2088	fa		plx				plx
.2089	95 41		sta $41,x			sta 	NSMantissa0,x
.208b	a5 2f		lda $2f				lda 	zTemp0
.208d	95 4d		sta $4d,x			sta 	NSMantissa1,x
.208f	98		tya				tya
.2090	95 59		sta $59,x			sta 	NSMantissa2,x
.2092	7a		ply				ply
.2093	60		rts				rts
.2094					CommandTIWrite:
.2094	fa		plx				plx
.2095	b5 41		lda $41,x			lda 	NSMantissa0,x 				; copy string address to ZSTemp
.2097	85 22		sta $22				sta 	zsTemp
.2099	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.209b	85 23		sta $23				sta 	zsTemp+1
.209d	b2 22		lda ($22)			lda 	(zsTemp) 					; check if it is six
.209f	c9 06		cmp #$06			cmp 	#6
.20a1	d0 59		bne $20fc			bne 	_CTIWError
.20a3	20 0b 2e	jsr $2e0b			jsr 	FloatSetZero
.20a6	20 c8 20	jsr $20c8			jsr 	_CTIWDigitPair 				; do a digit pair 3 times
.20a9	20 c8 20	jsr $20c8			jsr 	_CTIWDigitPair
.20ac	20 c8 20	jsr $20c8			jsr 	_CTIWDigitPair
.20af	a9 3c		lda #$3c			lda 	#60 						; multiply the result by 60.
.20b1	20 f3 20	jsr $20f3			jsr 	_CTIWMultiply
.20b4	da		phx				phx
.20b5	5a		phy				phy
.20b6	b5 4d		lda $4d,x			lda 	NSMantissa1,x 				; get time into YXA
.20b8	48		pha				pha
.20b9	b5 59		lda $59,x			lda 	NSMantissa2,x
.20bb	a8		tay				tay
.20bc	b5 41		lda $41,x			lda 	NSMantissa0,x
.20be	fa		plx				plx
.20bf	20 71 24	jsr $2471			jsr 	XWriteClock 				; update the clock.
.20c2	7a		ply				ply
.20c3	fa		plx				plx
.20c4	ca		dex				dex 								; throw result.
.20c5	4c 29 10	jmp $1029			jmp 	NextCommand
.20c8					_CTIWDigitPair:
.20c8	a9 06		lda #$06			lda 	#6 							; x 6
.20ca	20 f3 20	jsr $20f3			jsr 	_CTIWMultiply
.20cd	20 d9 20	jsr $20d9			jsr 	_CTIWAddDigit 				; add digit
.20d0	a9 0a		lda #$0a			lda 	#10 						; x 10
.20d2	20 f3 20	jsr $20f3			jsr 	_CTIWMultiply
.20d5	20 d9 20	jsr $20d9			jsr 	_CTIWAddDigit 				; add digit
.20d8	60		rts				rts
.20d9					_CTIWAddDigit:
.20d9	e6 22		inc $22				inc 	zsTemp 						; pre-increment
.20db	d0 02		bne $20df			bne 	_CTIWASkip
.20dd	e6 23		inc $23				inc 	zsTemp+1
.20df					_CTIWASkip:
.20df	b2 22		lda ($22)			lda 	(zsTemp) 					; read and validate it
.20e1	38		sec				sec
.20e2	e9 30		sbc #$30			sbc 	#"0"
.20e4	90 16		bcc $20fc			bcc 	_CTIWError
.20e6	c9 0a		cmp #$0a			cmp 	#9+1
.20e8	b0 12		bcs $20fc			bcs 	_CTIWError
.20ea	e8		inx				inx 								; store at +1
.20eb	20 0d 2e	jsr $2e0d			jsr 	FloatSetByte
.20ee	ca		dex				dex
.20ef	20 97 2b	jsr $2b97			jsr 	FloatAddTopTwoStack
.20f2	60		rts				rts
.20f3					_CTIWMultiply:
.20f3	e8		inx				inx
.20f4	20 0d 2e	jsr $2e0d			jsr 	FloatSetByte
.20f7	ca		dex				dex
.20f8	20 18 2b	jsr $2b18			jsr 	FloatMultiplyShort
.20fb	60		rts				rts
.20fc					_CTIWError:
.20fc	4c b8 26	jmp $26b8		jmp	ErrorV_value
.20ff					UnaryUsr:
.20ff	fa		plx				plx
.2100	5a		phy				phy
.2101	20 08 21	jsr $2108			jsr 	_UUCallVector
.2104	7a		ply				ply
.2105	4c 29 10	jmp $1029			jmp 	NextCommand
.2108					_UUCallVector:
.2108	6c 11 03	jmp ($0311)			jmp 	(USRRoutineAddress)
.210b					ValUnary:
.210b	fa		plx				plx
.210c	b5 41		lda $41,x			lda 	NSMantissa0,x
.210e	85 2f		sta $2f				sta 	zTemp0
.2110	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.2112	85 30		sta $30				sta 	zTemp0+1
.2114	20 1f 21	jsr $211f			jsr 	ValEvaluateZTemp0
.2117	b0 03		bcs $211c			bcs 	_VUError 					; couldn't convert
.2119	4c 29 10	jmp $1029			jmp 	NextCommand
.211c					_VUError:
.211c	4c b8 26	jmp $26b8		jmp	ErrorV_value
.211f					ValEvaluateZTemp0:
.211f	5a		phy				phy
.2120	b2 2f		lda ($2f)			lda 	(zTemp0) 					; check not empty string
.2122	f0 22		beq $2146			beq 	_VMCFail2
.2124	a0 00		ldy #$00			ldy 	#0 							; start position
.2126					_VMCSpaces:
.2126	c8		iny				iny 								; skip leading spaces
.2127	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.2129	c9 20		cmp #$20			cmp 	#" "
.212b	f0 f9		beq $2126			beq 	_VMCSpaces
.212d	48		pha				pha 								; save first character
.212e	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.2130	d0 01		bne $2133			bne 	_VMCStart
.2132	c8		iny				iny 								; skip over - if so.
.2133					_VMCStart:
.2133	38		sec				sec 								; initialise first time round.
.2134					_VMCNext:
.2134	98		tya				tya 								; reached end of string
.2135	3a		dec a				dec 	a
.2136	52 2f		eor ($2f)			eor 	(zTemp0) 					; compare length preserve carry.
.2138	f0 0f		beq $2149			beq 	_VMCSuccess 				; successful.
.213a	b1 2f		lda ($2f),y			lda 	(zTemp0),y 					; encode a number.
.213c	c8		iny				iny
.213d	20 ef 2b	jsr $2bef			jsr 	FloatEncode 				; send it to the number-builder
.2140	90 03		bcc $2145			bcc 	_VMCFail 					; if failed, give up.
.2142	18		clc				clc 								; next time round, countinue
.2143	80 ef		bra $2134			bra 	_VMCNext
.2145					_VMCFail:
.2145	68		pla				pla
.2146					_VMCFail2:
.2146	7a		ply				ply
.2147	38		sec				sec
.2148	60		rts				rts
.2149					_VMCSuccess:
.2149	a9 00		lda #$00			lda 	#0 							; construct final
.214b	20 ef 2b	jsr $2bef			jsr 	FloatEncode 				; by sending a duff value.
.214e	68		pla				pla 								; if it was -ve
.214f	c9 2d		cmp #$2d			cmp 	#"-"
.2151	d0 03		bne $2156			bne 	_VMCNotNegative
.2153	20 cd 2d	jsr $2dcd			jsr		FloatNegate 				; negate it.
.2156					_VMCNotNegative:
.2156	7a		ply				ply
.2157	18		clc				clc
.2158	60		rts				rts
.2159					VectorTable:
>2159	6f 18					.word	LinkFloatAdd             ; $80 +
>215b	78 18					.word	LinkFloatSubtract        ; $81 -
>215d	81 18					.word	LinkFloatMultiply        ; $82 *
>215f	8a 18					.word	LinkFloatDivide          ; $83 /
>2161	95 18					.word	LinkFloatPower           ; $84 ^
>2163	bb 10					.word	BinaryAnd                ; $85 and
>2165	bf 10					.word	BinaryOr                 ; $86 or
>2167	a0 18					.word	LinkCompareGreater       ; $87 >
>2169	a9 18					.word	LinkCompareEqual         ; $88 =
>216b	b2 18					.word	LinkCompareLess          ; $89 <
>216d	bb 18					.word	LinkCompareGreaterEqual  ; $8a >=
>216f	c4 18					.word	LinkCompareNotEqual      ; $8b <>
>2171	cd 18					.word	LinkCompareLessEqual     ; $8c <=
>2173	a3 10					.word	AbsoluteTOS              ; $8d abs
>2175	f6 10					.word	ArrayConvert             ; $8e array
>2177	9e 11					.word	UnaryAsc                 ; $8f asc
>2179	b9 11					.word	CommandAssert            ; $90 assert
>217b	fa 11					.word	Unary16Bin               ; $91 bin$
>217d	24 12					.word	PrintCharacter           ; $92 print.chr
>217f	2e 12					.word	UnaryChr                 ; $93 chr$
>2181	93 12					.word	CompareStrings           ; $94 s.cmp
>2183	7a 14					.word	CommandFor               ; $95 for
>2185	3d 15					.word	UnaryFre                 ; $96 fre
>2187	55 15					.word	CommandGet               ; $97 get
>2189	7b 15					.word	CommandReturn            ; $98 return
>218b	bf 15					.word	Command_PSET             ; $99 pset
>218d	d9 15					.word	Command_LINE             ; $9a line
>218f	ee 15					.word	Command_RECT             ; $9b rect
>2191	fd 15					.word	Command_FRAME            ; $9c frame
>2193	0c 16					.word	Command_CHAR             ; $9d char
>2195	a3 16					.word	Unary16Hex               ; $9e hex$
>2197	4a 17					.word	CommandInput             ; $9f input
>2199	61 17					.word	CommandInputString       ; $a0 input$
>219b	7a 17					.word	CommandInputReset        ; $a1 input.start
>219d	5e 18					.word	UnaryLen                 ; $a2 len
>219f	2a 19					.word	LinkFloatCompare         ; $a3 f.cmp
>21a1	33 19					.word	LinkDivideInt32          ; $a4 int.div
>21a3	ad 19					.word	NegateTOS                ; $a5 negate
>21a5	b4 19					.word	CommandNewLine           ; $a6 new.line
>21a7	bd 19					.word	CommandNext              ; $a7 next
>21a9	a6 1a					.word	NotTOS                   ; $a8 not
>21ab	bd 1a					.word	CommandOn                ; $a9 on
>21ad	db 1a					.word	CommandMoreOn            ; $aa moreon
>21af	e2 1a					.word	UnaryPeek                ; $ab peek
>21b1	f7 1a					.word	CommandPOKE              ; $ac poke
>21b3	0f 1b					.word	UnaryPos                 ; $ad pos
>21b5	19 1b					.word	GetChannel               ; $ae getchannel
>21b7	24 1b					.word	SetChannel               ; $af setchannel
>21b9	47 1b					.word	PrintNumber              ; $b0 print.n
>21bb	66 1b					.word	PrintString              ; $b1 print.s
>21bd	cd 1b					.word	CommandRead              ; $b2 read
>21bf	e7 1b					.word	CommandReadString        ; $b3 read$
>21c1	72 1d					.word	UnaryRND                 ; $b4 rnd
>21c3	e1 1d					.word	StringConcatenate        ; $b5 concat
>21c5	38 1e					.word	SignTOS                  ; $b6 sgn
>21c7	5b 1e					.word	PrintTab                 ; $b7 print.tab
>21c9	69 1e					.word	PrintPos                 ; $b8 print.pos
>21cb	7a 1e					.word	PrintSpace               ; $b9 print.spc
>21cd	93 1e					.word	Unary_Str                ; $ba str$
>21cf	0e 1f					.word	Unary_Left               ; $bb left$
>21d1	1e 1f					.word	Unary_Right              ; $bc right$
>21d3	3a 1f					.word	Unary_Mid                ; $bd mid$
>21d5	ac 1f					.word	CommandSwap              ; $be swap
>21d7	22 20					.word	TimeTOS                  ; $bf ti
>21d9	29 20					.word	TimeString               ; $c0 ti$
>21db	ff 20					.word	UnaryUsr                 ; $c1 usr
>21dd	0b 21					.word	ValUnary                 ; $c2 val
>21df	69 23					.word	CommandClose             ; $c3 close
>21e1	7b 23					.word	CommandExit              ; $c4 exit
>21e3	81 23					.word	CommandDebug             ; $c5 debug
>21e5	e7 23					.word	CommandOpen              ; $c6 open
>21e7	7b 24					.word	CommandScreen            ; $c7 screen
>21e9	62 26					.word	CommandVPOKE             ; $c8 vpoke
>21eb	87 26					.word	CommandVPEEK             ; $c9 vpeek
>21ed	53 1e					.word	CommandShift             ; $ca .shift
>21ef	67 10					.word	PushByteCommand          ; $cb .byte
>21f1	7a 10					.word	PushWordCommand          ; $cc .word
>21f3	89 1b					.word	CommandPushN             ; $cd .float
>21f5	af 1b					.word	CommandPushS             ; $ce .string
>21f7	1b 13					.word	CommandData              ; $cf .data
>21f9	8d 15					.word	CommandGoto              ; $d0 .goto
>21fb	6f 15					.word	CommandGosub             ; $d1 .gosub
>21fd	a3 15					.word	CommandGotoZ             ; $d2 .goto.z
>21ff	b1 15					.word	CommandGotoNZ            ; $d3 .goto.nz
>2201	a9 10					.word	CommandVarSpace          ; $d4 .varspace
.2203					ShiftVectorTable:
>2203	46 12					.word	CommandClr               ; $ca80 clr
>2205	24 13					.word	CommandDIM               ; $ca81 dim
>2207	15 14					.word	CommandEnd               ; $ca82 end
>2209	2f 18					.word	UnaryJoy                 ; $ca83 joy
>220b	d6 18					.word	LinkFloatIntegerPartDown ; $ca84 int
>220d	df 18					.word	LinkFloatSquareRoot      ; $ca85 sqr
>220f	f0 18					.word	LinkFloatLogarithm       ; $ca86 log
>2211	fb 18					.word	LinkFloatExponent        ; $ca87 exp
>2213	04 19					.word	LinkFloatCosine          ; $ca88 cos
>2215	0d 19					.word	LinkFloatSine            ; $ca89 sin
>2217	16 19					.word	LinkFloatTangent         ; $ca8a tan
>2219	1f 19					.word	LinkFloatArcTan          ; $ca8b atn
>221b	5d 19					.word	XCommandMouse            ; $ca8c mouse
>221d	72 19					.word	XUnaryMB                 ; $ca8d mb
>221f	7f 19					.word	XUnaryMX                 ; $ca8e mx
>2221	90 19					.word	XUnaryMY                 ; $ca8f my
>2223	60 1d					.word	CommandRestore           ; $ca90 restore
>2225	8f 1e					.word	CommandStop              ; $ca91 stop
>2227	ec 1f					.word	CommandSYS               ; $ca92 sys
>2229	94 20					.word	CommandTIWrite           ; $ca93 ti$.write
>222b	61 22					.word	CommandWAIT              ; $ca94 wait
>222d	ac 23					.word	X16I2CPoke               ; $ca95 i2cpoke
>222f	cc 23					.word	X16I2CPeek               ; $ca96 i2cpeek
>2231	37 24					.word	CommandBank              ; $ca97 bank
>2233	8a 24					.word	XCommandSleep            ; $ca98 sleep
>2235	ae 24					.word	X16_Audio_FMINIT         ; $ca99 fminit
>2237	bc 24					.word	X16_Audio_FMNOTE         ; $ca9a fmnote
>2239	ce 24					.word	X16_Audio_FMDRUM         ; $ca9b fmdrum
>223b	e0 24					.word	X16_Audio_FMINST         ; $ca9c fminst
>223d	f2 24					.word	X16_Audio_FMVIB          ; $ca9d fmvib
>223f	04 25					.word	X16_Audio_FMFREQ         ; $ca9e fmfreq
>2241	15 25					.word	X16_Audio_FMVOL          ; $ca9f fmvol
>2243	27 25					.word	X16_Audio_FMPAN          ; $caa0 fmpan
>2245	39 25					.word	X16_Audio_FMPLAY         ; $caa1 fmplay
>2247	4a 25					.word	X16_Audio_FMCHORD        ; $caa2 fmchord
>2249	5b 25					.word	X16_Audio_FMPOKE         ; $caa3 fmpoke
>224b	6d 25					.word	X16_Audio_PSGINIT        ; $caa4 psginit
>224d	7b 25					.word	X16_Audio_PSGNOTE        ; $caa5 psgnote
>224f	8d 25					.word	X16_Audio_PSGVOL         ; $caa6 psgvol
>2251	9f 25					.word	X16_Audio_PSGWAV         ; $caa7 psgwav
>2253	b1 25					.word	X16_Audio_PSGFREQ        ; $caa8 psgfreq
>2255	c2 25					.word	X16_Audio_PSGPAN         ; $caa9 psgpan
>2257	d4 25					.word	X16_Audio_PSGPLAY        ; $caaa psgplay
>2259	e5 25					.word	X16_Audio_PSGCHORD       ; $caab psgchord
>225b	f6 25					.word	CommandCls               ; $caac cls
>225d	ff 25					.word	CommandLocate            ; $caad locate
>225f	29 26					.word	CommandColor             ; $caae color
.2261					CommandWAIT:
.2261	fa		plx				plx
.2262	b5 3f		lda $3f,x			lda 	NSMantissa0-2,x 			; get wait address
.2264	85 2f		sta $2f				sta 	zTemp0
.2266	b5 4b		lda $4b,x			lda 	NSMantissa1-2,x
.2268	85 30		sta $30				sta 	zTemp0+1
.226a					_WaitLoop:
.226a	b2 2f		lda ($2f)			lda 	(zTemp0) 					; read it
.226c	35 40		and $40,x			and 	NSMantissa0-1,x		 		; and with mask
.226e	55 41		eor $41,x			eor 	NSMantissa0-0,x 			; toggle
.2270	f0 f8		beq $226a			beq 	_WaitLoop 					; keep going if zero
.2272	ca		dex				dex 								; drop 3.
.2273	ca		dex				dex
.2274	ca		dex				dex
.2275	4c 29 10	jmp $1029			jmp 	NextCommand
.2278					WriteFloatCommand:
.2278	fa		plx				plx
.2279	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.227b	85 2f		sta $2f				sta 	zTemp0 						; save in MSB
.227d	88		dey				dey 								; get the upper 3 bits
.227e	b1 28		lda ($28),y			lda 	(codePtr),y
.2280	29 07		and #$07			and 	#7
.2282	c8		iny				iny
.2283	c8		iny				iny
.2284	06 2f		asl $2f				asl 	zTemp0 						; shift zTemp0:A left
.2286	2a		rol a				rol 	a 							; carry will be clear.
.2287	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.228a	85 30		sta $30				sta 	zTemp0+1
.228c	20 92 22	jsr $2292			jsr 	WriteFloatZTemp0Sub
.228f	4c 29 10	jmp $1029			jmp 	NextCommand
.2292					WriteFloatZTemp0Sub:
.2292	5a		phy				phy 								; ldart write
.2293	a0 01		ldy #$01			ldy 	#1
.2295	b5 41		lda $41,x			lda 	NSMantissa0,x
.2297	92 2f		sta ($2f)			sta 	(zTemp0)
.2299	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.229b	91 2f		sta ($2f),y			sta 	(zTemp0),y
.229d	c8		iny				iny
.229e	b5 59		lda $59,x			lda 	NSMantissa2,x
.22a0	91 2f		sta ($2f),y			sta 	(zTemp0),y
.22a2	c8		iny				iny
.22a3	b5 65		lda $65,x			lda 	NSMantissa3,x
.22a5	91 2f		sta ($2f),y			sta 	(zTemp0),y
.22a7	c8		iny				iny
.22a8	b5 71		lda $71,x			lda 	NSExponent,x
.22aa	91 2f		sta ($2f),y			sta 	(zTemp0),y
.22ac	c8		iny				iny
.22ad	b5 35		lda $35,x			lda 	NSStatus,x
.22af	91 2f		sta ($2f),y			sta 	(zTemp0),y
.22b1	ca		dex				dex
.22b2	7a		ply				ply
.22b3	60		rts				rts
.22b4					WriteIntegerCommand:
.22b4	fa		plx				plx
.22b5	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.22b7	85 2f		sta $2f				sta 	zTemp0 						; save in MSB
.22b9	88		dey				dey 								; get the upper 3 bits
.22ba	b1 28		lda ($28),y			lda 	(codePtr),y
.22bc	29 07		and #$07			and 	#7
.22be	c8		iny				iny
.22bf	c8		iny				iny
.22c0	06 2f		asl $2f				asl 	zTemp0 						; shift zTemp0:A left
.22c2	2a		rol a				rol 	a 							; carry will be clear.
.22c3	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.22c6	85 30		sta $30				sta 	zTemp0+1
.22c8	20 ce 22	jsr $22ce			jsr 	WriteIntegerZTemp0Sub
.22cb	4c 29 10	jmp $1029			jmp 	NextCommand
.22ce					WriteIntegerZTemp0Sub:
.22ce	20 46 2a	jsr $2a46			jsr 	FloatIntegerPart
.22d1	5a		phy				phy 								; start write
.22d2	a0 01		ldy #$01			ldy 	#1
.22d4	b5 35		lda $35,x			lda 	NSStatus,x 					; negate 2's comp if -ve
.22d6	30 0b		bmi $22e3			bmi 	_WIZNegative
.22d8	b5 41		lda $41,x			lda 	NSMantissa0,x 				; +ve write
.22da	92 2f		sta ($2f)			sta 	(zTemp0)
.22dc	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.22de	91 2f		sta ($2f),y			sta 	(zTemp0),y
.22e0	7a		ply				ply
.22e1	ca		dex				dex
.22e2	60		rts				rts
.22e3					_WIZNegative:
.22e3	38		sec				sec 								; -ve read
.22e4	a9 00		lda #$00			lda 	#0
.22e6	f5 41		sbc $41,x			sbc 	NSMantissa0,x
.22e8	92 2f		sta ($2f)			sta 	(zTemp0)
.22ea	a9 00		lda #$00			lda 	#0
.22ec	f5 4d		sbc $4d,x			sbc 	NSMantissa1,x
.22ee	91 2f		sta ($2f),y			sta 	(zTemp0),y
.22f0	7a		ply				ply
.22f1	ca		dex				dex
.22f2	60		rts				rts
.22f3					WriteStringCommand:
.22f3	fa		plx				plx
.22f4	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.22f6	85 2f		sta $2f				sta 	zTemp0 						; save in MSB
.22f8	88		dey				dey 								; get the upper 3 bits
.22f9	b1 28		lda ($28),y			lda 	(codePtr),y
.22fb	29 07		and #$07			and 	#7
.22fd	c8		iny				iny
.22fe	c8		iny				iny
.22ff	06 2f		asl $2f				asl 	zTemp0 						; shift zTemp0:A left
.2301	2a		rol a				rol 	a 							; carry will be clear.
.2302	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.2305	85 30		sta $30				sta 	zTemp0+1
.2307	20 0d 23	jsr $230d			jsr 	WriteStringZTemp0Sub
.230a	4c 29 10	jmp $1029			jmp 	NextCommand
.230d					WriteStringZTemp0Sub:
.230d	5a		phy				phy
.230e	a0 01		ldy #$01			ldy 	#1 							; if it is zero we must concrete whatever.
.2310	b2 2f		lda ($2f)			lda 	(zTemp0)
.2312	11 2f		ora ($2f),y			ora 	(zTemp0),y
.2314	f0 1e		beq $2334			beq 	_WSConcrete
.2316	b2 2f		lda ($2f)			lda 	(zTemp0) 					; put address of actual string in zTemp1
.2318	85 31		sta $31				sta 	zTemp1
.231a	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.231c	85 32		sta $32				sta 	zTemp1+1
.231e	b5 41		lda $41,x			lda 	NSMantissa0,x 				; copy source to zTemp2
.2320	85 33		sta $33				sta 	zTemp2
.2322	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.2324	85 34		sta $34				sta 	zTemp2+1
.2326	b2 31		lda ($31)			lda 	(zTemp1) 					; space available
.2328	d2 33		cmp ($33)			cmp 	(zTemp2) 					; if >= required length then copy
.232a	b0 17		bcs $2343			bcs 	_WSCopy
.232c	a0 01		ldy #$01			ldy 	#1 							; set the 'available for reclaim' flag
.232e	b1 31		lda ($31),y			lda 	(zTemp1),y
.2330	09 80		ora #$80			ora 	#$80
.2332	91 31		sta ($31),y			sta 	(zTemp1),y
.2334					_WSConcrete:
.2334	b5 4d		lda $4d,x			lda 	NSMantissa1,x 				; string in YA
.2336	a8		tay				tay
.2337	b5 41		lda $41,x			lda 	NSMantissa0,x
.2339	20 d5 12	jsr $12d5			jsr 	StringConcrete
.233c	92 2f		sta ($2f)			sta 	(zTemp0) 					; save returned address
.233e	98		tya				tya
.233f	a0 01		ldy #$01			ldy 	#1
.2341	91 2f		sta ($2f),y			sta 	(zTemp0),y
.2343					_WSCopy
.2343	18		clc				clc  								; copy target+2 to zTemp2
.2344	b2 2f		lda ($2f)			lda 	(zTemp0)
.2346	69 02		adc #$02			adc 	#2
.2348	85 33		sta $33				sta 	zTemp2
.234a	a0 01		ldy #$01			ldy 	#1
.234c	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.234e	69 00		adc #$00			adc 	#0
.2350	85 34		sta $34				sta 	zTemp2+1
.2352	b5 41		lda $41,x			lda 	NSMantissa0,x 				; copy source to zTemp1
.2354	85 31		sta $31				sta 	zTemp1
.2356	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.2358	85 32		sta $32				sta 	zTemp1+1
.235a	b2 31		lda ($31)			lda 	(zTemp1) 					; length of string .. 0 inclusive
.235c	a8		tay				tay
.235d					_WSCopyLoop:
.235d	b1 31		lda ($31),y			lda 	(zTemp1),y
.235f	91 33		sta ($33),y			sta 	(zTemp2),y
.2361	88		dey				dey
.2362	c0 ff		cpy #$ff			cpy 	#$FF
.2364	d0 f7		bne $235d			bne 	_WSCopyLoop
.2366	ca		dex				dex
.2367	7a		ply				ply
.2368	60		rts				rts
.2369					CommandClose:
.2369	fa		plx				plx
.236a	20 07 18	jsr $1807			jsr 	GetInteger8Bit 				; channel to close
.236d	cd 5d 04	cmp $045d			cmp 	currentChannel 				; is it the current channel
.2370	d0 03		bne $2375			bne 	_CCNotCurrent
.2372	9c 5d 04	stz $045d			stz 	currentChannel 				; effectively disables CMD
.2375					_CCNotCurrent:
.2375	20 c3 ff	jsr $ffc3			jsr 	X16_CLOSE 					; close the file
.2378	4c 29 10	jmp $1029			jmp 	NextCommand
.237b					CommandExit:
.237b	fa		plx				plx
.237c	86 2f		stx $2f				stx 	zTemp0 						; stack position.
.237e	4c ff ff	jmp $ffff			jmp 	$FFFF 						; exits the emulator.
.2381					CommandDebug:
.2381	fa		plx				plx
>2382	db						.byte 	$DB 						; causes a break in the emulator
.2383	4c 29 10	jmp $1029			jmp 	NextCommand
.2386					XGetCharacterFromChannel:
.2386	da		phx				phx
.2387	5a		phy				phy
.2388	e0 00		cpx #$00			cpx 	#0 							; is it default
.238a	d0 05		bne $2391			bne 	_XGetChannel
.238c	20 cc ff	jsr $ffcc			jsr 	X16_CLRCHN 					; set default channel
.238f	80 08		bra $2399			bra 	_XGetChar
.2391					_XGetChannel:
.2391	20 c6 ff	jsr $ffc6			jsr 	X16_CHKIN					; CHKIN set channel
.2394	20 b7 ff	jsr $ffb7			jsr 	X16_READST 					; check okay
.2397	d0 06		bne $239f			bne 	_XGCError
.2399					_XGetChar:
.2399	20 e4 ff	jsr $ffe4			jsr 	X16_GETIN
.239c	7a		ply				ply
.239d	fa		plx				plx
.239e	60		rts				rts
.239f					_XGCError:
.239f	4c c4 27	jmp $27c4		jmp	ErrorV_channel
.23a2					XGetHPos:
.23a2	da		phx				phx
.23a3	5a		phy				phy
.23a4	38		sec				sec
.23a5	20 f0 ff	jsr $fff0			jsr 	X16_PLOT
.23a8	98		tya				tya
.23a9	7a		ply				ply
.23aa	fa		plx				plx
.23ab	60		rts				rts
.23ac					X16I2CPoke:
.23ac	fa		plx				plx
.23ad	5a		phy				phy
.23ae	20 07 18	jsr $1807			jsr 	GetInteger8Bit 				; value
.23b1	48		pha				pha
.23b2	ca		dex				dex
.23b3	20 07 18	jsr $1807			jsr 	GetInteger8Bit 				; register
.23b6	48		pha				pha
.23b7	ca		dex				dex
.23b8	20 07 18	jsr $1807			jsr 	GetInteger8Bit 				; device
.23bb	aa		tax				tax
.23bc	7a		ply				ply
.23bd	68		pla				pla
.23be	20 c9 fe	jsr $fec9			jsr 	X16_i2c_write_byte 			; write the byte out.
.23c1	b0 06		bcs $23c9			bcs 	X16I2CError
.23c3	7a		ply				ply
.23c4	a2 ff		ldx #$ff			ldx 	#$FF
.23c6	4c 29 10	jmp $1029			jmp 	NextCommand
.23c9					X16I2CError:
.23c9	4c c4 27	jmp $27c4		jmp	ErrorV_channel
.23cc					X16I2CPeek:
.23cc	fa		plx				plx
.23cd	da		phx				phx
.23ce	5a		phy				phy
.23cf	20 07 18	jsr $1807			jsr 	GetInteger8Bit 				; register
.23d2	48		pha				pha
.23d3	ca		dex				dex
.23d4	20 07 18	jsr $1807			jsr 	GetInteger8Bit 				; device
.23d7	aa		tax				tax 								; X device
.23d8	7a		ply				ply 								; Y register
.23d9	20 c6 fe	jsr $fec6			jsr 	X16_i2c_read_byte 			; read I2C
.23dc	b0 eb		bcs $23c9			bcs 	X16I2CError
.23de	7a		ply				ply 								; restore Y/X
.23df	fa		plx				plx
.23e0	ca		dex				dex 								; drop TOS (register)
.23e1	20 0d 2e	jsr $2e0d			jsr 	FloatSetByte 				; write read value to TOS.
.23e4	4c 29 10	jmp $1029			jmp 	NextCommand
.23e7					CommandOpen:
.23e7	fa		plx				plx
.23e8	a5 44		lda $44				lda 	NSMantissa0+3  				; point zTemp0 to string head, also in XY
.23ea	85 2f		sta $2f				sta 	zTemp0
.23ec	aa		tax				tax
.23ed	a5 50		lda $50				lda 	NSMantissa1+3
.23ef	85 30		sta $30				sta 	zTemp0+1
.23f1	a8		tay				tay
.23f2	e8		inx				inx 								; XY points to first character
.23f3	d0 01		bne $23f6			bne 	_CONoCarry
.23f5	c8		iny				iny
.23f6					_CONoCarry:
.23f6	b2 2f		lda ($2f)			lda 	(zTemp0) 					; get length of filename
.23f8	20 bd ff	jsr $ffbd			jsr 	X16_SETNAM
.23fb	a5 41		lda $41				lda 	NSMantissa0+0
.23fd	a6 42		ldx $42				ldx 	NSMantissa0+1
.23ff	a4 43		ldy $43				ldy 	NSMantissa0+2
.2401	20 ba ff	jsr $ffba			jsr 	X16_SETLFS
.2404	20 c0 ff	jsr $ffc0			jsr 	X16_OPEN
.2407	b0 03		bcs $240c			bcs 	_COError
.2409	4c 29 10	jmp $1029			jmp 	NextCommand
.240c					_COError:
.240c	4c c4 27	jmp $27c4		jmp	ErrorV_channel
.240f					XPokeMemory:
.240f	86 2f		stx $2f				stx 	zTemp0
.2411	84 30		sty $30				sty 	zTemp0+1
.2413	a4 00		ldy $00				ldy 	SelectRAMBank 				; old RAM bank in Y
.2415	ae 6b 05	ldx $056b			ldx 	ramBank 					; switch to BANKed RAMBank if not $FF
.2418	e0 ff		cpx #$ff			cpx 	#$FF
.241a	f0 02		beq $241e			beq 	_XPMNoSwitch
.241c	86 00		stx $00				stx 	SelectRAMBank
.241e					_XPMNoSwitch:
.241e	92 2f		sta ($2f)			sta 	(zTemp0) 					; do the POKE
.2420	84 00		sty $00				sty 	SelectRAMBank 				; reselect previous RAM Bank.
.2422					_XPMExit:
.2422	60		rts				rts
.2423					XPeekMemory:
.2423	86 2f		stx $2f				stx 	zTemp0
.2425	84 30		sty $30				sty 	zTemp0+1
.2427	a4 00		ldy $00				ldy 	SelectRAMBank 				; old RAM bank in Y
.2429	ae 6b 05	ldx $056b			ldx 	ramBank 					; switch to BANKed RAMBank if not $FF
.242c	e0 ff		cpx #$ff			cpx 	#$FF
.242e	f0 02		beq $2432			beq 	_XPMNoSwitch
.2430	86 00		stx $00				stx 	SelectRAMBank
.2432					_XPMNoSwitch:
.2432	b2 2f		lda ($2f)			lda 	(zTemp0) 					; do the PEEK
.2434	84 00		sty $00				sty 	SelectRAMBank 				; reselect previous RAM bank.
.2436	60		rts				rts
.2437					CommandBank:
.2437	fa		plx				plx
.2438	a5 41		lda $41				lda 	NSMantissa0 				; RAM bank
.243a	8d 6b 05	sta $056b			sta 	ramBank 					; store & make current
.243d	85 00		sta $00				sta 	SelectRAMBank
.243f	a5 42		lda $42				lda 	NSMantissa0+1 		 		; ROM specified
.2441	c9 ff		cmp #$ff			cmp 	#$FF
.2443	f0 03		beq $2448			beq 	_CBNoUpdate
.2445	8d 6c 05	sta $056c			sta 	romBank 					; this doesn't set the hardware page.
.2448					_CBNoUpdate:
.2448	a2 ff		ldx #$ff			ldx 	#$FF
.244a	4c 29 10	jmp $1029			jmp 	NextCommand
.056b					ramBank:
>056b							.fill 	1
.056c					romBank:
>056c							.fill 	1
.244d					XPrintCharacterToChannel:
.244d	48		pha				pha
.244e	da		phx				phx
.244f	5a		phy				phy
.2450	48		pha				pha  								; save char
.2451	e0 00		cpx #$00			cpx 	#0 							; check default (0)
.2453	d0 05		bne $245a			bne 	_XPCNotDefault
.2455	20 cc ff	jsr $ffcc			jsr 	X16_CLRCHN					; set default channel
.2458	80 08		bra $2462			bra 	_XPCSend
.245a					_XPCNotDefault:
.245a	20 c9 ff	jsr $ffc9			jsr 	X16_CHKOUT 					; CHKOUT set channel
.245d	20 b7 ff	jsr $ffb7			jsr 	X16_READST 					; check okay
.2460	d0 08		bne $246a			bne 	_XPCError
.2462					_XPCSend:
.2462	68		pla				pla 								; restore character
.2463	20 d2 ff	jsr $ffd2			jsr 	X16_BSOUT 					; print
.2466	7a		ply				ply
.2467	fa		plx				plx
.2468	68		pla				pla
.2469	60		rts				rts
.246a					_XPCError:
.246a	4c c4 27	jmp $27c4		jmp	ErrorV_channel
.246d					XReadClock:
.246d	20 de ff	jsr $ffde			jsr 	X16_RDTIM
.2470	60		rts				rts
.2471					XWriteClock:
.2471	48		pha				pha
.2472	da		phx				phx
.2473	5a		phy				phy
.2474	20 db ff	jsr $ffdb			jsr 	X16_SETTIM
.2477	7a		ply				ply
.2478	fa		plx				plx
.2479	68		pla				pla
.247a	60		rts				rts
.247b					CommandScreen:
.247b	fa		plx				plx
.247c	da		phx				phx
.247d	5a		phy				phy
.247e	20 07 18	jsr $1807			jsr 	GetInteger8Bit
.2481	18		clc				clc
.2482	20 5f ff	jsr $ff5f			jsr 	X16_screen_mode
.2485	7a		ply				ply
.2486	fa		plx				plx
.2487	4c 29 10	jmp $1029			jmp 	NextCommand
.248a					XCommandSleep:
.248a	fa		plx				plx
.248b	5a		phy				phy
.248c	20 46 2a	jsr $2a46			jsr 	FloatIntegerPart
.248f	ca		dex				dex
.2490	20 6d 24	jsr $246d			jsr 	XReadClock 					; read clock to YXA
.2493	18		clc				clc 								; calculate end time in zTemp0
.2494	65 41		adc $41				adc 	NSMantissa0
.2496	85 2f		sta $2f				sta 	zTemp0
.2498	8a		txa				txa
.2499	65 4d		adc $4d				adc 	NSMantissa1
.249b	85 30		sta $30				sta 	zTemp0+1
.249d					_XCWait:
.249d	20 6d 24	jsr $246d			jsr 	XReadClock 					; and wait for it.
.24a0	c5 2f		cmp $2f				cmp 	zTemp0
.24a2	d0 f9		bne $249d			bne 	_XCWait
.24a4	e4 30		cpx $30				cpx 	zTemp0+1
.24a6	d0 f5		bne $249d			bne 	_XCWait
.24a8	a2 ff		ldx #$ff			ldx 	#$FF
.24aa	7a		ply				ply
.24ab	4c 29 10	jmp $1029			jmp 	NextCommand
.24ae					X16_Audio_FMINIT:
.24ae	fa		plx				plx
.24af	5a		phy			phy
.24b0	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>24b3	63 c0					.word	X16A_ym_init
>24b5	0a					.byte	X16_AudioCodeBank
.24b6	a2 ff		ldx #$ff		ldx	#$FF
.24b8	7a		ply			ply
.24b9	4c 29 10	jmp $1029			jmp 	NextCommand
.24bc					X16_Audio_FMNOTE:
.24bc	fa		plx				plx
.24bd	5a		phy			phy
.24be	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_8
.24c1	18		clc			clc
.24c2	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>24c5	03 c0					.word	X16A_bas_fmnote
>24c7	0a					.byte	X16_AudioCodeBank
.24c8	a2 ff		ldx #$ff		ldx	#$FF
.24ca	7a		ply			ply
.24cb	4c 29 10	jmp $1029			jmp 	NextCommand
.24ce					X16_Audio_FMDRUM:
.24ce	fa		plx				plx
.24cf	5a		phy			phy
.24d0	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_8
.24d3	18		clc			clc
.24d4	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>24d7	6f c0					.word	X16A_ym_playdrum
>24d9	0a					.byte	X16_AudioCodeBank
.24da	a2 ff		ldx #$ff		ldx	#$FF
.24dc	7a		ply			ply
.24dd	4c 29 10	jmp $1029			jmp 	NextCommand
.24e0					X16_Audio_FMINST:
.24e0	fa		plx				plx
.24e1	5a		phy			phy
.24e2	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_8
.24e5	38		sec			sec
.24e6	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>24e9	69 c0					.word	X16A_ym_loadpatch
>24eb	0a					.byte	X16_AudioCodeBank
.24ec	a2 ff		ldx #$ff		ldx	#$FF
.24ee	7a		ply			ply
.24ef	4c 29 10	jmp $1029			jmp 	NextCommand
.24f2					X16_Audio_FMVIB:
.24f2	fa		plx				plx
.24f3	5a		phy			phy
.24f4	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_8
.24f7	18		clc			clc
.24f8	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>24fb	09 c0					.word	X16A_bas_fmvib
>24fd	0a					.byte	X16_AudioCodeBank
.24fe	a2 ff		ldx #$ff		ldx	#$FF
.2500	7a		ply			ply
.2501	4c 29 10	jmp $1029			jmp 	NextCommand
.2504					X16_Audio_FMFREQ:
.2504	fa		plx				plx
.2505	5a		phy			phy
.2506	20 ca 11	jsr $11ca		jsr		X16_Audio_Parameters8_16
.2509	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>250c	00 c0					.word	X16A_bas_fmfreq
>250e	0a					.byte	X16_AudioCodeBank
.250f	a2 ff		ldx #$ff		ldx	#$FF
.2511	7a		ply			ply
.2512	4c 29 10	jmp $1029			jmp 	NextCommand
.2515					X16_Audio_FMVOL:
.2515	fa		plx				plx
.2516	5a		phy			phy
.2517	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_8
.251a	18		clc			clc
.251b	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>251e	75 c0					.word	X16A_ym_setatten
>2520	0a					.byte	X16_AudioCodeBank
.2521	a2 ff		ldx #$ff		ldx	#$FF
.2523	7a		ply			ply
.2524	4c 29 10	jmp $1029			jmp 	NextCommand
.2527					X16_Audio_FMPAN:
.2527	fa		plx				plx
.2528	5a		phy			phy
.2529	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_8
.252c	18		clc			clc
.252d	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>2530	7e c0					.word	X16A_ym_setpan
>2532	0a					.byte	X16_AudioCodeBank
.2533	a2 ff		ldx #$ff		ldx	#$FF
.2535	7a		ply			ply
.2536	4c 29 10	jmp $1029			jmp 	NextCommand
.2539					X16_Audio_FMPLAY:
.2539	fa		plx				plx
.253a	5a		phy			phy
.253b	20 e1 11	jsr $11e1		jsr		X16_Audio_Parameters8_String
.253e	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>2541	06 c0					.word	X16A_bas_fmplaystring
>2543	0a					.byte	X16_AudioCodeBank
.2544	a2 ff		ldx #$ff		ldx	#$FF
.2546	7a		ply			ply
.2547	4c 29 10	jmp $1029			jmp 	NextCommand
.254a					X16_Audio_FMCHORD:
.254a	fa		plx				plx
.254b	5a		phy			phy
.254c	20 e1 11	jsr $11e1		jsr		X16_Audio_Parameters8_String
.254f	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>2552	8d c0					.word	X16A_bas_fmchordstring
>2554	0a					.byte	X16_AudioCodeBank
.2555	a2 ff		ldx #$ff		ldx	#$FF
.2557	7a		ply			ply
.2558	4c 29 10	jmp $1029			jmp 	NextCommand
.255b					X16_Audio_FMPOKE:
.255b	fa		plx				plx
.255c	5a		phy			phy
.255d	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_8
.2560	18		clc			clc
.2561	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>2564	8a c0					.word	X16A_ym_write
>2566	0a					.byte	X16_AudioCodeBank
.2567	a2 ff		ldx #$ff		ldx	#$FF
.2569	7a		ply			ply
.256a	4c 29 10	jmp $1029			jmp 	NextCommand
.256d					X16_Audio_PSGINIT:
.256d	fa		plx				plx
.256e	5a		phy			phy
.256f	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>2572	4b c0					.word	X16A_psg_init
>2574	0a					.byte	X16_AudioCodeBank
.2575	a2 ff		ldx #$ff		ldx	#$FF
.2577	7a		ply			ply
.2578	4c 29 10	jmp $1029			jmp 	NextCommand
.257b					X16_Audio_PSGNOTE:
.257b	fa		plx				plx
.257c	5a		phy			phy
.257d	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_8
.2580	18		clc			clc
.2581	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>2584	12 c0					.word	X16A_bas_psgnote
>2586	0a					.byte	X16_AudioCodeBank
.2587	a2 ff		ldx #$ff		ldx	#$FF
.2589	7a		ply			ply
.258a	4c 29 10	jmp $1029			jmp 	NextCommand
.258d					X16_Audio_PSGVOL:
.258d	fa		plx				plx
.258e	5a		phy			phy
.258f	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_8
.2592	18		clc			clc
.2593	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>2596	54 c0					.word	X16A_psg_setatten
>2598	0a					.byte	X16_AudioCodeBank
.2599	a2 ff		ldx #$ff		ldx	#$FF
.259b	7a		ply			ply
.259c	4c 29 10	jmp $1029			jmp 	NextCommand
.259f					X16_Audio_PSGWAV:
.259f	fa		plx				plx
.25a0	5a		phy			phy
.25a1	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_8
.25a4	18		clc			clc
.25a5	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>25a8	15 c0					.word	X16A_bas_psgwav
>25aa	0a					.byte	X16_AudioCodeBank
.25ab	a2 ff		ldx #$ff		ldx	#$FF
.25ad	7a		ply			ply
.25ae	4c 29 10	jmp $1029			jmp 	NextCommand
.25b1					X16_Audio_PSGFREQ:
.25b1	fa		plx				plx
.25b2	5a		phy			phy
.25b3	20 ca 11	jsr $11ca		jsr		X16_Audio_Parameters8_16
.25b6	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>25b9	0f c0					.word	X16A_bas_psgfreq
>25bb	0a					.byte	X16_AudioCodeBank
.25bc	a2 ff		ldx #$ff		ldx	#$FF
.25be	7a		ply			ply
.25bf	4c 29 10	jmp $1029			jmp 	NextCommand
.25c2					X16_Audio_PSGPAN:
.25c2	fa		plx				plx
.25c3	5a		phy			phy
.25c4	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_8
.25c7	18		clc			clc
.25c8	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>25cb	5a c0					.word	X16A_psg_setpan
>25cd	0a					.byte	X16_AudioCodeBank
.25ce	a2 ff		ldx #$ff		ldx	#$FF
.25d0	7a		ply			ply
.25d1	4c 29 10	jmp $1029			jmp 	NextCommand
.25d4					X16_Audio_PSGPLAY:
.25d4	fa		plx				plx
.25d5	5a		phy			phy
.25d6	20 e1 11	jsr $11e1		jsr		X16_Audio_Parameters8_String
.25d9	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>25dc	18 c0					.word	X16A_bas_psgplaystring
>25de	0a					.byte	X16_AudioCodeBank
.25df	a2 ff		ldx #$ff		ldx	#$FF
.25e1	7a		ply			ply
.25e2	4c 29 10	jmp $1029			jmp 	NextCommand
.25e5					X16_Audio_PSGCHORD:
.25e5	fa		plx				plx
.25e6	5a		phy			phy
.25e7	20 e1 11	jsr $11e1		jsr		X16_Audio_Parameters8_String
.25ea	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>25ed	90 c0					.word	X16A_bas_psgchordstring
>25ef	0a					.byte	X16_AudioCodeBank
.25f0	a2 ff		ldx #$ff		ldx	#$FF
.25f2	7a		ply			ply
.25f3	4c 29 10	jmp $1029			jmp 	NextCommand
.25f6					CommandCls:
.25f6	fa		plx				plx
.25f7	a9 93		lda #$93			lda 	#147
.25f9	20 4d 24	jsr $244d			jsr 	XPrintCharacterToChannel
.25fc	4c 29 10	jmp $1029			jmp 	NextCommand
.25ff					CommandLocate:
.25ff	fa		plx				plx
.2600	20 46 2a	jsr $2a46			jsr 	FloatIntegerPart
.2603	ca		dex				dex
.2604	20 46 2a	jsr $2a46			jsr 	FloatIntegerPart
.2607	ca		dex				dex
.2608	a9 13		lda #$13			lda 	#$13 						; home.
.260a	20 4d 24	jsr $244d			jsr 	XPrintCharacterToChannel
.260d	a9 1d		lda #$1d			lda 	#$1D 						; do cursor rights
.260f	a6 41		ldx $41				ldx 	NSMantissa0
.2611	20 1e 26	jsr $261e			jsr 	_CLOutputXA
.2614	a9 11		lda #$11			lda 	#$11 						; do cursor downs.
.2616	a6 42		ldx $42				ldx 	NSMantissa0+1
.2618	20 1e 26	jsr $261e			jsr 	_CLOutputXA
.261b	4c 29 10	jmp $1029			jmp 	NextCommand
.261e					_CLOutputXA:
.261e	ca		dex				dex
.261f	f0 07		beq $2628			beq 	_CLOExit
.2621	30 05		bmi $2628			bmi 	_CLOExit
.2623	20 4d 24	jsr $244d			jsr 	XPrintCharacterToChannel
.2626	80 f6		bra $261e			bra 	_CLOutputXA
.2628					_CLOExit:
.2628	60		rts				rts
.2629					CommandColor:
.2629	fa		plx				plx
.262a	20 46 2a	jsr $2a46			jsr 	FloatIntegerPart
.262d	ca		dex				dex
.262e	20 46 2a	jsr $2a46			jsr 	FloatIntegerPart
.2631	ca		dex				dex
.2632	a5 42		lda $42				lda 	NSMantissa0+1 				; bgr specified
.2634	c9 ff		cmp #$ff			cmp 	#$FF
.2636	f0 08		beq $2640			beq 	_CCNoBGR 					; if so, change background
.2638	20 48 26	jsr $2648			jsr 	_CCSetColour
.263b	a9 01		lda #$01			lda 	#$01 						; swap FGR/BGR
.263d	20 4d 24	jsr $244d			jsr 	XPrintCharacterToChannel
.2640					_CCNoBGR:
.2640	a5 41		lda $41				lda 	NSMantissa0
.2642	20 48 26	jsr $2648			jsr 	_CCSetColour
.2645	4c 29 10	jmp $1029			jmp 	NextCommand
.2648					_CCSetColour:
.2648	29 0f		and #$0f			and 	#15 						; look up in control codes table.
.264a	aa		tax				tax
.264b	bd 52 26	lda $2652,x			lda 	_CCCommandTable,x
.264e	20 4d 24	jsr $244d			jsr 	XPrintCharacterToChannel
.2651	60		rts				rts
.2652					_CCCommandTable:
>2652	90 05 1c 9f 9c 1e 1f 9e				.byte	 $90,$05,$1c,$9f,$9c,$1e,$1f,$9e
>265a	81 95 96 97 98 99 9a 9b				.byte	 $81,$95,$96,$97,$98,$99,$9a,$9b
.2662					CommandVPOKE:
.2662	fa		plx				plx
.2663	20 07 18	jsr $1807			jsr 	GetInteger8Bit 				; poke value
.2666	48		pha				pha
.2667	ca		dex				dex
.2668	20 46 2a	jsr $2a46			jsr 	FloatIntegerPart
.266b	b5 41		lda $41,x			lda 	NSMantissa0,x
.266d	8d 20 9f	sta $9f20			sta 	VRAMLow0
.2670	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.2672	8d 21 9f	sta $9f21			sta 	VRAMMed0
.2675	ca		dex				dex
.2676	20 46 2a	jsr $2a46			jsr 	FloatIntegerPart
.2679	20 07 18	jsr $1807			jsr 	GetInteger8Bit
.267c	8d 22 9f	sta $9f22			sta 	VRAMHigh0
.267f	ca		dex				dex
.2680	68		pla				pla 								; poke value back
.2681	8d 23 9f	sta $9f23			sta 	VRAMData0					; and write it out.
.2684	4c 29 10	jmp $1029			jmp 	NextCommand
.2687					CommandVPEEK:
.2687	fa		plx				plx
.2688	20 46 2a	jsr $2a46			jsr 	FloatIntegerPart
.268b	b5 41		lda $41,x			lda 	NSMantissa0,x
.268d	8d 20 9f	sta $9f20			sta 	VRAMLow0
.2690	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.2692	8d 21 9f	sta $9f21			sta 	VRAMMed0
.2695	ca		dex				dex
.2696	20 46 2a	jsr $2a46			jsr 	FloatIntegerPart
.2699	20 07 18	jsr $1807			jsr 	GetInteger8Bit
.269c	8d 22 9f	sta $9f22			sta 	VRAMHigh0
.269f	ad 23 9f	lda $9f23			lda 	VRAMData0					; read data
.26a2	20 0d 2e	jsr $2e0d			jsr 	FloatSetByte 				; return as byte
.26a5	4c 29 10	jmp $1029			jmp 	NextCommand

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/common.library

=$80					C64_END                  = $80 ; $80 end
=$81					C64_FOR                  = $81 ; $81 for
=$82					C64_NEXT                 = $82 ; $82 next
=$83					C64_DATA                 = $83 ; $83 data
=$84					C64_INPUTHASH            = $84 ; $84 input#
=$85					C64_INPUT                = $85 ; $85 input
=$86					C64_DIM                  = $86 ; $86 dim
=$87					C64_READ                 = $87 ; $87 read
=$88					C64_LET                  = $88 ; $88 let
=$89					C64_GOTO                 = $89 ; $89 goto
=$8a					C64_RUN                  = $8a ; $8a run
=$8b					C64_IF                   = $8b ; $8b if
=$8c					C64_RESTORE              = $8c ; $8c restore
=$8d					C64_GOSUB                = $8d ; $8d gosub
=$8e					C64_RETURN               = $8e ; $8e return
=$8f					C64_REM                  = $8f ; $8f rem
=$90					C64_STOP                 = $90 ; $90 stop
=$91					C64_ON                   = $91 ; $91 on
=$92					C64_WAIT                 = $92 ; $92 wait
=$93					C64_LOAD                 = $93 ; $93 load
=$94					C64_SAVE                 = $94 ; $94 save
=$95					C64_VERIFY               = $95 ; $95 verify
=$96					C64_DEF                  = $96 ; $96 def
=$97					C64_POKE                 = $97 ; $97 poke
=$98					C64_PRINTHASH            = $98 ; $98 print#
=$99					C64_PRINT                = $99 ; $99 print
=$9a					C64_CONT                 = $9a ; $9a cont
=$9b					C64_LIST                 = $9b ; $9b list
=$9c					C64_CLR                  = $9c ; $9c clr
=$9d					C64_CMD                  = $9d ; $9d cmd
=$9e					C64_SYS                  = $9e ; $9e sys
=$9f					C64_OPEN                 = $9f ; $9f open
=$a0					C64_CLOSE                = $a0 ; $a0 close
=$a1					C64_GET                  = $a1 ; $a1 get
=$a2					C64_NEW                  = $a2 ; $a2 new
=$a3					C64_TABLB                = $a3 ; $a3 tab(
=$a4					C64_TO                   = $a4 ; $a4 to
=$a5					C64_FN                   = $a5 ; $a5 fn
=$a6					C64_SPCLB                = $a6 ; $a6 spc(
=$a7					C64_THEN                 = $a7 ; $a7 then
=$a8					C64_NOT                  = $a8 ; $a8 not
=$a9					C64_STEP                 = $a9 ; $a9 step
=$aa					C64_PLUS                 = $aa ; $aa +
=$ab					C64_MINUS                = $ab ; $ab -
=$ac					C64_TIMES                = $ac ; $ac *
=$ad					C64_DIVIDE               = $ad ; $ad /
=$ae					C64_POWER                = $ae ; $ae ^
=$af					C64_AND                  = $af ; $af and
=$b0					C64_OR                   = $b0 ; $b0 or
=$b1					C64_GREATER              = $b1 ; $b1 >
=$b2					C64_EQUAL                = $b2 ; $b2 =
=$b3					C64_LESS                 = $b3 ; $b3 <
=$b4					C64_SGN                  = $b4 ; $b4 sgn
=$b5					C64_INT                  = $b5 ; $b5 int
=$b6					C64_ABS                  = $b6 ; $b6 abs
=$b7					C64_USR                  = $b7 ; $b7 usr
=$b8					C64_FRE                  = $b8 ; $b8 fre
=$b9					C64_POS                  = $b9 ; $b9 pos
=$ba					C64_SQR                  = $ba ; $ba sqr
=$bb					C64_RND                  = $bb ; $bb rnd
=$bc					C64_LOG                  = $bc ; $bc log
=$bd					C64_EXP                  = $bd ; $bd exp
=$be					C64_COS                  = $be ; $be cos
=$bf					C64_SIN                  = $bf ; $bf sin
=$c0					C64_TAN                  = $c0 ; $c0 tan
=$c1					C64_ATN                  = $c1 ; $c1 atn
=$c2					C64_PEEK                 = $c2 ; $c2 peek
=$c3					C64_LEN                  = $c3 ; $c3 len
=$c4					C64_STRDOLLAR            = $c4 ; $c4 str$
=$c5					C64_VAL                  = $c5 ; $c5 val
=$c6					C64_ASC                  = $c6 ; $c6 asc
=$c7					C64_CHRDOLLAR            = $c7 ; $c7 chr$
=$c8					C64_LEFTDOLLAR           = $c8 ; $c8 left$
=$c9					C64_RIGHTDOLLAR          = $c9 ; $c9 right$
=$ca					C64_MIDDOLLAR            = $ca ; $ca mid$
=$cb					C64_GO                   = $cb ; $cb go
=$ce80					C64_MON                  = $ce80 ; $ce80 mon
=$ce81					C64_DOS                  = $ce81 ; $ce81 dos
=$ce82					C64_OLD                  = $ce82 ; $ce82 old
=$ce83					C64_GEOS                 = $ce83 ; $ce83 geos
=$ce84					C64_VPOKE                = $ce84 ; $ce84 vpoke
=$ce85					C64_VLOAD                = $ce85 ; $ce85 vload
=$ce86					C64_SCREEN               = $ce86 ; $ce86 screen
=$ce87					C64_PSET                 = $ce87 ; $ce87 pset
=$ce88					C64_LINE                 = $ce88 ; $ce88 line
=$ce89					C64_FRAME                = $ce89 ; $ce89 frame
=$ce8a					C64_RECT                 = $ce8a ; $ce8a rect
=$ce8b					C64_CHAR                 = $ce8b ; $ce8b char
=$ce8c					C64_MOUSE                = $ce8c ; $ce8c mouse
=$ce8d					C64_COLOR                = $ce8d ; $ce8d color
=$ce8e					C64_TEST                 = $ce8e ; $ce8e test
=$ce8f					C64_RESET                = $ce8f ; $ce8f reset
=$ce90					C64_CLS                  = $ce90 ; $ce90 cls
=$ce91					C64_CODEX                = $ce91 ; $ce91 codex
=$ce92					C64_LOCATE               = $ce92 ; $ce92 locate
=$ce93					C64_BOOT                 = $ce93 ; $ce93 boot
=$ce94					C64_KEYMAP               = $ce94 ; $ce94 keymap
=$ce95					C64_BLOAD                = $ce95 ; $ce95 bload
=$ce96					C64_BVLOAD               = $ce96 ; $ce96 bvload
=$ce97					C64_BVERIFY              = $ce97 ; $ce97 bverify
=$ce98					C64_BANK                 = $ce98 ; $ce98 bank
=$ce99					C64_FMINIT               = $ce99 ; $ce99 fminit
=$ce9a					C64_FMNOTE               = $ce9a ; $ce9a fmnote
=$ce9b					C64_FMDRUM               = $ce9b ; $ce9b fmdrum
=$ce9c					C64_FMINST               = $ce9c ; $ce9c fminst
=$ce9d					C64_FMVIB                = $ce9d ; $ce9d fmvib
=$ce9e					C64_FMFREQ               = $ce9e ; $ce9e fmfreq
=$ce9f					C64_FMVOL                = $ce9f ; $ce9f fmvol
=$cea0					C64_FMPAN                = $cea0 ; $cea0 fmpan
=$cea1					C64_FMPLAY               = $cea1 ; $cea1 fmplay
=$cea2					C64_FMCHORD              = $cea2 ; $cea2 fmchord
=$cea3					C64_FMPOKE               = $cea3 ; $cea3 fmpoke
=$cea4					C64_PSGINIT              = $cea4 ; $cea4 psginit
=$cea5					C64_PSGNOTE              = $cea5 ; $cea5 psgnote
=$cea6					C64_PSGVOL               = $cea6 ; $cea6 psgvol
=$cea7					C64_PSGWAV               = $cea7 ; $cea7 psgwav
=$cea8					C64_PSGFREQ              = $cea8 ; $cea8 psgfreq
=$cea9					C64_PSGPAN               = $cea9 ; $cea9 psgpan
=$ceaa					C64_PSGPLAY              = $ceaa ; $ceaa psgplay
=$ceab					C64_PSGCHORD             = $ceab ; $ceab psgchord
=$ceac					C64_REBOOT               = $ceac ; $ceac reboot
=$cead					C64_POWEROFF             = $cead ; $cead poweroff
=$ceae					C64_I2CPOKE              = $ceae ; $ceae i2cpoke
=$ceaf					C64_SLEEP                = $ceaf ; $ceaf sleep
=$ceb0					C64_BSAVE                = $ceb0 ; $ceb0 bsave
=$ceb1					C64_MENU                 = $ceb1 ; $ceb1 menu
=$ceb2					C64_REN                  = $ceb2 ; $ceb2 ren
=$ceb3					C64_LINPUT               = $ceb3 ; $ceb3 linput
=$ceb4					C64_LINPUTHASH           = $ceb4 ; $ceb4 linput#
=$ceb5					C64_BINPUTHASH           = $ceb5 ; $ceb5 binput#
=$ceb6					C64_HELP                 = $ceb6 ; $ceb6 help
=$ced0					C64_VPEEK                = $ced0 ; $ced0 vpeek
=$ced1					C64_MX                   = $ced1 ; $ced1 mx
=$ced2					C64_MY                   = $ced2 ; $ced2 my
=$ced3					C64_MB                   = $ced3 ; $ced3 mb
=$ced4					C64_JOY                  = $ced4 ; $ced4 joy
=$ced5					C64_HEXDOLLAR            = $ced5 ; $ced5 hex$
=$ced6					C64_BINDOLLAR            = $ced6 ; $ced6 bin$
=$ced7					C64_I2CPEEK              = $ced7 ; $ced7 i2cpeek
=$ced8					C64_POINTER              = $ced8 ; $ced8 pointer
=$ced9					C64_STRPTR               = $ced9 ; $ced9 strptr
=$ceda					C64_RPTDOLLAR            = $ceda ; $ceda rpt$
=$1000					CodeStart = $1000
=$22					ZeroPageMandatory = $22
=$400					MemoryStorage = $400
.0028					codePtr:
>0028							.fill 	2
.002a					codePage:
>002a							.fill 	1
.002b					objPtr:
>002b							.fill 	2 							; bytes must not change (it could expand) as the
.002d					objPage:
>002d							.fill 	1
.002e					objIncrement:
>002e							.fill 	1
.002f					zTemp0:
>002f							.fill 	2
.0031					zTemp1:
>0031							.fill 	2
.0033					zTemp2:
>0033							.fill 	2
=$80					PCD_STARTBINARY = $80
=$8d					PCD_ENDBINARY = $8d
=$8d					PCD_STARTCOMMAND = $8d
=$ca					PCD_ENDCOMMAND = $ca
=$ca					PCD_STARTSYSTEM = $ca
=$d5					PCD_ENDSYSTEM = $d5
=$80					PCD_PLUS             = $80 ; +
=$81					PCD_MINUS            = $81 ; -
=$82					PCD_TIMES            = $82 ; *
=$83					PCD_DIVIDE           = $83 ; /
=$84					PCD_POWER            = $84 ; ^
=$85					PCD_AND              = $85 ; and
=$86					PCD_OR               = $86 ; or
=$87					PCD_GREATER          = $87 ; >
=$88					PCD_EQUAL            = $88 ; =
=$89					PCD_LESS             = $89 ; <
=$8a					PCD_GREATEREQUAL     = $8a ; >=
=$8b					PCD_LESSGREATER      = $8b ; <>
=$8c					PCD_LESSEQUAL        = $8c ; <=
=$8d					PCD_ABS              = $8d ; abs
=$8e					PCD_ARRAY            = $8e ; array
=$8f					PCD_ASC              = $8f ; asc
=$90					PCD_ASSERT           = $90 ; assert
=$91					PCD_BINDOLLAR        = $91 ; bin$
=$92					PCD_PRINTCMD_CHR     = $92 ; print.chr
=$93					PCD_CHRDOLLAR        = $93 ; chr$
=$94					PCD_SCMD_CMP         = $94 ; s.cmp
=$95					PCD_FOR              = $95 ; for
=$96					PCD_FRE              = $96 ; fre
=$97					PCD_GET              = $97 ; get
=$98					PCD_RETURN           = $98 ; return
=$99					PCD_PSET             = $99 ; pset
=$9a					PCD_LINE             = $9a ; line
=$9b					PCD_RECT             = $9b ; rect
=$9c					PCD_FRAME            = $9c ; frame
=$9d					PCD_CHAR             = $9d ; char
=$9e					PCD_HEXDOLLAR        = $9e ; hex$
=$9f					PCD_INPUT            = $9f ; input
=$a0					PCD_INPUTDOLLAR      = $a0 ; input$
=$a1					PCD_INPUTCMD_START   = $a1 ; input.start
=$a2					PCD_LEN              = $a2 ; len
=$a3					PCD_FCMD_CMP         = $a3 ; f.cmp
=$a4					PCD_INTCMD_DIV       = $a4 ; int.div
=$a5					PCD_NEGATE           = $a5 ; negate
=$a6					PCD_NEWCMD_LINE      = $a6 ; new.line
=$a7					PCD_NEXT             = $a7 ; next
=$a8					PCD_NOT              = $a8 ; not
=$a9					PCD_ON               = $a9 ; on
=$aa					PCD_MOREON           = $aa ; moreon
=$ab					PCD_PEEK             = $ab ; peek
=$ac					PCD_POKE             = $ac ; poke
=$ad					PCD_POS              = $ad ; pos
=$ae					PCD_GETCHANNEL       = $ae ; getchannel
=$af					PCD_SETCHANNEL       = $af ; setchannel
=$b0					PCD_PRINTCMD_N       = $b0 ; print.n
=$b1					PCD_PRINTCMD_S       = $b1 ; print.s
=$b2					PCD_READ             = $b2 ; read
=$b3					PCD_READDOLLAR       = $b3 ; read$
=$b4					PCD_RND              = $b4 ; rnd
=$b5					PCD_CONCAT           = $b5 ; concat
=$b6					PCD_SGN              = $b6 ; sgn
=$b7					PCD_PRINTCMD_TAB     = $b7 ; print.tab
=$b8					PCD_PRINTCMD_POS     = $b8 ; print.pos
=$b9					PCD_PRINTCMD_SPC     = $b9 ; print.spc
=$ba					PCD_STRDOLLAR        = $ba ; str$
=$bb					PCD_LEFTDOLLAR       = $bb ; left$
=$bc					PCD_RIGHTDOLLAR      = $bc ; right$
=$bd					PCD_MIDDOLLAR        = $bd ; mid$
=$be					PCD_SWAP             = $be ; swap
=$bf					PCD_TI               = $bf ; ti
=$c0					PCD_TIDOLLAR         = $c0 ; ti$
=$c1					PCD_USR              = $c1 ; usr
=$c2					PCD_VAL              = $c2 ; val
=$c3					PCD_CLOSE            = $c3 ; close
=$c4					PCD_EXIT             = $c4 ; exit
=$c5					PCD_DEBUG            = $c5 ; debug
=$c6					PCD_OPEN             = $c6 ; open
=$c7					PCD_SCREEN           = $c7 ; screen
=$c8					PCD_VPOKE            = $c8 ; vpoke
=$c9					PCD_VPEEK            = $c9 ; vpeek
=$ca					PCD_CMD_SHIFT        = $ca ; .shift
=$cb					PCD_CMD_BYTE         = $cb ; .byte
=$cc					PCD_CMD_WORD         = $cc ; .word
=$cd					PCD_CMD_FLOAT        = $cd ; .float
=$ce					PCD_CMD_STRING       = $ce ; .string
=$cf					PCD_CMD_DATA         = $cf ; .data
=$d0					PCD_CMD_GOTO         = $d0 ; .goto
=$d1					PCD_CMD_GOSUB        = $d1 ; .gosub
=$d2					PCD_CMD_GOTOCMD_Z    = $d2 ; .goto.z
=$d3					PCD_CMD_GOTOCMD_NZ   = $d3 ; .goto.nz
=$d4					PCD_CMD_VARSPACE     = $d4 ; .varspace
=$ca80					PCD_CLR              = $ca80 ; clr
=$ca81					PCD_DIM              = $ca81 ; dim
=$ca82					PCD_END              = $ca82 ; end
=$ca83					PCD_JOY              = $ca83 ; joy
=$ca84					PCD_INT              = $ca84 ; int
=$ca85					PCD_SQR              = $ca85 ; sqr
=$ca86					PCD_LOG              = $ca86 ; log
=$ca87					PCD_EXP              = $ca87 ; exp
=$ca88					PCD_COS              = $ca88 ; cos
=$ca89					PCD_SIN              = $ca89 ; sin
=$ca8a					PCD_TAN              = $ca8a ; tan
=$ca8b					PCD_ATN              = $ca8b ; atn
=$ca8c					PCD_MOUSE            = $ca8c ; mouse
=$ca8d					PCD_MB               = $ca8d ; mb
=$ca8e					PCD_MX               = $ca8e ; mx
=$ca8f					PCD_MY               = $ca8f ; my
=$ca90					PCD_RESTORE          = $ca90 ; restore
=$ca91					PCD_STOP             = $ca91 ; stop
=$ca92					PCD_SYS              = $ca92 ; sys
=$ca93					PCD_TIDOLLARCMD_WRITE = $ca93 ; ti$.write
=$ca94					PCD_WAIT             = $ca94 ; wait
=$ca95					PCD_I2CPOKE          = $ca95 ; i2cpoke
=$ca96					PCD_I2CPEEK          = $ca96 ; i2cpeek
=$ca97					PCD_BANK             = $ca97 ; bank
=$ca98					PCD_SLEEP            = $ca98 ; sleep
=$ca99					PCD_FMINIT           = $ca99 ; fminit
=$ca9a					PCD_FMNOTE           = $ca9a ; fmnote
=$ca9b					PCD_FMDRUM           = $ca9b ; fmdrum
=$ca9c					PCD_FMINST           = $ca9c ; fminst
=$ca9d					PCD_FMVIB            = $ca9d ; fmvib
=$ca9e					PCD_FMFREQ           = $ca9e ; fmfreq
=$ca9f					PCD_FMVOL            = $ca9f ; fmvol
=$caa0					PCD_FMPAN            = $caa0 ; fmpan
=$caa1					PCD_FMPLAY           = $caa1 ; fmplay
=$caa2					PCD_FMCHORD          = $caa2 ; fmchord
=$caa3					PCD_FMPOKE           = $caa3 ; fmpoke
=$caa4					PCD_PSGINIT          = $caa4 ; psginit
=$caa5					PCD_PSGNOTE          = $caa5 ; psgnote
=$caa6					PCD_PSGVOL           = $caa6 ; psgvol
=$caa7					PCD_PSGWAV           = $caa7 ; psgwav
=$caa8					PCD_PSGFREQ          = $caa8 ; psgfreq
=$caa9					PCD_PSGPAN           = $caa9 ; psgpan
=$caaa					PCD_PSGPLAY          = $caaa ; psgplay
=$caab					PCD_PSGCHORD         = $caab ; psgchord
=$caac					PCD_CLS              = $caac ; cls
=$caad					PCD_LOCATE           = $caad ; locate
=$caae					PCD_COLOR            = $caae ; color
.26a8					ErrorV_range:
.26a8	20 1e 14	jsr $141e		jsr	ErrorHandler
>26ab	4f 55 54 20 4f 46 20 52			.text	"OUT OF RANGE",0
>26b3	41 4e 47 45 00
.26b8					ErrorV_value:
.26b8	20 1e 14	jsr $141e		jsr	ErrorHandler
>26bb	42 41 44 20 56 41 4c 55			.text	"BAD VALUE",0
>26c3	45 00
.26c5					ErrorV_syntax:
.26c5	20 1e 14	jsr $141e		jsr	ErrorHandler
>26c8	53 59 4e 54 41 58 20 45			.text	"SYNTAX ERROR",0
>26d0	52 52 4f 52 00
.26d5					ErrorV_type:
.26d5	20 1e 14	jsr $141e		jsr	ErrorHandler
>26d8	54 59 50 45 20 4d 49 53			.text	"TYPE MISMATCH",0
>26e0	4d 41 54 43 48 00
.26e6					ErrorV_unimplemented:
.26e6	20 1e 14	jsr $141e		jsr	ErrorHandler
>26e9	4e 4f 54 20 49 4d 50 4c			.text	"NOT IMPLEMENTED",0
>26f1	45 4d 45 4e 54 45 44 00
.26f9					ErrorV_assert:
.26f9	20 1e 14	jsr $141e		jsr	ErrorHandler
>26fc	41 53 53 45 52 54 20 46			.text	"ASSERT FAIL",0
>2704	41 49 4c 00
.2708					ErrorV_line:
.2708	20 1e 14	jsr $141e		jsr	ErrorHandler
>270b	55 4e 4b 4e 4f 57 4e 20			.text	"UNKNOWN LINE NUMBER",0
>2713	4c 49 4e 45 20 4e 55 4d 42 45 52 00
.271f					ErrorV_internal:
.271f	20 1e 14	jsr $141e		jsr	ErrorHandler
>2722	49 4e 54 45 52 4e 41 4c			.text	"INTERNAL ERROR",0
>272a	20 45 52 52 4f 52 00
.2731					ErrorV_divzero:
.2731	20 1e 14	jsr $141e		jsr	ErrorHandler
>2734	44 49 56 49 44 45 20 42			.text	"DIVIDE BY ZERO",0
>273c	59 20 5a 45 52 4f 00
.2743					ErrorV_structure:
.2743	20 1e 14	jsr $141e		jsr	ErrorHandler
>2746	53 54 52 55 43 54 55 52			.text	"STRUCTURE IMBALANCE",0
>274e	45 20 49 4d 42 41 4c 41 4e 43 45 00
.275a					ErrorV_stop:
.275a	20 1e 14	jsr $141e		jsr	ErrorHandler
>275d	50 52 4f 47 52 41 4d 20			.text	"PROGRAM STOPPED",0
>2765	53 54 4f 50 50 45 44 00
.276d					ErrorV_data:
.276d	20 1e 14	jsr $141e		jsr	ErrorHandler
>2770	4f 55 54 20 4f 46 20 44			.text	"OUT OF DATA",0
>2778	41 54 41 00
.277c					ErrorV_undeclared:
.277c	20 1e 14	jsr $141e		jsr	ErrorHandler
>277f	55 4e 4b 4e 4f 57 4e 20			.text	"UNKNOWN ARRAY",0
>2787	41 52 52 41 59 00
.278d					ErrorV_redefine:
.278d	20 1e 14	jsr $141e		jsr	ErrorHandler
>2790	41 52 52 41 59 20 52 45			.text	"ARRAY REDEFINED",0
>2798	44 45 46 49 4e 45 44 00
.27a0					ErrorV_index:
.27a0	20 1e 14	jsr $141e		jsr	ErrorHandler
>27a3	42 41 44 20 41 52 52 41			.text	"BAD ARRAY INDEX",0
>27ab	59 20 49 4e 44 45 58 00
.27b3					ErrorV_memory:
.27b3	20 1e 14	jsr $141e		jsr	ErrorHandler
>27b6	4f 55 54 20 4f 46 20 4d			.text	"OUT OF MEMORY",0
>27be	45 4d 4f 52 59 00
.27c4					ErrorV_channel:
.27c4	20 1e 14	jsr $141e		jsr	ErrorHandler
>27c7	49 4e 50 55 54 2f 4f 55			.text	"INPUT/OUTPUT ERROR",0
>27cf	54 50 55 54 20 45 52 52 4f 52 00
.27da					MoveObjectForward:
.27da	b2 2b		lda ($2b)			lda 	(objPtr) 					; get next
.27dc	c9 ff		cmp #$ff			cmp 	#$FF
.27de	f0 36		beq $2816			beq 	_MOFEnd
.27e0	c9 40		cmp #$40			cmp 	#$40 						; 00-3F
.27e2	90 24		bcc $2808			bcc 	_MOFAdvance1 				; forward 1
.27e4	a0 02		ldy #$02			ldy 	#2 							; 40-6F
.27e6	c9 70		cmp #$70			cmp 	#$70 						; forward 2
.27e8	90 20		bcc $280a			bcc 	_MOFAdvanceY
.27ea	c9 ca		cmp #$ca			cmp 	#PCD_STARTSYSTEM 			; 70 - System tokens.
.27ec	90 1a		bcc $2808			bcc 	_MOFAdvance1 				; forward 1
.27ee	a8		tay				tay 								; read the size.
.27ef	b9 54 27	lda $2754,y			lda 	MOFSizeTable-PCD_STARTSYSTEM,y
.27f2	a8		tay				tay
.27f3	c8		iny				iny 								; add 1 for the system token.
.27f4	d0 14		bne $280a			bne 	_MOFAdvanceY 				; if 0, was $FF thus a string/data skip.
.27f6	a0 01		ldy #$01			ldy 	#1 							; get length byte
.27f8	b1 2b		lda ($2b),y			lda 	(objPtr),y
.27fa	a8		tay				tay 								; into Y.
.27fb	18		clc				clc
.27fc	a5 2b		lda $2b				lda 	objPtr						; add 2 to the object pointer
.27fe	69 02		adc #$02			adc 	#2
.2800	85 2b		sta $2b				sta 	objPtr
.2802	90 02		bcc $2806			bcc 	_MOFNoCarry1
.2804	e6 2c		inc $2c				inc 	objPtr+1
.2806					_MOFNoCarry1:
.2806	80 02		bra $280a			bra 	_MOFAdvanceY
.2808					_MOFAdvance1:
.2808	a0 01		ldy #$01			ldy 	#1
.280a					_MOFAdvanceY:
.280a	98		tya				tya 								; add Y to objPtr
.280b	18		clc				clc
.280c	65 2b		adc $2b				adc 	objPtr
.280e	85 2b		sta $2b				sta 	objPtr
.2810	90 02		bcc $2814			bcc 	_MOFNoCarry2
.2812	e6 2c		inc $2c				inc 	objPtr+1
.2814					_MOFNoCarry2:
.2814	18		clc				clc 								; not completed.
.2815	60		rts				rts
.2816					_MOFEnd:
.2816	e6 2b		inc $2b				inc 	objPtr
.2818	d0 02		bne $281c			bne 	_MOFENoCarry
.281a	e6 2c		inc $2c				inc 	objPtr+1
.281c					_MOFENoCarry:
.281c	38		sec				sec
.281d	60		rts				rts
.281e					MOFSizeTable:
>281e	01					.byte	1         	; $ca .shift
>281f	01					.byte	1         	; $cb .byte
>2820	02					.byte	2         	; $cc .word
>2821	05					.byte	5         	; $cd .float
>2822	ff					.byte	255       	; $ce .string
>2823	ff					.byte	255       	; $cf .data
>2824	02					.byte	2         	; $d0 .goto
>2825	02					.byte	2         	; $d1 .gosub
>2826	02					.byte	2         	; $d2 .goto.z
>2827	02					.byte	2         	; $d3 .goto.nz
>2828	02					.byte	2         	; $d4 .varspace

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library

=12					MathStackSize = 12
=$40					NSSString = $40 							; string vs typemask
=$00					NSSIFloat = $00 							; ifloat vs typemask
=$20					NSSIInt16 = $20								; when set, a reference is a 16 bit reference (e.g. a%)
=$40					NSSTypeMask = $40
=$80					NSSArray = $80  							; array (in variable code)
.0035					NSStatus:
>0035							.fill 	MathStackSize
.0041					NSMantissa0:
>0041							.fill 	MathStackSize 				; (this is my integer mantissa system)
.004d					NSMantissa1:
>004d							.fill 	MathStackSize
.0059					NSMantissa2:
>0059							.fill 	MathStackSize
.0065					NSMantissa3:
>0065							.fill 	MathStackSize
.0071					NSExponent:
>0071							.fill 	MathStackSize
.056d					numberBuffer:
>056d							.fill 	34
.2829					FloatSubtract:
.2829	b5 35		lda $35,x			lda 	NSStatus,x 					; negate top of stack
.282b	49 80		eor #$80			eor 	#$80
.282d	95 35		sta $35,x			sta 	NSStatus,x					; and fall through.
.282f					FloatAdd:
.282f	ca		dex				dex
.2830	b5 71		lda $71,x			lda 	NSExponent,x 				; can use optimised.
.2832	15 72		ora $72,x			ora 	NSExponent+1,x
.2834	15 65		ora $65,x			ora 	NSMantissa3,x
.2836	15 66		ora $66,x			ora 	NSMantissa3+1,x
.2838	d0 04		bne $283e			bne 	_FAUseFloat
.283a	20 cb 2b	jsr $2bcb			jsr 	FloatInt32Add 				; use the int32 one.
.283d	60		rts				rts
.283e					_FAUseFloat:
.283e	20 60 2b	jsr $2b60			jsr 	FloatNormalise 				; normalise S[X]
.2841	f0 51		beq $2894			beq 	_FAReturn1
.2843	e8		inx				inx 								; normalise S[X+1]
.2844	20 60 2b	jsr $2b60			jsr 	FloatNormalise
.2847	ca		dex				dex
.2848	c9 00		cmp #$00			cmp 	#0
.284a	f0 60		beq $28ac			beq 	_FAExit 					; if so, just return A
.284c	b5 71		lda $71,x			lda 	NSExponent,x 				; are the exponents the same ?
.284e	d5 72		cmp $72,x			cmp 	NSExponent+1,x
.2850	f0 18		beq $286a			beq 	_FAExponentsEqual
.2852	b5 71		lda $71,x			lda 	NSExponent,x 				; work out the larger exponent
.2854	a8		tay				tay
.2855	38		sec				sec 								; do a signed comparison of the exponents.
.2856	f5 72		sbc $72,x			sbc 	NSExponent+1,x
.2858	50 02		bvc $285c			bvc 	_FANoSignedChange
.285a	49 80		eor #$80			eor 	#$80
.285c					_FANoSignedChange:
.285c	29 80		and #$80			and 	#$80
.285e	10 02		bpl $2862			bpl 	_FAHaveMax
.2860	b4 72		ldy $72,x			ldy 	NSExponent+1,x
.2862					_FAHaveMax:
.2862	20 ad 28	jsr $28ad			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.2865	e8		inx				inx
.2866	20 ad 28	jsr $28ad			jsr 	_FAShiftToExponent
.2869	ca		dex				dex
.286a					_FAExponentsEqual:
.286a	b5 35		lda $35,x			lda 	NSStatus,x 					; are the signs the same
.286c	55 36		eor $36,x			eor 	NSStatus+1,x
.286e	30 0e		bmi $287e			bmi 	_FADifferentSigns
.2870	20 97 2b	jsr $2b97			jsr 	FloatAddTopTwoStack 		; do the add of the mantissae
.2873	b5 65		lda $65,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.2875	10 35		bpl $28ac			bpl 	_FAExit 					; if no, we are done.
.2877	20 24 2e	jsr $2e24			jsr 	FloatShiftRight 				; shift A right, renormalising it.
.287a	f6 71		inc $71,x			inc 	NSExponent,x 				; bump the exponent and exit
.287c	80 2e		bra $28ac			bra 	_FAExit
.287e					_FADifferentSigns:
.287e	20 b1 2b	jsr $2bb1			jsr 	FloatSubTopTwoStack 		; subtract mantissa B from A
.2881	b5 65		lda $65,x			lda 	NSMantissa3,x 				; is the result negative ?
.2883	10 06		bpl $288b			bpl 	_FACheckZero 				; if no, check for -0
.2885	20 cd 2d	jsr $2dcd			jsr 	FloatNegate 					; netate result
.2888	20 d4 2d	jsr $2dd4			jsr 	FloatNegateMantissa 			; negate (2'c) the mantissa
.288b					_FACheckZero:
.288b	20 2d 2e	jsr $2e2d			jsr 	FloatIsZero	 				; check for -0
.288e	d0 1c		bne $28ac			bne 	_FAExit
.2890	74 35		stz $35,x			stz 	NSStatus,x
.2892	80 18		bra $28ac			bra 	_FAExit
.2894					_FAReturn1:
.2894	b5 42		lda $42,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.2896	95 41		sta $41,x			sta 	NSMantissa0,x
.2898	b5 4e		lda $4e,x			lda 	NSMantissa1+1,x
.289a	95 4d		sta $4d,x			sta 	NSMantissa1,x
.289c	b5 5a		lda $5a,x			lda 	NSMantissa2+1,x
.289e	95 59		sta $59,x			sta 	NSMantissa2,x
.28a0	b5 66		lda $66,x			lda 	NSMantissa3+1,x
.28a2	95 65		sta $65,x			sta 	NSMantissa3,x
.28a4	b5 72		lda $72,x			lda 	NSExponent+1,x
.28a6	95 71		sta $71,x			sta 	NSExponent,x
.28a8	b5 36		lda $36,x			lda 	NSStatus+1,x
.28aa	95 35		sta $35,x			sta 	NSStatus,x
.28ac					_FAExit:
.28ac	60		rts				rts
.28ad					_FAShiftToExponent:
.28ad					_FAShiftToExponent2:
.28ad	98		tya				tya 								; compare Y to exponent
.28ae	d5 71		cmp $71,x			cmp 	NSExponent,x 				; reached the exponent required ?
.28b0	f0 07		beq $28b9			beq 	_FASEExit 					; exit if so.
.28b2	20 24 2e	jsr $2e24			jsr 	FloatShiftRight	 			; shift the mantissa right
.28b5	f6 71		inc $71,x			inc 	NSExponent,x 				; increment exponent
.28b7	80 f4		bra $28ad			bra 	_FAShiftToExponent2
.28b9					_FASEExit:
.28b9	60		rts				rts
.28ba					CompareEqual:
.28ba	b5 41		lda $41,x			lda 	NSMantissa0,x
.28bc	d0 09		bne $28c7			bne 	ReturnFalse
.28be					ReturnTrue:
.28be	a9 01		lda #$01			lda 	#1
.28c0	95 41		sta $41,x			sta 	NSMantissa0,x
.28c2	a9 80		lda #$80			lda 	#$80
.28c4	95 35		sta $35,x			sta 	NSStatus,x
.28c6	60		rts				rts
.28c7					ReturnFalse:
.28c7	74 41		stz $41,x			stz 	NSMantissa0,x
.28c9	60		rts				rts
.28ca					CompareNotEqual:
.28ca	b5 41		lda $41,x			lda 	NSMantissa0,x
.28cc	d0 f0		bne $28be			bne 	ReturnTrue
.28ce	80 f7		bra $28c7			bra 	ReturnFalse
.28d0					CompareLess:
.28d0	b5 41		lda $41,x			lda 	NSMantissa0,x
.28d2	c9 ff		cmp #$ff			cmp 	#$FF
.28d4	f0 e8		beq $28be			beq 	ReturnTrue
.28d6	80 ef		bra $28c7			bra 	ReturnFalse
.28d8					CompareGreater:
.28d8	b5 41		lda $41,x			lda 	NSMantissa0,x
.28da	c9 01		cmp #$01			cmp 	#$01
.28dc	f0 e0		beq $28be			beq 	ReturnTrue
.28de	80 e7		bra $28c7			bra 	ReturnFalse
.28e0					CompareLessEqual:
.28e0	b5 41		lda $41,x			lda 	NSMantissa0,x
.28e2	c9 01		cmp #$01			cmp 	#$01
.28e4	d0 d8		bne $28be			bne 	ReturnTrue
.28e6	80 df		bra $28c7			bra 	ReturnFalse
.28e8					CompareGreaterEqual:
.28e8	b5 41		lda $41,x			lda 	NSMantissa0,x
.28ea	c9 ff		cmp #$ff			cmp 	#$FF
.28ec	d0 d0		bne $28be			bne 	ReturnTrue
.28ee	80 d7		bra $28c7			bra 	ReturnFalse
.28f0					FloatCompare:
.28f0	b5 71		lda $71,x			lda 	NSExponent,x 				; float comparison.
.28f2	15 70		ora $70,x			ora 	NSExponent-1,x 				; integer if both integer.
.28f4	48		pha				pha
.28f5	20 29 28	jsr $2829			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.28f8	68		pla				pla
.28f9	d0 0c		bne $2907			bne 	_FCCompareFloat
.28fb	b5 41		lda $41,x			lda 	NSMantissa0,x
.28fd	15 4d		ora $4d,x			ora 	NSMantissa1,x
.28ff	15 59		ora $59,x			ora 	NSMantissa2,x
.2901	15 65		ora $65,x			ora 	NSMantissa3,x
.2903	f0 14		beq $2919			beq 	_FCExit 					; if zero, return zero
.2905	80 0a		bra $2911			bra 	_FCSign
.2907					_FCCompareFloat:
.2907	b5 4d		lda $4d,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.2909	29 f0		and #$f0			and 	#$F0
.290b	15 59		ora $59,x			ora 	NSMantissa2,x
.290d	15 65		ora $65,x			ora 	NSMantissa3,x
.290f	f0 08		beq $2919			beq 	_FCExit 					; zero, so approximately identical
.2911					_FCSign:
.2911	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.2913	34 35		bit $35,x			bit 	NSStatus,x
.2915	10 02		bpl $2919			bpl 	_FCExit
.2917					_FCNegative:
.2917	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.2919					_FCExit:
.2919	20 0d 2e	jsr $2e0d			jsr 	FloatSetByte 				; set the result 255,0,1
.291c	60		rts				rts
.291d					FloatScalarTable:
>291d	66 66 66 66				.dword $66666666 ; 0.1
>2921	de					.byte $de
>2922	1f 85 eb 51				.dword $51eb851f ; 0.01
>2926	db					.byte $db
>2927	4c 37 89 41				.dword $4189374c ; 0.001
>292b	d8					.byte $d8
>292c	ac 8b db 68				.dword $68db8bac ; 0.0001
>2930	d4					.byte $d4
>2931	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>2935	d1					.byte $d1
>2936	83 de 1b 43				.dword $431bde83 ; 1e-06
>293a	ce					.byte $ce
>293b	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>293f	ca					.byte $ca
>2940	89 3b e6 55				.dword $55e63b89 ; 1e-08
>2944	c7					.byte $c7
>2945	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>2949	c4					.byte $c4
>294a	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>294e	c0					.byte $c0
>294f	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>2953	bd					.byte $bd
.2954					FloatDivide:
.2954	48		pha				pha
.2955	20 60 2b	jsr $2b60			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.2958	ca		dex				dex
.2959	c9 00		cmp #$00			cmp 	#0
.295b	f0 1e		beq $297b			beq 	_FDZero
.295d	20 60 2b	jsr $2b60			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.2960	f0 16		beq $2978			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.2962	20 c3 29	jsr $29c3			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.2965	20 90 29	jsr $2990			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.2968	20 60 2b	jsr $2b60			jsr		FloatNormalise 				; renormalise
.296b	20 56 2b	jsr $2b56			jsr 	FloatCalculateSign 			; calculate result sign
.296e	b5 71		lda $71,x			lda 	NSExponent,x 				; calculate exponent
.2970	38		sec				sec
.2971	f5 72		sbc $72,x			sbc 	NSExponent+1,x
.2973	38		sec				sec
.2974	e9 1e		sbc #$1e			sbc 	#30
.2976	95 71		sta $71,x			sta 	NSExponent,x
.2978					_FDExit:
.2978	68		pla				pla
.2979	18		clc				clc
.297a	60		rts				rts
.297b					_FDZero:
.297b	68		pla				pla
.297c	38		sec				sec
.297d	60		rts				rts
.297e					DivideInt32:
.297e	20 46 2a	jsr $2a46			jsr 	FloatIntegerPart 			; make both integers
.2981	ca		dex				dex
.2982	20 46 2a	jsr $2a46			jsr 	FloatIntegerPart
.2985	20 a1 29	jsr $29a1			jsr 	Int32Divide 				; divide
.2988	20 90 29	jsr $2990			jsr 	NSMCopyPlusTwoToZero 		; copy result
.298b	20 56 2b	jsr $2b56			jsr 	FloatCalculateSign 			; calculate result sign
.298e	18		clc				clc
.298f	60		rts				rts
.2990					NSMCopyPlusTwoToZero:
.2990	b5 43		lda $43,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.2992	95 41		sta $41,x			sta 	NSMantissa0,x
.2994	b5 4f		lda $4f,x			lda 	NSMantissa1+2,x
.2996	95 4d		sta $4d,x			sta 	NSMantissa1,x
.2998	b5 5b		lda $5b,x			lda 	NSMantissa2+2,x
.299a	95 59		sta $59,x			sta 	NSMantissa2,x
.299c	b5 67		lda $67,x			lda 	NSMantissa3+2,x
.299e	95 65		sta $65,x			sta 	NSMantissa3,x
.29a0	60		rts				rts
.29a1					Int32Divide:
.29a1	48		pha				pha 								; save AXY
.29a2	5a		phy				phy
.29a3	20 ee 2d	jsr $2dee			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.29a6	20 07 2e	jsr $2e07			jsr 	FloatSetZeroMantissaOnly 	; set S[X] to zero
.29a9	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.29ab					_I32DivideLoop:
.29ab	e8		inx				inx
.29ac	e8		inx				inx
.29ad	20 1a 2e	jsr $2e1a			jsr 	FloatShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.29b0	ca		dex				dex
.29b1	ca		dex				dex
.29b2	20 1b 2e	jsr $2e1b			jsr 	FloatRotateLeft
.29b5	20 e1 29	jsr $29e1			jsr 	FloatDivideCheck 			; check if subtract possible
.29b8	90 02		bcc $29bc			bcc 	_I32DivideNoCarryIn
.29ba	f6 43		inc $43,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.29bc					_I32DivideNoCarryIn:
.29bc	88		dey				dey 								; loop round till division completed.
.29bd	d0 ec		bne $29ab			bne 	_I32DivideLoop
.29bf	7a		ply				ply 								; restore AXY and exit
.29c0	68		pla				pla
.29c1	18		clc				clc
.29c2	60		rts				rts
.29c3					Int32ShiftDivide:
.29c3	48		pha				pha 								; save AY
.29c4	5a		phy				phy
.29c5	e8		inx				inx 								; clear S[X+2]
.29c6	e8		inx				inx
.29c7	20 0b 2e	jsr $2e0b			jsr 	FloatSetZero
.29ca	ca		dex				dex
.29cb	ca		dex				dex
.29cc	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.29ce					_I32SDLoop:
.29ce	20 e1 29	jsr $29e1			jsr 	FloatDivideCheck 			; check if subtract possible
.29d1	e8		inx				inx
.29d2	e8		inx				inx
.29d3	20 1b 2e	jsr $2e1b			jsr 	FloatRotateLeft				; shift 64 bit FPA left, rotating carry in
.29d6	ca		dex				dex
.29d7	ca		dex				dex
.29d8	20 1b 2e	jsr $2e1b			jsr 	FloatRotateLeft
.29db	88		dey				dey 	 							; do 31 times
.29dc	d0 f0		bne $29ce			bne 	_I32SDLoop
.29de	7a		ply				ply 								; restore AY and exit
.29df	68		pla				pla
.29e0	60		rts				rts
.29e1					FloatDivideCheck:
.29e1	20 b1 2b	jsr $2bb1			jsr 	FloatSubTopTwoStack 		; subtract Stack[X+1] from Stack[X+0]
.29e4	b0 04		bcs $29ea			bcs 	_DCSExit 					; if carry set, then could do, exit
.29e6	20 97 2b	jsr $2b97			jsr 	FloatAddTopTwoStack 		; add it back in
.29e9	18		clc				clc 								; and return False
.29ea					_DCSExit:
.29ea	60		rts				rts
.29eb					FloatFractionalPart:
.29eb	5a		phy				phy
.29ec	b5 35		lda $35,x			lda 	NSStatus,x 					; take absolute value
.29ee	29 7f		and #$7f			and 	#$7F
.29f0	95 35		sta $35,x			sta 	NSStatus,x
.29f2	20 60 2b	jsr $2b60			jsr 	FloatNormalise
.29f5	b5 71		lda $71,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.29f7	38		sec				sec
.29f8	e9 e0		sbc #$e0			sbc 	#$E0
.29fa	90 29		bcc $2a25			bcc 	_FFPExit 					; already fractional
.29fc	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.29fe	b0 22		bcs $2a22			bcs 	_FFPZero
.2a00	a8		tay				tay 								; put count to do in Y
.2a01	b5 65		lda $65,x			lda 	NSMantissa3,x 				; do each in turn.
.2a03	20 2a 2a	jsr $2a2a			jsr 	_FFPPartial
.2a06	95 65		sta $65,x			sta 	NSMantissa3,x
.2a08	b5 59		lda $59,x			lda 	NSMantissa2,x
.2a0a	20 2a 2a	jsr $2a2a			jsr 	_FFPPartial
.2a0d	95 59		sta $59,x			sta 	NSMantissa2,x
.2a0f	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.2a11	20 2a 2a	jsr $2a2a			jsr 	_FFPPartial
.2a14	95 4d		sta $4d,x			sta 	NSMantissa1,x
.2a16	b5 41		lda $41,x			lda 	NSMantissa0,x
.2a18	20 2a 2a	jsr $2a2a			jsr 	_FFPPartial
.2a1b	95 41		sta $41,x			sta 	NSMantissa0,x
.2a1d	20 2d 2e	jsr $2e2d			jsr 	FloatIsZero 					; zeroed check.
.2a20	d0 03		bne $2a25			bne 	_FFPExit
.2a22					_FFPZero:
.2a22	20 0b 2e	jsr $2e0b			jsr 	FloatSetZero
.2a25					_FFPExit:
.2a25	20 60 2b	jsr $2b60			jsr 	FloatNormalise
.2a28	7a		ply				ply
.2a29	60		rts				rts
.2a2a					_FFPPartial:
.2a2a	c0 00		cpy #$00			cpy 	#0 							; no more to do
.2a2c	f0 17		beq $2a45			beq 	_FFFPPExit
.2a2e	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.2a30	b0 0c		bcs $2a3e			bcs 	_FFFPPWholeByte
.2a32	5a		phy				phy
.2a33					_FFFPPLeft:
.2a33	0a		asl a				asl 	a
.2a34	88		dey				dey
.2a35	d0 fc		bne $2a33			bne 	_FFFPPLeft
.2a37	7a		ply				ply
.2a38					_FFFPPRight:
.2a38	4a		lsr a				lsr 	a
.2a39	88		dey				dey
.2a3a	d0 fc		bne $2a38			bne 	_FFFPPRight
.2a3c	80 07		bra $2a45			bra 	_FFFPPExit
.2a3e					_FFFPPWholeByte:
.2a3e	98		tya				tya 								; subtract 8 from count
.2a3f	38		sec				sec
.2a40	e9 08		sbc #$08			sbc 	#8
.2a42	a8		tay				tay
.2a43	a9 00		lda #$00			lda 	#0 							; and clear all
.2a45					_FFFPPExit:
.2a45	60		rts				rts
.2a46					FloatIntegerPart:
.2a46	48		pha				pha
.2a47	b5 71		lda $71,x			lda 	NSExponent,x 				; is it integer already ?
.2a49	f0 1d		beq $2a68			beq 	_FIPExit 					; if so do nothing
.2a4b	20 2d 2e	jsr $2e2d			jsr 	FloatIsZero 				; is it zero ?
.2a4e	f0 15		beq $2a65			beq 	_FIPZero 					; if so return zero.
.2a50	20 60 2b	jsr $2b60			jsr 	FloatNormalise 				; normalise
.2a53	f0 10		beq $2a65			beq 	_FIPZero 					; normalised to zero, exit zero
.2a55					_FIPShift:
.2a55	b5 71		lda $71,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.2a57	10 07		bpl $2a60			bpl 	_FIPCheckZero
.2a59	20 24 2e	jsr $2e24			jsr 	FloatShiftRight 			; shift mantissa right
.2a5c	f6 71		inc $71,x			inc 	NSExponent,x 				; bump exponent
.2a5e	80 f5		bra $2a55			bra 	_FIPShift
.2a60					_FIPCheckZero:
.2a60	20 2d 2e	jsr $2e2d			jsr 	FloatIsZero 				; avoid -0 problem
.2a63	d0 03		bne $2a68			bne 	_FIPExit 					; set to zero if mantissa zero.
.2a65					_FIPZero:
.2a65	20 0b 2e	jsr $2e0b			jsr 	FloatSetZero
.2a68					_FIPExit:
.2a68	68		pla				pla
.2a69	60		rts				rts
.2a6a					FloatIntegerPartDown:
.2a6a	48		pha				pha
.2a6b	5a		phy				phy
.2a6c	b5 71		lda $71,x			lda 	NSExponent,x 				; is it integer already ?
.2a6e	f0 36		beq $2aa6			beq 	_FIPExit 					; if so do nothing
.2a70	20 2d 2e	jsr $2e2d			jsr 	FloatIsZero 				; is it zero ?
.2a73	f0 2e		beq $2aa3			beq 	_FIPZero 					; if so return zero.
.2a75	20 60 2b	jsr $2b60			jsr 	FloatNormalise 				; normalise
.2a78	f0 29		beq $2aa3			beq 	_FIPZero 					; normalised to zero, exit zero
.2a7a	a0 00		ldy #$00			ldy 	#0 							; reset the count of bits.
.2a7c					_FIPShift:
.2a7c	b5 71		lda $71,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.2a7e	10 0a		bpl $2a8a			bpl 	_FIPCheckDown
.2a80	20 24 2e	jsr $2e24			jsr 	FloatShiftRight 			; shift mantissa right
.2a83	90 01		bcc $2a86			bcc 	_FIPNoFrac 					; shifted a zero out ?
.2a85	c8		iny				iny
.2a86					_FIPNoFrac:
.2a86	f6 71		inc $71,x			inc 	NSExponent,x 				; bump exponent
.2a88	80 f2		bra $2a7c			bra 	_FIPShift
.2a8a					_FIPCheckDown:
.2a8a	c0 00		cpy #$00			cpy 	#0 							; were there any fractional bits.
.2a8c	f0 10		beq $2a9e			beq 	_FIPCheckZero
.2a8e	34 35		bit $35,x			bit 	NSStatus,x 					; +ve
.2a90	10 0c		bpl $2a9e			bpl 	_FIPCheckZero
.2a92	e8		inx				inx 								; -ve so round *down*.
.2a93	a9 01		lda #$01			lda 	#1
.2a95	20 0d 2e	jsr $2e0d			jsr 	FloatSetByte
.2a98	20 cd 2d	jsr $2dcd			jsr 	FloatNegate
.2a9b	20 2f 28	jsr $282f			jsr 	FloatAdd
.2a9e					_FIPCheckZero:
.2a9e	20 2d 2e	jsr $2e2d			jsr 	FloatIsZero 				; avoid -0 problem
.2aa1	d0 03		bne $2aa6			bne 	_FIPExit 					; set to zero if mantissa zero.
.2aa3					_FIPZero:
.2aa3	20 0b 2e	jsr $2e0b			jsr 	FloatSetZero
.2aa6					_FIPExit:
.2aa6	7a		ply				ply
.2aa7	68		pla				pla
.2aa8	60		rts				rts
.2aa9					FloatInt8Multiply:
.2aa9	5a		phy				phy
.2aaa	b5 41		lda $41,x			lda 	NSMantissa0,x 				; right shifted multiplier in Y
.2aac	a8		tay				tay
.2aad	74 41		stz $41,x			stz 	NSMantissa0,x 				; zero the result (already 8 bit constant)
.2aaf					_FI8MLoop:
.2aaf	98		tya				tya 								; shift right shifter right into carry
.2ab0	4a		lsr a				lsr 	a
.2ab1	a8		tay				tay
.2ab2	90 0d		bcc $2ac1			bcc 	_FI8MNoAdd
.2ab4	18		clc				clc
.2ab5	b5 41		lda $41,x			lda 	NSMantissa0,x
.2ab7	75 42		adc $42,x			adc 	NSMantissa0+1,x
.2ab9	95 41		sta $41,x			sta 	NSMantissa0,x
.2abb	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.2abd	75 4e		adc $4e,x			adc 	NSMantissa1+1,x
.2abf	95 4d		sta $4d,x			sta 	NSMantissa1,x
.2ac1					_FI8MNoAdd:
.2ac1	16 42		asl $42,x			asl 	NSMantissa0+1,x 			; shift adder left
.2ac3	36 4e		rol $4e,x			rol 	NSMantissa1+1,x
.2ac5	c0 00		cpy #$00			cpy 	#0
.2ac7	d0 e6		bne $2aaf			bne 	_FI8MLoop 					; until right shifter zero.
.2ac9	7a		ply				ply
.2aca	60		rts				rts
.2acb					FloatMultiply:
.2acb	ca		dex				dex
.2acc	b5 71		lda $71,x			lda 	NSExponent,x 				; can use optimised ?
.2ace	15 72		ora $72,x			ora 	NSExponent+1,x
.2ad0	15 65		ora $65,x			ora 	NSMantissa3,x
.2ad2	15 66		ora $66,x			ora 	NSMantissa3+1,x
.2ad4	d0 21		bne $2af7			bne 	_FMUseFloat
.2ad6	b5 35		lda $35,x			lda 	NSStatus,x 					; check if it is 8 bit unsigned
.2ad8	15 36		ora $36,x			ora 	NSStatus+1,x
.2ada	29 80		and #$80			and 	#$80
.2adc	15 65		ora $65,x			ora 	NSMantissa3,x
.2ade	15 59		ora $59,x			ora 	NSMantissa2,x
.2ae0	15 4d		ora $4d,x			ora 	NSMantissa1,x
.2ae2	15 66		ora $66,x			ora 	NSMantissa3+1,x
.2ae4	15 5a		ora $5a,x			ora 	NSMantissa2+1,x
.2ae6	15 4e		ora $4e,x			ora 	NSMantissa1+1,x
.2ae8	d0 04		bne $2aee			bne 	_FMInt32
.2aea	20 a9 2a	jsr $2aa9			jsr 	FloatInt8Multiply 			; use fast 8x8 multiply.
.2aed	60		rts				rts
.2aee					_FMInt32:
.2aee	20 18 2b	jsr $2b18			jsr 	FloatMultiplyShort			; use the int32 one.
.2af1	18		clc				clc 								; fix it up if gone out of range
.2af2	75 71		adc $71,x			adc 	NSExponent,x
.2af4	95 71		sta $71,x			sta 	NSExponent,x
.2af6	60		rts				rts
.2af7					_FMUseFloat:
.2af7	20 60 2b	jsr $2b60			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.2afa	f0 18		beq $2b14			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.2afc	e8		inx				inx
.2afd	20 60 2b	jsr $2b60			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.2b00	ca		dex				dex
.2b01	c9 00		cmp #$00			cmp 	#0
.2b03	f0 0c		beq $2b11			beq 	_FDSetZero
.2b05	20 18 2b	jsr $2b18			jsr 	FloatMultiplyShort 			; calculate the result.
.2b08	75 71		adc $71,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.2b0a	18		clc				clc
.2b0b	75 72		adc $72,x			adc 	NSExponent+1,x
.2b0d	95 71		sta $71,x			sta 	NSExponent,x
.2b0f	80 03		bra $2b14			bra 	_FDExit
.2b11					_FDSetZero:
.2b11	20 0b 2e	jsr $2e0b			jsr 	FloatSetZero 				; return 0
.2b14					_FDExit:
.2b14	20 60 2b	jsr $2b60			jsr 	FloatNormalise 				; normalise the result
.2b17	60		rts				rts
.2b18					FloatMultiplyShort:
.2b18	5a		phy				phy 								; save Y
.2b19	20 ee 2d	jsr $2dee			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.2b1c	20 07 2e	jsr $2e07			jsr 	FloatSetZeroMantissaOnly 	; set mantissa S[X] to zero
.2b1f	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.2b21					_I32MLoop:
.2b21	b5 43		lda $43,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.2b23	15 4f		ora $4f,x			ora 	NSMantissa1+2,x
.2b25	15 5b		ora $5b,x			ora 	NSMantissa2+2,x
.2b27	15 67		ora $67,x			ora 	NSMantissa3+2,x
.2b29	f0 25		beq $2b50			beq 	_I32MExit 					; exit if zero
.2b2b	b5 43		lda $43,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.2b2d	29 01		and #$01			and 	#1
.2b2f	f0 0d		beq $2b3e			beq 	_I32MNoAdd
.2b31	20 97 2b	jsr $2b97			jsr 	FloatAddTopTwoStack 		; if so add S[X+1] to S[X+0]
.2b34	b5 65		lda $65,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.2b36	10 06		bpl $2b3e			bpl 	_I32MNoAdd
.2b38					_I32ShiftRight:
.2b38	20 24 2e	jsr $2e24			jsr 	FloatShiftRight 			; shift S[X] right
.2b3b	c8		iny				iny 								; increment shift count
.2b3c	80 09		bra $2b47			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.2b3e					_I32MNoAdd:
.2b3e	34 66		bit $66,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.2b40	70 f6		bvs $2b38			bvs 	_I32ShiftRight 				; instead.
.2b42	e8		inx				inx
.2b43	20 1a 2e	jsr $2e1a			jsr 	FloatShiftLeft 				; shift additive S[X+1] left
.2b46	ca		dex				dex
.2b47					_I32MShiftUpper:
.2b47	e8		inx				inx 								; shift S[X+2] right
.2b48	e8		inx				inx
.2b49	20 24 2e	jsr $2e24			jsr 	FloatShiftRight
.2b4c	ca		dex				dex
.2b4d	ca		dex				dex
.2b4e	80 d1		bra $2b21			bra 	_I32MLoop 					; try again.
.2b50					_I32MExit:
.2b50	20 56 2b	jsr $2b56			jsr 	FloatCalculateSign
.2b53	98		tya				tya 								; shift in A
.2b54	7a		ply				ply 								; restore Y and exit
.2b55	60		rts				rts
.2b56					FloatCalculateSign:
.2b56	b5 35		lda $35,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.2b58	16 35		asl $35,x			asl 	NSStatus,x 					; shift result left
.2b5a	55 36		eor $36,x			eor 	NSStatus+1,x
.2b5c	0a		asl a				asl 	a 							; shift bit 7 into carry
.2b5d	76 35		ror $35,x			ror 	NSStatus,x 					; shift right into status byte.
.2b5f	60		rts				rts
.2b60					FloatNormalise:
.2b60	20 2d 2e	jsr $2e2d			jsr 	FloatIsZero 				; if zero exit
.2b63	d0 07		bne $2b6c			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.2b65	16 35		asl $35,x			asl 	NSStatus,x 					; clear the sign bit.
.2b67	76 35		ror $35,x			ror 	NSStatus,x 					; (no -0)
.2b69	a9 00		lda #$00			lda 	#0 							; set Z flag
.2b6b	60		rts				rts
.2b6c					_NSNormaliseOptimise:
.2b6c	b5 65		lda $65,x			lda 	NSMantissa3,x 				; upper byte zero ?
.2b6e	d0 19		bne $2b89			bne 	_NSNormaliseLoop
.2b70	b5 59		lda $59,x			lda 	NSMantissa2,x 				; byte normalise
.2b72	30 15		bmi $2b89			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.2b74	95 65		sta $65,x			sta 	NSMantissa3,x
.2b76	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.2b78	95 59		sta $59,x			sta 	NSMantissa2,x
.2b7a	b5 41		lda $41,x			lda 	NSMantissa0,x
.2b7c	95 4d		sta $4d,x			sta 	NSMantissa1,x
.2b7e	74 41		stz $41,x			stz 	NSMantissa0,x
.2b80	b5 71		lda $71,x			lda 	NSExponent,x
.2b82	38		sec				sec
.2b83	e9 08		sbc #$08			sbc 	#8
.2b85	95 71		sta $71,x			sta 	NSExponent,x
.2b87	80 e3		bra $2b6c			bra 	_NSNormaliseOptimise
.2b89					_NSNormaliseLoop:
.2b89	34 65		bit $65,x			bit 	NSMantissa3,x 				; bit 30 set ?
.2b8b	70 07		bvs $2b94			bvs 	_NSNExit 					; exit if so with Z flag clear
.2b8d	20 1a 2e	jsr $2e1a			jsr 	FloatShiftLeft 				; shift mantissa left
.2b90	d6 71		dec $71,x			dec 	NSExponent,x 				; adjust exponent
.2b92	80 f5		bra $2b89			bra 	_NSNormaliseLoop
.2b94					_NSNExit:
.2b94	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.2b96	60		rts				rts
.2b97					FloatAddTopTwoStack:
.2b97	18		clc				clc
.2b98	b5 41		lda $41,x			lda		NSMantissa0,x
.2b9a	75 42		adc $42,x			adc 		NSMantissa0+1,x
.2b9c	95 41		sta $41,x			sta 	NSMantissa0,x
.2b9e	b5 4d		lda $4d,x			lda		NSMantissa1,x
.2ba0	75 4e		adc $4e,x			adc 		NSMantissa1+1,x
.2ba2	95 4d		sta $4d,x			sta 	NSMantissa1,x
.2ba4	b5 59		lda $59,x			lda		NSMantissa2,x
.2ba6	75 5a		adc $5a,x			adc 		NSMantissa2+1,x
.2ba8	95 59		sta $59,x			sta 	NSMantissa2,x
.2baa	b5 65		lda $65,x			lda		NSMantissa3,x
.2bac	75 66		adc $66,x			adc 		NSMantissa3+1,x
.2bae	95 65		sta $65,x			sta 	NSMantissa3,x
.2bb0	60		rts				rts
.2bb1					FloatSubTopTwoStack:
.2bb1	38		sec				sec
.2bb2	b5 41		lda $41,x			lda		NSMantissa0,x
.2bb4	f5 42		sbc $42,x			sbc 		NSMantissa0+1,x
.2bb6	95 41		sta $41,x			sta 	NSMantissa0,x
.2bb8	b5 4d		lda $4d,x			lda		NSMantissa1,x
.2bba	f5 4e		sbc $4e,x			sbc 		NSMantissa1+1,x
.2bbc	95 4d		sta $4d,x			sta 	NSMantissa1,x
.2bbe	b5 59		lda $59,x			lda		NSMantissa2,x
.2bc0	f5 5a		sbc $5a,x			sbc 		NSMantissa2+1,x
.2bc2	95 59		sta $59,x			sta 	NSMantissa2,x
.2bc4	b5 65		lda $65,x			lda		NSMantissa3,x
.2bc6	f5 66		sbc $66,x			sbc 		NSMantissa3+1,x
.2bc8	95 65		sta $65,x			sta 	NSMantissa3,x
.2bca	60		rts				rts
.2bcb					FloatInt32Add:
.2bcb	b5 35		lda $35,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.2bcd	55 36		eor $36,x			eor 	NSStatus+1,x
.2bcf	30 04		bmi $2bd5			bmi 	_DiffSigns
.2bd1	20 97 2b	jsr $2b97			jsr		FloatAddTopTwoStack
.2bd4	60		rts				rts
.2bd5					_DiffSigns:
.2bd5	20 b1 2b	jsr $2bb1			jsr 	FloatSubTopTwoStack 		; do a physical subtraction
.2bd8	34 65		bit $65,x			bit 	NSMantissa3,x 				; result is +ve, okay
.2bda	10 07		bpl $2be3			bpl 	_AddExit
.2bdc	b5 36		lda $36,x			lda 	NSStatus+1,x 				; sign is that of 11th value
.2bde	95 35		sta $35,x			sta 	NSStatus,x
.2be0	20 d4 2d	jsr $2dd4			jsr 	FloatNegateMantissa 		; negate the mantissa and exit
.2be3					_AddExit:
.2be3	20 2d 2e	jsr $2e2d			jsr 	FloatIsZero 				; check for -0
.2be6	d0 02		bne $2bea			bne 	_AddNonZero
.2be8	74 35		stz $35,x			stz 	NSStatus,x
.2bea					_AddNonZero:
.2bea	60		rts				rts
=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.2beb					FloatEncodeStart:
.2beb	38		sec				sec
.2bec	80 01		bra $2bef			bra 	FloatEncodeContinue+1
.2bee					FloatEncodeContinue:
.2bee	18		clc				clc
.2bef					FloatEncode:
.2bef	08		php				php 								; save reset flag.
.2bf0	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.2bf2	f0 15		beq $2c09			beq 	_ENIsOkay
.2bf4	c9 30		cmp #$30			cmp 	#"0"
.2bf6	90 04		bcc $2bfc			bcc 	_ENBadNumber
.2bf8	c9 3a		cmp #$3a			cmp 	#"9"+1
.2bfa	90 0d		bcc $2c09			bcc 	_ENIsOkay
.2bfc					_ENBadNumber:
.2bfc	28		plp				plp 								; throw saved reset
.2bfd	ad 8f 05	lda $058f			lda 	encodeState 				; if in decimal mode, construct final number
.2c00	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.2c02	d0 03		bne $2c07			bne 	_ENFail
.2c04	4c 81 2c	jmp $2c81			jmp 	_ENConstructFinal
.2c07					_ENFail:
.2c07	18		clc				clc 								; not allowed
.2c08	60		rts				rts
.2c09					_ENIsOkay:
.2c09	28		plp				plp 								; are we restarting
.2c0a	90 15		bcc $2c21			bcc 	_ENNoRestart
.2c0c					_ENStartEncode:
.2c0c	c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.2c0e	f0 0c		beq $2c1c			beq 	_ENFirstDP
.2c10	29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.2c12	20 0d 2e	jsr $2e0d			jsr 	FloatSetByte 				; in single byte mode.
.2c15	a9 01		lda #$01			lda 	#ESTA_Low
.2c17					_ENExitChange:
.2c17	8d 8f 05	sta $058f			sta 	encodeState 				; save new state
.2c1a	38		sec				sec
.2c1b	60		rts				rts
.2c1c					_ENFirstDP:
.2c1c	20 0b 2e	jsr $2e0b			jsr 	FloatSetZero 				; clear integer part
.2c1f	80 3c		bra $2c5d			bra 	_ESTASwitchFloat			; go straight to float and exi
.2c21					_ENNoRestart:
.2c21	48		pha				pha 								; save digit or DP on stack.
.2c22	ad 8f 05	lda $058f			lda 	encodeState 				; get current state
.2c25	c9 01		cmp #$01			cmp 	#ESTA_Low
.2c27	f0 09		beq $2c32			beq  	_ESTALowState
.2c29	c9 02		cmp #$02			cmp 	#ESTA_High
.2c2b	f0 26		beq $2c53			beq 	_ESTAHighState
.2c2d	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.2c2f	f0 38		beq $2c69			beq 	_ESTADecimalState
>2c31	db						.byte 	$DB 						; causes a break in the emulator
.2c32					_ESTALowState:
.2c32	68		pla				pla 								; get value back
.2c33	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.2c35	f0 26		beq $2c5d			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.2c37	29 0f		and #$0f			and 	#15 						; make digit
.2c39	8d 90 05	sta $0590			sta 	digitTemp 					; save it.
.2c3c	b5 41		lda $41,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.2c3e	0a		asl a				asl 	a
.2c3f	0a		asl a				asl 	a
.2c40	75 41		adc $41,x			adc 	NSMantissa0,x
.2c42	0a		asl a				asl 	a
.2c43	6d 90 05	adc $0590			adc 	digitTemp
.2c46	95 41		sta $41,x			sta 	NSMantissa0,x
.2c48	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.2c4a	90 05		bcc $2c51			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.2c4c	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.2c4e	8d 8f 05	sta $058f			sta 	encodeState
.2c51					_ESTANoSwitch:
.2c51	38		sec				sec
.2c52	60		rts				rts
.2c53					_ESTAHighState:
.2c53	68		pla				pla 								; get value back
.2c54	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.2c56	f0 05		beq $2c5d			beq 	_ESTASwitchFloat
.2c58	20 b3 2c	jsr $2cb3			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.2c5b	38		sec				sec
.2c5c	60		rts				rts
.2c5d					_ESTASwitchFloat:
.2c5d	9c 91 05	stz $0591			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.2c60	e8		inx				inx 								; zero the decimal additive.
.2c61	20 0b 2e	jsr $2e0b			jsr 	FloatSetZero
.2c64	ca		dex				dex
.2c65	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.2c67	80 ae		bra $2c17			bra 	_ENExitChange
.2c69					_ESTADecimalState:
.2c69	68		pla				pla 								; digit.
.2c6a	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 11th decimal point.
.2c6c	f0 99		beq $2c07			beq 	_ENFail
.2c6e	e8		inx				inx 								; put digit into fractional part of X+1
.2c6f	20 b3 2c	jsr $2cb3			jsr 	ESTAShiftDigitIntoMantissa
.2c72	ca		dex				dex
.2c73	ee 91 05	inc $0591			inc 	decimalCount 				; bump the count of decimals
.2c76	ad 91 05	lda $0591			lda 	decimalCount 				; too many decimal digits.
.2c79	c9 0b		cmp #$0b			cmp 	#11
.2c7b	f0 02		beq $2c7f			beq 	_ESTADSFail
.2c7d	38		sec				sec
.2c7e	60		rts				rts
.2c7f					_ESTADSFail:
.2c7f	18		clc				clc
.2c80	60		rts				rts
.2c81					_ENConstructFinal:
.2c81	ad 91 05	lda $0591			lda 	decimalCount 				; get decimal count
.2c84	f0 2b		beq $2cb1			beq 	_ENCFExit 					; no decimals
.2c86	5a		phy				phy
.2c87	0a		asl a				asl 	a 							; x 4 and CLC
.2c88	0a		asl a				asl 	a
.2c89	6d 91 05	adc $0591			adc 	decimalCount
.2c8c	a8		tay				tay
.2c8d	b9 18 29	lda $2918,y			lda 	FloatScalarTable-5,y 		; copy decimal scalar to X+2
.2c90	95 43		sta $43,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.2c92	b9 19 29	lda $2919,y			lda 	FloatScalarTable-5+1,y
.2c95	95 4f		sta $4f,x			sta 	NSMantissa1+2,x
.2c97	b9 1a 29	lda $291a,y			lda 	FloatScalarTable-5+2,y
.2c9a	95 5b		sta $5b,x			sta 	NSMantissa2+2,x
.2c9c	b9 1b 29	lda $291b,y			lda 	FloatScalarTable-5+3,y
.2c9f	95 67		sta $67,x			sta 	NSMantissa3+2,x
.2ca1	b9 1c 29	lda $291c,y			lda 	FloatScalarTable-5+4,y
.2ca4	95 73		sta $73,x			sta 	NSExponent+2,x
.2ca6	74 37		stz $37,x			stz 	NSStatus+2,x 				; make +ve
.2ca8	e8		inx				inx 								; multiply decimal const by decimal scalar
.2ca9	e8		inx				inx
.2caa	20 cb 2a	jsr $2acb			jsr 	FloatMultiply
.2cad	20 2f 28	jsr $282f			jsr 	FloatAdd 					; add to integer part.
.2cb0	7a		ply				ply
.2cb1					_ENCFExit:
.2cb1	18		clc				clc 								; reject the digit.
.2cb2	60		rts				rts
.2cb3					ESTAShiftDigitIntoMantissa:
.2cb3	29 0f		and #$0f			and 	#15 						; save digit
.2cb5	48		pha				pha
.2cb6	b5 65		lda $65,x			lda 	NSMantissa3,x 				; push mantissa on stack
.2cb8	48		pha				pha
.2cb9	b5 59		lda $59,x			lda 	NSMantissa2,x
.2cbb	48		pha				pha
.2cbc	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.2cbe	48		pha				pha
.2cbf	b5 41		lda $41,x			lda 	NSMantissa0,x
.2cc1	48		pha				pha
.2cc2	20 1a 2e	jsr $2e1a			jsr 	FloatShiftLeft 				; x 2
.2cc5	20 1a 2e	jsr $2e1a			jsr 	FloatShiftLeft 				; x 4
.2cc8	18		clc				clc 								; pop mantissa and add
.2cc9	68		pla				pla
.2cca	75 41		adc $41,x			adc 	NSMantissa0,x
.2ccc	95 41		sta $41,x			sta 	NSMantissa0,x
.2cce	68		pla				pla
.2ccf	75 4d		adc $4d,x			adc 	NSMantissa1,x
.2cd1	95 4d		sta $4d,x			sta 	NSMantissa1,x
.2cd3	68		pla				pla
.2cd4	75 59		adc $59,x			adc 	NSMantissa2,x
.2cd6	95 59		sta $59,x			sta 	NSMantissa2,x
.2cd8	68		pla				pla
.2cd9	75 65		adc $65,x			adc 	NSMantissa3,x
.2cdb	95 65		sta $65,x			sta 	NSMantissa3,x 				; x 5
.2cdd	20 1a 2e	jsr $2e1a			jsr 	FloatShiftLeft 				; x 10
.2ce0	68		pla				pla 								; add digit
.2ce1	18		clc				clc
.2ce2	75 41		adc $41,x			adc 	NSMantissa0,x
.2ce4	95 41		sta $41,x			sta 	NSMantissa0,x
.2ce6	90 0a		bcc $2cf2			bcc 	_ESTASDExit
.2ce8	f6 4d		inc $4d,x			inc 	NSMantissa1,x
.2cea	d0 06		bne $2cf2			bne 	_ESTASDExit
.2cec	f6 59		inc $59,x			inc 	NSMantissa2,x
.2cee	d0 02		bne $2cf2			bne 	_ESTASDExit
.2cf0	f6 65		inc $65,x			inc 	NSMantissa3,x
.2cf2					_ESTASDExit:
.2cf2	60		rts				rts
.058f					encodeState:
>058f							.fill 	1
.0590					digitTemp:
>0590							.fill 	1
.0591					decimalCount:
>0591							.fill 	1
.2cf3					FloatToString:
.2cf3	da		phx				phx
.2cf4	5a		phy				phy 								; save code position
.2cf5	8d 92 05	sta $0592			sta 	decimalPlaces	 			; save number of DPs.
.2cf8	9c 93 05	stz $0593			stz 	dbOffset 					; offset into decimal buffer = start.
.2cfb	b5 35		lda $35,x			lda 	NSStatus,x  				; is it -ve.
.2cfd	10 08		bpl $2d07			bpl 	_CNTSNotNegative
.2cff	29 7f		and #$7f			and 	#$7F 						; make +ve
.2d01	95 35		sta $35,x			sta 	NSStatus,x
.2d03	a9 2d		lda #$2d			lda 	#"-"
.2d05	80 02		bra $2d09			bra 	_CNTMain
.2d07					_CNTSNotNegative:
.2d07	a9 20		lda #$20			lda 	#" "
.2d09					_CNTMain:
.2d09	20 6b 2d	jsr $2d6b			jsr 	WriteDecimalBuffer
.2d0c	b5 71		lda $71,x			lda 	NSExponent,x 				; check if decimal
.2d0e	f0 0d		beq $2d1d			beq 	_CNTSNotFloat
.2d10	e8		inx				inx 								; round up so we don't get too many 6.999999
.2d11	a9 01		lda #$01			lda 	#1
.2d13	20 0d 2e	jsr $2e0d			jsr 	FloatSetByte
.2d16	b5 70		lda $70,x			lda		NSExponent-1,x
.2d18	95 71		sta $71,x			sta 	NSExponent,x
.2d1a	20 2f 28	jsr $282f			jsr 	FloatAdd
.2d1d					_CNTSNotFloat:
.2d1d	20 4d 2d	jsr $2d4d			jsr 	MakePlusTwoString 			; do the integer part.
.2d20	20 eb 29	jsr $29eb			jsr 	FloatFractionalPart 		; get the fractional part
.2d23	20 60 2b	jsr $2b60			jsr 	FloatNormalise					; normalise , exit if zero
.2d26	f0 22		beq $2d4a			beq 	_CNTSExit
.2d28	a9 2e		lda #$2e			lda 	#"."
.2d2a	20 6b 2d	jsr $2d6b			jsr 	WriteDecimalBuffer 			; write decimal place
.2d2d					_CNTSDecimal:
.2d2d	ce 92 05	dec $0592			dec 	decimalPlaces 				; done all the decimals
.2d30	30 18		bmi $2d4a			bmi 	_CNTSExit
.2d32	e8		inx				inx 								; x 10.0
.2d33	a9 0a		lda #$0a			lda 	#10
.2d35	20 0d 2e	jsr $2e0d			jsr 	FloatSetByte
.2d38	20 cb 2a	jsr $2acb			jsr 	FloatMultiply
.2d3b	20 4d 2d	jsr $2d4d			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.2d3e	20 eb 29	jsr $29eb			jsr 	FloatFractionalPart 		; get the fractional part
.2d41	20 60 2b	jsr $2b60			jsr 	FloatNormalise 				; normalise it.
.2d44	b5 71		lda $71,x			lda 	NSExponent,x 				; gone to zero, exit.
.2d46	c9 d0		cmp #$d0			cmp 	#$D0 						; very small remainder, so don't bother.
.2d48	b0 e3		bcs $2d2d			bcs 	_CNTSDecimal 				; keep going.
.2d4a					_CNTSExit:
.2d4a	7a		ply				ply
.2d4b	fa		plx				plx
.2d4c	60		rts				rts
.2d4d					MakePlusTwoString:
.2d4d	da		phx				phx
.2d4e	20 ee 2d	jsr $2dee			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.2d51	e8		inx				inx 								; access it
.2d52	e8		inx				inx
.2d53	20 46 2a	jsr $2a46			jsr 	FloatIntegerPart 			; make it an integer
.2d56	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.2d58	20 8a 2d	jsr $2d8a			jsr 	ConvertInt32
.2d5b	a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.2d5d					_MPTSCopy:
.2d5d	bd 6d 05	lda $056d,x			lda 	numberBuffer,x
.2d60	20 6b 2d	jsr $2d6b			jsr 	WriteDecimalBuffer
.2d63	e8		inx				inx
.2d64	bd 6d 05	lda $056d,x			lda 	numberBuffer,x
.2d67	d0 f4		bne $2d5d			bne 	_MPTSCopy
.2d69	fa		plx				plx
.2d6a	60		rts				rts
.2d6b					WriteDecimalBuffer:
.2d6b	da		phx				phx
.2d6c	ae 93 05	ldx $0593			ldx 	dbOffset
.2d6f	9d 94 05	sta $0594,x			sta 	decimalBuffer,x
.2d72	9e 95 05	stz $0595,x			stz 	decimalBuffer+1,x
.2d75	ee 93 05	inc $0593			inc 	dbOffset
.2d78	fa		plx				plx
.2d79	60		rts				rts
.0592					decimalPlaces:
>0592							.fill 	1
.0593					dbOffset:
>0593							.fill 	1
.0594					decimalBuffer:
>0594							.fill 	32
.2d7a					ConvertInt16:
.2d7a	85 41		sta $41				sta 	NSMantissa0 				; set up as 32 bit conversion
.2d7c	86 4d		stx $4d				stx 	NSMantissa1
.2d7e	64 59		stz $59				stz 	NSMantissa2
.2d80	64 65		stz $65				stz 	NSMantissa3
.2d82	64 35		stz $35				stz 	NSStatus 					; positive integer
.2d84	a2 00		ldx #$00			ldx 	#0 							; stack level
.2d86	a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.2d88	80 00		bra $2d8a			bra 	ConvertInt32
.2d8a					ConvertInt32:
.2d8a	5a		phy				phy
.2d8b	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.2d8d	24 35		bit $35				bit 	NSStatus 					; output a - if not negative.
.2d8f	10 08		bpl $2d99			bpl 	_CI32NotNeg
.2d91	48		pha				pha
.2d92	a9 2d		lda #$2d			lda 	#'-'
.2d94	99 6d 05	sta $056d,y			sta 	numberBuffer,y
.2d97	c8		iny				iny
.2d98	68		pla				pla
.2d99					_CI32NotNeg:
.2d99	20 a7 2d	jsr $2da7			jsr 	_CI32DivideConvert 			; recursive conversion
.2d9c	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.2d9e	99 6d 05	sta $056d,y			sta 	numberBuffer,y
.2da1	7a		ply				ply
.2da2	a2 05		ldx #$05			ldx 	#numberBuffer >> 8 			; return address in XA
.2da4	a9 6d		lda #$6d			lda 	#numberBuffer & $FF
.2da6	60		rts				rts
.2da7					_CI32DivideConvert:
.2da7	e8		inx				inx 								; write to next slot up
.2da8	20 0d 2e	jsr $2e0d			jsr 	FloatSetByte 		 		; write the base out.
.2dab	ca		dex				dex
.2dac	20 a1 29	jsr $29a1			jsr 	Int32Divide 				; divide
.2daf	b5 41		lda $41,x			lda 	NSMantissa0,x 				; save remainder
.2db1	48		pha				pha
.2db2	20 90 29	jsr $2990			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.2db5	20 2d 2e	jsr $2e2d			jsr 	FloatIsZero 				; is it zero ?
.2db8	f0 05		beq $2dbf			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.2dba	b5 42		lda $42,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.2dbc	20 a7 2d	jsr $2da7			jsr 	_CI32DivideConvert 			; and recusrively call.
.2dbf					_CI32NoRecurse:
.2dbf	68		pla				pla 								; remainder
.2dc0	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.2dc2	90 02		bcc $2dc6			bcc 	_CI32NotHex
.2dc4	69 26		adc #$26			adc 	#6+32
.2dc6					_CI32NotHex:
.2dc6	69 30		adc #$30			adc 	#48
.2dc8	99 6d 05	sta $056d,y			sta 	numberBuffer,y 				; write out and exit
.2dcb	c8		iny				iny
.2dcc	60		rts				rts
.2dcd					FloatNegate:
.2dcd	b5 35		lda $35,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.2dcf	49 80		eor #$80			eor 	#$80  						; toggle the negative flag
.2dd1	95 35		sta $35,x			sta 	NSStatus,x
.2dd3	60		rts				rts
.2dd4					FloatNegateMantissa:
.2dd4	38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.2dd5	a9 00		lda #$00			lda 	#0
.2dd7	f5 41		sbc $41,x			sbc 	NSMantissa0,x
.2dd9	95 41		sta $41,x			sta 	NSMantissa0,x
.2ddb	a9 00		lda #$00			lda 	#0
.2ddd	f5 4d		sbc $4d,x			sbc 	NSMantissa1,x
.2ddf	95 4d		sta $4d,x			sta 	NSMantissa1,x
.2de1	a9 00		lda #$00			lda 	#0
.2de3	f5 59		sbc $59,x			sbc 	NSMantissa2,x
.2de5	95 59		sta $59,x			sta 	NSMantissa2,x
.2de7	a9 00		lda #$00			lda 	#0
.2de9	f5 65		sbc $65,x			sbc 	NSMantissa3,x
.2deb	95 65		sta $65,x			sta 	NSMantissa3,x
.2ded	60		rts				rts
.2dee					FloatShiftUpTwo:
.2dee	b5 41		lda $41,x			lda 	NSMantissa0,x
.2df0	95 43		sta $43,x			sta 	NSMantissa0+2,x
.2df2	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.2df4	95 4f		sta $4f,x			sta 	NSMantissa1+2,x
.2df6	b5 59		lda $59,x			lda 	NSMantissa2,x
.2df8	95 5b		sta $5b,x			sta 	NSMantissa2+2,x
.2dfa	b5 65		lda $65,x			lda 	NSMantissa3,x
.2dfc	95 67		sta $67,x			sta 	NSMantissa3+2,x
.2dfe	b5 71		lda $71,x			lda 	NSExponent,x
.2e00	95 73		sta $73,x			sta 	NSExponent+2,x
.2e02	b5 35		lda $35,x			lda 	NSStatus,x
.2e04	95 37		sta $37,x			sta 	NSStatus+2,x
.2e06	60		rts				rts
.2e07					FloatSetZeroMantissaOnly:
.2e07	74 41		stz $41,x			stz 	NSMantissa0,x
.2e09	80 08		bra $2e13			bra 	FloatZero13
.2e0b					FloatSetZero:
.2e0b	a9 00		lda #$00			lda 	#0
.2e0d					FloatSetByte:
.2e0d	74 71		stz $71,x			stz 	NSExponent,x 				; zero exponent, as +ve integer value.
.2e0f					FloatSetMantissa:
.2e0f	95 41		sta $41,x			sta 	NSMantissa0,x 				; zero mantissa
.2e11	74 35		stz $35,x			stz 	NSStatus,x
.2e13					FloatZero13:
.2e13	74 4d		stz $4d,x			stz 	NSMantissa1,x
.2e15	74 59		stz $59,x			stz 	NSMantissa2,x
.2e17	74 65		stz $65,x			stz 	NSMantissa3,x
.2e19	60		rts				rts
.2e1a					FloatShiftLeft:
.2e1a	18		clc				clc
.2e1b					FloatRotateLeft:
.2e1b	36 41		rol $41,x			rol 	NSMantissa0,x
.2e1d	36 4d		rol $4d,x			rol		NSMantissa1,x
.2e1f	36 59		rol $59,x			rol		NSMantissa2,x
.2e21	36 65		rol $65,x			rol		NSMantissa3,x
.2e23	60		rts				rts
.2e24					FloatShiftRight:
.2e24	56 65		lsr $65,x			lsr 	NSMantissa3,x
.2e26	76 59		ror $59,x			ror		NSMantissa2,x
.2e28	76 4d		ror $4d,x			ror		NSMantissa1,x
.2e2a	76 41		ror $41,x			ror		NSMantissa0,x
.2e2c	60		rts				rts
.2e2d					FloatIsZero:
.2e2d	b5 65		lda $65,x			lda 	NSMantissa3,x
.2e2f	15 59		ora $59,x			ora		NSMantissa2,x
.2e31	15 4d		ora $4d,x			ora		NSMantissa1,x
.2e33	15 41		ora $41,x			ora		NSMantissa0,x
.2e35	60		rts				rts

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/polynomials.library

.2e36					FloatArcTan:
.2e36	20 60 2b	jsr $2b60			jsr 	FloatNormalise 					; normalise x
.2e39	b5 35		lda $35,x			lda 	NSStatus,x 						; save sign, make absolute
.2e3b	48		pha				pha
.2e3c	74 35		stz $35,x			stz 	NSStatus,x
.2e3e	b5 71		lda $71,x			lda 	NSExponent,x 					; $40000000 ^ $E2 is 1.0
.2e40	c9 e2		cmp #$e2			cmp 	#$E2
.2e42	90 25		bcc $2e69			bcc 	_UANoFixup
.2e44	8a		txa				txa 									; value in +1
.2e45	a8		tay				tay
.2e46	c8		iny				iny
.2e47	20 ef 2f	jsr $2fef			jsr 	CopyFloatXY
.2e4a	a9 01		lda #$01			lda 	#1 								; 1.0 in +0
.2e4c	20 0d 2e	jsr $2e0d			jsr 	FloatSetByte
.2e4f	e8		inx				inx
.2e50	20 54 29	jsr $2954			jsr 	FloatDivide
.2e53	b0 21		bcs $2e76			bcs 	_FATError
.2e55	20 79 2e	jsr $2e79			jsr 	CoreAtn 						; calculate the root
.2e58	20 e4 2f	jsr $2fe4			jsr 	CompletePolynomial
.2e5b	20 cd 2d	jsr $2dcd			jsr 	FloatNegate 					; make -ve
.2e5e	a9 05		lda #$05			lda 	#Const_PiDiv2-Const_Base
.2e60	20 3b 30	jsr $303b			jsr 	LoadConstant
.2e63	e8		inx				inx
.2e64	20 2f 28	jsr $282f			jsr 	FloatAdd
.2e67	80 06		bra $2e6f			bra 	_UAComplete
.2e69					_UANoFixup:
.2e69	20 79 2e	jsr $2e79			jsr 	CoreAtn
.2e6c	20 e4 2f	jsr $2fe4			jsr 	CompletePolynomial
.2e6f					_UAComplete:
.2e6f	68		pla				pla 									; apply the result.
.2e70	55 35		eor $35,x			eor 	NSStatus,x
.2e72	95 35		sta $35,x			sta 	NSStatus,x
.2e74	18		clc				clc
.2e75	60		rts				rts
.2e76					_FATError:
.2e76	68		pla				pla
.2e77	38		sec				sec
.2e78	60		rts				rts
.2e79					CoreAtn:
.2e79	a9 e7		lda #$e7			lda 	#AtnCoefficients & $FF
.2e7b	a0 2e		ldy #$2e			ldy 	#AtnCoefficients >> 8
.2e7d	4c 38 31	jmp $3138			jmp 	CorePolySquared
.2e80					ExpCoefficients:
>2e80	07					.byte	7
>2e81	2b 1f 2c 5a				.dword	$5a2c1f2b ; 2.1498763701e-05
>2e85	d2					.byte	$d2
>2e86	8e 59 3f 4b				.dword	$4b3f598e ; 0.00014352314037
>2e8a	d5					.byte	$d5
>2e8b	c3 71 f7 57				.dword	$57f771c3 ; 0.0013422634825
>2e8f	d8					.byte	$d8
>2e90	15 0e c2 4e				.dword	$4ec20e15 ; 0.0096140170135
>2e94	db					.byte	$db
>2e95	05 ac ac 71				.dword	$71acac05 ; 0.05550512686
>2e99	dd					.byte	$dd
>2e9a	e3 f3 fe 7a				.dword	$7afef3e3 ; 0.2402263846
>2e9e	df					.byte	$df
>2e9f	08 0c b9 58				.dword	$58b90c08 ; 0.69314718618
>2ea3	e1					.byte	$e1
>2ea4	00 00 00 40				.dword	$40000000 ; 1.0
>2ea8	e2					.byte	$e2
.2ea9					SinCoefficients:
>2ea9	06					.byte	6
>2eaa	8d 16 0d f3				.dword	$f30d168d ; -14.381390672
>2eae	e5					.byte	$e5
>2eaf	fc fd 03 54				.dword	$5403fdfc ; 42.007797122
>2eb3	e7					.byte	$e7
>2eb4	81 44 b4 cc				.dword	$ccb44481 ; -76.704170257
>2eb8	e8					.byte	$e8
>2eb9	f1 ef 9a 51				.dword	$519aeff1 ; 81.605223686
>2ebd	e8					.byte	$e8
>2ebe	94 f3 ae d2				.dword	$d2aef394 ; -41.341702104
>2ec2	e7					.byte	$e7
>2ec3	51 ed 87 64				.dword	$6487ed51 ; 6.2831853069
>2ec7	e4					.byte	$e4
>2ec8	00 00 00 00				.dword	$00000000 ; 0.0
>2ecc	00					.byte	$00
.2ecd					LogCoefficients:
>2ecd	04					.byte	4
>2ece	bd 65 2b 6f				.dword	$6f2b65bd ; 0.43425594189
>2ed2	e0					.byte	$e0
>2ed3	b2 85 cd 49				.dword	$49cd85b2 ; 0.57658454124
>2ed7	e1					.byte	$e1
>2ed8	8b 49 1c 7b				.dword	$7b1c498b ; 0.96180075919
>2edc	e1					.byte	$e1
>2edd	90 1d 55 5c				.dword	$5c551d90 ; 2.8853900731
>2ee1	e3					.byte	$e3
>2ee2	00 00 00 c0				.dword	$c0000000 ; -0.5
>2ee6	e1					.byte	$e1
.2ee7					AtnCoefficients:
>2ee7	0c					.byte	12
>2ee8	ea de c1 d9				.dword	$d9c1deea ; -0.00068479391189
>2eec	d7					.byte	$d7
>2eed	7a 53 7a 4f				.dword	$4f7a537a ; 0.0048509421558
>2ef1	da					.byte	$da
>2ef2	08 58 fe c1				.dword	$c1fe5808 ; -0.016111701843
>2ef6	dc					.byte	$dc
>2ef7	e5 b3 0f 46				.dword	$460fb3e5 ; 0.034209638048
>2efb	dd					.byte	$dd
>2efc	e1 e5 29 ef				.dword	$ef29e5e1 ; -0.054279132761
>2f00	dd					.byte	$dd
>2f01	26 38 32 4a				.dword	$4a323826 ; 0.07245719654
>2f05	de					.byte	$de
>2f06	bd 28 f5 db				.dword	$dbf528bd ; -0.089802395378
>2f0a	de					.byte	$de
>2f0b	3f 44 98 71				.dword	$7198443f ; 0.11093241343
>2f0f	de					.byte	$de
>2f10	9d 4c 22 c9				.dword	$c9224c9d ; -0.14283980767
>2f14	df					.byte	$df
>2f15	e3 48 66 66				.dword	$666648e3 ; 0.19999912049
>2f19	df					.byte	$df
>2f1a	0a 55 55 d5				.dword	$d555550a ; -0.33333331568
>2f1e	e0					.byte	$e0
>2f1f	00 00 00 40				.dword	$40000000 ; 1.0
>2f23	e2					.byte	$e2
>2f24	00 00 00 00				.dword	$00000000 ; 0.0
>2f28	00					.byte	$00
.2f29					Const_Base:
.2f29					Const_1Div2Pi:
>2f29	b7 c1 7c 51				.dword	$517cc1b7 ; 0.15915494
>2f2d	df					.byte	$df
.2f2e					Const_PiDiv2:
>2f2e	51 ed 87 64				.dword	$6487ed51 ; 1.57079633
>2f32	e2					.byte	$e2
.2f33					Const_Log2_e:
>2f33	95 1d 55 5c				.dword	$5c551d95 ; 1.44269504
>2f37	e2					.byte	$e2
.2f38					Const_sqrt_2:
>2f38	9a 79 82 5a				.dword	$5a82799a ; 1.41421356
>2f3c	e2					.byte	$e2
.2f3d					Const_sqrt_half:
>2f3d	9a 79 82 5a				.dword	$5a82799a ; 0.70710678
>2f41	e1					.byte	$e1
.2f42					Const_pi:
>2f42	51 ed 87 64				.dword	$6487ed51 ; 3.14159265
>2f46	e3					.byte	$e3
.2f47					Const_half:
>2f47	00 00 00 40				.dword	$40000000 ; 0.50000000
>2f4b	e1					.byte	$e1
.2f4c					Const_ln_e:
>2f4c	fc 0b b9 58				.dword	$58b90bfc ; 0.69314718
>2f50	e1					.byte	$e1
.2f51					FloatCosine:
.2f51	a9 05		lda #$05			lda 	#Const_PiDiv2-Const_Base
.2f53	20 3b 30	jsr $303b			jsr 	LoadConstant
.2f56	e8		inx				inx
.2f57	20 2f 28	jsr $282f			jsr 	FloatAdd
.2f5a	4c f1 30	jmp $30f1			jmp 	FloatSine
.2f5d					FloatExponent:
.2f5d	a9 0a		lda #$0a			lda 	#Const_Log2_e-Const_Base
.2f5f	20 3b 30	jsr $303b			jsr 	LoadConstant
.2f62	e8		inx				inx
.2f63	20 cb 2a	jsr $2acb			jsr 	FloatMultiply
.2f66	20 a8 2f	jsr $2fa8			jsr 	_UECopy01 				; copy 0 to 1, get integer part to 1
.2f69	e8		inx				inx
.2f6a	20 46 2a	jsr $2a46			jsr 	FloatIntegerPart
.2f6d	ca		dex				dex
.2f6e	b5 4e		lda $4e,x			lda 	NSMantissa1+1,x
.2f70	15 5a		ora $5a,x			ora 	NSMantissa2+1,x
.2f72	15 66		ora $66,x			ora 	NSMantissa3+1,x
.2f74	d0 38		bne $2fae			bne 	_UERangeError
.2f76	b5 42		lda $42,x			lda 	NSMantissa0+1,x 		; push integer part on stack.
.2f78	c9 40		cmp #$40			cmp 	#64
.2f7a	b0 32		bcs $2fae			bcs 	_UERangeError
.2f7c	48		pha				pha
.2f7d	b5 35		lda $35,x			lda 	NSStatus,x 				; push sign
.2f7f	48		pha				pha
.2f80	20 eb 29	jsr $29eb			jsr 	FloatFractionalPart		; copy 0 to 1, get fractional part to 0
.2f83	68		pla				pla
.2f84	10 14		bpl $2f9a			bpl 	_UEPositive
.2f86	e8		inx				inx 							; 1-x
.2f87	a9 01		lda #$01			lda 	#1
.2f89	20 0d 2e	jsr $2e0d			jsr 	FloatSetByte
.2f8c	ca		dex				dex
.2f8d	20 cd 2d	jsr $2dcd			jsr 	FloatNegate
.2f90	e8		inx				inx
.2f91	20 2f 28	jsr $282f			jsr 	FloatAdd
.2f94	68		pla				pla 							; integer part +1 and negated.
.2f95	1a		inc a				inc 	a
.2f96	49 ff		eor #$ff			eor 	#$FF
.2f98	1a		inc a				inc 	a
.2f99	48		pha				pha
.2f9a					_UEPositive:
.2f9a	20 b0 2f	jsr $2fb0			jsr 	CoreExponent
.2f9d	20 e4 2f	jsr $2fe4			jsr 	CompletePolynomial
.2fa0	68		pla				pla
.2fa1	18		clc				clc
.2fa2	75 71		adc $71,x			adc 	NSExponent,x
.2fa4	95 71		sta $71,x			sta 	NSExponent,x
.2fa6	18		clc				clc
.2fa7	60		rts				rts
.2fa8					_UECopy01:
.2fa8	8a		txa				txa
.2fa9	a8		tay				tay
.2faa	c8		iny				iny
.2fab	4c ef 2f	jmp $2fef			jmp 	CopyFloatXY
.2fae					_UERangeError:
.2fae	38		sec				sec
.2faf	60		rts				rts
.2fb0					CoreExponent:
.2fb0	a9 80		lda #$80			lda 	#ExpCoefficients & $FF
.2fb2	a0 2e		ldy #$2e			ldy 	#ExpCoefficients >> 8
.2fb4	20 b8 2f	jsr $2fb8			jsr 	CalculateHornerPolynomial
.2fb7	60		rts				rts
.2fb8					CalculateHornerPolynomial:
.2fb8	85 2f		sta $2f				sta 	zTemp0 						; save poly data from YA
.2fba	84 30		sty $30				sty 	zTemp0+1
.2fbc	9c b4 05	stz $05b4			stz 	coefficientCount 			; zero the count.
.2fbf	8e b5 05	stx $05b5			stx 	xValueSlot 					; save xValue slot.
.2fc2	e8		inx				inx 								; set the count to zero.
.2fc3	20 0b 2e	jsr $2e0b			jsr 	FloatSetZero
.2fc6					_CHPLoop:
.2fc6	8a		txa				txa 								; copy X-1 to X+1
.2fc7	a8		tay				tay
.2fc8	ca		dex				dex
.2fc9	c8		iny				iny
.2fca	20 ef 2f	jsr $2fef			jsr 	CopyFloatXY 				; e.g. stack is <current> <x>
.2fcd	e8		inx				inx
.2fce	e8		inx				inx
.2fcf	20 cb 2a	jsr $2acb			jsr 	FloatMultiply 				; times current by X
.2fd2	e8		inx				inx
.2fd3	20 0e 30	jsr $300e			jsr 	GetCoefficient 				; coefficient into X+1
.2fd6	20 2f 28	jsr $282f			jsr 	FloatAdd 					; and add
.2fd9	ee b4 05	inc $05b4			inc 	coefficientCount
.2fdc	ad b4 05	lda $05b4			lda 	coefficientCount
.2fdf	d2 2f		cmp ($2f)			cmp 	(zTemp0)
.2fe1	d0 e3		bne $2fc6			bne 	_CHPLoop
.2fe3	60		rts				rts
.2fe4					CompletePolynomial:
.2fe4	20 cb 2a	jsr $2acb			jsr 	FloatMultiply
.2fe7	e8		inx				inx 								; get the last value
.2fe8	20 0e 30	jsr $300e			jsr 	GetCoefficient
.2feb	20 2f 28	jsr $282f			jsr 	FloatAdd 					; and add it
.2fee	60		rts				rts
.2fef					CopyFloatXY:
.2fef	b5 71		lda $71,x			lda 	NSExponent,x
.2ff1	99 71 00	sta $0071,y			sta 	NSExponent,y
.2ff4	b5 35		lda $35,x			lda 	NSStatus,x
.2ff6	99 35 00	sta $0035,y			sta 	NSStatus,y
.2ff9	b5 41		lda $41,x			lda 	NSMantissa0,x
.2ffb	99 41 00	sta $0041,y			sta 	NSMantissa0,y
.2ffe	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.3000	99 4d 00	sta $004d,y			sta 	NSMantissa1,y
.3003	b5 59		lda $59,x			lda 	NSMantissa2,x
.3005	99 59 00	sta $0059,y			sta 	NSMantissa2,y
.3008	b5 65		lda $65,x			lda 	NSMantissa3,x
.300a	99 65 00	sta $0065,y			sta 	NSMantissa3,y
.300d	60		rts				rts
.300e					GetCoefficient:
.300e	5a		phy				phy
.300f	ad b4 05	lda $05b4			lda 	coefficientCount 			; 5 per block
.3012	0a		asl a				asl 	a
.3013	0a		asl a				asl 	a
.3014	38		sec				sec 								; +1 for count
.3015	6d b4 05	adc $05b4			adc 	coefficientCount
.3018	a8		tay				tay
.3019	b1 2f		lda ($2f),y			lda 	(zTemp0),y 					; copy mantissa
.301b	95 41		sta $41,x			sta 	NSMantissa0,x
.301d	c8		iny				iny
.301e	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.3020	95 4d		sta $4d,x			sta 	NSMantissa1,x
.3022	c8		iny				iny
.3023	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.3025	95 59		sta $59,x			sta 	NSMantissa2,x
.3027	c8		iny				iny
.3028	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.302a	48		pha				pha
.302b	29 7f		and #$7f			and 	#$7F 						; clear sign bit.
.302d	95 65		sta $65,x			sta 	NSMantissa3,x
.302f	c8		iny				iny
.3030	68		pla				pla
.3031	29 80		and #$80			and 	#$80
.3033	95 35		sta $35,x			sta 	NSStatus,x 					; put in status
.3035	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.3037	95 71		sta $71,x			sta 	NSExponent,x
.3039	7a		ply				ply
.303a	60		rts				rts
.05b4					coefficientCount:
>05b4							.fill 	1
.05b5					xValueSlot:
>05b5							.fill 	1
.303b					LoadConstant:
.303b	5a		phy				phy
.303c	a8		tay				tay
.303d	b9 29 2f	lda $2f29,y			lda 	Const_Base+0,y
.3040	95 42		sta $42,x			sta 	NSMantissa0+1,x
.3042	b9 2a 2f	lda $2f2a,y			lda 	Const_Base+1,y
.3045	95 4e		sta $4e,x			sta 	NSMantissa1+1,x
.3047	b9 2b 2f	lda $2f2b,y			lda 	Const_Base+2,y
.304a	95 5a		sta $5a,x			sta 	NSMantissa2+1,x
.304c	b9 2c 2f	lda $2f2c,y			lda 	Const_Base+3,y
.304f	48		pha				pha
.3050	29 7f		and #$7f			and 	#$7F
.3052	95 66		sta $66,x			sta 	NSMantissa3+1,x
.3054	68		pla				pla
.3055	29 80		and #$80			and 	#$80
.3057	95 36		sta $36,x			sta 	NSStatus+1,x
.3059	b9 2d 2f	lda $2f2d,y			lda 	Const_Base+4,y
.305c	95 72		sta $72,x			sta 	NSExponent+1,x
.305e	7a		ply				ply
.305f	60		rts				rts
.3060					FloatLogarithm:
.3060	b5 35		lda $35,x			lda 	NSStatus,x 					; check > 0
.3062	30 5f		bmi $30c3			bmi 	_ULRange
.3064	20 2d 2e	jsr $2e2d			jsr 	FloatIsZero
.3067	f0 5a		beq $30c3			beq 	_ULRange
.3069	20 60 2b	jsr $2b60			jsr 	FloatNormalise 				; put into FP mode.
.306c	b5 71		lda $71,x			lda 	NSExponent,x 				; get power
.306e	48		pha				pha
.306f	a9 e1		lda #$e1			lda 	#(-31) & $FF 				; force into range 0.5 -> 1
.3071	95 71		sta $71,x			sta 	NSExponent,x
.3073	a9 14		lda #$14			lda 	#Const_sqrt_half-Const_Base
.3075	20 3b 30	jsr $303b			jsr 	LoadConstant
.3078	e8		inx				inx
.3079	20 2f 28	jsr $282f			jsr 	FloatAdd
.307c	8a		txa				txa 								; divide into sqrt 2.0
.307d	a8		tay				tay
.307e	c8		iny				iny
.307f	20 ef 2f	jsr $2fef			jsr 	CopyFloatXY
.3082	ca		dex				dex
.3083	a9 0f		lda #$0f			lda 	#Const_sqrt_2-Const_Base
.3085	20 3b 30	jsr $303b			jsr 	LoadConstant
.3088	e8		inx				inx
.3089	e8		inx				inx
.308a	20 54 29	jsr $2954			jsr 	FloatDivide 				; if zero, error.
.308d	b0 33		bcs $30c2			bcs 	_ULRangePla
.308f	20 cd 2d	jsr $2dcd			jsr 	FloatNegate 				; subtract from 1
.3092	e8		inx				inx
.3093	a9 01		lda #$01			lda 	#1
.3095	20 0d 2e	jsr $2e0d			jsr 	FloatSetByte
.3098	20 2f 28	jsr $282f			jsr 	FloatAdd
.309b	20 c5 30	jsr $30c5			jsr 	CoreLog
.309e	20 e4 2f	jsr $2fe4			jsr 	CompletePolynomial
.30a1	68		pla				pla 								; add exponent
.30a2	18		clc				clc
.30a3	69 1f		adc #$1f			adc 	#31 						; fix up
.30a5	48		pha				pha
.30a6	10 03		bpl $30ab			bpl 	_LogNotNeg
.30a8	49 ff		eor #$ff			eor 	#$FF
.30aa	1a		inc a				inc 	a
.30ab					_LogNotNeg:
.30ab	e8		inx				inx 								; set byte and sign.
.30ac	20 0d 2e	jsr $2e0d			jsr 	FloatSetByte
.30af	68		pla				pla
.30b0	29 80		and #$80			and 	#$80
.30b2	95 35		sta $35,x			sta 	NSStatus,x
.30b4	20 2f 28	jsr $282f			jsr 	FloatAdd
.30b7	a9 23		lda #$23			lda 	#Const_ln_e-Const_Base
.30b9	20 3b 30	jsr $303b			jsr 	LoadConstant
.30bc	e8		inx				inx
.30bd	20 cb 2a	jsr $2acb			jsr 	FloatMultiply
.30c0	18		clc				clc
.30c1	60		rts				rts
.30c2					_ULRangePla:
.30c2	68		pla				pla
.30c3					_ULRange:
.30c3	38		sec				sec
.30c4	60		rts				rts
.30c5					CoreLog:
.30c5	a9 cd		lda #$cd			lda 	#LogCoefficients & $FF
.30c7	a0 2e		ldy #$2e			ldy 	#LogCoefficients >> 8
.30c9	4c 38 31	jmp $3138			jmp 	CorePolySquared
.30cc					FloatPI:
.30cc	a9 19		lda #$19			lda 	#Const_pi-Const_Base
.30ce	20 3b 30	jsr $303b			jsr 	LoadConstant
.30d1	e8		inx				inx
.30d2	18		clc				clc
.30d3	60		rts				rts
.30d4					FloatPower:
.30d4	ca		dex				dex
.30d5	8a		txa				txa 							; copy 0 to 2, so we can process it
.30d6	a8		tay				tay
.30d7	c8		iny				iny
.30d8	c8		iny				iny
.30d9	20 ef 2f	jsr $2fef			jsr 	CopyFloatXY
.30dc	e8		inx				inx 							; 2 = Log(0)
.30dd	e8		inx				inx
.30de	20 60 30	jsr $3060			jsr 	FloatLogarithm
.30e1	b0 0d		bcs $30f0			bcs 	_FPWExit
.30e3	20 cb 2a	jsr $2acb			jsr 	FloatMultiply			; Multiply by original 1, into 1.
.30e6	8a		txa				txa 							; copy to slot 0
.30e7	a8		tay				tay
.30e8	88		dey				dey
.30e9	20 ef 2f	jsr $2fef			jsr 	CopyFloatXY
.30ec	ca		dex				dex  							; Exponent code.
.30ed	20 5d 2f	jsr $2f5d			jsr 	FloatExponent
.30f0					_FPWExit:
.30f0	60		rts				rts
.30f1					FloatSine:
.30f1	b5 35		lda $35,x			lda 	NSStatus,x 					; save sign
.30f3	48		pha				pha
.30f4	74 35		stz $35,x			stz 	NSStatus,x 					; make +ve
.30f6	a9 00		lda #$00			lda 	#Const_1Div2Pi-Const_Base
.30f8	20 3b 30	jsr $303b			jsr 	LoadConstant
.30fb	e8		inx				inx
.30fc	20 cb 2a	jsr $2acb			jsr 	FloatMultiply
.30ff	20 eb 29	jsr $29eb			jsr 	FloatFractionalPart 		; take the fractional part
.3102	b5 71		lda $71,x			lda 	NSExponent,x 				; check exponent
.3104	c9 e0		cmp #$e0			cmp 	#$E0 						; < $E0 exponent : 0-0.25
.3106	90 1f		bcc $3127			bcc 	_USProcessExit
.3108	f0 06		beq $3110			beq 	_USSubtractFromHalf 		; = $E0 exponent : 0.25-0.5
.310a	b5 65		lda $65,x			lda 	NSMantissa3,x 				; if > 0.75 which is $60000000:$E1
.310c	c9 60		cmp #$60			cmp 	#$60
.310e	b0 0e		bcs $311e			bcs 	_USSubtractOne
.3110					_USSubtractFromHalf:
.3110	a9 1e		lda #$1e			lda 	#Const_half-Const_Base
.3112	20 3b 30	jsr $303b			jsr 	LoadConstant
.3115	e8		inx				inx
.3116	20 29 28	jsr $2829			jsr 	FloatSubtract
.3119	20 cd 2d	jsr $2dcd			jsr 	FloatNegate 				; then negate it
.311c	80 09		bra $3127			bra 	_USProcessExit 				; and exit
.311e					_USSubtractOne:
.311e	e8		inx				inx
.311f	a9 01		lda #$01			lda 	#1
.3121	20 0d 2e	jsr $2e0d			jsr 	FloatSetByte
.3124	20 29 28	jsr $2829			jsr 	FloatSubtract
.3127					_USProcessExit:
.3127	20 34 31	jsr $3134			jsr 	CoreSine
.312a	20 e4 2f	jsr $2fe4			jsr 	CompletePolynomial
.312d	68		pla				pla 								; restore sign and apply
.312e	55 35		eor $35,x			eor 	NSStatus,x
.3130	95 35		sta $35,x			sta 	NSStatus,x
.3132	18		clc				clc
.3133	60		rts				rts
.3134					CoreSine:
.3134	a9 a9		lda #$a9			lda 	#SinCoefficients & $FF
.3136	a0 2e		ldy #$2e			ldy 	#SinCoefficients >> 8
.3138					CorePolySquared:
.3138	48		pha				pha 								; save coefficient table
.3139	5a		phy				phy
.313a	8a		txa				txa 								; copy X to +1, +2
.313b	a8		tay				tay
.313c	c8		iny				iny
.313d	20 ef 2f	jsr $2fef			jsr 	CopyFloatXY
.3140	c8		iny				iny
.3141	20 ef 2f	jsr $2fef			jsr 	CopyFloatXY
.3144	e8		inx				inx 								; point to the pair and put x^2 on stack
.3145	e8		inx				inx
.3146	20 cb 2a	jsr $2acb			jsr 	FloatMultiply
.3149	7a		ply				ply 								; coefficient table back.
.314a	68		pla				pla
.314b	20 b8 2f	jsr $2fb8			jsr 	CalculateHornerPolynomial
.314e	8a		txa				txa 								; copy back to slot #1
.314f	a8		tay				tay
.3150	88		dey				dey
.3151	20 ef 2f	jsr $2fef			jsr	 	CopyFloatXY
.3154	ca		dex				dex 								; point at result
.3155	60		rts				rts
.3156					FloatSquareRoot:
.3156	20 60 30	jsr $3060			jsr 	FloatLogarithm
.3159	b0 06		bcs $3161			bcs 	_FSQExit
.315b	d6 71		dec $71,x			dec 	NSExponent,x
.315d	20 5d 2f	jsr $2f5d			jsr 	FloatExponent
.3160	18		clc				clc
.3161					_FSQExit:
.3161	60		rts				rts
.3162					FloatTangent:
.3162	da		phx				phx
.3163	8a		txa				txa 								; sin -> +1
.3164	a8		tay				tay
.3165	c8		iny				iny
.3166	20 ef 2f	jsr $2fef			jsr 	CopyFloatXY
.3169	e8		inx				inx
.316a	20 f1 30	jsr $30f1			jsr 	FloatSine
.316d	ca		dex				dex
.316e	8a		txa				txa 								; cos -> +2
.316f	a8		tay				tay
.3170	c8		iny				iny
.3171	c8		iny				iny
.3172	20 ef 2f	jsr $2fef			jsr 	CopyFloatXY
.3175	e8		inx				inx
.3176	e8		inx				inx
.3177	20 51 2f	jsr $2f51			jsr 	FloatCosine
.317a	20 54 29	jsr $2954			jsr 	FloatDivide 				; calculate sin/cos
.317d	b0 07		bcs $3186			bcs 	_FTExit 					; divide by zero
.317f	8a		txa				txa 								; copy result down.
.3180	a8		tay				tay
.3181	88		dey				dey
.3182	20 ef 2f	jsr $2fef			jsr 	CopyFloatXY
.3185	18		clc				clc
.3186					_FTExit:
.3186	fa		plx				plx
.3187	60		rts				rts

;******  Processing input file: testing/testend.asm

=$3200							nextPage = (* + $FF) & $FF00 		; so I can include with that f*****g header.
.31fe					ObjectCodePreHeader:
>31fe	00 40 d4 18 00 a6 00 48				.binary "code/code.bin"
>3206	00 00 1d 01 95 00 48 03 06 27 01 95 a6 06 a7 00
>3216	a7 a6 01 48 06 0c 40 09 01 95 a6 0c a7 a6 d0 f2
>3226	ff c4 ff
=12800					ObjectCode = ObjectCodePreHeader+2 			; so the code is at XX00

;******  End of listing
