
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass -c -Wall -o build/code.prg -L build/code.lst -l build/code.lbl testing/testing.asm /home/paulr/Projects/blitz-compiler/documents/../bin/runtime.library /home/paulr/Projects/blitz-compiler/documents/../bin/common.library /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library /home/paulr/Projects/blitz-compiler/documents/../bin/polynomials.library testing/testend.asm
; Sat Oct  7 05:33:34 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: testing/testing.asm

.1000					WrapperBoot:
.1000	a9 32		lda #$32			lda 	#ObjectCode >> 8 			; address of object code to run.
.1002	a2 81		ldx #$81			ldx 	#$81 						; first page of allocatable memory
.1004	a0 9f		ldy #$9f			ldy 	#$9F 						; byte after end of last page.
.1006	4c 09 10	jmp $1009			jmp 	StartRuntime

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/runtime.library

=$80					C64_END                  = $80 ; $80 end
=$81					C64_FOR                  = $81 ; $81 for
=$82					C64_NEXT                 = $82 ; $82 next
=$83					C64_DATA                 = $83 ; $83 data
=$84					C64_INPUTHASH            = $84 ; $84 input#
=$85					C64_INPUT                = $85 ; $85 input
=$86					C64_DIM                  = $86 ; $86 dim
=$87					C64_READ                 = $87 ; $87 read
=$88					C64_LET                  = $88 ; $88 let
=$89					C64_GOTO                 = $89 ; $89 goto
=$8a					C64_RUN                  = $8a ; $8a run
=$8b					C64_IF                   = $8b ; $8b if
=$8c					C64_RESTORE              = $8c ; $8c restore
=$8d					C64_GOSUB                = $8d ; $8d gosub
=$8e					C64_RETURN               = $8e ; $8e return
=$8f					C64_REM                  = $8f ; $8f rem
=$90					C64_STOP                 = $90 ; $90 stop
=$91					C64_ON                   = $91 ; $91 on
=$92					C64_WAIT                 = $92 ; $92 wait
=$93					C64_LOAD                 = $93 ; $93 load
=$94					C64_SAVE                 = $94 ; $94 save
=$95					C64_VERIFY               = $95 ; $95 verify
=$96					C64_DEF                  = $96 ; $96 def
=$97					C64_POKE                 = $97 ; $97 poke
=$98					C64_PRINTHASH            = $98 ; $98 print#
=$99					C64_PRINT                = $99 ; $99 print
=$9a					C64_CONT                 = $9a ; $9a cont
=$9b					C64_LIST                 = $9b ; $9b list
=$9c					C64_CLR                  = $9c ; $9c clr
=$9d					C64_CMD                  = $9d ; $9d cmd
=$9e					C64_SYS                  = $9e ; $9e sys
=$9f					C64_OPEN                 = $9f ; $9f open
=$a0					C64_CLOSE                = $a0 ; $a0 close
=$a1					C64_GET                  = $a1 ; $a1 get
=$a2					C64_NEW                  = $a2 ; $a2 new
=$a3					C64_TABLB                = $a3 ; $a3 tab(
=$a4					C64_TO                   = $a4 ; $a4 to
=$a5					C64_FN                   = $a5 ; $a5 fn
=$a6					C64_SPCLB                = $a6 ; $a6 spc(
=$a7					C64_THEN                 = $a7 ; $a7 then
=$a8					C64_NOT                  = $a8 ; $a8 not
=$a9					C64_STEP                 = $a9 ; $a9 step
=$aa					C64_PLUS                 = $aa ; $aa +
=$ab					C64_MINUS                = $ab ; $ab -
=$ac					C64_TIMES                = $ac ; $ac *
=$ad					C64_DIVIDE               = $ad ; $ad /
=$ae					C64_POWER                = $ae ; $ae ^
=$af					C64_AND                  = $af ; $af and
=$b0					C64_OR                   = $b0 ; $b0 or
=$b1					C64_GREATER              = $b1 ; $b1 >
=$b2					C64_EQUAL                = $b2 ; $b2 =
=$b3					C64_LESS                 = $b3 ; $b3 <
=$b4					C64_SGN                  = $b4 ; $b4 sgn
=$b5					C64_INT                  = $b5 ; $b5 int
=$b6					C64_ABS                  = $b6 ; $b6 abs
=$b7					C64_USR                  = $b7 ; $b7 usr
=$b8					C64_FRE                  = $b8 ; $b8 fre
=$b9					C64_POS                  = $b9 ; $b9 pos
=$ba					C64_SQR                  = $ba ; $ba sqr
=$bb					C64_RND                  = $bb ; $bb rnd
=$bc					C64_LOG                  = $bc ; $bc log
=$bd					C64_EXP                  = $bd ; $bd exp
=$be					C64_COS                  = $be ; $be cos
=$bf					C64_SIN                  = $bf ; $bf sin
=$c0					C64_TAN                  = $c0 ; $c0 tan
=$c1					C64_ATN                  = $c1 ; $c1 atn
=$c2					C64_PEEK                 = $c2 ; $c2 peek
=$c3					C64_LEN                  = $c3 ; $c3 len
=$c4					C64_STRDOLLAR            = $c4 ; $c4 str$
=$c5					C64_VAL                  = $c5 ; $c5 val
=$c6					C64_ASC                  = $c6 ; $c6 asc
=$c7					C64_CHRDOLLAR            = $c7 ; $c7 chr$
=$c8					C64_LEFTDOLLAR           = $c8 ; $c8 left$
=$c9					C64_RIGHTDOLLAR          = $c9 ; $c9 right$
=$ca					C64_MIDDOLLAR            = $ca ; $ca mid$
=$cb					C64_GO                   = $cb ; $cb go
=$ce80					C64_MON                  = $ce80 ; $ce80 mon
=$ce81					C64_DOS                  = $ce81 ; $ce81 dos
=$ce82					C64_OLD                  = $ce82 ; $ce82 old
=$ce83					C64_GEOS                 = $ce83 ; $ce83 geos
=$ce84					C64_VPOKE                = $ce84 ; $ce84 vpoke
=$ce85					C64_VLOAD                = $ce85 ; $ce85 vload
=$ce86					C64_SCREEN               = $ce86 ; $ce86 screen
=$ce87					C64_PSET                 = $ce87 ; $ce87 pset
=$ce88					C64_LINE                 = $ce88 ; $ce88 line
=$ce89					C64_FRAME                = $ce89 ; $ce89 frame
=$ce8a					C64_RECT                 = $ce8a ; $ce8a rect
=$ce8b					C64_CHAR                 = $ce8b ; $ce8b char
=$ce8c					C64_MOUSE                = $ce8c ; $ce8c mouse
=$ce8d					C64_COLOR                = $ce8d ; $ce8d color
=$ce8e					C64_TEST                 = $ce8e ; $ce8e test
=$ce8f					C64_RESET                = $ce8f ; $ce8f reset
=$ce90					C64_CLS                  = $ce90 ; $ce90 cls
=$ce91					C64_CODEX                = $ce91 ; $ce91 codex
=$ce92					C64_LOCATE               = $ce92 ; $ce92 locate
=$ce93					C64_BOOT                 = $ce93 ; $ce93 boot
=$ce94					C64_KEYMAP               = $ce94 ; $ce94 keymap
=$ce95					C64_BLOAD                = $ce95 ; $ce95 bload
=$ce96					C64_BVLOAD               = $ce96 ; $ce96 bvload
=$ce97					C64_BVERIFY              = $ce97 ; $ce97 bverify
=$ce98					C64_BANK                 = $ce98 ; $ce98 bank
=$ce99					C64_FMINIT               = $ce99 ; $ce99 fminit
=$ce9a					C64_FMNOTE               = $ce9a ; $ce9a fmnote
=$ce9b					C64_FMDRUM               = $ce9b ; $ce9b fmdrum
=$ce9c					C64_FMINST               = $ce9c ; $ce9c fminst
=$ce9d					C64_FMVIB                = $ce9d ; $ce9d fmvib
=$ce9e					C64_FMFREQ               = $ce9e ; $ce9e fmfreq
=$ce9f					C64_FMVOL                = $ce9f ; $ce9f fmvol
=$cea0					C64_FMPAN                = $cea0 ; $cea0 fmpan
=$cea1					C64_FMPLAY               = $cea1 ; $cea1 fmplay
=$cea2					C64_FMCHORD              = $cea2 ; $cea2 fmchord
=$cea3					C64_FMPOKE               = $cea3 ; $cea3 fmpoke
=$cea4					C64_PSGINIT              = $cea4 ; $cea4 psginit
=$cea5					C64_PSGNOTE              = $cea5 ; $cea5 psgnote
=$cea6					C64_PSGVOL               = $cea6 ; $cea6 psgvol
=$cea7					C64_PSGWAV               = $cea7 ; $cea7 psgwav
=$cea8					C64_PSGFREQ              = $cea8 ; $cea8 psgfreq
=$cea9					C64_PSGPAN               = $cea9 ; $cea9 psgpan
=$ceaa					C64_PSGPLAY              = $ceaa ; $ceaa psgplay
=$ceab					C64_PSGCHORD             = $ceab ; $ceab psgchord
=$ceac					C64_REBOOT               = $ceac ; $ceac reboot
=$cead					C64_POWEROFF             = $cead ; $cead poweroff
=$ceae					C64_I2CPOKE              = $ceae ; $ceae i2cpoke
=$ceaf					C64_SLEEP                = $ceaf ; $ceaf sleep
=$ceb0					C64_BSAVE                = $ceb0 ; $ceb0 bsave
=$ceb1					C64_MENU                 = $ceb1 ; $ceb1 menu
=$ceb2					C64_REN                  = $ceb2 ; $ceb2 ren
=$ceb3					C64_LINPUT               = $ceb3 ; $ceb3 linput
=$ceb4					C64_LINPUTHASH           = $ceb4 ; $ceb4 linput#
=$ceb5					C64_BINPUTHASH           = $ceb5 ; $ceb5 binput#
=$ceb6					C64_HELP                 = $ceb6 ; $ceb6 help
=$ced0					C64_VPEEK                = $ced0 ; $ced0 vpeek
=$ced1					C64_MX                   = $ced1 ; $ced1 mx
=$ced2					C64_MY                   = $ced2 ; $ced2 my
=$ced3					C64_MB                   = $ced3 ; $ced3 mb
=$ced4					C64_JOY                  = $ced4 ; $ced4 joy
=$ced5					C64_HEXDOLLAR            = $ced5 ; $ced5 hex$
=$ced6					C64_BINDOLLAR            = $ced6 ; $ced6 bin$
=$ced7					C64_I2CPEEK              = $ced7 ; $ced7 i2cpeek
=$ced8					C64_POINTER              = $ced8 ; $ced8 pointer
=$ced9					C64_STRPTR               = $ced9 ; $ced9 strptr
=$ceda					C64_RPTDOLLAR            = $ceda ; $ceda rpt$
.0022					zsTemp:
>0022							.fill 	2
.0024					runtimeStackPtr:
>0024							.fill 	2
.0400					stringLowMemory:
>0400							.fill 	2
.0402					stringHighMemory:
>0402							.fill 	2
=$e4					FRAME_GOSUB = $E4 							; Gosub has 4 bytes
=211					FRAME_FOR = $C0+19 							; For has 19 bytes
=$9f20					VRAMLow0 = $9F20
=$9f21					VRAMMed0 = $9F21
=$9f22					VRAMHigh0 = $9F22
=$9f23					VRAMData0 = $9F23
=$c09f					X16A_audio_init=$C09F
=$c08d					X16A_bas_fmchordstring=$C08D
=$c000					X16A_bas_fmfreq=$C000
=$c003					X16A_bas_fmnote=$C003
=$c006					X16A_bas_fmplaystring=$C006
=$c009					X16A_bas_fmvib=$C009
=$c00c					X16A_bas_playstringvoice=$C00C
=$c090					X16A_bas_psgchordstring=$C090
=$c00f					X16A_bas_psgfreq=$C00F
=$c012					X16A_bas_psgnote=$C012
=$c015					X16A_bas_psgwav=$C015
=$c018					X16A_bas_psgplaystring=$C018
=$c01b					X16A_notecon_bas2fm=$C01B
=$c01e					X16A_notecon_bas2midi=$C01E
=$c021					X16A_notecon_bas2psg=$C021
=$c024					X16A_notecon_fm2bas=$C024
=$c027					X16A_notecon_fm2midi=$C027
=$c02a					X16A_notecon_fm2psg=$C02A
=$c02d					X16A_notecon_freq2bas=$C02D
=$c030					X16A_notecon_freq2fm=$C030
=$c033					X16A_notecon_freq2midi=$C033
=$c036					X16A_notecon_freq2psg=$C036
=$c039					X16A_notecon_midi2bas=$C039
=$c03c					X16A_notecon_midi2fm=$C03C
=$c03f					X16A_notecon_midi2psg=$C03F
=$c042					X16A_notecon_psg2bas=$C042
=$c045					X16A_notecon_psg2fm=$C045
=$c048					X16A_notecon_psg2midi=$C048
=$c093					X16A_psg_getatten=$C093
=$c096					X16A_psg_getpan=$C096
=$c04b					X16A_psg_init=$C04B
=$c04e					X16A_psg_playfreq=$C04E
=$c051					X16A_psg_read=$C051
=$c054					X16A_psg_setatten=$C054
=$c057					X16A_psg_setfreq=$C057
=$c05a					X16A_psg_setpan=$C05A
=$c05d					X16A_psg_setvol=$C05D
=$c060					X16A_psg_write=$C060
=$c0a2					X16A_psg_write_fast=$C0A2
=$c099					X16A_ym_getatten=$C099
=$c09c					X16A_ym_getpan=$C09C
=$c063					X16A_ym_init=$C063
=$c066					X16A_ym_loaddefpatches=$C066
=$c069					X16A_ym_loadpatch=$C069
=$c06c					X16A_ym_loadpatchlfn=$C06C
=$c06f					X16A_ym_playdrum=$C06F
=$c072					X16A_ym_playnote=$C072
=$c075					X16A_ym_setatten=$C075
=$c078					X16A_ym_setdrum=$C078
=$c07b					X16A_ym_setnote=$C07B
=$c07e					X16A_ym_setpan=$C07E
=$c081					X16A_ym_read=$C081
=$c084					X16A_ym_release=$C084
=$c087					X16A_ym_trigger=$C087
=$c08a					X16A_ym_write=$C08A
=2					X16_r0 = 2
=4					X16_r1 = 4
=6					X16_r2 = 6
=8					X16_r3 = 8
=10					X16_r4 = 10
=$ffa5					X16_ACPTR=$FFA5
=$ffcf					X16_BASIN=$FFCF
=$feba					X16_BSAVE=$FEBA
=$ffd2					X16_BSOUT=$FFD2
=$ffa8					X16_CIOUT=$FFA8
=$ffe7					X16_CLALL=$FFE7
=$ffc3					X16_CLOSE=$FFC3
=$ffc6					X16_CHKIN=$FFC6
=$ffc9					X16_CHKOUT=$FFC9
=$ff50					X16_clock_get_date_time=$FF50
=$ff4d					X16_clock_set_date_time=$FF4D
=$ffcf					X16_CHRIN=$FFCF
=$ffd2					X16_CHROUT=$FFD2
=$ff4a					X16_CLOSE_ALL=$FF4A
=$ffcc					X16_CLRCHN=$FFCC
=$fedb					X16_console_init=$FEDB
=$fee1					X16_console_get_char=$FEE1
=$fede					X16_console_put_char=$FEDE
=$fed8					X16_console_put_image=$FED8
=$fed5					X16_console_set_paging_message=$FED5
=$ff47					X16_enter_basic=$FF47
=$fecf					X16_entropy_get=$FECF
=$ff74					X16_fetch=$FF74
=$ff02					X16_FB_cursor_next_line=$FF02
=$feff					X16_FB_cursor_position=$FEFF
=$ff17					X16_FB_fill_pixels=$FF17
=$ff1a					X16_FB_filter_pixels=$FF1A
=$fef9					X16_FB_get_info=$FEF9
=$ff05					X16_FB_get_pixel=$FF05
=$ff08					X16_FB_get_pixels=$FF08
=$fef6					X16_FB_init=$FEF6
=$ff1d					X16_FB_move_pixels=$FF1D
=$ff11					X16_FB_set_8_pixels=$FF11
=$ff14					X16_FB_set_8_pixels_opaque=$FF14
=$fefc					X16_FB_set_palette=$FEFC
=$ff0b					X16_FB_set_pixel=$FF0B
=$ff0e					X16_FB_set_pixels=$FF0E
=$ffe4					X16_GETIN=$FFE4
=$ff23					X16_GRAPH_clear=$FF23
=$ff38					X16_GRAPH_draw_image=$FF38
=$ff2c					X16_GRAPH_draw_line=$FF2C
=$ff35					X16_GRAPH_draw_oval=$FF35
=$ff2f					X16_GRAPH_draw_rect=$FF2F
=$ff3e					X16_GRAPH_get_char_size=$FF3E
=$ff20					X16_GRAPH_init=$FF20
=$ff32					X16_GRAPH_move_rect=$FF32
=$ff41					X16_GRAPH_put_char=$FF41
=$ff29					X16_GRAPH_set_colors=$FF29
=$ff3b					X16_GRAPH_set_font=$FF3B
=$ff26					X16_GRAPH_set_window=$FF26
=$fec6					X16_i2c_read_byte=$FEC6
=$fec9					X16_i2c_write_byte=$FEC9
=$fff3					X16_IOBASE=$FFF3
=$ff6e					X16_JSRFAR=$FF6E
=$ff56					X16_joystick_get=$FF56
=$ff53					X16_joystick_scan=$FF53
=$fec0					X16_kbdbuf_get_modifiers=$FEC0
=$febd					X16_kbdbuf_peek=$FEBD
=$fec3					X16_kbdbuf_put=$FEC3
=$fed2					X16_keymap=$FED2
=$ffb1					X16_LISTEN=$FFB1
=$ff59					X16_LKUPLA=$FF59
=$ff5c					X16_LKUPSA=$FF5C
=$ffd5					X16_LOAD=$FFD5
=$ff44					X16_MACPTR=$FF44
=$ff9c					X16_MEMBOT=$FF9C
=$fee7					X16_memory_copy=$FEE7
=$feea					X16_memory_crc=$FEEA
=$feed					X16_memory_decompress=$FEED
=$fee4					X16_memory_fill=$FEE4
=$ff99					X16_MEMTOP=$FF99
=$fecc					X16_monitor=$FECC
=$ff68					X16_mouse_config=$FF68
=$ff6b					X16_mouse_get=$FF6B
=$ff71					X16_mouse_scan=$FF71
=$ffc0					X16_OPEN=$FFC0
=$ff65					X16_PFKEY=$FF65
=$fff0					X16_PLOT=$FFF0
=$ff7d					X16_PRIMM=$FF7D
=$ffde					X16_RDTIM=$FFDE
=$ffb7					X16_READST=$FFB7
=$ffd8					X16_SAVE=$FFD8
=$ffed					X16_SCREEN=$FFED
=$ff5f					X16_screen_mode=$FF5F
=$ff62					X16_screen_set_charset=$FF62
=$ff93					X16_SECOND=$FF93
=$ffba					X16_SETLFS=$FFBA
=$ff90					X16_SETMSG=$FF90
=$ffbd					X16_SETNAM=$FFBD
=$ffdb					X16_SETTIM=$FFDB
=$ffa2					X16_SETTMO=$FFA2
=$fef0					X16_sprite_set_image=$FEF0
=$fef3					X16_sprite_set_position=$FEF3
=$ff77					X16_stash=$FF77
=$ffe1					X16_STOP=$FFE1
=$ffb4					X16_TALK=$FFB4
=$ff96					X16_TKSA=$FF96
=$ffea					X16_UDTIM=$FFEA
=$ffae					X16_UNLSN=$FFAE
=$ffab					X16_UNTLK=$FFAB
=$311					USRRoutineAddress = $311
=$30c					SYS_Reg_A = $30C
=$30d					SYS_Reg_X = $30D
=$30e					SYS_Reg_Y = $30E
=$30f					SYS_Reg_S = $30F
=0					SelectRAMBank = 0
=1					SelectROMBank = 1
=$0a					X16_AudioCodeBank = $0A
.1009					StartRuntime:
.1009	8d 04 04	sta $0404			sta 	runtimeHigh 				; save address of code.
.100c	85 29		sta $29				sta 	codePtr+1 					; set pointer to code.
.100e	64 28		stz $28				stz 	codePtr
.1010	64 2a		stz $2a				stz 	codePage 					; zero current page.
.1012	8e 05 04	stx $0405			stx 	storeStartHigh 				; save from-to address.
.1015	8c 06 04	sty $0406			sty 	storeEndHigh
.1018	8e 07 04	stx $0407			stx 	variableStartPage
.101b	20 4d 12	jsr $124d			jsr 	ClearMemory 				; clear memory.
.101e	20 6f 1f	jsr $1f6f			jsr 	XRuntimeSetup 				; initialise the runtime stuff.
.1021	20 71 1c	jsr $1c71		 	jsr		SetDefaultChannel			; set default input/output channel.
.1024	20 a7 1e	jsr $1ea7			jsr 	RestoreCode 				; which we now call
.1027	a0 00		ldy #$00			ldy 	#0
.1029					NextCommand:
.1029	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.102b	30 5b		bmi $1088			bmi 	NXCommand 					; -if -ve command
.102d	c8		iny				iny
.102e	c9 40		cmp #$40			cmp 	#64 						; 64..127 is load and store.
.1030	90 39		bcc $106b			bcc 	PushByteA 					; 0..63 is short constants.
.1032					NXLoadStore:
.1032	c9 78		cmp #$78			cmp		#120 						; is it an indirect read/write
.1034	b0 19		bcs $104f			bcs 	NXIndirectLoadStore
.1036	4a		lsr a				lsr 	a 							; / 4, so $48 => $12,
.1037	4a		lsr a				lsr 	a
.1038	29 0e		and #$0e			and 	#$0E
.103a	da		phx				phx 								; get ready to jump
.103b	aa		tax				tax
.103c	7c 3f 10	jmp ($103f,x)			jmp 	(ReadWriteVectors,x) 		; go via the jump table.
.103f					ReadWriteVectors:
>103f	dd 1d						.word 	ReadFloatCommand			; read float
>1041	b8 23						.word 	WriteFloatCommand 			; write float
>1043	19 1e						.word 	ReadIntegerCommand 			; read integer
>1045	f4 23						.word 	WriteIntegerCommand 		; write integer
>1047	5e 1e						.word 	ReadStringCommand 			; read string
>1049	33 24						.word 	WriteStringCommand 			; write string
>104b	1b 14						.word 	Unimplemented
>104d	1b 14						.word 	Unimplemented
.104f					NXIndirectLoadStore:
.104f	29 07		and #$07			and 	#7
.1051	0a		asl a				asl 	a
.1052	da		phx				phx
.1053	aa		tax				tax
.1054	7c 57 10	jmp ($1057,x)			jmp 	(IndirectVectors,x)
.1057					IndirectVectors:
>1057	07 18						.word 	IndFloatRead 				; float read
>1059	1b 18						.word 	IndInt16Read 				; int16 read
>105b	2f 18						.word 	IndStringRead 				; string read
>105d	1b 14						.word 	Unimplemented
>105f	43 18						.word 	IndFloatWrite				; float write
>1061	57 18						.word 	IndInt16Write 				; int16 write
>1063	6b 18						.word 	IndStringWrite 				; string write
>1065	1b 14						.word 	Unimplemented
.1067					PushByteCommand:
.1067	fa		plx				plx
.1068	b1 28		lda ($28),y			lda 	(codePtr),y 				; get byte to write.
.106a	c8		iny				iny
.106b					PushByteA:
.106b	e8		inx				inx 								; push constant on stack
.106c	95 40		sta $40,x			sta 	NSMantissa0,x 				; save byte
.106e	74 4c		stz $4c,x			stz 	NSMantissa1,x 				; clear MSB
.1070					ClearRestWord:
.1070	74 58		stz $58,x			stz 	NSMantissa2,x 				; zero upper bytes, exponent, make iFloat32
.1072	74 64		stz $64,x			stz 	NSMantissa3,x
.1074	74 70		stz $70,x			stz 	NSExponent,x
.1076	74 34		stz $34,x			stz 	NSStatus,x
.1078	80 af		bra $1029			bra 	NextCommand
.107a					PushWordCommand:
.107a	fa		plx				plx
.107b	e8		inx				inx
.107c	b1 28		lda ($28),y			lda 	(codePtr),y 				; word to stack
.107e	c8		iny				iny
.107f	95 40		sta $40,x			sta 	NSMantissa0,x
.1081	b1 28		lda ($28),y			lda 	(codePtr),y
.1083	c8		iny				iny
.1084	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1086	80 e8		bra $1070			bra 	ClearRestWord 				; handle everything else.
.1088					NXCommand:
.1088	c8		iny				iny 								; consume command.
.1089	10 03		bpl $108e			bpl 	_NXCommandNoFixUp
.108b	20 94 10	jsr $1094			jsr 	FixUpY
.108e					_NXCommandNoFixUp:
.108e	0a		asl a				asl 	a 							; shift left
.108f	da		phx				phx 								; save SP on stack
.1090	aa		tax				tax				 					; and jump indirect
.1091	7c 99 22	jmp ($2299,x)			jmp 	(VectorTable,x)
.1094					FixUpY:
.1094	48		pha				pha
.1095	98		tya				tya
.1096	18		clc				clc
.1097	65 28		adc $28				adc 	codePtr
.1099	85 28		sta $28				sta 	codePtr
.109b	90 02		bcc $109f			bcc 	_NoCPCarry
.109d	e6 29		inc $29				inc 	codePtr+1
.109f					_NoCPCarry:
.109f	a0 00		ldy #$00			ldy 	#0
.10a1	68		pla				pla
.10a2	60		rts				rts
.0404					runtimeHigh:
>0404							.fill 	1
.0405					storeStartHigh:
>0405							.fill 	1
.0406					storeEndHigh:
>0406							.fill 	1
.0407					variableStartPage:
>0407							.fill 	1
.10a3					AbsoluteTOS:
.10a3	fa		plx				plx
.10a4	74 34		stz $34,x			stz 	NSStatus,x 					; dereferenced so just clear the status byte.
.10a6	4c 29 10	jmp $1029			jmp 	NextCommand
.10a9					CommandVarSpace:
.10a9	fa		plx				plx
.10aa	b1 28		lda ($28),y			lda 	(codePtr),y					; 3 byte opcode, which is 'free' memory in variable area.
.10ac	85 26		sta $26				sta 	availableMemory
.10ae	c8		iny				iny
.10af	b1 28		lda ($28),y			lda 	(codePtr),y
.10b1	18		clc				clc
.10b2	6d 07 04	adc $0407			adc 	variableStartPage			; offset to actual address.
.10b5	85 27		sta $27				sta 	availableMemory+1
.10b7	c8		iny				iny
.10b8	4c 29 10	jmp $1029			jmp 	NextCommand
.0026					availableMemory:
>0026							.fill 	2
.10bb					BinaryAnd:
.10bb	fa		plx				plx
.10bc	38		sec				sec
.10bd	80 02		bra $10c1			bra 	AndOrCommon
.10bf					BinaryOr:
.10bf	fa		plx				plx
.10c0	18		clc				clc
.10c1					AndOrCommon:
.10c1	08		php				php 								; save AND/OR flag
.10c2	20 42 19	jsr $1942			jsr 	GetInteger16Bit
.10c5	ca		dex				dex
.10c6	20 42 19	jsr $1942			jsr 	GetInteger16Bit
.10c9	28		plp				plp
.10ca	90 0e		bcc $10da			bcc 	_AOCOrCode
.10cc	b5 40		lda $40,x			lda 	NSMantissa0,x 				; AND code
.10ce	35 41		and $41,x			and		NSMantissa0+1,x
.10d0	95 40		sta $40,x			sta 	NSMantissa0,x
.10d2	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.10d4	35 4d		and $4d,x			and		NSMantissa1+1,x
.10d6	95 4c		sta $4c,x			sta 	NSMantissa1,x
.10d8	80 0c		bra $10e6			bra 	_AOCComplete
.10da					_AOCOrCode:
.10da	b5 40		lda $40,x			lda 	NSMantissa0,x 				; OR code
.10dc	15 41		ora $41,x			ora		NSMantissa0+1,x
.10de	95 40		sta $40,x			sta 	NSMantissa0,x
.10e0	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.10e2	15 4d		ora $4d,x			ora		NSMantissa1+1,x
.10e4	95 4c		sta $4c,x			sta 	NSMantissa1,x
.10e6					_AOCComplete:
.10e6	74 34		stz $34,x			stz 	NSStatus,x 					; make integer ?
.10e8	34 4c		bit $4c,x			bit 	NSMantissa1,x 				; result is -ve
.10ea	10 07		bpl $10f3			bpl 	_AOCExit
.10ec	20 52 19	jsr $1952			jsr 	Negate16Bit 				; 2's complement
.10ef	a9 80		lda #$80			lda 	#$80 						; make it -ve
.10f1	95 34		sta $34,x			sta 	NSStatus,x
.10f3					_AOCExit:
.10f3	4c 29 10	jmp $1029			jmp 	NextCommand
.10f6					ArrayConvert:
.10f6	fa		plx				plx
.10f7	5a		phy				phy
.10f8	b5 40		lda $40,x			lda 	NSMantissa0,x
.10fa	85 30		sta $30				sta 	zTemp1
.10fc	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.10fe	18		clc				clc
.10ff	6d 07 04	adc $0407			adc 	variableStartPage
.1102	85 31		sta $31				sta 	zTemp1+1
.1104	ca		dex				dex 								; count of indices to follow -> zTemp2
.1105	20 3c 19	jsr $193c			jsr 	GetInteger8Bit
.1108	85 32		sta $32				sta 	zTemp2 						; subtract from stack.
.110a	8a		txa				txa
.110b	38		sec				sec
.110c	e5 32		sbc $32				sbc 	zTemp2
.110e	aa		tax				tax
.110f	da		phx				phx 								; stack points at the first index, which will be replaced.
.1110					_ACIndexLoop:
.1110	20 54 2a	jsr $2a54			jsr 	FloatIntegerPart 			; integer array index
.1113	20 42 19	jsr $1942			jsr 	GetInteger16Bit 			; get the index => zTemp0
.1116	a0 01		ldy #$01			ldy 	#1 							; compare against the index count.
.1118	a5 2e		lda $2e				lda 	zTemp0
.111a	d2 30		cmp ($30)			cmp 	(zTemp1)
.111c	a5 2f		lda $2f				lda 	zTemp0+1
.111e	f1 30		sbc ($30),y			sbc 	(zTemp1),y
.1120	b0 79		bcs $119b			bcs 	_ACBadIndex 				; index error.
.1122	c6 32		dec $32				dec 	zTemp2 						; decrement count, if zero, then innermost level
.1124	f0 29		beq $114f			beq 	_ACInnerLevel
.1126	a0 02		ldy #$02			ldy 	#2 							; check sub index.
.1128	b1 30		lda ($30),y			lda 	(zTemp1),y
.112a	10 6f		bpl $119b			bpl 	_ACBadIndex
.112c	06 2e		asl $2e				asl 	zTemp0 						; double the index and add it to the base address
.112e	26 2f		rol $2f				rol 	zTemp0+1
.1130	18		clc				clc
.1131	a5 2e		lda $2e				lda		zTemp0
.1133	65 30		adc $30				adc 	zTemp1
.1135	85 2e		sta $2e				sta 	zTemp0
.1137	a5 2f		lda $2f				lda		zTemp0+1
.1139	65 31		adc $31				adc 	zTemp1+1
.113b	85 2f		sta $2f				sta 	zTemp0+1
.113d	a0 03		ldy #$03			ldy 	#3 							; we offset by 3 because 3 at entry, now get the address
.113f	b1 2e		lda ($2e),y			lda 	(zTemp0),y 					; into zTemp1 as a real address, not offset
.1141	85 30		sta $30				sta 	zTemp1
.1143	c8		iny				iny
.1144	b1 2e		lda ($2e),y			lda 	(zTemp0),y
.1146	18		clc				clc
.1147	6d 07 04	adc $0407			adc 	variableStartPage
.114a	85 31		sta $31				sta 	zTemp1+1
.114c	e8		inx				inx 								; next index
.114d	80 c1		bra $1110			bra 	_ACIndexLoop
.114f					_ACInnerLevel:
.114f	a0 02		ldy #$02			ldy 	#2
.1151	b1 30		lda ($30),y			lda 	(zTemp1),y
.1153	30 46		bmi $119b			bmi 	_ACBadIndex 				; it has sub arrays, so bad index.
.1155	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16 		; check if it is an iFloat
.1157	c9 00		cmp #$00			cmp 	#NSSIFloat
.1159	d0 13		bne $116e			bne 	_ACNotFloat
.115b	a5 2f		lda $2f				lda 	zTemp0+1 					; double and add zTemp0 (x3)
.115d	48		pha				pha
.115e	a5 2e		lda $2e				lda 	zTemp0
.1160	06 2e		asl $2e				asl 	zTemp0 						; x 2
.1162	26 2f		rol $2f				rol 	zTemp0+1
.1164	18		clc				clc 								; add back x 3
.1165	65 2e		adc $2e				adc 	zTemp0
.1167	85 2e		sta $2e				sta 	zTemp0
.1169	68		pla				pla
.116a	65 2f		adc $2f				adc 	zTemp0+1
.116c	85 2f		sta $2f				sta 	zTemp0+1
.116e					_ACNotFloat:
.116e	06 2e		asl $2e				asl 	zTemp0 						; x 2 or x 6 depending.
.1170	26 2f		rol $2f				rol 	zTemp0+1
.1172	18		clc				clc
.1173	a5 2e		lda $2e				lda 	zTemp0
.1175	69 03		adc #$03			adc 	#3
.1177	85 2e		sta $2e				sta 	zTemp0
.1179	90 02		bcc $117d			bcc 	_ACNoCarry
.117b	e6 2f		inc $2f				inc 	zTemp0+1
.117d					_ACNoCarry:
.117d	fa		plx				plx 								; X points to first slot of array parameters
.117e	18		clc				clc
.117f	a5 2e		lda $2e				lda 	zTemp0
.1181	65 30		adc $30				adc 	zTemp1
.1183	95 40		sta $40,x			sta 	NSMantissa0,x
.1185	a5 2f		lda $2f				lda 	zTemp0+1
.1187	65 31		adc $31				adc 	zTemp1+1
.1189	38		sec				sec
.118a	ed 07 04	sbc $0407			sbc 	variableStartPage
.118d	95 4c		sta $4c,x			sta 	NSMantissa1,x
.118f	74 58		stz $58,x			stz 	NSMantissa2,x
.1191	74 64		stz $64,x			stz 	NSMantissa3,x
.1193	74 34		stz $34,x			stz 	NSStatus,x
.1195	74 70		stz $70,x			stz 	NSExponent,x
.1197	7a		ply				ply 	 							; restore code pointer
.1198	4c 29 10	jmp $1029			jmp 	NextCommand
.119b					_ACBadIndex:
.119b	4c 72 15	jmp $1572		jmp	ErrorV_index
.119e					UnaryAsc:
.119e	fa		plx				plx
.119f	5a		phy				phy
.11a0	b5 40		lda $40,x			lda 	NSMantissa0,x 				; string address.
.11a2	85 2e		sta $2e				sta 	zTemp0
.11a4	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.11a6	85 2f		sta $2f				sta 	zTemp0+1
.11a8	b2 2e		lda ($2e)			lda 	(zTemp0) 					; if empty string return zero
.11aa	f0 06		beq $11b2			beq 	_UAExit
.11ac	5a		phy				phy 								; otherwise first character
.11ad	a0 01		ldy #$01			ldy 	#1
.11af	b1 2e		lda ($2e),y			lda 	(zTemp0),y
.11b1	7a		ply				ply
.11b2					_UAExit:
.11b2	20 1b 2e	jsr $2e1b			jsr 	FloatSetByte
.11b5	7a		ply				ply
.11b6	4c 29 10	jmp $1029			jmp 	NextCommand
.11b9					CommandAssert:
.11b9	fa		plx				plx
.11ba	e0 00		cpx #$00			cpx 	#0 							; check only one element on stack
.11bc	d0 09		bne $11c7			bne 	_CAFail
.11be	20 3b 2e	jsr $2e3b			jsr 	FloatIsZero 				; is it zero ?
.11c1	f0 04		beq $11c7			beq 	_CAFail
.11c3	ca		dex				dex
.11c4	4c 29 10	jmp $1029			jmp 	NextCommand
.11c7					_CAFail:
.11c7	4c cb 14	jmp $14cb		jmp	ErrorV_assert
.11ca					X16_Audio_Parameters8_16:
.11ca	20 d0 11	jsr $11d0			jsr 	X16_Audio_Parameters8_8
.11cd	a4 4d		ldy $4d				ldy 	NSMantissa1+1
.11cf	60		rts				rts
.11d0					X16_Audio_Parameters8_8:
.11d0	a2 01		ldx #$01			ldx 	#1
.11d2	20 54 2a	jsr $2a54			jsr 	FloatIntegerPart
.11d5	ca		dex				dex
.11d6	20 54 2a	jsr $2a54			jsr 	FloatIntegerPart
.11d9	20 3c 19	jsr $193c			jsr 	GetInteger8Bit
.11dc	a6 41		ldx $41				ldx 	NSMantissa0+1
.11de	a0 00		ldy #$00			ldy 	#0
.11e0	60		rts				rts
.11e1					X16_Audio_Parameters8_String:
.11e1	20 ca 11	jsr $11ca			jsr 	X16_Audio_Parameters8_16 	; get as numbers.
.11e4	da		phx				phx 								; set the voice
.11e5	5a		phy				phy
.11e6	20 6e ff	jsr $ff6e			jsr 	X16_JSRFAR
.11e9	20 0c c0	jsr $c00c			jsr 	X16A_bas_playstringvoice
>11ec	0a						.byte 	X16_AudioCodeBank
.11ed	7a		ply				ply
.11ee	fa		plx				plx
.11ef	86 2e		stx $2e				stx 	zTemp0
.11f1	84 2f		sty $2f				sty 	zTemp0+1
.11f3	b2 2e		lda ($2e)			lda 	(zTemp0) 					; read length
.11f5	e8		inx				inx 								; point YX to first character.
.11f6	d0 01		bne $11f9			bne 	_X16APSSkip
.11f8	c8		iny				iny
.11f9					_X16APSSkip:
.11f9	60		rts				rts
.11fa					Unary16Bin:
.11fa	fa		plx				plx
.11fb	20 42 19	jsr $1942			jsr 	GetInteger16Bit				; 16 bit int
.11fe	a9 10		lda #$10			lda 	#16 						; allocate / set 16 bytes.
.1200	20 18 20	jsr $2018			jsr 	StringAllocTemp
.1203	a5 2f		lda $2f				lda 	zTemp0+1
.1205	f0 03		beq $120a			beq 	_UBNoHigh
.1207	20 12 12	jsr $1212			jsr 	_UBWriteBinary
.120a					_UBNoHigh:
.120a	a5 2e		lda $2e				lda 	zTemp0
.120c	20 12 12	jsr $1212			jsr 	_UBWriteBinary
.120f	4c 29 10	jmp $1029			jmp 	NextCommand
.1212					_UBWriteBinary:
.1212	5a		phy				phy
.1213	a0 08		ldy #$08			ldy 	#8
.1215					_UBWLoop:
.1215	0a		asl a				asl 	a
.1216	48		pha				pha
.1217	a9 00		lda #$00			lda  	#0
.1219	69 30		adc #$30			adc 	#48
.121b	20 41 20	jsr $2041			jsr 	StringWriteChar
.121e	68		pla				pla
.121f	88		dey				dey
.1220	d0 f3		bne $1215			bne 	_UBWLoop
.1222	7a		ply				ply
.1223	60		rts				rts
.1224					PrintCharacter:
.1224	fa		plx				plx
.1225	b5 40		lda $40,x			lda 	NSMantissa0,x
.1227	ca		dex				dex
.1228	20 75 1c	jsr $1c75			jsr 	VectorPrintCharacter
.122b	4c 29 10	jmp $1029			jmp 	NextCommand
.122e					UnaryChr:
.122e	fa		plx				plx
.122f	20 3c 19	jsr $193c			jsr 	GetInteger8Bit 				; get integer to convert.
.1232	48		pha				pha 								; save it and allocate for it
.1233	a9 01		lda #$01			lda 	#1 							; 1 character
.1235	20 18 20	jsr $2018			jsr 	StringAllocTemp
.1238	a9 01		lda #$01			lda 	#1 							; length 1.
.123a	92 22		sta ($22)			sta 	(zsTemp)
.123c	68		pla				pla 								; character code makes string.
.123d	5a		phy				phy
.123e	a0 01		ldy #$01			ldy 	#1
.1240	91 22		sta ($22),y			sta 	(zsTemp),y
.1242	7a		ply				ply
.1243	4c 29 10	jmp $1029			jmp 	NextCommand
.1246					CommandClr:
.1246	fa		plx				plx
.1247	20 4d 12	jsr $124d			jsr 	ClearMemory
.124a	4c 29 10	jmp $1029			jmp 	NextCommand
.124d					ClearMemory:
.124d	ad 05 04	lda $0405			lda 	storeStartHigh 							; erase the work area
.1250	85 2f		sta $2f				sta 	zTemp0+1
.1252	64 2e		stz $2e				stz 	zTemp0
.1254	5a		phy				phy
.1255	a0 00		ldy #$00			ldy 	#0
.1257					_ClearLoop1:
.1257	a9 00		lda #$00			lda 	#0
.1259	91 2e		sta ($2e),y			sta 	(zTemp0),y
.125b	c8		iny				iny
.125c	d0 f9		bne $1257			bne 	_ClearLoop1
.125e	e6 2f		inc $2f				inc 	zTemp0+1
.1260	a5 2f		lda $2f				lda 	zTemp0+1
.1262	cd 06 04	cmp $0406			cmp 	storeEndHigh
.1265	d0 f0		bne $1257			bne 	_ClearLoop1
.1267	38		sec				sec 											; stack space = number of pages in total / 4
.1268	ad 06 04	lda $0406			lda 	storeEndHigh
.126b	ed 05 04	sbc $0405			sbc		storeStartHigh
.126e	4a		lsr a				lsr 	a
.126f	4a		lsr a				lsr 	a
.1270	d0 02		bne $1274			bne 	_NotEmpty 								; at least 1 !
.1272	a9 01		lda #$01			lda 	#1
.1274					_NotEmpty:
.1274	38		sec				sec 											; subtract from high to give string high memory
.1275	49 ff		eor #$ff			eor 	#$FF
.1277	6d 06 04	adc $0406			adc 	storeEndHigh
.127a	8d 03 04	sta $0403			sta 	stringHighMemory+1
.127d	9c 02 04	stz $0402			stz 	stringHighMemory
.1280	9c 68 05	stz $0568			stz 	stringInitialised 						; string system not initialised
.1283	ad 05 04	lda $0405			lda 	storeStartHigh 							; stack at end of start memory.
.1286	3a		dec a				dec 	a
.1287	85 25		sta $25				sta 	runtimeStackPtr+1
.1289	a9 ff		lda #$ff			lda 	#$FF
.128b	85 24		sta $24				sta 	runtimeStackPtr
.128d	a9 ff		lda #$ff			lda 	#$FF 									; duff marker in case we try to remove it.
.128f	92 24		sta ($24)			sta 	(runtimeStackPtr)
.1291	7a		ply				ply
.1292	60		rts				rts
.1293					CompareStrings:
.1293	fa		plx				plx
.1294	ca		dex				dex
.1295	b5 40		lda $40,x			lda 	NSMantissa0,x 				; copy strings to zTemp0 and zTemp1
.1297	85 2e		sta $2e				sta 	zTemp0
.1299	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.129b	85 2f		sta $2f				sta 	zTemp0+1
.129d	b5 41		lda $41,x			lda 	NSMantissa0+1,x
.129f	85 30		sta $30				sta 	zTemp1
.12a1	b5 4d		lda $4d,x			lda 	NSMantissa1+1,x
.12a3	85 31		sta $31				sta 	zTemp1+1
.12a5	da		phx				phx
.12a6	5a		phy				phy
.12a7	b2 2e		lda ($2e)			lda 	(zTemp0)					; work out number to compare
.12a9	d2 30		cmp ($30)			cmp 	(zTemp1)
.12ab	90 02		bcc $12af			bcc 	_CSNIsSmallest 				; as min(len(s1),len(s2))
.12ad	b2 30		lda ($30)			lda 	(zTemp1)
.12af					_CSNIsSmallest:
.12af	aa		tax				tax 								; count in X
.12b0	f0 0c		beq $12be			beq 	_CSNMatches 				; if zero already matches as far as we can go.
.12b2	a0 00		ldy #$00			ldy 	#0 							; start from offset 1
.12b4					_CSNCompareString:
.12b4	c8		iny				iny 								; pre increment
.12b5	b1 2e		lda ($2e),y			lda 	(zTemp0),y
.12b7	d1 30		cmp ($30),y			cmp 	(zTemp1),y
.12b9	d0 0a		bne $12c5			bne 	_CSNDifferent 				; numbers are different.
.12bb	ca		dex				dex
.12bc	d0 f6		bne $12b4			bne 	_CSNCompareString 			; compare common characters in two strings.
.12be					_CSNMatches:
.12be	38		sec				sec
.12bf	b2 2e		lda ($2e)			lda 	(zTemp0)					; compare lengths
.12c1	f2 30		sbc ($30)			sbc 	(zTemp1)
.12c3	f0 06		beq $12cb			beq 	_CSNSExit 					; if zero, then strings match and exit.
.12c5					_CSNDifferent:
.12c5	a9 ff		lda #$ff			lda 	#$FF
.12c7	90 02		bcc $12cb			bcc 	_CSNSExit
.12c9	a9 01		lda #$01			lda 	#$01
.12cb					_CSNSExit:
.12cb	7a		ply				ply
.12cc	fa		plx				plx
.12cd	c9 00		cmp #$00			cmp 	#0 							; set the flags.
.12cf	20 1b 2e	jsr $2e1b			jsr 	FloatSetByte 				; output the byte
.12d2	4c 29 10	jmp $1029			jmp 	NextCommand
.12d5					StringConcrete:
.12d5	9c 68 05	stz $0568			stz 	stringInitialised	 		; initialise next usage
.12d8	84 33		sty $33				sty 	zTemp2+1 					; save pointer to new string
.12da	85 32		sta $32				sta 	zTemp2
.12dc	b2 32		lda ($32)			lda 	(zTemp2) 					; length required
.12de	4a		lsr a				lsr 	a 							; allow half as much for expansion.
.12df	18		clc				clc
.12e0	72 32		adc ($32)			adc 	(zTemp2)
.12e2	90 02		bcc $12e6			bcc 	_SCNoOverflow
.12e4	a9 ff		lda #$ff			lda 	#255
.12e6					_SCNoOverflow:
.12e6	c9 0a		cmp #$0a			cmp 	#10 						; and a minimum of 10
.12e8	b0 02		bcs $12ec			bcs 	_SCNoMinimum
.12ea	a9 0a		lda #$0a			lda 	#10
.12ec					_SCNoMinimum:
.12ec	85 30		sta $30				sta 	zTemp1 						; save max length.
.12ee	38		sec				sec
.12ef	ad 02 04	lda $0402			lda		stringHighMemory 			; subtract max length from high memory.
.12f2	e5 30		sbc $30				sbc 	zTemp1
.12f4	a8		tay				tay
.12f5	ad 03 04	lda $0403			lda 	stringHighMemory+1
.12f8	e9 00		sbc #$00			sbc 	#0
.12fa	48		pha				pha
.12fb	38		sec				sec 								; subtract 3 more
.12fc	98		tya				tya
.12fd	e9 03		sbc #$03			sbc 	#3
.12ff	8d 02 04	sta $0402			sta 	stringHighMemory 			; to string high memory/zsTemp
.1302	85 22		sta $22				sta 	zsTemp
.1304	68		pla				pla
.1305	e9 00		sbc #$00			sbc 	#0
.1307	8d 03 04	sta $0403			sta 	stringHighMemory+1
.130a	85 23		sta $23				sta 	zsTemp+1
.130c	a5 30		lda $30				lda 	zTemp1 						; set max length.
.130e	92 22		sta ($22)			sta 	(zsTemp)
.1310	a0 01		ldy #$01			ldy 	#1 							; clear control byte.
.1312	a9 00		lda #$00			lda 	#0
.1314	91 22		sta ($22),y			sta 	(zsTemp),y
.1316	a5 22		lda $22				lda 	zsTemp 						; new empty string in YA.
.1318	a4 23		ldy $23				ldy 	zsTemp+1
.131a	60		rts				rts
.131b					CommandData:
.131b	fa		plx				plx
.131c	98		tya				tya 								; data length +1 added to Y
.131d	38		sec				sec
.131e	71 28		adc ($28),y			adc 	(codePtr),y 				; next instruction
.1320	a8		tay				tay
.1321	4c 29 10	jmp $1029			jmp 	NextCommand
.1324					CommandDIM:
.1324	fa		plx				plx
.1325	5a		phy				phy
.1326	20 3c 19	jsr $193c			jsr 	GetInteger8Bit 				; get the type we are building for (bits 6 & 5)
.1329	8d 08 04	sta $0408			sta 	dimType
.132c	ca		dex				dex 								; this is the number of indices
.132d	20 3c 19	jsr $193c			jsr 	GetInteger8Bit
.1330	85 30		sta $30				sta 	zTemp1 						; subtract n from X so X points at the *first*
.1332	8a		txa				txa 								; dimension.
.1333	38		sec				sec
.1334	e5 30		sbc $30				sbc 	zTemp1
.1336	aa		tax				tax
.1337	a5 30		lda $30				lda 	zTemp1 						; number of indices.
.1339	20 4d 13	jsr $134d			jsr 	DIMCreateOneLevel 			; create one at this level
.133c	95 40		sta $40,x			sta 	NSMantissa0,x 				; set it as a return address as an integer
.133e	98		tya				tya
.133f	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1341	74 58		stz $58,x			stz 	NSMantissa2,x
.1343	74 64		stz $64,x			stz 	NSMantissa3,x
.1345	74 34		stz $34,x			stz 	NSStatus,x
.1347	74 70		stz $70,x			stz 	NSExponent,x
.1349	7a		ply				ply
.134a	4c 29 10	jmp $1029			jmp 	NextCommand
.134d					DIMCreateOneLevel:
.134d	a4 26		ldy $26				ldy 	availableMemory 			; push the start of this block on the stack.
.134f	5a		phy				phy
.1350	a4 27		ldy $27				ldy 	availableMemory+1
.1352	5a		phy				phy
.1353	a8		tay				tay 			 					; save current level into Y
.1354	20 42 19	jsr $1942			jsr		GetInteger16Bit 			; size of dimension to zTemp0
.1357	e6 2e		inc $2e				inc 	zTemp0 						; bump the size of the dimension as we need one more
.1359	d0 02		bne $135d			bne 	_DCOLNoCarry
.135b	e6 2f		inc $2f				inc 	zTemp0+1
.135d					_DCOLNoCarry:
.135d	a5 2e		lda $2e				lda 	zTemp0 						; write out the +1 size of the dimension
.135f	20 00 14	jsr $1400			jsr 	DIMWriteByte
.1362	a5 2f		lda $2f				lda 	zTemp0+1
.1364	20 00 14	jsr $1400			jsr 	DIMWriteByte
.1367	ad 08 04	lda $0408			lda 	dimType 					; get type information
.136a	29 7f		and #$7f			and 	#$7F
.136c	c0 01		cpy #$01			cpy 	#1
.136e	f0 02		beq $1372			beq 	_DCOLNoSubLevel
.1370	09 80		ora #$80			ora 	#$80 						; set sublevel bit if there is one.
.1372					_DCOLNoSubLevel:
.1372	20 00 14	jsr $1400			jsr 	DIMWriteByte
.1375	a5 26		lda $26				lda 	availableMemory
.1377	85 30		sta $30				sta 	zTemp1
.1379	a5 27		lda $27				lda 	availableMemory+1
.137b	85 31		sta $31				sta 	zTemp1+1
.137d	a5 2e		lda $2e				lda 	zTemp0
.137f	85 32		sta $32				sta 	zTemp2
.1381	a5 2f		lda $2f				lda 	zTemp0+1
.1383	85 33		sta $33				sta 	zTemp2+1
.1385					_DCOLFillArray:
.1385	20 e4 13	jsr $13e4			jsr 	DIMWriteElement 			; write out an element, could be a sub-level or individual data
.1388	a5 2e		lda $2e				lda 	zTemp0 						; decrement one from count.
.138a	d0 02		bne $138e			bne 	_DCOLNoBorrow
.138c	c6 2f		dec $2f				dec 	zTemp0+1
.138e					_DCOLNoBorrow:
.138e	c6 2e		dec $2e				dec 	zTemp0
.1390	a5 2e		lda $2e				lda 	zTemp0 						; until completed.
.1392	05 2f		ora $2f				ora 	zTemp0+1
.1394	d0 ef		bne $1385			bne 	_DCOLFillArray
.1396	c0 01		cpy #$01			cpy 	#1
.1398	f0 42		beq $13dc			beq 	_DCOLExit
.139a					_DCOLRecursionLoop:
.139a	da		phx				phx 								; save XY
.139b	5a		phy				phy
.139c	a5 30		lda $30				lda 	zTemp1 						; push zTemp1 (position) zTemp2 (count)
.139e	48		pha				pha
.139f	a5 31		lda $31				lda 	zTemp1+1
.13a1	48		pha				pha
.13a2	a5 32		lda $32				lda 	zTemp2
.13a4	48		pha				pha
.13a5	a5 33		lda $33				lda 	zTemp2+1
.13a7	48		pha				pha
.13a8	88		dey				dey  								; lower level -> A
.13a9	98		tya				tya
.13aa	e8		inx				inx 								; next index size
.13ab	20 4d 13	jsr $134d			jsr 	DIMCreateOneLevel 			; create a level, return in YA
.13ae	fa		plx				plx 								; restore zTemp2 (count) and zTemp1 (position)
.13af	86 33		stx $33				stx 	zTemp2+1
.13b1	fa		plx				plx
.13b2	86 32		stx $32				stx 	zTemp2
.13b4	fa		plx				plx
.13b5	86 31		stx $31				stx 	zTemp1+1
.13b7	fa		plx				plx
.13b8	86 30		stx $30				stx 	zTemp1
.13ba	92 30		sta ($30)			sta 	(zTemp1) 					; write out position
.13bc	98		tya				tya
.13bd	a0 01		ldy #$01			ldy 	#1
.13bf	91 30		sta ($30),y			sta 	(zTemp1),y
.13c1	7a		ply				ply 								; restore XY
.13c2	fa		plx				plx
.13c3	18		clc				clc
.13c4	a5 30		lda $30				lda 	zTemp1 						; add 2 to zTemp1
.13c6	69 02		adc #$02			adc 	#2
.13c8	85 30		sta $30				sta 	zTemp1
.13ca	90 02		bcc $13ce			bcc 	_DCOLRNoCarry
.13cc	e6 31		inc $31				inc 	zTemp1+1
.13ce					_DCOLRNoCarry:
.13ce	a5 32		lda $32				lda 	zTemp2 						; decrement one from count in zTemp2
.13d0	d0 02		bne $13d4			bne 	_DCOLRNoBorrow
.13d2	c6 33		dec $33				dec 	zTemp2+1
.13d4					_DCOLRNoBorrow:
.13d4	c6 32		dec $32				dec 	zTemp2
.13d6	a5 32		lda $32				lda 	zTemp2 						; until completed.
.13d8	05 33		ora $33				ora 	zTemp2+1
.13da	d0 be		bne $139a			bne 	_DCOLRecursionLoop
.13dc					_DCOLExit:
.13dc	68		pla				pla 								; get MSB, make offset again
.13dd	38		sec				sec
.13de	ed 07 04	sbc $0407			sbc 	variableStartPage
.13e1	a8		tay				tay
.13e2	68		pla				pla 								; YA now contains offset address.
.13e3	60		rts				rts
.13e4					DIMWriteElement:
.13e4	da		phx				phx
.13e5	a2 02		ldx #$02			ldx	 	#2 							; work out size is 2 or 6
.13e7	c0 01		cpy #$01			cpy 	#1 							; do we have a sub level, if so 2.
.13e9	d0 0b		bne $13f6			bne 	_DIMWENotFloat
.13eb	ad 08 04	lda $0408			lda 	dimType
.13ee	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16
.13f0	c9 00		cmp #$00			cmp 	#NSSIFloat
.13f2	d0 02		bne $13f6			bne 	_DIMWENotFloat
.13f4	a2 06		ldx #$06			ldx 	#6
.13f6					_DIMWENotFloat:
.13f6	a9 00		lda #$00			lda 	#0
.13f8	20 00 14	jsr $1400			jsr 	DIMWriteByte
.13fb	ca		dex				dex
.13fc	d0 f8		bne $13f6			bne 	_DIMWENotFloat
.13fe	fa		plx				plx
.13ff	60		rts				rts
.1400					DIMWriteByte:
.1400	92 26		sta ($26)			sta 	(availableMemory)
.1402	e6 26		inc $26				inc 	availableMemory
.1404	d0 0b		bne $1411			bne 	_DIMWBSkip
.1406	e6 27		inc $27				inc 	availableMemory+1
.1408	48		pha				pha
.1409	a5 27		lda $27				lda 	availableMemory+1 			; check out of memory
.140b	cd 03 04	cmp $0403			cmp 	stringHighMemory+1
.140e	b0 02		bcs $1412			bcs 	_DIMWBMemory
.1410	68		pla				pla
.1411					_DIMWBSkip:
.1411	60		rts				rts
.1412					_DIMWBMemory:
.1412	4c 85 15	jmp $1585		jmp	ErrorV_memory
.0408					dimType:
>0408							.fill 	1
.1415					CommandEnd:
.1415	fa		plx				plx
.1416	86 2e		stx $2e				stx 	zTemp0
.1418	4c ff ff	jmp $ffff			jmp 	$FFFF
.141b					Unimplemented:
.141b	4c b8 14	jmp $14b8			jmp 	ErrorV_unimplemented
.141e					ErrorHandler:
.141e	98		tya				tya
.141f	18		clc				clc
.1420	65 28		adc $28				adc 	codePtr
.1422	85 28		sta $28				sta 	codePtr
.1424	90 02		bcc $1428			bcc 	_EHNoCarry
.1426	e6 29		inc $29				inc 	codePtr+1
.1428					_EHNoCarry:
.1428	68		pla				pla
.1429	7a		ply				ply
.142a	85 2e		sta $2e				sta 	zTemp0
.142c	84 2f		sty $2f				sty 	zTemp0+1
.142e	a2 00		ldx #$00			ldx 	#0 							; output to channel #0
.1430	a0 01		ldy #$01			ldy 	#1
.1432					_EHDisplayMsg:
.1432	b1 2e		lda ($2e),y			lda 	(zTemp0),y
.1434	20 8d 25	jsr $258d			jsr 	XPrintCharacterToChannel
.1437	c8		iny				iny
.1438	b1 2e		lda ($2e),y			lda 	(zTemp0),y
.143a	d0 f6		bne $1432			bne 	_EHDisplayMsg
.143c	a9 20		lda #$20			lda 	#32
.143e	20 8d 25	jsr $258d			jsr 	XPrintCharacterToChannel
.1441	a9 40		lda #$40			lda 	#64
.1443	20 8d 25	jsr $258d			jsr 	XPrintCharacterToChannel
.1446	a9 20		lda #$20			lda 	#32
.1448	20 8d 25	jsr $258d			jsr 	XPrintCharacterToChannel
.144b	20 50 14	jsr $1450			jsr 	EHDisplayCodePtr
.144e	80 fe		bra $144e	_EHStop:bra 	_EHStop
.1450					EHDisplayCodePtr:
.1450	a9 20		lda #$20			lda 	#32
.1452	20 8d 25	jsr $258d			jsr 	XPrintCharacterToChannel
.1455	38		sec				sec
.1456	a5 29		lda $29				lda 	codePtr+1 					; display the p-code address of the error.
.1458	ed 04 04	sbc $0404			sbc 	runtimeHigh
.145b	20 64 14	jsr $1464			jsr 	_EHDisplayHex
.145e	a5 28		lda $28				lda 	codePtr
.1460	20 64 14	jsr $1464			jsr 	_EHDisplayHex
.1463	60		rts				rts
.1464					_EHDisplayHex:
.1464	48		pha				pha
.1465	4a		lsr a				lsr 	a
.1466	4a		lsr a				lsr 	a
.1467	4a		lsr a				lsr 	a
.1468	4a		lsr a				lsr 	a
.1469	20 6d 14	jsr $146d			jsr 	_EHDisplayNibble
.146c	68		pla				pla
.146d					_EHDisplayNibble:
.146d	29 0f		and #$0f			and 	#15
.146f	c9 0a		cmp #$0a			cmp 	#10
.1471	90 02		bcc $1475			bcc 	_EHNotHex
.1473	69 06		adc #$06			adc 	#6
.1475					_EHNotHex:
.1475	69 30		adc #$30			adc 	#48
.1477	4c 8d 25	jmp $258d			jmp 	XPrintCharacterToChannel
.147a					ErrorV_range:
.147a	20 1e 14	jsr $141e		jsr	ErrorHandler
>147d	4f 55 54 20 4f 46 20 52			.text	"OUT OF RANGE",0
>1485	41 4e 47 45 00
.148a					ErrorV_value:
.148a	20 1e 14	jsr $141e		jsr	ErrorHandler
>148d	42 41 44 20 56 41 4c 55			.text	"BAD VALUE",0
>1495	45 00
.1497					ErrorV_syntax:
.1497	20 1e 14	jsr $141e		jsr	ErrorHandler
>149a	53 59 4e 54 41 58 20 45			.text	"SYNTAX ERROR",0
>14a2	52 52 4f 52 00
.14a7					ErrorV_type:
.14a7	20 1e 14	jsr $141e		jsr	ErrorHandler
>14aa	54 59 50 45 20 4d 49 53			.text	"TYPE MISMATCH",0
>14b2	4d 41 54 43 48 00
.14b8					ErrorV_unimplemented:
.14b8	20 1e 14	jsr $141e		jsr	ErrorHandler
>14bb	4e 4f 54 20 49 4d 50 4c			.text	"NOT IMPLEMENTED",0
>14c3	45 4d 45 4e 54 45 44 00
.14cb					ErrorV_assert:
.14cb	20 1e 14	jsr $141e		jsr	ErrorHandler
>14ce	41 53 53 45 52 54 20 46			.text	"ASSERT FAIL",0
>14d6	41 49 4c 00
.14da					ErrorV_line:
.14da	20 1e 14	jsr $141e		jsr	ErrorHandler
>14dd	55 4e 4b 4e 4f 57 4e 20			.text	"UNKNOWN LINE NUMBER",0
>14e5	4c 49 4e 45 20 4e 55 4d 42 45 52 00
.14f1					ErrorV_internal:
.14f1	20 1e 14	jsr $141e		jsr	ErrorHandler
>14f4	49 4e 54 45 52 4e 41 4c			.text	"INTERNAL ERROR",0
>14fc	20 45 52 52 4f 52 00
.1503					ErrorV_divzero:
.1503	20 1e 14	jsr $141e		jsr	ErrorHandler
>1506	44 49 56 49 44 45 20 42			.text	"DIVIDE BY ZERO",0
>150e	59 20 5a 45 52 4f 00
.1515					ErrorV_structure:
.1515	20 1e 14	jsr $141e		jsr	ErrorHandler
>1518	53 54 52 55 43 54 55 52			.text	"STRUCTURE IMBALANCE",0
>1520	45 20 49 4d 42 41 4c 41 4e 43 45 00
.152c					ErrorV_stop:
.152c	20 1e 14	jsr $141e		jsr	ErrorHandler
>152f	50 52 4f 47 52 41 4d 20			.text	"PROGRAM STOPPED",0
>1537	53 54 4f 50 50 45 44 00
.153f					ErrorV_data:
.153f	20 1e 14	jsr $141e		jsr	ErrorHandler
>1542	4f 55 54 20 4f 46 20 44			.text	"OUT OF DATA",0
>154a	41 54 41 00
.154e					ErrorV_undeclared:
.154e	20 1e 14	jsr $141e		jsr	ErrorHandler
>1551	55 4e 4b 4e 4f 57 4e 20			.text	"UNKNOWN ARRAY",0
>1559	41 52 52 41 59 00
.155f					ErrorV_redefine:
.155f	20 1e 14	jsr $141e		jsr	ErrorHandler
>1562	41 52 52 41 59 20 52 45			.text	"ARRAY REDEFINED",0
>156a	44 45 46 49 4e 45 44 00
.1572					ErrorV_index:
.1572	20 1e 14	jsr $141e		jsr	ErrorHandler
>1575	42 41 44 20 41 52 52 41			.text	"BAD ARRAY INDEX",0
>157d	59 20 49 4e 44 45 58 00
.1585					ErrorV_memory:
.1585	20 1e 14	jsr $141e		jsr	ErrorHandler
>1588	4f 55 54 20 4f 46 20 4d			.text	"OUT OF MEMORY",0
>1590	45 4d 4f 52 59 00
.1596					ErrorV_channel:
.1596	20 1e 14	jsr $141e		jsr	ErrorHandler
>1599	49 4e 50 55 54 2f 4f 55			.text	"INPUT/OUTPUT ERROR",0
>15a1	54 50 55 54 20 45 52 52 4f 52 00
.15ac					CommandFor:
.15ac	fa		plx				plx
.15ad	a9 d3		lda #$d3			lda 	#FRAME_FOR 					; open frame
.15af	20 2f 16	jsr $162f			jsr 	StackOpenFrame
.15b2	20 73 1a	jsr $1a73			jsr 	StackSaveCurrentPosition 	; normalise to Y=0 and save position.
.15b5	a0 07		ldy #$07			ldy 	#7 							; copy step out
.15b7	20 11 16	jsr $1611			jsr 	CopyTOSToOffsetY
.15ba	ca		dex				dex
.15bb	a0 0d		ldy #$0d			ldy 	#13 						; copy terminal value.
.15bd	20 11 16	jsr $1611			jsr 	CopyTOSToOffsetY
.15c0	ca		dex				dex
.15c1	b5 4c		lda $4c,x			lda 	NSMantissa1,x 				; bit 15 of reference indicates type int16
.15c3	29 80		and #$80			and 	#$80
.15c5	a0 04		ldy #$04			ldy 	#4
.15c7	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.15c9	b5 40		lda $40,x			lda 	NSMantissa0,x 				; copy the reference address
.15cb	a0 05		ldy #$05			ldy 	#5 							; adjusted to be a real address
.15cd	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.15cf	85 2e		sta $2e				sta 	zTemp0 						; also to zTemp0
.15d1	c8		iny				iny
.15d2	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.15d4	18		clc				clc
.15d5	29 7f		and #$7f			and 	#$7F 						; throw the type bit.
.15d7	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.15d9	6d 07 04	adc $0407			adc 	variableStartPage 			; point to variable page.
.15dc	85 2f		sta $2f				sta 	zTemp0+1
.15de	ca		dex				dex 								; throw reference.
.15df	a0 05		ldy #$05			ldy 	#5 							; check the index, step and terminal values
.15e1	b1 2e		lda ($2e),y			lda 	(zTemp0),y 					; are all +ve integers, sign bits first.
.15e3	a0 0c		ldy #$0c			ldy 	#12
.15e5	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.15e7	a0 12		ldy #$12			ldy 	#18
.15e9	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.15eb	29 80		and #$80			and 	#$80 						; only interested in sign bit.
.15ed	88		dey				dey 								; now the exponents.
.15ee	11 2e		ora ($2e),y			ora 	(zTemp0),y
.15f0	a0 0b		ldy #$0b			ldy 	#11
.15f2	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.15f4	a0 11		ldy #$11			ldy 	#17
.15f6	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.15f8	a0 08		ldy #$08			ldy 	#8 							; step must be 1 byte.
.15fa	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.15fc	c8		iny				iny
.15fd	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.15ff	c8		iny				iny
.1600	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.1602	d0 08		bne $160c			bne 	_CFNoOptimise
.1604	a0 04		ldy #$04			ldy 	#4 							; set the runtime stack pointer optimisation flag.
.1606	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1608	09 40		ora #$40			ora 	#$40
.160a	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.160c					_CFNoOptimise:
.160c	a0 00		ldy #$00			ldy 	#0
.160e	4c 29 10	jmp $1029			jmp 	NextCommand
.1611					CopyTOSToOffsetY:
.1611	b5 40		lda $40,x			lda 	NSMantissa0,x
.1613	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.1615	c8		iny				iny
.1616	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.1618	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.161a	c8		iny				iny
.161b	b5 58		lda $58,x			lda 	NSMantissa2,x
.161d	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.161f	c8		iny				iny
.1620	b5 64		lda $64,x			lda 	NSMantissa3,x
.1622	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.1624	c8		iny				iny
.1625	b5 70		lda $70,x			lda 	NSExponent,x
.1627	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.1629	c8		iny				iny
.162a	b5 34		lda $34,x			lda 	NSStatus,x
.162c	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.162e	60		rts				rts
.162f					StackOpenFrame:
.162f	48		pha				pha 								; save frame marker
.1630	29 1f		and #$1f			and 	#$1F 						; bytes required.
.1632	85 2e		sta $2e				sta 	zTemp0
.1634	38		sec				sec 								; subtract from runtime stack pointer.
.1635	a5 24		lda $24				lda		runtimeStackPtr
.1637	e5 2e		sbc $2e				sbc 	zTemp0
.1639	85 24		sta $24				sta 	runtimeStackPtr
.163b	a5 25		lda $25				lda		runtimeStackPtr+1
.163d	e9 00		sbc #$00			sbc 	#0
.163f	85 25		sta $25				sta 	runtimeStackPtr+1
.1641	68		pla				pla 								; put frame marker at +0
.1642	92 24		sta ($24)			sta 	(runtimeStackPtr)
.1644	60		rts				rts
.1645					StackCloseFrame:
.1645	b2 24		lda ($24)			lda 	(runtimeStackPtr)			; get frame marker
.1647	29 1f		and #$1f			and 	#$1F 						; size
.1649	18		clc				clc
.164a	65 24		adc $24				adc 	runtimeStackPtr
.164c	85 24		sta $24				sta 	runtimeStackPtr
.164e	90 02		bcc $1652			bcc 	_SCFNoCarry
.1650	e6 25		inc $25				inc 	runtimeStackPtr+1
.1652					_SCFNoCarry:
.1652	60		rts				rts
.1653					StackFindFrame:
.1653	8d 09 04	sta $0409			sta 	requiredFrame
.1656					_SFFLoop:
.1656	b2 24		lda ($24)			lda 	(runtimeStackPtr) 			; get TOS
.1658	c9 ff		cmp #$ff			cmp 	#$FF 						; if found $FF then this is a fail.
.165a	f0 10		beq $166c			beq 	SCFFail
.165c	cd 09 04	cmp $0409			cmp 	requiredFrame 				; found this type ?
.165f	f0 05		beq $1666			beq 	_SFFFound
.1661	20 45 16	jsr $1645			jsr 	StackCloseFrame 			; close the top frame
.1664	80 f0		bra $1656			bra 	_SFFLoop 					; and try te next.
.1666					_SFFFound:
.1666	60		rts				rts
.1667					StackCheckFrame:
.1667	d2 24		cmp ($24)			cmp 	(runtimeStackPtr) 			; matches current frame
.1669	d0 01		bne $166c			bne 	SCFFail
.166b	60		rts				rts
.166c					SCFFail:
.166c	4c 15 15	jmp $1515		jmp	ErrorV_structure
.0409					requiredFrame:
>0409							.fill 	1
.166f					UnaryFre:
.166f	fa		plx				plx
.1670	20 19 2e	jsr $2e19			jsr 	FloatSetZero 				; zero the result (32 bit integer)
.1673	38		sec				sec
.1674	ad 02 04	lda $0402			lda 	stringHighMemory 			; calculate the free memory.
.1677	ed 00 04	sbc $0400			sbc 	stringLowMemory
.167a	95 40		sta $40,x			sta		NSMantissa0,x
.167c	ad 03 04	lda $0403			lda 	stringHighMemory+1
.167f	ed 01 04	sbc $0401			sbc 	stringLowMemory+1
.1682	95 4c		sta $4c,x			sta		NSMantissa1,x
.1684	4c 29 10	jmp $1029			jmp 	NextCommand
.1687					CommandGet:
.1687	fa		plx				plx
.1688	e8		inx				inx
.1689	a9 01		lda #$01			lda 	#1 							; 1 character space
.168b	20 18 20	jsr $2018			jsr 	StringAllocTemp
.168e	20 7e 1c	jsr $1c7e			jsr 	VectorGetCharacter 			; get a character
.1691	c9 00		cmp #$00			cmp 	#0
.1693	f0 09		beq $169e			beq 	_CGNone
.1695	5a		phy				phy
.1696	a0 01		ldy #$01			ldy 	#1 							; store char
.1698	91 22		sta ($22),y			sta 	(zsTemp),y
.169a	98		tya				tya 								; store length.
.169b	92 22		sta ($22)			sta 	(zsTemp)
.169d	7a		ply				ply
.169e					_CGNone:
.169e	4c 29 10	jmp $1029			jmp 	NextCommand
.16a1					CommandGosub:
.16a1	fa		plx				plx
.16a2	a9 e4		lda #$e4			lda 	#FRAME_GOSUB
.16a4	20 2f 16	jsr $162f			jsr 	StackOpenFrame
.16a7	20 73 1a	jsr $1a73			jsr 	StackSaveCurrentPosition
.16aa	4c c0 16	jmp $16c0			jmp 	PerformGOTO
.16ad					CommandReturn:
.16ad	fa		plx				plx
.16ae	a9 e4		lda #$e4			lda 	#FRAME_GOSUB
.16b0	20 53 16	jsr $1653			jsr 	StackFindFrame
.16b3	20 89 1a	jsr $1a89			jsr 	StackLoadCurrentPosition
.16b6	c8		iny				iny
.16b7	c8		iny				iny
.16b8	c8		iny				iny
.16b9	20 45 16	jsr $1645			jsr 	StackCloseFrame
.16bc	4c 29 10	jmp $1029			jmp 	NextCommand
.16bf					CommandGoto:
.16bf	fa		plx				plx
.16c0					PerformGOTO:
.16c0	c8		iny				iny
.16c1	c8		iny				iny 								; push MSB of offset on stack
.16c2	b1 28		lda ($28),y			lda 	(codePtr),y
.16c4	48		pha				pha
.16c5	88		dey				dey 								; point LSB of offset
.16c6	18		clc				clc 								; add LSB
.16c7	b1 28		lda ($28),y			lda 	(codePtr),y
.16c9	65 28		adc $28				adc 	codePtr
.16cb	85 28		sta $28				sta 	codePtr
.16cd	68		pla				pla 								; restore offset MSB and add
.16ce	65 29		adc $29				adc 	codePtr+1
.16d0	85 29		sta $29				sta 	codePtr+1
.16d2	88		dey				dey 								; fix up.
.16d3	4c 29 10	jmp $1029			jmp 	NextCommand
.16d6					CommandGotoZ:
.16d6	fa		plx				plx
.16d7	20 3b 2e	jsr $2e3b			jsr 	FloatIsZero
.16da	ca		dex				dex
.16db	c9 00		cmp #$00			cmp 	#0
.16dd	f0 e1		beq $16c0			beq 	PerformGOTO
.16df	c8		iny				iny
.16e0	c8		iny				iny
.16e1	c8		iny				iny
.16e2	4c 29 10	jmp $1029			jmp 	NextCommand
.16e5					CommandGotoNZ:
.16e5	fa		plx				plx
.16e6	20 3b 2e	jsr $2e3b			jsr 	FloatIsZero
.16e9	ca		dex				dex
.16ea	c9 00		cmp #$00			cmp 	#0
.16ec	d0 d2		bne $16c0			bne 	PerformGOTO
.16ee	c8		iny				iny
.16ef	c8		iny				iny
.16f0	c8		iny				iny
.16f1	4c 29 10	jmp $1029			jmp 	NextCommand
.16f4					Command_PSET:
.16f4	fa		plx				plx
.16f5	5a		phy				phy
.16f6	20 3c 19	jsr $193c			jsr 	GetInteger8Bit 				; get the colour
.16f9	48		pha				pha
.16fa	a2 00		ldx #$00			ldx 	#0 							; copy 0/1 to r0,r1
.16fc	a0 02		ldy #$02			ldy 	#X16_r0
.16fe	20 80 17	jsr $1780			jsr 	GraphicsCopy2
.1701	20 ff fe	jsr $feff			jsr 	X16_FB_cursor_position 		; set position.
.1704	68		pla				pla 								; set pixel.
.1705	20 0b ff	jsr $ff0b			jsr 	X16_FB_set_pixel
.1708	7a		ply				ply
.1709	a2 ff		ldx #$ff			ldx 	#$FF
.170b	4c 29 10	jmp $1029			jmp 	NextCommand
.170e					Command_LINE:
.170e	fa		plx				plx
.170f	5a		phy				phy
.1710	20 73 17	jsr $1773			jsr 	GraphicsColour
.1713	a2 00		ldx #$00			ldx 	#0 							; copy 0/1/2/3 to r0,1,2,3
.1715	a0 02		ldy #$02			ldy 	#X16_r0
.1717	20 7d 17	jsr $177d			jsr 	GraphicsCopy4
.171a	20 2c ff	jsr $ff2c			jsr 	X16_GRAPH_draw_line
.171d	7a		ply				ply
.171e	a2 ff		ldx #$ff			ldx 	#$FF
.1720	4c 29 10	jmp $1029			jmp 	NextCommand
.1723					Command_RECT:
.1723	fa		plx				plx
.1724	5a		phy				phy
.1725	20 94 17	jsr $1794			jsr 	GraphicsRectCoords
.1728	38		sec				sec
.1729	20 2f ff	jsr $ff2f			jsr 	X16_GRAPH_draw_rect
.172c	7a		ply				ply
.172d	a2 ff		ldx #$ff			ldx 	#$FF
.172f	4c 29 10	jmp $1029			jmp 	NextCommand
.1732					Command_FRAME:
.1732	fa		plx				plx
.1733	5a		phy				phy
.1734	20 94 17	jsr $1794			jsr 	GraphicsRectCoords
.1737	18		clc				clc
.1738	20 2f ff	jsr $ff2f			jsr 	X16_GRAPH_draw_rect
.173b	7a		ply				ply
.173c	a2 ff		ldx #$ff			ldx 	#$FF
.173e	4c 29 10	jmp $1029			jmp 	NextCommand
.1741					Command_CHAR:
.1741	fa		plx				plx
.1742	5a		phy				phy
.1743	ca		dex				dex  								; set the draw colour
.1744	20 73 17	jsr $1773			jsr 	GraphicsColour
.1747	a2 00		ldx #$00			ldx 	#0 							; copy 0/1 to r0,r1
.1749	a0 02		ldy #$02			ldy 	#X16_r0
.174b	20 80 17	jsr $1780			jsr 	GraphicsCopy2
.174e	a5 43		lda $43				lda 	NSMantissa0+3 				; copy string address to zTemp0
.1750	85 2e		sta $2e				sta 	zTemp0
.1752	a5 4f		lda $4f				lda 	NSMantissa1+3
.1754	85 2f		sta $2f				sta 	zTemp0+1
.1756	b2 2e		lda ($2e)			lda 	(zTemp0) 					; count of chars to zTemp1
.1758	85 30		sta $30				sta 	zTemp1
.175a					_CCLoop:
.175a	a5 30		lda $30				lda 	zTemp1 						; done all chars ?
.175c	f0 0f		beq $176d			beq 	_CCExit
.175e	c6 30		dec $30				dec 	zTemp1 						; dec counter
.1760	e6 2e		inc $2e				inc 	zTemp0 						; pre-bump pointer
.1762	d0 02		bne $1766			bne 	_CCNoCarry
.1764	e6 2f		inc $2f				inc 	zTemp0+1
.1766					_CCNoCarry:
.1766	b2 2e		lda ($2e)			lda 	(zTemp0) 					; get character
.1768	20 41 ff	jsr $ff41			jsr 	X16_GRAPH_put_char 			; write it
.176b	80 ed		bra $175a			bra 	_CCLoop						; go round.
.176d					_CCExit:
.176d	7a		ply				ply
.176e	a2 ff		ldx #$ff			ldx 	#$FF
.1770	4c 29 10	jmp $1029			jmp 	NextCommand
.1773					GraphicsColour:
.1773	20 3c 19	jsr $193c			jsr 	GetInteger8Bit
.1776	aa		tax				tax
.1777	a0 00		ldy #$00			ldy 	#0
.1779	20 29 ff	jsr $ff29			jsr 	X16_GRAPH_set_colors
.177c	60		rts				rts
.177d					GraphicsCopy4:
.177d	20 80 17	jsr $1780			jsr 	GraphicsCopy2
.1780					GraphicsCopy2:
.1780	20 83 17	jsr $1783			jsr 	GraphicsCopy1
.1783					GraphicsCopy1:
.1783	20 54 2a	jsr $2a54			jsr 	FloatIntegerPart
.1786	b5 40		lda $40,x			lda 	NSMantissa0,x
.1788	99 00 00	sta $0000,y			sta 	0,y
.178b	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.178d	99 01 00	sta $0001,y			sta 	1,y
.1790	e8		inx				inx
.1791	c8		iny				iny
.1792	c8		iny				iny
.1793	60		rts				rts
.1794					GraphicsRectCoords:
.1794	20 73 17	jsr $1773			jsr 	GraphicsColour 				; set colour
.1797	a2 00		ldx #$00			ldx 	#0 							; copy in order.
.1799	a0 02		ldy #$02			ldy 	#X16_r0
.179b	20 7d 17	jsr $177d			jsr 	GraphicsCopy4
.179e	a2 02		ldx #$02			ldx 	#X16_r0 					; sort r0/r2
.17a0	20 ad 17	jsr $17ad			jsr 	_GRCSortSubtract
.17a3	a2 04		ldx #$04			ldx 	#X16_r1 					; sort r1/r3
.17a5	20 ad 17	jsr $17ad			jsr 	_GRCSortSubtract
.17a8	74 08		stz $08,x			stz 	8,x 						; zero rounding
.17aa	74 09		stz $09,x			stz 	9,x
.17ac	60		rts				rts
.17ad					_GRCSortSubtract:
.17ad	b5 04		lda $04,x			lda 	4,x 						; calculate r2-r0
.17af	d5 00		cmp $00,x			cmp 	0,x
.17b1	b5 05		lda $05,x			lda 	5,x
.17b3	f5 01		sbc $01,x			sbc 	1,x
.17b5	b0 08		bcs $17bf			bcs 	_GRCNoSwap 					; >= swap.
.17b7	20 cd 17	jsr $17cd			jsr 	_GRCSwapByte 				; swap 0/2
.17ba	e8		inx				inx
.17bb	20 cd 17	jsr $17cd			jsr 	_GRCSwapByte 				; swap 1/3
.17be	ca		dex				dex
.17bf					_GRCNoSwap:
.17bf	38		sec				sec 								; calculate width/height into 4,5
.17c0	b5 04		lda $04,x			lda 	4,x
.17c2	f5 00		sbc $00,x			sbc 	0,x
.17c4	95 04		sta $04,x			sta 	4,x
.17c6	b5 05		lda $05,x			lda 	5,x
.17c8	f5 01		sbc $01,x			sbc 	1,x
.17ca	95 05		sta $05,x			sta 	5,x
.17cc	60		rts				rts
.17cd					_GRCSwapByte:
.17cd	b5 04		lda $04,x			lda 	4,x
.17cf	48		pha				pha
.17d0	b5 00		lda $00,x			lda 	0,x
.17d2	95 04		sta $04,x			sta 	4,x
.17d4	68		pla				pla
.17d5	95 00		sta $00,x			sta 	0,x
.17d7	60		rts				rts
.17d8					Unary16Hex:
.17d8	fa		plx				plx
.17d9	20 42 19	jsr $1942			jsr 	GetInteger16Bit
.17dc	a9 04		lda #$04			lda 	#4 							; allocate / set 4 bytes.
.17de	20 18 20	jsr $2018			jsr 	StringAllocTemp
.17e1	a5 2f		lda $2f				lda 	zTemp0+1
.17e3	f0 03		beq $17e8			beq 	_UHNoHigh
.17e5	20 f0 17	jsr $17f0			jsr 	_UHWriteHex
.17e8					_UHNoHigh:
.17e8	a5 2e		lda $2e				lda 	zTemp0
.17ea	20 f0 17	jsr $17f0			jsr 	_UHWriteHex
.17ed	4c 29 10	jmp $1029			jmp 	NextCommand
.17f0					_UHWriteHex:
.17f0	48		pha				pha
.17f1	4a		lsr a				lsr 	a
.17f2	4a		lsr a				lsr 	a
.17f3	4a		lsr a				lsr 	a
.17f4	4a		lsr a				lsr 	a
.17f5	20 f9 17	jsr $17f9			jsr 	_UHWriteNibl
.17f8	68		pla				pla
.17f9					_UHWriteNibl:
.17f9	29 0f		and #$0f			and 	#15
.17fb	c9 0a		cmp #$0a			cmp 	#10
.17fd	90 02		bcc $1801			bcc 	_UHDigit
.17ff	69 06		adc #$06			adc 	#6
.1801					_UHDigit:
.1801	69 30		adc #$30			adc 	#48
.1803	20 41 20	jsr $2041			jsr 	StringWriteChar
.1806	60		rts				rts
.1807					IndFloatRead:
.1807	fa		plx				plx
.1808	b5 40		lda $40,x			lda 	NSMantissa0,x 				; copy address
.180a	85 2e		sta $2e				sta 	zTemp0
.180c	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.180e	18		clc				clc
.180f	6d 07 04	adc $0407			adc 	variableStartPage
.1812	85 2f		sta $2f				sta 	zTemp0+1
.1814	ca		dex				dex 								; throw the address
.1815	20 f7 1d	jsr $1df7			jsr 	ReadFloatZTemp0Sub 							; call read routine
.1818	4c 29 10	jmp $1029			jmp 	NextCommand
.181b					IndInt16Read:
.181b	fa		plx				plx
.181c	b5 40		lda $40,x			lda 	NSMantissa0,x 				; copy address
.181e	85 2e		sta $2e				sta 	zTemp0
.1820	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.1822	18		clc				clc
.1823	6d 07 04	adc $0407			adc 	variableStartPage
.1826	85 2f		sta $2f				sta 	zTemp0+1
.1828	ca		dex				dex 								; throw the address
.1829	20 33 1e	jsr $1e33			jsr 	ReadIntegerZTemp0Sub 							; call read routine
.182c	4c 29 10	jmp $1029			jmp 	NextCommand
.182f					IndStringRead:
.182f	fa		plx				plx
.1830	b5 40		lda $40,x			lda 	NSMantissa0,x 				; copy address
.1832	85 2e		sta $2e				sta 	zTemp0
.1834	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.1836	18		clc				clc
.1837	6d 07 04	adc $0407			adc 	variableStartPage
.183a	85 2f		sta $2f				sta 	zTemp0+1
.183c	ca		dex				dex 								; throw the address
.183d	20 78 1e	jsr $1e78			jsr 	ReadStringZTemp0Sub 							; call read routine
.1840	4c 29 10	jmp $1029			jmp 	NextCommand
.1843					IndFloatWrite:
.1843	fa		plx				plx
.1844	b5 3f		lda $3f,x			lda 	NSMantissa0-1,x 			; copy address
.1846	85 2e		sta $2e				sta 	zTemp0
.1848	b5 4b		lda $4b,x			lda 	NSMantissa1-1,x
.184a	18		clc				clc
.184b	6d 07 04	adc $0407			adc 	variableStartPage
.184e	85 2f		sta $2f				sta 	zTemp0+1
.1850	20 d2 23	jsr $23d2			jsr 	WriteFloatZTemp0Sub 							; call write routine
.1853	ca		dex				dex 								; throw the address as well.
.1854	4c 29 10	jmp $1029			jmp 	NextCommand
.1857					IndInt16Write:
.1857	fa		plx				plx
.1858	b5 3f		lda $3f,x			lda 	NSMantissa0-1,x 			; copy address
.185a	85 2e		sta $2e				sta 	zTemp0
.185c	b5 4b		lda $4b,x			lda 	NSMantissa1-1,x
.185e	18		clc				clc
.185f	6d 07 04	adc $0407			adc 	variableStartPage
.1862	85 2f		sta $2f				sta 	zTemp0+1
.1864	20 0e 24	jsr $240e			jsr 	WriteIntegerZTemp0Sub 							; call write routine
.1867	ca		dex				dex 								; throw the address as well.
.1868	4c 29 10	jmp $1029			jmp 	NextCommand
.186b					IndStringWrite:
.186b	fa		plx				plx
.186c	b5 3f		lda $3f,x			lda 	NSMantissa0-1,x 			; copy address
.186e	85 2e		sta $2e				sta 	zTemp0
.1870	b5 4b		lda $4b,x			lda 	NSMantissa1-1,x
.1872	18		clc				clc
.1873	6d 07 04	adc $0407			adc 	variableStartPage
.1876	85 2f		sta $2f				sta 	zTemp0+1
.1878	20 4d 24	jsr $244d			jsr 	WriteStringZTemp0Sub 							; call write routine
.187b	ca		dex				dex 								; throw the address as well.
.187c	4c 29 10	jmp $1029			jmp 	NextCommand
.187f					CommandInput:
.187f	fa		plx				plx
.1880	5a		phy				phy 								; save Y
.1881	e8		inx				inx									; space on stack
.1882					_INError:
.1882	20 b6 18	jsr $18b6			jsr 	InputStringToBuffer 		; input from keyboard
.1885	a9 5f		lda #$5f			lda 	#((ReadBufferSize) & $FF)
.1887	85 2e		sta $2e				sta 	0+zTemp0
.1889	a9 04		lda #$04			lda 	#((ReadBufferSize) >> 8) & $FF
.188b	85 2f		sta $2f				sta 	1+zTemp0
.188d	20 5f 22	jsr $225f			jsr 	ValEvaluateZTemp0
.1890	b0 f0		bcs $1882			bcs 	_INError 					; failed, try again.
.1892	7a		ply				ply 								; restore Y
.1893	4c 29 10	jmp $1029			jmp 	NextCommand
.1896					CommandInputString:
.1896	fa		plx				plx
.1897	5a		phy				phy 								; save Y
.1898	20 b6 18	jsr $18b6			jsr 	InputStringToBuffer 		; input from keyboard
.189b	e8		inx				inx 								; make space on stack
.189c	20 19 2e	jsr $2e19			jsr 	FloatSetZero 				; store as string on stack
.189f	a9 5f		lda #$5f			lda 	#ReadBufferSize & $FF
.18a1	95 40		sta $40,x			sta 	NSMantissa0,x
.18a3	a9 04		lda #$04			lda 	#ReadBufferSize >> 8
.18a5	95 4c		sta $4c,x			sta 	NSMantissa1,x
.18a7	a9 40		lda #$40			lda 	#NSSString
.18a9	95 34		sta $34,x			sta 	NSStatus,x
.18ab	7a		ply				ply 								; restore Y
.18ac	4c 29 10	jmp $1029			jmp 	NextCommand
.18af					CommandInputReset:
.18af	fa		plx				plx
.18b0	9c 0a 04	stz $040a			stz 	InputBuffer
.18b3	4c 29 10	jmp $1029			jmp 	NextCommand
.18b6					InputStringToBuffer:
.18b6	a9 f0		lda #$f0			lda 	#((InputBumpNext) & $FF)
.18b8	8d 5f 05	sta $055f			sta 	0+ReadBumpNextVec
.18bb	a9 18		lda #$18			lda 	#((InputBumpNext) >> 8) & $FF
.18bd	8d 60 05	sta $0560			sta 	1+ReadBumpNextVec
.18c0	a9 cd		lda #$cd			lda 	#((InputLookNext) & $FF)
.18c2	8d 61 05	sta $0561			sta 	0+ReadLookNextVec
.18c5	a9 18		lda #$18			lda 	#((InputLookNext) >> 8) & $FF
.18c7	8d 62 05	sta $0562			sta 	1+ReadLookNextVec
.18ca	4c 54 1d	jmp $1d54			jmp 	GetStringToBuffer
.18cd					InputLookNext:
.18cd	da		phx				phx
.18ce					_ILNRetry:
.18ce	ad 0a 04	lda $040a			lda 	InputBuffer 				; do we need to read more (e.g. the buffer is empty)
.18d1	d0 08		bne $18db			bne 	_ILNNotEmpty
.18d3	20 f4 18	jsr $18f4			jsr 	InputGetNewLine 			; get a new line
.18d6	9c 5b 04	stz $045b			stz 	InputBufferPos 				; reset read position.
.18d9	80 f3		bra $18ce			bra 	_ILNRetry
.18db					_ILNNotEmpty:
.18db	ae 5b 04	ldx $045b			ldx 	InputBufferPos 				; get head available character
.18de	bd 0a 04	lda $040a,x			lda 	InputBuffer,x
.18e1	d0 08		bne $18eb			bne 	_ILNExit 					; if not EOS return it with CC.
.18e3					_ILNNextLine:
.18e3	9c 0a 04	stz $040a			stz 	InputBuffer 				; clear the buffer, indicating new line next time.
.18e6	38		sec				sec 								; return CS,Zero
.18e7	fa		plx				plx
.18e8	a9 0d		lda #$0d			lda 	#13
.18ea	60		rts				rts
.18eb					_ILNExit:
.18eb	fa		plx				plx
.18ec	c9 00		cmp #$00			cmp 	#0 							; return CC, Z Flag set.
.18ee	18		clc				clc
.18ef	60		rts				rts
.18f0					InputBumpNext:
.18f0	ee 5b 04	inc $045b			inc 	InputBufferPos
.18f3	60		rts				rts
.18f4					InputGetNewLine:
.18f4	48		pha				pha
.18f5	da		phx				phx
.18f6	5a		phy				phy
.18f7	a9 3f		lda #$3f			lda 	#"?"
.18f9	20 33 19	jsr $1933			jsr 	IGNLEchoIfScreen
.18fc	a0 00		ldy #$00			ldy 	#0 							; line position.
.18fe					_IGNLLoop:
.18fe	20 7e 1c	jsr $1c7e			jsr 	VectorGetCharacter 			; get a character
.1901	c9 00		cmp #$00			cmp 	#0
.1903	f0 f9		beq $18fe			beq 	_IGNLLoop
.1905	c9 14		cmp #$14			cmp 	#$14 						; Backspace ?
.1907	f0 11		beq $191a			beq 	_IGNBackspace
.1909	c9 0d		cmp #$0d			cmp 	#$0D 						; Return ?
.190b	f0 17		beq $1924			beq 	_IGNExit
.190d	c0 50		cpy #$50			cpy 	#80 						; buffer full ?
.190f	f0 ed		beq $18fe			beq 	_IGNLLoop
.1911	99 0a 04	sta $040a,y			sta 	InputBuffer,y
.1914	c8		iny				iny
.1915	20 33 19	jsr $1933			jsr 	IGNLEchoIfScreen
.1918	80 e4		bra $18fe			bra 	_IGNLLoop
.191a					_IGNBackspace:
.191a	c0 00		cpy #$00			cpy 	#0
.191c	f0 e0		beq $18fe			beq 	_IGNLLoop
.191e	20 33 19	jsr $1933			jsr 	IGNLEchoIfScreen
.1921	88		dey				dey
.1922	80 da		bra $18fe			bra 	_IGNLLoop
.1924					_IGNExit:
.1924	20 33 19	jsr $1933			jsr 	IGNLEchoIfScreen
.1927	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.1929	99 0a 04	sta $040a,y			sta 	InputBuffer,y
.192c	9c 5b 04	stz $045b			stz 	InputBufferPos 				; reset position to start of input buffer.
.192f	7a		ply				ply
.1930	fa		plx				plx
.1931	68		pla				pla
.1932	60		rts				rts
.1933					IGNLEchoIfScreen:
.1933	ae 5d 04	ldx $045d			ldx 	currentChannel
.1936	d0 03		bne $193b			bne 	_IGNLEExit
.1938	20 75 1c	jsr $1c75			jsr 	VectorPrintCharacter
.193b					_IGNLEExit:
.193b	60		rts				rts
.040a					InputBuffer:
>040a							.fill 	81
.045b					InputBufferPos:
>045b							.fill 	1
.193c					GetInteger8Bit:
.193c	20 54 2a	jsr $2a54			jsr 	FloatIntegerPart
.193f	b5 40		lda $40,x			lda 	NSMantissa0,x
.1941	60		rts				rts
.1942					GetInteger16Bit:
.1942	20 54 2a	jsr $2a54			jsr 	FloatIntegerPart
.1945	34 34		bit $34,x			bit 	NSStatus,x
.1947	30 09		bmi $1952			bmi 	Negate16Bit
.1949	b5 40		lda $40,x			lda 	NSMantissa0,x
.194b	85 2e		sta $2e				sta 	zTemp0
.194d	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.194f	85 2f		sta $2f				sta 	zTemp0+1
.1951	60		rts				rts
.1952					Negate16Bit:
.1952	38		sec				sec
.1953	a9 00		lda #$00			lda 	#0
.1955	f5 40		sbc $40,x			sbc 	NSMantissa0,x
.1957	95 40		sta $40,x			sta 	NSMantissa0,x
.1959	85 2e		sta $2e				sta 	zTemp0
.195b	a9 00		lda #$00			lda 	#0
.195d	f5 4c		sbc $4c,x			sbc 	NSMantissa1,x
.195f	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1961	85 2f		sta $2f				sta 	zTemp0+1
.1963	60		rts				rts
.1964					UnaryJoy:
.1964	fa		plx				plx
.1965	20 3c 19	jsr $193c			jsr 	GetInteger8Bit 				; port #
.1968	48		pha				pha 								; zero the result.
.1969	20 19 2e	jsr $2e19			jsr 	FloatSetZero
.196c	68		pla				pla
.196d	5a		phy				phy
.196e	da		phx				phx
.196f	20 56 ff	jsr $ff56			jsr 	X16_joystick_get 			; read joystick.
.1972	c0 00		cpy #$00			cpy 	#0 							; check no hardware
.1974	d0 10		bne $1986			bne 	_UJNoHardware
.1976	a8		tay				tay 								; move XA -> AY
.1977	8a		txa				txa
.1978	fa		plx				plx 								; we can update it now.
.1979	49 ff		eor #$ff			eor 	#$FF
.197b	95 4c		sta $4c,x			sta 	NSMantissa1,x
.197d	98		tya				tya
.197e	49 ff		eor #$ff			eor 	#$FF
.1980	95 40		sta $40,x			sta 	NSMantissa0,x
.1982	7a		ply				ply 								; restore Y
.1983	4c 29 10	jmp $1029			jmp 	NextCommand
.1986					_UJNoHardware:
.1986	fa		plx				plx
.1987	7a		ply				ply
.1988	a9 01		lda #$01			lda 	#1 							; set result to -1
.198a	20 1b 2e	jsr $2e1b			jsr 	FloatSetByte
.198d	20 db 2d	jsr $2ddb			jsr 	FloatNegate
.1990	4c 29 10	jmp $1029			jmp 	NextCommand
.1993					UnaryLen:
.1993	fa		plx				plx
.1994	b5 40		lda $40,x			lda 	NSMantissa0,x 				; string address.
.1996	85 2e		sta $2e				sta 	zTemp0
.1998	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.199a	85 2f		sta $2f				sta 	zTemp0+1
.199c	b2 2e		lda ($2e)			lda 	(zTemp0) 					; get length
.199e	20 1b 2e	jsr $2e1b			jsr 	FloatSetByte
.19a1	4c 29 10	jmp $1029			jmp 	NextCommand
.19a4					LinkFloatAdd:
.19a4	fa		plx				plx
.19a5	5a		phy			phy
.19a6	20 3d 28	jsr $283d		jsr	FloatAdd
.19a9	7a		ply			ply
.19aa	4c 29 10	jmp $1029			jmp 	NextCommand
.19ad					LinkFloatSubtract:
.19ad	fa		plx				plx
.19ae	5a		phy			phy
.19af	20 37 28	jsr $2837		jsr	FloatSubtract
.19b2	7a		ply			ply
.19b3	4c 29 10	jmp $1029			jmp 	NextCommand
.19b6					LinkFloatMultiply:
.19b6	fa		plx				plx
.19b7	5a		phy			phy
.19b8	20 d9 2a	jsr $2ad9		jsr	FloatMultiply
.19bb	7a		ply			ply
.19bc	4c 29 10	jmp $1029			jmp 	NextCommand
.19bf					LinkFloatDivide:
.19bf	fa		plx				plx
.19c0	5a		phy			phy
.19c1	20 62 29	jsr $2962		jsr	FloatDivide
.19c4	b0 5c		bcs $1a22		bcs	DivZeroError
.19c6	7a		ply			ply
.19c7	4c 29 10	jmp $1029			jmp 	NextCommand
.19ca					LinkFloatPower:
.19ca	fa		plx				plx
.19cb	5a		phy			phy
.19cc	20 e2 30	jsr $30e2		jsr	FloatPower
.19cf	b0 4e		bcs $1a1f		bcs	MapRangeError
.19d1	7a		ply			ply
.19d2	4c 29 10	jmp $1029			jmp 	NextCommand
.19d5					LinkCompareGreater:
.19d5	fa		plx				plx
.19d6	5a		phy			phy
.19d7	20 e6 28	jsr $28e6		jsr	CompareGreater
.19da	7a		ply			ply
.19db	4c 29 10	jmp $1029			jmp 	NextCommand
.19de					LinkCompareEqual:
.19de	fa		plx				plx
.19df	5a		phy			phy
.19e0	20 c8 28	jsr $28c8		jsr	CompareEqual
.19e3	7a		ply			ply
.19e4	4c 29 10	jmp $1029			jmp 	NextCommand
.19e7					LinkCompareLess:
.19e7	fa		plx				plx
.19e8	5a		phy			phy
.19e9	20 de 28	jsr $28de		jsr	CompareLess
.19ec	7a		ply			ply
.19ed	4c 29 10	jmp $1029			jmp 	NextCommand
.19f0					LinkCompareGreaterEqual:
.19f0	fa		plx				plx
.19f1	5a		phy			phy
.19f2	20 f6 28	jsr $28f6		jsr	CompareGreaterEqual
.19f5	7a		ply			ply
.19f6	4c 29 10	jmp $1029			jmp 	NextCommand
.19f9					LinkCompareNotEqual:
.19f9	fa		plx				plx
.19fa	5a		phy			phy
.19fb	20 d8 28	jsr $28d8		jsr	CompareNotEqual
.19fe	7a		ply			ply
.19ff	4c 29 10	jmp $1029			jmp 	NextCommand
.1a02					LinkCompareLessEqual:
.1a02	fa		plx				plx
.1a03	5a		phy			phy
.1a04	20 ee 28	jsr $28ee		jsr	CompareLessEqual
.1a07	7a		ply			ply
.1a08	4c 29 10	jmp $1029			jmp 	NextCommand
.1a0b					LinkFloatIntegerPartDown:
.1a0b	fa		plx				plx
.1a0c	5a		phy			phy
.1a0d	20 78 2a	jsr $2a78		jsr	FloatIntegerPartDown
.1a10	7a		ply			ply
.1a11	4c 29 10	jmp $1029			jmp 	NextCommand
.1a14					LinkFloatSquareRoot:
.1a14	fa		plx				plx
.1a15	5a		phy			phy
.1a16	20 64 31	jsr $3164		jsr	FloatSquareRoot
.1a19	b0 04		bcs $1a1f		bcs	MapRangeError
.1a1b	7a		ply			ply
.1a1c	4c 29 10	jmp $1029			jmp 	NextCommand
.1a1f					MapRangeError:
.1a1f	4c 7a 14	jmp $147a		jmp	ErrorV_range
.1a22					DivZeroError:
.1a22	4c 03 15	jmp $1503		jmp	ErrorV_divzero
.1a25					LinkFloatLogarithm:
.1a25	fa		plx				plx
.1a26	5a		phy			phy
.1a27	20 6e 30	jsr $306e		jsr	FloatLogarithm
.1a2a	b0 f3		bcs $1a1f		bcs	MapRangeError
.1a2c	7a		ply			ply
.1a2d	4c 29 10	jmp $1029			jmp 	NextCommand
.1a30					LinkFloatExponent:
.1a30	fa		plx				plx
.1a31	5a		phy			phy
.1a32	20 6b 2f	jsr $2f6b		jsr	FloatExponent
.1a35	7a		ply			ply
.1a36	4c 29 10	jmp $1029			jmp 	NextCommand
.1a39					LinkFloatCosine:
.1a39	fa		plx				plx
.1a3a	5a		phy			phy
.1a3b	20 5f 2f	jsr $2f5f		jsr	FloatCosine
.1a3e	7a		ply			ply
.1a3f	4c 29 10	jmp $1029			jmp 	NextCommand
.1a42					LinkFloatSine:
.1a42	fa		plx				plx
.1a43	5a		phy			phy
.1a44	20 ff 30	jsr $30ff		jsr	FloatSine
.1a47	7a		ply			ply
.1a48	4c 29 10	jmp $1029			jmp 	NextCommand
.1a4b					LinkFloatTangent:
.1a4b	fa		plx				plx
.1a4c	5a		phy			phy
.1a4d	20 70 31	jsr $3170		jsr	FloatTangent
.1a50	7a		ply			ply
.1a51	4c 29 10	jmp $1029			jmp 	NextCommand
.1a54					LinkFloatArcTan:
.1a54	fa		plx				plx
.1a55	5a		phy			phy
.1a56	20 44 2e	jsr $2e44		jsr	FloatArcTan
.1a59	b0 c4		bcs $1a1f		bcs	MapRangeError
.1a5b	7a		ply			ply
.1a5c	4c 29 10	jmp $1029			jmp 	NextCommand
.1a5f					LinkFloatCompare:
.1a5f	fa		plx				plx
.1a60	5a		phy			phy
.1a61	20 fe 28	jsr $28fe		jsr	FloatCompare
.1a64	7a		ply			ply
.1a65	4c 29 10	jmp $1029			jmp 	NextCommand
.1a68					LinkDivideInt32:
.1a68	fa		plx				plx
.1a69	5a		phy			phy
.1a6a	20 8c 29	jsr $298c		jsr	DivideInt32
.1a6d	b0 b0		bcs $1a1f		bcs	MapRangeError
.1a6f	7a		ply			ply
.1a70	4c 29 10	jmp $1029			jmp 	NextCommand
.1a73					StackSaveCurrentPosition:
.1a73	20 94 10	jsr $1094			jsr 	FixUpY 						; codePtr,Y is corrected so Y = 0
.1a76	5a		phy				phy
.1a77	a0 01		ldy #$01			ldy 	#1
.1a79	a5 2a		lda $2a				lda 	codePage
.1a7b	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.1a7d	c8		iny				iny
.1a7e	a5 28		lda $28				lda 	codePtr
.1a80	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.1a82	c8		iny				iny
.1a83	a5 29		lda $29				lda 	codePtr+1
.1a85	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.1a87	7a		ply				ply
.1a88	60		rts				rts
.1a89					StackLoadCurrentPosition:
.1a89	a0 01		ldy #$01			ldy 	#1
.1a8b	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1a8d	85 2a		sta $2a				sta 	codePage
.1a8f	c8		iny				iny
.1a90	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1a92	85 28		sta $28				sta 	codePtr
.1a94	c8		iny				iny
.1a95	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1a97	85 29		sta $29				sta 	codePtr+1
.1a99	a0 00		ldy #$00			ldy 	#0
.1a9b	60		rts				rts
.1a9c					XCommandMouse:
.1a9c	fa		plx				plx
.1a9d	20 3c 19	jsr $193c			jsr 	GetInteger8Bit 				; mouse control.
.1aa0	ca		dex				dex
.1aa1	da		phx				phx
.1aa2	5a		phy				phy
.1aa3	48		pha				pha
.1aa4	38		sec				sec 								; get screen resolution
.1aa5	20 5f ff	jsr $ff5f			jsr 	X16_screen_mode
.1aa8	68		pla				pla
.1aa9	20 68 ff	jsr $ff68			jsr 	X16_mouse_config 			; config the mouse
.1aac	7a		ply				ply
.1aad	fa		plx				plx
.1aae	4c 29 10	jmp $1029			jmp 	NextCommand
.1ab1					XUnaryMB:
.1ab1	fa		plx				plx
.1ab2	20 e0 1a	jsr $1ae0			jsr 	XUnaryMouseCommon
.1ab5	a5 32		lda $32				lda 	zTemp2
.1ab7	e8		inx				inx
.1ab8	20 1b 2e	jsr $2e1b			jsr 	FloatSetByte
.1abb	4c 29 10	jmp $1029			jmp 	NextCommand
.1abe					XUnaryMX:
.1abe	fa		plx				plx
.1abf	20 e0 1a	jsr $1ae0			jsr 	XUnaryMouseCommon
.1ac2	a5 2e		lda $2e				lda 	zTemp0
.1ac4	e8		inx				inx
.1ac5	20 1b 2e	jsr $2e1b			jsr 	FloatSetByte
.1ac8	a5 2f		lda $2f				lda 	zTemp0+1
.1aca	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1acc	4c 29 10	jmp $1029			jmp 	NextCommand
.1acf					XUnaryMY:
.1acf	fa		plx				plx
.1ad0	20 e0 1a	jsr $1ae0			jsr 	XUnaryMouseCommon
.1ad3	a5 30		lda $30				lda 	zTemp1
.1ad5	e8		inx				inx
.1ad6	20 1b 2e	jsr $2e1b			jsr 	FloatSetByte
.1ad9	a5 31		lda $31				lda 	zTemp1+1
.1adb	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1add	4c 29 10	jmp $1029			jmp 	NextCommand
.1ae0					XUnaryMouseCommon:
.1ae0	da		phx				phx
.1ae1	5a		phy				phy
.1ae2	a2 2e		ldx #$2e			ldx 	#zTemp0
.1ae4	20 6b ff	jsr $ff6b			jsr 	X16_mouse_get
.1ae7	85 32		sta $32				sta 	zTemp2
.1ae9	7a		ply				ply
.1aea	fa		plx				plx
.1aeb	60		rts				rts
.1aec					NegateTOS:
.1aec	fa		plx				plx
.1aed	20 db 2d	jsr $2ddb			jsr 	FloatNegate
.1af0	4c 29 10	jmp $1029			jmp 	NextCommand
.1af3					CommandNewLine:
.1af3	fa		plx				plx
.1af4	9c 68 05	stz $0568			stz 	stringInitialised
.1af7	a2 ff		ldx #$ff			ldx 	#$FF
.1af9	4c 29 10	jmp $1029			jmp 	NextCommand
.1afc					CommandNext:
.1afc	fa		plx				plx
.1afd					_CNRetry:
.1afd	a9 d3		lda #$d3			lda 	#FRAME_FOR 					; find the FOR
.1aff	20 53 16	jsr $1653			jsr 	StackFindFrame
.1b02	20 94 10	jsr $1094			jsr 	FixUpY 						; so we can use Y
.1b05	b5 40		lda $40,x			lda 	NSMantissa0,x 				; check no index variable, both are $FF
.1b07	35 4c		and $4c,x			and 	NSMantissa1,x
.1b09	c9 ff		cmp #$ff			cmp 	#$FF
.1b0b	f0 16		beq $1b23			beq 	_CNNoIndexVariable
.1b0d	b5 40		lda $40,x			lda 	NSMantissa0,x
.1b0f	a0 05		ldy #$05			ldy 	#5
.1b11	d1 24		cmp ($24),y			cmp 	(runtimeStackPtr),y
.1b13	d0 07		bne $1b1c			bne 	_CNNIndexFail
.1b15	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.1b17	c8		iny				iny
.1b18	d1 24		cmp ($24),y			cmp 	(runtimeStackPtr),y
.1b1a	f0 07		beq $1b23			beq 	_CNNoIndexVariable
.1b1c					_CNNIndexFail:
.1b1c	a0 00		ldy #$00			ldy 	#0 							; so we don't fix up Y again !
.1b1e	20 45 16	jsr $1645			jsr 	StackCloseFrame 			; close this frame
.1b21	80 da		bra $1afd			bra 	_CNRetry
.1b23					_CNNoIndexVariable:
.1b23	ca		dex				dex
.1b24	a0 04		ldy #$04			ldy 	#4 							; check for optimised NEXT
.1b26	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1b28	29 40		and #$40			and 	#$40	 					; bit 6
.1b2a	d0 55		bne $1b81			bne 	_CNOptimisedNext
.1b2c	a0 05		ldy #$05			ldy 	#5 							; copy address to zTemp0, save for write back
.1b2e	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1b30	48		pha				pha
.1b31	85 2e		sta $2e				sta 	zTemp0
.1b33	c8		iny				iny
.1b34	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1b36	18		clc				clc
.1b37	6d 07 04	adc $0407			adc 	variableStartPage 			; point to variable page.
.1b3a	48		pha				pha
.1b3b	85 2f		sta $2f				sta 	zTemp0+1
.1b3d	20 f7 1d	jsr $1df7			jsr 	ReadFloatZTemp0Sub 			; read current index onto stack.
.1b40	a0 07		ldy #$07			ldy 	#7  						; read step onto stack +1
.1b42	e8		inx				inx
.1b43	20 c4 1b	jsr $1bc4			jsr 	CopyOffsetYToTOS
.1b46	20 3d 28	jsr $283d			jsr 	FloatAdd
.1b49	68		pla				pla 								; restore address
.1b4a	85 2f		sta $2f				sta 	zTemp0+1
.1b4c	68		pla				pla
.1b4d	85 2e		sta $2e				sta 	zTemp0
.1b4f	20 d2 23	jsr $23d2			jsr 	WriteFloatZTemp0Sub			; write float.
.1b52	e8		inx				inx  								; recover written
.1b53	e8		inx				inx 								; load offset
.1b54	a0 0d		ldy #$0d			ldy 	#13
.1b56	20 c4 1b	jsr $1bc4			jsr 	CopyOffsetYToTOS
.1b59	20 fe 28	jsr $28fe			jsr 	FloatCompare 				; and compare the floats.
.1b5c	ca		dex				dex 								; throw result (in NSMantissa0+1)
.1b5d	a0 0c		ldy #$0c			ldy 	#12 						; get the sign of the step.
.1b5f	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1b61	30 08		bmi $1b6b			bmi 	_CNDownStep
.1b63	b5 41		lda $41,x			lda 	NSMantissa0+1,x 			; get comparator
.1b65	c9 01		cmp #$01			cmp 	#1 							; gone higher
.1b67	f0 10		beq $1b79			beq 	_CNExitFor 					; if so exit the loop
.1b69	80 06		bra $1b71			bra 	_CNLoopBack
.1b6b					_CNDownStep:
.1b6b	b5 41		lda $41,x			lda 	NSMantissa0+1,x 			; get comparator
.1b6d	c9 ff		cmp #$ff			cmp 	#255 						; gone lower
.1b6f	f0 08		beq $1b79			beq 	_CNExitFor
.1b71					_CNLoopBack:
.1b71	20 89 1a	jsr $1a89			jsr 	StackLoadCurrentPosition 	; loop back
.1b74	a0 00		ldy #$00			ldy 	#0
.1b76	4c 29 10	jmp $1029			jmp 	NextCommand
.1b79					_CNExitFor:
.1b79	20 45 16	jsr $1645			jsr 	StackCloseFrame 			; remove the frame and exit
.1b7c	a0 00		ldy #$00			ldy 	#0
.1b7e	4c 29 10	jmp $1029			jmp 	NextCommand
.1b81					_CNOptimisedNext:
.1b81	a0 05		ldy #$05			ldy 	#5 							; copy address to zTemp0, save for write back
.1b83	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1b85	85 2e		sta $2e				sta 	zTemp0
.1b87	c8		iny				iny
.1b88	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1b8a	18		clc				clc
.1b8b	6d 07 04	adc $0407			adc 	variableStartPage 			; point to variable page.
.1b8e	85 2f		sta $2f				sta 	zTemp0+1
.1b90	a0 07		ldy #$07			ldy 	#7 							; STEP value
.1b92	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1b94	a0 ff		ldy #$ff			ldy 	#$FF
.1b96	18		clc				clc
.1b97					_CNOIncrement:
.1b97	c8		iny				iny
.1b98	71 2e		adc ($2e),y			adc 	(zTemp0),y
.1b9a	91 2e		sta ($2e),y			sta 	(zTemp0),y
.1b9c	f0 f9		beq $1b97			beq 	_CNOIncrement
.1b9e	18		clc				clc
.1b9f	a5 24		lda $24				lda 	runtimeStackPtr
.1ba1	69 0d		adc #$0d			adc 	#13
.1ba3	85 30		sta $30				sta 	zTemp1
.1ba5	a5 25		lda $25				lda 	runtimeStackPtr+1
.1ba7	69 00		adc #$00			adc 	#0
.1ba9	85 31		sta $31				sta 	zTemp1+1
.1bab	a0 00		ldy #$00			ldy 	#0
.1bad	b1 30		lda ($30),y			lda 	(zTemp1),y 					; byte 0
.1baf	d1 2e		cmp ($2e),y			cmp 	(zTemp0),y
.1bb1	c8		iny				iny
.1bb2	b1 30		lda ($30),y			lda 	(zTemp1),y 					; byte 1
.1bb4	f1 2e		sbc ($2e),y			sbc 	(zTemp0),y
.1bb6	c8		iny				iny
.1bb7	b1 30		lda ($30),y			lda 	(zTemp1),y 					; byte 2
.1bb9	f1 2e		sbc ($2e),y			sbc 	(zTemp0),y
.1bbb	c8		iny				iny
.1bbc	b1 30		lda ($30),y			lda 	(zTemp1),y 					; byte 3
.1bbe	f1 2e		sbc ($2e),y			sbc 	(zTemp0),y
.1bc0	90 b7		bcc $1b79			bcc	 	_CNExitFor
.1bc2	80 ad		bra $1b71			bra 	_CNLoopBack
.1bc4					CopyOffsetYToTOS:
.1bc4	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1bc6	95 40		sta $40,x			sta 	NSMantissa0,x
.1bc8	c8		iny				iny
.1bc9	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1bcb	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1bcd	c8		iny				iny
.1bce	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1bd0	95 58		sta $58,x			sta 	NSMantissa2,x
.1bd2	c8		iny				iny
.1bd3	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1bd5	95 64		sta $64,x			sta 	NSMantissa3,x
.1bd7	c8		iny				iny
.1bd8	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1bda	95 70		sta $70,x			sta 	NSExponent,x
.1bdc	c8		iny				iny
.1bdd	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1bdf	95 34		sta $34,x			sta 	NSStatus,x
.1be1	60		rts				rts
.1be2	4c 29 10	jmp $1029			jmp 	NextCommand
.1be5					NotTOS:
.1be5	fa		plx				plx
.1be6	20 54 2a	jsr $2a54			jsr 	FloatIntegerPart
.1be9	74 58		stz $58,x			stz 	NSMantissa2,x 				; chop down to 16 bit.
.1beb	74 64		stz $64,x			stz 	NSMantissa3,x
.1bed	20 db 2d	jsr $2ddb			jsr 	FloatNegate		 			; negate
.1bf0	e8		inx				inx 								; and subtract 1.
.1bf1	a9 01		lda #$01			lda 	#1
.1bf3	20 1b 2e	jsr $2e1b			jsr 	FloatSetByte
.1bf6	20 37 28	jsr $2837			jsr 	FloatSubtract
.1bf9					_NotTOSSkip:
.1bf9	4c 29 10	jmp $1029			jmp 	NextCommand
.1bfc					CommandOn:
.1bfc	fa		plx				plx
.1bfd	20 3c 19	jsr $193c			jsr 	GetInteger8Bit 				; get the integer part, the ON x GOTO bit
.1c00	8d 5c 04	sta $045c			sta 	onCount 					; save it.
.1c03	20 94 10	jsr $1094			jsr 	FixUpY 						; Y = 0
.1c06					_CONFind:
.1c06	ce 5c 04	dec $045c			dec 	onCount 					; reached zero, do this one
.1c09	f0 0c		beq $1c17			beq 	_CONFound
.1c0b	c8		iny				iny 								; skip over the token (GOTO or GOSUB page, and line #)
.1c0c	c8		iny				iny
.1c0d	c8		iny				iny
.1c0e	c8		iny				iny
.1c0f	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a moreon after it, if so we can keep going.
.1c11	c8		iny				iny
.1c12	c9 aa		cmp #$aa			cmp 	#PCD_MOREON
.1c14	f0 f0		beq $1c06			beq 	_CONFind
.1c16	88		dey				dey 								; point to character after last GOTO/GOSUB
.1c17					_CONFound:
.1c17	4c 29 10	jmp $1029			jmp 	NextCommand
.1c1a					CommandMoreOn:
.1c1a	fa		plx				plx
.1c1b	c8		iny				iny 								; so it goes to the first non-goto/gosub
.1c1c	c8		iny				iny
.1c1d	c8		iny				iny
.1c1e	c8		iny				iny
.1c1f	4c 29 10	jmp $1029			jmp 	NextCommand
.045c					onCount:
>045c							.fill 	1
.1c22					UnaryPeek:
.1c22	fa		plx				plx
.1c23	20 42 19	jsr $1942			jsr 	GetInteger16Bit
.1c26	da		phx				phx
.1c27	5a		phy				phy
.1c28	a6 2e		ldx $2e				ldx 	zTemp0
.1c2a	a4 2f		ldy $2f				ldy 	zTemp0+1
.1c2c	20 63 25	jsr $2563			jsr 	XPeekMemory
.1c2f	7a		ply				ply
.1c30	fa		plx				plx
.1c31	20 1b 2e	jsr $2e1b			jsr 	FloatSetByte
.1c34	4c 29 10	jmp $1029			jmp 	NextCommand
.1c37					CommandPOKE:
.1c37	fa		plx				plx
.1c38	da		phx				phx 								; save XY
.1c39	5a		phy				phy
.1c3a	20 3c 19	jsr $193c			jsr 	GetInteger8Bit 				; get byte to POKE and save it
.1c3d	48		pha				pha
.1c3e	b5 4b		lda $4b,x			lda 	NSMantissa1-1,x 			; YX = address from Mantissa next up
.1c40	a8		tay				tay
.1c41	b5 3f		lda $3f,x			lda 	NSMantissa0-1,x
.1c43	aa		tax				tax
.1c44	68		pla				pla
.1c45	20 4f 25	jsr $254f			jsr 	XPokeMemory
.1c48	7a		ply				ply 								; restore YX and drop 2
.1c49	fa		plx				plx
.1c4a	ca		dex				dex
.1c4b	ca		dex				dex
.1c4c	4c 29 10	jmp $1029			jmp 	NextCommand
.1c4f					UnaryPos:
.1c4f	fa		plx				plx
.1c50	20 e2 24	jsr $24e2			jsr 	XGetHPos
.1c53	20 1b 2e	jsr $2e1b			jsr 	FloatSetByte
.1c56	4c 29 10	jmp $1029			jmp 	NextCommand
.1c59					GetChannel:
.1c59	fa		plx				plx
.1c5a	ad 5d 04	lda $045d			lda 	currentChannel
.1c5d	e8		inx				inx
.1c5e	20 1b 2e	jsr $2e1b			jsr 	FloatSetByte
.1c61	4c 29 10	jmp $1029			jmp 	NextCommand
.1c64					SetChannel:
.1c64	fa		plx				plx
.1c65	20 54 2a	jsr $2a54			jsr 	FloatIntegerPart
.1c68	b5 40		lda $40,x			lda 	NSMantissa0,x
.1c6a	8d 5d 04	sta $045d			sta 	currentChannel
.1c6d	ca		dex				dex
.1c6e	4c 29 10	jmp $1029			jmp 	NextCommand
.1c71					SetDefaultChannel:
.1c71	9c 5d 04	stz $045d			stz 	currentChannel
.1c74	60		rts				rts
.1c75					VectorPrintCharacter:
.1c75	da		phx				phx
.1c76	ae 5d 04	ldx $045d			ldx 	currentChannel
.1c79	20 8d 25	jsr $258d			jsr 	XPrintCharacterToChannel
.1c7c	fa		plx				plx
.1c7d	60		rts				rts
.1c7e					VectorGetCharacter:
.1c7e	da		phx				phx
.1c7f	ae 5d 04	ldx $045d			ldx 	currentChannel
.1c82	20 c6 24	jsr $24c6			jsr 	XGetCharacterFromChannel
.1c85	fa		plx				plx
.1c86	60		rts				rts
.045d					currentChannel:
>045d							.fill 	1
.1c87					PrintNumber:
.1c87	fa		plx				plx
.1c88	a9 07		lda #$07			lda 	#7
.1c8a	20 01 2d	jsr $2d01			jsr 	FloatToString 				; to number in decimal buffer
.1c8d	ca		dex				dex 								; drop
.1c8e	da		phx				phx
.1c8f	a2 00		ldx #$00			ldx 	#0 							; print buffer.
.1c91					_PNLoop:
.1c91	bd 94 05	lda $0594,x			lda 	decimalBuffer,x
.1c94	20 75 1c	jsr $1c75			jsr 	VectorPrintCharacter
.1c97	e8		inx				inx
.1c98	bd 94 05	lda $0594,x			lda	 	decimalBuffer,x
.1c9b	d0 f4		bne $1c91			bne 	_PNLoop
.1c9d	a9 20		lda #$20			lda 	#32 						; trailing space
.1c9f	20 75 1c	jsr $1c75			jsr 	VectorPrintCharacter
.1ca2	fa		plx				plx
.1ca3	4c 29 10	jmp $1029			jmp 	NextCommand
.1ca6					PrintString:
.1ca6	fa		plx				plx
.1ca7	b5 40		lda $40,x			lda 	NSMantissa0,x 				; point zTemp0 to string
.1ca9	85 2e		sta $2e				sta 	zTemp0
.1cab	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.1cad	85 2f		sta $2f				sta 	zTemp0+1
.1caf	ca		dex				dex 								; drop
.1cb0	da		phx				phx
.1cb1	5a		phy				phy
.1cb2	b2 2e		lda ($2e)			lda 	(zTemp0) 					; X = count
.1cb4	aa		tax				tax
.1cb5	a0 01		ldy #$01			ldy 	#1 							; Y = position
.1cb7					_PSLoop:
.1cb7	e0 00		cpx #$00			cpx 	#0 							; complete ?
.1cb9	f0 09		beq $1cc4			beq 	_PSExit
.1cbb	ca		dex				dex 								; dec count
.1cbc	b1 2e		lda ($2e),y			lda 	(zTemp0),y 					; print char and bump
.1cbe	20 75 1c	jsr $1c75			jsr 	VectorPrintCharacter
.1cc1	c8		iny				iny
.1cc2	80 f3		bra $1cb7			bra 	_PSLoop
.1cc4					_PSExit:
.1cc4	7a		ply				ply
.1cc5	fa		plx				plx
.1cc6	4c 29 10	jmp $1029			jmp 	NextCommand
.1cc9					CommandPushN:
.1cc9	fa		plx				plx
.1cca	e8		inx				inx 								; next slot on stack
.1ccb	b1 28		lda ($28),y			lda 	(codePtr),y 				; exponent
.1ccd	95 70		sta $70,x			sta 	NSExponent,x
.1ccf	c8		iny				iny
.1cd0	b1 28		lda ($28),y			lda 	(codePtr),y 				; mantissa
.1cd2	95 40		sta $40,x			sta 	NSMantissa0,x
.1cd4	c8		iny				iny
.1cd5	b1 28		lda ($28),y			lda 	(codePtr),y
.1cd7	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1cd9	c8		iny				iny
.1cda	b1 28		lda ($28),y			lda 	(codePtr),y
.1cdc	95 58		sta $58,x			sta 	NSMantissa2,x
.1cde	c8		iny				iny
.1cdf	b1 28		lda ($28),y			lda 	(codePtr),y
.1ce1	48		pha				pha
.1ce2	29 7f		and #$7f			and 	#$7F
.1ce4	95 64		sta $64,x			sta 	NSMantissa3,x
.1ce6	68		pla				pla 								; sign in mantissa3:7
.1ce7	29 80		and #$80			and 	#$80
.1ce9	95 34		sta $34,x			sta 	NSStatus,x
.1ceb	c8		iny				iny
.1cec	4c 29 10	jmp $1029			jmp 	NextCommand
.1cef					CommandPushS:
.1cef	fa		plx				plx
.1cf0	e8		inx				inx 								; next slot on stack
.1cf1	18		clc				clc
.1cf2	98		tya				tya
.1cf3	65 28		adc $28				adc 	codePtr 					; the string is inline
.1cf5	95 40		sta $40,x			sta 	NSMantissa0,x
.1cf7	a5 29		lda $29				lda 	codePtr+1
.1cf9	69 00		adc #$00			adc 	#0
.1cfb	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1cfd	74 58		stz $58,x			stz 	NSMantissa2,x
.1cff	74 64		stz $64,x			stz 	NSMantissa3,x
.1d01	a9 40		lda #$40			lda 	#NSSString
.1d03	95 34		sta $34,x			sta 	NSStatus,x
.1d05	98		tya				tya 								; string length +1 added to Y
.1d06	38		sec				sec
.1d07	71 28		adc ($28),y			adc 	(codePtr),y 				; next instruction
.1d09	a8		tay				tay
.1d0a	4c 29 10	jmp $1029			jmp 	NextCommand
.1d0d					CommandRead:
.1d0d	fa		plx				plx
.1d0e	5a		phy				phy 								; save Y
.1d0f	20 40 1d	jsr $1d40			jsr 	ReadStringToBuffer 			; read element into buffer
.1d12	e8		inx				inx									; space on stack
.1d13	a9 5f		lda #$5f			lda 	#((ReadBufferSize) & $FF)
.1d15	85 2e		sta $2e				sta 	0+zTemp0
.1d17	a9 04		lda #$04			lda 	#((ReadBufferSize) >> 8) & $FF
.1d19	85 2f		sta $2f				sta 	1+zTemp0
.1d1b	20 5f 22	jsr $225f			jsr 	ValEvaluateZTemp0
.1d1e	b0 04		bcs $1d24			bcs 	_CRError 					; failed
.1d20	7a		ply				ply 								; restore Y
.1d21	4c 29 10	jmp $1029			jmp 	NextCommand
.1d24					_CRError:
.1d24	4c 8a 14	jmp $148a		jmp	ErrorV_value
.1d27					CommandReadString:
.1d27	fa		plx				plx
.1d28	5a		phy				phy 								; save Y
.1d29	20 40 1d	jsr $1d40			jsr 	ReadStringToBuffer 			; read text
.1d2c	e8		inx				inx 								; make space on stack
.1d2d	20 19 2e	jsr $2e19			jsr 	FloatSetZero 				; store as string on stack
.1d30	a9 5f		lda #$5f			lda 	#ReadBufferSize & $FF
.1d32	95 40		sta $40,x			sta 	NSMantissa0,x
.1d34	a9 04		lda #$04			lda 	#ReadBufferSize >> 8
.1d36	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1d38	a9 40		lda #$40			lda 	#NSSString
.1d3a	95 34		sta $34,x			sta 	NSStatus,x
.1d3c	7a		ply				ply 								; restore Y
.1d3d	4c 29 10	jmp $1029			jmp 	NextCommand
.1d40					ReadStringToBuffer:
.1d40	a9 d3		lda #$d3			lda 	#((ReadBumpNext) & $FF)
.1d42	8d 5f 05	sta $055f			sta 	0+ReadBumpNextVec
.1d45	a9 1d		lda #$1d			lda 	#((ReadBumpNext) >> 8) & $FF
.1d47	8d 60 05	sta $0560			sta 	1+ReadBumpNextVec
.1d4a	a9 a6		lda #$a6			lda 	#((ReadLookNext) & $FF)
.1d4c	8d 61 05	sta $0561			sta 	0+ReadLookNextVec
.1d4f	a9 1d		lda #$1d			lda 	#((ReadLookNext) >> 8) & $FF
.1d51	8d 62 05	sta $0562			sta 	1+ReadLookNextVec
.1d54					GetStringToBuffer:
.1d54	20 a3 1d	jsr $1da3			jsr		GetLookNext 				; skip all leading spaces.
.1d57	f0 44		beq $1d9d			beq 	_RBError 					; end of data
.1d59	b0 f9		bcs $1d54			bcs 	GetStringToBuffer 			; switched to new data line.
.1d5b	c9 20		cmp #$20			cmp 	#' ' 						; non space got something
.1d5d	b0 05		bcs $1d64			bcs 	_RBNoSpace
.1d5f	20 a0 1d	jsr $1da0			jsr 	GetBumpNext 				; consume space and loop round.
.1d62	80 f0		bra $1d54			bra 	GetStringToBuffer
.1d64					_RBNoSpace:
.1d64	9c 5f 04	stz $045f			stz 	ReadBufferSize 				; empty the buffer.
.1d67	c9 22		cmp #$22			cmp 	#'"' 						; is it a '"'
.1d69	d0 08		bne $1d73			bne 	_RBCommaSep
.1d6b	8d 5e 04	sta $045e			sta 	ReadSep 					; use as a seperator
.1d6e	20 a0 1d	jsr $1da0			jsr 	GetBumpNext 				; consume the '"'
.1d71	80 05		bra $1d78			bra 	_RBGetText
.1d73					_RBCommaSep:
.1d73	a9 2c		lda #$2c			lda 	#","						; get till comma
.1d75	8d 5e 04	sta $045e			sta 	ReadSep
.1d78					_RBGetText:
.1d78	20 a3 1d	jsr $1da3			jsr 	GetLookNext 				; what follows
.1d7b	b0 18		bcs $1d95			bcs 	_RBEndGet 					; if new DATA line, the end without consumption
.1d7d	20 a0 1d	jsr $1da0			jsr 	GetBumpNext 				; consume it whatever
.1d80	cd 5e 04	cmp $045e			cmp 	ReadSep 					; if found the seperator.
.1d83	f0 10		beq $1d95			beq 	_RBEndGet 					; exit after consumption
.1d85	da		phx				phx
.1d86	ae 5f 04	ldx $045f			ldx 	ReadBufferSize 				; copy into buffer.
.1d89	ee 5f 04	inc $045f			inc 	ReadBufferSize
.1d8c	9d 60 04	sta $0460,x			sta 	ReadBuffer,x
.1d8f	9e 61 04	stz $0461,x			stz 	ReadBuffer+1,x 				; make ASCIIZ as well.
.1d92	fa		plx				plx
.1d93	80 e3		bra $1d78			bra 	_RBGetText
.1d95					_RBEndGet:
.1d95	c9 22		cmp #$22			cmp 	#'"'
.1d97	d0 03		bne $1d9c			bne 	_RBNotQuote
.1d99	20 a0 1d	jsr $1da0			jsr 	GetBumpNext
.1d9c					_RBNotQuote:
.1d9c	60		rts				rts
.1d9d					_RBError:
.1d9d	4c 3f 15	jmp $153f		jmp	ErrorV_data
.1da0					GetBumpNext:
.1da0	6c 5f 05	jmp ($055f)			jmp 	(ReadBumpNextVec)
.1da3					GetLookNext:
.1da3	6c 61 05	jmp ($0561)			jmp 	(ReadLookNextVec)
.1da6					ReadLookNext:
.1da6	ad 63 05	lda $0563			lda 	dataRemaining 				; any data remaining
.1da9	f0 04		beq $1daf			beq 	_RLNFindData
.1dab	b2 2b		lda ($2b)			lda 	(objPtr) 					; return that object.
.1dad	18		clc				clc
.1dae	60		rts				rts
.1daf					_RLNFindData:
.1daf	b2 2b		lda ($2b)			lda 	(objPtr) 					; see where we are
.1db1	c9 ff		cmp #$ff			cmp 	#$FF 						; if at $FF then end, error.
.1db3	f0 1a		beq $1dcf			beq 	_RLNNoData
.1db5	c9 cf		cmp #$cf			cmp 	#PCD_CMD_DATA 				; Found DATA
.1db7	f0 05		beq $1dbe			beq 	_RLNHaveData
.1db9					_RLNNext:
.1db9	20 e8 27	jsr $27e8			jsr 	MoveObjectForward			; else scan forward.
.1dbc	80 f1		bra $1daf			bra 	_RLNFindData
.1dbe					_RLNHaveData:
.1dbe	a0 01		ldy #$01			ldy 	#1 							; get length
.1dc0	b1 2b		lda ($2b),y			lda 	(objPtr),y
.1dc2	f0 f5		beq $1db9			beq 	_RLNNext 					; skip if DATA alone
.1dc4	20 d3 1d	jsr $1dd3			jsr 	ReadBumpNext 				; advance by two
.1dc7	20 d3 1d	jsr $1dd3			jsr 	ReadBumpNext
.1dca	8d 63 05	sta $0563			sta 	dataRemaining 				; set data left count.
.1dcd	38		sec				sec
.1dce	60		rts				rts
.1dcf					_RLNNoData:
.1dcf	a9 00		lda #$00			lda 	#0
.1dd1	38		sec				sec
.1dd2	60		rts				rts
.1dd3					ReadBumpNext:
.1dd3	e6 2b		inc $2b				inc 	objPtr
.1dd5	d0 02		bne $1dd9			bne 	_RBNSkip
.1dd7	e6 2c		inc $2c				inc 	objPtr+1
.1dd9					_RBNSkip:
.1dd9	ce 63 05	dec $0563			dec 	dataRemaining
.1ddc	60		rts				rts
.045e					ReadSep:
>045e							.fill 	1
.045f					ReadBufferSize:
>045f							.fill 	1
.0460					ReadBuffer:
>0460							.fill 	255
.055f					ReadBumpNextVec:
>055f							.fill 	2
.0561					ReadLookNextVec:
>0561							.fill 	2
.1ddd					ReadFloatCommand:
.1ddd	fa		plx				plx
.1dde	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.1de0	85 2e		sta $2e				sta 	zTemp0 						; save in MSB
.1de2	88		dey				dey 								; get the upper 3 bits
.1de3	b1 28		lda ($28),y			lda 	(codePtr),y
.1de5	29 07		and #$07			and 	#7
.1de7	c8		iny				iny
.1de8	c8		iny				iny
.1de9	06 2e		asl $2e				asl 	zTemp0 						; shift zTemp0:A left
.1deb	2a		rol a				rol 	a 							; carry will be clear.
.1dec	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.1def	85 2f		sta $2f				sta 	zTemp0+1
.1df1	20 f7 1d	jsr $1df7			jsr 	ReadFloatZTemp0Sub
.1df4	4c 29 10	jmp $1029			jmp 	NextCommand
.1df7					ReadFloatZTemp0Sub:
.1df7	5a		phy				phy 								; start write
.1df8	a0 01		ldy #$01			ldy 	#1
.1dfa	e8		inx				inx
.1dfb	b2 2e		lda ($2e)			lda 	(zTemp0)
.1dfd	95 40		sta $40,x			sta 	NSMantissa0,x
.1dff	b1 2e		lda ($2e),y			lda 	(zTemp0),y
.1e01	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1e03	c8		iny				iny
.1e04	b1 2e		lda ($2e),y			lda 	(zTemp0),y
.1e06	95 58		sta $58,x			sta 	NSMantissa2,x
.1e08	c8		iny				iny
.1e09	b1 2e		lda ($2e),y			lda 	(zTemp0),y
.1e0b	95 64		sta $64,x			sta 	NSMantissa3,x
.1e0d	c8		iny				iny
.1e0e	b1 2e		lda ($2e),y			lda 	(zTemp0),y
.1e10	95 70		sta $70,x			sta 	NSExponent,x
.1e12	c8		iny				iny
.1e13	b1 2e		lda ($2e),y			lda 	(zTemp0),y
.1e15	95 34		sta $34,x			sta 	NSStatus,x
.1e17	7a		ply				ply
.1e18	60		rts				rts
.1e19					ReadIntegerCommand:
.1e19	fa		plx				plx
.1e1a	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.1e1c	85 2e		sta $2e				sta 	zTemp0 						; save in MSB
.1e1e	88		dey				dey 								; get the upper 3 bits
.1e1f	b1 28		lda ($28),y			lda 	(codePtr),y
.1e21	29 07		and #$07			and 	#7
.1e23	c8		iny				iny
.1e24	c8		iny				iny
.1e25	06 2e		asl $2e				asl 	zTemp0 						; shift zTemp0:A left
.1e27	2a		rol a				rol 	a 							; carry will be clear.
.1e28	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.1e2b	85 2f		sta $2f				sta 	zTemp0+1
.1e2d	20 33 1e	jsr $1e33			jsr 	ReadIntegerZTemp0Sub
.1e30	4c 29 10	jmp $1029			jmp 	NextCommand
.1e33					ReadIntegerZTemp0Sub:
.1e33	5a		phy				phy 								; start write
.1e34	a0 01		ldy #$01			ldy 	#1
.1e36	e8		inx				inx 								; prepare
.1e37	74 58		stz $58,x			stz 	NSMantissa2,x
.1e39	74 64		stz $64,x			stz 	NSMantissa3,x
.1e3b	74 70		stz $70,x			stz 	NSExponent,x
.1e3d	74 34		stz $34,x			stz 	NSStatus,x
.1e3f	b1 2e		lda ($2e),y			lda 	(zTemp0),y 					; get MSB, do -ve code.
.1e41	30 08		bmi $1e4b			bmi 	_RIZNegative
.1e43	95 4c		sta $4c,x			sta 	NSMantissa1,x 				; +ve read
.1e45	b2 2e		lda ($2e)			lda 	(zTemp0)
.1e47	95 40		sta $40,x			sta 	NSMantissa0,x
.1e49	7a		ply				ply
.1e4a	60		rts				rts
.1e4b					_RIZNegative:
.1e4b	38		sec				sec 								; -ve read
.1e4c	a9 00		lda #$00			lda 	#0
.1e4e	f2 2e		sbc ($2e)			sbc 	(zTemp0)
.1e50	95 40		sta $40,x			sta 	NSMantissa0,x
.1e52	a9 00		lda #$00			lda 	#0
.1e54	f1 2e		sbc ($2e),y			sbc 	(zTemp0),y
.1e56	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1e58	a9 80		lda #$80			lda 	#$80
.1e5a	95 34		sta $34,x			sta 	NSStatus,x
.1e5c	7a		ply				ply
.1e5d	60		rts				rts
.1e5e					ReadStringCommand:
.1e5e	fa		plx				plx
.1e5f	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.1e61	85 2e		sta $2e				sta 	zTemp0 						; save in MSB
.1e63	88		dey				dey 								; get the upper 3 bits
.1e64	b1 28		lda ($28),y			lda 	(codePtr),y
.1e66	29 07		and #$07			and 	#7
.1e68	c8		iny				iny
.1e69	c8		iny				iny
.1e6a	06 2e		asl $2e				asl 	zTemp0 						; shift zTemp0:A left
.1e6c	2a		rol a				rol 	a 							; carry will be clear.
.1e6d	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.1e70	85 2f		sta $2f				sta 	zTemp0+1
.1e72	20 78 1e	jsr $1e78			jsr 	ReadStringZTemp0Sub
.1e75	4c 29 10	jmp $1029			jmp 	NextCommand
.1e78					ReadStringZTemp0Sub:
.1e78	5a		phy				phy 								; start write
.1e79	e8		inx				inx 								; prepare
.1e7a	74 58		stz $58,x			stz 	NSMantissa2,x
.1e7c	74 64		stz $64,x			stz 	NSMantissa3,x
.1e7e	74 70		stz $70,x			stz 	NSExponent,x
.1e80	a9 40		lda #$40			lda 	#NSSString
.1e82	74 34		stz $34,x			stz 	NSStatus,x
.1e84	18		clc				clc
.1e85	b2 2e		lda ($2e)			lda 	(zTemp0)					; read address of block add 2.
.1e87	69 02		adc #$02			adc 	#2 							; this points to actual data
.1e89	95 40		sta $40,x			sta 	NSMantissa0,x 				; if address 0 the MSB will still be 0
.1e8b	a0 01		ldy #$01			ldy 	#1
.1e8d	b1 2e		lda ($2e),y			lda 	(zTemp0),y
.1e8f	69 00		adc #$00			adc 	#0
.1e91	95 4c		sta $4c,x			sta 	NSMantissa1,x 				; +ve read
.1e93	d0 08		bne $1e9d			bne 	_RSZNoDefault 				; if read $00 use a default value.
.1e95	a9 9f		lda #$9f			lda 	#_RSZNull & $FF
.1e97	95 40		sta $40,x			sta 	NSMantissa0,x
.1e99	a9 1e		lda #$1e			lda 	#_RSZNull >> 8
.1e9b	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1e9d					_RSZNoDefault:
.1e9d	7a		ply				ply
.1e9e	60		rts				rts
.1e9f					_RSZNull:
>1e9f	00						.byte 	0
.1ea0					CommandRestore:
.1ea0	fa		plx				plx
.1ea1	20 a7 1e	jsr $1ea7			jsr 	RestoreCode
.1ea4	4c 29 10	jmp $1029			jmp 	NextCommand
.1ea7					RestoreCode:
.1ea7	ad 04 04	lda $0404			lda 	runtimeHigh 				; reset pointer and page
.1eaa	85 2e		sta $2e				sta 	objPage+1
.1eac	64 2d		stz $2d				stz  	objPage
.1eae	9c 63 05	stz $0563			stz 	dataRemaining 				; no data remaining.
.1eb1	60		rts				rts
.0563					dataRemaining:
>0563							.fill 	1		 					; 0 if not in data statement
.1eb2					UnaryRND:
.1eb2	fa		plx				plx
.1eb3	34 34		bit $34,x			bit 	NSStatus,x 					; -ve then set seed from operand
.1eb5	10 17		bpl $1ece			bpl 	_URNoSeed
.1eb7	20 6e 2b	jsr $2b6e			jsr 	FloatNormalise 				; some float value
.1eba	b5 40		lda $40,x			lda 	NSMantissa0,x 				; copy to Mantissa
.1ebc	8d 64 05	sta $0564			sta 	randomSeed+0
.1ebf	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.1ec1	8d 65 05	sta $0565			sta 	randomSeed+1
.1ec4	b5 58		lda $58,x			lda 	NSMantissa2,x
.1ec6	8d 66 05	sta $0566			sta 	randomSeed+2
.1ec9	b5 64		lda $64,x			lda 	NSMantissa3,x
.1ecb	8d 67 05	sta $0567			sta 	randomSeed+3
.1ece					_URNoSeed:
.1ece	20 f0 1e	jsr $1ef0			jsr 	RandomNumberGenerator 		; create a number and copy to mantissa
.1ed1	ad 64 05	lda $0564			lda 	randomSeed+0
.1ed4	95 40		sta $40,x			sta 	NSMantissa0,x
.1ed6	ad 65 05	lda $0565			lda 	randomSeed+1
.1ed9	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1edb	ad 66 05	lda $0566			lda 	randomSeed+2
.1ede	95 58		sta $58,x			sta 	NSMantissa2,x
.1ee0	ad 67 05	lda $0567			lda 	randomSeed+3
.1ee3	29 7f		and #$7f			and 	#$7F
.1ee5	95 64		sta $64,x			sta 	NSMantissa3,x
.1ee7	a9 e1		lda #$e1			lda 	#(-31 & $FF)
.1ee9	95 70		sta $70,x			sta 	NSExponent,x
.1eeb	74 34		stz $34,x			stz 	NSStatus,x
.1eed	4c 29 10	jmp $1029			jmp 	NextCommand
.1ef0					RandomNumberGenerator:
.1ef0	5a		phy				phy
.1ef1	ad 64 05	lda $0564			lda 	randomSeed+0 				; check if zero
.1ef4	0d 65 05	ora $0565			ora 	randomSeed+1
.1ef7	0d 66 05	ora $0566			ora 	randomSeed+2
.1efa	0d 67 05	ora $0567			ora 	randomSeed+3
.1efd	d0 07		bne $1f06			bne 	_RNGNoSeed
.1eff	ce 67 05	dec $0567			dec 	randomSeed+3 				; if so tweak and flog
.1f02	a0 64		ldy #$64			ldy 	#100
.1f04	80 05		bra $1f0b			bra 	_RNGLoop
.1f06					_RNGNoSeed:
.1f06	a0 08		ldy #$08			ldy 	#8
.1f08	ad 64 05	lda $0564			lda 	randomSeed+0
.1f0b					_RNGLoop:
.1f0b	0a		asl a				asl		a
.1f0c	2e 65 05	rol $0565			rol 	randomSeed+1
.1f0f	2e 66 05	rol $0566			rol 	randomSeed+2
.1f12	2e 67 05	rol $0567			rol 	randomSeed+3
.1f15	90 02		bcc $1f19			bcc		_RNGSkip
.1f17	49 c5		eor #$c5			eor 	#$C5
.1f19					_RNGSkip:
.1f19	88		dey				dey
.1f1a	d0 ef		bne $1f0b			bne		_RNGLoop
.1f1c	8d 64 05	sta $0564			sta 	randomSeed+0
.1f1f	7a		ply				ply
.1f20	60		rts				rts
.0564					randomSeed:
>0564							.fill 	4
.1f21					StringConcatenate:
.1f21	fa		plx				plx
.1f22	ca		dex				dex
.1f23	b5 40		lda $40,x			lda 	NSMantissa0,x 				; copy strings to zTemp1 and zTemp2
.1f25	85 30		sta $30				sta 	zTemp1
.1f27	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.1f29	85 31		sta $31				sta 	zTemp1+1
.1f2b	b5 41		lda $41,x			lda 	NSMantissa0+1,x
.1f2d	85 32		sta $32				sta 	zTemp2
.1f2f	b5 4d		lda $4d,x			lda 	NSMantissa1+1,x
.1f31	85 33		sta $33				sta 	zTemp2+1
.1f33	18		clc				clc 								; work out total length
.1f34	b2 30		lda ($30)			lda 	(zTemp1)
.1f36	72 32		adc ($32)			adc 	(zTemp2)
.1f38	b0 18		bcs $1f52			bcs 	_BCLength 					; more than 255 characters.
.1f3a	48		pha				pha 								; save total
.1f3b	20 18 20	jsr $2018			jsr 	StringAllocTemp 			; space for result.
.1f3e	68		pla				pla 								; write total as first.
.1f3f	92 22		sta ($22)			sta 	(zsTemp)
.1f41	20 55 1f	jsr $1f55			jsr 	_BCCopyZTemp1 				; copy zTemp1 to target
.1f44	a5 32		lda $32				lda 	zTemp2 						; copy address zTemp2->1
.1f46	85 30		sta $30				sta 	zTemp1
.1f48	a5 33		lda $33				lda 	zTemp2+1
.1f4a	85 31		sta $31				sta 	zTemp1+1
.1f4c	20 55 1f	jsr $1f55			jsr 	_BCCopyZTemp1 				; and copy it, e.g. zTemp2
.1f4f	4c 29 10	jmp $1029			jmp 	NextCommand
.1f52					_BCLength:
.1f52	4c 7a 14	jmp $147a		jmp	ErrorV_range
.1f55					_BCCopyZTemp1:
.1f55	b2 30		lda ($30)			lda 	(zTemp1) 					; bytes to copy
.1f57	f0 15		beq $1f6e			beq 	_BCCExit 					; none.
.1f59	da		phx				phx 								; save XY
.1f5a	5a		phy				phy
.1f5b	aa		tax				tax 								; count in X.
.1f5c	a0 01		ldy #$01			ldy 	#1
.1f5e					_BCCLoop:
.1f5e	e6 22		inc $22				inc 	zsTemp 						; bump pointer, pre-increment
.1f60	d0 02		bne $1f64			bne 	_BCCNoCarry
.1f62	e6 23		inc $23				inc 	zsTemp+1
.1f64					_BCCNoCarry:
.1f64	b1 30		lda ($30),y			lda 	(zTemp1),y				 	; copy bytes
.1f66	92 22		sta ($22)			sta 	(zsTemp)
.1f68	c8		iny				iny
.1f69	ca		dex				dex 								; X times
.1f6a	d0 f2		bne $1f5e			bne 	_BCCLoop
.1f6c	7a		ply				ply 								; restore YX
.1f6d	fa		plx				plx
.1f6e					_BCCExit:
.1f6e	60		rts				rts
.1f6f					XRuntimeSetup:
.1f6f	a9 ff		lda #$ff	 		lda 	#$FF 						; default banks to access.
.1f71	8d 6b 05	sta $056b	 		sta 	ramBank
.1f74	8d 6c 05	sta $056c	 		sta 	romBank
.1f77	60		rts				rts
.1f78					SignTOS:
.1f78	fa		plx				plx
.1f79	20 3b 2e	jsr $2e3b			jsr 	FloatIsZero 				; if zero
.1f7c	f0 0f		beq $1f8d			beq 	_SGZero  					; return Int Zero
.1f7e	b5 34		lda $34,x			lda 	NSStatus,x 					; get status w/sign
.1f80	48		pha				pha
.1f81	a9 01		lda #$01			lda 	#1 							; set result to 1
.1f83	20 1b 2e	jsr $2e1b			jsr 	FloatSetByte
.1f86	68		pla				pla
.1f87	29 80		and #$80			and		#$80 						; copy the sign byte out
.1f89	95 34		sta $34,x			sta 	NSStatus,x  				; so it will be -1 or 1
.1f8b	80 03		bra $1f90			bra 	_SGExit
.1f8d					_SGZero:
.1f8d	20 19 2e	jsr $2e19			jsr 	FloatSetZero
.1f90					_SGExit:
.1f90	4c 29 10	jmp $1029			jmp 	NextCommand
.1f93					CommandShift:
.1f93	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted command (X already pushed)
.1f95	c8		iny				iny
.1f96	0a		asl a				asl 	a 							; double into X
.1f97	aa		tax				tax
.1f98	7c 43 23	jmp ($2343,x)			jmp 	(ShiftVectorTable,x) 		; go there.
.1f9b					PrintTab:
.1f9b	fa		plx				plx
.1f9c	20 e2 24	jsr $24e2			jsr 	XGetHPos
.1f9f					_PTMod10:
.1f9f	38		sec				sec
.1fa0	e9 0a		sbc #$0a			sbc 	#10
.1fa2	b0 fb		bcs $1f9f			bcs 	_PTMod10
.1fa4	49 ff		eor #$ff			eor 	#255 						; subtract from 10 effectively. negate it
.1fa6	1a		inc a				inc 	a 							; if modulus is 0, then this will be -10 => 10
.1fa7	80 15		bra $1fbe			bra 	PrintSpaceLoop
.1fa9					PrintPos:
.1fa9	fa		plx				plx
.1faa	20 e2 24	jsr $24e2			jsr		XGetHPos 					; get current position
.1fad	85 2e		sta $2e				sta 	zTemp0
.1faf	38		sec				sec 								; calculate spaces required
.1fb0	b5 40		lda $40,x			lda 	NSMantissa0,x
.1fb2	ca		dex				dex
.1fb3	e5 2e		sbc $2e				sbc 	zTemp0
.1fb5	b0 07		bcs $1fbe			bcs 	PrintSpaceLoop 				; if >= 0 then do that many spaces
.1fb7	4c 29 10	jmp $1029			jmp 	NextCommand
.1fba					PrintSpace:
.1fba	fa		plx				plx
.1fbb	b5 40		lda $40,x			lda 	NSMantissa0,x
.1fbd	ca		dex				dex
.1fbe					PrintSpaceLoop:
.1fbe	c9 00		cmp #$00			cmp 	#0
.1fc0	f0 0a		beq $1fcc			beq 	_PSExit
.1fc2	48		pha				pha
.1fc3	a9 20		lda #$20			lda 	#" "
.1fc5	20 75 1c	jsr $1c75			jsr 	VectorPrintCharacter
.1fc8	68		pla				pla
.1fc9	3a		dec a				dec 	a
.1fca	80 f2		bra $1fbe			bra 	PrintSpaceLoop
.1fcc					_PSExit:
.1fcc	4c 29 10	jmp $1029			jmp 	NextCommand
.1fcf					CommandStop:
.1fcf	fa		plx				plx
.1fd0	4c 2c 15	jmp $152c		jmp	ErrorV_stop
.1fd3					Unary_Str:
.1fd3	fa		plx				plx
.1fd4	5a		phy				phy
.1fd5	a9 08		lda #$08			lda 	#8 							; maximum decimal places.
.1fd7	20 01 2d	jsr $2d01			jsr 	FloatToString 				; do the conversion.
.1fda	a9 21		lda #$21			lda		#33 						; create buffer
.1fdc	20 18 20	jsr $2018			jsr 	StringAllocTemp 			; allocate memory
.1fdf	a0 01		ldy #$01			ldy 	#1  						; copy the converted string into the buffer.
.1fe1					_USCopy:
.1fe1	b9 93 05	lda $0593,y			lda 	decimalBuffer-1,y
.1fe4	f0 05		beq $1feb			beq 	_USExit
.1fe6	91 22		sta ($22),y			sta 	(zsTemp),y
.1fe8	c8		iny				iny
.1fe9	80 f6		bra $1fe1			bra 	_USCopy
.1feb					_USExit:
.1feb	98		tya				tya
.1fec	3a		dec a				dec 	a
.1fed	92 22		sta ($22)			sta 	(zsTemp)
.1fef	7a		ply				ply
.1ff0	4c 29 10	jmp $1029			jmp 	NextCommand
.1ff3					StringInitialise:
.1ff3	48		pha				pha
.1ff4	ad 68 05	lda $0568			lda 	stringInitialised 			; already done
.1ff7	d0 11		bne $200a			bne 	_SIExit
.1ff9	ad 02 04	lda $0402			lda 	stringHighMemory 			; copy high memory - 512 => stringTempPointer
.1ffc	8d 69 05	sta $0569			sta 	stringTempPointer
.1fff	ad 03 04	lda $0403			lda 	stringHighMemory+1
.2002	3a		dec a				dec 	a
.2003	3a		dec a				dec 	a
.2004	8d 6a 05	sta $056a			sta 	stringTempPointer+1
.2007	ce 68 05	dec $0568			dec 	stringInitialised 			; set the initialised flag.
.200a					_SIExit:
.200a	a5 27		lda $27				lda 	availableMemory+1 			; check out of memory
.200c	1a		inc a				inc 	a
.200d	1a		inc a				inc 	a
.200e	cd 03 04	cmp $0403			cmp 	stringHighMemory+1
.2011	b0 02		bcs $2015			bcs 	_SIMemory
.2013	68		pla				pla
.2014	60		rts				rts
.2015					_SIMemory:
.2015	4c 85 15	jmp $1585		jmp	ErrorV_memory
.2018					StringAllocTemp:
.2018	20 f3 1f	jsr $1ff3			jsr 	StringInitialise 			; check it is initialised.
.201b	49 ff		eor #$ff			eor 	#$FF 						; subtract A+1 from temp pointer.
.201d	18		clc				clc
.201e	6d 69 05	adc $0569			adc 	stringTempPointer 			; subtract 32 from temp pointer and
.2021	8d 69 05	sta $0569			sta 	stringTempPointer 			; save in zsTemp and stackas well.
.2024	85 22		sta $22				sta 	zsTemp
.2026	95 40		sta $40,x			sta 	NSMantissa0,x
.2028	ad 6a 05	lda $056a			lda 	stringTempPointer+1
.202b	69 ff		adc #$ff			adc 	#$FF
.202d	8d 6a 05	sta $056a			sta 	stringTempPointer+1
.2030	85 23		sta $23				sta 	zsTemp+1
.2032	95 4c		sta $4c,x			sta 	NSMantissa1,x
.2034	74 58		stz $58,x			stz 	NSMantissa2,x
.2036	74 64		stz $64,x			stz 	NSMantissa3,x
.2038	a9 00		lda #$00			lda 	#0 							; clear string.
.203a	92 22		sta ($22)			sta 	(zsTemp)
.203c	a9 40		lda #$40			lda 	#NSSString 			 		; mark as string
.203e	95 34		sta $34,x			sta 	NSStatus,x
.2040	60		rts				rts
.2041					StringWriteChar:
.2041	5a		phy				phy
.2042	48		pha				pha
.2043	b2 22		lda ($22)			lda 	(zsTemp)
.2045	1a		inc a				inc 	a
.2046	92 22		sta ($22)			sta 	(zsTemp)
.2048	a8		tay				tay
.2049	68		pla				pla
.204a	91 22		sta ($22),y			sta 	(zsTemp),y
.204c	7a		ply				ply
.204d	60		rts				rts
.0568					stringInitialised:
>0568							.fill 	1
.0569					stringTempPointer:
>0569							.fill 	2
.204e					Unary_Left:
.204e	fa		plx				plx
.204f	5a		phy				phy
.2050	18		clc				clc 								; only one parameter
.2051	20 3c 19	jsr $193c			jsr 	GetInteger8Bit 				; push the length of the string.
.2054	48		pha				pha
.2055	ca		dex				dex
.2056	a9 00		lda #$00			lda 	#0 							; push the start position.
.2058	48		pha				pha
.2059	20 91 20	jsr $2091			jsr 	UnarySStringToZTemp0
.205c	80 3c		bra $209a			bra 	SubstringMain 				; stack now points to the string to slice.
.205e					Unary_Right:
.205e	fa		plx				plx
.205f	5a		phy				phy
.2060	a9 ff		lda #$ff			lda 	#255 						; push 255, we want all the string.
.2062	20 3c 19	jsr $193c			jsr 	GetInteger8Bit 				; push the right length of the string.
.2065	48		pha				pha
.2066	ca		dex				dex
.2067	20 91 20	jsr $2091			jsr 	UnarySStringToZTemp0
.206a	68		pla				pla 								; this is the right requirement
.206b	38		sec				sec
.206c	49 ff		eor #$ff			eor 	#$FF
.206e	72 2e		adc ($2e)			adc 	(zTemp0)
.2070	b0 02		bcs $2074			bcs 	_URHaveCount
.2072	a9 00		lda #$00			lda 	#0 							; overflow, start from 0
.2074					_URHaveCount:
.2074	a0 ff		ldy #$ff			ldy 	#255 						; whole string
.2076	5a		phy				phy
.2077	48		pha				pha 								; start position
.2078	80 20		bra $209a			bra 	SubstringMain
.207a					Unary_Mid:
.207a	fa		plx				plx
.207b	5a		phy				phy
.207c	20 3c 19	jsr $193c			jsr 	GetInteger8Bit 				; push the length of the string required.
.207f	48		pha				pha
.2080	ca		dex				dex
.2081	20 3c 19	jsr $193c			jsr 	GetInteger8Bit 				; put the start position.
.2084	f0 08		beq $208e			beq 	_UMError
.2086	3a		dec a				dec 	a
.2087	48		pha				pha
.2088	ca		dex				dex
.2089	20 91 20	jsr $2091			jsr 	UnarySStringToZTemp0
.208c	80 0c		bra $209a			bra 	SubstringMain 				; stack now points to the string to slice.
.208e					_UMError:
.208e	4c 7a 14	jmp $147a		jmp	ErrorV_range
.2091					UnarySStringToZTemp0:
.2091	b5 40		lda $40,x			lda 	NSMantissa0,x
.2093	85 2e		sta $2e				sta 	zTemp0
.2095	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.2097	85 2f		sta $2f				sta 	zTemp0+1
.2099	60		rts				rts
.209a					SubstringMain:
.209a	68		pla				pla 								; get the start offset
.209b	7a		ply				ply 								; get the count to do.
.209c	d2 2e		cmp ($2e)			cmp 	(zTemp0) 					; if start >= length then return NULL.
.209e	b0 38		bcs $20d8			bcs 	_SSReturnNull
.20a0	85 30		sta $30				sta 	zTemp1 						; save start position.
.20a2	84 31		sty $31				sty 	zTemp1+1 					; save count
.20a4	18		clc				clc
.20a5	65 31		adc $31				adc 	zTemp1+1 					; this is the end position.
.20a7	b0 06		bcs $20af			bcs 	_SMTruncateToEnd 			; if overflow, limit to length-start.
.20a9	d2 2e		cmp ($2e)			cmp 	(zTemp0) 					; ok if limit is <= length.
.20ab	f0 04		beq $20b1			beq 	_SMIsOkay
.20ad	90 02		bcc $20b1			bcc 	_SMIsOkay
.20af					_SMTruncateToEnd:
.20af	b2 2e		lda ($2e)			lda 	(zTemp0) 					; end position is length.
.20b1					_SMIsOkay:
.20b1	85 31		sta $31				sta 	zTemp1+1
.20b3	38		sec				sec		 							; work out size
.20b4	a5 31		lda $31				lda 	zTemp1+1
.20b6	e5 30		sbc $30				sbc 	zTemp1
.20b8	f0 1e		beq $20d8			beq 	_SSReturnNull 				; if size = 0 then return empty string.
.20ba	20 18 20	jsr $2018			jsr 	StringAllocTemp 			; zsTemp & mantissa = the new string.
.20bd	a4 30		ldy $30				ldy 	zTemp1 						; start
.20bf					_SMCopy:
.20bf	c4 31		cpy $31				cpy 	zTemp1+1 					; exit if reached end
.20c1	f0 11		beq $20d4			beq 	_SMExit
.20c3	c8		iny				iny 								; bump and
.20c4	b1 2e		lda ($2e),y			lda 	(zTemp0),y 					; get character (prefix)
.20c6	5a		phy				phy
.20c7	48		pha				pha
.20c8	b2 22		lda ($22)			lda 	(zsTemp) 					; bump length => Y
.20ca	1a		inc a				inc 	a
.20cb	a8		tay				tay
.20cc	92 22		sta ($22)			sta 	(zsTemp)
.20ce	68		pla				pla 								; write character out
.20cf	91 22		sta ($22),y			sta 	(zsTemp),y
.20d1	7a		ply				ply 								; restore Y
.20d2	80 eb		bra $20bf			bra 	_SMCopy
.20d4					_SMExit:
.20d4	7a		ply				ply
.20d5	4c 29 10	jmp $1029			jmp 	NextCommand
.20d8					_SSReturnNull:
.20d8	a9 ea		lda #$ea			lda 	#SSRNull & $FF 				; set up mantissa
.20da	95 40		sta $40,x			sta 	NSMantissa0,x
.20dc	a9 20		lda #$20			lda 	#SSRNull >> 8
.20de	95 4c		sta $4c,x			sta 	NSMantissa1,x
.20e0	74 58		stz $58,x			stz 	NSMantissa2,x
.20e2	74 64		stz $64,x			stz 	NSMantissa3,x
.20e4	a9 40		lda #$40			lda 	#NSSString
.20e6	95 34		sta $34,x			sta 	NSStatus,x
.20e8	80 ea		bra $20d4			bra 	_SMExit
.20ea					SSRNull:
>20ea	00 00						.word 	0
.20ec					CommandSwap:
.20ec	fa		plx				plx
.20ed	b5 40		lda $40,x			lda 	NSMantissa0,x
.20ef	48		pha				pha
.20f0	b5 3f		lda $3f,x			lda 	NSMantissa0-1,x
.20f2	95 40		sta $40,x			sta 	NSMantissa0,x
.20f4	68		pla				pla
.20f5	95 3f		sta $3f,x			sta 	NSMantissa0-1,x
.20f7	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.20f9	48		pha				pha
.20fa	b5 4b		lda $4b,x			lda 	NSMantissa1-1,x
.20fc	95 4c		sta $4c,x			sta 	NSMantissa1,x
.20fe	68		pla				pla
.20ff	95 4b		sta $4b,x			sta 	NSMantissa1-1,x
.2101	b5 58		lda $58,x			lda 	NSMantissa2,x
.2103	48		pha				pha
.2104	b5 57		lda $57,x			lda 	NSMantissa2-1,x
.2106	95 58		sta $58,x			sta 	NSMantissa2,x
.2108	68		pla				pla
.2109	95 57		sta $57,x			sta 	NSMantissa2-1,x
.210b	b5 64		lda $64,x			lda 	NSMantissa3,x
.210d	48		pha				pha
.210e	b5 63		lda $63,x			lda 	NSMantissa3-1,x
.2110	95 64		sta $64,x			sta 	NSMantissa3,x
.2112	68		pla				pla
.2113	95 63		sta $63,x			sta 	NSMantissa3-1,x
.2115	b5 70		lda $70,x			lda 	NSExponent,x
.2117	48		pha				pha
.2118	b5 6f		lda $6f,x			lda 	NSExponent-1,x
.211a	95 70		sta $70,x			sta 	NSExponent,x
.211c	68		pla				pla
.211d	95 6f		sta $6f,x			sta 	NSExponent-1,x
.211f	b5 34		lda $34,x			lda 	NSStatus,x
.2121	48		pha				pha
.2122	b5 33		lda $33,x			lda 	NSStatus-1,x
.2124	95 34		sta $34,x			sta 	NSStatus,x
.2126	68		pla				pla
.2127	95 33		sta $33,x			sta 	NSStatus-1,x
.2129	4c 29 10	jmp $1029			jmp 	NextCommand
.212c					CommandSYS:
.212c	fa		plx				plx
.212d	da		phx				phx 								; save XY
.212e	5a		phy				phy
.212f	20 54 2a	jsr $2a54			jsr 	FloatIntegerPart
.2132	b5 4c		lda $4c,x			lda 	NSMantissa1,x 				; get call address => zTemp0
.2134	85 2f		sta $2f				sta 	zTemp0+1
.2136	b5 40		lda $40,x			lda 	NSMantissa0,x
.2138	85 2e		sta $2e				sta 	zTemp0
.213a	ae 0d 03	ldx $030d			ldx 	SYS_Reg_X 					; load registers
.213d	ac 0e 03	ldy $030e			ldy 	SYS_Reg_Y
.2140	ad 0f 03	lda $030f			lda 	SYS_Reg_S
.2143	48		pha				pha
.2144	ad 0c 03	lda $030c			lda 	SYS_Reg_A
.2147	28		plp				plp
.2148	20 5f 21	jsr $215f			jsr 	_CSZTemp0
.214b	08		php				php
.214c	8e 0d 03	stx $030d			stx 	SYS_Reg_X 					; load registers
.214f	8c 0e 03	sty $030e			sty 	SYS_Reg_Y
.2152	8d 0c 03	sta $030c			sta 	SYS_Reg_A
.2155	68		pla				pla
.2156	8d 0f 03	sta $030f			sta 	SYS_Reg_S
.2159	7a		ply				ply 								; restore YX and drop 2
.215a	fa		plx				plx
.215b	ca		dex				dex
.215c	4c 29 10	jmp $1029			jmp 	NextCommand
.215f					_CSZTemp0:
.215f	6c 2e 00	jmp ($002e)			jmp 	(zTemp0)
.2162					TimeTOS:
.2162	fa		plx				plx
.2163	20 bd 21	jsr $21bd			jsr 	TIPushClock 				; push clock to TOS
.2166	4c 29 10	jmp $1029			jmp 	NextCommand
.2169					TimeString:
.2169	fa		plx				plx
.216a	20 bd 21	jsr $21bd			jsr 	TIPushClock 				; push clock to TOS
.216d	20 92 21	jsr $2192			jsr 	_TSDivMod60 				; result in seconds
.2170	20 92 21	jsr $2192			jsr 	_TSDivMod60 				; seconds
.2173	48		pha				pha
.2174	20 92 21	jsr $2192			jsr 	_TSDivMod60 				; minutes
.2177	48		pha				pha
.2178	a9 18		lda #$18			lda 	#24 						; hours
.217a	20 94 21	jsr $2194			jsr 	_TSDivModA
.217d	48		pha				pha
.217e	a9 06		lda #$06			lda 	#6
.2180	20 18 20	jsr $2018			jsr 	StringAllocTemp
.2183	68		pla				pla
.2184	20 a4 21	jsr $21a4			jsr 	_TSWriteDecimal
.2187	68		pla				pla
.2188	20 a4 21	jsr $21a4			jsr 	_TSWriteDecimal
.218b	68		pla				pla
.218c	20 a4 21	jsr $21a4			jsr 	_TSWriteDecimal
.218f	4c 29 10	jmp $1029			jmp 	NextCommand
.2192					_TSDivMod60:
.2192	a9 3c		lda #$3c			lda 	#60
.2194					_TSDivModA:
.2194	e8		inx				inx
.2195	20 1b 2e	jsr $2e1b			jsr 	FloatSetByte
.2198	ca		dex				dex
.2199	20 af 29	jsr $29af			jsr 	Int32Divide
.219c	b5 40		lda $40,x			lda 	NSMantissa0,x 				; get modulus
.219e	48		pha				pha
.219f	20 9e 29	jsr $299e			jsr 	NSMCopyPlusTwoToZero
.21a2	68		pla				pla
.21a3	60		rts				rts
.21a4					_TSWriteDecimal:
.21a4	da		phx				phx
.21a5	a2 30		ldx #$30			ldx 	#'0'
.21a7					_TSWDLoop:
.21a7	c9 0a		cmp #$0a			cmp 	#10
.21a9	90 05		bcc $21b0			bcc 	_TSWDEnd
.21ab	e9 0a		sbc #$0a			sbc 	#10
.21ad	e8		inx				inx
.21ae	80 f7		bra $21a7			bra 	_TSWDLoop
.21b0					_TSWDEnd:
.21b0	48		pha				pha
.21b1	8a		txa				txa
.21b2	20 41 20	jsr $2041			jsr 	StringWriteChar
.21b5	68		pla				pla
.21b6	09 30		ora #$30			ora 	#'0'
.21b8	20 41 20	jsr $2041			jsr 	StringWriteChar
.21bb	fa		plx				plx
.21bc	60		rts				rts
.21bd					TIPushClock:
.21bd	5a		phy				phy
.21be	e8		inx				inx 								; push 0 on the stack
.21bf	20 19 2e	jsr $2e19			jsr 	FloatSetZero
.21c2	da		phx				phx
.21c3	20 ad 25	jsr $25ad			jsr 	XReadClock 					; read time into YXA
.21c6	86 2e		stx $2e				stx 	zTemp0
.21c8	fa		plx				plx
.21c9	95 40		sta $40,x			sta 	NSMantissa0,x
.21cb	a5 2e		lda $2e				lda 	zTemp0
.21cd	95 4c		sta $4c,x			sta 	NSMantissa1,x
.21cf	98		tya				tya
.21d0	95 58		sta $58,x			sta 	NSMantissa2,x
.21d2	7a		ply				ply
.21d3	60		rts				rts
.21d4					CommandTIWrite:
.21d4	fa		plx				plx
.21d5	b5 40		lda $40,x			lda 	NSMantissa0,x 				; copy string address to ZSTemp
.21d7	85 22		sta $22				sta 	zsTemp
.21d9	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.21db	85 23		sta $23				sta 	zsTemp+1
.21dd	b2 22		lda ($22)			lda 	(zsTemp) 					; check if it is six
.21df	c9 06		cmp #$06			cmp 	#6
.21e1	d0 59		bne $223c			bne 	_CTIWError
.21e3	20 19 2e	jsr $2e19			jsr 	FloatSetZero
.21e6	20 08 22	jsr $2208			jsr 	_CTIWDigitPair 				; do a digit pair 3 times
.21e9	20 08 22	jsr $2208			jsr 	_CTIWDigitPair
.21ec	20 08 22	jsr $2208			jsr 	_CTIWDigitPair
.21ef	a9 3c		lda #$3c			lda 	#60 						; multiply the result by 60.
.21f1	20 33 22	jsr $2233			jsr 	_CTIWMultiply
.21f4	da		phx				phx
.21f5	5a		phy				phy
.21f6	b5 4c		lda $4c,x			lda 	NSMantissa1,x 				; get time into YXA
.21f8	48		pha				pha
.21f9	b5 58		lda $58,x			lda 	NSMantissa2,x
.21fb	a8		tay				tay
.21fc	b5 40		lda $40,x			lda 	NSMantissa0,x
.21fe	fa		plx				plx
.21ff	20 b1 25	jsr $25b1			jsr 	XWriteClock 				; update the clock.
.2202	7a		ply				ply
.2203	fa		plx				plx
.2204	ca		dex				dex 								; throw result.
.2205	4c 29 10	jmp $1029			jmp 	NextCommand
.2208					_CTIWDigitPair:
.2208	a9 06		lda #$06			lda 	#6 							; x 6
.220a	20 33 22	jsr $2233			jsr 	_CTIWMultiply
.220d	20 19 22	jsr $2219			jsr 	_CTIWAddDigit 				; add digit
.2210	a9 0a		lda #$0a			lda 	#10 						; x 10
.2212	20 33 22	jsr $2233			jsr 	_CTIWMultiply
.2215	20 19 22	jsr $2219			jsr 	_CTIWAddDigit 				; add digit
.2218	60		rts				rts
.2219					_CTIWAddDigit:
.2219	e6 22		inc $22				inc 	zsTemp 						; pre-increment
.221b	d0 02		bne $221f			bne 	_CTIWASkip
.221d	e6 23		inc $23				inc 	zsTemp+1
.221f					_CTIWASkip:
.221f	b2 22		lda ($22)			lda 	(zsTemp) 					; read and validate it
.2221	38		sec				sec
.2222	e9 30		sbc #$30			sbc 	#"0"
.2224	90 16		bcc $223c			bcc 	_CTIWError
.2226	c9 0a		cmp #$0a			cmp 	#9+1
.2228	b0 12		bcs $223c			bcs 	_CTIWError
.222a	e8		inx				inx 								; store at +1
.222b	20 1b 2e	jsr $2e1b			jsr 	FloatSetByte
.222e	ca		dex				dex
.222f	20 a5 2b	jsr $2ba5			jsr 	FloatAddTopTwoStack
.2232	60		rts				rts
.2233					_CTIWMultiply:
.2233	e8		inx				inx
.2234	20 1b 2e	jsr $2e1b			jsr 	FloatSetByte
.2237	ca		dex				dex
.2238	20 26 2b	jsr $2b26			jsr 	FloatMultiplyShort
.223b	60		rts				rts
.223c					_CTIWError:
.223c	4c 8a 14	jmp $148a		jmp	ErrorV_value
.223f					UnaryUsr:
.223f	fa		plx				plx
.2240	5a		phy				phy
.2241	20 48 22	jsr $2248			jsr 	_UUCallVector
.2244	7a		ply				ply
.2245	4c 29 10	jmp $1029			jmp 	NextCommand
.2248					_UUCallVector:
.2248	6c 11 03	jmp ($0311)			jmp 	(USRRoutineAddress)
.224b					ValUnary:
.224b	fa		plx				plx
.224c	b5 40		lda $40,x			lda 	NSMantissa0,x
.224e	85 2e		sta $2e				sta 	zTemp0
.2250	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.2252	85 2f		sta $2f				sta 	zTemp0+1
.2254	20 5f 22	jsr $225f			jsr 	ValEvaluateZTemp0
.2257	b0 03		bcs $225c			bcs 	_VUError 					; couldn't convert
.2259	4c 29 10	jmp $1029			jmp 	NextCommand
.225c					_VUError:
.225c	4c 8a 14	jmp $148a		jmp	ErrorV_value
.225f					ValEvaluateZTemp0:
.225f	5a		phy				phy
.2260	b2 2e		lda ($2e)			lda 	(zTemp0) 					; check not empty string
.2262	f0 22		beq $2286			beq 	_VMCFail2
.2264	a0 00		ldy #$00			ldy 	#0 							; start position
.2266					_VMCSpaces:
.2266	c8		iny				iny 								; skip leading spaces
.2267	b1 2e		lda ($2e),y			lda 	(zTemp0),y
.2269	c9 20		cmp #$20			cmp 	#" "
.226b	f0 f9		beq $2266			beq 	_VMCSpaces
.226d	48		pha				pha 								; save first character
.226e	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.2270	d0 01		bne $2273			bne 	_VMCStart
.2272	c8		iny				iny 								; skip over - if so.
.2273					_VMCStart:
.2273	38		sec				sec 								; initialise first time round.
.2274					_VMCNext:
.2274	98		tya				tya 								; reached end of string
.2275	3a		dec a				dec 	a
.2276	52 2e		eor ($2e)			eor 	(zTemp0) 					; compare length preserve carry.
.2278	f0 0f		beq $2289			beq 	_VMCSuccess 				; successful.
.227a	b1 2e		lda ($2e),y			lda 	(zTemp0),y 					; encode a number.
.227c	c8		iny				iny
.227d	20 fd 2b	jsr $2bfd			jsr 	FloatEncode 				; send it to the number-builder
.2280	90 03		bcc $2285			bcc 	_VMCFail 					; if failed, give up.
.2282	18		clc				clc 								; next time round, countinue
.2283	80 ef		bra $2274			bra 	_VMCNext
.2285					_VMCFail:
.2285	68		pla				pla
.2286					_VMCFail2:
.2286	7a		ply				ply
.2287	38		sec				sec
.2288	60		rts				rts
.2289					_VMCSuccess:
.2289	a9 00		lda #$00			lda 	#0 							; construct final
.228b	20 fd 2b	jsr $2bfd			jsr 	FloatEncode 				; by sending a duff value.
.228e	68		pla				pla 								; if it was -ve
.228f	c9 2d		cmp #$2d			cmp 	#"-"
.2291	d0 03		bne $2296			bne 	_VMCNotNegative
.2293	20 db 2d	jsr $2ddb			jsr		FloatNegate 				; negate it.
.2296					_VMCNotNegative:
.2296	7a		ply				ply
.2297	18		clc				clc
.2298	60		rts				rts
.2299					VectorTable:
>2299	a4 19					.word	LinkFloatAdd             ; $80 +
>229b	ad 19					.word	LinkFloatSubtract        ; $81 -
>229d	b6 19					.word	LinkFloatMultiply        ; $82 *
>229f	bf 19					.word	LinkFloatDivide          ; $83 /
>22a1	ca 19					.word	LinkFloatPower           ; $84 ^
>22a3	bb 10					.word	BinaryAnd                ; $85 and
>22a5	bf 10					.word	BinaryOr                 ; $86 or
>22a7	d5 19					.word	LinkCompareGreater       ; $87 >
>22a9	de 19					.word	LinkCompareEqual         ; $88 =
>22ab	e7 19					.word	LinkCompareLess          ; $89 <
>22ad	f0 19					.word	LinkCompareGreaterEqual  ; $8a >=
>22af	f9 19					.word	LinkCompareNotEqual      ; $8b <>
>22b1	02 1a					.word	LinkCompareLessEqual     ; $8c <=
>22b3	a3 10					.word	AbsoluteTOS              ; $8d abs
>22b5	f6 10					.word	ArrayConvert             ; $8e array
>22b7	9e 11					.word	UnaryAsc                 ; $8f asc
>22b9	b9 11					.word	CommandAssert            ; $90 assert
>22bb	fa 11					.word	Unary16Bin               ; $91 bin$
>22bd	24 12					.word	PrintCharacter           ; $92 print.chr
>22bf	2e 12					.word	UnaryChr                 ; $93 chr$
>22c1	93 12					.word	CompareStrings           ; $94 s.cmp
>22c3	ac 15					.word	CommandFor               ; $95 for
>22c5	6f 16					.word	UnaryFre                 ; $96 fre
>22c7	87 16					.word	CommandGet               ; $97 get
>22c9	ad 16					.word	CommandReturn            ; $98 return
>22cb	f4 16					.word	Command_PSET             ; $99 pset
>22cd	0e 17					.word	Command_LINE             ; $9a line
>22cf	23 17					.word	Command_RECT             ; $9b rect
>22d1	32 17					.word	Command_FRAME            ; $9c frame
>22d3	41 17					.word	Command_CHAR             ; $9d char
>22d5	d8 17					.word	Unary16Hex               ; $9e hex$
>22d7	7f 18					.word	CommandInput             ; $9f input
>22d9	96 18					.word	CommandInputString       ; $a0 input$
>22db	af 18					.word	CommandInputReset        ; $a1 input.start
>22dd	93 19					.word	UnaryLen                 ; $a2 len
>22df	5f 1a					.word	LinkFloatCompare         ; $a3 f.cmp
>22e1	68 1a					.word	LinkDivideInt32          ; $a4 int.div
>22e3	ec 1a					.word	NegateTOS                ; $a5 negate
>22e5	f3 1a					.word	CommandNewLine           ; $a6 new.line
>22e7	fc 1a					.word	CommandNext              ; $a7 next
>22e9	e5 1b					.word	NotTOS                   ; $a8 not
>22eb	fc 1b					.word	CommandOn                ; $a9 on
>22ed	1a 1c					.word	CommandMoreOn            ; $aa moreon
>22ef	22 1c					.word	UnaryPeek                ; $ab peek
>22f1	37 1c					.word	CommandPOKE              ; $ac poke
>22f3	4f 1c					.word	UnaryPos                 ; $ad pos
>22f5	59 1c					.word	GetChannel               ; $ae getchannel
>22f7	64 1c					.word	SetChannel               ; $af setchannel
>22f9	87 1c					.word	PrintNumber              ; $b0 print.n
>22fb	a6 1c					.word	PrintString              ; $b1 print.s
>22fd	0d 1d					.word	CommandRead              ; $b2 read
>22ff	27 1d					.word	CommandReadString        ; $b3 read$
>2301	b2 1e					.word	UnaryRND                 ; $b4 rnd
>2303	21 1f					.word	StringConcatenate        ; $b5 concat
>2305	78 1f					.word	SignTOS                  ; $b6 sgn
>2307	9b 1f					.word	PrintTab                 ; $b7 print.tab
>2309	a9 1f					.word	PrintPos                 ; $b8 print.pos
>230b	ba 1f					.word	PrintSpace               ; $b9 print.spc
>230d	d3 1f					.word	Unary_Str                ; $ba str$
>230f	4e 20					.word	Unary_Left               ; $bb left$
>2311	5e 20					.word	Unary_Right              ; $bc right$
>2313	7a 20					.word	Unary_Mid                ; $bd mid$
>2315	ec 20					.word	CommandSwap              ; $be swap
>2317	62 21					.word	TimeTOS                  ; $bf ti
>2319	69 21					.word	TimeString               ; $c0 ti$
>231b	3f 22					.word	UnaryUsr                 ; $c1 usr
>231d	4b 22					.word	ValUnary                 ; $c2 val
>231f	a9 24					.word	CommandClose             ; $c3 close
>2321	bb 24					.word	CommandExit              ; $c4 exit
>2323	c1 24					.word	CommandDebug             ; $c5 debug
>2325	27 25					.word	CommandOpen              ; $c6 open
>2327	bb 25					.word	CommandScreen            ; $c7 screen
>2329	a2 27					.word	CommandVPOKE             ; $c8 vpoke
>232b	c7 27					.word	CommandVPEEK             ; $c9 vpeek
>232d	93 1f					.word	CommandShift             ; $ca .shift
>232f	67 10					.word	PushByteCommand          ; $cb .byte
>2331	7a 10					.word	PushWordCommand          ; $cc .word
>2333	c9 1c					.word	CommandPushN             ; $cd .float
>2335	ef 1c					.word	CommandPushS             ; $ce .string
>2337	1b 13					.word	CommandData              ; $cf .data
>2339	bf 16					.word	CommandGoto              ; $d0 .goto
>233b	a1 16					.word	CommandGosub             ; $d1 .gosub
>233d	d6 16					.word	CommandGotoZ             ; $d2 .goto.z
>233f	e5 16					.word	CommandGotoNZ            ; $d3 .goto.nz
>2341	a9 10					.word	CommandVarSpace          ; $d4 .varspace
.2343					ShiftVectorTable:
>2343	46 12					.word	CommandClr               ; $ca80 clr
>2345	24 13					.word	CommandDIM               ; $ca81 dim
>2347	15 14					.word	CommandEnd               ; $ca82 end
>2349	64 19					.word	UnaryJoy                 ; $ca83 joy
>234b	0b 1a					.word	LinkFloatIntegerPartDown ; $ca84 int
>234d	14 1a					.word	LinkFloatSquareRoot      ; $ca85 sqr
>234f	25 1a					.word	LinkFloatLogarithm       ; $ca86 log
>2351	30 1a					.word	LinkFloatExponent        ; $ca87 exp
>2353	39 1a					.word	LinkFloatCosine          ; $ca88 cos
>2355	42 1a					.word	LinkFloatSine            ; $ca89 sin
>2357	4b 1a					.word	LinkFloatTangent         ; $ca8a tan
>2359	54 1a					.word	LinkFloatArcTan          ; $ca8b atn
>235b	9c 1a					.word	XCommandMouse            ; $ca8c mouse
>235d	b1 1a					.word	XUnaryMB                 ; $ca8d mb
>235f	be 1a					.word	XUnaryMX                 ; $ca8e mx
>2361	cf 1a					.word	XUnaryMY                 ; $ca8f my
>2363	a0 1e					.word	CommandRestore           ; $ca90 restore
>2365	cf 1f					.word	CommandStop              ; $ca91 stop
>2367	2c 21					.word	CommandSYS               ; $ca92 sys
>2369	d4 21					.word	CommandTIWrite           ; $ca93 ti$.write
>236b	a1 23					.word	CommandWAIT              ; $ca94 wait
>236d	ec 24					.word	X16I2CPoke               ; $ca95 i2cpoke
>236f	0c 25					.word	X16I2CPeek               ; $ca96 i2cpeek
>2371	77 25					.word	CommandBank              ; $ca97 bank
>2373	ca 25					.word	XCommandSleep            ; $ca98 sleep
>2375	ee 25					.word	X16_Audio_FMINIT         ; $ca99 fminit
>2377	fc 25					.word	X16_Audio_FMNOTE         ; $ca9a fmnote
>2379	0e 26					.word	X16_Audio_FMDRUM         ; $ca9b fmdrum
>237b	20 26					.word	X16_Audio_FMINST         ; $ca9c fminst
>237d	32 26					.word	X16_Audio_FMVIB          ; $ca9d fmvib
>237f	44 26					.word	X16_Audio_FMFREQ         ; $ca9e fmfreq
>2381	55 26					.word	X16_Audio_FMVOL          ; $ca9f fmvol
>2383	67 26					.word	X16_Audio_FMPAN          ; $caa0 fmpan
>2385	79 26					.word	X16_Audio_FMPLAY         ; $caa1 fmplay
>2387	8a 26					.word	X16_Audio_FMCHORD        ; $caa2 fmchord
>2389	9b 26					.word	X16_Audio_FMPOKE         ; $caa3 fmpoke
>238b	ad 26					.word	X16_Audio_PSGINIT        ; $caa4 psginit
>238d	bb 26					.word	X16_Audio_PSGNOTE        ; $caa5 psgnote
>238f	cd 26					.word	X16_Audio_PSGVOL         ; $caa6 psgvol
>2391	df 26					.word	X16_Audio_PSGWAV         ; $caa7 psgwav
>2393	f1 26					.word	X16_Audio_PSGFREQ        ; $caa8 psgfreq
>2395	02 27					.word	X16_Audio_PSGPAN         ; $caa9 psgpan
>2397	14 27					.word	X16_Audio_PSGPLAY        ; $caaa psgplay
>2399	25 27					.word	X16_Audio_PSGCHORD       ; $caab psgchord
>239b	36 27					.word	CommandCls               ; $caac cls
>239d	3f 27					.word	CommandLocate            ; $caad locate
>239f	69 27					.word	CommandColor             ; $caae color
.23a1					CommandWAIT:
.23a1	fa		plx				plx
.23a2	b5 3e		lda $3e,x			lda 	NSMantissa0-2,x 			; get wait address
.23a4	85 2e		sta $2e				sta 	zTemp0
.23a6	b5 4a		lda $4a,x			lda 	NSMantissa1-2,x
.23a8	85 2f		sta $2f				sta 	zTemp0+1
.23aa					_WaitLoop:
.23aa	b2 2e		lda ($2e)			lda 	(zTemp0) 					; read it
.23ac	35 3f		and $3f,x			and 	NSMantissa0-1,x		 		; and with mask
.23ae	55 40		eor $40,x			eor 	NSMantissa0-0,x 			; toggle
.23b0	f0 f8		beq $23aa			beq 	_WaitLoop 					; keep going if zero
.23b2	ca		dex				dex 								; drop 3.
.23b3	ca		dex				dex
.23b4	ca		dex				dex
.23b5	4c 29 10	jmp $1029			jmp 	NextCommand
.23b8					WriteFloatCommand:
.23b8	fa		plx				plx
.23b9	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.23bb	85 2e		sta $2e				sta 	zTemp0 						; save in MSB
.23bd	88		dey				dey 								; get the upper 3 bits
.23be	b1 28		lda ($28),y			lda 	(codePtr),y
.23c0	29 07		and #$07			and 	#7
.23c2	c8		iny				iny
.23c3	c8		iny				iny
.23c4	06 2e		asl $2e				asl 	zTemp0 						; shift zTemp0:A left
.23c6	2a		rol a				rol 	a 							; carry will be clear.
.23c7	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.23ca	85 2f		sta $2f				sta 	zTemp0+1
.23cc	20 d2 23	jsr $23d2			jsr 	WriteFloatZTemp0Sub
.23cf	4c 29 10	jmp $1029			jmp 	NextCommand
.23d2					WriteFloatZTemp0Sub:
.23d2	5a		phy				phy 								; ldart write
.23d3	a0 01		ldy #$01			ldy 	#1
.23d5	b5 40		lda $40,x			lda 	NSMantissa0,x
.23d7	92 2e		sta ($2e)			sta 	(zTemp0)
.23d9	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.23db	91 2e		sta ($2e),y			sta 	(zTemp0),y
.23dd	c8		iny				iny
.23de	b5 58		lda $58,x			lda 	NSMantissa2,x
.23e0	91 2e		sta ($2e),y			sta 	(zTemp0),y
.23e2	c8		iny				iny
.23e3	b5 64		lda $64,x			lda 	NSMantissa3,x
.23e5	91 2e		sta ($2e),y			sta 	(zTemp0),y
.23e7	c8		iny				iny
.23e8	b5 70		lda $70,x			lda 	NSExponent,x
.23ea	91 2e		sta ($2e),y			sta 	(zTemp0),y
.23ec	c8		iny				iny
.23ed	b5 34		lda $34,x			lda 	NSStatus,x
.23ef	91 2e		sta ($2e),y			sta 	(zTemp0),y
.23f1	ca		dex				dex
.23f2	7a		ply				ply
.23f3	60		rts				rts
.23f4					WriteIntegerCommand:
.23f4	fa		plx				plx
.23f5	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.23f7	85 2e		sta $2e				sta 	zTemp0 						; save in MSB
.23f9	88		dey				dey 								; get the upper 3 bits
.23fa	b1 28		lda ($28),y			lda 	(codePtr),y
.23fc	29 07		and #$07			and 	#7
.23fe	c8		iny				iny
.23ff	c8		iny				iny
.2400	06 2e		asl $2e				asl 	zTemp0 						; shift zTemp0:A left
.2402	2a		rol a				rol 	a 							; carry will be clear.
.2403	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.2406	85 2f		sta $2f				sta 	zTemp0+1
.2408	20 0e 24	jsr $240e			jsr 	WriteIntegerZTemp0Sub
.240b	4c 29 10	jmp $1029			jmp 	NextCommand
.240e					WriteIntegerZTemp0Sub:
.240e	20 54 2a	jsr $2a54			jsr 	FloatIntegerPart
.2411	5a		phy				phy 								; start write
.2412	a0 01		ldy #$01			ldy 	#1
.2414	b5 34		lda $34,x			lda 	NSStatus,x 					; negate 2's comp if -ve
.2416	30 0b		bmi $2423			bmi 	_WIZNegative
.2418	b5 40		lda $40,x			lda 	NSMantissa0,x 				; +ve write
.241a	92 2e		sta ($2e)			sta 	(zTemp0)
.241c	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.241e	91 2e		sta ($2e),y			sta 	(zTemp0),y
.2420	7a		ply				ply
.2421	ca		dex				dex
.2422	60		rts				rts
.2423					_WIZNegative:
.2423	38		sec				sec 								; -ve read
.2424	a9 00		lda #$00			lda 	#0
.2426	f5 40		sbc $40,x			sbc 	NSMantissa0,x
.2428	92 2e		sta ($2e)			sta 	(zTemp0)
.242a	a9 00		lda #$00			lda 	#0
.242c	f5 4c		sbc $4c,x			sbc 	NSMantissa1,x
.242e	91 2e		sta ($2e),y			sta 	(zTemp0),y
.2430	7a		ply				ply
.2431	ca		dex				dex
.2432	60		rts				rts
.2433					WriteStringCommand:
.2433	fa		plx				plx
.2434	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.2436	85 2e		sta $2e				sta 	zTemp0 						; save in MSB
.2438	88		dey				dey 								; get the upper 3 bits
.2439	b1 28		lda ($28),y			lda 	(codePtr),y
.243b	29 07		and #$07			and 	#7
.243d	c8		iny				iny
.243e	c8		iny				iny
.243f	06 2e		asl $2e				asl 	zTemp0 						; shift zTemp0:A left
.2441	2a		rol a				rol 	a 							; carry will be clear.
.2442	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.2445	85 2f		sta $2f				sta 	zTemp0+1
.2447	20 4d 24	jsr $244d			jsr 	WriteStringZTemp0Sub
.244a	4c 29 10	jmp $1029			jmp 	NextCommand
.244d					WriteStringZTemp0Sub:
.244d	5a		phy				phy
.244e	a0 01		ldy #$01			ldy 	#1 							; if it is zero we must concrete whatever.
.2450	b2 2e		lda ($2e)			lda 	(zTemp0)
.2452	11 2e		ora ($2e),y			ora 	(zTemp0),y
.2454	f0 1e		beq $2474			beq 	_WSConcrete
.2456	b2 2e		lda ($2e)			lda 	(zTemp0) 					; put address of actual string in zTemp1
.2458	85 30		sta $30				sta 	zTemp1
.245a	b1 2e		lda ($2e),y			lda 	(zTemp0),y
.245c	85 31		sta $31				sta 	zTemp1+1
.245e	b5 40		lda $40,x			lda 	NSMantissa0,x 				; copy source to zTemp2
.2460	85 32		sta $32				sta 	zTemp2
.2462	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.2464	85 33		sta $33				sta 	zTemp2+1
.2466	b2 30		lda ($30)			lda 	(zTemp1) 					; space available
.2468	d2 32		cmp ($32)			cmp 	(zTemp2) 					; if >= required length then copy
.246a	b0 17		bcs $2483			bcs 	_WSCopy
.246c	a0 01		ldy #$01			ldy 	#1 							; set the 'available for reclaim' flag
.246e	b1 30		lda ($30),y			lda 	(zTemp1),y
.2470	09 80		ora #$80			ora 	#$80
.2472	91 30		sta ($30),y			sta 	(zTemp1),y
.2474					_WSConcrete:
.2474	b5 4c		lda $4c,x			lda 	NSMantissa1,x 				; string in YA
.2476	a8		tay				tay
.2477	b5 40		lda $40,x			lda 	NSMantissa0,x
.2479	20 d5 12	jsr $12d5			jsr 	StringConcrete
.247c	92 2e		sta ($2e)			sta 	(zTemp0) 					; save returned address
.247e	98		tya				tya
.247f	a0 01		ldy #$01			ldy 	#1
.2481	91 2e		sta ($2e),y			sta 	(zTemp0),y
.2483					_WSCopy
.2483	18		clc				clc  								; copy target+2 to zTemp2
.2484	b2 2e		lda ($2e)			lda 	(zTemp0)
.2486	69 02		adc #$02			adc 	#2
.2488	85 32		sta $32				sta 	zTemp2
.248a	a0 01		ldy #$01			ldy 	#1
.248c	b1 2e		lda ($2e),y			lda 	(zTemp0),y
.248e	69 00		adc #$00			adc 	#0
.2490	85 33		sta $33				sta 	zTemp2+1
.2492	b5 40		lda $40,x			lda 	NSMantissa0,x 				; copy source to zTemp1
.2494	85 30		sta $30				sta 	zTemp1
.2496	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.2498	85 31		sta $31				sta 	zTemp1+1
.249a	b2 30		lda ($30)			lda 	(zTemp1) 					; length of string .. 0 inclusive
.249c	a8		tay				tay
.249d					_WSCopyLoop:
.249d	b1 30		lda ($30),y			lda 	(zTemp1),y
.249f	91 32		sta ($32),y			sta 	(zTemp2),y
.24a1	88		dey				dey
.24a2	c0 ff		cpy #$ff			cpy 	#$FF
.24a4	d0 f7		bne $249d			bne 	_WSCopyLoop
.24a6	ca		dex				dex
.24a7	7a		ply				ply
.24a8	60		rts				rts
.24a9					CommandClose:
.24a9	fa		plx				plx
.24aa	20 3c 19	jsr $193c			jsr 	GetInteger8Bit 				; channel to close
.24ad	cd 5d 04	cmp $045d			cmp 	currentChannel 				; is it the current channel
.24b0	d0 03		bne $24b5			bne 	_CCNotCurrent
.24b2	9c 5d 04	stz $045d			stz 	currentChannel 				; effectively disables CMD
.24b5					_CCNotCurrent:
.24b5	20 c3 ff	jsr $ffc3			jsr 	X16_CLOSE 					; close the file
.24b8	4c 29 10	jmp $1029			jmp 	NextCommand
.24bb					CommandExit:
.24bb	fa		plx				plx
.24bc	86 2e		stx $2e				stx 	zTemp0 						; stack position.
.24be	4c ff ff	jmp $ffff			jmp 	$FFFF 						; exits the emulator.
.24c1					CommandDebug:
.24c1	fa		plx				plx
>24c2	db						.byte 	$DB 						; causes a break in the emulator
.24c3	4c 29 10	jmp $1029			jmp 	NextCommand
.24c6					XGetCharacterFromChannel:
.24c6	da		phx				phx
.24c7	5a		phy				phy
.24c8	e0 00		cpx #$00			cpx 	#0 							; is it default
.24ca	d0 05		bne $24d1			bne 	_XGetChannel
.24cc	20 cc ff	jsr $ffcc			jsr 	X16_CLRCHN 					; set default channel
.24cf	80 08		bra $24d9			bra 	_XGetChar
.24d1					_XGetChannel:
.24d1	20 c6 ff	jsr $ffc6			jsr 	X16_CHKIN					; CHKIN set channel
.24d4	20 b7 ff	jsr $ffb7			jsr 	X16_READST 					; check okay
.24d7	d0 06		bne $24df			bne 	_XGCError
.24d9					_XGetChar:
.24d9	20 e4 ff	jsr $ffe4			jsr 	X16_GETIN
.24dc	7a		ply				ply
.24dd	fa		plx				plx
.24de	60		rts				rts
.24df					_XGCError:
.24df	4c 96 15	jmp $1596		jmp	ErrorV_channel
.24e2					XGetHPos:
.24e2	da		phx				phx
.24e3	5a		phy				phy
.24e4	38		sec				sec
.24e5	20 f0 ff	jsr $fff0			jsr 	X16_PLOT
.24e8	98		tya				tya
.24e9	7a		ply				ply
.24ea	fa		plx				plx
.24eb	60		rts				rts
.24ec					X16I2CPoke:
.24ec	fa		plx				plx
.24ed	5a		phy				phy
.24ee	20 3c 19	jsr $193c			jsr 	GetInteger8Bit 				; value
.24f1	48		pha				pha
.24f2	ca		dex				dex
.24f3	20 3c 19	jsr $193c			jsr 	GetInteger8Bit 				; register
.24f6	48		pha				pha
.24f7	ca		dex				dex
.24f8	20 3c 19	jsr $193c			jsr 	GetInteger8Bit 				; device
.24fb	aa		tax				tax
.24fc	7a		ply				ply
.24fd	68		pla				pla
.24fe	20 c9 fe	jsr $fec9			jsr 	X16_i2c_write_byte 			; write the byte out.
.2501	b0 06		bcs $2509			bcs 	X16I2CError
.2503	7a		ply				ply
.2504	a2 ff		ldx #$ff			ldx 	#$FF
.2506	4c 29 10	jmp $1029			jmp 	NextCommand
.2509					X16I2CError:
.2509	4c 96 15	jmp $1596		jmp	ErrorV_channel
.250c					X16I2CPeek:
.250c	fa		plx				plx
.250d	da		phx				phx
.250e	5a		phy				phy
.250f	20 3c 19	jsr $193c			jsr 	GetInteger8Bit 				; register
.2512	48		pha				pha
.2513	ca		dex				dex
.2514	20 3c 19	jsr $193c			jsr 	GetInteger8Bit 				; device
.2517	aa		tax				tax 								; X device
.2518	7a		ply				ply 								; Y register
.2519	20 c6 fe	jsr $fec6			jsr 	X16_i2c_read_byte 			; read I2C
.251c	b0 eb		bcs $2509			bcs 	X16I2CError
.251e	7a		ply				ply 								; restore Y/X
.251f	fa		plx				plx
.2520	ca		dex				dex 								; drop TOS (register)
.2521	20 1b 2e	jsr $2e1b			jsr 	FloatSetByte 				; write read value to TOS.
.2524	4c 29 10	jmp $1029			jmp 	NextCommand
.2527					CommandOpen:
.2527	fa		plx				plx
.2528	a5 43		lda $43				lda 	NSMantissa0+3  				; point zTemp0 to string head, also in XY
.252a	85 2e		sta $2e				sta 	zTemp0
.252c	aa		tax				tax
.252d	a5 4f		lda $4f				lda 	NSMantissa1+3
.252f	85 2f		sta $2f				sta 	zTemp0+1
.2531	a8		tay				tay
.2532	e8		inx				inx 								; XY points to first character
.2533	d0 01		bne $2536			bne 	_CONoCarry
.2535	c8		iny				iny
.2536					_CONoCarry:
.2536	b2 2e		lda ($2e)			lda 	(zTemp0) 					; get length of filename
.2538	20 bd ff	jsr $ffbd			jsr 	X16_SETNAM
.253b	a5 40		lda $40				lda 	NSMantissa0+0
.253d	a6 41		ldx $41				ldx 	NSMantissa0+1
.253f	a4 42		ldy $42				ldy 	NSMantissa0+2
.2541	20 ba ff	jsr $ffba			jsr 	X16_SETLFS
.2544	20 c0 ff	jsr $ffc0			jsr 	X16_OPEN
.2547	b0 03		bcs $254c			bcs 	_COError
.2549	4c 29 10	jmp $1029			jmp 	NextCommand
.254c					_COError:
.254c	4c 96 15	jmp $1596		jmp	ErrorV_channel
.254f					XPokeMemory:
.254f	86 2e		stx $2e				stx 	zTemp0
.2551	84 2f		sty $2f				sty 	zTemp0+1
.2553	a4 00		ldy $00				ldy 	SelectRAMBank 				; old RAM bank in Y
.2555	ae 6b 05	ldx $056b			ldx 	ramBank 					; switch to BANKed RAMBank if not $FF
.2558	e0 ff		cpx #$ff			cpx 	#$FF
.255a	f0 02		beq $255e			beq 	_XPMNoSwitch
.255c	86 00		stx $00				stx 	SelectRAMBank
.255e					_XPMNoSwitch:
.255e	92 2e		sta ($2e)			sta 	(zTemp0) 					; do the POKE
.2560	84 00		sty $00				sty 	SelectRAMBank 				; reselect previous RAM Bank.
.2562					_XPMExit:
.2562	60		rts				rts
.2563					XPeekMemory:
.2563	86 2e		stx $2e				stx 	zTemp0
.2565	84 2f		sty $2f				sty 	zTemp0+1
.2567	a4 00		ldy $00				ldy 	SelectRAMBank 				; old RAM bank in Y
.2569	ae 6b 05	ldx $056b			ldx 	ramBank 					; switch to BANKed RAMBank if not $FF
.256c	e0 ff		cpx #$ff			cpx 	#$FF
.256e	f0 02		beq $2572			beq 	_XPMNoSwitch
.2570	86 00		stx $00				stx 	SelectRAMBank
.2572					_XPMNoSwitch:
.2572	b2 2e		lda ($2e)			lda 	(zTemp0) 					; do the PEEK
.2574	84 00		sty $00				sty 	SelectRAMBank 				; reselect previous RAM bank.
.2576	60		rts				rts
.2577					CommandBank:
.2577	fa		plx				plx
.2578	a5 40		lda $40				lda 	NSMantissa0 				; RAM bank
.257a	8d 6b 05	sta $056b			sta 	ramBank 					; store & make current
.257d	85 00		sta $00				sta 	SelectRAMBank
.257f	a5 41		lda $41				lda 	NSMantissa0+1 		 		; ROM specified
.2581	c9 ff		cmp #$ff			cmp 	#$FF
.2583	f0 03		beq $2588			beq 	_CBNoUpdate
.2585	8d 6c 05	sta $056c			sta 	romBank 					; this doesn't set the hardware page.
.2588					_CBNoUpdate:
.2588	a2 ff		ldx #$ff			ldx 	#$FF
.258a	4c 29 10	jmp $1029			jmp 	NextCommand
.056b					ramBank:
>056b							.fill 	1
.056c					romBank:
>056c							.fill 	1
.258d					XPrintCharacterToChannel:
.258d	48		pha				pha
.258e	da		phx				phx
.258f	5a		phy				phy
.2590	48		pha				pha  								; save char
.2591	e0 00		cpx #$00			cpx 	#0 							; check default (0)
.2593	d0 05		bne $259a			bne 	_XPCNotDefault
.2595	20 cc ff	jsr $ffcc			jsr 	X16_CLRCHN					; set default channel
.2598	80 08		bra $25a2			bra 	_XPCSend
.259a					_XPCNotDefault:
.259a	20 c9 ff	jsr $ffc9			jsr 	X16_CHKOUT 					; CHKOUT set channel
.259d	20 b7 ff	jsr $ffb7			jsr 	X16_READST 					; check okay
.25a0	d0 08		bne $25aa			bne 	_XPCError
.25a2					_XPCSend:
.25a2	68		pla				pla 								; restore character
.25a3	20 d2 ff	jsr $ffd2			jsr 	X16_BSOUT 					; print
.25a6	7a		ply				ply
.25a7	fa		plx				plx
.25a8	68		pla				pla
.25a9	60		rts				rts
.25aa					_XPCError:
.25aa	4c 96 15	jmp $1596		jmp	ErrorV_channel
.25ad					XReadClock:
.25ad	20 de ff	jsr $ffde			jsr 	X16_RDTIM
.25b0	60		rts				rts
.25b1					XWriteClock:
.25b1	48		pha				pha
.25b2	da		phx				phx
.25b3	5a		phy				phy
.25b4	20 db ff	jsr $ffdb			jsr 	X16_SETTIM
.25b7	7a		ply				ply
.25b8	fa		plx				plx
.25b9	68		pla				pla
.25ba	60		rts				rts
.25bb					CommandScreen:
.25bb	fa		plx				plx
.25bc	da		phx				phx
.25bd	5a		phy				phy
.25be	20 3c 19	jsr $193c			jsr 	GetInteger8Bit
.25c1	18		clc				clc
.25c2	20 5f ff	jsr $ff5f			jsr 	X16_screen_mode
.25c5	7a		ply				ply
.25c6	fa		plx				plx
.25c7	4c 29 10	jmp $1029			jmp 	NextCommand
.25ca					XCommandSleep:
.25ca	fa		plx				plx
.25cb	5a		phy				phy
.25cc	20 54 2a	jsr $2a54			jsr 	FloatIntegerPart
.25cf	ca		dex				dex
.25d0	20 ad 25	jsr $25ad			jsr 	XReadClock 					; read clock to YXA
.25d3	18		clc				clc 								; calculate end time in zTemp0
.25d4	65 40		adc $40				adc 	NSMantissa0
.25d6	85 2e		sta $2e				sta 	zTemp0
.25d8	8a		txa				txa
.25d9	65 4c		adc $4c				adc 	NSMantissa1
.25db	85 2f		sta $2f				sta 	zTemp0+1
.25dd					_XCWait:
.25dd	20 ad 25	jsr $25ad			jsr 	XReadClock 					; and wait for it.
.25e0	c5 2e		cmp $2e				cmp 	zTemp0
.25e2	d0 f9		bne $25dd			bne 	_XCWait
.25e4	e4 2f		cpx $2f				cpx 	zTemp0+1
.25e6	d0 f5		bne $25dd			bne 	_XCWait
.25e8	a2 ff		ldx #$ff			ldx 	#$FF
.25ea	7a		ply				ply
.25eb	4c 29 10	jmp $1029			jmp 	NextCommand
.25ee					X16_Audio_FMINIT:
.25ee	fa		plx				plx
.25ef	5a		phy			phy
.25f0	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>25f3	63 c0					.word	X16A_ym_init
>25f5	0a					.byte	X16_AudioCodeBank
.25f6	a2 ff		ldx #$ff		ldx	#$FF
.25f8	7a		ply			ply
.25f9	4c 29 10	jmp $1029			jmp 	NextCommand
.25fc					X16_Audio_FMNOTE:
.25fc	fa		plx				plx
.25fd	5a		phy			phy
.25fe	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_8
.2601	18		clc			clc
.2602	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>2605	03 c0					.word	X16A_bas_fmnote
>2607	0a					.byte	X16_AudioCodeBank
.2608	a2 ff		ldx #$ff		ldx	#$FF
.260a	7a		ply			ply
.260b	4c 29 10	jmp $1029			jmp 	NextCommand
.260e					X16_Audio_FMDRUM:
.260e	fa		plx				plx
.260f	5a		phy			phy
.2610	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_8
.2613	18		clc			clc
.2614	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>2617	6f c0					.word	X16A_ym_playdrum
>2619	0a					.byte	X16_AudioCodeBank
.261a	a2 ff		ldx #$ff		ldx	#$FF
.261c	7a		ply			ply
.261d	4c 29 10	jmp $1029			jmp 	NextCommand
.2620					X16_Audio_FMINST:
.2620	fa		plx				plx
.2621	5a		phy			phy
.2622	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_8
.2625	38		sec			sec
.2626	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>2629	69 c0					.word	X16A_ym_loadpatch
>262b	0a					.byte	X16_AudioCodeBank
.262c	a2 ff		ldx #$ff		ldx	#$FF
.262e	7a		ply			ply
.262f	4c 29 10	jmp $1029			jmp 	NextCommand
.2632					X16_Audio_FMVIB:
.2632	fa		plx				plx
.2633	5a		phy			phy
.2634	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_8
.2637	18		clc			clc
.2638	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>263b	09 c0					.word	X16A_bas_fmvib
>263d	0a					.byte	X16_AudioCodeBank
.263e	a2 ff		ldx #$ff		ldx	#$FF
.2640	7a		ply			ply
.2641	4c 29 10	jmp $1029			jmp 	NextCommand
.2644					X16_Audio_FMFREQ:
.2644	fa		plx				plx
.2645	5a		phy			phy
.2646	20 ca 11	jsr $11ca		jsr		X16_Audio_Parameters8_16
.2649	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>264c	00 c0					.word	X16A_bas_fmfreq
>264e	0a					.byte	X16_AudioCodeBank
.264f	a2 ff		ldx #$ff		ldx	#$FF
.2651	7a		ply			ply
.2652	4c 29 10	jmp $1029			jmp 	NextCommand
.2655					X16_Audio_FMVOL:
.2655	fa		plx				plx
.2656	5a		phy			phy
.2657	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_8
.265a	18		clc			clc
.265b	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>265e	75 c0					.word	X16A_ym_setatten
>2660	0a					.byte	X16_AudioCodeBank
.2661	a2 ff		ldx #$ff		ldx	#$FF
.2663	7a		ply			ply
.2664	4c 29 10	jmp $1029			jmp 	NextCommand
.2667					X16_Audio_FMPAN:
.2667	fa		plx				plx
.2668	5a		phy			phy
.2669	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_8
.266c	18		clc			clc
.266d	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>2670	7e c0					.word	X16A_ym_setpan
>2672	0a					.byte	X16_AudioCodeBank
.2673	a2 ff		ldx #$ff		ldx	#$FF
.2675	7a		ply			ply
.2676	4c 29 10	jmp $1029			jmp 	NextCommand
.2679					X16_Audio_FMPLAY:
.2679	fa		plx				plx
.267a	5a		phy			phy
.267b	20 e1 11	jsr $11e1		jsr		X16_Audio_Parameters8_String
.267e	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>2681	06 c0					.word	X16A_bas_fmplaystring
>2683	0a					.byte	X16_AudioCodeBank
.2684	a2 ff		ldx #$ff		ldx	#$FF
.2686	7a		ply			ply
.2687	4c 29 10	jmp $1029			jmp 	NextCommand
.268a					X16_Audio_FMCHORD:
.268a	fa		plx				plx
.268b	5a		phy			phy
.268c	20 e1 11	jsr $11e1		jsr		X16_Audio_Parameters8_String
.268f	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>2692	8d c0					.word	X16A_bas_fmchordstring
>2694	0a					.byte	X16_AudioCodeBank
.2695	a2 ff		ldx #$ff		ldx	#$FF
.2697	7a		ply			ply
.2698	4c 29 10	jmp $1029			jmp 	NextCommand
.269b					X16_Audio_FMPOKE:
.269b	fa		plx				plx
.269c	5a		phy			phy
.269d	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_8
.26a0	18		clc			clc
.26a1	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>26a4	8a c0					.word	X16A_ym_write
>26a6	0a					.byte	X16_AudioCodeBank
.26a7	a2 ff		ldx #$ff		ldx	#$FF
.26a9	7a		ply			ply
.26aa	4c 29 10	jmp $1029			jmp 	NextCommand
.26ad					X16_Audio_PSGINIT:
.26ad	fa		plx				plx
.26ae	5a		phy			phy
.26af	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>26b2	4b c0					.word	X16A_psg_init
>26b4	0a					.byte	X16_AudioCodeBank
.26b5	a2 ff		ldx #$ff		ldx	#$FF
.26b7	7a		ply			ply
.26b8	4c 29 10	jmp $1029			jmp 	NextCommand
.26bb					X16_Audio_PSGNOTE:
.26bb	fa		plx				plx
.26bc	5a		phy			phy
.26bd	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_8
.26c0	18		clc			clc
.26c1	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>26c4	12 c0					.word	X16A_bas_psgnote
>26c6	0a					.byte	X16_AudioCodeBank
.26c7	a2 ff		ldx #$ff		ldx	#$FF
.26c9	7a		ply			ply
.26ca	4c 29 10	jmp $1029			jmp 	NextCommand
.26cd					X16_Audio_PSGVOL:
.26cd	fa		plx				plx
.26ce	5a		phy			phy
.26cf	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_8
.26d2	18		clc			clc
.26d3	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>26d6	54 c0					.word	X16A_psg_setatten
>26d8	0a					.byte	X16_AudioCodeBank
.26d9	a2 ff		ldx #$ff		ldx	#$FF
.26db	7a		ply			ply
.26dc	4c 29 10	jmp $1029			jmp 	NextCommand
.26df					X16_Audio_PSGWAV:
.26df	fa		plx				plx
.26e0	5a		phy			phy
.26e1	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_8
.26e4	18		clc			clc
.26e5	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>26e8	15 c0					.word	X16A_bas_psgwav
>26ea	0a					.byte	X16_AudioCodeBank
.26eb	a2 ff		ldx #$ff		ldx	#$FF
.26ed	7a		ply			ply
.26ee	4c 29 10	jmp $1029			jmp 	NextCommand
.26f1					X16_Audio_PSGFREQ:
.26f1	fa		plx				plx
.26f2	5a		phy			phy
.26f3	20 ca 11	jsr $11ca		jsr		X16_Audio_Parameters8_16
.26f6	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>26f9	0f c0					.word	X16A_bas_psgfreq
>26fb	0a					.byte	X16_AudioCodeBank
.26fc	a2 ff		ldx #$ff		ldx	#$FF
.26fe	7a		ply			ply
.26ff	4c 29 10	jmp $1029			jmp 	NextCommand
.2702					X16_Audio_PSGPAN:
.2702	fa		plx				plx
.2703	5a		phy			phy
.2704	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_8
.2707	18		clc			clc
.2708	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>270b	5a c0					.word	X16A_psg_setpan
>270d	0a					.byte	X16_AudioCodeBank
.270e	a2 ff		ldx #$ff		ldx	#$FF
.2710	7a		ply			ply
.2711	4c 29 10	jmp $1029			jmp 	NextCommand
.2714					X16_Audio_PSGPLAY:
.2714	fa		plx				plx
.2715	5a		phy			phy
.2716	20 e1 11	jsr $11e1		jsr		X16_Audio_Parameters8_String
.2719	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>271c	18 c0					.word	X16A_bas_psgplaystring
>271e	0a					.byte	X16_AudioCodeBank
.271f	a2 ff		ldx #$ff		ldx	#$FF
.2721	7a		ply			ply
.2722	4c 29 10	jmp $1029			jmp 	NextCommand
.2725					X16_Audio_PSGCHORD:
.2725	fa		plx				plx
.2726	5a		phy			phy
.2727	20 e1 11	jsr $11e1		jsr		X16_Audio_Parameters8_String
.272a	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>272d	90 c0					.word	X16A_bas_psgchordstring
>272f	0a					.byte	X16_AudioCodeBank
.2730	a2 ff		ldx #$ff		ldx	#$FF
.2732	7a		ply			ply
.2733	4c 29 10	jmp $1029			jmp 	NextCommand
.2736					CommandCls:
.2736	fa		plx				plx
.2737	a9 93		lda #$93			lda 	#147
.2739	20 8d 25	jsr $258d			jsr 	XPrintCharacterToChannel
.273c	4c 29 10	jmp $1029			jmp 	NextCommand
.273f					CommandLocate:
.273f	fa		plx				plx
.2740	20 54 2a	jsr $2a54			jsr 	FloatIntegerPart
.2743	ca		dex				dex
.2744	20 54 2a	jsr $2a54			jsr 	FloatIntegerPart
.2747	ca		dex				dex
.2748	a9 13		lda #$13			lda 	#$13 						; home.
.274a	20 8d 25	jsr $258d			jsr 	XPrintCharacterToChannel
.274d	a9 1d		lda #$1d			lda 	#$1D 						; do cursor rights
.274f	a6 40		ldx $40				ldx 	NSMantissa0
.2751	20 5e 27	jsr $275e			jsr 	_CLOutputXA
.2754	a9 11		lda #$11			lda 	#$11 						; do cursor downs.
.2756	a6 41		ldx $41				ldx 	NSMantissa0+1
.2758	20 5e 27	jsr $275e			jsr 	_CLOutputXA
.275b	4c 29 10	jmp $1029			jmp 	NextCommand
.275e					_CLOutputXA:
.275e	ca		dex				dex
.275f	f0 07		beq $2768			beq 	_CLOExit
.2761	30 05		bmi $2768			bmi 	_CLOExit
.2763	20 8d 25	jsr $258d			jsr 	XPrintCharacterToChannel
.2766	80 f6		bra $275e			bra 	_CLOutputXA
.2768					_CLOExit:
.2768	60		rts				rts
.2769					CommandColor:
.2769	fa		plx				plx
.276a	20 54 2a	jsr $2a54			jsr 	FloatIntegerPart
.276d	ca		dex				dex
.276e	20 54 2a	jsr $2a54			jsr 	FloatIntegerPart
.2771	ca		dex				dex
.2772	a5 41		lda $41				lda 	NSMantissa0+1 				; bgr specified
.2774	c9 ff		cmp #$ff			cmp 	#$FF
.2776	f0 08		beq $2780			beq 	_CCNoBGR 					; if so, change background
.2778	20 88 27	jsr $2788			jsr 	_CCSetColour
.277b	a9 01		lda #$01			lda 	#$01 						; swap FGR/BGR
.277d	20 8d 25	jsr $258d			jsr 	XPrintCharacterToChannel
.2780					_CCNoBGR:
.2780	a5 40		lda $40				lda 	NSMantissa0
.2782	20 88 27	jsr $2788			jsr 	_CCSetColour
.2785	4c 29 10	jmp $1029			jmp 	NextCommand
.2788					_CCSetColour:
.2788	29 0f		and #$0f			and 	#15 						; look up in control codes table.
.278a	aa		tax				tax
.278b	bd 92 27	lda $2792,x			lda 	_CCCommandTable,x
.278e	20 8d 25	jsr $258d			jsr 	XPrintCharacterToChannel
.2791	60		rts				rts
.2792					_CCCommandTable:
>2792	90 05 1c 9f 9c 1e 1f 9e				.byte	 $90,$05,$1c,$9f,$9c,$1e,$1f,$9e
>279a	81 95 96 97 98 99 9a 9b				.byte	 $81,$95,$96,$97,$98,$99,$9a,$9b
.27a2					CommandVPOKE:
.27a2	fa		plx				plx
.27a3	20 3c 19	jsr $193c			jsr 	GetInteger8Bit 				; poke value
.27a6	48		pha				pha
.27a7	ca		dex				dex
.27a8	20 54 2a	jsr $2a54			jsr 	FloatIntegerPart
.27ab	b5 40		lda $40,x			lda 	NSMantissa0,x
.27ad	8d 20 9f	sta $9f20			sta 	VRAMLow0
.27b0	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.27b2	8d 21 9f	sta $9f21			sta 	VRAMMed0
.27b5	ca		dex				dex
.27b6	20 54 2a	jsr $2a54			jsr 	FloatIntegerPart
.27b9	20 3c 19	jsr $193c			jsr 	GetInteger8Bit
.27bc	8d 22 9f	sta $9f22			sta 	VRAMHigh0
.27bf	ca		dex				dex
.27c0	68		pla				pla 								; poke value back
.27c1	8d 23 9f	sta $9f23			sta 	VRAMData0					; and write it out.
.27c4	4c 29 10	jmp $1029			jmp 	NextCommand
.27c7					CommandVPEEK:
.27c7	fa		plx				plx
.27c8	20 54 2a	jsr $2a54			jsr 	FloatIntegerPart
.27cb	b5 40		lda $40,x			lda 	NSMantissa0,x
.27cd	8d 20 9f	sta $9f20			sta 	VRAMLow0
.27d0	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.27d2	8d 21 9f	sta $9f21			sta 	VRAMMed0
.27d5	ca		dex				dex
.27d6	20 54 2a	jsr $2a54			jsr 	FloatIntegerPart
.27d9	20 3c 19	jsr $193c			jsr 	GetInteger8Bit
.27dc	8d 22 9f	sta $9f22			sta 	VRAMHigh0
.27df	ad 23 9f	lda $9f23			lda 	VRAMData0					; read data
.27e2	20 1b 2e	jsr $2e1b			jsr 	FloatSetByte 				; return as byte
.27e5	4c 29 10	jmp $1029			jmp 	NextCommand

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/common.library

=$1000					CodeStart = $1000
=$22					ZeroPageMandatory = $22
=$400					MemoryStorage = $400
.0028					codePtr:
>0028							.fill 	2
.002a					codePage:
>002a							.fill 	1
.002b					objPtr:
>002b							.fill 	2
.002d					objPage:
>002d							.fill 	1
.002e					zTemp0:
>002e							.fill 	2
.0030					zTemp1:
>0030							.fill 	2
.0032					zTemp2:
>0032							.fill 	2
=$80					PCD_STARTBINARY = $80
=$8d					PCD_ENDBINARY = $8d
=$8d					PCD_STARTCOMMAND = $8d
=$ca					PCD_ENDCOMMAND = $ca
=$ca					PCD_STARTSYSTEM = $ca
=$d5					PCD_ENDSYSTEM = $d5
=$80					PCD_PLUS             = $80 ; +
=$81					PCD_MINUS            = $81 ; -
=$82					PCD_TIMES            = $82 ; *
=$83					PCD_DIVIDE           = $83 ; /
=$84					PCD_POWER            = $84 ; ^
=$85					PCD_AND              = $85 ; and
=$86					PCD_OR               = $86 ; or
=$87					PCD_GREATER          = $87 ; >
=$88					PCD_EQUAL            = $88 ; =
=$89					PCD_LESS             = $89 ; <
=$8a					PCD_GREATEREQUAL     = $8a ; >=
=$8b					PCD_LESSGREATER      = $8b ; <>
=$8c					PCD_LESSEQUAL        = $8c ; <=
=$8d					PCD_ABS              = $8d ; abs
=$8e					PCD_ARRAY            = $8e ; array
=$8f					PCD_ASC              = $8f ; asc
=$90					PCD_ASSERT           = $90 ; assert
=$91					PCD_BINDOLLAR        = $91 ; bin$
=$92					PCD_PRINTCMD_CHR     = $92 ; print.chr
=$93					PCD_CHRDOLLAR        = $93 ; chr$
=$94					PCD_SCMD_CMP         = $94 ; s.cmp
=$95					PCD_FOR              = $95 ; for
=$96					PCD_FRE              = $96 ; fre
=$97					PCD_GET              = $97 ; get
=$98					PCD_RETURN           = $98 ; return
=$99					PCD_PSET             = $99 ; pset
=$9a					PCD_LINE             = $9a ; line
=$9b					PCD_RECT             = $9b ; rect
=$9c					PCD_FRAME            = $9c ; frame
=$9d					PCD_CHAR             = $9d ; char
=$9e					PCD_HEXDOLLAR        = $9e ; hex$
=$9f					PCD_INPUT            = $9f ; input
=$a0					PCD_INPUTDOLLAR      = $a0 ; input$
=$a1					PCD_INPUTCMD_START   = $a1 ; input.start
=$a2					PCD_LEN              = $a2 ; len
=$a3					PCD_FCMD_CMP         = $a3 ; f.cmp
=$a4					PCD_INTCMD_DIV       = $a4 ; int.div
=$a5					PCD_NEGATE           = $a5 ; negate
=$a6					PCD_NEWCMD_LINE      = $a6 ; new.line
=$a7					PCD_NEXT             = $a7 ; next
=$a8					PCD_NOT              = $a8 ; not
=$a9					PCD_ON               = $a9 ; on
=$aa					PCD_MOREON           = $aa ; moreon
=$ab					PCD_PEEK             = $ab ; peek
=$ac					PCD_POKE             = $ac ; poke
=$ad					PCD_POS              = $ad ; pos
=$ae					PCD_GETCHANNEL       = $ae ; getchannel
=$af					PCD_SETCHANNEL       = $af ; setchannel
=$b0					PCD_PRINTCMD_N       = $b0 ; print.n
=$b1					PCD_PRINTCMD_S       = $b1 ; print.s
=$b2					PCD_READ             = $b2 ; read
=$b3					PCD_READDOLLAR       = $b3 ; read$
=$b4					PCD_RND              = $b4 ; rnd
=$b5					PCD_CONCAT           = $b5 ; concat
=$b6					PCD_SGN              = $b6 ; sgn
=$b7					PCD_PRINTCMD_TAB     = $b7 ; print.tab
=$b8					PCD_PRINTCMD_POS     = $b8 ; print.pos
=$b9					PCD_PRINTCMD_SPC     = $b9 ; print.spc
=$ba					PCD_STRDOLLAR        = $ba ; str$
=$bb					PCD_LEFTDOLLAR       = $bb ; left$
=$bc					PCD_RIGHTDOLLAR      = $bc ; right$
=$bd					PCD_MIDDOLLAR        = $bd ; mid$
=$be					PCD_SWAP             = $be ; swap
=$bf					PCD_TI               = $bf ; ti
=$c0					PCD_TIDOLLAR         = $c0 ; ti$
=$c1					PCD_USR              = $c1 ; usr
=$c2					PCD_VAL              = $c2 ; val
=$c3					PCD_CLOSE            = $c3 ; close
=$c4					PCD_EXIT             = $c4 ; exit
=$c5					PCD_DEBUG            = $c5 ; debug
=$c6					PCD_OPEN             = $c6 ; open
=$c7					PCD_SCREEN           = $c7 ; screen
=$c8					PCD_VPOKE            = $c8 ; vpoke
=$c9					PCD_VPEEK            = $c9 ; vpeek
=$ca					PCD_CMD_SHIFT        = $ca ; .shift
=$cb					PCD_CMD_BYTE         = $cb ; .byte
=$cc					PCD_CMD_WORD         = $cc ; .word
=$cd					PCD_CMD_FLOAT        = $cd ; .float
=$ce					PCD_CMD_STRING       = $ce ; .string
=$cf					PCD_CMD_DATA         = $cf ; .data
=$d0					PCD_CMD_GOTO         = $d0 ; .goto
=$d1					PCD_CMD_GOSUB        = $d1 ; .gosub
=$d2					PCD_CMD_GOTOCMD_Z    = $d2 ; .goto.z
=$d3					PCD_CMD_GOTOCMD_NZ   = $d3 ; .goto.nz
=$d4					PCD_CMD_VARSPACE     = $d4 ; .varspace
=$ca80					PCD_CLR              = $ca80 ; clr
=$ca81					PCD_DIM              = $ca81 ; dim
=$ca82					PCD_END              = $ca82 ; end
=$ca83					PCD_JOY              = $ca83 ; joy
=$ca84					PCD_INT              = $ca84 ; int
=$ca85					PCD_SQR              = $ca85 ; sqr
=$ca86					PCD_LOG              = $ca86 ; log
=$ca87					PCD_EXP              = $ca87 ; exp
=$ca88					PCD_COS              = $ca88 ; cos
=$ca89					PCD_SIN              = $ca89 ; sin
=$ca8a					PCD_TAN              = $ca8a ; tan
=$ca8b					PCD_ATN              = $ca8b ; atn
=$ca8c					PCD_MOUSE            = $ca8c ; mouse
=$ca8d					PCD_MB               = $ca8d ; mb
=$ca8e					PCD_MX               = $ca8e ; mx
=$ca8f					PCD_MY               = $ca8f ; my
=$ca90					PCD_RESTORE          = $ca90 ; restore
=$ca91					PCD_STOP             = $ca91 ; stop
=$ca92					PCD_SYS              = $ca92 ; sys
=$ca93					PCD_TIDOLLARCMD_WRITE = $ca93 ; ti$.write
=$ca94					PCD_WAIT             = $ca94 ; wait
=$ca95					PCD_I2CPOKE          = $ca95 ; i2cpoke
=$ca96					PCD_I2CPEEK          = $ca96 ; i2cpeek
=$ca97					PCD_BANK             = $ca97 ; bank
=$ca98					PCD_SLEEP            = $ca98 ; sleep
=$ca99					PCD_FMINIT           = $ca99 ; fminit
=$ca9a					PCD_FMNOTE           = $ca9a ; fmnote
=$ca9b					PCD_FMDRUM           = $ca9b ; fmdrum
=$ca9c					PCD_FMINST           = $ca9c ; fminst
=$ca9d					PCD_FMVIB            = $ca9d ; fmvib
=$ca9e					PCD_FMFREQ           = $ca9e ; fmfreq
=$ca9f					PCD_FMVOL            = $ca9f ; fmvol
=$caa0					PCD_FMPAN            = $caa0 ; fmpan
=$caa1					PCD_FMPLAY           = $caa1 ; fmplay
=$caa2					PCD_FMCHORD          = $caa2 ; fmchord
=$caa3					PCD_FMPOKE           = $caa3 ; fmpoke
=$caa4					PCD_PSGINIT          = $caa4 ; psginit
=$caa5					PCD_PSGNOTE          = $caa5 ; psgnote
=$caa6					PCD_PSGVOL           = $caa6 ; psgvol
=$caa7					PCD_PSGWAV           = $caa7 ; psgwav
=$caa8					PCD_PSGFREQ          = $caa8 ; psgfreq
=$caa9					PCD_PSGPAN           = $caa9 ; psgpan
=$caaa					PCD_PSGPLAY          = $caaa ; psgplay
=$caab					PCD_PSGCHORD         = $caab ; psgchord
=$caac					PCD_CLS              = $caac ; cls
=$caad					PCD_LOCATE           = $caad ; locate
=$caae					PCD_COLOR            = $caae ; color
.27e8					MoveObjectForward:
.27e8	b2 2b		lda ($2b)			lda 	(objPtr) 					; get next
.27ea	c9 ff		cmp #$ff			cmp 	#$FF
.27ec	f0 36		beq $2824			beq 	_MOFEnd
.27ee	c9 40		cmp #$40			cmp 	#$40 						; 00-3F
.27f0	90 24		bcc $2816			bcc 	_MOFAdvance1 				; forward 1
.27f2	a0 02		ldy #$02			ldy 	#2 							; 40-6F
.27f4	c9 70		cmp #$70			cmp 	#$70 						; forward 2
.27f6	90 20		bcc $2818			bcc 	_MOFAdvanceY
.27f8	c9 ca		cmp #$ca			cmp 	#PCD_STARTSYSTEM 			; 70 - System tokens.
.27fa	90 1a		bcc $2816			bcc 	_MOFAdvance1 				; forward 1
.27fc	a8		tay				tay 								; read the size.
.27fd	b9 62 27	lda $2762,y			lda 	MOFSizeTable-PCD_STARTSYSTEM,y
.2800	a8		tay				tay
.2801	c8		iny				iny 								; add 1 for the system token.
.2802	d0 14		bne $2818			bne 	_MOFAdvanceY 				; if 0, was $FF thus a string/data skip.
.2804	a0 01		ldy #$01			ldy 	#1 							; get length byte
.2806	b1 2b		lda ($2b),y			lda 	(objPtr),y
.2808	a8		tay				tay 								; into Y.
.2809	18		clc				clc
.280a	a5 2b		lda $2b				lda 	objPtr						; add 2 to the object pointer
.280c	69 02		adc #$02			adc 	#2
.280e	85 2b		sta $2b				sta 	objPtr
.2810	90 02		bcc $2814			bcc 	_MOFNoCarry1
.2812	e6 2c		inc $2c				inc 	objPtr+1
.2814					_MOFNoCarry1:
.2814	80 02		bra $2818			bra 	_MOFAdvanceY
.2816					_MOFAdvance1:
.2816	a0 01		ldy #$01			ldy 	#1
.2818					_MOFAdvanceY:
.2818	98		tya				tya 								; add X to objPtr
.2819	18		clc				clc
.281a	65 2b		adc $2b				adc 	objPtr
.281c	85 2b		sta $2b				sta 	objPtr
.281e	90 02		bcc $2822			bcc 	_MOFNoCarry2
.2820	e6 2c		inc $2c				inc 	objPtr+1
.2822					_MOFNoCarry2:
.2822	18		clc				clc 								; not completed.
.2823	60		rts				rts
.2824					_MOFEnd:
.2824	e6 2b		inc $2b				inc 	objPtr
.2826	d0 02		bne $282a			bne 	_MOFENoCarry
.2828	e6 2c		inc $2c				inc 	objPtr+1
.282a					_MOFENoCarry:
.282a	38		sec				sec
.282b	60		rts				rts
.282c					MOFSizeTable:
>282c	01					.byte	1         	; $ca .shift
>282d	01					.byte	1         	; $cb .byte
>282e	02					.byte	2         	; $cc .word
>282f	05					.byte	5         	; $cd .float
>2830	ff					.byte	255       	; $ce .string
>2831	ff					.byte	255       	; $cf .data
>2832	03					.byte	3         	; $d0 .goto
>2833	03					.byte	3         	; $d1 .gosub
>2834	03					.byte	3         	; $d2 .goto.z
>2835	03					.byte	3         	; $d3 .goto.nz
>2836	02					.byte	2         	; $d4 .varspace

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library

=12					MathStackSize = 12
=$40					NSSString = $40 							; string vs typemask
=$00					NSSIFloat = $00 							; ifloat vs typemask
=$20					NSSIInt16 = $20								; when set, a reference is a 16 bit reference (e.g. a%)
=$40					NSSTypeMask = $40
=$80					NSSArray = $80  							; array (in variable code)
.0034					NSStatus:
>0034							.fill 	MathStackSize
.0040					NSMantissa0:
>0040							.fill 	MathStackSize 				; (this is my integer mantissa system)
.004c					NSMantissa1:
>004c							.fill 	MathStackSize
.0058					NSMantissa2:
>0058							.fill 	MathStackSize
.0064					NSMantissa3:
>0064							.fill 	MathStackSize
.0070					NSExponent:
>0070							.fill 	MathStackSize
.056d					numberBuffer:
>056d							.fill 	34
.2837					FloatSubtract:
.2837	b5 34		lda $34,x			lda 	NSStatus,x 					; negate top of stack
.2839	49 80		eor #$80			eor 	#$80
.283b	95 34		sta $34,x			sta 	NSStatus,x					; and fall through.
.283d					FloatAdd:
.283d	ca		dex				dex
.283e	b5 70		lda $70,x			lda 	NSExponent,x 				; can use optimised.
.2840	15 71		ora $71,x			ora 	NSExponent+1,x
.2842	15 64		ora $64,x			ora 	NSMantissa3,x
.2844	15 65		ora $65,x			ora 	NSMantissa3+1,x
.2846	d0 04		bne $284c			bne 	_FAUseFloat
.2848	20 d9 2b	jsr $2bd9			jsr 	FloatInt32Add 				; use the int32 one.
.284b	60		rts				rts
.284c					_FAUseFloat:
.284c	20 6e 2b	jsr $2b6e			jsr 	FloatNormalise 				; normalise S[X]
.284f	f0 51		beq $28a2			beq 	_FAReturn1
.2851	e8		inx				inx 								; normalise S[X+1]
.2852	20 6e 2b	jsr $2b6e			jsr 	FloatNormalise
.2855	ca		dex				dex
.2856	c9 00		cmp #$00			cmp 	#0
.2858	f0 60		beq $28ba			beq 	_FAExit 					; if so, just return A
.285a	b5 70		lda $70,x			lda 	NSExponent,x 				; are the exponents the same ?
.285c	d5 71		cmp $71,x			cmp 	NSExponent+1,x
.285e	f0 18		beq $2878			beq 	_FAExponentsEqual
.2860	b5 70		lda $70,x			lda 	NSExponent,x 				; work out the larger exponent
.2862	a8		tay				tay
.2863	38		sec				sec 								; do a signed comparison of the exponents.
.2864	f5 71		sbc $71,x			sbc 	NSExponent+1,x
.2866	50 02		bvc $286a			bvc 	_FANoSignedChange
.2868	49 80		eor #$80			eor 	#$80
.286a					_FANoSignedChange:
.286a	29 80		and #$80			and 	#$80
.286c	10 02		bpl $2870			bpl 	_FAHaveMax
.286e	b4 71		ldy $71,x			ldy 	NSExponent+1,x
.2870					_FAHaveMax:
.2870	20 bb 28	jsr $28bb			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.2873	e8		inx				inx
.2874	20 bb 28	jsr $28bb			jsr 	_FAShiftToExponent
.2877	ca		dex				dex
.2878					_FAExponentsEqual:
.2878	b5 34		lda $34,x			lda 	NSStatus,x 					; are the signs the same
.287a	55 35		eor $35,x			eor 	NSStatus+1,x
.287c	30 0e		bmi $288c			bmi 	_FADifferentSigns
.287e	20 a5 2b	jsr $2ba5			jsr 	FloatAddTopTwoStack 		; do the add of the mantissae
.2881	b5 64		lda $64,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.2883	10 35		bpl $28ba			bpl 	_FAExit 					; if no, we are done.
.2885	20 32 2e	jsr $2e32			jsr 	FloatShiftRight 				; shift A right, renormalising it.
.2888	f6 70		inc $70,x			inc 	NSExponent,x 				; bump the exponent and exit
.288a	80 2e		bra $28ba			bra 	_FAExit
.288c					_FADifferentSigns:
.288c	20 bf 2b	jsr $2bbf			jsr 	FloatSubTopTwoStack 		; subtract mantissa B from A
.288f	b5 64		lda $64,x			lda 	NSMantissa3,x 				; is the result negative ?
.2891	10 06		bpl $2899			bpl 	_FACheckZero 				; if no, check for -0
.2893	20 db 2d	jsr $2ddb			jsr 	FloatNegate 					; netate result
.2896	20 e2 2d	jsr $2de2			jsr 	FloatNegateMantissa 			; negate (2'c) the mantissa
.2899					_FACheckZero:
.2899	20 3b 2e	jsr $2e3b			jsr 	FloatIsZero	 				; check for -0
.289c	d0 1c		bne $28ba			bne 	_FAExit
.289e	74 34		stz $34,x			stz 	NSStatus,x
.28a0	80 18		bra $28ba			bra 	_FAExit
.28a2					_FAReturn1:
.28a2	b5 41		lda $41,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.28a4	95 40		sta $40,x			sta 	NSMantissa0,x
.28a6	b5 4d		lda $4d,x			lda 	NSMantissa1+1,x
.28a8	95 4c		sta $4c,x			sta 	NSMantissa1,x
.28aa	b5 59		lda $59,x			lda 	NSMantissa2+1,x
.28ac	95 58		sta $58,x			sta 	NSMantissa2,x
.28ae	b5 65		lda $65,x			lda 	NSMantissa3+1,x
.28b0	95 64		sta $64,x			sta 	NSMantissa3,x
.28b2	b5 71		lda $71,x			lda 	NSExponent+1,x
.28b4	95 70		sta $70,x			sta 	NSExponent,x
.28b6	b5 35		lda $35,x			lda 	NSStatus+1,x
.28b8	95 34		sta $34,x			sta 	NSStatus,x
.28ba					_FAExit:
.28ba	60		rts				rts
.28bb					_FAShiftToExponent:
.28bb					_FAShiftToExponent2:
.28bb	98		tya				tya 								; compare Y to exponent
.28bc	d5 70		cmp $70,x			cmp 	NSExponent,x 				; reached the exponent required ?
.28be	f0 07		beq $28c7			beq 	_FASEExit 					; exit if so.
.28c0	20 32 2e	jsr $2e32			jsr 	FloatShiftRight	 			; shift the mantissa right
.28c3	f6 70		inc $70,x			inc 	NSExponent,x 				; increment exponent
.28c5	80 f4		bra $28bb			bra 	_FAShiftToExponent2
.28c7					_FASEExit:
.28c7	60		rts				rts
.28c8					CompareEqual:
.28c8	b5 40		lda $40,x			lda 	NSMantissa0,x
.28ca	d0 09		bne $28d5			bne 	ReturnFalse
.28cc					ReturnTrue:
.28cc	a9 01		lda #$01			lda 	#1
.28ce	95 40		sta $40,x			sta 	NSMantissa0,x
.28d0	a9 80		lda #$80			lda 	#$80
.28d2	95 34		sta $34,x			sta 	NSStatus,x
.28d4	60		rts				rts
.28d5					ReturnFalse:
.28d5	74 40		stz $40,x			stz 	NSMantissa0,x
.28d7	60		rts				rts
.28d8					CompareNotEqual:
.28d8	b5 40		lda $40,x			lda 	NSMantissa0,x
.28da	d0 f0		bne $28cc			bne 	ReturnTrue
.28dc	80 f7		bra $28d5			bra 	ReturnFalse
.28de					CompareLess:
.28de	b5 40		lda $40,x			lda 	NSMantissa0,x
.28e0	c9 ff		cmp #$ff			cmp 	#$FF
.28e2	f0 e8		beq $28cc			beq 	ReturnTrue
.28e4	80 ef		bra $28d5			bra 	ReturnFalse
.28e6					CompareGreater:
.28e6	b5 40		lda $40,x			lda 	NSMantissa0,x
.28e8	c9 01		cmp #$01			cmp 	#$01
.28ea	f0 e0		beq $28cc			beq 	ReturnTrue
.28ec	80 e7		bra $28d5			bra 	ReturnFalse
.28ee					CompareLessEqual:
.28ee	b5 40		lda $40,x			lda 	NSMantissa0,x
.28f0	c9 01		cmp #$01			cmp 	#$01
.28f2	d0 d8		bne $28cc			bne 	ReturnTrue
.28f4	80 df		bra $28d5			bra 	ReturnFalse
.28f6					CompareGreaterEqual:
.28f6	b5 40		lda $40,x			lda 	NSMantissa0,x
.28f8	c9 ff		cmp #$ff			cmp 	#$FF
.28fa	d0 d0		bne $28cc			bne 	ReturnTrue
.28fc	80 d7		bra $28d5			bra 	ReturnFalse
.28fe					FloatCompare:
.28fe	b5 70		lda $70,x			lda 	NSExponent,x 				; float comparison.
.2900	15 6f		ora $6f,x			ora 	NSExponent-1,x 				; integer if both integer.
.2902	48		pha				pha
.2903	20 37 28	jsr $2837			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.2906	68		pla				pla
.2907	d0 0c		bne $2915			bne 	_FCCompareFloat
.2909	b5 40		lda $40,x			lda 	NSMantissa0,x
.290b	15 4c		ora $4c,x			ora 	NSMantissa1,x
.290d	15 58		ora $58,x			ora 	NSMantissa2,x
.290f	15 64		ora $64,x			ora 	NSMantissa3,x
.2911	f0 14		beq $2927			beq 	_FCExit 					; if zero, return zero
.2913	80 0a		bra $291f			bra 	_FCSign
.2915					_FCCompareFloat:
.2915	b5 4c		lda $4c,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.2917	29 f0		and #$f0			and 	#$F0
.2919	15 58		ora $58,x			ora 	NSMantissa2,x
.291b	15 64		ora $64,x			ora 	NSMantissa3,x
.291d	f0 08		beq $2927			beq 	_FCExit 					; zero, so approximately identical
.291f					_FCSign:
.291f	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.2921	34 34		bit $34,x			bit 	NSStatus,x
.2923	10 02		bpl $2927			bpl 	_FCExit
.2925					_FCNegative:
.2925	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.2927					_FCExit:
.2927	20 1b 2e	jsr $2e1b			jsr 	FloatSetByte 				; set the result 255,0,1
.292a	60		rts				rts
.292b					FloatScalarTable:
>292b	66 66 66 66				.dword $66666666 ; 0.1
>292f	de					.byte $de
>2930	1f 85 eb 51				.dword $51eb851f ; 0.01
>2934	db					.byte $db
>2935	4c 37 89 41				.dword $4189374c ; 0.001
>2939	d8					.byte $d8
>293a	ac 8b db 68				.dword $68db8bac ; 0.0001
>293e	d4					.byte $d4
>293f	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>2943	d1					.byte $d1
>2944	83 de 1b 43				.dword $431bde83 ; 1e-06
>2948	ce					.byte $ce
>2949	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>294d	ca					.byte $ca
>294e	89 3b e6 55				.dword $55e63b89 ; 1e-08
>2952	c7					.byte $c7
>2953	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>2957	c4					.byte $c4
>2958	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>295c	c0					.byte $c0
>295d	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>2961	bd					.byte $bd
.2962					FloatDivide:
.2962	48		pha				pha
.2963	20 6e 2b	jsr $2b6e			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.2966	ca		dex				dex
.2967	c9 00		cmp #$00			cmp 	#0
.2969	f0 1e		beq $2989			beq 	_FDZero
.296b	20 6e 2b	jsr $2b6e			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.296e	f0 16		beq $2986			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.2970	20 d1 29	jsr $29d1			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.2973	20 9e 29	jsr $299e			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.2976	20 6e 2b	jsr $2b6e			jsr		FloatNormalise 				; renormalise
.2979	20 64 2b	jsr $2b64			jsr 	FloatCalculateSign 			; calculate result sign
.297c	b5 70		lda $70,x			lda 	NSExponent,x 				; calculate exponent
.297e	38		sec				sec
.297f	f5 71		sbc $71,x			sbc 	NSExponent+1,x
.2981	38		sec				sec
.2982	e9 1e		sbc #$1e			sbc 	#30
.2984	95 70		sta $70,x			sta 	NSExponent,x
.2986					_FDExit:
.2986	68		pla				pla
.2987	18		clc				clc
.2988	60		rts				rts
.2989					_FDZero:
.2989	68		pla				pla
.298a	38		sec				sec
.298b	60		rts				rts
.298c					DivideInt32:
.298c	20 54 2a	jsr $2a54			jsr 	FloatIntegerPart 			; make both integers
.298f	ca		dex				dex
.2990	20 54 2a	jsr $2a54			jsr 	FloatIntegerPart
.2993	20 af 29	jsr $29af			jsr 	Int32Divide 				; divide
.2996	20 9e 29	jsr $299e			jsr 	NSMCopyPlusTwoToZero 		; copy result
.2999	20 64 2b	jsr $2b64			jsr 	FloatCalculateSign 			; calculate result sign
.299c	18		clc				clc
.299d	60		rts				rts
.299e					NSMCopyPlusTwoToZero:
.299e	b5 42		lda $42,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.29a0	95 40		sta $40,x			sta 	NSMantissa0,x
.29a2	b5 4e		lda $4e,x			lda 	NSMantissa1+2,x
.29a4	95 4c		sta $4c,x			sta 	NSMantissa1,x
.29a6	b5 5a		lda $5a,x			lda 	NSMantissa2+2,x
.29a8	95 58		sta $58,x			sta 	NSMantissa2,x
.29aa	b5 66		lda $66,x			lda 	NSMantissa3+2,x
.29ac	95 64		sta $64,x			sta 	NSMantissa3,x
.29ae	60		rts				rts
.29af					Int32Divide:
.29af	48		pha				pha 								; save AXY
.29b0	5a		phy				phy
.29b1	20 fc 2d	jsr $2dfc			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.29b4	20 15 2e	jsr $2e15			jsr 	FloatSetZeroMantissaOnly 	; set S[X] to zero
.29b7	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.29b9					_I32DivideLoop:
.29b9	e8		inx				inx
.29ba	e8		inx				inx
.29bb	20 28 2e	jsr $2e28			jsr 	FloatShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.29be	ca		dex				dex
.29bf	ca		dex				dex
.29c0	20 29 2e	jsr $2e29			jsr 	FloatRotateLeft
.29c3	20 ef 29	jsr $29ef			jsr 	FloatDivideCheck 			; check if subtract possible
.29c6	90 02		bcc $29ca			bcc 	_I32DivideNoCarryIn
.29c8	f6 42		inc $42,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.29ca					_I32DivideNoCarryIn:
.29ca	88		dey				dey 								; loop round till division completed.
.29cb	d0 ec		bne $29b9			bne 	_I32DivideLoop
.29cd	7a		ply				ply 								; restore AXY and exit
.29ce	68		pla				pla
.29cf	18		clc				clc
.29d0	60		rts				rts
.29d1					Int32ShiftDivide:
.29d1	48		pha				pha 								; save AY
.29d2	5a		phy				phy
.29d3	e8		inx				inx 								; clear S[X+2]
.29d4	e8		inx				inx
.29d5	20 19 2e	jsr $2e19			jsr 	FloatSetZero
.29d8	ca		dex				dex
.29d9	ca		dex				dex
.29da	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.29dc					_I32SDLoop:
.29dc	20 ef 29	jsr $29ef			jsr 	FloatDivideCheck 			; check if subtract possible
.29df	e8		inx				inx
.29e0	e8		inx				inx
.29e1	20 29 2e	jsr $2e29			jsr 	FloatRotateLeft				; shift 64 bit FPA left, rotating carry in
.29e4	ca		dex				dex
.29e5	ca		dex				dex
.29e6	20 29 2e	jsr $2e29			jsr 	FloatRotateLeft
.29e9	88		dey				dey 	 							; do 31 times
.29ea	d0 f0		bne $29dc			bne 	_I32SDLoop
.29ec	7a		ply				ply 								; restore AY and exit
.29ed	68		pla				pla
.29ee	60		rts				rts
.29ef					FloatDivideCheck:
.29ef	20 bf 2b	jsr $2bbf			jsr 	FloatSubTopTwoStack 		; subtract Stack[X+1] from Stack[X+0]
.29f2	b0 04		bcs $29f8			bcs 	_DCSExit 					; if carry set, then could do, exit
.29f4	20 a5 2b	jsr $2ba5			jsr 	FloatAddTopTwoStack 		; add it back in
.29f7	18		clc				clc 								; and return False
.29f8					_DCSExit:
.29f8	60		rts				rts
.29f9					FloatFractionalPart:
.29f9	5a		phy				phy
.29fa	b5 34		lda $34,x			lda 	NSStatus,x 					; take absolute value
.29fc	29 7f		and #$7f			and 	#$7F
.29fe	95 34		sta $34,x			sta 	NSStatus,x
.2a00	20 6e 2b	jsr $2b6e			jsr 	FloatNormalise
.2a03	b5 70		lda $70,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.2a05	38		sec				sec
.2a06	e9 e0		sbc #$e0			sbc 	#$E0
.2a08	90 29		bcc $2a33			bcc 	_FFPExit 					; already fractional
.2a0a	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.2a0c	b0 22		bcs $2a30			bcs 	_FFPZero
.2a0e	a8		tay				tay 								; put count to do in Y
.2a0f	b5 64		lda $64,x			lda 	NSMantissa3,x 				; do each in turn.
.2a11	20 38 2a	jsr $2a38			jsr 	_FFPPartial
.2a14	95 64		sta $64,x			sta 	NSMantissa3,x
.2a16	b5 58		lda $58,x			lda 	NSMantissa2,x
.2a18	20 38 2a	jsr $2a38			jsr 	_FFPPartial
.2a1b	95 58		sta $58,x			sta 	NSMantissa2,x
.2a1d	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.2a1f	20 38 2a	jsr $2a38			jsr 	_FFPPartial
.2a22	95 4c		sta $4c,x			sta 	NSMantissa1,x
.2a24	b5 40		lda $40,x			lda 	NSMantissa0,x
.2a26	20 38 2a	jsr $2a38			jsr 	_FFPPartial
.2a29	95 40		sta $40,x			sta 	NSMantissa0,x
.2a2b	20 3b 2e	jsr $2e3b			jsr 	FloatIsZero 					; zeroed check.
.2a2e	d0 03		bne $2a33			bne 	_FFPExit
.2a30					_FFPZero:
.2a30	20 19 2e	jsr $2e19			jsr 	FloatSetZero
.2a33					_FFPExit:
.2a33	20 6e 2b	jsr $2b6e			jsr 	FloatNormalise
.2a36	7a		ply				ply
.2a37	60		rts				rts
.2a38					_FFPPartial:
.2a38	c0 00		cpy #$00			cpy 	#0 							; no more to do
.2a3a	f0 17		beq $2a53			beq 	_FFFPPExit
.2a3c	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.2a3e	b0 0c		bcs $2a4c			bcs 	_FFFPPWholeByte
.2a40	5a		phy				phy
.2a41					_FFFPPLeft:
.2a41	0a		asl a				asl 	a
.2a42	88		dey				dey
.2a43	d0 fc		bne $2a41			bne 	_FFFPPLeft
.2a45	7a		ply				ply
.2a46					_FFFPPRight:
.2a46	4a		lsr a				lsr 	a
.2a47	88		dey				dey
.2a48	d0 fc		bne $2a46			bne 	_FFFPPRight
.2a4a	80 07		bra $2a53			bra 	_FFFPPExit
.2a4c					_FFFPPWholeByte:
.2a4c	98		tya				tya 								; subtract 8 from count
.2a4d	38		sec				sec
.2a4e	e9 08		sbc #$08			sbc 	#8
.2a50	a8		tay				tay
.2a51	a9 00		lda #$00			lda 	#0 							; and clear all
.2a53					_FFFPPExit:
.2a53	60		rts				rts
.2a54					FloatIntegerPart:
.2a54	48		pha				pha
.2a55	b5 70		lda $70,x			lda 	NSExponent,x 				; is it integer already ?
.2a57	f0 1d		beq $2a76			beq 	_FIPExit 					; if so do nothing
.2a59	20 3b 2e	jsr $2e3b			jsr 	FloatIsZero 				; is it zero ?
.2a5c	f0 15		beq $2a73			beq 	_FIPZero 					; if so return zero.
.2a5e	20 6e 2b	jsr $2b6e			jsr 	FloatNormalise 				; normalise
.2a61	f0 10		beq $2a73			beq 	_FIPZero 					; normalised to zero, exit zero
.2a63					_FIPShift:
.2a63	b5 70		lda $70,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.2a65	10 07		bpl $2a6e			bpl 	_FIPCheckZero
.2a67	20 32 2e	jsr $2e32			jsr 	FloatShiftRight 			; shift mantissa right
.2a6a	f6 70		inc $70,x			inc 	NSExponent,x 				; bump exponent
.2a6c	80 f5		bra $2a63			bra 	_FIPShift
.2a6e					_FIPCheckZero:
.2a6e	20 3b 2e	jsr $2e3b			jsr 	FloatIsZero 				; avoid -0 problem
.2a71	d0 03		bne $2a76			bne 	_FIPExit 					; set to zero if mantissa zero.
.2a73					_FIPZero:
.2a73	20 19 2e	jsr $2e19			jsr 	FloatSetZero
.2a76					_FIPExit:
.2a76	68		pla				pla
.2a77	60		rts				rts
.2a78					FloatIntegerPartDown:
.2a78	48		pha				pha
.2a79	5a		phy				phy
.2a7a	b5 70		lda $70,x			lda 	NSExponent,x 				; is it integer already ?
.2a7c	f0 36		beq $2ab4			beq 	_FIPExit 					; if so do nothing
.2a7e	20 3b 2e	jsr $2e3b			jsr 	FloatIsZero 				; is it zero ?
.2a81	f0 2e		beq $2ab1			beq 	_FIPZero 					; if so return zero.
.2a83	20 6e 2b	jsr $2b6e			jsr 	FloatNormalise 				; normalise
.2a86	f0 29		beq $2ab1			beq 	_FIPZero 					; normalised to zero, exit zero
.2a88	a0 00		ldy #$00			ldy 	#0 							; reset the count of bits.
.2a8a					_FIPShift:
.2a8a	b5 70		lda $70,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.2a8c	10 0a		bpl $2a98			bpl 	_FIPCheckDown
.2a8e	20 32 2e	jsr $2e32			jsr 	FloatShiftRight 			; shift mantissa right
.2a91	90 01		bcc $2a94			bcc 	_FIPNoFrac 					; shifted a zero out ?
.2a93	c8		iny				iny
.2a94					_FIPNoFrac:
.2a94	f6 70		inc $70,x			inc 	NSExponent,x 				; bump exponent
.2a96	80 f2		bra $2a8a			bra 	_FIPShift
.2a98					_FIPCheckDown:
.2a98	c0 00		cpy #$00			cpy 	#0 							; were there any fractional bits.
.2a9a	f0 10		beq $2aac			beq 	_FIPCheckZero
.2a9c	34 34		bit $34,x			bit 	NSStatus,x 					; +ve
.2a9e	10 0c		bpl $2aac			bpl 	_FIPCheckZero
.2aa0	e8		inx				inx 								; -ve so round *down*.
.2aa1	a9 01		lda #$01			lda 	#1
.2aa3	20 1b 2e	jsr $2e1b			jsr 	FloatSetByte
.2aa6	20 db 2d	jsr $2ddb			jsr 	FloatNegate
.2aa9	20 3d 28	jsr $283d			jsr 	FloatAdd
.2aac					_FIPCheckZero:
.2aac	20 3b 2e	jsr $2e3b			jsr 	FloatIsZero 				; avoid -0 problem
.2aaf	d0 03		bne $2ab4			bne 	_FIPExit 					; set to zero if mantissa zero.
.2ab1					_FIPZero:
.2ab1	20 19 2e	jsr $2e19			jsr 	FloatSetZero
.2ab4					_FIPExit:
.2ab4	7a		ply				ply
.2ab5	68		pla				pla
.2ab6	60		rts				rts
.2ab7					FloatInt8Multiply:
.2ab7	5a		phy				phy
.2ab8	b5 40		lda $40,x			lda 	NSMantissa0,x 				; right shifted multiplier in Y
.2aba	a8		tay				tay
.2abb	74 40		stz $40,x			stz 	NSMantissa0,x 				; zero the result (already 8 bit constant)
.2abd					_FI8MLoop:
.2abd	98		tya				tya 								; shift right shifter right into carry
.2abe	4a		lsr a				lsr 	a
.2abf	a8		tay				tay
.2ac0	90 0d		bcc $2acf			bcc 	_FI8MNoAdd
.2ac2	18		clc				clc
.2ac3	b5 40		lda $40,x			lda 	NSMantissa0,x
.2ac5	75 41		adc $41,x			adc 	NSMantissa0+1,x
.2ac7	95 40		sta $40,x			sta 	NSMantissa0,x
.2ac9	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.2acb	75 4d		adc $4d,x			adc 	NSMantissa1+1,x
.2acd	95 4c		sta $4c,x			sta 	NSMantissa1,x
.2acf					_FI8MNoAdd:
.2acf	16 41		asl $41,x			asl 	NSMantissa0+1,x 			; shift adder left
.2ad1	36 4d		rol $4d,x			rol 	NSMantissa1+1,x
.2ad3	c0 00		cpy #$00			cpy 	#0
.2ad5	d0 e6		bne $2abd			bne 	_FI8MLoop 					; until right shifter zero.
.2ad7	7a		ply				ply
.2ad8	60		rts				rts
.2ad9					FloatMultiply:
.2ad9	ca		dex				dex
.2ada	b5 70		lda $70,x			lda 	NSExponent,x 				; can use optimised ?
.2adc	15 71		ora $71,x			ora 	NSExponent+1,x
.2ade	15 64		ora $64,x			ora 	NSMantissa3,x
.2ae0	15 65		ora $65,x			ora 	NSMantissa3+1,x
.2ae2	d0 21		bne $2b05			bne 	_FMUseFloat
.2ae4	b5 34		lda $34,x			lda 	NSStatus,x 					; check if it is 8 bit unsigned
.2ae6	15 35		ora $35,x			ora 	NSStatus+1,x
.2ae8	29 80		and #$80			and 	#$80
.2aea	15 64		ora $64,x			ora 	NSMantissa3,x
.2aec	15 58		ora $58,x			ora 	NSMantissa2,x
.2aee	15 4c		ora $4c,x			ora 	NSMantissa1,x
.2af0	15 65		ora $65,x			ora 	NSMantissa3+1,x
.2af2	15 59		ora $59,x			ora 	NSMantissa2+1,x
.2af4	15 4d		ora $4d,x			ora 	NSMantissa1+1,x
.2af6	d0 04		bne $2afc			bne 	_FMInt32
.2af8	20 b7 2a	jsr $2ab7			jsr 	FloatInt8Multiply 			; use fast 8x8 multiply.
.2afb	60		rts				rts
.2afc					_FMInt32:
.2afc	20 26 2b	jsr $2b26			jsr 	FloatMultiplyShort			; use the int32 one.
.2aff	18		clc				clc 								; fix it up if gone out of range
.2b00	75 70		adc $70,x			adc 	NSExponent,x
.2b02	95 70		sta $70,x			sta 	NSExponent,x
.2b04	60		rts				rts
.2b05					_FMUseFloat:
.2b05	20 6e 2b	jsr $2b6e			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.2b08	f0 18		beq $2b22			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.2b0a	e8		inx				inx
.2b0b	20 6e 2b	jsr $2b6e			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.2b0e	ca		dex				dex
.2b0f	c9 00		cmp #$00			cmp 	#0
.2b11	f0 0c		beq $2b1f			beq 	_FDSetZero
.2b13	20 26 2b	jsr $2b26			jsr 	FloatMultiplyShort 			; calculate the result.
.2b16	75 70		adc $70,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.2b18	18		clc				clc
.2b19	75 71		adc $71,x			adc 	NSExponent+1,x
.2b1b	95 70		sta $70,x			sta 	NSExponent,x
.2b1d	80 03		bra $2b22			bra 	_FDExit
.2b1f					_FDSetZero:
.2b1f	20 19 2e	jsr $2e19			jsr 	FloatSetZero 				; return 0
.2b22					_FDExit:
.2b22	20 6e 2b	jsr $2b6e			jsr 	FloatNormalise 				; normalise the result
.2b25	60		rts				rts
.2b26					FloatMultiplyShort:
.2b26	5a		phy				phy 								; save Y
.2b27	20 fc 2d	jsr $2dfc			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.2b2a	20 15 2e	jsr $2e15			jsr 	FloatSetZeroMantissaOnly 	; set mantissa S[X] to zero
.2b2d	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.2b2f					_I32MLoop:
.2b2f	b5 42		lda $42,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.2b31	15 4e		ora $4e,x			ora 	NSMantissa1+2,x
.2b33	15 5a		ora $5a,x			ora 	NSMantissa2+2,x
.2b35	15 66		ora $66,x			ora 	NSMantissa3+2,x
.2b37	f0 25		beq $2b5e			beq 	_I32MExit 					; exit if zero
.2b39	b5 42		lda $42,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.2b3b	29 01		and #$01			and 	#1
.2b3d	f0 0d		beq $2b4c			beq 	_I32MNoAdd
.2b3f	20 a5 2b	jsr $2ba5			jsr 	FloatAddTopTwoStack 		; if so add S[X+1] to S[X+0]
.2b42	b5 64		lda $64,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.2b44	10 06		bpl $2b4c			bpl 	_I32MNoAdd
.2b46					_I32ShiftRight:
.2b46	20 32 2e	jsr $2e32			jsr 	FloatShiftRight 			; shift S[X] right
.2b49	c8		iny				iny 								; increment shift count
.2b4a	80 09		bra $2b55			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.2b4c					_I32MNoAdd:
.2b4c	34 65		bit $65,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.2b4e	70 f6		bvs $2b46			bvs 	_I32ShiftRight 				; instead.
.2b50	e8		inx				inx
.2b51	20 28 2e	jsr $2e28			jsr 	FloatShiftLeft 				; shift additive S[X+1] left
.2b54	ca		dex				dex
.2b55					_I32MShiftUpper:
.2b55	e8		inx				inx 								; shift S[X+2] right
.2b56	e8		inx				inx
.2b57	20 32 2e	jsr $2e32			jsr 	FloatShiftRight
.2b5a	ca		dex				dex
.2b5b	ca		dex				dex
.2b5c	80 d1		bra $2b2f			bra 	_I32MLoop 					; try again.
.2b5e					_I32MExit:
.2b5e	20 64 2b	jsr $2b64			jsr 	FloatCalculateSign
.2b61	98		tya				tya 								; shift in A
.2b62	7a		ply				ply 								; restore Y and exit
.2b63	60		rts				rts
.2b64					FloatCalculateSign:
.2b64	b5 34		lda $34,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.2b66	16 34		asl $34,x			asl 	NSStatus,x 					; shift result left
.2b68	55 35		eor $35,x			eor 	NSStatus+1,x
.2b6a	0a		asl a				asl 	a 							; shift bit 7 into carry
.2b6b	76 34		ror $34,x			ror 	NSStatus,x 					; shift right into status byte.
.2b6d	60		rts				rts
.2b6e					FloatNormalise:
.2b6e	20 3b 2e	jsr $2e3b			jsr 	FloatIsZero 				; if zero exit
.2b71	d0 07		bne $2b7a			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.2b73	16 34		asl $34,x			asl 	NSStatus,x 					; clear the sign bit.
.2b75	76 34		ror $34,x			ror 	NSStatus,x 					; (no -0)
.2b77	a9 00		lda #$00			lda 	#0 							; set Z flag
.2b79	60		rts				rts
.2b7a					_NSNormaliseOptimise:
.2b7a	b5 64		lda $64,x			lda 	NSMantissa3,x 				; upper byte zero ?
.2b7c	d0 19		bne $2b97			bne 	_NSNormaliseLoop
.2b7e	b5 58		lda $58,x			lda 	NSMantissa2,x 				; byte normalise
.2b80	30 15		bmi $2b97			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.2b82	95 64		sta $64,x			sta 	NSMantissa3,x
.2b84	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.2b86	95 58		sta $58,x			sta 	NSMantissa2,x
.2b88	b5 40		lda $40,x			lda 	NSMantissa0,x
.2b8a	95 4c		sta $4c,x			sta 	NSMantissa1,x
.2b8c	74 40		stz $40,x			stz 	NSMantissa0,x
.2b8e	b5 70		lda $70,x			lda 	NSExponent,x
.2b90	38		sec				sec
.2b91	e9 08		sbc #$08			sbc 	#8
.2b93	95 70		sta $70,x			sta 	NSExponent,x
.2b95	80 e3		bra $2b7a			bra 	_NSNormaliseOptimise
.2b97					_NSNormaliseLoop:
.2b97	34 64		bit $64,x			bit 	NSMantissa3,x 				; bit 30 set ?
.2b99	70 07		bvs $2ba2			bvs 	_NSNExit 					; exit if so with Z flag clear
.2b9b	20 28 2e	jsr $2e28			jsr 	FloatShiftLeft 				; shift mantissa left
.2b9e	d6 70		dec $70,x			dec 	NSExponent,x 				; adjust exponent
.2ba0	80 f5		bra $2b97			bra 	_NSNormaliseLoop
.2ba2					_NSNExit:
.2ba2	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.2ba4	60		rts				rts
.2ba5					FloatAddTopTwoStack:
.2ba5	18		clc				clc
.2ba6	b5 40		lda $40,x			lda		NSMantissa0,x
.2ba8	75 41		adc $41,x			adc 		NSMantissa0+1,x
.2baa	95 40		sta $40,x			sta 	NSMantissa0,x
.2bac	b5 4c		lda $4c,x			lda		NSMantissa1,x
.2bae	75 4d		adc $4d,x			adc 		NSMantissa1+1,x
.2bb0	95 4c		sta $4c,x			sta 	NSMantissa1,x
.2bb2	b5 58		lda $58,x			lda		NSMantissa2,x
.2bb4	75 59		adc $59,x			adc 		NSMantissa2+1,x
.2bb6	95 58		sta $58,x			sta 	NSMantissa2,x
.2bb8	b5 64		lda $64,x			lda		NSMantissa3,x
.2bba	75 65		adc $65,x			adc 		NSMantissa3+1,x
.2bbc	95 64		sta $64,x			sta 	NSMantissa3,x
.2bbe	60		rts				rts
.2bbf					FloatSubTopTwoStack:
.2bbf	38		sec				sec
.2bc0	b5 40		lda $40,x			lda		NSMantissa0,x
.2bc2	f5 41		sbc $41,x			sbc 		NSMantissa0+1,x
.2bc4	95 40		sta $40,x			sta 	NSMantissa0,x
.2bc6	b5 4c		lda $4c,x			lda		NSMantissa1,x
.2bc8	f5 4d		sbc $4d,x			sbc 		NSMantissa1+1,x
.2bca	95 4c		sta $4c,x			sta 	NSMantissa1,x
.2bcc	b5 58		lda $58,x			lda		NSMantissa2,x
.2bce	f5 59		sbc $59,x			sbc 		NSMantissa2+1,x
.2bd0	95 58		sta $58,x			sta 	NSMantissa2,x
.2bd2	b5 64		lda $64,x			lda		NSMantissa3,x
.2bd4	f5 65		sbc $65,x			sbc 		NSMantissa3+1,x
.2bd6	95 64		sta $64,x			sta 	NSMantissa3,x
.2bd8	60		rts				rts
.2bd9					FloatInt32Add:
.2bd9	b5 34		lda $34,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.2bdb	55 35		eor $35,x			eor 	NSStatus+1,x
.2bdd	30 04		bmi $2be3			bmi 	_DiffSigns
.2bdf	20 a5 2b	jsr $2ba5			jsr		FloatAddTopTwoStack
.2be2	60		rts				rts
.2be3					_DiffSigns:
.2be3	20 bf 2b	jsr $2bbf			jsr 	FloatSubTopTwoStack 		; do a physical subtraction
.2be6	34 64		bit $64,x			bit 	NSMantissa3,x 				; result is +ve, okay
.2be8	10 07		bpl $2bf1			bpl 	_AddExit
.2bea	b5 35		lda $35,x			lda 	NSStatus+1,x 				; sign is that of 11th value
.2bec	95 34		sta $34,x			sta 	NSStatus,x
.2bee	20 e2 2d	jsr $2de2			jsr 	FloatNegateMantissa 		; negate the mantissa and exit
.2bf1					_AddExit:
.2bf1	20 3b 2e	jsr $2e3b			jsr 	FloatIsZero 				; check for -0
.2bf4	d0 02		bne $2bf8			bne 	_AddNonZero
.2bf6	74 34		stz $34,x			stz 	NSStatus,x
.2bf8					_AddNonZero:
.2bf8	60		rts				rts
=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.2bf9					FloatEncodeStart:
.2bf9	38		sec				sec
.2bfa	80 01		bra $2bfd			bra 	FloatEncodeContinue+1
.2bfc					FloatEncodeContinue:
.2bfc	18		clc				clc
.2bfd					FloatEncode:
.2bfd	08		php				php 								; save reset flag.
.2bfe	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.2c00	f0 15		beq $2c17			beq 	_ENIsOkay
.2c02	c9 30		cmp #$30			cmp 	#"0"
.2c04	90 04		bcc $2c0a			bcc 	_ENBadNumber
.2c06	c9 3a		cmp #$3a			cmp 	#"9"+1
.2c08	90 0d		bcc $2c17			bcc 	_ENIsOkay
.2c0a					_ENBadNumber:
.2c0a	28		plp				plp 								; throw saved reset
.2c0b	ad 8f 05	lda $058f			lda 	encodeState 				; if in decimal mode, construct final number
.2c0e	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.2c10	d0 03		bne $2c15			bne 	_ENFail
.2c12	4c 8f 2c	jmp $2c8f			jmp 	_ENConstructFinal
.2c15					_ENFail:
.2c15	18		clc				clc 								; not allowed
.2c16	60		rts				rts
.2c17					_ENIsOkay:
.2c17	28		plp				plp 								; are we restarting
.2c18	90 15		bcc $2c2f			bcc 	_ENNoRestart
.2c1a					_ENStartEncode:
.2c1a	c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.2c1c	f0 0c		beq $2c2a			beq 	_ENFirstDP
.2c1e	29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.2c20	20 1b 2e	jsr $2e1b			jsr 	FloatSetByte 				; in single byte mode.
.2c23	a9 01		lda #$01			lda 	#ESTA_Low
.2c25					_ENExitChange:
.2c25	8d 8f 05	sta $058f			sta 	encodeState 				; save new state
.2c28	38		sec				sec
.2c29	60		rts				rts
.2c2a					_ENFirstDP:
.2c2a	20 19 2e	jsr $2e19			jsr 	FloatSetZero 				; clear integer part
.2c2d	80 3c		bra $2c6b			bra 	_ESTASwitchFloat			; go straight to float and exi
.2c2f					_ENNoRestart:
.2c2f	48		pha				pha 								; save digit or DP on stack.
.2c30	ad 8f 05	lda $058f			lda 	encodeState 				; get current state
.2c33	c9 01		cmp #$01			cmp 	#ESTA_Low
.2c35	f0 09		beq $2c40			beq  	_ESTALowState
.2c37	c9 02		cmp #$02			cmp 	#ESTA_High
.2c39	f0 26		beq $2c61			beq 	_ESTAHighState
.2c3b	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.2c3d	f0 38		beq $2c77			beq 	_ESTADecimalState
>2c3f	db						.byte 	$DB 						; causes a break in the emulator
.2c40					_ESTALowState:
.2c40	68		pla				pla 								; get value back
.2c41	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.2c43	f0 26		beq $2c6b			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.2c45	29 0f		and #$0f			and 	#15 						; make digit
.2c47	8d 90 05	sta $0590			sta 	digitTemp 					; save it.
.2c4a	b5 40		lda $40,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.2c4c	0a		asl a				asl 	a
.2c4d	0a		asl a				asl 	a
.2c4e	75 40		adc $40,x			adc 	NSMantissa0,x
.2c50	0a		asl a				asl 	a
.2c51	6d 90 05	adc $0590			adc 	digitTemp
.2c54	95 40		sta $40,x			sta 	NSMantissa0,x
.2c56	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.2c58	90 05		bcc $2c5f			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.2c5a	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.2c5c	8d 8f 05	sta $058f			sta 	encodeState
.2c5f					_ESTANoSwitch:
.2c5f	38		sec				sec
.2c60	60		rts				rts
.2c61					_ESTAHighState:
.2c61	68		pla				pla 								; get value back
.2c62	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.2c64	f0 05		beq $2c6b			beq 	_ESTASwitchFloat
.2c66	20 c1 2c	jsr $2cc1			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.2c69	38		sec				sec
.2c6a	60		rts				rts
.2c6b					_ESTASwitchFloat:
.2c6b	9c 91 05	stz $0591			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.2c6e	e8		inx				inx 								; zero the decimal additive.
.2c6f	20 19 2e	jsr $2e19			jsr 	FloatSetZero
.2c72	ca		dex				dex
.2c73	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.2c75	80 ae		bra $2c25			bra 	_ENExitChange
.2c77					_ESTADecimalState:
.2c77	68		pla				pla 								; digit.
.2c78	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 11th decimal point.
.2c7a	f0 99		beq $2c15			beq 	_ENFail
.2c7c	e8		inx				inx 								; put digit into fractional part of X+1
.2c7d	20 c1 2c	jsr $2cc1			jsr 	ESTAShiftDigitIntoMantissa
.2c80	ca		dex				dex
.2c81	ee 91 05	inc $0591			inc 	decimalCount 				; bump the count of decimals
.2c84	ad 91 05	lda $0591			lda 	decimalCount 				; too many decimal digits.
.2c87	c9 0b		cmp #$0b			cmp 	#11
.2c89	f0 02		beq $2c8d			beq 	_ESTADSFail
.2c8b	38		sec				sec
.2c8c	60		rts				rts
.2c8d					_ESTADSFail:
.2c8d	18		clc				clc
.2c8e	60		rts				rts
.2c8f					_ENConstructFinal:
.2c8f	ad 91 05	lda $0591			lda 	decimalCount 				; get decimal count
.2c92	f0 2b		beq $2cbf			beq 	_ENCFExit 					; no decimals
.2c94	5a		phy				phy
.2c95	0a		asl a				asl 	a 							; x 4 and CLC
.2c96	0a		asl a				asl 	a
.2c97	6d 91 05	adc $0591			adc 	decimalCount
.2c9a	a8		tay				tay
.2c9b	b9 26 29	lda $2926,y			lda 	FloatScalarTable-5,y 		; copy decimal scalar to X+2
.2c9e	95 42		sta $42,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.2ca0	b9 27 29	lda $2927,y			lda 	FloatScalarTable-5+1,y
.2ca3	95 4e		sta $4e,x			sta 	NSMantissa1+2,x
.2ca5	b9 28 29	lda $2928,y			lda 	FloatScalarTable-5+2,y
.2ca8	95 5a		sta $5a,x			sta 	NSMantissa2+2,x
.2caa	b9 29 29	lda $2929,y			lda 	FloatScalarTable-5+3,y
.2cad	95 66		sta $66,x			sta 	NSMantissa3+2,x
.2caf	b9 2a 29	lda $292a,y			lda 	FloatScalarTable-5+4,y
.2cb2	95 72		sta $72,x			sta 	NSExponent+2,x
.2cb4	74 36		stz $36,x			stz 	NSStatus+2,x 				; make +ve
.2cb6	e8		inx				inx 								; multiply decimal const by decimal scalar
.2cb7	e8		inx				inx
.2cb8	20 d9 2a	jsr $2ad9			jsr 	FloatMultiply
.2cbb	20 3d 28	jsr $283d			jsr 	FloatAdd 					; add to integer part.
.2cbe	7a		ply				ply
.2cbf					_ENCFExit:
.2cbf	18		clc				clc 								; reject the digit.
.2cc0	60		rts				rts
.2cc1					ESTAShiftDigitIntoMantissa:
.2cc1	29 0f		and #$0f			and 	#15 						; save digit
.2cc3	48		pha				pha
.2cc4	b5 64		lda $64,x			lda 	NSMantissa3,x 				; push mantissa on stack
.2cc6	48		pha				pha
.2cc7	b5 58		lda $58,x			lda 	NSMantissa2,x
.2cc9	48		pha				pha
.2cca	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.2ccc	48		pha				pha
.2ccd	b5 40		lda $40,x			lda 	NSMantissa0,x
.2ccf	48		pha				pha
.2cd0	20 28 2e	jsr $2e28			jsr 	FloatShiftLeft 				; x 2
.2cd3	20 28 2e	jsr $2e28			jsr 	FloatShiftLeft 				; x 4
.2cd6	18		clc				clc 								; pop mantissa and add
.2cd7	68		pla				pla
.2cd8	75 40		adc $40,x			adc 	NSMantissa0,x
.2cda	95 40		sta $40,x			sta 	NSMantissa0,x
.2cdc	68		pla				pla
.2cdd	75 4c		adc $4c,x			adc 	NSMantissa1,x
.2cdf	95 4c		sta $4c,x			sta 	NSMantissa1,x
.2ce1	68		pla				pla
.2ce2	75 58		adc $58,x			adc 	NSMantissa2,x
.2ce4	95 58		sta $58,x			sta 	NSMantissa2,x
.2ce6	68		pla				pla
.2ce7	75 64		adc $64,x			adc 	NSMantissa3,x
.2ce9	95 64		sta $64,x			sta 	NSMantissa3,x 				; x 5
.2ceb	20 28 2e	jsr $2e28			jsr 	FloatShiftLeft 				; x 10
.2cee	68		pla				pla 								; add digit
.2cef	18		clc				clc
.2cf0	75 40		adc $40,x			adc 	NSMantissa0,x
.2cf2	95 40		sta $40,x			sta 	NSMantissa0,x
.2cf4	90 0a		bcc $2d00			bcc 	_ESTASDExit
.2cf6	f6 4c		inc $4c,x			inc 	NSMantissa1,x
.2cf8	d0 06		bne $2d00			bne 	_ESTASDExit
.2cfa	f6 58		inc $58,x			inc 	NSMantissa2,x
.2cfc	d0 02		bne $2d00			bne 	_ESTASDExit
.2cfe	f6 64		inc $64,x			inc 	NSMantissa3,x
.2d00					_ESTASDExit:
.2d00	60		rts				rts
.058f					encodeState:
>058f							.fill 	1
.0590					digitTemp:
>0590							.fill 	1
.0591					decimalCount:
>0591							.fill 	1
.2d01					FloatToString:
.2d01	da		phx				phx
.2d02	5a		phy				phy 								; save code position
.2d03	8d 92 05	sta $0592			sta 	decimalPlaces	 			; save number of DPs.
.2d06	9c 93 05	stz $0593			stz 	dbOffset 					; offset into decimal buffer = start.
.2d09	b5 34		lda $34,x			lda 	NSStatus,x  				; is it -ve.
.2d0b	10 08		bpl $2d15			bpl 	_CNTSNotNegative
.2d0d	29 7f		and #$7f			and 	#$7F 						; make +ve
.2d0f	95 34		sta $34,x			sta 	NSStatus,x
.2d11	a9 2d		lda #$2d			lda 	#"-"
.2d13	80 02		bra $2d17			bra 	_CNTMain
.2d15					_CNTSNotNegative:
.2d15	a9 20		lda #$20			lda 	#" "
.2d17					_CNTMain:
.2d17	20 79 2d	jsr $2d79			jsr 	WriteDecimalBuffer
.2d1a	b5 70		lda $70,x			lda 	NSExponent,x 				; check if decimal
.2d1c	f0 0d		beq $2d2b			beq 	_CNTSNotFloat
.2d1e	e8		inx				inx 								; round up so we don't get too many 6.999999
.2d1f	a9 01		lda #$01			lda 	#1
.2d21	20 1b 2e	jsr $2e1b			jsr 	FloatSetByte
.2d24	b5 6f		lda $6f,x			lda		NSExponent-1,x
.2d26	95 70		sta $70,x			sta 	NSExponent,x
.2d28	20 3d 28	jsr $283d			jsr 	FloatAdd
.2d2b					_CNTSNotFloat:
.2d2b	20 5b 2d	jsr $2d5b			jsr 	MakePlusTwoString 			; do the integer part.
.2d2e	20 f9 29	jsr $29f9			jsr 	FloatFractionalPart 		; get the fractional part
.2d31	20 6e 2b	jsr $2b6e			jsr 	FloatNormalise					; normalise , exit if zero
.2d34	f0 22		beq $2d58			beq 	_CNTSExit
.2d36	a9 2e		lda #$2e			lda 	#"."
.2d38	20 79 2d	jsr $2d79			jsr 	WriteDecimalBuffer 			; write decimal place
.2d3b					_CNTSDecimal:
.2d3b	ce 92 05	dec $0592			dec 	decimalPlaces 				; done all the decimals
.2d3e	30 18		bmi $2d58			bmi 	_CNTSExit
.2d40	e8		inx				inx 								; x 10.0
.2d41	a9 0a		lda #$0a			lda 	#10
.2d43	20 1b 2e	jsr $2e1b			jsr 	FloatSetByte
.2d46	20 d9 2a	jsr $2ad9			jsr 	FloatMultiply
.2d49	20 5b 2d	jsr $2d5b			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.2d4c	20 f9 29	jsr $29f9			jsr 	FloatFractionalPart 		; get the fractional part
.2d4f	20 6e 2b	jsr $2b6e			jsr 	FloatNormalise 				; normalise it.
.2d52	b5 70		lda $70,x			lda 	NSExponent,x 				; gone to zero, exit.
.2d54	c9 d0		cmp #$d0			cmp 	#$D0 						; very small remainder, so don't bother.
.2d56	b0 e3		bcs $2d3b			bcs 	_CNTSDecimal 				; keep going.
.2d58					_CNTSExit:
.2d58	7a		ply				ply
.2d59	fa		plx				plx
.2d5a	60		rts				rts
.2d5b					MakePlusTwoString:
.2d5b	da		phx				phx
.2d5c	20 fc 2d	jsr $2dfc			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.2d5f	e8		inx				inx 								; access it
.2d60	e8		inx				inx
.2d61	20 54 2a	jsr $2a54			jsr 	FloatIntegerPart 			; make it an integer
.2d64	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.2d66	20 98 2d	jsr $2d98			jsr 	ConvertInt32
.2d69	a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.2d6b					_MPTSCopy:
.2d6b	bd 6d 05	lda $056d,x			lda 	numberBuffer,x
.2d6e	20 79 2d	jsr $2d79			jsr 	WriteDecimalBuffer
.2d71	e8		inx				inx
.2d72	bd 6d 05	lda $056d,x			lda 	numberBuffer,x
.2d75	d0 f4		bne $2d6b			bne 	_MPTSCopy
.2d77	fa		plx				plx
.2d78	60		rts				rts
.2d79					WriteDecimalBuffer:
.2d79	da		phx				phx
.2d7a	ae 93 05	ldx $0593			ldx 	dbOffset
.2d7d	9d 94 05	sta $0594,x			sta 	decimalBuffer,x
.2d80	9e 95 05	stz $0595,x			stz 	decimalBuffer+1,x
.2d83	ee 93 05	inc $0593			inc 	dbOffset
.2d86	fa		plx				plx
.2d87	60		rts				rts
.0592					decimalPlaces:
>0592							.fill 	1
.0593					dbOffset:
>0593							.fill 	1
.0594					decimalBuffer:
>0594							.fill 	32
.2d88					ConvertInt16:
.2d88	85 40		sta $40				sta 	NSMantissa0 				; set up as 32 bit conversion
.2d8a	86 4c		stx $4c				stx 	NSMantissa1
.2d8c	64 58		stz $58				stz 	NSMantissa2
.2d8e	64 64		stz $64				stz 	NSMantissa3
.2d90	64 34		stz $34				stz 	NSStatus 					; positive integer
.2d92	a2 00		ldx #$00			ldx 	#0 							; stack level
.2d94	a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.2d96	80 00		bra $2d98			bra 	ConvertInt32
.2d98					ConvertInt32:
.2d98	5a		phy				phy
.2d99	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.2d9b	24 34		bit $34				bit 	NSStatus 					; output a - if not negative.
.2d9d	10 08		bpl $2da7			bpl 	_CI32NotNeg
.2d9f	48		pha				pha
.2da0	a9 2d		lda #$2d			lda 	#'-'
.2da2	99 6d 05	sta $056d,y			sta 	numberBuffer,y
.2da5	c8		iny				iny
.2da6	68		pla				pla
.2da7					_CI32NotNeg:
.2da7	20 b5 2d	jsr $2db5			jsr 	_CI32DivideConvert 			; recursive conversion
.2daa	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.2dac	99 6d 05	sta $056d,y			sta 	numberBuffer,y
.2daf	7a		ply				ply
.2db0	a2 05		ldx #$05			ldx 	#numberBuffer >> 8 			; return address in XA
.2db2	a9 6d		lda #$6d			lda 	#numberBuffer & $FF
.2db4	60		rts				rts
.2db5					_CI32DivideConvert:
.2db5	e8		inx				inx 								; write to next slot up
.2db6	20 1b 2e	jsr $2e1b			jsr 	FloatSetByte 		 		; write the base out.
.2db9	ca		dex				dex
.2dba	20 af 29	jsr $29af			jsr 	Int32Divide 				; divide
.2dbd	b5 40		lda $40,x			lda 	NSMantissa0,x 				; save remainder
.2dbf	48		pha				pha
.2dc0	20 9e 29	jsr $299e			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.2dc3	20 3b 2e	jsr $2e3b			jsr 	FloatIsZero 				; is it zero ?
.2dc6	f0 05		beq $2dcd			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.2dc8	b5 41		lda $41,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.2dca	20 b5 2d	jsr $2db5			jsr 	_CI32DivideConvert 			; and recusrively call.
.2dcd					_CI32NoRecurse:
.2dcd	68		pla				pla 								; remainder
.2dce	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.2dd0	90 02		bcc $2dd4			bcc 	_CI32NotHex
.2dd2	69 26		adc #$26			adc 	#6+32
.2dd4					_CI32NotHex:
.2dd4	69 30		adc #$30			adc 	#48
.2dd6	99 6d 05	sta $056d,y			sta 	numberBuffer,y 				; write out and exit
.2dd9	c8		iny				iny
.2dda	60		rts				rts
.2ddb					FloatNegate:
.2ddb	b5 34		lda $34,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.2ddd	49 80		eor #$80			eor 	#$80  						; toggle the negative flag
.2ddf	95 34		sta $34,x			sta 	NSStatus,x
.2de1	60		rts				rts
.2de2					FloatNegateMantissa:
.2de2	38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.2de3	a9 00		lda #$00			lda 	#0
.2de5	f5 40		sbc $40,x			sbc 	NSMantissa0,x
.2de7	95 40		sta $40,x			sta 	NSMantissa0,x
.2de9	a9 00		lda #$00			lda 	#0
.2deb	f5 4c		sbc $4c,x			sbc 	NSMantissa1,x
.2ded	95 4c		sta $4c,x			sta 	NSMantissa1,x
.2def	a9 00		lda #$00			lda 	#0
.2df1	f5 58		sbc $58,x			sbc 	NSMantissa2,x
.2df3	95 58		sta $58,x			sta 	NSMantissa2,x
.2df5	a9 00		lda #$00			lda 	#0
.2df7	f5 64		sbc $64,x			sbc 	NSMantissa3,x
.2df9	95 64		sta $64,x			sta 	NSMantissa3,x
.2dfb	60		rts				rts
.2dfc					FloatShiftUpTwo:
.2dfc	b5 40		lda $40,x			lda 	NSMantissa0,x
.2dfe	95 42		sta $42,x			sta 	NSMantissa0+2,x
.2e00	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.2e02	95 4e		sta $4e,x			sta 	NSMantissa1+2,x
.2e04	b5 58		lda $58,x			lda 	NSMantissa2,x
.2e06	95 5a		sta $5a,x			sta 	NSMantissa2+2,x
.2e08	b5 64		lda $64,x			lda 	NSMantissa3,x
.2e0a	95 66		sta $66,x			sta 	NSMantissa3+2,x
.2e0c	b5 70		lda $70,x			lda 	NSExponent,x
.2e0e	95 72		sta $72,x			sta 	NSExponent+2,x
.2e10	b5 34		lda $34,x			lda 	NSStatus,x
.2e12	95 36		sta $36,x			sta 	NSStatus+2,x
.2e14	60		rts				rts
.2e15					FloatSetZeroMantissaOnly:
.2e15	74 40		stz $40,x			stz 	NSMantissa0,x
.2e17	80 08		bra $2e21			bra 	FloatZero13
.2e19					FloatSetZero:
.2e19	a9 00		lda #$00			lda 	#0
.2e1b					FloatSetByte:
.2e1b	74 70		stz $70,x			stz 	NSExponent,x 				; zero exponent, as +ve integer value.
.2e1d					FloatSetMantissa:
.2e1d	95 40		sta $40,x			sta 	NSMantissa0,x 				; zero mantissa
.2e1f	74 34		stz $34,x			stz 	NSStatus,x
.2e21					FloatZero13:
.2e21	74 4c		stz $4c,x			stz 	NSMantissa1,x
.2e23	74 58		stz $58,x			stz 	NSMantissa2,x
.2e25	74 64		stz $64,x			stz 	NSMantissa3,x
.2e27	60		rts				rts
.2e28					FloatShiftLeft:
.2e28	18		clc				clc
.2e29					FloatRotateLeft:
.2e29	36 40		rol $40,x			rol 	NSMantissa0,x
.2e2b	36 4c		rol $4c,x			rol		NSMantissa1,x
.2e2d	36 58		rol $58,x			rol		NSMantissa2,x
.2e2f	36 64		rol $64,x			rol		NSMantissa3,x
.2e31	60		rts				rts
.2e32					FloatShiftRight:
.2e32	56 64		lsr $64,x			lsr 	NSMantissa3,x
.2e34	76 58		ror $58,x			ror		NSMantissa2,x
.2e36	76 4c		ror $4c,x			ror		NSMantissa1,x
.2e38	76 40		ror $40,x			ror		NSMantissa0,x
.2e3a	60		rts				rts
.2e3b					FloatIsZero:
.2e3b	b5 64		lda $64,x			lda 	NSMantissa3,x
.2e3d	15 58		ora $58,x			ora		NSMantissa2,x
.2e3f	15 4c		ora $4c,x			ora		NSMantissa1,x
.2e41	15 40		ora $40,x			ora		NSMantissa0,x
.2e43	60		rts				rts

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/polynomials.library

.2e44					FloatArcTan:
.2e44	20 6e 2b	jsr $2b6e			jsr 	FloatNormalise 					; normalise x
.2e47	b5 34		lda $34,x			lda 	NSStatus,x 						; save sign, make absolute
.2e49	48		pha				pha
.2e4a	74 34		stz $34,x			stz 	NSStatus,x
.2e4c	b5 70		lda $70,x			lda 	NSExponent,x 					; $40000000 ^ $E2 is 1.0
.2e4e	c9 e2		cmp #$e2			cmp 	#$E2
.2e50	90 25		bcc $2e77			bcc 	_UANoFixup
.2e52	8a		txa				txa 									; value in +1
.2e53	a8		tay				tay
.2e54	c8		iny				iny
.2e55	20 fd 2f	jsr $2ffd			jsr 	CopyFloatXY
.2e58	a9 01		lda #$01			lda 	#1 								; 1.0 in +0
.2e5a	20 1b 2e	jsr $2e1b			jsr 	FloatSetByte
.2e5d	e8		inx				inx
.2e5e	20 62 29	jsr $2962			jsr 	FloatDivide
.2e61	b0 21		bcs $2e84			bcs 	_FATError
.2e63	20 87 2e	jsr $2e87			jsr 	CoreAtn 						; calculate the root
.2e66	20 f2 2f	jsr $2ff2			jsr 	CompletePolynomial
.2e69	20 db 2d	jsr $2ddb			jsr 	FloatNegate 					; make -ve
.2e6c	a9 05		lda #$05			lda 	#Const_PiDiv2-Const_Base
.2e6e	20 49 30	jsr $3049			jsr 	LoadConstant
.2e71	e8		inx				inx
.2e72	20 3d 28	jsr $283d			jsr 	FloatAdd
.2e75	80 06		bra $2e7d			bra 	_UAComplete
.2e77					_UANoFixup:
.2e77	20 87 2e	jsr $2e87			jsr 	CoreAtn
.2e7a	20 f2 2f	jsr $2ff2			jsr 	CompletePolynomial
.2e7d					_UAComplete:
.2e7d	68		pla				pla 									; apply the result.
.2e7e	55 34		eor $34,x			eor 	NSStatus,x
.2e80	95 34		sta $34,x			sta 	NSStatus,x
.2e82	18		clc				clc
.2e83	60		rts				rts
.2e84					_FATError:
.2e84	68		pla				pla
.2e85	38		sec				sec
.2e86	60		rts				rts
.2e87					CoreAtn:
.2e87	a9 f5		lda #$f5			lda 	#AtnCoefficients & $FF
.2e89	a0 2e		ldy #$2e			ldy 	#AtnCoefficients >> 8
.2e8b	4c 46 31	jmp $3146			jmp 	CorePolySquared
.2e8e					ExpCoefficients:
>2e8e	07					.byte	7
>2e8f	2b 1f 2c 5a				.dword	$5a2c1f2b ; 2.1498763701e-05
>2e93	d2					.byte	$d2
>2e94	8e 59 3f 4b				.dword	$4b3f598e ; 0.00014352314037
>2e98	d5					.byte	$d5
>2e99	c3 71 f7 57				.dword	$57f771c3 ; 0.0013422634825
>2e9d	d8					.byte	$d8
>2e9e	15 0e c2 4e				.dword	$4ec20e15 ; 0.0096140170135
>2ea2	db					.byte	$db
>2ea3	05 ac ac 71				.dword	$71acac05 ; 0.05550512686
>2ea7	dd					.byte	$dd
>2ea8	e3 f3 fe 7a				.dword	$7afef3e3 ; 0.2402263846
>2eac	df					.byte	$df
>2ead	08 0c b9 58				.dword	$58b90c08 ; 0.69314718618
>2eb1	e1					.byte	$e1
>2eb2	00 00 00 40				.dword	$40000000 ; 1.0
>2eb6	e2					.byte	$e2
.2eb7					SinCoefficients:
>2eb7	06					.byte	6
>2eb8	8d 16 0d f3				.dword	$f30d168d ; -14.381390672
>2ebc	e5					.byte	$e5
>2ebd	fc fd 03 54				.dword	$5403fdfc ; 42.007797122
>2ec1	e7					.byte	$e7
>2ec2	81 44 b4 cc				.dword	$ccb44481 ; -76.704170257
>2ec6	e8					.byte	$e8
>2ec7	f1 ef 9a 51				.dword	$519aeff1 ; 81.605223686
>2ecb	e8					.byte	$e8
>2ecc	94 f3 ae d2				.dword	$d2aef394 ; -41.341702104
>2ed0	e7					.byte	$e7
>2ed1	51 ed 87 64				.dword	$6487ed51 ; 6.2831853069
>2ed5	e4					.byte	$e4
>2ed6	00 00 00 00				.dword	$00000000 ; 0.0
>2eda	00					.byte	$00
.2edb					LogCoefficients:
>2edb	04					.byte	4
>2edc	bd 65 2b 6f				.dword	$6f2b65bd ; 0.43425594189
>2ee0	e0					.byte	$e0
>2ee1	b2 85 cd 49				.dword	$49cd85b2 ; 0.57658454124
>2ee5	e1					.byte	$e1
>2ee6	8b 49 1c 7b				.dword	$7b1c498b ; 0.96180075919
>2eea	e1					.byte	$e1
>2eeb	90 1d 55 5c				.dword	$5c551d90 ; 2.8853900731
>2eef	e3					.byte	$e3
>2ef0	00 00 00 c0				.dword	$c0000000 ; -0.5
>2ef4	e1					.byte	$e1
.2ef5					AtnCoefficients:
>2ef5	0c					.byte	12
>2ef6	ea de c1 d9				.dword	$d9c1deea ; -0.00068479391189
>2efa	d7					.byte	$d7
>2efb	7a 53 7a 4f				.dword	$4f7a537a ; 0.0048509421558
>2eff	da					.byte	$da
>2f00	08 58 fe c1				.dword	$c1fe5808 ; -0.016111701843
>2f04	dc					.byte	$dc
>2f05	e5 b3 0f 46				.dword	$460fb3e5 ; 0.034209638048
>2f09	dd					.byte	$dd
>2f0a	e1 e5 29 ef				.dword	$ef29e5e1 ; -0.054279132761
>2f0e	dd					.byte	$dd
>2f0f	26 38 32 4a				.dword	$4a323826 ; 0.07245719654
>2f13	de					.byte	$de
>2f14	bd 28 f5 db				.dword	$dbf528bd ; -0.089802395378
>2f18	de					.byte	$de
>2f19	3f 44 98 71				.dword	$7198443f ; 0.11093241343
>2f1d	de					.byte	$de
>2f1e	9d 4c 22 c9				.dword	$c9224c9d ; -0.14283980767
>2f22	df					.byte	$df
>2f23	e3 48 66 66				.dword	$666648e3 ; 0.19999912049
>2f27	df					.byte	$df
>2f28	0a 55 55 d5				.dword	$d555550a ; -0.33333331568
>2f2c	e0					.byte	$e0
>2f2d	00 00 00 40				.dword	$40000000 ; 1.0
>2f31	e2					.byte	$e2
>2f32	00 00 00 00				.dword	$00000000 ; 0.0
>2f36	00					.byte	$00
.2f37					Const_Base:
.2f37					Const_1Div2Pi:
>2f37	b7 c1 7c 51				.dword	$517cc1b7 ; 0.15915494
>2f3b	df					.byte	$df
.2f3c					Const_PiDiv2:
>2f3c	51 ed 87 64				.dword	$6487ed51 ; 1.57079633
>2f40	e2					.byte	$e2
.2f41					Const_Log2_e:
>2f41	95 1d 55 5c				.dword	$5c551d95 ; 1.44269504
>2f45	e2					.byte	$e2
.2f46					Const_sqrt_2:
>2f46	9a 79 82 5a				.dword	$5a82799a ; 1.41421356
>2f4a	e2					.byte	$e2
.2f4b					Const_sqrt_half:
>2f4b	9a 79 82 5a				.dword	$5a82799a ; 0.70710678
>2f4f	e1					.byte	$e1
.2f50					Const_pi:
>2f50	51 ed 87 64				.dword	$6487ed51 ; 3.14159265
>2f54	e3					.byte	$e3
.2f55					Const_half:
>2f55	00 00 00 40				.dword	$40000000 ; 0.50000000
>2f59	e1					.byte	$e1
.2f5a					Const_ln_e:
>2f5a	fc 0b b9 58				.dword	$58b90bfc ; 0.69314718
>2f5e	e1					.byte	$e1
.2f5f					FloatCosine:
.2f5f	a9 05		lda #$05			lda 	#Const_PiDiv2-Const_Base
.2f61	20 49 30	jsr $3049			jsr 	LoadConstant
.2f64	e8		inx				inx
.2f65	20 3d 28	jsr $283d			jsr 	FloatAdd
.2f68	4c ff 30	jmp $30ff			jmp 	FloatSine
.2f6b					FloatExponent:
.2f6b	a9 0a		lda #$0a			lda 	#Const_Log2_e-Const_Base
.2f6d	20 49 30	jsr $3049			jsr 	LoadConstant
.2f70	e8		inx				inx
.2f71	20 d9 2a	jsr $2ad9			jsr 	FloatMultiply
.2f74	20 b6 2f	jsr $2fb6			jsr 	_UECopy01 				; copy 0 to 1, get integer part to 1
.2f77	e8		inx				inx
.2f78	20 54 2a	jsr $2a54			jsr 	FloatIntegerPart
.2f7b	ca		dex				dex
.2f7c	b5 4d		lda $4d,x			lda 	NSMantissa1+1,x
.2f7e	15 59		ora $59,x			ora 	NSMantissa2+1,x
.2f80	15 65		ora $65,x			ora 	NSMantissa3+1,x
.2f82	d0 38		bne $2fbc			bne 	_UERangeError
.2f84	b5 41		lda $41,x			lda 	NSMantissa0+1,x 		; push integer part on stack.
.2f86	c9 40		cmp #$40			cmp 	#64
.2f88	b0 32		bcs $2fbc			bcs 	_UERangeError
.2f8a	48		pha				pha
.2f8b	b5 34		lda $34,x			lda 	NSStatus,x 				; push sign
.2f8d	48		pha				pha
.2f8e	20 f9 29	jsr $29f9			jsr 	FloatFractionalPart		; copy 0 to 1, get fractional part to 0
.2f91	68		pla				pla
.2f92	10 14		bpl $2fa8			bpl 	_UEPositive
.2f94	e8		inx				inx 							; 1-x
.2f95	a9 01		lda #$01			lda 	#1
.2f97	20 1b 2e	jsr $2e1b			jsr 	FloatSetByte
.2f9a	ca		dex				dex
.2f9b	20 db 2d	jsr $2ddb			jsr 	FloatNegate
.2f9e	e8		inx				inx
.2f9f	20 3d 28	jsr $283d			jsr 	FloatAdd
.2fa2	68		pla				pla 							; integer part +1 and negated.
.2fa3	1a		inc a				inc 	a
.2fa4	49 ff		eor #$ff			eor 	#$FF
.2fa6	1a		inc a				inc 	a
.2fa7	48		pha				pha
.2fa8					_UEPositive:
.2fa8	20 be 2f	jsr $2fbe			jsr 	CoreExponent
.2fab	20 f2 2f	jsr $2ff2			jsr 	CompletePolynomial
.2fae	68		pla				pla
.2faf	18		clc				clc
.2fb0	75 70		adc $70,x			adc 	NSExponent,x
.2fb2	95 70		sta $70,x			sta 	NSExponent,x
.2fb4	18		clc				clc
.2fb5	60		rts				rts
.2fb6					_UECopy01:
.2fb6	8a		txa				txa
.2fb7	a8		tay				tay
.2fb8	c8		iny				iny
.2fb9	4c fd 2f	jmp $2ffd			jmp 	CopyFloatXY
.2fbc					_UERangeError:
.2fbc	38		sec				sec
.2fbd	60		rts				rts
.2fbe					CoreExponent:
.2fbe	a9 8e		lda #$8e			lda 	#ExpCoefficients & $FF
.2fc0	a0 2e		ldy #$2e			ldy 	#ExpCoefficients >> 8
.2fc2	20 c6 2f	jsr $2fc6			jsr 	CalculateHornerPolynomial
.2fc5	60		rts				rts
.2fc6					CalculateHornerPolynomial:
.2fc6	85 2e		sta $2e				sta 	zTemp0 						; save poly data from YA
.2fc8	84 2f		sty $2f				sty 	zTemp0+1
.2fca	9c b4 05	stz $05b4			stz 	coefficientCount 			; zero the count.
.2fcd	8e b5 05	stx $05b5			stx 	xValueSlot 					; save xValue slot.
.2fd0	e8		inx				inx 								; set the count to zero.
.2fd1	20 19 2e	jsr $2e19			jsr 	FloatSetZero
.2fd4					_CHPLoop:
.2fd4	8a		txa				txa 								; copy X-1 to X+1
.2fd5	a8		tay				tay
.2fd6	ca		dex				dex
.2fd7	c8		iny				iny
.2fd8	20 fd 2f	jsr $2ffd			jsr 	CopyFloatXY 				; e.g. stack is <current> <x>
.2fdb	e8		inx				inx
.2fdc	e8		inx				inx
.2fdd	20 d9 2a	jsr $2ad9			jsr 	FloatMultiply 				; times current by X
.2fe0	e8		inx				inx
.2fe1	20 1c 30	jsr $301c			jsr 	GetCoefficient 				; coefficient into X+1
.2fe4	20 3d 28	jsr $283d			jsr 	FloatAdd 					; and add
.2fe7	ee b4 05	inc $05b4			inc 	coefficientCount
.2fea	ad b4 05	lda $05b4			lda 	coefficientCount
.2fed	d2 2e		cmp ($2e)			cmp 	(zTemp0)
.2fef	d0 e3		bne $2fd4			bne 	_CHPLoop
.2ff1	60		rts				rts
.2ff2					CompletePolynomial:
.2ff2	20 d9 2a	jsr $2ad9			jsr 	FloatMultiply
.2ff5	e8		inx				inx 								; get the last value
.2ff6	20 1c 30	jsr $301c			jsr 	GetCoefficient
.2ff9	20 3d 28	jsr $283d			jsr 	FloatAdd 					; and add it
.2ffc	60		rts				rts
.2ffd					CopyFloatXY:
.2ffd	b5 70		lda $70,x			lda 	NSExponent,x
.2fff	99 70 00	sta $0070,y			sta 	NSExponent,y
.3002	b5 34		lda $34,x			lda 	NSStatus,x
.3004	99 34 00	sta $0034,y			sta 	NSStatus,y
.3007	b5 40		lda $40,x			lda 	NSMantissa0,x
.3009	99 40 00	sta $0040,y			sta 	NSMantissa0,y
.300c	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.300e	99 4c 00	sta $004c,y			sta 	NSMantissa1,y
.3011	b5 58		lda $58,x			lda 	NSMantissa2,x
.3013	99 58 00	sta $0058,y			sta 	NSMantissa2,y
.3016	b5 64		lda $64,x			lda 	NSMantissa3,x
.3018	99 64 00	sta $0064,y			sta 	NSMantissa3,y
.301b	60		rts				rts
.301c					GetCoefficient:
.301c	5a		phy				phy
.301d	ad b4 05	lda $05b4			lda 	coefficientCount 			; 5 per block
.3020	0a		asl a				asl 	a
.3021	0a		asl a				asl 	a
.3022	38		sec				sec 								; +1 for count
.3023	6d b4 05	adc $05b4			adc 	coefficientCount
.3026	a8		tay				tay
.3027	b1 2e		lda ($2e),y			lda 	(zTemp0),y 					; copy mantissa
.3029	95 40		sta $40,x			sta 	NSMantissa0,x
.302b	c8		iny				iny
.302c	b1 2e		lda ($2e),y			lda 	(zTemp0),y
.302e	95 4c		sta $4c,x			sta 	NSMantissa1,x
.3030	c8		iny				iny
.3031	b1 2e		lda ($2e),y			lda 	(zTemp0),y
.3033	95 58		sta $58,x			sta 	NSMantissa2,x
.3035	c8		iny				iny
.3036	b1 2e		lda ($2e),y			lda 	(zTemp0),y
.3038	48		pha				pha
.3039	29 7f		and #$7f			and 	#$7F 						; clear sign bit.
.303b	95 64		sta $64,x			sta 	NSMantissa3,x
.303d	c8		iny				iny
.303e	68		pla				pla
.303f	29 80		and #$80			and 	#$80
.3041	95 34		sta $34,x			sta 	NSStatus,x 					; put in status
.3043	b1 2e		lda ($2e),y			lda 	(zTemp0),y
.3045	95 70		sta $70,x			sta 	NSExponent,x
.3047	7a		ply				ply
.3048	60		rts				rts
.05b4					coefficientCount:
>05b4							.fill 	1
.05b5					xValueSlot:
>05b5							.fill 	1
.3049					LoadConstant:
.3049	5a		phy				phy
.304a	a8		tay				tay
.304b	b9 37 2f	lda $2f37,y			lda 	Const_Base+0,y
.304e	95 41		sta $41,x			sta 	NSMantissa0+1,x
.3050	b9 38 2f	lda $2f38,y			lda 	Const_Base+1,y
.3053	95 4d		sta $4d,x			sta 	NSMantissa1+1,x
.3055	b9 39 2f	lda $2f39,y			lda 	Const_Base+2,y
.3058	95 59		sta $59,x			sta 	NSMantissa2+1,x
.305a	b9 3a 2f	lda $2f3a,y			lda 	Const_Base+3,y
.305d	48		pha				pha
.305e	29 7f		and #$7f			and 	#$7F
.3060	95 65		sta $65,x			sta 	NSMantissa3+1,x
.3062	68		pla				pla
.3063	29 80		and #$80			and 	#$80
.3065	95 35		sta $35,x			sta 	NSStatus+1,x
.3067	b9 3b 2f	lda $2f3b,y			lda 	Const_Base+4,y
.306a	95 71		sta $71,x			sta 	NSExponent+1,x
.306c	7a		ply				ply
.306d	60		rts				rts
.306e					FloatLogarithm:
.306e	b5 34		lda $34,x			lda 	NSStatus,x 					; check > 0
.3070	30 5f		bmi $30d1			bmi 	_ULRange
.3072	20 3b 2e	jsr $2e3b			jsr 	FloatIsZero
.3075	f0 5a		beq $30d1			beq 	_ULRange
.3077	20 6e 2b	jsr $2b6e			jsr 	FloatNormalise 				; put into FP mode.
.307a	b5 70		lda $70,x			lda 	NSExponent,x 				; get power
.307c	48		pha				pha
.307d	a9 e1		lda #$e1			lda 	#(-31) & $FF 				; force into range 0.5 -> 1
.307f	95 70		sta $70,x			sta 	NSExponent,x
.3081	a9 14		lda #$14			lda 	#Const_sqrt_half-Const_Base
.3083	20 49 30	jsr $3049			jsr 	LoadConstant
.3086	e8		inx				inx
.3087	20 3d 28	jsr $283d			jsr 	FloatAdd
.308a	8a		txa				txa 								; divide into sqrt 2.0
.308b	a8		tay				tay
.308c	c8		iny				iny
.308d	20 fd 2f	jsr $2ffd			jsr 	CopyFloatXY
.3090	ca		dex				dex
.3091	a9 0f		lda #$0f			lda 	#Const_sqrt_2-Const_Base
.3093	20 49 30	jsr $3049			jsr 	LoadConstant
.3096	e8		inx				inx
.3097	e8		inx				inx
.3098	20 62 29	jsr $2962			jsr 	FloatDivide 				; if zero, error.
.309b	b0 33		bcs $30d0			bcs 	_ULRangePla
.309d	20 db 2d	jsr $2ddb			jsr 	FloatNegate 				; subtract from 1
.30a0	e8		inx				inx
.30a1	a9 01		lda #$01			lda 	#1
.30a3	20 1b 2e	jsr $2e1b			jsr 	FloatSetByte
.30a6	20 3d 28	jsr $283d			jsr 	FloatAdd
.30a9	20 d3 30	jsr $30d3			jsr 	CoreLog
.30ac	20 f2 2f	jsr $2ff2			jsr 	CompletePolynomial
.30af	68		pla				pla 								; add exponent
.30b0	18		clc				clc
.30b1	69 1f		adc #$1f			adc 	#31 						; fix up
.30b3	48		pha				pha
.30b4	10 03		bpl $30b9			bpl 	_LogNotNeg
.30b6	49 ff		eor #$ff			eor 	#$FF
.30b8	1a		inc a				inc 	a
.30b9					_LogNotNeg:
.30b9	e8		inx				inx 								; set byte and sign.
.30ba	20 1b 2e	jsr $2e1b			jsr 	FloatSetByte
.30bd	68		pla				pla
.30be	29 80		and #$80			and 	#$80
.30c0	95 34		sta $34,x			sta 	NSStatus,x
.30c2	20 3d 28	jsr $283d			jsr 	FloatAdd
.30c5	a9 23		lda #$23			lda 	#Const_ln_e-Const_Base
.30c7	20 49 30	jsr $3049			jsr 	LoadConstant
.30ca	e8		inx				inx
.30cb	20 d9 2a	jsr $2ad9			jsr 	FloatMultiply
.30ce	18		clc				clc
.30cf	60		rts				rts
.30d0					_ULRangePla:
.30d0	68		pla				pla
.30d1					_ULRange:
.30d1	38		sec				sec
.30d2	60		rts				rts
.30d3					CoreLog:
.30d3	a9 db		lda #$db			lda 	#LogCoefficients & $FF
.30d5	a0 2e		ldy #$2e			ldy 	#LogCoefficients >> 8
.30d7	4c 46 31	jmp $3146			jmp 	CorePolySquared
.30da					FloatPI:
.30da	a9 19		lda #$19			lda 	#Const_pi-Const_Base
.30dc	20 49 30	jsr $3049			jsr 	LoadConstant
.30df	e8		inx				inx
.30e0	18		clc				clc
.30e1	60		rts				rts
.30e2					FloatPower:
.30e2	ca		dex				dex
.30e3	8a		txa				txa 							; copy 0 to 2, so we can process it
.30e4	a8		tay				tay
.30e5	c8		iny				iny
.30e6	c8		iny				iny
.30e7	20 fd 2f	jsr $2ffd			jsr 	CopyFloatXY
.30ea	e8		inx				inx 							; 2 = Log(0)
.30eb	e8		inx				inx
.30ec	20 6e 30	jsr $306e			jsr 	FloatLogarithm
.30ef	b0 0d		bcs $30fe			bcs 	_FPWExit
.30f1	20 d9 2a	jsr $2ad9			jsr 	FloatMultiply			; Multiply by original 1, into 1.
.30f4	8a		txa				txa 							; copy to slot 0
.30f5	a8		tay				tay
.30f6	88		dey				dey
.30f7	20 fd 2f	jsr $2ffd			jsr 	CopyFloatXY
.30fa	ca		dex				dex  							; Exponent code.
.30fb	20 6b 2f	jsr $2f6b			jsr 	FloatExponent
.30fe					_FPWExit:
.30fe	60		rts				rts
.30ff					FloatSine:
.30ff	b5 34		lda $34,x			lda 	NSStatus,x 					; save sign
.3101	48		pha				pha
.3102	74 34		stz $34,x			stz 	NSStatus,x 					; make +ve
.3104	a9 00		lda #$00			lda 	#Const_1Div2Pi-Const_Base
.3106	20 49 30	jsr $3049			jsr 	LoadConstant
.3109	e8		inx				inx
.310a	20 d9 2a	jsr $2ad9			jsr 	FloatMultiply
.310d	20 f9 29	jsr $29f9			jsr 	FloatFractionalPart 		; take the fractional part
.3110	b5 70		lda $70,x			lda 	NSExponent,x 				; check exponent
.3112	c9 e0		cmp #$e0			cmp 	#$E0 						; < $E0 exponent : 0-0.25
.3114	90 1f		bcc $3135			bcc 	_USProcessExit
.3116	f0 06		beq $311e			beq 	_USSubtractFromHalf 		; = $E0 exponent : 0.25-0.5
.3118	b5 64		lda $64,x			lda 	NSMantissa3,x 				; if > 0.75 which is $60000000:$E1
.311a	c9 60		cmp #$60			cmp 	#$60
.311c	b0 0e		bcs $312c			bcs 	_USSubtractOne
.311e					_USSubtractFromHalf:
.311e	a9 1e		lda #$1e			lda 	#Const_half-Const_Base
.3120	20 49 30	jsr $3049			jsr 	LoadConstant
.3123	e8		inx				inx
.3124	20 37 28	jsr $2837			jsr 	FloatSubtract
.3127	20 db 2d	jsr $2ddb			jsr 	FloatNegate 				; then negate it
.312a	80 09		bra $3135			bra 	_USProcessExit 				; and exit
.312c					_USSubtractOne:
.312c	e8		inx				inx
.312d	a9 01		lda #$01			lda 	#1
.312f	20 1b 2e	jsr $2e1b			jsr 	FloatSetByte
.3132	20 37 28	jsr $2837			jsr 	FloatSubtract
.3135					_USProcessExit:
.3135	20 42 31	jsr $3142			jsr 	CoreSine
.3138	20 f2 2f	jsr $2ff2			jsr 	CompletePolynomial
.313b	68		pla				pla 								; restore sign and apply
.313c	55 34		eor $34,x			eor 	NSStatus,x
.313e	95 34		sta $34,x			sta 	NSStatus,x
.3140	18		clc				clc
.3141	60		rts				rts
.3142					CoreSine:
.3142	a9 b7		lda #$b7			lda 	#SinCoefficients & $FF
.3144	a0 2e		ldy #$2e			ldy 	#SinCoefficients >> 8
.3146					CorePolySquared:
.3146	48		pha				pha 								; save coefficient table
.3147	5a		phy				phy
.3148	8a		txa				txa 								; copy X to +1, +2
.3149	a8		tay				tay
.314a	c8		iny				iny
.314b	20 fd 2f	jsr $2ffd			jsr 	CopyFloatXY
.314e	c8		iny				iny
.314f	20 fd 2f	jsr $2ffd			jsr 	CopyFloatXY
.3152	e8		inx				inx 								; point to the pair and put x^2 on stack
.3153	e8		inx				inx
.3154	20 d9 2a	jsr $2ad9			jsr 	FloatMultiply
.3157	7a		ply				ply 								; coefficient table back.
.3158	68		pla				pla
.3159	20 c6 2f	jsr $2fc6			jsr 	CalculateHornerPolynomial
.315c	8a		txa				txa 								; copy back to slot #1
.315d	a8		tay				tay
.315e	88		dey				dey
.315f	20 fd 2f	jsr $2ffd			jsr	 	CopyFloatXY
.3162	ca		dex				dex 								; point at result
.3163	60		rts				rts
.3164					FloatSquareRoot:
.3164	20 6e 30	jsr $306e			jsr 	FloatLogarithm
.3167	b0 06		bcs $316f			bcs 	_FSQExit
.3169	d6 70		dec $70,x			dec 	NSExponent,x
.316b	20 6b 2f	jsr $2f6b			jsr 	FloatExponent
.316e	18		clc				clc
.316f					_FSQExit:
.316f	60		rts				rts
.3170					FloatTangent:
.3170	da		phx				phx
.3171	8a		txa				txa 								; sin -> +1
.3172	a8		tay				tay
.3173	c8		iny				iny
.3174	20 fd 2f	jsr $2ffd			jsr 	CopyFloatXY
.3177	e8		inx				inx
.3178	20 ff 30	jsr $30ff			jsr 	FloatSine
.317b	ca		dex				dex
.317c	8a		txa				txa 								; cos -> +2
.317d	a8		tay				tay
.317e	c8		iny				iny
.317f	c8		iny				iny
.3180	20 fd 2f	jsr $2ffd			jsr 	CopyFloatXY
.3183	e8		inx				inx
.3184	e8		inx				inx
.3185	20 5f 2f	jsr $2f5f			jsr 	FloatCosine
.3188	20 62 29	jsr $2962			jsr 	FloatDivide 				; calculate sin/cos
.318b	b0 07		bcs $3194			bcs 	_FTExit 					; divide by zero
.318d	8a		txa				txa 								; copy result down.
.318e	a8		tay				tay
.318f	88		dey				dey
.3190	20 fd 2f	jsr $2ffd			jsr 	CopyFloatXY
.3193	18		clc				clc
.3194					_FTExit:
.3194	fa		plx				plx
.3195	60		rts				rts

;******  Processing input file: testing/testend.asm

=$3200							nextPage = (* + $FF) & $FF00 		; so I can include with that f*****g header.
.31fe					ObjectCodePreHeader:
>31fe	00 40 d4 54 00 a6 0e 48				.binary "code/code.bin"
>3206	00 a6 03 c7 a6 cb 93 93 b1 ce 0d 48 45 4c 4c 4f
>3216	20 57 4f 52 4c 44 20 21 b1 0d 92 a6 40 00 01 00
>3226	ca 81 58 03 40 00 01 00 ca 81 58 06 40 00 01 00
>3236	ca 81 58 09 a6 40 00 01 00 ca 81 58 0c 40 00 01
>3246	00 ca 81 58 0f a6 00 48 12 24 40 00 01 95 a6 40
>3256	12 01 50 03 8e 01 b4 28 82 ca 84 02 82 01 80 7c
>3266	a6 40 12 01 50 06 8e 01 b4 1e 82 ca 84 cc 00 01
>3276	82 7c a6 40 12 01 50 09 8e 01 b4 0e 82 ca 84 01
>3286	80 7c a6 40 12 01 50 0c 8e 01 b4 02 82 ca 84 7c
>3296	a6 a6 40 12 01 50 0f 8e 01 7c a6 24 a7 a6 a6 00
>32a6	48 15 2a 1d 01 95 00 48 18 30 27 01 95 a6 40 15
>32b6	cc 00 01 82 40 18 02 82 80 cc 00 b0 80 48 1b a6
>32c6	01 40 1b cb 51 c8 01 40 1b 01 80 00 c8 a6 30 a7
>32d6	2a a7 a6 01 48 12 24 40 00 01 95 a6 01 cc 00 b0
>32e6	40 12 01 50 06 8e 78 80 40 12 01 50 03 8e 78 80
>32f6	00 c8 a6 40 12 01 50 0c 8e 78 48 1e a6 40 1e 00
>3306	a3 88 d2 00 07 00 d1 00 5d 00 a6 40 1e 01 a3 88
>3316	d2 00 07 00 d1 00 7a 00 a6 40 12 01 50 0f 8e 78
>3326	48 21 a6 40 21 00 a3 88 d2 00 07 00 d1 00 97 00
>3336	a6 40 21 01 a3 88 d2 00 07 00 d1 00 b6 00 a6 01
>3346	cc 00 b0 40 12 01 50 06 8e 78 80 40 12 01 50 03
>3356	8e 78 80 40 12 01 50 09 8e 78 c8 a6 24 a7 a6 d0
>3366	00 72 ff a6 a6 40 12 01 50 03 8e 78 48 24 a6 40
>3376	24 01 a3 88 d2 00 0c 00 40 12 01 50 0c 8e 01 7c
>3386	98 a6 40 12 01 50 03 8e 40 24 02 81 7c 98 a6 a6
>3396	40 12 01 50 03 8e 78 48 24 a6 40 24 cb 4f a3 88
>33a6	d2 00 15 00 40 12 01 50 03 8e cb 4d 7c 40 12 01
>33b6	50 0c 8e 00 7c 98 a6 40 12 01 50 03 8e 40 24 02
>33c6	80 7c 98 a6 a6 40 12 01 50 06 8e 78 48 27 a6 40
>33d6	27 00 a3 88 d2 00 0c 00 40 12 01 50 0f 8e 01 7c
>33e6	98 a6 40 12 01 50 06 8e 40 27 cc 00 01 81 7c 98
>33f6	a6 a6 40 12 01 50 06 8e 78 48 27 a6 40 27 cc 00
>3406	1d a3 88 d2 00 16 00 40 12 01 50 06 8e cc 00 1c
>3416	7c 40 12 01 50 0f 8e 00 7c 98 a6 40 12 01 50 06
>3426	8e 40 27 cc 00 01 80 7c 98 c4 ff
=12800					ObjectCode = ObjectCodePreHeader+2 			; so the code is at XX00

;******  End of listing
