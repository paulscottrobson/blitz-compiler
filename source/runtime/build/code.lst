
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass -c -Wall -o build/code.prg -L build/code.lst -l build/code.lbl testing/testing.asm /home/paulr/Projects/blitz-compiler/documents/../bin/runtime.library /home/paulr/Projects/blitz-compiler/documents/../bin/common.library /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library /home/paulr/Projects/blitz-compiler/documents/../bin/polynomials.library testing/testend.asm
; Sat Oct  7 12:58:22 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: testing/testing.asm

.1000					WrapperBoot:
.1000	a9 32		lda #$32			lda 	#ObjectCode >> 8 			; address of object code to run.
.1002	a2 81		ldx #$81			ldx 	#$81 						; first page of allocatable memory
.1004	a0 9f		ldy #$9f			ldy 	#$9F 						; byte after end of last page.
.1006	4c 09 10	jmp $1009			jmp 	StartRuntime

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/runtime.library

.0022					zsTemp:
>0022							.fill 	2
.0024					runtimeStackPtr:
>0024							.fill 	2
.0400					stringLowMemory:
>0400							.fill 	2
.0402					stringHighMemory:
>0402							.fill 	2
=$e4					FRAME_GOSUB = $E4 							; Gosub has 4 bytes
=211					FRAME_FOR = $C0+19 							; For has 19 bytes
=$9f20					VRAMLow0 = $9F20
=$9f21					VRAMMed0 = $9F21
=$9f22					VRAMHigh0 = $9F22
=$9f23					VRAMData0 = $9F23
=$c09f					X16A_audio_init=$C09F
=$c08d					X16A_bas_fmchordstring=$C08D
=$c000					X16A_bas_fmfreq=$C000
=$c003					X16A_bas_fmnote=$C003
=$c006					X16A_bas_fmplaystring=$C006
=$c009					X16A_bas_fmvib=$C009
=$c00c					X16A_bas_playstringvoice=$C00C
=$c090					X16A_bas_psgchordstring=$C090
=$c00f					X16A_bas_psgfreq=$C00F
=$c012					X16A_bas_psgnote=$C012
=$c015					X16A_bas_psgwav=$C015
=$c018					X16A_bas_psgplaystring=$C018
=$c01b					X16A_notecon_bas2fm=$C01B
=$c01e					X16A_notecon_bas2midi=$C01E
=$c021					X16A_notecon_bas2psg=$C021
=$c024					X16A_notecon_fm2bas=$C024
=$c027					X16A_notecon_fm2midi=$C027
=$c02a					X16A_notecon_fm2psg=$C02A
=$c02d					X16A_notecon_freq2bas=$C02D
=$c030					X16A_notecon_freq2fm=$C030
=$c033					X16A_notecon_freq2midi=$C033
=$c036					X16A_notecon_freq2psg=$C036
=$c039					X16A_notecon_midi2bas=$C039
=$c03c					X16A_notecon_midi2fm=$C03C
=$c03f					X16A_notecon_midi2psg=$C03F
=$c042					X16A_notecon_psg2bas=$C042
=$c045					X16A_notecon_psg2fm=$C045
=$c048					X16A_notecon_psg2midi=$C048
=$c093					X16A_psg_getatten=$C093
=$c096					X16A_psg_getpan=$C096
=$c04b					X16A_psg_init=$C04B
=$c04e					X16A_psg_playfreq=$C04E
=$c051					X16A_psg_read=$C051
=$c054					X16A_psg_setatten=$C054
=$c057					X16A_psg_setfreq=$C057
=$c05a					X16A_psg_setpan=$C05A
=$c05d					X16A_psg_setvol=$C05D
=$c060					X16A_psg_write=$C060
=$c0a2					X16A_psg_write_fast=$C0A2
=$c099					X16A_ym_getatten=$C099
=$c09c					X16A_ym_getpan=$C09C
=$c063					X16A_ym_init=$C063
=$c066					X16A_ym_loaddefpatches=$C066
=$c069					X16A_ym_loadpatch=$C069
=$c06c					X16A_ym_loadpatchlfn=$C06C
=$c06f					X16A_ym_playdrum=$C06F
=$c072					X16A_ym_playnote=$C072
=$c075					X16A_ym_setatten=$C075
=$c078					X16A_ym_setdrum=$C078
=$c07b					X16A_ym_setnote=$C07B
=$c07e					X16A_ym_setpan=$C07E
=$c081					X16A_ym_read=$C081
=$c084					X16A_ym_release=$C084
=$c087					X16A_ym_trigger=$C087
=$c08a					X16A_ym_write=$C08A
=2					X16_r0 = 2
=4					X16_r1 = 4
=6					X16_r2 = 6
=8					X16_r3 = 8
=10					X16_r4 = 10
=$ffa5					X16_ACPTR=$FFA5
=$ffcf					X16_BASIN=$FFCF
=$feba					X16_BSAVE=$FEBA
=$ffd2					X16_BSOUT=$FFD2
=$ffa8					X16_CIOUT=$FFA8
=$ffe7					X16_CLALL=$FFE7
=$ffc3					X16_CLOSE=$FFC3
=$ffc6					X16_CHKIN=$FFC6
=$ffc9					X16_CHKOUT=$FFC9
=$ff50					X16_clock_get_date_time=$FF50
=$ff4d					X16_clock_set_date_time=$FF4D
=$ffcf					X16_CHRIN=$FFCF
=$ffd2					X16_CHROUT=$FFD2
=$ff4a					X16_CLOSE_ALL=$FF4A
=$ffcc					X16_CLRCHN=$FFCC
=$fedb					X16_console_init=$FEDB
=$fee1					X16_console_get_char=$FEE1
=$fede					X16_console_put_char=$FEDE
=$fed8					X16_console_put_image=$FED8
=$fed5					X16_console_set_paging_message=$FED5
=$ff47					X16_enter_basic=$FF47
=$fecf					X16_entropy_get=$FECF
=$ff74					X16_fetch=$FF74
=$ff02					X16_FB_cursor_next_line=$FF02
=$feff					X16_FB_cursor_position=$FEFF
=$ff17					X16_FB_fill_pixels=$FF17
=$ff1a					X16_FB_filter_pixels=$FF1A
=$fef9					X16_FB_get_info=$FEF9
=$ff05					X16_FB_get_pixel=$FF05
=$ff08					X16_FB_get_pixels=$FF08
=$fef6					X16_FB_init=$FEF6
=$ff1d					X16_FB_move_pixels=$FF1D
=$ff11					X16_FB_set_8_pixels=$FF11
=$ff14					X16_FB_set_8_pixels_opaque=$FF14
=$fefc					X16_FB_set_palette=$FEFC
=$ff0b					X16_FB_set_pixel=$FF0B
=$ff0e					X16_FB_set_pixels=$FF0E
=$ffe4					X16_GETIN=$FFE4
=$ff23					X16_GRAPH_clear=$FF23
=$ff38					X16_GRAPH_draw_image=$FF38
=$ff2c					X16_GRAPH_draw_line=$FF2C
=$ff35					X16_GRAPH_draw_oval=$FF35
=$ff2f					X16_GRAPH_draw_rect=$FF2F
=$ff3e					X16_GRAPH_get_char_size=$FF3E
=$ff20					X16_GRAPH_init=$FF20
=$ff32					X16_GRAPH_move_rect=$FF32
=$ff41					X16_GRAPH_put_char=$FF41
=$ff29					X16_GRAPH_set_colors=$FF29
=$ff3b					X16_GRAPH_set_font=$FF3B
=$ff26					X16_GRAPH_set_window=$FF26
=$fec6					X16_i2c_read_byte=$FEC6
=$fec9					X16_i2c_write_byte=$FEC9
=$fff3					X16_IOBASE=$FFF3
=$ff6e					X16_JSRFAR=$FF6E
=$ff56					X16_joystick_get=$FF56
=$ff53					X16_joystick_scan=$FF53
=$fec0					X16_kbdbuf_get_modifiers=$FEC0
=$febd					X16_kbdbuf_peek=$FEBD
=$fec3					X16_kbdbuf_put=$FEC3
=$fed2					X16_keymap=$FED2
=$ffb1					X16_LISTEN=$FFB1
=$ff59					X16_LKUPLA=$FF59
=$ff5c					X16_LKUPSA=$FF5C
=$ffd5					X16_LOAD=$FFD5
=$ff44					X16_MACPTR=$FF44
=$ff9c					X16_MEMBOT=$FF9C
=$fee7					X16_memory_copy=$FEE7
=$feea					X16_memory_crc=$FEEA
=$feed					X16_memory_decompress=$FEED
=$fee4					X16_memory_fill=$FEE4
=$ff99					X16_MEMTOP=$FF99
=$fecc					X16_monitor=$FECC
=$ff68					X16_mouse_config=$FF68
=$ff6b					X16_mouse_get=$FF6B
=$ff71					X16_mouse_scan=$FF71
=$ffc0					X16_OPEN=$FFC0
=$ff65					X16_PFKEY=$FF65
=$fff0					X16_PLOT=$FFF0
=$ff7d					X16_PRIMM=$FF7D
=$ffde					X16_RDTIM=$FFDE
=$ffb7					X16_READST=$FFB7
=$ffd8					X16_SAVE=$FFD8
=$ffed					X16_SCREEN=$FFED
=$ff5f					X16_screen_mode=$FF5F
=$ff62					X16_screen_set_charset=$FF62
=$ff93					X16_SECOND=$FF93
=$ffba					X16_SETLFS=$FFBA
=$ff90					X16_SETMSG=$FF90
=$ffbd					X16_SETNAM=$FFBD
=$ffdb					X16_SETTIM=$FFDB
=$ffa2					X16_SETTMO=$FFA2
=$fef0					X16_sprite_set_image=$FEF0
=$fef3					X16_sprite_set_position=$FEF3
=$ff77					X16_stash=$FF77
=$ffe1					X16_STOP=$FFE1
=$ffb4					X16_TALK=$FFB4
=$ff96					X16_TKSA=$FF96
=$ffea					X16_UDTIM=$FFEA
=$ffae					X16_UNLSN=$FFAE
=$ffab					X16_UNTLK=$FFAB
=$311					USRRoutineAddress = $311
=$30c					SYS_Reg_A = $30C
=$30d					SYS_Reg_X = $30D
=$30e					SYS_Reg_Y = $30E
=$30f					SYS_Reg_S = $30F
=0					SelectRAMBank = 0
=1					SelectROMBank = 1
=$0a					X16_AudioCodeBank = $0A
.1009					StartRuntime:
.1009	8d 04 04	sta $0404			sta 	runtimeHigh 				; save address of code.
.100c	85 29		sta $29				sta 	codePtr+1 					; set pointer to code.
.100e	64 28		stz $28				stz 	codePtr
.1010	64 2a		stz $2a				stz 	codePage 					; zero current page.
.1012	8e 05 04	stx $0405			stx 	storeStartHigh 				; save from-to address.
.1015	8c 06 04	sty $0406			sty 	storeEndHigh
.1018	8e 07 04	stx $0407			stx 	variableStartPage
.101b	20 4d 12	jsr $124d			jsr 	ClearMemory 				; clear memory.
.101e	20 2c 1e	jsr $1e2c			jsr 	XRuntimeSetup 				; initialise the runtime stuff.
.1021	20 2e 1b	jsr $1b2e		 	jsr		SetDefaultChannel			; set default input/output channel.
.1024	20 64 1d	jsr $1d64			jsr 	RestoreCode 				; which we now call
.1027	a0 00		ldy #$00			ldy 	#0
.1029					NextCommand:
.1029	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.102b	30 5b		bmi $1088			bmi 	NXCommand 					; -if -ve command
.102d	c8		iny				iny
.102e	c9 40		cmp #$40			cmp 	#64 						; 64..127 is load and store.
.1030	90 39		bcc $106b			bcc 	PushByteA 					; 0..63 is short constants.
.1032					NXLoadStore:
.1032	c9 78		cmp #$78			cmp		#120 						; is it an indirect read/write
.1034	b0 19		bcs $104f			bcs 	NXIndirectLoadStore
.1036	4a		lsr a				lsr 	a 							; / 4, so $48 => $12,
.1037	4a		lsr a				lsr 	a
.1038	29 0e		and #$0e			and 	#$0E
.103a	da		phx				phx 								; get ready to jump
.103b	aa		tax				tax
.103c	7c 3f 10	jmp ($103f,x)			jmp 	(ReadWriteVectors,x) 		; go via the jump table.
.103f					ReadWriteVectors:
>103f	9a 1c						.word 	ReadFloatCommand			; read float
>1041	75 22						.word 	WriteFloatCommand 			; write float
>1043	d6 1c						.word 	ReadIntegerCommand 			; read integer
>1045	b1 22						.word 	WriteIntegerCommand 		; write integer
>1047	1b 1d						.word 	ReadStringCommand 			; read string
>1049	f0 22						.word 	WriteStringCommand 			; write string
>104b	1b 14						.word 	Unimplemented
>104d	1b 14						.word 	Unimplemented
.104f					NXIndirectLoadStore:
.104f	29 07		and #$07			and 	#7
.1051	0a		asl a				asl 	a
.1052	da		phx				phx
.1053	aa		tax				tax
.1054	7c 57 10	jmp ($1057,x)			jmp 	(IndirectVectors,x)
.1057					IndirectVectors:
>1057	d0 16						.word 	IndFloatRead 				; float read
>1059	e4 16						.word 	IndInt16Read 				; int16 read
>105b	f8 16						.word 	IndStringRead 				; string read
>105d	1b 14						.word 	Unimplemented
>105f	0c 17						.word 	IndFloatWrite				; float write
>1061	20 17						.word 	IndInt16Write 				; int16 write
>1063	34 17						.word 	IndStringWrite 				; string write
>1065	1b 14						.word 	Unimplemented
.1067					PushByteCommand:
.1067	fa		plx				plx
.1068	b1 28		lda ($28),y			lda 	(codePtr),y 				; get byte to write.
.106a	c8		iny				iny
.106b					PushByteA:
.106b	e8		inx				inx 								; push constant on stack
.106c	95 41		sta $41,x			sta 	NSMantissa0,x 				; save byte
.106e	74 4d		stz $4d,x			stz 	NSMantissa1,x 				; clear MSB
.1070					ClearRestWord:
.1070	74 59		stz $59,x			stz 	NSMantissa2,x 				; zero upper bytes, exponent, make iFloat32
.1072	74 65		stz $65,x			stz 	NSMantissa3,x
.1074	74 71		stz $71,x			stz 	NSExponent,x
.1076	74 35		stz $35,x			stz 	NSStatus,x
.1078	80 af		bra $1029			bra 	NextCommand
.107a					PushWordCommand:
.107a	fa		plx				plx
.107b	e8		inx				inx
.107c	b1 28		lda ($28),y			lda 	(codePtr),y 				; word to stack
.107e	c8		iny				iny
.107f	95 41		sta $41,x			sta 	NSMantissa0,x
.1081	b1 28		lda ($28),y			lda 	(codePtr),y
.1083	c8		iny				iny
.1084	95 4d		sta $4d,x			sta 	NSMantissa1,x
.1086	80 e8		bra $1070			bra 	ClearRestWord 				; handle everything else.
.1088					NXCommand:
.1088	c8		iny				iny 								; consume command.
.1089	10 03		bpl $108e			bpl 	_NXCommandNoFixUp
.108b	20 94 10	jsr $1094			jsr 	FixUpY
.108e					_NXCommandNoFixUp:
.108e	0a		asl a				asl 	a 							; shift left
.108f	da		phx				phx 								; save SP on stack
.1090	aa		tax				tax				 					; and jump indirect
.1091	7c 56 21	jmp ($2156,x)			jmp 	(VectorTable,x)
.1094					FixUpY:
.1094	48		pha				pha
.1095	98		tya				tya
.1096	18		clc				clc
.1097	65 28		adc $28				adc 	codePtr
.1099	85 28		sta $28				sta 	codePtr
.109b	90 02		bcc $109f			bcc 	_NoCPCarry
.109d	e6 29		inc $29				inc 	codePtr+1
.109f					_NoCPCarry:
.109f	a0 00		ldy #$00			ldy 	#0
.10a1	68		pla				pla
.10a2	60		rts				rts
.0404					runtimeHigh:
>0404							.fill 	1
.0405					storeStartHigh:
>0405							.fill 	1
.0406					storeEndHigh:
>0406							.fill 	1
.0407					variableStartPage:
>0407							.fill 	1
.10a3					AbsoluteTOS:
.10a3	fa		plx				plx
.10a4	74 35		stz $35,x			stz 	NSStatus,x 					; dereferenced so just clear the status byte.
.10a6	4c 29 10	jmp $1029			jmp 	NextCommand
.10a9					CommandVarSpace:
.10a9	fa		plx				plx
.10aa	b1 28		lda ($28),y			lda 	(codePtr),y					; 3 byte opcode, which is 'free' memory in variable area.
.10ac	85 26		sta $26				sta 	availableMemory
.10ae	c8		iny				iny
.10af	b1 28		lda ($28),y			lda 	(codePtr),y
.10b1	18		clc				clc
.10b2	6d 07 04	adc $0407			adc 	variableStartPage			; offset to actual address.
.10b5	85 27		sta $27				sta 	availableMemory+1
.10b7	c8		iny				iny
.10b8	4c 29 10	jmp $1029			jmp 	NextCommand
.0026					availableMemory:
>0026							.fill 	2
.10bb					BinaryAnd:
.10bb	fa		plx				plx
.10bc	38		sec				sec
.10bd	80 02		bra $10c1			bra 	AndOrCommon
.10bf					BinaryOr:
.10bf	fa		plx				plx
.10c0	18		clc				clc
.10c1					AndOrCommon:
.10c1	08		php				php 								; save AND/OR flag
.10c2	20 0b 18	jsr $180b			jsr 	GetInteger16Bit
.10c5	ca		dex				dex
.10c6	20 0b 18	jsr $180b			jsr 	GetInteger16Bit
.10c9	28		plp				plp
.10ca	90 0e		bcc $10da			bcc 	_AOCOrCode
.10cc	b5 41		lda $41,x			lda 	NSMantissa0,x 				; AND code
.10ce	35 42		and $42,x			and		NSMantissa0+1,x
.10d0	95 41		sta $41,x			sta 	NSMantissa0,x
.10d2	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.10d4	35 4e		and $4e,x			and		NSMantissa1+1,x
.10d6	95 4d		sta $4d,x			sta 	NSMantissa1,x
.10d8	80 0c		bra $10e6			bra 	_AOCComplete
.10da					_AOCOrCode:
.10da	b5 41		lda $41,x			lda 	NSMantissa0,x 				; OR code
.10dc	15 42		ora $42,x			ora		NSMantissa0+1,x
.10de	95 41		sta $41,x			sta 	NSMantissa0,x
.10e0	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.10e2	15 4e		ora $4e,x			ora		NSMantissa1+1,x
.10e4	95 4d		sta $4d,x			sta 	NSMantissa1,x
.10e6					_AOCComplete:
.10e6	74 35		stz $35,x			stz 	NSStatus,x 					; make integer ?
.10e8	34 4d		bit $4d,x			bit 	NSMantissa1,x 				; result is -ve
.10ea	10 07		bpl $10f3			bpl 	_AOCExit
.10ec	20 1b 18	jsr $181b			jsr 	Negate16Bit 				; 2's complement
.10ef	a9 80		lda #$80			lda 	#$80 						; make it -ve
.10f1	95 35		sta $35,x			sta 	NSStatus,x
.10f3					_AOCExit:
.10f3	4c 29 10	jmp $1029			jmp 	NextCommand
.10f6					ArrayConvert:
.10f6	fa		plx				plx
.10f7	5a		phy				phy
.10f8	b5 41		lda $41,x			lda 	NSMantissa0,x
.10fa	85 31		sta $31				sta 	zTemp1
.10fc	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.10fe	18		clc				clc
.10ff	6d 07 04	adc $0407			adc 	variableStartPage
.1102	85 32		sta $32				sta 	zTemp1+1
.1104	ca		dex				dex 								; count of indices to follow -> zTemp2
.1105	20 05 18	jsr $1805			jsr 	GetInteger8Bit
.1108	85 33		sta $33				sta 	zTemp2 						; subtract from stack.
.110a	8a		txa				txa
.110b	38		sec				sec
.110c	e5 33		sbc $33				sbc 	zTemp2
.110e	aa		tax				tax
.110f	da		phx				phx 								; stack points at the first index, which will be replaced.
.1110					_ACIndexLoop:
.1110	20 43 2a	jsr $2a43			jsr 	FloatIntegerPart 			; integer array index
.1113	20 0b 18	jsr $180b			jsr 	GetInteger16Bit 			; get the index => zTemp0
.1116	a0 01		ldy #$01			ldy 	#1 							; compare against the index count.
.1118	a5 2f		lda $2f				lda 	zTemp0
.111a	d2 31		cmp ($31)			cmp 	(zTemp1)
.111c	a5 30		lda $30				lda 	zTemp0+1
.111e	f1 31		sbc ($31),y			sbc 	(zTemp1),y
.1120	b0 79		bcs $119b			bcs 	_ACBadIndex 				; index error.
.1122	c6 33		dec $33				dec 	zTemp2 						; decrement count, if zero, then innermost level
.1124	f0 29		beq $114f			beq 	_ACInnerLevel
.1126	a0 02		ldy #$02			ldy 	#2 							; check sub index.
.1128	b1 31		lda ($31),y			lda 	(zTemp1),y
.112a	10 6f		bpl $119b			bpl 	_ACBadIndex
.112c	06 2f		asl $2f				asl 	zTemp0 						; double the index and add it to the base address
.112e	26 30		rol $30				rol 	zTemp0+1
.1130	18		clc				clc
.1131	a5 2f		lda $2f				lda		zTemp0
.1133	65 31		adc $31				adc 	zTemp1
.1135	85 2f		sta $2f				sta 	zTemp0
.1137	a5 30		lda $30				lda		zTemp0+1
.1139	65 32		adc $32				adc 	zTemp1+1
.113b	85 30		sta $30				sta 	zTemp0+1
.113d	a0 03		ldy #$03			ldy 	#3 							; we offset by 3 because 3 at entry, now get the address
.113f	b1 2f		lda ($2f),y			lda 	(zTemp0),y 					; into zTemp1 as a real address, not offset
.1141	85 31		sta $31				sta 	zTemp1
.1143	c8		iny				iny
.1144	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.1146	18		clc				clc
.1147	6d 07 04	adc $0407			adc 	variableStartPage
.114a	85 32		sta $32				sta 	zTemp1+1
.114c	e8		inx				inx 								; next index
.114d	80 c1		bra $1110			bra 	_ACIndexLoop
.114f					_ACInnerLevel:
.114f	a0 02		ldy #$02			ldy 	#2
.1151	b1 31		lda ($31),y			lda 	(zTemp1),y
.1153	30 46		bmi $119b			bmi 	_ACBadIndex 				; it has sub arrays, so bad index.
.1155	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16 		; check if it is an iFloat
.1157	c9 00		cmp #$00			cmp 	#NSSIFloat
.1159	d0 13		bne $116e			bne 	_ACNotFloat
.115b	a5 30		lda $30				lda 	zTemp0+1 					; double and add zTemp0 (x3)
.115d	48		pha				pha
.115e	a5 2f		lda $2f				lda 	zTemp0
.1160	06 2f		asl $2f				asl 	zTemp0 						; x 2
.1162	26 30		rol $30				rol 	zTemp0+1
.1164	18		clc				clc 								; add back x 3
.1165	65 2f		adc $2f				adc 	zTemp0
.1167	85 2f		sta $2f				sta 	zTemp0
.1169	68		pla				pla
.116a	65 30		adc $30				adc 	zTemp0+1
.116c	85 30		sta $30				sta 	zTemp0+1
.116e					_ACNotFloat:
.116e	06 2f		asl $2f				asl 	zTemp0 						; x 2 or x 6 depending.
.1170	26 30		rol $30				rol 	zTemp0+1
.1172	18		clc				clc
.1173	a5 2f		lda $2f				lda 	zTemp0
.1175	69 03		adc #$03			adc 	#3
.1177	85 2f		sta $2f				sta 	zTemp0
.1179	90 02		bcc $117d			bcc 	_ACNoCarry
.117b	e6 30		inc $30				inc 	zTemp0+1
.117d					_ACNoCarry:
.117d	fa		plx				plx 								; X points to first slot of array parameters
.117e	18		clc				clc
.117f	a5 2f		lda $2f				lda 	zTemp0
.1181	65 31		adc $31				adc 	zTemp1
.1183	95 41		sta $41,x			sta 	NSMantissa0,x
.1185	a5 30		lda $30				lda 	zTemp0+1
.1187	65 32		adc $32				adc 	zTemp1+1
.1189	38		sec				sec
.118a	ed 07 04	sbc $0407			sbc 	variableStartPage
.118d	95 4d		sta $4d,x			sta 	NSMantissa1,x
.118f	74 59		stz $59,x			stz 	NSMantissa2,x
.1191	74 65		stz $65,x			stz 	NSMantissa3,x
.1193	74 35		stz $35,x			stz 	NSStatus,x
.1195	74 71		stz $71,x			stz 	NSExponent,x
.1197	7a		ply				ply 	 							; restore code pointer
.1198	4c 29 10	jmp $1029			jmp 	NextCommand
.119b					_ACBadIndex:
.119b	4c 9d 27	jmp $279d		jmp	ErrorV_index
.119e					UnaryAsc:
.119e	fa		plx				plx
.119f	5a		phy				phy
.11a0	b5 41		lda $41,x			lda 	NSMantissa0,x 				; string address.
.11a2	85 2f		sta $2f				sta 	zTemp0
.11a4	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.11a6	85 30		sta $30				sta 	zTemp0+1
.11a8	b2 2f		lda ($2f)			lda 	(zTemp0) 					; if empty string return zero
.11aa	f0 06		beq $11b2			beq 	_UAExit
.11ac	5a		phy				phy 								; otherwise first character
.11ad	a0 01		ldy #$01			ldy 	#1
.11af	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.11b1	7a		ply				ply
.11b2					_UAExit:
.11b2	20 0a 2e	jsr $2e0a			jsr 	FloatSetByte
.11b5	7a		ply				ply
.11b6	4c 29 10	jmp $1029			jmp 	NextCommand
.11b9					CommandAssert:
.11b9	fa		plx				plx
.11ba	e0 00		cpx #$00			cpx 	#0 							; check only one element on stack
.11bc	d0 09		bne $11c7			bne 	_CAFail
.11be	20 2a 2e	jsr $2e2a			jsr 	FloatIsZero 				; is it zero ?
.11c1	f0 04		beq $11c7			beq 	_CAFail
.11c3	ca		dex				dex
.11c4	4c 29 10	jmp $1029			jmp 	NextCommand
.11c7					_CAFail:
.11c7	4c f6 26	jmp $26f6		jmp	ErrorV_assert
.11ca					X16_Audio_Parameters8_16:
.11ca	20 d0 11	jsr $11d0			jsr 	X16_Audio_Parameters8_8
.11cd	a4 4e		ldy $4e				ldy 	NSMantissa1+1
.11cf	60		rts				rts
.11d0					X16_Audio_Parameters8_8:
.11d0	a2 01		ldx #$01			ldx 	#1
.11d2	20 43 2a	jsr $2a43			jsr 	FloatIntegerPart
.11d5	ca		dex				dex
.11d6	20 43 2a	jsr $2a43			jsr 	FloatIntegerPart
.11d9	20 05 18	jsr $1805			jsr 	GetInteger8Bit
.11dc	a6 42		ldx $42				ldx 	NSMantissa0+1
.11de	a0 00		ldy #$00			ldy 	#0
.11e0	60		rts				rts
.11e1					X16_Audio_Parameters8_String:
.11e1	20 ca 11	jsr $11ca			jsr 	X16_Audio_Parameters8_16 	; get as numbers.
.11e4	da		phx				phx 								; set the voice
.11e5	5a		phy				phy
.11e6	20 6e ff	jsr $ff6e			jsr 	X16_JSRFAR
.11e9	20 0c c0	jsr $c00c			jsr 	X16A_bas_playstringvoice
>11ec	0a						.byte 	X16_AudioCodeBank
.11ed	7a		ply				ply
.11ee	fa		plx				plx
.11ef	86 2f		stx $2f				stx 	zTemp0
.11f1	84 30		sty $30				sty 	zTemp0+1
.11f3	b2 2f		lda ($2f)			lda 	(zTemp0) 					; read length
.11f5	e8		inx				inx 								; point YX to first character.
.11f6	d0 01		bne $11f9			bne 	_X16APSSkip
.11f8	c8		iny				iny
.11f9					_X16APSSkip:
.11f9	60		rts				rts
.11fa					Unary16Bin:
.11fa	fa		plx				plx
.11fb	20 0b 18	jsr $180b			jsr 	GetInteger16Bit				; 16 bit int
.11fe	a9 10		lda #$10			lda 	#16 						; allocate / set 16 bytes.
.1200	20 d5 1e	jsr $1ed5			jsr 	StringAllocTemp
.1203	a5 30		lda $30				lda 	zTemp0+1
.1205	f0 03		beq $120a			beq 	_UBNoHigh
.1207	20 12 12	jsr $1212			jsr 	_UBWriteBinary
.120a					_UBNoHigh:
.120a	a5 2f		lda $2f				lda 	zTemp0
.120c	20 12 12	jsr $1212			jsr 	_UBWriteBinary
.120f	4c 29 10	jmp $1029			jmp 	NextCommand
.1212					_UBWriteBinary:
.1212	5a		phy				phy
.1213	a0 08		ldy #$08			ldy 	#8
.1215					_UBWLoop:
.1215	0a		asl a				asl 	a
.1216	48		pha				pha
.1217	a9 00		lda #$00			lda  	#0
.1219	69 30		adc #$30			adc 	#48
.121b	20 fe 1e	jsr $1efe			jsr 	StringWriteChar
.121e	68		pla				pla
.121f	88		dey				dey
.1220	d0 f3		bne $1215			bne 	_UBWLoop
.1222	7a		ply				ply
.1223	60		rts				rts
.1224					PrintCharacter:
.1224	fa		plx				plx
.1225	b5 41		lda $41,x			lda 	NSMantissa0,x
.1227	ca		dex				dex
.1228	20 32 1b	jsr $1b32			jsr 	VectorPrintCharacter
.122b	4c 29 10	jmp $1029			jmp 	NextCommand
.122e					UnaryChr:
.122e	fa		plx				plx
.122f	20 05 18	jsr $1805			jsr 	GetInteger8Bit 				; get integer to convert.
.1232	48		pha				pha 								; save it and allocate for it
.1233	a9 01		lda #$01			lda 	#1 							; 1 character
.1235	20 d5 1e	jsr $1ed5			jsr 	StringAllocTemp
.1238	a9 01		lda #$01			lda 	#1 							; length 1.
.123a	92 22		sta ($22)			sta 	(zsTemp)
.123c	68		pla				pla 								; character code makes string.
.123d	5a		phy				phy
.123e	a0 01		ldy #$01			ldy 	#1
.1240	91 22		sta ($22),y			sta 	(zsTemp),y
.1242	7a		ply				ply
.1243	4c 29 10	jmp $1029			jmp 	NextCommand
.1246					CommandClr:
.1246	fa		plx				plx
.1247	20 4d 12	jsr $124d			jsr 	ClearMemory
.124a	4c 29 10	jmp $1029			jmp 	NextCommand
.124d					ClearMemory:
.124d	ad 05 04	lda $0405			lda 	storeStartHigh 							; erase the work area
.1250	85 30		sta $30				sta 	zTemp0+1
.1252	64 2f		stz $2f				stz 	zTemp0
.1254	5a		phy				phy
.1255	a0 00		ldy #$00			ldy 	#0
.1257					_ClearLoop1:
.1257	a9 00		lda #$00			lda 	#0
.1259	91 2f		sta ($2f),y			sta 	(zTemp0),y
.125b	c8		iny				iny
.125c	d0 f9		bne $1257			bne 	_ClearLoop1
.125e	e6 30		inc $30				inc 	zTemp0+1
.1260	a5 30		lda $30				lda 	zTemp0+1
.1262	cd 06 04	cmp $0406			cmp 	storeEndHigh
.1265	d0 f0		bne $1257			bne 	_ClearLoop1
.1267	38		sec				sec 											; stack space = number of pages in total / 4
.1268	ad 06 04	lda $0406			lda 	storeEndHigh
.126b	ed 05 04	sbc $0405			sbc		storeStartHigh
.126e	4a		lsr a				lsr 	a
.126f	4a		lsr a				lsr 	a
.1270	d0 02		bne $1274			bne 	_NotEmpty 								; at least 1 !
.1272	a9 01		lda #$01			lda 	#1
.1274					_NotEmpty:
.1274	38		sec				sec 											; subtract from high to give string high memory
.1275	49 ff		eor #$ff			eor 	#$FF
.1277	6d 06 04	adc $0406			adc 	storeEndHigh
.127a	8d 03 04	sta $0403			sta 	stringHighMemory+1
.127d	9c 02 04	stz $0402			stz 	stringHighMemory
.1280	9c 68 05	stz $0568			stz 	stringInitialised 						; string system not initialised
.1283	ad 05 04	lda $0405			lda 	storeStartHigh 							; stack at end of start memory.
.1286	3a		dec a				dec 	a
.1287	85 25		sta $25				sta 	runtimeStackPtr+1
.1289	a9 ff		lda #$ff			lda 	#$FF
.128b	85 24		sta $24				sta 	runtimeStackPtr
.128d	a9 ff		lda #$ff			lda 	#$FF 									; duff marker in case we try to remove it.
.128f	92 24		sta ($24)			sta 	(runtimeStackPtr)
.1291	7a		ply				ply
.1292	60		rts				rts
.1293					CompareStrings:
.1293	fa		plx				plx
.1294	ca		dex				dex
.1295	b5 41		lda $41,x			lda 	NSMantissa0,x 				; copy strings to zTemp0 and zTemp1
.1297	85 2f		sta $2f				sta 	zTemp0
.1299	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.129b	85 30		sta $30				sta 	zTemp0+1
.129d	b5 42		lda $42,x			lda 	NSMantissa0+1,x
.129f	85 31		sta $31				sta 	zTemp1
.12a1	b5 4e		lda $4e,x			lda 	NSMantissa1+1,x
.12a3	85 32		sta $32				sta 	zTemp1+1
.12a5	da		phx				phx
.12a6	5a		phy				phy
.12a7	b2 2f		lda ($2f)			lda 	(zTemp0)					; work out number to compare
.12a9	d2 31		cmp ($31)			cmp 	(zTemp1)
.12ab	90 02		bcc $12af			bcc 	_CSNIsSmallest 				; as min(len(s1),len(s2))
.12ad	b2 31		lda ($31)			lda 	(zTemp1)
.12af					_CSNIsSmallest:
.12af	aa		tax				tax 								; count in X
.12b0	f0 0c		beq $12be			beq 	_CSNMatches 				; if zero already matches as far as we can go.
.12b2	a0 00		ldy #$00			ldy 	#0 							; start from offset 1
.12b4					_CSNCompareString:
.12b4	c8		iny				iny 								; pre increment
.12b5	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.12b7	d1 31		cmp ($31),y			cmp 	(zTemp1),y
.12b9	d0 0a		bne $12c5			bne 	_CSNDifferent 				; numbers are different.
.12bb	ca		dex				dex
.12bc	d0 f6		bne $12b4			bne 	_CSNCompareString 			; compare common characters in two strings.
.12be					_CSNMatches:
.12be	38		sec				sec
.12bf	b2 2f		lda ($2f)			lda 	(zTemp0)					; compare lengths
.12c1	f2 31		sbc ($31)			sbc 	(zTemp1)
.12c3	f0 06		beq $12cb			beq 	_CSNSExit 					; if zero, then strings match and exit.
.12c5					_CSNDifferent:
.12c5	a9 ff		lda #$ff			lda 	#$FF
.12c7	90 02		bcc $12cb			bcc 	_CSNSExit
.12c9	a9 01		lda #$01			lda 	#$01
.12cb					_CSNSExit:
.12cb	7a		ply				ply
.12cc	fa		plx				plx
.12cd	c9 00		cmp #$00			cmp 	#0 							; set the flags.
.12cf	20 0a 2e	jsr $2e0a			jsr 	FloatSetByte 				; output the byte
.12d2	4c 29 10	jmp $1029			jmp 	NextCommand
.12d5					StringConcrete:
.12d5	9c 68 05	stz $0568			stz 	stringInitialised	 		; initialise next usage
.12d8	84 34		sty $34				sty 	zTemp2+1 					; save pointer to new string
.12da	85 33		sta $33				sta 	zTemp2
.12dc	b2 33		lda ($33)			lda 	(zTemp2) 					; length required
.12de	4a		lsr a				lsr 	a 							; allow half as much for expansion.
.12df	18		clc				clc
.12e0	72 33		adc ($33)			adc 	(zTemp2)
.12e2	90 02		bcc $12e6			bcc 	_SCNoOverflow
.12e4	a9 ff		lda #$ff			lda 	#255
.12e6					_SCNoOverflow:
.12e6	c9 0a		cmp #$0a			cmp 	#10 						; and a minimum of 10
.12e8	b0 02		bcs $12ec			bcs 	_SCNoMinimum
.12ea	a9 0a		lda #$0a			lda 	#10
.12ec					_SCNoMinimum:
.12ec	85 31		sta $31				sta 	zTemp1 						; save max length.
.12ee	38		sec				sec
.12ef	ad 02 04	lda $0402			lda		stringHighMemory 			; subtract max length from high memory.
.12f2	e5 31		sbc $31				sbc 	zTemp1
.12f4	a8		tay				tay
.12f5	ad 03 04	lda $0403			lda 	stringHighMemory+1
.12f8	e9 00		sbc #$00			sbc 	#0
.12fa	48		pha				pha
.12fb	38		sec				sec 								; subtract 3 more
.12fc	98		tya				tya
.12fd	e9 03		sbc #$03			sbc 	#3
.12ff	8d 02 04	sta $0402			sta 	stringHighMemory 			; to string high memory/zsTemp
.1302	85 22		sta $22				sta 	zsTemp
.1304	68		pla				pla
.1305	e9 00		sbc #$00			sbc 	#0
.1307	8d 03 04	sta $0403			sta 	stringHighMemory+1
.130a	85 23		sta $23				sta 	zsTemp+1
.130c	a5 31		lda $31				lda 	zTemp1 						; set max length.
.130e	92 22		sta ($22)			sta 	(zsTemp)
.1310	a0 01		ldy #$01			ldy 	#1 							; clear control byte.
.1312	a9 00		lda #$00			lda 	#0
.1314	91 22		sta ($22),y			sta 	(zsTemp),y
.1316	a5 22		lda $22				lda 	zsTemp 						; new empty string in YA.
.1318	a4 23		ldy $23				ldy 	zsTemp+1
.131a	60		rts				rts
.131b					CommandData:
.131b	fa		plx				plx
.131c	98		tya				tya 								; data length +1 added to Y
.131d	38		sec				sec
.131e	71 28		adc ($28),y			adc 	(codePtr),y 				; next instruction
.1320	a8		tay				tay
.1321	4c 29 10	jmp $1029			jmp 	NextCommand
.1324					CommandDIM:
.1324	fa		plx				plx
.1325	5a		phy				phy
.1326	20 05 18	jsr $1805			jsr 	GetInteger8Bit 				; get the type we are building for (bits 6 & 5)
.1329	8d 08 04	sta $0408			sta 	dimType
.132c	ca		dex				dex 								; this is the number of indices
.132d	20 05 18	jsr $1805			jsr 	GetInteger8Bit
.1330	85 31		sta $31				sta 	zTemp1 						; subtract n from X so X points at the *first*
.1332	8a		txa				txa 								; dimension.
.1333	38		sec				sec
.1334	e5 31		sbc $31				sbc 	zTemp1
.1336	aa		tax				tax
.1337	a5 31		lda $31				lda 	zTemp1 						; number of indices.
.1339	20 4d 13	jsr $134d			jsr 	DIMCreateOneLevel 			; create one at this level
.133c	95 41		sta $41,x			sta 	NSMantissa0,x 				; set it as a return address as an integer
.133e	98		tya				tya
.133f	95 4d		sta $4d,x			sta 	NSMantissa1,x
.1341	74 59		stz $59,x			stz 	NSMantissa2,x
.1343	74 65		stz $65,x			stz 	NSMantissa3,x
.1345	74 35		stz $35,x			stz 	NSStatus,x
.1347	74 71		stz $71,x			stz 	NSExponent,x
.1349	7a		ply				ply
.134a	4c 29 10	jmp $1029			jmp 	NextCommand
.134d					DIMCreateOneLevel:
.134d	a4 26		ldy $26				ldy 	availableMemory 			; push the start of this block on the stack.
.134f	5a		phy				phy
.1350	a4 27		ldy $27				ldy 	availableMemory+1
.1352	5a		phy				phy
.1353	a8		tay				tay 			 					; save current level into Y
.1354	20 0b 18	jsr $180b			jsr		GetInteger16Bit 			; size of dimension to zTemp0
.1357	e6 2f		inc $2f				inc 	zTemp0 						; bump the size of the dimension as we need one more
.1359	d0 02		bne $135d			bne 	_DCOLNoCarry
.135b	e6 30		inc $30				inc 	zTemp0+1
.135d					_DCOLNoCarry:
.135d	a5 2f		lda $2f				lda 	zTemp0 						; write out the +1 size of the dimension
.135f	20 00 14	jsr $1400			jsr 	DIMWriteByte
.1362	a5 30		lda $30				lda 	zTemp0+1
.1364	20 00 14	jsr $1400			jsr 	DIMWriteByte
.1367	ad 08 04	lda $0408			lda 	dimType 					; get type information
.136a	29 7f		and #$7f			and 	#$7F
.136c	c0 01		cpy #$01			cpy 	#1
.136e	f0 02		beq $1372			beq 	_DCOLNoSubLevel
.1370	09 80		ora #$80			ora 	#$80 						; set sublevel bit if there is one.
.1372					_DCOLNoSubLevel:
.1372	20 00 14	jsr $1400			jsr 	DIMWriteByte
.1375	a5 26		lda $26				lda 	availableMemory
.1377	85 31		sta $31				sta 	zTemp1
.1379	a5 27		lda $27				lda 	availableMemory+1
.137b	85 32		sta $32				sta 	zTemp1+1
.137d	a5 2f		lda $2f				lda 	zTemp0
.137f	85 33		sta $33				sta 	zTemp2
.1381	a5 30		lda $30				lda 	zTemp0+1
.1383	85 34		sta $34				sta 	zTemp2+1
.1385					_DCOLFillArray:
.1385	20 e4 13	jsr $13e4			jsr 	DIMWriteElement 			; write out an element, could be a sub-level or individual data
.1388	a5 2f		lda $2f				lda 	zTemp0 						; decrement one from count.
.138a	d0 02		bne $138e			bne 	_DCOLNoBorrow
.138c	c6 30		dec $30				dec 	zTemp0+1
.138e					_DCOLNoBorrow:
.138e	c6 2f		dec $2f				dec 	zTemp0
.1390	a5 2f		lda $2f				lda 	zTemp0 						; until completed.
.1392	05 30		ora $30				ora 	zTemp0+1
.1394	d0 ef		bne $1385			bne 	_DCOLFillArray
.1396	c0 01		cpy #$01			cpy 	#1
.1398	f0 42		beq $13dc			beq 	_DCOLExit
.139a					_DCOLRecursionLoop:
.139a	da		phx				phx 								; save XY
.139b	5a		phy				phy
.139c	a5 31		lda $31				lda 	zTemp1 						; push zTemp1 (position) zTemp2 (count)
.139e	48		pha				pha
.139f	a5 32		lda $32				lda 	zTemp1+1
.13a1	48		pha				pha
.13a2	a5 33		lda $33				lda 	zTemp2
.13a4	48		pha				pha
.13a5	a5 34		lda $34				lda 	zTemp2+1
.13a7	48		pha				pha
.13a8	88		dey				dey  								; lower level -> A
.13a9	98		tya				tya
.13aa	e8		inx				inx 								; next index size
.13ab	20 4d 13	jsr $134d			jsr 	DIMCreateOneLevel 			; create a level, return in YA
.13ae	fa		plx				plx 								; restore zTemp2 (count) and zTemp1 (position)
.13af	86 34		stx $34				stx 	zTemp2+1
.13b1	fa		plx				plx
.13b2	86 33		stx $33				stx 	zTemp2
.13b4	fa		plx				plx
.13b5	86 32		stx $32				stx 	zTemp1+1
.13b7	fa		plx				plx
.13b8	86 31		stx $31				stx 	zTemp1
.13ba	92 31		sta ($31)			sta 	(zTemp1) 					; write out position
.13bc	98		tya				tya
.13bd	a0 01		ldy #$01			ldy 	#1
.13bf	91 31		sta ($31),y			sta 	(zTemp1),y
.13c1	7a		ply				ply 								; restore XY
.13c2	fa		plx				plx
.13c3	18		clc				clc
.13c4	a5 31		lda $31				lda 	zTemp1 						; add 2 to zTemp1
.13c6	69 02		adc #$02			adc 	#2
.13c8	85 31		sta $31				sta 	zTemp1
.13ca	90 02		bcc $13ce			bcc 	_DCOLRNoCarry
.13cc	e6 32		inc $32				inc 	zTemp1+1
.13ce					_DCOLRNoCarry:
.13ce	a5 33		lda $33				lda 	zTemp2 						; decrement one from count in zTemp2
.13d0	d0 02		bne $13d4			bne 	_DCOLRNoBorrow
.13d2	c6 34		dec $34				dec 	zTemp2+1
.13d4					_DCOLRNoBorrow:
.13d4	c6 33		dec $33				dec 	zTemp2
.13d6	a5 33		lda $33				lda 	zTemp2 						; until completed.
.13d8	05 34		ora $34				ora 	zTemp2+1
.13da	d0 be		bne $139a			bne 	_DCOLRecursionLoop
.13dc					_DCOLExit:
.13dc	68		pla				pla 								; get MSB, make offset again
.13dd	38		sec				sec
.13de	ed 07 04	sbc $0407			sbc 	variableStartPage
.13e1	a8		tay				tay
.13e2	68		pla				pla 								; YA now contains offset address.
.13e3	60		rts				rts
.13e4					DIMWriteElement:
.13e4	da		phx				phx
.13e5	a2 02		ldx #$02			ldx	 	#2 							; work out size is 2 or 6
.13e7	c0 01		cpy #$01			cpy 	#1 							; do we have a sub level, if so 2.
.13e9	d0 0b		bne $13f6			bne 	_DIMWENotFloat
.13eb	ad 08 04	lda $0408			lda 	dimType
.13ee	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16
.13f0	c9 00		cmp #$00			cmp 	#NSSIFloat
.13f2	d0 02		bne $13f6			bne 	_DIMWENotFloat
.13f4	a2 06		ldx #$06			ldx 	#6
.13f6					_DIMWENotFloat:
.13f6	a9 00		lda #$00			lda 	#0
.13f8	20 00 14	jsr $1400			jsr 	DIMWriteByte
.13fb	ca		dex				dex
.13fc	d0 f8		bne $13f6			bne 	_DIMWENotFloat
.13fe	fa		plx				plx
.13ff	60		rts				rts
.1400					DIMWriteByte:
.1400	92 26		sta ($26)			sta 	(availableMemory)
.1402	e6 26		inc $26				inc 	availableMemory
.1404	d0 0b		bne $1411			bne 	_DIMWBSkip
.1406	e6 27		inc $27				inc 	availableMemory+1
.1408	48		pha				pha
.1409	a5 27		lda $27				lda 	availableMemory+1 			; check out of memory
.140b	cd 03 04	cmp $0403			cmp 	stringHighMemory+1
.140e	b0 02		bcs $1412			bcs 	_DIMWBMemory
.1410	68		pla				pla
.1411					_DIMWBSkip:
.1411	60		rts				rts
.1412					_DIMWBMemory:
.1412	4c b0 27	jmp $27b0		jmp	ErrorV_memory
.0408					dimType:
>0408							.fill 	1
.1415					CommandEnd:
.1415	fa		plx				plx
.1416	86 2f		stx $2f				stx 	zTemp0
.1418	4c ff ff	jmp $ffff			jmp 	$FFFF
.141b					Unimplemented:
.141b	4c e3 26	jmp $26e3			jmp 	ErrorV_unimplemented
.141e					ErrorHandler:
.141e	98		tya				tya
.141f	18		clc				clc
.1420	65 28		adc $28				adc 	codePtr
.1422	85 28		sta $28				sta 	codePtr
.1424	90 02		bcc $1428			bcc 	_EHNoCarry
.1426	e6 29		inc $29				inc 	codePtr+1
.1428					_EHNoCarry:
.1428	68		pla				pla
.1429	7a		ply				ply
.142a	85 2f		sta $2f				sta 	zTemp0
.142c	84 30		sty $30				sty 	zTemp0+1
.142e	a2 00		ldx #$00			ldx 	#0 							; output to channel #0
.1430	a0 01		ldy #$01			ldy 	#1
.1432					_EHDisplayMsg:
.1432	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.1434	20 4a 24	jsr $244a			jsr 	XPrintCharacterToChannel
.1437	c8		iny				iny
.1438	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.143a	d0 f6		bne $1432			bne 	_EHDisplayMsg
.143c	a9 20		lda #$20			lda 	#32
.143e	20 4a 24	jsr $244a			jsr 	XPrintCharacterToChannel
.1441	a9 40		lda #$40			lda 	#64
.1443	20 4a 24	jsr $244a			jsr 	XPrintCharacterToChannel
.1446	a9 20		lda #$20			lda 	#32
.1448	20 4a 24	jsr $244a			jsr 	XPrintCharacterToChannel
.144b	20 50 14	jsr $1450			jsr 	EHDisplayCodePtr
.144e	80 fe		bra $144e	_EHStop:bra 	_EHStop
.1450					EHDisplayCodePtr:
.1450	a9 20		lda #$20			lda 	#32
.1452	20 4a 24	jsr $244a			jsr 	XPrintCharacterToChannel
.1455	38		sec				sec
.1456	a5 29		lda $29				lda 	codePtr+1 					; display the p-code address of the error.
.1458	ed 04 04	sbc $0404			sbc 	runtimeHigh
.145b	20 64 14	jsr $1464			jsr 	_EHDisplayHex
.145e	a5 28		lda $28				lda 	codePtr
.1460	20 64 14	jsr $1464			jsr 	_EHDisplayHex
.1463	60		rts				rts
.1464					_EHDisplayHex:
.1464	48		pha				pha
.1465	4a		lsr a				lsr 	a
.1466	4a		lsr a				lsr 	a
.1467	4a		lsr a				lsr 	a
.1468	4a		lsr a				lsr 	a
.1469	20 6d 14	jsr $146d			jsr 	_EHDisplayNibble
.146c	68		pla				pla
.146d					_EHDisplayNibble:
.146d	29 0f		and #$0f			and 	#15
.146f	c9 0a		cmp #$0a			cmp 	#10
.1471	90 02		bcc $1475			bcc 	_EHNotHex
.1473	69 06		adc #$06			adc 	#6
.1475					_EHNotHex:
.1475	69 30		adc #$30			adc 	#48
.1477	4c 4a 24	jmp $244a			jmp 	XPrintCharacterToChannel
.147a					CommandFor:
.147a	fa		plx				plx
.147b	a9 d3		lda #$d3			lda 	#FRAME_FOR 					; open frame
.147d	20 fd 14	jsr $14fd			jsr 	StackOpenFrame
.1480	20 3c 19	jsr $193c			jsr 	StackSaveCurrentPosition 	; normalise to Y=0 and save position.
.1483	a0 07		ldy #$07			ldy 	#7 							; copy step out
.1485	20 df 14	jsr $14df			jsr 	CopyTOSToOffsetY
.1488	ca		dex				dex
.1489	a0 0d		ldy #$0d			ldy 	#13 						; copy terminal value.
.148b	20 df 14	jsr $14df			jsr 	CopyTOSToOffsetY
.148e	ca		dex				dex
.148f	b5 4d		lda $4d,x			lda 	NSMantissa1,x 				; bit 15 of reference indicates type int16
.1491	29 80		and #$80			and 	#$80
.1493	a0 04		ldy #$04			ldy 	#4
.1495	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.1497	b5 41		lda $41,x			lda 	NSMantissa0,x 				; copy the reference address
.1499	a0 05		ldy #$05			ldy 	#5 							; adjusted to be a real address
.149b	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.149d	85 2f		sta $2f				sta 	zTemp0 						; also to zTemp0
.149f	c8		iny				iny
.14a0	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.14a2	18		clc				clc
.14a3	29 7f		and #$7f			and 	#$7F 						; throw the type bit.
.14a5	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.14a7	6d 07 04	adc $0407			adc 	variableStartPage 			; point to variable page.
.14aa	85 30		sta $30				sta 	zTemp0+1
.14ac	ca		dex				dex 								; throw reference.
.14ad	a0 05		ldy #$05			ldy 	#5 							; check the index, step and terminal values
.14af	b1 2f		lda ($2f),y			lda 	(zTemp0),y 					; are all +ve integers, sign bits first.
.14b1	a0 0c		ldy #$0c			ldy 	#12
.14b3	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.14b5	a0 12		ldy #$12			ldy 	#18
.14b7	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.14b9	29 80		and #$80			and 	#$80 						; only interested in sign bit.
.14bb	88		dey				dey 								; now the exponents.
.14bc	11 2f		ora ($2f),y			ora 	(zTemp0),y
.14be	a0 0b		ldy #$0b			ldy 	#11
.14c0	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.14c2	a0 11		ldy #$11			ldy 	#17
.14c4	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.14c6	a0 08		ldy #$08			ldy 	#8 							; step must be 1 byte.
.14c8	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.14ca	c8		iny				iny
.14cb	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.14cd	c8		iny				iny
.14ce	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.14d0	d0 08		bne $14da			bne 	_CFNoOptimise
.14d2	a0 04		ldy #$04			ldy 	#4 							; set the runtime stack pointer optimisation flag.
.14d4	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.14d6	09 40		ora #$40			ora 	#$40
.14d8	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.14da					_CFNoOptimise:
.14da	a0 00		ldy #$00			ldy 	#0
.14dc	4c 29 10	jmp $1029			jmp 	NextCommand
.14df					CopyTOSToOffsetY:
.14df	b5 41		lda $41,x			lda 	NSMantissa0,x
.14e1	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.14e3	c8		iny				iny
.14e4	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.14e6	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.14e8	c8		iny				iny
.14e9	b5 59		lda $59,x			lda 	NSMantissa2,x
.14eb	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.14ed	c8		iny				iny
.14ee	b5 65		lda $65,x			lda 	NSMantissa3,x
.14f0	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.14f2	c8		iny				iny
.14f3	b5 71		lda $71,x			lda 	NSExponent,x
.14f5	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.14f7	c8		iny				iny
.14f8	b5 35		lda $35,x			lda 	NSStatus,x
.14fa	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.14fc	60		rts				rts
.14fd					StackOpenFrame:
.14fd	48		pha				pha 								; save frame marker
.14fe	29 1f		and #$1f			and 	#$1F 						; bytes required.
.1500	85 2f		sta $2f				sta 	zTemp0
.1502	38		sec				sec 								; subtract from runtime stack pointer.
.1503	a5 24		lda $24				lda		runtimeStackPtr
.1505	e5 2f		sbc $2f				sbc 	zTemp0
.1507	85 24		sta $24				sta 	runtimeStackPtr
.1509	a5 25		lda $25				lda		runtimeStackPtr+1
.150b	e9 00		sbc #$00			sbc 	#0
.150d	85 25		sta $25				sta 	runtimeStackPtr+1
.150f	68		pla				pla 								; put frame marker at +0
.1510	92 24		sta ($24)			sta 	(runtimeStackPtr)
.1512	60		rts				rts
.1513					StackCloseFrame:
.1513	b2 24		lda ($24)			lda 	(runtimeStackPtr)			; get frame marker
.1515	29 1f		and #$1f			and 	#$1F 						; size
.1517	18		clc				clc
.1518	65 24		adc $24				adc 	runtimeStackPtr
.151a	85 24		sta $24				sta 	runtimeStackPtr
.151c	90 02		bcc $1520			bcc 	_SCFNoCarry
.151e	e6 25		inc $25				inc 	runtimeStackPtr+1
.1520					_SCFNoCarry:
.1520	60		rts				rts
.1521					StackFindFrame:
.1521	8d 09 04	sta $0409			sta 	requiredFrame
.1524					_SFFLoop:
.1524	b2 24		lda ($24)			lda 	(runtimeStackPtr) 			; get TOS
.1526	c9 ff		cmp #$ff			cmp 	#$FF 						; if found $FF then this is a fail.
.1528	f0 10		beq $153a			beq 	SCFFail
.152a	cd 09 04	cmp $0409			cmp 	requiredFrame 				; found this type ?
.152d	f0 05		beq $1534			beq 	_SFFFound
.152f	20 13 15	jsr $1513			jsr 	StackCloseFrame 			; close the top frame
.1532	80 f0		bra $1524			bra 	_SFFLoop 					; and try te next.
.1534					_SFFFound:
.1534	60		rts				rts
.1535					StackCheckFrame:
.1535	d2 24		cmp ($24)			cmp 	(runtimeStackPtr) 			; matches current frame
.1537	d0 01		bne $153a			bne 	SCFFail
.1539	60		rts				rts
.153a					SCFFail:
.153a	4c 40 27	jmp $2740		jmp	ErrorV_structure
.0409					requiredFrame:
>0409							.fill 	1
.153d					UnaryFre:
.153d	fa		plx				plx
.153e	20 08 2e	jsr $2e08			jsr 	FloatSetZero 				; zero the result (32 bit integer)
.1541	38		sec				sec
.1542	ad 02 04	lda $0402			lda 	stringHighMemory 			; calculate the free memory.
.1545	ed 00 04	sbc $0400			sbc 	stringLowMemory
.1548	95 41		sta $41,x			sta		NSMantissa0,x
.154a	ad 03 04	lda $0403			lda 	stringHighMemory+1
.154d	ed 01 04	sbc $0401			sbc 	stringLowMemory+1
.1550	95 4d		sta $4d,x			sta		NSMantissa1,x
.1552	4c 29 10	jmp $1029			jmp 	NextCommand
.1555					CommandGet:
.1555	fa		plx				plx
.1556	e8		inx				inx
.1557	a9 01		lda #$01			lda 	#1 							; 1 character space
.1559	20 d5 1e	jsr $1ed5			jsr 	StringAllocTemp
.155c	20 3b 1b	jsr $1b3b			jsr 	VectorGetCharacter 			; get a character
.155f	c9 00		cmp #$00			cmp 	#0
.1561	f0 09		beq $156c			beq 	_CGNone
.1563	5a		phy				phy
.1564	a0 01		ldy #$01			ldy 	#1 							; store char
.1566	91 22		sta ($22),y			sta 	(zsTemp),y
.1568	98		tya				tya 								; store length.
.1569	92 22		sta ($22)			sta 	(zsTemp)
.156b	7a		ply				ply
.156c					_CGNone:
.156c	4c 29 10	jmp $1029			jmp 	NextCommand
.156f					CommandGosub:
.156f	fa		plx				plx
.1570	a9 e4		lda #$e4			lda 	#FRAME_GOSUB
.1572	20 fd 14	jsr $14fd			jsr 	StackOpenFrame
.1575	20 3c 19	jsr $193c			jsr 	StackSaveCurrentPosition
.1578	4c 8d 15	jmp $158d			jmp 	PerformGOTO
.157b					CommandReturn:
.157b	fa		plx				plx
.157c	a9 e4		lda #$e4			lda 	#FRAME_GOSUB
.157e	20 21 15	jsr $1521			jsr 	StackFindFrame
.1581	20 4d 19	jsr $194d			jsr 	StackLoadCurrentPosition
.1584	c8		iny				iny
.1585	c8		iny				iny
.1586	20 13 15	jsr $1513			jsr 	StackCloseFrame
.1589	4c 29 10	jmp $1029			jmp 	NextCommand
.158c					CommandGoto:
.158c	fa		plx				plx
.158d					PerformGOTO:
.158d	c8		iny				iny 								; push MSB of offset on stack
.158e	b1 28		lda ($28),y			lda 	(codePtr),y
.1590	48		pha				pha
.1591	88		dey				dey 								; point LSB of offset
.1592	18		clc				clc 								; add LSB
.1593	b1 28		lda ($28),y			lda 	(codePtr),y
.1595	65 28		adc $28				adc 	codePtr
.1597	85 28		sta $28				sta 	codePtr
.1599	68		pla				pla 								; restore offset MSB and add
.159a	65 29		adc $29				adc 	codePtr+1
.159c	85 29		sta $29				sta 	codePtr+1
.159e	4c 29 10	jmp $1029			jmp 	NextCommand
.15a1					CommandGotoZ:
.15a1	fa		plx				plx
.15a2	20 2a 2e	jsr $2e2a			jsr 	FloatIsZero
.15a5	ca		dex				dex
.15a6	c9 00		cmp #$00			cmp 	#0
.15a8	f0 e3		beq $158d			beq 	PerformGOTO
.15aa	c8		iny				iny
.15ab	c8		iny				iny
.15ac	4c 29 10	jmp $1029			jmp 	NextCommand
.15af					CommandGotoNZ:
.15af	fa		plx				plx
.15b0	20 2a 2e	jsr $2e2a			jsr 	FloatIsZero
.15b3	ca		dex				dex
.15b4	c9 00		cmp #$00			cmp 	#0
.15b6	d0 d5		bne $158d			bne 	PerformGOTO
.15b8	c8		iny				iny
.15b9	c8		iny				iny
.15ba	4c 29 10	jmp $1029			jmp 	NextCommand
.15bd					Command_PSET:
.15bd	fa		plx				plx
.15be	5a		phy				phy
.15bf	20 05 18	jsr $1805			jsr 	GetInteger8Bit 				; get the colour
.15c2	48		pha				pha
.15c3	a2 00		ldx #$00			ldx 	#0 							; copy 0/1 to r0,r1
.15c5	a0 02		ldy #$02			ldy 	#X16_r0
.15c7	20 49 16	jsr $1649			jsr 	GraphicsCopy2
.15ca	20 ff fe	jsr $feff			jsr 	X16_FB_cursor_position 		; set position.
.15cd	68		pla				pla 								; set pixel.
.15ce	20 0b ff	jsr $ff0b			jsr 	X16_FB_set_pixel
.15d1	7a		ply				ply
.15d2	a2 ff		ldx #$ff			ldx 	#$FF
.15d4	4c 29 10	jmp $1029			jmp 	NextCommand
.15d7					Command_LINE:
.15d7	fa		plx				plx
.15d8	5a		phy				phy
.15d9	20 3c 16	jsr $163c			jsr 	GraphicsColour
.15dc	a2 00		ldx #$00			ldx 	#0 							; copy 0/1/2/3 to r0,1,2,3
.15de	a0 02		ldy #$02			ldy 	#X16_r0
.15e0	20 46 16	jsr $1646			jsr 	GraphicsCopy4
.15e3	20 2c ff	jsr $ff2c			jsr 	X16_GRAPH_draw_line
.15e6	7a		ply				ply
.15e7	a2 ff		ldx #$ff			ldx 	#$FF
.15e9	4c 29 10	jmp $1029			jmp 	NextCommand
.15ec					Command_RECT:
.15ec	fa		plx				plx
.15ed	5a		phy				phy
.15ee	20 5d 16	jsr $165d			jsr 	GraphicsRectCoords
.15f1	38		sec				sec
.15f2	20 2f ff	jsr $ff2f			jsr 	X16_GRAPH_draw_rect
.15f5	7a		ply				ply
.15f6	a2 ff		ldx #$ff			ldx 	#$FF
.15f8	4c 29 10	jmp $1029			jmp 	NextCommand
.15fb					Command_FRAME:
.15fb	fa		plx				plx
.15fc	5a		phy				phy
.15fd	20 5d 16	jsr $165d			jsr 	GraphicsRectCoords
.1600	18		clc				clc
.1601	20 2f ff	jsr $ff2f			jsr 	X16_GRAPH_draw_rect
.1604	7a		ply				ply
.1605	a2 ff		ldx #$ff			ldx 	#$FF
.1607	4c 29 10	jmp $1029			jmp 	NextCommand
.160a					Command_CHAR:
.160a	fa		plx				plx
.160b	5a		phy				phy
.160c	ca		dex				dex  								; set the draw colour
.160d	20 3c 16	jsr $163c			jsr 	GraphicsColour
.1610	a2 00		ldx #$00			ldx 	#0 							; copy 0/1 to r0,r1
.1612	a0 02		ldy #$02			ldy 	#X16_r0
.1614	20 49 16	jsr $1649			jsr 	GraphicsCopy2
.1617	a5 44		lda $44				lda 	NSMantissa0+3 				; copy string address to zTemp0
.1619	85 2f		sta $2f				sta 	zTemp0
.161b	a5 50		lda $50				lda 	NSMantissa1+3
.161d	85 30		sta $30				sta 	zTemp0+1
.161f	b2 2f		lda ($2f)			lda 	(zTemp0) 					; count of chars to zTemp1
.1621	85 31		sta $31				sta 	zTemp1
.1623					_CCLoop:
.1623	a5 31		lda $31				lda 	zTemp1 						; done all chars ?
.1625	f0 0f		beq $1636			beq 	_CCExit
.1627	c6 31		dec $31				dec 	zTemp1 						; dec counter
.1629	e6 2f		inc $2f				inc 	zTemp0 						; pre-bump pointer
.162b	d0 02		bne $162f			bne 	_CCNoCarry
.162d	e6 30		inc $30				inc 	zTemp0+1
.162f					_CCNoCarry:
.162f	b2 2f		lda ($2f)			lda 	(zTemp0) 					; get character
.1631	20 41 ff	jsr $ff41			jsr 	X16_GRAPH_put_char 			; write it
.1634	80 ed		bra $1623			bra 	_CCLoop						; go round.
.1636					_CCExit:
.1636	7a		ply				ply
.1637	a2 ff		ldx #$ff			ldx 	#$FF
.1639	4c 29 10	jmp $1029			jmp 	NextCommand
.163c					GraphicsColour:
.163c	20 05 18	jsr $1805			jsr 	GetInteger8Bit
.163f	aa		tax				tax
.1640	a0 00		ldy #$00			ldy 	#0
.1642	20 29 ff	jsr $ff29			jsr 	X16_GRAPH_set_colors
.1645	60		rts				rts
.1646					GraphicsCopy4:
.1646	20 49 16	jsr $1649			jsr 	GraphicsCopy2
.1649					GraphicsCopy2:
.1649	20 4c 16	jsr $164c			jsr 	GraphicsCopy1
.164c					GraphicsCopy1:
.164c	20 43 2a	jsr $2a43			jsr 	FloatIntegerPart
.164f	b5 41		lda $41,x			lda 	NSMantissa0,x
.1651	99 00 00	sta $0000,y			sta 	0,y
.1654	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.1656	99 01 00	sta $0001,y			sta 	1,y
.1659	e8		inx				inx
.165a	c8		iny				iny
.165b	c8		iny				iny
.165c	60		rts				rts
.165d					GraphicsRectCoords:
.165d	20 3c 16	jsr $163c			jsr 	GraphicsColour 				; set colour
.1660	a2 00		ldx #$00			ldx 	#0 							; copy in order.
.1662	a0 02		ldy #$02			ldy 	#X16_r0
.1664	20 46 16	jsr $1646			jsr 	GraphicsCopy4
.1667	a2 02		ldx #$02			ldx 	#X16_r0 					; sort r0/r2
.1669	20 76 16	jsr $1676			jsr 	_GRCSortSubtract
.166c	a2 04		ldx #$04			ldx 	#X16_r1 					; sort r1/r3
.166e	20 76 16	jsr $1676			jsr 	_GRCSortSubtract
.1671	74 08		stz $08,x			stz 	8,x 						; zero rounding
.1673	74 09		stz $09,x			stz 	9,x
.1675	60		rts				rts
.1676					_GRCSortSubtract:
.1676	b5 04		lda $04,x			lda 	4,x 						; calculate r2-r0
.1678	d5 00		cmp $00,x			cmp 	0,x
.167a	b5 05		lda $05,x			lda 	5,x
.167c	f5 01		sbc $01,x			sbc 	1,x
.167e	b0 08		bcs $1688			bcs 	_GRCNoSwap 					; >= swap.
.1680	20 96 16	jsr $1696			jsr 	_GRCSwapByte 				; swap 0/2
.1683	e8		inx				inx
.1684	20 96 16	jsr $1696			jsr 	_GRCSwapByte 				; swap 1/3
.1687	ca		dex				dex
.1688					_GRCNoSwap:
.1688	38		sec				sec 								; calculate width/height into 4,5
.1689	b5 04		lda $04,x			lda 	4,x
.168b	f5 00		sbc $00,x			sbc 	0,x
.168d	95 04		sta $04,x			sta 	4,x
.168f	b5 05		lda $05,x			lda 	5,x
.1691	f5 01		sbc $01,x			sbc 	1,x
.1693	95 05		sta $05,x			sta 	5,x
.1695	60		rts				rts
.1696					_GRCSwapByte:
.1696	b5 04		lda $04,x			lda 	4,x
.1698	48		pha				pha
.1699	b5 00		lda $00,x			lda 	0,x
.169b	95 04		sta $04,x			sta 	4,x
.169d	68		pla				pla
.169e	95 00		sta $00,x			sta 	0,x
.16a0	60		rts				rts
.16a1					Unary16Hex:
.16a1	fa		plx				plx
.16a2	20 0b 18	jsr $180b			jsr 	GetInteger16Bit
.16a5	a9 04		lda #$04			lda 	#4 							; allocate / set 4 bytes.
.16a7	20 d5 1e	jsr $1ed5			jsr 	StringAllocTemp
.16aa	a5 30		lda $30				lda 	zTemp0+1
.16ac	f0 03		beq $16b1			beq 	_UHNoHigh
.16ae	20 b9 16	jsr $16b9			jsr 	_UHWriteHex
.16b1					_UHNoHigh:
.16b1	a5 2f		lda $2f				lda 	zTemp0
.16b3	20 b9 16	jsr $16b9			jsr 	_UHWriteHex
.16b6	4c 29 10	jmp $1029			jmp 	NextCommand
.16b9					_UHWriteHex:
.16b9	48		pha				pha
.16ba	4a		lsr a				lsr 	a
.16bb	4a		lsr a				lsr 	a
.16bc	4a		lsr a				lsr 	a
.16bd	4a		lsr a				lsr 	a
.16be	20 c2 16	jsr $16c2			jsr 	_UHWriteNibl
.16c1	68		pla				pla
.16c2					_UHWriteNibl:
.16c2	29 0f		and #$0f			and 	#15
.16c4	c9 0a		cmp #$0a			cmp 	#10
.16c6	90 02		bcc $16ca			bcc 	_UHDigit
.16c8	69 06		adc #$06			adc 	#6
.16ca					_UHDigit:
.16ca	69 30		adc #$30			adc 	#48
.16cc	20 fe 1e	jsr $1efe			jsr 	StringWriteChar
.16cf	60		rts				rts
.16d0					IndFloatRead:
.16d0	fa		plx				plx
.16d1	b5 41		lda $41,x			lda 	NSMantissa0,x 				; copy address
.16d3	85 2f		sta $2f				sta 	zTemp0
.16d5	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.16d7	18		clc				clc
.16d8	6d 07 04	adc $0407			adc 	variableStartPage
.16db	85 30		sta $30				sta 	zTemp0+1
.16dd	ca		dex				dex 								; throw the address
.16de	20 b4 1c	jsr $1cb4			jsr 	ReadFloatZTemp0Sub 							; call read routine
.16e1	4c 29 10	jmp $1029			jmp 	NextCommand
.16e4					IndInt16Read:
.16e4	fa		plx				plx
.16e5	b5 41		lda $41,x			lda 	NSMantissa0,x 				; copy address
.16e7	85 2f		sta $2f				sta 	zTemp0
.16e9	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.16eb	18		clc				clc
.16ec	6d 07 04	adc $0407			adc 	variableStartPage
.16ef	85 30		sta $30				sta 	zTemp0+1
.16f1	ca		dex				dex 								; throw the address
.16f2	20 f0 1c	jsr $1cf0			jsr 	ReadIntegerZTemp0Sub 							; call read routine
.16f5	4c 29 10	jmp $1029			jmp 	NextCommand
.16f8					IndStringRead:
.16f8	fa		plx				plx
.16f9	b5 41		lda $41,x			lda 	NSMantissa0,x 				; copy address
.16fb	85 2f		sta $2f				sta 	zTemp0
.16fd	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.16ff	18		clc				clc
.1700	6d 07 04	adc $0407			adc 	variableStartPage
.1703	85 30		sta $30				sta 	zTemp0+1
.1705	ca		dex				dex 								; throw the address
.1706	20 35 1d	jsr $1d35			jsr 	ReadStringZTemp0Sub 							; call read routine
.1709	4c 29 10	jmp $1029			jmp 	NextCommand
.170c					IndFloatWrite:
.170c	fa		plx				plx
.170d	b5 40		lda $40,x			lda 	NSMantissa0-1,x 			; copy address
.170f	85 2f		sta $2f				sta 	zTemp0
.1711	b5 4c		lda $4c,x			lda 	NSMantissa1-1,x
.1713	18		clc				clc
.1714	6d 07 04	adc $0407			adc 	variableStartPage
.1717	85 30		sta $30				sta 	zTemp0+1
.1719	20 8f 22	jsr $228f			jsr 	WriteFloatZTemp0Sub 							; call write routine
.171c	ca		dex				dex 								; throw the address as well.
.171d	4c 29 10	jmp $1029			jmp 	NextCommand
.1720					IndInt16Write:
.1720	fa		plx				plx
.1721	b5 40		lda $40,x			lda 	NSMantissa0-1,x 			; copy address
.1723	85 2f		sta $2f				sta 	zTemp0
.1725	b5 4c		lda $4c,x			lda 	NSMantissa1-1,x
.1727	18		clc				clc
.1728	6d 07 04	adc $0407			adc 	variableStartPage
.172b	85 30		sta $30				sta 	zTemp0+1
.172d	20 cb 22	jsr $22cb			jsr 	WriteIntegerZTemp0Sub 							; call write routine
.1730	ca		dex				dex 								; throw the address as well.
.1731	4c 29 10	jmp $1029			jmp 	NextCommand
.1734					IndStringWrite:
.1734	fa		plx				plx
.1735	b5 40		lda $40,x			lda 	NSMantissa0-1,x 			; copy address
.1737	85 2f		sta $2f				sta 	zTemp0
.1739	b5 4c		lda $4c,x			lda 	NSMantissa1-1,x
.173b	18		clc				clc
.173c	6d 07 04	adc $0407			adc 	variableStartPage
.173f	85 30		sta $30				sta 	zTemp0+1
.1741	20 0a 23	jsr $230a			jsr 	WriteStringZTemp0Sub 							; call write routine
.1744	ca		dex				dex 								; throw the address as well.
.1745	4c 29 10	jmp $1029			jmp 	NextCommand
.1748					CommandInput:
.1748	fa		plx				plx
.1749	5a		phy				phy 								; save Y
.174a	e8		inx				inx									; space on stack
.174b					_INError:
.174b	20 7f 17	jsr $177f			jsr 	InputStringToBuffer 		; input from keyboard
.174e	a9 5f		lda #$5f			lda 	#((ReadBufferSize) & $FF)
.1750	85 2f		sta $2f				sta 	0+zTemp0
.1752	a9 04		lda #$04			lda 	#((ReadBufferSize) >> 8) & $FF
.1754	85 30		sta $30				sta 	1+zTemp0
.1756	20 1c 21	jsr $211c			jsr 	ValEvaluateZTemp0
.1759	b0 f0		bcs $174b			bcs 	_INError 					; failed, try again.
.175b	7a		ply				ply 								; restore Y
.175c	4c 29 10	jmp $1029			jmp 	NextCommand
.175f					CommandInputString:
.175f	fa		plx				plx
.1760	5a		phy				phy 								; save Y
.1761	20 7f 17	jsr $177f			jsr 	InputStringToBuffer 		; input from keyboard
.1764	e8		inx				inx 								; make space on stack
.1765	20 08 2e	jsr $2e08			jsr 	FloatSetZero 				; store as string on stack
.1768	a9 5f		lda #$5f			lda 	#ReadBufferSize & $FF
.176a	95 41		sta $41,x			sta 	NSMantissa0,x
.176c	a9 04		lda #$04			lda 	#ReadBufferSize >> 8
.176e	95 4d		sta $4d,x			sta 	NSMantissa1,x
.1770	a9 40		lda #$40			lda 	#NSSString
.1772	95 35		sta $35,x			sta 	NSStatus,x
.1774	7a		ply				ply 								; restore Y
.1775	4c 29 10	jmp $1029			jmp 	NextCommand
.1778					CommandInputReset:
.1778	fa		plx				plx
.1779	9c 0a 04	stz $040a			stz 	InputBuffer
.177c	4c 29 10	jmp $1029			jmp 	NextCommand
.177f					InputStringToBuffer:
.177f	a9 b9		lda #$b9			lda 	#((InputBumpNext) & $FF)
.1781	8d 5f 05	sta $055f			sta 	0+ReadBumpNextVec
.1784	a9 17		lda #$17			lda 	#((InputBumpNext) >> 8) & $FF
.1786	8d 60 05	sta $0560			sta 	1+ReadBumpNextVec
.1789	a9 96		lda #$96			lda 	#((InputLookNext) & $FF)
.178b	8d 61 05	sta $0561			sta 	0+ReadLookNextVec
.178e	a9 17		lda #$17			lda 	#((InputLookNext) >> 8) & $FF
.1790	8d 62 05	sta $0562			sta 	1+ReadLookNextVec
.1793	4c 11 1c	jmp $1c11			jmp 	GetStringToBuffer
.1796					InputLookNext:
.1796	da		phx				phx
.1797					_ILNRetry:
.1797	ad 0a 04	lda $040a			lda 	InputBuffer 				; do we need to read more (e.g. the buffer is empty)
.179a	d0 08		bne $17a4			bne 	_ILNNotEmpty
.179c	20 bd 17	jsr $17bd			jsr 	InputGetNewLine 			; get a new line
.179f	9c 5b 04	stz $045b			stz 	InputBufferPos 				; reset read position.
.17a2	80 f3		bra $1797			bra 	_ILNRetry
.17a4					_ILNNotEmpty:
.17a4	ae 5b 04	ldx $045b			ldx 	InputBufferPos 				; get head available character
.17a7	bd 0a 04	lda $040a,x			lda 	InputBuffer,x
.17aa	d0 08		bne $17b4			bne 	_ILNExit 					; if not EOS return it with CC.
.17ac					_ILNNextLine:
.17ac	9c 0a 04	stz $040a			stz 	InputBuffer 				; clear the buffer, indicating new line next time.
.17af	38		sec				sec 								; return CS,Zero
.17b0	fa		plx				plx
.17b1	a9 0d		lda #$0d			lda 	#13
.17b3	60		rts				rts
.17b4					_ILNExit:
.17b4	fa		plx				plx
.17b5	c9 00		cmp #$00			cmp 	#0 							; return CC, Z Flag set.
.17b7	18		clc				clc
.17b8	60		rts				rts
.17b9					InputBumpNext:
.17b9	ee 5b 04	inc $045b			inc 	InputBufferPos
.17bc	60		rts				rts
.17bd					InputGetNewLine:
.17bd	48		pha				pha
.17be	da		phx				phx
.17bf	5a		phy				phy
.17c0	a9 3f		lda #$3f			lda 	#"?"
.17c2	20 fc 17	jsr $17fc			jsr 	IGNLEchoIfScreen
.17c5	a0 00		ldy #$00			ldy 	#0 							; line position.
.17c7					_IGNLLoop:
.17c7	20 3b 1b	jsr $1b3b			jsr 	VectorGetCharacter 			; get a character
.17ca	c9 00		cmp #$00			cmp 	#0
.17cc	f0 f9		beq $17c7			beq 	_IGNLLoop
.17ce	c9 14		cmp #$14			cmp 	#$14 						; Backspace ?
.17d0	f0 11		beq $17e3			beq 	_IGNBackspace
.17d2	c9 0d		cmp #$0d			cmp 	#$0D 						; Return ?
.17d4	f0 17		beq $17ed			beq 	_IGNExit
.17d6	c0 50		cpy #$50			cpy 	#80 						; buffer full ?
.17d8	f0 ed		beq $17c7			beq 	_IGNLLoop
.17da	99 0a 04	sta $040a,y			sta 	InputBuffer,y
.17dd	c8		iny				iny
.17de	20 fc 17	jsr $17fc			jsr 	IGNLEchoIfScreen
.17e1	80 e4		bra $17c7			bra 	_IGNLLoop
.17e3					_IGNBackspace:
.17e3	c0 00		cpy #$00			cpy 	#0
.17e5	f0 e0		beq $17c7			beq 	_IGNLLoop
.17e7	20 fc 17	jsr $17fc			jsr 	IGNLEchoIfScreen
.17ea	88		dey				dey
.17eb	80 da		bra $17c7			bra 	_IGNLLoop
.17ed					_IGNExit:
.17ed	20 fc 17	jsr $17fc			jsr 	IGNLEchoIfScreen
.17f0	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.17f2	99 0a 04	sta $040a,y			sta 	InputBuffer,y
.17f5	9c 5b 04	stz $045b			stz 	InputBufferPos 				; reset position to start of input buffer.
.17f8	7a		ply				ply
.17f9	fa		plx				plx
.17fa	68		pla				pla
.17fb	60		rts				rts
.17fc					IGNLEchoIfScreen:
.17fc	ae 5d 04	ldx $045d			ldx 	currentChannel
.17ff	d0 03		bne $1804			bne 	_IGNLEExit
.1801	20 32 1b	jsr $1b32			jsr 	VectorPrintCharacter
.1804					_IGNLEExit:
.1804	60		rts				rts
.040a					InputBuffer:
>040a							.fill 	81
.045b					InputBufferPos:
>045b							.fill 	1
.1805					GetInteger8Bit:
.1805	20 43 2a	jsr $2a43			jsr 	FloatIntegerPart
.1808	b5 41		lda $41,x			lda 	NSMantissa0,x
.180a	60		rts				rts
.180b					GetInteger16Bit:
.180b	20 43 2a	jsr $2a43			jsr 	FloatIntegerPart
.180e	34 35		bit $35,x			bit 	NSStatus,x
.1810	30 09		bmi $181b			bmi 	Negate16Bit
.1812	b5 41		lda $41,x			lda 	NSMantissa0,x
.1814	85 2f		sta $2f				sta 	zTemp0
.1816	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.1818	85 30		sta $30				sta 	zTemp0+1
.181a	60		rts				rts
.181b					Negate16Bit:
.181b	38		sec				sec
.181c	a9 00		lda #$00			lda 	#0
.181e	f5 41		sbc $41,x			sbc 	NSMantissa0,x
.1820	95 41		sta $41,x			sta 	NSMantissa0,x
.1822	85 2f		sta $2f				sta 	zTemp0
.1824	a9 00		lda #$00			lda 	#0
.1826	f5 4d		sbc $4d,x			sbc 	NSMantissa1,x
.1828	95 4d		sta $4d,x			sta 	NSMantissa1,x
.182a	85 30		sta $30				sta 	zTemp0+1
.182c	60		rts				rts
.182d					UnaryJoy:
.182d	fa		plx				plx
.182e	20 05 18	jsr $1805			jsr 	GetInteger8Bit 				; port #
.1831	48		pha				pha 								; zero the result.
.1832	20 08 2e	jsr $2e08			jsr 	FloatSetZero
.1835	68		pla				pla
.1836	5a		phy				phy
.1837	da		phx				phx
.1838	20 56 ff	jsr $ff56			jsr 	X16_joystick_get 			; read joystick.
.183b	c0 00		cpy #$00			cpy 	#0 							; check no hardware
.183d	d0 10		bne $184f			bne 	_UJNoHardware
.183f	a8		tay				tay 								; move XA -> AY
.1840	8a		txa				txa
.1841	fa		plx				plx 								; we can update it now.
.1842	49 ff		eor #$ff			eor 	#$FF
.1844	95 4d		sta $4d,x			sta 	NSMantissa1,x
.1846	98		tya				tya
.1847	49 ff		eor #$ff			eor 	#$FF
.1849	95 41		sta $41,x			sta 	NSMantissa0,x
.184b	7a		ply				ply 								; restore Y
.184c	4c 29 10	jmp $1029			jmp 	NextCommand
.184f					_UJNoHardware:
.184f	fa		plx				plx
.1850	7a		ply				ply
.1851	a9 01		lda #$01			lda 	#1 							; set result to -1
.1853	20 0a 2e	jsr $2e0a			jsr 	FloatSetByte
.1856	20 ca 2d	jsr $2dca			jsr 	FloatNegate
.1859	4c 29 10	jmp $1029			jmp 	NextCommand
.185c					UnaryLen:
.185c	fa		plx				plx
.185d	b5 41		lda $41,x			lda 	NSMantissa0,x 				; string address.
.185f	85 2f		sta $2f				sta 	zTemp0
.1861	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.1863	85 30		sta $30				sta 	zTemp0+1
.1865	b2 2f		lda ($2f)			lda 	(zTemp0) 					; get length
.1867	20 0a 2e	jsr $2e0a			jsr 	FloatSetByte
.186a	4c 29 10	jmp $1029			jmp 	NextCommand
.186d					LinkFloatAdd:
.186d	fa		plx				plx
.186e	5a		phy			phy
.186f	20 2c 28	jsr $282c		jsr	FloatAdd
.1872	7a		ply			ply
.1873	4c 29 10	jmp $1029			jmp 	NextCommand
.1876					LinkFloatSubtract:
.1876	fa		plx				plx
.1877	5a		phy			phy
.1878	20 26 28	jsr $2826		jsr	FloatSubtract
.187b	7a		ply			ply
.187c	4c 29 10	jmp $1029			jmp 	NextCommand
.187f					LinkFloatMultiply:
.187f	fa		plx				plx
.1880	5a		phy			phy
.1881	20 c8 2a	jsr $2ac8		jsr	FloatMultiply
.1884	7a		ply			ply
.1885	4c 29 10	jmp $1029			jmp 	NextCommand
.1888					LinkFloatDivide:
.1888	fa		plx				plx
.1889	5a		phy			phy
.188a	20 51 29	jsr $2951		jsr	FloatDivide
.188d	b0 5c		bcs $18eb		bcs	DivZeroError
.188f	7a		ply			ply
.1890	4c 29 10	jmp $1029			jmp 	NextCommand
.1893					LinkFloatPower:
.1893	fa		plx				plx
.1894	5a		phy			phy
.1895	20 d1 30	jsr $30d1		jsr	FloatPower
.1898	b0 4e		bcs $18e8		bcs	MapRangeError
.189a	7a		ply			ply
.189b	4c 29 10	jmp $1029			jmp 	NextCommand
.189e					LinkCompareGreater:
.189e	fa		plx				plx
.189f	5a		phy			phy
.18a0	20 d5 28	jsr $28d5		jsr	CompareGreater
.18a3	7a		ply			ply
.18a4	4c 29 10	jmp $1029			jmp 	NextCommand
.18a7					LinkCompareEqual:
.18a7	fa		plx				plx
.18a8	5a		phy			phy
.18a9	20 b7 28	jsr $28b7		jsr	CompareEqual
.18ac	7a		ply			ply
.18ad	4c 29 10	jmp $1029			jmp 	NextCommand
.18b0					LinkCompareLess:
.18b0	fa		plx				plx
.18b1	5a		phy			phy
.18b2	20 cd 28	jsr $28cd		jsr	CompareLess
.18b5	7a		ply			ply
.18b6	4c 29 10	jmp $1029			jmp 	NextCommand
.18b9					LinkCompareGreaterEqual:
.18b9	fa		plx				plx
.18ba	5a		phy			phy
.18bb	20 e5 28	jsr $28e5		jsr	CompareGreaterEqual
.18be	7a		ply			ply
.18bf	4c 29 10	jmp $1029			jmp 	NextCommand
.18c2					LinkCompareNotEqual:
.18c2	fa		plx				plx
.18c3	5a		phy			phy
.18c4	20 c7 28	jsr $28c7		jsr	CompareNotEqual
.18c7	7a		ply			ply
.18c8	4c 29 10	jmp $1029			jmp 	NextCommand
.18cb					LinkCompareLessEqual:
.18cb	fa		plx				plx
.18cc	5a		phy			phy
.18cd	20 dd 28	jsr $28dd		jsr	CompareLessEqual
.18d0	7a		ply			ply
.18d1	4c 29 10	jmp $1029			jmp 	NextCommand
.18d4					LinkFloatIntegerPartDown:
.18d4	fa		plx				plx
.18d5	5a		phy			phy
.18d6	20 67 2a	jsr $2a67		jsr	FloatIntegerPartDown
.18d9	7a		ply			ply
.18da	4c 29 10	jmp $1029			jmp 	NextCommand
.18dd					LinkFloatSquareRoot:
.18dd	fa		plx				plx
.18de	5a		phy			phy
.18df	20 53 31	jsr $3153		jsr	FloatSquareRoot
.18e2	b0 04		bcs $18e8		bcs	MapRangeError
.18e4	7a		ply			ply
.18e5	4c 29 10	jmp $1029			jmp 	NextCommand
.18e8					MapRangeError:
.18e8	4c a5 26	jmp $26a5		jmp	ErrorV_range
.18eb					DivZeroError:
.18eb	4c 2e 27	jmp $272e		jmp	ErrorV_divzero
.18ee					LinkFloatLogarithm:
.18ee	fa		plx				plx
.18ef	5a		phy			phy
.18f0	20 5d 30	jsr $305d		jsr	FloatLogarithm
.18f3	b0 f3		bcs $18e8		bcs	MapRangeError
.18f5	7a		ply			ply
.18f6	4c 29 10	jmp $1029			jmp 	NextCommand
.18f9					LinkFloatExponent:
.18f9	fa		plx				plx
.18fa	5a		phy			phy
.18fb	20 5a 2f	jsr $2f5a		jsr	FloatExponent
.18fe	7a		ply			ply
.18ff	4c 29 10	jmp $1029			jmp 	NextCommand
.1902					LinkFloatCosine:
.1902	fa		plx				plx
.1903	5a		phy			phy
.1904	20 4e 2f	jsr $2f4e		jsr	FloatCosine
.1907	7a		ply			ply
.1908	4c 29 10	jmp $1029			jmp 	NextCommand
.190b					LinkFloatSine:
.190b	fa		plx				plx
.190c	5a		phy			phy
.190d	20 ee 30	jsr $30ee		jsr	FloatSine
.1910	7a		ply			ply
.1911	4c 29 10	jmp $1029			jmp 	NextCommand
.1914					LinkFloatTangent:
.1914	fa		plx				plx
.1915	5a		phy			phy
.1916	20 5f 31	jsr $315f		jsr	FloatTangent
.1919	7a		ply			ply
.191a	4c 29 10	jmp $1029			jmp 	NextCommand
.191d					LinkFloatArcTan:
.191d	fa		plx				plx
.191e	5a		phy			phy
.191f	20 33 2e	jsr $2e33		jsr	FloatArcTan
.1922	b0 c4		bcs $18e8		bcs	MapRangeError
.1924	7a		ply			ply
.1925	4c 29 10	jmp $1029			jmp 	NextCommand
.1928					LinkFloatCompare:
.1928	fa		plx				plx
.1929	5a		phy			phy
.192a	20 ed 28	jsr $28ed		jsr	FloatCompare
.192d	7a		ply			ply
.192e	4c 29 10	jmp $1029			jmp 	NextCommand
.1931					LinkDivideInt32:
.1931	fa		plx				plx
.1932	5a		phy			phy
.1933	20 7b 29	jsr $297b		jsr	DivideInt32
.1936	b0 b0		bcs $18e8		bcs	MapRangeError
.1938	7a		ply			ply
.1939	4c 29 10	jmp $1029			jmp 	NextCommand
.193c					StackSaveCurrentPosition:
.193c	20 94 10	jsr $1094			jsr 	FixUpY 						; codePtr,Y is corrected so Y = 0
.193f	5a		phy				phy
.1940	a0 02		ldy #$02			ldy 	#2
.1942	a5 28		lda $28				lda 	codePtr
.1944	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.1946	c8		iny				iny
.1947	a5 29		lda $29				lda 	codePtr+1
.1949	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.194b	7a		ply				ply
.194c	60		rts				rts
.194d					StackLoadCurrentPosition:
.194d	a0 02		ldy #$02			ldy 	#2
.194f	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1951	85 28		sta $28				sta 	codePtr
.1953	c8		iny				iny
.1954	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1956	85 29		sta $29				sta 	codePtr+1
.1958	a0 00		ldy #$00			ldy 	#0
.195a	60		rts				rts
.195b					XCommandMouse:
.195b	fa		plx				plx
.195c	20 05 18	jsr $1805			jsr 	GetInteger8Bit 				; mouse control.
.195f	ca		dex				dex
.1960	da		phx				phx
.1961	5a		phy				phy
.1962	48		pha				pha
.1963	38		sec				sec 								; get screen resolution
.1964	20 5f ff	jsr $ff5f			jsr 	X16_screen_mode
.1967	68		pla				pla
.1968	20 68 ff	jsr $ff68			jsr 	X16_mouse_config 			; config the mouse
.196b	7a		ply				ply
.196c	fa		plx				plx
.196d	4c 29 10	jmp $1029			jmp 	NextCommand
.1970					XUnaryMB:
.1970	fa		plx				plx
.1971	20 9f 19	jsr $199f			jsr 	XUnaryMouseCommon
.1974	a5 33		lda $33				lda 	zTemp2
.1976	e8		inx				inx
.1977	20 0a 2e	jsr $2e0a			jsr 	FloatSetByte
.197a	4c 29 10	jmp $1029			jmp 	NextCommand
.197d					XUnaryMX:
.197d	fa		plx				plx
.197e	20 9f 19	jsr $199f			jsr 	XUnaryMouseCommon
.1981	a5 2f		lda $2f				lda 	zTemp0
.1983	e8		inx				inx
.1984	20 0a 2e	jsr $2e0a			jsr 	FloatSetByte
.1987	a5 30		lda $30				lda 	zTemp0+1
.1989	95 4d		sta $4d,x			sta 	NSMantissa1,x
.198b	4c 29 10	jmp $1029			jmp 	NextCommand
.198e					XUnaryMY:
.198e	fa		plx				plx
.198f	20 9f 19	jsr $199f			jsr 	XUnaryMouseCommon
.1992	a5 31		lda $31				lda 	zTemp1
.1994	e8		inx				inx
.1995	20 0a 2e	jsr $2e0a			jsr 	FloatSetByte
.1998	a5 32		lda $32				lda 	zTemp1+1
.199a	95 4d		sta $4d,x			sta 	NSMantissa1,x
.199c	4c 29 10	jmp $1029			jmp 	NextCommand
.199f					XUnaryMouseCommon:
.199f	da		phx				phx
.19a0	5a		phy				phy
.19a1	a2 2f		ldx #$2f			ldx 	#zTemp0
.19a3	20 6b ff	jsr $ff6b			jsr 	X16_mouse_get
.19a6	85 33		sta $33				sta 	zTemp2
.19a8	7a		ply				ply
.19a9	fa		plx				plx
.19aa	60		rts				rts
.19ab					NegateTOS:
.19ab	fa		plx				plx
.19ac	20 ca 2d	jsr $2dca			jsr 	FloatNegate
.19af	4c 29 10	jmp $1029			jmp 	NextCommand
.19b2					CommandNewLine:
.19b2	fa		plx				plx
.19b3	9c 68 05	stz $0568			stz 	stringInitialised
.19b6	a2 ff		ldx #$ff			ldx 	#$FF
.19b8	4c 29 10	jmp $1029			jmp 	NextCommand
.19bb					CommandNext:
.19bb	fa		plx				plx
.19bc					_CNRetry:
.19bc	a9 d3		lda #$d3			lda 	#FRAME_FOR 					; find the FOR
.19be	20 21 15	jsr $1521			jsr 	StackFindFrame
.19c1	20 94 10	jsr $1094			jsr 	FixUpY 						; so we can use Y
.19c4	b5 41		lda $41,x			lda 	NSMantissa0,x 				; check no index variable, both are $FF
.19c6	35 4d		and $4d,x			and 	NSMantissa1,x
.19c8	c9 ff		cmp #$ff			cmp 	#$FF
.19ca	f0 16		beq $19e2			beq 	_CNNoIndexVariable
.19cc	b5 41		lda $41,x			lda 	NSMantissa0,x
.19ce	a0 05		ldy #$05			ldy 	#5
.19d0	d1 24		cmp ($24),y			cmp 	(runtimeStackPtr),y
.19d2	d0 07		bne $19db			bne 	_CNNIndexFail
.19d4	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.19d6	c8		iny				iny
.19d7	d1 24		cmp ($24),y			cmp 	(runtimeStackPtr),y
.19d9	f0 07		beq $19e2			beq 	_CNNoIndexVariable
.19db					_CNNIndexFail:
.19db	a0 00		ldy #$00			ldy 	#0 							; so we don't fix up Y again !
.19dd	20 13 15	jsr $1513			jsr 	StackCloseFrame 			; close this frame
.19e0	80 da		bra $19bc			bra 	_CNRetry
.19e2					_CNNoIndexVariable:
.19e2	ca		dex				dex
.19e3	a0 04		ldy #$04			ldy 	#4 							; check for optimised NEXT
.19e5	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.19e7	29 40		and #$40			and 	#$40	 					; bit 6
.19e9	d0 55		bne $1a40			bne 	_CNOptimisedNext
.19eb	a0 05		ldy #$05			ldy 	#5 							; copy address to zTemp0, save for write back
.19ed	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.19ef	48		pha				pha
.19f0	85 2f		sta $2f				sta 	zTemp0
.19f2	c8		iny				iny
.19f3	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.19f5	18		clc				clc
.19f6	6d 07 04	adc $0407			adc 	variableStartPage 			; point to variable page.
.19f9	48		pha				pha
.19fa	85 30		sta $30				sta 	zTemp0+1
.19fc	20 b4 1c	jsr $1cb4			jsr 	ReadFloatZTemp0Sub 			; read current index onto stack.
.19ff	a0 07		ldy #$07			ldy 	#7  						; read step onto stack +1
.1a01	e8		inx				inx
.1a02	20 83 1a	jsr $1a83			jsr 	CopyOffsetYToTOS
.1a05	20 2c 28	jsr $282c			jsr 	FloatAdd
.1a08	68		pla				pla 								; restore address
.1a09	85 30		sta $30				sta 	zTemp0+1
.1a0b	68		pla				pla
.1a0c	85 2f		sta $2f				sta 	zTemp0
.1a0e	20 8f 22	jsr $228f			jsr 	WriteFloatZTemp0Sub			; write float.
.1a11	e8		inx				inx  								; recover written
.1a12	e8		inx				inx 								; load offset
.1a13	a0 0d		ldy #$0d			ldy 	#13
.1a15	20 83 1a	jsr $1a83			jsr 	CopyOffsetYToTOS
.1a18	20 ed 28	jsr $28ed			jsr 	FloatCompare 				; and compare the floats.
.1a1b	ca		dex				dex 								; throw result (in NSMantissa0+1)
.1a1c	a0 0c		ldy #$0c			ldy 	#12 						; get the sign of the step.
.1a1e	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1a20	30 08		bmi $1a2a			bmi 	_CNDownStep
.1a22	b5 42		lda $42,x			lda 	NSMantissa0+1,x 			; get comparator
.1a24	c9 01		cmp #$01			cmp 	#1 							; gone higher
.1a26	f0 10		beq $1a38			beq 	_CNExitFor 					; if so exit the loop
.1a28	80 06		bra $1a30			bra 	_CNLoopBack
.1a2a					_CNDownStep:
.1a2a	b5 42		lda $42,x			lda 	NSMantissa0+1,x 			; get comparator
.1a2c	c9 ff		cmp #$ff			cmp 	#255 						; gone lower
.1a2e	f0 08		beq $1a38			beq 	_CNExitFor
.1a30					_CNLoopBack:
.1a30	20 4d 19	jsr $194d			jsr 	StackLoadCurrentPosition 	; loop back
.1a33	a0 00		ldy #$00			ldy 	#0
.1a35	4c 29 10	jmp $1029			jmp 	NextCommand
.1a38					_CNExitFor:
.1a38	20 13 15	jsr $1513			jsr 	StackCloseFrame 			; remove the frame and exit
.1a3b	a0 00		ldy #$00			ldy 	#0
.1a3d	4c 29 10	jmp $1029			jmp 	NextCommand
.1a40					_CNOptimisedNext:
.1a40	a0 05		ldy #$05			ldy 	#5 							; copy address to zTemp0, save for write back
.1a42	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1a44	85 2f		sta $2f				sta 	zTemp0
.1a46	c8		iny				iny
.1a47	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1a49	18		clc				clc
.1a4a	6d 07 04	adc $0407			adc 	variableStartPage 			; point to variable page.
.1a4d	85 30		sta $30				sta 	zTemp0+1
.1a4f	a0 07		ldy #$07			ldy 	#7 							; STEP value
.1a51	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1a53	a0 ff		ldy #$ff			ldy 	#$FF
.1a55	18		clc				clc
.1a56					_CNOIncrement:
.1a56	c8		iny				iny
.1a57	71 2f		adc ($2f),y			adc 	(zTemp0),y
.1a59	91 2f		sta ($2f),y			sta 	(zTemp0),y
.1a5b	f0 f9		beq $1a56			beq 	_CNOIncrement
.1a5d	18		clc				clc
.1a5e	a5 24		lda $24				lda 	runtimeStackPtr
.1a60	69 0d		adc #$0d			adc 	#13
.1a62	85 31		sta $31				sta 	zTemp1
.1a64	a5 25		lda $25				lda 	runtimeStackPtr+1
.1a66	69 00		adc #$00			adc 	#0
.1a68	85 32		sta $32				sta 	zTemp1+1
.1a6a	a0 00		ldy #$00			ldy 	#0
.1a6c	b1 31		lda ($31),y			lda 	(zTemp1),y 					; byte 0
.1a6e	d1 2f		cmp ($2f),y			cmp 	(zTemp0),y
.1a70	c8		iny				iny
.1a71	b1 31		lda ($31),y			lda 	(zTemp1),y 					; byte 1
.1a73	f1 2f		sbc ($2f),y			sbc 	(zTemp0),y
.1a75	c8		iny				iny
.1a76	b1 31		lda ($31),y			lda 	(zTemp1),y 					; byte 2
.1a78	f1 2f		sbc ($2f),y			sbc 	(zTemp0),y
.1a7a	c8		iny				iny
.1a7b	b1 31		lda ($31),y			lda 	(zTemp1),y 					; byte 3
.1a7d	f1 2f		sbc ($2f),y			sbc 	(zTemp0),y
.1a7f	90 b7		bcc $1a38			bcc	 	_CNExitFor
.1a81	80 ad		bra $1a30			bra 	_CNLoopBack
.1a83					CopyOffsetYToTOS:
.1a83	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1a85	95 41		sta $41,x			sta 	NSMantissa0,x
.1a87	c8		iny				iny
.1a88	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1a8a	95 4d		sta $4d,x			sta 	NSMantissa1,x
.1a8c	c8		iny				iny
.1a8d	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1a8f	95 59		sta $59,x			sta 	NSMantissa2,x
.1a91	c8		iny				iny
.1a92	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1a94	95 65		sta $65,x			sta 	NSMantissa3,x
.1a96	c8		iny				iny
.1a97	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1a99	95 71		sta $71,x			sta 	NSExponent,x
.1a9b	c8		iny				iny
.1a9c	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1a9e	95 35		sta $35,x			sta 	NSStatus,x
.1aa0	60		rts				rts
.1aa1	4c 29 10	jmp $1029			jmp 	NextCommand
.1aa4					NotTOS:
.1aa4	fa		plx				plx
.1aa5	20 43 2a	jsr $2a43			jsr 	FloatIntegerPart
.1aa8	74 59		stz $59,x			stz 	NSMantissa2,x 				; chop down to 16 bit.
.1aaa	74 65		stz $65,x			stz 	NSMantissa3,x
.1aac	20 ca 2d	jsr $2dca			jsr 	FloatNegate		 			; negate
.1aaf	e8		inx				inx 								; and subtract 1.
.1ab0	a9 01		lda #$01			lda 	#1
.1ab2	20 0a 2e	jsr $2e0a			jsr 	FloatSetByte
.1ab5	20 26 28	jsr $2826			jsr 	FloatSubtract
.1ab8					_NotTOSSkip:
.1ab8	4c 29 10	jmp $1029			jmp 	NextCommand
.1abb					CommandOn:
.1abb	fa		plx				plx
.1abc	20 05 18	jsr $1805			jsr 	GetInteger8Bit 				; get the integer part, the ON x GOTO bit
.1abf	8d 5c 04	sta $045c			sta 	onCount 					; save it.
.1ac2	20 94 10	jsr $1094			jsr 	FixUpY 						; Y = 0
.1ac5					_CONFind:
.1ac5	ce 5c 04	dec $045c			dec 	onCount 					; reached zero, do this one
.1ac8	f0 0b		beq $1ad5			beq 	_CONFound
.1aca	c8		iny				iny 								; skip over the token (GOTO or GOSUB page, and line #)
.1acb	c8		iny				iny
.1acc	c8		iny				iny
.1acd	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a moreon after it, if so we can keep going.
.1acf	c8		iny				iny
.1ad0	c9 aa		cmp #$aa			cmp 	#PCD_MOREON
.1ad2	f0 f1		beq $1ac5			beq 	_CONFind
.1ad4	88		dey				dey 								; point to character after last GOTO/GOSUB
.1ad5					_CONFound:
.1ad5	4c 29 10	jmp $1029			jmp 	NextCommand
.1ad8					CommandMoreOn:
.1ad8	fa		plx				plx
.1ad9	c8		iny				iny 								; so it goes to the first non-goto/gosub
.1ada	c8		iny				iny
.1adb	c8		iny				iny
.1adc	4c 29 10	jmp $1029			jmp 	NextCommand
.045c					onCount:
>045c							.fill 	1
.1adf					UnaryPeek:
.1adf	fa		plx				plx
.1ae0	20 0b 18	jsr $180b			jsr 	GetInteger16Bit
.1ae3	da		phx				phx
.1ae4	5a		phy				phy
.1ae5	a6 2f		ldx $2f				ldx 	zTemp0
.1ae7	a4 30		ldy $30				ldy 	zTemp0+1
.1ae9	20 20 24	jsr $2420			jsr 	XPeekMemory
.1aec	7a		ply				ply
.1aed	fa		plx				plx
.1aee	20 0a 2e	jsr $2e0a			jsr 	FloatSetByte
.1af1	4c 29 10	jmp $1029			jmp 	NextCommand
.1af4					CommandPOKE:
.1af4	fa		plx				plx
.1af5	da		phx				phx 								; save XY
.1af6	5a		phy				phy
.1af7	20 05 18	jsr $1805			jsr 	GetInteger8Bit 				; get byte to POKE and save it
.1afa	48		pha				pha
.1afb	b5 4c		lda $4c,x			lda 	NSMantissa1-1,x 			; YX = address from Mantissa next up
.1afd	a8		tay				tay
.1afe	b5 40		lda $40,x			lda 	NSMantissa0-1,x
.1b00	aa		tax				tax
.1b01	68		pla				pla
.1b02	20 0c 24	jsr $240c			jsr 	XPokeMemory
.1b05	7a		ply				ply 								; restore YX and drop 2
.1b06	fa		plx				plx
.1b07	ca		dex				dex
.1b08	ca		dex				dex
.1b09	4c 29 10	jmp $1029			jmp 	NextCommand
.1b0c					UnaryPos:
.1b0c	fa		plx				plx
.1b0d	20 9f 23	jsr $239f			jsr 	XGetHPos
.1b10	20 0a 2e	jsr $2e0a			jsr 	FloatSetByte
.1b13	4c 29 10	jmp $1029			jmp 	NextCommand
.1b16					GetChannel:
.1b16	fa		plx				plx
.1b17	ad 5d 04	lda $045d			lda 	currentChannel
.1b1a	e8		inx				inx
.1b1b	20 0a 2e	jsr $2e0a			jsr 	FloatSetByte
.1b1e	4c 29 10	jmp $1029			jmp 	NextCommand
.1b21					SetChannel:
.1b21	fa		plx				plx
.1b22	20 43 2a	jsr $2a43			jsr 	FloatIntegerPart
.1b25	b5 41		lda $41,x			lda 	NSMantissa0,x
.1b27	8d 5d 04	sta $045d			sta 	currentChannel
.1b2a	ca		dex				dex
.1b2b	4c 29 10	jmp $1029			jmp 	NextCommand
.1b2e					SetDefaultChannel:
.1b2e	9c 5d 04	stz $045d			stz 	currentChannel
.1b31	60		rts				rts
.1b32					VectorPrintCharacter:
.1b32	da		phx				phx
.1b33	ae 5d 04	ldx $045d			ldx 	currentChannel
.1b36	20 4a 24	jsr $244a			jsr 	XPrintCharacterToChannel
.1b39	fa		plx				plx
.1b3a	60		rts				rts
.1b3b					VectorGetCharacter:
.1b3b	da		phx				phx
.1b3c	ae 5d 04	ldx $045d			ldx 	currentChannel
.1b3f	20 83 23	jsr $2383			jsr 	XGetCharacterFromChannel
.1b42	fa		plx				plx
.1b43	60		rts				rts
.045d					currentChannel:
>045d							.fill 	1
.1b44					PrintNumber:
.1b44	fa		plx				plx
.1b45	a9 07		lda #$07			lda 	#7
.1b47	20 f0 2c	jsr $2cf0			jsr 	FloatToString 				; to number in decimal buffer
.1b4a	ca		dex				dex 								; drop
.1b4b	da		phx				phx
.1b4c	a2 00		ldx #$00			ldx 	#0 							; print buffer.
.1b4e					_PNLoop:
.1b4e	bd 94 05	lda $0594,x			lda 	decimalBuffer,x
.1b51	20 32 1b	jsr $1b32			jsr 	VectorPrintCharacter
.1b54	e8		inx				inx
.1b55	bd 94 05	lda $0594,x			lda	 	decimalBuffer,x
.1b58	d0 f4		bne $1b4e			bne 	_PNLoop
.1b5a	a9 20		lda #$20			lda 	#32 						; trailing space
.1b5c	20 32 1b	jsr $1b32			jsr 	VectorPrintCharacter
.1b5f	fa		plx				plx
.1b60	4c 29 10	jmp $1029			jmp 	NextCommand
.1b63					PrintString:
.1b63	fa		plx				plx
.1b64	b5 41		lda $41,x			lda 	NSMantissa0,x 				; point zTemp0 to string
.1b66	85 2f		sta $2f				sta 	zTemp0
.1b68	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.1b6a	85 30		sta $30				sta 	zTemp0+1
.1b6c	ca		dex				dex 								; drop
.1b6d	da		phx				phx
.1b6e	5a		phy				phy
.1b6f	b2 2f		lda ($2f)			lda 	(zTemp0) 					; X = count
.1b71	aa		tax				tax
.1b72	a0 01		ldy #$01			ldy 	#1 							; Y = position
.1b74					_PSLoop:
.1b74	e0 00		cpx #$00			cpx 	#0 							; complete ?
.1b76	f0 09		beq $1b81			beq 	_PSExit
.1b78	ca		dex				dex 								; dec count
.1b79	b1 2f		lda ($2f),y			lda 	(zTemp0),y 					; print char and bump
.1b7b	20 32 1b	jsr $1b32			jsr 	VectorPrintCharacter
.1b7e	c8		iny				iny
.1b7f	80 f3		bra $1b74			bra 	_PSLoop
.1b81					_PSExit:
.1b81	7a		ply				ply
.1b82	fa		plx				plx
.1b83	4c 29 10	jmp $1029			jmp 	NextCommand
.1b86					CommandPushN:
.1b86	fa		plx				plx
.1b87	e8		inx				inx 								; next slot on stack
.1b88	b1 28		lda ($28),y			lda 	(codePtr),y 				; exponent
.1b8a	95 71		sta $71,x			sta 	NSExponent,x
.1b8c	c8		iny				iny
.1b8d	b1 28		lda ($28),y			lda 	(codePtr),y 				; mantissa
.1b8f	95 41		sta $41,x			sta 	NSMantissa0,x
.1b91	c8		iny				iny
.1b92	b1 28		lda ($28),y			lda 	(codePtr),y
.1b94	95 4d		sta $4d,x			sta 	NSMantissa1,x
.1b96	c8		iny				iny
.1b97	b1 28		lda ($28),y			lda 	(codePtr),y
.1b99	95 59		sta $59,x			sta 	NSMantissa2,x
.1b9b	c8		iny				iny
.1b9c	b1 28		lda ($28),y			lda 	(codePtr),y
.1b9e	48		pha				pha
.1b9f	29 7f		and #$7f			and 	#$7F
.1ba1	95 65		sta $65,x			sta 	NSMantissa3,x
.1ba3	68		pla				pla 								; sign in mantissa3:7
.1ba4	29 80		and #$80			and 	#$80
.1ba6	95 35		sta $35,x			sta 	NSStatus,x
.1ba8	c8		iny				iny
.1ba9	4c 29 10	jmp $1029			jmp 	NextCommand
.1bac					CommandPushS:
.1bac	fa		plx				plx
.1bad	e8		inx				inx 								; next slot on stack
.1bae	18		clc				clc
.1baf	98		tya				tya
.1bb0	65 28		adc $28				adc 	codePtr 					; the string is inline
.1bb2	95 41		sta $41,x			sta 	NSMantissa0,x
.1bb4	a5 29		lda $29				lda 	codePtr+1
.1bb6	69 00		adc #$00			adc 	#0
.1bb8	95 4d		sta $4d,x			sta 	NSMantissa1,x
.1bba	74 59		stz $59,x			stz 	NSMantissa2,x
.1bbc	74 65		stz $65,x			stz 	NSMantissa3,x
.1bbe	a9 40		lda #$40			lda 	#NSSString
.1bc0	95 35		sta $35,x			sta 	NSStatus,x
.1bc2	98		tya				tya 								; string length +1 added to Y
.1bc3	38		sec				sec
.1bc4	71 28		adc ($28),y			adc 	(codePtr),y 				; next instruction
.1bc6	a8		tay				tay
.1bc7	4c 29 10	jmp $1029			jmp 	NextCommand
.1bca					CommandRead:
.1bca	fa		plx				plx
.1bcb	5a		phy				phy 								; save Y
.1bcc	20 fd 1b	jsr $1bfd			jsr 	ReadStringToBuffer 			; read element into buffer
.1bcf	e8		inx				inx									; space on stack
.1bd0	a9 5f		lda #$5f			lda 	#((ReadBufferSize) & $FF)
.1bd2	85 2f		sta $2f				sta 	0+zTemp0
.1bd4	a9 04		lda #$04			lda 	#((ReadBufferSize) >> 8) & $FF
.1bd6	85 30		sta $30				sta 	1+zTemp0
.1bd8	20 1c 21	jsr $211c			jsr 	ValEvaluateZTemp0
.1bdb	b0 04		bcs $1be1			bcs 	_CRError 					; failed
.1bdd	7a		ply				ply 								; restore Y
.1bde	4c 29 10	jmp $1029			jmp 	NextCommand
.1be1					_CRError:
.1be1	4c b5 26	jmp $26b5		jmp	ErrorV_value
.1be4					CommandReadString:
.1be4	fa		plx				plx
.1be5	5a		phy				phy 								; save Y
.1be6	20 fd 1b	jsr $1bfd			jsr 	ReadStringToBuffer 			; read text
.1be9	e8		inx				inx 								; make space on stack
.1bea	20 08 2e	jsr $2e08			jsr 	FloatSetZero 				; store as string on stack
.1bed	a9 5f		lda #$5f			lda 	#ReadBufferSize & $FF
.1bef	95 41		sta $41,x			sta 	NSMantissa0,x
.1bf1	a9 04		lda #$04			lda 	#ReadBufferSize >> 8
.1bf3	95 4d		sta $4d,x			sta 	NSMantissa1,x
.1bf5	a9 40		lda #$40			lda 	#NSSString
.1bf7	95 35		sta $35,x			sta 	NSStatus,x
.1bf9	7a		ply				ply 								; restore Y
.1bfa	4c 29 10	jmp $1029			jmp 	NextCommand
.1bfd					ReadStringToBuffer:
.1bfd	a9 90		lda #$90			lda 	#((ReadBumpNext) & $FF)
.1bff	8d 5f 05	sta $055f			sta 	0+ReadBumpNextVec
.1c02	a9 1c		lda #$1c			lda 	#((ReadBumpNext) >> 8) & $FF
.1c04	8d 60 05	sta $0560			sta 	1+ReadBumpNextVec
.1c07	a9 63		lda #$63			lda 	#((ReadLookNext) & $FF)
.1c09	8d 61 05	sta $0561			sta 	0+ReadLookNextVec
.1c0c	a9 1c		lda #$1c			lda 	#((ReadLookNext) >> 8) & $FF
.1c0e	8d 62 05	sta $0562			sta 	1+ReadLookNextVec
.1c11					GetStringToBuffer:
.1c11	20 60 1c	jsr $1c60			jsr		GetLookNext 				; skip all leading spaces.
.1c14	f0 44		beq $1c5a			beq 	_RBError 					; end of data
.1c16	b0 f9		bcs $1c11			bcs 	GetStringToBuffer 			; switched to new data line.
.1c18	c9 20		cmp #$20			cmp 	#' ' 						; non space got something
.1c1a	b0 05		bcs $1c21			bcs 	_RBNoSpace
.1c1c	20 5d 1c	jsr $1c5d			jsr 	GetBumpNext 				; consume space and loop round.
.1c1f	80 f0		bra $1c11			bra 	GetStringToBuffer
.1c21					_RBNoSpace:
.1c21	9c 5f 04	stz $045f			stz 	ReadBufferSize 				; empty the buffer.
.1c24	c9 22		cmp #$22			cmp 	#'"' 						; is it a '"'
.1c26	d0 08		bne $1c30			bne 	_RBCommaSep
.1c28	8d 5e 04	sta $045e			sta 	ReadSep 					; use as a seperator
.1c2b	20 5d 1c	jsr $1c5d			jsr 	GetBumpNext 				; consume the '"'
.1c2e	80 05		bra $1c35			bra 	_RBGetText
.1c30					_RBCommaSep:
.1c30	a9 2c		lda #$2c			lda 	#","						; get till comma
.1c32	8d 5e 04	sta $045e			sta 	ReadSep
.1c35					_RBGetText:
.1c35	20 60 1c	jsr $1c60			jsr 	GetLookNext 				; what follows
.1c38	b0 18		bcs $1c52			bcs 	_RBEndGet 					; if new DATA line, the end without consumption
.1c3a	20 5d 1c	jsr $1c5d			jsr 	GetBumpNext 				; consume it whatever
.1c3d	cd 5e 04	cmp $045e			cmp 	ReadSep 					; if found the seperator.
.1c40	f0 10		beq $1c52			beq 	_RBEndGet 					; exit after consumption
.1c42	da		phx				phx
.1c43	ae 5f 04	ldx $045f			ldx 	ReadBufferSize 				; copy into buffer.
.1c46	ee 5f 04	inc $045f			inc 	ReadBufferSize
.1c49	9d 60 04	sta $0460,x			sta 	ReadBuffer,x
.1c4c	9e 61 04	stz $0461,x			stz 	ReadBuffer+1,x 				; make ASCIIZ as well.
.1c4f	fa		plx				plx
.1c50	80 e3		bra $1c35			bra 	_RBGetText
.1c52					_RBEndGet:
.1c52	c9 22		cmp #$22			cmp 	#'"'
.1c54	d0 03		bne $1c59			bne 	_RBNotQuote
.1c56	20 5d 1c	jsr $1c5d			jsr 	GetBumpNext
.1c59					_RBNotQuote:
.1c59	60		rts				rts
.1c5a					_RBError:
.1c5a	4c 6a 27	jmp $276a		jmp	ErrorV_data
.1c5d					GetBumpNext:
.1c5d	6c 5f 05	jmp ($055f)			jmp 	(ReadBumpNextVec)
.1c60					GetLookNext:
.1c60	6c 61 05	jmp ($0561)			jmp 	(ReadLookNextVec)
.1c63					ReadLookNext:
.1c63	ad 63 05	lda $0563			lda 	dataRemaining 				; any data remaining
.1c66	f0 04		beq $1c6c			beq 	_RLNFindData
.1c68	b2 2b		lda ($2b)			lda 	(objPtr) 					; return that object.
.1c6a	18		clc				clc
.1c6b	60		rts				rts
.1c6c					_RLNFindData:
.1c6c	b2 2b		lda ($2b)			lda 	(objPtr) 					; see where we are
.1c6e	c9 ff		cmp #$ff			cmp 	#$FF 						; if at $FF then end, error.
.1c70	f0 1a		beq $1c8c			beq 	_RLNNoData
.1c72	c9 cf		cmp #$cf			cmp 	#PCD_CMD_DATA 				; Found DATA
.1c74	f0 05		beq $1c7b			beq 	_RLNHaveData
.1c76					_RLNNext:
.1c76	20 d7 27	jsr $27d7			jsr 	MoveObjectForward			; else scan forward.
.1c79	80 f1		bra $1c6c			bra 	_RLNFindData
.1c7b					_RLNHaveData:
.1c7b	a0 01		ldy #$01			ldy 	#1 							; get length
.1c7d	b1 2b		lda ($2b),y			lda 	(objPtr),y
.1c7f	f0 f5		beq $1c76			beq 	_RLNNext 					; skip if DATA alone
.1c81	20 90 1c	jsr $1c90			jsr 	ReadBumpNext 				; advance by two
.1c84	20 90 1c	jsr $1c90			jsr 	ReadBumpNext
.1c87	8d 63 05	sta $0563			sta 	dataRemaining 				; set data left count.
.1c8a	38		sec				sec
.1c8b	60		rts				rts
.1c8c					_RLNNoData:
.1c8c	a9 00		lda #$00			lda 	#0
.1c8e	38		sec				sec
.1c8f	60		rts				rts
.1c90					ReadBumpNext:
.1c90	e6 2b		inc $2b				inc 	objPtr
.1c92	d0 02		bne $1c96			bne 	_RBNSkip
.1c94	e6 2c		inc $2c				inc 	objPtr+1
.1c96					_RBNSkip:
.1c96	ce 63 05	dec $0563			dec 	dataRemaining
.1c99	60		rts				rts
.045e					ReadSep:
>045e							.fill 	1
.045f					ReadBufferSize:
>045f							.fill 	1
.0460					ReadBuffer:
>0460							.fill 	255
.055f					ReadBumpNextVec:
>055f							.fill 	2
.0561					ReadLookNextVec:
>0561							.fill 	2
.1c9a					ReadFloatCommand:
.1c9a	fa		plx				plx
.1c9b	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.1c9d	85 2f		sta $2f				sta 	zTemp0 						; save in MSB
.1c9f	88		dey				dey 								; get the upper 3 bits
.1ca0	b1 28		lda ($28),y			lda 	(codePtr),y
.1ca2	29 07		and #$07			and 	#7
.1ca4	c8		iny				iny
.1ca5	c8		iny				iny
.1ca6	06 2f		asl $2f				asl 	zTemp0 						; shift zTemp0:A left
.1ca8	2a		rol a				rol 	a 							; carry will be clear.
.1ca9	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.1cac	85 30		sta $30				sta 	zTemp0+1
.1cae	20 b4 1c	jsr $1cb4			jsr 	ReadFloatZTemp0Sub
.1cb1	4c 29 10	jmp $1029			jmp 	NextCommand
.1cb4					ReadFloatZTemp0Sub:
.1cb4	5a		phy				phy 								; start write
.1cb5	a0 01		ldy #$01			ldy 	#1
.1cb7	e8		inx				inx
.1cb8	b2 2f		lda ($2f)			lda 	(zTemp0)
.1cba	95 41		sta $41,x			sta 	NSMantissa0,x
.1cbc	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.1cbe	95 4d		sta $4d,x			sta 	NSMantissa1,x
.1cc0	c8		iny				iny
.1cc1	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.1cc3	95 59		sta $59,x			sta 	NSMantissa2,x
.1cc5	c8		iny				iny
.1cc6	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.1cc8	95 65		sta $65,x			sta 	NSMantissa3,x
.1cca	c8		iny				iny
.1ccb	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.1ccd	95 71		sta $71,x			sta 	NSExponent,x
.1ccf	c8		iny				iny
.1cd0	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.1cd2	95 35		sta $35,x			sta 	NSStatus,x
.1cd4	7a		ply				ply
.1cd5	60		rts				rts
.1cd6					ReadIntegerCommand:
.1cd6	fa		plx				plx
.1cd7	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.1cd9	85 2f		sta $2f				sta 	zTemp0 						; save in MSB
.1cdb	88		dey				dey 								; get the upper 3 bits
.1cdc	b1 28		lda ($28),y			lda 	(codePtr),y
.1cde	29 07		and #$07			and 	#7
.1ce0	c8		iny				iny
.1ce1	c8		iny				iny
.1ce2	06 2f		asl $2f				asl 	zTemp0 						; shift zTemp0:A left
.1ce4	2a		rol a				rol 	a 							; carry will be clear.
.1ce5	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.1ce8	85 30		sta $30				sta 	zTemp0+1
.1cea	20 f0 1c	jsr $1cf0			jsr 	ReadIntegerZTemp0Sub
.1ced	4c 29 10	jmp $1029			jmp 	NextCommand
.1cf0					ReadIntegerZTemp0Sub:
.1cf0	5a		phy				phy 								; start write
.1cf1	a0 01		ldy #$01			ldy 	#1
.1cf3	e8		inx				inx 								; prepare
.1cf4	74 59		stz $59,x			stz 	NSMantissa2,x
.1cf6	74 65		stz $65,x			stz 	NSMantissa3,x
.1cf8	74 71		stz $71,x			stz 	NSExponent,x
.1cfa	74 35		stz $35,x			stz 	NSStatus,x
.1cfc	b1 2f		lda ($2f),y			lda 	(zTemp0),y 					; get MSB, do -ve code.
.1cfe	30 08		bmi $1d08			bmi 	_RIZNegative
.1d00	95 4d		sta $4d,x			sta 	NSMantissa1,x 				; +ve read
.1d02	b2 2f		lda ($2f)			lda 	(zTemp0)
.1d04	95 41		sta $41,x			sta 	NSMantissa0,x
.1d06	7a		ply				ply
.1d07	60		rts				rts
.1d08					_RIZNegative:
.1d08	38		sec				sec 								; -ve read
.1d09	a9 00		lda #$00			lda 	#0
.1d0b	f2 2f		sbc ($2f)			sbc 	(zTemp0)
.1d0d	95 41		sta $41,x			sta 	NSMantissa0,x
.1d0f	a9 00		lda #$00			lda 	#0
.1d11	f1 2f		sbc ($2f),y			sbc 	(zTemp0),y
.1d13	95 4d		sta $4d,x			sta 	NSMantissa1,x
.1d15	a9 80		lda #$80			lda 	#$80
.1d17	95 35		sta $35,x			sta 	NSStatus,x
.1d19	7a		ply				ply
.1d1a	60		rts				rts
.1d1b					ReadStringCommand:
.1d1b	fa		plx				plx
.1d1c	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.1d1e	85 2f		sta $2f				sta 	zTemp0 						; save in MSB
.1d20	88		dey				dey 								; get the upper 3 bits
.1d21	b1 28		lda ($28),y			lda 	(codePtr),y
.1d23	29 07		and #$07			and 	#7
.1d25	c8		iny				iny
.1d26	c8		iny				iny
.1d27	06 2f		asl $2f				asl 	zTemp0 						; shift zTemp0:A left
.1d29	2a		rol a				rol 	a 							; carry will be clear.
.1d2a	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.1d2d	85 30		sta $30				sta 	zTemp0+1
.1d2f	20 35 1d	jsr $1d35			jsr 	ReadStringZTemp0Sub
.1d32	4c 29 10	jmp $1029			jmp 	NextCommand
.1d35					ReadStringZTemp0Sub:
.1d35	5a		phy				phy 								; start write
.1d36	e8		inx				inx 								; prepare
.1d37	74 59		stz $59,x			stz 	NSMantissa2,x
.1d39	74 65		stz $65,x			stz 	NSMantissa3,x
.1d3b	74 71		stz $71,x			stz 	NSExponent,x
.1d3d	a9 40		lda #$40			lda 	#NSSString
.1d3f	74 35		stz $35,x			stz 	NSStatus,x
.1d41	18		clc				clc
.1d42	b2 2f		lda ($2f)			lda 	(zTemp0)					; read address of block add 2.
.1d44	69 02		adc #$02			adc 	#2 							; this points to actual data
.1d46	95 41		sta $41,x			sta 	NSMantissa0,x 				; if address 0 the MSB will still be 0
.1d48	a0 01		ldy #$01			ldy 	#1
.1d4a	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.1d4c	69 00		adc #$00			adc 	#0
.1d4e	95 4d		sta $4d,x			sta 	NSMantissa1,x 				; +ve read
.1d50	d0 08		bne $1d5a			bne 	_RSZNoDefault 				; if read $00 use a default value.
.1d52	a9 5c		lda #$5c			lda 	#_RSZNull & $FF
.1d54	95 41		sta $41,x			sta 	NSMantissa0,x
.1d56	a9 1d		lda #$1d			lda 	#_RSZNull >> 8
.1d58	95 4d		sta $4d,x			sta 	NSMantissa1,x
.1d5a					_RSZNoDefault:
.1d5a	7a		ply				ply
.1d5b	60		rts				rts
.1d5c					_RSZNull:
>1d5c	00						.byte 	0
.1d5d					CommandRestore:
.1d5d	fa		plx				plx
.1d5e	20 64 1d	jsr $1d64			jsr 	RestoreCode
.1d61	4c 29 10	jmp $1029			jmp 	NextCommand
.1d64					RestoreCode:
.1d64	ad 04 04	lda $0404			lda 	runtimeHigh 				; reset pointer and page
.1d67	85 2e		sta $2e				sta 	objPage+1
.1d69	64 2d		stz $2d				stz  	objPage
.1d6b	9c 63 05	stz $0563			stz 	dataRemaining 				; no data remaining.
.1d6e	60		rts				rts
.0563					dataRemaining:
>0563							.fill 	1		 					; 0 if not in data statement
.1d6f					UnaryRND:
.1d6f	fa		plx				plx
.1d70	34 35		bit $35,x			bit 	NSStatus,x 					; -ve then set seed from operand
.1d72	10 17		bpl $1d8b			bpl 	_URNoSeed
.1d74	20 5d 2b	jsr $2b5d			jsr 	FloatNormalise 				; some float value
.1d77	b5 41		lda $41,x			lda 	NSMantissa0,x 				; copy to Mantissa
.1d79	8d 64 05	sta $0564			sta 	randomSeed+0
.1d7c	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.1d7e	8d 65 05	sta $0565			sta 	randomSeed+1
.1d81	b5 59		lda $59,x			lda 	NSMantissa2,x
.1d83	8d 66 05	sta $0566			sta 	randomSeed+2
.1d86	b5 65		lda $65,x			lda 	NSMantissa3,x
.1d88	8d 67 05	sta $0567			sta 	randomSeed+3
.1d8b					_URNoSeed:
.1d8b	20 ad 1d	jsr $1dad			jsr 	RandomNumberGenerator 		; create a number and copy to mantissa
.1d8e	ad 64 05	lda $0564			lda 	randomSeed+0
.1d91	95 41		sta $41,x			sta 	NSMantissa0,x
.1d93	ad 65 05	lda $0565			lda 	randomSeed+1
.1d96	95 4d		sta $4d,x			sta 	NSMantissa1,x
.1d98	ad 66 05	lda $0566			lda 	randomSeed+2
.1d9b	95 59		sta $59,x			sta 	NSMantissa2,x
.1d9d	ad 67 05	lda $0567			lda 	randomSeed+3
.1da0	29 7f		and #$7f			and 	#$7F
.1da2	95 65		sta $65,x			sta 	NSMantissa3,x
.1da4	a9 e1		lda #$e1			lda 	#(-31 & $FF)
.1da6	95 71		sta $71,x			sta 	NSExponent,x
.1da8	74 35		stz $35,x			stz 	NSStatus,x
.1daa	4c 29 10	jmp $1029			jmp 	NextCommand
.1dad					RandomNumberGenerator:
.1dad	5a		phy				phy
.1dae	ad 64 05	lda $0564			lda 	randomSeed+0 				; check if zero
.1db1	0d 65 05	ora $0565			ora 	randomSeed+1
.1db4	0d 66 05	ora $0566			ora 	randomSeed+2
.1db7	0d 67 05	ora $0567			ora 	randomSeed+3
.1dba	d0 07		bne $1dc3			bne 	_RNGNoSeed
.1dbc	ce 67 05	dec $0567			dec 	randomSeed+3 				; if so tweak and flog
.1dbf	a0 64		ldy #$64			ldy 	#100
.1dc1	80 05		bra $1dc8			bra 	_RNGLoop
.1dc3					_RNGNoSeed:
.1dc3	a0 08		ldy #$08			ldy 	#8
.1dc5	ad 64 05	lda $0564			lda 	randomSeed+0
.1dc8					_RNGLoop:
.1dc8	0a		asl a				asl		a
.1dc9	2e 65 05	rol $0565			rol 	randomSeed+1
.1dcc	2e 66 05	rol $0566			rol 	randomSeed+2
.1dcf	2e 67 05	rol $0567			rol 	randomSeed+3
.1dd2	90 02		bcc $1dd6			bcc		_RNGSkip
.1dd4	49 c5		eor #$c5			eor 	#$C5
.1dd6					_RNGSkip:
.1dd6	88		dey				dey
.1dd7	d0 ef		bne $1dc8			bne		_RNGLoop
.1dd9	8d 64 05	sta $0564			sta 	randomSeed+0
.1ddc	7a		ply				ply
.1ddd	60		rts				rts
.0564					randomSeed:
>0564							.fill 	4
.1dde					StringConcatenate:
.1dde	fa		plx				plx
.1ddf	ca		dex				dex
.1de0	b5 41		lda $41,x			lda 	NSMantissa0,x 				; copy strings to zTemp1 and zTemp2
.1de2	85 31		sta $31				sta 	zTemp1
.1de4	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.1de6	85 32		sta $32				sta 	zTemp1+1
.1de8	b5 42		lda $42,x			lda 	NSMantissa0+1,x
.1dea	85 33		sta $33				sta 	zTemp2
.1dec	b5 4e		lda $4e,x			lda 	NSMantissa1+1,x
.1dee	85 34		sta $34				sta 	zTemp2+1
.1df0	18		clc				clc 								; work out total length
.1df1	b2 31		lda ($31)			lda 	(zTemp1)
.1df3	72 33		adc ($33)			adc 	(zTemp2)
.1df5	b0 18		bcs $1e0f			bcs 	_BCLength 					; more than 255 characters.
.1df7	48		pha				pha 								; save total
.1df8	20 d5 1e	jsr $1ed5			jsr 	StringAllocTemp 			; space for result.
.1dfb	68		pla				pla 								; write total as first.
.1dfc	92 22		sta ($22)			sta 	(zsTemp)
.1dfe	20 12 1e	jsr $1e12			jsr 	_BCCopyZTemp1 				; copy zTemp1 to target
.1e01	a5 33		lda $33				lda 	zTemp2 						; copy address zTemp2->1
.1e03	85 31		sta $31				sta 	zTemp1
.1e05	a5 34		lda $34				lda 	zTemp2+1
.1e07	85 32		sta $32				sta 	zTemp1+1
.1e09	20 12 1e	jsr $1e12			jsr 	_BCCopyZTemp1 				; and copy it, e.g. zTemp2
.1e0c	4c 29 10	jmp $1029			jmp 	NextCommand
.1e0f					_BCLength:
.1e0f	4c a5 26	jmp $26a5		jmp	ErrorV_range
.1e12					_BCCopyZTemp1:
.1e12	b2 31		lda ($31)			lda 	(zTemp1) 					; bytes to copy
.1e14	f0 15		beq $1e2b			beq 	_BCCExit 					; none.
.1e16	da		phx				phx 								; save XY
.1e17	5a		phy				phy
.1e18	aa		tax				tax 								; count in X.
.1e19	a0 01		ldy #$01			ldy 	#1
.1e1b					_BCCLoop:
.1e1b	e6 22		inc $22				inc 	zsTemp 						; bump pointer, pre-increment
.1e1d	d0 02		bne $1e21			bne 	_BCCNoCarry
.1e1f	e6 23		inc $23				inc 	zsTemp+1
.1e21					_BCCNoCarry:
.1e21	b1 31		lda ($31),y			lda 	(zTemp1),y				 	; copy bytes
.1e23	92 22		sta ($22)			sta 	(zsTemp)
.1e25	c8		iny				iny
.1e26	ca		dex				dex 								; X times
.1e27	d0 f2		bne $1e1b			bne 	_BCCLoop
.1e29	7a		ply				ply 								; restore YX
.1e2a	fa		plx				plx
.1e2b					_BCCExit:
.1e2b	60		rts				rts
.1e2c					XRuntimeSetup:
.1e2c	a9 ff		lda #$ff	 		lda 	#$FF 						; default banks to access.
.1e2e	8d 6b 05	sta $056b	 		sta 	ramBank
.1e31	8d 6c 05	sta $056c	 		sta 	romBank
.1e34	60		rts				rts
.1e35					SignTOS:
.1e35	fa		plx				plx
.1e36	20 2a 2e	jsr $2e2a			jsr 	FloatIsZero 				; if zero
.1e39	f0 0f		beq $1e4a			beq 	_SGZero  					; return Int Zero
.1e3b	b5 35		lda $35,x			lda 	NSStatus,x 					; get status w/sign
.1e3d	48		pha				pha
.1e3e	a9 01		lda #$01			lda 	#1 							; set result to 1
.1e40	20 0a 2e	jsr $2e0a			jsr 	FloatSetByte
.1e43	68		pla				pla
.1e44	29 80		and #$80			and		#$80 						; copy the sign byte out
.1e46	95 35		sta $35,x			sta 	NSStatus,x  				; so it will be -1 or 1
.1e48	80 03		bra $1e4d			bra 	_SGExit
.1e4a					_SGZero:
.1e4a	20 08 2e	jsr $2e08			jsr 	FloatSetZero
.1e4d					_SGExit:
.1e4d	4c 29 10	jmp $1029			jmp 	NextCommand
.1e50					CommandShift:
.1e50	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted command (X already pushed)
.1e52	c8		iny				iny
.1e53	0a		asl a				asl 	a 							; double into X
.1e54	aa		tax				tax
.1e55	7c 00 22	jmp ($2200,x)			jmp 	(ShiftVectorTable,x) 		; go there.
.1e58					PrintTab:
.1e58	fa		plx				plx
.1e59	20 9f 23	jsr $239f			jsr 	XGetHPos
.1e5c					_PTMod10:
.1e5c	38		sec				sec
.1e5d	e9 0a		sbc #$0a			sbc 	#10
.1e5f	b0 fb		bcs $1e5c			bcs 	_PTMod10
.1e61	49 ff		eor #$ff			eor 	#255 						; subtract from 10 effectively. negate it
.1e63	1a		inc a				inc 	a 							; if modulus is 0, then this will be -10 => 10
.1e64	80 15		bra $1e7b			bra 	PrintSpaceLoop
.1e66					PrintPos:
.1e66	fa		plx				plx
.1e67	20 9f 23	jsr $239f			jsr		XGetHPos 					; get current position
.1e6a	85 2f		sta $2f				sta 	zTemp0
.1e6c	38		sec				sec 								; calculate spaces required
.1e6d	b5 41		lda $41,x			lda 	NSMantissa0,x
.1e6f	ca		dex				dex
.1e70	e5 2f		sbc $2f				sbc 	zTemp0
.1e72	b0 07		bcs $1e7b			bcs 	PrintSpaceLoop 				; if >= 0 then do that many spaces
.1e74	4c 29 10	jmp $1029			jmp 	NextCommand
.1e77					PrintSpace:
.1e77	fa		plx				plx
.1e78	b5 41		lda $41,x			lda 	NSMantissa0,x
.1e7a	ca		dex				dex
.1e7b					PrintSpaceLoop:
.1e7b	c9 00		cmp #$00			cmp 	#0
.1e7d	f0 0a		beq $1e89			beq 	_PSExit
.1e7f	48		pha				pha
.1e80	a9 20		lda #$20			lda 	#" "
.1e82	20 32 1b	jsr $1b32			jsr 	VectorPrintCharacter
.1e85	68		pla				pla
.1e86	3a		dec a				dec 	a
.1e87	80 f2		bra $1e7b			bra 	PrintSpaceLoop
.1e89					_PSExit:
.1e89	4c 29 10	jmp $1029			jmp 	NextCommand
.1e8c					CommandStop:
.1e8c	fa		plx				plx
.1e8d	4c 57 27	jmp $2757		jmp	ErrorV_stop
.1e90					Unary_Str:
.1e90	fa		plx				plx
.1e91	5a		phy				phy
.1e92	a9 08		lda #$08			lda 	#8 							; maximum decimal places.
.1e94	20 f0 2c	jsr $2cf0			jsr 	FloatToString 				; do the conversion.
.1e97	a9 21		lda #$21			lda		#33 						; create buffer
.1e99	20 d5 1e	jsr $1ed5			jsr 	StringAllocTemp 			; allocate memory
.1e9c	a0 01		ldy #$01			ldy 	#1  						; copy the converted string into the buffer.
.1e9e					_USCopy:
.1e9e	b9 93 05	lda $0593,y			lda 	decimalBuffer-1,y
.1ea1	f0 05		beq $1ea8			beq 	_USExit
.1ea3	91 22		sta ($22),y			sta 	(zsTemp),y
.1ea5	c8		iny				iny
.1ea6	80 f6		bra $1e9e			bra 	_USCopy
.1ea8					_USExit:
.1ea8	98		tya				tya
.1ea9	3a		dec a				dec 	a
.1eaa	92 22		sta ($22)			sta 	(zsTemp)
.1eac	7a		ply				ply
.1ead	4c 29 10	jmp $1029			jmp 	NextCommand
.1eb0					StringInitialise:
.1eb0	48		pha				pha
.1eb1	ad 68 05	lda $0568			lda 	stringInitialised 			; already done
.1eb4	d0 11		bne $1ec7			bne 	_SIExit
.1eb6	ad 02 04	lda $0402			lda 	stringHighMemory 			; copy high memory - 512 => stringTempPointer
.1eb9	8d 69 05	sta $0569			sta 	stringTempPointer
.1ebc	ad 03 04	lda $0403			lda 	stringHighMemory+1
.1ebf	3a		dec a				dec 	a
.1ec0	3a		dec a				dec 	a
.1ec1	8d 6a 05	sta $056a			sta 	stringTempPointer+1
.1ec4	ce 68 05	dec $0568			dec 	stringInitialised 			; set the initialised flag.
.1ec7					_SIExit:
.1ec7	a5 27		lda $27				lda 	availableMemory+1 			; check out of memory
.1ec9	1a		inc a				inc 	a
.1eca	1a		inc a				inc 	a
.1ecb	cd 03 04	cmp $0403			cmp 	stringHighMemory+1
.1ece	b0 02		bcs $1ed2			bcs 	_SIMemory
.1ed0	68		pla				pla
.1ed1	60		rts				rts
.1ed2					_SIMemory:
.1ed2	4c b0 27	jmp $27b0		jmp	ErrorV_memory
.1ed5					StringAllocTemp:
.1ed5	20 b0 1e	jsr $1eb0			jsr 	StringInitialise 			; check it is initialised.
.1ed8	49 ff		eor #$ff			eor 	#$FF 						; subtract A+1 from temp pointer.
.1eda	18		clc				clc
.1edb	6d 69 05	adc $0569			adc 	stringTempPointer 			; subtract 32 from temp pointer and
.1ede	8d 69 05	sta $0569			sta 	stringTempPointer 			; save in zsTemp and stackas well.
.1ee1	85 22		sta $22				sta 	zsTemp
.1ee3	95 41		sta $41,x			sta 	NSMantissa0,x
.1ee5	ad 6a 05	lda $056a			lda 	stringTempPointer+1
.1ee8	69 ff		adc #$ff			adc 	#$FF
.1eea	8d 6a 05	sta $056a			sta 	stringTempPointer+1
.1eed	85 23		sta $23				sta 	zsTemp+1
.1eef	95 4d		sta $4d,x			sta 	NSMantissa1,x
.1ef1	74 59		stz $59,x			stz 	NSMantissa2,x
.1ef3	74 65		stz $65,x			stz 	NSMantissa3,x
.1ef5	a9 00		lda #$00			lda 	#0 							; clear string.
.1ef7	92 22		sta ($22)			sta 	(zsTemp)
.1ef9	a9 40		lda #$40			lda 	#NSSString 			 		; mark as string
.1efb	95 35		sta $35,x			sta 	NSStatus,x
.1efd	60		rts				rts
.1efe					StringWriteChar:
.1efe	5a		phy				phy
.1eff	48		pha				pha
.1f00	b2 22		lda ($22)			lda 	(zsTemp)
.1f02	1a		inc a				inc 	a
.1f03	92 22		sta ($22)			sta 	(zsTemp)
.1f05	a8		tay				tay
.1f06	68		pla				pla
.1f07	91 22		sta ($22),y			sta 	(zsTemp),y
.1f09	7a		ply				ply
.1f0a	60		rts				rts
.0568					stringInitialised:
>0568							.fill 	1
.0569					stringTempPointer:
>0569							.fill 	2
.1f0b					Unary_Left:
.1f0b	fa		plx				plx
.1f0c	5a		phy				phy
.1f0d	18		clc				clc 								; only one parameter
.1f0e	20 05 18	jsr $1805			jsr 	GetInteger8Bit 				; push the length of the string.
.1f11	48		pha				pha
.1f12	ca		dex				dex
.1f13	a9 00		lda #$00			lda 	#0 							; push the start position.
.1f15	48		pha				pha
.1f16	20 4e 1f	jsr $1f4e			jsr 	UnarySStringToZTemp0
.1f19	80 3c		bra $1f57			bra 	SubstringMain 				; stack now points to the string to slice.
.1f1b					Unary_Right:
.1f1b	fa		plx				plx
.1f1c	5a		phy				phy
.1f1d	a9 ff		lda #$ff			lda 	#255 						; push 255, we want all the string.
.1f1f	20 05 18	jsr $1805			jsr 	GetInteger8Bit 				; push the right length of the string.
.1f22	48		pha				pha
.1f23	ca		dex				dex
.1f24	20 4e 1f	jsr $1f4e			jsr 	UnarySStringToZTemp0
.1f27	68		pla				pla 								; this is the right requirement
.1f28	38		sec				sec
.1f29	49 ff		eor #$ff			eor 	#$FF
.1f2b	72 2f		adc ($2f)			adc 	(zTemp0)
.1f2d	b0 02		bcs $1f31			bcs 	_URHaveCount
.1f2f	a9 00		lda #$00			lda 	#0 							; overflow, start from 0
.1f31					_URHaveCount:
.1f31	a0 ff		ldy #$ff			ldy 	#255 						; whole string
.1f33	5a		phy				phy
.1f34	48		pha				pha 								; start position
.1f35	80 20		bra $1f57			bra 	SubstringMain
.1f37					Unary_Mid:
.1f37	fa		plx				plx
.1f38	5a		phy				phy
.1f39	20 05 18	jsr $1805			jsr 	GetInteger8Bit 				; push the length of the string required.
.1f3c	48		pha				pha
.1f3d	ca		dex				dex
.1f3e	20 05 18	jsr $1805			jsr 	GetInteger8Bit 				; put the start position.
.1f41	f0 08		beq $1f4b			beq 	_UMError
.1f43	3a		dec a				dec 	a
.1f44	48		pha				pha
.1f45	ca		dex				dex
.1f46	20 4e 1f	jsr $1f4e			jsr 	UnarySStringToZTemp0
.1f49	80 0c		bra $1f57			bra 	SubstringMain 				; stack now points to the string to slice.
.1f4b					_UMError:
.1f4b	4c a5 26	jmp $26a5		jmp	ErrorV_range
.1f4e					UnarySStringToZTemp0:
.1f4e	b5 41		lda $41,x			lda 	NSMantissa0,x
.1f50	85 2f		sta $2f				sta 	zTemp0
.1f52	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.1f54	85 30		sta $30				sta 	zTemp0+1
.1f56	60		rts				rts
.1f57					SubstringMain:
.1f57	68		pla				pla 								; get the start offset
.1f58	7a		ply				ply 								; get the count to do.
.1f59	d2 2f		cmp ($2f)			cmp 	(zTemp0) 					; if start >= length then return NULL.
.1f5b	b0 38		bcs $1f95			bcs 	_SSReturnNull
.1f5d	85 31		sta $31				sta 	zTemp1 						; save start position.
.1f5f	84 32		sty $32				sty 	zTemp1+1 					; save count
.1f61	18		clc				clc
.1f62	65 32		adc $32				adc 	zTemp1+1 					; this is the end position.
.1f64	b0 06		bcs $1f6c			bcs 	_SMTruncateToEnd 			; if overflow, limit to length-start.
.1f66	d2 2f		cmp ($2f)			cmp 	(zTemp0) 					; ok if limit is <= length.
.1f68	f0 04		beq $1f6e			beq 	_SMIsOkay
.1f6a	90 02		bcc $1f6e			bcc 	_SMIsOkay
.1f6c					_SMTruncateToEnd:
.1f6c	b2 2f		lda ($2f)			lda 	(zTemp0) 					; end position is length.
.1f6e					_SMIsOkay:
.1f6e	85 32		sta $32				sta 	zTemp1+1
.1f70	38		sec				sec		 							; work out size
.1f71	a5 32		lda $32				lda 	zTemp1+1
.1f73	e5 31		sbc $31				sbc 	zTemp1
.1f75	f0 1e		beq $1f95			beq 	_SSReturnNull 				; if size = 0 then return empty string.
.1f77	20 d5 1e	jsr $1ed5			jsr 	StringAllocTemp 			; zsTemp & mantissa = the new string.
.1f7a	a4 31		ldy $31				ldy 	zTemp1 						; start
.1f7c					_SMCopy:
.1f7c	c4 32		cpy $32				cpy 	zTemp1+1 					; exit if reached end
.1f7e	f0 11		beq $1f91			beq 	_SMExit
.1f80	c8		iny				iny 								; bump and
.1f81	b1 2f		lda ($2f),y			lda 	(zTemp0),y 					; get character (prefix)
.1f83	5a		phy				phy
.1f84	48		pha				pha
.1f85	b2 22		lda ($22)			lda 	(zsTemp) 					; bump length => Y
.1f87	1a		inc a				inc 	a
.1f88	a8		tay				tay
.1f89	92 22		sta ($22)			sta 	(zsTemp)
.1f8b	68		pla				pla 								; write character out
.1f8c	91 22		sta ($22),y			sta 	(zsTemp),y
.1f8e	7a		ply				ply 								; restore Y
.1f8f	80 eb		bra $1f7c			bra 	_SMCopy
.1f91					_SMExit:
.1f91	7a		ply				ply
.1f92	4c 29 10	jmp $1029			jmp 	NextCommand
.1f95					_SSReturnNull:
.1f95	a9 a7		lda #$a7			lda 	#SSRNull & $FF 				; set up mantissa
.1f97	95 41		sta $41,x			sta 	NSMantissa0,x
.1f99	a9 1f		lda #$1f			lda 	#SSRNull >> 8
.1f9b	95 4d		sta $4d,x			sta 	NSMantissa1,x
.1f9d	74 59		stz $59,x			stz 	NSMantissa2,x
.1f9f	74 65		stz $65,x			stz 	NSMantissa3,x
.1fa1	a9 40		lda #$40			lda 	#NSSString
.1fa3	95 35		sta $35,x			sta 	NSStatus,x
.1fa5	80 ea		bra $1f91			bra 	_SMExit
.1fa7					SSRNull:
>1fa7	00 00						.word 	0
.1fa9					CommandSwap:
.1fa9	fa		plx				plx
.1faa	b5 41		lda $41,x			lda 	NSMantissa0,x
.1fac	48		pha				pha
.1fad	b5 40		lda $40,x			lda 	NSMantissa0-1,x
.1faf	95 41		sta $41,x			sta 	NSMantissa0,x
.1fb1	68		pla				pla
.1fb2	95 40		sta $40,x			sta 	NSMantissa0-1,x
.1fb4	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.1fb6	48		pha				pha
.1fb7	b5 4c		lda $4c,x			lda 	NSMantissa1-1,x
.1fb9	95 4d		sta $4d,x			sta 	NSMantissa1,x
.1fbb	68		pla				pla
.1fbc	95 4c		sta $4c,x			sta 	NSMantissa1-1,x
.1fbe	b5 59		lda $59,x			lda 	NSMantissa2,x
.1fc0	48		pha				pha
.1fc1	b5 58		lda $58,x			lda 	NSMantissa2-1,x
.1fc3	95 59		sta $59,x			sta 	NSMantissa2,x
.1fc5	68		pla				pla
.1fc6	95 58		sta $58,x			sta 	NSMantissa2-1,x
.1fc8	b5 65		lda $65,x			lda 	NSMantissa3,x
.1fca	48		pha				pha
.1fcb	b5 64		lda $64,x			lda 	NSMantissa3-1,x
.1fcd	95 65		sta $65,x			sta 	NSMantissa3,x
.1fcf	68		pla				pla
.1fd0	95 64		sta $64,x			sta 	NSMantissa3-1,x
.1fd2	b5 71		lda $71,x			lda 	NSExponent,x
.1fd4	48		pha				pha
.1fd5	b5 70		lda $70,x			lda 	NSExponent-1,x
.1fd7	95 71		sta $71,x			sta 	NSExponent,x
.1fd9	68		pla				pla
.1fda	95 70		sta $70,x			sta 	NSExponent-1,x
.1fdc	b5 35		lda $35,x			lda 	NSStatus,x
.1fde	48		pha				pha
.1fdf	b5 34		lda $34,x			lda 	NSStatus-1,x
.1fe1	95 35		sta $35,x			sta 	NSStatus,x
.1fe3	68		pla				pla
.1fe4	95 34		sta $34,x			sta 	NSStatus-1,x
.1fe6	4c 29 10	jmp $1029			jmp 	NextCommand
.1fe9					CommandSYS:
.1fe9	fa		plx				plx
.1fea	da		phx				phx 								; save XY
.1feb	5a		phy				phy
.1fec	20 43 2a	jsr $2a43			jsr 	FloatIntegerPart
.1fef	b5 4d		lda $4d,x			lda 	NSMantissa1,x 				; get call address => zTemp0
.1ff1	85 30		sta $30				sta 	zTemp0+1
.1ff3	b5 41		lda $41,x			lda 	NSMantissa0,x
.1ff5	85 2f		sta $2f				sta 	zTemp0
.1ff7	ae 0d 03	ldx $030d			ldx 	SYS_Reg_X 					; load registers
.1ffa	ac 0e 03	ldy $030e			ldy 	SYS_Reg_Y
.1ffd	ad 0f 03	lda $030f			lda 	SYS_Reg_S
.2000	48		pha				pha
.2001	ad 0c 03	lda $030c			lda 	SYS_Reg_A
.2004	28		plp				plp
.2005	20 1c 20	jsr $201c			jsr 	_CSZTemp0
.2008	08		php				php
.2009	8e 0d 03	stx $030d			stx 	SYS_Reg_X 					; load registers
.200c	8c 0e 03	sty $030e			sty 	SYS_Reg_Y
.200f	8d 0c 03	sta $030c			sta 	SYS_Reg_A
.2012	68		pla				pla
.2013	8d 0f 03	sta $030f			sta 	SYS_Reg_S
.2016	7a		ply				ply 								; restore YX and drop 2
.2017	fa		plx				plx
.2018	ca		dex				dex
.2019	4c 29 10	jmp $1029			jmp 	NextCommand
.201c					_CSZTemp0:
.201c	6c 2f 00	jmp ($002f)			jmp 	(zTemp0)
.201f					TimeTOS:
.201f	fa		plx				plx
.2020	20 7a 20	jsr $207a			jsr 	TIPushClock 				; push clock to TOS
.2023	4c 29 10	jmp $1029			jmp 	NextCommand
.2026					TimeString:
.2026	fa		plx				plx
.2027	20 7a 20	jsr $207a			jsr 	TIPushClock 				; push clock to TOS
.202a	20 4f 20	jsr $204f			jsr 	_TSDivMod60 				; result in seconds
.202d	20 4f 20	jsr $204f			jsr 	_TSDivMod60 				; seconds
.2030	48		pha				pha
.2031	20 4f 20	jsr $204f			jsr 	_TSDivMod60 				; minutes
.2034	48		pha				pha
.2035	a9 18		lda #$18			lda 	#24 						; hours
.2037	20 51 20	jsr $2051			jsr 	_TSDivModA
.203a	48		pha				pha
.203b	a9 06		lda #$06			lda 	#6
.203d	20 d5 1e	jsr $1ed5			jsr 	StringAllocTemp
.2040	68		pla				pla
.2041	20 61 20	jsr $2061			jsr 	_TSWriteDecimal
.2044	68		pla				pla
.2045	20 61 20	jsr $2061			jsr 	_TSWriteDecimal
.2048	68		pla				pla
.2049	20 61 20	jsr $2061			jsr 	_TSWriteDecimal
.204c	4c 29 10	jmp $1029			jmp 	NextCommand
.204f					_TSDivMod60:
.204f	a9 3c		lda #$3c			lda 	#60
.2051					_TSDivModA:
.2051	e8		inx				inx
.2052	20 0a 2e	jsr $2e0a			jsr 	FloatSetByte
.2055	ca		dex				dex
.2056	20 9e 29	jsr $299e			jsr 	Int32Divide
.2059	b5 41		lda $41,x			lda 	NSMantissa0,x 				; get modulus
.205b	48		pha				pha
.205c	20 8d 29	jsr $298d			jsr 	NSMCopyPlusTwoToZero
.205f	68		pla				pla
.2060	60		rts				rts
.2061					_TSWriteDecimal:
.2061	da		phx				phx
.2062	a2 30		ldx #$30			ldx 	#'0'
.2064					_TSWDLoop:
.2064	c9 0a		cmp #$0a			cmp 	#10
.2066	90 05		bcc $206d			bcc 	_TSWDEnd
.2068	e9 0a		sbc #$0a			sbc 	#10
.206a	e8		inx				inx
.206b	80 f7		bra $2064			bra 	_TSWDLoop
.206d					_TSWDEnd:
.206d	48		pha				pha
.206e	8a		txa				txa
.206f	20 fe 1e	jsr $1efe			jsr 	StringWriteChar
.2072	68		pla				pla
.2073	09 30		ora #$30			ora 	#'0'
.2075	20 fe 1e	jsr $1efe			jsr 	StringWriteChar
.2078	fa		plx				plx
.2079	60		rts				rts
.207a					TIPushClock:
.207a	5a		phy				phy
.207b	e8		inx				inx 								; push 0 on the stack
.207c	20 08 2e	jsr $2e08			jsr 	FloatSetZero
.207f	da		phx				phx
.2080	20 6a 24	jsr $246a			jsr 	XReadClock 					; read time into YXA
.2083	86 2f		stx $2f				stx 	zTemp0
.2085	fa		plx				plx
.2086	95 41		sta $41,x			sta 	NSMantissa0,x
.2088	a5 2f		lda $2f				lda 	zTemp0
.208a	95 4d		sta $4d,x			sta 	NSMantissa1,x
.208c	98		tya				tya
.208d	95 59		sta $59,x			sta 	NSMantissa2,x
.208f	7a		ply				ply
.2090	60		rts				rts
.2091					CommandTIWrite:
.2091	fa		plx				plx
.2092	b5 41		lda $41,x			lda 	NSMantissa0,x 				; copy string address to ZSTemp
.2094	85 22		sta $22				sta 	zsTemp
.2096	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.2098	85 23		sta $23				sta 	zsTemp+1
.209a	b2 22		lda ($22)			lda 	(zsTemp) 					; check if it is six
.209c	c9 06		cmp #$06			cmp 	#6
.209e	d0 59		bne $20f9			bne 	_CTIWError
.20a0	20 08 2e	jsr $2e08			jsr 	FloatSetZero
.20a3	20 c5 20	jsr $20c5			jsr 	_CTIWDigitPair 				; do a digit pair 3 times
.20a6	20 c5 20	jsr $20c5			jsr 	_CTIWDigitPair
.20a9	20 c5 20	jsr $20c5			jsr 	_CTIWDigitPair
.20ac	a9 3c		lda #$3c			lda 	#60 						; multiply the result by 60.
.20ae	20 f0 20	jsr $20f0			jsr 	_CTIWMultiply
.20b1	da		phx				phx
.20b2	5a		phy				phy
.20b3	b5 4d		lda $4d,x			lda 	NSMantissa1,x 				; get time into YXA
.20b5	48		pha				pha
.20b6	b5 59		lda $59,x			lda 	NSMantissa2,x
.20b8	a8		tay				tay
.20b9	b5 41		lda $41,x			lda 	NSMantissa0,x
.20bb	fa		plx				plx
.20bc	20 6e 24	jsr $246e			jsr 	XWriteClock 				; update the clock.
.20bf	7a		ply				ply
.20c0	fa		plx				plx
.20c1	ca		dex				dex 								; throw result.
.20c2	4c 29 10	jmp $1029			jmp 	NextCommand
.20c5					_CTIWDigitPair:
.20c5	a9 06		lda #$06			lda 	#6 							; x 6
.20c7	20 f0 20	jsr $20f0			jsr 	_CTIWMultiply
.20ca	20 d6 20	jsr $20d6			jsr 	_CTIWAddDigit 				; add digit
.20cd	a9 0a		lda #$0a			lda 	#10 						; x 10
.20cf	20 f0 20	jsr $20f0			jsr 	_CTIWMultiply
.20d2	20 d6 20	jsr $20d6			jsr 	_CTIWAddDigit 				; add digit
.20d5	60		rts				rts
.20d6					_CTIWAddDigit:
.20d6	e6 22		inc $22				inc 	zsTemp 						; pre-increment
.20d8	d0 02		bne $20dc			bne 	_CTIWASkip
.20da	e6 23		inc $23				inc 	zsTemp+1
.20dc					_CTIWASkip:
.20dc	b2 22		lda ($22)			lda 	(zsTemp) 					; read and validate it
.20de	38		sec				sec
.20df	e9 30		sbc #$30			sbc 	#"0"
.20e1	90 16		bcc $20f9			bcc 	_CTIWError
.20e3	c9 0a		cmp #$0a			cmp 	#9+1
.20e5	b0 12		bcs $20f9			bcs 	_CTIWError
.20e7	e8		inx				inx 								; store at +1
.20e8	20 0a 2e	jsr $2e0a			jsr 	FloatSetByte
.20eb	ca		dex				dex
.20ec	20 94 2b	jsr $2b94			jsr 	FloatAddTopTwoStack
.20ef	60		rts				rts
.20f0					_CTIWMultiply:
.20f0	e8		inx				inx
.20f1	20 0a 2e	jsr $2e0a			jsr 	FloatSetByte
.20f4	ca		dex				dex
.20f5	20 15 2b	jsr $2b15			jsr 	FloatMultiplyShort
.20f8	60		rts				rts
.20f9					_CTIWError:
.20f9	4c b5 26	jmp $26b5		jmp	ErrorV_value
.20fc					UnaryUsr:
.20fc	fa		plx				plx
.20fd	5a		phy				phy
.20fe	20 05 21	jsr $2105			jsr 	_UUCallVector
.2101	7a		ply				ply
.2102	4c 29 10	jmp $1029			jmp 	NextCommand
.2105					_UUCallVector:
.2105	6c 11 03	jmp ($0311)			jmp 	(USRRoutineAddress)
.2108					ValUnary:
.2108	fa		plx				plx
.2109	b5 41		lda $41,x			lda 	NSMantissa0,x
.210b	85 2f		sta $2f				sta 	zTemp0
.210d	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.210f	85 30		sta $30				sta 	zTemp0+1
.2111	20 1c 21	jsr $211c			jsr 	ValEvaluateZTemp0
.2114	b0 03		bcs $2119			bcs 	_VUError 					; couldn't convert
.2116	4c 29 10	jmp $1029			jmp 	NextCommand
.2119					_VUError:
.2119	4c b5 26	jmp $26b5		jmp	ErrorV_value
.211c					ValEvaluateZTemp0:
.211c	5a		phy				phy
.211d	b2 2f		lda ($2f)			lda 	(zTemp0) 					; check not empty string
.211f	f0 22		beq $2143			beq 	_VMCFail2
.2121	a0 00		ldy #$00			ldy 	#0 							; start position
.2123					_VMCSpaces:
.2123	c8		iny				iny 								; skip leading spaces
.2124	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.2126	c9 20		cmp #$20			cmp 	#" "
.2128	f0 f9		beq $2123			beq 	_VMCSpaces
.212a	48		pha				pha 								; save first character
.212b	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.212d	d0 01		bne $2130			bne 	_VMCStart
.212f	c8		iny				iny 								; skip over - if so.
.2130					_VMCStart:
.2130	38		sec				sec 								; initialise first time round.
.2131					_VMCNext:
.2131	98		tya				tya 								; reached end of string
.2132	3a		dec a				dec 	a
.2133	52 2f		eor ($2f)			eor 	(zTemp0) 					; compare length preserve carry.
.2135	f0 0f		beq $2146			beq 	_VMCSuccess 				; successful.
.2137	b1 2f		lda ($2f),y			lda 	(zTemp0),y 					; encode a number.
.2139	c8		iny				iny
.213a	20 ec 2b	jsr $2bec			jsr 	FloatEncode 				; send it to the number-builder
.213d	90 03		bcc $2142			bcc 	_VMCFail 					; if failed, give up.
.213f	18		clc				clc 								; next time round, countinue
.2140	80 ef		bra $2131			bra 	_VMCNext
.2142					_VMCFail:
.2142	68		pla				pla
.2143					_VMCFail2:
.2143	7a		ply				ply
.2144	38		sec				sec
.2145	60		rts				rts
.2146					_VMCSuccess:
.2146	a9 00		lda #$00			lda 	#0 							; construct final
.2148	20 ec 2b	jsr $2bec			jsr 	FloatEncode 				; by sending a duff value.
.214b	68		pla				pla 								; if it was -ve
.214c	c9 2d		cmp #$2d			cmp 	#"-"
.214e	d0 03		bne $2153			bne 	_VMCNotNegative
.2150	20 ca 2d	jsr $2dca			jsr		FloatNegate 				; negate it.
.2153					_VMCNotNegative:
.2153	7a		ply				ply
.2154	18		clc				clc
.2155	60		rts				rts
.2156					VectorTable:
>2156	6d 18					.word	LinkFloatAdd             ; $80 +
>2158	76 18					.word	LinkFloatSubtract        ; $81 -
>215a	7f 18					.word	LinkFloatMultiply        ; $82 *
>215c	88 18					.word	LinkFloatDivide          ; $83 /
>215e	93 18					.word	LinkFloatPower           ; $84 ^
>2160	bb 10					.word	BinaryAnd                ; $85 and
>2162	bf 10					.word	BinaryOr                 ; $86 or
>2164	9e 18					.word	LinkCompareGreater       ; $87 >
>2166	a7 18					.word	LinkCompareEqual         ; $88 =
>2168	b0 18					.word	LinkCompareLess          ; $89 <
>216a	b9 18					.word	LinkCompareGreaterEqual  ; $8a >=
>216c	c2 18					.word	LinkCompareNotEqual      ; $8b <>
>216e	cb 18					.word	LinkCompareLessEqual     ; $8c <=
>2170	a3 10					.word	AbsoluteTOS              ; $8d abs
>2172	f6 10					.word	ArrayConvert             ; $8e array
>2174	9e 11					.word	UnaryAsc                 ; $8f asc
>2176	b9 11					.word	CommandAssert            ; $90 assert
>2178	fa 11					.word	Unary16Bin               ; $91 bin$
>217a	24 12					.word	PrintCharacter           ; $92 print.chr
>217c	2e 12					.word	UnaryChr                 ; $93 chr$
>217e	93 12					.word	CompareStrings           ; $94 s.cmp
>2180	7a 14					.word	CommandFor               ; $95 for
>2182	3d 15					.word	UnaryFre                 ; $96 fre
>2184	55 15					.word	CommandGet               ; $97 get
>2186	7b 15					.word	CommandReturn            ; $98 return
>2188	bd 15					.word	Command_PSET             ; $99 pset
>218a	d7 15					.word	Command_LINE             ; $9a line
>218c	ec 15					.word	Command_RECT             ; $9b rect
>218e	fb 15					.word	Command_FRAME            ; $9c frame
>2190	0a 16					.word	Command_CHAR             ; $9d char
>2192	a1 16					.word	Unary16Hex               ; $9e hex$
>2194	48 17					.word	CommandInput             ; $9f input
>2196	5f 17					.word	CommandInputString       ; $a0 input$
>2198	78 17					.word	CommandInputReset        ; $a1 input.start
>219a	5c 18					.word	UnaryLen                 ; $a2 len
>219c	28 19					.word	LinkFloatCompare         ; $a3 f.cmp
>219e	31 19					.word	LinkDivideInt32          ; $a4 int.div
>21a0	ab 19					.word	NegateTOS                ; $a5 negate
>21a2	b2 19					.word	CommandNewLine           ; $a6 new.line
>21a4	bb 19					.word	CommandNext              ; $a7 next
>21a6	a4 1a					.word	NotTOS                   ; $a8 not
>21a8	bb 1a					.word	CommandOn                ; $a9 on
>21aa	d8 1a					.word	CommandMoreOn            ; $aa moreon
>21ac	df 1a					.word	UnaryPeek                ; $ab peek
>21ae	f4 1a					.word	CommandPOKE              ; $ac poke
>21b0	0c 1b					.word	UnaryPos                 ; $ad pos
>21b2	16 1b					.word	GetChannel               ; $ae getchannel
>21b4	21 1b					.word	SetChannel               ; $af setchannel
>21b6	44 1b					.word	PrintNumber              ; $b0 print.n
>21b8	63 1b					.word	PrintString              ; $b1 print.s
>21ba	ca 1b					.word	CommandRead              ; $b2 read
>21bc	e4 1b					.word	CommandReadString        ; $b3 read$
>21be	6f 1d					.word	UnaryRND                 ; $b4 rnd
>21c0	de 1d					.word	StringConcatenate        ; $b5 concat
>21c2	35 1e					.word	SignTOS                  ; $b6 sgn
>21c4	58 1e					.word	PrintTab                 ; $b7 print.tab
>21c6	66 1e					.word	PrintPos                 ; $b8 print.pos
>21c8	77 1e					.word	PrintSpace               ; $b9 print.spc
>21ca	90 1e					.word	Unary_Str                ; $ba str$
>21cc	0b 1f					.word	Unary_Left               ; $bb left$
>21ce	1b 1f					.word	Unary_Right              ; $bc right$
>21d0	37 1f					.word	Unary_Mid                ; $bd mid$
>21d2	a9 1f					.word	CommandSwap              ; $be swap
>21d4	1f 20					.word	TimeTOS                  ; $bf ti
>21d6	26 20					.word	TimeString               ; $c0 ti$
>21d8	fc 20					.word	UnaryUsr                 ; $c1 usr
>21da	08 21					.word	ValUnary                 ; $c2 val
>21dc	66 23					.word	CommandClose             ; $c3 close
>21de	78 23					.word	CommandExit              ; $c4 exit
>21e0	7e 23					.word	CommandDebug             ; $c5 debug
>21e2	e4 23					.word	CommandOpen              ; $c6 open
>21e4	78 24					.word	CommandScreen            ; $c7 screen
>21e6	5f 26					.word	CommandVPOKE             ; $c8 vpoke
>21e8	84 26					.word	CommandVPEEK             ; $c9 vpeek
>21ea	50 1e					.word	CommandShift             ; $ca .shift
>21ec	67 10					.word	PushByteCommand          ; $cb .byte
>21ee	7a 10					.word	PushWordCommand          ; $cc .word
>21f0	86 1b					.word	CommandPushN             ; $cd .float
>21f2	ac 1b					.word	CommandPushS             ; $ce .string
>21f4	1b 13					.word	CommandData              ; $cf .data
>21f6	8c 15					.word	CommandGoto              ; $d0 .goto
>21f8	6f 15					.word	CommandGosub             ; $d1 .gosub
>21fa	a1 15					.word	CommandGotoZ             ; $d2 .goto.z
>21fc	af 15					.word	CommandGotoNZ            ; $d3 .goto.nz
>21fe	a9 10					.word	CommandVarSpace          ; $d4 .varspace
.2200					ShiftVectorTable:
>2200	46 12					.word	CommandClr               ; $ca80 clr
>2202	24 13					.word	CommandDIM               ; $ca81 dim
>2204	15 14					.word	CommandEnd               ; $ca82 end
>2206	2d 18					.word	UnaryJoy                 ; $ca83 joy
>2208	d4 18					.word	LinkFloatIntegerPartDown ; $ca84 int
>220a	dd 18					.word	LinkFloatSquareRoot      ; $ca85 sqr
>220c	ee 18					.word	LinkFloatLogarithm       ; $ca86 log
>220e	f9 18					.word	LinkFloatExponent        ; $ca87 exp
>2210	02 19					.word	LinkFloatCosine          ; $ca88 cos
>2212	0b 19					.word	LinkFloatSine            ; $ca89 sin
>2214	14 19					.word	LinkFloatTangent         ; $ca8a tan
>2216	1d 19					.word	LinkFloatArcTan          ; $ca8b atn
>2218	5b 19					.word	XCommandMouse            ; $ca8c mouse
>221a	70 19					.word	XUnaryMB                 ; $ca8d mb
>221c	7d 19					.word	XUnaryMX                 ; $ca8e mx
>221e	8e 19					.word	XUnaryMY                 ; $ca8f my
>2220	5d 1d					.word	CommandRestore           ; $ca90 restore
>2222	8c 1e					.word	CommandStop              ; $ca91 stop
>2224	e9 1f					.word	CommandSYS               ; $ca92 sys
>2226	91 20					.word	CommandTIWrite           ; $ca93 ti$.write
>2228	5e 22					.word	CommandWAIT              ; $ca94 wait
>222a	a9 23					.word	X16I2CPoke               ; $ca95 i2cpoke
>222c	c9 23					.word	X16I2CPeek               ; $ca96 i2cpeek
>222e	34 24					.word	CommandBank              ; $ca97 bank
>2230	87 24					.word	XCommandSleep            ; $ca98 sleep
>2232	ab 24					.word	X16_Audio_FMINIT         ; $ca99 fminit
>2234	b9 24					.word	X16_Audio_FMNOTE         ; $ca9a fmnote
>2236	cb 24					.word	X16_Audio_FMDRUM         ; $ca9b fmdrum
>2238	dd 24					.word	X16_Audio_FMINST         ; $ca9c fminst
>223a	ef 24					.word	X16_Audio_FMVIB          ; $ca9d fmvib
>223c	01 25					.word	X16_Audio_FMFREQ         ; $ca9e fmfreq
>223e	12 25					.word	X16_Audio_FMVOL          ; $ca9f fmvol
>2240	24 25					.word	X16_Audio_FMPAN          ; $caa0 fmpan
>2242	36 25					.word	X16_Audio_FMPLAY         ; $caa1 fmplay
>2244	47 25					.word	X16_Audio_FMCHORD        ; $caa2 fmchord
>2246	58 25					.word	X16_Audio_FMPOKE         ; $caa3 fmpoke
>2248	6a 25					.word	X16_Audio_PSGINIT        ; $caa4 psginit
>224a	78 25					.word	X16_Audio_PSGNOTE        ; $caa5 psgnote
>224c	8a 25					.word	X16_Audio_PSGVOL         ; $caa6 psgvol
>224e	9c 25					.word	X16_Audio_PSGWAV         ; $caa7 psgwav
>2250	ae 25					.word	X16_Audio_PSGFREQ        ; $caa8 psgfreq
>2252	bf 25					.word	X16_Audio_PSGPAN         ; $caa9 psgpan
>2254	d1 25					.word	X16_Audio_PSGPLAY        ; $caaa psgplay
>2256	e2 25					.word	X16_Audio_PSGCHORD       ; $caab psgchord
>2258	f3 25					.word	CommandCls               ; $caac cls
>225a	fc 25					.word	CommandLocate            ; $caad locate
>225c	26 26					.word	CommandColor             ; $caae color
.225e					CommandWAIT:
.225e	fa		plx				plx
.225f	b5 3f		lda $3f,x			lda 	NSMantissa0-2,x 			; get wait address
.2261	85 2f		sta $2f				sta 	zTemp0
.2263	b5 4b		lda $4b,x			lda 	NSMantissa1-2,x
.2265	85 30		sta $30				sta 	zTemp0+1
.2267					_WaitLoop:
.2267	b2 2f		lda ($2f)			lda 	(zTemp0) 					; read it
.2269	35 40		and $40,x			and 	NSMantissa0-1,x		 		; and with mask
.226b	55 41		eor $41,x			eor 	NSMantissa0-0,x 			; toggle
.226d	f0 f8		beq $2267			beq 	_WaitLoop 					; keep going if zero
.226f	ca		dex				dex 								; drop 3.
.2270	ca		dex				dex
.2271	ca		dex				dex
.2272	4c 29 10	jmp $1029			jmp 	NextCommand
.2275					WriteFloatCommand:
.2275	fa		plx				plx
.2276	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.2278	85 2f		sta $2f				sta 	zTemp0 						; save in MSB
.227a	88		dey				dey 								; get the upper 3 bits
.227b	b1 28		lda ($28),y			lda 	(codePtr),y
.227d	29 07		and #$07			and 	#7
.227f	c8		iny				iny
.2280	c8		iny				iny
.2281	06 2f		asl $2f				asl 	zTemp0 						; shift zTemp0:A left
.2283	2a		rol a				rol 	a 							; carry will be clear.
.2284	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.2287	85 30		sta $30				sta 	zTemp0+1
.2289	20 8f 22	jsr $228f			jsr 	WriteFloatZTemp0Sub
.228c	4c 29 10	jmp $1029			jmp 	NextCommand
.228f					WriteFloatZTemp0Sub:
.228f	5a		phy				phy 								; ldart write
.2290	a0 01		ldy #$01			ldy 	#1
.2292	b5 41		lda $41,x			lda 	NSMantissa0,x
.2294	92 2f		sta ($2f)			sta 	(zTemp0)
.2296	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.2298	91 2f		sta ($2f),y			sta 	(zTemp0),y
.229a	c8		iny				iny
.229b	b5 59		lda $59,x			lda 	NSMantissa2,x
.229d	91 2f		sta ($2f),y			sta 	(zTemp0),y
.229f	c8		iny				iny
.22a0	b5 65		lda $65,x			lda 	NSMantissa3,x
.22a2	91 2f		sta ($2f),y			sta 	(zTemp0),y
.22a4	c8		iny				iny
.22a5	b5 71		lda $71,x			lda 	NSExponent,x
.22a7	91 2f		sta ($2f),y			sta 	(zTemp0),y
.22a9	c8		iny				iny
.22aa	b5 35		lda $35,x			lda 	NSStatus,x
.22ac	91 2f		sta ($2f),y			sta 	(zTemp0),y
.22ae	ca		dex				dex
.22af	7a		ply				ply
.22b0	60		rts				rts
.22b1					WriteIntegerCommand:
.22b1	fa		plx				plx
.22b2	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.22b4	85 2f		sta $2f				sta 	zTemp0 						; save in MSB
.22b6	88		dey				dey 								; get the upper 3 bits
.22b7	b1 28		lda ($28),y			lda 	(codePtr),y
.22b9	29 07		and #$07			and 	#7
.22bb	c8		iny				iny
.22bc	c8		iny				iny
.22bd	06 2f		asl $2f				asl 	zTemp0 						; shift zTemp0:A left
.22bf	2a		rol a				rol 	a 							; carry will be clear.
.22c0	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.22c3	85 30		sta $30				sta 	zTemp0+1
.22c5	20 cb 22	jsr $22cb			jsr 	WriteIntegerZTemp0Sub
.22c8	4c 29 10	jmp $1029			jmp 	NextCommand
.22cb					WriteIntegerZTemp0Sub:
.22cb	20 43 2a	jsr $2a43			jsr 	FloatIntegerPart
.22ce	5a		phy				phy 								; start write
.22cf	a0 01		ldy #$01			ldy 	#1
.22d1	b5 35		lda $35,x			lda 	NSStatus,x 					; negate 2's comp if -ve
.22d3	30 0b		bmi $22e0			bmi 	_WIZNegative
.22d5	b5 41		lda $41,x			lda 	NSMantissa0,x 				; +ve write
.22d7	92 2f		sta ($2f)			sta 	(zTemp0)
.22d9	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.22db	91 2f		sta ($2f),y			sta 	(zTemp0),y
.22dd	7a		ply				ply
.22de	ca		dex				dex
.22df	60		rts				rts
.22e0					_WIZNegative:
.22e0	38		sec				sec 								; -ve read
.22e1	a9 00		lda #$00			lda 	#0
.22e3	f5 41		sbc $41,x			sbc 	NSMantissa0,x
.22e5	92 2f		sta ($2f)			sta 	(zTemp0)
.22e7	a9 00		lda #$00			lda 	#0
.22e9	f5 4d		sbc $4d,x			sbc 	NSMantissa1,x
.22eb	91 2f		sta ($2f),y			sta 	(zTemp0),y
.22ed	7a		ply				ply
.22ee	ca		dex				dex
.22ef	60		rts				rts
.22f0					WriteStringCommand:
.22f0	fa		plx				plx
.22f1	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.22f3	85 2f		sta $2f				sta 	zTemp0 						; save in MSB
.22f5	88		dey				dey 								; get the upper 3 bits
.22f6	b1 28		lda ($28),y			lda 	(codePtr),y
.22f8	29 07		and #$07			and 	#7
.22fa	c8		iny				iny
.22fb	c8		iny				iny
.22fc	06 2f		asl $2f				asl 	zTemp0 						; shift zTemp0:A left
.22fe	2a		rol a				rol 	a 							; carry will be clear.
.22ff	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.2302	85 30		sta $30				sta 	zTemp0+1
.2304	20 0a 23	jsr $230a			jsr 	WriteStringZTemp0Sub
.2307	4c 29 10	jmp $1029			jmp 	NextCommand
.230a					WriteStringZTemp0Sub:
.230a	5a		phy				phy
.230b	a0 01		ldy #$01			ldy 	#1 							; if it is zero we must concrete whatever.
.230d	b2 2f		lda ($2f)			lda 	(zTemp0)
.230f	11 2f		ora ($2f),y			ora 	(zTemp0),y
.2311	f0 1e		beq $2331			beq 	_WSConcrete
.2313	b2 2f		lda ($2f)			lda 	(zTemp0) 					; put address of actual string in zTemp1
.2315	85 31		sta $31				sta 	zTemp1
.2317	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.2319	85 32		sta $32				sta 	zTemp1+1
.231b	b5 41		lda $41,x			lda 	NSMantissa0,x 				; copy source to zTemp2
.231d	85 33		sta $33				sta 	zTemp2
.231f	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.2321	85 34		sta $34				sta 	zTemp2+1
.2323	b2 31		lda ($31)			lda 	(zTemp1) 					; space available
.2325	d2 33		cmp ($33)			cmp 	(zTemp2) 					; if >= required length then copy
.2327	b0 17		bcs $2340			bcs 	_WSCopy
.2329	a0 01		ldy #$01			ldy 	#1 							; set the 'available for reclaim' flag
.232b	b1 31		lda ($31),y			lda 	(zTemp1),y
.232d	09 80		ora #$80			ora 	#$80
.232f	91 31		sta ($31),y			sta 	(zTemp1),y
.2331					_WSConcrete:
.2331	b5 4d		lda $4d,x			lda 	NSMantissa1,x 				; string in YA
.2333	a8		tay				tay
.2334	b5 41		lda $41,x			lda 	NSMantissa0,x
.2336	20 d5 12	jsr $12d5			jsr 	StringConcrete
.2339	92 2f		sta ($2f)			sta 	(zTemp0) 					; save returned address
.233b	98		tya				tya
.233c	a0 01		ldy #$01			ldy 	#1
.233e	91 2f		sta ($2f),y			sta 	(zTemp0),y
.2340					_WSCopy
.2340	18		clc				clc  								; copy target+2 to zTemp2
.2341	b2 2f		lda ($2f)			lda 	(zTemp0)
.2343	69 02		adc #$02			adc 	#2
.2345	85 33		sta $33				sta 	zTemp2
.2347	a0 01		ldy #$01			ldy 	#1
.2349	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.234b	69 00		adc #$00			adc 	#0
.234d	85 34		sta $34				sta 	zTemp2+1
.234f	b5 41		lda $41,x			lda 	NSMantissa0,x 				; copy source to zTemp1
.2351	85 31		sta $31				sta 	zTemp1
.2353	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.2355	85 32		sta $32				sta 	zTemp1+1
.2357	b2 31		lda ($31)			lda 	(zTemp1) 					; length of string .. 0 inclusive
.2359	a8		tay				tay
.235a					_WSCopyLoop:
.235a	b1 31		lda ($31),y			lda 	(zTemp1),y
.235c	91 33		sta ($33),y			sta 	(zTemp2),y
.235e	88		dey				dey
.235f	c0 ff		cpy #$ff			cpy 	#$FF
.2361	d0 f7		bne $235a			bne 	_WSCopyLoop
.2363	ca		dex				dex
.2364	7a		ply				ply
.2365	60		rts				rts
.2366					CommandClose:
.2366	fa		plx				plx
.2367	20 05 18	jsr $1805			jsr 	GetInteger8Bit 				; channel to close
.236a	cd 5d 04	cmp $045d			cmp 	currentChannel 				; is it the current channel
.236d	d0 03		bne $2372			bne 	_CCNotCurrent
.236f	9c 5d 04	stz $045d			stz 	currentChannel 				; effectively disables CMD
.2372					_CCNotCurrent:
.2372	20 c3 ff	jsr $ffc3			jsr 	X16_CLOSE 					; close the file
.2375	4c 29 10	jmp $1029			jmp 	NextCommand
.2378					CommandExit:
.2378	fa		plx				plx
.2379	86 2f		stx $2f				stx 	zTemp0 						; stack position.
.237b	4c ff ff	jmp $ffff			jmp 	$FFFF 						; exits the emulator.
.237e					CommandDebug:
.237e	fa		plx				plx
>237f	db						.byte 	$DB 						; causes a break in the emulator
.2380	4c 29 10	jmp $1029			jmp 	NextCommand
.2383					XGetCharacterFromChannel:
.2383	da		phx				phx
.2384	5a		phy				phy
.2385	e0 00		cpx #$00			cpx 	#0 							; is it default
.2387	d0 05		bne $238e			bne 	_XGetChannel
.2389	20 cc ff	jsr $ffcc			jsr 	X16_CLRCHN 					; set default channel
.238c	80 08		bra $2396			bra 	_XGetChar
.238e					_XGetChannel:
.238e	20 c6 ff	jsr $ffc6			jsr 	X16_CHKIN					; CHKIN set channel
.2391	20 b7 ff	jsr $ffb7			jsr 	X16_READST 					; check okay
.2394	d0 06		bne $239c			bne 	_XGCError
.2396					_XGetChar:
.2396	20 e4 ff	jsr $ffe4			jsr 	X16_GETIN
.2399	7a		ply				ply
.239a	fa		plx				plx
.239b	60		rts				rts
.239c					_XGCError:
.239c	4c c1 27	jmp $27c1		jmp	ErrorV_channel
.239f					XGetHPos:
.239f	da		phx				phx
.23a0	5a		phy				phy
.23a1	38		sec				sec
.23a2	20 f0 ff	jsr $fff0			jsr 	X16_PLOT
.23a5	98		tya				tya
.23a6	7a		ply				ply
.23a7	fa		plx				plx
.23a8	60		rts				rts
.23a9					X16I2CPoke:
.23a9	fa		plx				plx
.23aa	5a		phy				phy
.23ab	20 05 18	jsr $1805			jsr 	GetInteger8Bit 				; value
.23ae	48		pha				pha
.23af	ca		dex				dex
.23b0	20 05 18	jsr $1805			jsr 	GetInteger8Bit 				; register
.23b3	48		pha				pha
.23b4	ca		dex				dex
.23b5	20 05 18	jsr $1805			jsr 	GetInteger8Bit 				; device
.23b8	aa		tax				tax
.23b9	7a		ply				ply
.23ba	68		pla				pla
.23bb	20 c9 fe	jsr $fec9			jsr 	X16_i2c_write_byte 			; write the byte out.
.23be	b0 06		bcs $23c6			bcs 	X16I2CError
.23c0	7a		ply				ply
.23c1	a2 ff		ldx #$ff			ldx 	#$FF
.23c3	4c 29 10	jmp $1029			jmp 	NextCommand
.23c6					X16I2CError:
.23c6	4c c1 27	jmp $27c1		jmp	ErrorV_channel
.23c9					X16I2CPeek:
.23c9	fa		plx				plx
.23ca	da		phx				phx
.23cb	5a		phy				phy
.23cc	20 05 18	jsr $1805			jsr 	GetInteger8Bit 				; register
.23cf	48		pha				pha
.23d0	ca		dex				dex
.23d1	20 05 18	jsr $1805			jsr 	GetInteger8Bit 				; device
.23d4	aa		tax				tax 								; X device
.23d5	7a		ply				ply 								; Y register
.23d6	20 c6 fe	jsr $fec6			jsr 	X16_i2c_read_byte 			; read I2C
.23d9	b0 eb		bcs $23c6			bcs 	X16I2CError
.23db	7a		ply				ply 								; restore Y/X
.23dc	fa		plx				plx
.23dd	ca		dex				dex 								; drop TOS (register)
.23de	20 0a 2e	jsr $2e0a			jsr 	FloatSetByte 				; write read value to TOS.
.23e1	4c 29 10	jmp $1029			jmp 	NextCommand
.23e4					CommandOpen:
.23e4	fa		plx				plx
.23e5	a5 44		lda $44				lda 	NSMantissa0+3  				; point zTemp0 to string head, also in XY
.23e7	85 2f		sta $2f				sta 	zTemp0
.23e9	aa		tax				tax
.23ea	a5 50		lda $50				lda 	NSMantissa1+3
.23ec	85 30		sta $30				sta 	zTemp0+1
.23ee	a8		tay				tay
.23ef	e8		inx				inx 								; XY points to first character
.23f0	d0 01		bne $23f3			bne 	_CONoCarry
.23f2	c8		iny				iny
.23f3					_CONoCarry:
.23f3	b2 2f		lda ($2f)			lda 	(zTemp0) 					; get length of filename
.23f5	20 bd ff	jsr $ffbd			jsr 	X16_SETNAM
.23f8	a5 41		lda $41				lda 	NSMantissa0+0
.23fa	a6 42		ldx $42				ldx 	NSMantissa0+1
.23fc	a4 43		ldy $43				ldy 	NSMantissa0+2
.23fe	20 ba ff	jsr $ffba			jsr 	X16_SETLFS
.2401	20 c0 ff	jsr $ffc0			jsr 	X16_OPEN
.2404	b0 03		bcs $2409			bcs 	_COError
.2406	4c 29 10	jmp $1029			jmp 	NextCommand
.2409					_COError:
.2409	4c c1 27	jmp $27c1		jmp	ErrorV_channel
.240c					XPokeMemory:
.240c	86 2f		stx $2f				stx 	zTemp0
.240e	84 30		sty $30				sty 	zTemp0+1
.2410	a4 00		ldy $00				ldy 	SelectRAMBank 				; old RAM bank in Y
.2412	ae 6b 05	ldx $056b			ldx 	ramBank 					; switch to BANKed RAMBank if not $FF
.2415	e0 ff		cpx #$ff			cpx 	#$FF
.2417	f0 02		beq $241b			beq 	_XPMNoSwitch
.2419	86 00		stx $00				stx 	SelectRAMBank
.241b					_XPMNoSwitch:
.241b	92 2f		sta ($2f)			sta 	(zTemp0) 					; do the POKE
.241d	84 00		sty $00				sty 	SelectRAMBank 				; reselect previous RAM Bank.
.241f					_XPMExit:
.241f	60		rts				rts
.2420					XPeekMemory:
.2420	86 2f		stx $2f				stx 	zTemp0
.2422	84 30		sty $30				sty 	zTemp0+1
.2424	a4 00		ldy $00				ldy 	SelectRAMBank 				; old RAM bank in Y
.2426	ae 6b 05	ldx $056b			ldx 	ramBank 					; switch to BANKed RAMBank if not $FF
.2429	e0 ff		cpx #$ff			cpx 	#$FF
.242b	f0 02		beq $242f			beq 	_XPMNoSwitch
.242d	86 00		stx $00				stx 	SelectRAMBank
.242f					_XPMNoSwitch:
.242f	b2 2f		lda ($2f)			lda 	(zTemp0) 					; do the PEEK
.2431	84 00		sty $00				sty 	SelectRAMBank 				; reselect previous RAM bank.
.2433	60		rts				rts
.2434					CommandBank:
.2434	fa		plx				plx
.2435	a5 41		lda $41				lda 	NSMantissa0 				; RAM bank
.2437	8d 6b 05	sta $056b			sta 	ramBank 					; store & make current
.243a	85 00		sta $00				sta 	SelectRAMBank
.243c	a5 42		lda $42				lda 	NSMantissa0+1 		 		; ROM specified
.243e	c9 ff		cmp #$ff			cmp 	#$FF
.2440	f0 03		beq $2445			beq 	_CBNoUpdate
.2442	8d 6c 05	sta $056c			sta 	romBank 					; this doesn't set the hardware page.
.2445					_CBNoUpdate:
.2445	a2 ff		ldx #$ff			ldx 	#$FF
.2447	4c 29 10	jmp $1029			jmp 	NextCommand
.056b					ramBank:
>056b							.fill 	1
.056c					romBank:
>056c							.fill 	1
.244a					XPrintCharacterToChannel:
.244a	48		pha				pha
.244b	da		phx				phx
.244c	5a		phy				phy
.244d	48		pha				pha  								; save char
.244e	e0 00		cpx #$00			cpx 	#0 							; check default (0)
.2450	d0 05		bne $2457			bne 	_XPCNotDefault
.2452	20 cc ff	jsr $ffcc			jsr 	X16_CLRCHN					; set default channel
.2455	80 08		bra $245f			bra 	_XPCSend
.2457					_XPCNotDefault:
.2457	20 c9 ff	jsr $ffc9			jsr 	X16_CHKOUT 					; CHKOUT set channel
.245a	20 b7 ff	jsr $ffb7			jsr 	X16_READST 					; check okay
.245d	d0 08		bne $2467			bne 	_XPCError
.245f					_XPCSend:
.245f	68		pla				pla 								; restore character
.2460	20 d2 ff	jsr $ffd2			jsr 	X16_BSOUT 					; print
.2463	7a		ply				ply
.2464	fa		plx				plx
.2465	68		pla				pla
.2466	60		rts				rts
.2467					_XPCError:
.2467	4c c1 27	jmp $27c1		jmp	ErrorV_channel
.246a					XReadClock:
.246a	20 de ff	jsr $ffde			jsr 	X16_RDTIM
.246d	60		rts				rts
.246e					XWriteClock:
.246e	48		pha				pha
.246f	da		phx				phx
.2470	5a		phy				phy
.2471	20 db ff	jsr $ffdb			jsr 	X16_SETTIM
.2474	7a		ply				ply
.2475	fa		plx				plx
.2476	68		pla				pla
.2477	60		rts				rts
.2478					CommandScreen:
.2478	fa		plx				plx
.2479	da		phx				phx
.247a	5a		phy				phy
.247b	20 05 18	jsr $1805			jsr 	GetInteger8Bit
.247e	18		clc				clc
.247f	20 5f ff	jsr $ff5f			jsr 	X16_screen_mode
.2482	7a		ply				ply
.2483	fa		plx				plx
.2484	4c 29 10	jmp $1029			jmp 	NextCommand
.2487					XCommandSleep:
.2487	fa		plx				plx
.2488	5a		phy				phy
.2489	20 43 2a	jsr $2a43			jsr 	FloatIntegerPart
.248c	ca		dex				dex
.248d	20 6a 24	jsr $246a			jsr 	XReadClock 					; read clock to YXA
.2490	18		clc				clc 								; calculate end time in zTemp0
.2491	65 41		adc $41				adc 	NSMantissa0
.2493	85 2f		sta $2f				sta 	zTemp0
.2495	8a		txa				txa
.2496	65 4d		adc $4d				adc 	NSMantissa1
.2498	85 30		sta $30				sta 	zTemp0+1
.249a					_XCWait:
.249a	20 6a 24	jsr $246a			jsr 	XReadClock 					; and wait for it.
.249d	c5 2f		cmp $2f				cmp 	zTemp0
.249f	d0 f9		bne $249a			bne 	_XCWait
.24a1	e4 30		cpx $30				cpx 	zTemp0+1
.24a3	d0 f5		bne $249a			bne 	_XCWait
.24a5	a2 ff		ldx #$ff			ldx 	#$FF
.24a7	7a		ply				ply
.24a8	4c 29 10	jmp $1029			jmp 	NextCommand
.24ab					X16_Audio_FMINIT:
.24ab	fa		plx				plx
.24ac	5a		phy			phy
.24ad	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>24b0	63 c0					.word	X16A_ym_init
>24b2	0a					.byte	X16_AudioCodeBank
.24b3	a2 ff		ldx #$ff		ldx	#$FF
.24b5	7a		ply			ply
.24b6	4c 29 10	jmp $1029			jmp 	NextCommand
.24b9					X16_Audio_FMNOTE:
.24b9	fa		plx				plx
.24ba	5a		phy			phy
.24bb	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_8
.24be	18		clc			clc
.24bf	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>24c2	03 c0					.word	X16A_bas_fmnote
>24c4	0a					.byte	X16_AudioCodeBank
.24c5	a2 ff		ldx #$ff		ldx	#$FF
.24c7	7a		ply			ply
.24c8	4c 29 10	jmp $1029			jmp 	NextCommand
.24cb					X16_Audio_FMDRUM:
.24cb	fa		plx				plx
.24cc	5a		phy			phy
.24cd	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_8
.24d0	18		clc			clc
.24d1	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>24d4	6f c0					.word	X16A_ym_playdrum
>24d6	0a					.byte	X16_AudioCodeBank
.24d7	a2 ff		ldx #$ff		ldx	#$FF
.24d9	7a		ply			ply
.24da	4c 29 10	jmp $1029			jmp 	NextCommand
.24dd					X16_Audio_FMINST:
.24dd	fa		plx				plx
.24de	5a		phy			phy
.24df	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_8
.24e2	38		sec			sec
.24e3	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>24e6	69 c0					.word	X16A_ym_loadpatch
>24e8	0a					.byte	X16_AudioCodeBank
.24e9	a2 ff		ldx #$ff		ldx	#$FF
.24eb	7a		ply			ply
.24ec	4c 29 10	jmp $1029			jmp 	NextCommand
.24ef					X16_Audio_FMVIB:
.24ef	fa		plx				plx
.24f0	5a		phy			phy
.24f1	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_8
.24f4	18		clc			clc
.24f5	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>24f8	09 c0					.word	X16A_bas_fmvib
>24fa	0a					.byte	X16_AudioCodeBank
.24fb	a2 ff		ldx #$ff		ldx	#$FF
.24fd	7a		ply			ply
.24fe	4c 29 10	jmp $1029			jmp 	NextCommand
.2501					X16_Audio_FMFREQ:
.2501	fa		plx				plx
.2502	5a		phy			phy
.2503	20 ca 11	jsr $11ca		jsr		X16_Audio_Parameters8_16
.2506	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>2509	00 c0					.word	X16A_bas_fmfreq
>250b	0a					.byte	X16_AudioCodeBank
.250c	a2 ff		ldx #$ff		ldx	#$FF
.250e	7a		ply			ply
.250f	4c 29 10	jmp $1029			jmp 	NextCommand
.2512					X16_Audio_FMVOL:
.2512	fa		plx				plx
.2513	5a		phy			phy
.2514	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_8
.2517	18		clc			clc
.2518	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>251b	75 c0					.word	X16A_ym_setatten
>251d	0a					.byte	X16_AudioCodeBank
.251e	a2 ff		ldx #$ff		ldx	#$FF
.2520	7a		ply			ply
.2521	4c 29 10	jmp $1029			jmp 	NextCommand
.2524					X16_Audio_FMPAN:
.2524	fa		plx				plx
.2525	5a		phy			phy
.2526	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_8
.2529	18		clc			clc
.252a	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>252d	7e c0					.word	X16A_ym_setpan
>252f	0a					.byte	X16_AudioCodeBank
.2530	a2 ff		ldx #$ff		ldx	#$FF
.2532	7a		ply			ply
.2533	4c 29 10	jmp $1029			jmp 	NextCommand
.2536					X16_Audio_FMPLAY:
.2536	fa		plx				plx
.2537	5a		phy			phy
.2538	20 e1 11	jsr $11e1		jsr		X16_Audio_Parameters8_String
.253b	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>253e	06 c0					.word	X16A_bas_fmplaystring
>2540	0a					.byte	X16_AudioCodeBank
.2541	a2 ff		ldx #$ff		ldx	#$FF
.2543	7a		ply			ply
.2544	4c 29 10	jmp $1029			jmp 	NextCommand
.2547					X16_Audio_FMCHORD:
.2547	fa		plx				plx
.2548	5a		phy			phy
.2549	20 e1 11	jsr $11e1		jsr		X16_Audio_Parameters8_String
.254c	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>254f	8d c0					.word	X16A_bas_fmchordstring
>2551	0a					.byte	X16_AudioCodeBank
.2552	a2 ff		ldx #$ff		ldx	#$FF
.2554	7a		ply			ply
.2555	4c 29 10	jmp $1029			jmp 	NextCommand
.2558					X16_Audio_FMPOKE:
.2558	fa		plx				plx
.2559	5a		phy			phy
.255a	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_8
.255d	18		clc			clc
.255e	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>2561	8a c0					.word	X16A_ym_write
>2563	0a					.byte	X16_AudioCodeBank
.2564	a2 ff		ldx #$ff		ldx	#$FF
.2566	7a		ply			ply
.2567	4c 29 10	jmp $1029			jmp 	NextCommand
.256a					X16_Audio_PSGINIT:
.256a	fa		plx				plx
.256b	5a		phy			phy
.256c	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>256f	4b c0					.word	X16A_psg_init
>2571	0a					.byte	X16_AudioCodeBank
.2572	a2 ff		ldx #$ff		ldx	#$FF
.2574	7a		ply			ply
.2575	4c 29 10	jmp $1029			jmp 	NextCommand
.2578					X16_Audio_PSGNOTE:
.2578	fa		plx				plx
.2579	5a		phy			phy
.257a	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_8
.257d	18		clc			clc
.257e	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>2581	12 c0					.word	X16A_bas_psgnote
>2583	0a					.byte	X16_AudioCodeBank
.2584	a2 ff		ldx #$ff		ldx	#$FF
.2586	7a		ply			ply
.2587	4c 29 10	jmp $1029			jmp 	NextCommand
.258a					X16_Audio_PSGVOL:
.258a	fa		plx				plx
.258b	5a		phy			phy
.258c	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_8
.258f	18		clc			clc
.2590	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>2593	54 c0					.word	X16A_psg_setatten
>2595	0a					.byte	X16_AudioCodeBank
.2596	a2 ff		ldx #$ff		ldx	#$FF
.2598	7a		ply			ply
.2599	4c 29 10	jmp $1029			jmp 	NextCommand
.259c					X16_Audio_PSGWAV:
.259c	fa		plx				plx
.259d	5a		phy			phy
.259e	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_8
.25a1	18		clc			clc
.25a2	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>25a5	15 c0					.word	X16A_bas_psgwav
>25a7	0a					.byte	X16_AudioCodeBank
.25a8	a2 ff		ldx #$ff		ldx	#$FF
.25aa	7a		ply			ply
.25ab	4c 29 10	jmp $1029			jmp 	NextCommand
.25ae					X16_Audio_PSGFREQ:
.25ae	fa		plx				plx
.25af	5a		phy			phy
.25b0	20 ca 11	jsr $11ca		jsr		X16_Audio_Parameters8_16
.25b3	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>25b6	0f c0					.word	X16A_bas_psgfreq
>25b8	0a					.byte	X16_AudioCodeBank
.25b9	a2 ff		ldx #$ff		ldx	#$FF
.25bb	7a		ply			ply
.25bc	4c 29 10	jmp $1029			jmp 	NextCommand
.25bf					X16_Audio_PSGPAN:
.25bf	fa		plx				plx
.25c0	5a		phy			phy
.25c1	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_8
.25c4	18		clc			clc
.25c5	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>25c8	5a c0					.word	X16A_psg_setpan
>25ca	0a					.byte	X16_AudioCodeBank
.25cb	a2 ff		ldx #$ff		ldx	#$FF
.25cd	7a		ply			ply
.25ce	4c 29 10	jmp $1029			jmp 	NextCommand
.25d1					X16_Audio_PSGPLAY:
.25d1	fa		plx				plx
.25d2	5a		phy			phy
.25d3	20 e1 11	jsr $11e1		jsr		X16_Audio_Parameters8_String
.25d6	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>25d9	18 c0					.word	X16A_bas_psgplaystring
>25db	0a					.byte	X16_AudioCodeBank
.25dc	a2 ff		ldx #$ff		ldx	#$FF
.25de	7a		ply			ply
.25df	4c 29 10	jmp $1029			jmp 	NextCommand
.25e2					X16_Audio_PSGCHORD:
.25e2	fa		plx				plx
.25e3	5a		phy			phy
.25e4	20 e1 11	jsr $11e1		jsr		X16_Audio_Parameters8_String
.25e7	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>25ea	90 c0					.word	X16A_bas_psgchordstring
>25ec	0a					.byte	X16_AudioCodeBank
.25ed	a2 ff		ldx #$ff		ldx	#$FF
.25ef	7a		ply			ply
.25f0	4c 29 10	jmp $1029			jmp 	NextCommand
.25f3					CommandCls:
.25f3	fa		plx				plx
.25f4	a9 93		lda #$93			lda 	#147
.25f6	20 4a 24	jsr $244a			jsr 	XPrintCharacterToChannel
.25f9	4c 29 10	jmp $1029			jmp 	NextCommand
.25fc					CommandLocate:
.25fc	fa		plx				plx
.25fd	20 43 2a	jsr $2a43			jsr 	FloatIntegerPart
.2600	ca		dex				dex
.2601	20 43 2a	jsr $2a43			jsr 	FloatIntegerPart
.2604	ca		dex				dex
.2605	a9 13		lda #$13			lda 	#$13 						; home.
.2607	20 4a 24	jsr $244a			jsr 	XPrintCharacterToChannel
.260a	a9 1d		lda #$1d			lda 	#$1D 						; do cursor rights
.260c	a6 41		ldx $41				ldx 	NSMantissa0
.260e	20 1b 26	jsr $261b			jsr 	_CLOutputXA
.2611	a9 11		lda #$11			lda 	#$11 						; do cursor downs.
.2613	a6 42		ldx $42				ldx 	NSMantissa0+1
.2615	20 1b 26	jsr $261b			jsr 	_CLOutputXA
.2618	4c 29 10	jmp $1029			jmp 	NextCommand
.261b					_CLOutputXA:
.261b	ca		dex				dex
.261c	f0 07		beq $2625			beq 	_CLOExit
.261e	30 05		bmi $2625			bmi 	_CLOExit
.2620	20 4a 24	jsr $244a			jsr 	XPrintCharacterToChannel
.2623	80 f6		bra $261b			bra 	_CLOutputXA
.2625					_CLOExit:
.2625	60		rts				rts
.2626					CommandColor:
.2626	fa		plx				plx
.2627	20 43 2a	jsr $2a43			jsr 	FloatIntegerPart
.262a	ca		dex				dex
.262b	20 43 2a	jsr $2a43			jsr 	FloatIntegerPart
.262e	ca		dex				dex
.262f	a5 42		lda $42				lda 	NSMantissa0+1 				; bgr specified
.2631	c9 ff		cmp #$ff			cmp 	#$FF
.2633	f0 08		beq $263d			beq 	_CCNoBGR 					; if so, change background
.2635	20 45 26	jsr $2645			jsr 	_CCSetColour
.2638	a9 01		lda #$01			lda 	#$01 						; swap FGR/BGR
.263a	20 4a 24	jsr $244a			jsr 	XPrintCharacterToChannel
.263d					_CCNoBGR:
.263d	a5 41		lda $41				lda 	NSMantissa0
.263f	20 45 26	jsr $2645			jsr 	_CCSetColour
.2642	4c 29 10	jmp $1029			jmp 	NextCommand
.2645					_CCSetColour:
.2645	29 0f		and #$0f			and 	#15 						; look up in control codes table.
.2647	aa		tax				tax
.2648	bd 4f 26	lda $264f,x			lda 	_CCCommandTable,x
.264b	20 4a 24	jsr $244a			jsr 	XPrintCharacterToChannel
.264e	60		rts				rts
.264f					_CCCommandTable:
>264f	90 05 1c 9f 9c 1e 1f 9e				.byte	 $90,$05,$1c,$9f,$9c,$1e,$1f,$9e
>2657	81 95 96 97 98 99 9a 9b				.byte	 $81,$95,$96,$97,$98,$99,$9a,$9b
.265f					CommandVPOKE:
.265f	fa		plx				plx
.2660	20 05 18	jsr $1805			jsr 	GetInteger8Bit 				; poke value
.2663	48		pha				pha
.2664	ca		dex				dex
.2665	20 43 2a	jsr $2a43			jsr 	FloatIntegerPart
.2668	b5 41		lda $41,x			lda 	NSMantissa0,x
.266a	8d 20 9f	sta $9f20			sta 	VRAMLow0
.266d	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.266f	8d 21 9f	sta $9f21			sta 	VRAMMed0
.2672	ca		dex				dex
.2673	20 43 2a	jsr $2a43			jsr 	FloatIntegerPart
.2676	20 05 18	jsr $1805			jsr 	GetInteger8Bit
.2679	8d 22 9f	sta $9f22			sta 	VRAMHigh0
.267c	ca		dex				dex
.267d	68		pla				pla 								; poke value back
.267e	8d 23 9f	sta $9f23			sta 	VRAMData0					; and write it out.
.2681	4c 29 10	jmp $1029			jmp 	NextCommand
.2684					CommandVPEEK:
.2684	fa		plx				plx
.2685	20 43 2a	jsr $2a43			jsr 	FloatIntegerPart
.2688	b5 41		lda $41,x			lda 	NSMantissa0,x
.268a	8d 20 9f	sta $9f20			sta 	VRAMLow0
.268d	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.268f	8d 21 9f	sta $9f21			sta 	VRAMMed0
.2692	ca		dex				dex
.2693	20 43 2a	jsr $2a43			jsr 	FloatIntegerPart
.2696	20 05 18	jsr $1805			jsr 	GetInteger8Bit
.2699	8d 22 9f	sta $9f22			sta 	VRAMHigh0
.269c	ad 23 9f	lda $9f23			lda 	VRAMData0					; read data
.269f	20 0a 2e	jsr $2e0a			jsr 	FloatSetByte 				; return as byte
.26a2	4c 29 10	jmp $1029			jmp 	NextCommand

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/common.library

=$80					C64_END                  = $80 ; $80 end
=$81					C64_FOR                  = $81 ; $81 for
=$82					C64_NEXT                 = $82 ; $82 next
=$83					C64_DATA                 = $83 ; $83 data
=$84					C64_INPUTHASH            = $84 ; $84 input#
=$85					C64_INPUT                = $85 ; $85 input
=$86					C64_DIM                  = $86 ; $86 dim
=$87					C64_READ                 = $87 ; $87 read
=$88					C64_LET                  = $88 ; $88 let
=$89					C64_GOTO                 = $89 ; $89 goto
=$8a					C64_RUN                  = $8a ; $8a run
=$8b					C64_IF                   = $8b ; $8b if
=$8c					C64_RESTORE              = $8c ; $8c restore
=$8d					C64_GOSUB                = $8d ; $8d gosub
=$8e					C64_RETURN               = $8e ; $8e return
=$8f					C64_REM                  = $8f ; $8f rem
=$90					C64_STOP                 = $90 ; $90 stop
=$91					C64_ON                   = $91 ; $91 on
=$92					C64_WAIT                 = $92 ; $92 wait
=$93					C64_LOAD                 = $93 ; $93 load
=$94					C64_SAVE                 = $94 ; $94 save
=$95					C64_VERIFY               = $95 ; $95 verify
=$96					C64_DEF                  = $96 ; $96 def
=$97					C64_POKE                 = $97 ; $97 poke
=$98					C64_PRINTHASH            = $98 ; $98 print#
=$99					C64_PRINT                = $99 ; $99 print
=$9a					C64_CONT                 = $9a ; $9a cont
=$9b					C64_LIST                 = $9b ; $9b list
=$9c					C64_CLR                  = $9c ; $9c clr
=$9d					C64_CMD                  = $9d ; $9d cmd
=$9e					C64_SYS                  = $9e ; $9e sys
=$9f					C64_OPEN                 = $9f ; $9f open
=$a0					C64_CLOSE                = $a0 ; $a0 close
=$a1					C64_GET                  = $a1 ; $a1 get
=$a2					C64_NEW                  = $a2 ; $a2 new
=$a3					C64_TABLB                = $a3 ; $a3 tab(
=$a4					C64_TO                   = $a4 ; $a4 to
=$a5					C64_FN                   = $a5 ; $a5 fn
=$a6					C64_SPCLB                = $a6 ; $a6 spc(
=$a7					C64_THEN                 = $a7 ; $a7 then
=$a8					C64_NOT                  = $a8 ; $a8 not
=$a9					C64_STEP                 = $a9 ; $a9 step
=$aa					C64_PLUS                 = $aa ; $aa +
=$ab					C64_MINUS                = $ab ; $ab -
=$ac					C64_TIMES                = $ac ; $ac *
=$ad					C64_DIVIDE               = $ad ; $ad /
=$ae					C64_POWER                = $ae ; $ae ^
=$af					C64_AND                  = $af ; $af and
=$b0					C64_OR                   = $b0 ; $b0 or
=$b1					C64_GREATER              = $b1 ; $b1 >
=$b2					C64_EQUAL                = $b2 ; $b2 =
=$b3					C64_LESS                 = $b3 ; $b3 <
=$b4					C64_SGN                  = $b4 ; $b4 sgn
=$b5					C64_INT                  = $b5 ; $b5 int
=$b6					C64_ABS                  = $b6 ; $b6 abs
=$b7					C64_USR                  = $b7 ; $b7 usr
=$b8					C64_FRE                  = $b8 ; $b8 fre
=$b9					C64_POS                  = $b9 ; $b9 pos
=$ba					C64_SQR                  = $ba ; $ba sqr
=$bb					C64_RND                  = $bb ; $bb rnd
=$bc					C64_LOG                  = $bc ; $bc log
=$bd					C64_EXP                  = $bd ; $bd exp
=$be					C64_COS                  = $be ; $be cos
=$bf					C64_SIN                  = $bf ; $bf sin
=$c0					C64_TAN                  = $c0 ; $c0 tan
=$c1					C64_ATN                  = $c1 ; $c1 atn
=$c2					C64_PEEK                 = $c2 ; $c2 peek
=$c3					C64_LEN                  = $c3 ; $c3 len
=$c4					C64_STRDOLLAR            = $c4 ; $c4 str$
=$c5					C64_VAL                  = $c5 ; $c5 val
=$c6					C64_ASC                  = $c6 ; $c6 asc
=$c7					C64_CHRDOLLAR            = $c7 ; $c7 chr$
=$c8					C64_LEFTDOLLAR           = $c8 ; $c8 left$
=$c9					C64_RIGHTDOLLAR          = $c9 ; $c9 right$
=$ca					C64_MIDDOLLAR            = $ca ; $ca mid$
=$cb					C64_GO                   = $cb ; $cb go
=$ce80					C64_MON                  = $ce80 ; $ce80 mon
=$ce81					C64_DOS                  = $ce81 ; $ce81 dos
=$ce82					C64_OLD                  = $ce82 ; $ce82 old
=$ce83					C64_GEOS                 = $ce83 ; $ce83 geos
=$ce84					C64_VPOKE                = $ce84 ; $ce84 vpoke
=$ce85					C64_VLOAD                = $ce85 ; $ce85 vload
=$ce86					C64_SCREEN               = $ce86 ; $ce86 screen
=$ce87					C64_PSET                 = $ce87 ; $ce87 pset
=$ce88					C64_LINE                 = $ce88 ; $ce88 line
=$ce89					C64_FRAME                = $ce89 ; $ce89 frame
=$ce8a					C64_RECT                 = $ce8a ; $ce8a rect
=$ce8b					C64_CHAR                 = $ce8b ; $ce8b char
=$ce8c					C64_MOUSE                = $ce8c ; $ce8c mouse
=$ce8d					C64_COLOR                = $ce8d ; $ce8d color
=$ce8e					C64_TEST                 = $ce8e ; $ce8e test
=$ce8f					C64_RESET                = $ce8f ; $ce8f reset
=$ce90					C64_CLS                  = $ce90 ; $ce90 cls
=$ce91					C64_CODEX                = $ce91 ; $ce91 codex
=$ce92					C64_LOCATE               = $ce92 ; $ce92 locate
=$ce93					C64_BOOT                 = $ce93 ; $ce93 boot
=$ce94					C64_KEYMAP               = $ce94 ; $ce94 keymap
=$ce95					C64_BLOAD                = $ce95 ; $ce95 bload
=$ce96					C64_BVLOAD               = $ce96 ; $ce96 bvload
=$ce97					C64_BVERIFY              = $ce97 ; $ce97 bverify
=$ce98					C64_BANK                 = $ce98 ; $ce98 bank
=$ce99					C64_FMINIT               = $ce99 ; $ce99 fminit
=$ce9a					C64_FMNOTE               = $ce9a ; $ce9a fmnote
=$ce9b					C64_FMDRUM               = $ce9b ; $ce9b fmdrum
=$ce9c					C64_FMINST               = $ce9c ; $ce9c fminst
=$ce9d					C64_FMVIB                = $ce9d ; $ce9d fmvib
=$ce9e					C64_FMFREQ               = $ce9e ; $ce9e fmfreq
=$ce9f					C64_FMVOL                = $ce9f ; $ce9f fmvol
=$cea0					C64_FMPAN                = $cea0 ; $cea0 fmpan
=$cea1					C64_FMPLAY               = $cea1 ; $cea1 fmplay
=$cea2					C64_FMCHORD              = $cea2 ; $cea2 fmchord
=$cea3					C64_FMPOKE               = $cea3 ; $cea3 fmpoke
=$cea4					C64_PSGINIT              = $cea4 ; $cea4 psginit
=$cea5					C64_PSGNOTE              = $cea5 ; $cea5 psgnote
=$cea6					C64_PSGVOL               = $cea6 ; $cea6 psgvol
=$cea7					C64_PSGWAV               = $cea7 ; $cea7 psgwav
=$cea8					C64_PSGFREQ              = $cea8 ; $cea8 psgfreq
=$cea9					C64_PSGPAN               = $cea9 ; $cea9 psgpan
=$ceaa					C64_PSGPLAY              = $ceaa ; $ceaa psgplay
=$ceab					C64_PSGCHORD             = $ceab ; $ceab psgchord
=$ceac					C64_REBOOT               = $ceac ; $ceac reboot
=$cead					C64_POWEROFF             = $cead ; $cead poweroff
=$ceae					C64_I2CPOKE              = $ceae ; $ceae i2cpoke
=$ceaf					C64_SLEEP                = $ceaf ; $ceaf sleep
=$ceb0					C64_BSAVE                = $ceb0 ; $ceb0 bsave
=$ceb1					C64_MENU                 = $ceb1 ; $ceb1 menu
=$ceb2					C64_REN                  = $ceb2 ; $ceb2 ren
=$ceb3					C64_LINPUT               = $ceb3 ; $ceb3 linput
=$ceb4					C64_LINPUTHASH           = $ceb4 ; $ceb4 linput#
=$ceb5					C64_BINPUTHASH           = $ceb5 ; $ceb5 binput#
=$ceb6					C64_HELP                 = $ceb6 ; $ceb6 help
=$ced0					C64_VPEEK                = $ced0 ; $ced0 vpeek
=$ced1					C64_MX                   = $ced1 ; $ced1 mx
=$ced2					C64_MY                   = $ced2 ; $ced2 my
=$ced3					C64_MB                   = $ced3 ; $ced3 mb
=$ced4					C64_JOY                  = $ced4 ; $ced4 joy
=$ced5					C64_HEXDOLLAR            = $ced5 ; $ced5 hex$
=$ced6					C64_BINDOLLAR            = $ced6 ; $ced6 bin$
=$ced7					C64_I2CPEEK              = $ced7 ; $ced7 i2cpeek
=$ced8					C64_POINTER              = $ced8 ; $ced8 pointer
=$ced9					C64_STRPTR               = $ced9 ; $ced9 strptr
=$ceda					C64_RPTDOLLAR            = $ceda ; $ceda rpt$
=$1000					CodeStart = $1000
=$22					ZeroPageMandatory = $22
=$400					MemoryStorage = $400
.0028					codePtr:
>0028							.fill 	2
.002a					codePage:
>002a							.fill 	1
.002b					objPtr:
>002b							.fill 	2 							; bytes must not change (it could expand) as the
.002d					objPage:
>002d							.fill 	1
.002e					objIncrement:
>002e							.fill 	1
.002f					zTemp0:
>002f							.fill 	2
.0031					zTemp1:
>0031							.fill 	2
.0033					zTemp2:
>0033							.fill 	2
=$80					PCD_STARTBINARY = $80
=$8d					PCD_ENDBINARY = $8d
=$8d					PCD_STARTCOMMAND = $8d
=$ca					PCD_ENDCOMMAND = $ca
=$ca					PCD_STARTSYSTEM = $ca
=$d5					PCD_ENDSYSTEM = $d5
=$80					PCD_PLUS             = $80 ; +
=$81					PCD_MINUS            = $81 ; -
=$82					PCD_TIMES            = $82 ; *
=$83					PCD_DIVIDE           = $83 ; /
=$84					PCD_POWER            = $84 ; ^
=$85					PCD_AND              = $85 ; and
=$86					PCD_OR               = $86 ; or
=$87					PCD_GREATER          = $87 ; >
=$88					PCD_EQUAL            = $88 ; =
=$89					PCD_LESS             = $89 ; <
=$8a					PCD_GREATEREQUAL     = $8a ; >=
=$8b					PCD_LESSGREATER      = $8b ; <>
=$8c					PCD_LESSEQUAL        = $8c ; <=
=$8d					PCD_ABS              = $8d ; abs
=$8e					PCD_ARRAY            = $8e ; array
=$8f					PCD_ASC              = $8f ; asc
=$90					PCD_ASSERT           = $90 ; assert
=$91					PCD_BINDOLLAR        = $91 ; bin$
=$92					PCD_PRINTCMD_CHR     = $92 ; print.chr
=$93					PCD_CHRDOLLAR        = $93 ; chr$
=$94					PCD_SCMD_CMP         = $94 ; s.cmp
=$95					PCD_FOR              = $95 ; for
=$96					PCD_FRE              = $96 ; fre
=$97					PCD_GET              = $97 ; get
=$98					PCD_RETURN           = $98 ; return
=$99					PCD_PSET             = $99 ; pset
=$9a					PCD_LINE             = $9a ; line
=$9b					PCD_RECT             = $9b ; rect
=$9c					PCD_FRAME            = $9c ; frame
=$9d					PCD_CHAR             = $9d ; char
=$9e					PCD_HEXDOLLAR        = $9e ; hex$
=$9f					PCD_INPUT            = $9f ; input
=$a0					PCD_INPUTDOLLAR      = $a0 ; input$
=$a1					PCD_INPUTCMD_START   = $a1 ; input.start
=$a2					PCD_LEN              = $a2 ; len
=$a3					PCD_FCMD_CMP         = $a3 ; f.cmp
=$a4					PCD_INTCMD_DIV       = $a4 ; int.div
=$a5					PCD_NEGATE           = $a5 ; negate
=$a6					PCD_NEWCMD_LINE      = $a6 ; new.line
=$a7					PCD_NEXT             = $a7 ; next
=$a8					PCD_NOT              = $a8 ; not
=$a9					PCD_ON               = $a9 ; on
=$aa					PCD_MOREON           = $aa ; moreon
=$ab					PCD_PEEK             = $ab ; peek
=$ac					PCD_POKE             = $ac ; poke
=$ad					PCD_POS              = $ad ; pos
=$ae					PCD_GETCHANNEL       = $ae ; getchannel
=$af					PCD_SETCHANNEL       = $af ; setchannel
=$b0					PCD_PRINTCMD_N       = $b0 ; print.n
=$b1					PCD_PRINTCMD_S       = $b1 ; print.s
=$b2					PCD_READ             = $b2 ; read
=$b3					PCD_READDOLLAR       = $b3 ; read$
=$b4					PCD_RND              = $b4 ; rnd
=$b5					PCD_CONCAT           = $b5 ; concat
=$b6					PCD_SGN              = $b6 ; sgn
=$b7					PCD_PRINTCMD_TAB     = $b7 ; print.tab
=$b8					PCD_PRINTCMD_POS     = $b8 ; print.pos
=$b9					PCD_PRINTCMD_SPC     = $b9 ; print.spc
=$ba					PCD_STRDOLLAR        = $ba ; str$
=$bb					PCD_LEFTDOLLAR       = $bb ; left$
=$bc					PCD_RIGHTDOLLAR      = $bc ; right$
=$bd					PCD_MIDDOLLAR        = $bd ; mid$
=$be					PCD_SWAP             = $be ; swap
=$bf					PCD_TI               = $bf ; ti
=$c0					PCD_TIDOLLAR         = $c0 ; ti$
=$c1					PCD_USR              = $c1 ; usr
=$c2					PCD_VAL              = $c2 ; val
=$c3					PCD_CLOSE            = $c3 ; close
=$c4					PCD_EXIT             = $c4 ; exit
=$c5					PCD_DEBUG            = $c5 ; debug
=$c6					PCD_OPEN             = $c6 ; open
=$c7					PCD_SCREEN           = $c7 ; screen
=$c8					PCD_VPOKE            = $c8 ; vpoke
=$c9					PCD_VPEEK            = $c9 ; vpeek
=$ca					PCD_CMD_SHIFT        = $ca ; .shift
=$cb					PCD_CMD_BYTE         = $cb ; .byte
=$cc					PCD_CMD_WORD         = $cc ; .word
=$cd					PCD_CMD_FLOAT        = $cd ; .float
=$ce					PCD_CMD_STRING       = $ce ; .string
=$cf					PCD_CMD_DATA         = $cf ; .data
=$d0					PCD_CMD_GOTO         = $d0 ; .goto
=$d1					PCD_CMD_GOSUB        = $d1 ; .gosub
=$d2					PCD_CMD_GOTOCMD_Z    = $d2 ; .goto.z
=$d3					PCD_CMD_GOTOCMD_NZ   = $d3 ; .goto.nz
=$d4					PCD_CMD_VARSPACE     = $d4 ; .varspace
=$ca80					PCD_CLR              = $ca80 ; clr
=$ca81					PCD_DIM              = $ca81 ; dim
=$ca82					PCD_END              = $ca82 ; end
=$ca83					PCD_JOY              = $ca83 ; joy
=$ca84					PCD_INT              = $ca84 ; int
=$ca85					PCD_SQR              = $ca85 ; sqr
=$ca86					PCD_LOG              = $ca86 ; log
=$ca87					PCD_EXP              = $ca87 ; exp
=$ca88					PCD_COS              = $ca88 ; cos
=$ca89					PCD_SIN              = $ca89 ; sin
=$ca8a					PCD_TAN              = $ca8a ; tan
=$ca8b					PCD_ATN              = $ca8b ; atn
=$ca8c					PCD_MOUSE            = $ca8c ; mouse
=$ca8d					PCD_MB               = $ca8d ; mb
=$ca8e					PCD_MX               = $ca8e ; mx
=$ca8f					PCD_MY               = $ca8f ; my
=$ca90					PCD_RESTORE          = $ca90 ; restore
=$ca91					PCD_STOP             = $ca91 ; stop
=$ca92					PCD_SYS              = $ca92 ; sys
=$ca93					PCD_TIDOLLARCMD_WRITE = $ca93 ; ti$.write
=$ca94					PCD_WAIT             = $ca94 ; wait
=$ca95					PCD_I2CPOKE          = $ca95 ; i2cpoke
=$ca96					PCD_I2CPEEK          = $ca96 ; i2cpeek
=$ca97					PCD_BANK             = $ca97 ; bank
=$ca98					PCD_SLEEP            = $ca98 ; sleep
=$ca99					PCD_FMINIT           = $ca99 ; fminit
=$ca9a					PCD_FMNOTE           = $ca9a ; fmnote
=$ca9b					PCD_FMDRUM           = $ca9b ; fmdrum
=$ca9c					PCD_FMINST           = $ca9c ; fminst
=$ca9d					PCD_FMVIB            = $ca9d ; fmvib
=$ca9e					PCD_FMFREQ           = $ca9e ; fmfreq
=$ca9f					PCD_FMVOL            = $ca9f ; fmvol
=$caa0					PCD_FMPAN            = $caa0 ; fmpan
=$caa1					PCD_FMPLAY           = $caa1 ; fmplay
=$caa2					PCD_FMCHORD          = $caa2 ; fmchord
=$caa3					PCD_FMPOKE           = $caa3 ; fmpoke
=$caa4					PCD_PSGINIT          = $caa4 ; psginit
=$caa5					PCD_PSGNOTE          = $caa5 ; psgnote
=$caa6					PCD_PSGVOL           = $caa6 ; psgvol
=$caa7					PCD_PSGWAV           = $caa7 ; psgwav
=$caa8					PCD_PSGFREQ          = $caa8 ; psgfreq
=$caa9					PCD_PSGPAN           = $caa9 ; psgpan
=$caaa					PCD_PSGPLAY          = $caaa ; psgplay
=$caab					PCD_PSGCHORD         = $caab ; psgchord
=$caac					PCD_CLS              = $caac ; cls
=$caad					PCD_LOCATE           = $caad ; locate
=$caae					PCD_COLOR            = $caae ; color
.26a5					ErrorV_range:
.26a5	20 1e 14	jsr $141e		jsr	ErrorHandler
>26a8	4f 55 54 20 4f 46 20 52			.text	"OUT OF RANGE",0
>26b0	41 4e 47 45 00
.26b5					ErrorV_value:
.26b5	20 1e 14	jsr $141e		jsr	ErrorHandler
>26b8	42 41 44 20 56 41 4c 55			.text	"BAD VALUE",0
>26c0	45 00
.26c2					ErrorV_syntax:
.26c2	20 1e 14	jsr $141e		jsr	ErrorHandler
>26c5	53 59 4e 54 41 58 20 45			.text	"SYNTAX ERROR",0
>26cd	52 52 4f 52 00
.26d2					ErrorV_type:
.26d2	20 1e 14	jsr $141e		jsr	ErrorHandler
>26d5	54 59 50 45 20 4d 49 53			.text	"TYPE MISMATCH",0
>26dd	4d 41 54 43 48 00
.26e3					ErrorV_unimplemented:
.26e3	20 1e 14	jsr $141e		jsr	ErrorHandler
>26e6	4e 4f 54 20 49 4d 50 4c			.text	"NOT IMPLEMENTED",0
>26ee	45 4d 45 4e 54 45 44 00
.26f6					ErrorV_assert:
.26f6	20 1e 14	jsr $141e		jsr	ErrorHandler
>26f9	41 53 53 45 52 54 20 46			.text	"ASSERT FAIL",0
>2701	41 49 4c 00
.2705					ErrorV_line:
.2705	20 1e 14	jsr $141e		jsr	ErrorHandler
>2708	55 4e 4b 4e 4f 57 4e 20			.text	"UNKNOWN LINE NUMBER",0
>2710	4c 49 4e 45 20 4e 55 4d 42 45 52 00
.271c					ErrorV_internal:
.271c	20 1e 14	jsr $141e		jsr	ErrorHandler
>271f	49 4e 54 45 52 4e 41 4c			.text	"INTERNAL ERROR",0
>2727	20 45 52 52 4f 52 00
.272e					ErrorV_divzero:
.272e	20 1e 14	jsr $141e		jsr	ErrorHandler
>2731	44 49 56 49 44 45 20 42			.text	"DIVIDE BY ZERO",0
>2739	59 20 5a 45 52 4f 00
.2740					ErrorV_structure:
.2740	20 1e 14	jsr $141e		jsr	ErrorHandler
>2743	53 54 52 55 43 54 55 52			.text	"STRUCTURE IMBALANCE",0
>274b	45 20 49 4d 42 41 4c 41 4e 43 45 00
.2757					ErrorV_stop:
.2757	20 1e 14	jsr $141e		jsr	ErrorHandler
>275a	50 52 4f 47 52 41 4d 20			.text	"PROGRAM STOPPED",0
>2762	53 54 4f 50 50 45 44 00
.276a					ErrorV_data:
.276a	20 1e 14	jsr $141e		jsr	ErrorHandler
>276d	4f 55 54 20 4f 46 20 44			.text	"OUT OF DATA",0
>2775	41 54 41 00
.2779					ErrorV_undeclared:
.2779	20 1e 14	jsr $141e		jsr	ErrorHandler
>277c	55 4e 4b 4e 4f 57 4e 20			.text	"UNKNOWN ARRAY",0
>2784	41 52 52 41 59 00
.278a					ErrorV_redefine:
.278a	20 1e 14	jsr $141e		jsr	ErrorHandler
>278d	41 52 52 41 59 20 52 45			.text	"ARRAY REDEFINED",0
>2795	44 45 46 49 4e 45 44 00
.279d					ErrorV_index:
.279d	20 1e 14	jsr $141e		jsr	ErrorHandler
>27a0	42 41 44 20 41 52 52 41			.text	"BAD ARRAY INDEX",0
>27a8	59 20 49 4e 44 45 58 00
.27b0					ErrorV_memory:
.27b0	20 1e 14	jsr $141e		jsr	ErrorHandler
>27b3	4f 55 54 20 4f 46 20 4d			.text	"OUT OF MEMORY",0
>27bb	45 4d 4f 52 59 00
.27c1					ErrorV_channel:
.27c1	20 1e 14	jsr $141e		jsr	ErrorHandler
>27c4	49 4e 50 55 54 2f 4f 55			.text	"INPUT/OUTPUT ERROR",0
>27cc	54 50 55 54 20 45 52 52 4f 52 00
.27d7					MoveObjectForward:
.27d7	b2 2b		lda ($2b)			lda 	(objPtr) 					; get next
.27d9	c9 ff		cmp #$ff			cmp 	#$FF
.27db	f0 36		beq $2813			beq 	_MOFEnd
.27dd	c9 40		cmp #$40			cmp 	#$40 						; 00-3F
.27df	90 24		bcc $2805			bcc 	_MOFAdvance1 				; forward 1
.27e1	a0 02		ldy #$02			ldy 	#2 							; 40-6F
.27e3	c9 70		cmp #$70			cmp 	#$70 						; forward 2
.27e5	90 20		bcc $2807			bcc 	_MOFAdvanceY
.27e7	c9 ca		cmp #$ca			cmp 	#PCD_STARTSYSTEM 			; 70 - System tokens.
.27e9	90 1a		bcc $2805			bcc 	_MOFAdvance1 				; forward 1
.27eb	a8		tay				tay 								; read the size.
.27ec	b9 51 27	lda $2751,y			lda 	MOFSizeTable-PCD_STARTSYSTEM,y
.27ef	a8		tay				tay
.27f0	c8		iny				iny 								; add 1 for the system token.
.27f1	d0 14		bne $2807			bne 	_MOFAdvanceY 				; if 0, was $FF thus a string/data skip.
.27f3	a0 01		ldy #$01			ldy 	#1 							; get length byte
.27f5	b1 2b		lda ($2b),y			lda 	(objPtr),y
.27f7	a8		tay				tay 								; into Y.
.27f8	18		clc				clc
.27f9	a5 2b		lda $2b				lda 	objPtr						; add 2 to the object pointer
.27fb	69 02		adc #$02			adc 	#2
.27fd	85 2b		sta $2b				sta 	objPtr
.27ff	90 02		bcc $2803			bcc 	_MOFNoCarry1
.2801	e6 2c		inc $2c				inc 	objPtr+1
.2803					_MOFNoCarry1:
.2803	80 02		bra $2807			bra 	_MOFAdvanceY
.2805					_MOFAdvance1:
.2805	a0 01		ldy #$01			ldy 	#1
.2807					_MOFAdvanceY:
.2807	98		tya				tya 								; add Y to objPtr
.2808	18		clc				clc
.2809	65 2b		adc $2b				adc 	objPtr
.280b	85 2b		sta $2b				sta 	objPtr
.280d	90 02		bcc $2811			bcc 	_MOFNoCarry2
.280f	e6 2c		inc $2c				inc 	objPtr+1
.2811					_MOFNoCarry2:
.2811	18		clc				clc 								; not completed.
.2812	60		rts				rts
.2813					_MOFEnd:
.2813	e6 2b		inc $2b				inc 	objPtr
.2815	d0 02		bne $2819			bne 	_MOFENoCarry
.2817	e6 2c		inc $2c				inc 	objPtr+1
.2819					_MOFENoCarry:
.2819	38		sec				sec
.281a	60		rts				rts
.281b					MOFSizeTable:
>281b	01					.byte	1         	; $ca .shift
>281c	01					.byte	1         	; $cb .byte
>281d	02					.byte	2         	; $cc .word
>281e	05					.byte	5         	; $cd .float
>281f	ff					.byte	255       	; $ce .string
>2820	ff					.byte	255       	; $cf .data
>2821	02					.byte	2         	; $d0 .goto
>2822	02					.byte	2         	; $d1 .gosub
>2823	02					.byte	2         	; $d2 .goto.z
>2824	02					.byte	2         	; $d3 .goto.nz
>2825	02					.byte	2         	; $d4 .varspace

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library

=12					MathStackSize = 12
=$40					NSSString = $40 							; string vs typemask
=$00					NSSIFloat = $00 							; ifloat vs typemask
=$20					NSSIInt16 = $20								; when set, a reference is a 16 bit reference (e.g. a%)
=$40					NSSTypeMask = $40
=$80					NSSArray = $80  							; array (in variable code)
.0035					NSStatus:
>0035							.fill 	MathStackSize
.0041					NSMantissa0:
>0041							.fill 	MathStackSize 				; (this is my integer mantissa system)
.004d					NSMantissa1:
>004d							.fill 	MathStackSize
.0059					NSMantissa2:
>0059							.fill 	MathStackSize
.0065					NSMantissa3:
>0065							.fill 	MathStackSize
.0071					NSExponent:
>0071							.fill 	MathStackSize
.056d					numberBuffer:
>056d							.fill 	34
.2826					FloatSubtract:
.2826	b5 35		lda $35,x			lda 	NSStatus,x 					; negate top of stack
.2828	49 80		eor #$80			eor 	#$80
.282a	95 35		sta $35,x			sta 	NSStatus,x					; and fall through.
.282c					FloatAdd:
.282c	ca		dex				dex
.282d	b5 71		lda $71,x			lda 	NSExponent,x 				; can use optimised.
.282f	15 72		ora $72,x			ora 	NSExponent+1,x
.2831	15 65		ora $65,x			ora 	NSMantissa3,x
.2833	15 66		ora $66,x			ora 	NSMantissa3+1,x
.2835	d0 04		bne $283b			bne 	_FAUseFloat
.2837	20 c8 2b	jsr $2bc8			jsr 	FloatInt32Add 				; use the int32 one.
.283a	60		rts				rts
.283b					_FAUseFloat:
.283b	20 5d 2b	jsr $2b5d			jsr 	FloatNormalise 				; normalise S[X]
.283e	f0 51		beq $2891			beq 	_FAReturn1
.2840	e8		inx				inx 								; normalise S[X+1]
.2841	20 5d 2b	jsr $2b5d			jsr 	FloatNormalise
.2844	ca		dex				dex
.2845	c9 00		cmp #$00			cmp 	#0
.2847	f0 60		beq $28a9			beq 	_FAExit 					; if so, just return A
.2849	b5 71		lda $71,x			lda 	NSExponent,x 				; are the exponents the same ?
.284b	d5 72		cmp $72,x			cmp 	NSExponent+1,x
.284d	f0 18		beq $2867			beq 	_FAExponentsEqual
.284f	b5 71		lda $71,x			lda 	NSExponent,x 				; work out the larger exponent
.2851	a8		tay				tay
.2852	38		sec				sec 								; do a signed comparison of the exponents.
.2853	f5 72		sbc $72,x			sbc 	NSExponent+1,x
.2855	50 02		bvc $2859			bvc 	_FANoSignedChange
.2857	49 80		eor #$80			eor 	#$80
.2859					_FANoSignedChange:
.2859	29 80		and #$80			and 	#$80
.285b	10 02		bpl $285f			bpl 	_FAHaveMax
.285d	b4 72		ldy $72,x			ldy 	NSExponent+1,x
.285f					_FAHaveMax:
.285f	20 aa 28	jsr $28aa			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.2862	e8		inx				inx
.2863	20 aa 28	jsr $28aa			jsr 	_FAShiftToExponent
.2866	ca		dex				dex
.2867					_FAExponentsEqual:
.2867	b5 35		lda $35,x			lda 	NSStatus,x 					; are the signs the same
.2869	55 36		eor $36,x			eor 	NSStatus+1,x
.286b	30 0e		bmi $287b			bmi 	_FADifferentSigns
.286d	20 94 2b	jsr $2b94			jsr 	FloatAddTopTwoStack 		; do the add of the mantissae
.2870	b5 65		lda $65,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.2872	10 35		bpl $28a9			bpl 	_FAExit 					; if no, we are done.
.2874	20 21 2e	jsr $2e21			jsr 	FloatShiftRight 				; shift A right, renormalising it.
.2877	f6 71		inc $71,x			inc 	NSExponent,x 				; bump the exponent and exit
.2879	80 2e		bra $28a9			bra 	_FAExit
.287b					_FADifferentSigns:
.287b	20 ae 2b	jsr $2bae			jsr 	FloatSubTopTwoStack 		; subtract mantissa B from A
.287e	b5 65		lda $65,x			lda 	NSMantissa3,x 				; is the result negative ?
.2880	10 06		bpl $2888			bpl 	_FACheckZero 				; if no, check for -0
.2882	20 ca 2d	jsr $2dca			jsr 	FloatNegate 					; netate result
.2885	20 d1 2d	jsr $2dd1			jsr 	FloatNegateMantissa 			; negate (2'c) the mantissa
.2888					_FACheckZero:
.2888	20 2a 2e	jsr $2e2a			jsr 	FloatIsZero	 				; check for -0
.288b	d0 1c		bne $28a9			bne 	_FAExit
.288d	74 35		stz $35,x			stz 	NSStatus,x
.288f	80 18		bra $28a9			bra 	_FAExit
.2891					_FAReturn1:
.2891	b5 42		lda $42,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.2893	95 41		sta $41,x			sta 	NSMantissa0,x
.2895	b5 4e		lda $4e,x			lda 	NSMantissa1+1,x
.2897	95 4d		sta $4d,x			sta 	NSMantissa1,x
.2899	b5 5a		lda $5a,x			lda 	NSMantissa2+1,x
.289b	95 59		sta $59,x			sta 	NSMantissa2,x
.289d	b5 66		lda $66,x			lda 	NSMantissa3+1,x
.289f	95 65		sta $65,x			sta 	NSMantissa3,x
.28a1	b5 72		lda $72,x			lda 	NSExponent+1,x
.28a3	95 71		sta $71,x			sta 	NSExponent,x
.28a5	b5 36		lda $36,x			lda 	NSStatus+1,x
.28a7	95 35		sta $35,x			sta 	NSStatus,x
.28a9					_FAExit:
.28a9	60		rts				rts
.28aa					_FAShiftToExponent:
.28aa					_FAShiftToExponent2:
.28aa	98		tya				tya 								; compare Y to exponent
.28ab	d5 71		cmp $71,x			cmp 	NSExponent,x 				; reached the exponent required ?
.28ad	f0 07		beq $28b6			beq 	_FASEExit 					; exit if so.
.28af	20 21 2e	jsr $2e21			jsr 	FloatShiftRight	 			; shift the mantissa right
.28b2	f6 71		inc $71,x			inc 	NSExponent,x 				; increment exponent
.28b4	80 f4		bra $28aa			bra 	_FAShiftToExponent2
.28b6					_FASEExit:
.28b6	60		rts				rts
.28b7					CompareEqual:
.28b7	b5 41		lda $41,x			lda 	NSMantissa0,x
.28b9	d0 09		bne $28c4			bne 	ReturnFalse
.28bb					ReturnTrue:
.28bb	a9 01		lda #$01			lda 	#1
.28bd	95 41		sta $41,x			sta 	NSMantissa0,x
.28bf	a9 80		lda #$80			lda 	#$80
.28c1	95 35		sta $35,x			sta 	NSStatus,x
.28c3	60		rts				rts
.28c4					ReturnFalse:
.28c4	74 41		stz $41,x			stz 	NSMantissa0,x
.28c6	60		rts				rts
.28c7					CompareNotEqual:
.28c7	b5 41		lda $41,x			lda 	NSMantissa0,x
.28c9	d0 f0		bne $28bb			bne 	ReturnTrue
.28cb	80 f7		bra $28c4			bra 	ReturnFalse
.28cd					CompareLess:
.28cd	b5 41		lda $41,x			lda 	NSMantissa0,x
.28cf	c9 ff		cmp #$ff			cmp 	#$FF
.28d1	f0 e8		beq $28bb			beq 	ReturnTrue
.28d3	80 ef		bra $28c4			bra 	ReturnFalse
.28d5					CompareGreater:
.28d5	b5 41		lda $41,x			lda 	NSMantissa0,x
.28d7	c9 01		cmp #$01			cmp 	#$01
.28d9	f0 e0		beq $28bb			beq 	ReturnTrue
.28db	80 e7		bra $28c4			bra 	ReturnFalse
.28dd					CompareLessEqual:
.28dd	b5 41		lda $41,x			lda 	NSMantissa0,x
.28df	c9 01		cmp #$01			cmp 	#$01
.28e1	d0 d8		bne $28bb			bne 	ReturnTrue
.28e3	80 df		bra $28c4			bra 	ReturnFalse
.28e5					CompareGreaterEqual:
.28e5	b5 41		lda $41,x			lda 	NSMantissa0,x
.28e7	c9 ff		cmp #$ff			cmp 	#$FF
.28e9	d0 d0		bne $28bb			bne 	ReturnTrue
.28eb	80 d7		bra $28c4			bra 	ReturnFalse
.28ed					FloatCompare:
.28ed	b5 71		lda $71,x			lda 	NSExponent,x 				; float comparison.
.28ef	15 70		ora $70,x			ora 	NSExponent-1,x 				; integer if both integer.
.28f1	48		pha				pha
.28f2	20 26 28	jsr $2826			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.28f5	68		pla				pla
.28f6	d0 0c		bne $2904			bne 	_FCCompareFloat
.28f8	b5 41		lda $41,x			lda 	NSMantissa0,x
.28fa	15 4d		ora $4d,x			ora 	NSMantissa1,x
.28fc	15 59		ora $59,x			ora 	NSMantissa2,x
.28fe	15 65		ora $65,x			ora 	NSMantissa3,x
.2900	f0 14		beq $2916			beq 	_FCExit 					; if zero, return zero
.2902	80 0a		bra $290e			bra 	_FCSign
.2904					_FCCompareFloat:
.2904	b5 4d		lda $4d,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.2906	29 f0		and #$f0			and 	#$F0
.2908	15 59		ora $59,x			ora 	NSMantissa2,x
.290a	15 65		ora $65,x			ora 	NSMantissa3,x
.290c	f0 08		beq $2916			beq 	_FCExit 					; zero, so approximately identical
.290e					_FCSign:
.290e	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.2910	34 35		bit $35,x			bit 	NSStatus,x
.2912	10 02		bpl $2916			bpl 	_FCExit
.2914					_FCNegative:
.2914	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.2916					_FCExit:
.2916	20 0a 2e	jsr $2e0a			jsr 	FloatSetByte 				; set the result 255,0,1
.2919	60		rts				rts
.291a					FloatScalarTable:
>291a	66 66 66 66				.dword $66666666 ; 0.1
>291e	de					.byte $de
>291f	1f 85 eb 51				.dword $51eb851f ; 0.01
>2923	db					.byte $db
>2924	4c 37 89 41				.dword $4189374c ; 0.001
>2928	d8					.byte $d8
>2929	ac 8b db 68				.dword $68db8bac ; 0.0001
>292d	d4					.byte $d4
>292e	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>2932	d1					.byte $d1
>2933	83 de 1b 43				.dword $431bde83 ; 1e-06
>2937	ce					.byte $ce
>2938	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>293c	ca					.byte $ca
>293d	89 3b e6 55				.dword $55e63b89 ; 1e-08
>2941	c7					.byte $c7
>2942	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>2946	c4					.byte $c4
>2947	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>294b	c0					.byte $c0
>294c	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>2950	bd					.byte $bd
.2951					FloatDivide:
.2951	48		pha				pha
.2952	20 5d 2b	jsr $2b5d			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.2955	ca		dex				dex
.2956	c9 00		cmp #$00			cmp 	#0
.2958	f0 1e		beq $2978			beq 	_FDZero
.295a	20 5d 2b	jsr $2b5d			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.295d	f0 16		beq $2975			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.295f	20 c0 29	jsr $29c0			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.2962	20 8d 29	jsr $298d			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.2965	20 5d 2b	jsr $2b5d			jsr		FloatNormalise 				; renormalise
.2968	20 53 2b	jsr $2b53			jsr 	FloatCalculateSign 			; calculate result sign
.296b	b5 71		lda $71,x			lda 	NSExponent,x 				; calculate exponent
.296d	38		sec				sec
.296e	f5 72		sbc $72,x			sbc 	NSExponent+1,x
.2970	38		sec				sec
.2971	e9 1e		sbc #$1e			sbc 	#30
.2973	95 71		sta $71,x			sta 	NSExponent,x
.2975					_FDExit:
.2975	68		pla				pla
.2976	18		clc				clc
.2977	60		rts				rts
.2978					_FDZero:
.2978	68		pla				pla
.2979	38		sec				sec
.297a	60		rts				rts
.297b					DivideInt32:
.297b	20 43 2a	jsr $2a43			jsr 	FloatIntegerPart 			; make both integers
.297e	ca		dex				dex
.297f	20 43 2a	jsr $2a43			jsr 	FloatIntegerPart
.2982	20 9e 29	jsr $299e			jsr 	Int32Divide 				; divide
.2985	20 8d 29	jsr $298d			jsr 	NSMCopyPlusTwoToZero 		; copy result
.2988	20 53 2b	jsr $2b53			jsr 	FloatCalculateSign 			; calculate result sign
.298b	18		clc				clc
.298c	60		rts				rts
.298d					NSMCopyPlusTwoToZero:
.298d	b5 43		lda $43,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.298f	95 41		sta $41,x			sta 	NSMantissa0,x
.2991	b5 4f		lda $4f,x			lda 	NSMantissa1+2,x
.2993	95 4d		sta $4d,x			sta 	NSMantissa1,x
.2995	b5 5b		lda $5b,x			lda 	NSMantissa2+2,x
.2997	95 59		sta $59,x			sta 	NSMantissa2,x
.2999	b5 67		lda $67,x			lda 	NSMantissa3+2,x
.299b	95 65		sta $65,x			sta 	NSMantissa3,x
.299d	60		rts				rts
.299e					Int32Divide:
.299e	48		pha				pha 								; save AXY
.299f	5a		phy				phy
.29a0	20 eb 2d	jsr $2deb			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.29a3	20 04 2e	jsr $2e04			jsr 	FloatSetZeroMantissaOnly 	; set S[X] to zero
.29a6	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.29a8					_I32DivideLoop:
.29a8	e8		inx				inx
.29a9	e8		inx				inx
.29aa	20 17 2e	jsr $2e17			jsr 	FloatShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.29ad	ca		dex				dex
.29ae	ca		dex				dex
.29af	20 18 2e	jsr $2e18			jsr 	FloatRotateLeft
.29b2	20 de 29	jsr $29de			jsr 	FloatDivideCheck 			; check if subtract possible
.29b5	90 02		bcc $29b9			bcc 	_I32DivideNoCarryIn
.29b7	f6 43		inc $43,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.29b9					_I32DivideNoCarryIn:
.29b9	88		dey				dey 								; loop round till division completed.
.29ba	d0 ec		bne $29a8			bne 	_I32DivideLoop
.29bc	7a		ply				ply 								; restore AXY and exit
.29bd	68		pla				pla
.29be	18		clc				clc
.29bf	60		rts				rts
.29c0					Int32ShiftDivide:
.29c0	48		pha				pha 								; save AY
.29c1	5a		phy				phy
.29c2	e8		inx				inx 								; clear S[X+2]
.29c3	e8		inx				inx
.29c4	20 08 2e	jsr $2e08			jsr 	FloatSetZero
.29c7	ca		dex				dex
.29c8	ca		dex				dex
.29c9	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.29cb					_I32SDLoop:
.29cb	20 de 29	jsr $29de			jsr 	FloatDivideCheck 			; check if subtract possible
.29ce	e8		inx				inx
.29cf	e8		inx				inx
.29d0	20 18 2e	jsr $2e18			jsr 	FloatRotateLeft				; shift 64 bit FPA left, rotating carry in
.29d3	ca		dex				dex
.29d4	ca		dex				dex
.29d5	20 18 2e	jsr $2e18			jsr 	FloatRotateLeft
.29d8	88		dey				dey 	 							; do 31 times
.29d9	d0 f0		bne $29cb			bne 	_I32SDLoop
.29db	7a		ply				ply 								; restore AY and exit
.29dc	68		pla				pla
.29dd	60		rts				rts
.29de					FloatDivideCheck:
.29de	20 ae 2b	jsr $2bae			jsr 	FloatSubTopTwoStack 		; subtract Stack[X+1] from Stack[X+0]
.29e1	b0 04		bcs $29e7			bcs 	_DCSExit 					; if carry set, then could do, exit
.29e3	20 94 2b	jsr $2b94			jsr 	FloatAddTopTwoStack 		; add it back in
.29e6	18		clc				clc 								; and return False
.29e7					_DCSExit:
.29e7	60		rts				rts
.29e8					FloatFractionalPart:
.29e8	5a		phy				phy
.29e9	b5 35		lda $35,x			lda 	NSStatus,x 					; take absolute value
.29eb	29 7f		and #$7f			and 	#$7F
.29ed	95 35		sta $35,x			sta 	NSStatus,x
.29ef	20 5d 2b	jsr $2b5d			jsr 	FloatNormalise
.29f2	b5 71		lda $71,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.29f4	38		sec				sec
.29f5	e9 e0		sbc #$e0			sbc 	#$E0
.29f7	90 29		bcc $2a22			bcc 	_FFPExit 					; already fractional
.29f9	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.29fb	b0 22		bcs $2a1f			bcs 	_FFPZero
.29fd	a8		tay				tay 								; put count to do in Y
.29fe	b5 65		lda $65,x			lda 	NSMantissa3,x 				; do each in turn.
.2a00	20 27 2a	jsr $2a27			jsr 	_FFPPartial
.2a03	95 65		sta $65,x			sta 	NSMantissa3,x
.2a05	b5 59		lda $59,x			lda 	NSMantissa2,x
.2a07	20 27 2a	jsr $2a27			jsr 	_FFPPartial
.2a0a	95 59		sta $59,x			sta 	NSMantissa2,x
.2a0c	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.2a0e	20 27 2a	jsr $2a27			jsr 	_FFPPartial
.2a11	95 4d		sta $4d,x			sta 	NSMantissa1,x
.2a13	b5 41		lda $41,x			lda 	NSMantissa0,x
.2a15	20 27 2a	jsr $2a27			jsr 	_FFPPartial
.2a18	95 41		sta $41,x			sta 	NSMantissa0,x
.2a1a	20 2a 2e	jsr $2e2a			jsr 	FloatIsZero 					; zeroed check.
.2a1d	d0 03		bne $2a22			bne 	_FFPExit
.2a1f					_FFPZero:
.2a1f	20 08 2e	jsr $2e08			jsr 	FloatSetZero
.2a22					_FFPExit:
.2a22	20 5d 2b	jsr $2b5d			jsr 	FloatNormalise
.2a25	7a		ply				ply
.2a26	60		rts				rts
.2a27					_FFPPartial:
.2a27	c0 00		cpy #$00			cpy 	#0 							; no more to do
.2a29	f0 17		beq $2a42			beq 	_FFFPPExit
.2a2b	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.2a2d	b0 0c		bcs $2a3b			bcs 	_FFFPPWholeByte
.2a2f	5a		phy				phy
.2a30					_FFFPPLeft:
.2a30	0a		asl a				asl 	a
.2a31	88		dey				dey
.2a32	d0 fc		bne $2a30			bne 	_FFFPPLeft
.2a34	7a		ply				ply
.2a35					_FFFPPRight:
.2a35	4a		lsr a				lsr 	a
.2a36	88		dey				dey
.2a37	d0 fc		bne $2a35			bne 	_FFFPPRight
.2a39	80 07		bra $2a42			bra 	_FFFPPExit
.2a3b					_FFFPPWholeByte:
.2a3b	98		tya				tya 								; subtract 8 from count
.2a3c	38		sec				sec
.2a3d	e9 08		sbc #$08			sbc 	#8
.2a3f	a8		tay				tay
.2a40	a9 00		lda #$00			lda 	#0 							; and clear all
.2a42					_FFFPPExit:
.2a42	60		rts				rts
.2a43					FloatIntegerPart:
.2a43	48		pha				pha
.2a44	b5 71		lda $71,x			lda 	NSExponent,x 				; is it integer already ?
.2a46	f0 1d		beq $2a65			beq 	_FIPExit 					; if so do nothing
.2a48	20 2a 2e	jsr $2e2a			jsr 	FloatIsZero 				; is it zero ?
.2a4b	f0 15		beq $2a62			beq 	_FIPZero 					; if so return zero.
.2a4d	20 5d 2b	jsr $2b5d			jsr 	FloatNormalise 				; normalise
.2a50	f0 10		beq $2a62			beq 	_FIPZero 					; normalised to zero, exit zero
.2a52					_FIPShift:
.2a52	b5 71		lda $71,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.2a54	10 07		bpl $2a5d			bpl 	_FIPCheckZero
.2a56	20 21 2e	jsr $2e21			jsr 	FloatShiftRight 			; shift mantissa right
.2a59	f6 71		inc $71,x			inc 	NSExponent,x 				; bump exponent
.2a5b	80 f5		bra $2a52			bra 	_FIPShift
.2a5d					_FIPCheckZero:
.2a5d	20 2a 2e	jsr $2e2a			jsr 	FloatIsZero 				; avoid -0 problem
.2a60	d0 03		bne $2a65			bne 	_FIPExit 					; set to zero if mantissa zero.
.2a62					_FIPZero:
.2a62	20 08 2e	jsr $2e08			jsr 	FloatSetZero
.2a65					_FIPExit:
.2a65	68		pla				pla
.2a66	60		rts				rts
.2a67					FloatIntegerPartDown:
.2a67	48		pha				pha
.2a68	5a		phy				phy
.2a69	b5 71		lda $71,x			lda 	NSExponent,x 				; is it integer already ?
.2a6b	f0 36		beq $2aa3			beq 	_FIPExit 					; if so do nothing
.2a6d	20 2a 2e	jsr $2e2a			jsr 	FloatIsZero 				; is it zero ?
.2a70	f0 2e		beq $2aa0			beq 	_FIPZero 					; if so return zero.
.2a72	20 5d 2b	jsr $2b5d			jsr 	FloatNormalise 				; normalise
.2a75	f0 29		beq $2aa0			beq 	_FIPZero 					; normalised to zero, exit zero
.2a77	a0 00		ldy #$00			ldy 	#0 							; reset the count of bits.
.2a79					_FIPShift:
.2a79	b5 71		lda $71,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.2a7b	10 0a		bpl $2a87			bpl 	_FIPCheckDown
.2a7d	20 21 2e	jsr $2e21			jsr 	FloatShiftRight 			; shift mantissa right
.2a80	90 01		bcc $2a83			bcc 	_FIPNoFrac 					; shifted a zero out ?
.2a82	c8		iny				iny
.2a83					_FIPNoFrac:
.2a83	f6 71		inc $71,x			inc 	NSExponent,x 				; bump exponent
.2a85	80 f2		bra $2a79			bra 	_FIPShift
.2a87					_FIPCheckDown:
.2a87	c0 00		cpy #$00			cpy 	#0 							; were there any fractional bits.
.2a89	f0 10		beq $2a9b			beq 	_FIPCheckZero
.2a8b	34 35		bit $35,x			bit 	NSStatus,x 					; +ve
.2a8d	10 0c		bpl $2a9b			bpl 	_FIPCheckZero
.2a8f	e8		inx				inx 								; -ve so round *down*.
.2a90	a9 01		lda #$01			lda 	#1
.2a92	20 0a 2e	jsr $2e0a			jsr 	FloatSetByte
.2a95	20 ca 2d	jsr $2dca			jsr 	FloatNegate
.2a98	20 2c 28	jsr $282c			jsr 	FloatAdd
.2a9b					_FIPCheckZero:
.2a9b	20 2a 2e	jsr $2e2a			jsr 	FloatIsZero 				; avoid -0 problem
.2a9e	d0 03		bne $2aa3			bne 	_FIPExit 					; set to zero if mantissa zero.
.2aa0					_FIPZero:
.2aa0	20 08 2e	jsr $2e08			jsr 	FloatSetZero
.2aa3					_FIPExit:
.2aa3	7a		ply				ply
.2aa4	68		pla				pla
.2aa5	60		rts				rts
.2aa6					FloatInt8Multiply:
.2aa6	5a		phy				phy
.2aa7	b5 41		lda $41,x			lda 	NSMantissa0,x 				; right shifted multiplier in Y
.2aa9	a8		tay				tay
.2aaa	74 41		stz $41,x			stz 	NSMantissa0,x 				; zero the result (already 8 bit constant)
.2aac					_FI8MLoop:
.2aac	98		tya				tya 								; shift right shifter right into carry
.2aad	4a		lsr a				lsr 	a
.2aae	a8		tay				tay
.2aaf	90 0d		bcc $2abe			bcc 	_FI8MNoAdd
.2ab1	18		clc				clc
.2ab2	b5 41		lda $41,x			lda 	NSMantissa0,x
.2ab4	75 42		adc $42,x			adc 	NSMantissa0+1,x
.2ab6	95 41		sta $41,x			sta 	NSMantissa0,x
.2ab8	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.2aba	75 4e		adc $4e,x			adc 	NSMantissa1+1,x
.2abc	95 4d		sta $4d,x			sta 	NSMantissa1,x
.2abe					_FI8MNoAdd:
.2abe	16 42		asl $42,x			asl 	NSMantissa0+1,x 			; shift adder left
.2ac0	36 4e		rol $4e,x			rol 	NSMantissa1+1,x
.2ac2	c0 00		cpy #$00			cpy 	#0
.2ac4	d0 e6		bne $2aac			bne 	_FI8MLoop 					; until right shifter zero.
.2ac6	7a		ply				ply
.2ac7	60		rts				rts
.2ac8					FloatMultiply:
.2ac8	ca		dex				dex
.2ac9	b5 71		lda $71,x			lda 	NSExponent,x 				; can use optimised ?
.2acb	15 72		ora $72,x			ora 	NSExponent+1,x
.2acd	15 65		ora $65,x			ora 	NSMantissa3,x
.2acf	15 66		ora $66,x			ora 	NSMantissa3+1,x
.2ad1	d0 21		bne $2af4			bne 	_FMUseFloat
.2ad3	b5 35		lda $35,x			lda 	NSStatus,x 					; check if it is 8 bit unsigned
.2ad5	15 36		ora $36,x			ora 	NSStatus+1,x
.2ad7	29 80		and #$80			and 	#$80
.2ad9	15 65		ora $65,x			ora 	NSMantissa3,x
.2adb	15 59		ora $59,x			ora 	NSMantissa2,x
.2add	15 4d		ora $4d,x			ora 	NSMantissa1,x
.2adf	15 66		ora $66,x			ora 	NSMantissa3+1,x
.2ae1	15 5a		ora $5a,x			ora 	NSMantissa2+1,x
.2ae3	15 4e		ora $4e,x			ora 	NSMantissa1+1,x
.2ae5	d0 04		bne $2aeb			bne 	_FMInt32
.2ae7	20 a6 2a	jsr $2aa6			jsr 	FloatInt8Multiply 			; use fast 8x8 multiply.
.2aea	60		rts				rts
.2aeb					_FMInt32:
.2aeb	20 15 2b	jsr $2b15			jsr 	FloatMultiplyShort			; use the int32 one.
.2aee	18		clc				clc 								; fix it up if gone out of range
.2aef	75 71		adc $71,x			adc 	NSExponent,x
.2af1	95 71		sta $71,x			sta 	NSExponent,x
.2af3	60		rts				rts
.2af4					_FMUseFloat:
.2af4	20 5d 2b	jsr $2b5d			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.2af7	f0 18		beq $2b11			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.2af9	e8		inx				inx
.2afa	20 5d 2b	jsr $2b5d			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.2afd	ca		dex				dex
.2afe	c9 00		cmp #$00			cmp 	#0
.2b00	f0 0c		beq $2b0e			beq 	_FDSetZero
.2b02	20 15 2b	jsr $2b15			jsr 	FloatMultiplyShort 			; calculate the result.
.2b05	75 71		adc $71,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.2b07	18		clc				clc
.2b08	75 72		adc $72,x			adc 	NSExponent+1,x
.2b0a	95 71		sta $71,x			sta 	NSExponent,x
.2b0c	80 03		bra $2b11			bra 	_FDExit
.2b0e					_FDSetZero:
.2b0e	20 08 2e	jsr $2e08			jsr 	FloatSetZero 				; return 0
.2b11					_FDExit:
.2b11	20 5d 2b	jsr $2b5d			jsr 	FloatNormalise 				; normalise the result
.2b14	60		rts				rts
.2b15					FloatMultiplyShort:
.2b15	5a		phy				phy 								; save Y
.2b16	20 eb 2d	jsr $2deb			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.2b19	20 04 2e	jsr $2e04			jsr 	FloatSetZeroMantissaOnly 	; set mantissa S[X] to zero
.2b1c	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.2b1e					_I32MLoop:
.2b1e	b5 43		lda $43,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.2b20	15 4f		ora $4f,x			ora 	NSMantissa1+2,x
.2b22	15 5b		ora $5b,x			ora 	NSMantissa2+2,x
.2b24	15 67		ora $67,x			ora 	NSMantissa3+2,x
.2b26	f0 25		beq $2b4d			beq 	_I32MExit 					; exit if zero
.2b28	b5 43		lda $43,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.2b2a	29 01		and #$01			and 	#1
.2b2c	f0 0d		beq $2b3b			beq 	_I32MNoAdd
.2b2e	20 94 2b	jsr $2b94			jsr 	FloatAddTopTwoStack 		; if so add S[X+1] to S[X+0]
.2b31	b5 65		lda $65,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.2b33	10 06		bpl $2b3b			bpl 	_I32MNoAdd
.2b35					_I32ShiftRight:
.2b35	20 21 2e	jsr $2e21			jsr 	FloatShiftRight 			; shift S[X] right
.2b38	c8		iny				iny 								; increment shift count
.2b39	80 09		bra $2b44			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.2b3b					_I32MNoAdd:
.2b3b	34 66		bit $66,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.2b3d	70 f6		bvs $2b35			bvs 	_I32ShiftRight 				; instead.
.2b3f	e8		inx				inx
.2b40	20 17 2e	jsr $2e17			jsr 	FloatShiftLeft 				; shift additive S[X+1] left
.2b43	ca		dex				dex
.2b44					_I32MShiftUpper:
.2b44	e8		inx				inx 								; shift S[X+2] right
.2b45	e8		inx				inx
.2b46	20 21 2e	jsr $2e21			jsr 	FloatShiftRight
.2b49	ca		dex				dex
.2b4a	ca		dex				dex
.2b4b	80 d1		bra $2b1e			bra 	_I32MLoop 					; try again.
.2b4d					_I32MExit:
.2b4d	20 53 2b	jsr $2b53			jsr 	FloatCalculateSign
.2b50	98		tya				tya 								; shift in A
.2b51	7a		ply				ply 								; restore Y and exit
.2b52	60		rts				rts
.2b53					FloatCalculateSign:
.2b53	b5 35		lda $35,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.2b55	16 35		asl $35,x			asl 	NSStatus,x 					; shift result left
.2b57	55 36		eor $36,x			eor 	NSStatus+1,x
.2b59	0a		asl a				asl 	a 							; shift bit 7 into carry
.2b5a	76 35		ror $35,x			ror 	NSStatus,x 					; shift right into status byte.
.2b5c	60		rts				rts
.2b5d					FloatNormalise:
.2b5d	20 2a 2e	jsr $2e2a			jsr 	FloatIsZero 				; if zero exit
.2b60	d0 07		bne $2b69			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.2b62	16 35		asl $35,x			asl 	NSStatus,x 					; clear the sign bit.
.2b64	76 35		ror $35,x			ror 	NSStatus,x 					; (no -0)
.2b66	a9 00		lda #$00			lda 	#0 							; set Z flag
.2b68	60		rts				rts
.2b69					_NSNormaliseOptimise:
.2b69	b5 65		lda $65,x			lda 	NSMantissa3,x 				; upper byte zero ?
.2b6b	d0 19		bne $2b86			bne 	_NSNormaliseLoop
.2b6d	b5 59		lda $59,x			lda 	NSMantissa2,x 				; byte normalise
.2b6f	30 15		bmi $2b86			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.2b71	95 65		sta $65,x			sta 	NSMantissa3,x
.2b73	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.2b75	95 59		sta $59,x			sta 	NSMantissa2,x
.2b77	b5 41		lda $41,x			lda 	NSMantissa0,x
.2b79	95 4d		sta $4d,x			sta 	NSMantissa1,x
.2b7b	74 41		stz $41,x			stz 	NSMantissa0,x
.2b7d	b5 71		lda $71,x			lda 	NSExponent,x
.2b7f	38		sec				sec
.2b80	e9 08		sbc #$08			sbc 	#8
.2b82	95 71		sta $71,x			sta 	NSExponent,x
.2b84	80 e3		bra $2b69			bra 	_NSNormaliseOptimise
.2b86					_NSNormaliseLoop:
.2b86	34 65		bit $65,x			bit 	NSMantissa3,x 				; bit 30 set ?
.2b88	70 07		bvs $2b91			bvs 	_NSNExit 					; exit if so with Z flag clear
.2b8a	20 17 2e	jsr $2e17			jsr 	FloatShiftLeft 				; shift mantissa left
.2b8d	d6 71		dec $71,x			dec 	NSExponent,x 				; adjust exponent
.2b8f	80 f5		bra $2b86			bra 	_NSNormaliseLoop
.2b91					_NSNExit:
.2b91	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.2b93	60		rts				rts
.2b94					FloatAddTopTwoStack:
.2b94	18		clc				clc
.2b95	b5 41		lda $41,x			lda		NSMantissa0,x
.2b97	75 42		adc $42,x			adc 		NSMantissa0+1,x
.2b99	95 41		sta $41,x			sta 	NSMantissa0,x
.2b9b	b5 4d		lda $4d,x			lda		NSMantissa1,x
.2b9d	75 4e		adc $4e,x			adc 		NSMantissa1+1,x
.2b9f	95 4d		sta $4d,x			sta 	NSMantissa1,x
.2ba1	b5 59		lda $59,x			lda		NSMantissa2,x
.2ba3	75 5a		adc $5a,x			adc 		NSMantissa2+1,x
.2ba5	95 59		sta $59,x			sta 	NSMantissa2,x
.2ba7	b5 65		lda $65,x			lda		NSMantissa3,x
.2ba9	75 66		adc $66,x			adc 		NSMantissa3+1,x
.2bab	95 65		sta $65,x			sta 	NSMantissa3,x
.2bad	60		rts				rts
.2bae					FloatSubTopTwoStack:
.2bae	38		sec				sec
.2baf	b5 41		lda $41,x			lda		NSMantissa0,x
.2bb1	f5 42		sbc $42,x			sbc 		NSMantissa0+1,x
.2bb3	95 41		sta $41,x			sta 	NSMantissa0,x
.2bb5	b5 4d		lda $4d,x			lda		NSMantissa1,x
.2bb7	f5 4e		sbc $4e,x			sbc 		NSMantissa1+1,x
.2bb9	95 4d		sta $4d,x			sta 	NSMantissa1,x
.2bbb	b5 59		lda $59,x			lda		NSMantissa2,x
.2bbd	f5 5a		sbc $5a,x			sbc 		NSMantissa2+1,x
.2bbf	95 59		sta $59,x			sta 	NSMantissa2,x
.2bc1	b5 65		lda $65,x			lda		NSMantissa3,x
.2bc3	f5 66		sbc $66,x			sbc 		NSMantissa3+1,x
.2bc5	95 65		sta $65,x			sta 	NSMantissa3,x
.2bc7	60		rts				rts
.2bc8					FloatInt32Add:
.2bc8	b5 35		lda $35,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.2bca	55 36		eor $36,x			eor 	NSStatus+1,x
.2bcc	30 04		bmi $2bd2			bmi 	_DiffSigns
.2bce	20 94 2b	jsr $2b94			jsr		FloatAddTopTwoStack
.2bd1	60		rts				rts
.2bd2					_DiffSigns:
.2bd2	20 ae 2b	jsr $2bae			jsr 	FloatSubTopTwoStack 		; do a physical subtraction
.2bd5	34 65		bit $65,x			bit 	NSMantissa3,x 				; result is +ve, okay
.2bd7	10 07		bpl $2be0			bpl 	_AddExit
.2bd9	b5 36		lda $36,x			lda 	NSStatus+1,x 				; sign is that of 11th value
.2bdb	95 35		sta $35,x			sta 	NSStatus,x
.2bdd	20 d1 2d	jsr $2dd1			jsr 	FloatNegateMantissa 		; negate the mantissa and exit
.2be0					_AddExit:
.2be0	20 2a 2e	jsr $2e2a			jsr 	FloatIsZero 				; check for -0
.2be3	d0 02		bne $2be7			bne 	_AddNonZero
.2be5	74 35		stz $35,x			stz 	NSStatus,x
.2be7					_AddNonZero:
.2be7	60		rts				rts
=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.2be8					FloatEncodeStart:
.2be8	38		sec				sec
.2be9	80 01		bra $2bec			bra 	FloatEncodeContinue+1
.2beb					FloatEncodeContinue:
.2beb	18		clc				clc
.2bec					FloatEncode:
.2bec	08		php				php 								; save reset flag.
.2bed	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.2bef	f0 15		beq $2c06			beq 	_ENIsOkay
.2bf1	c9 30		cmp #$30			cmp 	#"0"
.2bf3	90 04		bcc $2bf9			bcc 	_ENBadNumber
.2bf5	c9 3a		cmp #$3a			cmp 	#"9"+1
.2bf7	90 0d		bcc $2c06			bcc 	_ENIsOkay
.2bf9					_ENBadNumber:
.2bf9	28		plp				plp 								; throw saved reset
.2bfa	ad 8f 05	lda $058f			lda 	encodeState 				; if in decimal mode, construct final number
.2bfd	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.2bff	d0 03		bne $2c04			bne 	_ENFail
.2c01	4c 7e 2c	jmp $2c7e			jmp 	_ENConstructFinal
.2c04					_ENFail:
.2c04	18		clc				clc 								; not allowed
.2c05	60		rts				rts
.2c06					_ENIsOkay:
.2c06	28		plp				plp 								; are we restarting
.2c07	90 15		bcc $2c1e			bcc 	_ENNoRestart
.2c09					_ENStartEncode:
.2c09	c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.2c0b	f0 0c		beq $2c19			beq 	_ENFirstDP
.2c0d	29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.2c0f	20 0a 2e	jsr $2e0a			jsr 	FloatSetByte 				; in single byte mode.
.2c12	a9 01		lda #$01			lda 	#ESTA_Low
.2c14					_ENExitChange:
.2c14	8d 8f 05	sta $058f			sta 	encodeState 				; save new state
.2c17	38		sec				sec
.2c18	60		rts				rts
.2c19					_ENFirstDP:
.2c19	20 08 2e	jsr $2e08			jsr 	FloatSetZero 				; clear integer part
.2c1c	80 3c		bra $2c5a			bra 	_ESTASwitchFloat			; go straight to float and exi
.2c1e					_ENNoRestart:
.2c1e	48		pha				pha 								; save digit or DP on stack.
.2c1f	ad 8f 05	lda $058f			lda 	encodeState 				; get current state
.2c22	c9 01		cmp #$01			cmp 	#ESTA_Low
.2c24	f0 09		beq $2c2f			beq  	_ESTALowState
.2c26	c9 02		cmp #$02			cmp 	#ESTA_High
.2c28	f0 26		beq $2c50			beq 	_ESTAHighState
.2c2a	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.2c2c	f0 38		beq $2c66			beq 	_ESTADecimalState
>2c2e	db						.byte 	$DB 						; causes a break in the emulator
.2c2f					_ESTALowState:
.2c2f	68		pla				pla 								; get value back
.2c30	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.2c32	f0 26		beq $2c5a			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.2c34	29 0f		and #$0f			and 	#15 						; make digit
.2c36	8d 90 05	sta $0590			sta 	digitTemp 					; save it.
.2c39	b5 41		lda $41,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.2c3b	0a		asl a				asl 	a
.2c3c	0a		asl a				asl 	a
.2c3d	75 41		adc $41,x			adc 	NSMantissa0,x
.2c3f	0a		asl a				asl 	a
.2c40	6d 90 05	adc $0590			adc 	digitTemp
.2c43	95 41		sta $41,x			sta 	NSMantissa0,x
.2c45	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.2c47	90 05		bcc $2c4e			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.2c49	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.2c4b	8d 8f 05	sta $058f			sta 	encodeState
.2c4e					_ESTANoSwitch:
.2c4e	38		sec				sec
.2c4f	60		rts				rts
.2c50					_ESTAHighState:
.2c50	68		pla				pla 								; get value back
.2c51	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.2c53	f0 05		beq $2c5a			beq 	_ESTASwitchFloat
.2c55	20 b0 2c	jsr $2cb0			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.2c58	38		sec				sec
.2c59	60		rts				rts
.2c5a					_ESTASwitchFloat:
.2c5a	9c 91 05	stz $0591			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.2c5d	e8		inx				inx 								; zero the decimal additive.
.2c5e	20 08 2e	jsr $2e08			jsr 	FloatSetZero
.2c61	ca		dex				dex
.2c62	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.2c64	80 ae		bra $2c14			bra 	_ENExitChange
.2c66					_ESTADecimalState:
.2c66	68		pla				pla 								; digit.
.2c67	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 11th decimal point.
.2c69	f0 99		beq $2c04			beq 	_ENFail
.2c6b	e8		inx				inx 								; put digit into fractional part of X+1
.2c6c	20 b0 2c	jsr $2cb0			jsr 	ESTAShiftDigitIntoMantissa
.2c6f	ca		dex				dex
.2c70	ee 91 05	inc $0591			inc 	decimalCount 				; bump the count of decimals
.2c73	ad 91 05	lda $0591			lda 	decimalCount 				; too many decimal digits.
.2c76	c9 0b		cmp #$0b			cmp 	#11
.2c78	f0 02		beq $2c7c			beq 	_ESTADSFail
.2c7a	38		sec				sec
.2c7b	60		rts				rts
.2c7c					_ESTADSFail:
.2c7c	18		clc				clc
.2c7d	60		rts				rts
.2c7e					_ENConstructFinal:
.2c7e	ad 91 05	lda $0591			lda 	decimalCount 				; get decimal count
.2c81	f0 2b		beq $2cae			beq 	_ENCFExit 					; no decimals
.2c83	5a		phy				phy
.2c84	0a		asl a				asl 	a 							; x 4 and CLC
.2c85	0a		asl a				asl 	a
.2c86	6d 91 05	adc $0591			adc 	decimalCount
.2c89	a8		tay				tay
.2c8a	b9 15 29	lda $2915,y			lda 	FloatScalarTable-5,y 		; copy decimal scalar to X+2
.2c8d	95 43		sta $43,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.2c8f	b9 16 29	lda $2916,y			lda 	FloatScalarTable-5+1,y
.2c92	95 4f		sta $4f,x			sta 	NSMantissa1+2,x
.2c94	b9 17 29	lda $2917,y			lda 	FloatScalarTable-5+2,y
.2c97	95 5b		sta $5b,x			sta 	NSMantissa2+2,x
.2c99	b9 18 29	lda $2918,y			lda 	FloatScalarTable-5+3,y
.2c9c	95 67		sta $67,x			sta 	NSMantissa3+2,x
.2c9e	b9 19 29	lda $2919,y			lda 	FloatScalarTable-5+4,y
.2ca1	95 73		sta $73,x			sta 	NSExponent+2,x
.2ca3	74 37		stz $37,x			stz 	NSStatus+2,x 				; make +ve
.2ca5	e8		inx				inx 								; multiply decimal const by decimal scalar
.2ca6	e8		inx				inx
.2ca7	20 c8 2a	jsr $2ac8			jsr 	FloatMultiply
.2caa	20 2c 28	jsr $282c			jsr 	FloatAdd 					; add to integer part.
.2cad	7a		ply				ply
.2cae					_ENCFExit:
.2cae	18		clc				clc 								; reject the digit.
.2caf	60		rts				rts
.2cb0					ESTAShiftDigitIntoMantissa:
.2cb0	29 0f		and #$0f			and 	#15 						; save digit
.2cb2	48		pha				pha
.2cb3	b5 65		lda $65,x			lda 	NSMantissa3,x 				; push mantissa on stack
.2cb5	48		pha				pha
.2cb6	b5 59		lda $59,x			lda 	NSMantissa2,x
.2cb8	48		pha				pha
.2cb9	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.2cbb	48		pha				pha
.2cbc	b5 41		lda $41,x			lda 	NSMantissa0,x
.2cbe	48		pha				pha
.2cbf	20 17 2e	jsr $2e17			jsr 	FloatShiftLeft 				; x 2
.2cc2	20 17 2e	jsr $2e17			jsr 	FloatShiftLeft 				; x 4
.2cc5	18		clc				clc 								; pop mantissa and add
.2cc6	68		pla				pla
.2cc7	75 41		adc $41,x			adc 	NSMantissa0,x
.2cc9	95 41		sta $41,x			sta 	NSMantissa0,x
.2ccb	68		pla				pla
.2ccc	75 4d		adc $4d,x			adc 	NSMantissa1,x
.2cce	95 4d		sta $4d,x			sta 	NSMantissa1,x
.2cd0	68		pla				pla
.2cd1	75 59		adc $59,x			adc 	NSMantissa2,x
.2cd3	95 59		sta $59,x			sta 	NSMantissa2,x
.2cd5	68		pla				pla
.2cd6	75 65		adc $65,x			adc 	NSMantissa3,x
.2cd8	95 65		sta $65,x			sta 	NSMantissa3,x 				; x 5
.2cda	20 17 2e	jsr $2e17			jsr 	FloatShiftLeft 				; x 10
.2cdd	68		pla				pla 								; add digit
.2cde	18		clc				clc
.2cdf	75 41		adc $41,x			adc 	NSMantissa0,x
.2ce1	95 41		sta $41,x			sta 	NSMantissa0,x
.2ce3	90 0a		bcc $2cef			bcc 	_ESTASDExit
.2ce5	f6 4d		inc $4d,x			inc 	NSMantissa1,x
.2ce7	d0 06		bne $2cef			bne 	_ESTASDExit
.2ce9	f6 59		inc $59,x			inc 	NSMantissa2,x
.2ceb	d0 02		bne $2cef			bne 	_ESTASDExit
.2ced	f6 65		inc $65,x			inc 	NSMantissa3,x
.2cef					_ESTASDExit:
.2cef	60		rts				rts
.058f					encodeState:
>058f							.fill 	1
.0590					digitTemp:
>0590							.fill 	1
.0591					decimalCount:
>0591							.fill 	1
.2cf0					FloatToString:
.2cf0	da		phx				phx
.2cf1	5a		phy				phy 								; save code position
.2cf2	8d 92 05	sta $0592			sta 	decimalPlaces	 			; save number of DPs.
.2cf5	9c 93 05	stz $0593			stz 	dbOffset 					; offset into decimal buffer = start.
.2cf8	b5 35		lda $35,x			lda 	NSStatus,x  				; is it -ve.
.2cfa	10 08		bpl $2d04			bpl 	_CNTSNotNegative
.2cfc	29 7f		and #$7f			and 	#$7F 						; make +ve
.2cfe	95 35		sta $35,x			sta 	NSStatus,x
.2d00	a9 2d		lda #$2d			lda 	#"-"
.2d02	80 02		bra $2d06			bra 	_CNTMain
.2d04					_CNTSNotNegative:
.2d04	a9 20		lda #$20			lda 	#" "
.2d06					_CNTMain:
.2d06	20 68 2d	jsr $2d68			jsr 	WriteDecimalBuffer
.2d09	b5 71		lda $71,x			lda 	NSExponent,x 				; check if decimal
.2d0b	f0 0d		beq $2d1a			beq 	_CNTSNotFloat
.2d0d	e8		inx				inx 								; round up so we don't get too many 6.999999
.2d0e	a9 01		lda #$01			lda 	#1
.2d10	20 0a 2e	jsr $2e0a			jsr 	FloatSetByte
.2d13	b5 70		lda $70,x			lda		NSExponent-1,x
.2d15	95 71		sta $71,x			sta 	NSExponent,x
.2d17	20 2c 28	jsr $282c			jsr 	FloatAdd
.2d1a					_CNTSNotFloat:
.2d1a	20 4a 2d	jsr $2d4a			jsr 	MakePlusTwoString 			; do the integer part.
.2d1d	20 e8 29	jsr $29e8			jsr 	FloatFractionalPart 		; get the fractional part
.2d20	20 5d 2b	jsr $2b5d			jsr 	FloatNormalise					; normalise , exit if zero
.2d23	f0 22		beq $2d47			beq 	_CNTSExit
.2d25	a9 2e		lda #$2e			lda 	#"."
.2d27	20 68 2d	jsr $2d68			jsr 	WriteDecimalBuffer 			; write decimal place
.2d2a					_CNTSDecimal:
.2d2a	ce 92 05	dec $0592			dec 	decimalPlaces 				; done all the decimals
.2d2d	30 18		bmi $2d47			bmi 	_CNTSExit
.2d2f	e8		inx				inx 								; x 10.0
.2d30	a9 0a		lda #$0a			lda 	#10
.2d32	20 0a 2e	jsr $2e0a			jsr 	FloatSetByte
.2d35	20 c8 2a	jsr $2ac8			jsr 	FloatMultiply
.2d38	20 4a 2d	jsr $2d4a			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.2d3b	20 e8 29	jsr $29e8			jsr 	FloatFractionalPart 		; get the fractional part
.2d3e	20 5d 2b	jsr $2b5d			jsr 	FloatNormalise 				; normalise it.
.2d41	b5 71		lda $71,x			lda 	NSExponent,x 				; gone to zero, exit.
.2d43	c9 d0		cmp #$d0			cmp 	#$D0 						; very small remainder, so don't bother.
.2d45	b0 e3		bcs $2d2a			bcs 	_CNTSDecimal 				; keep going.
.2d47					_CNTSExit:
.2d47	7a		ply				ply
.2d48	fa		plx				plx
.2d49	60		rts				rts
.2d4a					MakePlusTwoString:
.2d4a	da		phx				phx
.2d4b	20 eb 2d	jsr $2deb			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.2d4e	e8		inx				inx 								; access it
.2d4f	e8		inx				inx
.2d50	20 43 2a	jsr $2a43			jsr 	FloatIntegerPart 			; make it an integer
.2d53	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.2d55	20 87 2d	jsr $2d87			jsr 	ConvertInt32
.2d58	a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.2d5a					_MPTSCopy:
.2d5a	bd 6d 05	lda $056d,x			lda 	numberBuffer,x
.2d5d	20 68 2d	jsr $2d68			jsr 	WriteDecimalBuffer
.2d60	e8		inx				inx
.2d61	bd 6d 05	lda $056d,x			lda 	numberBuffer,x
.2d64	d0 f4		bne $2d5a			bne 	_MPTSCopy
.2d66	fa		plx				plx
.2d67	60		rts				rts
.2d68					WriteDecimalBuffer:
.2d68	da		phx				phx
.2d69	ae 93 05	ldx $0593			ldx 	dbOffset
.2d6c	9d 94 05	sta $0594,x			sta 	decimalBuffer,x
.2d6f	9e 95 05	stz $0595,x			stz 	decimalBuffer+1,x
.2d72	ee 93 05	inc $0593			inc 	dbOffset
.2d75	fa		plx				plx
.2d76	60		rts				rts
.0592					decimalPlaces:
>0592							.fill 	1
.0593					dbOffset:
>0593							.fill 	1
.0594					decimalBuffer:
>0594							.fill 	32
.2d77					ConvertInt16:
.2d77	85 41		sta $41				sta 	NSMantissa0 				; set up as 32 bit conversion
.2d79	86 4d		stx $4d				stx 	NSMantissa1
.2d7b	64 59		stz $59				stz 	NSMantissa2
.2d7d	64 65		stz $65				stz 	NSMantissa3
.2d7f	64 35		stz $35				stz 	NSStatus 					; positive integer
.2d81	a2 00		ldx #$00			ldx 	#0 							; stack level
.2d83	a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.2d85	80 00		bra $2d87			bra 	ConvertInt32
.2d87					ConvertInt32:
.2d87	5a		phy				phy
.2d88	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.2d8a	24 35		bit $35				bit 	NSStatus 					; output a - if not negative.
.2d8c	10 08		bpl $2d96			bpl 	_CI32NotNeg
.2d8e	48		pha				pha
.2d8f	a9 2d		lda #$2d			lda 	#'-'
.2d91	99 6d 05	sta $056d,y			sta 	numberBuffer,y
.2d94	c8		iny				iny
.2d95	68		pla				pla
.2d96					_CI32NotNeg:
.2d96	20 a4 2d	jsr $2da4			jsr 	_CI32DivideConvert 			; recursive conversion
.2d99	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.2d9b	99 6d 05	sta $056d,y			sta 	numberBuffer,y
.2d9e	7a		ply				ply
.2d9f	a2 05		ldx #$05			ldx 	#numberBuffer >> 8 			; return address in XA
.2da1	a9 6d		lda #$6d			lda 	#numberBuffer & $FF
.2da3	60		rts				rts
.2da4					_CI32DivideConvert:
.2da4	e8		inx				inx 								; write to next slot up
.2da5	20 0a 2e	jsr $2e0a			jsr 	FloatSetByte 		 		; write the base out.
.2da8	ca		dex				dex
.2da9	20 9e 29	jsr $299e			jsr 	Int32Divide 				; divide
.2dac	b5 41		lda $41,x			lda 	NSMantissa0,x 				; save remainder
.2dae	48		pha				pha
.2daf	20 8d 29	jsr $298d			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.2db2	20 2a 2e	jsr $2e2a			jsr 	FloatIsZero 				; is it zero ?
.2db5	f0 05		beq $2dbc			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.2db7	b5 42		lda $42,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.2db9	20 a4 2d	jsr $2da4			jsr 	_CI32DivideConvert 			; and recusrively call.
.2dbc					_CI32NoRecurse:
.2dbc	68		pla				pla 								; remainder
.2dbd	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.2dbf	90 02		bcc $2dc3			bcc 	_CI32NotHex
.2dc1	69 26		adc #$26			adc 	#6+32
.2dc3					_CI32NotHex:
.2dc3	69 30		adc #$30			adc 	#48
.2dc5	99 6d 05	sta $056d,y			sta 	numberBuffer,y 				; write out and exit
.2dc8	c8		iny				iny
.2dc9	60		rts				rts
.2dca					FloatNegate:
.2dca	b5 35		lda $35,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.2dcc	49 80		eor #$80			eor 	#$80  						; toggle the negative flag
.2dce	95 35		sta $35,x			sta 	NSStatus,x
.2dd0	60		rts				rts
.2dd1					FloatNegateMantissa:
.2dd1	38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.2dd2	a9 00		lda #$00			lda 	#0
.2dd4	f5 41		sbc $41,x			sbc 	NSMantissa0,x
.2dd6	95 41		sta $41,x			sta 	NSMantissa0,x
.2dd8	a9 00		lda #$00			lda 	#0
.2dda	f5 4d		sbc $4d,x			sbc 	NSMantissa1,x
.2ddc	95 4d		sta $4d,x			sta 	NSMantissa1,x
.2dde	a9 00		lda #$00			lda 	#0
.2de0	f5 59		sbc $59,x			sbc 	NSMantissa2,x
.2de2	95 59		sta $59,x			sta 	NSMantissa2,x
.2de4	a9 00		lda #$00			lda 	#0
.2de6	f5 65		sbc $65,x			sbc 	NSMantissa3,x
.2de8	95 65		sta $65,x			sta 	NSMantissa3,x
.2dea	60		rts				rts
.2deb					FloatShiftUpTwo:
.2deb	b5 41		lda $41,x			lda 	NSMantissa0,x
.2ded	95 43		sta $43,x			sta 	NSMantissa0+2,x
.2def	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.2df1	95 4f		sta $4f,x			sta 	NSMantissa1+2,x
.2df3	b5 59		lda $59,x			lda 	NSMantissa2,x
.2df5	95 5b		sta $5b,x			sta 	NSMantissa2+2,x
.2df7	b5 65		lda $65,x			lda 	NSMantissa3,x
.2df9	95 67		sta $67,x			sta 	NSMantissa3+2,x
.2dfb	b5 71		lda $71,x			lda 	NSExponent,x
.2dfd	95 73		sta $73,x			sta 	NSExponent+2,x
.2dff	b5 35		lda $35,x			lda 	NSStatus,x
.2e01	95 37		sta $37,x			sta 	NSStatus+2,x
.2e03	60		rts				rts
.2e04					FloatSetZeroMantissaOnly:
.2e04	74 41		stz $41,x			stz 	NSMantissa0,x
.2e06	80 08		bra $2e10			bra 	FloatZero13
.2e08					FloatSetZero:
.2e08	a9 00		lda #$00			lda 	#0
.2e0a					FloatSetByte:
.2e0a	74 71		stz $71,x			stz 	NSExponent,x 				; zero exponent, as +ve integer value.
.2e0c					FloatSetMantissa:
.2e0c	95 41		sta $41,x			sta 	NSMantissa0,x 				; zero mantissa
.2e0e	74 35		stz $35,x			stz 	NSStatus,x
.2e10					FloatZero13:
.2e10	74 4d		stz $4d,x			stz 	NSMantissa1,x
.2e12	74 59		stz $59,x			stz 	NSMantissa2,x
.2e14	74 65		stz $65,x			stz 	NSMantissa3,x
.2e16	60		rts				rts
.2e17					FloatShiftLeft:
.2e17	18		clc				clc
.2e18					FloatRotateLeft:
.2e18	36 41		rol $41,x			rol 	NSMantissa0,x
.2e1a	36 4d		rol $4d,x			rol		NSMantissa1,x
.2e1c	36 59		rol $59,x			rol		NSMantissa2,x
.2e1e	36 65		rol $65,x			rol		NSMantissa3,x
.2e20	60		rts				rts
.2e21					FloatShiftRight:
.2e21	56 65		lsr $65,x			lsr 	NSMantissa3,x
.2e23	76 59		ror $59,x			ror		NSMantissa2,x
.2e25	76 4d		ror $4d,x			ror		NSMantissa1,x
.2e27	76 41		ror $41,x			ror		NSMantissa0,x
.2e29	60		rts				rts
.2e2a					FloatIsZero:
.2e2a	b5 65		lda $65,x			lda 	NSMantissa3,x
.2e2c	15 59		ora $59,x			ora		NSMantissa2,x
.2e2e	15 4d		ora $4d,x			ora		NSMantissa1,x
.2e30	15 41		ora $41,x			ora		NSMantissa0,x
.2e32	60		rts				rts

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/polynomials.library

.2e33					FloatArcTan:
.2e33	20 5d 2b	jsr $2b5d			jsr 	FloatNormalise 					; normalise x
.2e36	b5 35		lda $35,x			lda 	NSStatus,x 						; save sign, make absolute
.2e38	48		pha				pha
.2e39	74 35		stz $35,x			stz 	NSStatus,x
.2e3b	b5 71		lda $71,x			lda 	NSExponent,x 					; $40000000 ^ $E2 is 1.0
.2e3d	c9 e2		cmp #$e2			cmp 	#$E2
.2e3f	90 25		bcc $2e66			bcc 	_UANoFixup
.2e41	8a		txa				txa 									; value in +1
.2e42	a8		tay				tay
.2e43	c8		iny				iny
.2e44	20 ec 2f	jsr $2fec			jsr 	CopyFloatXY
.2e47	a9 01		lda #$01			lda 	#1 								; 1.0 in +0
.2e49	20 0a 2e	jsr $2e0a			jsr 	FloatSetByte
.2e4c	e8		inx				inx
.2e4d	20 51 29	jsr $2951			jsr 	FloatDivide
.2e50	b0 21		bcs $2e73			bcs 	_FATError
.2e52	20 76 2e	jsr $2e76			jsr 	CoreAtn 						; calculate the root
.2e55	20 e1 2f	jsr $2fe1			jsr 	CompletePolynomial
.2e58	20 ca 2d	jsr $2dca			jsr 	FloatNegate 					; make -ve
.2e5b	a9 05		lda #$05			lda 	#Const_PiDiv2-Const_Base
.2e5d	20 38 30	jsr $3038			jsr 	LoadConstant
.2e60	e8		inx				inx
.2e61	20 2c 28	jsr $282c			jsr 	FloatAdd
.2e64	80 06		bra $2e6c			bra 	_UAComplete
.2e66					_UANoFixup:
.2e66	20 76 2e	jsr $2e76			jsr 	CoreAtn
.2e69	20 e1 2f	jsr $2fe1			jsr 	CompletePolynomial
.2e6c					_UAComplete:
.2e6c	68		pla				pla 									; apply the result.
.2e6d	55 35		eor $35,x			eor 	NSStatus,x
.2e6f	95 35		sta $35,x			sta 	NSStatus,x
.2e71	18		clc				clc
.2e72	60		rts				rts
.2e73					_FATError:
.2e73	68		pla				pla
.2e74	38		sec				sec
.2e75	60		rts				rts
.2e76					CoreAtn:
.2e76	a9 e4		lda #$e4			lda 	#AtnCoefficients & $FF
.2e78	a0 2e		ldy #$2e			ldy 	#AtnCoefficients >> 8
.2e7a	4c 35 31	jmp $3135			jmp 	CorePolySquared
.2e7d					ExpCoefficients:
>2e7d	07					.byte	7
>2e7e	2b 1f 2c 5a				.dword	$5a2c1f2b ; 2.1498763701e-05
>2e82	d2					.byte	$d2
>2e83	8e 59 3f 4b				.dword	$4b3f598e ; 0.00014352314037
>2e87	d5					.byte	$d5
>2e88	c3 71 f7 57				.dword	$57f771c3 ; 0.0013422634825
>2e8c	d8					.byte	$d8
>2e8d	15 0e c2 4e				.dword	$4ec20e15 ; 0.0096140170135
>2e91	db					.byte	$db
>2e92	05 ac ac 71				.dword	$71acac05 ; 0.05550512686
>2e96	dd					.byte	$dd
>2e97	e3 f3 fe 7a				.dword	$7afef3e3 ; 0.2402263846
>2e9b	df					.byte	$df
>2e9c	08 0c b9 58				.dword	$58b90c08 ; 0.69314718618
>2ea0	e1					.byte	$e1
>2ea1	00 00 00 40				.dword	$40000000 ; 1.0
>2ea5	e2					.byte	$e2
.2ea6					SinCoefficients:
>2ea6	06					.byte	6
>2ea7	8d 16 0d f3				.dword	$f30d168d ; -14.381390672
>2eab	e5					.byte	$e5
>2eac	fc fd 03 54				.dword	$5403fdfc ; 42.007797122
>2eb0	e7					.byte	$e7
>2eb1	81 44 b4 cc				.dword	$ccb44481 ; -76.704170257
>2eb5	e8					.byte	$e8
>2eb6	f1 ef 9a 51				.dword	$519aeff1 ; 81.605223686
>2eba	e8					.byte	$e8
>2ebb	94 f3 ae d2				.dword	$d2aef394 ; -41.341702104
>2ebf	e7					.byte	$e7
>2ec0	51 ed 87 64				.dword	$6487ed51 ; 6.2831853069
>2ec4	e4					.byte	$e4
>2ec5	00 00 00 00				.dword	$00000000 ; 0.0
>2ec9	00					.byte	$00
.2eca					LogCoefficients:
>2eca	04					.byte	4
>2ecb	bd 65 2b 6f				.dword	$6f2b65bd ; 0.43425594189
>2ecf	e0					.byte	$e0
>2ed0	b2 85 cd 49				.dword	$49cd85b2 ; 0.57658454124
>2ed4	e1					.byte	$e1
>2ed5	8b 49 1c 7b				.dword	$7b1c498b ; 0.96180075919
>2ed9	e1					.byte	$e1
>2eda	90 1d 55 5c				.dword	$5c551d90 ; 2.8853900731
>2ede	e3					.byte	$e3
>2edf	00 00 00 c0				.dword	$c0000000 ; -0.5
>2ee3	e1					.byte	$e1
.2ee4					AtnCoefficients:
>2ee4	0c					.byte	12
>2ee5	ea de c1 d9				.dword	$d9c1deea ; -0.00068479391189
>2ee9	d7					.byte	$d7
>2eea	7a 53 7a 4f				.dword	$4f7a537a ; 0.0048509421558
>2eee	da					.byte	$da
>2eef	08 58 fe c1				.dword	$c1fe5808 ; -0.016111701843
>2ef3	dc					.byte	$dc
>2ef4	e5 b3 0f 46				.dword	$460fb3e5 ; 0.034209638048
>2ef8	dd					.byte	$dd
>2ef9	e1 e5 29 ef				.dword	$ef29e5e1 ; -0.054279132761
>2efd	dd					.byte	$dd
>2efe	26 38 32 4a				.dword	$4a323826 ; 0.07245719654
>2f02	de					.byte	$de
>2f03	bd 28 f5 db				.dword	$dbf528bd ; -0.089802395378
>2f07	de					.byte	$de
>2f08	3f 44 98 71				.dword	$7198443f ; 0.11093241343
>2f0c	de					.byte	$de
>2f0d	9d 4c 22 c9				.dword	$c9224c9d ; -0.14283980767
>2f11	df					.byte	$df
>2f12	e3 48 66 66				.dword	$666648e3 ; 0.19999912049
>2f16	df					.byte	$df
>2f17	0a 55 55 d5				.dword	$d555550a ; -0.33333331568
>2f1b	e0					.byte	$e0
>2f1c	00 00 00 40				.dword	$40000000 ; 1.0
>2f20	e2					.byte	$e2
>2f21	00 00 00 00				.dword	$00000000 ; 0.0
>2f25	00					.byte	$00
.2f26					Const_Base:
.2f26					Const_1Div2Pi:
>2f26	b7 c1 7c 51				.dword	$517cc1b7 ; 0.15915494
>2f2a	df					.byte	$df
.2f2b					Const_PiDiv2:
>2f2b	51 ed 87 64				.dword	$6487ed51 ; 1.57079633
>2f2f	e2					.byte	$e2
.2f30					Const_Log2_e:
>2f30	95 1d 55 5c				.dword	$5c551d95 ; 1.44269504
>2f34	e2					.byte	$e2
.2f35					Const_sqrt_2:
>2f35	9a 79 82 5a				.dword	$5a82799a ; 1.41421356
>2f39	e2					.byte	$e2
.2f3a					Const_sqrt_half:
>2f3a	9a 79 82 5a				.dword	$5a82799a ; 0.70710678
>2f3e	e1					.byte	$e1
.2f3f					Const_pi:
>2f3f	51 ed 87 64				.dword	$6487ed51 ; 3.14159265
>2f43	e3					.byte	$e3
.2f44					Const_half:
>2f44	00 00 00 40				.dword	$40000000 ; 0.50000000
>2f48	e1					.byte	$e1
.2f49					Const_ln_e:
>2f49	fc 0b b9 58				.dword	$58b90bfc ; 0.69314718
>2f4d	e1					.byte	$e1
.2f4e					FloatCosine:
.2f4e	a9 05		lda #$05			lda 	#Const_PiDiv2-Const_Base
.2f50	20 38 30	jsr $3038			jsr 	LoadConstant
.2f53	e8		inx				inx
.2f54	20 2c 28	jsr $282c			jsr 	FloatAdd
.2f57	4c ee 30	jmp $30ee			jmp 	FloatSine
.2f5a					FloatExponent:
.2f5a	a9 0a		lda #$0a			lda 	#Const_Log2_e-Const_Base
.2f5c	20 38 30	jsr $3038			jsr 	LoadConstant
.2f5f	e8		inx				inx
.2f60	20 c8 2a	jsr $2ac8			jsr 	FloatMultiply
.2f63	20 a5 2f	jsr $2fa5			jsr 	_UECopy01 				; copy 0 to 1, get integer part to 1
.2f66	e8		inx				inx
.2f67	20 43 2a	jsr $2a43			jsr 	FloatIntegerPart
.2f6a	ca		dex				dex
.2f6b	b5 4e		lda $4e,x			lda 	NSMantissa1+1,x
.2f6d	15 5a		ora $5a,x			ora 	NSMantissa2+1,x
.2f6f	15 66		ora $66,x			ora 	NSMantissa3+1,x
.2f71	d0 38		bne $2fab			bne 	_UERangeError
.2f73	b5 42		lda $42,x			lda 	NSMantissa0+1,x 		; push integer part on stack.
.2f75	c9 40		cmp #$40			cmp 	#64
.2f77	b0 32		bcs $2fab			bcs 	_UERangeError
.2f79	48		pha				pha
.2f7a	b5 35		lda $35,x			lda 	NSStatus,x 				; push sign
.2f7c	48		pha				pha
.2f7d	20 e8 29	jsr $29e8			jsr 	FloatFractionalPart		; copy 0 to 1, get fractional part to 0
.2f80	68		pla				pla
.2f81	10 14		bpl $2f97			bpl 	_UEPositive
.2f83	e8		inx				inx 							; 1-x
.2f84	a9 01		lda #$01			lda 	#1
.2f86	20 0a 2e	jsr $2e0a			jsr 	FloatSetByte
.2f89	ca		dex				dex
.2f8a	20 ca 2d	jsr $2dca			jsr 	FloatNegate
.2f8d	e8		inx				inx
.2f8e	20 2c 28	jsr $282c			jsr 	FloatAdd
.2f91	68		pla				pla 							; integer part +1 and negated.
.2f92	1a		inc a				inc 	a
.2f93	49 ff		eor #$ff			eor 	#$FF
.2f95	1a		inc a				inc 	a
.2f96	48		pha				pha
.2f97					_UEPositive:
.2f97	20 ad 2f	jsr $2fad			jsr 	CoreExponent
.2f9a	20 e1 2f	jsr $2fe1			jsr 	CompletePolynomial
.2f9d	68		pla				pla
.2f9e	18		clc				clc
.2f9f	75 71		adc $71,x			adc 	NSExponent,x
.2fa1	95 71		sta $71,x			sta 	NSExponent,x
.2fa3	18		clc				clc
.2fa4	60		rts				rts
.2fa5					_UECopy01:
.2fa5	8a		txa				txa
.2fa6	a8		tay				tay
.2fa7	c8		iny				iny
.2fa8	4c ec 2f	jmp $2fec			jmp 	CopyFloatXY
.2fab					_UERangeError:
.2fab	38		sec				sec
.2fac	60		rts				rts
.2fad					CoreExponent:
.2fad	a9 7d		lda #$7d			lda 	#ExpCoefficients & $FF
.2faf	a0 2e		ldy #$2e			ldy 	#ExpCoefficients >> 8
.2fb1	20 b5 2f	jsr $2fb5			jsr 	CalculateHornerPolynomial
.2fb4	60		rts				rts
.2fb5					CalculateHornerPolynomial:
.2fb5	85 2f		sta $2f				sta 	zTemp0 						; save poly data from YA
.2fb7	84 30		sty $30				sty 	zTemp0+1
.2fb9	9c b4 05	stz $05b4			stz 	coefficientCount 			; zero the count.
.2fbc	8e b5 05	stx $05b5			stx 	xValueSlot 					; save xValue slot.
.2fbf	e8		inx				inx 								; set the count to zero.
.2fc0	20 08 2e	jsr $2e08			jsr 	FloatSetZero
.2fc3					_CHPLoop:
.2fc3	8a		txa				txa 								; copy X-1 to X+1
.2fc4	a8		tay				tay
.2fc5	ca		dex				dex
.2fc6	c8		iny				iny
.2fc7	20 ec 2f	jsr $2fec			jsr 	CopyFloatXY 				; e.g. stack is <current> <x>
.2fca	e8		inx				inx
.2fcb	e8		inx				inx
.2fcc	20 c8 2a	jsr $2ac8			jsr 	FloatMultiply 				; times current by X
.2fcf	e8		inx				inx
.2fd0	20 0b 30	jsr $300b			jsr 	GetCoefficient 				; coefficient into X+1
.2fd3	20 2c 28	jsr $282c			jsr 	FloatAdd 					; and add
.2fd6	ee b4 05	inc $05b4			inc 	coefficientCount
.2fd9	ad b4 05	lda $05b4			lda 	coefficientCount
.2fdc	d2 2f		cmp ($2f)			cmp 	(zTemp0)
.2fde	d0 e3		bne $2fc3			bne 	_CHPLoop
.2fe0	60		rts				rts
.2fe1					CompletePolynomial:
.2fe1	20 c8 2a	jsr $2ac8			jsr 	FloatMultiply
.2fe4	e8		inx				inx 								; get the last value
.2fe5	20 0b 30	jsr $300b			jsr 	GetCoefficient
.2fe8	20 2c 28	jsr $282c			jsr 	FloatAdd 					; and add it
.2feb	60		rts				rts
.2fec					CopyFloatXY:
.2fec	b5 71		lda $71,x			lda 	NSExponent,x
.2fee	99 71 00	sta $0071,y			sta 	NSExponent,y
.2ff1	b5 35		lda $35,x			lda 	NSStatus,x
.2ff3	99 35 00	sta $0035,y			sta 	NSStatus,y
.2ff6	b5 41		lda $41,x			lda 	NSMantissa0,x
.2ff8	99 41 00	sta $0041,y			sta 	NSMantissa0,y
.2ffb	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.2ffd	99 4d 00	sta $004d,y			sta 	NSMantissa1,y
.3000	b5 59		lda $59,x			lda 	NSMantissa2,x
.3002	99 59 00	sta $0059,y			sta 	NSMantissa2,y
.3005	b5 65		lda $65,x			lda 	NSMantissa3,x
.3007	99 65 00	sta $0065,y			sta 	NSMantissa3,y
.300a	60		rts				rts
.300b					GetCoefficient:
.300b	5a		phy				phy
.300c	ad b4 05	lda $05b4			lda 	coefficientCount 			; 5 per block
.300f	0a		asl a				asl 	a
.3010	0a		asl a				asl 	a
.3011	38		sec				sec 								; +1 for count
.3012	6d b4 05	adc $05b4			adc 	coefficientCount
.3015	a8		tay				tay
.3016	b1 2f		lda ($2f),y			lda 	(zTemp0),y 					; copy mantissa
.3018	95 41		sta $41,x			sta 	NSMantissa0,x
.301a	c8		iny				iny
.301b	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.301d	95 4d		sta $4d,x			sta 	NSMantissa1,x
.301f	c8		iny				iny
.3020	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.3022	95 59		sta $59,x			sta 	NSMantissa2,x
.3024	c8		iny				iny
.3025	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.3027	48		pha				pha
.3028	29 7f		and #$7f			and 	#$7F 						; clear sign bit.
.302a	95 65		sta $65,x			sta 	NSMantissa3,x
.302c	c8		iny				iny
.302d	68		pla				pla
.302e	29 80		and #$80			and 	#$80
.3030	95 35		sta $35,x			sta 	NSStatus,x 					; put in status
.3032	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.3034	95 71		sta $71,x			sta 	NSExponent,x
.3036	7a		ply				ply
.3037	60		rts				rts
.05b4					coefficientCount:
>05b4							.fill 	1
.05b5					xValueSlot:
>05b5							.fill 	1
.3038					LoadConstant:
.3038	5a		phy				phy
.3039	a8		tay				tay
.303a	b9 26 2f	lda $2f26,y			lda 	Const_Base+0,y
.303d	95 42		sta $42,x			sta 	NSMantissa0+1,x
.303f	b9 27 2f	lda $2f27,y			lda 	Const_Base+1,y
.3042	95 4e		sta $4e,x			sta 	NSMantissa1+1,x
.3044	b9 28 2f	lda $2f28,y			lda 	Const_Base+2,y
.3047	95 5a		sta $5a,x			sta 	NSMantissa2+1,x
.3049	b9 29 2f	lda $2f29,y			lda 	Const_Base+3,y
.304c	48		pha				pha
.304d	29 7f		and #$7f			and 	#$7F
.304f	95 66		sta $66,x			sta 	NSMantissa3+1,x
.3051	68		pla				pla
.3052	29 80		and #$80			and 	#$80
.3054	95 36		sta $36,x			sta 	NSStatus+1,x
.3056	b9 2a 2f	lda $2f2a,y			lda 	Const_Base+4,y
.3059	95 72		sta $72,x			sta 	NSExponent+1,x
.305b	7a		ply				ply
.305c	60		rts				rts
.305d					FloatLogarithm:
.305d	b5 35		lda $35,x			lda 	NSStatus,x 					; check > 0
.305f	30 5f		bmi $30c0			bmi 	_ULRange
.3061	20 2a 2e	jsr $2e2a			jsr 	FloatIsZero
.3064	f0 5a		beq $30c0			beq 	_ULRange
.3066	20 5d 2b	jsr $2b5d			jsr 	FloatNormalise 				; put into FP mode.
.3069	b5 71		lda $71,x			lda 	NSExponent,x 				; get power
.306b	48		pha				pha
.306c	a9 e1		lda #$e1			lda 	#(-31) & $FF 				; force into range 0.5 -> 1
.306e	95 71		sta $71,x			sta 	NSExponent,x
.3070	a9 14		lda #$14			lda 	#Const_sqrt_half-Const_Base
.3072	20 38 30	jsr $3038			jsr 	LoadConstant
.3075	e8		inx				inx
.3076	20 2c 28	jsr $282c			jsr 	FloatAdd
.3079	8a		txa				txa 								; divide into sqrt 2.0
.307a	a8		tay				tay
.307b	c8		iny				iny
.307c	20 ec 2f	jsr $2fec			jsr 	CopyFloatXY
.307f	ca		dex				dex
.3080	a9 0f		lda #$0f			lda 	#Const_sqrt_2-Const_Base
.3082	20 38 30	jsr $3038			jsr 	LoadConstant
.3085	e8		inx				inx
.3086	e8		inx				inx
.3087	20 51 29	jsr $2951			jsr 	FloatDivide 				; if zero, error.
.308a	b0 33		bcs $30bf			bcs 	_ULRangePla
.308c	20 ca 2d	jsr $2dca			jsr 	FloatNegate 				; subtract from 1
.308f	e8		inx				inx
.3090	a9 01		lda #$01			lda 	#1
.3092	20 0a 2e	jsr $2e0a			jsr 	FloatSetByte
.3095	20 2c 28	jsr $282c			jsr 	FloatAdd
.3098	20 c2 30	jsr $30c2			jsr 	CoreLog
.309b	20 e1 2f	jsr $2fe1			jsr 	CompletePolynomial
.309e	68		pla				pla 								; add exponent
.309f	18		clc				clc
.30a0	69 1f		adc #$1f			adc 	#31 						; fix up
.30a2	48		pha				pha
.30a3	10 03		bpl $30a8			bpl 	_LogNotNeg
.30a5	49 ff		eor #$ff			eor 	#$FF
.30a7	1a		inc a				inc 	a
.30a8					_LogNotNeg:
.30a8	e8		inx				inx 								; set byte and sign.
.30a9	20 0a 2e	jsr $2e0a			jsr 	FloatSetByte
.30ac	68		pla				pla
.30ad	29 80		and #$80			and 	#$80
.30af	95 35		sta $35,x			sta 	NSStatus,x
.30b1	20 2c 28	jsr $282c			jsr 	FloatAdd
.30b4	a9 23		lda #$23			lda 	#Const_ln_e-Const_Base
.30b6	20 38 30	jsr $3038			jsr 	LoadConstant
.30b9	e8		inx				inx
.30ba	20 c8 2a	jsr $2ac8			jsr 	FloatMultiply
.30bd	18		clc				clc
.30be	60		rts				rts
.30bf					_ULRangePla:
.30bf	68		pla				pla
.30c0					_ULRange:
.30c0	38		sec				sec
.30c1	60		rts				rts
.30c2					CoreLog:
.30c2	a9 ca		lda #$ca			lda 	#LogCoefficients & $FF
.30c4	a0 2e		ldy #$2e			ldy 	#LogCoefficients >> 8
.30c6	4c 35 31	jmp $3135			jmp 	CorePolySquared
.30c9					FloatPI:
.30c9	a9 19		lda #$19			lda 	#Const_pi-Const_Base
.30cb	20 38 30	jsr $3038			jsr 	LoadConstant
.30ce	e8		inx				inx
.30cf	18		clc				clc
.30d0	60		rts				rts
.30d1					FloatPower:
.30d1	ca		dex				dex
.30d2	8a		txa				txa 							; copy 0 to 2, so we can process it
.30d3	a8		tay				tay
.30d4	c8		iny				iny
.30d5	c8		iny				iny
.30d6	20 ec 2f	jsr $2fec			jsr 	CopyFloatXY
.30d9	e8		inx				inx 							; 2 = Log(0)
.30da	e8		inx				inx
.30db	20 5d 30	jsr $305d			jsr 	FloatLogarithm
.30de	b0 0d		bcs $30ed			bcs 	_FPWExit
.30e0	20 c8 2a	jsr $2ac8			jsr 	FloatMultiply			; Multiply by original 1, into 1.
.30e3	8a		txa				txa 							; copy to slot 0
.30e4	a8		tay				tay
.30e5	88		dey				dey
.30e6	20 ec 2f	jsr $2fec			jsr 	CopyFloatXY
.30e9	ca		dex				dex  							; Exponent code.
.30ea	20 5a 2f	jsr $2f5a			jsr 	FloatExponent
.30ed					_FPWExit:
.30ed	60		rts				rts
.30ee					FloatSine:
.30ee	b5 35		lda $35,x			lda 	NSStatus,x 					; save sign
.30f0	48		pha				pha
.30f1	74 35		stz $35,x			stz 	NSStatus,x 					; make +ve
.30f3	a9 00		lda #$00			lda 	#Const_1Div2Pi-Const_Base
.30f5	20 38 30	jsr $3038			jsr 	LoadConstant
.30f8	e8		inx				inx
.30f9	20 c8 2a	jsr $2ac8			jsr 	FloatMultiply
.30fc	20 e8 29	jsr $29e8			jsr 	FloatFractionalPart 		; take the fractional part
.30ff	b5 71		lda $71,x			lda 	NSExponent,x 				; check exponent
.3101	c9 e0		cmp #$e0			cmp 	#$E0 						; < $E0 exponent : 0-0.25
.3103	90 1f		bcc $3124			bcc 	_USProcessExit
.3105	f0 06		beq $310d			beq 	_USSubtractFromHalf 		; = $E0 exponent : 0.25-0.5
.3107	b5 65		lda $65,x			lda 	NSMantissa3,x 				; if > 0.75 which is $60000000:$E1
.3109	c9 60		cmp #$60			cmp 	#$60
.310b	b0 0e		bcs $311b			bcs 	_USSubtractOne
.310d					_USSubtractFromHalf:
.310d	a9 1e		lda #$1e			lda 	#Const_half-Const_Base
.310f	20 38 30	jsr $3038			jsr 	LoadConstant
.3112	e8		inx				inx
.3113	20 26 28	jsr $2826			jsr 	FloatSubtract
.3116	20 ca 2d	jsr $2dca			jsr 	FloatNegate 				; then negate it
.3119	80 09		bra $3124			bra 	_USProcessExit 				; and exit
.311b					_USSubtractOne:
.311b	e8		inx				inx
.311c	a9 01		lda #$01			lda 	#1
.311e	20 0a 2e	jsr $2e0a			jsr 	FloatSetByte
.3121	20 26 28	jsr $2826			jsr 	FloatSubtract
.3124					_USProcessExit:
.3124	20 31 31	jsr $3131			jsr 	CoreSine
.3127	20 e1 2f	jsr $2fe1			jsr 	CompletePolynomial
.312a	68		pla				pla 								; restore sign and apply
.312b	55 35		eor $35,x			eor 	NSStatus,x
.312d	95 35		sta $35,x			sta 	NSStatus,x
.312f	18		clc				clc
.3130	60		rts				rts
.3131					CoreSine:
.3131	a9 a6		lda #$a6			lda 	#SinCoefficients & $FF
.3133	a0 2e		ldy #$2e			ldy 	#SinCoefficients >> 8
.3135					CorePolySquared:
.3135	48		pha				pha 								; save coefficient table
.3136	5a		phy				phy
.3137	8a		txa				txa 								; copy X to +1, +2
.3138	a8		tay				tay
.3139	c8		iny				iny
.313a	20 ec 2f	jsr $2fec			jsr 	CopyFloatXY
.313d	c8		iny				iny
.313e	20 ec 2f	jsr $2fec			jsr 	CopyFloatXY
.3141	e8		inx				inx 								; point to the pair and put x^2 on stack
.3142	e8		inx				inx
.3143	20 c8 2a	jsr $2ac8			jsr 	FloatMultiply
.3146	7a		ply				ply 								; coefficient table back.
.3147	68		pla				pla
.3148	20 b5 2f	jsr $2fb5			jsr 	CalculateHornerPolynomial
.314b	8a		txa				txa 								; copy back to slot #1
.314c	a8		tay				tay
.314d	88		dey				dey
.314e	20 ec 2f	jsr $2fec			jsr	 	CopyFloatXY
.3151	ca		dex				dex 								; point at result
.3152	60		rts				rts
.3153					FloatSquareRoot:
.3153	20 5d 30	jsr $305d			jsr 	FloatLogarithm
.3156	b0 06		bcs $315e			bcs 	_FSQExit
.3158	d6 71		dec $71,x			dec 	NSExponent,x
.315a	20 5a 2f	jsr $2f5a			jsr 	FloatExponent
.315d	18		clc				clc
.315e					_FSQExit:
.315e	60		rts				rts
.315f					FloatTangent:
.315f	da		phx				phx
.3160	8a		txa				txa 								; sin -> +1
.3161	a8		tay				tay
.3162	c8		iny				iny
.3163	20 ec 2f	jsr $2fec			jsr 	CopyFloatXY
.3166	e8		inx				inx
.3167	20 ee 30	jsr $30ee			jsr 	FloatSine
.316a	ca		dex				dex
.316b	8a		txa				txa 								; cos -> +2
.316c	a8		tay				tay
.316d	c8		iny				iny
.316e	c8		iny				iny
.316f	20 ec 2f	jsr $2fec			jsr 	CopyFloatXY
.3172	e8		inx				inx
.3173	e8		inx				inx
.3174	20 4e 2f	jsr $2f4e			jsr 	FloatCosine
.3177	20 51 29	jsr $2951			jsr 	FloatDivide 				; calculate sin/cos
.317a	b0 07		bcs $3183			bcs 	_FTExit 					; divide by zero
.317c	8a		txa				txa 								; copy result down.
.317d	a8		tay				tay
.317e	88		dey				dey
.317f	20 ec 2f	jsr $2fec			jsr 	CopyFloatXY
.3182	18		clc				clc
.3183					_FTExit:
.3183	fa		plx				plx
.3184	60		rts				rts

;******  Processing input file: testing/testend.asm

=$3200							nextPage = (* + $FF) & $FF00 		; so I can include with that f*****g header.
.31fe					ObjectCodePreHeader:
>31fe	00 40 d4 54 00 a6 0e 48				.binary "code/code.bin"
>3206	00 a6 03 c7 a6 cb 93 93 b1 ce 0d 48 45 4c 4c 4f
>3216	20 57 4f 52 4c 44 20 21 b1 0d 92 a6 40 00 01 00
>3226	ca 81 58 03 40 00 01 00 ca 81 58 06 40 00 01 00
>3236	ca 81 58 09 a6 40 00 01 00 ca 81 58 0c 40 00 01
>3246	00 ca 81 58 0f a6 00 48 12 24 40 00 01 95 a6 40
>3256	12 01 50 03 8e 01 b4 28 82 ca 84 02 82 01 80 7c
>3266	a6 40 12 01 50 06 8e 01 b4 1e 82 ca 84 cc 00 01
>3276	82 7c a6 40 12 01 50 09 8e 01 b4 0e 82 ca 84 01
>3286	80 7c a6 40 12 01 50 0c 8e 01 b4 02 82 ca 84 7c
>3296	a6 a6 40 12 01 50 0f 8e 01 7c a6 24 a7 a6 a6 00
>32a6	48 15 2a 1d 01 95 00 48 18 30 27 01 95 a6 40 15
>32b6	cc 00 01 82 40 18 02 82 80 cc 00 b0 80 48 1b a6
>32c6	01 40 1b cb 51 c8 01 40 1b 01 80 00 c8 a6 30 a7
>32d6	2a a7 a6 01 48 12 24 40 00 01 95 a6 01 cc 00 b0
>32e6	40 12 01 50 06 8e 78 80 40 12 01 50 03 8e 78 80
>32f6	00 c8 a6 40 12 01 50 0c 8e 78 48 1e a6 40 1e 00
>3306	a3 88 d2 05 00 d1 55 00 a6 40 1e 01 a3 88 d2 05
>3316	00 d1 73 00 a6 40 12 01 50 0f 8e 78 48 21 a6 40
>3326	21 00 a3 88 d2 05 00 d1 91 00 a6 40 21 01 a3 88
>3336	d2 05 00 d1 b1 00 a6 01 cc 00 b0 40 12 01 50 06
>3346	8e 78 80 40 12 01 50 03 8e 78 80 40 12 01 50 09
>3356	8e 78 c8 a6 24 a7 a6 d0 7a ff a6 a6 40 12 01 50
>3366	03 8e 78 48 24 a6 40 24 01 a3 88 d2 0b 00 40 12
>3376	01 50 0c 8e 01 7c 98 a6 40 12 01 50 03 8e 40 24
>3386	02 81 7c 98 a6 a6 40 12 01 50 03 8e 78 48 24 a6
>3396	40 24 cb 4f a3 88 d2 14 00 40 12 01 50 03 8e cb
>33a6	4d 7c 40 12 01 50 0c 8e 00 7c 98 a6 40 12 01 50
>33b6	03 8e 40 24 02 80 7c 98 a6 a6 40 12 01 50 06 8e
>33c6	78 48 27 a6 40 27 00 a3 88 d2 0b 00 40 12 01 50
>33d6	0f 8e 01 7c 98 a6 40 12 01 50 06 8e 40 27 cc 00
>33e6	01 81 7c 98 a6 a6 40 12 01 50 06 8e 78 48 27 a6
>33f6	40 27 cc 00 1d a3 88 d2 15 00 40 12 01 50 06 8e
>3406	cc 00 1c 7c 40 12 01 50 0f 8e 00 7c 98 a6 40 12
>3416	01 50 06 8e 40 27 cc 00 01 80 7c 98 c4 ff
=12800					ObjectCode = ObjectCodePreHeader+2 			; so the code is at XX00

;******  End of listing
