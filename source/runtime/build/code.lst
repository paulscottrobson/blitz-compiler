
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass -q -c -Wall -o build/code.prg -L build/code.lst -l build/code.lbl testing/testing.asm /home/paulr/Projects/blitz-compiler/documents/../bin/runtime.library /home/paulr/Projects/blitz-compiler/documents/../bin/common.library /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library /home/paulr/Projects/blitz-compiler/documents/../bin/polynomials.library testing/testend.asm
; Wed Oct 11 10:55:44 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: testing/testing.asm

.0801					WrapperBoot:
.0801	a9 2a		lda #$2a			lda 	#ObjectCode >> 8 			; address of object code to run.
.0803	a2 81		ldx #$81			ldx 	#$81 						; first page of allocatable memory
.0805	a0 9f		ldy #$9f			ldy 	#$9F 						; byte after end of last page.
.0807	20 0d 08	jsr $080d			jsr 	StartRuntime 				; try to run it
.080a	4c ff ff	jmp $ffff			jmp 	$FFFF 						; then exit.

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/runtime.library

.0022					zsTemp:
>0022							.fill 	2
.0024					runtimeStackPtr:
>0024							.fill 	2
.0400					stringLowMemory:
>0400							.fill 	2
.0402					stringHighMemory:
>0402							.fill 	2
=$e4					FRAME_GOSUB = $E4 							; Gosub has 4 bytes
=211					FRAME_FOR = $C0+19 							; For has 19 bytes
=$9f20					VRAMLow0 = $9F20
=$9f21					VRAMMed0 = $9F21
=$9f22					VRAMHigh0 = $9F22
=$9f23					VRAMData0 = $9F23
=$c09f					X16A_audio_init=$C09F
=$c08d					X16A_bas_fmchordstring=$C08D
=$c000					X16A_bas_fmfreq=$C000
=$c003					X16A_bas_fmnote=$C003
=$c006					X16A_bas_fmplaystring=$C006
=$c009					X16A_bas_fmvib=$C009
=$c00c					X16A_bas_playstringvoice=$C00C
=$c090					X16A_bas_psgchordstring=$C090
=$c00f					X16A_bas_psgfreq=$C00F
=$c012					X16A_bas_psgnote=$C012
=$c015					X16A_bas_psgwav=$C015
=$c018					X16A_bas_psgplaystring=$C018
=$c01b					X16A_notecon_bas2fm=$C01B
=$c01e					X16A_notecon_bas2midi=$C01E
=$c021					X16A_notecon_bas2psg=$C021
=$c024					X16A_notecon_fm2bas=$C024
=$c027					X16A_notecon_fm2midi=$C027
=$c02a					X16A_notecon_fm2psg=$C02A
=$c02d					X16A_notecon_freq2bas=$C02D
=$c030					X16A_notecon_freq2fm=$C030
=$c033					X16A_notecon_freq2midi=$C033
=$c036					X16A_notecon_freq2psg=$C036
=$c039					X16A_notecon_midi2bas=$C039
=$c03c					X16A_notecon_midi2fm=$C03C
=$c03f					X16A_notecon_midi2psg=$C03F
=$c042					X16A_notecon_psg2bas=$C042
=$c045					X16A_notecon_psg2fm=$C045
=$c048					X16A_notecon_psg2midi=$C048
=$c093					X16A_psg_getatten=$C093
=$c096					X16A_psg_getpan=$C096
=$c04b					X16A_psg_init=$C04B
=$c04e					X16A_psg_playfreq=$C04E
=$c051					X16A_psg_read=$C051
=$c054					X16A_psg_setatten=$C054
=$c057					X16A_psg_setfreq=$C057
=$c05a					X16A_psg_setpan=$C05A
=$c05d					X16A_psg_setvol=$C05D
=$c060					X16A_psg_write=$C060
=$c0a2					X16A_psg_write_fast=$C0A2
=$c099					X16A_ym_getatten=$C099
=$c09c					X16A_ym_getpan=$C09C
=$c063					X16A_ym_init=$C063
=$c066					X16A_ym_loaddefpatches=$C066
=$c069					X16A_ym_loadpatch=$C069
=$c06c					X16A_ym_loadpatchlfn=$C06C
=$c06f					X16A_ym_playdrum=$C06F
=$c072					X16A_ym_playnote=$C072
=$c075					X16A_ym_setatten=$C075
=$c078					X16A_ym_setdrum=$C078
=$c07b					X16A_ym_setnote=$C07B
=$c07e					X16A_ym_setpan=$C07E
=$c081					X16A_ym_read=$C081
=$c084					X16A_ym_release=$C084
=$c087					X16A_ym_trigger=$C087
=$c08a					X16A_ym_write=$C08A
=2					X16_r0 = 2
=4					X16_r1 = 4
=6					X16_r2 = 6
=8					X16_r3 = 8
=10					X16_r4 = 10
=$ffa5					X16_ACPTR=$FFA5
=$ffcf					X16_BASIN=$FFCF
=$feba					X16_BSAVE=$FEBA
=$ffd2					X16_BSOUT=$FFD2
=$ffa8					X16_CIOUT=$FFA8
=$ffe7					X16_CLALL=$FFE7
=$ffc3					X16_CLOSE=$FFC3
=$ffc6					X16_CHKIN=$FFC6
=$ffc9					X16_CHKOUT=$FFC9
=$ff50					X16_clock_get_date_time=$FF50
=$ff4d					X16_clock_set_date_time=$FF4D
=$ffcf					X16_CHRIN=$FFCF
=$ffd2					X16_CHROUT=$FFD2
=$ff4a					X16_CLOSE_ALL=$FF4A
=$ffcc					X16_CLRCHN=$FFCC
=$fedb					X16_console_init=$FEDB
=$fee1					X16_console_get_char=$FEE1
=$fede					X16_console_put_char=$FEDE
=$fed8					X16_console_put_image=$FED8
=$fed5					X16_console_set_paging_message=$FED5
=$ff47					X16_enter_basic=$FF47
=$fecf					X16_entropy_get=$FECF
=$ff74					X16_fetch=$FF74
=$ff02					X16_FB_cursor_next_line=$FF02
=$feff					X16_FB_cursor_position=$FEFF
=$ff17					X16_FB_fill_pixels=$FF17
=$ff1a					X16_FB_filter_pixels=$FF1A
=$fef9					X16_FB_get_info=$FEF9
=$ff05					X16_FB_get_pixel=$FF05
=$ff08					X16_FB_get_pixels=$FF08
=$fef6					X16_FB_init=$FEF6
=$ff1d					X16_FB_move_pixels=$FF1D
=$ff11					X16_FB_set_8_pixels=$FF11
=$ff14					X16_FB_set_8_pixels_opaque=$FF14
=$fefc					X16_FB_set_palette=$FEFC
=$ff0b					X16_FB_set_pixel=$FF0B
=$ff0e					X16_FB_set_pixels=$FF0E
=$ffe4					X16_GETIN=$FFE4
=$ff23					X16_GRAPH_clear=$FF23
=$ff38					X16_GRAPH_draw_image=$FF38
=$ff2c					X16_GRAPH_draw_line=$FF2C
=$ff35					X16_GRAPH_draw_oval=$FF35
=$ff2f					X16_GRAPH_draw_rect=$FF2F
=$ff3e					X16_GRAPH_get_char_size=$FF3E
=$ff20					X16_GRAPH_init=$FF20
=$ff32					X16_GRAPH_move_rect=$FF32
=$ff41					X16_GRAPH_put_char=$FF41
=$ff29					X16_GRAPH_set_colors=$FF29
=$ff3b					X16_GRAPH_set_font=$FF3B
=$ff26					X16_GRAPH_set_window=$FF26
=$fec6					X16_i2c_read_byte=$FEC6
=$fec9					X16_i2c_write_byte=$FEC9
=$fff3					X16_IOBASE=$FFF3
=$ff6e					X16_JSRFAR=$FF6E
=$ff56					X16_joystick_get=$FF56
=$ff53					X16_joystick_scan=$FF53
=$fec0					X16_kbdbuf_get_modifiers=$FEC0
=$febd					X16_kbdbuf_peek=$FEBD
=$fec3					X16_kbdbuf_put=$FEC3
=$fed2					X16_keymap=$FED2
=$ffb1					X16_LISTEN=$FFB1
=$ff59					X16_LKUPLA=$FF59
=$ff5c					X16_LKUPSA=$FF5C
=$ffd5					X16_LOAD=$FFD5
=$ff44					X16_MACPTR=$FF44
=$ff9c					X16_MEMBOT=$FF9C
=$fee7					X16_memory_copy=$FEE7
=$feea					X16_memory_crc=$FEEA
=$feed					X16_memory_decompress=$FEED
=$fee4					X16_memory_fill=$FEE4
=$ff99					X16_MEMTOP=$FF99
=$fecc					X16_monitor=$FECC
=$ff68					X16_mouse_config=$FF68
=$ff6b					X16_mouse_get=$FF6B
=$ff71					X16_mouse_scan=$FF71
=$ffc0					X16_OPEN=$FFC0
=$ff65					X16_PFKEY=$FF65
=$fff0					X16_PLOT=$FFF0
=$ff7d					X16_PRIMM=$FF7D
=$ffde					X16_RDTIM=$FFDE
=$ffb7					X16_READST=$FFB7
=$ffd8					X16_SAVE=$FFD8
=$ffed					X16_SCREEN=$FFED
=$ff5f					X16_screen_mode=$FF5F
=$ff62					X16_screen_set_charset=$FF62
=$ff93					X16_SECOND=$FF93
=$ffba					X16_SETLFS=$FFBA
=$ff90					X16_SETMSG=$FF90
=$ffbd					X16_SETNAM=$FFBD
=$ffdb					X16_SETTIM=$FFDB
=$ffa2					X16_SETTMO=$FFA2
=$fef0					X16_sprite_set_image=$FEF0
=$fef3					X16_sprite_set_position=$FEF3
=$ff77					X16_stash=$FF77
=$ffe1					X16_STOP=$FFE1
=$ffb4					X16_TALK=$FFB4
=$ff96					X16_TKSA=$FF96
=$ffea					X16_UDTIM=$FFEA
=$ffae					X16_UNLSN=$FFAE
=$ffab					X16_UNTLK=$FFAB
=$311					USRRoutineAddress = $311
=$30c					SYS_Reg_A = $30C
=$30d					SYS_Reg_X = $30D
=$30e					SYS_Reg_Y = $30E
=$30f					SYS_Reg_S = $30F
=0					SelectRAMBank = 0
=1					SelectROMBank = 1
=$0a					X16_AudioCodeBank = $0A
.080d					StartRuntime:
.080d	8d 04 04	sta $0404			sta 	runtimeHigh 				; save address of code.
.0810	85 29		sta $29				sta 	codePtr+1 					; set pointer to code.
.0812	64 28		stz $28				stz 	codePtr
.0814	8e 05 04	stx $0405			stx 	storeStartHigh 				; save from-to address.
.0817	8c 06 04	sty $0406			sty 	storeEndHigh
.081a	8e 07 04	stx $0407			stx 	variableStartPage
.081d	ba		tsx				tsx 								; save the stack.
.081e	8e 08 04	stx $0408			stx 	Runtime6502SP
.0821	a0 0c		ldy #$0c			ldy 	#RuntimeErrorHandler >> 8 	; set error handler to runtime one.
.0823	a2 3e		ldx #$3e			ldx 	#RuntimeErrorHandler & $FF
.0825	20 cf 1e	jsr $1ecf			jsr 	SetErrorHandler
.0828	20 6b 0a	jsr $0a6b			jsr 	ClearMemory 				; clear memory.
.082b	20 4d 16	jsr $164d			jsr 	XRuntimeSetup 				; initialise the runtime stuff.
.082e	20 4f 13	jsr $134f		 	jsr		SetDefaultChannel			; set default input/output channel.
.0831	20 85 15	jsr $1585			jsr 	RestoreCode 				; which we now call
.0834	a0 00		ldy #$00			ldy 	#0
.0836					NextCommand:
.0836	ad 09 04	lda $0409			lda  	breakCount 					; only check every 16 instructions.
.0839	69 10		adc #$10			adc 	#16
.083b	8d 09 04	sta $0409			sta 	breakCount
.083e	90 07		bcc $0847			bcc 	_NXNoCheck
.0840	da		phx				phx
.0841	5a		phy				phy 								; check Ctrl+C
.0842	20 87 1b	jsr $1b87			jsr 	XCheckStop
.0845	7a		ply				ply
.0846	fa		plx				plx
.0847					_NXNoCheck:
.0847	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.0849	30 5b		bmi $08a6			bmi 	NXCommand 					; -if -ve command
.084b	c8		iny				iny
.084c	c9 40		cmp #$40			cmp 	#64 						; 64..127 is load and store.
.084e	90 39		bcc $0889			bcc 	PushByteA 					; 0..63 is short constants.
.0850					NXLoadStore:
.0850	c9 78		cmp #$78			cmp		#120 						; is it an indirect read/write
.0852	b0 19		bcs $086d			bcs 	NXIndirectLoadStore
.0854	4a		lsr a				lsr 	a 							; / 4, so $48 => $12,
.0855	4a		lsr a				lsr 	a
.0856	29 0e		and #$0e			and 	#$0E
.0858	da		phx				phx 								; get ready to jump
.0859	aa		tax				tax
.085a	7c 5d 08	jmp ($085d,x)			jmp 	(ReadWriteVectors,x) 		; go via the jump table.
.085d					ReadWriteVectors:
>085d	bb 14						.word 	ReadFloatCommand			; read float
>085f	96 1a						.word 	WriteFloatCommand 			; write float
>0861	f7 14						.word 	ReadIntegerCommand 			; read integer
>0863	d2 1a						.word 	WriteIntegerCommand 		; write integer
>0865	3c 15						.word 	ReadStringCommand 			; read string
>0867	11 1b						.word 	WriteStringCommand 			; write string
>0869	3b 0c						.word 	Unimplemented
>086b	3b 0c						.word 	Unimplemented
.086d					NXIndirectLoadStore:
.086d	29 07		and #$07			and 	#7
.086f	0a		asl a				asl 	a
.0870	da		phx				phx
.0871	aa		tax				tax
.0872	7c 75 08	jmp ($0875,x)			jmp 	(IndirectVectors,x)
.0875					IndirectVectors:
>0875	f1 0e						.word 	IndFloatRead 				; float read
>0877	05 0f						.word 	IndInt16Read 				; int16 read
>0879	19 0f						.word 	IndStringRead 				; string read
>087b	3b 0c						.word 	Unimplemented
>087d	2d 0f						.word 	IndFloatWrite				; float write
>087f	41 0f						.word 	IndInt16Write 				; int16 write
>0881	55 0f						.word 	IndStringWrite 				; string write
>0883	3b 0c						.word 	Unimplemented
.0885					PushByteCommand:
.0885	fa		plx				plx
.0886	b1 28		lda ($28),y			lda 	(codePtr),y 				; get byte to write.
.0888	c8		iny				iny
.0889					PushByteA:
.0889	e8		inx				inx 								; push constant on stack
.088a	95 3e		sta $3e,x			sta 	NSMantissa0,x 				; save byte
.088c	74 4a		stz $4a,x			stz 	NSMantissa1,x 				; clear MSB
.088e					ClearRestWord:
.088e	74 56		stz $56,x			stz 	NSMantissa2,x 				; zero upper bytes, exponent, make iFloat32
.0890	74 62		stz $62,x			stz 	NSMantissa3,x
.0892	74 6e		stz $6e,x			stz 	NSExponent,x
.0894	74 32		stz $32,x			stz 	NSStatus,x
.0896	80 9e		bra $0836			bra 	NextCommand
.0898					PushWordCommand:
.0898	fa		plx				plx
.0899	e8		inx				inx
.089a	b1 28		lda ($28),y			lda 	(codePtr),y 				; word to stack
.089c	c8		iny				iny
.089d	95 3e		sta $3e,x			sta 	NSMantissa0,x
.089f	b1 28		lda ($28),y			lda 	(codePtr),y
.08a1	c8		iny				iny
.08a2	95 4a		sta $4a,x			sta 	NSMantissa1,x
.08a4	80 e8		bra $088e			bra 	ClearRestWord 				; handle everything else.
.08a6					NXCommand:
.08a6	c8		iny				iny 								; consume command.
.08a7	10 03		bpl $08ac			bpl 	_NXCommandNoFixUp
.08a9	20 b2 08	jsr $08b2			jsr 	FixUpY
.08ac					_NXCommandNoFixUp:
.08ac	0a		asl a				asl 	a 							; shift left
.08ad	da		phx				phx 								; save SP on stack
.08ae	aa		tax				tax				 					; and jump indirect
.08af	7c 77 19	jmp ($1977,x)			jmp 	(VectorTable,x)
.08b2					FixUpY:
.08b2	48		pha				pha
.08b3	98		tya				tya
.08b4	18		clc				clc
.08b5	65 28		adc $28				adc 	codePtr
.08b7	85 28		sta $28				sta 	codePtr
.08b9	90 02		bcc $08bd			bcc 	_NoCPCarry
.08bb	e6 29		inc $29				inc 	codePtr+1
.08bd					_NoCPCarry:
.08bd	a0 00		ldy #$00			ldy 	#0
.08bf	68		pla				pla
.08c0	60		rts				rts
.0404					runtimeHigh:
>0404							.fill 	1
.0405					storeStartHigh:
>0405							.fill 	1
.0406					storeEndHigh:
>0406							.fill 	1
.0407					variableStartPage:
>0407							.fill 	1
.0408					Runtime6502SP:
>0408							.fill 	1
.0409					breakCount:
>0409							.fill 	1
.08c1					AbsoluteTOS:
.08c1	fa		plx				plx
.08c2	74 32		stz $32,x			stz 	NSStatus,x 					; dereferenced so just clear the status byte.
.08c4	4c 36 08	jmp $0836			jmp 	NextCommand
.08c7					CommandVarSpace:
.08c7	fa		plx				plx
.08c8	b1 28		lda ($28),y			lda 	(codePtr),y					; 3 byte opcode, which is 'free' memory in variable area.
.08ca	85 26		sta $26				sta 	availableMemory
.08cc	c8		iny				iny
.08cd	b1 28		lda ($28),y			lda 	(codePtr),y
.08cf	18		clc				clc
.08d0	6d 07 04	adc $0407			adc 	variableStartPage			; offset to actual address.
.08d3	85 27		sta $27				sta 	availableMemory+1
.08d5	c8		iny				iny
.08d6	4c 36 08	jmp $0836			jmp 	NextCommand
.0026					availableMemory:
>0026							.fill 	2
.08d9					BinaryAnd:
.08d9	fa		plx				plx
.08da	38		sec				sec
.08db	80 02		bra $08df			bra 	AndOrCommon
.08dd					BinaryOr:
.08dd	fa		plx				plx
.08de	18		clc				clc
.08df					AndOrCommon:
.08df	08		php				php 								; save AND/OR flag
.08e0	20 2c 10	jsr $102c			jsr 	GetInteger16Bit
.08e3	ca		dex				dex
.08e4	20 2c 10	jsr $102c			jsr 	GetInteger16Bit
.08e7	28		plp				plp
.08e8	90 0e		bcc $08f8			bcc 	_AOCOrCode
.08ea	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; AND code
.08ec	35 3f		and $3f,x			and		NSMantissa0+1,x
.08ee	95 3e		sta $3e,x			sta 	NSMantissa0,x
.08f0	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.08f2	35 4b		and $4b,x			and		NSMantissa1+1,x
.08f4	95 4a		sta $4a,x			sta 	NSMantissa1,x
.08f6	80 0c		bra $0904			bra 	_AOCComplete
.08f8					_AOCOrCode:
.08f8	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; OR code
.08fa	15 3f		ora $3f,x			ora		NSMantissa0+1,x
.08fc	95 3e		sta $3e,x			sta 	NSMantissa0,x
.08fe	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.0900	15 4b		ora $4b,x			ora		NSMantissa1+1,x
.0902	95 4a		sta $4a,x			sta 	NSMantissa1,x
.0904					_AOCComplete:
.0904	74 32		stz $32,x			stz 	NSStatus,x 					; make integer ?
.0906	34 4a		bit $4a,x			bit 	NSMantissa1,x 				; result is -ve
.0908	10 07		bpl $0911			bpl 	_AOCExit
.090a	20 3c 10	jsr $103c			jsr 	Negate16Bit 				; 2's complement
.090d	a9 80		lda #$80			lda 	#$80 						; make it -ve
.090f	95 32		sta $32,x			sta 	NSStatus,x
.0911					_AOCExit:
.0911	4c 36 08	jmp $0836			jmp 	NextCommand
.0914					ArrayConvert:
.0914	fa		plx				plx
.0915	5a		phy				phy
.0916	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.0918	85 2e		sta $2e				sta 	zTemp1
.091a	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.091c	18		clc				clc
.091d	6d 07 04	adc $0407			adc 	variableStartPage
.0920	85 2f		sta $2f				sta 	zTemp1+1
.0922	ca		dex				dex 								; count of indices to follow -> zTemp2
.0923	20 26 10	jsr $1026			jsr 	GetInteger8Bit
.0926	85 30		sta $30				sta 	zTemp2 						; subtract from stack.
.0928	8a		txa				txa
.0929	38		sec				sec
.092a	e5 30		sbc $30				sbc 	zTemp2
.092c	aa		tax				tax
.092d	da		phx				phx 								; stack points at the first index, which will be replaced.
.092e					_ACIndexLoop:
.092e	20 88 22	jsr $2288			jsr 	FloatIntegerPart 			; integer array index
.0931	20 2c 10	jsr $102c			jsr 	GetInteger16Bit 			; get the index => zTemp0
.0934	a0 01		ldy #$01			ldy 	#1 							; compare against the index count.
.0936	a5 2c		lda $2c				lda 	zTemp0
.0938	d2 2e		cmp ($2e)			cmp 	(zTemp1)
.093a	a5 2d		lda $2d				lda 	zTemp0+1
.093c	f1 2e		sbc ($2e),y			sbc 	(zTemp1),y
.093e	b0 79		bcs $09b9			bcs 	_ACBadIndex 				; index error.
.0940	c6 30		dec $30				dec 	zTemp2 						; decrement count, if zero, then innermost level
.0942	f0 29		beq $096d			beq 	_ACInnerLevel
.0944	a0 02		ldy #$02			ldy 	#2 							; check sub index.
.0946	b1 2e		lda ($2e),y			lda 	(zTemp1),y
.0948	10 6f		bpl $09b9			bpl 	_ACBadIndex
.094a	06 2c		asl $2c				asl 	zTemp0 						; double the index and add it to the base address
.094c	26 2d		rol $2d				rol 	zTemp0+1
.094e	18		clc				clc
.094f	a5 2c		lda $2c				lda		zTemp0
.0951	65 2e		adc $2e				adc 	zTemp1
.0953	85 2c		sta $2c				sta 	zTemp0
.0955	a5 2d		lda $2d				lda		zTemp0+1
.0957	65 2f		adc $2f				adc 	zTemp1+1
.0959	85 2d		sta $2d				sta 	zTemp0+1
.095b	a0 03		ldy #$03			ldy 	#3 							; we offset by 3 because 3 at entry, now get the address
.095d	b1 2c		lda ($2c),y			lda 	(zTemp0),y 					; into zTemp1 as a real address, not offset
.095f	85 2e		sta $2e				sta 	zTemp1
.0961	c8		iny				iny
.0962	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.0964	18		clc				clc
.0965	6d 07 04	adc $0407			adc 	variableStartPage
.0968	85 2f		sta $2f				sta 	zTemp1+1
.096a	e8		inx				inx 								; next index
.096b	80 c1		bra $092e			bra 	_ACIndexLoop
.096d					_ACInnerLevel:
.096d	a0 02		ldy #$02			ldy 	#2
.096f	b1 2e		lda ($2e),y			lda 	(zTemp1),y
.0971	30 46		bmi $09b9			bmi 	_ACBadIndex 				; it has sub arrays, so bad index.
.0973	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16 		; check if it is an iFloat
.0975	c9 00		cmp #$00			cmp 	#NSSIFloat
.0977	d0 13		bne $098c			bne 	_ACNotFloat
.0979	a5 2d		lda $2d				lda 	zTemp0+1 					; double and add zTemp0 (x3)
.097b	48		pha				pha
.097c	a5 2c		lda $2c				lda 	zTemp0
.097e	06 2c		asl $2c				asl 	zTemp0 						; x 2
.0980	26 2d		rol $2d				rol 	zTemp0+1
.0982	18		clc				clc 								; add back x 3
.0983	65 2c		adc $2c				adc 	zTemp0
.0985	85 2c		sta $2c				sta 	zTemp0
.0987	68		pla				pla
.0988	65 2d		adc $2d				adc 	zTemp0+1
.098a	85 2d		sta $2d				sta 	zTemp0+1
.098c					_ACNotFloat:
.098c	06 2c		asl $2c				asl 	zTemp0 						; x 2 or x 6 depending.
.098e	26 2d		rol $2d				rol 	zTemp0+1
.0990	18		clc				clc
.0991	a5 2c		lda $2c				lda 	zTemp0
.0993	69 03		adc #$03			adc 	#3
.0995	85 2c		sta $2c				sta 	zTemp0
.0997	90 02		bcc $099b			bcc 	_ACNoCarry
.0999	e6 2d		inc $2d				inc 	zTemp0+1
.099b					_ACNoCarry:
.099b	fa		plx				plx 								; X points to first slot of array parameters
.099c	18		clc				clc
.099d	a5 2c		lda $2c				lda 	zTemp0
.099f	65 2e		adc $2e				adc 	zTemp1
.09a1	95 3e		sta $3e,x			sta 	NSMantissa0,x
.09a3	a5 2d		lda $2d				lda 	zTemp0+1
.09a5	65 2f		adc $2f				adc 	zTemp1+1
.09a7	38		sec				sec
.09a8	ed 07 04	sbc $0407			sbc 	variableStartPage
.09ab	95 4a		sta $4a,x			sta 	NSMantissa1,x
.09ad	74 56		stz $56,x			stz 	NSMantissa2,x
.09af	74 62		stz $62,x			stz 	NSMantissa3,x
.09b1	74 32		stz $32,x			stz 	NSStatus,x
.09b3	74 6e		stz $6e,x			stz 	NSExponent,x
.09b5	7a		ply				ply 	 							; restore code pointer
.09b6	4c 36 08	jmp $0836			jmp 	NextCommand
.09b9					_ACBadIndex:
.09b9	4c d1 1f	jmp $1fd1		jmp	ErrorV_index
.09bc					UnaryAsc:
.09bc	fa		plx				plx
.09bd	5a		phy				phy
.09be	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; string address.
.09c0	85 2c		sta $2c				sta 	zTemp0
.09c2	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.09c4	85 2d		sta $2d				sta 	zTemp0+1
.09c6	b2 2c		lda ($2c)			lda 	(zTemp0) 					; if empty string return zero
.09c8	f0 06		beq $09d0			beq 	_UAExit
.09ca	5a		phy				phy 								; otherwise first character
.09cb	a0 01		ldy #$01			ldy 	#1
.09cd	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.09cf	7a		ply				ply
.09d0					_UAExit:
.09d0	20 4f 26	jsr $264f			jsr 	FloatSetByte
.09d3	7a		ply				ply
.09d4	4c 36 08	jmp $0836			jmp 	NextCommand
.09d7					CommandAssert:
.09d7	fa		plx				plx
.09d8	e0 00		cpx #$00			cpx 	#0 							; check only one element on stack
.09da	d0 09		bne $09e5			bne 	_CAFail
.09dc	20 6f 26	jsr $266f			jsr 	FloatIsZero 				; is it zero ?
.09df	f0 04		beq $09e5			beq 	_CAFail
.09e1	ca		dex				dex
.09e2	4c 36 08	jmp $0836			jmp 	NextCommand
.09e5					_CAFail:
.09e5	4c 2a 1f	jmp $1f2a		jmp	ErrorV_assert
.09e8					X16_Audio_Parameters8_16:
.09e8	20 ee 09	jsr $09ee			jsr 	X16_Audio_Parameters8_8
.09eb	a4 4b		ldy $4b				ldy 	NSMantissa1+1
.09ed	60		rts				rts
.09ee					X16_Audio_Parameters8_8:
.09ee	a2 01		ldx #$01			ldx 	#1
.09f0	20 88 22	jsr $2288			jsr 	FloatIntegerPart
.09f3	ca		dex				dex
.09f4	20 88 22	jsr $2288			jsr 	FloatIntegerPart
.09f7	20 26 10	jsr $1026			jsr 	GetInteger8Bit
.09fa	a6 3f		ldx $3f				ldx 	NSMantissa0+1
.09fc	a0 00		ldy #$00			ldy 	#0
.09fe	60		rts				rts
.09ff					X16_Audio_Parameters8_String:
.09ff	20 e8 09	jsr $09e8			jsr 	X16_Audio_Parameters8_16 	; get as numbers.
.0a02	da		phx				phx 								; set the voice
.0a03	5a		phy				phy
.0a04	20 6e ff	jsr $ff6e			jsr 	X16_JSRFAR
.0a07	20 0c c0	jsr $c00c			jsr 	X16A_bas_playstringvoice
>0a0a	0a						.byte 	X16_AudioCodeBank
.0a0b	7a		ply				ply
.0a0c	fa		plx				plx
.0a0d	86 2c		stx $2c				stx 	zTemp0
.0a0f	84 2d		sty $2d				sty 	zTemp0+1
.0a11	b2 2c		lda ($2c)			lda 	(zTemp0) 					; read length
.0a13	e8		inx				inx 								; point YX to first character.
.0a14	d0 01		bne $0a17			bne 	_X16APSSkip
.0a16	c8		iny				iny
.0a17					_X16APSSkip:
.0a17	60		rts				rts
.0a18					Unary16Bin:
.0a18	fa		plx				plx
.0a19	20 2c 10	jsr $102c			jsr 	GetInteger16Bit				; 16 bit int
.0a1c	a9 10		lda #$10			lda 	#16 						; allocate / set 16 bytes.
.0a1e	20 f6 16	jsr $16f6			jsr 	StringAllocTemp
.0a21	a5 2d		lda $2d				lda 	zTemp0+1
.0a23	f0 03		beq $0a28			beq 	_UBNoHigh
.0a25	20 30 0a	jsr $0a30			jsr 	_UBWriteBinary
.0a28					_UBNoHigh:
.0a28	a5 2c		lda $2c				lda 	zTemp0
.0a2a	20 30 0a	jsr $0a30			jsr 	_UBWriteBinary
.0a2d	4c 36 08	jmp $0836			jmp 	NextCommand
.0a30					_UBWriteBinary:
.0a30	5a		phy				phy
.0a31	a0 08		ldy #$08			ldy 	#8
.0a33					_UBWLoop:
.0a33	0a		asl a				asl 	a
.0a34	48		pha				pha
.0a35	a9 00		lda #$00			lda  	#0
.0a37	69 30		adc #$30			adc 	#48
.0a39	20 1f 17	jsr $171f			jsr 	StringWriteChar
.0a3c	68		pla				pla
.0a3d	88		dey				dey
.0a3e	d0 f3		bne $0a33			bne 	_UBWLoop
.0a40	7a		ply				ply
.0a41	60		rts				rts
.0a42					PrintCharacterX:
.0a42	fa		plx				plx
.0a43	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.0a45	ca		dex				dex
.0a46	20 53 13	jsr $1353			jsr 	VectorPrintCharacter
.0a49	4c 36 08	jmp $0836			jmp 	NextCommand
.0a4c					UnaryChr:
.0a4c	fa		plx				plx
.0a4d	20 26 10	jsr $1026			jsr 	GetInteger8Bit 				; get integer to convert.
.0a50	48		pha				pha 								; save it and allocate for it
.0a51	a9 01		lda #$01			lda 	#1 							; 1 character
.0a53	20 f6 16	jsr $16f6			jsr 	StringAllocTemp
.0a56	a9 01		lda #$01			lda 	#1 							; length 1.
.0a58	92 22		sta ($22)			sta 	(zsTemp)
.0a5a	68		pla				pla 								; character code makes string.
.0a5b	5a		phy				phy
.0a5c	a0 01		ldy #$01			ldy 	#1
.0a5e	91 22		sta ($22),y			sta 	(zsTemp),y
.0a60	7a		ply				ply
.0a61	4c 36 08	jmp $0836			jmp 	NextCommand
.0a64					CommandClr:
.0a64	fa		plx				plx
.0a65	20 6b 0a	jsr $0a6b			jsr 	ClearMemory
.0a68	4c 36 08	jmp $0836			jmp 	NextCommand
.0a6b					ClearMemory:
.0a6b	ad 05 04	lda $0405			lda 	storeStartHigh 							; erase the work area
.0a6e	85 2d		sta $2d				sta 	zTemp0+1
.0a70	64 2c		stz $2c				stz 	zTemp0
.0a72	5a		phy				phy
.0a73	a0 00		ldy #$00			ldy 	#0
.0a75					_ClearLoop1:
.0a75	a9 00		lda #$00			lda 	#0
.0a77	91 2c		sta ($2c),y			sta 	(zTemp0),y
.0a79	c8		iny				iny
.0a7a	d0 f9		bne $0a75			bne 	_ClearLoop1
.0a7c	e6 2d		inc $2d				inc 	zTemp0+1
.0a7e	a5 2d		lda $2d				lda 	zTemp0+1
.0a80	cd 06 04	cmp $0406			cmp 	storeEndHigh
.0a83	d0 f0		bne $0a75			bne 	_ClearLoop1
.0a85	38		sec				sec 											; stack space = number of pages in total / 4
.0a86	ad 06 04	lda $0406			lda 	storeEndHigh
.0a89	ed 05 04	sbc $0405			sbc		storeStartHigh
.0a8c	4a		lsr a				lsr 	a
.0a8d	4a		lsr a				lsr 	a
.0a8e	d0 02		bne $0a92			bne 	_NotEmpty 								; at least 1 !
.0a90	a9 01		lda #$01			lda 	#1
.0a92					_NotEmpty:
.0a92	38		sec				sec 											; subtract from high to give string high memory
.0a93	49 ff		eor #$ff			eor 	#$FF
.0a95	6d 06 04	adc $0406			adc 	storeEndHigh
.0a98	8d 03 04	sta $0403			sta 	stringHighMemory+1
.0a9b	9c 02 04	stz $0402			stz 	stringHighMemory
.0a9e	9c 6a 05	stz $056a			stz 	stringInitialised 						; string system not initialised
.0aa1	ad 05 04	lda $0405			lda 	storeStartHigh 							; stack at end of start memory.
.0aa4	3a		dec a				dec 	a
.0aa5	85 25		sta $25				sta 	runtimeStackPtr+1
.0aa7	a9 ff		lda #$ff			lda 	#$FF
.0aa9	85 24		sta $24				sta 	runtimeStackPtr
.0aab	a9 ff		lda #$ff			lda 	#$FF 									; duff marker in case we try to remove it.
.0aad	92 24		sta ($24)			sta 	(runtimeStackPtr)
.0aaf	7a		ply				ply
.0ab0	60		rts				rts
.0ab1					CompareStrings:
.0ab1	fa		plx				plx
.0ab2	ca		dex				dex
.0ab3	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; copy strings to zTemp0 and zTemp1
.0ab5	85 2c		sta $2c				sta 	zTemp0
.0ab7	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.0ab9	85 2d		sta $2d				sta 	zTemp0+1
.0abb	b5 3f		lda $3f,x			lda 	NSMantissa0+1,x
.0abd	85 2e		sta $2e				sta 	zTemp1
.0abf	b5 4b		lda $4b,x			lda 	NSMantissa1+1,x
.0ac1	85 2f		sta $2f				sta 	zTemp1+1
.0ac3	da		phx				phx
.0ac4	5a		phy				phy
.0ac5	b2 2c		lda ($2c)			lda 	(zTemp0)					; work out number to compare
.0ac7	d2 2e		cmp ($2e)			cmp 	(zTemp1)
.0ac9	90 02		bcc $0acd			bcc 	_CSNIsSmallest 				; as min(len(s1),len(s2))
.0acb	b2 2e		lda ($2e)			lda 	(zTemp1)
.0acd					_CSNIsSmallest:
.0acd	aa		tax				tax 								; count in X
.0ace	f0 0c		beq $0adc			beq 	_CSNMatches 				; if zero already matches as far as we can go.
.0ad0	a0 00		ldy #$00			ldy 	#0 							; start from offset 1
.0ad2					_CSNCompareString:
.0ad2	c8		iny				iny 								; pre increment
.0ad3	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.0ad5	d1 2e		cmp ($2e),y			cmp 	(zTemp1),y
.0ad7	d0 0a		bne $0ae3			bne 	_CSNDifferent 				; numbers are different.
.0ad9	ca		dex				dex
.0ada	d0 f6		bne $0ad2			bne 	_CSNCompareString 			; compare common characters in two strings.
.0adc					_CSNMatches:
.0adc	38		sec				sec
.0add	b2 2c		lda ($2c)			lda 	(zTemp0)					; compare lengths
.0adf	f2 2e		sbc ($2e)			sbc 	(zTemp1)
.0ae1	f0 06		beq $0ae9			beq 	_CSNSExit 					; if zero, then strings match and exit.
.0ae3					_CSNDifferent:
.0ae3	a9 ff		lda #$ff			lda 	#$FF
.0ae5	90 02		bcc $0ae9			bcc 	_CSNSExit
.0ae7	a9 01		lda #$01			lda 	#$01
.0ae9					_CSNSExit:
.0ae9	7a		ply				ply
.0aea	fa		plx				plx
.0aeb	c9 00		cmp #$00			cmp 	#0 							; set the flags.
.0aed	20 4f 26	jsr $264f			jsr 	FloatSetByte 				; output the byte
.0af0	4c 36 08	jmp $0836			jmp 	NextCommand
.0af3					StringConcrete:
.0af3	9c 6a 05	stz $056a			stz 	stringInitialised	 		; initialise next usage
.0af6	84 31		sty $31				sty 	zTemp2+1 					; save pointer to new string
.0af8	85 30		sta $30				sta 	zTemp2
.0afa	b2 30		lda ($30)			lda 	(zTemp2) 					; length required
.0afc	4a		lsr a				lsr 	a 							; allow half as much for expansion.
.0afd	18		clc				clc
.0afe	72 30		adc ($30)			adc 	(zTemp2)
.0b00	90 02		bcc $0b04			bcc 	_SCNoOverflow
.0b02	a9 ff		lda #$ff			lda 	#255
.0b04					_SCNoOverflow:
.0b04	c9 0a		cmp #$0a			cmp 	#10 						; and a minimum of 10
.0b06	b0 02		bcs $0b0a			bcs 	_SCNoMinimum
.0b08	a9 0a		lda #$0a			lda 	#10
.0b0a					_SCNoMinimum:
.0b0a	85 2e		sta $2e				sta 	zTemp1 						; save max length.
.0b0c	38		sec				sec
.0b0d	ad 02 04	lda $0402			lda		stringHighMemory 			; subtract max length from high memory.
.0b10	e5 2e		sbc $2e				sbc 	zTemp1
.0b12	a8		tay				tay
.0b13	ad 03 04	lda $0403			lda 	stringHighMemory+1
.0b16	e9 00		sbc #$00			sbc 	#0
.0b18	48		pha				pha
.0b19	38		sec				sec 								; subtract 3 more
.0b1a	98		tya				tya
.0b1b	e9 03		sbc #$03			sbc 	#3
.0b1d	8d 02 04	sta $0402			sta 	stringHighMemory 			; to string high memory/zsTemp
.0b20	85 22		sta $22				sta 	zsTemp
.0b22	68		pla				pla
.0b23	e9 00		sbc #$00			sbc 	#0
.0b25	8d 03 04	sta $0403			sta 	stringHighMemory+1
.0b28	85 23		sta $23				sta 	zsTemp+1
.0b2a	a5 2e		lda $2e				lda 	zTemp1 						; set max length.
.0b2c	92 22		sta ($22)			sta 	(zsTemp)
.0b2e	a0 01		ldy #$01			ldy 	#1 							; clear control byte.
.0b30	a9 00		lda #$00			lda 	#0
.0b32	91 22		sta ($22),y			sta 	(zsTemp),y
.0b34	a5 22		lda $22				lda 	zsTemp 						; new empty string in YA.
.0b36	a4 23		ldy $23				ldy 	zsTemp+1
.0b38	60		rts				rts
.0b39					CommandXData:
.0b39	fa		plx				plx
.0b3a	98		tya				tya 								; data length +1 added to Y
.0b3b	38		sec				sec
.0b3c	71 28		adc ($28),y			adc 	(codePtr),y 				; next instruction
.0b3e	a8		tay				tay
.0b3f	4c 36 08	jmp $0836			jmp 	NextCommand
.0b42					CommandXDIM:
.0b42	fa		plx				plx
.0b43	5a		phy				phy
.0b44	20 26 10	jsr $1026			jsr 	GetInteger8Bit 				; get the type we are building for (bits 6 & 5)
.0b47	8d 0a 04	sta $040a			sta 	dimType
.0b4a	ca		dex				dex 								; this is the number of indices
.0b4b	20 26 10	jsr $1026			jsr 	GetInteger8Bit
.0b4e	85 2e		sta $2e				sta 	zTemp1 						; subtract n from X so X points at the *first*
.0b50	8a		txa				txa 								; dimension.
.0b51	38		sec				sec
.0b52	e5 2e		sbc $2e				sbc 	zTemp1
.0b54	aa		tax				tax
.0b55	a5 2e		lda $2e				lda 	zTemp1 						; number of indices.
.0b57	20 6b 0b	jsr $0b6b			jsr 	DIMCreateOneLevel 			; create one at this level
.0b5a	95 3e		sta $3e,x			sta 	NSMantissa0,x 				; set it as a return address as an integer
.0b5c	98		tya				tya
.0b5d	95 4a		sta $4a,x			sta 	NSMantissa1,x
.0b5f	74 56		stz $56,x			stz 	NSMantissa2,x
.0b61	74 62		stz $62,x			stz 	NSMantissa3,x
.0b63	74 32		stz $32,x			stz 	NSStatus,x
.0b65	74 6e		stz $6e,x			stz 	NSExponent,x
.0b67	7a		ply				ply
.0b68	4c 36 08	jmp $0836			jmp 	NextCommand
.0b6b					DIMCreateOneLevel:
.0b6b	a4 26		ldy $26				ldy 	availableMemory 			; push the start of this block on the stack.
.0b6d	5a		phy				phy
.0b6e	a4 27		ldy $27				ldy 	availableMemory+1
.0b70	5a		phy				phy
.0b71	a8		tay				tay 			 					; save current level into Y
.0b72	20 2c 10	jsr $102c			jsr		GetInteger16Bit 			; size of dimension to zTemp0
.0b75	e6 2c		inc $2c				inc 	zTemp0 						; bump the size of the dimension as we need one more
.0b77	d0 02		bne $0b7b			bne 	_DCOLNoCarry
.0b79	e6 2d		inc $2d				inc 	zTemp0+1
.0b7b					_DCOLNoCarry:
.0b7b	a5 2c		lda $2c				lda 	zTemp0 						; write out the +1 size of the dimension
.0b7d	20 1e 0c	jsr $0c1e			jsr 	DIMWriteByte
.0b80	a5 2d		lda $2d				lda 	zTemp0+1
.0b82	20 1e 0c	jsr $0c1e			jsr 	DIMWriteByte
.0b85	ad 0a 04	lda $040a			lda 	dimType 					; get type information
.0b88	29 7f		and #$7f			and 	#$7F
.0b8a	c0 01		cpy #$01			cpy 	#1
.0b8c	f0 02		beq $0b90			beq 	_DCOLNoSubLevel
.0b8e	09 80		ora #$80			ora 	#$80 						; set sublevel bit if there is one.
.0b90					_DCOLNoSubLevel:
.0b90	20 1e 0c	jsr $0c1e			jsr 	DIMWriteByte
.0b93	a5 26		lda $26				lda 	availableMemory
.0b95	85 2e		sta $2e				sta 	zTemp1
.0b97	a5 27		lda $27				lda 	availableMemory+1
.0b99	85 2f		sta $2f				sta 	zTemp1+1
.0b9b	a5 2c		lda $2c				lda 	zTemp0
.0b9d	85 30		sta $30				sta 	zTemp2
.0b9f	a5 2d		lda $2d				lda 	zTemp0+1
.0ba1	85 31		sta $31				sta 	zTemp2+1
.0ba3					_DCOLFillArray:
.0ba3	20 02 0c	jsr $0c02			jsr 	DIMWriteElement 			; write out an element, could be a sub-level or individual data
.0ba6	a5 2c		lda $2c				lda 	zTemp0 						; decrement one from count.
.0ba8	d0 02		bne $0bac			bne 	_DCOLNoBorrow
.0baa	c6 2d		dec $2d				dec 	zTemp0+1
.0bac					_DCOLNoBorrow:
.0bac	c6 2c		dec $2c				dec 	zTemp0
.0bae	a5 2c		lda $2c				lda 	zTemp0 						; until completed.
.0bb0	05 2d		ora $2d				ora 	zTemp0+1
.0bb2	d0 ef		bne $0ba3			bne 	_DCOLFillArray
.0bb4	c0 01		cpy #$01			cpy 	#1
.0bb6	f0 42		beq $0bfa			beq 	_DCOLExit
.0bb8					_DCOLRecursionLoop:
.0bb8	da		phx				phx 								; save XY
.0bb9	5a		phy				phy
.0bba	a5 2e		lda $2e				lda 	zTemp1 						; push zTemp1 (position) zTemp2 (count)
.0bbc	48		pha				pha
.0bbd	a5 2f		lda $2f				lda 	zTemp1+1
.0bbf	48		pha				pha
.0bc0	a5 30		lda $30				lda 	zTemp2
.0bc2	48		pha				pha
.0bc3	a5 31		lda $31				lda 	zTemp2+1
.0bc5	48		pha				pha
.0bc6	88		dey				dey  								; lower level -> A
.0bc7	98		tya				tya
.0bc8	e8		inx				inx 								; next index size
.0bc9	20 6b 0b	jsr $0b6b			jsr 	DIMCreateOneLevel 			; create a level, return in YA
.0bcc	fa		plx				plx 								; restore zTemp2 (count) and zTemp1 (position)
.0bcd	86 31		stx $31				stx 	zTemp2+1
.0bcf	fa		plx				plx
.0bd0	86 30		stx $30				stx 	zTemp2
.0bd2	fa		plx				plx
.0bd3	86 2f		stx $2f				stx 	zTemp1+1
.0bd5	fa		plx				plx
.0bd6	86 2e		stx $2e				stx 	zTemp1
.0bd8	92 2e		sta ($2e)			sta 	(zTemp1) 					; write out position
.0bda	98		tya				tya
.0bdb	a0 01		ldy #$01			ldy 	#1
.0bdd	91 2e		sta ($2e),y			sta 	(zTemp1),y
.0bdf	7a		ply				ply 								; restore XY
.0be0	fa		plx				plx
.0be1	18		clc				clc
.0be2	a5 2e		lda $2e				lda 	zTemp1 						; add 2 to zTemp1
.0be4	69 02		adc #$02			adc 	#2
.0be6	85 2e		sta $2e				sta 	zTemp1
.0be8	90 02		bcc $0bec			bcc 	_DCOLRNoCarry
.0bea	e6 2f		inc $2f				inc 	zTemp1+1
.0bec					_DCOLRNoCarry:
.0bec	a5 30		lda $30				lda 	zTemp2 						; decrement one from count in zTemp2
.0bee	d0 02		bne $0bf2			bne 	_DCOLRNoBorrow
.0bf0	c6 31		dec $31				dec 	zTemp2+1
.0bf2					_DCOLRNoBorrow:
.0bf2	c6 30		dec $30				dec 	zTemp2
.0bf4	a5 30		lda $30				lda 	zTemp2 						; until completed.
.0bf6	05 31		ora $31				ora 	zTemp2+1
.0bf8	d0 be		bne $0bb8			bne 	_DCOLRecursionLoop
.0bfa					_DCOLExit:
.0bfa	68		pla				pla 								; get MSB, make offset again
.0bfb	38		sec				sec
.0bfc	ed 07 04	sbc $0407			sbc 	variableStartPage
.0bff	a8		tay				tay
.0c00	68		pla				pla 								; YA now contains offset address.
.0c01	60		rts				rts
.0c02					DIMWriteElement:
.0c02	da		phx				phx
.0c03	a2 02		ldx #$02			ldx	 	#2 							; work out size is 2 or 6
.0c05	c0 01		cpy #$01			cpy 	#1 							; do we have a sub level, if so 2.
.0c07	d0 0b		bne $0c14			bne 	_DIMWENotFloat
.0c09	ad 0a 04	lda $040a			lda 	dimType
.0c0c	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16
.0c0e	c9 00		cmp #$00			cmp 	#NSSIFloat
.0c10	d0 02		bne $0c14			bne 	_DIMWENotFloat
.0c12	a2 06		ldx #$06			ldx 	#6
.0c14					_DIMWENotFloat:
.0c14	a9 00		lda #$00			lda 	#0
.0c16	20 1e 0c	jsr $0c1e			jsr 	DIMWriteByte
.0c19	ca		dex				dex
.0c1a	d0 f8		bne $0c14			bne 	_DIMWENotFloat
.0c1c	fa		plx				plx
.0c1d	60		rts				rts
.0c1e					DIMWriteByte:
.0c1e	92 26		sta ($26)			sta 	(availableMemory)
.0c20	e6 26		inc $26				inc 	availableMemory
.0c22	d0 0b		bne $0c2f			bne 	_DIMWBSkip
.0c24	e6 27		inc $27				inc 	availableMemory+1
.0c26	48		pha				pha
.0c27	a5 27		lda $27				lda 	availableMemory+1 			; check out of memory
.0c29	cd 03 04	cmp $0403			cmp 	stringHighMemory+1
.0c2c	b0 02		bcs $0c30			bcs 	_DIMWBMemory
.0c2e	68		pla				pla
.0c2f					_DIMWBSkip:
.0c2f	60		rts				rts
.0c30					_DIMWBMemory:
.0c30	4c e4 1f	jmp $1fe4		jmp	ErrorV_memory
.040a					dimType:
>040a							.fill 	1
.0c33					CommandEnd:
.0c33	fa		plx				plx
.0c34	86 2c		stx $2c				stx 	zTemp0
.0c36					EndRuntime:
.0c36	ae 08 04	ldx $0408			ldx 	Runtime6502SP 				; set up the stack pointer
.0c39	9a		txs				txs
.0c3a	60		rts				rts
.0c3b					Unimplemented:
.0c3b	4c 17 1f	jmp $1f17			jmp 	ErrorV_unimplemented
.0c3e					RuntimeErrorHandler:
.0c3e	98		tya				tya
.0c3f	18		clc				clc
.0c40	65 28		adc $28				adc 	codePtr
.0c42	85 28		sta $28				sta 	codePtr
.0c44	90 02		bcc $0c48			bcc 	_EHNoCarry
.0c46	e6 29		inc $29				inc 	codePtr+1
.0c48					_EHNoCarry:
.0c48	68		pla				pla
.0c49	7a		ply				ply
.0c4a	85 2c		sta $2c				sta 	zTemp0
.0c4c	84 2d		sty $2d				sty 	zTemp0+1
.0c4e	a2 00		ldx #$00			ldx 	#0 							; output to channel #0
.0c50	a0 01		ldy #$01			ldy 	#1
.0c52					_EHDisplayMsg:
.0c52	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.0c54	20 74 1c	jsr $1c74			jsr 	XPrintCharacterToChannel
.0c57	c8		iny				iny
.0c58	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.0c5a	d0 f6		bne $0c52			bne 	_EHDisplayMsg
.0c5c	a9 20		lda #$20			lda 	#32
.0c5e	20 74 1c	jsr $1c74			jsr 	XPrintCharacterToChannel
.0c61	a9 40		lda #$40			lda 	#64
.0c63	20 74 1c	jsr $1c74			jsr 	XPrintCharacterToChannel
.0c66	a9 20		lda #$20			lda 	#32
.0c68	20 74 1c	jsr $1c74			jsr 	XPrintCharacterToChannel
.0c6b	20 71 0c	jsr $0c71			jsr 	EHDisplayCodePtr
.0c6e	4c 36 0c	jmp $0c36			jmp 	EndRuntime
.0c71					EHDisplayCodePtr:
.0c71	a9 24		lda #$24			lda 	#'$'
.0c73	20 74 1c	jsr $1c74			jsr 	XPrintCharacterToChannel
.0c76	38		sec				sec
.0c77	a5 29		lda $29				lda 	codePtr+1 					; display the p-code address of the error.
.0c79	ed 04 04	sbc $0404			sbc 	runtimeHigh
.0c7c	20 85 0c	jsr $0c85			jsr 	_EHDisplayHex
.0c7f	a5 28		lda $28				lda 	codePtr
.0c81	20 85 0c	jsr $0c85			jsr 	_EHDisplayHex
.0c84	60		rts				rts
.0c85					_EHDisplayHex:
.0c85	48		pha				pha
.0c86	4a		lsr a				lsr 	a
.0c87	4a		lsr a				lsr 	a
.0c88	4a		lsr a				lsr 	a
.0c89	4a		lsr a				lsr 	a
.0c8a	20 8e 0c	jsr $0c8e			jsr 	_EHDisplayNibble
.0c8d	68		pla				pla
.0c8e					_EHDisplayNibble:
.0c8e	29 0f		and #$0f			and 	#15
.0c90	c9 0a		cmp #$0a			cmp 	#10
.0c92	90 02		bcc $0c96			bcc 	_EHNotHex
.0c94	69 06		adc #$06			adc 	#6
.0c96					_EHNotHex:
.0c96	69 30		adc #$30			adc 	#48
.0c98	4c 74 1c	jmp $1c74			jmp 	XPrintCharacterToChannel
.0c9b					CommandXFor:
.0c9b	fa		plx				plx
.0c9c	a9 d3		lda #$d3			lda 	#FRAME_FOR 					; open frame
.0c9e	20 1e 0d	jsr $0d1e			jsr 	StackOpenFrame
.0ca1	20 5d 11	jsr $115d			jsr 	StackSaveCurrentPosition 	; normalise to Y=0 and save position.
.0ca4	a0 07		ldy #$07			ldy 	#7 							; copy step out
.0ca6	20 00 0d	jsr $0d00			jsr 	CopyTOSToOffsetY
.0ca9	ca		dex				dex
.0caa	a0 0d		ldy #$0d			ldy 	#13 						; copy terminal value.
.0cac	20 00 0d	jsr $0d00			jsr 	CopyTOSToOffsetY
.0caf	ca		dex				dex
.0cb0	b5 4a		lda $4a,x			lda 	NSMantissa1,x 				; bit 15 of reference indicates type int16
.0cb2	29 80		and #$80			and 	#$80
.0cb4	a0 04		ldy #$04			ldy 	#4
.0cb6	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.0cb8	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; copy the reference address
.0cba	a0 05		ldy #$05			ldy 	#5 							; adjusted to be a real address
.0cbc	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.0cbe	85 2c		sta $2c				sta 	zTemp0 						; also to zTemp0
.0cc0	c8		iny				iny
.0cc1	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.0cc3	18		clc				clc
.0cc4	29 7f		and #$7f			and 	#$7F 						; throw the type bit.
.0cc6	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.0cc8	6d 07 04	adc $0407			adc 	variableStartPage 			; point to variable page.
.0ccb	85 2d		sta $2d				sta 	zTemp0+1
.0ccd	ca		dex				dex 								; throw reference.
.0cce	a0 05		ldy #$05			ldy 	#5 							; check the index, step and terminal values
.0cd0	b1 2c		lda ($2c),y			lda 	(zTemp0),y 					; are all +ve integers, sign bits first.
.0cd2	a0 0c		ldy #$0c			ldy 	#12
.0cd4	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.0cd6	a0 12		ldy #$12			ldy 	#18
.0cd8	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.0cda	29 80		and #$80			and 	#$80 						; only interested in sign bit.
.0cdc	88		dey				dey 								; now the exponents.
.0cdd	11 2c		ora ($2c),y			ora 	(zTemp0),y
.0cdf	a0 0b		ldy #$0b			ldy 	#11
.0ce1	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.0ce3	a0 11		ldy #$11			ldy 	#17
.0ce5	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.0ce7	a0 08		ldy #$08			ldy 	#8 							; step must be 1 byte.
.0ce9	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.0ceb	c8		iny				iny
.0cec	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.0cee	c8		iny				iny
.0cef	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.0cf1	d0 08		bne $0cfb			bne 	_CFNoOptimise
.0cf3	a0 04		ldy #$04			ldy 	#4 							; set the runtime stack pointer optimisation flag.
.0cf5	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.0cf7	09 40		ora #$40			ora 	#$40
.0cf9	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.0cfb					_CFNoOptimise:
.0cfb	a0 00		ldy #$00			ldy 	#0
.0cfd	4c 36 08	jmp $0836			jmp 	NextCommand
.0d00					CopyTOSToOffsetY:
.0d00	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.0d02	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.0d04	c8		iny				iny
.0d05	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.0d07	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.0d09	c8		iny				iny
.0d0a	b5 56		lda $56,x			lda 	NSMantissa2,x
.0d0c	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.0d0e	c8		iny				iny
.0d0f	b5 62		lda $62,x			lda 	NSMantissa3,x
.0d11	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.0d13	c8		iny				iny
.0d14	b5 6e		lda $6e,x			lda 	NSExponent,x
.0d16	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.0d18	c8		iny				iny
.0d19	b5 32		lda $32,x			lda 	NSStatus,x
.0d1b	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.0d1d	60		rts				rts
.0d1e					StackOpenFrame:
.0d1e	48		pha				pha 								; save frame marker
.0d1f	29 1f		and #$1f			and 	#$1F 						; bytes required.
.0d21	85 2c		sta $2c				sta 	zTemp0
.0d23	38		sec				sec 								; subtract from runtime stack pointer.
.0d24	a5 24		lda $24				lda		runtimeStackPtr
.0d26	e5 2c		sbc $2c				sbc 	zTemp0
.0d28	85 24		sta $24				sta 	runtimeStackPtr
.0d2a	a5 25		lda $25				lda		runtimeStackPtr+1
.0d2c	e9 00		sbc #$00			sbc 	#0
.0d2e	85 25		sta $25				sta 	runtimeStackPtr+1
.0d30	68		pla				pla 								; put frame marker at +0
.0d31	92 24		sta ($24)			sta 	(runtimeStackPtr)
.0d33	60		rts				rts
.0d34					StackCloseFrame:
.0d34	b2 24		lda ($24)			lda 	(runtimeStackPtr)			; get frame marker
.0d36	29 1f		and #$1f			and 	#$1F 						; size
.0d38	18		clc				clc
.0d39	65 24		adc $24				adc 	runtimeStackPtr
.0d3b	85 24		sta $24				sta 	runtimeStackPtr
.0d3d	90 02		bcc $0d41			bcc 	_SCFNoCarry
.0d3f	e6 25		inc $25				inc 	runtimeStackPtr+1
.0d41					_SCFNoCarry:
.0d41	60		rts				rts
.0d42					StackFindFrame:
.0d42	8d 0b 04	sta $040b			sta 	requiredFrame
.0d45					_SFFLoop:
.0d45	b2 24		lda ($24)			lda 	(runtimeStackPtr) 			; get TOS
.0d47	c9 ff		cmp #$ff			cmp 	#$FF 						; if found $FF then this is a fail.
.0d49	f0 10		beq $0d5b			beq 	SCFFail
.0d4b	cd 0b 04	cmp $040b			cmp 	requiredFrame 				; found this type ?
.0d4e	f0 05		beq $0d55			beq 	_SFFFound
.0d50	20 34 0d	jsr $0d34			jsr 	StackCloseFrame 			; close the top frame
.0d53	80 f0		bra $0d45			bra 	_SFFLoop 					; and try te next.
.0d55					_SFFFound:
.0d55	60		rts				rts
.0d56					StackCheckFrame:
.0d56	d2 24		cmp ($24)			cmp 	(runtimeStackPtr) 			; matches current frame
.0d58	d0 01		bne $0d5b			bne 	SCFFail
.0d5a	60		rts				rts
.0d5b					SCFFail:
.0d5b	4c 74 1f	jmp $1f74		jmp	ErrorV_structure
.040b					requiredFrame:
>040b							.fill 	1
.0d5e					UnaryFre:
.0d5e	fa		plx				plx
.0d5f	20 4d 26	jsr $264d			jsr 	FloatSetZero 				; zero the result (32 bit integer)
.0d62	38		sec				sec
.0d63	ad 02 04	lda $0402			lda 	stringHighMemory 			; calculate the free memory.
.0d66	ed 00 04	sbc $0400			sbc 	stringLowMemory
.0d69	95 3e		sta $3e,x			sta		NSMantissa0,x
.0d6b	ad 03 04	lda $0403			lda 	stringHighMemory+1
.0d6e	ed 01 04	sbc $0401			sbc 	stringLowMemory+1
.0d71	95 4a		sta $4a,x			sta		NSMantissa1,x
.0d73	4c 36 08	jmp $0836			jmp 	NextCommand
.0d76					CommandXGet:
.0d76	fa		plx				plx
.0d77	e8		inx				inx
.0d78	a9 01		lda #$01			lda 	#1 							; 1 character space
.0d7a	20 f6 16	jsr $16f6			jsr 	StringAllocTemp
.0d7d	20 5c 13	jsr $135c			jsr 	VectorGetCharacter 			; get a character
.0d80	c9 00		cmp #$00			cmp 	#0
.0d82	f0 09		beq $0d8d			beq 	_CGNone
.0d84	5a		phy				phy
.0d85	a0 01		ldy #$01			ldy 	#1 							; store char
.0d87	91 22		sta ($22),y			sta 	(zsTemp),y
.0d89	98		tya				tya 								; store length.
.0d8a	92 22		sta ($22)			sta 	(zsTemp)
.0d8c	7a		ply				ply
.0d8d					_CGNone:
.0d8d	4c 36 08	jmp $0836			jmp 	NextCommand
.0d90					CommandXGosub:
.0d90	fa		plx				plx
.0d91	a9 e4		lda #$e4			lda 	#FRAME_GOSUB
.0d93	20 1e 0d	jsr $0d1e			jsr 	StackOpenFrame
.0d96	20 5d 11	jsr $115d			jsr 	StackSaveCurrentPosition
.0d99	4c ae 0d	jmp $0dae			jmp 	PerformGOTO
.0d9c					CommandReturn:
.0d9c	fa		plx				plx
.0d9d	a9 e4		lda #$e4			lda 	#FRAME_GOSUB
.0d9f	20 42 0d	jsr $0d42			jsr 	StackFindFrame
.0da2	20 6e 11	jsr $116e			jsr 	StackLoadCurrentPosition
.0da5	c8		iny				iny
.0da6	c8		iny				iny
.0da7	20 34 0d	jsr $0d34			jsr 	StackCloseFrame
.0daa	4c 36 08	jmp $0836			jmp 	NextCommand
.0dad					CommandXGoto:
.0dad	fa		plx				plx
.0dae					PerformGOTO:
.0dae	c8		iny				iny 								; push MSB of offset on stack
.0daf	b1 28		lda ($28),y			lda 	(codePtr),y
.0db1	48		pha				pha
.0db2	88		dey				dey 								; point LSB of offset
.0db3	18		clc				clc 								; add LSB
.0db4	b1 28		lda ($28),y			lda 	(codePtr),y
.0db6	65 28		adc $28				adc 	codePtr
.0db8	85 28		sta $28				sta 	codePtr
.0dba	68		pla				pla 								; restore offset MSB and add
.0dbb	65 29		adc $29				adc 	codePtr+1
.0dbd	85 29		sta $29				sta 	codePtr+1
.0dbf	4c 36 08	jmp $0836			jmp 	NextCommand
.0dc2					CommandGotoZ:
.0dc2	fa		plx				plx
.0dc3	20 6f 26	jsr $266f			jsr 	FloatIsZero
.0dc6	ca		dex				dex
.0dc7	c9 00		cmp #$00			cmp 	#0
.0dc9	f0 e3		beq $0dae			beq 	PerformGOTO
.0dcb	c8		iny				iny
.0dcc	c8		iny				iny
.0dcd	4c 36 08	jmp $0836			jmp 	NextCommand
.0dd0					CommandGotoNZ:
.0dd0	fa		plx				plx
.0dd1	20 6f 26	jsr $266f			jsr 	FloatIsZero
.0dd4	ca		dex				dex
.0dd5	c9 00		cmp #$00			cmp 	#0
.0dd7	d0 d5		bne $0dae			bne 	PerformGOTO
.0dd9	c8		iny				iny
.0dda	c8		iny				iny
.0ddb	4c 36 08	jmp $0836			jmp 	NextCommand
.0dde					Command_PSET:
.0dde	fa		plx				plx
.0ddf	5a		phy				phy
.0de0	20 26 10	jsr $1026			jsr 	GetInteger8Bit 				; get the colour
.0de3	48		pha				pha
.0de4	a2 00		ldx #$00			ldx 	#0 							; copy 0/1 to r0,r1
.0de6	a0 02		ldy #$02			ldy 	#X16_r0
.0de8	20 6a 0e	jsr $0e6a			jsr 	GraphicsCopy2
.0deb	20 ff fe	jsr $feff			jsr 	X16_FB_cursor_position 		; set position.
.0dee	68		pla				pla 								; set pixel.
.0def	20 0b ff	jsr $ff0b			jsr 	X16_FB_set_pixel
.0df2	7a		ply				ply
.0df3	a2 ff		ldx #$ff			ldx 	#$FF
.0df5	4c 36 08	jmp $0836			jmp 	NextCommand
.0df8					Command_LINE:
.0df8	fa		plx				plx
.0df9	5a		phy				phy
.0dfa	20 5d 0e	jsr $0e5d			jsr 	GraphicsColour
.0dfd	a2 00		ldx #$00			ldx 	#0 							; copy 0/1/2/3 to r0,1,2,3
.0dff	a0 02		ldy #$02			ldy 	#X16_r0
.0e01	20 67 0e	jsr $0e67			jsr 	GraphicsCopy4
.0e04	20 2c ff	jsr $ff2c			jsr 	X16_GRAPH_draw_line
.0e07	7a		ply				ply
.0e08	a2 ff		ldx #$ff			ldx 	#$FF
.0e0a	4c 36 08	jmp $0836			jmp 	NextCommand
.0e0d					Command_RECT:
.0e0d	fa		plx				plx
.0e0e	5a		phy				phy
.0e0f	20 7e 0e	jsr $0e7e			jsr 	GraphicsRectCoords
.0e12	38		sec				sec
.0e13	20 2f ff	jsr $ff2f			jsr 	X16_GRAPH_draw_rect
.0e16	7a		ply				ply
.0e17	a2 ff		ldx #$ff			ldx 	#$FF
.0e19	4c 36 08	jmp $0836			jmp 	NextCommand
.0e1c					Command_FRAME:
.0e1c	fa		plx				plx
.0e1d	5a		phy				phy
.0e1e	20 7e 0e	jsr $0e7e			jsr 	GraphicsRectCoords
.0e21	18		clc				clc
.0e22	20 2f ff	jsr $ff2f			jsr 	X16_GRAPH_draw_rect
.0e25	7a		ply				ply
.0e26	a2 ff		ldx #$ff			ldx 	#$FF
.0e28	4c 36 08	jmp $0836			jmp 	NextCommand
.0e2b					Command_CHAR:
.0e2b	fa		plx				plx
.0e2c	5a		phy				phy
.0e2d	ca		dex				dex  								; set the draw colour
.0e2e	20 5d 0e	jsr $0e5d			jsr 	GraphicsColour
.0e31	a2 00		ldx #$00			ldx 	#0 							; copy 0/1 to r0,r1
.0e33	a0 02		ldy #$02			ldy 	#X16_r0
.0e35	20 6a 0e	jsr $0e6a			jsr 	GraphicsCopy2
.0e38	a5 41		lda $41				lda 	NSMantissa0+3 				; copy string address to zTemp0
.0e3a	85 2c		sta $2c				sta 	zTemp0
.0e3c	a5 4d		lda $4d				lda 	NSMantissa1+3
.0e3e	85 2d		sta $2d				sta 	zTemp0+1
.0e40	b2 2c		lda ($2c)			lda 	(zTemp0) 					; count of chars to zTemp1
.0e42	85 2e		sta $2e				sta 	zTemp1
.0e44					_CCLoop:
.0e44	a5 2e		lda $2e				lda 	zTemp1 						; done all chars ?
.0e46	f0 0f		beq $0e57			beq 	_CCExit
.0e48	c6 2e		dec $2e				dec 	zTemp1 						; dec counter
.0e4a	e6 2c		inc $2c				inc 	zTemp0 						; pre-bump pointer
.0e4c	d0 02		bne $0e50			bne 	_CCNoCarry
.0e4e	e6 2d		inc $2d				inc 	zTemp0+1
.0e50					_CCNoCarry:
.0e50	b2 2c		lda ($2c)			lda 	(zTemp0) 					; get character
.0e52	20 41 ff	jsr $ff41			jsr 	X16_GRAPH_put_char 			; write it
.0e55	80 ed		bra $0e44			bra 	_CCLoop						; go round.
.0e57					_CCExit:
.0e57	7a		ply				ply
.0e58	a2 ff		ldx #$ff			ldx 	#$FF
.0e5a	4c 36 08	jmp $0836			jmp 	NextCommand
.0e5d					GraphicsColour:
.0e5d	20 26 10	jsr $1026			jsr 	GetInteger8Bit
.0e60	aa		tax				tax
.0e61	a0 00		ldy #$00			ldy 	#0
.0e63	20 29 ff	jsr $ff29			jsr 	X16_GRAPH_set_colors
.0e66	60		rts				rts
.0e67					GraphicsCopy4:
.0e67	20 6a 0e	jsr $0e6a			jsr 	GraphicsCopy2
.0e6a					GraphicsCopy2:
.0e6a	20 6d 0e	jsr $0e6d			jsr 	GraphicsCopy1
.0e6d					GraphicsCopy1:
.0e6d	20 88 22	jsr $2288			jsr 	FloatIntegerPart
.0e70	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.0e72	99 00 00	sta $0000,y			sta 	0,y
.0e75	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.0e77	99 01 00	sta $0001,y			sta 	1,y
.0e7a	e8		inx				inx
.0e7b	c8		iny				iny
.0e7c	c8		iny				iny
.0e7d	60		rts				rts
.0e7e					GraphicsRectCoords:
.0e7e	20 5d 0e	jsr $0e5d			jsr 	GraphicsColour 				; set colour
.0e81	a2 00		ldx #$00			ldx 	#0 							; copy in order.
.0e83	a0 02		ldy #$02			ldy 	#X16_r0
.0e85	20 67 0e	jsr $0e67			jsr 	GraphicsCopy4
.0e88	a2 02		ldx #$02			ldx 	#X16_r0 					; sort r0/r2
.0e8a	20 97 0e	jsr $0e97			jsr 	_GRCSortSubtract
.0e8d	a2 04		ldx #$04			ldx 	#X16_r1 					; sort r1/r3
.0e8f	20 97 0e	jsr $0e97			jsr 	_GRCSortSubtract
.0e92	74 08		stz $08,x			stz 	8,x 						; zero rounding
.0e94	74 09		stz $09,x			stz 	9,x
.0e96	60		rts				rts
.0e97					_GRCSortSubtract:
.0e97	b5 04		lda $04,x			lda 	4,x 						; calculate r2-r0
.0e99	d5 00		cmp $00,x			cmp 	0,x
.0e9b	b5 05		lda $05,x			lda 	5,x
.0e9d	f5 01		sbc $01,x			sbc 	1,x
.0e9f	b0 08		bcs $0ea9			bcs 	_GRCNoSwap 					; >= swap.
.0ea1	20 b7 0e	jsr $0eb7			jsr 	_GRCSwapByte 				; swap 0/2
.0ea4	e8		inx				inx
.0ea5	20 b7 0e	jsr $0eb7			jsr 	_GRCSwapByte 				; swap 1/3
.0ea8	ca		dex				dex
.0ea9					_GRCNoSwap:
.0ea9	38		sec				sec 								; calculate width/height into 4,5
.0eaa	b5 04		lda $04,x			lda 	4,x
.0eac	f5 00		sbc $00,x			sbc 	0,x
.0eae	95 04		sta $04,x			sta 	4,x
.0eb0	b5 05		lda $05,x			lda 	5,x
.0eb2	f5 01		sbc $01,x			sbc 	1,x
.0eb4	95 05		sta $05,x			sta 	5,x
.0eb6	60		rts				rts
.0eb7					_GRCSwapByte:
.0eb7	b5 04		lda $04,x			lda 	4,x
.0eb9	48		pha				pha
.0eba	b5 00		lda $00,x			lda 	0,x
.0ebc	95 04		sta $04,x			sta 	4,x
.0ebe	68		pla				pla
.0ebf	95 00		sta $00,x			sta 	0,x
.0ec1	60		rts				rts
.0ec2					Unary16Hex:
.0ec2	fa		plx				plx
.0ec3	20 2c 10	jsr $102c			jsr 	GetInteger16Bit
.0ec6	a9 04		lda #$04			lda 	#4 							; allocate / set 4 bytes.
.0ec8	20 f6 16	jsr $16f6			jsr 	StringAllocTemp
.0ecb	a5 2d		lda $2d				lda 	zTemp0+1
.0ecd	f0 03		beq $0ed2			beq 	_UHNoHigh
.0ecf	20 da 0e	jsr $0eda			jsr 	_UHWriteHex
.0ed2					_UHNoHigh:
.0ed2	a5 2c		lda $2c				lda 	zTemp0
.0ed4	20 da 0e	jsr $0eda			jsr 	_UHWriteHex
.0ed7	4c 36 08	jmp $0836			jmp 	NextCommand
.0eda					_UHWriteHex:
.0eda	48		pha				pha
.0edb	4a		lsr a				lsr 	a
.0edc	4a		lsr a				lsr 	a
.0edd	4a		lsr a				lsr 	a
.0ede	4a		lsr a				lsr 	a
.0edf	20 e3 0e	jsr $0ee3			jsr 	_UHWriteNibl
.0ee2	68		pla				pla
.0ee3					_UHWriteNibl:
.0ee3	29 0f		and #$0f			and 	#15
.0ee5	c9 0a		cmp #$0a			cmp 	#10
.0ee7	90 02		bcc $0eeb			bcc 	_UHDigit
.0ee9	69 06		adc #$06			adc 	#6
.0eeb					_UHDigit:
.0eeb	69 30		adc #$30			adc 	#48
.0eed	20 1f 17	jsr $171f			jsr 	StringWriteChar
.0ef0	60		rts				rts
.0ef1					IndFloatRead:
.0ef1	fa		plx				plx
.0ef2	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; copy address
.0ef4	85 2c		sta $2c				sta 	zTemp0
.0ef6	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.0ef8	18		clc				clc
.0ef9	6d 07 04	adc $0407			adc 	variableStartPage
.0efc	85 2d		sta $2d				sta 	zTemp0+1
.0efe	ca		dex				dex 								; throw the address
.0eff	20 d5 14	jsr $14d5			jsr 	ReadFloatZTemp0Sub 							; call read routine
.0f02	4c 36 08	jmp $0836			jmp 	NextCommand
.0f05					IndInt16Read:
.0f05	fa		plx				plx
.0f06	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; copy address
.0f08	85 2c		sta $2c				sta 	zTemp0
.0f0a	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.0f0c	18		clc				clc
.0f0d	6d 07 04	adc $0407			adc 	variableStartPage
.0f10	85 2d		sta $2d				sta 	zTemp0+1
.0f12	ca		dex				dex 								; throw the address
.0f13	20 11 15	jsr $1511			jsr 	ReadIntegerZTemp0Sub 							; call read routine
.0f16	4c 36 08	jmp $0836			jmp 	NextCommand
.0f19					IndStringRead:
.0f19	fa		plx				plx
.0f1a	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; copy address
.0f1c	85 2c		sta $2c				sta 	zTemp0
.0f1e	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.0f20	18		clc				clc
.0f21	6d 07 04	adc $0407			adc 	variableStartPage
.0f24	85 2d		sta $2d				sta 	zTemp0+1
.0f26	ca		dex				dex 								; throw the address
.0f27	20 56 15	jsr $1556			jsr 	ReadStringZTemp0Sub 							; call read routine
.0f2a	4c 36 08	jmp $0836			jmp 	NextCommand
.0f2d					IndFloatWrite:
.0f2d	fa		plx				plx
.0f2e	b5 3d		lda $3d,x			lda 	NSMantissa0-1,x 			; copy address
.0f30	85 2c		sta $2c				sta 	zTemp0
.0f32	b5 49		lda $49,x			lda 	NSMantissa1-1,x
.0f34	18		clc				clc
.0f35	6d 07 04	adc $0407			adc 	variableStartPage
.0f38	85 2d		sta $2d				sta 	zTemp0+1
.0f3a	20 b0 1a	jsr $1ab0			jsr 	WriteFloatZTemp0Sub 							; call write routine
.0f3d	ca		dex				dex 								; throw the address as well.
.0f3e	4c 36 08	jmp $0836			jmp 	NextCommand
.0f41					IndInt16Write:
.0f41	fa		plx				plx
.0f42	b5 3d		lda $3d,x			lda 	NSMantissa0-1,x 			; copy address
.0f44	85 2c		sta $2c				sta 	zTemp0
.0f46	b5 49		lda $49,x			lda 	NSMantissa1-1,x
.0f48	18		clc				clc
.0f49	6d 07 04	adc $0407			adc 	variableStartPage
.0f4c	85 2d		sta $2d				sta 	zTemp0+1
.0f4e	20 ec 1a	jsr $1aec			jsr 	WriteIntegerZTemp0Sub 							; call write routine
.0f51	ca		dex				dex 								; throw the address as well.
.0f52	4c 36 08	jmp $0836			jmp 	NextCommand
.0f55					IndStringWrite:
.0f55	fa		plx				plx
.0f56	b5 3d		lda $3d,x			lda 	NSMantissa0-1,x 			; copy address
.0f58	85 2c		sta $2c				sta 	zTemp0
.0f5a	b5 49		lda $49,x			lda 	NSMantissa1-1,x
.0f5c	18		clc				clc
.0f5d	6d 07 04	adc $0407			adc 	variableStartPage
.0f60	85 2d		sta $2d				sta 	zTemp0+1
.0f62	20 2b 1b	jsr $1b2b			jsr 	WriteStringZTemp0Sub 							; call write routine
.0f65	ca		dex				dex 								; throw the address as well.
.0f66	4c 36 08	jmp $0836			jmp 	NextCommand
.0f69					CommandXInput:
.0f69	fa		plx				plx
.0f6a	5a		phy				phy 								; save Y
.0f6b	e8		inx				inx									; space on stack
.0f6c					_INError:
.0f6c	20 a0 0f	jsr $0fa0			jsr 	InputStringToBuffer 		; input from keyboard
.0f6f	a9 61		lda #$61			lda 	#((ReadBufferSize) & $FF)
.0f71	85 2c		sta $2c				sta 	0+zTemp0
.0f73	a9 04		lda #$04			lda 	#((ReadBufferSize) >> 8) & $FF
.0f75	85 2d		sta $2d				sta 	1+zTemp0
.0f77	20 3d 19	jsr $193d			jsr 	ValEvaluateZTemp0
.0f7a	b0 f0		bcs $0f6c			bcs 	_INError 					; failed, try again.
.0f7c	7a		ply				ply 								; restore Y
.0f7d	4c 36 08	jmp $0836			jmp 	NextCommand
.0f80					CommandInputString:
.0f80	fa		plx				plx
.0f81	5a		phy				phy 								; save Y
.0f82	20 a0 0f	jsr $0fa0			jsr 	InputStringToBuffer 		; input from keyboard
.0f85	e8		inx				inx 								; make space on stack
.0f86	20 4d 26	jsr $264d			jsr 	FloatSetZero 				; store as string on stack
.0f89	a9 61		lda #$61			lda 	#ReadBufferSize & $FF
.0f8b	95 3e		sta $3e,x			sta 	NSMantissa0,x
.0f8d	a9 04		lda #$04			lda 	#ReadBufferSize >> 8
.0f8f	95 4a		sta $4a,x			sta 	NSMantissa1,x
.0f91	a9 40		lda #$40			lda 	#NSSString
.0f93	95 32		sta $32,x			sta 	NSStatus,x
.0f95	7a		ply				ply 								; restore Y
.0f96	4c 36 08	jmp $0836			jmp 	NextCommand
.0f99					CommandInputReset:
.0f99	fa		plx				plx
.0f9a	9c 0c 04	stz $040c			stz 	InputBuffer
.0f9d	4c 36 08	jmp $0836			jmp 	NextCommand
.0fa0					InputStringToBuffer:
.0fa0	a9 da		lda #$da			lda 	#((InputBumpNext) & $FF)
.0fa2	8d 61 05	sta $0561			sta 	0+ReadBumpNextVec
.0fa5	a9 0f		lda #$0f			lda 	#((InputBumpNext) >> 8) & $FF
.0fa7	8d 62 05	sta $0562			sta 	1+ReadBumpNextVec
.0faa	a9 b7		lda #$b7			lda 	#((InputLookNext) & $FF)
.0fac	8d 63 05	sta $0563			sta 	0+ReadLookNextVec
.0faf	a9 0f		lda #$0f			lda 	#((InputLookNext) >> 8) & $FF
.0fb1	8d 64 05	sta $0564			sta 	1+ReadLookNextVec
.0fb4	4c 32 14	jmp $1432			jmp 	GetStringToBuffer
.0fb7					InputLookNext:
.0fb7	da		phx				phx
.0fb8					_ILNRetry:
.0fb8	ad 0c 04	lda $040c			lda 	InputBuffer 				; do we need to read more (e.g. the buffer is empty)
.0fbb	d0 08		bne $0fc5			bne 	_ILNNotEmpty
.0fbd	20 de 0f	jsr $0fde			jsr 	InputGetNewLine 			; get a new line
.0fc0	9c 5d 04	stz $045d			stz 	InputBufferPos 				; reset read position.
.0fc3	80 f3		bra $0fb8			bra 	_ILNRetry
.0fc5					_ILNNotEmpty:
.0fc5	ae 5d 04	ldx $045d			ldx 	InputBufferPos 				; get head available character
.0fc8	bd 0c 04	lda $040c,x			lda 	InputBuffer,x
.0fcb	d0 08		bne $0fd5			bne 	_ILNExit 					; if not EOS return it with CC.
.0fcd					_ILNNextLine:
.0fcd	9c 0c 04	stz $040c			stz 	InputBuffer 				; clear the buffer, indicating new line next time.
.0fd0	38		sec				sec 								; return CS,Zero
.0fd1	fa		plx				plx
.0fd2	a9 0d		lda #$0d			lda 	#13
.0fd4	60		rts				rts
.0fd5					_ILNExit:
.0fd5	fa		plx				plx
.0fd6	c9 00		cmp #$00			cmp 	#0 							; return CC, Z Flag set.
.0fd8	18		clc				clc
.0fd9	60		rts				rts
.0fda					InputBumpNext:
.0fda	ee 5d 04	inc $045d			inc 	InputBufferPos
.0fdd	60		rts				rts
.0fde					InputGetNewLine:
.0fde	48		pha				pha
.0fdf	da		phx				phx
.0fe0	5a		phy				phy
.0fe1	a9 3f		lda #$3f			lda 	#"?"
.0fe3	20 1d 10	jsr $101d			jsr 	IGNLEchoIfScreen
.0fe6	a0 00		ldy #$00			ldy 	#0 							; line position.
.0fe8					_IGNLLoop:
.0fe8	20 5c 13	jsr $135c			jsr 	VectorGetCharacter 			; get a character
.0feb	c9 00		cmp #$00			cmp 	#0
.0fed	f0 f9		beq $0fe8			beq 	_IGNLLoop
.0fef	c9 14		cmp #$14			cmp 	#$14 						; Backspace ?
.0ff1	f0 11		beq $1004			beq 	_IGNBackspace
.0ff3	c9 0d		cmp #$0d			cmp 	#$0D 						; Return ?
.0ff5	f0 17		beq $100e			beq 	_IGNExit
.0ff7	c0 50		cpy #$50			cpy 	#80 						; buffer full ?
.0ff9	f0 ed		beq $0fe8			beq 	_IGNLLoop
.0ffb	99 0c 04	sta $040c,y			sta 	InputBuffer,y
.0ffe	c8		iny				iny
.0fff	20 1d 10	jsr $101d			jsr 	IGNLEchoIfScreen
.1002	80 e4		bra $0fe8			bra 	_IGNLLoop
.1004					_IGNBackspace:
.1004	c0 00		cpy #$00			cpy 	#0
.1006	f0 e0		beq $0fe8			beq 	_IGNLLoop
.1008	20 1d 10	jsr $101d			jsr 	IGNLEchoIfScreen
.100b	88		dey				dey
.100c	80 da		bra $0fe8			bra 	_IGNLLoop
.100e					_IGNExit:
.100e	20 1d 10	jsr $101d			jsr 	IGNLEchoIfScreen
.1011	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.1013	99 0c 04	sta $040c,y			sta 	InputBuffer,y
.1016	9c 5d 04	stz $045d			stz 	InputBufferPos 				; reset position to start of input buffer.
.1019	7a		ply				ply
.101a	fa		plx				plx
.101b	68		pla				pla
.101c	60		rts				rts
.101d					IGNLEchoIfScreen:
.101d	ae 5f 04	ldx $045f			ldx 	currentChannel
.1020	d0 03		bne $1025			bne 	_IGNLEExit
.1022	20 53 13	jsr $1353			jsr 	VectorPrintCharacter
.1025					_IGNLEExit:
.1025	60		rts				rts
.040c					InputBuffer:
>040c							.fill 	81
.045d					InputBufferPos:
>045d							.fill 	1
.1026					GetInteger8Bit:
.1026	20 88 22	jsr $2288			jsr 	FloatIntegerPart
.1029	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.102b	60		rts				rts
.102c					GetInteger16Bit:
.102c	20 88 22	jsr $2288			jsr 	FloatIntegerPart
.102f	34 32		bit $32,x			bit 	NSStatus,x
.1031	30 09		bmi $103c			bmi 	Negate16Bit
.1033	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.1035	85 2c		sta $2c				sta 	zTemp0
.1037	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.1039	85 2d		sta $2d				sta 	zTemp0+1
.103b	60		rts				rts
.103c					Negate16Bit:
.103c	38		sec				sec
.103d	a9 00		lda #$00			lda 	#0
.103f	f5 3e		sbc $3e,x			sbc 	NSMantissa0,x
.1041	95 3e		sta $3e,x			sta 	NSMantissa0,x
.1043	85 2c		sta $2c				sta 	zTemp0
.1045	a9 00		lda #$00			lda 	#0
.1047	f5 4a		sbc $4a,x			sbc 	NSMantissa1,x
.1049	95 4a		sta $4a,x			sta 	NSMantissa1,x
.104b	85 2d		sta $2d				sta 	zTemp0+1
.104d	60		rts				rts
.104e					UnaryJoy:
.104e	fa		plx				plx
.104f	20 26 10	jsr $1026			jsr 	GetInteger8Bit 				; port #
.1052	48		pha				pha 								; zero the result.
.1053	20 4d 26	jsr $264d			jsr 	FloatSetZero
.1056	68		pla				pla
.1057	5a		phy				phy
.1058	da		phx				phx
.1059	20 56 ff	jsr $ff56			jsr 	X16_joystick_get 			; read joystick.
.105c	c0 00		cpy #$00			cpy 	#0 							; check no hardware
.105e	d0 10		bne $1070			bne 	_UJNoHardware
.1060	a8		tay				tay 								; move XA -> AY
.1061	8a		txa				txa
.1062	fa		plx				plx 								; we can update it now.
.1063	49 ff		eor #$ff			eor 	#$FF
.1065	95 4a		sta $4a,x			sta 	NSMantissa1,x
.1067	98		tya				tya
.1068	49 ff		eor #$ff			eor 	#$FF
.106a	95 3e		sta $3e,x			sta 	NSMantissa0,x
.106c	7a		ply				ply 								; restore Y
.106d	4c 36 08	jmp $0836			jmp 	NextCommand
.1070					_UJNoHardware:
.1070	fa		plx				plx
.1071	7a		ply				ply
.1072	a9 01		lda #$01			lda 	#1 							; set result to -1
.1074	20 4f 26	jsr $264f			jsr 	FloatSetByte
.1077	20 0f 26	jsr $260f			jsr 	FloatNegate
.107a	4c 36 08	jmp $0836			jmp 	NextCommand
.107d					UnaryLen:
.107d	fa		plx				plx
.107e	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; string address.
.1080	85 2c		sta $2c				sta 	zTemp0
.1082	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.1084	85 2d		sta $2d				sta 	zTemp0+1
.1086	b2 2c		lda ($2c)			lda 	(zTemp0) 					; get length
.1088	20 4f 26	jsr $264f			jsr 	FloatSetByte
.108b	4c 36 08	jmp $0836			jmp 	NextCommand
.108e					LinkFloatAdd:
.108e	fa		plx				plx
.108f	5a		phy			phy
.1090	20 71 20	jsr $2071		jsr	FloatAdd
.1093	7a		ply			ply
.1094	4c 36 08	jmp $0836			jmp 	NextCommand
.1097					LinkFloatSubtract:
.1097	fa		plx				plx
.1098	5a		phy			phy
.1099	20 6b 20	jsr $206b		jsr	FloatSubtract
.109c	7a		ply			ply
.109d	4c 36 08	jmp $0836			jmp 	NextCommand
.10a0					LinkFloatMultiply:
.10a0	fa		plx				plx
.10a1	5a		phy			phy
.10a2	20 0d 23	jsr $230d		jsr	FloatMultiply
.10a5	7a		ply			ply
.10a6	4c 36 08	jmp $0836			jmp 	NextCommand
.10a9					LinkFloatDivide:
.10a9	fa		plx				plx
.10aa	5a		phy			phy
.10ab	20 96 21	jsr $2196		jsr	FloatDivide
.10ae	b0 5c		bcs $110c		bcs	DivZeroError
.10b0	7a		ply			ply
.10b1	4c 36 08	jmp $0836			jmp 	NextCommand
.10b4					LinkFloatPower:
.10b4	fa		plx				plx
.10b5	5a		phy			phy
.10b6	20 16 29	jsr $2916		jsr	FloatPower
.10b9	b0 4e		bcs $1109		bcs	MapRangeError
.10bb	7a		ply			ply
.10bc	4c 36 08	jmp $0836			jmp 	NextCommand
.10bf					LinkCompareGreater:
.10bf	fa		plx				plx
.10c0	5a		phy			phy
.10c1	20 1a 21	jsr $211a		jsr	CompareGreater
.10c4	7a		ply			ply
.10c5	4c 36 08	jmp $0836			jmp 	NextCommand
.10c8					LinkCompareEqual:
.10c8	fa		plx				plx
.10c9	5a		phy			phy
.10ca	20 fc 20	jsr $20fc		jsr	CompareEqual
.10cd	7a		ply			ply
.10ce	4c 36 08	jmp $0836			jmp 	NextCommand
.10d1					LinkCompareLess:
.10d1	fa		plx				plx
.10d2	5a		phy			phy
.10d3	20 12 21	jsr $2112		jsr	CompareLess
.10d6	7a		ply			ply
.10d7	4c 36 08	jmp $0836			jmp 	NextCommand
.10da					LinkCompareGreaterEqual:
.10da	fa		plx				plx
.10db	5a		phy			phy
.10dc	20 2a 21	jsr $212a		jsr	CompareGreaterEqual
.10df	7a		ply			ply
.10e0	4c 36 08	jmp $0836			jmp 	NextCommand
.10e3					LinkCompareNotEqual:
.10e3	fa		plx				plx
.10e4	5a		phy			phy
.10e5	20 0c 21	jsr $210c		jsr	CompareNotEqual
.10e8	7a		ply			ply
.10e9	4c 36 08	jmp $0836			jmp 	NextCommand
.10ec					LinkCompareLessEqual:
.10ec	fa		plx				plx
.10ed	5a		phy			phy
.10ee	20 22 21	jsr $2122		jsr	CompareLessEqual
.10f1	7a		ply			ply
.10f2	4c 36 08	jmp $0836			jmp 	NextCommand
.10f5					LinkFloatIntegerPartDown:
.10f5	fa		plx				plx
.10f6	5a		phy			phy
.10f7	20 ac 22	jsr $22ac		jsr	FloatIntegerPartDown
.10fa	7a		ply			ply
.10fb	4c 36 08	jmp $0836			jmp 	NextCommand
.10fe					LinkFloatSquareRoot:
.10fe	fa		plx				plx
.10ff	5a		phy			phy
.1100	20 98 29	jsr $2998		jsr	FloatSquareRoot
.1103	b0 04		bcs $1109		bcs	MapRangeError
.1105	7a		ply			ply
.1106	4c 36 08	jmp $0836			jmp 	NextCommand
.1109					MapRangeError:
.1109	4c d9 1e	jmp $1ed9		jmp	ErrorV_range
.110c					DivZeroError:
.110c	4c 62 1f	jmp $1f62		jmp	ErrorV_divzero
.110f					LinkFloatLogarithm:
.110f	fa		plx				plx
.1110	5a		phy			phy
.1111	20 a2 28	jsr $28a2		jsr	FloatLogarithm
.1114	b0 f3		bcs $1109		bcs	MapRangeError
.1116	7a		ply			ply
.1117	4c 36 08	jmp $0836			jmp 	NextCommand
.111a					LinkFloatExponent:
.111a	fa		plx				plx
.111b	5a		phy			phy
.111c	20 9f 27	jsr $279f		jsr	FloatExponent
.111f	7a		ply			ply
.1120	4c 36 08	jmp $0836			jmp 	NextCommand
.1123					LinkFloatCosine:
.1123	fa		plx				plx
.1124	5a		phy			phy
.1125	20 93 27	jsr $2793		jsr	FloatCosine
.1128	7a		ply			ply
.1129	4c 36 08	jmp $0836			jmp 	NextCommand
.112c					LinkFloatSine:
.112c	fa		plx				plx
.112d	5a		phy			phy
.112e	20 33 29	jsr $2933		jsr	FloatSine
.1131	7a		ply			ply
.1132	4c 36 08	jmp $0836			jmp 	NextCommand
.1135					LinkFloatTangent:
.1135	fa		plx				plx
.1136	5a		phy			phy
.1137	20 a4 29	jsr $29a4		jsr	FloatTangent
.113a	7a		ply			ply
.113b	4c 36 08	jmp $0836			jmp 	NextCommand
.113e					LinkFloatArcTan:
.113e	fa		plx				plx
.113f	5a		phy			phy
.1140	20 78 26	jsr $2678		jsr	FloatArcTan
.1143	b0 c4		bcs $1109		bcs	MapRangeError
.1145	7a		ply			ply
.1146	4c 36 08	jmp $0836			jmp 	NextCommand
.1149					LinkFloatCompare:
.1149	fa		plx				plx
.114a	5a		phy			phy
.114b	20 32 21	jsr $2132		jsr	FloatCompare
.114e	7a		ply			ply
.114f	4c 36 08	jmp $0836			jmp 	NextCommand
.1152					LinkDivideInt32:
.1152	fa		plx				plx
.1153	5a		phy			phy
.1154	20 c0 21	jsr $21c0		jsr	DivideInt32
.1157	b0 b0		bcs $1109		bcs	MapRangeError
.1159	7a		ply			ply
.115a	4c 36 08	jmp $0836			jmp 	NextCommand
.115d					StackSaveCurrentPosition:
.115d	20 b2 08	jsr $08b2			jsr 	FixUpY 						; codePtr,Y is corrected so Y = 0
.1160	5a		phy				phy
.1161	a0 02		ldy #$02			ldy 	#2
.1163	a5 28		lda $28				lda 	codePtr
.1165	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.1167	c8		iny				iny
.1168	a5 29		lda $29				lda 	codePtr+1
.116a	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.116c	7a		ply				ply
.116d	60		rts				rts
.116e					StackLoadCurrentPosition:
.116e	a0 02		ldy #$02			ldy 	#2
.1170	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1172	85 28		sta $28				sta 	codePtr
.1174	c8		iny				iny
.1175	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1177	85 29		sta $29				sta 	codePtr+1
.1179	a0 00		ldy #$00			ldy 	#0
.117b	60		rts				rts
.117c					XCommandMouse:
.117c	fa		plx				plx
.117d	20 26 10	jsr $1026			jsr 	GetInteger8Bit 				; mouse control.
.1180	ca		dex				dex
.1181	da		phx				phx
.1182	5a		phy				phy
.1183	48		pha				pha
.1184	38		sec				sec 								; get screen resolution
.1185	20 5f ff	jsr $ff5f			jsr 	X16_screen_mode
.1188	68		pla				pla
.1189	20 68 ff	jsr $ff68			jsr 	X16_mouse_config 			; config the mouse
.118c	7a		ply				ply
.118d	fa		plx				plx
.118e	4c 36 08	jmp $0836			jmp 	NextCommand
.1191					XUnaryMB:
.1191	fa		plx				plx
.1192	20 c0 11	jsr $11c0			jsr 	XUnaryMouseCommon
.1195	a5 30		lda $30				lda 	zTemp2
.1197	e8		inx				inx
.1198	20 4f 26	jsr $264f			jsr 	FloatSetByte
.119b	4c 36 08	jmp $0836			jmp 	NextCommand
.119e					XUnaryMX:
.119e	fa		plx				plx
.119f	20 c0 11	jsr $11c0			jsr 	XUnaryMouseCommon
.11a2	a5 2c		lda $2c				lda 	zTemp0
.11a4	e8		inx				inx
.11a5	20 4f 26	jsr $264f			jsr 	FloatSetByte
.11a8	a5 2d		lda $2d				lda 	zTemp0+1
.11aa	95 4a		sta $4a,x			sta 	NSMantissa1,x
.11ac	4c 36 08	jmp $0836			jmp 	NextCommand
.11af					XUnaryMY:
.11af	fa		plx				plx
.11b0	20 c0 11	jsr $11c0			jsr 	XUnaryMouseCommon
.11b3	a5 2e		lda $2e				lda 	zTemp1
.11b5	e8		inx				inx
.11b6	20 4f 26	jsr $264f			jsr 	FloatSetByte
.11b9	a5 2f		lda $2f				lda 	zTemp1+1
.11bb	95 4a		sta $4a,x			sta 	NSMantissa1,x
.11bd	4c 36 08	jmp $0836			jmp 	NextCommand
.11c0					XUnaryMouseCommon:
.11c0	da		phx				phx
.11c1	5a		phy				phy
.11c2	a2 2c		ldx #$2c			ldx 	#zTemp0
.11c4	20 6b ff	jsr $ff6b			jsr 	X16_mouse_get
.11c7	85 30		sta $30				sta 	zTemp2
.11c9	7a		ply				ply
.11ca	fa		plx				plx
.11cb	60		rts				rts
.11cc					NegateTOS:
.11cc	fa		plx				plx
.11cd	20 0f 26	jsr $260f			jsr 	FloatNegate
.11d0	4c 36 08	jmp $0836			jmp 	NextCommand
.11d3					CommandNewLine:
.11d3	fa		plx				plx
.11d4	9c 6a 05	stz $056a			stz 	stringInitialised
.11d7	a2 ff		ldx #$ff			ldx 	#$FF
.11d9	4c 36 08	jmp $0836			jmp 	NextCommand
.11dc					CommandXNext:
.11dc	fa		plx				plx
.11dd					_CNRetry:
.11dd	a9 d3		lda #$d3			lda 	#FRAME_FOR 					; find the FOR
.11df	20 42 0d	jsr $0d42			jsr 	StackFindFrame
.11e2	20 b2 08	jsr $08b2			jsr 	FixUpY 						; so we can use Y
.11e5	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; check no index variable, both are $FF
.11e7	35 4a		and $4a,x			and 	NSMantissa1,x
.11e9	c9 ff		cmp #$ff			cmp 	#$FF
.11eb	f0 16		beq $1203			beq 	_CNNoIndexVariable
.11ed	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.11ef	a0 05		ldy #$05			ldy 	#5
.11f1	d1 24		cmp ($24),y			cmp 	(runtimeStackPtr),y
.11f3	d0 07		bne $11fc			bne 	_CNNIndexFail
.11f5	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.11f7	c8		iny				iny
.11f8	d1 24		cmp ($24),y			cmp 	(runtimeStackPtr),y
.11fa	f0 07		beq $1203			beq 	_CNNoIndexVariable
.11fc					_CNNIndexFail:
.11fc	a0 00		ldy #$00			ldy 	#0 							; so we don't fix up Y again !
.11fe	20 34 0d	jsr $0d34			jsr 	StackCloseFrame 			; close this frame
.1201	80 da		bra $11dd			bra 	_CNRetry
.1203					_CNNoIndexVariable:
.1203	ca		dex				dex
.1204	a0 04		ldy #$04			ldy 	#4 							; check for optimised NEXT
.1206	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1208	29 40		and #$40			and 	#$40	 					; bit 6
.120a	d0 55		bne $1261			bne 	_CNOptimisedNext
.120c	a0 05		ldy #$05			ldy 	#5 							; copy address to zTemp0, save for write back
.120e	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1210	48		pha				pha
.1211	85 2c		sta $2c				sta 	zTemp0
.1213	c8		iny				iny
.1214	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1216	18		clc				clc
.1217	6d 07 04	adc $0407			adc 	variableStartPage 			; point to variable page.
.121a	48		pha				pha
.121b	85 2d		sta $2d				sta 	zTemp0+1
.121d	20 d5 14	jsr $14d5			jsr 	ReadFloatZTemp0Sub 			; read current index onto stack.
.1220	a0 07		ldy #$07			ldy 	#7  						; read step onto stack +1
.1222	e8		inx				inx
.1223	20 a4 12	jsr $12a4			jsr 	CopyOffsetYToTOS
.1226	20 71 20	jsr $2071			jsr 	FloatAdd
.1229	68		pla				pla 								; restore address
.122a	85 2d		sta $2d				sta 	zTemp0+1
.122c	68		pla				pla
.122d	85 2c		sta $2c				sta 	zTemp0
.122f	20 b0 1a	jsr $1ab0			jsr 	WriteFloatZTemp0Sub			; write float.
.1232	e8		inx				inx  								; recover written
.1233	e8		inx				inx 								; load offset
.1234	a0 0d		ldy #$0d			ldy 	#13
.1236	20 a4 12	jsr $12a4			jsr 	CopyOffsetYToTOS
.1239	20 32 21	jsr $2132			jsr 	FloatCompare 				; and compare the floats.
.123c	ca		dex				dex 								; throw result (in NSMantissa0+1)
.123d	a0 0c		ldy #$0c			ldy 	#12 						; get the sign of the step.
.123f	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1241	30 08		bmi $124b			bmi 	_CNDownStep
.1243	b5 3f		lda $3f,x			lda 	NSMantissa0+1,x 			; get comparator
.1245	c9 01		cmp #$01			cmp 	#1 							; gone higher
.1247	f0 10		beq $1259			beq 	_CNExitFor 					; if so exit the loop
.1249	80 06		bra $1251			bra 	_CNLoopBack
.124b					_CNDownStep:
.124b	b5 3f		lda $3f,x			lda 	NSMantissa0+1,x 			; get comparator
.124d	c9 ff		cmp #$ff			cmp 	#255 						; gone lower
.124f	f0 08		beq $1259			beq 	_CNExitFor
.1251					_CNLoopBack:
.1251	20 6e 11	jsr $116e			jsr 	StackLoadCurrentPosition 	; loop back
.1254	a0 00		ldy #$00			ldy 	#0
.1256	4c 36 08	jmp $0836			jmp 	NextCommand
.1259					_CNExitFor:
.1259	20 34 0d	jsr $0d34			jsr 	StackCloseFrame 			; remove the frame and exit
.125c	a0 00		ldy #$00			ldy 	#0
.125e	4c 36 08	jmp $0836			jmp 	NextCommand
.1261					_CNOptimisedNext:
.1261	a0 05		ldy #$05			ldy 	#5 							; copy address to zTemp0, save for write back
.1263	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1265	85 2c		sta $2c				sta 	zTemp0
.1267	c8		iny				iny
.1268	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.126a	18		clc				clc
.126b	6d 07 04	adc $0407			adc 	variableStartPage 			; point to variable page.
.126e	85 2d		sta $2d				sta 	zTemp0+1
.1270	a0 07		ldy #$07			ldy 	#7 							; STEP value
.1272	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1274	a0 ff		ldy #$ff			ldy 	#$FF
.1276	18		clc				clc
.1277					_CNOIncrement:
.1277	c8		iny				iny
.1278	71 2c		adc ($2c),y			adc 	(zTemp0),y
.127a	91 2c		sta ($2c),y			sta 	(zTemp0),y
.127c	f0 f9		beq $1277			beq 	_CNOIncrement
.127e	18		clc				clc
.127f	a5 24		lda $24				lda 	runtimeStackPtr
.1281	69 0d		adc #$0d			adc 	#13
.1283	85 2e		sta $2e				sta 	zTemp1
.1285	a5 25		lda $25				lda 	runtimeStackPtr+1
.1287	69 00		adc #$00			adc 	#0
.1289	85 2f		sta $2f				sta 	zTemp1+1
.128b	a0 00		ldy #$00			ldy 	#0
.128d	b1 2e		lda ($2e),y			lda 	(zTemp1),y 					; byte 0
.128f	d1 2c		cmp ($2c),y			cmp 	(zTemp0),y
.1291	c8		iny				iny
.1292	b1 2e		lda ($2e),y			lda 	(zTemp1),y 					; byte 1
.1294	f1 2c		sbc ($2c),y			sbc 	(zTemp0),y
.1296	c8		iny				iny
.1297	b1 2e		lda ($2e),y			lda 	(zTemp1),y 					; byte 2
.1299	f1 2c		sbc ($2c),y			sbc 	(zTemp0),y
.129b	c8		iny				iny
.129c	b1 2e		lda ($2e),y			lda 	(zTemp1),y 					; byte 3
.129e	f1 2c		sbc ($2c),y			sbc 	(zTemp0),y
.12a0	90 b7		bcc $1259			bcc	 	_CNExitFor
.12a2	80 ad		bra $1251			bra 	_CNLoopBack
.12a4					CopyOffsetYToTOS:
.12a4	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.12a6	95 3e		sta $3e,x			sta 	NSMantissa0,x
.12a8	c8		iny				iny
.12a9	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.12ab	95 4a		sta $4a,x			sta 	NSMantissa1,x
.12ad	c8		iny				iny
.12ae	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.12b0	95 56		sta $56,x			sta 	NSMantissa2,x
.12b2	c8		iny				iny
.12b3	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.12b5	95 62		sta $62,x			sta 	NSMantissa3,x
.12b7	c8		iny				iny
.12b8	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.12ba	95 6e		sta $6e,x			sta 	NSExponent,x
.12bc	c8		iny				iny
.12bd	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.12bf	95 32		sta $32,x			sta 	NSStatus,x
.12c1	60		rts				rts
.12c2	4c 36 08	jmp $0836			jmp 	NextCommand
.12c5					NotTOS:
.12c5	fa		plx				plx
.12c6	20 88 22	jsr $2288			jsr 	FloatIntegerPart
.12c9	74 56		stz $56,x			stz 	NSMantissa2,x 				; chop down to 16 bit.
.12cb	74 62		stz $62,x			stz 	NSMantissa3,x
.12cd	20 0f 26	jsr $260f			jsr 	FloatNegate		 			; negate
.12d0	e8		inx				inx 								; and subtract 1.
.12d1	a9 01		lda #$01			lda 	#1
.12d3	20 4f 26	jsr $264f			jsr 	FloatSetByte
.12d6	20 6b 20	jsr $206b			jsr 	FloatSubtract
.12d9					_NotTOSSkip:
.12d9	4c 36 08	jmp $0836			jmp 	NextCommand
.12dc					CommandXOn:
.12dc	fa		plx				plx
.12dd	20 26 10	jsr $1026			jsr 	GetInteger8Bit 				; get the integer part, the ON x GOTO bit
.12e0	8d 5e 04	sta $045e			sta 	onCount 					; save it.
.12e3	20 b2 08	jsr $08b2			jsr 	FixUpY 						; Y = 0
.12e6					_CONFind:
.12e6	ce 5e 04	dec $045e			dec 	onCount 					; reached zero, do this one
.12e9	f0 0b		beq $12f6			beq 	_CONFound
.12eb	c8		iny				iny 								; skip over the token (GOTO or GOSUB page, and line #)
.12ec	c8		iny				iny
.12ed	c8		iny				iny
.12ee	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a moreon after it, if so we can keep going.
.12f0	c8		iny				iny
.12f1	c9 aa		cmp #$aa			cmp 	#PCD_MOREON
.12f3	f0 f1		beq $12e6			beq 	_CONFind
.12f5	88		dey				dey 								; point to character after last GOTO/GOSUB
.12f6					_CONFound:
.12f6	4c 36 08	jmp $0836			jmp 	NextCommand
.12f9					CommandMoreOn:
.12f9	fa		plx				plx
.12fa	c8		iny				iny 								; so it goes to the first non-goto/gosub
.12fb	c8		iny				iny
.12fc	c8		iny				iny
.12fd	4c 36 08	jmp $0836			jmp 	NextCommand
.045e					onCount:
>045e							.fill 	1
.1300					UnaryPeek:
.1300	fa		plx				plx
.1301	20 2c 10	jsr $102c			jsr 	GetInteger16Bit
.1304	da		phx				phx
.1305	5a		phy				phy
.1306	a6 2c		ldx $2c				ldx 	zTemp0
.1308	a4 2d		ldy $2d				ldy 	zTemp0+1
.130a	20 4a 1c	jsr $1c4a			jsr 	XPeekMemory
.130d	7a		ply				ply
.130e	fa		plx				plx
.130f	20 4f 26	jsr $264f			jsr 	FloatSetByte
.1312	4c 36 08	jmp $0836			jmp 	NextCommand
.1315					CommandPOKE:
.1315	fa		plx				plx
.1316	da		phx				phx 								; save XY
.1317	5a		phy				phy
.1318	20 26 10	jsr $1026			jsr 	GetInteger8Bit 				; get byte to POKE and save it
.131b	48		pha				pha
.131c	b5 49		lda $49,x			lda 	NSMantissa1-1,x 			; YX = address from Mantissa next up
.131e	a8		tay				tay
.131f	b5 3d		lda $3d,x			lda 	NSMantissa0-1,x
.1321	aa		tax				tax
.1322	68		pla				pla
.1323	20 36 1c	jsr $1c36			jsr 	XPokeMemory
.1326	7a		ply				ply 								; restore YX and drop 2
.1327	fa		plx				plx
.1328	ca		dex				dex
.1329	ca		dex				dex
.132a	4c 36 08	jmp $0836			jmp 	NextCommand
.132d					UnaryPos:
.132d	fa		plx				plx
.132e	20 c9 1b	jsr $1bc9			jsr 	XGetHPos
.1331	20 4f 26	jsr $264f			jsr 	FloatSetByte
.1334	4c 36 08	jmp $0836			jmp 	NextCommand
.1337					GetChannel:
.1337	fa		plx				plx
.1338	ad 5f 04	lda $045f			lda 	currentChannel
.133b	e8		inx				inx
.133c	20 4f 26	jsr $264f			jsr 	FloatSetByte
.133f	4c 36 08	jmp $0836			jmp 	NextCommand
.1342					SetChannel:
.1342	fa		plx				plx
.1343	20 88 22	jsr $2288			jsr 	FloatIntegerPart
.1346	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.1348	8d 5f 04	sta $045f			sta 	currentChannel
.134b	ca		dex				dex
.134c	4c 36 08	jmp $0836			jmp 	NextCommand
.134f					SetDefaultChannel:
.134f	9c 5f 04	stz $045f			stz 	currentChannel
.1352	60		rts				rts
.1353					VectorPrintCharacter:
.1353	da		phx				phx
.1354	ae 5f 04	ldx $045f			ldx 	currentChannel
.1357	20 74 1c	jsr $1c74			jsr 	XPrintCharacterToChannel
.135a	fa		plx				plx
.135b	60		rts				rts
.135c					VectorGetCharacter:
.135c	da		phx				phx
.135d	ae 5f 04	ldx $045f			ldx 	currentChannel
.1360	20 ad 1b	jsr $1bad			jsr 	XGetCharacterFromChannel
.1363	fa		plx				plx
.1364	60		rts				rts
.045f					currentChannel:
>045f							.fill 	1
.1365					PrintNumber:
.1365	fa		plx				plx
.1366	a9 07		lda #$07			lda 	#7
.1368	20 35 25	jsr $2535			jsr 	FloatToString 				; to number in decimal buffer
.136b	ca		dex				dex 								; drop
.136c	da		phx				phx
.136d	a2 00		ldx #$00			ldx 	#0 							; print buffer.
.136f					_PNLoop:
.136f	bd 98 05	lda $0598,x			lda 	decimalBuffer,x
.1372	20 53 13	jsr $1353			jsr 	VectorPrintCharacter
.1375	e8		inx				inx
.1376	bd 98 05	lda $0598,x			lda	 	decimalBuffer,x
.1379	d0 f4		bne $136f			bne 	_PNLoop
.137b	a9 20		lda #$20			lda 	#32 						; trailing space
.137d	20 53 13	jsr $1353			jsr 	VectorPrintCharacter
.1380	fa		plx				plx
.1381	4c 36 08	jmp $0836			jmp 	NextCommand
.1384					PrintString:
.1384	fa		plx				plx
.1385	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; point zTemp0 to string
.1387	85 2c		sta $2c				sta 	zTemp0
.1389	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.138b	85 2d		sta $2d				sta 	zTemp0+1
.138d	ca		dex				dex 								; drop
.138e	da		phx				phx
.138f	5a		phy				phy
.1390	b2 2c		lda ($2c)			lda 	(zTemp0) 					; X = count
.1392	aa		tax				tax
.1393	a0 01		ldy #$01			ldy 	#1 							; Y = position
.1395					_PSLoop:
.1395	e0 00		cpx #$00			cpx 	#0 							; complete ?
.1397	f0 09		beq $13a2			beq 	_PSExit
.1399	ca		dex				dex 								; dec count
.139a	b1 2c		lda ($2c),y			lda 	(zTemp0),y 					; print char and bump
.139c	20 53 13	jsr $1353			jsr 	VectorPrintCharacter
.139f	c8		iny				iny
.13a0	80 f3		bra $1395			bra 	_PSLoop
.13a2					_PSExit:
.13a2	7a		ply				ply
.13a3	fa		plx				plx
.13a4	4c 36 08	jmp $0836			jmp 	NextCommand
.13a7					CommandPushN:
.13a7	fa		plx				plx
.13a8	e8		inx				inx 								; next slot on stack
.13a9	b1 28		lda ($28),y			lda 	(codePtr),y 				; exponent
.13ab	95 6e		sta $6e,x			sta 	NSExponent,x
.13ad	c8		iny				iny
.13ae	b1 28		lda ($28),y			lda 	(codePtr),y 				; mantissa
.13b0	95 3e		sta $3e,x			sta 	NSMantissa0,x
.13b2	c8		iny				iny
.13b3	b1 28		lda ($28),y			lda 	(codePtr),y
.13b5	95 4a		sta $4a,x			sta 	NSMantissa1,x
.13b7	c8		iny				iny
.13b8	b1 28		lda ($28),y			lda 	(codePtr),y
.13ba	95 56		sta $56,x			sta 	NSMantissa2,x
.13bc	c8		iny				iny
.13bd	b1 28		lda ($28),y			lda 	(codePtr),y
.13bf	48		pha				pha
.13c0	29 7f		and #$7f			and 	#$7F
.13c2	95 62		sta $62,x			sta 	NSMantissa3,x
.13c4	68		pla				pla 								; sign in mantissa3:7
.13c5	29 80		and #$80			and 	#$80
.13c7	95 32		sta $32,x			sta 	NSStatus,x
.13c9	c8		iny				iny
.13ca	4c 36 08	jmp $0836			jmp 	NextCommand
.13cd					CommandPushS:
.13cd	fa		plx				plx
.13ce	e8		inx				inx 								; next slot on stack
.13cf	18		clc				clc
.13d0	98		tya				tya
.13d1	65 28		adc $28				adc 	codePtr 					; the string is inline
.13d3	95 3e		sta $3e,x			sta 	NSMantissa0,x
.13d5	a5 29		lda $29				lda 	codePtr+1
.13d7	69 00		adc #$00			adc 	#0
.13d9	95 4a		sta $4a,x			sta 	NSMantissa1,x
.13db	74 56		stz $56,x			stz 	NSMantissa2,x
.13dd	74 62		stz $62,x			stz 	NSMantissa3,x
.13df	a9 40		lda #$40			lda 	#NSSString
.13e1	95 32		sta $32,x			sta 	NSStatus,x
.13e3	98		tya				tya 								; string length +1 added to Y
.13e4	38		sec				sec
.13e5	71 28		adc ($28),y			adc 	(codePtr),y 				; next instruction
.13e7	a8		tay				tay
.13e8	4c 36 08	jmp $0836			jmp 	NextCommand
.13eb					CommandXRead:
.13eb	fa		plx				plx
.13ec	5a		phy				phy 								; save Y
.13ed	20 1e 14	jsr $141e			jsr 	ReadStringToBuffer 			; read element into buffer
.13f0	e8		inx				inx									; space on stack
.13f1	a9 61		lda #$61			lda 	#((ReadBufferSize) & $FF)
.13f3	85 2c		sta $2c				sta 	0+zTemp0
.13f5	a9 04		lda #$04			lda 	#((ReadBufferSize) >> 8) & $FF
.13f7	85 2d		sta $2d				sta 	1+zTemp0
.13f9	20 3d 19	jsr $193d			jsr 	ValEvaluateZTemp0
.13fc	b0 04		bcs $1402			bcs 	_CRError 					; failed
.13fe	7a		ply				ply 								; restore Y
.13ff	4c 36 08	jmp $0836			jmp 	NextCommand
.1402					_CRError:
.1402	4c e9 1e	jmp $1ee9		jmp	ErrorV_value
.1405					CommandReadString:
.1405	fa		plx				plx
.1406	5a		phy				phy 								; save Y
.1407	20 1e 14	jsr $141e			jsr 	ReadStringToBuffer 			; read text
.140a	e8		inx				inx 								; make space on stack
.140b	20 4d 26	jsr $264d			jsr 	FloatSetZero 				; store as string on stack
.140e	a9 61		lda #$61			lda 	#ReadBufferSize & $FF
.1410	95 3e		sta $3e,x			sta 	NSMantissa0,x
.1412	a9 04		lda #$04			lda 	#ReadBufferSize >> 8
.1414	95 4a		sta $4a,x			sta 	NSMantissa1,x
.1416	a9 40		lda #$40			lda 	#NSSString
.1418	95 32		sta $32,x			sta 	NSStatus,x
.141a	7a		ply				ply 								; restore Y
.141b	4c 36 08	jmp $0836			jmp 	NextCommand
.141e					ReadStringToBuffer:
.141e	a9 b1		lda #$b1			lda 	#((ReadBumpNext) & $FF)
.1420	8d 61 05	sta $0561			sta 	0+ReadBumpNextVec
.1423	a9 14		lda #$14			lda 	#((ReadBumpNext) >> 8) & $FF
.1425	8d 62 05	sta $0562			sta 	1+ReadBumpNextVec
.1428	a9 84		lda #$84			lda 	#((ReadLookNext) & $FF)
.142a	8d 63 05	sta $0563			sta 	0+ReadLookNextVec
.142d	a9 14		lda #$14			lda 	#((ReadLookNext) >> 8) & $FF
.142f	8d 64 05	sta $0564			sta 	1+ReadLookNextVec
.1432					GetStringToBuffer:
.1432	20 81 14	jsr $1481			jsr		GetLookNext 				; skip all leading spaces.
.1435	f0 44		beq $147b			beq 	_RBError 					; end of data
.1437	b0 f9		bcs $1432			bcs 	GetStringToBuffer 			; switched to new data line.
.1439	c9 20		cmp #$20			cmp 	#' ' 						; non space got something
.143b	b0 05		bcs $1442			bcs 	_RBNoSpace
.143d	20 7e 14	jsr $147e			jsr 	GetBumpNext 				; consume space and loop round.
.1440	80 f0		bra $1432			bra 	GetStringToBuffer
.1442					_RBNoSpace:
.1442	9c 61 04	stz $0461			stz 	ReadBufferSize 				; empty the buffer.
.1445	c9 22		cmp #$22			cmp 	#'"' 						; is it a '"'
.1447	d0 08		bne $1451			bne 	_RBCommaSep
.1449	8d 60 04	sta $0460			sta 	ReadSep 					; use as a seperator
.144c	20 7e 14	jsr $147e			jsr 	GetBumpNext 				; consume the '"'
.144f	80 05		bra $1456			bra 	_RBGetText
.1451					_RBCommaSep:
.1451	a9 2c		lda #$2c			lda 	#","						; get till comma
.1453	8d 60 04	sta $0460			sta 	ReadSep
.1456					_RBGetText:
.1456	20 81 14	jsr $1481			jsr 	GetLookNext 				; what follows
.1459	b0 18		bcs $1473			bcs 	_RBEndGet 					; if new DATA line, the end without consumption
.145b	20 7e 14	jsr $147e			jsr 	GetBumpNext 				; consume it whatever
.145e	cd 60 04	cmp $0460			cmp 	ReadSep 					; if found the seperator.
.1461	f0 10		beq $1473			beq 	_RBEndGet 					; exit after consumption
.1463	da		phx				phx
.1464	ae 61 04	ldx $0461			ldx 	ReadBufferSize 				; copy into buffer.
.1467	ee 61 04	inc $0461			inc 	ReadBufferSize
.146a	9d 62 04	sta $0462,x			sta 	ReadBuffer,x
.146d	9e 63 04	stz $0463,x			stz 	ReadBuffer+1,x 				; make ASCIIZ as well.
.1470	fa		plx				plx
.1471	80 e3		bra $1456			bra 	_RBGetText
.1473					_RBEndGet:
.1473	c9 22		cmp #$22			cmp 	#'"'
.1475	d0 03		bne $147a			bne 	_RBNotQuote
.1477	20 7e 14	jsr $147e			jsr 	GetBumpNext
.147a					_RBNotQuote:
.147a	60		rts				rts
.147b					_RBError:
.147b	4c 9e 1f	jmp $1f9e		jmp	ErrorV_data
.147e					GetBumpNext:
.147e	6c 61 05	jmp ($0561)			jmp 	(ReadBumpNextVec)
.1481					GetLookNext:
.1481	6c 63 05	jmp ($0563)			jmp 	(ReadLookNextVec)
.1484					ReadLookNext:
.1484	ad 65 05	lda $0565			lda 	dataRemaining 				; any data remaining
.1487	f0 04		beq $148d			beq 	_RLNFindData
.1489	b2 2a		lda ($2a)			lda 	(objPtr) 					; return that object.
.148b	18		clc				clc
.148c	60		rts				rts
.148d					_RLNFindData:
.148d	b2 2a		lda ($2a)			lda 	(objPtr) 					; see where we are
.148f	c9 ff		cmp #$ff			cmp 	#$FF 						; if at $FF then end, error.
.1491	f0 1a		beq $14ad			beq 	_RLNNoData
.1493	c9 cf		cmp #$cf			cmp 	#PCD_CMD_DATA 				; Found DATA
.1495	f0 05		beq $149c			beq 	_RLNHaveData
.1497					_RLNNext:
.1497	20 1c 20	jsr $201c			jsr 	MoveObjectForward			; else scan forward.
.149a	80 f1		bra $148d			bra 	_RLNFindData
.149c					_RLNHaveData:
.149c	a0 01		ldy #$01			ldy 	#1 							; get length
.149e	b1 2a		lda ($2a),y			lda 	(objPtr),y
.14a0	f0 f5		beq $1497			beq 	_RLNNext 					; skip if DATA alone
.14a2	20 b1 14	jsr $14b1			jsr 	ReadBumpNext 				; advance by two
.14a5	20 b1 14	jsr $14b1			jsr 	ReadBumpNext
.14a8	8d 65 05	sta $0565			sta 	dataRemaining 				; set data left count.
.14ab	38		sec				sec
.14ac	60		rts				rts
.14ad					_RLNNoData:
.14ad	a9 00		lda #$00			lda 	#0
.14af	38		sec				sec
.14b0	60		rts				rts
.14b1					ReadBumpNext:
.14b1	e6 2a		inc $2a				inc 	objPtr
.14b3	d0 02		bne $14b7			bne 	_RBNSkip
.14b5	e6 2b		inc $2b				inc 	objPtr+1
.14b7					_RBNSkip:
.14b7	ce 65 05	dec $0565			dec 	dataRemaining
.14ba	60		rts				rts
.0460					ReadSep:
>0460							.fill 	1
.0461					ReadBufferSize:
>0461							.fill 	1
.0462					ReadBuffer:
>0462							.fill 	255
.0561					ReadBumpNextVec:
>0561							.fill 	2
.0563					ReadLookNextVec:
>0563							.fill 	2
.14bb					ReadFloatCommand:
.14bb	fa		plx				plx
.14bc	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.14be	85 2c		sta $2c				sta 	zTemp0 						; save in MSB
.14c0	88		dey				dey 								; get the upper 3 bits
.14c1	b1 28		lda ($28),y			lda 	(codePtr),y
.14c3	29 07		and #$07			and 	#7
.14c5	c8		iny				iny
.14c6	c8		iny				iny
.14c7	06 2c		asl $2c				asl 	zTemp0 						; shift zTemp0:A left
.14c9	2a		rol a				rol 	a 							; carry will be clear.
.14ca	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.14cd	85 2d		sta $2d				sta 	zTemp0+1
.14cf	20 d5 14	jsr $14d5			jsr 	ReadFloatZTemp0Sub
.14d2	4c 36 08	jmp $0836			jmp 	NextCommand
.14d5					ReadFloatZTemp0Sub:
.14d5	5a		phy				phy 								; start write
.14d6	a0 01		ldy #$01			ldy 	#1
.14d8	e8		inx				inx
.14d9	b2 2c		lda ($2c)			lda 	(zTemp0)
.14db	95 3e		sta $3e,x			sta 	NSMantissa0,x
.14dd	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.14df	95 4a		sta $4a,x			sta 	NSMantissa1,x
.14e1	c8		iny				iny
.14e2	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.14e4	95 56		sta $56,x			sta 	NSMantissa2,x
.14e6	c8		iny				iny
.14e7	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.14e9	95 62		sta $62,x			sta 	NSMantissa3,x
.14eb	c8		iny				iny
.14ec	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.14ee	95 6e		sta $6e,x			sta 	NSExponent,x
.14f0	c8		iny				iny
.14f1	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.14f3	95 32		sta $32,x			sta 	NSStatus,x
.14f5	7a		ply				ply
.14f6	60		rts				rts
.14f7					ReadIntegerCommand:
.14f7	fa		plx				plx
.14f8	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.14fa	85 2c		sta $2c				sta 	zTemp0 						; save in MSB
.14fc	88		dey				dey 								; get the upper 3 bits
.14fd	b1 28		lda ($28),y			lda 	(codePtr),y
.14ff	29 07		and #$07			and 	#7
.1501	c8		iny				iny
.1502	c8		iny				iny
.1503	06 2c		asl $2c				asl 	zTemp0 						; shift zTemp0:A left
.1505	2a		rol a				rol 	a 							; carry will be clear.
.1506	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.1509	85 2d		sta $2d				sta 	zTemp0+1
.150b	20 11 15	jsr $1511			jsr 	ReadIntegerZTemp0Sub
.150e	4c 36 08	jmp $0836			jmp 	NextCommand
.1511					ReadIntegerZTemp0Sub:
.1511	5a		phy				phy 								; start write
.1512	a0 01		ldy #$01			ldy 	#1
.1514	e8		inx				inx 								; prepare
.1515	74 56		stz $56,x			stz 	NSMantissa2,x
.1517	74 62		stz $62,x			stz 	NSMantissa3,x
.1519	74 6e		stz $6e,x			stz 	NSExponent,x
.151b	74 32		stz $32,x			stz 	NSStatus,x
.151d	b1 2c		lda ($2c),y			lda 	(zTemp0),y 					; get MSB, do -ve code.
.151f	30 08		bmi $1529			bmi 	_RIZNegative
.1521	95 4a		sta $4a,x			sta 	NSMantissa1,x 				; +ve read
.1523	b2 2c		lda ($2c)			lda 	(zTemp0)
.1525	95 3e		sta $3e,x			sta 	NSMantissa0,x
.1527	7a		ply				ply
.1528	60		rts				rts
.1529					_RIZNegative:
.1529	38		sec				sec 								; -ve read
.152a	a9 00		lda #$00			lda 	#0
.152c	f2 2c		sbc ($2c)			sbc 	(zTemp0)
.152e	95 3e		sta $3e,x			sta 	NSMantissa0,x
.1530	a9 00		lda #$00			lda 	#0
.1532	f1 2c		sbc ($2c),y			sbc 	(zTemp0),y
.1534	95 4a		sta $4a,x			sta 	NSMantissa1,x
.1536	a9 80		lda #$80			lda 	#$80
.1538	95 32		sta $32,x			sta 	NSStatus,x
.153a	7a		ply				ply
.153b	60		rts				rts
.153c					ReadStringCommand:
.153c	fa		plx				plx
.153d	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.153f	85 2c		sta $2c				sta 	zTemp0 						; save in MSB
.1541	88		dey				dey 								; get the upper 3 bits
.1542	b1 28		lda ($28),y			lda 	(codePtr),y
.1544	29 07		and #$07			and 	#7
.1546	c8		iny				iny
.1547	c8		iny				iny
.1548	06 2c		asl $2c				asl 	zTemp0 						; shift zTemp0:A left
.154a	2a		rol a				rol 	a 							; carry will be clear.
.154b	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.154e	85 2d		sta $2d				sta 	zTemp0+1
.1550	20 56 15	jsr $1556			jsr 	ReadStringZTemp0Sub
.1553	4c 36 08	jmp $0836			jmp 	NextCommand
.1556					ReadStringZTemp0Sub:
.1556	5a		phy				phy 								; start write
.1557	e8		inx				inx 								; prepare
.1558	74 56		stz $56,x			stz 	NSMantissa2,x
.155a	74 62		stz $62,x			stz 	NSMantissa3,x
.155c	74 6e		stz $6e,x			stz 	NSExponent,x
.155e	a9 40		lda #$40			lda 	#NSSString
.1560	74 32		stz $32,x			stz 	NSStatus,x
.1562	18		clc				clc
.1563	b2 2c		lda ($2c)			lda 	(zTemp0)					; read address of block add 2.
.1565	69 02		adc #$02			adc 	#2 							; this points to actual data
.1567	95 3e		sta $3e,x			sta 	NSMantissa0,x 				; if address 0 the MSB will still be 0
.1569	a0 01		ldy #$01			ldy 	#1
.156b	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.156d	69 00		adc #$00			adc 	#0
.156f	95 4a		sta $4a,x			sta 	NSMantissa1,x 				; +ve read
.1571	d0 08		bne $157b			bne 	_RSZNoDefault 				; if read $00 use a default value.
.1573	a9 7d		lda #$7d			lda 	#_RSZNull & $FF
.1575	95 3e		sta $3e,x			sta 	NSMantissa0,x
.1577	a9 15		lda #$15			lda 	#_RSZNull >> 8
.1579	95 4a		sta $4a,x			sta 	NSMantissa1,x
.157b					_RSZNoDefault:
.157b	7a		ply				ply
.157c	60		rts				rts
.157d					_RSZNull:
>157d	00						.byte 	0
.157e					CommandRestore:
.157e	fa		plx				plx
.157f	20 85 15	jsr $1585			jsr 	RestoreCode
.1582	4c 36 08	jmp $0836			jmp 	NextCommand
.1585					RestoreCode:
.1585	ad 04 04	lda $0404			lda 	runtimeHigh 				; reset pointer
.1588	85 2b		sta $2b				sta 	objPtr+1
.158a	64 2a		stz $2a				stz 	objPtr
.158c	9c 65 05	stz $0565			stz 	dataRemaining 				; no data remaining.
.158f	60		rts				rts
.0565					dataRemaining:
>0565							.fill 	1		 					; 0 if not in data statement
.1590					UnaryRND:
.1590	fa		plx				plx
.1591	34 32		bit $32,x			bit 	NSStatus,x 					; -ve then set seed from operand
.1593	10 17		bpl $15ac			bpl 	_URNoSeed
.1595	20 a2 23	jsr $23a2			jsr 	FloatNormalise 				; some float value
.1598	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; copy to Mantissa
.159a	8d 66 05	sta $0566			sta 	randomSeed+0
.159d	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.159f	8d 67 05	sta $0567			sta 	randomSeed+1
.15a2	b5 56		lda $56,x			lda 	NSMantissa2,x
.15a4	8d 68 05	sta $0568			sta 	randomSeed+2
.15a7	b5 62		lda $62,x			lda 	NSMantissa3,x
.15a9	8d 69 05	sta $0569			sta 	randomSeed+3
.15ac					_URNoSeed:
.15ac	20 ce 15	jsr $15ce			jsr 	RandomNumberGenerator 		; create a number and copy to mantissa
.15af	ad 66 05	lda $0566			lda 	randomSeed+0
.15b2	95 3e		sta $3e,x			sta 	NSMantissa0,x
.15b4	ad 67 05	lda $0567			lda 	randomSeed+1
.15b7	95 4a		sta $4a,x			sta 	NSMantissa1,x
.15b9	ad 68 05	lda $0568			lda 	randomSeed+2
.15bc	95 56		sta $56,x			sta 	NSMantissa2,x
.15be	ad 69 05	lda $0569			lda 	randomSeed+3
.15c1	29 7f		and #$7f			and 	#$7F
.15c3	95 62		sta $62,x			sta 	NSMantissa3,x
.15c5	a9 e1		lda #$e1			lda 	#(-31 & $FF)
.15c7	95 6e		sta $6e,x			sta 	NSExponent,x
.15c9	74 32		stz $32,x			stz 	NSStatus,x
.15cb	4c 36 08	jmp $0836			jmp 	NextCommand
.15ce					RandomNumberGenerator:
.15ce	5a		phy				phy
.15cf	ad 66 05	lda $0566			lda 	randomSeed+0 				; check if zero
.15d2	0d 67 05	ora $0567			ora 	randomSeed+1
.15d5	0d 68 05	ora $0568			ora 	randomSeed+2
.15d8	0d 69 05	ora $0569			ora 	randomSeed+3
.15db	d0 07		bne $15e4			bne 	_RNGNoSeed
.15dd	ce 69 05	dec $0569			dec 	randomSeed+3 				; if so tweak and flog
.15e0	a0 64		ldy #$64			ldy 	#100
.15e2	80 05		bra $15e9			bra 	_RNGLoop
.15e4					_RNGNoSeed:
.15e4	a0 08		ldy #$08			ldy 	#8
.15e6	ad 66 05	lda $0566			lda 	randomSeed+0
.15e9					_RNGLoop:
.15e9	0a		asl a				asl		a
.15ea	2e 67 05	rol $0567			rol 	randomSeed+1
.15ed	2e 68 05	rol $0568			rol 	randomSeed+2
.15f0	2e 69 05	rol $0569			rol 	randomSeed+3
.15f3	90 02		bcc $15f7			bcc		_RNGSkip
.15f5	49 c5		eor #$c5			eor 	#$C5
.15f7					_RNGSkip:
.15f7	88		dey				dey
.15f8	d0 ef		bne $15e9			bne		_RNGLoop
.15fa	8d 66 05	sta $0566			sta 	randomSeed+0
.15fd	7a		ply				ply
.15fe	60		rts				rts
.0566					randomSeed:
>0566							.fill 	4
.15ff					StringConcatenate:
.15ff	fa		plx				plx
.1600	ca		dex				dex
.1601	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; copy strings to zTemp1 and zTemp2
.1603	85 2e		sta $2e				sta 	zTemp1
.1605	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.1607	85 2f		sta $2f				sta 	zTemp1+1
.1609	b5 3f		lda $3f,x			lda 	NSMantissa0+1,x
.160b	85 30		sta $30				sta 	zTemp2
.160d	b5 4b		lda $4b,x			lda 	NSMantissa1+1,x
.160f	85 31		sta $31				sta 	zTemp2+1
.1611	18		clc				clc 								; work out total length
.1612	b2 2e		lda ($2e)			lda 	(zTemp1)
.1614	72 30		adc ($30)			adc 	(zTemp2)
.1616	b0 18		bcs $1630			bcs 	_BCLength 					; more than 255 characters.
.1618	48		pha				pha 								; save total
.1619	20 f6 16	jsr $16f6			jsr 	StringAllocTemp 			; space for result.
.161c	68		pla				pla 								; write total as first.
.161d	92 22		sta ($22)			sta 	(zsTemp)
.161f	20 33 16	jsr $1633			jsr 	_BCCopyZTemp1 				; copy zTemp1 to target
.1622	a5 30		lda $30				lda 	zTemp2 						; copy address zTemp2->1
.1624	85 2e		sta $2e				sta 	zTemp1
.1626	a5 31		lda $31				lda 	zTemp2+1
.1628	85 2f		sta $2f				sta 	zTemp1+1
.162a	20 33 16	jsr $1633			jsr 	_BCCopyZTemp1 				; and copy it, e.g. zTemp2
.162d	4c 36 08	jmp $0836			jmp 	NextCommand
.1630					_BCLength:
.1630	4c d9 1e	jmp $1ed9		jmp	ErrorV_range
.1633					_BCCopyZTemp1:
.1633	b2 2e		lda ($2e)			lda 	(zTemp1) 					; bytes to copy
.1635	f0 15		beq $164c			beq 	_BCCExit 					; none.
.1637	da		phx				phx 								; save XY
.1638	5a		phy				phy
.1639	aa		tax				tax 								; count in X.
.163a	a0 01		ldy #$01			ldy 	#1
.163c					_BCCLoop:
.163c	e6 22		inc $22				inc 	zsTemp 						; bump pointer, pre-increment
.163e	d0 02		bne $1642			bne 	_BCCNoCarry
.1640	e6 23		inc $23				inc 	zsTemp+1
.1642					_BCCNoCarry:
.1642	b1 2e		lda ($2e),y			lda 	(zTemp1),y				 	; copy bytes
.1644	92 22		sta ($22)			sta 	(zsTemp)
.1646	c8		iny				iny
.1647	ca		dex				dex 								; X times
.1648	d0 f2		bne $163c			bne 	_BCCLoop
.164a	7a		ply				ply 								; restore YX
.164b	fa		plx				plx
.164c					_BCCExit:
.164c	60		rts				rts
.164d					XRuntimeSetup:
.164d	a9 ff		lda #$ff	 		lda 	#$FF 						; default banks to access.
.164f	8d 6d 05	sta $056d	 		sta 	ramBank
.1652	8d 6e 05	sta $056e	 		sta 	romBank
.1655	60		rts				rts
.1656					SignTOS:
.1656	fa		plx				plx
.1657	20 6f 26	jsr $266f			jsr 	FloatIsZero 				; if zero
.165a	f0 0f		beq $166b			beq 	_SGZero  					; return Int Zero
.165c	b5 32		lda $32,x			lda 	NSStatus,x 					; get status w/sign
.165e	48		pha				pha
.165f	a9 01		lda #$01			lda 	#1 							; set result to 1
.1661	20 4f 26	jsr $264f			jsr 	FloatSetByte
.1664	68		pla				pla
.1665	29 80		and #$80			and		#$80 						; copy the sign byte out
.1667	95 32		sta $32,x			sta 	NSStatus,x  				; so it will be -1 or 1
.1669	80 03		bra $166e			bra 	_SGExit
.166b					_SGZero:
.166b	20 4d 26	jsr $264d			jsr 	FloatSetZero
.166e					_SGExit:
.166e	4c 36 08	jmp $0836			jmp 	NextCommand
.1671					CommandShift:
.1671	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted command (X already pushed)
.1673	c8		iny				iny
.1674	0a		asl a				asl 	a 							; double into X
.1675	aa		tax				tax
.1676	7c 21 1a	jmp ($1a21,x)			jmp 	(ShiftVectorTable,x) 		; go there.
.1679					PrintTab:
.1679	fa		plx				plx
.167a	20 c9 1b	jsr $1bc9			jsr 	XGetHPos
.167d					_PTMod10:
.167d	38		sec				sec
.167e	e9 0a		sbc #$0a			sbc 	#10
.1680	b0 fb		bcs $167d			bcs 	_PTMod10
.1682	49 ff		eor #$ff			eor 	#255 						; subtract from 10 effectively. negate it
.1684	1a		inc a				inc 	a 							; if modulus is 0, then this will be -10 => 10
.1685	80 15		bra $169c			bra 	PrintSpaceLoop
.1687					PrintPos:
.1687	fa		plx				plx
.1688	20 c9 1b	jsr $1bc9			jsr		XGetHPos 					; get current position
.168b	85 2c		sta $2c				sta 	zTemp0
.168d	38		sec				sec 								; calculate spaces required
.168e	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.1690	ca		dex				dex
.1691	e5 2c		sbc $2c				sbc 	zTemp0
.1693	b0 07		bcs $169c			bcs 	PrintSpaceLoop 				; if >= 0 then do that many spaces
.1695	4c 36 08	jmp $0836			jmp 	NextCommand
.1698					PrintSpace:
.1698	fa		plx				plx
.1699	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.169b	ca		dex				dex
.169c					PrintSpaceLoop:
.169c	c9 00		cmp #$00			cmp 	#0
.169e	f0 0a		beq $16aa			beq 	_PSExit
.16a0	48		pha				pha
.16a1	a9 20		lda #$20			lda 	#" "
.16a3	20 53 13	jsr $1353			jsr 	VectorPrintCharacter
.16a6	68		pla				pla
.16a7	3a		dec a				dec 	a
.16a8	80 f2		bra $169c			bra 	PrintSpaceLoop
.16aa					_PSExit:
.16aa	4c 36 08	jmp $0836			jmp 	NextCommand
.16ad					CommandStop:
.16ad	fa		plx				plx
.16ae	4c 8b 1f	jmp $1f8b		jmp	ErrorV_stop
.16b1					Unary_Str:
.16b1	fa		plx				plx
.16b2	5a		phy				phy
.16b3	a9 08		lda #$08			lda 	#8 							; maximum decimal places.
.16b5	20 35 25	jsr $2535			jsr 	FloatToString 				; do the conversion.
.16b8	a9 21		lda #$21			lda		#33 						; create buffer
.16ba	20 f6 16	jsr $16f6			jsr 	StringAllocTemp 			; allocate memory
.16bd	a0 01		ldy #$01			ldy 	#1  						; copy the converted string into the buffer.
.16bf					_USCopy:
.16bf	b9 97 05	lda $0597,y			lda 	decimalBuffer-1,y
.16c2	f0 05		beq $16c9			beq 	_USExit
.16c4	91 22		sta ($22),y			sta 	(zsTemp),y
.16c6	c8		iny				iny
.16c7	80 f6		bra $16bf			bra 	_USCopy
.16c9					_USExit:
.16c9	98		tya				tya
.16ca	3a		dec a				dec 	a
.16cb	92 22		sta ($22)			sta 	(zsTemp)
.16cd	7a		ply				ply
.16ce	4c 36 08	jmp $0836			jmp 	NextCommand
.16d1					StringInitialise:
.16d1	48		pha				pha
.16d2	ad 6a 05	lda $056a			lda 	stringInitialised 			; already done
.16d5	d0 11		bne $16e8			bne 	_SIExit
.16d7	ad 02 04	lda $0402			lda 	stringHighMemory 			; copy high memory - 512 => stringTempPointer
.16da	8d 6b 05	sta $056b			sta 	stringTempPointer
.16dd	ad 03 04	lda $0403			lda 	stringHighMemory+1
.16e0	3a		dec a				dec 	a
.16e1	3a		dec a				dec 	a
.16e2	8d 6c 05	sta $056c			sta 	stringTempPointer+1
.16e5	ce 6a 05	dec $056a			dec 	stringInitialised 			; set the initialised flag.
.16e8					_SIExit:
.16e8	a5 27		lda $27				lda 	availableMemory+1 			; check out of memory
.16ea	1a		inc a				inc 	a
.16eb	1a		inc a				inc 	a
.16ec	cd 03 04	cmp $0403			cmp 	stringHighMemory+1
.16ef	b0 02		bcs $16f3			bcs 	_SIMemory
.16f1	68		pla				pla
.16f2	60		rts				rts
.16f3					_SIMemory:
.16f3	4c e4 1f	jmp $1fe4		jmp	ErrorV_memory
.16f6					StringAllocTemp:
.16f6	20 d1 16	jsr $16d1			jsr 	StringInitialise 			; check it is initialised.
.16f9	49 ff		eor #$ff			eor 	#$FF 						; subtract A+1 from temp pointer.
.16fb	18		clc				clc
.16fc	6d 6b 05	adc $056b			adc 	stringTempPointer 			; subtract 32 from temp pointer and
.16ff	8d 6b 05	sta $056b			sta 	stringTempPointer 			; save in zsTemp and stackas well.
.1702	85 22		sta $22				sta 	zsTemp
.1704	95 3e		sta $3e,x			sta 	NSMantissa0,x
.1706	ad 6c 05	lda $056c			lda 	stringTempPointer+1
.1709	69 ff		adc #$ff			adc 	#$FF
.170b	8d 6c 05	sta $056c			sta 	stringTempPointer+1
.170e	85 23		sta $23				sta 	zsTemp+1
.1710	95 4a		sta $4a,x			sta 	NSMantissa1,x
.1712	74 56		stz $56,x			stz 	NSMantissa2,x
.1714	74 62		stz $62,x			stz 	NSMantissa3,x
.1716	a9 00		lda #$00			lda 	#0 							; clear string.
.1718	92 22		sta ($22)			sta 	(zsTemp)
.171a	a9 40		lda #$40			lda 	#NSSString 			 		; mark as string
.171c	95 32		sta $32,x			sta 	NSStatus,x
.171e	60		rts				rts
.171f					StringWriteChar:
.171f	5a		phy				phy
.1720	48		pha				pha
.1721	b2 22		lda ($22)			lda 	(zsTemp)
.1723	1a		inc a				inc 	a
.1724	92 22		sta ($22)			sta 	(zsTemp)
.1726	a8		tay				tay
.1727	68		pla				pla
.1728	91 22		sta ($22),y			sta 	(zsTemp),y
.172a	7a		ply				ply
.172b	60		rts				rts
.056a					stringInitialised:
>056a							.fill 	1
.056b					stringTempPointer:
>056b							.fill 	2
.172c					Unary_Left:
.172c	fa		plx				plx
.172d	5a		phy				phy
.172e	18		clc				clc 								; only one parameter
.172f	20 26 10	jsr $1026			jsr 	GetInteger8Bit 				; push the length of the string.
.1732	48		pha				pha
.1733	ca		dex				dex
.1734	a9 00		lda #$00			lda 	#0 							; push the start position.
.1736	48		pha				pha
.1737	20 6f 17	jsr $176f			jsr 	UnarySStringToZTemp0
.173a	80 3c		bra $1778			bra 	SubstringMain 				; stack now points to the string to slice.
.173c					Unary_Right:
.173c	fa		plx				plx
.173d	5a		phy				phy
.173e	a9 ff		lda #$ff			lda 	#255 						; push 255, we want all the string.
.1740	20 26 10	jsr $1026			jsr 	GetInteger8Bit 				; push the right length of the string.
.1743	48		pha				pha
.1744	ca		dex				dex
.1745	20 6f 17	jsr $176f			jsr 	UnarySStringToZTemp0
.1748	68		pla				pla 								; this is the right requirement
.1749	38		sec				sec
.174a	49 ff		eor #$ff			eor 	#$FF
.174c	72 2c		adc ($2c)			adc 	(zTemp0)
.174e	b0 02		bcs $1752			bcs 	_URHaveCount
.1750	a9 00		lda #$00			lda 	#0 							; overflow, start from 0
.1752					_URHaveCount:
.1752	a0 ff		ldy #$ff			ldy 	#255 						; whole string
.1754	5a		phy				phy
.1755	48		pha				pha 								; start position
.1756	80 20		bra $1778			bra 	SubstringMain
.1758					Unary_Mid:
.1758	fa		plx				plx
.1759	5a		phy				phy
.175a	20 26 10	jsr $1026			jsr 	GetInteger8Bit 				; push the length of the string required.
.175d	48		pha				pha
.175e	ca		dex				dex
.175f	20 26 10	jsr $1026			jsr 	GetInteger8Bit 				; put the start position.
.1762	f0 08		beq $176c			beq 	_UMError
.1764	3a		dec a				dec 	a
.1765	48		pha				pha
.1766	ca		dex				dex
.1767	20 6f 17	jsr $176f			jsr 	UnarySStringToZTemp0
.176a	80 0c		bra $1778			bra 	SubstringMain 				; stack now points to the string to slice.
.176c					_UMError:
.176c	4c d9 1e	jmp $1ed9		jmp	ErrorV_range
.176f					UnarySStringToZTemp0:
.176f	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.1771	85 2c		sta $2c				sta 	zTemp0
.1773	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.1775	85 2d		sta $2d				sta 	zTemp0+1
.1777	60		rts				rts
.1778					SubstringMain:
.1778	68		pla				pla 								; get the start offset
.1779	7a		ply				ply 								; get the count to do.
.177a	d2 2c		cmp ($2c)			cmp 	(zTemp0) 					; if start >= length then return NULL.
.177c	b0 38		bcs $17b6			bcs 	_SSReturnNull
.177e	85 2e		sta $2e				sta 	zTemp1 						; save start position.
.1780	84 2f		sty $2f				sty 	zTemp1+1 					; save count
.1782	18		clc				clc
.1783	65 2f		adc $2f				adc 	zTemp1+1 					; this is the end position.
.1785	b0 06		bcs $178d			bcs 	_SMTruncateToEnd 			; if overflow, limit to length-start.
.1787	d2 2c		cmp ($2c)			cmp 	(zTemp0) 					; ok if limit is <= length.
.1789	f0 04		beq $178f			beq 	_SMIsOkay
.178b	90 02		bcc $178f			bcc 	_SMIsOkay
.178d					_SMTruncateToEnd:
.178d	b2 2c		lda ($2c)			lda 	(zTemp0) 					; end position is length.
.178f					_SMIsOkay:
.178f	85 2f		sta $2f				sta 	zTemp1+1
.1791	38		sec				sec		 							; work out size
.1792	a5 2f		lda $2f				lda 	zTemp1+1
.1794	e5 2e		sbc $2e				sbc 	zTemp1
.1796	f0 1e		beq $17b6			beq 	_SSReturnNull 				; if size = 0 then return empty string.
.1798	20 f6 16	jsr $16f6			jsr 	StringAllocTemp 			; zsTemp & mantissa = the new string.
.179b	a4 2e		ldy $2e				ldy 	zTemp1 						; start
.179d					_SMCopy:
.179d	c4 2f		cpy $2f				cpy 	zTemp1+1 					; exit if reached end
.179f	f0 11		beq $17b2			beq 	_SMExit
.17a1	c8		iny				iny 								; bump and
.17a2	b1 2c		lda ($2c),y			lda 	(zTemp0),y 					; get character (prefix)
.17a4	5a		phy				phy
.17a5	48		pha				pha
.17a6	b2 22		lda ($22)			lda 	(zsTemp) 					; bump length => Y
.17a8	1a		inc a				inc 	a
.17a9	a8		tay				tay
.17aa	92 22		sta ($22)			sta 	(zsTemp)
.17ac	68		pla				pla 								; write character out
.17ad	91 22		sta ($22),y			sta 	(zsTemp),y
.17af	7a		ply				ply 								; restore Y
.17b0	80 eb		bra $179d			bra 	_SMCopy
.17b2					_SMExit:
.17b2	7a		ply				ply
.17b3	4c 36 08	jmp $0836			jmp 	NextCommand
.17b6					_SSReturnNull:
.17b6	a9 c8		lda #$c8			lda 	#SSRNull & $FF 				; set up mantissa
.17b8	95 3e		sta $3e,x			sta 	NSMantissa0,x
.17ba	a9 17		lda #$17			lda 	#SSRNull >> 8
.17bc	95 4a		sta $4a,x			sta 	NSMantissa1,x
.17be	74 56		stz $56,x			stz 	NSMantissa2,x
.17c0	74 62		stz $62,x			stz 	NSMantissa3,x
.17c2	a9 40		lda #$40			lda 	#NSSString
.17c4	95 32		sta $32,x			sta 	NSStatus,x
.17c6	80 ea		bra $17b2			bra 	_SMExit
.17c8					SSRNull:
>17c8	00 00						.word 	0
.17ca					CommandSwap:
.17ca	fa		plx				plx
.17cb	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.17cd	48		pha				pha
.17ce	b5 3d		lda $3d,x			lda 	NSMantissa0-1,x
.17d0	95 3e		sta $3e,x			sta 	NSMantissa0,x
.17d2	68		pla				pla
.17d3	95 3d		sta $3d,x			sta 	NSMantissa0-1,x
.17d5	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.17d7	48		pha				pha
.17d8	b5 49		lda $49,x			lda 	NSMantissa1-1,x
.17da	95 4a		sta $4a,x			sta 	NSMantissa1,x
.17dc	68		pla				pla
.17dd	95 49		sta $49,x			sta 	NSMantissa1-1,x
.17df	b5 56		lda $56,x			lda 	NSMantissa2,x
.17e1	48		pha				pha
.17e2	b5 55		lda $55,x			lda 	NSMantissa2-1,x
.17e4	95 56		sta $56,x			sta 	NSMantissa2,x
.17e6	68		pla				pla
.17e7	95 55		sta $55,x			sta 	NSMantissa2-1,x
.17e9	b5 62		lda $62,x			lda 	NSMantissa3,x
.17eb	48		pha				pha
.17ec	b5 61		lda $61,x			lda 	NSMantissa3-1,x
.17ee	95 62		sta $62,x			sta 	NSMantissa3,x
.17f0	68		pla				pla
.17f1	95 61		sta $61,x			sta 	NSMantissa3-1,x
.17f3	b5 6e		lda $6e,x			lda 	NSExponent,x
.17f5	48		pha				pha
.17f6	b5 6d		lda $6d,x			lda 	NSExponent-1,x
.17f8	95 6e		sta $6e,x			sta 	NSExponent,x
.17fa	68		pla				pla
.17fb	95 6d		sta $6d,x			sta 	NSExponent-1,x
.17fd	b5 32		lda $32,x			lda 	NSStatus,x
.17ff	48		pha				pha
.1800	b5 31		lda $31,x			lda 	NSStatus-1,x
.1802	95 32		sta $32,x			sta 	NSStatus,x
.1804	68		pla				pla
.1805	95 31		sta $31,x			sta 	NSStatus-1,x
.1807	4c 36 08	jmp $0836			jmp 	NextCommand
.180a					CommandSYS:
.180a	fa		plx				plx
.180b	da		phx				phx 								; save XY
.180c	5a		phy				phy
.180d	20 88 22	jsr $2288			jsr 	FloatIntegerPart
.1810	b5 4a		lda $4a,x			lda 	NSMantissa1,x 				; get call address => zTemp0
.1812	85 2d		sta $2d				sta 	zTemp0+1
.1814	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.1816	85 2c		sta $2c				sta 	zTemp0
.1818	ae 0d 03	ldx $030d			ldx 	SYS_Reg_X 					; load registers
.181b	ac 0e 03	ldy $030e			ldy 	SYS_Reg_Y
.181e	ad 0f 03	lda $030f			lda 	SYS_Reg_S
.1821	48		pha				pha
.1822	ad 0c 03	lda $030c			lda 	SYS_Reg_A
.1825	28		plp				plp
.1826	20 3d 18	jsr $183d			jsr 	_CSZTemp0
.1829	08		php				php
.182a	8e 0d 03	stx $030d			stx 	SYS_Reg_X 					; load registers
.182d	8c 0e 03	sty $030e			sty 	SYS_Reg_Y
.1830	8d 0c 03	sta $030c			sta 	SYS_Reg_A
.1833	68		pla				pla
.1834	8d 0f 03	sta $030f			sta 	SYS_Reg_S
.1837	7a		ply				ply 								; restore YX and drop 2
.1838	fa		plx				plx
.1839	ca		dex				dex
.183a	4c 36 08	jmp $0836			jmp 	NextCommand
.183d					_CSZTemp0:
.183d	6c 2c 00	jmp ($002c)			jmp 	(zTemp0)
.1840					TimeTOS:
.1840	fa		plx				plx
.1841	20 9b 18	jsr $189b			jsr 	TIPushClock 				; push clock to TOS
.1844	4c 36 08	jmp $0836			jmp 	NextCommand
.1847					TimeString:
.1847	fa		plx				plx
.1848	20 9b 18	jsr $189b			jsr 	TIPushClock 				; push clock to TOS
.184b	20 70 18	jsr $1870			jsr 	_TSDivMod60 				; result in seconds
.184e	20 70 18	jsr $1870			jsr 	_TSDivMod60 				; seconds
.1851	48		pha				pha
.1852	20 70 18	jsr $1870			jsr 	_TSDivMod60 				; minutes
.1855	48		pha				pha
.1856	a9 18		lda #$18			lda 	#24 						; hours
.1858	20 72 18	jsr $1872			jsr 	_TSDivModA
.185b	48		pha				pha
.185c	a9 06		lda #$06			lda 	#6
.185e	20 f6 16	jsr $16f6			jsr 	StringAllocTemp
.1861	68		pla				pla
.1862	20 82 18	jsr $1882			jsr 	_TSWriteDecimal
.1865	68		pla				pla
.1866	20 82 18	jsr $1882			jsr 	_TSWriteDecimal
.1869	68		pla				pla
.186a	20 82 18	jsr $1882			jsr 	_TSWriteDecimal
.186d	4c 36 08	jmp $0836			jmp 	NextCommand
.1870					_TSDivMod60:
.1870	a9 3c		lda #$3c			lda 	#60
.1872					_TSDivModA:
.1872	e8		inx				inx
.1873	20 4f 26	jsr $264f			jsr 	FloatSetByte
.1876	ca		dex				dex
.1877	20 e3 21	jsr $21e3			jsr 	Int32Divide
.187a	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; get modulus
.187c	48		pha				pha
.187d	20 d2 21	jsr $21d2			jsr 	NSMCopyPlusTwoToZero
.1880	68		pla				pla
.1881	60		rts				rts
.1882					_TSWriteDecimal:
.1882	da		phx				phx
.1883	a2 30		ldx #$30			ldx 	#'0'
.1885					_TSWDLoop:
.1885	c9 0a		cmp #$0a			cmp 	#10
.1887	90 05		bcc $188e			bcc 	_TSWDEnd
.1889	e9 0a		sbc #$0a			sbc 	#10
.188b	e8		inx				inx
.188c	80 f7		bra $1885			bra 	_TSWDLoop
.188e					_TSWDEnd:
.188e	48		pha				pha
.188f	8a		txa				txa
.1890	20 1f 17	jsr $171f			jsr 	StringWriteChar
.1893	68		pla				pla
.1894	09 30		ora #$30			ora 	#'0'
.1896	20 1f 17	jsr $171f			jsr 	StringWriteChar
.1899	fa		plx				plx
.189a	60		rts				rts
.189b					TIPushClock:
.189b	5a		phy				phy
.189c	e8		inx				inx 								; push 0 on the stack
.189d	20 4d 26	jsr $264d			jsr 	FloatSetZero
.18a0	da		phx				phx
.18a1	20 94 1c	jsr $1c94			jsr 	XReadClock 					; read time into YXA
.18a4	86 2c		stx $2c				stx 	zTemp0
.18a6	fa		plx				plx
.18a7	95 3e		sta $3e,x			sta 	NSMantissa0,x
.18a9	a5 2c		lda $2c				lda 	zTemp0
.18ab	95 4a		sta $4a,x			sta 	NSMantissa1,x
.18ad	98		tya				tya
.18ae	95 56		sta $56,x			sta 	NSMantissa2,x
.18b0	7a		ply				ply
.18b1	60		rts				rts
.18b2					CommandTIWrite:
.18b2	fa		plx				plx
.18b3	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; copy string address to ZSTemp
.18b5	85 22		sta $22				sta 	zsTemp
.18b7	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.18b9	85 23		sta $23				sta 	zsTemp+1
.18bb	b2 22		lda ($22)			lda 	(zsTemp) 					; check if it is six
.18bd	c9 06		cmp #$06			cmp 	#6
.18bf	d0 59		bne $191a			bne 	_CTIWError
.18c1	20 4d 26	jsr $264d			jsr 	FloatSetZero
.18c4	20 e6 18	jsr $18e6			jsr 	_CTIWDigitPair 				; do a digit pair 3 times
.18c7	20 e6 18	jsr $18e6			jsr 	_CTIWDigitPair
.18ca	20 e6 18	jsr $18e6			jsr 	_CTIWDigitPair
.18cd	a9 3c		lda #$3c			lda 	#60 						; multiply the result by 60.
.18cf	20 11 19	jsr $1911			jsr 	_CTIWMultiply
.18d2	da		phx				phx
.18d3	5a		phy				phy
.18d4	b5 4a		lda $4a,x			lda 	NSMantissa1,x 				; get time into YXA
.18d6	48		pha				pha
.18d7	b5 56		lda $56,x			lda 	NSMantissa2,x
.18d9	a8		tay				tay
.18da	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.18dc	fa		plx				plx
.18dd	20 98 1c	jsr $1c98			jsr 	XWriteClock 				; update the clock.
.18e0	7a		ply				ply
.18e1	fa		plx				plx
.18e2	ca		dex				dex 								; throw result.
.18e3	4c 36 08	jmp $0836			jmp 	NextCommand
.18e6					_CTIWDigitPair:
.18e6	a9 06		lda #$06			lda 	#6 							; x 6
.18e8	20 11 19	jsr $1911			jsr 	_CTIWMultiply
.18eb	20 f7 18	jsr $18f7			jsr 	_CTIWAddDigit 				; add digit
.18ee	a9 0a		lda #$0a			lda 	#10 						; x 10
.18f0	20 11 19	jsr $1911			jsr 	_CTIWMultiply
.18f3	20 f7 18	jsr $18f7			jsr 	_CTIWAddDigit 				; add digit
.18f6	60		rts				rts
.18f7					_CTIWAddDigit:
.18f7	e6 22		inc $22				inc 	zsTemp 						; pre-increment
.18f9	d0 02		bne $18fd			bne 	_CTIWASkip
.18fb	e6 23		inc $23				inc 	zsTemp+1
.18fd					_CTIWASkip:
.18fd	b2 22		lda ($22)			lda 	(zsTemp) 					; read and validate it
.18ff	38		sec				sec
.1900	e9 30		sbc #$30			sbc 	#"0"
.1902	90 16		bcc $191a			bcc 	_CTIWError
.1904	c9 0a		cmp #$0a			cmp 	#9+1
.1906	b0 12		bcs $191a			bcs 	_CTIWError
.1908	e8		inx				inx 								; store at +1
.1909	20 4f 26	jsr $264f			jsr 	FloatSetByte
.190c	ca		dex				dex
.190d	20 d9 23	jsr $23d9			jsr 	FloatAddTopTwoStack
.1910	60		rts				rts
.1911					_CTIWMultiply:
.1911	e8		inx				inx
.1912	20 4f 26	jsr $264f			jsr 	FloatSetByte
.1915	ca		dex				dex
.1916	20 5a 23	jsr $235a			jsr 	FloatMultiplyShort
.1919	60		rts				rts
.191a					_CTIWError:
.191a	4c e9 1e	jmp $1ee9		jmp	ErrorV_value
.191d					UnaryUsr:
.191d	fa		plx				plx
.191e	5a		phy				phy
.191f	20 26 19	jsr $1926			jsr 	_UUCallVector
.1922	7a		ply				ply
.1923	4c 36 08	jmp $0836			jmp 	NextCommand
.1926					_UUCallVector:
.1926	6c 11 03	jmp ($0311)			jmp 	(USRRoutineAddress)
.1929					ValUnary:
.1929	fa		plx				plx
.192a	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.192c	85 2c		sta $2c				sta 	zTemp0
.192e	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.1930	85 2d		sta $2d				sta 	zTemp0+1
.1932	20 3d 19	jsr $193d			jsr 	ValEvaluateZTemp0
.1935	b0 03		bcs $193a			bcs 	_VUError 					; couldn't convert
.1937	4c 36 08	jmp $0836			jmp 	NextCommand
.193a					_VUError:
.193a	4c e9 1e	jmp $1ee9		jmp	ErrorV_value
.193d					ValEvaluateZTemp0:
.193d	5a		phy				phy
.193e	b2 2c		lda ($2c)			lda 	(zTemp0) 					; check not empty string
.1940	f0 22		beq $1964			beq 	_VMCFail2
.1942	a0 00		ldy #$00			ldy 	#0 							; start position
.1944					_VMCSpaces:
.1944	c8		iny				iny 								; skip leading spaces
.1945	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.1947	c9 20		cmp #$20			cmp 	#" "
.1949	f0 f9		beq $1944			beq 	_VMCSpaces
.194b	48		pha				pha 								; save first character
.194c	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.194e	d0 01		bne $1951			bne 	_VMCStart
.1950	c8		iny				iny 								; skip over - if so.
.1951					_VMCStart:
.1951	38		sec				sec 								; initialise first time round.
.1952					_VMCNext:
.1952	98		tya				tya 								; reached end of string
.1953	3a		dec a				dec 	a
.1954	52 2c		eor ($2c)			eor 	(zTemp0) 					; compare length preserve carry.
.1956	f0 0f		beq $1967			beq 	_VMCSuccess 				; successful.
.1958	b1 2c		lda ($2c),y			lda 	(zTemp0),y 					; encode a number.
.195a	c8		iny				iny
.195b	20 31 24	jsr $2431			jsr 	FloatEncode 				; send it to the number-builder
.195e	90 03		bcc $1963			bcc 	_VMCFail 					; if failed, give up.
.1960	18		clc				clc 								; next time round, countinue
.1961	80 ef		bra $1952			bra 	_VMCNext
.1963					_VMCFail:
.1963	68		pla				pla
.1964					_VMCFail2:
.1964	7a		ply				ply
.1965	38		sec				sec
.1966	60		rts				rts
.1967					_VMCSuccess:
.1967	a9 00		lda #$00			lda 	#0 							; construct final
.1969	20 31 24	jsr $2431			jsr 	FloatEncode 				; by sending a duff value.
.196c	68		pla				pla 								; if it was -ve
.196d	c9 2d		cmp #$2d			cmp 	#"-"
.196f	d0 03		bne $1974			bne 	_VMCNotNegative
.1971	20 0f 26	jsr $260f			jsr		FloatNegate 				; negate it.
.1974					_VMCNotNegative:
.1974	7a		ply				ply
.1975	18		clc				clc
.1976	60		rts				rts
.1977					VectorTable:
>1977	8e 10					.word	LinkFloatAdd             ; $80 +
>1979	97 10					.word	LinkFloatSubtract        ; $81 -
>197b	a0 10					.word	LinkFloatMultiply        ; $82 *
>197d	a9 10					.word	LinkFloatDivide          ; $83 /
>197f	b4 10					.word	LinkFloatPower           ; $84 ^
>1981	d9 08					.word	BinaryAnd                ; $85 and
>1983	dd 08					.word	BinaryOr                 ; $86 or
>1985	bf 10					.word	LinkCompareGreater       ; $87 >
>1987	c8 10					.word	LinkCompareEqual         ; $88 =
>1989	d1 10					.word	LinkCompareLess          ; $89 <
>198b	da 10					.word	LinkCompareGreaterEqual  ; $8a >=
>198d	e3 10					.word	LinkCompareNotEqual      ; $8b <>
>198f	ec 10					.word	LinkCompareLessEqual     ; $8c <=
>1991	c1 08					.word	AbsoluteTOS              ; $8d abs
>1993	14 09					.word	ArrayConvert             ; $8e array
>1995	bc 09					.word	UnaryAsc                 ; $8f asc
>1997	d7 09					.word	CommandAssert            ; $90 assert
>1999	18 0a					.word	Unary16Bin               ; $91 bin$
>199b	42 0a					.word	PrintCharacterX          ; $92 print.chr
>199d	4c 0a					.word	UnaryChr                 ; $93 chr$
>199f	b1 0a					.word	CompareStrings           ; $94 s.cmp
>19a1	9b 0c					.word	CommandXFor              ; $95 for
>19a3	5e 0d					.word	UnaryFre                 ; $96 fre
>19a5	76 0d					.word	CommandXGet              ; $97 get
>19a7	9c 0d					.word	CommandReturn            ; $98 return
>19a9	de 0d					.word	Command_PSET             ; $99 pset
>19ab	f8 0d					.word	Command_LINE             ; $9a line
>19ad	0d 0e					.word	Command_RECT             ; $9b rect
>19af	1c 0e					.word	Command_FRAME            ; $9c frame
>19b1	2b 0e					.word	Command_CHAR             ; $9d char
>19b3	c2 0e					.word	Unary16Hex               ; $9e hex$
>19b5	69 0f					.word	CommandXInput            ; $9f input
>19b7	80 0f					.word	CommandInputString       ; $a0 input$
>19b9	99 0f					.word	CommandInputReset        ; $a1 input.start
>19bb	7d 10					.word	UnaryLen                 ; $a2 len
>19bd	49 11					.word	LinkFloatCompare         ; $a3 f.cmp
>19bf	52 11					.word	LinkDivideInt32          ; $a4 int.div
>19c1	cc 11					.word	NegateTOS                ; $a5 negate
>19c3	d3 11					.word	CommandNewLine           ; $a6 new.line
>19c5	dc 11					.word	CommandXNext             ; $a7 next
>19c7	c5 12					.word	NotTOS                   ; $a8 not
>19c9	dc 12					.word	CommandXOn               ; $a9 on
>19cb	f9 12					.word	CommandMoreOn            ; $aa moreon
>19cd	00 13					.word	UnaryPeek                ; $ab peek
>19cf	15 13					.word	CommandPOKE              ; $ac poke
>19d1	2d 13					.word	UnaryPos                 ; $ad pos
>19d3	37 13					.word	GetChannel               ; $ae getchannel
>19d5	42 13					.word	SetChannel               ; $af setchannel
>19d7	65 13					.word	PrintNumber              ; $b0 print.n
>19d9	84 13					.word	PrintString              ; $b1 print.s
>19db	eb 13					.word	CommandXRead             ; $b2 read
>19dd	05 14					.word	CommandReadString        ; $b3 read$
>19df	90 15					.word	UnaryRND                 ; $b4 rnd
>19e1	ff 15					.word	StringConcatenate        ; $b5 concat
>19e3	56 16					.word	SignTOS                  ; $b6 sgn
>19e5	79 16					.word	PrintTab                 ; $b7 print.tab
>19e7	87 16					.word	PrintPos                 ; $b8 print.pos
>19e9	98 16					.word	PrintSpace               ; $b9 print.spc
>19eb	b1 16					.word	Unary_Str                ; $ba str$
>19ed	2c 17					.word	Unary_Left               ; $bb left$
>19ef	3c 17					.word	Unary_Right              ; $bc right$
>19f1	58 17					.word	Unary_Mid                ; $bd mid$
>19f3	ca 17					.word	CommandSwap              ; $be swap
>19f5	40 18					.word	TimeTOS                  ; $bf ti
>19f7	47 18					.word	TimeString               ; $c0 ti$
>19f9	1d 19					.word	UnaryUsr                 ; $c1 usr
>19fb	29 19					.word	ValUnary                 ; $c2 val
>19fd	90 1b					.word	CommandClose             ; $c3 close
>19ff	a2 1b					.word	CommandExit              ; $c4 exit
>1a01	a8 1b					.word	CommandDebug             ; $c5 debug
>1a03	0e 1c					.word	CommandXOpen             ; $c6 open
>1a05	a2 1c					.word	CommandScreen            ; $c7 screen
>1a07	89 1e					.word	CommandVPOKE             ; $c8 vpoke
>1a09	ae 1e					.word	CommandVPEEK             ; $c9 vpeek
>1a0b	71 16					.word	CommandShift             ; $ca .shift
>1a0d	85 08					.word	PushByteCommand          ; $cb .byte
>1a0f	98 08					.word	PushWordCommand          ; $cc .word
>1a11	a7 13					.word	CommandPushN             ; $cd .float
>1a13	cd 13					.word	CommandPushS             ; $ce .string
>1a15	39 0b					.word	CommandXData             ; $cf .data
>1a17	ad 0d					.word	CommandXGoto             ; $d0 .goto
>1a19	90 0d					.word	CommandXGosub            ; $d1 .gosub
>1a1b	c2 0d					.word	CommandGotoZ             ; $d2 .goto.z
>1a1d	d0 0d					.word	CommandGotoNZ            ; $d3 .goto.nz
>1a1f	c7 08					.word	CommandVarSpace          ; $d4 .varspace
.1a21					ShiftVectorTable:
>1a21	64 0a					.word	CommandClr               ; $ca80 clr
>1a23	42 0b					.word	CommandXDIM              ; $ca81 dim
>1a25	33 0c					.word	CommandEnd               ; $ca82 end
>1a27	4e 10					.word	UnaryJoy                 ; $ca83 joy
>1a29	f5 10					.word	LinkFloatIntegerPartDown ; $ca84 int
>1a2b	fe 10					.word	LinkFloatSquareRoot      ; $ca85 sqr
>1a2d	0f 11					.word	LinkFloatLogarithm       ; $ca86 log
>1a2f	1a 11					.word	LinkFloatExponent        ; $ca87 exp
>1a31	23 11					.word	LinkFloatCosine          ; $ca88 cos
>1a33	2c 11					.word	LinkFloatSine            ; $ca89 sin
>1a35	35 11					.word	LinkFloatTangent         ; $ca8a tan
>1a37	3e 11					.word	LinkFloatArcTan          ; $ca8b atn
>1a39	7c 11					.word	XCommandMouse            ; $ca8c mouse
>1a3b	91 11					.word	XUnaryMB                 ; $ca8d mb
>1a3d	9e 11					.word	XUnaryMX                 ; $ca8e mx
>1a3f	af 11					.word	XUnaryMY                 ; $ca8f my
>1a41	7e 15					.word	CommandRestore           ; $ca90 restore
>1a43	ad 16					.word	CommandStop              ; $ca91 stop
>1a45	0a 18					.word	CommandSYS               ; $ca92 sys
>1a47	b2 18					.word	CommandTIWrite           ; $ca93 ti$.write
>1a49	7f 1a					.word	CommandXWAIT             ; $ca94 wait
>1a4b	d3 1b					.word	X16I2CPoke               ; $ca95 i2cpoke
>1a4d	f3 1b					.word	X16I2CPeek               ; $ca96 i2cpeek
>1a4f	5e 1c					.word	CommandBank              ; $ca97 bank
>1a51	b1 1c					.word	XCommandSleep            ; $ca98 sleep
>1a53	d5 1c					.word	X16_Audio_FMINIT         ; $ca99 fminit
>1a55	e3 1c					.word	X16_Audio_FMNOTE         ; $ca9a fmnote
>1a57	f5 1c					.word	X16_Audio_FMDRUM         ; $ca9b fmdrum
>1a59	07 1d					.word	X16_Audio_FMINST         ; $ca9c fminst
>1a5b	19 1d					.word	X16_Audio_FMVIB          ; $ca9d fmvib
>1a5d	2b 1d					.word	X16_Audio_FMFREQ         ; $ca9e fmfreq
>1a5f	3c 1d					.word	X16_Audio_FMVOL          ; $ca9f fmvol
>1a61	4e 1d					.word	X16_Audio_FMPAN          ; $caa0 fmpan
>1a63	60 1d					.word	X16_Audio_FMPLAY         ; $caa1 fmplay
>1a65	71 1d					.word	X16_Audio_FMCHORD        ; $caa2 fmchord
>1a67	82 1d					.word	X16_Audio_FMPOKE         ; $caa3 fmpoke
>1a69	94 1d					.word	X16_Audio_PSGINIT        ; $caa4 psginit
>1a6b	a2 1d					.word	X16_Audio_PSGNOTE        ; $caa5 psgnote
>1a6d	b4 1d					.word	X16_Audio_PSGVOL         ; $caa6 psgvol
>1a6f	c6 1d					.word	X16_Audio_PSGWAV         ; $caa7 psgwav
>1a71	d8 1d					.word	X16_Audio_PSGFREQ        ; $caa8 psgfreq
>1a73	e9 1d					.word	X16_Audio_PSGPAN         ; $caa9 psgpan
>1a75	fb 1d					.word	X16_Audio_PSGPLAY        ; $caaa psgplay
>1a77	0c 1e					.word	X16_Audio_PSGCHORD       ; $caab psgchord
>1a79	1d 1e					.word	CommandCls               ; $caac cls
>1a7b	26 1e					.word	CommandLocate            ; $caad locate
>1a7d	50 1e					.word	CommandColor             ; $caae color
.1a7f					CommandXWAIT:
.1a7f	fa		plx				plx
.1a80	b5 3c		lda $3c,x			lda 	NSMantissa0-2,x 			; get wait address
.1a82	85 2c		sta $2c				sta 	zTemp0
.1a84	b5 48		lda $48,x			lda 	NSMantissa1-2,x
.1a86	85 2d		sta $2d				sta 	zTemp0+1
.1a88					_WaitLoop:
.1a88	b2 2c		lda ($2c)			lda 	(zTemp0) 					; read it
.1a8a	35 3d		and $3d,x			and 	NSMantissa0-1,x		 		; and with mask
.1a8c	55 3e		eor $3e,x			eor 	NSMantissa0-0,x 			; toggle
.1a8e	f0 f8		beq $1a88			beq 	_WaitLoop 					; keep going if zero
.1a90	ca		dex				dex 								; drop 3.
.1a91	ca		dex				dex
.1a92	ca		dex				dex
.1a93	4c 36 08	jmp $0836			jmp 	NextCommand
.1a96					WriteFloatCommand:
.1a96	fa		plx				plx
.1a97	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.1a99	85 2c		sta $2c				sta 	zTemp0 						; save in MSB
.1a9b	88		dey				dey 								; get the upper 3 bits
.1a9c	b1 28		lda ($28),y			lda 	(codePtr),y
.1a9e	29 07		and #$07			and 	#7
.1aa0	c8		iny				iny
.1aa1	c8		iny				iny
.1aa2	06 2c		asl $2c				asl 	zTemp0 						; shift zTemp0:A left
.1aa4	2a		rol a				rol 	a 							; carry will be clear.
.1aa5	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.1aa8	85 2d		sta $2d				sta 	zTemp0+1
.1aaa	20 b0 1a	jsr $1ab0			jsr 	WriteFloatZTemp0Sub
.1aad	4c 36 08	jmp $0836			jmp 	NextCommand
.1ab0					WriteFloatZTemp0Sub:
.1ab0	5a		phy				phy 								; ldart write
.1ab1	a0 01		ldy #$01			ldy 	#1
.1ab3	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.1ab5	92 2c		sta ($2c)			sta 	(zTemp0)
.1ab7	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.1ab9	91 2c		sta ($2c),y			sta 	(zTemp0),y
.1abb	c8		iny				iny
.1abc	b5 56		lda $56,x			lda 	NSMantissa2,x
.1abe	91 2c		sta ($2c),y			sta 	(zTemp0),y
.1ac0	c8		iny				iny
.1ac1	b5 62		lda $62,x			lda 	NSMantissa3,x
.1ac3	91 2c		sta ($2c),y			sta 	(zTemp0),y
.1ac5	c8		iny				iny
.1ac6	b5 6e		lda $6e,x			lda 	NSExponent,x
.1ac8	91 2c		sta ($2c),y			sta 	(zTemp0),y
.1aca	c8		iny				iny
.1acb	b5 32		lda $32,x			lda 	NSStatus,x
.1acd	91 2c		sta ($2c),y			sta 	(zTemp0),y
.1acf	ca		dex				dex
.1ad0	7a		ply				ply
.1ad1	60		rts				rts
.1ad2					WriteIntegerCommand:
.1ad2	fa		plx				plx
.1ad3	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.1ad5	85 2c		sta $2c				sta 	zTemp0 						; save in MSB
.1ad7	88		dey				dey 								; get the upper 3 bits
.1ad8	b1 28		lda ($28),y			lda 	(codePtr),y
.1ada	29 07		and #$07			and 	#7
.1adc	c8		iny				iny
.1add	c8		iny				iny
.1ade	06 2c		asl $2c				asl 	zTemp0 						; shift zTemp0:A left
.1ae0	2a		rol a				rol 	a 							; carry will be clear.
.1ae1	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.1ae4	85 2d		sta $2d				sta 	zTemp0+1
.1ae6	20 ec 1a	jsr $1aec			jsr 	WriteIntegerZTemp0Sub
.1ae9	4c 36 08	jmp $0836			jmp 	NextCommand
.1aec					WriteIntegerZTemp0Sub:
.1aec	20 88 22	jsr $2288			jsr 	FloatIntegerPart
.1aef	5a		phy				phy 								; start write
.1af0	a0 01		ldy #$01			ldy 	#1
.1af2	b5 32		lda $32,x			lda 	NSStatus,x 					; negate 2's comp if -ve
.1af4	30 0b		bmi $1b01			bmi 	_WIZNegative
.1af6	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; +ve write
.1af8	92 2c		sta ($2c)			sta 	(zTemp0)
.1afa	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.1afc	91 2c		sta ($2c),y			sta 	(zTemp0),y
.1afe	7a		ply				ply
.1aff	ca		dex				dex
.1b00	60		rts				rts
.1b01					_WIZNegative:
.1b01	38		sec				sec 								; -ve read
.1b02	a9 00		lda #$00			lda 	#0
.1b04	f5 3e		sbc $3e,x			sbc 	NSMantissa0,x
.1b06	92 2c		sta ($2c)			sta 	(zTemp0)
.1b08	a9 00		lda #$00			lda 	#0
.1b0a	f5 4a		sbc $4a,x			sbc 	NSMantissa1,x
.1b0c	91 2c		sta ($2c),y			sta 	(zTemp0),y
.1b0e	7a		ply				ply
.1b0f	ca		dex				dex
.1b10	60		rts				rts
.1b11					WriteStringCommand:
.1b11	fa		plx				plx
.1b12	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.1b14	85 2c		sta $2c				sta 	zTemp0 						; save in MSB
.1b16	88		dey				dey 								; get the upper 3 bits
.1b17	b1 28		lda ($28),y			lda 	(codePtr),y
.1b19	29 07		and #$07			and 	#7
.1b1b	c8		iny				iny
.1b1c	c8		iny				iny
.1b1d	06 2c		asl $2c				asl 	zTemp0 						; shift zTemp0:A left
.1b1f	2a		rol a				rol 	a 							; carry will be clear.
.1b20	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.1b23	85 2d		sta $2d				sta 	zTemp0+1
.1b25	20 2b 1b	jsr $1b2b			jsr 	WriteStringZTemp0Sub
.1b28	4c 36 08	jmp $0836			jmp 	NextCommand
.1b2b					WriteStringZTemp0Sub:
.1b2b	5a		phy				phy
.1b2c	a0 01		ldy #$01			ldy 	#1 							; if it is zero we must concrete whatever.
.1b2e	b2 2c		lda ($2c)			lda 	(zTemp0)
.1b30	11 2c		ora ($2c),y			ora 	(zTemp0),y
.1b32	f0 1e		beq $1b52			beq 	_WSConcrete
.1b34	b2 2c		lda ($2c)			lda 	(zTemp0) 					; put address of actual string in zTemp1
.1b36	85 2e		sta $2e				sta 	zTemp1
.1b38	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.1b3a	85 2f		sta $2f				sta 	zTemp1+1
.1b3c	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; copy source to zTemp2
.1b3e	85 30		sta $30				sta 	zTemp2
.1b40	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.1b42	85 31		sta $31				sta 	zTemp2+1
.1b44	b2 2e		lda ($2e)			lda 	(zTemp1) 					; space available
.1b46	d2 30		cmp ($30)			cmp 	(zTemp2) 					; if >= required length then copy
.1b48	b0 17		bcs $1b61			bcs 	_WSCopy
.1b4a	a0 01		ldy #$01			ldy 	#1 							; set the 'available for reclaim' flag
.1b4c	b1 2e		lda ($2e),y			lda 	(zTemp1),y
.1b4e	09 80		ora #$80			ora 	#$80
.1b50	91 2e		sta ($2e),y			sta 	(zTemp1),y
.1b52					_WSConcrete:
.1b52	b5 4a		lda $4a,x			lda 	NSMantissa1,x 				; string in YA
.1b54	a8		tay				tay
.1b55	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.1b57	20 f3 0a	jsr $0af3			jsr 	StringConcrete
.1b5a	92 2c		sta ($2c)			sta 	(zTemp0) 					; save returned address
.1b5c	98		tya				tya
.1b5d	a0 01		ldy #$01			ldy 	#1
.1b5f	91 2c		sta ($2c),y			sta 	(zTemp0),y
.1b61					_WSCopy
.1b61	18		clc				clc  								; copy target+2 to zTemp2
.1b62	b2 2c		lda ($2c)			lda 	(zTemp0)
.1b64	69 02		adc #$02			adc 	#2
.1b66	85 30		sta $30				sta 	zTemp2
.1b68	a0 01		ldy #$01			ldy 	#1
.1b6a	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.1b6c	69 00		adc #$00			adc 	#0
.1b6e	85 31		sta $31				sta 	zTemp2+1
.1b70	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; copy source to zTemp1
.1b72	85 2e		sta $2e				sta 	zTemp1
.1b74	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.1b76	85 2f		sta $2f				sta 	zTemp1+1
.1b78	b2 2e		lda ($2e)			lda 	(zTemp1) 					; length of string .. 0 inclusive
.1b7a	a8		tay				tay
.1b7b					_WSCopyLoop:
.1b7b	b1 2e		lda ($2e),y			lda 	(zTemp1),y
.1b7d	91 30		sta ($30),y			sta 	(zTemp2),y
.1b7f	88		dey				dey
.1b80	c0 ff		cpy #$ff			cpy 	#$FF
.1b82	d0 f7		bne $1b7b			bne 	_WSCopyLoop
.1b84	ca		dex				dex
.1b85	7a		ply				ply
.1b86	60		rts				rts
.1b87					XCheckStop:
.1b87	20 e1 ff	jsr $ffe1			jsr 	$FFE1 						; check stop
.1b8a	f0 01		beq $1b8d			beq 	_XCSStop
.1b8c	60		rts				rts
.1b8d					_XCSStop:
.1b8d	4c 0b 20	jmp $200b		jmp	ErrorV_break
.1b90					CommandClose:
.1b90	fa		plx				plx
.1b91	20 26 10	jsr $1026			jsr 	GetInteger8Bit 				; channel to close
.1b94	cd 5f 04	cmp $045f			cmp 	currentChannel 				; is it the current channel
.1b97	d0 03		bne $1b9c			bne 	_CCNotCurrent
.1b99	9c 5f 04	stz $045f			stz 	currentChannel 				; effectively disables CMD
.1b9c					_CCNotCurrent:
.1b9c	20 c3 ff	jsr $ffc3			jsr 	X16_CLOSE 					; close the file
.1b9f	4c 36 08	jmp $0836			jmp 	NextCommand
.1ba2					CommandExit:
.1ba2	fa		plx				plx
.1ba3	86 2c		stx $2c				stx 	zTemp0 						; stack position.
.1ba5	4c ff ff	jmp $ffff			jmp 	$FFFF 						; exits the emulator.
.1ba8					CommandDebug:
.1ba8	fa		plx				plx
>1ba9	db						.byte 	$DB 						; causes a break in the emulator
.1baa	4c 36 08	jmp $0836			jmp 	NextCommand
.1bad					XGetCharacterFromChannel:
.1bad	da		phx				phx
.1bae	5a		phy				phy
.1baf	e0 00		cpx #$00			cpx 	#0 							; is it default
.1bb1	d0 05		bne $1bb8			bne 	_XGetChannel
.1bb3	20 cc ff	jsr $ffcc			jsr 	X16_CLRCHN 					; set default channel
.1bb6	80 08		bra $1bc0			bra 	_XGetChar
.1bb8					_XGetChannel:
.1bb8	20 c6 ff	jsr $ffc6			jsr 	X16_CHKIN					; CHKIN set channel
.1bbb	20 b7 ff	jsr $ffb7			jsr 	X16_READST 					; check okay
.1bbe	d0 06		bne $1bc6			bne 	_XGCError
.1bc0					_XGetChar:
.1bc0	20 e4 ff	jsr $ffe4			jsr 	X16_GETIN
.1bc3	7a		ply				ply
.1bc4	fa		plx				plx
.1bc5	60		rts				rts
.1bc6					_XGCError:
.1bc6	4c f5 1f	jmp $1ff5		jmp	ErrorV_channel
.1bc9					XGetHPos:
.1bc9	da		phx				phx
.1bca	5a		phy				phy
.1bcb	38		sec				sec
.1bcc	20 f0 ff	jsr $fff0			jsr 	X16_PLOT
.1bcf	98		tya				tya
.1bd0	7a		ply				ply
.1bd1	fa		plx				plx
.1bd2	60		rts				rts
.1bd3					X16I2CPoke:
.1bd3	fa		plx				plx
.1bd4	5a		phy				phy
.1bd5	20 26 10	jsr $1026			jsr 	GetInteger8Bit 				; value
.1bd8	48		pha				pha
.1bd9	ca		dex				dex
.1bda	20 26 10	jsr $1026			jsr 	GetInteger8Bit 				; register
.1bdd	48		pha				pha
.1bde	ca		dex				dex
.1bdf	20 26 10	jsr $1026			jsr 	GetInteger8Bit 				; device
.1be2	aa		tax				tax
.1be3	7a		ply				ply
.1be4	68		pla				pla
.1be5	20 c9 fe	jsr $fec9			jsr 	X16_i2c_write_byte 			; write the byte out.
.1be8	b0 06		bcs $1bf0			bcs 	X16I2CError
.1bea	7a		ply				ply
.1beb	a2 ff		ldx #$ff			ldx 	#$FF
.1bed	4c 36 08	jmp $0836			jmp 	NextCommand
.1bf0					X16I2CError:
.1bf0	4c f5 1f	jmp $1ff5		jmp	ErrorV_channel
.1bf3					X16I2CPeek:
.1bf3	fa		plx				plx
.1bf4	da		phx				phx
.1bf5	5a		phy				phy
.1bf6	20 26 10	jsr $1026			jsr 	GetInteger8Bit 				; register
.1bf9	48		pha				pha
.1bfa	ca		dex				dex
.1bfb	20 26 10	jsr $1026			jsr 	GetInteger8Bit 				; device
.1bfe	aa		tax				tax 								; X device
.1bff	7a		ply				ply 								; Y register
.1c00	20 c6 fe	jsr $fec6			jsr 	X16_i2c_read_byte 			; read I2C
.1c03	b0 eb		bcs $1bf0			bcs 	X16I2CError
.1c05	7a		ply				ply 								; restore Y/X
.1c06	fa		plx				plx
.1c07	ca		dex				dex 								; drop TOS (register)
.1c08	20 4f 26	jsr $264f			jsr 	FloatSetByte 				; write read value to TOS.
.1c0b	4c 36 08	jmp $0836			jmp 	NextCommand
.1c0e					CommandXOpen:
.1c0e	fa		plx				plx
.1c0f	a5 41		lda $41				lda 	NSMantissa0+3  				; point zTemp0 to string head, also in XY
.1c11	85 2c		sta $2c				sta 	zTemp0
.1c13	aa		tax				tax
.1c14	a5 4d		lda $4d				lda 	NSMantissa1+3
.1c16	85 2d		sta $2d				sta 	zTemp0+1
.1c18	a8		tay				tay
.1c19	e8		inx				inx 								; XY points to first character
.1c1a	d0 01		bne $1c1d			bne 	_CONoCarry
.1c1c	c8		iny				iny
.1c1d					_CONoCarry:
.1c1d	b2 2c		lda ($2c)			lda 	(zTemp0) 					; get length of filename
.1c1f	20 bd ff	jsr $ffbd			jsr 	X16_SETNAM
.1c22	a5 3e		lda $3e				lda 	NSMantissa0+0
.1c24	a6 3f		ldx $3f				ldx 	NSMantissa0+1
.1c26	a4 40		ldy $40				ldy 	NSMantissa0+2
.1c28	20 ba ff	jsr $ffba			jsr 	X16_SETLFS
.1c2b	20 c0 ff	jsr $ffc0			jsr 	X16_OPEN
.1c2e	b0 03		bcs $1c33			bcs 	_COError
.1c30	4c 36 08	jmp $0836			jmp 	NextCommand
.1c33					_COError:
.1c33	4c f5 1f	jmp $1ff5		jmp	ErrorV_channel
.1c36					XPokeMemory:
.1c36	86 2c		stx $2c				stx 	zTemp0
.1c38	84 2d		sty $2d				sty 	zTemp0+1
.1c3a	a4 00		ldy $00				ldy 	SelectRAMBank 				; old RAM bank in Y
.1c3c	ae 6d 05	ldx $056d			ldx 	ramBank 					; switch to BANKed RAMBank if not $FF
.1c3f	e0 ff		cpx #$ff			cpx 	#$FF
.1c41	f0 02		beq $1c45			beq 	_XPMNoSwitch
.1c43	86 00		stx $00				stx 	SelectRAMBank
.1c45					_XPMNoSwitch:
.1c45	92 2c		sta ($2c)			sta 	(zTemp0) 					; do the POKE
.1c47	84 00		sty $00				sty 	SelectRAMBank 				; reselect previous RAM Bank.
.1c49					_XPMExit:
.1c49	60		rts				rts
.1c4a					XPeekMemory:
.1c4a	86 2c		stx $2c				stx 	zTemp0
.1c4c	84 2d		sty $2d				sty 	zTemp0+1
.1c4e	a4 00		ldy $00				ldy 	SelectRAMBank 				; old RAM bank in Y
.1c50	ae 6d 05	ldx $056d			ldx 	ramBank 					; switch to BANKed RAMBank if not $FF
.1c53	e0 ff		cpx #$ff			cpx 	#$FF
.1c55	f0 02		beq $1c59			beq 	_XPMNoSwitch
.1c57	86 00		stx $00				stx 	SelectRAMBank
.1c59					_XPMNoSwitch:
.1c59	b2 2c		lda ($2c)			lda 	(zTemp0) 					; do the PEEK
.1c5b	84 00		sty $00				sty 	SelectRAMBank 				; reselect previous RAM bank.
.1c5d	60		rts				rts
.1c5e					CommandBank:
.1c5e	fa		plx				plx
.1c5f	a5 3e		lda $3e				lda 	NSMantissa0 				; RAM bank
.1c61	8d 6d 05	sta $056d			sta 	ramBank 					; store & make current
.1c64	85 00		sta $00				sta 	SelectRAMBank
.1c66	a5 3f		lda $3f				lda 	NSMantissa0+1 		 		; ROM specified
.1c68	c9 ff		cmp #$ff			cmp 	#$FF
.1c6a	f0 03		beq $1c6f			beq 	_CBNoUpdate
.1c6c	8d 6e 05	sta $056e			sta 	romBank 					; this doesn't set the hardware page.
.1c6f					_CBNoUpdate:
.1c6f	a2 ff		ldx #$ff			ldx 	#$FF
.1c71	4c 36 08	jmp $0836			jmp 	NextCommand
.056d					ramBank:
>056d							.fill 	1
.056e					romBank:
>056e							.fill 	1
.1c74					XPrintCharacterToChannel:
.1c74	48		pha				pha
.1c75	da		phx				phx
.1c76	5a		phy				phy
.1c77	48		pha				pha  								; save char
.1c78	e0 00		cpx #$00			cpx 	#0 							; check default (0)
.1c7a	d0 05		bne $1c81			bne 	_XPCNotDefault
.1c7c	20 cc ff	jsr $ffcc			jsr 	X16_CLRCHN					; set default channel
.1c7f	80 08		bra $1c89			bra 	_XPCSend
.1c81					_XPCNotDefault:
.1c81	20 c9 ff	jsr $ffc9			jsr 	X16_CHKOUT 					; CHKOUT set channel
.1c84	20 b7 ff	jsr $ffb7			jsr 	X16_READST 					; check okay
.1c87	d0 08		bne $1c91			bne 	_XPCError
.1c89					_XPCSend:
.1c89	68		pla				pla 								; restore character
.1c8a	20 d2 ff	jsr $ffd2			jsr 	X16_BSOUT 					; print
.1c8d	7a		ply				ply
.1c8e	fa		plx				plx
.1c8f	68		pla				pla
.1c90	60		rts				rts
.1c91					_XPCError:
.1c91	4c f5 1f	jmp $1ff5		jmp	ErrorV_channel
.1c94					XReadClock:
.1c94	20 de ff	jsr $ffde			jsr 	X16_RDTIM
.1c97	60		rts				rts
.1c98					XWriteClock:
.1c98	48		pha				pha
.1c99	da		phx				phx
.1c9a	5a		phy				phy
.1c9b	20 db ff	jsr $ffdb			jsr 	X16_SETTIM
.1c9e	7a		ply				ply
.1c9f	fa		plx				plx
.1ca0	68		pla				pla
.1ca1	60		rts				rts
.1ca2					CommandScreen:
.1ca2	fa		plx				plx
.1ca3	da		phx				phx
.1ca4	5a		phy				phy
.1ca5	20 26 10	jsr $1026			jsr 	GetInteger8Bit
.1ca8	18		clc				clc
.1ca9	20 5f ff	jsr $ff5f			jsr 	X16_screen_mode
.1cac	7a		ply				ply
.1cad	fa		plx				plx
.1cae	4c 36 08	jmp $0836			jmp 	NextCommand
.1cb1					XCommandSleep:
.1cb1	fa		plx				plx
.1cb2	5a		phy				phy
.1cb3	20 88 22	jsr $2288			jsr 	FloatIntegerPart
.1cb6	ca		dex				dex
.1cb7	20 94 1c	jsr $1c94			jsr 	XReadClock 					; read clock to YXA
.1cba	18		clc				clc 								; calculate end time in zTemp0
.1cbb	65 3e		adc $3e				adc 	NSMantissa0
.1cbd	85 2c		sta $2c				sta 	zTemp0
.1cbf	8a		txa				txa
.1cc0	65 4a		adc $4a				adc 	NSMantissa1
.1cc2	85 2d		sta $2d				sta 	zTemp0+1
.1cc4					_XCWait:
.1cc4	20 94 1c	jsr $1c94			jsr 	XReadClock 					; and wait for it.
.1cc7	c5 2c		cmp $2c				cmp 	zTemp0
.1cc9	d0 f9		bne $1cc4			bne 	_XCWait
.1ccb	e4 2d		cpx $2d				cpx 	zTemp0+1
.1ccd	d0 f5		bne $1cc4			bne 	_XCWait
.1ccf	a2 ff		ldx #$ff			ldx 	#$FF
.1cd1	7a		ply				ply
.1cd2	4c 36 08	jmp $0836			jmp 	NextCommand
.1cd5					X16_Audio_FMINIT:
.1cd5	fa		plx				plx
.1cd6	5a		phy			phy
.1cd7	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1cda	63 c0					.word	X16A_ym_init
>1cdc	0a					.byte	X16_AudioCodeBank
.1cdd	a2 ff		ldx #$ff		ldx	#$FF
.1cdf	7a		ply			ply
.1ce0	4c 36 08	jmp $0836			jmp 	NextCommand
.1ce3					X16_Audio_FMNOTE:
.1ce3	fa		plx				plx
.1ce4	5a		phy			phy
.1ce5	20 ee 09	jsr $09ee		jsr		X16_Audio_Parameters8_8
.1ce8	18		clc			clc
.1ce9	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1cec	03 c0					.word	X16A_bas_fmnote
>1cee	0a					.byte	X16_AudioCodeBank
.1cef	a2 ff		ldx #$ff		ldx	#$FF
.1cf1	7a		ply			ply
.1cf2	4c 36 08	jmp $0836			jmp 	NextCommand
.1cf5					X16_Audio_FMDRUM:
.1cf5	fa		plx				plx
.1cf6	5a		phy			phy
.1cf7	20 ee 09	jsr $09ee		jsr		X16_Audio_Parameters8_8
.1cfa	18		clc			clc
.1cfb	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1cfe	6f c0					.word	X16A_ym_playdrum
>1d00	0a					.byte	X16_AudioCodeBank
.1d01	a2 ff		ldx #$ff		ldx	#$FF
.1d03	7a		ply			ply
.1d04	4c 36 08	jmp $0836			jmp 	NextCommand
.1d07					X16_Audio_FMINST:
.1d07	fa		plx				plx
.1d08	5a		phy			phy
.1d09	20 ee 09	jsr $09ee		jsr		X16_Audio_Parameters8_8
.1d0c	38		sec			sec
.1d0d	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1d10	69 c0					.word	X16A_ym_loadpatch
>1d12	0a					.byte	X16_AudioCodeBank
.1d13	a2 ff		ldx #$ff		ldx	#$FF
.1d15	7a		ply			ply
.1d16	4c 36 08	jmp $0836			jmp 	NextCommand
.1d19					X16_Audio_FMVIB:
.1d19	fa		plx				plx
.1d1a	5a		phy			phy
.1d1b	20 ee 09	jsr $09ee		jsr		X16_Audio_Parameters8_8
.1d1e	18		clc			clc
.1d1f	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1d22	09 c0					.word	X16A_bas_fmvib
>1d24	0a					.byte	X16_AudioCodeBank
.1d25	a2 ff		ldx #$ff		ldx	#$FF
.1d27	7a		ply			ply
.1d28	4c 36 08	jmp $0836			jmp 	NextCommand
.1d2b					X16_Audio_FMFREQ:
.1d2b	fa		plx				plx
.1d2c	5a		phy			phy
.1d2d	20 e8 09	jsr $09e8		jsr		X16_Audio_Parameters8_16
.1d30	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1d33	00 c0					.word	X16A_bas_fmfreq
>1d35	0a					.byte	X16_AudioCodeBank
.1d36	a2 ff		ldx #$ff		ldx	#$FF
.1d38	7a		ply			ply
.1d39	4c 36 08	jmp $0836			jmp 	NextCommand
.1d3c					X16_Audio_FMVOL:
.1d3c	fa		plx				plx
.1d3d	5a		phy			phy
.1d3e	20 ee 09	jsr $09ee		jsr		X16_Audio_Parameters8_8
.1d41	18		clc			clc
.1d42	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1d45	75 c0					.word	X16A_ym_setatten
>1d47	0a					.byte	X16_AudioCodeBank
.1d48	a2 ff		ldx #$ff		ldx	#$FF
.1d4a	7a		ply			ply
.1d4b	4c 36 08	jmp $0836			jmp 	NextCommand
.1d4e					X16_Audio_FMPAN:
.1d4e	fa		plx				plx
.1d4f	5a		phy			phy
.1d50	20 ee 09	jsr $09ee		jsr		X16_Audio_Parameters8_8
.1d53	18		clc			clc
.1d54	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1d57	7e c0					.word	X16A_ym_setpan
>1d59	0a					.byte	X16_AudioCodeBank
.1d5a	a2 ff		ldx #$ff		ldx	#$FF
.1d5c	7a		ply			ply
.1d5d	4c 36 08	jmp $0836			jmp 	NextCommand
.1d60					X16_Audio_FMPLAY:
.1d60	fa		plx				plx
.1d61	5a		phy			phy
.1d62	20 ff 09	jsr $09ff		jsr		X16_Audio_Parameters8_String
.1d65	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1d68	06 c0					.word	X16A_bas_fmplaystring
>1d6a	0a					.byte	X16_AudioCodeBank
.1d6b	a2 ff		ldx #$ff		ldx	#$FF
.1d6d	7a		ply			ply
.1d6e	4c 36 08	jmp $0836			jmp 	NextCommand
.1d71					X16_Audio_FMCHORD:
.1d71	fa		plx				plx
.1d72	5a		phy			phy
.1d73	20 ff 09	jsr $09ff		jsr		X16_Audio_Parameters8_String
.1d76	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1d79	8d c0					.word	X16A_bas_fmchordstring
>1d7b	0a					.byte	X16_AudioCodeBank
.1d7c	a2 ff		ldx #$ff		ldx	#$FF
.1d7e	7a		ply			ply
.1d7f	4c 36 08	jmp $0836			jmp 	NextCommand
.1d82					X16_Audio_FMPOKE:
.1d82	fa		plx				plx
.1d83	5a		phy			phy
.1d84	20 ee 09	jsr $09ee		jsr		X16_Audio_Parameters8_8
.1d87	18		clc			clc
.1d88	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1d8b	8a c0					.word	X16A_ym_write
>1d8d	0a					.byte	X16_AudioCodeBank
.1d8e	a2 ff		ldx #$ff		ldx	#$FF
.1d90	7a		ply			ply
.1d91	4c 36 08	jmp $0836			jmp 	NextCommand
.1d94					X16_Audio_PSGINIT:
.1d94	fa		plx				plx
.1d95	5a		phy			phy
.1d96	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1d99	4b c0					.word	X16A_psg_init
>1d9b	0a					.byte	X16_AudioCodeBank
.1d9c	a2 ff		ldx #$ff		ldx	#$FF
.1d9e	7a		ply			ply
.1d9f	4c 36 08	jmp $0836			jmp 	NextCommand
.1da2					X16_Audio_PSGNOTE:
.1da2	fa		plx				plx
.1da3	5a		phy			phy
.1da4	20 ee 09	jsr $09ee		jsr		X16_Audio_Parameters8_8
.1da7	18		clc			clc
.1da8	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1dab	12 c0					.word	X16A_bas_psgnote
>1dad	0a					.byte	X16_AudioCodeBank
.1dae	a2 ff		ldx #$ff		ldx	#$FF
.1db0	7a		ply			ply
.1db1	4c 36 08	jmp $0836			jmp 	NextCommand
.1db4					X16_Audio_PSGVOL:
.1db4	fa		plx				plx
.1db5	5a		phy			phy
.1db6	20 ee 09	jsr $09ee		jsr		X16_Audio_Parameters8_8
.1db9	18		clc			clc
.1dba	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1dbd	54 c0					.word	X16A_psg_setatten
>1dbf	0a					.byte	X16_AudioCodeBank
.1dc0	a2 ff		ldx #$ff		ldx	#$FF
.1dc2	7a		ply			ply
.1dc3	4c 36 08	jmp $0836			jmp 	NextCommand
.1dc6					X16_Audio_PSGWAV:
.1dc6	fa		plx				plx
.1dc7	5a		phy			phy
.1dc8	20 ee 09	jsr $09ee		jsr		X16_Audio_Parameters8_8
.1dcb	18		clc			clc
.1dcc	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1dcf	15 c0					.word	X16A_bas_psgwav
>1dd1	0a					.byte	X16_AudioCodeBank
.1dd2	a2 ff		ldx #$ff		ldx	#$FF
.1dd4	7a		ply			ply
.1dd5	4c 36 08	jmp $0836			jmp 	NextCommand
.1dd8					X16_Audio_PSGFREQ:
.1dd8	fa		plx				plx
.1dd9	5a		phy			phy
.1dda	20 e8 09	jsr $09e8		jsr		X16_Audio_Parameters8_16
.1ddd	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1de0	0f c0					.word	X16A_bas_psgfreq
>1de2	0a					.byte	X16_AudioCodeBank
.1de3	a2 ff		ldx #$ff		ldx	#$FF
.1de5	7a		ply			ply
.1de6	4c 36 08	jmp $0836			jmp 	NextCommand
.1de9					X16_Audio_PSGPAN:
.1de9	fa		plx				plx
.1dea	5a		phy			phy
.1deb	20 ee 09	jsr $09ee		jsr		X16_Audio_Parameters8_8
.1dee	18		clc			clc
.1def	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1df2	5a c0					.word	X16A_psg_setpan
>1df4	0a					.byte	X16_AudioCodeBank
.1df5	a2 ff		ldx #$ff		ldx	#$FF
.1df7	7a		ply			ply
.1df8	4c 36 08	jmp $0836			jmp 	NextCommand
.1dfb					X16_Audio_PSGPLAY:
.1dfb	fa		plx				plx
.1dfc	5a		phy			phy
.1dfd	20 ff 09	jsr $09ff		jsr		X16_Audio_Parameters8_String
.1e00	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1e03	18 c0					.word	X16A_bas_psgplaystring
>1e05	0a					.byte	X16_AudioCodeBank
.1e06	a2 ff		ldx #$ff		ldx	#$FF
.1e08	7a		ply			ply
.1e09	4c 36 08	jmp $0836			jmp 	NextCommand
.1e0c					X16_Audio_PSGCHORD:
.1e0c	fa		plx				plx
.1e0d	5a		phy			phy
.1e0e	20 ff 09	jsr $09ff		jsr		X16_Audio_Parameters8_String
.1e11	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1e14	90 c0					.word	X16A_bas_psgchordstring
>1e16	0a					.byte	X16_AudioCodeBank
.1e17	a2 ff		ldx #$ff		ldx	#$FF
.1e19	7a		ply			ply
.1e1a	4c 36 08	jmp $0836			jmp 	NextCommand
.1e1d					CommandCls:
.1e1d	fa		plx				plx
.1e1e	a9 93		lda #$93			lda 	#147
.1e20	20 74 1c	jsr $1c74			jsr 	XPrintCharacterToChannel
.1e23	4c 36 08	jmp $0836			jmp 	NextCommand
.1e26					CommandLocate:
.1e26	fa		plx				plx
.1e27	20 88 22	jsr $2288			jsr 	FloatIntegerPart
.1e2a	ca		dex				dex
.1e2b	20 88 22	jsr $2288			jsr 	FloatIntegerPart
.1e2e	ca		dex				dex
.1e2f	a9 13		lda #$13			lda 	#$13 						; home.
.1e31	20 74 1c	jsr $1c74			jsr 	XPrintCharacterToChannel
.1e34	a9 1d		lda #$1d			lda 	#$1D 						; do cursor rights
.1e36	a6 3f		ldx $3f				ldx 	NSMantissa0+1
.1e38	20 45 1e	jsr $1e45			jsr 	_CLOutputXA
.1e3b	a9 11		lda #$11			lda 	#$11 						; do cursor downs.
.1e3d	a6 3e		ldx $3e				ldx 	NSMantissa0
.1e3f	20 45 1e	jsr $1e45			jsr 	_CLOutputXA
.1e42	4c 36 08	jmp $0836			jmp 	NextCommand
.1e45					_CLOutputXA:
.1e45	ca		dex				dex
.1e46	f0 07		beq $1e4f			beq 	_CLOExit
.1e48	30 05		bmi $1e4f			bmi 	_CLOExit
.1e4a	20 74 1c	jsr $1c74			jsr 	XPrintCharacterToChannel
.1e4d	80 f6		bra $1e45			bra 	_CLOutputXA
.1e4f					_CLOExit:
.1e4f	60		rts				rts
.1e50					CommandColor:
.1e50	fa		plx				plx
.1e51	20 88 22	jsr $2288			jsr 	FloatIntegerPart
.1e54	ca		dex				dex
.1e55	20 88 22	jsr $2288			jsr 	FloatIntegerPart
.1e58	ca		dex				dex
.1e59	a5 3f		lda $3f				lda 	NSMantissa0+1 				; bgr specified
.1e5b	c9 ff		cmp #$ff			cmp 	#$FF
.1e5d	f0 08		beq $1e67			beq 	_CCNoBGR 					; if so, change background
.1e5f	20 6f 1e	jsr $1e6f			jsr 	_CCSetColour
.1e62	a9 01		lda #$01			lda 	#$01 						; swap FGR/BGR
.1e64	20 74 1c	jsr $1c74			jsr 	XPrintCharacterToChannel
.1e67					_CCNoBGR:
.1e67	a5 3e		lda $3e				lda 	NSMantissa0
.1e69	20 6f 1e	jsr $1e6f			jsr 	_CCSetColour
.1e6c	4c 36 08	jmp $0836			jmp 	NextCommand
.1e6f					_CCSetColour:
.1e6f	29 0f		and #$0f			and 	#15 						; look up in control codes table.
.1e71	aa		tax				tax
.1e72	bd 79 1e	lda $1e79,x			lda 	_CCCommandTable,x
.1e75	20 74 1c	jsr $1c74			jsr 	XPrintCharacterToChannel
.1e78	60		rts				rts
.1e79					_CCCommandTable:
>1e79	90 05 1c 9f 9c 1e 1f 9e				.byte	 $90,$05,$1c,$9f,$9c,$1e,$1f,$9e
>1e81	81 95 96 97 98 99 9a 9b				.byte	 $81,$95,$96,$97,$98,$99,$9a,$9b
.1e89					CommandVPOKE:
.1e89	fa		plx				plx
.1e8a	20 26 10	jsr $1026			jsr 	GetInteger8Bit 				; poke value
.1e8d	48		pha				pha
.1e8e	ca		dex				dex
.1e8f	20 88 22	jsr $2288			jsr 	FloatIntegerPart
.1e92	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.1e94	8d 20 9f	sta $9f20			sta 	VRAMLow0
.1e97	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.1e99	8d 21 9f	sta $9f21			sta 	VRAMMed0
.1e9c	ca		dex				dex
.1e9d	20 88 22	jsr $2288			jsr 	FloatIntegerPart
.1ea0	20 26 10	jsr $1026			jsr 	GetInteger8Bit
.1ea3	8d 22 9f	sta $9f22			sta 	VRAMHigh0
.1ea6	ca		dex				dex
.1ea7	68		pla				pla 								; poke value back
.1ea8	8d 23 9f	sta $9f23			sta 	VRAMData0					; and write it out.
.1eab	4c 36 08	jmp $0836			jmp 	NextCommand
.1eae					CommandVPEEK:
.1eae	fa		plx				plx
.1eaf	20 88 22	jsr $2288			jsr 	FloatIntegerPart
.1eb2	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.1eb4	8d 20 9f	sta $9f20			sta 	VRAMLow0
.1eb7	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.1eb9	8d 21 9f	sta $9f21			sta 	VRAMMed0
.1ebc	ca		dex				dex
.1ebd	20 88 22	jsr $2288			jsr 	FloatIntegerPart
.1ec0	20 26 10	jsr $1026			jsr 	GetInteger8Bit
.1ec3	8d 22 9f	sta $9f22			sta 	VRAMHigh0
.1ec6	ad 23 9f	lda $9f23			lda 	VRAMData0					; read data
.1ec9	20 4f 26	jsr $264f			jsr 	FloatSetByte 				; return as byte
.1ecc	4c 36 08	jmp $0836			jmp 	NextCommand

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/common.library

=$80					C64_END                  = $80 ; $80 end
=$81					C64_FOR                  = $81 ; $81 for
=$82					C64_NEXT                 = $82 ; $82 next
=$83					C64_DATA                 = $83 ; $83 data
=$84					C64_INPUTHASH            = $84 ; $84 input#
=$85					C64_INPUT                = $85 ; $85 input
=$86					C64_DIM                  = $86 ; $86 dim
=$87					C64_READ                 = $87 ; $87 read
=$88					C64_LET                  = $88 ; $88 let
=$89					C64_GOTO                 = $89 ; $89 goto
=$8a					C64_RUN                  = $8a ; $8a run
=$8b					C64_IF                   = $8b ; $8b if
=$8c					C64_RESTORE              = $8c ; $8c restore
=$8d					C64_GOSUB                = $8d ; $8d gosub
=$8e					C64_RETURN               = $8e ; $8e return
=$8f					C64_REM                  = $8f ; $8f rem
=$90					C64_STOP                 = $90 ; $90 stop
=$91					C64_ON                   = $91 ; $91 on
=$92					C64_WAIT                 = $92 ; $92 wait
=$93					C64_LOAD                 = $93 ; $93 load
=$94					C64_SAVE                 = $94 ; $94 save
=$95					C64_VERIFY               = $95 ; $95 verify
=$96					C64_DEF                  = $96 ; $96 def
=$97					C64_POKE                 = $97 ; $97 poke
=$98					C64_PRINTHASH            = $98 ; $98 print#
=$99					C64_PRINT                = $99 ; $99 print
=$9a					C64_CONT                 = $9a ; $9a cont
=$9b					C64_LIST                 = $9b ; $9b list
=$9c					C64_CLR                  = $9c ; $9c clr
=$9d					C64_CMD                  = $9d ; $9d cmd
=$9e					C64_SYS                  = $9e ; $9e sys
=$9f					C64_OPEN                 = $9f ; $9f open
=$a0					C64_CLOSE                = $a0 ; $a0 close
=$a1					C64_GET                  = $a1 ; $a1 get
=$a2					C64_NEW                  = $a2 ; $a2 new
=$a3					C64_TABLB                = $a3 ; $a3 tab(
=$a4					C64_TO                   = $a4 ; $a4 to
=$a5					C64_FN                   = $a5 ; $a5 fn
=$a6					C64_SPCLB                = $a6 ; $a6 spc(
=$a7					C64_THEN                 = $a7 ; $a7 then
=$a8					C64_NOT                  = $a8 ; $a8 not
=$a9					C64_STEP                 = $a9 ; $a9 step
=$aa					C64_PLUS                 = $aa ; $aa +
=$ab					C64_MINUS                = $ab ; $ab -
=$ac					C64_TIMES                = $ac ; $ac *
=$ad					C64_DIVIDE               = $ad ; $ad /
=$ae					C64_POWER                = $ae ; $ae ^
=$af					C64_AND                  = $af ; $af and
=$b0					C64_OR                   = $b0 ; $b0 or
=$b1					C64_GREATER              = $b1 ; $b1 >
=$b2					C64_EQUAL                = $b2 ; $b2 =
=$b3					C64_LESS                 = $b3 ; $b3 <
=$b4					C64_SGN                  = $b4 ; $b4 sgn
=$b5					C64_INT                  = $b5 ; $b5 int
=$b6					C64_ABS                  = $b6 ; $b6 abs
=$b7					C64_USR                  = $b7 ; $b7 usr
=$b8					C64_FRE                  = $b8 ; $b8 fre
=$b9					C64_POS                  = $b9 ; $b9 pos
=$ba					C64_SQR                  = $ba ; $ba sqr
=$bb					C64_RND                  = $bb ; $bb rnd
=$bc					C64_LOG                  = $bc ; $bc log
=$bd					C64_EXP                  = $bd ; $bd exp
=$be					C64_COS                  = $be ; $be cos
=$bf					C64_SIN                  = $bf ; $bf sin
=$c0					C64_TAN                  = $c0 ; $c0 tan
=$c1					C64_ATN                  = $c1 ; $c1 atn
=$c2					C64_PEEK                 = $c2 ; $c2 peek
=$c3					C64_LEN                  = $c3 ; $c3 len
=$c4					C64_STRDOLLAR            = $c4 ; $c4 str$
=$c5					C64_VAL                  = $c5 ; $c5 val
=$c6					C64_ASC                  = $c6 ; $c6 asc
=$c7					C64_CHRDOLLAR            = $c7 ; $c7 chr$
=$c8					C64_LEFTDOLLAR           = $c8 ; $c8 left$
=$c9					C64_RIGHTDOLLAR          = $c9 ; $c9 right$
=$ca					C64_MIDDOLLAR            = $ca ; $ca mid$
=$cb					C64_GO                   = $cb ; $cb go
=$ce80					C64_MON                  = $ce80 ; $ce80 mon
=$ce81					C64_DOS                  = $ce81 ; $ce81 dos
=$ce82					C64_OLD                  = $ce82 ; $ce82 old
=$ce83					C64_GEOS                 = $ce83 ; $ce83 geos
=$ce84					C64_VPOKE                = $ce84 ; $ce84 vpoke
=$ce85					C64_VLOAD                = $ce85 ; $ce85 vload
=$ce86					C64_SCREEN               = $ce86 ; $ce86 screen
=$ce87					C64_PSET                 = $ce87 ; $ce87 pset
=$ce88					C64_LINE                 = $ce88 ; $ce88 line
=$ce89					C64_FRAME                = $ce89 ; $ce89 frame
=$ce8a					C64_RECT                 = $ce8a ; $ce8a rect
=$ce8b					C64_CHAR                 = $ce8b ; $ce8b char
=$ce8c					C64_MOUSE                = $ce8c ; $ce8c mouse
=$ce8d					C64_COLOR                = $ce8d ; $ce8d color
=$ce8e					C64_TEST                 = $ce8e ; $ce8e test
=$ce8f					C64_RESET                = $ce8f ; $ce8f reset
=$ce90					C64_CLS                  = $ce90 ; $ce90 cls
=$ce91					C64_CODEX                = $ce91 ; $ce91 codex
=$ce92					C64_LOCATE               = $ce92 ; $ce92 locate
=$ce93					C64_BOOT                 = $ce93 ; $ce93 boot
=$ce94					C64_KEYMAP               = $ce94 ; $ce94 keymap
=$ce95					C64_BLOAD                = $ce95 ; $ce95 bload
=$ce96					C64_BVLOAD               = $ce96 ; $ce96 bvload
=$ce97					C64_BVERIFY              = $ce97 ; $ce97 bverify
=$ce98					C64_BANK                 = $ce98 ; $ce98 bank
=$ce99					C64_FMINIT               = $ce99 ; $ce99 fminit
=$ce9a					C64_FMNOTE               = $ce9a ; $ce9a fmnote
=$ce9b					C64_FMDRUM               = $ce9b ; $ce9b fmdrum
=$ce9c					C64_FMINST               = $ce9c ; $ce9c fminst
=$ce9d					C64_FMVIB                = $ce9d ; $ce9d fmvib
=$ce9e					C64_FMFREQ               = $ce9e ; $ce9e fmfreq
=$ce9f					C64_FMVOL                = $ce9f ; $ce9f fmvol
=$cea0					C64_FMPAN                = $cea0 ; $cea0 fmpan
=$cea1					C64_FMPLAY               = $cea1 ; $cea1 fmplay
=$cea2					C64_FMCHORD              = $cea2 ; $cea2 fmchord
=$cea3					C64_FMPOKE               = $cea3 ; $cea3 fmpoke
=$cea4					C64_PSGINIT              = $cea4 ; $cea4 psginit
=$cea5					C64_PSGNOTE              = $cea5 ; $cea5 psgnote
=$cea6					C64_PSGVOL               = $cea6 ; $cea6 psgvol
=$cea7					C64_PSGWAV               = $cea7 ; $cea7 psgwav
=$cea8					C64_PSGFREQ              = $cea8 ; $cea8 psgfreq
=$cea9					C64_PSGPAN               = $cea9 ; $cea9 psgpan
=$ceaa					C64_PSGPLAY              = $ceaa ; $ceaa psgplay
=$ceab					C64_PSGCHORD             = $ceab ; $ceab psgchord
=$ceac					C64_REBOOT               = $ceac ; $ceac reboot
=$cead					C64_POWEROFF             = $cead ; $cead poweroff
=$ceae					C64_I2CPOKE              = $ceae ; $ceae i2cpoke
=$ceaf					C64_SLEEP                = $ceaf ; $ceaf sleep
=$ceb0					C64_BSAVE                = $ceb0 ; $ceb0 bsave
=$ceb1					C64_MENU                 = $ceb1 ; $ceb1 menu
=$ceb2					C64_REN                  = $ceb2 ; $ceb2 ren
=$ceb3					C64_LINPUT               = $ceb3 ; $ceb3 linput
=$ceb4					C64_LINPUTHASH           = $ceb4 ; $ceb4 linput#
=$ceb5					C64_BINPUTHASH           = $ceb5 ; $ceb5 binput#
=$ceb6					C64_HELP                 = $ceb6 ; $ceb6 help
=$ced0					C64_VPEEK                = $ced0 ; $ced0 vpeek
=$ced1					C64_MX                   = $ced1 ; $ced1 mx
=$ced2					C64_MY                   = $ced2 ; $ced2 my
=$ced3					C64_MB                   = $ced3 ; $ced3 mb
=$ced4					C64_JOY                  = $ced4 ; $ced4 joy
=$ced5					C64_HEXDOLLAR            = $ced5 ; $ced5 hex$
=$ced6					C64_BINDOLLAR            = $ced6 ; $ced6 bin$
=$ced7					C64_I2CPEEK              = $ced7 ; $ced7 i2cpeek
=$ced8					C64_POINTER              = $ced8 ; $ced8 pointer
=$ced9					C64_STRPTR               = $ced9 ; $ced9 strptr
=$ceda					C64_RPTDOLLAR            = $ceda ; $ceda rpt$
=$801					CodeStart = $801
=$22					ZeroPageMandatory = $22
=$400					MemoryStorage = $400
.0028					codePtr:
>0028							.fill 	2
.002a					objPtr:
>002a							.fill 	2
.002c					zTemp0:
>002c							.fill 	2
.002e					zTemp1:
>002e							.fill 	2
.0030					zTemp2:
>0030							.fill 	2
=$80					PCD_STARTBINARY = $80
=$8d					PCD_ENDBINARY = $8d
=$8d					PCD_STARTCOMMAND = $8d
=$ca					PCD_ENDCOMMAND = $ca
=$ca					PCD_STARTSYSTEM = $ca
=$d5					PCD_ENDSYSTEM = $d5
=$80					PCD_PLUS             = $80 ; +
=$81					PCD_MINUS            = $81 ; -
=$82					PCD_TIMES            = $82 ; *
=$83					PCD_DIVIDE           = $83 ; /
=$84					PCD_POWER            = $84 ; ^
=$85					PCD_AND              = $85 ; and
=$86					PCD_OR               = $86 ; or
=$87					PCD_GREATER          = $87 ; >
=$88					PCD_EQUAL            = $88 ; =
=$89					PCD_LESS             = $89 ; <
=$8a					PCD_GREATEREQUAL     = $8a ; >=
=$8b					PCD_LESSGREATER      = $8b ; <>
=$8c					PCD_LESSEQUAL        = $8c ; <=
=$8d					PCD_ABS              = $8d ; abs
=$8e					PCD_ARRAY            = $8e ; array
=$8f					PCD_ASC              = $8f ; asc
=$90					PCD_ASSERT           = $90 ; assert
=$91					PCD_BINDOLLAR        = $91 ; bin$
=$92					PCD_PRINTCMD_CHR     = $92 ; print.chr
=$93					PCD_CHRDOLLAR        = $93 ; chr$
=$94					PCD_SCMD_CMP         = $94 ; s.cmp
=$95					PCD_FOR              = $95 ; for
=$96					PCD_FRE              = $96 ; fre
=$97					PCD_GET              = $97 ; get
=$98					PCD_RETURN           = $98 ; return
=$99					PCD_PSET             = $99 ; pset
=$9a					PCD_LINE             = $9a ; line
=$9b					PCD_RECT             = $9b ; rect
=$9c					PCD_FRAME            = $9c ; frame
=$9d					PCD_CHAR             = $9d ; char
=$9e					PCD_HEXDOLLAR        = $9e ; hex$
=$9f					PCD_INPUT            = $9f ; input
=$a0					PCD_INPUTDOLLAR      = $a0 ; input$
=$a1					PCD_INPUTCMD_START   = $a1 ; input.start
=$a2					PCD_LEN              = $a2 ; len
=$a3					PCD_FCMD_CMP         = $a3 ; f.cmp
=$a4					PCD_INTCMD_DIV       = $a4 ; int.div
=$a5					PCD_NEGATE           = $a5 ; negate
=$a6					PCD_NEWCMD_LINE      = $a6 ; new.line
=$a7					PCD_NEXT             = $a7 ; next
=$a8					PCD_NOT              = $a8 ; not
=$a9					PCD_ON               = $a9 ; on
=$aa					PCD_MOREON           = $aa ; moreon
=$ab					PCD_PEEK             = $ab ; peek
=$ac					PCD_POKE             = $ac ; poke
=$ad					PCD_POS              = $ad ; pos
=$ae					PCD_GETCHANNEL       = $ae ; getchannel
=$af					PCD_SETCHANNEL       = $af ; setchannel
=$b0					PCD_PRINTCMD_N       = $b0 ; print.n
=$b1					PCD_PRINTCMD_S       = $b1 ; print.s
=$b2					PCD_READ             = $b2 ; read
=$b3					PCD_READDOLLAR       = $b3 ; read$
=$b4					PCD_RND              = $b4 ; rnd
=$b5					PCD_CONCAT           = $b5 ; concat
=$b6					PCD_SGN              = $b6 ; sgn
=$b7					PCD_PRINTCMD_TAB     = $b7 ; print.tab
=$b8					PCD_PRINTCMD_POS     = $b8 ; print.pos
=$b9					PCD_PRINTCMD_SPC     = $b9 ; print.spc
=$ba					PCD_STRDOLLAR        = $ba ; str$
=$bb					PCD_LEFTDOLLAR       = $bb ; left$
=$bc					PCD_RIGHTDOLLAR      = $bc ; right$
=$bd					PCD_MIDDOLLAR        = $bd ; mid$
=$be					PCD_SWAP             = $be ; swap
=$bf					PCD_TI               = $bf ; ti
=$c0					PCD_TIDOLLAR         = $c0 ; ti$
=$c1					PCD_USR              = $c1 ; usr
=$c2					PCD_VAL              = $c2 ; val
=$c3					PCD_CLOSE            = $c3 ; close
=$c4					PCD_EXIT             = $c4 ; exit
=$c5					PCD_DEBUG            = $c5 ; debug
=$c6					PCD_OPEN             = $c6 ; open
=$c7					PCD_SCREEN           = $c7 ; screen
=$c8					PCD_VPOKE            = $c8 ; vpoke
=$c9					PCD_VPEEK            = $c9 ; vpeek
=$ca					PCD_CMD_SHIFT        = $ca ; .shift
=$cb					PCD_CMD_BYTE         = $cb ; .byte
=$cc					PCD_CMD_WORD         = $cc ; .word
=$cd					PCD_CMD_FLOAT        = $cd ; .float
=$ce					PCD_CMD_STRING       = $ce ; .string
=$cf					PCD_CMD_DATA         = $cf ; .data
=$d0					PCD_CMD_GOTO         = $d0 ; .goto
=$d1					PCD_CMD_GOSUB        = $d1 ; .gosub
=$d2					PCD_CMD_GOTOCMD_Z    = $d2 ; .goto.z
=$d3					PCD_CMD_GOTOCMD_NZ   = $d3 ; .goto.nz
=$d4					PCD_CMD_VARSPACE     = $d4 ; .varspace
=$ca80					PCD_CLR              = $ca80 ; clr
=$ca81					PCD_DIM              = $ca81 ; dim
=$ca82					PCD_END              = $ca82 ; end
=$ca83					PCD_JOY              = $ca83 ; joy
=$ca84					PCD_INT              = $ca84 ; int
=$ca85					PCD_SQR              = $ca85 ; sqr
=$ca86					PCD_LOG              = $ca86 ; log
=$ca87					PCD_EXP              = $ca87 ; exp
=$ca88					PCD_COS              = $ca88 ; cos
=$ca89					PCD_SIN              = $ca89 ; sin
=$ca8a					PCD_TAN              = $ca8a ; tan
=$ca8b					PCD_ATN              = $ca8b ; atn
=$ca8c					PCD_MOUSE            = $ca8c ; mouse
=$ca8d					PCD_MB               = $ca8d ; mb
=$ca8e					PCD_MX               = $ca8e ; mx
=$ca8f					PCD_MY               = $ca8f ; my
=$ca90					PCD_RESTORE          = $ca90 ; restore
=$ca91					PCD_STOP             = $ca91 ; stop
=$ca92					PCD_SYS              = $ca92 ; sys
=$ca93					PCD_TIDOLLARCMD_WRITE = $ca93 ; ti$.write
=$ca94					PCD_WAIT             = $ca94 ; wait
=$ca95					PCD_I2CPOKE          = $ca95 ; i2cpoke
=$ca96					PCD_I2CPEEK          = $ca96 ; i2cpeek
=$ca97					PCD_BANK             = $ca97 ; bank
=$ca98					PCD_SLEEP            = $ca98 ; sleep
=$ca99					PCD_FMINIT           = $ca99 ; fminit
=$ca9a					PCD_FMNOTE           = $ca9a ; fmnote
=$ca9b					PCD_FMDRUM           = $ca9b ; fmdrum
=$ca9c					PCD_FMINST           = $ca9c ; fminst
=$ca9d					PCD_FMVIB            = $ca9d ; fmvib
=$ca9e					PCD_FMFREQ           = $ca9e ; fmfreq
=$ca9f					PCD_FMVOL            = $ca9f ; fmvol
=$caa0					PCD_FMPAN            = $caa0 ; fmpan
=$caa1					PCD_FMPLAY           = $caa1 ; fmplay
=$caa2					PCD_FMCHORD          = $caa2 ; fmchord
=$caa3					PCD_FMPOKE           = $caa3 ; fmpoke
=$caa4					PCD_PSGINIT          = $caa4 ; psginit
=$caa5					PCD_PSGNOTE          = $caa5 ; psgnote
=$caa6					PCD_PSGVOL           = $caa6 ; psgvol
=$caa7					PCD_PSGWAV           = $caa7 ; psgwav
=$caa8					PCD_PSGFREQ          = $caa8 ; psgfreq
=$caa9					PCD_PSGPAN           = $caa9 ; psgpan
=$caaa					PCD_PSGPLAY          = $caaa ; psgplay
=$caab					PCD_PSGCHORD         = $caab ; psgchord
=$caac					PCD_CLS              = $caac ; cls
=$caad					PCD_LOCATE           = $caad ; locate
=$caae					PCD_COLOR            = $caae ; color
.1ecf					SetErrorHandler:
.1ecf	8c 70 05	sty $0570			sty 	ErrorHandlerVector+1
.1ed2	8e 6f 05	stx $056f			stx 	ErrorHandlerVector
.1ed5	60		rts				rts
.1ed6					CallErrorHandler:
.1ed6	6c 6f 05	jmp ($056f)			jmp 	(ErrorHandlerVector)
.056f					ErrorHandlerVector:
>056f							.fill 	2
.1ed9					ErrorV_range:
.1ed9	20 d6 1e	jsr $1ed6		jsr	CallErrorHandler
>1edc	4f 55 54 20 4f 46 20 52			.text	"OUT OF RANGE",0
>1ee4	41 4e 47 45 00
.1ee9					ErrorV_value:
.1ee9	20 d6 1e	jsr $1ed6		jsr	CallErrorHandler
>1eec	42 41 44 20 56 41 4c 55			.text	"BAD VALUE",0
>1ef4	45 00
.1ef6					ErrorV_syntax:
.1ef6	20 d6 1e	jsr $1ed6		jsr	CallErrorHandler
>1ef9	53 59 4e 54 41 58 20 45			.text	"SYNTAX ERROR",0
>1f01	52 52 4f 52 00
.1f06					ErrorV_type:
.1f06	20 d6 1e	jsr $1ed6		jsr	CallErrorHandler
>1f09	54 59 50 45 20 4d 49 53			.text	"TYPE MISMATCH",0
>1f11	4d 41 54 43 48 00
.1f17					ErrorV_unimplemented:
.1f17	20 d6 1e	jsr $1ed6		jsr	CallErrorHandler
>1f1a	4e 4f 54 20 49 4d 50 4c			.text	"NOT IMPLEMENTED",0
>1f22	45 4d 45 4e 54 45 44 00
.1f2a					ErrorV_assert:
.1f2a	20 d6 1e	jsr $1ed6		jsr	CallErrorHandler
>1f2d	41 53 53 45 52 54 20 46			.text	"ASSERT FAIL",0
>1f35	41 49 4c 00
.1f39					ErrorV_line:
.1f39	20 d6 1e	jsr $1ed6		jsr	CallErrorHandler
>1f3c	55 4e 4b 4e 4f 57 4e 20			.text	"UNKNOWN LINE NUMBER",0
>1f44	4c 49 4e 45 20 4e 55 4d 42 45 52 00
.1f50					ErrorV_internal:
.1f50	20 d6 1e	jsr $1ed6		jsr	CallErrorHandler
>1f53	49 4e 54 45 52 4e 41 4c			.text	"INTERNAL ERROR",0
>1f5b	20 45 52 52 4f 52 00
.1f62					ErrorV_divzero:
.1f62	20 d6 1e	jsr $1ed6		jsr	CallErrorHandler
>1f65	44 49 56 49 44 45 20 42			.text	"DIVIDE BY ZERO",0
>1f6d	59 20 5a 45 52 4f 00
.1f74					ErrorV_structure:
.1f74	20 d6 1e	jsr $1ed6		jsr	CallErrorHandler
>1f77	53 54 52 55 43 54 55 52			.text	"STRUCTURE IMBALANCE",0
>1f7f	45 20 49 4d 42 41 4c 41 4e 43 45 00
.1f8b					ErrorV_stop:
.1f8b	20 d6 1e	jsr $1ed6		jsr	CallErrorHandler
>1f8e	50 52 4f 47 52 41 4d 20			.text	"PROGRAM STOPPED",0
>1f96	53 54 4f 50 50 45 44 00
.1f9e					ErrorV_data:
.1f9e	20 d6 1e	jsr $1ed6		jsr	CallErrorHandler
>1fa1	4f 55 54 20 4f 46 20 44			.text	"OUT OF DATA",0
>1fa9	41 54 41 00
.1fad					ErrorV_undeclared:
.1fad	20 d6 1e	jsr $1ed6		jsr	CallErrorHandler
>1fb0	55 4e 4b 4e 4f 57 4e 20			.text	"UNKNOWN ARRAY",0
>1fb8	41 52 52 41 59 00
.1fbe					ErrorV_redefine:
.1fbe	20 d6 1e	jsr $1ed6		jsr	CallErrorHandler
>1fc1	41 52 52 41 59 20 52 45			.text	"ARRAY REDEFINED",0
>1fc9	44 45 46 49 4e 45 44 00
.1fd1					ErrorV_index:
.1fd1	20 d6 1e	jsr $1ed6		jsr	CallErrorHandler
>1fd4	42 41 44 20 41 52 52 41			.text	"BAD ARRAY INDEX",0
>1fdc	59 20 49 4e 44 45 58 00
.1fe4					ErrorV_memory:
.1fe4	20 d6 1e	jsr $1ed6		jsr	CallErrorHandler
>1fe7	4f 55 54 20 4f 46 20 4d			.text	"OUT OF MEMORY",0
>1fef	45 4d 4f 52 59 00
.1ff5					ErrorV_channel:
.1ff5	20 d6 1e	jsr $1ed6		jsr	CallErrorHandler
>1ff8	49 4e 50 55 54 2f 4f 55			.text	"INPUT/OUTPUT ERROR",0
>2000	54 50 55 54 20 45 52 52 4f 52 00
.200b					ErrorV_break:
.200b	20 d6 1e	jsr $1ed6		jsr	CallErrorHandler
>200e	42 52 45 41 4b 20 50 52			.text	"BREAK PRESSED",0
>2016	45 53 53 45 44 00
.201c					MoveObjectForward:
.201c	b2 2a		lda ($2a)			lda 	(objPtr) 					; get next
.201e	c9 ff		cmp #$ff			cmp 	#$FF
.2020	f0 36		beq $2058			beq 	_MOFEnd
.2022	c9 40		cmp #$40			cmp 	#$40 						; 00-3F
.2024	90 24		bcc $204a			bcc 	_MOFAdvance1 				; forward 1
.2026	a0 02		ldy #$02			ldy 	#2 							; 40-6F
.2028	c9 70		cmp #$70			cmp 	#$70 						; forward 2
.202a	90 20		bcc $204c			bcc 	_MOFAdvanceY
.202c	c9 ca		cmp #$ca			cmp 	#PCD_STARTSYSTEM 			; 70 - System tokens.
.202e	90 1a		bcc $204a			bcc 	_MOFAdvance1 				; forward 1
.2030	a8		tay				tay 								; read the size.
.2031	b9 96 1f	lda $1f96,y			lda 	MOFSizeTable-PCD_STARTSYSTEM,y
.2034	a8		tay				tay
.2035	c8		iny				iny 								; add 1 for the system token.
.2036	d0 14		bne $204c			bne 	_MOFAdvanceY 				; if 0, was $FF thus a string/data skip.
.2038	a0 01		ldy #$01			ldy 	#1 							; get length byte
.203a	b1 2a		lda ($2a),y			lda 	(objPtr),y
.203c	a8		tay				tay 								; into Y.
.203d	18		clc				clc
.203e	a5 2a		lda $2a				lda 	objPtr						; add 2 to the object pointer
.2040	69 02		adc #$02			adc 	#2
.2042	85 2a		sta $2a				sta 	objPtr
.2044	90 02		bcc $2048			bcc 	_MOFNoCarry1
.2046	e6 2b		inc $2b				inc 	objPtr+1
.2048					_MOFNoCarry1:
.2048	80 02		bra $204c			bra 	_MOFAdvanceY
.204a					_MOFAdvance1:
.204a	a0 01		ldy #$01			ldy 	#1
.204c					_MOFAdvanceY:
.204c	98		tya				tya 								; add Y to objPtr
.204d	18		clc				clc
.204e	65 2a		adc $2a				adc 	objPtr
.2050	85 2a		sta $2a				sta 	objPtr
.2052	90 02		bcc $2056			bcc 	_MOFNoCarry2
.2054	e6 2b		inc $2b				inc 	objPtr+1
.2056					_MOFNoCarry2:
.2056	18		clc				clc 								; not completed.
.2057	60		rts				rts
.2058					_MOFEnd:
.2058	e6 2a		inc $2a				inc 	objPtr
.205a	d0 02		bne $205e			bne 	_MOFENoCarry
.205c	e6 2b		inc $2b				inc 	objPtr+1
.205e					_MOFENoCarry:
.205e	38		sec				sec
.205f	60		rts				rts
.2060					MOFSizeTable:
>2060	01					.byte	1         	; $ca .shift
>2061	01					.byte	1         	; $cb .byte
>2062	02					.byte	2         	; $cc .word
>2063	05					.byte	5         	; $cd .float
>2064	ff					.byte	255       	; $ce .string
>2065	ff					.byte	255       	; $cf .data
>2066	02					.byte	2         	; $d0 .goto
>2067	02					.byte	2         	; $d1 .gosub
>2068	02					.byte	2         	; $d2 .goto.z
>2069	02					.byte	2         	; $d3 .goto.nz
>206a	02					.byte	2         	; $d4 .varspace

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library

=12					MathStackSize = 12
=$40					NSSString = $40 							; string vs typemask
=$00					NSSIFloat = $00 							; ifloat vs typemask
=$20					NSSIInt16 = $20								; when set, a reference is a 16 bit reference (e.g. a%)
=$40					NSSTypeMask = $40
=$80					NSSArray = $80  							; array (in variable code)
.0032					NSStatus:
>0032							.fill 	MathStackSize
.003e					NSMantissa0:
>003e							.fill 	MathStackSize 				; (this is my integer mantissa system)
.004a					NSMantissa1:
>004a							.fill 	MathStackSize
.0056					NSMantissa2:
>0056							.fill 	MathStackSize
.0062					NSMantissa3:
>0062							.fill 	MathStackSize
.006e					NSExponent:
>006e							.fill 	MathStackSize
.0571					numberBuffer:
>0571							.fill 	34
.206b					FloatSubtract:
.206b	b5 32		lda $32,x			lda 	NSStatus,x 					; negate top of stack
.206d	49 80		eor #$80			eor 	#$80
.206f	95 32		sta $32,x			sta 	NSStatus,x					; and fall through.
.2071					FloatAdd:
.2071	ca		dex				dex
.2072	b5 6e		lda $6e,x			lda 	NSExponent,x 				; can use optimised.
.2074	15 6f		ora $6f,x			ora 	NSExponent+1,x
.2076	15 62		ora $62,x			ora 	NSMantissa3,x
.2078	15 63		ora $63,x			ora 	NSMantissa3+1,x
.207a	d0 04		bne $2080			bne 	_FAUseFloat
.207c	20 0d 24	jsr $240d			jsr 	FloatInt32Add 				; use the int32 one.
.207f	60		rts				rts
.2080					_FAUseFloat:
.2080	20 a2 23	jsr $23a2			jsr 	FloatNormalise 				; normalise S[X]
.2083	f0 51		beq $20d6			beq 	_FAReturn1
.2085	e8		inx				inx 								; normalise S[X+1]
.2086	20 a2 23	jsr $23a2			jsr 	FloatNormalise
.2089	ca		dex				dex
.208a	c9 00		cmp #$00			cmp 	#0
.208c	f0 60		beq $20ee			beq 	_FAExit 					; if so, just return A
.208e	b5 6e		lda $6e,x			lda 	NSExponent,x 				; are the exponents the same ?
.2090	d5 6f		cmp $6f,x			cmp 	NSExponent+1,x
.2092	f0 18		beq $20ac			beq 	_FAExponentsEqual
.2094	b5 6e		lda $6e,x			lda 	NSExponent,x 				; work out the larger exponent
.2096	a8		tay				tay
.2097	38		sec				sec 								; do a signed comparison of the exponents.
.2098	f5 6f		sbc $6f,x			sbc 	NSExponent+1,x
.209a	50 02		bvc $209e			bvc 	_FANoSignedChange
.209c	49 80		eor #$80			eor 	#$80
.209e					_FANoSignedChange:
.209e	29 80		and #$80			and 	#$80
.20a0	10 02		bpl $20a4			bpl 	_FAHaveMax
.20a2	b4 6f		ldy $6f,x			ldy 	NSExponent+1,x
.20a4					_FAHaveMax:
.20a4	20 ef 20	jsr $20ef			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.20a7	e8		inx				inx
.20a8	20 ef 20	jsr $20ef			jsr 	_FAShiftToExponent
.20ab	ca		dex				dex
.20ac					_FAExponentsEqual:
.20ac	b5 32		lda $32,x			lda 	NSStatus,x 					; are the signs the same
.20ae	55 33		eor $33,x			eor 	NSStatus+1,x
.20b0	30 0e		bmi $20c0			bmi 	_FADifferentSigns
.20b2	20 d9 23	jsr $23d9			jsr 	FloatAddTopTwoStack 		; do the add of the mantissae
.20b5	b5 62		lda $62,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.20b7	10 35		bpl $20ee			bpl 	_FAExit 					; if no, we are done.
.20b9	20 66 26	jsr $2666			jsr 	FloatShiftRight 				; shift A right, renormalising it.
.20bc	f6 6e		inc $6e,x			inc 	NSExponent,x 				; bump the exponent and exit
.20be	80 2e		bra $20ee			bra 	_FAExit
.20c0					_FADifferentSigns:
.20c0	20 f3 23	jsr $23f3			jsr 	FloatSubTopTwoStack 		; subtract mantissa B from A
.20c3	b5 62		lda $62,x			lda 	NSMantissa3,x 				; is the result negative ?
.20c5	10 06		bpl $20cd			bpl 	_FACheckZero 				; if no, check for -0
.20c7	20 0f 26	jsr $260f			jsr 	FloatNegate 					; netate result
.20ca	20 16 26	jsr $2616			jsr 	FloatNegateMantissa 			; negate (2'c) the mantissa
.20cd					_FACheckZero:
.20cd	20 6f 26	jsr $266f			jsr 	FloatIsZero	 				; check for -0
.20d0	d0 1c		bne $20ee			bne 	_FAExit
.20d2	74 32		stz $32,x			stz 	NSStatus,x
.20d4	80 18		bra $20ee			bra 	_FAExit
.20d6					_FAReturn1:
.20d6	b5 3f		lda $3f,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.20d8	95 3e		sta $3e,x			sta 	NSMantissa0,x
.20da	b5 4b		lda $4b,x			lda 	NSMantissa1+1,x
.20dc	95 4a		sta $4a,x			sta 	NSMantissa1,x
.20de	b5 57		lda $57,x			lda 	NSMantissa2+1,x
.20e0	95 56		sta $56,x			sta 	NSMantissa2,x
.20e2	b5 63		lda $63,x			lda 	NSMantissa3+1,x
.20e4	95 62		sta $62,x			sta 	NSMantissa3,x
.20e6	b5 6f		lda $6f,x			lda 	NSExponent+1,x
.20e8	95 6e		sta $6e,x			sta 	NSExponent,x
.20ea	b5 33		lda $33,x			lda 	NSStatus+1,x
.20ec	95 32		sta $32,x			sta 	NSStatus,x
.20ee					_FAExit:
.20ee	60		rts				rts
.20ef					_FAShiftToExponent:
.20ef					_FAShiftToExponent2:
.20ef	98		tya				tya 								; compare Y to exponent
.20f0	d5 6e		cmp $6e,x			cmp 	NSExponent,x 				; reached the exponent required ?
.20f2	f0 07		beq $20fb			beq 	_FASEExit 					; exit if so.
.20f4	20 66 26	jsr $2666			jsr 	FloatShiftRight	 			; shift the mantissa right
.20f7	f6 6e		inc $6e,x			inc 	NSExponent,x 				; increment exponent
.20f9	80 f4		bra $20ef			bra 	_FAShiftToExponent2
.20fb					_FASEExit:
.20fb	60		rts				rts
.20fc					CompareEqual:
.20fc	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.20fe	d0 09		bne $2109			bne 	ReturnFalse
.2100					ReturnTrue:
.2100	a9 01		lda #$01			lda 	#1
.2102	95 3e		sta $3e,x			sta 	NSMantissa0,x
.2104	a9 80		lda #$80			lda 	#$80
.2106	95 32		sta $32,x			sta 	NSStatus,x
.2108	60		rts				rts
.2109					ReturnFalse:
.2109	74 3e		stz $3e,x			stz 	NSMantissa0,x
.210b	60		rts				rts
.210c					CompareNotEqual:
.210c	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.210e	d0 f0		bne $2100			bne 	ReturnTrue
.2110	80 f7		bra $2109			bra 	ReturnFalse
.2112					CompareLess:
.2112	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.2114	c9 ff		cmp #$ff			cmp 	#$FF
.2116	f0 e8		beq $2100			beq 	ReturnTrue
.2118	80 ef		bra $2109			bra 	ReturnFalse
.211a					CompareGreater:
.211a	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.211c	c9 01		cmp #$01			cmp 	#$01
.211e	f0 e0		beq $2100			beq 	ReturnTrue
.2120	80 e7		bra $2109			bra 	ReturnFalse
.2122					CompareLessEqual:
.2122	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.2124	c9 01		cmp #$01			cmp 	#$01
.2126	d0 d8		bne $2100			bne 	ReturnTrue
.2128	80 df		bra $2109			bra 	ReturnFalse
.212a					CompareGreaterEqual:
.212a	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.212c	c9 ff		cmp #$ff			cmp 	#$FF
.212e	d0 d0		bne $2100			bne 	ReturnTrue
.2130	80 d7		bra $2109			bra 	ReturnFalse
.2132					FloatCompare:
.2132	b5 6e		lda $6e,x			lda 	NSExponent,x 				; float comparison.
.2134	15 6d		ora $6d,x			ora 	NSExponent-1,x 				; integer if both integer.
.2136	48		pha				pha
.2137	20 6b 20	jsr $206b			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.213a	68		pla				pla
.213b	d0 0c		bne $2149			bne 	_FCCompareFloat
.213d	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.213f	15 4a		ora $4a,x			ora 	NSMantissa1,x
.2141	15 56		ora $56,x			ora 	NSMantissa2,x
.2143	15 62		ora $62,x			ora 	NSMantissa3,x
.2145	f0 14		beq $215b			beq 	_FCExit 					; if zero, return zero
.2147	80 0a		bra $2153			bra 	_FCSign
.2149					_FCCompareFloat:
.2149	b5 4a		lda $4a,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.214b	29 f0		and #$f0			and 	#$F0
.214d	15 56		ora $56,x			ora 	NSMantissa2,x
.214f	15 62		ora $62,x			ora 	NSMantissa3,x
.2151	f0 08		beq $215b			beq 	_FCExit 					; zero, so approximately identical
.2153					_FCSign:
.2153	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.2155	34 32		bit $32,x			bit 	NSStatus,x
.2157	10 02		bpl $215b			bpl 	_FCExit
.2159					_FCNegative:
.2159	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.215b					_FCExit:
.215b	20 4f 26	jsr $264f			jsr 	FloatSetByte 				; set the result 255,0,1
.215e	60		rts				rts
.215f					FloatScalarTable:
>215f	66 66 66 66				.dword $66666666 ; 0.1
>2163	de					.byte $de
>2164	1f 85 eb 51				.dword $51eb851f ; 0.01
>2168	db					.byte $db
>2169	4c 37 89 41				.dword $4189374c ; 0.001
>216d	d8					.byte $d8
>216e	ac 8b db 68				.dword $68db8bac ; 0.0001
>2172	d4					.byte $d4
>2173	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>2177	d1					.byte $d1
>2178	83 de 1b 43				.dword $431bde83 ; 1e-06
>217c	ce					.byte $ce
>217d	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>2181	ca					.byte $ca
>2182	89 3b e6 55				.dword $55e63b89 ; 1e-08
>2186	c7					.byte $c7
>2187	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>218b	c4					.byte $c4
>218c	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>2190	c0					.byte $c0
>2191	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>2195	bd					.byte $bd
.2196					FloatDivide:
.2196	48		pha				pha
.2197	20 a2 23	jsr $23a2			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.219a	ca		dex				dex
.219b	c9 00		cmp #$00			cmp 	#0
.219d	f0 1e		beq $21bd			beq 	_FDZero
.219f	20 a2 23	jsr $23a2			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.21a2	f0 16		beq $21ba			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.21a4	20 05 22	jsr $2205			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.21a7	20 d2 21	jsr $21d2			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.21aa	20 a2 23	jsr $23a2			jsr		FloatNormalise 				; renormalise
.21ad	20 98 23	jsr $2398			jsr 	FloatCalculateSign 			; calculate result sign
.21b0	b5 6e		lda $6e,x			lda 	NSExponent,x 				; calculate exponent
.21b2	38		sec				sec
.21b3	f5 6f		sbc $6f,x			sbc 	NSExponent+1,x
.21b5	38		sec				sec
.21b6	e9 1e		sbc #$1e			sbc 	#30
.21b8	95 6e		sta $6e,x			sta 	NSExponent,x
.21ba					_FDExit:
.21ba	68		pla				pla
.21bb	18		clc				clc
.21bc	60		rts				rts
.21bd					_FDZero:
.21bd	68		pla				pla
.21be	38		sec				sec
.21bf	60		rts				rts
.21c0					DivideInt32:
.21c0	20 88 22	jsr $2288			jsr 	FloatIntegerPart 			; make both integers
.21c3	ca		dex				dex
.21c4	20 88 22	jsr $2288			jsr 	FloatIntegerPart
.21c7	20 e3 21	jsr $21e3			jsr 	Int32Divide 				; divide
.21ca	20 d2 21	jsr $21d2			jsr 	NSMCopyPlusTwoToZero 		; copy result
.21cd	20 98 23	jsr $2398			jsr 	FloatCalculateSign 			; calculate result sign
.21d0	18		clc				clc
.21d1	60		rts				rts
.21d2					NSMCopyPlusTwoToZero:
.21d2	b5 40		lda $40,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.21d4	95 3e		sta $3e,x			sta 	NSMantissa0,x
.21d6	b5 4c		lda $4c,x			lda 	NSMantissa1+2,x
.21d8	95 4a		sta $4a,x			sta 	NSMantissa1,x
.21da	b5 58		lda $58,x			lda 	NSMantissa2+2,x
.21dc	95 56		sta $56,x			sta 	NSMantissa2,x
.21de	b5 64		lda $64,x			lda 	NSMantissa3+2,x
.21e0	95 62		sta $62,x			sta 	NSMantissa3,x
.21e2	60		rts				rts
.21e3					Int32Divide:
.21e3	48		pha				pha 								; save AXY
.21e4	5a		phy				phy
.21e5	20 30 26	jsr $2630			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.21e8	20 49 26	jsr $2649			jsr 	FloatSetZeroMantissaOnly 	; set S[X] to zero
.21eb	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.21ed					_I32DivideLoop:
.21ed	e8		inx				inx
.21ee	e8		inx				inx
.21ef	20 5c 26	jsr $265c			jsr 	FloatShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.21f2	ca		dex				dex
.21f3	ca		dex				dex
.21f4	20 5d 26	jsr $265d			jsr 	FloatRotateLeft
.21f7	20 23 22	jsr $2223			jsr 	FloatDivideCheck 			; check if subtract possible
.21fa	90 02		bcc $21fe			bcc 	_I32DivideNoCarryIn
.21fc	f6 40		inc $40,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.21fe					_I32DivideNoCarryIn:
.21fe	88		dey				dey 								; loop round till division completed.
.21ff	d0 ec		bne $21ed			bne 	_I32DivideLoop
.2201	7a		ply				ply 								; restore AXY and exit
.2202	68		pla				pla
.2203	18		clc				clc
.2204	60		rts				rts
.2205					Int32ShiftDivide:
.2205	48		pha				pha 								; save AY
.2206	5a		phy				phy
.2207	e8		inx				inx 								; clear S[X+2]
.2208	e8		inx				inx
.2209	20 4d 26	jsr $264d			jsr 	FloatSetZero
.220c	ca		dex				dex
.220d	ca		dex				dex
.220e	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.2210					_I32SDLoop:
.2210	20 23 22	jsr $2223			jsr 	FloatDivideCheck 			; check if subtract possible
.2213	e8		inx				inx
.2214	e8		inx				inx
.2215	20 5d 26	jsr $265d			jsr 	FloatRotateLeft				; shift 64 bit FPA left, rotating carry in
.2218	ca		dex				dex
.2219	ca		dex				dex
.221a	20 5d 26	jsr $265d			jsr 	FloatRotateLeft
.221d	88		dey				dey 	 							; do 31 times
.221e	d0 f0		bne $2210			bne 	_I32SDLoop
.2220	7a		ply				ply 								; restore AY and exit
.2221	68		pla				pla
.2222	60		rts				rts
.2223					FloatDivideCheck:
.2223	20 f3 23	jsr $23f3			jsr 	FloatSubTopTwoStack 		; subtract Stack[X+1] from Stack[X+0]
.2226	b0 04		bcs $222c			bcs 	_DCSExit 					; if carry set, then could do, exit
.2228	20 d9 23	jsr $23d9			jsr 	FloatAddTopTwoStack 		; add it back in
.222b	18		clc				clc 								; and return False
.222c					_DCSExit:
.222c	60		rts				rts
.222d					FloatFractionalPart:
.222d	5a		phy				phy
.222e	b5 32		lda $32,x			lda 	NSStatus,x 					; take absolute value
.2230	29 7f		and #$7f			and 	#$7F
.2232	95 32		sta $32,x			sta 	NSStatus,x
.2234	20 a2 23	jsr $23a2			jsr 	FloatNormalise
.2237	b5 6e		lda $6e,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.2239	38		sec				sec
.223a	e9 e0		sbc #$e0			sbc 	#$E0
.223c	90 29		bcc $2267			bcc 	_FFPExit 					; already fractional
.223e	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.2240	b0 22		bcs $2264			bcs 	_FFPZero
.2242	a8		tay				tay 								; put count to do in Y
.2243	b5 62		lda $62,x			lda 	NSMantissa3,x 				; do each in turn.
.2245	20 6c 22	jsr $226c			jsr 	_FFPPartial
.2248	95 62		sta $62,x			sta 	NSMantissa3,x
.224a	b5 56		lda $56,x			lda 	NSMantissa2,x
.224c	20 6c 22	jsr $226c			jsr 	_FFPPartial
.224f	95 56		sta $56,x			sta 	NSMantissa2,x
.2251	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.2253	20 6c 22	jsr $226c			jsr 	_FFPPartial
.2256	95 4a		sta $4a,x			sta 	NSMantissa1,x
.2258	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.225a	20 6c 22	jsr $226c			jsr 	_FFPPartial
.225d	95 3e		sta $3e,x			sta 	NSMantissa0,x
.225f	20 6f 26	jsr $266f			jsr 	FloatIsZero 					; zeroed check.
.2262	d0 03		bne $2267			bne 	_FFPExit
.2264					_FFPZero:
.2264	20 4d 26	jsr $264d			jsr 	FloatSetZero
.2267					_FFPExit:
.2267	20 a2 23	jsr $23a2			jsr 	FloatNormalise
.226a	7a		ply				ply
.226b	60		rts				rts
.226c					_FFPPartial:
.226c	c0 00		cpy #$00			cpy 	#0 							; no more to do
.226e	f0 17		beq $2287			beq 	_FFFPPExit
.2270	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.2272	b0 0c		bcs $2280			bcs 	_FFFPPWholeByte
.2274	5a		phy				phy
.2275					_FFFPPLeft:
.2275	0a		asl a				asl 	a
.2276	88		dey				dey
.2277	d0 fc		bne $2275			bne 	_FFFPPLeft
.2279	7a		ply				ply
.227a					_FFFPPRight:
.227a	4a		lsr a				lsr 	a
.227b	88		dey				dey
.227c	d0 fc		bne $227a			bne 	_FFFPPRight
.227e	80 07		bra $2287			bra 	_FFFPPExit
.2280					_FFFPPWholeByte:
.2280	98		tya				tya 								; subtract 8 from count
.2281	38		sec				sec
.2282	e9 08		sbc #$08			sbc 	#8
.2284	a8		tay				tay
.2285	a9 00		lda #$00			lda 	#0 							; and clear all
.2287					_FFFPPExit:
.2287	60		rts				rts
.2288					FloatIntegerPart:
.2288	48		pha				pha
.2289	b5 6e		lda $6e,x			lda 	NSExponent,x 				; is it integer already ?
.228b	f0 1d		beq $22aa			beq 	_FIPExit 					; if so do nothing
.228d	20 6f 26	jsr $266f			jsr 	FloatIsZero 				; is it zero ?
.2290	f0 15		beq $22a7			beq 	_FIPZero 					; if so return zero.
.2292	20 a2 23	jsr $23a2			jsr 	FloatNormalise 				; normalise
.2295	f0 10		beq $22a7			beq 	_FIPZero 					; normalised to zero, exit zero
.2297					_FIPShift:
.2297	b5 6e		lda $6e,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.2299	10 07		bpl $22a2			bpl 	_FIPCheckZero
.229b	20 66 26	jsr $2666			jsr 	FloatShiftRight 			; shift mantissa right
.229e	f6 6e		inc $6e,x			inc 	NSExponent,x 				; bump exponent
.22a0	80 f5		bra $2297			bra 	_FIPShift
.22a2					_FIPCheckZero:
.22a2	20 6f 26	jsr $266f			jsr 	FloatIsZero 				; avoid -0 problem
.22a5	d0 03		bne $22aa			bne 	_FIPExit 					; set to zero if mantissa zero.
.22a7					_FIPZero:
.22a7	20 4d 26	jsr $264d			jsr 	FloatSetZero
.22aa					_FIPExit:
.22aa	68		pla				pla
.22ab	60		rts				rts
.22ac					FloatIntegerPartDown:
.22ac	48		pha				pha
.22ad	5a		phy				phy
.22ae	b5 6e		lda $6e,x			lda 	NSExponent,x 				; is it integer already ?
.22b0	f0 36		beq $22e8			beq 	_FIPExit 					; if so do nothing
.22b2	20 6f 26	jsr $266f			jsr 	FloatIsZero 				; is it zero ?
.22b5	f0 2e		beq $22e5			beq 	_FIPZero 					; if so return zero.
.22b7	20 a2 23	jsr $23a2			jsr 	FloatNormalise 				; normalise
.22ba	f0 29		beq $22e5			beq 	_FIPZero 					; normalised to zero, exit zero
.22bc	a0 00		ldy #$00			ldy 	#0 							; reset the count of bits.
.22be					_FIPShift:
.22be	b5 6e		lda $6e,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.22c0	10 0a		bpl $22cc			bpl 	_FIPCheckDown
.22c2	20 66 26	jsr $2666			jsr 	FloatShiftRight 			; shift mantissa right
.22c5	90 01		bcc $22c8			bcc 	_FIPNoFrac 					; shifted a zero out ?
.22c7	c8		iny				iny
.22c8					_FIPNoFrac:
.22c8	f6 6e		inc $6e,x			inc 	NSExponent,x 				; bump exponent
.22ca	80 f2		bra $22be			bra 	_FIPShift
.22cc					_FIPCheckDown:
.22cc	c0 00		cpy #$00			cpy 	#0 							; were there any fractional bits.
.22ce	f0 10		beq $22e0			beq 	_FIPCheckZero
.22d0	34 32		bit $32,x			bit 	NSStatus,x 					; +ve
.22d2	10 0c		bpl $22e0			bpl 	_FIPCheckZero
.22d4	e8		inx				inx 								; -ve so round *down*.
.22d5	a9 01		lda #$01			lda 	#1
.22d7	20 4f 26	jsr $264f			jsr 	FloatSetByte
.22da	20 0f 26	jsr $260f			jsr 	FloatNegate
.22dd	20 71 20	jsr $2071			jsr 	FloatAdd
.22e0					_FIPCheckZero:
.22e0	20 6f 26	jsr $266f			jsr 	FloatIsZero 				; avoid -0 problem
.22e3	d0 03		bne $22e8			bne 	_FIPExit 					; set to zero if mantissa zero.
.22e5					_FIPZero:
.22e5	20 4d 26	jsr $264d			jsr 	FloatSetZero
.22e8					_FIPExit:
.22e8	7a		ply				ply
.22e9	68		pla				pla
.22ea	60		rts				rts
.22eb					FloatInt8Multiply:
.22eb	5a		phy				phy
.22ec	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; right shifted multiplier in Y
.22ee	a8		tay				tay
.22ef	74 3e		stz $3e,x			stz 	NSMantissa0,x 				; zero the result (already 8 bit constant)
.22f1					_FI8MLoop:
.22f1	98		tya				tya 								; shift right shifter right into carry
.22f2	4a		lsr a				lsr 	a
.22f3	a8		tay				tay
.22f4	90 0d		bcc $2303			bcc 	_FI8MNoAdd
.22f6	18		clc				clc
.22f7	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.22f9	75 3f		adc $3f,x			adc 	NSMantissa0+1,x
.22fb	95 3e		sta $3e,x			sta 	NSMantissa0,x
.22fd	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.22ff	75 4b		adc $4b,x			adc 	NSMantissa1+1,x
.2301	95 4a		sta $4a,x			sta 	NSMantissa1,x
.2303					_FI8MNoAdd:
.2303	16 3f		asl $3f,x			asl 	NSMantissa0+1,x 			; shift adder left
.2305	36 4b		rol $4b,x			rol 	NSMantissa1+1,x
.2307	c0 00		cpy #$00			cpy 	#0
.2309	d0 e6		bne $22f1			bne 	_FI8MLoop 					; until right shifter zero.
.230b	7a		ply				ply
.230c	60		rts				rts
.230d					FloatMultiply:
.230d	ca		dex				dex
.230e	b5 6e		lda $6e,x			lda 	NSExponent,x 				; can use optimised ?
.2310	15 6f		ora $6f,x			ora 	NSExponent+1,x
.2312	15 62		ora $62,x			ora 	NSMantissa3,x
.2314	15 63		ora $63,x			ora 	NSMantissa3+1,x
.2316	d0 21		bne $2339			bne 	_FMUseFloat
.2318	b5 32		lda $32,x			lda 	NSStatus,x 					; check if it is 8 bit unsigned
.231a	15 33		ora $33,x			ora 	NSStatus+1,x
.231c	29 80		and #$80			and 	#$80
.231e	15 62		ora $62,x			ora 	NSMantissa3,x
.2320	15 56		ora $56,x			ora 	NSMantissa2,x
.2322	15 4a		ora $4a,x			ora 	NSMantissa1,x
.2324	15 63		ora $63,x			ora 	NSMantissa3+1,x
.2326	15 57		ora $57,x			ora 	NSMantissa2+1,x
.2328	15 4b		ora $4b,x			ora 	NSMantissa1+1,x
.232a	d0 04		bne $2330			bne 	_FMInt32
.232c	20 eb 22	jsr $22eb			jsr 	FloatInt8Multiply 			; use fast 8x8 multiply.
.232f	60		rts				rts
.2330					_FMInt32:
.2330	20 5a 23	jsr $235a			jsr 	FloatMultiplyShort			; use the int32 one.
.2333	18		clc				clc 								; fix it up if gone out of range
.2334	75 6e		adc $6e,x			adc 	NSExponent,x
.2336	95 6e		sta $6e,x			sta 	NSExponent,x
.2338	60		rts				rts
.2339					_FMUseFloat:
.2339	20 a2 23	jsr $23a2			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.233c	f0 18		beq $2356			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.233e	e8		inx				inx
.233f	20 a2 23	jsr $23a2			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.2342	ca		dex				dex
.2343	c9 00		cmp #$00			cmp 	#0
.2345	f0 0c		beq $2353			beq 	_FDSetZero
.2347	20 5a 23	jsr $235a			jsr 	FloatMultiplyShort 			; calculate the result.
.234a	75 6e		adc $6e,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.234c	18		clc				clc
.234d	75 6f		adc $6f,x			adc 	NSExponent+1,x
.234f	95 6e		sta $6e,x			sta 	NSExponent,x
.2351	80 03		bra $2356			bra 	_FDExit
.2353					_FDSetZero:
.2353	20 4d 26	jsr $264d			jsr 	FloatSetZero 				; return 0
.2356					_FDExit:
.2356	20 a2 23	jsr $23a2			jsr 	FloatNormalise 				; normalise the result
.2359	60		rts				rts
.235a					FloatMultiplyShort:
.235a	5a		phy				phy 								; save Y
.235b	20 30 26	jsr $2630			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.235e	20 49 26	jsr $2649			jsr 	FloatSetZeroMantissaOnly 	; set mantissa S[X] to zero
.2361	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.2363					_I32MLoop:
.2363	b5 40		lda $40,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.2365	15 4c		ora $4c,x			ora 	NSMantissa1+2,x
.2367	15 58		ora $58,x			ora 	NSMantissa2+2,x
.2369	15 64		ora $64,x			ora 	NSMantissa3+2,x
.236b	f0 25		beq $2392			beq 	_I32MExit 					; exit if zero
.236d	b5 40		lda $40,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.236f	29 01		and #$01			and 	#1
.2371	f0 0d		beq $2380			beq 	_I32MNoAdd
.2373	20 d9 23	jsr $23d9			jsr 	FloatAddTopTwoStack 		; if so add S[X+1] to S[X+0]
.2376	b5 62		lda $62,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.2378	10 06		bpl $2380			bpl 	_I32MNoAdd
.237a					_I32ShiftRight:
.237a	20 66 26	jsr $2666			jsr 	FloatShiftRight 			; shift S[X] right
.237d	c8		iny				iny 								; increment shift count
.237e	80 09		bra $2389			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.2380					_I32MNoAdd:
.2380	34 63		bit $63,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.2382	70 f6		bvs $237a			bvs 	_I32ShiftRight 				; instead.
.2384	e8		inx				inx
.2385	20 5c 26	jsr $265c			jsr 	FloatShiftLeft 				; shift additive S[X+1] left
.2388	ca		dex				dex
.2389					_I32MShiftUpper:
.2389	e8		inx				inx 								; shift S[X+2] right
.238a	e8		inx				inx
.238b	20 66 26	jsr $2666			jsr 	FloatShiftRight
.238e	ca		dex				dex
.238f	ca		dex				dex
.2390	80 d1		bra $2363			bra 	_I32MLoop 					; try again.
.2392					_I32MExit:
.2392	20 98 23	jsr $2398			jsr 	FloatCalculateSign
.2395	98		tya				tya 								; shift in A
.2396	7a		ply				ply 								; restore Y and exit
.2397	60		rts				rts
.2398					FloatCalculateSign:
.2398	b5 32		lda $32,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.239a	16 32		asl $32,x			asl 	NSStatus,x 					; shift result left
.239c	55 33		eor $33,x			eor 	NSStatus+1,x
.239e	0a		asl a				asl 	a 							; shift bit 7 into carry
.239f	76 32		ror $32,x			ror 	NSStatus,x 					; shift right into status byte.
.23a1	60		rts				rts
.23a2					FloatNormalise:
.23a2	20 6f 26	jsr $266f			jsr 	FloatIsZero 				; if zero exit
.23a5	d0 07		bne $23ae			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.23a7	16 32		asl $32,x			asl 	NSStatus,x 					; clear the sign bit.
.23a9	76 32		ror $32,x			ror 	NSStatus,x 					; (no -0)
.23ab	a9 00		lda #$00			lda 	#0 							; set Z flag
.23ad	60		rts				rts
.23ae					_NSNormaliseOptimise:
.23ae	b5 62		lda $62,x			lda 	NSMantissa3,x 				; upper byte zero ?
.23b0	d0 19		bne $23cb			bne 	_NSNormaliseLoop
.23b2	b5 56		lda $56,x			lda 	NSMantissa2,x 				; byte normalise
.23b4	30 15		bmi $23cb			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.23b6	95 62		sta $62,x			sta 	NSMantissa3,x
.23b8	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.23ba	95 56		sta $56,x			sta 	NSMantissa2,x
.23bc	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.23be	95 4a		sta $4a,x			sta 	NSMantissa1,x
.23c0	74 3e		stz $3e,x			stz 	NSMantissa0,x
.23c2	b5 6e		lda $6e,x			lda 	NSExponent,x
.23c4	38		sec				sec
.23c5	e9 08		sbc #$08			sbc 	#8
.23c7	95 6e		sta $6e,x			sta 	NSExponent,x
.23c9	80 e3		bra $23ae			bra 	_NSNormaliseOptimise
.23cb					_NSNormaliseLoop:
.23cb	34 62		bit $62,x			bit 	NSMantissa3,x 				; bit 30 set ?
.23cd	70 07		bvs $23d6			bvs 	_NSNExit 					; exit if so with Z flag clear
.23cf	20 5c 26	jsr $265c			jsr 	FloatShiftLeft 				; shift mantissa left
.23d2	d6 6e		dec $6e,x			dec 	NSExponent,x 				; adjust exponent
.23d4	80 f5		bra $23cb			bra 	_NSNormaliseLoop
.23d6					_NSNExit:
.23d6	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.23d8	60		rts				rts
.23d9					FloatAddTopTwoStack:
.23d9	18		clc				clc
.23da	b5 3e		lda $3e,x			lda		NSMantissa0,x
.23dc	75 3f		adc $3f,x			adc 		NSMantissa0+1,x
.23de	95 3e		sta $3e,x			sta 	NSMantissa0,x
.23e0	b5 4a		lda $4a,x			lda		NSMantissa1,x
.23e2	75 4b		adc $4b,x			adc 		NSMantissa1+1,x
.23e4	95 4a		sta $4a,x			sta 	NSMantissa1,x
.23e6	b5 56		lda $56,x			lda		NSMantissa2,x
.23e8	75 57		adc $57,x			adc 		NSMantissa2+1,x
.23ea	95 56		sta $56,x			sta 	NSMantissa2,x
.23ec	b5 62		lda $62,x			lda		NSMantissa3,x
.23ee	75 63		adc $63,x			adc 		NSMantissa3+1,x
.23f0	95 62		sta $62,x			sta 	NSMantissa3,x
.23f2	60		rts				rts
.23f3					FloatSubTopTwoStack:
.23f3	38		sec				sec
.23f4	b5 3e		lda $3e,x			lda		NSMantissa0,x
.23f6	f5 3f		sbc $3f,x			sbc 		NSMantissa0+1,x
.23f8	95 3e		sta $3e,x			sta 	NSMantissa0,x
.23fa	b5 4a		lda $4a,x			lda		NSMantissa1,x
.23fc	f5 4b		sbc $4b,x			sbc 		NSMantissa1+1,x
.23fe	95 4a		sta $4a,x			sta 	NSMantissa1,x
.2400	b5 56		lda $56,x			lda		NSMantissa2,x
.2402	f5 57		sbc $57,x			sbc 		NSMantissa2+1,x
.2404	95 56		sta $56,x			sta 	NSMantissa2,x
.2406	b5 62		lda $62,x			lda		NSMantissa3,x
.2408	f5 63		sbc $63,x			sbc 		NSMantissa3+1,x
.240a	95 62		sta $62,x			sta 	NSMantissa3,x
.240c	60		rts				rts
.240d					FloatInt32Add:
.240d	b5 32		lda $32,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.240f	55 33		eor $33,x			eor 	NSStatus+1,x
.2411	30 04		bmi $2417			bmi 	_DiffSigns
.2413	20 d9 23	jsr $23d9			jsr		FloatAddTopTwoStack
.2416	60		rts				rts
.2417					_DiffSigns:
.2417	20 f3 23	jsr $23f3			jsr 	FloatSubTopTwoStack 		; do a physical subtraction
.241a	34 62		bit $62,x			bit 	NSMantissa3,x 				; result is +ve, okay
.241c	10 07		bpl $2425			bpl 	_AddExit
.241e	b5 33		lda $33,x			lda 	NSStatus+1,x 				; sign is that of 11th value
.2420	95 32		sta $32,x			sta 	NSStatus,x
.2422	20 16 26	jsr $2616			jsr 	FloatNegateMantissa 		; negate the mantissa and exit
.2425					_AddExit:
.2425	20 6f 26	jsr $266f			jsr 	FloatIsZero 				; check for -0
.2428	d0 02		bne $242c			bne 	_AddNonZero
.242a	74 32		stz $32,x			stz 	NSStatus,x
.242c					_AddNonZero:
.242c	60		rts				rts
=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.242d					FloatEncodeStart:
.242d	38		sec				sec
.242e	80 01		bra $2431			bra 	FloatEncodeContinue+1
.2430					FloatEncodeContinue:
.2430	18		clc				clc
.2431					FloatEncode:
.2431	08		php				php 								; save reset flag.
.2432	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.2434	f0 15		beq $244b			beq 	_ENIsOkay
.2436	c9 30		cmp #$30			cmp 	#"0"
.2438	90 04		bcc $243e			bcc 	_ENBadNumber
.243a	c9 3a		cmp #$3a			cmp 	#"9"+1
.243c	90 0d		bcc $244b			bcc 	_ENIsOkay
.243e					_ENBadNumber:
.243e	28		plp				plp 								; throw saved reset
.243f	ad 93 05	lda $0593			lda 	encodeState 				; if in decimal mode, construct final number
.2442	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.2444	d0 03		bne $2449			bne 	_ENFail
.2446	4c c3 24	jmp $24c3			jmp 	_ENConstructFinal
.2449					_ENFail:
.2449	18		clc				clc 								; not allowed
.244a	60		rts				rts
.244b					_ENIsOkay:
.244b	28		plp				plp 								; are we restarting
.244c	90 15		bcc $2463			bcc 	_ENNoRestart
.244e					_ENStartEncode:
.244e	c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.2450	f0 0c		beq $245e			beq 	_ENFirstDP
.2452	29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.2454	20 4f 26	jsr $264f			jsr 	FloatSetByte 				; in single byte mode.
.2457	a9 01		lda #$01			lda 	#ESTA_Low
.2459					_ENExitChange:
.2459	8d 93 05	sta $0593			sta 	encodeState 				; save new state
.245c	38		sec				sec
.245d	60		rts				rts
.245e					_ENFirstDP:
.245e	20 4d 26	jsr $264d			jsr 	FloatSetZero 				; clear integer part
.2461	80 3c		bra $249f			bra 	_ESTASwitchFloat			; go straight to float and exi
.2463					_ENNoRestart:
.2463	48		pha				pha 								; save digit or DP on stack.
.2464	ad 93 05	lda $0593			lda 	encodeState 				; get current state
.2467	c9 01		cmp #$01			cmp 	#ESTA_Low
.2469	f0 09		beq $2474			beq  	_ESTALowState
.246b	c9 02		cmp #$02			cmp 	#ESTA_High
.246d	f0 26		beq $2495			beq 	_ESTAHighState
.246f	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.2471	f0 38		beq $24ab			beq 	_ESTADecimalState
>2473	db						.byte 	$DB 						; causes a break in the emulator
.2474					_ESTALowState:
.2474	68		pla				pla 								; get value back
.2475	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.2477	f0 26		beq $249f			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.2479	29 0f		and #$0f			and 	#15 						; make digit
.247b	8d 94 05	sta $0594			sta 	digitTemp 					; save it.
.247e	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.2480	0a		asl a				asl 	a
.2481	0a		asl a				asl 	a
.2482	75 3e		adc $3e,x			adc 	NSMantissa0,x
.2484	0a		asl a				asl 	a
.2485	6d 94 05	adc $0594			adc 	digitTemp
.2488	95 3e		sta $3e,x			sta 	NSMantissa0,x
.248a	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.248c	90 05		bcc $2493			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.248e	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.2490	8d 93 05	sta $0593			sta 	encodeState
.2493					_ESTANoSwitch:
.2493	38		sec				sec
.2494	60		rts				rts
.2495					_ESTAHighState:
.2495	68		pla				pla 								; get value back
.2496	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.2498	f0 05		beq $249f			beq 	_ESTASwitchFloat
.249a	20 f5 24	jsr $24f5			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.249d	38		sec				sec
.249e	60		rts				rts
.249f					_ESTASwitchFloat:
.249f	9c 95 05	stz $0595			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.24a2	e8		inx				inx 								; zero the decimal additive.
.24a3	20 4d 26	jsr $264d			jsr 	FloatSetZero
.24a6	ca		dex				dex
.24a7	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.24a9	80 ae		bra $2459			bra 	_ENExitChange
.24ab					_ESTADecimalState:
.24ab	68		pla				pla 								; digit.
.24ac	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 11th decimal point.
.24ae	f0 99		beq $2449			beq 	_ENFail
.24b0	e8		inx				inx 								; put digit into fractional part of X+1
.24b1	20 f5 24	jsr $24f5			jsr 	ESTAShiftDigitIntoMantissa
.24b4	ca		dex				dex
.24b5	ee 95 05	inc $0595			inc 	decimalCount 				; bump the count of decimals
.24b8	ad 95 05	lda $0595			lda 	decimalCount 				; too many decimal digits.
.24bb	c9 0b		cmp #$0b			cmp 	#11
.24bd	f0 02		beq $24c1			beq 	_ESTADSFail
.24bf	38		sec				sec
.24c0	60		rts				rts
.24c1					_ESTADSFail:
.24c1	18		clc				clc
.24c2	60		rts				rts
.24c3					_ENConstructFinal:
.24c3	ad 95 05	lda $0595			lda 	decimalCount 				; get decimal count
.24c6	f0 2b		beq $24f3			beq 	_ENCFExit 					; no decimals
.24c8	5a		phy				phy
.24c9	0a		asl a				asl 	a 							; x 4 and CLC
.24ca	0a		asl a				asl 	a
.24cb	6d 95 05	adc $0595			adc 	decimalCount
.24ce	a8		tay				tay
.24cf	b9 5a 21	lda $215a,y			lda 	FloatScalarTable-5,y 		; copy decimal scalar to X+2
.24d2	95 40		sta $40,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.24d4	b9 5b 21	lda $215b,y			lda 	FloatScalarTable-5+1,y
.24d7	95 4c		sta $4c,x			sta 	NSMantissa1+2,x
.24d9	b9 5c 21	lda $215c,y			lda 	FloatScalarTable-5+2,y
.24dc	95 58		sta $58,x			sta 	NSMantissa2+2,x
.24de	b9 5d 21	lda $215d,y			lda 	FloatScalarTable-5+3,y
.24e1	95 64		sta $64,x			sta 	NSMantissa3+2,x
.24e3	b9 5e 21	lda $215e,y			lda 	FloatScalarTable-5+4,y
.24e6	95 70		sta $70,x			sta 	NSExponent+2,x
.24e8	74 34		stz $34,x			stz 	NSStatus+2,x 				; make +ve
.24ea	e8		inx				inx 								; multiply decimal const by decimal scalar
.24eb	e8		inx				inx
.24ec	20 0d 23	jsr $230d			jsr 	FloatMultiply
.24ef	20 71 20	jsr $2071			jsr 	FloatAdd 					; add to integer part.
.24f2	7a		ply				ply
.24f3					_ENCFExit:
.24f3	18		clc				clc 								; reject the digit.
.24f4	60		rts				rts
.24f5					ESTAShiftDigitIntoMantissa:
.24f5	29 0f		and #$0f			and 	#15 						; save digit
.24f7	48		pha				pha
.24f8	b5 62		lda $62,x			lda 	NSMantissa3,x 				; push mantissa on stack
.24fa	48		pha				pha
.24fb	b5 56		lda $56,x			lda 	NSMantissa2,x
.24fd	48		pha				pha
.24fe	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.2500	48		pha				pha
.2501	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.2503	48		pha				pha
.2504	20 5c 26	jsr $265c			jsr 	FloatShiftLeft 				; x 2
.2507	20 5c 26	jsr $265c			jsr 	FloatShiftLeft 				; x 4
.250a	18		clc				clc 								; pop mantissa and add
.250b	68		pla				pla
.250c	75 3e		adc $3e,x			adc 	NSMantissa0,x
.250e	95 3e		sta $3e,x			sta 	NSMantissa0,x
.2510	68		pla				pla
.2511	75 4a		adc $4a,x			adc 	NSMantissa1,x
.2513	95 4a		sta $4a,x			sta 	NSMantissa1,x
.2515	68		pla				pla
.2516	75 56		adc $56,x			adc 	NSMantissa2,x
.2518	95 56		sta $56,x			sta 	NSMantissa2,x
.251a	68		pla				pla
.251b	75 62		adc $62,x			adc 	NSMantissa3,x
.251d	95 62		sta $62,x			sta 	NSMantissa3,x 				; x 5
.251f	20 5c 26	jsr $265c			jsr 	FloatShiftLeft 				; x 10
.2522	68		pla				pla 								; add digit
.2523	18		clc				clc
.2524	75 3e		adc $3e,x			adc 	NSMantissa0,x
.2526	95 3e		sta $3e,x			sta 	NSMantissa0,x
.2528	90 0a		bcc $2534			bcc 	_ESTASDExit
.252a	f6 4a		inc $4a,x			inc 	NSMantissa1,x
.252c	d0 06		bne $2534			bne 	_ESTASDExit
.252e	f6 56		inc $56,x			inc 	NSMantissa2,x
.2530	d0 02		bne $2534			bne 	_ESTASDExit
.2532	f6 62		inc $62,x			inc 	NSMantissa3,x
.2534					_ESTASDExit:
.2534	60		rts				rts
.0593					encodeState:
>0593							.fill 	1
.0594					digitTemp:
>0594							.fill 	1
.0595					decimalCount:
>0595							.fill 	1
.2535					FloatToString:
.2535	da		phx				phx
.2536	5a		phy				phy 								; save code position
.2537	8d 96 05	sta $0596			sta 	decimalPlaces	 			; save number of DPs.
.253a	9c 97 05	stz $0597			stz 	dbOffset 					; offset into decimal buffer = start.
.253d	b5 32		lda $32,x			lda 	NSStatus,x  				; is it -ve.
.253f	10 08		bpl $2549			bpl 	_CNTSNotNegative
.2541	29 7f		and #$7f			and 	#$7F 						; make +ve
.2543	95 32		sta $32,x			sta 	NSStatus,x
.2545	a9 2d		lda #$2d			lda 	#"-"
.2547	80 02		bra $254b			bra 	_CNTMain
.2549					_CNTSNotNegative:
.2549	a9 20		lda #$20			lda 	#" "
.254b					_CNTMain:
.254b	20 ad 25	jsr $25ad			jsr 	WriteDecimalBuffer
.254e	b5 6e		lda $6e,x			lda 	NSExponent,x 				; check if decimal
.2550	f0 0d		beq $255f			beq 	_CNTSNotFloat
.2552	e8		inx				inx 								; round up so we don't get too many 6.999999
.2553	a9 01		lda #$01			lda 	#1
.2555	20 4f 26	jsr $264f			jsr 	FloatSetByte
.2558	b5 6d		lda $6d,x			lda		NSExponent-1,x
.255a	95 6e		sta $6e,x			sta 	NSExponent,x
.255c	20 71 20	jsr $2071			jsr 	FloatAdd
.255f					_CNTSNotFloat:
.255f	20 8f 25	jsr $258f			jsr 	MakePlusTwoString 			; do the integer part.
.2562	20 2d 22	jsr $222d			jsr 	FloatFractionalPart 		; get the fractional part
.2565	20 a2 23	jsr $23a2			jsr 	FloatNormalise					; normalise , exit if zero
.2568	f0 22		beq $258c			beq 	_CNTSExit
.256a	a9 2e		lda #$2e			lda 	#"."
.256c	20 ad 25	jsr $25ad			jsr 	WriteDecimalBuffer 			; write decimal place
.256f					_CNTSDecimal:
.256f	ce 96 05	dec $0596			dec 	decimalPlaces 				; done all the decimals
.2572	30 18		bmi $258c			bmi 	_CNTSExit
.2574	e8		inx				inx 								; x 10.0
.2575	a9 0a		lda #$0a			lda 	#10
.2577	20 4f 26	jsr $264f			jsr 	FloatSetByte
.257a	20 0d 23	jsr $230d			jsr 	FloatMultiply
.257d	20 8f 25	jsr $258f			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.2580	20 2d 22	jsr $222d			jsr 	FloatFractionalPart 		; get the fractional part
.2583	20 a2 23	jsr $23a2			jsr 	FloatNormalise 				; normalise it.
.2586	b5 6e		lda $6e,x			lda 	NSExponent,x 				; gone to zero, exit.
.2588	c9 d0		cmp #$d0			cmp 	#$D0 						; very small remainder, so don't bother.
.258a	b0 e3		bcs $256f			bcs 	_CNTSDecimal 				; keep going.
.258c					_CNTSExit:
.258c	7a		ply				ply
.258d	fa		plx				plx
.258e	60		rts				rts
.258f					MakePlusTwoString:
.258f	da		phx				phx
.2590	20 30 26	jsr $2630			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.2593	e8		inx				inx 								; access it
.2594	e8		inx				inx
.2595	20 88 22	jsr $2288			jsr 	FloatIntegerPart 			; make it an integer
.2598	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.259a	20 cc 25	jsr $25cc			jsr 	ConvertInt32
.259d	a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.259f					_MPTSCopy:
.259f	bd 71 05	lda $0571,x			lda 	numberBuffer,x
.25a2	20 ad 25	jsr $25ad			jsr 	WriteDecimalBuffer
.25a5	e8		inx				inx
.25a6	bd 71 05	lda $0571,x			lda 	numberBuffer,x
.25a9	d0 f4		bne $259f			bne 	_MPTSCopy
.25ab	fa		plx				plx
.25ac	60		rts				rts
.25ad					WriteDecimalBuffer:
.25ad	da		phx				phx
.25ae	ae 97 05	ldx $0597			ldx 	dbOffset
.25b1	9d 98 05	sta $0598,x			sta 	decimalBuffer,x
.25b4	9e 99 05	stz $0599,x			stz 	decimalBuffer+1,x
.25b7	ee 97 05	inc $0597			inc 	dbOffset
.25ba	fa		plx				plx
.25bb	60		rts				rts
.0596					decimalPlaces:
>0596							.fill 	1
.0597					dbOffset:
>0597							.fill 	1
.0598					decimalBuffer:
>0598							.fill 	32
.25bc					ConvertInt16:
.25bc	85 3e		sta $3e				sta 	NSMantissa0 				; set up as 32 bit conversion
.25be	86 4a		stx $4a				stx 	NSMantissa1
.25c0	64 56		stz $56				stz 	NSMantissa2
.25c2	64 62		stz $62				stz 	NSMantissa3
.25c4	64 32		stz $32				stz 	NSStatus 					; positive integer
.25c6	a2 00		ldx #$00			ldx 	#0 							; stack level
.25c8	a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.25ca	80 00		bra $25cc			bra 	ConvertInt32
.25cc					ConvertInt32:
.25cc	5a		phy				phy
.25cd	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.25cf	24 32		bit $32				bit 	NSStatus 					; output a - if not negative.
.25d1	10 08		bpl $25db			bpl 	_CI32NotNeg
.25d3	48		pha				pha
.25d4	a9 2d		lda #$2d			lda 	#'-'
.25d6	99 71 05	sta $0571,y			sta 	numberBuffer,y
.25d9	c8		iny				iny
.25da	68		pla				pla
.25db					_CI32NotNeg:
.25db	20 e9 25	jsr $25e9			jsr 	_CI32DivideConvert 			; recursive conversion
.25de	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.25e0	99 71 05	sta $0571,y			sta 	numberBuffer,y
.25e3	7a		ply				ply
.25e4	a2 05		ldx #$05			ldx 	#numberBuffer >> 8 			; return address in XA
.25e6	a9 71		lda #$71			lda 	#numberBuffer & $FF
.25e8	60		rts				rts
.25e9					_CI32DivideConvert:
.25e9	e8		inx				inx 								; write to next slot up
.25ea	20 4f 26	jsr $264f			jsr 	FloatSetByte 		 		; write the base out.
.25ed	ca		dex				dex
.25ee	20 e3 21	jsr $21e3			jsr 	Int32Divide 				; divide
.25f1	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; save remainder
.25f3	48		pha				pha
.25f4	20 d2 21	jsr $21d2			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.25f7	20 6f 26	jsr $266f			jsr 	FloatIsZero 				; is it zero ?
.25fa	f0 05		beq $2601			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.25fc	b5 3f		lda $3f,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.25fe	20 e9 25	jsr $25e9			jsr 	_CI32DivideConvert 			; and recusrively call.
.2601					_CI32NoRecurse:
.2601	68		pla				pla 								; remainder
.2602	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.2604	90 02		bcc $2608			bcc 	_CI32NotHex
.2606	69 26		adc #$26			adc 	#6+32
.2608					_CI32NotHex:
.2608	69 30		adc #$30			adc 	#48
.260a	99 71 05	sta $0571,y			sta 	numberBuffer,y 				; write out and exit
.260d	c8		iny				iny
.260e	60		rts				rts
.260f					FloatNegate:
.260f	b5 32		lda $32,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.2611	49 80		eor #$80			eor 	#$80  						; toggle the negative flag
.2613	95 32		sta $32,x			sta 	NSStatus,x
.2615	60		rts				rts
.2616					FloatNegateMantissa:
.2616	38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.2617	a9 00		lda #$00			lda 	#0
.2619	f5 3e		sbc $3e,x			sbc 	NSMantissa0,x
.261b	95 3e		sta $3e,x			sta 	NSMantissa0,x
.261d	a9 00		lda #$00			lda 	#0
.261f	f5 4a		sbc $4a,x			sbc 	NSMantissa1,x
.2621	95 4a		sta $4a,x			sta 	NSMantissa1,x
.2623	a9 00		lda #$00			lda 	#0
.2625	f5 56		sbc $56,x			sbc 	NSMantissa2,x
.2627	95 56		sta $56,x			sta 	NSMantissa2,x
.2629	a9 00		lda #$00			lda 	#0
.262b	f5 62		sbc $62,x			sbc 	NSMantissa3,x
.262d	95 62		sta $62,x			sta 	NSMantissa3,x
.262f	60		rts				rts
.2630					FloatShiftUpTwo:
.2630	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.2632	95 40		sta $40,x			sta 	NSMantissa0+2,x
.2634	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.2636	95 4c		sta $4c,x			sta 	NSMantissa1+2,x
.2638	b5 56		lda $56,x			lda 	NSMantissa2,x
.263a	95 58		sta $58,x			sta 	NSMantissa2+2,x
.263c	b5 62		lda $62,x			lda 	NSMantissa3,x
.263e	95 64		sta $64,x			sta 	NSMantissa3+2,x
.2640	b5 6e		lda $6e,x			lda 	NSExponent,x
.2642	95 70		sta $70,x			sta 	NSExponent+2,x
.2644	b5 32		lda $32,x			lda 	NSStatus,x
.2646	95 34		sta $34,x			sta 	NSStatus+2,x
.2648	60		rts				rts
.2649					FloatSetZeroMantissaOnly:
.2649	74 3e		stz $3e,x			stz 	NSMantissa0,x
.264b	80 08		bra $2655			bra 	FloatZero13
.264d					FloatSetZero:
.264d	a9 00		lda #$00			lda 	#0
.264f					FloatSetByte:
.264f	74 6e		stz $6e,x			stz 	NSExponent,x 				; zero exponent, as +ve integer value.
.2651					FloatSetMantissa:
.2651	95 3e		sta $3e,x			sta 	NSMantissa0,x 				; zero mantissa
.2653	74 32		stz $32,x			stz 	NSStatus,x
.2655					FloatZero13:
.2655	74 4a		stz $4a,x			stz 	NSMantissa1,x
.2657	74 56		stz $56,x			stz 	NSMantissa2,x
.2659	74 62		stz $62,x			stz 	NSMantissa3,x
.265b	60		rts				rts
.265c					FloatShiftLeft:
.265c	18		clc				clc
.265d					FloatRotateLeft:
.265d	36 3e		rol $3e,x			rol 	NSMantissa0,x
.265f	36 4a		rol $4a,x			rol		NSMantissa1,x
.2661	36 56		rol $56,x			rol		NSMantissa2,x
.2663	36 62		rol $62,x			rol		NSMantissa3,x
.2665	60		rts				rts
.2666					FloatShiftRight:
.2666	56 62		lsr $62,x			lsr 	NSMantissa3,x
.2668	76 56		ror $56,x			ror		NSMantissa2,x
.266a	76 4a		ror $4a,x			ror		NSMantissa1,x
.266c	76 3e		ror $3e,x			ror		NSMantissa0,x
.266e	60		rts				rts
.266f					FloatIsZero:
.266f	b5 62		lda $62,x			lda 	NSMantissa3,x
.2671	15 56		ora $56,x			ora		NSMantissa2,x
.2673	15 4a		ora $4a,x			ora		NSMantissa1,x
.2675	15 3e		ora $3e,x			ora		NSMantissa0,x
.2677	60		rts				rts

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/polynomials.library

.2678					FloatArcTan:
.2678	20 a2 23	jsr $23a2			jsr 	FloatNormalise 					; normalise x
.267b	b5 32		lda $32,x			lda 	NSStatus,x 						; save sign, make absolute
.267d	48		pha				pha
.267e	74 32		stz $32,x			stz 	NSStatus,x
.2680	b5 6e		lda $6e,x			lda 	NSExponent,x 					; $40000000 ^ $E2 is 1.0
.2682	c9 e2		cmp #$e2			cmp 	#$E2
.2684	90 25		bcc $26ab			bcc 	_UANoFixup
.2686	8a		txa				txa 									; value in +1
.2687	a8		tay				tay
.2688	c8		iny				iny
.2689	20 31 28	jsr $2831			jsr 	CopyFloatXY
.268c	a9 01		lda #$01			lda 	#1 								; 1.0 in +0
.268e	20 4f 26	jsr $264f			jsr 	FloatSetByte
.2691	e8		inx				inx
.2692	20 96 21	jsr $2196			jsr 	FloatDivide
.2695	b0 21		bcs $26b8			bcs 	_FATError
.2697	20 bb 26	jsr $26bb			jsr 	CoreAtn 						; calculate the root
.269a	20 26 28	jsr $2826			jsr 	CompletePolynomial
.269d	20 0f 26	jsr $260f			jsr 	FloatNegate 					; make -ve
.26a0	a9 05		lda #$05			lda 	#Const_PiDiv2-Const_Base
.26a2	20 7d 28	jsr $287d			jsr 	LoadConstant
.26a5	e8		inx				inx
.26a6	20 71 20	jsr $2071			jsr 	FloatAdd
.26a9	80 06		bra $26b1			bra 	_UAComplete
.26ab					_UANoFixup:
.26ab	20 bb 26	jsr $26bb			jsr 	CoreAtn
.26ae	20 26 28	jsr $2826			jsr 	CompletePolynomial
.26b1					_UAComplete:
.26b1	68		pla				pla 									; apply the result.
.26b2	55 32		eor $32,x			eor 	NSStatus,x
.26b4	95 32		sta $32,x			sta 	NSStatus,x
.26b6	18		clc				clc
.26b7	60		rts				rts
.26b8					_FATError:
.26b8	68		pla				pla
.26b9	38		sec				sec
.26ba	60		rts				rts
.26bb					CoreAtn:
.26bb	a9 29		lda #$29			lda 	#AtnCoefficients & $FF
.26bd	a0 27		ldy #$27			ldy 	#AtnCoefficients >> 8
.26bf	4c 7a 29	jmp $297a			jmp 	CorePolySquared
.26c2					ExpCoefficients:
>26c2	07					.byte	7
>26c3	2b 1f 2c 5a				.dword	$5a2c1f2b ; 2.1498763701e-05
>26c7	d2					.byte	$d2
>26c8	8e 59 3f 4b				.dword	$4b3f598e ; 0.00014352314037
>26cc	d5					.byte	$d5
>26cd	c3 71 f7 57				.dword	$57f771c3 ; 0.0013422634825
>26d1	d8					.byte	$d8
>26d2	15 0e c2 4e				.dword	$4ec20e15 ; 0.0096140170135
>26d6	db					.byte	$db
>26d7	05 ac ac 71				.dword	$71acac05 ; 0.05550512686
>26db	dd					.byte	$dd
>26dc	e3 f3 fe 7a				.dword	$7afef3e3 ; 0.2402263846
>26e0	df					.byte	$df
>26e1	08 0c b9 58				.dword	$58b90c08 ; 0.69314718618
>26e5	e1					.byte	$e1
>26e6	00 00 00 40				.dword	$40000000 ; 1.0
>26ea	e2					.byte	$e2
.26eb					SinCoefficients:
>26eb	06					.byte	6
>26ec	8d 16 0d f3				.dword	$f30d168d ; -14.381390672
>26f0	e5					.byte	$e5
>26f1	fc fd 03 54				.dword	$5403fdfc ; 42.007797122
>26f5	e7					.byte	$e7
>26f6	81 44 b4 cc				.dword	$ccb44481 ; -76.704170257
>26fa	e8					.byte	$e8
>26fb	f1 ef 9a 51				.dword	$519aeff1 ; 81.605223686
>26ff	e8					.byte	$e8
>2700	94 f3 ae d2				.dword	$d2aef394 ; -41.341702104
>2704	e7					.byte	$e7
>2705	51 ed 87 64				.dword	$6487ed51 ; 6.2831853069
>2709	e4					.byte	$e4
>270a	00 00 00 00				.dword	$00000000 ; 0.0
>270e	00					.byte	$00
.270f					LogCoefficients:
>270f	04					.byte	4
>2710	bd 65 2b 6f				.dword	$6f2b65bd ; 0.43425594189
>2714	e0					.byte	$e0
>2715	b2 85 cd 49				.dword	$49cd85b2 ; 0.57658454124
>2719	e1					.byte	$e1
>271a	8b 49 1c 7b				.dword	$7b1c498b ; 0.96180075919
>271e	e1					.byte	$e1
>271f	90 1d 55 5c				.dword	$5c551d90 ; 2.8853900731
>2723	e3					.byte	$e3
>2724	00 00 00 c0				.dword	$c0000000 ; -0.5
>2728	e1					.byte	$e1
.2729					AtnCoefficients:
>2729	0c					.byte	12
>272a	ea de c1 d9				.dword	$d9c1deea ; -0.00068479391189
>272e	d7					.byte	$d7
>272f	7a 53 7a 4f				.dword	$4f7a537a ; 0.0048509421558
>2733	da					.byte	$da
>2734	08 58 fe c1				.dword	$c1fe5808 ; -0.016111701843
>2738	dc					.byte	$dc
>2739	e5 b3 0f 46				.dword	$460fb3e5 ; 0.034209638048
>273d	dd					.byte	$dd
>273e	e1 e5 29 ef				.dword	$ef29e5e1 ; -0.054279132761
>2742	dd					.byte	$dd
>2743	26 38 32 4a				.dword	$4a323826 ; 0.07245719654
>2747	de					.byte	$de
>2748	bd 28 f5 db				.dword	$dbf528bd ; -0.089802395378
>274c	de					.byte	$de
>274d	3f 44 98 71				.dword	$7198443f ; 0.11093241343
>2751	de					.byte	$de
>2752	9d 4c 22 c9				.dword	$c9224c9d ; -0.14283980767
>2756	df					.byte	$df
>2757	e3 48 66 66				.dword	$666648e3 ; 0.19999912049
>275b	df					.byte	$df
>275c	0a 55 55 d5				.dword	$d555550a ; -0.33333331568
>2760	e0					.byte	$e0
>2761	00 00 00 40				.dword	$40000000 ; 1.0
>2765	e2					.byte	$e2
>2766	00 00 00 00				.dword	$00000000 ; 0.0
>276a	00					.byte	$00
.276b					Const_Base:
.276b					Const_1Div2Pi:
>276b	b7 c1 7c 51				.dword	$517cc1b7 ; 0.15915494
>276f	df					.byte	$df
.2770					Const_PiDiv2:
>2770	51 ed 87 64				.dword	$6487ed51 ; 1.57079633
>2774	e2					.byte	$e2
.2775					Const_Log2_e:
>2775	95 1d 55 5c				.dword	$5c551d95 ; 1.44269504
>2779	e2					.byte	$e2
.277a					Const_sqrt_2:
>277a	9a 79 82 5a				.dword	$5a82799a ; 1.41421356
>277e	e2					.byte	$e2
.277f					Const_sqrt_half:
>277f	9a 79 82 5a				.dword	$5a82799a ; 0.70710678
>2783	e1					.byte	$e1
.2784					Const_pi:
>2784	51 ed 87 64				.dword	$6487ed51 ; 3.14159265
>2788	e3					.byte	$e3
.2789					Const_half:
>2789	00 00 00 40				.dword	$40000000 ; 0.50000000
>278d	e1					.byte	$e1
.278e					Const_ln_e:
>278e	fc 0b b9 58				.dword	$58b90bfc ; 0.69314718
>2792	e1					.byte	$e1
.2793					FloatCosine:
.2793	a9 05		lda #$05			lda 	#Const_PiDiv2-Const_Base
.2795	20 7d 28	jsr $287d			jsr 	LoadConstant
.2798	e8		inx				inx
.2799	20 71 20	jsr $2071			jsr 	FloatAdd
.279c	4c 33 29	jmp $2933			jmp 	FloatSine
.279f					FloatExponent:
.279f	a9 0a		lda #$0a			lda 	#Const_Log2_e-Const_Base
.27a1	20 7d 28	jsr $287d			jsr 	LoadConstant
.27a4	e8		inx				inx
.27a5	20 0d 23	jsr $230d			jsr 	FloatMultiply
.27a8	20 ea 27	jsr $27ea			jsr 	_UECopy01 				; copy 0 to 1, get integer part to 1
.27ab	e8		inx				inx
.27ac	20 88 22	jsr $2288			jsr 	FloatIntegerPart
.27af	ca		dex				dex
.27b0	b5 4b		lda $4b,x			lda 	NSMantissa1+1,x
.27b2	15 57		ora $57,x			ora 	NSMantissa2+1,x
.27b4	15 63		ora $63,x			ora 	NSMantissa3+1,x
.27b6	d0 38		bne $27f0			bne 	_UERangeError
.27b8	b5 3f		lda $3f,x			lda 	NSMantissa0+1,x 		; push integer part on stack.
.27ba	c9 40		cmp #$40			cmp 	#64
.27bc	b0 32		bcs $27f0			bcs 	_UERangeError
.27be	48		pha				pha
.27bf	b5 32		lda $32,x			lda 	NSStatus,x 				; push sign
.27c1	48		pha				pha
.27c2	20 2d 22	jsr $222d			jsr 	FloatFractionalPart		; copy 0 to 1, get fractional part to 0
.27c5	68		pla				pla
.27c6	10 14		bpl $27dc			bpl 	_UEPositive
.27c8	e8		inx				inx 							; 1-x
.27c9	a9 01		lda #$01			lda 	#1
.27cb	20 4f 26	jsr $264f			jsr 	FloatSetByte
.27ce	ca		dex				dex
.27cf	20 0f 26	jsr $260f			jsr 	FloatNegate
.27d2	e8		inx				inx
.27d3	20 71 20	jsr $2071			jsr 	FloatAdd
.27d6	68		pla				pla 							; integer part +1 and negated.
.27d7	1a		inc a				inc 	a
.27d8	49 ff		eor #$ff			eor 	#$FF
.27da	1a		inc a				inc 	a
.27db	48		pha				pha
.27dc					_UEPositive:
.27dc	20 f2 27	jsr $27f2			jsr 	CoreExponent
.27df	20 26 28	jsr $2826			jsr 	CompletePolynomial
.27e2	68		pla				pla
.27e3	18		clc				clc
.27e4	75 6e		adc $6e,x			adc 	NSExponent,x
.27e6	95 6e		sta $6e,x			sta 	NSExponent,x
.27e8	18		clc				clc
.27e9	60		rts				rts
.27ea					_UECopy01:
.27ea	8a		txa				txa
.27eb	a8		tay				tay
.27ec	c8		iny				iny
.27ed	4c 31 28	jmp $2831			jmp 	CopyFloatXY
.27f0					_UERangeError:
.27f0	38		sec				sec
.27f1	60		rts				rts
.27f2					CoreExponent:
.27f2	a9 c2		lda #$c2			lda 	#ExpCoefficients & $FF
.27f4	a0 26		ldy #$26			ldy 	#ExpCoefficients >> 8
.27f6	20 fa 27	jsr $27fa			jsr 	CalculateHornerPolynomial
.27f9	60		rts				rts
.27fa					CalculateHornerPolynomial:
.27fa	85 2c		sta $2c				sta 	zTemp0 						; save poly data from YA
.27fc	84 2d		sty $2d				sty 	zTemp0+1
.27fe	9c b8 05	stz $05b8			stz 	coefficientCount 			; zero the count.
.2801	8e b9 05	stx $05b9			stx 	xValueSlot 					; save xValue slot.
.2804	e8		inx				inx 								; set the count to zero.
.2805	20 4d 26	jsr $264d			jsr 	FloatSetZero
.2808					_CHPLoop:
.2808	8a		txa				txa 								; copy X-1 to X+1
.2809	a8		tay				tay
.280a	ca		dex				dex
.280b	c8		iny				iny
.280c	20 31 28	jsr $2831			jsr 	CopyFloatXY 				; e.g. stack is <current> <x>
.280f	e8		inx				inx
.2810	e8		inx				inx
.2811	20 0d 23	jsr $230d			jsr 	FloatMultiply 				; times current by X
.2814	e8		inx				inx
.2815	20 50 28	jsr $2850			jsr 	GetCoefficient 				; coefficient into X+1
.2818	20 71 20	jsr $2071			jsr 	FloatAdd 					; and add
.281b	ee b8 05	inc $05b8			inc 	coefficientCount
.281e	ad b8 05	lda $05b8			lda 	coefficientCount
.2821	d2 2c		cmp ($2c)			cmp 	(zTemp0)
.2823	d0 e3		bne $2808			bne 	_CHPLoop
.2825	60		rts				rts
.2826					CompletePolynomial:
.2826	20 0d 23	jsr $230d			jsr 	FloatMultiply
.2829	e8		inx				inx 								; get the last value
.282a	20 50 28	jsr $2850			jsr 	GetCoefficient
.282d	20 71 20	jsr $2071			jsr 	FloatAdd 					; and add it
.2830	60		rts				rts
.2831					CopyFloatXY:
.2831	b5 6e		lda $6e,x			lda 	NSExponent,x
.2833	99 6e 00	sta $006e,y			sta 	NSExponent,y
.2836	b5 32		lda $32,x			lda 	NSStatus,x
.2838	99 32 00	sta $0032,y			sta 	NSStatus,y
.283b	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.283d	99 3e 00	sta $003e,y			sta 	NSMantissa0,y
.2840	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.2842	99 4a 00	sta $004a,y			sta 	NSMantissa1,y
.2845	b5 56		lda $56,x			lda 	NSMantissa2,x
.2847	99 56 00	sta $0056,y			sta 	NSMantissa2,y
.284a	b5 62		lda $62,x			lda 	NSMantissa3,x
.284c	99 62 00	sta $0062,y			sta 	NSMantissa3,y
.284f	60		rts				rts
.2850					GetCoefficient:
.2850	5a		phy				phy
.2851	ad b8 05	lda $05b8			lda 	coefficientCount 			; 5 per block
.2854	0a		asl a				asl 	a
.2855	0a		asl a				asl 	a
.2856	38		sec				sec 								; +1 for count
.2857	6d b8 05	adc $05b8			adc 	coefficientCount
.285a	a8		tay				tay
.285b	b1 2c		lda ($2c),y			lda 	(zTemp0),y 					; copy mantissa
.285d	95 3e		sta $3e,x			sta 	NSMantissa0,x
.285f	c8		iny				iny
.2860	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.2862	95 4a		sta $4a,x			sta 	NSMantissa1,x
.2864	c8		iny				iny
.2865	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.2867	95 56		sta $56,x			sta 	NSMantissa2,x
.2869	c8		iny				iny
.286a	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.286c	48		pha				pha
.286d	29 7f		and #$7f			and 	#$7F 						; clear sign bit.
.286f	95 62		sta $62,x			sta 	NSMantissa3,x
.2871	c8		iny				iny
.2872	68		pla				pla
.2873	29 80		and #$80			and 	#$80
.2875	95 32		sta $32,x			sta 	NSStatus,x 					; put in status
.2877	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.2879	95 6e		sta $6e,x			sta 	NSExponent,x
.287b	7a		ply				ply
.287c	60		rts				rts
.05b8					coefficientCount:
>05b8							.fill 	1
.05b9					xValueSlot:
>05b9							.fill 	1
.287d					LoadConstant:
.287d	5a		phy				phy
.287e	a8		tay				tay
.287f	b9 6b 27	lda $276b,y			lda 	Const_Base+0,y
.2882	95 3f		sta $3f,x			sta 	NSMantissa0+1,x
.2884	b9 6c 27	lda $276c,y			lda 	Const_Base+1,y
.2887	95 4b		sta $4b,x			sta 	NSMantissa1+1,x
.2889	b9 6d 27	lda $276d,y			lda 	Const_Base+2,y
.288c	95 57		sta $57,x			sta 	NSMantissa2+1,x
.288e	b9 6e 27	lda $276e,y			lda 	Const_Base+3,y
.2891	48		pha				pha
.2892	29 7f		and #$7f			and 	#$7F
.2894	95 63		sta $63,x			sta 	NSMantissa3+1,x
.2896	68		pla				pla
.2897	29 80		and #$80			and 	#$80
.2899	95 33		sta $33,x			sta 	NSStatus+1,x
.289b	b9 6f 27	lda $276f,y			lda 	Const_Base+4,y
.289e	95 6f		sta $6f,x			sta 	NSExponent+1,x
.28a0	7a		ply				ply
.28a1	60		rts				rts
.28a2					FloatLogarithm:
.28a2	b5 32		lda $32,x			lda 	NSStatus,x 					; check > 0
.28a4	30 5f		bmi $2905			bmi 	_ULRange
.28a6	20 6f 26	jsr $266f			jsr 	FloatIsZero
.28a9	f0 5a		beq $2905			beq 	_ULRange
.28ab	20 a2 23	jsr $23a2			jsr 	FloatNormalise 				; put into FP mode.
.28ae	b5 6e		lda $6e,x			lda 	NSExponent,x 				; get power
.28b0	48		pha				pha
.28b1	a9 e1		lda #$e1			lda 	#(-31) & $FF 				; force into range 0.5 -> 1
.28b3	95 6e		sta $6e,x			sta 	NSExponent,x
.28b5	a9 14		lda #$14			lda 	#Const_sqrt_half-Const_Base
.28b7	20 7d 28	jsr $287d			jsr 	LoadConstant
.28ba	e8		inx				inx
.28bb	20 71 20	jsr $2071			jsr 	FloatAdd
.28be	8a		txa				txa 								; divide into sqrt 2.0
.28bf	a8		tay				tay
.28c0	c8		iny				iny
.28c1	20 31 28	jsr $2831			jsr 	CopyFloatXY
.28c4	ca		dex				dex
.28c5	a9 0f		lda #$0f			lda 	#Const_sqrt_2-Const_Base
.28c7	20 7d 28	jsr $287d			jsr 	LoadConstant
.28ca	e8		inx				inx
.28cb	e8		inx				inx
.28cc	20 96 21	jsr $2196			jsr 	FloatDivide 				; if zero, error.
.28cf	b0 33		bcs $2904			bcs 	_ULRangePla
.28d1	20 0f 26	jsr $260f			jsr 	FloatNegate 				; subtract from 1
.28d4	e8		inx				inx
.28d5	a9 01		lda #$01			lda 	#1
.28d7	20 4f 26	jsr $264f			jsr 	FloatSetByte
.28da	20 71 20	jsr $2071			jsr 	FloatAdd
.28dd	20 07 29	jsr $2907			jsr 	CoreLog
.28e0	20 26 28	jsr $2826			jsr 	CompletePolynomial
.28e3	68		pla				pla 								; add exponent
.28e4	18		clc				clc
.28e5	69 1f		adc #$1f			adc 	#31 						; fix up
.28e7	48		pha				pha
.28e8	10 03		bpl $28ed			bpl 	_LogNotNeg
.28ea	49 ff		eor #$ff			eor 	#$FF
.28ec	1a		inc a				inc 	a
.28ed					_LogNotNeg:
.28ed	e8		inx				inx 								; set byte and sign.
.28ee	20 4f 26	jsr $264f			jsr 	FloatSetByte
.28f1	68		pla				pla
.28f2	29 80		and #$80			and 	#$80
.28f4	95 32		sta $32,x			sta 	NSStatus,x
.28f6	20 71 20	jsr $2071			jsr 	FloatAdd
.28f9	a9 23		lda #$23			lda 	#Const_ln_e-Const_Base
.28fb	20 7d 28	jsr $287d			jsr 	LoadConstant
.28fe	e8		inx				inx
.28ff	20 0d 23	jsr $230d			jsr 	FloatMultiply
.2902	18		clc				clc
.2903	60		rts				rts
.2904					_ULRangePla:
.2904	68		pla				pla
.2905					_ULRange:
.2905	38		sec				sec
.2906	60		rts				rts
.2907					CoreLog:
.2907	a9 0f		lda #$0f			lda 	#LogCoefficients & $FF
.2909	a0 27		ldy #$27			ldy 	#LogCoefficients >> 8
.290b	4c 7a 29	jmp $297a			jmp 	CorePolySquared
.290e					FloatPI:
.290e	a9 19		lda #$19			lda 	#Const_pi-Const_Base
.2910	20 7d 28	jsr $287d			jsr 	LoadConstant
.2913	e8		inx				inx
.2914	18		clc				clc
.2915	60		rts				rts
.2916					FloatPower:
.2916	ca		dex				dex
.2917	8a		txa				txa 							; copy 0 to 2, so we can process it
.2918	a8		tay				tay
.2919	c8		iny				iny
.291a	c8		iny				iny
.291b	20 31 28	jsr $2831			jsr 	CopyFloatXY
.291e	e8		inx				inx 							; 2 = Log(0)
.291f	e8		inx				inx
.2920	20 a2 28	jsr $28a2			jsr 	FloatLogarithm
.2923	b0 0d		bcs $2932			bcs 	_FPWExit
.2925	20 0d 23	jsr $230d			jsr 	FloatMultiply			; Multiply by original 1, into 1.
.2928	8a		txa				txa 							; copy to slot 0
.2929	a8		tay				tay
.292a	88		dey				dey
.292b	20 31 28	jsr $2831			jsr 	CopyFloatXY
.292e	ca		dex				dex  							; Exponent code.
.292f	20 9f 27	jsr $279f			jsr 	FloatExponent
.2932					_FPWExit:
.2932	60		rts				rts
.2933					FloatSine:
.2933	b5 32		lda $32,x			lda 	NSStatus,x 					; save sign
.2935	48		pha				pha
.2936	74 32		stz $32,x			stz 	NSStatus,x 					; make +ve
.2938	a9 00		lda #$00			lda 	#Const_1Div2Pi-Const_Base
.293a	20 7d 28	jsr $287d			jsr 	LoadConstant
.293d	e8		inx				inx
.293e	20 0d 23	jsr $230d			jsr 	FloatMultiply
.2941	20 2d 22	jsr $222d			jsr 	FloatFractionalPart 		; take the fractional part
.2944	b5 6e		lda $6e,x			lda 	NSExponent,x 				; check exponent
.2946	c9 e0		cmp #$e0			cmp 	#$E0 						; < $E0 exponent : 0-0.25
.2948	90 1f		bcc $2969			bcc 	_USProcessExit
.294a	f0 06		beq $2952			beq 	_USSubtractFromHalf 		; = $E0 exponent : 0.25-0.5
.294c	b5 62		lda $62,x			lda 	NSMantissa3,x 				; if > 0.75 which is $60000000:$E1
.294e	c9 60		cmp #$60			cmp 	#$60
.2950	b0 0e		bcs $2960			bcs 	_USSubtractOne
.2952					_USSubtractFromHalf:
.2952	a9 1e		lda #$1e			lda 	#Const_half-Const_Base
.2954	20 7d 28	jsr $287d			jsr 	LoadConstant
.2957	e8		inx				inx
.2958	20 6b 20	jsr $206b			jsr 	FloatSubtract
.295b	20 0f 26	jsr $260f			jsr 	FloatNegate 				; then negate it
.295e	80 09		bra $2969			bra 	_USProcessExit 				; and exit
.2960					_USSubtractOne:
.2960	e8		inx				inx
.2961	a9 01		lda #$01			lda 	#1
.2963	20 4f 26	jsr $264f			jsr 	FloatSetByte
.2966	20 6b 20	jsr $206b			jsr 	FloatSubtract
.2969					_USProcessExit:
.2969	20 76 29	jsr $2976			jsr 	CoreSine
.296c	20 26 28	jsr $2826			jsr 	CompletePolynomial
.296f	68		pla				pla 								; restore sign and apply
.2970	55 32		eor $32,x			eor 	NSStatus,x
.2972	95 32		sta $32,x			sta 	NSStatus,x
.2974	18		clc				clc
.2975	60		rts				rts
.2976					CoreSine:
.2976	a9 eb		lda #$eb			lda 	#SinCoefficients & $FF
.2978	a0 26		ldy #$26			ldy 	#SinCoefficients >> 8
.297a					CorePolySquared:
.297a	48		pha				pha 								; save coefficient table
.297b	5a		phy				phy
.297c	8a		txa				txa 								; copy X to +1, +2
.297d	a8		tay				tay
.297e	c8		iny				iny
.297f	20 31 28	jsr $2831			jsr 	CopyFloatXY
.2982	c8		iny				iny
.2983	20 31 28	jsr $2831			jsr 	CopyFloatXY
.2986	e8		inx				inx 								; point to the pair and put x^2 on stack
.2987	e8		inx				inx
.2988	20 0d 23	jsr $230d			jsr 	FloatMultiply
.298b	7a		ply				ply 								; coefficient table back.
.298c	68		pla				pla
.298d	20 fa 27	jsr $27fa			jsr 	CalculateHornerPolynomial
.2990	8a		txa				txa 								; copy back to slot #1
.2991	a8		tay				tay
.2992	88		dey				dey
.2993	20 31 28	jsr $2831			jsr	 	CopyFloatXY
.2996	ca		dex				dex 								; point at result
.2997	60		rts				rts
.2998					FloatSquareRoot:
.2998	20 a2 28	jsr $28a2			jsr 	FloatLogarithm
.299b	b0 06		bcs $29a3			bcs 	_FSQExit
.299d	d6 6e		dec $6e,x			dec 	NSExponent,x
.299f	20 9f 27	jsr $279f			jsr 	FloatExponent
.29a2	18		clc				clc
.29a3					_FSQExit:
.29a3	60		rts				rts
.29a4					FloatTangent:
.29a4	da		phx				phx
.29a5	8a		txa				txa 								; sin -> +1
.29a6	a8		tay				tay
.29a7	c8		iny				iny
.29a8	20 31 28	jsr $2831			jsr 	CopyFloatXY
.29ab	e8		inx				inx
.29ac	20 33 29	jsr $2933			jsr 	FloatSine
.29af	ca		dex				dex
.29b0	8a		txa				txa 								; cos -> +2
.29b1	a8		tay				tay
.29b2	c8		iny				iny
.29b3	c8		iny				iny
.29b4	20 31 28	jsr $2831			jsr 	CopyFloatXY
.29b7	e8		inx				inx
.29b8	e8		inx				inx
.29b9	20 93 27	jsr $2793			jsr 	FloatCosine
.29bc	20 96 21	jsr $2196			jsr 	FloatDivide 				; calculate sin/cos
.29bf	b0 07		bcs $29c8			bcs 	_FTExit 					; divide by zero
.29c1	8a		txa				txa 								; copy result down.
.29c2	a8		tay				tay
.29c3	88		dey				dey
.29c4	20 31 28	jsr $2831			jsr 	CopyFloatXY
.29c7	18		clc				clc
.29c8					_FTExit:
.29c8	fa		plx				plx
.29c9	60		rts				rts

;******  Processing input file: testing/testend.asm

=$2a00							nextPage = (* + $FF) & $FF00 		; so I can include with that f*****g header.
.29fe					ObjectCodePreHeader:
>29fe	00 a0 d4 00 00 a6 ce 0e				.binary "code/code.bin"
>2a06	48 45 4c 4c 4f 2c 20 57 4f 52 4c 44 20 21 b1 0d
>2a16	92 a6 ca 91 c4 ff
=10752					ObjectCode = ObjectCodePreHeader+2 			; so the code is at XX00

;******  End of listing
