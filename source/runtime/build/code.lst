
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass -c -Wall -o build/code.prg -L build/code.lst -l build/code.lbl /home/paulr/Projects/blitz-compiler/documents/../source/common-source/wrapper.asm testing/testing.asm /home/paulr/Projects/blitz-compiler/documents/../bin/runtime.library /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library /home/paulr/Projects/blitz-compiler/documents/../bin/polynomials.library testing/testend.asm
; Fri Oct  6 02:30:07 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../source/common-source/wrapper.asm

=$1000					CodeStart = $1000
=$22					ZeroPageMandatory = $22
=$400					MemoryStorage = $400
.1000	a2 ff		ldx #$ff			ldx 	#$FF
.1002	9a		txs				txs
.1003	4c 06 10	jmp $1006			jmp 	WrapperBoot
.0022					codePtr:
>0022							.fill 	2
.0024					codePage:
>0024							.fill 	1
.0025					objPtr:
>0025							.fill 	2
.0027					objPage:
>0027							.fill 	1
.0028					zTemp0:
>0028							.fill 	2
.002a					zTemp1:
>002a							.fill 	2
.002c					zTemp2:
>002c							.fill 	2

;******  Processing input file: testing/testing.asm

.1006					WrapperBoot:
.1006	a9 32		lda #$32			lda 	#ObjectCode >> 8 			; address of object code to run.
.1008	a2 81		ldx #$81			ldx 	#$81 						; first page of allocatable memory
.100a	a0 9f		ldy #$9f			ldy 	#$9F 						; byte after end of last page.
.100c	4c 0f 10	jmp $100f			jmp 	StartRuntime

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/runtime.library

=$80					C64_END                  = $80 ; $80 end
=$81					C64_FOR                  = $81 ; $81 for
=$82					C64_NEXT                 = $82 ; $82 next
=$83					C64_DATA                 = $83 ; $83 data
=$84					C64_INPUTHASH            = $84 ; $84 input#
=$85					C64_INPUT                = $85 ; $85 input
=$86					C64_DIM                  = $86 ; $86 dim
=$87					C64_READ                 = $87 ; $87 read
=$88					C64_LET                  = $88 ; $88 let
=$89					C64_GOTO                 = $89 ; $89 goto
=$8a					C64_RUN                  = $8a ; $8a run
=$8b					C64_IF                   = $8b ; $8b if
=$8c					C64_RESTORE              = $8c ; $8c restore
=$8d					C64_GOSUB                = $8d ; $8d gosub
=$8e					C64_RETURN               = $8e ; $8e return
=$8f					C64_REM                  = $8f ; $8f rem
=$90					C64_STOP                 = $90 ; $90 stop
=$91					C64_ON                   = $91 ; $91 on
=$92					C64_WAIT                 = $92 ; $92 wait
=$93					C64_LOAD                 = $93 ; $93 load
=$94					C64_SAVE                 = $94 ; $94 save
=$95					C64_VERIFY               = $95 ; $95 verify
=$96					C64_DEF                  = $96 ; $96 def
=$97					C64_POKE                 = $97 ; $97 poke
=$98					C64_PRINTHASH            = $98 ; $98 print#
=$99					C64_PRINT                = $99 ; $99 print
=$9a					C64_CONT                 = $9a ; $9a cont
=$9b					C64_LIST                 = $9b ; $9b list
=$9c					C64_CLR                  = $9c ; $9c clr
=$9d					C64_CMD                  = $9d ; $9d cmd
=$9e					C64_SYS                  = $9e ; $9e sys
=$9f					C64_OPEN                 = $9f ; $9f open
=$a0					C64_CLOSE                = $a0 ; $a0 close
=$a1					C64_GET                  = $a1 ; $a1 get
=$a2					C64_NEW                  = $a2 ; $a2 new
=$a3					C64_TABLB                = $a3 ; $a3 tab(
=$a4					C64_TO                   = $a4 ; $a4 to
=$a5					C64_FN                   = $a5 ; $a5 fn
=$a6					C64_SPCLB                = $a6 ; $a6 spc(
=$a7					C64_THEN                 = $a7 ; $a7 then
=$a8					C64_NOT                  = $a8 ; $a8 not
=$a9					C64_STEP                 = $a9 ; $a9 step
=$aa					C64_PLUS                 = $aa ; $aa +
=$ab					C64_MINUS                = $ab ; $ab -
=$ac					C64_TIMES                = $ac ; $ac *
=$ad					C64_DIVIDE               = $ad ; $ad /
=$ae					C64_POWER                = $ae ; $ae ^
=$af					C64_AND                  = $af ; $af and
=$b0					C64_OR                   = $b0 ; $b0 or
=$b1					C64_GREATER              = $b1 ; $b1 >
=$b2					C64_EQUAL                = $b2 ; $b2 =
=$b3					C64_LESS                 = $b3 ; $b3 <
=$b4					C64_SGN                  = $b4 ; $b4 sgn
=$b5					C64_INT                  = $b5 ; $b5 int
=$b6					C64_ABS                  = $b6 ; $b6 abs
=$b7					C64_USR                  = $b7 ; $b7 usr
=$b8					C64_FRE                  = $b8 ; $b8 fre
=$b9					C64_POS                  = $b9 ; $b9 pos
=$ba					C64_SQR                  = $ba ; $ba sqr
=$bb					C64_RND                  = $bb ; $bb rnd
=$bc					C64_LOG                  = $bc ; $bc log
=$bd					C64_EXP                  = $bd ; $bd exp
=$be					C64_COS                  = $be ; $be cos
=$bf					C64_SIN                  = $bf ; $bf sin
=$c0					C64_TAN                  = $c0 ; $c0 tan
=$c1					C64_ATN                  = $c1 ; $c1 atn
=$c2					C64_PEEK                 = $c2 ; $c2 peek
=$c3					C64_LEN                  = $c3 ; $c3 len
=$c4					C64_STRDOLLAR            = $c4 ; $c4 str$
=$c5					C64_VAL                  = $c5 ; $c5 val
=$c6					C64_ASC                  = $c6 ; $c6 asc
=$c7					C64_CHRDOLLAR            = $c7 ; $c7 chr$
=$c8					C64_LEFTDOLLAR           = $c8 ; $c8 left$
=$c9					C64_RIGHTDOLLAR          = $c9 ; $c9 right$
=$ca					C64_MIDDOLLAR            = $ca ; $ca mid$
=$cb					C64_GO                   = $cb ; $cb go
=$ce80					C64_MON                  = $ce80 ; $ce80 mon
=$ce81					C64_DOS                  = $ce81 ; $ce81 dos
=$ce82					C64_OLD                  = $ce82 ; $ce82 old
=$ce83					C64_GEOS                 = $ce83 ; $ce83 geos
=$ce84					C64_VPOKE                = $ce84 ; $ce84 vpoke
=$ce85					C64_VLOAD                = $ce85 ; $ce85 vload
=$ce86					C64_SCREEN               = $ce86 ; $ce86 screen
=$ce87					C64_PSET                 = $ce87 ; $ce87 pset
=$ce88					C64_LINE                 = $ce88 ; $ce88 line
=$ce89					C64_FRAME                = $ce89 ; $ce89 frame
=$ce8a					C64_RECT                 = $ce8a ; $ce8a rect
=$ce8b					C64_CHAR                 = $ce8b ; $ce8b char
=$ce8c					C64_MOUSE                = $ce8c ; $ce8c mouse
=$ce8d					C64_COLOR                = $ce8d ; $ce8d color
=$ce8e					C64_TEST                 = $ce8e ; $ce8e test
=$ce8f					C64_RESET                = $ce8f ; $ce8f reset
=$ce90					C64_CLS                  = $ce90 ; $ce90 cls
=$ce91					C64_CODEX                = $ce91 ; $ce91 codex
=$ce92					C64_LOCATE               = $ce92 ; $ce92 locate
=$ce93					C64_BOOT                 = $ce93 ; $ce93 boot
=$ce94					C64_KEYMAP               = $ce94 ; $ce94 keymap
=$ce95					C64_BLOAD                = $ce95 ; $ce95 bload
=$ce96					C64_BVLOAD               = $ce96 ; $ce96 bvload
=$ce97					C64_BVERIFY              = $ce97 ; $ce97 bverify
=$ce98					C64_BANK                 = $ce98 ; $ce98 bank
=$ce99					C64_FMINIT               = $ce99 ; $ce99 fminit
=$ce9a					C64_FMNOTE               = $ce9a ; $ce9a fmnote
=$ce9b					C64_FMDRUM               = $ce9b ; $ce9b fmdrum
=$ce9c					C64_FMINST               = $ce9c ; $ce9c fminst
=$ce9d					C64_FMVIB                = $ce9d ; $ce9d fmvib
=$ce9e					C64_FMFREQ               = $ce9e ; $ce9e fmfreq
=$ce9f					C64_FMVOL                = $ce9f ; $ce9f fmvol
=$cea0					C64_FMPAN                = $cea0 ; $cea0 fmpan
=$cea1					C64_FMPLAY               = $cea1 ; $cea1 fmplay
=$cea2					C64_FMCHORD              = $cea2 ; $cea2 fmchord
=$cea3					C64_FMPOKE               = $cea3 ; $cea3 fmpoke
=$cea4					C64_PSGINIT              = $cea4 ; $cea4 psginit
=$cea5					C64_PSGNOTE              = $cea5 ; $cea5 psgnote
=$cea6					C64_PSGVOL               = $cea6 ; $cea6 psgvol
=$cea7					C64_PSGWAV               = $cea7 ; $cea7 psgwav
=$cea8					C64_PSGFREQ              = $cea8 ; $cea8 psgfreq
=$cea9					C64_PSGPAN               = $cea9 ; $cea9 psgpan
=$ceaa					C64_PSGPLAY              = $ceaa ; $ceaa psgplay
=$ceab					C64_PSGCHORD             = $ceab ; $ceab psgchord
=$ceac					C64_REBOOT               = $ceac ; $ceac reboot
=$cead					C64_POWEROFF             = $cead ; $cead poweroff
=$ceae					C64_I2CPOKE              = $ceae ; $ceae i2cpoke
=$ceaf					C64_SLEEP                = $ceaf ; $ceaf sleep
=$ceb0					C64_BSAVE                = $ceb0 ; $ceb0 bsave
=$ceb1					C64_MENU                 = $ceb1 ; $ceb1 menu
=$ceb2					C64_REN                  = $ceb2 ; $ceb2 ren
=$ceb3					C64_LINPUT               = $ceb3 ; $ceb3 linput
=$ceb4					C64_LINPUTHASH           = $ceb4 ; $ceb4 linput#
=$ceb5					C64_BINPUTHASH           = $ceb5 ; $ceb5 binput#
=$ceb6					C64_HELP                 = $ceb6 ; $ceb6 help
=$ced0					C64_VPEEK                = $ced0 ; $ced0 vpeek
=$ced1					C64_MX                   = $ced1 ; $ced1 mx
=$ced2					C64_MY                   = $ced2 ; $ced2 my
=$ced3					C64_MB                   = $ced3 ; $ced3 mb
=$ced4					C64_JOY                  = $ced4 ; $ced4 joy
=$ced5					C64_HEXDOLLAR            = $ced5 ; $ced5 hex$
=$ced6					C64_BINDOLLAR            = $ced6 ; $ced6 bin$
=$ced7					C64_I2CPEEK              = $ced7 ; $ced7 i2cpeek
=$ced8					C64_POINTER              = $ced8 ; $ced8 pointer
=$ced9					C64_STRPTR               = $ced9 ; $ced9 strptr
=$ceda					C64_RPTDOLLAR            = $ceda ; $ceda rpt$
=$8000					SWorkArea = $8000
=$1f00					SWorkAreaSize = $1F00
=40192					StringTopAddress = SWorkArea + SWorkAreaSize - (1 + (SWorkAreaSize >> 12)) * 256
=40704					StackTopAddress = SWorkArea + SWorkAreaSize
.002e					zsTemp:
>002e							.fill 	2
.0030					runtimeStackPtr:
>0030							.fill 	2
.0400					stringLowMemory:
>0400							.fill 	2
.0402					stringHighMemory:
>0402							.fill 	2
=$e4					FRAME_GOSUB = $E4 							; Gosub has 4 bytes
=211					FRAME_FOR = $C0+19 							; For has 19 bytes
=$80					PCD_STARTBINARY = $80
=$8d					PCD_ENDBINARY = $8d
=$8d					PCD_STARTCOMMAND = $8d
=$ca					PCD_ENDCOMMAND = $ca
=$ca					PCD_STARTSYSTEM = $ca
=$d5					PCD_ENDSYSTEM = $d5
=$80					PCD_PLUS             = $80 ; +
=$81					PCD_MINUS            = $81 ; -
=$82					PCD_TIMES            = $82 ; *
=$83					PCD_DIVIDE           = $83 ; /
=$84					PCD_POWER            = $84 ; ^
=$85					PCD_AND              = $85 ; and
=$86					PCD_OR               = $86 ; or
=$87					PCD_GREATER          = $87 ; >
=$88					PCD_EQUAL            = $88 ; =
=$89					PCD_LESS             = $89 ; <
=$8a					PCD_GREATEREQUAL     = $8a ; >=
=$8b					PCD_LESSGREATER      = $8b ; <>
=$8c					PCD_LESSEQUAL        = $8c ; <=
=$8d					PCD_ABS              = $8d ; abs
=$8e					PCD_ARRAY            = $8e ; array
=$8f					PCD_ASC              = $8f ; asc
=$90					PCD_ASSERT           = $90 ; assert
=$91					PCD_BINDOLLAR        = $91 ; bin$
=$92					PCD_PRINTCMD_CHR     = $92 ; print.chr
=$93					PCD_CHRDOLLAR        = $93 ; chr$
=$94					PCD_SCMD_CMP         = $94 ; s.cmp
=$95					PCD_FOR              = $95 ; for
=$96					PCD_FRE              = $96 ; fre
=$97					PCD_GET              = $97 ; get
=$98					PCD_RETURN           = $98 ; return
=$99					PCD_PSET             = $99 ; pset
=$9a					PCD_LINE             = $9a ; line
=$9b					PCD_RECT             = $9b ; rect
=$9c					PCD_FRAME            = $9c ; frame
=$9d					PCD_CHAR             = $9d ; char
=$9e					PCD_HEXDOLLAR        = $9e ; hex$
=$9f					PCD_INPUT            = $9f ; input
=$a0					PCD_INPUTDOLLAR      = $a0 ; input$
=$a1					PCD_INPUTCMD_START   = $a1 ; input.start
=$a2					PCD_LEN              = $a2 ; len
=$a3					PCD_FCMD_CMP         = $a3 ; f.cmp
=$a4					PCD_INTCMD_DIV       = $a4 ; int.div
=$a5					PCD_NEGATE           = $a5 ; negate
=$a6					PCD_NEWCMD_LINE      = $a6 ; new.line
=$a7					PCD_NEXT             = $a7 ; next
=$a8					PCD_NOT              = $a8 ; not
=$a9					PCD_ON               = $a9 ; on
=$aa					PCD_MOREON           = $aa ; moreon
=$ab					PCD_PEEK             = $ab ; peek
=$ac					PCD_POKE             = $ac ; poke
=$ad					PCD_POS              = $ad ; pos
=$ae					PCD_GETCHANNEL       = $ae ; getchannel
=$af					PCD_SETCHANNEL       = $af ; setchannel
=$b0					PCD_PRINTCMD_N       = $b0 ; print.n
=$b1					PCD_PRINTCMD_S       = $b1 ; print.s
=$b2					PCD_READ             = $b2 ; read
=$b3					PCD_READDOLLAR       = $b3 ; read$
=$b4					PCD_RND              = $b4 ; rnd
=$b5					PCD_CONCAT           = $b5 ; concat
=$b6					PCD_SGN              = $b6 ; sgn
=$b7					PCD_PRINTCMD_TAB     = $b7 ; print.tab
=$b8					PCD_PRINTCMD_POS     = $b8 ; print.pos
=$b9					PCD_PRINTCMD_SPC     = $b9 ; print.spc
=$ba					PCD_STRDOLLAR        = $ba ; str$
=$bb					PCD_LEFTDOLLAR       = $bb ; left$
=$bc					PCD_RIGHTDOLLAR      = $bc ; right$
=$bd					PCD_MIDDOLLAR        = $bd ; mid$
=$be					PCD_SWAP             = $be ; swap
=$bf					PCD_TI               = $bf ; ti
=$c0					PCD_TIDOLLAR         = $c0 ; ti$
=$c1					PCD_USR              = $c1 ; usr
=$c2					PCD_VAL              = $c2 ; val
=$c3					PCD_CLOSE            = $c3 ; close
=$c4					PCD_EXIT             = $c4 ; exit
=$c5					PCD_DEBUG            = $c5 ; debug
=$c6					PCD_OPEN             = $c6 ; open
=$c7					PCD_SCREEN           = $c7 ; screen
=$c8					PCD_VPOKE            = $c8 ; vpoke
=$c9					PCD_VPEEK            = $c9 ; vpeek
=$ca					PCD_CMD_SHIFT        = $ca ; .shift
=$cb					PCD_CMD_BYTE         = $cb ; .byte
=$cc					PCD_CMD_WORD         = $cc ; .word
=$cd					PCD_CMD_FLOAT        = $cd ; .float
=$ce					PCD_CMD_STRING       = $ce ; .string
=$cf					PCD_CMD_DATA         = $cf ; .data
=$d0					PCD_CMD_GOTO         = $d0 ; .goto
=$d1					PCD_CMD_GOSUB        = $d1 ; .gosub
=$d2					PCD_CMD_GOTOCMD_Z    = $d2 ; .goto.z
=$d3					PCD_CMD_GOTOCMD_NZ   = $d3 ; .goto.nz
=$d4					PCD_CMD_VARSPACE     = $d4 ; .varspace
=$ca80					PCD_CLR              = $ca80 ; clr
=$ca81					PCD_DIM              = $ca81 ; dim
=$ca82					PCD_END              = $ca82 ; end
=$ca83					PCD_JOY              = $ca83 ; joy
=$ca84					PCD_INT              = $ca84 ; int
=$ca85					PCD_SQR              = $ca85 ; sqr
=$ca86					PCD_LOG              = $ca86 ; log
=$ca87					PCD_EXP              = $ca87 ; exp
=$ca88					PCD_COS              = $ca88 ; cos
=$ca89					PCD_SIN              = $ca89 ; sin
=$ca8a					PCD_TAN              = $ca8a ; tan
=$ca8b					PCD_ATN              = $ca8b ; atn
=$ca8c					PCD_MOUSE            = $ca8c ; mouse
=$ca8d					PCD_MB               = $ca8d ; mb
=$ca8e					PCD_MX               = $ca8e ; mx
=$ca8f					PCD_MY               = $ca8f ; my
=$ca90					PCD_RESTORE          = $ca90 ; restore
=$ca91					PCD_STOP             = $ca91 ; stop
=$ca92					PCD_SYS              = $ca92 ; sys
=$ca93					PCD_TIDOLLARCMD_WRITE = $ca93 ; ti$.write
=$ca94					PCD_WAIT             = $ca94 ; wait
=$ca95					PCD_I2CPOKE          = $ca95 ; i2cpoke
=$ca96					PCD_I2CPEEK          = $ca96 ; i2cpeek
=$ca97					PCD_BANK             = $ca97 ; bank
=$ca98					PCD_SLEEP            = $ca98 ; sleep
=$ca99					PCD_FMINIT           = $ca99 ; fminit
=$ca9a					PCD_FMNOTE           = $ca9a ; fmnote
=$ca9b					PCD_FMDRUM           = $ca9b ; fmdrum
=$ca9c					PCD_FMINST           = $ca9c ; fminst
=$ca9d					PCD_FMVIB            = $ca9d ; fmvib
=$ca9e					PCD_FMFREQ           = $ca9e ; fmfreq
=$ca9f					PCD_FMVOL            = $ca9f ; fmvol
=$caa0					PCD_FMPAN            = $caa0 ; fmpan
=$caa1					PCD_FMPLAY           = $caa1 ; fmplay
=$caa2					PCD_FMCHORD          = $caa2 ; fmchord
=$caa3					PCD_FMPOKE           = $caa3 ; fmpoke
=$caa4					PCD_PSGINIT          = $caa4 ; psginit
=$caa5					PCD_PSGNOTE          = $caa5 ; psgnote
=$caa6					PCD_PSGVOL           = $caa6 ; psgvol
=$caa7					PCD_PSGWAV           = $caa7 ; psgwav
=$caa8					PCD_PSGFREQ          = $caa8 ; psgfreq
=$caa9					PCD_PSGPAN           = $caa9 ; psgpan
=$caaa					PCD_PSGPLAY          = $caaa ; psgplay
=$caab					PCD_PSGCHORD         = $caab ; psgchord
=$caac					PCD_CLS              = $caac ; cls
=$caad					PCD_LOCATE           = $caad ; locate
=$caae					PCD_COLOR            = $caae ; color
=$9f20					VRAMLow0 = $9F20
=$9f21					VRAMMed0 = $9F21
=$9f22					VRAMHigh0 = $9F22
=$9f23					VRAMData0 = $9F23
=$c09f					X16A_audio_init=$C09F
=$c08d					X16A_bas_fmchordstring=$C08D
=$c000					X16A_bas_fmfreq=$C000
=$c003					X16A_bas_fmnote=$C003
=$c006					X16A_bas_fmplaystring=$C006
=$c009					X16A_bas_fmvib=$C009
=$c00c					X16A_bas_playstringvoice=$C00C
=$c090					X16A_bas_psgchordstring=$C090
=$c00f					X16A_bas_psgfreq=$C00F
=$c012					X16A_bas_psgnote=$C012
=$c015					X16A_bas_psgwav=$C015
=$c018					X16A_bas_psgplaystring=$C018
=$c01b					X16A_notecon_bas2fm=$C01B
=$c01e					X16A_notecon_bas2midi=$C01E
=$c021					X16A_notecon_bas2psg=$C021
=$c024					X16A_notecon_fm2bas=$C024
=$c027					X16A_notecon_fm2midi=$C027
=$c02a					X16A_notecon_fm2psg=$C02A
=$c02d					X16A_notecon_freq2bas=$C02D
=$c030					X16A_notecon_freq2fm=$C030
=$c033					X16A_notecon_freq2midi=$C033
=$c036					X16A_notecon_freq2psg=$C036
=$c039					X16A_notecon_midi2bas=$C039
=$c03c					X16A_notecon_midi2fm=$C03C
=$c03f					X16A_notecon_midi2psg=$C03F
=$c042					X16A_notecon_psg2bas=$C042
=$c045					X16A_notecon_psg2fm=$C045
=$c048					X16A_notecon_psg2midi=$C048
=$c093					X16A_psg_getatten=$C093
=$c096					X16A_psg_getpan=$C096
=$c04b					X16A_psg_init=$C04B
=$c04e					X16A_psg_playfreq=$C04E
=$c051					X16A_psg_read=$C051
=$c054					X16A_psg_setatten=$C054
=$c057					X16A_psg_setfreq=$C057
=$c05a					X16A_psg_setpan=$C05A
=$c05d					X16A_psg_setvol=$C05D
=$c060					X16A_psg_write=$C060
=$c0a2					X16A_psg_write_fast=$C0A2
=$c099					X16A_ym_getatten=$C099
=$c09c					X16A_ym_getpan=$C09C
=$c063					X16A_ym_init=$C063
=$c066					X16A_ym_loaddefpatches=$C066
=$c069					X16A_ym_loadpatch=$C069
=$c06c					X16A_ym_loadpatchlfn=$C06C
=$c06f					X16A_ym_playdrum=$C06F
=$c072					X16A_ym_playnote=$C072
=$c075					X16A_ym_setatten=$C075
=$c078					X16A_ym_setdrum=$C078
=$c07b					X16A_ym_setnote=$C07B
=$c07e					X16A_ym_setpan=$C07E
=$c081					X16A_ym_read=$C081
=$c084					X16A_ym_release=$C084
=$c087					X16A_ym_trigger=$C087
=$c08a					X16A_ym_write=$C08A
=2					X16_r0 = 2
=4					X16_r1 = 4
=6					X16_r2 = 6
=8					X16_r3 = 8
=10					X16_r4 = 10
=$ffa5					X16_ACPTR=$FFA5
=$ffcf					X16_BASIN=$FFCF
=$feba					X16_BSAVE=$FEBA
=$ffd2					X16_BSOUT=$FFD2
=$ffa8					X16_CIOUT=$FFA8
=$ffe7					X16_CLALL=$FFE7
=$ffc3					X16_CLOSE=$FFC3
=$ffc6					X16_CHKIN=$FFC6
=$ffc9					X16_CHKOUT=$FFC9
=$ff50					X16_clock_get_date_time=$FF50
=$ff4d					X16_clock_set_date_time=$FF4D
=$ffcf					X16_CHRIN=$FFCF
=$ffd2					X16_CHROUT=$FFD2
=$ff4a					X16_CLOSE_ALL=$FF4A
=$ffcc					X16_CLRCHN=$FFCC
=$fedb					X16_console_init=$FEDB
=$fee1					X16_console_get_char=$FEE1
=$fede					X16_console_put_char=$FEDE
=$fed8					X16_console_put_image=$FED8
=$fed5					X16_console_set_paging_message=$FED5
=$ff47					X16_enter_basic=$FF47
=$fecf					X16_entropy_get=$FECF
=$ff74					X16_fetch=$FF74
=$ff02					X16_FB_cursor_next_line=$FF02
=$feff					X16_FB_cursor_position=$FEFF
=$ff17					X16_FB_fill_pixels=$FF17
=$ff1a					X16_FB_filter_pixels=$FF1A
=$fef9					X16_FB_get_info=$FEF9
=$ff05					X16_FB_get_pixel=$FF05
=$ff08					X16_FB_get_pixels=$FF08
=$fef6					X16_FB_init=$FEF6
=$ff1d					X16_FB_move_pixels=$FF1D
=$ff11					X16_FB_set_8_pixels=$FF11
=$ff14					X16_FB_set_8_pixels_opaque=$FF14
=$fefc					X16_FB_set_palette=$FEFC
=$ff0b					X16_FB_set_pixel=$FF0B
=$ff0e					X16_FB_set_pixels=$FF0E
=$ffe4					X16_GETIN=$FFE4
=$ff23					X16_GRAPH_clear=$FF23
=$ff38					X16_GRAPH_draw_image=$FF38
=$ff2c					X16_GRAPH_draw_line=$FF2C
=$ff35					X16_GRAPH_draw_oval=$FF35
=$ff2f					X16_GRAPH_draw_rect=$FF2F
=$ff3e					X16_GRAPH_get_char_size=$FF3E
=$ff20					X16_GRAPH_init=$FF20
=$ff32					X16_GRAPH_move_rect=$FF32
=$ff41					X16_GRAPH_put_char=$FF41
=$ff29					X16_GRAPH_set_colors=$FF29
=$ff3b					X16_GRAPH_set_font=$FF3B
=$ff26					X16_GRAPH_set_window=$FF26
=$fec6					X16_i2c_read_byte=$FEC6
=$fec9					X16_i2c_write_byte=$FEC9
=$fff3					X16_IOBASE=$FFF3
=$ff6e					X16_JSRFAR=$FF6E
=$ff56					X16_joystick_get=$FF56
=$ff53					X16_joystick_scan=$FF53
=$fec0					X16_kbdbuf_get_modifiers=$FEC0
=$febd					X16_kbdbuf_peek=$FEBD
=$fec3					X16_kbdbuf_put=$FEC3
=$fed2					X16_keymap=$FED2
=$ffb1					X16_LISTEN=$FFB1
=$ff59					X16_LKUPLA=$FF59
=$ff5c					X16_LKUPSA=$FF5C
=$ffd5					X16_LOAD=$FFD5
=$ff44					X16_MACPTR=$FF44
=$ff9c					X16_MEMBOT=$FF9C
=$fee7					X16_memory_copy=$FEE7
=$feea					X16_memory_crc=$FEEA
=$feed					X16_memory_decompress=$FEED
=$fee4					X16_memory_fill=$FEE4
=$ff99					X16_MEMTOP=$FF99
=$fecc					X16_monitor=$FECC
=$ff68					X16_mouse_config=$FF68
=$ff6b					X16_mouse_get=$FF6B
=$ff71					X16_mouse_scan=$FF71
=$ffc0					X16_OPEN=$FFC0
=$ff65					X16_PFKEY=$FF65
=$fff0					X16_PLOT=$FFF0
=$ff7d					X16_PRIMM=$FF7D
=$ffde					X16_RDTIM=$FFDE
=$ffb7					X16_READST=$FFB7
=$ffd8					X16_SAVE=$FFD8
=$ffed					X16_SCREEN=$FFED
=$ff5f					X16_screen_mode=$FF5F
=$ff62					X16_screen_set_charset=$FF62
=$ff93					X16_SECOND=$FF93
=$ffba					X16_SETLFS=$FFBA
=$ff90					X16_SETMSG=$FF90
=$ffbd					X16_SETNAM=$FFBD
=$ffdb					X16_SETTIM=$FFDB
=$ffa2					X16_SETTMO=$FFA2
=$fef0					X16_sprite_set_image=$FEF0
=$fef3					X16_sprite_set_position=$FEF3
=$ff77					X16_stash=$FF77
=$ffe1					X16_STOP=$FFE1
=$ffb4					X16_TALK=$FFB4
=$ff96					X16_TKSA=$FF96
=$ffea					X16_UDTIM=$FFEA
=$ffae					X16_UNLSN=$FFAE
=$ffab					X16_UNTLK=$FFAB
=$311					USRRoutineAddress = $311
=$30c					SYS_Reg_A = $30C
=$30d					SYS_Reg_X = $30D
=$30e					SYS_Reg_Y = $30E
=$30f					SYS_Reg_S = $30F
=0					SelectRAMBank = 0
=1					SelectROMBank = 1
=$0a					X16_AudioCodeBank = $0A
.100f					StartRuntime:
.100f	8d 04 04	sta $0404			sta 	runtimeHigh 				; save address of code.
.1012	85 23		sta $23				sta 	codePtr+1 					; set pointer to code.
.1014	64 22		stz $22				stz 	codePtr
.1016	64 24		stz $24				stz 	codePage 					; zero current page.
.1018	8e 05 04	stx $0405			stx 	storeStartHigh 				; save from-to address.
.101b	8c 06 04	sty $0406			sty 	storeEndHigh
.101e	8e 07 04	stx $0407			stx 	variableStartPage
.1021	20 53 12	jsr $1253			jsr 	ClearMemory 				; clear memory.
.1024	20 b3 1f	jsr $1fb3			jsr 	XRuntimeSetup 				; initialise the runtime stuff.
.1027	20 b5 1c	jsr $1cb5		 	jsr		SetDefaultChannel			; set default input/output channel.
.102a	20 eb 1e	jsr $1eeb			jsr 	RestoreCode 				; which we now call
.102d	a0 00		ldy #$00			ldy 	#0
.102f					NextCommand:
.102f	b1 22		lda ($22),y			lda 	(codePtr),y 				; get next
.1031	30 5b		bmi $108e			bmi 	NXCommand 					; -if -ve command
.1033	c8		iny				iny
.1034	c9 40		cmp #$40			cmp 	#64 						; 64..127 is load and store.
.1036	90 39		bcc $1071			bcc 	PushByteA 					; 0..63 is short constants.
.1038					NXLoadStore:
.1038	c9 78		cmp #$78			cmp		#120 						; is it an indirect read/write
.103a	b0 19		bcs $1055			bcs 	NXIndirectLoadStore
.103c	4a		lsr a				lsr 	a 							; / 4, so $48 => $12,
.103d	4a		lsr a				lsr 	a
.103e	29 0e		and #$0e			and 	#$0E
.1040	da		phx				phx 								; get ready to jump
.1041	aa		tax				tax
.1042	7c 45 10	jmp ($1045,x)			jmp 	(ReadWriteVectors,x) 		; go via the jump table.
.1045					ReadWriteVectors:
>1045	21 1e						.word 	ReadFloatCommand			; read float
>1047	fc 23						.word 	WriteFloatCommand 			; write float
>1049	5d 1e						.word 	ReadIntegerCommand 			; read integer
>104b	38 24						.word 	WriteIntegerCommand 		; write integer
>104d	a2 1e						.word 	ReadStringCommand 			; read string
>104f	77 24						.word 	WriteStringCommand 			; write string
>1051	10 14						.word 	Unimplemented
>1053	10 14						.word 	Unimplemented
.1055					NXIndirectLoadStore:
.1055	29 07		and #$07			and 	#7
.1057	0a		asl a				asl 	a
.1058	da		phx				phx
.1059	aa		tax				tax
.105a	7c 5d 10	jmp ($105d,x)			jmp 	(IndirectVectors,x)
.105d					IndirectVectors:
>105d	40 18						.word 	IndFloatRead 				; float read
>105f	54 18						.word 	IndInt16Read 				; int16 read
>1061	68 18						.word 	IndStringRead 				; string read
>1063	10 14						.word 	Unimplemented
>1065	7c 18						.word 	IndFloatWrite				; float write
>1067	90 18						.word 	IndInt16Write 				; int16 write
>1069	a4 18						.word 	IndStringWrite 				; string write
>106b	10 14						.word 	Unimplemented
.106d					PushByteCommand:
.106d	fa		plx				plx
.106e	b1 22		lda ($22),y			lda 	(codePtr),y 				; get byte to write.
.1070	c8		iny				iny
.1071					PushByteA:
.1071	e8		inx				inx 								; push constant on stack
.1072	95 40		sta $40,x			sta 	NSMantissa0,x 				; save byte
.1074	74 4c		stz $4c,x			stz 	NSMantissa1,x 				; clear MSB
.1076					ClearRestWord:
.1076	74 58		stz $58,x			stz 	NSMantissa2,x 				; zero upper bytes, exponent, make iFloat32
.1078	74 64		stz $64,x			stz 	NSMantissa3,x
.107a	74 70		stz $70,x			stz 	NSExponent,x
.107c	74 34		stz $34,x			stz 	NSStatus,x
.107e	80 af		bra $102f			bra 	NextCommand
.1080					PushWordCommand:
.1080	fa		plx				plx
.1081	e8		inx				inx
.1082	b1 22		lda ($22),y			lda 	(codePtr),y 				; word to stack
.1084	c8		iny				iny
.1085	95 40		sta $40,x			sta 	NSMantissa0,x
.1087	b1 22		lda ($22),y			lda 	(codePtr),y
.1089	c8		iny				iny
.108a	95 4c		sta $4c,x			sta 	NSMantissa1,x
.108c	80 e8		bra $1076			bra 	ClearRestWord 				; handle everything else.
.108e					NXCommand:
.108e	c8		iny				iny 								; consume command.
.108f	10 03		bpl $1094			bpl 	_NXCommandNoFixUp
.1091	20 9a 10	jsr $109a			jsr 	FixUpY
.1094					_NXCommandNoFixUp:
.1094	0a		asl a				asl 	a 							; shift left
.1095	da		phx				phx 								; save SP on stack
.1096	aa		tax				tax				 					; and jump indirect
.1097	7c dd 22	jmp ($22dd,x)			jmp 	(VectorTable,x)
.109a					FixUpY:
.109a	48		pha				pha
.109b	98		tya				tya
.109c	18		clc				clc
.109d	65 22		adc $22				adc 	codePtr
.109f	85 22		sta $22				sta 	codePtr
.10a1	90 02		bcc $10a5			bcc 	_NoCPCarry
.10a3	e6 23		inc $23				inc 	codePtr+1
.10a5					_NoCPCarry:
.10a5	a0 00		ldy #$00			ldy 	#0
.10a7	68		pla				pla
.10a8	60		rts				rts
.0404					runtimeHigh:
>0404							.fill 	1
.0405					storeStartHigh:
>0405							.fill 	1
.0406					storeEndHigh:
>0406							.fill 	1
.0407					variableStartPage:
>0407							.fill 	1
.10a9					AbsoluteTOS:
.10a9	fa		plx				plx
.10aa	74 34		stz $34,x			stz 	NSStatus,x 					; dereferenced so just clear the status byte.
.10ac	4c 2f 10	jmp $102f			jmp 	NextCommand
.10af					CommandVarSpace:
.10af	fa		plx				plx
.10b0	b1 22		lda ($22),y			lda 	(codePtr),y					; 3 byte opcode, which is 'free' memory in variable area.
.10b2	85 32		sta $32				sta 	availableMemory
.10b4	c8		iny				iny
.10b5	b1 22		lda ($22),y			lda 	(codePtr),y
.10b7	18		clc				clc
.10b8	6d 07 04	adc $0407			adc 	variableStartPage			; offset to actual address.
.10bb	85 33		sta $33				sta 	availableMemory+1
.10bd	c8		iny				iny
.10be	4c 2f 10	jmp $102f			jmp 	NextCommand
.0032					availableMemory:
>0032							.fill 	2
.10c1					BinaryAnd:
.10c1	fa		plx				plx
.10c2	38		sec				sec
.10c3	80 02		bra $10c7			bra 	AndOrCommon
.10c5					BinaryOr:
.10c5	fa		plx				plx
.10c6	18		clc				clc
.10c7					AndOrCommon:
.10c7	08		php				php 								; save AND/OR flag
.10c8	20 7b 19	jsr $197b			jsr 	GetInteger16Bit
.10cb	ca		dex				dex
.10cc	20 7b 19	jsr $197b			jsr 	GetInteger16Bit
.10cf	28		plp				plp
.10d0	90 0e		bcc $10e0			bcc 	_AOCOrCode
.10d2	b5 40		lda $40,x			lda 	NSMantissa0,x 				; AND code
.10d4	35 41		and $41,x			and		NSMantissa0+1,x
.10d6	95 40		sta $40,x			sta 	NSMantissa0,x
.10d8	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.10da	35 4d		and $4d,x			and		NSMantissa1+1,x
.10dc	95 4c		sta $4c,x			sta 	NSMantissa1,x
.10de	80 0c		bra $10ec			bra 	_AOCComplete
.10e0					_AOCOrCode:
.10e0	b5 40		lda $40,x			lda 	NSMantissa0,x 				; OR code
.10e2	15 41		ora $41,x			ora		NSMantissa0+1,x
.10e4	95 40		sta $40,x			sta 	NSMantissa0,x
.10e6	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.10e8	15 4d		ora $4d,x			ora		NSMantissa1+1,x
.10ea	95 4c		sta $4c,x			sta 	NSMantissa1,x
.10ec					_AOCComplete:
.10ec	74 34		stz $34,x			stz 	NSStatus,x 					; make integer ?
.10ee	34 4c		bit $4c,x			bit 	NSMantissa1,x 				; result is -ve
.10f0	10 07		bpl $10f9			bpl 	_AOCExit
.10f2	20 8b 19	jsr $198b			jsr 	Negate16Bit 				; 2's complement
.10f5	a9 80		lda #$80			lda 	#$80 						; make it -ve
.10f7	95 34		sta $34,x			sta 	NSStatus,x
.10f9					_AOCExit:
.10f9	4c 2f 10	jmp $102f			jmp 	NextCommand
.10fc					ArrayConvert:
.10fc	fa		plx				plx
.10fd	5a		phy				phy
.10fe	b5 40		lda $40,x			lda 	NSMantissa0,x
.1100	85 2a		sta $2a				sta 	zTemp1
.1102	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.1104	18		clc				clc
.1105	6d 07 04	adc $0407			adc 	variableStartPage
.1108	85 2b		sta $2b				sta 	zTemp1+1
.110a	ca		dex				dex 								; count of indices to follow -> zTemp2
.110b	20 75 19	jsr $1975			jsr 	GetInteger8Bit
.110e	85 2c		sta $2c				sta 	zTemp2 						; subtract from stack.
.1110	8a		txa				txa
.1111	38		sec				sec
.1112	e5 2c		sbc $2c				sbc 	zTemp2
.1114	aa		tax				tax
.1115	da		phx				phx 								; stack points at the first index, which will be replaced.
.1116					_ACIndexLoop:
.1116	20 49 2a	jsr $2a49			jsr 	FloatIntegerPart 			; integer array index
.1119	20 7b 19	jsr $197b			jsr 	GetInteger16Bit 			; get the index => zTemp0
.111c	a0 01		ldy #$01			ldy 	#1 							; compare against the index count.
.111e	a5 28		lda $28				lda 	zTemp0
.1120	d2 2a		cmp ($2a)			cmp 	(zTemp1)
.1122	a5 29		lda $29				lda 	zTemp0+1
.1124	f1 2a		sbc ($2a),y			sbc 	(zTemp1),y
.1126	b0 79		bcs $11a1			bcs 	_ACBadIndex 				; index error.
.1128	c6 2c		dec $2c				dec 	zTemp2 						; decrement count, if zero, then innermost level
.112a	f0 29		beq $1155			beq 	_ACInnerLevel
.112c	a0 02		ldy #$02			ldy 	#2 							; check sub index.
.112e	b1 2a		lda ($2a),y			lda 	(zTemp1),y
.1130	10 6f		bpl $11a1			bpl 	_ACBadIndex
.1132	06 28		asl $28				asl 	zTemp0 						; double the index and add it to the base address
.1134	26 29		rol $29				rol 	zTemp0+1
.1136	18		clc				clc
.1137	a5 28		lda $28				lda		zTemp0
.1139	65 2a		adc $2a				adc 	zTemp1
.113b	85 28		sta $28				sta 	zTemp0
.113d	a5 29		lda $29				lda		zTemp0+1
.113f	65 2b		adc $2b				adc 	zTemp1+1
.1141	85 29		sta $29				sta 	zTemp0+1
.1143	a0 03		ldy #$03			ldy 	#3 							; we offset by 3 because 3 at entry, now get the address
.1145	b1 28		lda ($28),y			lda 	(zTemp0),y 					; into zTemp1 as a real address, not offset
.1147	85 2a		sta $2a				sta 	zTemp1
.1149	c8		iny				iny
.114a	b1 28		lda ($28),y			lda 	(zTemp0),y
.114c	18		clc				clc
.114d	6d 07 04	adc $0407			adc 	variableStartPage
.1150	85 2b		sta $2b				sta 	zTemp1+1
.1152	e8		inx				inx 								; next index
.1153	80 c1		bra $1116			bra 	_ACIndexLoop
.1155					_ACInnerLevel:
.1155	a0 02		ldy #$02			ldy 	#2
.1157	b1 2a		lda ($2a),y			lda 	(zTemp1),y
.1159	30 46		bmi $11a1			bmi 	_ACBadIndex 				; it has sub arrays, so bad index.
.115b	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16 		; check if it is an iFloat
.115d	c9 00		cmp #$00			cmp 	#NSSIFloat
.115f	d0 13		bne $1174			bne 	_ACNotFloat
.1161	a5 29		lda $29				lda 	zTemp0+1 					; double and add zTemp0 (x3)
.1163	48		pha				pha
.1164	a5 28		lda $28				lda 	zTemp0
.1166	06 28		asl $28				asl 	zTemp0 						; x 2
.1168	26 29		rol $29				rol 	zTemp0+1
.116a	18		clc				clc 								; add back x 3
.116b	65 28		adc $28				adc 	zTemp0
.116d	85 28		sta $28				sta 	zTemp0
.116f	68		pla				pla
.1170	65 29		adc $29				adc 	zTemp0+1
.1172	85 29		sta $29				sta 	zTemp0+1
.1174					_ACNotFloat:
.1174	06 28		asl $28				asl 	zTemp0 						; x 2 or x 6 depending.
.1176	26 29		rol $29				rol 	zTemp0+1
.1178	18		clc				clc
.1179	a5 28		lda $28				lda 	zTemp0
.117b	69 03		adc #$03			adc 	#3
.117d	85 28		sta $28				sta 	zTemp0
.117f	90 02		bcc $1183			bcc 	_ACNoCarry
.1181	e6 29		inc $29				inc 	zTemp0+1
.1183					_ACNoCarry:
.1183	fa		plx				plx 								; X points to first slot of array parameters
.1184	18		clc				clc
.1185	a5 28		lda $28				lda 	zTemp0
.1187	65 2a		adc $2a				adc 	zTemp1
.1189	95 40		sta $40,x			sta 	NSMantissa0,x
.118b	a5 29		lda $29				lda 	zTemp0+1
.118d	65 2b		adc $2b				adc 	zTemp1+1
.118f	38		sec				sec
.1190	ed 07 04	sbc $0407			sbc 	variableStartPage
.1193	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1195	74 58		stz $58,x			stz 	NSMantissa2,x
.1197	74 64		stz $64,x			stz 	NSMantissa3,x
.1199	74 34		stz $34,x			stz 	NSStatus,x
.119b	74 70		stz $70,x			stz 	NSExponent,x
.119d	7a		ply				ply 	 							; restore code pointer
.119e	4c 2f 10	jmp $102f			jmp 	NextCommand
.11a1					_ACBadIndex:
.11a1	4c 67 15	jmp $1567		jmp	ErrorV_index
.11a4					UnaryAsc:
.11a4	fa		plx				plx
.11a5	5a		phy				phy
.11a6	b5 40		lda $40,x			lda 	NSMantissa0,x 				; string address.
.11a8	85 28		sta $28				sta 	zTemp0
.11aa	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.11ac	85 29		sta $29				sta 	zTemp0+1
.11ae	b2 28		lda ($28)			lda 	(zTemp0) 					; if empty string return zero
.11b0	f0 06		beq $11b8			beq 	_UAExit
.11b2	5a		phy				phy 								; otherwise first character
.11b3	a0 01		ldy #$01			ldy 	#1
.11b5	b1 28		lda ($28),y			lda 	(zTemp0),y
.11b7	7a		ply				ply
.11b8					_UAExit:
.11b8	20 10 2e	jsr $2e10			jsr 	FloatSetByte
.11bb	7a		ply				ply
.11bc	4c 2f 10	jmp $102f			jmp 	NextCommand
.11bf					CommandAssert:
.11bf	fa		plx				plx
.11c0	e0 00		cpx #$00			cpx 	#0 							; check only one element on stack
.11c2	d0 09		bne $11cd			bne 	_CAFail
.11c4	20 30 2e	jsr $2e30			jsr 	FloatIsZero 				; is it zero ?
.11c7	f0 04		beq $11cd			beq 	_CAFail
.11c9	ca		dex				dex
.11ca	4c 2f 10	jmp $102f			jmp 	NextCommand
.11cd					_CAFail:
.11cd	4c c0 14	jmp $14c0		jmp	ErrorV_assert
.11d0					X16_Audio_Parameters8_16:
.11d0	20 d6 11	jsr $11d6			jsr 	X16_Audio_Parameters8_8
.11d3	a4 4d		ldy $4d				ldy 	NSMantissa1+1
.11d5	60		rts				rts
.11d6					X16_Audio_Parameters8_8:
.11d6	a2 01		ldx #$01			ldx 	#1
.11d8	20 49 2a	jsr $2a49			jsr 	FloatIntegerPart
.11db	ca		dex				dex
.11dc	20 49 2a	jsr $2a49			jsr 	FloatIntegerPart
.11df	20 75 19	jsr $1975			jsr 	GetInteger8Bit
.11e2	a6 41		ldx $41				ldx 	NSMantissa0+1
.11e4	a0 00		ldy #$00			ldy 	#0
.11e6	60		rts				rts
.11e7					X16_Audio_Parameters8_String:
.11e7	20 d0 11	jsr $11d0			jsr 	X16_Audio_Parameters8_16 	; get as numbers.
.11ea	da		phx				phx 								; set the voice
.11eb	5a		phy				phy
.11ec	20 6e ff	jsr $ff6e			jsr 	X16_JSRFAR
.11ef	20 0c c0	jsr $c00c			jsr 	X16A_bas_playstringvoice
>11f2	0a						.byte 	X16_AudioCodeBank
.11f3	7a		ply				ply
.11f4	fa		plx				plx
.11f5	86 28		stx $28				stx 	zTemp0
.11f7	84 29		sty $29				sty 	zTemp0+1
.11f9	b2 28		lda ($28)			lda 	(zTemp0) 					; read length
.11fb	e8		inx				inx 								; point YX to first character.
.11fc	d0 01		bne $11ff			bne 	_X16APSSkip
.11fe	c8		iny				iny
.11ff					_X16APSSkip:
.11ff	60		rts				rts
.1200					Unary16Bin:
.1200	fa		plx				plx
.1201	20 7b 19	jsr $197b			jsr 	GetInteger16Bit				; 16 bit int
.1204	a9 10		lda #$10			lda 	#16 						; allocate / set 16 bytes.
.1206	20 5c 20	jsr $205c			jsr 	StringAllocTemp
.1209	a5 29		lda $29				lda 	zTemp0+1
.120b	f0 03		beq $1210			beq 	_UBNoHigh
.120d	20 18 12	jsr $1218			jsr 	_UBWriteBinary
.1210					_UBNoHigh:
.1210	a5 28		lda $28				lda 	zTemp0
.1212	20 18 12	jsr $1218			jsr 	_UBWriteBinary
.1215	4c 2f 10	jmp $102f			jmp 	NextCommand
.1218					_UBWriteBinary:
.1218	5a		phy				phy
.1219	a0 08		ldy #$08			ldy 	#8
.121b					_UBWLoop:
.121b	0a		asl a				asl 	a
.121c	48		pha				pha
.121d	a9 00		lda #$00			lda  	#0
.121f	69 30		adc #$30			adc 	#48
.1221	20 85 20	jsr $2085			jsr 	StringWriteChar
.1224	68		pla				pla
.1225	88		dey				dey
.1226	d0 f3		bne $121b			bne 	_UBWLoop
.1228	7a		ply				ply
.1229	60		rts				rts
.122a					PrintCharacter:
.122a	fa		plx				plx
.122b	b5 40		lda $40,x			lda 	NSMantissa0,x
.122d	ca		dex				dex
.122e	20 b9 1c	jsr $1cb9			jsr 	VectorPrintCharacter
.1231	4c 2f 10	jmp $102f			jmp 	NextCommand
.1234					UnaryChr:
.1234	fa		plx				plx
.1235	20 75 19	jsr $1975			jsr 	GetInteger8Bit 				; get integer to convert.
.1238	48		pha				pha 								; save it and allocate for it
.1239	a9 01		lda #$01			lda 	#1 							; 1 character
.123b	20 5c 20	jsr $205c			jsr 	StringAllocTemp
.123e	a9 01		lda #$01			lda 	#1 							; length 1.
.1240	92 2e		sta ($2e)			sta 	(zsTemp)
.1242	68		pla				pla 								; character code makes string.
.1243	5a		phy				phy
.1244	a0 01		ldy #$01			ldy 	#1
.1246	91 2e		sta ($2e),y			sta 	(zsTemp),y
.1248	7a		ply				ply
.1249	4c 2f 10	jmp $102f			jmp 	NextCommand
.124c					CommandClr:
.124c	fa		plx				plx
.124d	20 53 12	jsr $1253			jsr 	ClearMemory
.1250	4c 2f 10	jmp $102f			jmp 	NextCommand
.1253					ClearMemory:
.1253	ad 05 04	lda $0405			lda 	storeStartHigh 							; erase the work area
.1256	85 29		sta $29				sta 	zTemp0+1
.1258	64 28		stz $28				stz 	zTemp0
.125a	5a		phy				phy
.125b	a0 00		ldy #$00			ldy 	#0
.125d					_ClearLoop1:
.125d	a9 00		lda #$00			lda 	#0
.125f	91 28		sta ($28),y			sta 	(zTemp0),y
.1261	c8		iny				iny
.1262	d0 f9		bne $125d			bne 	_ClearLoop1
.1264	e6 29		inc $29				inc 	zTemp0+1
.1266	a5 29		lda $29				lda 	zTemp0+1
.1268	cd 06 04	cmp $0406			cmp 	storeEndHigh
.126b	d0 f0		bne $125d			bne 	_ClearLoop1
.126d	a9 00		lda #$00			lda 	#((StringTopAddress) & $FF)
.126f	8d 02 04	sta $0402			sta 	0+stringHighMemory
.1272	a9 9d		lda #$9d			lda 	#((StringTopAddress) >> 8) & $FF
.1274	8d 03 04	sta $0403			sta 	1+stringHighMemory
.1277	9c 68 05	stz $0568			stz 	stringInitialised 						; string system not initialised
.127a	a9 ff		lda #$ff			lda 	#((StackTopAddress-1) & $FF)
.127c	85 30		sta $30				sta 	0+runtimeStackPtr
.127e	a9 9e		lda #$9e			lda 	#((StackTopAddress-1) >> 8) & $FF
.1280	85 31		sta $31				sta 	1+runtimeStackPtr
.1282	a9 ff		lda #$ff			lda 	#$FF 									; duff marker in case we try to remove it.
.1284	92 30		sta ($30)			sta 	(runtimeStackPtr)
.1286	7a		ply				ply
.1287	60		rts				rts
.1288					CompareStrings:
.1288	fa		plx				plx
.1289	ca		dex				dex
.128a	b5 40		lda $40,x			lda 	NSMantissa0,x 				; copy strings to zTemp0 and zTemp1
.128c	85 28		sta $28				sta 	zTemp0
.128e	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.1290	85 29		sta $29				sta 	zTemp0+1
.1292	b5 41		lda $41,x			lda 	NSMantissa0+1,x
.1294	85 2a		sta $2a				sta 	zTemp1
.1296	b5 4d		lda $4d,x			lda 	NSMantissa1+1,x
.1298	85 2b		sta $2b				sta 	zTemp1+1
.129a	da		phx				phx
.129b	5a		phy				phy
.129c	b2 28		lda ($28)			lda 	(zTemp0)					; work out number to compare
.129e	d2 2a		cmp ($2a)			cmp 	(zTemp1)
.12a0	90 02		bcc $12a4			bcc 	_CSNIsSmallest 				; as min(len(s1),len(s2))
.12a2	b2 2a		lda ($2a)			lda 	(zTemp1)
.12a4					_CSNIsSmallest:
.12a4	aa		tax				tax 								; count in X
.12a5	f0 0c		beq $12b3			beq 	_CSNMatches 				; if zero already matches as far as we can go.
.12a7	a0 00		ldy #$00			ldy 	#0 							; start from offset 1
.12a9					_CSNCompareString:
.12a9	c8		iny				iny 								; pre increment
.12aa	b1 28		lda ($28),y			lda 	(zTemp0),y
.12ac	d1 2a		cmp ($2a),y			cmp 	(zTemp1),y
.12ae	d0 0a		bne $12ba			bne 	_CSNDifferent 				; numbers are different.
.12b0	ca		dex				dex
.12b1	d0 f6		bne $12a9			bne 	_CSNCompareString 			; compare common characters in two strings.
.12b3					_CSNMatches:
.12b3	38		sec				sec
.12b4	b2 28		lda ($28)			lda 	(zTemp0)					; compare lengths
.12b6	f2 2a		sbc ($2a)			sbc 	(zTemp1)
.12b8	f0 06		beq $12c0			beq 	_CSNSExit 					; if zero, then strings match and exit.
.12ba					_CSNDifferent:
.12ba	a9 ff		lda #$ff			lda 	#$FF
.12bc	90 02		bcc $12c0			bcc 	_CSNSExit
.12be	a9 01		lda #$01			lda 	#$01
.12c0					_CSNSExit:
.12c0	7a		ply				ply
.12c1	fa		plx				plx
.12c2	c9 00		cmp #$00			cmp 	#0 							; set the flags.
.12c4	20 10 2e	jsr $2e10			jsr 	FloatSetByte 				; output the byte
.12c7	4c 2f 10	jmp $102f			jmp 	NextCommand
.12ca					StringConcrete:
.12ca	9c 68 05	stz $0568			stz 	stringInitialised	 		; initialise next usage
.12cd	84 2d		sty $2d				sty 	zTemp2+1 					; save pointer to new string
.12cf	85 2c		sta $2c				sta 	zTemp2
.12d1	b2 2c		lda ($2c)			lda 	(zTemp2) 					; length required
.12d3	4a		lsr a				lsr 	a 							; allow half as much for expansion.
.12d4	18		clc				clc
.12d5	72 2c		adc ($2c)			adc 	(zTemp2)
.12d7	90 02		bcc $12db			bcc 	_SCNoOverflow
.12d9	a9 ff		lda #$ff			lda 	#255
.12db					_SCNoOverflow:
.12db	c9 0a		cmp #$0a			cmp 	#10 						; and a minimum of 10
.12dd	b0 02		bcs $12e1			bcs 	_SCNoMinimum
.12df	a9 0a		lda #$0a			lda 	#10
.12e1					_SCNoMinimum:
.12e1	85 2a		sta $2a				sta 	zTemp1 						; save max length.
.12e3	38		sec				sec
.12e4	ad 02 04	lda $0402			lda		stringHighMemory 			; subtract max length from high memory.
.12e7	e5 2a		sbc $2a				sbc 	zTemp1
.12e9	a8		tay				tay
.12ea	ad 03 04	lda $0403			lda 	stringHighMemory+1
.12ed	e9 00		sbc #$00			sbc 	#0
.12ef	48		pha				pha
.12f0	38		sec				sec 								; subtract 3 more
.12f1	98		tya				tya
.12f2	e9 03		sbc #$03			sbc 	#3
.12f4	8d 02 04	sta $0402			sta 	stringHighMemory 			; to string high memory/zsTemp
.12f7	85 2e		sta $2e				sta 	zsTemp
.12f9	68		pla				pla
.12fa	e9 00		sbc #$00			sbc 	#0
.12fc	8d 03 04	sta $0403			sta 	stringHighMemory+1
.12ff	85 2f		sta $2f				sta 	zsTemp+1
.1301	a5 2a		lda $2a				lda 	zTemp1 						; set max length.
.1303	92 2e		sta ($2e)			sta 	(zsTemp)
.1305	a0 01		ldy #$01			ldy 	#1 							; clear control byte.
.1307	a9 00		lda #$00			lda 	#0
.1309	91 2e		sta ($2e),y			sta 	(zsTemp),y
.130b	a5 2e		lda $2e				lda 	zsTemp 						; new empty string in YA.
.130d	a4 2f		ldy $2f				ldy 	zsTemp+1
.130f	60		rts				rts
.1310					CommandData:
.1310	fa		plx				plx
.1311	98		tya				tya 								; data length +1 added to Y
.1312	38		sec				sec
.1313	71 22		adc ($22),y			adc 	(codePtr),y 				; next instruction
.1315	a8		tay				tay
.1316	4c 2f 10	jmp $102f			jmp 	NextCommand
.1319					CommandDIM:
.1319	fa		plx				plx
.131a	5a		phy				phy
.131b	20 75 19	jsr $1975			jsr 	GetInteger8Bit 				; get the type we are building for (bits 6 & 5)
.131e	8d 08 04	sta $0408			sta 	dimType
.1321	ca		dex				dex 								; this is the number of indices
.1322	20 75 19	jsr $1975			jsr 	GetInteger8Bit
.1325	85 2a		sta $2a				sta 	zTemp1 						; subtract n from X so X points at the *first*
.1327	8a		txa				txa 								; dimension.
.1328	38		sec				sec
.1329	e5 2a		sbc $2a				sbc 	zTemp1
.132b	aa		tax				tax
.132c	a5 2a		lda $2a				lda 	zTemp1 						; number of indices.
.132e	20 42 13	jsr $1342			jsr 	DIMCreateOneLevel 			; create one at this level
.1331	95 40		sta $40,x			sta 	NSMantissa0,x 				; set it as a return address as an integer
.1333	98		tya				tya
.1334	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1336	74 58		stz $58,x			stz 	NSMantissa2,x
.1338	74 64		stz $64,x			stz 	NSMantissa3,x
.133a	74 34		stz $34,x			stz 	NSStatus,x
.133c	74 70		stz $70,x			stz 	NSExponent,x
.133e	7a		ply				ply
.133f	4c 2f 10	jmp $102f			jmp 	NextCommand
.1342					DIMCreateOneLevel:
.1342	a4 32		ldy $32				ldy 	availableMemory 			; push the start of this block on the stack.
.1344	5a		phy				phy
.1345	a4 33		ldy $33				ldy 	availableMemory+1
.1347	5a		phy				phy
.1348	a8		tay				tay 			 					; save current level into Y
.1349	20 7b 19	jsr $197b			jsr		GetInteger16Bit 			; size of dimension to zTemp0
.134c	e6 28		inc $28				inc 	zTemp0 						; bump the size of the dimension as we need one more
.134e	d0 02		bne $1352			bne 	_DCOLNoCarry
.1350	e6 29		inc $29				inc 	zTemp0+1
.1352					_DCOLNoCarry:
.1352	a5 28		lda $28				lda 	zTemp0 						; write out the +1 size of the dimension
.1354	20 f5 13	jsr $13f5			jsr 	DIMWriteByte
.1357	a5 29		lda $29				lda 	zTemp0+1
.1359	20 f5 13	jsr $13f5			jsr 	DIMWriteByte
.135c	ad 08 04	lda $0408			lda 	dimType 					; get type information
.135f	29 7f		and #$7f			and 	#$7F
.1361	c0 01		cpy #$01			cpy 	#1
.1363	f0 02		beq $1367			beq 	_DCOLNoSubLevel
.1365	09 80		ora #$80			ora 	#$80 						; set sublevel bit if there is one.
.1367					_DCOLNoSubLevel:
.1367	20 f5 13	jsr $13f5			jsr 	DIMWriteByte
.136a	a5 32		lda $32				lda 	availableMemory
.136c	85 2a		sta $2a				sta 	zTemp1
.136e	a5 33		lda $33				lda 	availableMemory+1
.1370	85 2b		sta $2b				sta 	zTemp1+1
.1372	a5 28		lda $28				lda 	zTemp0
.1374	85 2c		sta $2c				sta 	zTemp2
.1376	a5 29		lda $29				lda 	zTemp0+1
.1378	85 2d		sta $2d				sta 	zTemp2+1
.137a					_DCOLFillArray:
.137a	20 d9 13	jsr $13d9			jsr 	DIMWriteElement 			; write out an element, could be a sub-level or individual data
.137d	a5 28		lda $28				lda 	zTemp0 						; decrement one from count.
.137f	d0 02		bne $1383			bne 	_DCOLNoBorrow
.1381	c6 29		dec $29				dec 	zTemp0+1
.1383					_DCOLNoBorrow:
.1383	c6 28		dec $28				dec 	zTemp0
.1385	a5 28		lda $28				lda 	zTemp0 						; until completed.
.1387	05 29		ora $29				ora 	zTemp0+1
.1389	d0 ef		bne $137a			bne 	_DCOLFillArray
.138b	c0 01		cpy #$01			cpy 	#1
.138d	f0 42		beq $13d1			beq 	_DCOLExit
.138f					_DCOLRecursionLoop:
.138f	da		phx				phx 								; save XY
.1390	5a		phy				phy
.1391	a5 2a		lda $2a				lda 	zTemp1 						; push zTemp1 (position) zTemp2 (count)
.1393	48		pha				pha
.1394	a5 2b		lda $2b				lda 	zTemp1+1
.1396	48		pha				pha
.1397	a5 2c		lda $2c				lda 	zTemp2
.1399	48		pha				pha
.139a	a5 2d		lda $2d				lda 	zTemp2+1
.139c	48		pha				pha
.139d	88		dey				dey  								; lower level -> A
.139e	98		tya				tya
.139f	e8		inx				inx 								; next index size
.13a0	20 42 13	jsr $1342			jsr 	DIMCreateOneLevel 			; create a level, return in YA
.13a3	fa		plx				plx 								; restore zTemp2 (count) and zTemp1 (position)
.13a4	86 2d		stx $2d				stx 	zTemp2+1
.13a6	fa		plx				plx
.13a7	86 2c		stx $2c				stx 	zTemp2
.13a9	fa		plx				plx
.13aa	86 2b		stx $2b				stx 	zTemp1+1
.13ac	fa		plx				plx
.13ad	86 2a		stx $2a				stx 	zTemp1
.13af	92 2a		sta ($2a)			sta 	(zTemp1) 					; write out position
.13b1	98		tya				tya
.13b2	a0 01		ldy #$01			ldy 	#1
.13b4	91 2a		sta ($2a),y			sta 	(zTemp1),y
.13b6	7a		ply				ply 								; restore XY
.13b7	fa		plx				plx
.13b8	18		clc				clc
.13b9	a5 2a		lda $2a				lda 	zTemp1 						; add 2 to zTemp1
.13bb	69 02		adc #$02			adc 	#2
.13bd	85 2a		sta $2a				sta 	zTemp1
.13bf	90 02		bcc $13c3			bcc 	_DCOLRNoCarry
.13c1	e6 2b		inc $2b				inc 	zTemp1+1
.13c3					_DCOLRNoCarry:
.13c3	a5 2c		lda $2c				lda 	zTemp2 						; decrement one from count in zTemp2
.13c5	d0 02		bne $13c9			bne 	_DCOLRNoBorrow
.13c7	c6 2d		dec $2d				dec 	zTemp2+1
.13c9					_DCOLRNoBorrow:
.13c9	c6 2c		dec $2c				dec 	zTemp2
.13cb	a5 2c		lda $2c				lda 	zTemp2 						; until completed.
.13cd	05 2d		ora $2d				ora 	zTemp2+1
.13cf	d0 be		bne $138f			bne 	_DCOLRecursionLoop
.13d1					_DCOLExit:
.13d1	68		pla				pla 								; get MSB, make offset again
.13d2	38		sec				sec
.13d3	ed 07 04	sbc $0407			sbc 	variableStartPage
.13d6	a8		tay				tay
.13d7	68		pla				pla 								; YA now contains offset address.
.13d8	60		rts				rts
.13d9					DIMWriteElement:
.13d9	da		phx				phx
.13da	a2 02		ldx #$02			ldx	 	#2 							; work out size is 2 or 6
.13dc	c0 01		cpy #$01			cpy 	#1 							; do we have a sub level, if so 2.
.13de	d0 0b		bne $13eb			bne 	_DIMWENotFloat
.13e0	ad 08 04	lda $0408			lda 	dimType
.13e3	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16
.13e5	c9 00		cmp #$00			cmp 	#NSSIFloat
.13e7	d0 02		bne $13eb			bne 	_DIMWENotFloat
.13e9	a2 06		ldx #$06			ldx 	#6
.13eb					_DIMWENotFloat:
.13eb	a9 00		lda #$00			lda 	#0
.13ed	20 f5 13	jsr $13f5			jsr 	DIMWriteByte
.13f0	ca		dex				dex
.13f1	d0 f8		bne $13eb			bne 	_DIMWENotFloat
.13f3	fa		plx				plx
.13f4	60		rts				rts
.13f5					DIMWriteByte:
.13f5	92 32		sta ($32)			sta 	(availableMemory)
.13f7	e6 32		inc $32				inc 	availableMemory
.13f9	d0 0b		bne $1406			bne 	_DIMWBSkip
.13fb	e6 33		inc $33				inc 	availableMemory+1
.13fd	48		pha				pha
.13fe	a5 33		lda $33				lda 	availableMemory+1 			; check out of memory
.1400	cd 03 04	cmp $0403			cmp 	stringHighMemory+1
.1403	b0 02		bcs $1407			bcs 	_DIMWBMemory
.1405	68		pla				pla
.1406					_DIMWBSkip:
.1406	60		rts				rts
.1407					_DIMWBMemory:
.1407	4c 7a 15	jmp $157a		jmp	ErrorV_memory
.0408					dimType:
>0408							.fill 	1
.140a					CommandEnd:
.140a	fa		plx				plx
.140b	86 28		stx $28				stx 	zTemp0
.140d	4c ff ff	jmp $ffff			jmp 	$FFFF
.1410					Unimplemented:
.1410	4c ad 14	jmp $14ad			jmp 	ErrorV_unimplemented
.1413					ErrorHandler:
.1413	98		tya				tya
.1414	18		clc				clc
.1415	65 22		adc $22				adc 	codePtr
.1417	85 22		sta $22				sta 	codePtr
.1419	90 02		bcc $141d			bcc 	_EHNoCarry
.141b	e6 23		inc $23				inc 	codePtr+1
.141d					_EHNoCarry:
.141d	68		pla				pla
.141e	7a		ply				ply
.141f	85 28		sta $28				sta 	zTemp0
.1421	84 29		sty $29				sty 	zTemp0+1
.1423	a2 00		ldx #$00			ldx 	#0 							; output to channel #0
.1425	a0 01		ldy #$01			ldy 	#1
.1427					_EHDisplayMsg:
.1427	b1 28		lda ($28),y			lda 	(zTemp0),y
.1429	20 d1 25	jsr $25d1			jsr 	XPrintCharacterToChannel
.142c	c8		iny				iny
.142d	b1 28		lda ($28),y			lda 	(zTemp0),y
.142f	d0 f6		bne $1427			bne 	_EHDisplayMsg
.1431	a9 20		lda #$20			lda 	#32
.1433	20 d1 25	jsr $25d1			jsr 	XPrintCharacterToChannel
.1436	a9 40		lda #$40			lda 	#64
.1438	20 d1 25	jsr $25d1			jsr 	XPrintCharacterToChannel
.143b	a9 20		lda #$20			lda 	#32
.143d	20 d1 25	jsr $25d1			jsr 	XPrintCharacterToChannel
.1440	20 45 14	jsr $1445			jsr 	EHDisplayCodePtr
.1443	80 fe		bra $1443	_EHStop:bra 	_EHStop
.1445					EHDisplayCodePtr:
.1445	a9 20		lda #$20			lda 	#32
.1447	20 d1 25	jsr $25d1			jsr 	XPrintCharacterToChannel
.144a	38		sec				sec
.144b	a5 23		lda $23				lda 	codePtr+1 					; display the p-code address of the error.
.144d	ed 04 04	sbc $0404			sbc 	runtimeHigh
.1450	20 59 14	jsr $1459			jsr 	_EHDisplayHex
.1453	a5 22		lda $22				lda 	codePtr
.1455	20 59 14	jsr $1459			jsr 	_EHDisplayHex
.1458	60		rts				rts
.1459					_EHDisplayHex:
.1459	48		pha				pha
.145a	4a		lsr a				lsr 	a
.145b	4a		lsr a				lsr 	a
.145c	4a		lsr a				lsr 	a
.145d	4a		lsr a				lsr 	a
.145e	20 62 14	jsr $1462			jsr 	_EHDisplayNibble
.1461	68		pla				pla
.1462					_EHDisplayNibble:
.1462	29 0f		and #$0f			and 	#15
.1464	c9 0a		cmp #$0a			cmp 	#10
.1466	90 02		bcc $146a			bcc 	_EHNotHex
.1468	69 06		adc #$06			adc 	#6
.146a					_EHNotHex:
.146a	69 30		adc #$30			adc 	#48
.146c	4c d1 25	jmp $25d1			jmp 	XPrintCharacterToChannel
.146f					ErrorV_range:
.146f	20 13 14	jsr $1413		jsr	ErrorHandler
>1472	4f 55 54 20 4f 46 20 52			.text	"OUT OF RANGE",0
>147a	41 4e 47 45 00
.147f					ErrorV_value:
.147f	20 13 14	jsr $1413		jsr	ErrorHandler
>1482	42 41 44 20 56 41 4c 55			.text	"BAD VALUE",0
>148a	45 00
.148c					ErrorV_syntax:
.148c	20 13 14	jsr $1413		jsr	ErrorHandler
>148f	53 59 4e 54 41 58 20 45			.text	"SYNTAX ERROR",0
>1497	52 52 4f 52 00
.149c					ErrorV_type:
.149c	20 13 14	jsr $1413		jsr	ErrorHandler
>149f	54 59 50 45 20 4d 49 53			.text	"TYPE MISMATCH",0
>14a7	4d 41 54 43 48 00
.14ad					ErrorV_unimplemented:
.14ad	20 13 14	jsr $1413		jsr	ErrorHandler
>14b0	4e 4f 54 20 49 4d 50 4c			.text	"NOT IMPLEMENTED",0
>14b8	45 4d 45 4e 54 45 44 00
.14c0					ErrorV_assert:
.14c0	20 13 14	jsr $1413		jsr	ErrorHandler
>14c3	41 53 53 45 52 54 20 46			.text	"ASSERT FAIL",0
>14cb	41 49 4c 00
.14cf					ErrorV_line:
.14cf	20 13 14	jsr $1413		jsr	ErrorHandler
>14d2	55 4e 4b 4e 4f 57 4e 20			.text	"UNKNOWN LINE NUMBER",0
>14da	4c 49 4e 45 20 4e 55 4d 42 45 52 00
.14e6					ErrorV_internal:
.14e6	20 13 14	jsr $1413		jsr	ErrorHandler
>14e9	49 4e 54 45 52 4e 41 4c			.text	"INTERNAL ERROR",0
>14f1	20 45 52 52 4f 52 00
.14f8					ErrorV_divzero:
.14f8	20 13 14	jsr $1413		jsr	ErrorHandler
>14fb	44 49 56 49 44 45 20 42			.text	"DIVIDE BY ZERO",0
>1503	59 20 5a 45 52 4f 00
.150a					ErrorV_structure:
.150a	20 13 14	jsr $1413		jsr	ErrorHandler
>150d	53 54 52 55 43 54 55 52			.text	"STRUCTURE IMBALANCE",0
>1515	45 20 49 4d 42 41 4c 41 4e 43 45 00
.1521					ErrorV_stop:
.1521	20 13 14	jsr $1413		jsr	ErrorHandler
>1524	50 52 4f 47 52 41 4d 20			.text	"PROGRAM STOPPED",0
>152c	53 54 4f 50 50 45 44 00
.1534					ErrorV_data:
.1534	20 13 14	jsr $1413		jsr	ErrorHandler
>1537	4f 55 54 20 4f 46 20 44			.text	"OUT OF DATA",0
>153f	41 54 41 00
.1543					ErrorV_undeclared:
.1543	20 13 14	jsr $1413		jsr	ErrorHandler
>1546	55 4e 4b 4e 4f 57 4e 20			.text	"UNKNOWN ARRAY",0
>154e	41 52 52 41 59 00
.1554					ErrorV_redefine:
.1554	20 13 14	jsr $1413		jsr	ErrorHandler
>1557	41 52 52 41 59 20 52 45			.text	"ARRAY REDEFINED",0
>155f	44 45 46 49 4e 45 44 00
.1567					ErrorV_index:
.1567	20 13 14	jsr $1413		jsr	ErrorHandler
>156a	42 41 44 20 41 52 52 41			.text	"BAD ARRAY INDEX",0
>1572	59 20 49 4e 44 45 58 00
.157a					ErrorV_memory:
.157a	20 13 14	jsr $1413		jsr	ErrorHandler
>157d	4f 55 54 20 4f 46 20 4d			.text	"OUT OF MEMORY",0
>1585	45 4d 4f 52 59 00
.158b					ErrorV_channel:
.158b	20 13 14	jsr $1413		jsr	ErrorHandler
>158e	49 4e 50 55 54 2f 4f 55			.text	"INPUT/OUTPUT ERROR",0
>1596	54 50 55 54 20 45 52 52 4f 52 00
.15a1					CommandFor:
.15a1	fa		plx				plx
.15a2	a9 d3		lda #$d3			lda 	#FRAME_FOR 					; open frame
.15a4	20 68 16	jsr $1668			jsr 	StackOpenFrame
.15a7	20 ac 1a	jsr $1aac			jsr 	StackSaveCurrentPosition 	; normalise to Y=0 and save position.
.15aa	a0 07		ldy #$07			ldy 	#7 							; copy step out
.15ac	20 06 16	jsr $1606			jsr 	CopyTOSToOffsetY
.15af	ca		dex				dex
.15b0	a0 0d		ldy #$0d			ldy 	#13 						; copy terminal value.
.15b2	20 06 16	jsr $1606			jsr 	CopyTOSToOffsetY
.15b5	ca		dex				dex
.15b6	b5 4c		lda $4c,x			lda 	NSMantissa1,x 				; bit 15 of reference indicates type int16
.15b8	29 80		and #$80			and 	#$80
.15ba	a0 04		ldy #$04			ldy 	#4
.15bc	91 30		sta ($30),y			sta 	(runtimeStackPtr),y
.15be	b5 40		lda $40,x			lda 	NSMantissa0,x 				; copy the reference address
.15c0	a0 05		ldy #$05			ldy 	#5 							; adjusted to be a real address
.15c2	91 30		sta ($30),y			sta 	(runtimeStackPtr),y
.15c4	85 28		sta $28				sta 	zTemp0 						; also to zTemp0
.15c6	c8		iny				iny
.15c7	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.15c9	18		clc				clc
.15ca	29 7f		and #$7f			and 	#$7F 						; throw the type bit.
.15cc	91 30		sta ($30),y			sta 	(runtimeStackPtr),y
.15ce	6d 07 04	adc $0407			adc 	variableStartPage 			; point to variable page.
.15d1	85 29		sta $29				sta 	zTemp0+1
.15d3	ca		dex				dex 								; throw reference.
.15d4	a0 05		ldy #$05			ldy 	#5 							; check the index, step and terminal values
.15d6	b1 28		lda ($28),y			lda 	(zTemp0),y 					; are all +ve integers, sign bits first.
.15d8	a0 0c		ldy #$0c			ldy 	#12
.15da	11 30		ora ($30),y			ora 	(runtimeStackPtr),y
.15dc	a0 12		ldy #$12			ldy 	#18
.15de	11 30		ora ($30),y			ora 	(runtimeStackPtr),y
.15e0	29 80		and #$80			and 	#$80 						; only interested in sign bit.
.15e2	88		dey				dey 								; now the exponents.
.15e3	11 28		ora ($28),y			ora 	(zTemp0),y
.15e5	a0 0b		ldy #$0b			ldy 	#11
.15e7	11 30		ora ($30),y			ora 	(runtimeStackPtr),y
.15e9	a0 11		ldy #$11			ldy 	#17
.15eb	11 30		ora ($30),y			ora 	(runtimeStackPtr),y
.15ed	a0 08		ldy #$08			ldy 	#8 							; step must be 1 byte.
.15ef	11 30		ora ($30),y			ora 	(runtimeStackPtr),y
.15f1	c8		iny				iny
.15f2	11 30		ora ($30),y			ora 	(runtimeStackPtr),y
.15f4	c8		iny				iny
.15f5	11 30		ora ($30),y			ora 	(runtimeStackPtr),y
.15f7	d0 08		bne $1601			bne 	_CFNoOptimise
.15f9	a0 04		ldy #$04			ldy 	#4 							; set the runtime stack pointer optimisation flag.
.15fb	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.15fd	09 40		ora #$40			ora 	#$40
.15ff	91 30		sta ($30),y			sta 	(runtimeStackPtr),y
.1601					_CFNoOptimise:
.1601	a0 00		ldy #$00			ldy 	#0
.1603	4c 2f 10	jmp $102f			jmp 	NextCommand
.1606					CopyTOSToOffsetY:
.1606	b5 40		lda $40,x			lda 	NSMantissa0,x
.1608	91 30		sta ($30),y			sta 	(runtimeStackPtr),y
.160a	c8		iny				iny
.160b	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.160d	91 30		sta ($30),y			sta 	(runtimeStackPtr),y
.160f	c8		iny				iny
.1610	b5 58		lda $58,x			lda 	NSMantissa2,x
.1612	91 30		sta ($30),y			sta 	(runtimeStackPtr),y
.1614	c8		iny				iny
.1615	b5 64		lda $64,x			lda 	NSMantissa3,x
.1617	91 30		sta ($30),y			sta 	(runtimeStackPtr),y
.1619	c8		iny				iny
.161a	b5 70		lda $70,x			lda 	NSExponent,x
.161c	91 30		sta ($30),y			sta 	(runtimeStackPtr),y
.161e	c8		iny				iny
.161f	b5 34		lda $34,x			lda 	NSStatus,x
.1621	91 30		sta ($30),y			sta 	(runtimeStackPtr),y
.1623	60		rts				rts
.1624					MoveObjectForward:
.1624	b2 25		lda ($25)			lda 	(objPtr) 					; get next
.1626	c9 ff		cmp #$ff			cmp 	#$FF
.1628	f0 36		beq $1660			beq 	_MOFEnd
.162a	c9 40		cmp #$40			cmp 	#$40 						; 00-3F
.162c	90 24		bcc $1652			bcc 	_MOFAdvance1 				; forward 1
.162e	a0 02		ldy #$02			ldy 	#2 							; 40-6F
.1630	c9 70		cmp #$70			cmp 	#$70 						; forward 2
.1632	90 20		bcc $1654			bcc 	_MOFAdvanceY
.1634	c9 ca		cmp #$ca			cmp 	#PCD_STARTSYSTEM 			; 70 - System tokens.
.1636	90 1a		bcc $1652			bcc 	_MOFAdvance1 				; forward 1
.1638	a8		tay				tay 								; read the size.
.1639	b9 91 1b	lda $1b91,y			lda 	MOFSizeTable-PCD_STARTSYSTEM,y
.163c	a8		tay				tay
.163d	c8		iny				iny 								; add 1 for the system token.
.163e	d0 14		bne $1654			bne 	_MOFAdvanceY 				; if 0, was $FF thus a string/data skip.
.1640	a0 01		ldy #$01			ldy 	#1 							; get length byte
.1642	b1 25		lda ($25),y			lda 	(objPtr),y
.1644	a8		tay				tay 								; into Y.
.1645	18		clc				clc
.1646	a5 25		lda $25				lda 	objPtr						; add 2 to the object pointer
.1648	69 02		adc #$02			adc 	#2
.164a	85 25		sta $25				sta 	objPtr
.164c	90 02		bcc $1650			bcc 	_MOFNoCarry1
.164e	e6 26		inc $26				inc 	objPtr+1
.1650					_MOFNoCarry1:
.1650	80 02		bra $1654			bra 	_MOFAdvanceY
.1652					_MOFAdvance1:
.1652	a0 01		ldy #$01			ldy 	#1
.1654					_MOFAdvanceY:
.1654	98		tya				tya 								; add X to objPtr
.1655	18		clc				clc
.1656	65 25		adc $25				adc 	objPtr
.1658	85 25		sta $25				sta 	objPtr
.165a	90 02		bcc $165e			bcc 	_MOFNoCarry2
.165c	e6 26		inc $26				inc 	objPtr+1
.165e					_MOFNoCarry2:
.165e	18		clc				clc 								; not completed.
.165f	60		rts				rts
.1660					_MOFEnd:
.1660	e6 25		inc $25				inc 	objPtr
.1662	d0 02		bne $1666			bne 	_MOFENoCarry
.1664	e6 26		inc $26				inc 	objPtr+1
.1666					_MOFENoCarry:
.1666	38		sec				sec
.1667	60		rts				rts
.1668					StackOpenFrame:
.1668	48		pha				pha 								; save frame marker
.1669	29 1f		and #$1f			and 	#$1F 						; bytes required.
.166b	85 28		sta $28				sta 	zTemp0
.166d	38		sec				sec 								; subtract from runtime stack pointer.
.166e	a5 30		lda $30				lda		runtimeStackPtr
.1670	e5 28		sbc $28				sbc 	zTemp0
.1672	85 30		sta $30				sta 	runtimeStackPtr
.1674	a5 31		lda $31				lda		runtimeStackPtr+1
.1676	e9 00		sbc #$00			sbc 	#0
.1678	85 31		sta $31				sta 	runtimeStackPtr+1
.167a	68		pla				pla 								; put frame marker at +0
.167b	92 30		sta ($30)			sta 	(runtimeStackPtr)
.167d	60		rts				rts
.167e					StackCloseFrame:
.167e	b2 30		lda ($30)			lda 	(runtimeStackPtr)			; get frame marker
.1680	29 1f		and #$1f			and 	#$1F 						; size
.1682	18		clc				clc
.1683	65 30		adc $30				adc 	runtimeStackPtr
.1685	85 30		sta $30				sta 	runtimeStackPtr
.1687	90 02		bcc $168b			bcc 	_SCFNoCarry
.1689	e6 31		inc $31				inc 	runtimeStackPtr+1
.168b					_SCFNoCarry:
.168b	60		rts				rts
.168c					StackFindFrame:
.168c	8d 09 04	sta $0409			sta 	requiredFrame
.168f					_SFFLoop:
.168f	b2 30		lda ($30)			lda 	(runtimeStackPtr) 			; get TOS
.1691	c9 ff		cmp #$ff			cmp 	#$FF 						; if found $FF then this is a fail.
.1693	f0 10		beq $16a5			beq 	SCFFail
.1695	cd 09 04	cmp $0409			cmp 	requiredFrame 				; found this type ?
.1698	f0 05		beq $169f			beq 	_SFFFound
.169a	20 7e 16	jsr $167e			jsr 	StackCloseFrame 			; close the top frame
.169d	80 f0		bra $168f			bra 	_SFFLoop 					; and try te next.
.169f					_SFFFound:
.169f	60		rts				rts
.16a0					StackCheckFrame:
.16a0	d2 30		cmp ($30)			cmp 	(runtimeStackPtr) 			; matches current frame
.16a2	d0 01		bne $16a5			bne 	SCFFail
.16a4	60		rts				rts
.16a5					SCFFail:
.16a5	4c 0a 15	jmp $150a		jmp	ErrorV_structure
.0409					requiredFrame:
>0409							.fill 	1
.16a8					UnaryFre:
.16a8	fa		plx				plx
.16a9	20 0e 2e	jsr $2e0e			jsr 	FloatSetZero 				; zero the result (32 bit integer)
.16ac	38		sec				sec
.16ad	ad 02 04	lda $0402			lda 	stringHighMemory 			; calculate the free memory.
.16b0	ed 00 04	sbc $0400			sbc 	stringLowMemory
.16b3	95 40		sta $40,x			sta		NSMantissa0,x
.16b5	ad 03 04	lda $0403			lda 	stringHighMemory+1
.16b8	ed 01 04	sbc $0401			sbc 	stringLowMemory+1
.16bb	95 4c		sta $4c,x			sta		NSMantissa1,x
.16bd	4c 2f 10	jmp $102f			jmp 	NextCommand
.16c0					CommandGet:
.16c0	fa		plx				plx
.16c1	e8		inx				inx
.16c2	a9 01		lda #$01			lda 	#1 							; 1 character space
.16c4	20 5c 20	jsr $205c			jsr 	StringAllocTemp
.16c7	20 c2 1c	jsr $1cc2			jsr 	VectorGetCharacter 			; get a character
.16ca	c9 00		cmp #$00			cmp 	#0
.16cc	f0 09		beq $16d7			beq 	_CGNone
.16ce	5a		phy				phy
.16cf	a0 01		ldy #$01			ldy 	#1 							; store char
.16d1	91 2e		sta ($2e),y			sta 	(zsTemp),y
.16d3	98		tya				tya 								; store length.
.16d4	92 2e		sta ($2e)			sta 	(zsTemp)
.16d6	7a		ply				ply
.16d7					_CGNone:
.16d7	4c 2f 10	jmp $102f			jmp 	NextCommand
.16da					CommandGosub:
.16da	fa		plx				plx
.16db	a9 e4		lda #$e4			lda 	#FRAME_GOSUB
.16dd	20 68 16	jsr $1668			jsr 	StackOpenFrame
.16e0	20 ac 1a	jsr $1aac			jsr 	StackSaveCurrentPosition
.16e3	4c f9 16	jmp $16f9			jmp 	PerformGOTO
.16e6					CommandReturn:
.16e6	fa		plx				plx
.16e7	a9 e4		lda #$e4			lda 	#FRAME_GOSUB
.16e9	20 8c 16	jsr $168c			jsr 	StackFindFrame
.16ec	20 c2 1a	jsr $1ac2			jsr 	StackLoadCurrentPosition
.16ef	c8		iny				iny
.16f0	c8		iny				iny
.16f1	c8		iny				iny
.16f2	20 7e 16	jsr $167e			jsr 	StackCloseFrame
.16f5	4c 2f 10	jmp $102f			jmp 	NextCommand
.16f8					CommandGoto:
.16f8	fa		plx				plx
.16f9					PerformGOTO:
.16f9	c8		iny				iny
.16fa	c8		iny				iny 								; push MSB of offset on stack
.16fb	b1 22		lda ($22),y			lda 	(codePtr),y
.16fd	48		pha				pha
.16fe	88		dey				dey 								; point LSB of offset
.16ff	18		clc				clc 								; add LSB
.1700	b1 22		lda ($22),y			lda 	(codePtr),y
.1702	65 22		adc $22				adc 	codePtr
.1704	85 22		sta $22				sta 	codePtr
.1706	68		pla				pla 								; restore offset MSB and add
.1707	65 23		adc $23				adc 	codePtr+1
.1709	85 23		sta $23				sta 	codePtr+1
.170b	88		dey				dey 								; fix up.
.170c	4c 2f 10	jmp $102f			jmp 	NextCommand
.170f					CommandGotoZ:
.170f	fa		plx				plx
.1710	20 30 2e	jsr $2e30			jsr 	FloatIsZero
.1713	ca		dex				dex
.1714	c9 00		cmp #$00			cmp 	#0
.1716	f0 e1		beq $16f9			beq 	PerformGOTO
.1718	c8		iny				iny
.1719	c8		iny				iny
.171a	c8		iny				iny
.171b	4c 2f 10	jmp $102f			jmp 	NextCommand
.171e					CommandGotoNZ:
.171e	fa		plx				plx
.171f	20 30 2e	jsr $2e30			jsr 	FloatIsZero
.1722	ca		dex				dex
.1723	c9 00		cmp #$00			cmp 	#0
.1725	d0 d2		bne $16f9			bne 	PerformGOTO
.1727	c8		iny				iny
.1728	c8		iny				iny
.1729	c8		iny				iny
.172a	4c 2f 10	jmp $102f			jmp 	NextCommand
.172d					Command_PSET:
.172d	fa		plx				plx
.172e	5a		phy				phy
.172f	20 75 19	jsr $1975			jsr 	GetInteger8Bit 				; get the colour
.1732	48		pha				pha
.1733	a2 00		ldx #$00			ldx 	#0 							; copy 0/1 to r0,r1
.1735	a0 02		ldy #$02			ldy 	#X16_r0
.1737	20 b9 17	jsr $17b9			jsr 	GraphicsCopy2
.173a	20 ff fe	jsr $feff			jsr 	X16_FB_cursor_position 		; set position.
.173d	68		pla				pla 								; set pixel.
.173e	20 0b ff	jsr $ff0b			jsr 	X16_FB_set_pixel
.1741	7a		ply				ply
.1742	a2 ff		ldx #$ff			ldx 	#$FF
.1744	4c 2f 10	jmp $102f			jmp 	NextCommand
.1747					Command_LINE:
.1747	fa		plx				plx
.1748	5a		phy				phy
.1749	20 ac 17	jsr $17ac			jsr 	GraphicsColour
.174c	a2 00		ldx #$00			ldx 	#0 							; copy 0/1/2/3 to r0,1,2,3
.174e	a0 02		ldy #$02			ldy 	#X16_r0
.1750	20 b6 17	jsr $17b6			jsr 	GraphicsCopy4
.1753	20 2c ff	jsr $ff2c			jsr 	X16_GRAPH_draw_line
.1756	7a		ply				ply
.1757	a2 ff		ldx #$ff			ldx 	#$FF
.1759	4c 2f 10	jmp $102f			jmp 	NextCommand
.175c					Command_RECT:
.175c	fa		plx				plx
.175d	5a		phy				phy
.175e	20 cd 17	jsr $17cd			jsr 	GraphicsRectCoords
.1761	38		sec				sec
.1762	20 2f ff	jsr $ff2f			jsr 	X16_GRAPH_draw_rect
.1765	7a		ply				ply
.1766	a2 ff		ldx #$ff			ldx 	#$FF
.1768	4c 2f 10	jmp $102f			jmp 	NextCommand
.176b					Command_FRAME:
.176b	fa		plx				plx
.176c	5a		phy				phy
.176d	20 cd 17	jsr $17cd			jsr 	GraphicsRectCoords
.1770	18		clc				clc
.1771	20 2f ff	jsr $ff2f			jsr 	X16_GRAPH_draw_rect
.1774	7a		ply				ply
.1775	a2 ff		ldx #$ff			ldx 	#$FF
.1777	4c 2f 10	jmp $102f			jmp 	NextCommand
.177a					Command_CHAR:
.177a	fa		plx				plx
.177b	5a		phy				phy
.177c	ca		dex				dex  								; set the draw colour
.177d	20 ac 17	jsr $17ac			jsr 	GraphicsColour
.1780	a2 00		ldx #$00			ldx 	#0 							; copy 0/1 to r0,r1
.1782	a0 02		ldy #$02			ldy 	#X16_r0
.1784	20 b9 17	jsr $17b9			jsr 	GraphicsCopy2
.1787	a5 43		lda $43				lda 	NSMantissa0+3 				; copy string address to zTemp0
.1789	85 28		sta $28				sta 	zTemp0
.178b	a5 4f		lda $4f				lda 	NSMantissa1+3
.178d	85 29		sta $29				sta 	zTemp0+1
.178f	b2 28		lda ($28)			lda 	(zTemp0) 					; count of chars to zTemp1
.1791	85 2a		sta $2a				sta 	zTemp1
.1793					_CCLoop:
.1793	a5 2a		lda $2a				lda 	zTemp1 						; done all chars ?
.1795	f0 0f		beq $17a6			beq 	_CCExit
.1797	c6 2a		dec $2a				dec 	zTemp1 						; dec counter
.1799	e6 28		inc $28				inc 	zTemp0 						; pre-bump pointer
.179b	d0 02		bne $179f			bne 	_CCNoCarry
.179d	e6 29		inc $29				inc 	zTemp0+1
.179f					_CCNoCarry:
.179f	b2 28		lda ($28)			lda 	(zTemp0) 					; get character
.17a1	20 41 ff	jsr $ff41			jsr 	X16_GRAPH_put_char 			; write it
.17a4	80 ed		bra $1793			bra 	_CCLoop						; go round.
.17a6					_CCExit:
.17a6	7a		ply				ply
.17a7	a2 ff		ldx #$ff			ldx 	#$FF
.17a9	4c 2f 10	jmp $102f			jmp 	NextCommand
.17ac					GraphicsColour:
.17ac	20 75 19	jsr $1975			jsr 	GetInteger8Bit
.17af	aa		tax				tax
.17b0	a0 00		ldy #$00			ldy 	#0
.17b2	20 29 ff	jsr $ff29			jsr 	X16_GRAPH_set_colors
.17b5	60		rts				rts
.17b6					GraphicsCopy4:
.17b6	20 b9 17	jsr $17b9			jsr 	GraphicsCopy2
.17b9					GraphicsCopy2:
.17b9	20 bc 17	jsr $17bc			jsr 	GraphicsCopy1
.17bc					GraphicsCopy1:
.17bc	20 49 2a	jsr $2a49			jsr 	FloatIntegerPart
.17bf	b5 40		lda $40,x			lda 	NSMantissa0,x
.17c1	99 00 00	sta $0000,y			sta 	0,y
.17c4	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.17c6	99 01 00	sta $0001,y			sta 	1,y
.17c9	e8		inx				inx
.17ca	c8		iny				iny
.17cb	c8		iny				iny
.17cc	60		rts				rts
.17cd					GraphicsRectCoords:
.17cd	20 ac 17	jsr $17ac			jsr 	GraphicsColour 				; set colour
.17d0	a2 00		ldx #$00			ldx 	#0 							; copy in order.
.17d2	a0 02		ldy #$02			ldy 	#X16_r0
.17d4	20 b6 17	jsr $17b6			jsr 	GraphicsCopy4
.17d7	a2 02		ldx #$02			ldx 	#X16_r0 					; sort r0/r2
.17d9	20 e6 17	jsr $17e6			jsr 	_GRCSortSubtract
.17dc	a2 04		ldx #$04			ldx 	#X16_r1 					; sort r1/r3
.17de	20 e6 17	jsr $17e6			jsr 	_GRCSortSubtract
.17e1	74 08		stz $08,x			stz 	8,x 						; zero rounding
.17e3	74 09		stz $09,x			stz 	9,x
.17e5	60		rts				rts
.17e6					_GRCSortSubtract:
.17e6	b5 04		lda $04,x			lda 	4,x 						; calculate r2-r0
.17e8	d5 00		cmp $00,x			cmp 	0,x
.17ea	b5 05		lda $05,x			lda 	5,x
.17ec	f5 01		sbc $01,x			sbc 	1,x
.17ee	b0 08		bcs $17f8			bcs 	_GRCNoSwap 					; >= swap.
.17f0	20 06 18	jsr $1806			jsr 	_GRCSwapByte 				; swap 0/2
.17f3	e8		inx				inx
.17f4	20 06 18	jsr $1806			jsr 	_GRCSwapByte 				; swap 1/3
.17f7	ca		dex				dex
.17f8					_GRCNoSwap:
.17f8	38		sec				sec 								; calculate width/height into 4,5
.17f9	b5 04		lda $04,x			lda 	4,x
.17fb	f5 00		sbc $00,x			sbc 	0,x
.17fd	95 04		sta $04,x			sta 	4,x
.17ff	b5 05		lda $05,x			lda 	5,x
.1801	f5 01		sbc $01,x			sbc 	1,x
.1803	95 05		sta $05,x			sta 	5,x
.1805	60		rts				rts
.1806					_GRCSwapByte:
.1806	b5 04		lda $04,x			lda 	4,x
.1808	48		pha				pha
.1809	b5 00		lda $00,x			lda 	0,x
.180b	95 04		sta $04,x			sta 	4,x
.180d	68		pla				pla
.180e	95 00		sta $00,x			sta 	0,x
.1810	60		rts				rts
.1811					Unary16Hex:
.1811	fa		plx				plx
.1812	20 7b 19	jsr $197b			jsr 	GetInteger16Bit
.1815	a9 04		lda #$04			lda 	#4 							; allocate / set 4 bytes.
.1817	20 5c 20	jsr $205c			jsr 	StringAllocTemp
.181a	a5 29		lda $29				lda 	zTemp0+1
.181c	f0 03		beq $1821			beq 	_UHNoHigh
.181e	20 29 18	jsr $1829			jsr 	_UHWriteHex
.1821					_UHNoHigh:
.1821	a5 28		lda $28				lda 	zTemp0
.1823	20 29 18	jsr $1829			jsr 	_UHWriteHex
.1826	4c 2f 10	jmp $102f			jmp 	NextCommand
.1829					_UHWriteHex:
.1829	48		pha				pha
.182a	4a		lsr a				lsr 	a
.182b	4a		lsr a				lsr 	a
.182c	4a		lsr a				lsr 	a
.182d	4a		lsr a				lsr 	a
.182e	20 32 18	jsr $1832			jsr 	_UHWriteNibl
.1831	68		pla				pla
.1832					_UHWriteNibl:
.1832	29 0f		and #$0f			and 	#15
.1834	c9 0a		cmp #$0a			cmp 	#10
.1836	90 02		bcc $183a			bcc 	_UHDigit
.1838	69 06		adc #$06			adc 	#6
.183a					_UHDigit:
.183a	69 30		adc #$30			adc 	#48
.183c	20 85 20	jsr $2085			jsr 	StringWriteChar
.183f	60		rts				rts
.1840					IndFloatRead:
.1840	fa		plx				plx
.1841	b5 40		lda $40,x			lda 	NSMantissa0,x 				; copy address
.1843	85 28		sta $28				sta 	zTemp0
.1845	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.1847	18		clc				clc
.1848	6d 07 04	adc $0407			adc 	variableStartPage
.184b	85 29		sta $29				sta 	zTemp0+1
.184d	ca		dex				dex 								; throw the address
.184e	20 3b 1e	jsr $1e3b			jsr 	ReadFloatZTemp0Sub 							; call read routine
.1851	4c 2f 10	jmp $102f			jmp 	NextCommand
.1854					IndInt16Read:
.1854	fa		plx				plx
.1855	b5 40		lda $40,x			lda 	NSMantissa0,x 				; copy address
.1857	85 28		sta $28				sta 	zTemp0
.1859	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.185b	18		clc				clc
.185c	6d 07 04	adc $0407			adc 	variableStartPage
.185f	85 29		sta $29				sta 	zTemp0+1
.1861	ca		dex				dex 								; throw the address
.1862	20 77 1e	jsr $1e77			jsr 	ReadIntegerZTemp0Sub 							; call read routine
.1865	4c 2f 10	jmp $102f			jmp 	NextCommand
.1868					IndStringRead:
.1868	fa		plx				plx
.1869	b5 40		lda $40,x			lda 	NSMantissa0,x 				; copy address
.186b	85 28		sta $28				sta 	zTemp0
.186d	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.186f	18		clc				clc
.1870	6d 07 04	adc $0407			adc 	variableStartPage
.1873	85 29		sta $29				sta 	zTemp0+1
.1875	ca		dex				dex 								; throw the address
.1876	20 bc 1e	jsr $1ebc			jsr 	ReadStringZTemp0Sub 							; call read routine
.1879	4c 2f 10	jmp $102f			jmp 	NextCommand
.187c					IndFloatWrite:
.187c	fa		plx				plx
.187d	b5 3f		lda $3f,x			lda 	NSMantissa0-1,x 			; copy address
.187f	85 28		sta $28				sta 	zTemp0
.1881	b5 4b		lda $4b,x			lda 	NSMantissa1-1,x
.1883	18		clc				clc
.1884	6d 07 04	adc $0407			adc 	variableStartPage
.1887	85 29		sta $29				sta 	zTemp0+1
.1889	20 16 24	jsr $2416			jsr 	WriteFloatZTemp0Sub 							; call write routine
.188c	ca		dex				dex 								; throw the address as well.
.188d	4c 2f 10	jmp $102f			jmp 	NextCommand
.1890					IndInt16Write:
.1890	fa		plx				plx
.1891	b5 3f		lda $3f,x			lda 	NSMantissa0-1,x 			; copy address
.1893	85 28		sta $28				sta 	zTemp0
.1895	b5 4b		lda $4b,x			lda 	NSMantissa1-1,x
.1897	18		clc				clc
.1898	6d 07 04	adc $0407			adc 	variableStartPage
.189b	85 29		sta $29				sta 	zTemp0+1
.189d	20 52 24	jsr $2452			jsr 	WriteIntegerZTemp0Sub 							; call write routine
.18a0	ca		dex				dex 								; throw the address as well.
.18a1	4c 2f 10	jmp $102f			jmp 	NextCommand
.18a4					IndStringWrite:
.18a4	fa		plx				plx
.18a5	b5 3f		lda $3f,x			lda 	NSMantissa0-1,x 			; copy address
.18a7	85 28		sta $28				sta 	zTemp0
.18a9	b5 4b		lda $4b,x			lda 	NSMantissa1-1,x
.18ab	18		clc				clc
.18ac	6d 07 04	adc $0407			adc 	variableStartPage
.18af	85 29		sta $29				sta 	zTemp0+1
.18b1	20 91 24	jsr $2491			jsr 	WriteStringZTemp0Sub 							; call write routine
.18b4	ca		dex				dex 								; throw the address as well.
.18b5	4c 2f 10	jmp $102f			jmp 	NextCommand
.18b8					CommandInput:
.18b8	fa		plx				plx
.18b9	5a		phy				phy 								; save Y
.18ba	e8		inx				inx									; space on stack
.18bb					_INError:
.18bb	20 ef 18	jsr $18ef			jsr 	InputStringToBuffer 		; input from keyboard
.18be	a9 5f		lda #$5f			lda 	#((ReadBufferSize) & $FF)
.18c0	85 28		sta $28				sta 	0+zTemp0
.18c2	a9 04		lda #$04			lda 	#((ReadBufferSize) >> 8) & $FF
.18c4	85 29		sta $29				sta 	1+zTemp0
.18c6	20 a3 22	jsr $22a3			jsr 	ValEvaluateZTemp0
.18c9	b0 f0		bcs $18bb			bcs 	_INError 					; failed, try again.
.18cb	7a		ply				ply 								; restore Y
.18cc	4c 2f 10	jmp $102f			jmp 	NextCommand
.18cf					CommandInputString:
.18cf	fa		plx				plx
.18d0	5a		phy				phy 								; save Y
.18d1	20 ef 18	jsr $18ef			jsr 	InputStringToBuffer 		; input from keyboard
.18d4	e8		inx				inx 								; make space on stack
.18d5	20 0e 2e	jsr $2e0e			jsr 	FloatSetZero 				; store as string on stack
.18d8	a9 5f		lda #$5f			lda 	#ReadBufferSize & $FF
.18da	95 40		sta $40,x			sta 	NSMantissa0,x
.18dc	a9 04		lda #$04			lda 	#ReadBufferSize >> 8
.18de	95 4c		sta $4c,x			sta 	NSMantissa1,x
.18e0	a9 40		lda #$40			lda 	#NSSString
.18e2	95 34		sta $34,x			sta 	NSStatus,x
.18e4	7a		ply				ply 								; restore Y
.18e5	4c 2f 10	jmp $102f			jmp 	NextCommand
.18e8					CommandInputReset:
.18e8	fa		plx				plx
.18e9	9c 0a 04	stz $040a			stz 	InputBuffer
.18ec	4c 2f 10	jmp $102f			jmp 	NextCommand
.18ef					InputStringToBuffer:
.18ef	a9 29		lda #$29			lda 	#((InputBumpNext) & $FF)
.18f1	8d 5f 05	sta $055f			sta 	0+ReadBumpNextVec
.18f4	a9 19		lda #$19			lda 	#((InputBumpNext) >> 8) & $FF
.18f6	8d 60 05	sta $0560			sta 	1+ReadBumpNextVec
.18f9	a9 06		lda #$06			lda 	#((InputLookNext) & $FF)
.18fb	8d 61 05	sta $0561			sta 	0+ReadLookNextVec
.18fe	a9 19		lda #$19			lda 	#((InputLookNext) >> 8) & $FF
.1900	8d 62 05	sta $0562			sta 	1+ReadLookNextVec
.1903	4c 98 1d	jmp $1d98			jmp 	GetStringToBuffer
.1906					InputLookNext:
.1906	da		phx				phx
.1907					_ILNRetry:
.1907	ad 0a 04	lda $040a			lda 	InputBuffer 				; do we need to read more (e.g. the buffer is empty)
.190a	d0 08		bne $1914			bne 	_ILNNotEmpty
.190c	20 2d 19	jsr $192d			jsr 	InputGetNewLine 			; get a new line
.190f	9c 5b 04	stz $045b			stz 	InputBufferPos 				; reset read position.
.1912	80 f3		bra $1907			bra 	_ILNRetry
.1914					_ILNNotEmpty:
.1914	ae 5b 04	ldx $045b			ldx 	InputBufferPos 				; get head available character
.1917	bd 0a 04	lda $040a,x			lda 	InputBuffer,x
.191a	d0 08		bne $1924			bne 	_ILNExit 					; if not EOS return it with CC.
.191c					_ILNNextLine:
.191c	9c 0a 04	stz $040a			stz 	InputBuffer 				; clear the buffer, indicating new line next time.
.191f	38		sec				sec 								; return CS,Zero
.1920	fa		plx				plx
.1921	a9 0d		lda #$0d			lda 	#13
.1923	60		rts				rts
.1924					_ILNExit:
.1924	fa		plx				plx
.1925	c9 00		cmp #$00			cmp 	#0 							; return CC, Z Flag set.
.1927	18		clc				clc
.1928	60		rts				rts
.1929					InputBumpNext:
.1929	ee 5b 04	inc $045b			inc 	InputBufferPos
.192c	60		rts				rts
.192d					InputGetNewLine:
.192d	48		pha				pha
.192e	da		phx				phx
.192f	5a		phy				phy
.1930	a9 3f		lda #$3f			lda 	#"?"
.1932	20 6c 19	jsr $196c			jsr 	IGNLEchoIfScreen
.1935	a0 00		ldy #$00			ldy 	#0 							; line position.
.1937					_IGNLLoop:
.1937	20 c2 1c	jsr $1cc2			jsr 	VectorGetCharacter 			; get a character
.193a	c9 00		cmp #$00			cmp 	#0
.193c	f0 f9		beq $1937			beq 	_IGNLLoop
.193e	c9 14		cmp #$14			cmp 	#$14 						; Backspace ?
.1940	f0 11		beq $1953			beq 	_IGNBackspace
.1942	c9 0d		cmp #$0d			cmp 	#$0D 						; Return ?
.1944	f0 17		beq $195d			beq 	_IGNExit
.1946	c0 50		cpy #$50			cpy 	#80 						; buffer full ?
.1948	f0 ed		beq $1937			beq 	_IGNLLoop
.194a	99 0a 04	sta $040a,y			sta 	InputBuffer,y
.194d	c8		iny				iny
.194e	20 6c 19	jsr $196c			jsr 	IGNLEchoIfScreen
.1951	80 e4		bra $1937			bra 	_IGNLLoop
.1953					_IGNBackspace:
.1953	c0 00		cpy #$00			cpy 	#0
.1955	f0 e0		beq $1937			beq 	_IGNLLoop
.1957	20 6c 19	jsr $196c			jsr 	IGNLEchoIfScreen
.195a	88		dey				dey
.195b	80 da		bra $1937			bra 	_IGNLLoop
.195d					_IGNExit:
.195d	20 6c 19	jsr $196c			jsr 	IGNLEchoIfScreen
.1960	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.1962	99 0a 04	sta $040a,y			sta 	InputBuffer,y
.1965	9c 5b 04	stz $045b			stz 	InputBufferPos 				; reset position to start of input buffer.
.1968	7a		ply				ply
.1969	fa		plx				plx
.196a	68		pla				pla
.196b	60		rts				rts
.196c					IGNLEchoIfScreen:
.196c	ae 5d 04	ldx $045d			ldx 	currentChannel
.196f	d0 03		bne $1974			bne 	_IGNLEExit
.1971	20 b9 1c	jsr $1cb9			jsr 	VectorPrintCharacter
.1974					_IGNLEExit:
.1974	60		rts				rts
.040a					InputBuffer:
>040a							.fill 	81
.045b					InputBufferPos:
>045b							.fill 	1
.1975					GetInteger8Bit:
.1975	20 49 2a	jsr $2a49			jsr 	FloatIntegerPart
.1978	b5 40		lda $40,x			lda 	NSMantissa0,x
.197a	60		rts				rts
.197b					GetInteger16Bit:
.197b	20 49 2a	jsr $2a49			jsr 	FloatIntegerPart
.197e	34 34		bit $34,x			bit 	NSStatus,x
.1980	30 09		bmi $198b			bmi 	Negate16Bit
.1982	b5 40		lda $40,x			lda 	NSMantissa0,x
.1984	85 28		sta $28				sta 	zTemp0
.1986	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.1988	85 29		sta $29				sta 	zTemp0+1
.198a	60		rts				rts
.198b					Negate16Bit:
.198b	38		sec				sec
.198c	a9 00		lda #$00			lda 	#0
.198e	f5 40		sbc $40,x			sbc 	NSMantissa0,x
.1990	95 40		sta $40,x			sta 	NSMantissa0,x
.1992	85 28		sta $28				sta 	zTemp0
.1994	a9 00		lda #$00			lda 	#0
.1996	f5 4c		sbc $4c,x			sbc 	NSMantissa1,x
.1998	95 4c		sta $4c,x			sta 	NSMantissa1,x
.199a	85 29		sta $29				sta 	zTemp0+1
.199c	60		rts				rts
.199d					UnaryJoy:
.199d	fa		plx				plx
.199e	20 75 19	jsr $1975			jsr 	GetInteger8Bit 				; port #
.19a1	48		pha				pha 								; zero the result.
.19a2	20 0e 2e	jsr $2e0e			jsr 	FloatSetZero
.19a5	68		pla				pla
.19a6	5a		phy				phy
.19a7	da		phx				phx
.19a8	20 56 ff	jsr $ff56			jsr 	X16_joystick_get 			; read joystick.
.19ab	c0 00		cpy #$00			cpy 	#0 							; check no hardware
.19ad	d0 10		bne $19bf			bne 	_UJNoHardware
.19af	a8		tay				tay 								; move XA -> AY
.19b0	8a		txa				txa
.19b1	fa		plx				plx 								; we can update it now.
.19b2	49 ff		eor #$ff			eor 	#$FF
.19b4	95 4c		sta $4c,x			sta 	NSMantissa1,x
.19b6	98		tya				tya
.19b7	49 ff		eor #$ff			eor 	#$FF
.19b9	95 40		sta $40,x			sta 	NSMantissa0,x
.19bb	7a		ply				ply 								; restore Y
.19bc	4c 2f 10	jmp $102f			jmp 	NextCommand
.19bf					_UJNoHardware:
.19bf	fa		plx				plx
.19c0	7a		ply				ply
.19c1	a9 01		lda #$01			lda 	#1 							; set result to -1
.19c3	20 10 2e	jsr $2e10			jsr 	FloatSetByte
.19c6	20 d0 2d	jsr $2dd0			jsr 	FloatNegate
.19c9	4c 2f 10	jmp $102f			jmp 	NextCommand
.19cc					UnaryLen:
.19cc	fa		plx				plx
.19cd	b5 40		lda $40,x			lda 	NSMantissa0,x 				; string address.
.19cf	85 28		sta $28				sta 	zTemp0
.19d1	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.19d3	85 29		sta $29				sta 	zTemp0+1
.19d5	b2 28		lda ($28)			lda 	(zTemp0) 					; get length
.19d7	20 10 2e	jsr $2e10			jsr 	FloatSetByte
.19da	4c 2f 10	jmp $102f			jmp 	NextCommand
.19dd					LinkFloatAdd:
.19dd	fa		plx				plx
.19de	5a		phy			phy
.19df	20 32 28	jsr $2832		jsr	FloatAdd
.19e2	7a		ply			ply
.19e3	4c 2f 10	jmp $102f			jmp 	NextCommand
.19e6					LinkFloatSubtract:
.19e6	fa		plx				plx
.19e7	5a		phy			phy
.19e8	20 2c 28	jsr $282c		jsr	FloatSubtract
.19eb	7a		ply			ply
.19ec	4c 2f 10	jmp $102f			jmp 	NextCommand
.19ef					LinkFloatMultiply:
.19ef	fa		plx				plx
.19f0	5a		phy			phy
.19f1	20 ce 2a	jsr $2ace		jsr	FloatMultiply
.19f4	7a		ply			ply
.19f5	4c 2f 10	jmp $102f			jmp 	NextCommand
.19f8					LinkFloatDivide:
.19f8	fa		plx				plx
.19f9	5a		phy			phy
.19fa	20 57 29	jsr $2957		jsr	FloatDivide
.19fd	b0 5c		bcs $1a5b		bcs	DivZeroError
.19ff	7a		ply			ply
.1a00	4c 2f 10	jmp $102f			jmp 	NextCommand
.1a03					LinkFloatPower:
.1a03	fa		plx				plx
.1a04	5a		phy			phy
.1a05	20 d7 30	jsr $30d7		jsr	FloatPower
.1a08	b0 4e		bcs $1a58		bcs	MapRangeError
.1a0a	7a		ply			ply
.1a0b	4c 2f 10	jmp $102f			jmp 	NextCommand
.1a0e					LinkCompareGreater:
.1a0e	fa		plx				plx
.1a0f	5a		phy			phy
.1a10	20 db 28	jsr $28db		jsr	CompareGreater
.1a13	7a		ply			ply
.1a14	4c 2f 10	jmp $102f			jmp 	NextCommand
.1a17					LinkCompareEqual:
.1a17	fa		plx				plx
.1a18	5a		phy			phy
.1a19	20 bd 28	jsr $28bd		jsr	CompareEqual
.1a1c	7a		ply			ply
.1a1d	4c 2f 10	jmp $102f			jmp 	NextCommand
.1a20					LinkCompareLess:
.1a20	fa		plx				plx
.1a21	5a		phy			phy
.1a22	20 d3 28	jsr $28d3		jsr	CompareLess
.1a25	7a		ply			ply
.1a26	4c 2f 10	jmp $102f			jmp 	NextCommand
.1a29					LinkCompareGreaterEqual:
.1a29	fa		plx				plx
.1a2a	5a		phy			phy
.1a2b	20 eb 28	jsr $28eb		jsr	CompareGreaterEqual
.1a2e	7a		ply			ply
.1a2f	4c 2f 10	jmp $102f			jmp 	NextCommand
.1a32					LinkCompareNotEqual:
.1a32	fa		plx				plx
.1a33	5a		phy			phy
.1a34	20 cd 28	jsr $28cd		jsr	CompareNotEqual
.1a37	7a		ply			ply
.1a38	4c 2f 10	jmp $102f			jmp 	NextCommand
.1a3b					LinkCompareLessEqual:
.1a3b	fa		plx				plx
.1a3c	5a		phy			phy
.1a3d	20 e3 28	jsr $28e3		jsr	CompareLessEqual
.1a40	7a		ply			ply
.1a41	4c 2f 10	jmp $102f			jmp 	NextCommand
.1a44					LinkFloatIntegerPartDown:
.1a44	fa		plx				plx
.1a45	5a		phy			phy
.1a46	20 6d 2a	jsr $2a6d		jsr	FloatIntegerPartDown
.1a49	7a		ply			ply
.1a4a	4c 2f 10	jmp $102f			jmp 	NextCommand
.1a4d					LinkFloatSquareRoot:
.1a4d	fa		plx				plx
.1a4e	5a		phy			phy
.1a4f	20 59 31	jsr $3159		jsr	FloatSquareRoot
.1a52	b0 04		bcs $1a58		bcs	MapRangeError
.1a54	7a		ply			ply
.1a55	4c 2f 10	jmp $102f			jmp 	NextCommand
.1a58					MapRangeError:
.1a58	4c 6f 14	jmp $146f		jmp	ErrorV_range
.1a5b					DivZeroError:
.1a5b	4c f8 14	jmp $14f8		jmp	ErrorV_divzero
.1a5e					LinkFloatLogarithm:
.1a5e	fa		plx				plx
.1a5f	5a		phy			phy
.1a60	20 63 30	jsr $3063		jsr	FloatLogarithm
.1a63	b0 f3		bcs $1a58		bcs	MapRangeError
.1a65	7a		ply			ply
.1a66	4c 2f 10	jmp $102f			jmp 	NextCommand
.1a69					LinkFloatExponent:
.1a69	fa		plx				plx
.1a6a	5a		phy			phy
.1a6b	20 60 2f	jsr $2f60		jsr	FloatExponent
.1a6e	7a		ply			ply
.1a6f	4c 2f 10	jmp $102f			jmp 	NextCommand
.1a72					LinkFloatCosine:
.1a72	fa		plx				plx
.1a73	5a		phy			phy
.1a74	20 54 2f	jsr $2f54		jsr	FloatCosine
.1a77	7a		ply			ply
.1a78	4c 2f 10	jmp $102f			jmp 	NextCommand
.1a7b					LinkFloatSine:
.1a7b	fa		plx				plx
.1a7c	5a		phy			phy
.1a7d	20 f4 30	jsr $30f4		jsr	FloatSine
.1a80	7a		ply			ply
.1a81	4c 2f 10	jmp $102f			jmp 	NextCommand
.1a84					LinkFloatTangent:
.1a84	fa		plx				plx
.1a85	5a		phy			phy
.1a86	20 65 31	jsr $3165		jsr	FloatTangent
.1a89	7a		ply			ply
.1a8a	4c 2f 10	jmp $102f			jmp 	NextCommand
.1a8d					LinkFloatArcTan:
.1a8d	fa		plx				plx
.1a8e	5a		phy			phy
.1a8f	20 39 2e	jsr $2e39		jsr	FloatArcTan
.1a92	b0 c4		bcs $1a58		bcs	MapRangeError
.1a94	7a		ply			ply
.1a95	4c 2f 10	jmp $102f			jmp 	NextCommand
.1a98					LinkFloatCompare:
.1a98	fa		plx				plx
.1a99	5a		phy			phy
.1a9a	20 f3 28	jsr $28f3		jsr	FloatCompare
.1a9d	7a		ply			ply
.1a9e	4c 2f 10	jmp $102f			jmp 	NextCommand
.1aa1					LinkDivideInt32:
.1aa1	fa		plx				plx
.1aa2	5a		phy			phy
.1aa3	20 81 29	jsr $2981		jsr	DivideInt32
.1aa6	b0 b0		bcs $1a58		bcs	MapRangeError
.1aa8	7a		ply			ply
.1aa9	4c 2f 10	jmp $102f			jmp 	NextCommand
.1aac					StackSaveCurrentPosition:
.1aac	20 9a 10	jsr $109a			jsr 	FixUpY 						; codePtr,Y is corrected so Y = 0
.1aaf	5a		phy				phy
.1ab0	a0 01		ldy #$01			ldy 	#1
.1ab2	a5 24		lda $24				lda 	codePage
.1ab4	91 30		sta ($30),y			sta 	(runtimeStackPtr),y
.1ab6	c8		iny				iny
.1ab7	a5 22		lda $22				lda 	codePtr
.1ab9	91 30		sta ($30),y			sta 	(runtimeStackPtr),y
.1abb	c8		iny				iny
.1abc	a5 23		lda $23				lda 	codePtr+1
.1abe	91 30		sta ($30),y			sta 	(runtimeStackPtr),y
.1ac0	7a		ply				ply
.1ac1	60		rts				rts
.1ac2					StackLoadCurrentPosition:
.1ac2	a0 01		ldy #$01			ldy 	#1
.1ac4	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1ac6	85 24		sta $24				sta 	codePage
.1ac8	c8		iny				iny
.1ac9	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1acb	85 22		sta $22				sta 	codePtr
.1acd	c8		iny				iny
.1ace	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1ad0	85 23		sta $23				sta 	codePtr+1
.1ad2	a0 00		ldy #$00			ldy 	#0
.1ad4	60		rts				rts
.1ad5					XCommandMouse:
.1ad5	fa		plx				plx
.1ad6	20 75 19	jsr $1975			jsr 	GetInteger8Bit 				; mouse control.
.1ad9	ca		dex				dex
.1ada	da		phx				phx
.1adb	5a		phy				phy
.1adc	48		pha				pha
.1add	38		sec				sec 								; get screen resolution
.1ade	20 5f ff	jsr $ff5f			jsr 	X16_screen_mode
.1ae1	68		pla				pla
.1ae2	20 68 ff	jsr $ff68			jsr 	X16_mouse_config 			; config the mouse
.1ae5	7a		ply				ply
.1ae6	fa		plx				plx
.1ae7	4c 2f 10	jmp $102f			jmp 	NextCommand
.1aea					XUnaryMB:
.1aea	fa		plx				plx
.1aeb	20 19 1b	jsr $1b19			jsr 	XUnaryMouseCommon
.1aee	a5 2c		lda $2c				lda 	zTemp2
.1af0	e8		inx				inx
.1af1	20 10 2e	jsr $2e10			jsr 	FloatSetByte
.1af4	4c 2f 10	jmp $102f			jmp 	NextCommand
.1af7					XUnaryMX:
.1af7	fa		plx				plx
.1af8	20 19 1b	jsr $1b19			jsr 	XUnaryMouseCommon
.1afb	a5 28		lda $28				lda 	zTemp0
.1afd	e8		inx				inx
.1afe	20 10 2e	jsr $2e10			jsr 	FloatSetByte
.1b01	a5 29		lda $29				lda 	zTemp0+1
.1b03	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1b05	4c 2f 10	jmp $102f			jmp 	NextCommand
.1b08					XUnaryMY:
.1b08	fa		plx				plx
.1b09	20 19 1b	jsr $1b19			jsr 	XUnaryMouseCommon
.1b0c	a5 2a		lda $2a				lda 	zTemp1
.1b0e	e8		inx				inx
.1b0f	20 10 2e	jsr $2e10			jsr 	FloatSetByte
.1b12	a5 2b		lda $2b				lda 	zTemp1+1
.1b14	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1b16	4c 2f 10	jmp $102f			jmp 	NextCommand
.1b19					XUnaryMouseCommon:
.1b19	da		phx				phx
.1b1a	5a		phy				phy
.1b1b	a2 28		ldx #$28			ldx 	#zTemp0
.1b1d	20 6b ff	jsr $ff6b			jsr 	X16_mouse_get
.1b20	85 2c		sta $2c				sta 	zTemp2
.1b22	7a		ply				ply
.1b23	fa		plx				plx
.1b24	60		rts				rts
.1b25					NegateTOS:
.1b25	fa		plx				plx
.1b26	20 d0 2d	jsr $2dd0			jsr 	FloatNegate
.1b29	4c 2f 10	jmp $102f			jmp 	NextCommand
.1b2c					CommandNewLine:
.1b2c	fa		plx				plx
.1b2d	9c 68 05	stz $0568			stz 	stringInitialised
.1b30	a2 ff		ldx #$ff			ldx 	#$FF
.1b32	4c 2f 10	jmp $102f			jmp 	NextCommand
.1b35					CommandNext:
.1b35	fa		plx				plx
.1b36					_CNRetry:
.1b36	a9 d3		lda #$d3			lda 	#FRAME_FOR 					; find the FOR
.1b38	20 8c 16	jsr $168c			jsr 	StackFindFrame
.1b3b	20 9a 10	jsr $109a			jsr 	FixUpY 						; so we can use Y
.1b3e	b5 40		lda $40,x			lda 	NSMantissa0,x 				; check no index variable, both are $FF
.1b40	35 4c		and $4c,x			and 	NSMantissa1,x
.1b42	c9 ff		cmp #$ff			cmp 	#$FF
.1b44	f0 16		beq $1b5c			beq 	_CNNoIndexVariable
.1b46	b5 40		lda $40,x			lda 	NSMantissa0,x
.1b48	a0 05		ldy #$05			ldy 	#5
.1b4a	d1 30		cmp ($30),y			cmp 	(runtimeStackPtr),y
.1b4c	d0 07		bne $1b55			bne 	_CNNIndexFail
.1b4e	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.1b50	c8		iny				iny
.1b51	d1 30		cmp ($30),y			cmp 	(runtimeStackPtr),y
.1b53	f0 07		beq $1b5c			beq 	_CNNoIndexVariable
.1b55					_CNNIndexFail:
.1b55	a0 00		ldy #$00			ldy 	#0 							; so we don't fix up Y again !
.1b57	20 7e 16	jsr $167e			jsr 	StackCloseFrame 			; close this frame
.1b5a	80 da		bra $1b36			bra 	_CNRetry
.1b5c					_CNNoIndexVariable:
.1b5c	ca		dex				dex
.1b5d	a0 04		ldy #$04			ldy 	#4 							; check for optimised NEXT
.1b5f	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1b61	29 40		and #$40			and 	#$40	 					; bit 6
.1b63	d0 55		bne $1bba			bne 	_CNOptimisedNext
.1b65	a0 05		ldy #$05			ldy 	#5 							; copy address to zTemp0, save for write back
.1b67	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1b69	48		pha				pha
.1b6a	85 28		sta $28				sta 	zTemp0
.1b6c	c8		iny				iny
.1b6d	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1b6f	18		clc				clc
.1b70	6d 07 04	adc $0407			adc 	variableStartPage 			; point to variable page.
.1b73	48		pha				pha
.1b74	85 29		sta $29				sta 	zTemp0+1
.1b76	20 3b 1e	jsr $1e3b			jsr 	ReadFloatZTemp0Sub 			; read current index onto stack.
.1b79	a0 07		ldy #$07			ldy 	#7  						; read step onto stack +1
.1b7b	e8		inx				inx
.1b7c	20 fd 1b	jsr $1bfd			jsr 	CopyOffsetYToTOS
.1b7f	20 32 28	jsr $2832			jsr 	FloatAdd
.1b82	68		pla				pla 								; restore address
.1b83	85 29		sta $29				sta 	zTemp0+1
.1b85	68		pla				pla
.1b86	85 28		sta $28				sta 	zTemp0
.1b88	20 16 24	jsr $2416			jsr 	WriteFloatZTemp0Sub			; write float.
.1b8b	e8		inx				inx  								; recover written
.1b8c	e8		inx				inx 								; load offset
.1b8d	a0 0d		ldy #$0d			ldy 	#13
.1b8f	20 fd 1b	jsr $1bfd			jsr 	CopyOffsetYToTOS
.1b92	20 f3 28	jsr $28f3			jsr 	FloatCompare 				; and compare the floats.
.1b95	ca		dex				dex 								; throw result (in NSMantissa0+1)
.1b96	a0 0c		ldy #$0c			ldy 	#12 						; get the sign of the step.
.1b98	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1b9a	30 08		bmi $1ba4			bmi 	_CNDownStep
.1b9c	b5 41		lda $41,x			lda 	NSMantissa0+1,x 			; get comparator
.1b9e	c9 01		cmp #$01			cmp 	#1 							; gone higher
.1ba0	f0 10		beq $1bb2			beq 	_CNExitFor 					; if so exit the loop
.1ba2	80 06		bra $1baa			bra 	_CNLoopBack
.1ba4					_CNDownStep:
.1ba4	b5 41		lda $41,x			lda 	NSMantissa0+1,x 			; get comparator
.1ba6	c9 ff		cmp #$ff			cmp 	#255 						; gone lower
.1ba8	f0 08		beq $1bb2			beq 	_CNExitFor
.1baa					_CNLoopBack:
.1baa	20 c2 1a	jsr $1ac2			jsr 	StackLoadCurrentPosition 	; loop back
.1bad	a0 00		ldy #$00			ldy 	#0
.1baf	4c 2f 10	jmp $102f			jmp 	NextCommand
.1bb2					_CNExitFor:
.1bb2	20 7e 16	jsr $167e			jsr 	StackCloseFrame 			; remove the frame and exit
.1bb5	a0 00		ldy #$00			ldy 	#0
.1bb7	4c 2f 10	jmp $102f			jmp 	NextCommand
.1bba					_CNOptimisedNext:
.1bba	a0 05		ldy #$05			ldy 	#5 							; copy address to zTemp0, save for write back
.1bbc	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1bbe	85 28		sta $28				sta 	zTemp0
.1bc0	c8		iny				iny
.1bc1	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1bc3	18		clc				clc
.1bc4	6d 07 04	adc $0407			adc 	variableStartPage 			; point to variable page.
.1bc7	85 29		sta $29				sta 	zTemp0+1
.1bc9	a0 07		ldy #$07			ldy 	#7 							; STEP value
.1bcb	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1bcd	a0 ff		ldy #$ff			ldy 	#$FF
.1bcf	18		clc				clc
.1bd0					_CNOIncrement:
.1bd0	c8		iny				iny
.1bd1	71 28		adc ($28),y			adc 	(zTemp0),y
.1bd3	91 28		sta ($28),y			sta 	(zTemp0),y
.1bd5	f0 f9		beq $1bd0			beq 	_CNOIncrement
.1bd7	18		clc				clc
.1bd8	a5 30		lda $30				lda 	runtimeStackPtr
.1bda	69 0d		adc #$0d			adc 	#13
.1bdc	85 2a		sta $2a				sta 	zTemp1
.1bde	a5 31		lda $31				lda 	runtimeStackPtr+1
.1be0	69 00		adc #$00			adc 	#0
.1be2	85 2b		sta $2b				sta 	zTemp1+1
.1be4	a0 00		ldy #$00			ldy 	#0
.1be6	b1 2a		lda ($2a),y			lda 	(zTemp1),y 					; byte 0
.1be8	d1 28		cmp ($28),y			cmp 	(zTemp0),y
.1bea	c8		iny				iny
.1beb	b1 2a		lda ($2a),y			lda 	(zTemp1),y 					; byte 1
.1bed	f1 28		sbc ($28),y			sbc 	(zTemp0),y
.1bef	c8		iny				iny
.1bf0	b1 2a		lda ($2a),y			lda 	(zTemp1),y 					; byte 2
.1bf2	f1 28		sbc ($28),y			sbc 	(zTemp0),y
.1bf4	c8		iny				iny
.1bf5	b1 2a		lda ($2a),y			lda 	(zTemp1),y 					; byte 3
.1bf7	f1 28		sbc ($28),y			sbc 	(zTemp0),y
.1bf9	90 b7		bcc $1bb2			bcc	 	_CNExitFor
.1bfb	80 ad		bra $1baa			bra 	_CNLoopBack
.1bfd					CopyOffsetYToTOS:
.1bfd	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1bff	95 40		sta $40,x			sta 	NSMantissa0,x
.1c01	c8		iny				iny
.1c02	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1c04	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1c06	c8		iny				iny
.1c07	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1c09	95 58		sta $58,x			sta 	NSMantissa2,x
.1c0b	c8		iny				iny
.1c0c	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1c0e	95 64		sta $64,x			sta 	NSMantissa3,x
.1c10	c8		iny				iny
.1c11	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1c13	95 70		sta $70,x			sta 	NSExponent,x
.1c15	c8		iny				iny
.1c16	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1c18	95 34		sta $34,x			sta 	NSStatus,x
.1c1a	60		rts				rts
.1c1b	4c 2f 10	jmp $102f			jmp 	NextCommand
.1c1e					NotTOS:
.1c1e	fa		plx				plx
.1c1f	20 49 2a	jsr $2a49			jsr 	FloatIntegerPart
.1c22	74 58		stz $58,x			stz 	NSMantissa2,x 				; chop down to 16 bit.
.1c24	74 64		stz $64,x			stz 	NSMantissa3,x
.1c26	20 d0 2d	jsr $2dd0			jsr 	FloatNegate		 			; negate
.1c29	e8		inx				inx 								; and subtract 1.
.1c2a	a9 01		lda #$01			lda 	#1
.1c2c	20 10 2e	jsr $2e10			jsr 	FloatSetByte
.1c2f	20 2c 28	jsr $282c			jsr 	FloatSubtract
.1c32					_NotTOSSkip:
.1c32	4c 2f 10	jmp $102f			jmp 	NextCommand
.1c35					CommandOn:
.1c35	fa		plx				plx
.1c36	20 75 19	jsr $1975			jsr 	GetInteger8Bit 				; get the integer part, the ON x GOTO bit
.1c39	8d 5c 04	sta $045c			sta 	onCount 					; save it.
.1c3c	20 9a 10	jsr $109a			jsr 	FixUpY 						; Y = 0
.1c3f					_CONFind:
.1c3f	ce 5c 04	dec $045c			dec 	onCount 					; reached zero, do this one
.1c42	f0 0c		beq $1c50			beq 	_CONFound
.1c44	c8		iny				iny 								; skip over the token (GOTO or GOSUB page, and line #)
.1c45	c8		iny				iny
.1c46	c8		iny				iny
.1c47	c8		iny				iny
.1c48	b1 22		lda ($22),y			lda 	(codePtr),y 				; is there a moreon after it, if so we can keep going.
.1c4a	c8		iny				iny
.1c4b	c9 aa		cmp #$aa			cmp 	#PCD_MOREON
.1c4d	f0 f0		beq $1c3f			beq 	_CONFind
.1c4f	88		dey				dey 								; point to character after last GOTO/GOSUB
.1c50					_CONFound:
.1c50	4c 2f 10	jmp $102f			jmp 	NextCommand
.1c53					CommandMoreOn:
.1c53	fa		plx				plx
.1c54	c8		iny				iny 								; so it goes to the first non-goto/gosub
.1c55	c8		iny				iny
.1c56	c8		iny				iny
.1c57	c8		iny				iny
.1c58	4c 2f 10	jmp $102f			jmp 	NextCommand
.045c					onCount:
>045c							.fill 	1
.1c5b					MOFSizeTable:
>1c5b	01					.byte	1         	; $ca .shift
>1c5c	01					.byte	1         	; $cb .byte
>1c5d	02					.byte	2         	; $cc .word
>1c5e	05					.byte	5         	; $cd .float
>1c5f	ff					.byte	255       	; $ce .string
>1c60	ff					.byte	255       	; $cf .data
>1c61	03					.byte	3         	; $d0 .goto
>1c62	03					.byte	3         	; $d1 .gosub
>1c63	03					.byte	3         	; $d2 .goto.z
>1c64	03					.byte	3         	; $d3 .goto.nz
>1c65	02					.byte	2         	; $d4 .varspace
.1c66					UnaryPeek:
.1c66	fa		plx				plx
.1c67	20 7b 19	jsr $197b			jsr 	GetInteger16Bit
.1c6a	da		phx				phx
.1c6b	5a		phy				phy
.1c6c	a6 28		ldx $28				ldx 	zTemp0
.1c6e	a4 29		ldy $29				ldy 	zTemp0+1
.1c70	20 a7 25	jsr $25a7			jsr 	XPeekMemory
.1c73	7a		ply				ply
.1c74	fa		plx				plx
.1c75	20 10 2e	jsr $2e10			jsr 	FloatSetByte
.1c78	4c 2f 10	jmp $102f			jmp 	NextCommand
.1c7b					CommandPOKE:
.1c7b	fa		plx				plx
.1c7c	da		phx				phx 								; save XY
.1c7d	5a		phy				phy
.1c7e	20 75 19	jsr $1975			jsr 	GetInteger8Bit 				; get byte to POKE and save it
.1c81	48		pha				pha
.1c82	b5 4b		lda $4b,x			lda 	NSMantissa1-1,x 			; YX = address from Mantissa next up
.1c84	a8		tay				tay
.1c85	b5 3f		lda $3f,x			lda 	NSMantissa0-1,x
.1c87	aa		tax				tax
.1c88	68		pla				pla
.1c89	20 93 25	jsr $2593			jsr 	XPokeMemory
.1c8c	7a		ply				ply 								; restore YX and drop 2
.1c8d	fa		plx				plx
.1c8e	ca		dex				dex
.1c8f	ca		dex				dex
.1c90	4c 2f 10	jmp $102f			jmp 	NextCommand
.1c93					UnaryPos:
.1c93	fa		plx				plx
.1c94	20 26 25	jsr $2526			jsr 	XGetHPos
.1c97	20 10 2e	jsr $2e10			jsr 	FloatSetByte
.1c9a	4c 2f 10	jmp $102f			jmp 	NextCommand
.1c9d					GetChannel:
.1c9d	fa		plx				plx
.1c9e	ad 5d 04	lda $045d			lda 	currentChannel
.1ca1	e8		inx				inx
.1ca2	20 10 2e	jsr $2e10			jsr 	FloatSetByte
.1ca5	4c 2f 10	jmp $102f			jmp 	NextCommand
.1ca8					SetChannel:
.1ca8	fa		plx				plx
.1ca9	20 49 2a	jsr $2a49			jsr 	FloatIntegerPart
.1cac	b5 40		lda $40,x			lda 	NSMantissa0,x
.1cae	8d 5d 04	sta $045d			sta 	currentChannel
.1cb1	ca		dex				dex
.1cb2	4c 2f 10	jmp $102f			jmp 	NextCommand
.1cb5					SetDefaultChannel:
.1cb5	9c 5d 04	stz $045d			stz 	currentChannel
.1cb8	60		rts				rts
.1cb9					VectorPrintCharacter:
.1cb9	da		phx				phx
.1cba	ae 5d 04	ldx $045d			ldx 	currentChannel
.1cbd	20 d1 25	jsr $25d1			jsr 	XPrintCharacterToChannel
.1cc0	fa		plx				plx
.1cc1	60		rts				rts
.1cc2					VectorGetCharacter:
.1cc2	da		phx				phx
.1cc3	ae 5d 04	ldx $045d			ldx 	currentChannel
.1cc6	20 0a 25	jsr $250a			jsr 	XGetCharacterFromChannel
.1cc9	fa		plx				plx
.1cca	60		rts				rts
.045d					currentChannel:
>045d							.fill 	1
.1ccb					PrintNumber:
.1ccb	fa		plx				plx
.1ccc	a9 07		lda #$07			lda 	#7
.1cce	20 f6 2c	jsr $2cf6			jsr 	FloatToString 				; to number in decimal buffer
.1cd1	ca		dex				dex 								; drop
.1cd2	da		phx				phx
.1cd3	a2 00		ldx #$00			ldx 	#0 							; print buffer.
.1cd5					_PNLoop:
.1cd5	bd 94 05	lda $0594,x			lda 	decimalBuffer,x
.1cd8	20 b9 1c	jsr $1cb9			jsr 	VectorPrintCharacter
.1cdb	e8		inx				inx
.1cdc	bd 94 05	lda $0594,x			lda	 	decimalBuffer,x
.1cdf	d0 f4		bne $1cd5			bne 	_PNLoop
.1ce1	a9 20		lda #$20			lda 	#32 						; trailing space
.1ce3	20 b9 1c	jsr $1cb9			jsr 	VectorPrintCharacter
.1ce6	fa		plx				plx
.1ce7	4c 2f 10	jmp $102f			jmp 	NextCommand
.1cea					PrintString:
.1cea	fa		plx				plx
.1ceb	b5 40		lda $40,x			lda 	NSMantissa0,x 				; point zTemp0 to string
.1ced	85 28		sta $28				sta 	zTemp0
.1cef	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.1cf1	85 29		sta $29				sta 	zTemp0+1
.1cf3	ca		dex				dex 								; drop
.1cf4	da		phx				phx
.1cf5	5a		phy				phy
.1cf6	b2 28		lda ($28)			lda 	(zTemp0) 					; X = count
.1cf8	aa		tax				tax
.1cf9	a0 01		ldy #$01			ldy 	#1 							; Y = position
.1cfb					_PSLoop:
.1cfb	e0 00		cpx #$00			cpx 	#0 							; complete ?
.1cfd	f0 09		beq $1d08			beq 	_PSExit
.1cff	ca		dex				dex 								; dec count
.1d00	b1 28		lda ($28),y			lda 	(zTemp0),y 					; print char and bump
.1d02	20 b9 1c	jsr $1cb9			jsr 	VectorPrintCharacter
.1d05	c8		iny				iny
.1d06	80 f3		bra $1cfb			bra 	_PSLoop
.1d08					_PSExit:
.1d08	7a		ply				ply
.1d09	fa		plx				plx
.1d0a	4c 2f 10	jmp $102f			jmp 	NextCommand
.1d0d					CommandPushN:
.1d0d	fa		plx				plx
.1d0e	e8		inx				inx 								; next slot on stack
.1d0f	b1 22		lda ($22),y			lda 	(codePtr),y 				; exponent
.1d11	95 70		sta $70,x			sta 	NSExponent,x
.1d13	c8		iny				iny
.1d14	b1 22		lda ($22),y			lda 	(codePtr),y 				; mantissa
.1d16	95 40		sta $40,x			sta 	NSMantissa0,x
.1d18	c8		iny				iny
.1d19	b1 22		lda ($22),y			lda 	(codePtr),y
.1d1b	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1d1d	c8		iny				iny
.1d1e	b1 22		lda ($22),y			lda 	(codePtr),y
.1d20	95 58		sta $58,x			sta 	NSMantissa2,x
.1d22	c8		iny				iny
.1d23	b1 22		lda ($22),y			lda 	(codePtr),y
.1d25	48		pha				pha
.1d26	29 7f		and #$7f			and 	#$7F
.1d28	95 64		sta $64,x			sta 	NSMantissa3,x
.1d2a	68		pla				pla 								; sign in mantissa3:7
.1d2b	29 80		and #$80			and 	#$80
.1d2d	95 34		sta $34,x			sta 	NSStatus,x
.1d2f	c8		iny				iny
.1d30	4c 2f 10	jmp $102f			jmp 	NextCommand
.1d33					CommandPushS:
.1d33	fa		plx				plx
.1d34	e8		inx				inx 								; next slot on stack
.1d35	18		clc				clc
.1d36	98		tya				tya
.1d37	65 22		adc $22				adc 	codePtr 					; the string is inline
.1d39	95 40		sta $40,x			sta 	NSMantissa0,x
.1d3b	a5 23		lda $23				lda 	codePtr+1
.1d3d	69 00		adc #$00			adc 	#0
.1d3f	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1d41	74 58		stz $58,x			stz 	NSMantissa2,x
.1d43	74 64		stz $64,x			stz 	NSMantissa3,x
.1d45	a9 40		lda #$40			lda 	#NSSString
.1d47	95 34		sta $34,x			sta 	NSStatus,x
.1d49	98		tya				tya 								; string length +1 added to Y
.1d4a	38		sec				sec
.1d4b	71 22		adc ($22),y			adc 	(codePtr),y 				; next instruction
.1d4d	a8		tay				tay
.1d4e	4c 2f 10	jmp $102f			jmp 	NextCommand
.1d51					CommandRead:
.1d51	fa		plx				plx
.1d52	5a		phy				phy 								; save Y
.1d53	20 84 1d	jsr $1d84			jsr 	ReadStringToBuffer 			; read element into buffer
.1d56	e8		inx				inx									; space on stack
.1d57	a9 5f		lda #$5f			lda 	#((ReadBufferSize) & $FF)
.1d59	85 28		sta $28				sta 	0+zTemp0
.1d5b	a9 04		lda #$04			lda 	#((ReadBufferSize) >> 8) & $FF
.1d5d	85 29		sta $29				sta 	1+zTemp0
.1d5f	20 a3 22	jsr $22a3			jsr 	ValEvaluateZTemp0
.1d62	b0 04		bcs $1d68			bcs 	_CRError 					; failed
.1d64	7a		ply				ply 								; restore Y
.1d65	4c 2f 10	jmp $102f			jmp 	NextCommand
.1d68					_CRError:
.1d68	4c 7f 14	jmp $147f		jmp	ErrorV_value
.1d6b					CommandReadString:
.1d6b	fa		plx				plx
.1d6c	5a		phy				phy 								; save Y
.1d6d	20 84 1d	jsr $1d84			jsr 	ReadStringToBuffer 			; read text
.1d70	e8		inx				inx 								; make space on stack
.1d71	20 0e 2e	jsr $2e0e			jsr 	FloatSetZero 				; store as string on stack
.1d74	a9 5f		lda #$5f			lda 	#ReadBufferSize & $FF
.1d76	95 40		sta $40,x			sta 	NSMantissa0,x
.1d78	a9 04		lda #$04			lda 	#ReadBufferSize >> 8
.1d7a	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1d7c	a9 40		lda #$40			lda 	#NSSString
.1d7e	95 34		sta $34,x			sta 	NSStatus,x
.1d80	7a		ply				ply 								; restore Y
.1d81	4c 2f 10	jmp $102f			jmp 	NextCommand
.1d84					ReadStringToBuffer:
.1d84	a9 17		lda #$17			lda 	#((ReadBumpNext) & $FF)
.1d86	8d 5f 05	sta $055f			sta 	0+ReadBumpNextVec
.1d89	a9 1e		lda #$1e			lda 	#((ReadBumpNext) >> 8) & $FF
.1d8b	8d 60 05	sta $0560			sta 	1+ReadBumpNextVec
.1d8e	a9 ea		lda #$ea			lda 	#((ReadLookNext) & $FF)
.1d90	8d 61 05	sta $0561			sta 	0+ReadLookNextVec
.1d93	a9 1d		lda #$1d			lda 	#((ReadLookNext) >> 8) & $FF
.1d95	8d 62 05	sta $0562			sta 	1+ReadLookNextVec
.1d98					GetStringToBuffer:
.1d98	20 e7 1d	jsr $1de7			jsr		GetLookNext 				; skip all leading spaces.
.1d9b	f0 44		beq $1de1			beq 	_RBError 					; end of data
.1d9d	b0 f9		bcs $1d98			bcs 	GetStringToBuffer 			; switched to new data line.
.1d9f	c9 20		cmp #$20			cmp 	#' ' 						; non space got something
.1da1	b0 05		bcs $1da8			bcs 	_RBNoSpace
.1da3	20 e4 1d	jsr $1de4			jsr 	GetBumpNext 				; consume space and loop round.
.1da6	80 f0		bra $1d98			bra 	GetStringToBuffer
.1da8					_RBNoSpace:
.1da8	9c 5f 04	stz $045f			stz 	ReadBufferSize 				; empty the buffer.
.1dab	c9 22		cmp #$22			cmp 	#'"' 						; is it a '"'
.1dad	d0 08		bne $1db7			bne 	_RBCommaSep
.1daf	8d 5e 04	sta $045e			sta 	ReadSep 					; use as a seperator
.1db2	20 e4 1d	jsr $1de4			jsr 	GetBumpNext 				; consume the '"'
.1db5	80 05		bra $1dbc			bra 	_RBGetText
.1db7					_RBCommaSep:
.1db7	a9 2c		lda #$2c			lda 	#","						; get till comma
.1db9	8d 5e 04	sta $045e			sta 	ReadSep
.1dbc					_RBGetText:
.1dbc	20 e7 1d	jsr $1de7			jsr 	GetLookNext 				; what follows
.1dbf	b0 18		bcs $1dd9			bcs 	_RBEndGet 					; if new DATA line, the end without consumption
.1dc1	20 e4 1d	jsr $1de4			jsr 	GetBumpNext 				; consume it whatever
.1dc4	cd 5e 04	cmp $045e			cmp 	ReadSep 					; if found the seperator.
.1dc7	f0 10		beq $1dd9			beq 	_RBEndGet 					; exit after consumption
.1dc9	da		phx				phx
.1dca	ae 5f 04	ldx $045f			ldx 	ReadBufferSize 				; copy into buffer.
.1dcd	ee 5f 04	inc $045f			inc 	ReadBufferSize
.1dd0	9d 60 04	sta $0460,x			sta 	ReadBuffer,x
.1dd3	9e 61 04	stz $0461,x			stz 	ReadBuffer+1,x 				; make ASCIIZ as well.
.1dd6	fa		plx				plx
.1dd7	80 e3		bra $1dbc			bra 	_RBGetText
.1dd9					_RBEndGet:
.1dd9	c9 22		cmp #$22			cmp 	#'"'
.1ddb	d0 03		bne $1de0			bne 	_RBNotQuote
.1ddd	20 e4 1d	jsr $1de4			jsr 	GetBumpNext
.1de0					_RBNotQuote:
.1de0	60		rts				rts
.1de1					_RBError:
.1de1	4c 34 15	jmp $1534		jmp	ErrorV_data
.1de4					GetBumpNext:
.1de4	6c 5f 05	jmp ($055f)			jmp 	(ReadBumpNextVec)
.1de7					GetLookNext:
.1de7	6c 61 05	jmp ($0561)			jmp 	(ReadLookNextVec)
.1dea					ReadLookNext:
.1dea	ad 63 05	lda $0563			lda 	dataRemaining 				; any data remaining
.1ded	f0 04		beq $1df3			beq 	_RLNFindData
.1def	b2 25		lda ($25)			lda 	(objPtr) 					; return that object.
.1df1	18		clc				clc
.1df2	60		rts				rts
.1df3					_RLNFindData:
.1df3	b2 25		lda ($25)			lda 	(objPtr) 					; see where we are
.1df5	c9 ff		cmp #$ff			cmp 	#$FF 						; if at $FF then end, error.
.1df7	f0 1a		beq $1e13			beq 	_RLNNoData
.1df9	c9 cf		cmp #$cf			cmp 	#PCD_CMD_DATA 				; Found DATA
.1dfb	f0 05		beq $1e02			beq 	_RLNHaveData
.1dfd					_RLNNext:
.1dfd	20 24 16	jsr $1624			jsr 	MoveObjectForward			; else scan forward.
.1e00	80 f1		bra $1df3			bra 	_RLNFindData
.1e02					_RLNHaveData:
.1e02	a0 01		ldy #$01			ldy 	#1 							; get length
.1e04	b1 25		lda ($25),y			lda 	(objPtr),y
.1e06	f0 f5		beq $1dfd			beq 	_RLNNext 					; skip if DATA alone
.1e08	20 17 1e	jsr $1e17			jsr 	ReadBumpNext 				; advance by two
.1e0b	20 17 1e	jsr $1e17			jsr 	ReadBumpNext
.1e0e	8d 63 05	sta $0563			sta 	dataRemaining 				; set data left count.
.1e11	38		sec				sec
.1e12	60		rts				rts
.1e13					_RLNNoData:
.1e13	a9 00		lda #$00			lda 	#0
.1e15	38		sec				sec
.1e16	60		rts				rts
.1e17					ReadBumpNext:
.1e17	e6 25		inc $25				inc 	objPtr
.1e19	d0 02		bne $1e1d			bne 	_RBNSkip
.1e1b	e6 26		inc $26				inc 	objPtr+1
.1e1d					_RBNSkip:
.1e1d	ce 63 05	dec $0563			dec 	dataRemaining
.1e20	60		rts				rts
.045e					ReadSep:
>045e							.fill 	1
.045f					ReadBufferSize:
>045f							.fill 	1
.0460					ReadBuffer:
>0460							.fill 	255
.055f					ReadBumpNextVec:
>055f							.fill 	2
.0561					ReadLookNextVec:
>0561							.fill 	2
.1e21					ReadFloatCommand:
.1e21	fa		plx				plx
.1e22	b1 22		lda ($22),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.1e24	85 28		sta $28				sta 	zTemp0 						; save in MSB
.1e26	88		dey				dey 								; get the upper 3 bits
.1e27	b1 22		lda ($22),y			lda 	(codePtr),y
.1e29	29 07		and #$07			and 	#7
.1e2b	c8		iny				iny
.1e2c	c8		iny				iny
.1e2d	06 28		asl $28				asl 	zTemp0 						; shift zTemp0:A left
.1e2f	2a		rol a				rol 	a 							; carry will be clear.
.1e30	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.1e33	85 29		sta $29				sta 	zTemp0+1
.1e35	20 3b 1e	jsr $1e3b			jsr 	ReadFloatZTemp0Sub
.1e38	4c 2f 10	jmp $102f			jmp 	NextCommand
.1e3b					ReadFloatZTemp0Sub:
.1e3b	5a		phy				phy 								; start write
.1e3c	a0 01		ldy #$01			ldy 	#1
.1e3e	e8		inx				inx
.1e3f	b2 28		lda ($28)			lda 	(zTemp0)
.1e41	95 40		sta $40,x			sta 	NSMantissa0,x
.1e43	b1 28		lda ($28),y			lda 	(zTemp0),y
.1e45	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1e47	c8		iny				iny
.1e48	b1 28		lda ($28),y			lda 	(zTemp0),y
.1e4a	95 58		sta $58,x			sta 	NSMantissa2,x
.1e4c	c8		iny				iny
.1e4d	b1 28		lda ($28),y			lda 	(zTemp0),y
.1e4f	95 64		sta $64,x			sta 	NSMantissa3,x
.1e51	c8		iny				iny
.1e52	b1 28		lda ($28),y			lda 	(zTemp0),y
.1e54	95 70		sta $70,x			sta 	NSExponent,x
.1e56	c8		iny				iny
.1e57	b1 28		lda ($28),y			lda 	(zTemp0),y
.1e59	95 34		sta $34,x			sta 	NSStatus,x
.1e5b	7a		ply				ply
.1e5c	60		rts				rts
.1e5d					ReadIntegerCommand:
.1e5d	fa		plx				plx
.1e5e	b1 22		lda ($22),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.1e60	85 28		sta $28				sta 	zTemp0 						; save in MSB
.1e62	88		dey				dey 								; get the upper 3 bits
.1e63	b1 22		lda ($22),y			lda 	(codePtr),y
.1e65	29 07		and #$07			and 	#7
.1e67	c8		iny				iny
.1e68	c8		iny				iny
.1e69	06 28		asl $28				asl 	zTemp0 						; shift zTemp0:A left
.1e6b	2a		rol a				rol 	a 							; carry will be clear.
.1e6c	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.1e6f	85 29		sta $29				sta 	zTemp0+1
.1e71	20 77 1e	jsr $1e77			jsr 	ReadIntegerZTemp0Sub
.1e74	4c 2f 10	jmp $102f			jmp 	NextCommand
.1e77					ReadIntegerZTemp0Sub:
.1e77	5a		phy				phy 								; start write
.1e78	a0 01		ldy #$01			ldy 	#1
.1e7a	e8		inx				inx 								; prepare
.1e7b	74 58		stz $58,x			stz 	NSMantissa2,x
.1e7d	74 64		stz $64,x			stz 	NSMantissa3,x
.1e7f	74 70		stz $70,x			stz 	NSExponent,x
.1e81	74 34		stz $34,x			stz 	NSStatus,x
.1e83	b1 28		lda ($28),y			lda 	(zTemp0),y 					; get MSB, do -ve code.
.1e85	30 08		bmi $1e8f			bmi 	_RIZNegative
.1e87	95 4c		sta $4c,x			sta 	NSMantissa1,x 				; +ve read
.1e89	b2 28		lda ($28)			lda 	(zTemp0)
.1e8b	95 40		sta $40,x			sta 	NSMantissa0,x
.1e8d	7a		ply				ply
.1e8e	60		rts				rts
.1e8f					_RIZNegative:
.1e8f	38		sec				sec 								; -ve read
.1e90	a9 00		lda #$00			lda 	#0
.1e92	f2 28		sbc ($28)			sbc 	(zTemp0)
.1e94	95 40		sta $40,x			sta 	NSMantissa0,x
.1e96	a9 00		lda #$00			lda 	#0
.1e98	f1 28		sbc ($28),y			sbc 	(zTemp0),y
.1e9a	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1e9c	a9 80		lda #$80			lda 	#$80
.1e9e	95 34		sta $34,x			sta 	NSStatus,x
.1ea0	7a		ply				ply
.1ea1	60		rts				rts
.1ea2					ReadStringCommand:
.1ea2	fa		plx				plx
.1ea3	b1 22		lda ($22),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.1ea5	85 28		sta $28				sta 	zTemp0 						; save in MSB
.1ea7	88		dey				dey 								; get the upper 3 bits
.1ea8	b1 22		lda ($22),y			lda 	(codePtr),y
.1eaa	29 07		and #$07			and 	#7
.1eac	c8		iny				iny
.1ead	c8		iny				iny
.1eae	06 28		asl $28				asl 	zTemp0 						; shift zTemp0:A left
.1eb0	2a		rol a				rol 	a 							; carry will be clear.
.1eb1	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.1eb4	85 29		sta $29				sta 	zTemp0+1
.1eb6	20 bc 1e	jsr $1ebc			jsr 	ReadStringZTemp0Sub
.1eb9	4c 2f 10	jmp $102f			jmp 	NextCommand
.1ebc					ReadStringZTemp0Sub:
.1ebc	5a		phy				phy 								; start write
.1ebd	e8		inx				inx 								; prepare
.1ebe	74 58		stz $58,x			stz 	NSMantissa2,x
.1ec0	74 64		stz $64,x			stz 	NSMantissa3,x
.1ec2	74 70		stz $70,x			stz 	NSExponent,x
.1ec4	a9 40		lda #$40			lda 	#NSSString
.1ec6	74 34		stz $34,x			stz 	NSStatus,x
.1ec8	18		clc				clc
.1ec9	b2 28		lda ($28)			lda 	(zTemp0)					; read address of block add 2.
.1ecb	69 02		adc #$02			adc 	#2 							; this points to actual data
.1ecd	95 40		sta $40,x			sta 	NSMantissa0,x 				; if address 0 the MSB will still be 0
.1ecf	a0 01		ldy #$01			ldy 	#1
.1ed1	b1 28		lda ($28),y			lda 	(zTemp0),y
.1ed3	69 00		adc #$00			adc 	#0
.1ed5	95 4c		sta $4c,x			sta 	NSMantissa1,x 				; +ve read
.1ed7	d0 08		bne $1ee1			bne 	_RSZNoDefault 				; if read $00 use a default value.
.1ed9	a9 e3		lda #$e3			lda 	#_RSZNull & $FF
.1edb	95 40		sta $40,x			sta 	NSMantissa0,x
.1edd	a9 1e		lda #$1e			lda 	#_RSZNull >> 8
.1edf	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1ee1					_RSZNoDefault:
.1ee1	7a		ply				ply
.1ee2	60		rts				rts
.1ee3					_RSZNull:
>1ee3	00						.byte 	0
.1ee4					CommandRestore:
.1ee4	fa		plx				plx
.1ee5	20 eb 1e	jsr $1eeb			jsr 	RestoreCode
.1ee8	4c 2f 10	jmp $102f			jmp 	NextCommand
.1eeb					RestoreCode:
.1eeb	ad 04 04	lda $0404			lda 	runtimeHigh 				; reset pointer and page
.1eee	85 28		sta $28				sta 	objPage+1
.1ef0	64 27		stz $27				stz  	objPage
.1ef2	9c 63 05	stz $0563			stz 	dataRemaining 				; no data remaining.
.1ef5	60		rts				rts
.0563					dataRemaining:
>0563							.fill 	1		 					; 0 if not in data statement
.1ef6					UnaryRND:
.1ef6	fa		plx				plx
.1ef7	34 34		bit $34,x			bit 	NSStatus,x 					; -ve then set seed from operand
.1ef9	10 17		bpl $1f12			bpl 	_URNoSeed
.1efb	20 63 2b	jsr $2b63			jsr 	FloatNormalise 				; some float value
.1efe	b5 40		lda $40,x			lda 	NSMantissa0,x 				; copy to Mantissa
.1f00	8d 64 05	sta $0564			sta 	randomSeed+0
.1f03	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.1f05	8d 65 05	sta $0565			sta 	randomSeed+1
.1f08	b5 58		lda $58,x			lda 	NSMantissa2,x
.1f0a	8d 66 05	sta $0566			sta 	randomSeed+2
.1f0d	b5 64		lda $64,x			lda 	NSMantissa3,x
.1f0f	8d 67 05	sta $0567			sta 	randomSeed+3
.1f12					_URNoSeed:
.1f12	20 34 1f	jsr $1f34			jsr 	RandomNumberGenerator 		; create a number and copy to mantissa
.1f15	ad 64 05	lda $0564			lda 	randomSeed+0
.1f18	95 40		sta $40,x			sta 	NSMantissa0,x
.1f1a	ad 65 05	lda $0565			lda 	randomSeed+1
.1f1d	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1f1f	ad 66 05	lda $0566			lda 	randomSeed+2
.1f22	95 58		sta $58,x			sta 	NSMantissa2,x
.1f24	ad 67 05	lda $0567			lda 	randomSeed+3
.1f27	29 7f		and #$7f			and 	#$7F
.1f29	95 64		sta $64,x			sta 	NSMantissa3,x
.1f2b	a9 e1		lda #$e1			lda 	#(-31 & $FF)
.1f2d	95 70		sta $70,x			sta 	NSExponent,x
.1f2f	74 34		stz $34,x			stz 	NSStatus,x
.1f31	4c 2f 10	jmp $102f			jmp 	NextCommand
.1f34					RandomNumberGenerator:
.1f34	5a		phy				phy
.1f35	ad 64 05	lda $0564			lda 	randomSeed+0 				; check if zero
.1f38	0d 65 05	ora $0565			ora 	randomSeed+1
.1f3b	0d 66 05	ora $0566			ora 	randomSeed+2
.1f3e	0d 67 05	ora $0567			ora 	randomSeed+3
.1f41	d0 07		bne $1f4a			bne 	_RNGNoSeed
.1f43	ce 67 05	dec $0567			dec 	randomSeed+3 				; if so tweak and flog
.1f46	a0 64		ldy #$64			ldy 	#100
.1f48	80 05		bra $1f4f			bra 	_RNGLoop
.1f4a					_RNGNoSeed:
.1f4a	a0 08		ldy #$08			ldy 	#8
.1f4c	ad 64 05	lda $0564			lda 	randomSeed+0
.1f4f					_RNGLoop:
.1f4f	0a		asl a				asl		a
.1f50	2e 65 05	rol $0565			rol 	randomSeed+1
.1f53	2e 66 05	rol $0566			rol 	randomSeed+2
.1f56	2e 67 05	rol $0567			rol 	randomSeed+3
.1f59	90 02		bcc $1f5d			bcc		_RNGSkip
.1f5b	49 c5		eor #$c5			eor 	#$C5
.1f5d					_RNGSkip:
.1f5d	88		dey				dey
.1f5e	d0 ef		bne $1f4f			bne		_RNGLoop
.1f60	8d 64 05	sta $0564			sta 	randomSeed+0
.1f63	7a		ply				ply
.1f64	60		rts				rts
.0564					randomSeed:
>0564							.fill 	4
.1f65					StringConcatenate:
.1f65	fa		plx				plx
.1f66	ca		dex				dex
.1f67	b5 40		lda $40,x			lda 	NSMantissa0,x 				; copy strings to zTemp1 and zTemp2
.1f69	85 2a		sta $2a				sta 	zTemp1
.1f6b	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.1f6d	85 2b		sta $2b				sta 	zTemp1+1
.1f6f	b5 41		lda $41,x			lda 	NSMantissa0+1,x
.1f71	85 2c		sta $2c				sta 	zTemp2
.1f73	b5 4d		lda $4d,x			lda 	NSMantissa1+1,x
.1f75	85 2d		sta $2d				sta 	zTemp2+1
.1f77	18		clc				clc 								; work out total length
.1f78	b2 2a		lda ($2a)			lda 	(zTemp1)
.1f7a	72 2c		adc ($2c)			adc 	(zTemp2)
.1f7c	b0 18		bcs $1f96			bcs 	_BCLength 					; more than 255 characters.
.1f7e	48		pha				pha 								; save total
.1f7f	20 5c 20	jsr $205c			jsr 	StringAllocTemp 			; space for result.
.1f82	68		pla				pla 								; write total as first.
.1f83	92 2e		sta ($2e)			sta 	(zsTemp)
.1f85	20 99 1f	jsr $1f99			jsr 	_BCCopyZTemp1 				; copy zTemp1 to target
.1f88	a5 2c		lda $2c				lda 	zTemp2 						; copy address zTemp2->1
.1f8a	85 2a		sta $2a				sta 	zTemp1
.1f8c	a5 2d		lda $2d				lda 	zTemp2+1
.1f8e	85 2b		sta $2b				sta 	zTemp1+1
.1f90	20 99 1f	jsr $1f99			jsr 	_BCCopyZTemp1 				; and copy it, e.g. zTemp2
.1f93	4c 2f 10	jmp $102f			jmp 	NextCommand
.1f96					_BCLength:
.1f96	4c 6f 14	jmp $146f		jmp	ErrorV_range
.1f99					_BCCopyZTemp1:
.1f99	b2 2a		lda ($2a)			lda 	(zTemp1) 					; bytes to copy
.1f9b	f0 15		beq $1fb2			beq 	_BCCExit 					; none.
.1f9d	da		phx				phx 								; save XY
.1f9e	5a		phy				phy
.1f9f	aa		tax				tax 								; count in X.
.1fa0	a0 01		ldy #$01			ldy 	#1
.1fa2					_BCCLoop:
.1fa2	e6 2e		inc $2e				inc 	zsTemp 						; bump pointer, pre-increment
.1fa4	d0 02		bne $1fa8			bne 	_BCCNoCarry
.1fa6	e6 2f		inc $2f				inc 	zsTemp+1
.1fa8					_BCCNoCarry:
.1fa8	b1 2a		lda ($2a),y			lda 	(zTemp1),y				 	; copy bytes
.1faa	92 2e		sta ($2e)			sta 	(zsTemp)
.1fac	c8		iny				iny
.1fad	ca		dex				dex 								; X times
.1fae	d0 f2		bne $1fa2			bne 	_BCCLoop
.1fb0	7a		ply				ply 								; restore YX
.1fb1	fa		plx				plx
.1fb2					_BCCExit:
.1fb2	60		rts				rts
.1fb3					XRuntimeSetup:
.1fb3	a9 ff		lda #$ff	 		lda 	#$FF 						; default banks to access.
.1fb5	8d 6b 05	sta $056b	 		sta 	ramBank
.1fb8	8d 6c 05	sta $056c	 		sta 	romBank
.1fbb	60		rts				rts
.1fbc					SignTOS:
.1fbc	fa		plx				plx
.1fbd	20 30 2e	jsr $2e30			jsr 	FloatIsZero 				; if zero
.1fc0	f0 0f		beq $1fd1			beq 	_SGZero  					; return Int Zero
.1fc2	b5 34		lda $34,x			lda 	NSStatus,x 					; get status w/sign
.1fc4	48		pha				pha
.1fc5	a9 01		lda #$01			lda 	#1 							; set result to 1
.1fc7	20 10 2e	jsr $2e10			jsr 	FloatSetByte
.1fca	68		pla				pla
.1fcb	29 80		and #$80			and		#$80 						; copy the sign byte out
.1fcd	95 34		sta $34,x			sta 	NSStatus,x  				; so it will be -1 or 1
.1fcf	80 03		bra $1fd4			bra 	_SGExit
.1fd1					_SGZero:
.1fd1	20 0e 2e	jsr $2e0e			jsr 	FloatSetZero
.1fd4					_SGExit:
.1fd4	4c 2f 10	jmp $102f			jmp 	NextCommand
.1fd7					CommandShift:
.1fd7	b1 22		lda ($22),y			lda 	(codePtr),y 				; get shifted command (X already pushed)
.1fd9	c8		iny				iny
.1fda	0a		asl a				asl 	a 							; double into X
.1fdb	aa		tax				tax
.1fdc	7c 87 23	jmp ($2387,x)			jmp 	(ShiftVectorTable,x) 		; go there.
.1fdf					PrintTab:
.1fdf	fa		plx				plx
.1fe0	20 26 25	jsr $2526			jsr 	XGetHPos
.1fe3					_PTMod10:
.1fe3	38		sec				sec
.1fe4	e9 0a		sbc #$0a			sbc 	#10
.1fe6	b0 fb		bcs $1fe3			bcs 	_PTMod10
.1fe8	49 ff		eor #$ff			eor 	#255 						; subtract from 10 effectively. negate it
.1fea	1a		inc a				inc 	a 							; if modulus is 0, then this will be -10 => 10
.1feb	80 15		bra $2002			bra 	PrintSpaceLoop
.1fed					PrintPos:
.1fed	fa		plx				plx
.1fee	20 26 25	jsr $2526			jsr		XGetHPos 					; get current position
.1ff1	85 28		sta $28				sta 	zTemp0
.1ff3	38		sec				sec 								; calculate spaces required
.1ff4	b5 40		lda $40,x			lda 	NSMantissa0,x
.1ff6	ca		dex				dex
.1ff7	e5 28		sbc $28				sbc 	zTemp0
.1ff9	b0 07		bcs $2002			bcs 	PrintSpaceLoop 				; if >= 0 then do that many spaces
.1ffb	4c 2f 10	jmp $102f			jmp 	NextCommand
.1ffe					PrintSpace:
.1ffe	fa		plx				plx
.1fff	b5 40		lda $40,x			lda 	NSMantissa0,x
.2001	ca		dex				dex
.2002					PrintSpaceLoop:
.2002	c9 00		cmp #$00			cmp 	#0
.2004	f0 0a		beq $2010			beq 	_PSExit
.2006	48		pha				pha
.2007	a9 20		lda #$20			lda 	#" "
.2009	20 b9 1c	jsr $1cb9			jsr 	VectorPrintCharacter
.200c	68		pla				pla
.200d	3a		dec a				dec 	a
.200e	80 f2		bra $2002			bra 	PrintSpaceLoop
.2010					_PSExit:
.2010	4c 2f 10	jmp $102f			jmp 	NextCommand
.2013					CommandStop:
.2013	fa		plx				plx
.2014	4c 21 15	jmp $1521		jmp	ErrorV_stop
.2017					Unary_Str:
.2017	fa		plx				plx
.2018	5a		phy				phy
.2019	a9 08		lda #$08			lda 	#8 							; maximum decimal places.
.201b	20 f6 2c	jsr $2cf6			jsr 	FloatToString 				; do the conversion.
.201e	a9 21		lda #$21			lda		#33 						; create buffer
.2020	20 5c 20	jsr $205c			jsr 	StringAllocTemp 			; allocate memory
.2023	a0 01		ldy #$01			ldy 	#1  						; copy the converted string into the buffer.
.2025					_USCopy:
.2025	b9 93 05	lda $0593,y			lda 	decimalBuffer-1,y
.2028	f0 05		beq $202f			beq 	_USExit
.202a	91 2e		sta ($2e),y			sta 	(zsTemp),y
.202c	c8		iny				iny
.202d	80 f6		bra $2025			bra 	_USCopy
.202f					_USExit:
.202f	98		tya				tya
.2030	3a		dec a				dec 	a
.2031	92 2e		sta ($2e)			sta 	(zsTemp)
.2033	7a		ply				ply
.2034	4c 2f 10	jmp $102f			jmp 	NextCommand
.2037					StringInitialise:
.2037	48		pha				pha
.2038	ad 68 05	lda $0568			lda 	stringInitialised 			; already done
.203b	d0 11		bne $204e			bne 	_SIExit
.203d	ad 02 04	lda $0402			lda 	stringHighMemory 			; copy high memory - 512 => stringTempPointer
.2040	8d 69 05	sta $0569			sta 	stringTempPointer
.2043	ad 03 04	lda $0403			lda 	stringHighMemory+1
.2046	3a		dec a				dec 	a
.2047	3a		dec a				dec 	a
.2048	8d 6a 05	sta $056a			sta 	stringTempPointer+1
.204b	ce 68 05	dec $0568			dec 	stringInitialised 			; set the initialised flag.
.204e					_SIExit:
.204e	a5 33		lda $33				lda 	availableMemory+1 			; check out of memory
.2050	1a		inc a				inc 	a
.2051	1a		inc a				inc 	a
.2052	cd 03 04	cmp $0403			cmp 	stringHighMemory+1
.2055	b0 02		bcs $2059			bcs 	_SIMemory
.2057	68		pla				pla
.2058	60		rts				rts
.2059					_SIMemory:
.2059	4c 7a 15	jmp $157a		jmp	ErrorV_memory
.205c					StringAllocTemp:
.205c	20 37 20	jsr $2037			jsr 	StringInitialise 			; check it is initialised.
.205f	49 ff		eor #$ff			eor 	#$FF 						; subtract A+1 from temp pointer.
.2061	18		clc				clc
.2062	6d 69 05	adc $0569			adc 	stringTempPointer 			; subtract 32 from temp pointer and
.2065	8d 69 05	sta $0569			sta 	stringTempPointer 			; save in zsTemp and stackas well.
.2068	85 2e		sta $2e				sta 	zsTemp
.206a	95 40		sta $40,x			sta 	NSMantissa0,x
.206c	ad 6a 05	lda $056a			lda 	stringTempPointer+1
.206f	69 ff		adc #$ff			adc 	#$FF
.2071	8d 6a 05	sta $056a			sta 	stringTempPointer+1
.2074	85 2f		sta $2f				sta 	zsTemp+1
.2076	95 4c		sta $4c,x			sta 	NSMantissa1,x
.2078	74 58		stz $58,x			stz 	NSMantissa2,x
.207a	74 64		stz $64,x			stz 	NSMantissa3,x
.207c	a9 00		lda #$00			lda 	#0 							; clear string.
.207e	92 2e		sta ($2e)			sta 	(zsTemp)
.2080	a9 40		lda #$40			lda 	#NSSString 			 		; mark as string
.2082	95 34		sta $34,x			sta 	NSStatus,x
.2084	60		rts				rts
.2085					StringWriteChar:
.2085	5a		phy				phy
.2086	48		pha				pha
.2087	b2 2e		lda ($2e)			lda 	(zsTemp)
.2089	1a		inc a				inc 	a
.208a	92 2e		sta ($2e)			sta 	(zsTemp)
.208c	a8		tay				tay
.208d	68		pla				pla
.208e	91 2e		sta ($2e),y			sta 	(zsTemp),y
.2090	7a		ply				ply
.2091	60		rts				rts
.0568					stringInitialised:
>0568							.fill 	1
.0569					stringTempPointer:
>0569							.fill 	2
.2092					Unary_Left:
.2092	fa		plx				plx
.2093	5a		phy				phy
.2094	18		clc				clc 								; only one parameter
.2095	20 75 19	jsr $1975			jsr 	GetInteger8Bit 				; push the length of the string.
.2098	48		pha				pha
.2099	ca		dex				dex
.209a	a9 00		lda #$00			lda 	#0 							; push the start position.
.209c	48		pha				pha
.209d	20 d5 20	jsr $20d5			jsr 	UnarySStringToZTemp0
.20a0	80 3c		bra $20de			bra 	SubstringMain 				; stack now points to the string to slice.
.20a2					Unary_Right:
.20a2	fa		plx				plx
.20a3	5a		phy				phy
.20a4	a9 ff		lda #$ff			lda 	#255 						; push 255, we want all the string.
.20a6	20 75 19	jsr $1975			jsr 	GetInteger8Bit 				; push the right length of the string.
.20a9	48		pha				pha
.20aa	ca		dex				dex
.20ab	20 d5 20	jsr $20d5			jsr 	UnarySStringToZTemp0
.20ae	68		pla				pla 								; this is the right requirement
.20af	38		sec				sec
.20b0	49 ff		eor #$ff			eor 	#$FF
.20b2	72 28		adc ($28)			adc 	(zTemp0)
.20b4	b0 02		bcs $20b8			bcs 	_URHaveCount
.20b6	a9 00		lda #$00			lda 	#0 							; overflow, start from 0
.20b8					_URHaveCount:
.20b8	a0 ff		ldy #$ff			ldy 	#255 						; whole string
.20ba	5a		phy				phy
.20bb	48		pha				pha 								; start position
.20bc	80 20		bra $20de			bra 	SubstringMain
.20be					Unary_Mid:
.20be	fa		plx				plx
.20bf	5a		phy				phy
.20c0	20 75 19	jsr $1975			jsr 	GetInteger8Bit 				; push the length of the string required.
.20c3	48		pha				pha
.20c4	ca		dex				dex
.20c5	20 75 19	jsr $1975			jsr 	GetInteger8Bit 				; put the start position.
.20c8	f0 08		beq $20d2			beq 	_UMError
.20ca	3a		dec a				dec 	a
.20cb	48		pha				pha
.20cc	ca		dex				dex
.20cd	20 d5 20	jsr $20d5			jsr 	UnarySStringToZTemp0
.20d0	80 0c		bra $20de			bra 	SubstringMain 				; stack now points to the string to slice.
.20d2					_UMError:
.20d2	4c 6f 14	jmp $146f		jmp	ErrorV_range
.20d5					UnarySStringToZTemp0:
.20d5	b5 40		lda $40,x			lda 	NSMantissa0,x
.20d7	85 28		sta $28				sta 	zTemp0
.20d9	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.20db	85 29		sta $29				sta 	zTemp0+1
.20dd	60		rts				rts
.20de					SubstringMain:
.20de	68		pla				pla 								; get the start offset
.20df	7a		ply				ply 								; get the count to do.
.20e0	d2 28		cmp ($28)			cmp 	(zTemp0) 					; if start >= length then return NULL.
.20e2	b0 38		bcs $211c			bcs 	_SSReturnNull
.20e4	85 2a		sta $2a				sta 	zTemp1 						; save start position.
.20e6	84 2b		sty $2b				sty 	zTemp1+1 					; save count
.20e8	18		clc				clc
.20e9	65 2b		adc $2b				adc 	zTemp1+1 					; this is the end position.
.20eb	b0 06		bcs $20f3			bcs 	_SMTruncateToEnd 			; if overflow, limit to length-start.
.20ed	d2 28		cmp ($28)			cmp 	(zTemp0) 					; ok if limit is <= length.
.20ef	f0 04		beq $20f5			beq 	_SMIsOkay
.20f1	90 02		bcc $20f5			bcc 	_SMIsOkay
.20f3					_SMTruncateToEnd:
.20f3	b2 28		lda ($28)			lda 	(zTemp0) 					; end position is length.
.20f5					_SMIsOkay:
.20f5	85 2b		sta $2b				sta 	zTemp1+1
.20f7	38		sec				sec		 							; work out size
.20f8	a5 2b		lda $2b				lda 	zTemp1+1
.20fa	e5 2a		sbc $2a				sbc 	zTemp1
.20fc	f0 1e		beq $211c			beq 	_SSReturnNull 				; if size = 0 then return empty string.
.20fe	20 5c 20	jsr $205c			jsr 	StringAllocTemp 			; zsTemp & mantissa = the new string.
.2101	a4 2a		ldy $2a				ldy 	zTemp1 						; start
.2103					_SMCopy:
.2103	c4 2b		cpy $2b				cpy 	zTemp1+1 					; exit if reached end
.2105	f0 11		beq $2118			beq 	_SMExit
.2107	c8		iny				iny 								; bump and
.2108	b1 28		lda ($28),y			lda 	(zTemp0),y 					; get character (prefix)
.210a	5a		phy				phy
.210b	48		pha				pha
.210c	b2 2e		lda ($2e)			lda 	(zsTemp) 					; bump length => Y
.210e	1a		inc a				inc 	a
.210f	a8		tay				tay
.2110	92 2e		sta ($2e)			sta 	(zsTemp)
.2112	68		pla				pla 								; write character out
.2113	91 2e		sta ($2e),y			sta 	(zsTemp),y
.2115	7a		ply				ply 								; restore Y
.2116	80 eb		bra $2103			bra 	_SMCopy
.2118					_SMExit:
.2118	7a		ply				ply
.2119	4c 2f 10	jmp $102f			jmp 	NextCommand
.211c					_SSReturnNull:
.211c	a9 2e		lda #$2e			lda 	#SSRNull & $FF 				; set up mantissa
.211e	95 40		sta $40,x			sta 	NSMantissa0,x
.2120	a9 21		lda #$21			lda 	#SSRNull >> 8
.2122	95 4c		sta $4c,x			sta 	NSMantissa1,x
.2124	74 58		stz $58,x			stz 	NSMantissa2,x
.2126	74 64		stz $64,x			stz 	NSMantissa3,x
.2128	a9 40		lda #$40			lda 	#NSSString
.212a	95 34		sta $34,x			sta 	NSStatus,x
.212c	80 ea		bra $2118			bra 	_SMExit
.212e					SSRNull:
>212e	00 00						.word 	0
.2130					CommandSwap:
.2130	fa		plx				plx
.2131	b5 40		lda $40,x			lda 	NSMantissa0,x
.2133	48		pha				pha
.2134	b5 3f		lda $3f,x			lda 	NSMantissa0-1,x
.2136	95 40		sta $40,x			sta 	NSMantissa0,x
.2138	68		pla				pla
.2139	95 3f		sta $3f,x			sta 	NSMantissa0-1,x
.213b	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.213d	48		pha				pha
.213e	b5 4b		lda $4b,x			lda 	NSMantissa1-1,x
.2140	95 4c		sta $4c,x			sta 	NSMantissa1,x
.2142	68		pla				pla
.2143	95 4b		sta $4b,x			sta 	NSMantissa1-1,x
.2145	b5 58		lda $58,x			lda 	NSMantissa2,x
.2147	48		pha				pha
.2148	b5 57		lda $57,x			lda 	NSMantissa2-1,x
.214a	95 58		sta $58,x			sta 	NSMantissa2,x
.214c	68		pla				pla
.214d	95 57		sta $57,x			sta 	NSMantissa2-1,x
.214f	b5 64		lda $64,x			lda 	NSMantissa3,x
.2151	48		pha				pha
.2152	b5 63		lda $63,x			lda 	NSMantissa3-1,x
.2154	95 64		sta $64,x			sta 	NSMantissa3,x
.2156	68		pla				pla
.2157	95 63		sta $63,x			sta 	NSMantissa3-1,x
.2159	b5 70		lda $70,x			lda 	NSExponent,x
.215b	48		pha				pha
.215c	b5 6f		lda $6f,x			lda 	NSExponent-1,x
.215e	95 70		sta $70,x			sta 	NSExponent,x
.2160	68		pla				pla
.2161	95 6f		sta $6f,x			sta 	NSExponent-1,x
.2163	b5 34		lda $34,x			lda 	NSStatus,x
.2165	48		pha				pha
.2166	b5 33		lda $33,x			lda 	NSStatus-1,x
.2168	95 34		sta $34,x			sta 	NSStatus,x
.216a	68		pla				pla
.216b	95 33		sta $33,x			sta 	NSStatus-1,x
.216d	4c 2f 10	jmp $102f			jmp 	NextCommand
.2170					CommandSYS:
.2170	fa		plx				plx
.2171	da		phx				phx 								; save XY
.2172	5a		phy				phy
.2173	20 49 2a	jsr $2a49			jsr 	FloatIntegerPart
.2176	b5 4c		lda $4c,x			lda 	NSMantissa1,x 				; get call address => zTemp0
.2178	85 29		sta $29				sta 	zTemp0+1
.217a	b5 40		lda $40,x			lda 	NSMantissa0,x
.217c	85 28		sta $28				sta 	zTemp0
.217e	ae 0d 03	ldx $030d			ldx 	SYS_Reg_X 					; load registers
.2181	ac 0e 03	ldy $030e			ldy 	SYS_Reg_Y
.2184	ad 0f 03	lda $030f			lda 	SYS_Reg_S
.2187	48		pha				pha
.2188	ad 0c 03	lda $030c			lda 	SYS_Reg_A
.218b	28		plp				plp
.218c	20 a3 21	jsr $21a3			jsr 	_CSZTemp0
.218f	08		php				php
.2190	8e 0d 03	stx $030d			stx 	SYS_Reg_X 					; load registers
.2193	8c 0e 03	sty $030e			sty 	SYS_Reg_Y
.2196	8d 0c 03	sta $030c			sta 	SYS_Reg_A
.2199	68		pla				pla
.219a	8d 0f 03	sta $030f			sta 	SYS_Reg_S
.219d	7a		ply				ply 								; restore YX and drop 2
.219e	fa		plx				plx
.219f	ca		dex				dex
.21a0	4c 2f 10	jmp $102f			jmp 	NextCommand
.21a3					_CSZTemp0:
.21a3	6c 28 00	jmp ($0028)			jmp 	(zTemp0)
.21a6					TimeTOS:
.21a6	fa		plx				plx
.21a7	20 01 22	jsr $2201			jsr 	TIPushClock 				; push clock to TOS
.21aa	4c 2f 10	jmp $102f			jmp 	NextCommand
.21ad					TimeString:
.21ad	fa		plx				plx
.21ae	20 01 22	jsr $2201			jsr 	TIPushClock 				; push clock to TOS
.21b1	20 d6 21	jsr $21d6			jsr 	_TSDivMod60 				; result in seconds
.21b4	20 d6 21	jsr $21d6			jsr 	_TSDivMod60 				; seconds
.21b7	48		pha				pha
.21b8	20 d6 21	jsr $21d6			jsr 	_TSDivMod60 				; minutes
.21bb	48		pha				pha
.21bc	a9 18		lda #$18			lda 	#24 						; hours
.21be	20 d8 21	jsr $21d8			jsr 	_TSDivModA
.21c1	48		pha				pha
.21c2	a9 06		lda #$06			lda 	#6
.21c4	20 5c 20	jsr $205c			jsr 	StringAllocTemp
.21c7	68		pla				pla
.21c8	20 e8 21	jsr $21e8			jsr 	_TSWriteDecimal
.21cb	68		pla				pla
.21cc	20 e8 21	jsr $21e8			jsr 	_TSWriteDecimal
.21cf	68		pla				pla
.21d0	20 e8 21	jsr $21e8			jsr 	_TSWriteDecimal
.21d3	4c 2f 10	jmp $102f			jmp 	NextCommand
.21d6					_TSDivMod60:
.21d6	a9 3c		lda #$3c			lda 	#60
.21d8					_TSDivModA:
.21d8	e8		inx				inx
.21d9	20 10 2e	jsr $2e10			jsr 	FloatSetByte
.21dc	ca		dex				dex
.21dd	20 a4 29	jsr $29a4			jsr 	Int32Divide
.21e0	b5 40		lda $40,x			lda 	NSMantissa0,x 				; get modulus
.21e2	48		pha				pha
.21e3	20 93 29	jsr $2993			jsr 	NSMCopyPlusTwoToZero
.21e6	68		pla				pla
.21e7	60		rts				rts
.21e8					_TSWriteDecimal:
.21e8	da		phx				phx
.21e9	a2 30		ldx #$30			ldx 	#'0'
.21eb					_TSWDLoop:
.21eb	c9 0a		cmp #$0a			cmp 	#10
.21ed	90 05		bcc $21f4			bcc 	_TSWDEnd
.21ef	e9 0a		sbc #$0a			sbc 	#10
.21f1	e8		inx				inx
.21f2	80 f7		bra $21eb			bra 	_TSWDLoop
.21f4					_TSWDEnd:
.21f4	48		pha				pha
.21f5	8a		txa				txa
.21f6	20 85 20	jsr $2085			jsr 	StringWriteChar
.21f9	68		pla				pla
.21fa	09 30		ora #$30			ora 	#'0'
.21fc	20 85 20	jsr $2085			jsr 	StringWriteChar
.21ff	fa		plx				plx
.2200	60		rts				rts
.2201					TIPushClock:
.2201	5a		phy				phy
.2202	e8		inx				inx 								; push 0 on the stack
.2203	20 0e 2e	jsr $2e0e			jsr 	FloatSetZero
.2206	da		phx				phx
.2207	20 f1 25	jsr $25f1			jsr 	XReadClock 					; read time into YXA
.220a	86 28		stx $28				stx 	zTemp0
.220c	fa		plx				plx
.220d	95 40		sta $40,x			sta 	NSMantissa0,x
.220f	a5 28		lda $28				lda 	zTemp0
.2211	95 4c		sta $4c,x			sta 	NSMantissa1,x
.2213	98		tya				tya
.2214	95 58		sta $58,x			sta 	NSMantissa2,x
.2216	7a		ply				ply
.2217	60		rts				rts
.2218					CommandTIWrite:
.2218	fa		plx				plx
.2219	b5 40		lda $40,x			lda 	NSMantissa0,x 				; copy string address to ZSTemp
.221b	85 2e		sta $2e				sta 	zsTemp
.221d	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.221f	85 2f		sta $2f				sta 	zsTemp+1
.2221	b2 2e		lda ($2e)			lda 	(zsTemp) 					; check if it is six
.2223	c9 06		cmp #$06			cmp 	#6
.2225	d0 59		bne $2280			bne 	_CTIWError
.2227	20 0e 2e	jsr $2e0e			jsr 	FloatSetZero
.222a	20 4c 22	jsr $224c			jsr 	_CTIWDigitPair 				; do a digit pair 3 times
.222d	20 4c 22	jsr $224c			jsr 	_CTIWDigitPair
.2230	20 4c 22	jsr $224c			jsr 	_CTIWDigitPair
.2233	a9 3c		lda #$3c			lda 	#60 						; multiply the result by 60.
.2235	20 77 22	jsr $2277			jsr 	_CTIWMultiply
.2238	da		phx				phx
.2239	5a		phy				phy
.223a	b5 4c		lda $4c,x			lda 	NSMantissa1,x 				; get time into YXA
.223c	48		pha				pha
.223d	b5 58		lda $58,x			lda 	NSMantissa2,x
.223f	a8		tay				tay
.2240	b5 40		lda $40,x			lda 	NSMantissa0,x
.2242	fa		plx				plx
.2243	20 f5 25	jsr $25f5			jsr 	XWriteClock 				; update the clock.
.2246	7a		ply				ply
.2247	fa		plx				plx
.2248	ca		dex				dex 								; throw result.
.2249	4c 2f 10	jmp $102f			jmp 	NextCommand
.224c					_CTIWDigitPair:
.224c	a9 06		lda #$06			lda 	#6 							; x 6
.224e	20 77 22	jsr $2277			jsr 	_CTIWMultiply
.2251	20 5d 22	jsr $225d			jsr 	_CTIWAddDigit 				; add digit
.2254	a9 0a		lda #$0a			lda 	#10 						; x 10
.2256	20 77 22	jsr $2277			jsr 	_CTIWMultiply
.2259	20 5d 22	jsr $225d			jsr 	_CTIWAddDigit 				; add digit
.225c	60		rts				rts
.225d					_CTIWAddDigit:
.225d	e6 2e		inc $2e				inc 	zsTemp 						; pre-increment
.225f	d0 02		bne $2263			bne 	_CTIWASkip
.2261	e6 2f		inc $2f				inc 	zsTemp+1
.2263					_CTIWASkip:
.2263	b2 2e		lda ($2e)			lda 	(zsTemp) 					; read and validate it
.2265	38		sec				sec
.2266	e9 30		sbc #$30			sbc 	#"0"
.2268	90 16		bcc $2280			bcc 	_CTIWError
.226a	c9 0a		cmp #$0a			cmp 	#9+1
.226c	b0 12		bcs $2280			bcs 	_CTIWError
.226e	e8		inx				inx 								; store at +1
.226f	20 10 2e	jsr $2e10			jsr 	FloatSetByte
.2272	ca		dex				dex
.2273	20 9a 2b	jsr $2b9a			jsr 	FloatAddTopTwoStack
.2276	60		rts				rts
.2277					_CTIWMultiply:
.2277	e8		inx				inx
.2278	20 10 2e	jsr $2e10			jsr 	FloatSetByte
.227b	ca		dex				dex
.227c	20 1b 2b	jsr $2b1b			jsr 	FloatMultiplyShort
.227f	60		rts				rts
.2280					_CTIWError:
.2280	4c 7f 14	jmp $147f		jmp	ErrorV_value
.2283					UnaryUsr:
.2283	fa		plx				plx
.2284	5a		phy				phy
.2285	20 8c 22	jsr $228c			jsr 	_UUCallVector
.2288	7a		ply				ply
.2289	4c 2f 10	jmp $102f			jmp 	NextCommand
.228c					_UUCallVector:
.228c	6c 11 03	jmp ($0311)			jmp 	(USRRoutineAddress)
.228f					ValUnary:
.228f	fa		plx				plx
.2290	b5 40		lda $40,x			lda 	NSMantissa0,x
.2292	85 28		sta $28				sta 	zTemp0
.2294	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.2296	85 29		sta $29				sta 	zTemp0+1
.2298	20 a3 22	jsr $22a3			jsr 	ValEvaluateZTemp0
.229b	b0 03		bcs $22a0			bcs 	_VUError 					; couldn't convert
.229d	4c 2f 10	jmp $102f			jmp 	NextCommand
.22a0					_VUError:
.22a0	4c 7f 14	jmp $147f		jmp	ErrorV_value
.22a3					ValEvaluateZTemp0:
.22a3	5a		phy				phy
.22a4	b2 28		lda ($28)			lda 	(zTemp0) 					; check not empty string
.22a6	f0 22		beq $22ca			beq 	_VMCFail2
.22a8	a0 00		ldy #$00			ldy 	#0 							; start position
.22aa					_VMCSpaces:
.22aa	c8		iny				iny 								; skip leading spaces
.22ab	b1 28		lda ($28),y			lda 	(zTemp0),y
.22ad	c9 20		cmp #$20			cmp 	#" "
.22af	f0 f9		beq $22aa			beq 	_VMCSpaces
.22b1	48		pha				pha 								; save first character
.22b2	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.22b4	d0 01		bne $22b7			bne 	_VMCStart
.22b6	c8		iny				iny 								; skip over - if so.
.22b7					_VMCStart:
.22b7	38		sec				sec 								; initialise first time round.
.22b8					_VMCNext:
.22b8	98		tya				tya 								; reached end of string
.22b9	3a		dec a				dec 	a
.22ba	52 28		eor ($28)			eor 	(zTemp0) 					; compare length preserve carry.
.22bc	f0 0f		beq $22cd			beq 	_VMCSuccess 				; successful.
.22be	b1 28		lda ($28),y			lda 	(zTemp0),y 					; encode a number.
.22c0	c8		iny				iny
.22c1	20 f2 2b	jsr $2bf2			jsr 	FloatEncode 				; send it to the number-builder
.22c4	90 03		bcc $22c9			bcc 	_VMCFail 					; if failed, give up.
.22c6	18		clc				clc 								; next time round, countinue
.22c7	80 ef		bra $22b8			bra 	_VMCNext
.22c9					_VMCFail:
.22c9	68		pla				pla
.22ca					_VMCFail2:
.22ca	7a		ply				ply
.22cb	38		sec				sec
.22cc	60		rts				rts
.22cd					_VMCSuccess:
.22cd	a9 00		lda #$00			lda 	#0 							; construct final
.22cf	20 f2 2b	jsr $2bf2			jsr 	FloatEncode 				; by sending a duff value.
.22d2	68		pla				pla 								; if it was -ve
.22d3	c9 2d		cmp #$2d			cmp 	#"-"
.22d5	d0 03		bne $22da			bne 	_VMCNotNegative
.22d7	20 d0 2d	jsr $2dd0			jsr		FloatNegate 				; negate it.
.22da					_VMCNotNegative:
.22da	7a		ply				ply
.22db	18		clc				clc
.22dc	60		rts				rts
.22dd					VectorTable:
>22dd	dd 19					.word	LinkFloatAdd             ; $80 +
>22df	e6 19					.word	LinkFloatSubtract        ; $81 -
>22e1	ef 19					.word	LinkFloatMultiply        ; $82 *
>22e3	f8 19					.word	LinkFloatDivide          ; $83 /
>22e5	03 1a					.word	LinkFloatPower           ; $84 ^
>22e7	c1 10					.word	BinaryAnd                ; $85 and
>22e9	c5 10					.word	BinaryOr                 ; $86 or
>22eb	0e 1a					.word	LinkCompareGreater       ; $87 >
>22ed	17 1a					.word	LinkCompareEqual         ; $88 =
>22ef	20 1a					.word	LinkCompareLess          ; $89 <
>22f1	29 1a					.word	LinkCompareGreaterEqual  ; $8a >=
>22f3	32 1a					.word	LinkCompareNotEqual      ; $8b <>
>22f5	3b 1a					.word	LinkCompareLessEqual     ; $8c <=
>22f7	a9 10					.word	AbsoluteTOS              ; $8d abs
>22f9	fc 10					.word	ArrayConvert             ; $8e array
>22fb	a4 11					.word	UnaryAsc                 ; $8f asc
>22fd	bf 11					.word	CommandAssert            ; $90 assert
>22ff	00 12					.word	Unary16Bin               ; $91 bin$
>2301	2a 12					.word	PrintCharacter           ; $92 print.chr
>2303	34 12					.word	UnaryChr                 ; $93 chr$
>2305	88 12					.word	CompareStrings           ; $94 s.cmp
>2307	a1 15					.word	CommandFor               ; $95 for
>2309	a8 16					.word	UnaryFre                 ; $96 fre
>230b	c0 16					.word	CommandGet               ; $97 get
>230d	e6 16					.word	CommandReturn            ; $98 return
>230f	2d 17					.word	Command_PSET             ; $99 pset
>2311	47 17					.word	Command_LINE             ; $9a line
>2313	5c 17					.word	Command_RECT             ; $9b rect
>2315	6b 17					.word	Command_FRAME            ; $9c frame
>2317	7a 17					.word	Command_CHAR             ; $9d char
>2319	11 18					.word	Unary16Hex               ; $9e hex$
>231b	b8 18					.word	CommandInput             ; $9f input
>231d	cf 18					.word	CommandInputString       ; $a0 input$
>231f	e8 18					.word	CommandInputReset        ; $a1 input.start
>2321	cc 19					.word	UnaryLen                 ; $a2 len
>2323	98 1a					.word	LinkFloatCompare         ; $a3 f.cmp
>2325	a1 1a					.word	LinkDivideInt32          ; $a4 int.div
>2327	25 1b					.word	NegateTOS                ; $a5 negate
>2329	2c 1b					.word	CommandNewLine           ; $a6 new.line
>232b	35 1b					.word	CommandNext              ; $a7 next
>232d	1e 1c					.word	NotTOS                   ; $a8 not
>232f	35 1c					.word	CommandOn                ; $a9 on
>2331	53 1c					.word	CommandMoreOn            ; $aa moreon
>2333	66 1c					.word	UnaryPeek                ; $ab peek
>2335	7b 1c					.word	CommandPOKE              ; $ac poke
>2337	93 1c					.word	UnaryPos                 ; $ad pos
>2339	9d 1c					.word	GetChannel               ; $ae getchannel
>233b	a8 1c					.word	SetChannel               ; $af setchannel
>233d	cb 1c					.word	PrintNumber              ; $b0 print.n
>233f	ea 1c					.word	PrintString              ; $b1 print.s
>2341	51 1d					.word	CommandRead              ; $b2 read
>2343	6b 1d					.word	CommandReadString        ; $b3 read$
>2345	f6 1e					.word	UnaryRND                 ; $b4 rnd
>2347	65 1f					.word	StringConcatenate        ; $b5 concat
>2349	bc 1f					.word	SignTOS                  ; $b6 sgn
>234b	df 1f					.word	PrintTab                 ; $b7 print.tab
>234d	ed 1f					.word	PrintPos                 ; $b8 print.pos
>234f	fe 1f					.word	PrintSpace               ; $b9 print.spc
>2351	17 20					.word	Unary_Str                ; $ba str$
>2353	92 20					.word	Unary_Left               ; $bb left$
>2355	a2 20					.word	Unary_Right              ; $bc right$
>2357	be 20					.word	Unary_Mid                ; $bd mid$
>2359	30 21					.word	CommandSwap              ; $be swap
>235b	a6 21					.word	TimeTOS                  ; $bf ti
>235d	ad 21					.word	TimeString               ; $c0 ti$
>235f	83 22					.word	UnaryUsr                 ; $c1 usr
>2361	8f 22					.word	ValUnary                 ; $c2 val
>2363	ed 24					.word	CommandClose             ; $c3 close
>2365	ff 24					.word	CommandExit              ; $c4 exit
>2367	05 25					.word	CommandDebug             ; $c5 debug
>2369	6b 25					.word	CommandOpen              ; $c6 open
>236b	ff 25					.word	CommandScreen            ; $c7 screen
>236d	e6 27					.word	CommandVPOKE             ; $c8 vpoke
>236f	0b 28					.word	CommandVPEEK             ; $c9 vpeek
>2371	d7 1f					.word	CommandShift             ; $ca .shift
>2373	6d 10					.word	PushByteCommand          ; $cb .byte
>2375	80 10					.word	PushWordCommand          ; $cc .word
>2377	0d 1d					.word	CommandPushN             ; $cd .float
>2379	33 1d					.word	CommandPushS             ; $ce .string
>237b	10 13					.word	CommandData              ; $cf .data
>237d	f8 16					.word	CommandGoto              ; $d0 .goto
>237f	da 16					.word	CommandGosub             ; $d1 .gosub
>2381	0f 17					.word	CommandGotoZ             ; $d2 .goto.z
>2383	1e 17					.word	CommandGotoNZ            ; $d3 .goto.nz
>2385	af 10					.word	CommandVarSpace          ; $d4 .varspace
.2387					ShiftVectorTable:
>2387	4c 12					.word	CommandClr               ; $ca80 clr
>2389	19 13					.word	CommandDIM               ; $ca81 dim
>238b	0a 14					.word	CommandEnd               ; $ca82 end
>238d	9d 19					.word	UnaryJoy                 ; $ca83 joy
>238f	44 1a					.word	LinkFloatIntegerPartDown ; $ca84 int
>2391	4d 1a					.word	LinkFloatSquareRoot      ; $ca85 sqr
>2393	5e 1a					.word	LinkFloatLogarithm       ; $ca86 log
>2395	69 1a					.word	LinkFloatExponent        ; $ca87 exp
>2397	72 1a					.word	LinkFloatCosine          ; $ca88 cos
>2399	7b 1a					.word	LinkFloatSine            ; $ca89 sin
>239b	84 1a					.word	LinkFloatTangent         ; $ca8a tan
>239d	8d 1a					.word	LinkFloatArcTan          ; $ca8b atn
>239f	d5 1a					.word	XCommandMouse            ; $ca8c mouse
>23a1	ea 1a					.word	XUnaryMB                 ; $ca8d mb
>23a3	f7 1a					.word	XUnaryMX                 ; $ca8e mx
>23a5	08 1b					.word	XUnaryMY                 ; $ca8f my
>23a7	e4 1e					.word	CommandRestore           ; $ca90 restore
>23a9	13 20					.word	CommandStop              ; $ca91 stop
>23ab	70 21					.word	CommandSYS               ; $ca92 sys
>23ad	18 22					.word	CommandTIWrite           ; $ca93 ti$.write
>23af	e5 23					.word	CommandWAIT              ; $ca94 wait
>23b1	30 25					.word	X16I2CPoke               ; $ca95 i2cpoke
>23b3	50 25					.word	X16I2CPeek               ; $ca96 i2cpeek
>23b5	bb 25					.word	CommandBank              ; $ca97 bank
>23b7	0e 26					.word	XCommandSleep            ; $ca98 sleep
>23b9	32 26					.word	X16_Audio_FMINIT         ; $ca99 fminit
>23bb	40 26					.word	X16_Audio_FMNOTE         ; $ca9a fmnote
>23bd	52 26					.word	X16_Audio_FMDRUM         ; $ca9b fmdrum
>23bf	64 26					.word	X16_Audio_FMINST         ; $ca9c fminst
>23c1	76 26					.word	X16_Audio_FMVIB          ; $ca9d fmvib
>23c3	88 26					.word	X16_Audio_FMFREQ         ; $ca9e fmfreq
>23c5	99 26					.word	X16_Audio_FMVOL          ; $ca9f fmvol
>23c7	ab 26					.word	X16_Audio_FMPAN          ; $caa0 fmpan
>23c9	bd 26					.word	X16_Audio_FMPLAY         ; $caa1 fmplay
>23cb	ce 26					.word	X16_Audio_FMCHORD        ; $caa2 fmchord
>23cd	df 26					.word	X16_Audio_FMPOKE         ; $caa3 fmpoke
>23cf	f1 26					.word	X16_Audio_PSGINIT        ; $caa4 psginit
>23d1	ff 26					.word	X16_Audio_PSGNOTE        ; $caa5 psgnote
>23d3	11 27					.word	X16_Audio_PSGVOL         ; $caa6 psgvol
>23d5	23 27					.word	X16_Audio_PSGWAV         ; $caa7 psgwav
>23d7	35 27					.word	X16_Audio_PSGFREQ        ; $caa8 psgfreq
>23d9	46 27					.word	X16_Audio_PSGPAN         ; $caa9 psgpan
>23db	58 27					.word	X16_Audio_PSGPLAY        ; $caaa psgplay
>23dd	69 27					.word	X16_Audio_PSGCHORD       ; $caab psgchord
>23df	7a 27					.word	CommandCls               ; $caac cls
>23e1	83 27					.word	CommandLocate            ; $caad locate
>23e3	ad 27					.word	CommandColor             ; $caae color
.23e5					CommandWAIT:
.23e5	fa		plx				plx
.23e6	b5 3e		lda $3e,x			lda 	NSMantissa0-2,x 			; get wait address
.23e8	85 28		sta $28				sta 	zTemp0
.23ea	b5 4a		lda $4a,x			lda 	NSMantissa1-2,x
.23ec	85 29		sta $29				sta 	zTemp0+1
.23ee					_WaitLoop:
.23ee	b2 28		lda ($28)			lda 	(zTemp0) 					; read it
.23f0	35 3f		and $3f,x			and 	NSMantissa0-1,x		 		; and with mask
.23f2	55 40		eor $40,x			eor 	NSMantissa0-0,x 			; toggle
.23f4	f0 f8		beq $23ee			beq 	_WaitLoop 					; keep going if zero
.23f6	ca		dex				dex 								; drop 3.
.23f7	ca		dex				dex
.23f8	ca		dex				dex
.23f9	4c 2f 10	jmp $102f			jmp 	NextCommand
.23fc					WriteFloatCommand:
.23fc	fa		plx				plx
.23fd	b1 22		lda ($22),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.23ff	85 28		sta $28				sta 	zTemp0 						; save in MSB
.2401	88		dey				dey 								; get the upper 3 bits
.2402	b1 22		lda ($22),y			lda 	(codePtr),y
.2404	29 07		and #$07			and 	#7
.2406	c8		iny				iny
.2407	c8		iny				iny
.2408	06 28		asl $28				asl 	zTemp0 						; shift zTemp0:A left
.240a	2a		rol a				rol 	a 							; carry will be clear.
.240b	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.240e	85 29		sta $29				sta 	zTemp0+1
.2410	20 16 24	jsr $2416			jsr 	WriteFloatZTemp0Sub
.2413	4c 2f 10	jmp $102f			jmp 	NextCommand
.2416					WriteFloatZTemp0Sub:
.2416	5a		phy				phy 								; ldart write
.2417	a0 01		ldy #$01			ldy 	#1
.2419	b5 40		lda $40,x			lda 	NSMantissa0,x
.241b	92 28		sta ($28)			sta 	(zTemp0)
.241d	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.241f	91 28		sta ($28),y			sta 	(zTemp0),y
.2421	c8		iny				iny
.2422	b5 58		lda $58,x			lda 	NSMantissa2,x
.2424	91 28		sta ($28),y			sta 	(zTemp0),y
.2426	c8		iny				iny
.2427	b5 64		lda $64,x			lda 	NSMantissa3,x
.2429	91 28		sta ($28),y			sta 	(zTemp0),y
.242b	c8		iny				iny
.242c	b5 70		lda $70,x			lda 	NSExponent,x
.242e	91 28		sta ($28),y			sta 	(zTemp0),y
.2430	c8		iny				iny
.2431	b5 34		lda $34,x			lda 	NSStatus,x
.2433	91 28		sta ($28),y			sta 	(zTemp0),y
.2435	ca		dex				dex
.2436	7a		ply				ply
.2437	60		rts				rts
.2438					WriteIntegerCommand:
.2438	fa		plx				plx
.2439	b1 22		lda ($22),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.243b	85 28		sta $28				sta 	zTemp0 						; save in MSB
.243d	88		dey				dey 								; get the upper 3 bits
.243e	b1 22		lda ($22),y			lda 	(codePtr),y
.2440	29 07		and #$07			and 	#7
.2442	c8		iny				iny
.2443	c8		iny				iny
.2444	06 28		asl $28				asl 	zTemp0 						; shift zTemp0:A left
.2446	2a		rol a				rol 	a 							; carry will be clear.
.2447	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.244a	85 29		sta $29				sta 	zTemp0+1
.244c	20 52 24	jsr $2452			jsr 	WriteIntegerZTemp0Sub
.244f	4c 2f 10	jmp $102f			jmp 	NextCommand
.2452					WriteIntegerZTemp0Sub:
.2452	20 49 2a	jsr $2a49			jsr 	FloatIntegerPart
.2455	5a		phy				phy 								; start write
.2456	a0 01		ldy #$01			ldy 	#1
.2458	b5 34		lda $34,x			lda 	NSStatus,x 					; negate 2's comp if -ve
.245a	30 0b		bmi $2467			bmi 	_WIZNegative
.245c	b5 40		lda $40,x			lda 	NSMantissa0,x 				; +ve write
.245e	92 28		sta ($28)			sta 	(zTemp0)
.2460	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.2462	91 28		sta ($28),y			sta 	(zTemp0),y
.2464	7a		ply				ply
.2465	ca		dex				dex
.2466	60		rts				rts
.2467					_WIZNegative:
.2467	38		sec				sec 								; -ve read
.2468	a9 00		lda #$00			lda 	#0
.246a	f5 40		sbc $40,x			sbc 	NSMantissa0,x
.246c	92 28		sta ($28)			sta 	(zTemp0)
.246e	a9 00		lda #$00			lda 	#0
.2470	f5 4c		sbc $4c,x			sbc 	NSMantissa1,x
.2472	91 28		sta ($28),y			sta 	(zTemp0),y
.2474	7a		ply				ply
.2475	ca		dex				dex
.2476	60		rts				rts
.2477					WriteStringCommand:
.2477	fa		plx				plx
.2478	b1 22		lda ($22),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.247a	85 28		sta $28				sta 	zTemp0 						; save in MSB
.247c	88		dey				dey 								; get the upper 3 bits
.247d	b1 22		lda ($22),y			lda 	(codePtr),y
.247f	29 07		and #$07			and 	#7
.2481	c8		iny				iny
.2482	c8		iny				iny
.2483	06 28		asl $28				asl 	zTemp0 						; shift zTemp0:A left
.2485	2a		rol a				rol 	a 							; carry will be clear.
.2486	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.2489	85 29		sta $29				sta 	zTemp0+1
.248b	20 91 24	jsr $2491			jsr 	WriteStringZTemp0Sub
.248e	4c 2f 10	jmp $102f			jmp 	NextCommand
.2491					WriteStringZTemp0Sub:
.2491	5a		phy				phy
.2492	a0 01		ldy #$01			ldy 	#1 							; if it is zero we must concrete whatever.
.2494	b2 28		lda ($28)			lda 	(zTemp0)
.2496	11 28		ora ($28),y			ora 	(zTemp0),y
.2498	f0 1e		beq $24b8			beq 	_WSConcrete
.249a	b2 28		lda ($28)			lda 	(zTemp0) 					; put address of actual string in zTemp1
.249c	85 2a		sta $2a				sta 	zTemp1
.249e	b1 28		lda ($28),y			lda 	(zTemp0),y
.24a0	85 2b		sta $2b				sta 	zTemp1+1
.24a2	b5 40		lda $40,x			lda 	NSMantissa0,x 				; copy source to zTemp2
.24a4	85 2c		sta $2c				sta 	zTemp2
.24a6	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.24a8	85 2d		sta $2d				sta 	zTemp2+1
.24aa	b2 2a		lda ($2a)			lda 	(zTemp1) 					; space available
.24ac	d2 2c		cmp ($2c)			cmp 	(zTemp2) 					; if >= required length then copy
.24ae	b0 17		bcs $24c7			bcs 	_WSCopy
.24b0	a0 01		ldy #$01			ldy 	#1 							; set the 'available for reclaim' flag
.24b2	b1 2a		lda ($2a),y			lda 	(zTemp1),y
.24b4	09 80		ora #$80			ora 	#$80
.24b6	91 2a		sta ($2a),y			sta 	(zTemp1),y
.24b8					_WSConcrete:
.24b8	b5 4c		lda $4c,x			lda 	NSMantissa1,x 				; string in YA
.24ba	a8		tay				tay
.24bb	b5 40		lda $40,x			lda 	NSMantissa0,x
.24bd	20 ca 12	jsr $12ca			jsr 	StringConcrete
.24c0	92 28		sta ($28)			sta 	(zTemp0) 					; save returned address
.24c2	98		tya				tya
.24c3	a0 01		ldy #$01			ldy 	#1
.24c5	91 28		sta ($28),y			sta 	(zTemp0),y
.24c7					_WSCopy
.24c7	18		clc				clc  								; copy target+2 to zTemp2
.24c8	b2 28		lda ($28)			lda 	(zTemp0)
.24ca	69 02		adc #$02			adc 	#2
.24cc	85 2c		sta $2c				sta 	zTemp2
.24ce	a0 01		ldy #$01			ldy 	#1
.24d0	b1 28		lda ($28),y			lda 	(zTemp0),y
.24d2	69 00		adc #$00			adc 	#0
.24d4	85 2d		sta $2d				sta 	zTemp2+1
.24d6	b5 40		lda $40,x			lda 	NSMantissa0,x 				; copy source to zTemp1
.24d8	85 2a		sta $2a				sta 	zTemp1
.24da	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.24dc	85 2b		sta $2b				sta 	zTemp1+1
.24de	b2 2a		lda ($2a)			lda 	(zTemp1) 					; length of string .. 0 inclusive
.24e0	a8		tay				tay
.24e1					_WSCopyLoop:
.24e1	b1 2a		lda ($2a),y			lda 	(zTemp1),y
.24e3	91 2c		sta ($2c),y			sta 	(zTemp2),y
.24e5	88		dey				dey
.24e6	c0 ff		cpy #$ff			cpy 	#$FF
.24e8	d0 f7		bne $24e1			bne 	_WSCopyLoop
.24ea	ca		dex				dex
.24eb	7a		ply				ply
.24ec	60		rts				rts
.24ed					CommandClose:
.24ed	fa		plx				plx
.24ee	20 75 19	jsr $1975			jsr 	GetInteger8Bit 				; channel to close
.24f1	cd 5d 04	cmp $045d			cmp 	currentChannel 				; is it the current channel
.24f4	d0 03		bne $24f9			bne 	_CCNotCurrent
.24f6	9c 5d 04	stz $045d			stz 	currentChannel 				; effectively disables CMD
.24f9					_CCNotCurrent:
.24f9	20 c3 ff	jsr $ffc3			jsr 	X16_CLOSE 					; close the file
.24fc	4c 2f 10	jmp $102f			jmp 	NextCommand
.24ff					CommandExit:
.24ff	fa		plx				plx
.2500	86 28		stx $28				stx 	zTemp0 						; stack position.
.2502	4c ff ff	jmp $ffff			jmp 	$FFFF 						; exits the emulator.
.2505					CommandDebug:
.2505	fa		plx				plx
>2506	db						.byte 	$DB 						; causes a break in the emulator
.2507	4c 2f 10	jmp $102f			jmp 	NextCommand
.250a					XGetCharacterFromChannel:
.250a	da		phx				phx
.250b	5a		phy				phy
.250c	e0 00		cpx #$00			cpx 	#0 							; is it default
.250e	d0 05		bne $2515			bne 	_XGetChannel
.2510	20 cc ff	jsr $ffcc			jsr 	X16_CLRCHN 					; set default channel
.2513	80 08		bra $251d			bra 	_XGetChar
.2515					_XGetChannel:
.2515	20 c6 ff	jsr $ffc6			jsr 	X16_CHKIN					; CHKIN set channel
.2518	20 b7 ff	jsr $ffb7			jsr 	X16_READST 					; check okay
.251b	d0 06		bne $2523			bne 	_XGCError
.251d					_XGetChar:
.251d	20 e4 ff	jsr $ffe4			jsr 	X16_GETIN
.2520	7a		ply				ply
.2521	fa		plx				plx
.2522	60		rts				rts
.2523					_XGCError:
.2523	4c 8b 15	jmp $158b		jmp	ErrorV_channel
.2526					XGetHPos:
.2526	da		phx				phx
.2527	5a		phy				phy
.2528	38		sec				sec
.2529	20 f0 ff	jsr $fff0			jsr 	X16_PLOT
.252c	98		tya				tya
.252d	7a		ply				ply
.252e	fa		plx				plx
.252f	60		rts				rts
.2530					X16I2CPoke:
.2530	fa		plx				plx
.2531	5a		phy				phy
.2532	20 75 19	jsr $1975			jsr 	GetInteger8Bit 				; value
.2535	48		pha				pha
.2536	ca		dex				dex
.2537	20 75 19	jsr $1975			jsr 	GetInteger8Bit 				; register
.253a	48		pha				pha
.253b	ca		dex				dex
.253c	20 75 19	jsr $1975			jsr 	GetInteger8Bit 				; device
.253f	aa		tax				tax
.2540	7a		ply				ply
.2541	68		pla				pla
.2542	20 c9 fe	jsr $fec9			jsr 	X16_i2c_write_byte 			; write the byte out.
.2545	b0 06		bcs $254d			bcs 	X16I2CError
.2547	7a		ply				ply
.2548	a2 ff		ldx #$ff			ldx 	#$FF
.254a	4c 2f 10	jmp $102f			jmp 	NextCommand
.254d					X16I2CError:
.254d	4c 8b 15	jmp $158b		jmp	ErrorV_channel
.2550					X16I2CPeek:
.2550	fa		plx				plx
.2551	da		phx				phx
.2552	5a		phy				phy
.2553	20 75 19	jsr $1975			jsr 	GetInteger8Bit 				; register
.2556	48		pha				pha
.2557	ca		dex				dex
.2558	20 75 19	jsr $1975			jsr 	GetInteger8Bit 				; device
.255b	aa		tax				tax 								; X device
.255c	7a		ply				ply 								; Y register
.255d	20 c6 fe	jsr $fec6			jsr 	X16_i2c_read_byte 			; read I2C
.2560	b0 eb		bcs $254d			bcs 	X16I2CError
.2562	7a		ply				ply 								; restore Y/X
.2563	fa		plx				plx
.2564	ca		dex				dex 								; drop TOS (register)
.2565	20 10 2e	jsr $2e10			jsr 	FloatSetByte 				; write read value to TOS.
.2568	4c 2f 10	jmp $102f			jmp 	NextCommand
.256b					CommandOpen:
.256b	fa		plx				plx
.256c	a5 43		lda $43				lda 	NSMantissa0+3  				; point zTemp0 to string head, also in XY
.256e	85 28		sta $28				sta 	zTemp0
.2570	aa		tax				tax
.2571	a5 4f		lda $4f				lda 	NSMantissa1+3
.2573	85 29		sta $29				sta 	zTemp0+1
.2575	a8		tay				tay
.2576	e8		inx				inx 								; XY points to first character
.2577	d0 01		bne $257a			bne 	_CONoCarry
.2579	c8		iny				iny
.257a					_CONoCarry:
.257a	b2 28		lda ($28)			lda 	(zTemp0) 					; get length of filename
.257c	20 bd ff	jsr $ffbd			jsr 	X16_SETNAM
.257f	a5 40		lda $40				lda 	NSMantissa0+0
.2581	a6 41		ldx $41				ldx 	NSMantissa0+1
.2583	a4 42		ldy $42				ldy 	NSMantissa0+2
.2585	20 ba ff	jsr $ffba			jsr 	X16_SETLFS
.2588	20 c0 ff	jsr $ffc0			jsr 	X16_OPEN
.258b	b0 03		bcs $2590			bcs 	_COError
.258d	4c 2f 10	jmp $102f			jmp 	NextCommand
.2590					_COError:
.2590	4c 8b 15	jmp $158b		jmp	ErrorV_channel
.2593					XPokeMemory:
.2593	86 28		stx $28				stx 	zTemp0
.2595	84 29		sty $29				sty 	zTemp0+1
.2597	a4 00		ldy $00				ldy 	SelectRAMBank 				; old RAM bank in Y
.2599	ae 6b 05	ldx $056b			ldx 	ramBank 					; switch to BANKed RAMBank if not $FF
.259c	e0 ff		cpx #$ff			cpx 	#$FF
.259e	f0 02		beq $25a2			beq 	_XPMNoSwitch
.25a0	86 00		stx $00				stx 	SelectRAMBank
.25a2					_XPMNoSwitch:
.25a2	92 28		sta ($28)			sta 	(zTemp0) 					; do the POKE
.25a4	84 00		sty $00				sty 	SelectRAMBank 				; reselect previous RAM Bank.
.25a6					_XPMExit:
.25a6	60		rts				rts
.25a7					XPeekMemory:
.25a7	86 28		stx $28				stx 	zTemp0
.25a9	84 29		sty $29				sty 	zTemp0+1
.25ab	a4 00		ldy $00				ldy 	SelectRAMBank 				; old RAM bank in Y
.25ad	ae 6b 05	ldx $056b			ldx 	ramBank 					; switch to BANKed RAMBank if not $FF
.25b0	e0 ff		cpx #$ff			cpx 	#$FF
.25b2	f0 02		beq $25b6			beq 	_XPMNoSwitch
.25b4	86 00		stx $00				stx 	SelectRAMBank
.25b6					_XPMNoSwitch:
.25b6	b2 28		lda ($28)			lda 	(zTemp0) 					; do the PEEK
.25b8	84 00		sty $00				sty 	SelectRAMBank 				; reselect previous RAM bank.
.25ba	60		rts				rts
.25bb					CommandBank:
.25bb	fa		plx				plx
.25bc	a5 40		lda $40				lda 	NSMantissa0 				; RAM bank
.25be	8d 6b 05	sta $056b			sta 	ramBank 					; store & make current
.25c1	85 00		sta $00				sta 	SelectRAMBank
.25c3	a5 41		lda $41				lda 	NSMantissa0+1 		 		; ROM specified
.25c5	c9 ff		cmp #$ff			cmp 	#$FF
.25c7	f0 03		beq $25cc			beq 	_CBNoUpdate
.25c9	8d 6c 05	sta $056c			sta 	romBank 					; this doesn't set the hardware page.
.25cc					_CBNoUpdate:
.25cc	a2 ff		ldx #$ff			ldx 	#$FF
.25ce	4c 2f 10	jmp $102f			jmp 	NextCommand
.056b					ramBank:
>056b							.fill 	1
.056c					romBank:
>056c							.fill 	1
.25d1					XPrintCharacterToChannel:
.25d1	48		pha				pha
.25d2	da		phx				phx
.25d3	5a		phy				phy
.25d4	48		pha				pha  								; save char
.25d5	e0 00		cpx #$00			cpx 	#0 							; check default (0)
.25d7	d0 05		bne $25de			bne 	_XPCNotDefault
.25d9	20 cc ff	jsr $ffcc			jsr 	X16_CLRCHN					; set default channel
.25dc	80 08		bra $25e6			bra 	_XPCSend
.25de					_XPCNotDefault:
.25de	20 c9 ff	jsr $ffc9			jsr 	X16_CHKOUT 					; CHKOUT set channel
.25e1	20 b7 ff	jsr $ffb7			jsr 	X16_READST 					; check okay
.25e4	d0 08		bne $25ee			bne 	_XPCError
.25e6					_XPCSend:
.25e6	68		pla				pla 								; restore character
.25e7	20 d2 ff	jsr $ffd2			jsr 	X16_BSOUT 					; print
.25ea	7a		ply				ply
.25eb	fa		plx				plx
.25ec	68		pla				pla
.25ed	60		rts				rts
.25ee					_XPCError:
.25ee	4c 8b 15	jmp $158b		jmp	ErrorV_channel
.25f1					XReadClock:
.25f1	20 de ff	jsr $ffde			jsr 	X16_RDTIM
.25f4	60		rts				rts
.25f5					XWriteClock:
.25f5	48		pha				pha
.25f6	da		phx				phx
.25f7	5a		phy				phy
.25f8	20 db ff	jsr $ffdb			jsr 	X16_SETTIM
.25fb	7a		ply				ply
.25fc	fa		plx				plx
.25fd	68		pla				pla
.25fe	60		rts				rts
.25ff					CommandScreen:
.25ff	fa		plx				plx
.2600	da		phx				phx
.2601	5a		phy				phy
.2602	20 75 19	jsr $1975			jsr 	GetInteger8Bit
.2605	18		clc				clc
.2606	20 5f ff	jsr $ff5f			jsr 	X16_screen_mode
.2609	7a		ply				ply
.260a	fa		plx				plx
.260b	4c 2f 10	jmp $102f			jmp 	NextCommand
.260e					XCommandSleep:
.260e	fa		plx				plx
.260f	5a		phy				phy
.2610	20 49 2a	jsr $2a49			jsr 	FloatIntegerPart
.2613	ca		dex				dex
.2614	20 f1 25	jsr $25f1			jsr 	XReadClock 					; read clock to YXA
.2617	18		clc				clc 								; calculate end time in zTemp0
.2618	65 40		adc $40				adc 	NSMantissa0
.261a	85 28		sta $28				sta 	zTemp0
.261c	8a		txa				txa
.261d	65 4c		adc $4c				adc 	NSMantissa1
.261f	85 29		sta $29				sta 	zTemp0+1
.2621					_XCWait:
.2621	20 f1 25	jsr $25f1			jsr 	XReadClock 					; and wait for it.
.2624	c5 28		cmp $28				cmp 	zTemp0
.2626	d0 f9		bne $2621			bne 	_XCWait
.2628	e4 29		cpx $29				cpx 	zTemp0+1
.262a	d0 f5		bne $2621			bne 	_XCWait
.262c	a2 ff		ldx #$ff			ldx 	#$FF
.262e	7a		ply				ply
.262f	4c 2f 10	jmp $102f			jmp 	NextCommand
.2632					X16_Audio_FMINIT:
.2632	fa		plx				plx
.2633	5a		phy			phy
.2634	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>2637	63 c0					.word	X16A_ym_init
>2639	0a					.byte	X16_AudioCodeBank
.263a	a2 ff		ldx #$ff		ldx	#$FF
.263c	7a		ply			ply
.263d	4c 2f 10	jmp $102f			jmp 	NextCommand
.2640					X16_Audio_FMNOTE:
.2640	fa		plx				plx
.2641	5a		phy			phy
.2642	20 d6 11	jsr $11d6		jsr		X16_Audio_Parameters8_8
.2645	18		clc			clc
.2646	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>2649	03 c0					.word	X16A_bas_fmnote
>264b	0a					.byte	X16_AudioCodeBank
.264c	a2 ff		ldx #$ff		ldx	#$FF
.264e	7a		ply			ply
.264f	4c 2f 10	jmp $102f			jmp 	NextCommand
.2652					X16_Audio_FMDRUM:
.2652	fa		plx				plx
.2653	5a		phy			phy
.2654	20 d6 11	jsr $11d6		jsr		X16_Audio_Parameters8_8
.2657	18		clc			clc
.2658	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>265b	6f c0					.word	X16A_ym_playdrum
>265d	0a					.byte	X16_AudioCodeBank
.265e	a2 ff		ldx #$ff		ldx	#$FF
.2660	7a		ply			ply
.2661	4c 2f 10	jmp $102f			jmp 	NextCommand
.2664					X16_Audio_FMINST:
.2664	fa		plx				plx
.2665	5a		phy			phy
.2666	20 d6 11	jsr $11d6		jsr		X16_Audio_Parameters8_8
.2669	38		sec			sec
.266a	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>266d	69 c0					.word	X16A_ym_loadpatch
>266f	0a					.byte	X16_AudioCodeBank
.2670	a2 ff		ldx #$ff		ldx	#$FF
.2672	7a		ply			ply
.2673	4c 2f 10	jmp $102f			jmp 	NextCommand
.2676					X16_Audio_FMVIB:
.2676	fa		plx				plx
.2677	5a		phy			phy
.2678	20 d6 11	jsr $11d6		jsr		X16_Audio_Parameters8_8
.267b	18		clc			clc
.267c	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>267f	09 c0					.word	X16A_bas_fmvib
>2681	0a					.byte	X16_AudioCodeBank
.2682	a2 ff		ldx #$ff		ldx	#$FF
.2684	7a		ply			ply
.2685	4c 2f 10	jmp $102f			jmp 	NextCommand
.2688					X16_Audio_FMFREQ:
.2688	fa		plx				plx
.2689	5a		phy			phy
.268a	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_16
.268d	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>2690	00 c0					.word	X16A_bas_fmfreq
>2692	0a					.byte	X16_AudioCodeBank
.2693	a2 ff		ldx #$ff		ldx	#$FF
.2695	7a		ply			ply
.2696	4c 2f 10	jmp $102f			jmp 	NextCommand
.2699					X16_Audio_FMVOL:
.2699	fa		plx				plx
.269a	5a		phy			phy
.269b	20 d6 11	jsr $11d6		jsr		X16_Audio_Parameters8_8
.269e	18		clc			clc
.269f	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>26a2	75 c0					.word	X16A_ym_setatten
>26a4	0a					.byte	X16_AudioCodeBank
.26a5	a2 ff		ldx #$ff		ldx	#$FF
.26a7	7a		ply			ply
.26a8	4c 2f 10	jmp $102f			jmp 	NextCommand
.26ab					X16_Audio_FMPAN:
.26ab	fa		plx				plx
.26ac	5a		phy			phy
.26ad	20 d6 11	jsr $11d6		jsr		X16_Audio_Parameters8_8
.26b0	18		clc			clc
.26b1	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>26b4	7e c0					.word	X16A_ym_setpan
>26b6	0a					.byte	X16_AudioCodeBank
.26b7	a2 ff		ldx #$ff		ldx	#$FF
.26b9	7a		ply			ply
.26ba	4c 2f 10	jmp $102f			jmp 	NextCommand
.26bd					X16_Audio_FMPLAY:
.26bd	fa		plx				plx
.26be	5a		phy			phy
.26bf	20 e7 11	jsr $11e7		jsr		X16_Audio_Parameters8_String
.26c2	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>26c5	06 c0					.word	X16A_bas_fmplaystring
>26c7	0a					.byte	X16_AudioCodeBank
.26c8	a2 ff		ldx #$ff		ldx	#$FF
.26ca	7a		ply			ply
.26cb	4c 2f 10	jmp $102f			jmp 	NextCommand
.26ce					X16_Audio_FMCHORD:
.26ce	fa		plx				plx
.26cf	5a		phy			phy
.26d0	20 e7 11	jsr $11e7		jsr		X16_Audio_Parameters8_String
.26d3	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>26d6	8d c0					.word	X16A_bas_fmchordstring
>26d8	0a					.byte	X16_AudioCodeBank
.26d9	a2 ff		ldx #$ff		ldx	#$FF
.26db	7a		ply			ply
.26dc	4c 2f 10	jmp $102f			jmp 	NextCommand
.26df					X16_Audio_FMPOKE:
.26df	fa		plx				plx
.26e0	5a		phy			phy
.26e1	20 d6 11	jsr $11d6		jsr		X16_Audio_Parameters8_8
.26e4	18		clc			clc
.26e5	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>26e8	8a c0					.word	X16A_ym_write
>26ea	0a					.byte	X16_AudioCodeBank
.26eb	a2 ff		ldx #$ff		ldx	#$FF
.26ed	7a		ply			ply
.26ee	4c 2f 10	jmp $102f			jmp 	NextCommand
.26f1					X16_Audio_PSGINIT:
.26f1	fa		plx				plx
.26f2	5a		phy			phy
.26f3	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>26f6	4b c0					.word	X16A_psg_init
>26f8	0a					.byte	X16_AudioCodeBank
.26f9	a2 ff		ldx #$ff		ldx	#$FF
.26fb	7a		ply			ply
.26fc	4c 2f 10	jmp $102f			jmp 	NextCommand
.26ff					X16_Audio_PSGNOTE:
.26ff	fa		plx				plx
.2700	5a		phy			phy
.2701	20 d6 11	jsr $11d6		jsr		X16_Audio_Parameters8_8
.2704	18		clc			clc
.2705	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>2708	12 c0					.word	X16A_bas_psgnote
>270a	0a					.byte	X16_AudioCodeBank
.270b	a2 ff		ldx #$ff		ldx	#$FF
.270d	7a		ply			ply
.270e	4c 2f 10	jmp $102f			jmp 	NextCommand
.2711					X16_Audio_PSGVOL:
.2711	fa		plx				plx
.2712	5a		phy			phy
.2713	20 d6 11	jsr $11d6		jsr		X16_Audio_Parameters8_8
.2716	18		clc			clc
.2717	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>271a	54 c0					.word	X16A_psg_setatten
>271c	0a					.byte	X16_AudioCodeBank
.271d	a2 ff		ldx #$ff		ldx	#$FF
.271f	7a		ply			ply
.2720	4c 2f 10	jmp $102f			jmp 	NextCommand
.2723					X16_Audio_PSGWAV:
.2723	fa		plx				plx
.2724	5a		phy			phy
.2725	20 d6 11	jsr $11d6		jsr		X16_Audio_Parameters8_8
.2728	18		clc			clc
.2729	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>272c	15 c0					.word	X16A_bas_psgwav
>272e	0a					.byte	X16_AudioCodeBank
.272f	a2 ff		ldx #$ff		ldx	#$FF
.2731	7a		ply			ply
.2732	4c 2f 10	jmp $102f			jmp 	NextCommand
.2735					X16_Audio_PSGFREQ:
.2735	fa		plx				plx
.2736	5a		phy			phy
.2737	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_16
.273a	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>273d	0f c0					.word	X16A_bas_psgfreq
>273f	0a					.byte	X16_AudioCodeBank
.2740	a2 ff		ldx #$ff		ldx	#$FF
.2742	7a		ply			ply
.2743	4c 2f 10	jmp $102f			jmp 	NextCommand
.2746					X16_Audio_PSGPAN:
.2746	fa		plx				plx
.2747	5a		phy			phy
.2748	20 d6 11	jsr $11d6		jsr		X16_Audio_Parameters8_8
.274b	18		clc			clc
.274c	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>274f	5a c0					.word	X16A_psg_setpan
>2751	0a					.byte	X16_AudioCodeBank
.2752	a2 ff		ldx #$ff		ldx	#$FF
.2754	7a		ply			ply
.2755	4c 2f 10	jmp $102f			jmp 	NextCommand
.2758					X16_Audio_PSGPLAY:
.2758	fa		plx				plx
.2759	5a		phy			phy
.275a	20 e7 11	jsr $11e7		jsr		X16_Audio_Parameters8_String
.275d	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>2760	18 c0					.word	X16A_bas_psgplaystring
>2762	0a					.byte	X16_AudioCodeBank
.2763	a2 ff		ldx #$ff		ldx	#$FF
.2765	7a		ply			ply
.2766	4c 2f 10	jmp $102f			jmp 	NextCommand
.2769					X16_Audio_PSGCHORD:
.2769	fa		plx				plx
.276a	5a		phy			phy
.276b	20 e7 11	jsr $11e7		jsr		X16_Audio_Parameters8_String
.276e	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>2771	90 c0					.word	X16A_bas_psgchordstring
>2773	0a					.byte	X16_AudioCodeBank
.2774	a2 ff		ldx #$ff		ldx	#$FF
.2776	7a		ply			ply
.2777	4c 2f 10	jmp $102f			jmp 	NextCommand
.277a					CommandCls:
.277a	fa		plx				plx
.277b	a9 93		lda #$93			lda 	#147
.277d	20 d1 25	jsr $25d1			jsr 	XPrintCharacterToChannel
.2780	4c 2f 10	jmp $102f			jmp 	NextCommand
.2783					CommandLocate:
.2783	fa		plx				plx
.2784	20 49 2a	jsr $2a49			jsr 	FloatIntegerPart
.2787	ca		dex				dex
.2788	20 49 2a	jsr $2a49			jsr 	FloatIntegerPart
.278b	ca		dex				dex
.278c	a9 13		lda #$13			lda 	#$13 						; home.
.278e	20 d1 25	jsr $25d1			jsr 	XPrintCharacterToChannel
.2791	a9 1d		lda #$1d			lda 	#$1D 						; do cursor rights
.2793	a6 40		ldx $40				ldx 	NSMantissa0
.2795	20 a2 27	jsr $27a2			jsr 	_CLOutputXA
.2798	a9 11		lda #$11			lda 	#$11 						; do cursor downs.
.279a	a6 41		ldx $41				ldx 	NSMantissa0+1
.279c	20 a2 27	jsr $27a2			jsr 	_CLOutputXA
.279f	4c 2f 10	jmp $102f			jmp 	NextCommand
.27a2					_CLOutputXA:
.27a2	ca		dex				dex
.27a3	f0 07		beq $27ac			beq 	_CLOExit
.27a5	30 05		bmi $27ac			bmi 	_CLOExit
.27a7	20 d1 25	jsr $25d1			jsr 	XPrintCharacterToChannel
.27aa	80 f6		bra $27a2			bra 	_CLOutputXA
.27ac					_CLOExit:
.27ac	60		rts				rts
.27ad					CommandColor:
.27ad	fa		plx				plx
.27ae	20 49 2a	jsr $2a49			jsr 	FloatIntegerPart
.27b1	ca		dex				dex
.27b2	20 49 2a	jsr $2a49			jsr 	FloatIntegerPart
.27b5	ca		dex				dex
.27b6	a5 41		lda $41				lda 	NSMantissa0+1 				; bgr specified
.27b8	c9 ff		cmp #$ff			cmp 	#$FF
.27ba	f0 08		beq $27c4			beq 	_CCNoBGR 					; if so, change background
.27bc	20 cc 27	jsr $27cc			jsr 	_CCSetColour
.27bf	a9 01		lda #$01			lda 	#$01 						; swap FGR/BGR
.27c1	20 d1 25	jsr $25d1			jsr 	XPrintCharacterToChannel
.27c4					_CCNoBGR:
.27c4	a5 40		lda $40				lda 	NSMantissa0
.27c6	20 cc 27	jsr $27cc			jsr 	_CCSetColour
.27c9	4c 2f 10	jmp $102f			jmp 	NextCommand
.27cc					_CCSetColour:
.27cc	29 0f		and #$0f			and 	#15 						; look up in control codes table.
.27ce	aa		tax				tax
.27cf	bd d6 27	lda $27d6,x			lda 	_CCCommandTable,x
.27d2	20 d1 25	jsr $25d1			jsr 	XPrintCharacterToChannel
.27d5	60		rts				rts
.27d6					_CCCommandTable:
>27d6	90 05 1c 9f 9c 1e 1f 9e				.byte	 $90,$05,$1c,$9f,$9c,$1e,$1f,$9e
>27de	81 95 96 97 98 99 9a 9b				.byte	 $81,$95,$96,$97,$98,$99,$9a,$9b
.27e6					CommandVPOKE:
.27e6	fa		plx				plx
.27e7	20 75 19	jsr $1975			jsr 	GetInteger8Bit 				; poke value
.27ea	48		pha				pha
.27eb	ca		dex				dex
.27ec	20 49 2a	jsr $2a49			jsr 	FloatIntegerPart
.27ef	b5 40		lda $40,x			lda 	NSMantissa0,x
.27f1	8d 20 9f	sta $9f20			sta 	VRAMLow0
.27f4	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.27f6	8d 21 9f	sta $9f21			sta 	VRAMMed0
.27f9	ca		dex				dex
.27fa	20 49 2a	jsr $2a49			jsr 	FloatIntegerPart
.27fd	20 75 19	jsr $1975			jsr 	GetInteger8Bit
.2800	8d 22 9f	sta $9f22			sta 	VRAMHigh0
.2803	ca		dex				dex
.2804	68		pla				pla 								; poke value back
.2805	8d 23 9f	sta $9f23			sta 	VRAMData0					; and write it out.
.2808	4c 2f 10	jmp $102f			jmp 	NextCommand
.280b					CommandVPEEK:
.280b	fa		plx				plx
.280c	20 49 2a	jsr $2a49			jsr 	FloatIntegerPart
.280f	b5 40		lda $40,x			lda 	NSMantissa0,x
.2811	8d 20 9f	sta $9f20			sta 	VRAMLow0
.2814	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.2816	8d 21 9f	sta $9f21			sta 	VRAMMed0
.2819	ca		dex				dex
.281a	20 49 2a	jsr $2a49			jsr 	FloatIntegerPart
.281d	20 75 19	jsr $1975			jsr 	GetInteger8Bit
.2820	8d 22 9f	sta $9f22			sta 	VRAMHigh0
.2823	ad 23 9f	lda $9f23			lda 	VRAMData0					; read data
.2826	20 10 2e	jsr $2e10			jsr 	FloatSetByte 				; return as byte
.2829	4c 2f 10	jmp $102f			jmp 	NextCommand

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library

=12					MathStackSize = 12
=$40					NSSString = $40 							; string vs typemask
=$00					NSSIFloat = $00 							; ifloat vs typemask
=$20					NSSIInt16 = $20								; when set, a reference is a 16 bit reference (e.g. a%)
=$40					NSSTypeMask = $40
=$80					NSSArray = $80  							; array (in variable code)
.0034					NSStatus:
>0034							.fill 	MathStackSize
.0040					NSMantissa0:
>0040							.fill 	MathStackSize 				; (this is my integer mantissa system)
.004c					NSMantissa1:
>004c							.fill 	MathStackSize
.0058					NSMantissa2:
>0058							.fill 	MathStackSize
.0064					NSMantissa3:
>0064							.fill 	MathStackSize
.0070					NSExponent:
>0070							.fill 	MathStackSize
.056d					numberBuffer:
>056d							.fill 	34
.282c					FloatSubtract:
.282c	b5 34		lda $34,x			lda 	NSStatus,x 					; negate top of stack
.282e	49 80		eor #$80			eor 	#$80
.2830	95 34		sta $34,x			sta 	NSStatus,x					; and fall through.
.2832					FloatAdd:
.2832	ca		dex				dex
.2833	b5 70		lda $70,x			lda 	NSExponent,x 				; can use optimised.
.2835	15 71		ora $71,x			ora 	NSExponent+1,x
.2837	15 64		ora $64,x			ora 	NSMantissa3,x
.2839	15 65		ora $65,x			ora 	NSMantissa3+1,x
.283b	d0 04		bne $2841			bne 	_FAUseFloat
.283d	20 ce 2b	jsr $2bce			jsr 	FloatInt32Add 				; use the int32 one.
.2840	60		rts				rts
.2841					_FAUseFloat:
.2841	20 63 2b	jsr $2b63			jsr 	FloatNormalise 				; normalise S[X]
.2844	f0 51		beq $2897			beq 	_FAReturn1
.2846	e8		inx				inx 								; normalise S[X+1]
.2847	20 63 2b	jsr $2b63			jsr 	FloatNormalise
.284a	ca		dex				dex
.284b	c9 00		cmp #$00			cmp 	#0
.284d	f0 60		beq $28af			beq 	_FAExit 					; if so, just return A
.284f	b5 70		lda $70,x			lda 	NSExponent,x 				; are the exponents the same ?
.2851	d5 71		cmp $71,x			cmp 	NSExponent+1,x
.2853	f0 18		beq $286d			beq 	_FAExponentsEqual
.2855	b5 70		lda $70,x			lda 	NSExponent,x 				; work out the larger exponent
.2857	a8		tay				tay
.2858	38		sec				sec 								; do a signed comparison of the exponents.
.2859	f5 71		sbc $71,x			sbc 	NSExponent+1,x
.285b	50 02		bvc $285f			bvc 	_FANoSignedChange
.285d	49 80		eor #$80			eor 	#$80
.285f					_FANoSignedChange:
.285f	29 80		and #$80			and 	#$80
.2861	10 02		bpl $2865			bpl 	_FAHaveMax
.2863	b4 71		ldy $71,x			ldy 	NSExponent+1,x
.2865					_FAHaveMax:
.2865	20 b0 28	jsr $28b0			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.2868	e8		inx				inx
.2869	20 b0 28	jsr $28b0			jsr 	_FAShiftToExponent
.286c	ca		dex				dex
.286d					_FAExponentsEqual:
.286d	b5 34		lda $34,x			lda 	NSStatus,x 					; are the signs the same
.286f	55 35		eor $35,x			eor 	NSStatus+1,x
.2871	30 0e		bmi $2881			bmi 	_FADifferentSigns
.2873	20 9a 2b	jsr $2b9a			jsr 	FloatAddTopTwoStack 		; do the add of the mantissae
.2876	b5 64		lda $64,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.2878	10 35		bpl $28af			bpl 	_FAExit 					; if no, we are done.
.287a	20 27 2e	jsr $2e27			jsr 	FloatShiftRight 				; shift A right, renormalising it.
.287d	f6 70		inc $70,x			inc 	NSExponent,x 				; bump the exponent and exit
.287f	80 2e		bra $28af			bra 	_FAExit
.2881					_FADifferentSigns:
.2881	20 b4 2b	jsr $2bb4			jsr 	FloatSubTopTwoStack 		; subtract mantissa B from A
.2884	b5 64		lda $64,x			lda 	NSMantissa3,x 				; is the result negative ?
.2886	10 06		bpl $288e			bpl 	_FACheckZero 				; if no, check for -0
.2888	20 d0 2d	jsr $2dd0			jsr 	FloatNegate 					; netate result
.288b	20 d7 2d	jsr $2dd7			jsr 	FloatNegateMantissa 			; negate (2'c) the mantissa
.288e					_FACheckZero:
.288e	20 30 2e	jsr $2e30			jsr 	FloatIsZero	 				; check for -0
.2891	d0 1c		bne $28af			bne 	_FAExit
.2893	74 34		stz $34,x			stz 	NSStatus,x
.2895	80 18		bra $28af			bra 	_FAExit
.2897					_FAReturn1:
.2897	b5 41		lda $41,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.2899	95 40		sta $40,x			sta 	NSMantissa0,x
.289b	b5 4d		lda $4d,x			lda 	NSMantissa1+1,x
.289d	95 4c		sta $4c,x			sta 	NSMantissa1,x
.289f	b5 59		lda $59,x			lda 	NSMantissa2+1,x
.28a1	95 58		sta $58,x			sta 	NSMantissa2,x
.28a3	b5 65		lda $65,x			lda 	NSMantissa3+1,x
.28a5	95 64		sta $64,x			sta 	NSMantissa3,x
.28a7	b5 71		lda $71,x			lda 	NSExponent+1,x
.28a9	95 70		sta $70,x			sta 	NSExponent,x
.28ab	b5 35		lda $35,x			lda 	NSStatus+1,x
.28ad	95 34		sta $34,x			sta 	NSStatus,x
.28af					_FAExit:
.28af	60		rts				rts
.28b0					_FAShiftToExponent:
.28b0					_FAShiftToExponent2:
.28b0	98		tya				tya 								; compare Y to exponent
.28b1	d5 70		cmp $70,x			cmp 	NSExponent,x 				; reached the exponent required ?
.28b3	f0 07		beq $28bc			beq 	_FASEExit 					; exit if so.
.28b5	20 27 2e	jsr $2e27			jsr 	FloatShiftRight	 			; shift the mantissa right
.28b8	f6 70		inc $70,x			inc 	NSExponent,x 				; increment exponent
.28ba	80 f4		bra $28b0			bra 	_FAShiftToExponent2
.28bc					_FASEExit:
.28bc	60		rts				rts
.28bd					CompareEqual:
.28bd	b5 40		lda $40,x			lda 	NSMantissa0,x
.28bf	d0 09		bne $28ca			bne 	ReturnFalse
.28c1					ReturnTrue:
.28c1	a9 01		lda #$01			lda 	#1
.28c3	95 40		sta $40,x			sta 	NSMantissa0,x
.28c5	a9 80		lda #$80			lda 	#$80
.28c7	95 34		sta $34,x			sta 	NSStatus,x
.28c9	60		rts				rts
.28ca					ReturnFalse:
.28ca	74 40		stz $40,x			stz 	NSMantissa0,x
.28cc	60		rts				rts
.28cd					CompareNotEqual:
.28cd	b5 40		lda $40,x			lda 	NSMantissa0,x
.28cf	d0 f0		bne $28c1			bne 	ReturnTrue
.28d1	80 f7		bra $28ca			bra 	ReturnFalse
.28d3					CompareLess:
.28d3	b5 40		lda $40,x			lda 	NSMantissa0,x
.28d5	c9 ff		cmp #$ff			cmp 	#$FF
.28d7	f0 e8		beq $28c1			beq 	ReturnTrue
.28d9	80 ef		bra $28ca			bra 	ReturnFalse
.28db					CompareGreater:
.28db	b5 40		lda $40,x			lda 	NSMantissa0,x
.28dd	c9 01		cmp #$01			cmp 	#$01
.28df	f0 e0		beq $28c1			beq 	ReturnTrue
.28e1	80 e7		bra $28ca			bra 	ReturnFalse
.28e3					CompareLessEqual:
.28e3	b5 40		lda $40,x			lda 	NSMantissa0,x
.28e5	c9 01		cmp #$01			cmp 	#$01
.28e7	d0 d8		bne $28c1			bne 	ReturnTrue
.28e9	80 df		bra $28ca			bra 	ReturnFalse
.28eb					CompareGreaterEqual:
.28eb	b5 40		lda $40,x			lda 	NSMantissa0,x
.28ed	c9 ff		cmp #$ff			cmp 	#$FF
.28ef	d0 d0		bne $28c1			bne 	ReturnTrue
.28f1	80 d7		bra $28ca			bra 	ReturnFalse
.28f3					FloatCompare:
.28f3	b5 70		lda $70,x			lda 	NSExponent,x 				; float comparison.
.28f5	15 6f		ora $6f,x			ora 	NSExponent-1,x 				; integer if both integer.
.28f7	48		pha				pha
.28f8	20 2c 28	jsr $282c			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.28fb	68		pla				pla
.28fc	d0 0c		bne $290a			bne 	_FCCompareFloat
.28fe	b5 40		lda $40,x			lda 	NSMantissa0,x
.2900	15 4c		ora $4c,x			ora 	NSMantissa1,x
.2902	15 58		ora $58,x			ora 	NSMantissa2,x
.2904	15 64		ora $64,x			ora 	NSMantissa3,x
.2906	f0 14		beq $291c			beq 	_FCExit 					; if zero, return zero
.2908	80 0a		bra $2914			bra 	_FCSign
.290a					_FCCompareFloat:
.290a	b5 4c		lda $4c,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.290c	29 f0		and #$f0			and 	#$F0
.290e	15 58		ora $58,x			ora 	NSMantissa2,x
.2910	15 64		ora $64,x			ora 	NSMantissa3,x
.2912	f0 08		beq $291c			beq 	_FCExit 					; zero, so approximately identical
.2914					_FCSign:
.2914	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.2916	34 34		bit $34,x			bit 	NSStatus,x
.2918	10 02		bpl $291c			bpl 	_FCExit
.291a					_FCNegative:
.291a	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.291c					_FCExit:
.291c	20 10 2e	jsr $2e10			jsr 	FloatSetByte 				; set the result 255,0,1
.291f	60		rts				rts
.2920					FloatScalarTable:
>2920	66 66 66 66				.dword $66666666 ; 0.1
>2924	de					.byte $de
>2925	1f 85 eb 51				.dword $51eb851f ; 0.01
>2929	db					.byte $db
>292a	4c 37 89 41				.dword $4189374c ; 0.001
>292e	d8					.byte $d8
>292f	ac 8b db 68				.dword $68db8bac ; 0.0001
>2933	d4					.byte $d4
>2934	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>2938	d1					.byte $d1
>2939	83 de 1b 43				.dword $431bde83 ; 1e-06
>293d	ce					.byte $ce
>293e	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>2942	ca					.byte $ca
>2943	89 3b e6 55				.dword $55e63b89 ; 1e-08
>2947	c7					.byte $c7
>2948	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>294c	c4					.byte $c4
>294d	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>2951	c0					.byte $c0
>2952	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>2956	bd					.byte $bd
.2957					FloatDivide:
.2957	48		pha				pha
.2958	20 63 2b	jsr $2b63			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.295b	ca		dex				dex
.295c	c9 00		cmp #$00			cmp 	#0
.295e	f0 1e		beq $297e			beq 	_FDZero
.2960	20 63 2b	jsr $2b63			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.2963	f0 16		beq $297b			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.2965	20 c6 29	jsr $29c6			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.2968	20 93 29	jsr $2993			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.296b	20 63 2b	jsr $2b63			jsr		FloatNormalise 				; renormalise
.296e	20 59 2b	jsr $2b59			jsr 	FloatCalculateSign 			; calculate result sign
.2971	b5 70		lda $70,x			lda 	NSExponent,x 				; calculate exponent
.2973	38		sec				sec
.2974	f5 71		sbc $71,x			sbc 	NSExponent+1,x
.2976	38		sec				sec
.2977	e9 1e		sbc #$1e			sbc 	#30
.2979	95 70		sta $70,x			sta 	NSExponent,x
.297b					_FDExit:
.297b	68		pla				pla
.297c	18		clc				clc
.297d	60		rts				rts
.297e					_FDZero:
.297e	68		pla				pla
.297f	38		sec				sec
.2980	60		rts				rts
.2981					DivideInt32:
.2981	20 49 2a	jsr $2a49			jsr 	FloatIntegerPart 			; make both integers
.2984	ca		dex				dex
.2985	20 49 2a	jsr $2a49			jsr 	FloatIntegerPart
.2988	20 a4 29	jsr $29a4			jsr 	Int32Divide 				; divide
.298b	20 93 29	jsr $2993			jsr 	NSMCopyPlusTwoToZero 		; copy result
.298e	20 59 2b	jsr $2b59			jsr 	FloatCalculateSign 			; calculate result sign
.2991	18		clc				clc
.2992	60		rts				rts
.2993					NSMCopyPlusTwoToZero:
.2993	b5 42		lda $42,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.2995	95 40		sta $40,x			sta 	NSMantissa0,x
.2997	b5 4e		lda $4e,x			lda 	NSMantissa1+2,x
.2999	95 4c		sta $4c,x			sta 	NSMantissa1,x
.299b	b5 5a		lda $5a,x			lda 	NSMantissa2+2,x
.299d	95 58		sta $58,x			sta 	NSMantissa2,x
.299f	b5 66		lda $66,x			lda 	NSMantissa3+2,x
.29a1	95 64		sta $64,x			sta 	NSMantissa3,x
.29a3	60		rts				rts
.29a4					Int32Divide:
.29a4	48		pha				pha 								; save AXY
.29a5	5a		phy				phy
.29a6	20 f1 2d	jsr $2df1			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.29a9	20 0a 2e	jsr $2e0a			jsr 	FloatSetZeroMantissaOnly 	; set S[X] to zero
.29ac	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.29ae					_I32DivideLoop:
.29ae	e8		inx				inx
.29af	e8		inx				inx
.29b0	20 1d 2e	jsr $2e1d			jsr 	FloatShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.29b3	ca		dex				dex
.29b4	ca		dex				dex
.29b5	20 1e 2e	jsr $2e1e			jsr 	FloatRotateLeft
.29b8	20 e4 29	jsr $29e4			jsr 	FloatDivideCheck 			; check if subtract possible
.29bb	90 02		bcc $29bf			bcc 	_I32DivideNoCarryIn
.29bd	f6 42		inc $42,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.29bf					_I32DivideNoCarryIn:
.29bf	88		dey				dey 								; loop round till division completed.
.29c0	d0 ec		bne $29ae			bne 	_I32DivideLoop
.29c2	7a		ply				ply 								; restore AXY and exit
.29c3	68		pla				pla
.29c4	18		clc				clc
.29c5	60		rts				rts
.29c6					Int32ShiftDivide:
.29c6	48		pha				pha 								; save AY
.29c7	5a		phy				phy
.29c8	e8		inx				inx 								; clear S[X+2]
.29c9	e8		inx				inx
.29ca	20 0e 2e	jsr $2e0e			jsr 	FloatSetZero
.29cd	ca		dex				dex
.29ce	ca		dex				dex
.29cf	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.29d1					_I32SDLoop:
.29d1	20 e4 29	jsr $29e4			jsr 	FloatDivideCheck 			; check if subtract possible
.29d4	e8		inx				inx
.29d5	e8		inx				inx
.29d6	20 1e 2e	jsr $2e1e			jsr 	FloatRotateLeft				; shift 64 bit FPA left, rotating carry in
.29d9	ca		dex				dex
.29da	ca		dex				dex
.29db	20 1e 2e	jsr $2e1e			jsr 	FloatRotateLeft
.29de	88		dey				dey 	 							; do 31 times
.29df	d0 f0		bne $29d1			bne 	_I32SDLoop
.29e1	7a		ply				ply 								; restore AY and exit
.29e2	68		pla				pla
.29e3	60		rts				rts
.29e4					FloatDivideCheck:
.29e4	20 b4 2b	jsr $2bb4			jsr 	FloatSubTopTwoStack 		; subtract Stack[X+1] from Stack[X+0]
.29e7	b0 04		bcs $29ed			bcs 	_DCSExit 					; if carry set, then could do, exit
.29e9	20 9a 2b	jsr $2b9a			jsr 	FloatAddTopTwoStack 		; add it back in
.29ec	18		clc				clc 								; and return False
.29ed					_DCSExit:
.29ed	60		rts				rts
.29ee					FloatFractionalPart:
.29ee	5a		phy				phy
.29ef	b5 34		lda $34,x			lda 	NSStatus,x 					; take absolute value
.29f1	29 7f		and #$7f			and 	#$7F
.29f3	95 34		sta $34,x			sta 	NSStatus,x
.29f5	20 63 2b	jsr $2b63			jsr 	FloatNormalise
.29f8	b5 70		lda $70,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.29fa	38		sec				sec
.29fb	e9 e0		sbc #$e0			sbc 	#$E0
.29fd	90 29		bcc $2a28			bcc 	_FFPExit 					; already fractional
.29ff	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.2a01	b0 22		bcs $2a25			bcs 	_FFPZero
.2a03	a8		tay				tay 								; put count to do in Y
.2a04	b5 64		lda $64,x			lda 	NSMantissa3,x 				; do each in turn.
.2a06	20 2d 2a	jsr $2a2d			jsr 	_FFPPartial
.2a09	95 64		sta $64,x			sta 	NSMantissa3,x
.2a0b	b5 58		lda $58,x			lda 	NSMantissa2,x
.2a0d	20 2d 2a	jsr $2a2d			jsr 	_FFPPartial
.2a10	95 58		sta $58,x			sta 	NSMantissa2,x
.2a12	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.2a14	20 2d 2a	jsr $2a2d			jsr 	_FFPPartial
.2a17	95 4c		sta $4c,x			sta 	NSMantissa1,x
.2a19	b5 40		lda $40,x			lda 	NSMantissa0,x
.2a1b	20 2d 2a	jsr $2a2d			jsr 	_FFPPartial
.2a1e	95 40		sta $40,x			sta 	NSMantissa0,x
.2a20	20 30 2e	jsr $2e30			jsr 	FloatIsZero 					; zeroed check.
.2a23	d0 03		bne $2a28			bne 	_FFPExit
.2a25					_FFPZero:
.2a25	20 0e 2e	jsr $2e0e			jsr 	FloatSetZero
.2a28					_FFPExit:
.2a28	20 63 2b	jsr $2b63			jsr 	FloatNormalise
.2a2b	7a		ply				ply
.2a2c	60		rts				rts
.2a2d					_FFPPartial:
.2a2d	c0 00		cpy #$00			cpy 	#0 							; no more to do
.2a2f	f0 17		beq $2a48			beq 	_FFFPPExit
.2a31	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.2a33	b0 0c		bcs $2a41			bcs 	_FFFPPWholeByte
.2a35	5a		phy				phy
.2a36					_FFFPPLeft:
.2a36	0a		asl a				asl 	a
.2a37	88		dey				dey
.2a38	d0 fc		bne $2a36			bne 	_FFFPPLeft
.2a3a	7a		ply				ply
.2a3b					_FFFPPRight:
.2a3b	4a		lsr a				lsr 	a
.2a3c	88		dey				dey
.2a3d	d0 fc		bne $2a3b			bne 	_FFFPPRight
.2a3f	80 07		bra $2a48			bra 	_FFFPPExit
.2a41					_FFFPPWholeByte:
.2a41	98		tya				tya 								; subtract 8 from count
.2a42	38		sec				sec
.2a43	e9 08		sbc #$08			sbc 	#8
.2a45	a8		tay				tay
.2a46	a9 00		lda #$00			lda 	#0 							; and clear all
.2a48					_FFFPPExit:
.2a48	60		rts				rts
.2a49					FloatIntegerPart:
.2a49	48		pha				pha
.2a4a	b5 70		lda $70,x			lda 	NSExponent,x 				; is it integer already ?
.2a4c	f0 1d		beq $2a6b			beq 	_FIPExit 					; if so do nothing
.2a4e	20 30 2e	jsr $2e30			jsr 	FloatIsZero 				; is it zero ?
.2a51	f0 15		beq $2a68			beq 	_FIPZero 					; if so return zero.
.2a53	20 63 2b	jsr $2b63			jsr 	FloatNormalise 				; normalise
.2a56	f0 10		beq $2a68			beq 	_FIPZero 					; normalised to zero, exit zero
.2a58					_FIPShift:
.2a58	b5 70		lda $70,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.2a5a	10 07		bpl $2a63			bpl 	_FIPCheckZero
.2a5c	20 27 2e	jsr $2e27			jsr 	FloatShiftRight 			; shift mantissa right
.2a5f	f6 70		inc $70,x			inc 	NSExponent,x 				; bump exponent
.2a61	80 f5		bra $2a58			bra 	_FIPShift
.2a63					_FIPCheckZero:
.2a63	20 30 2e	jsr $2e30			jsr 	FloatIsZero 				; avoid -0 problem
.2a66	d0 03		bne $2a6b			bne 	_FIPExit 					; set to zero if mantissa zero.
.2a68					_FIPZero:
.2a68	20 0e 2e	jsr $2e0e			jsr 	FloatSetZero
.2a6b					_FIPExit:
.2a6b	68		pla				pla
.2a6c	60		rts				rts
.2a6d					FloatIntegerPartDown:
.2a6d	48		pha				pha
.2a6e	5a		phy				phy
.2a6f	b5 70		lda $70,x			lda 	NSExponent,x 				; is it integer already ?
.2a71	f0 36		beq $2aa9			beq 	_FIPExit 					; if so do nothing
.2a73	20 30 2e	jsr $2e30			jsr 	FloatIsZero 				; is it zero ?
.2a76	f0 2e		beq $2aa6			beq 	_FIPZero 					; if so return zero.
.2a78	20 63 2b	jsr $2b63			jsr 	FloatNormalise 				; normalise
.2a7b	f0 29		beq $2aa6			beq 	_FIPZero 					; normalised to zero, exit zero
.2a7d	a0 00		ldy #$00			ldy 	#0 							; reset the count of bits.
.2a7f					_FIPShift:
.2a7f	b5 70		lda $70,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.2a81	10 0a		bpl $2a8d			bpl 	_FIPCheckDown
.2a83	20 27 2e	jsr $2e27			jsr 	FloatShiftRight 			; shift mantissa right
.2a86	90 01		bcc $2a89			bcc 	_FIPNoFrac 					; shifted a zero out ?
.2a88	c8		iny				iny
.2a89					_FIPNoFrac:
.2a89	f6 70		inc $70,x			inc 	NSExponent,x 				; bump exponent
.2a8b	80 f2		bra $2a7f			bra 	_FIPShift
.2a8d					_FIPCheckDown:
.2a8d	c0 00		cpy #$00			cpy 	#0 							; were there any fractional bits.
.2a8f	f0 10		beq $2aa1			beq 	_FIPCheckZero
.2a91	34 34		bit $34,x			bit 	NSStatus,x 					; +ve
.2a93	10 0c		bpl $2aa1			bpl 	_FIPCheckZero
.2a95	e8		inx				inx 								; -ve so round *down*.
.2a96	a9 01		lda #$01			lda 	#1
.2a98	20 10 2e	jsr $2e10			jsr 	FloatSetByte
.2a9b	20 d0 2d	jsr $2dd0			jsr 	FloatNegate
.2a9e	20 32 28	jsr $2832			jsr 	FloatAdd
.2aa1					_FIPCheckZero:
.2aa1	20 30 2e	jsr $2e30			jsr 	FloatIsZero 				; avoid -0 problem
.2aa4	d0 03		bne $2aa9			bne 	_FIPExit 					; set to zero if mantissa zero.
.2aa6					_FIPZero:
.2aa6	20 0e 2e	jsr $2e0e			jsr 	FloatSetZero
.2aa9					_FIPExit:
.2aa9	7a		ply				ply
.2aaa	68		pla				pla
.2aab	60		rts				rts
.2aac					FloatInt8Multiply:
.2aac	5a		phy				phy
.2aad	b5 40		lda $40,x			lda 	NSMantissa0,x 				; right shifted multiplier in Y
.2aaf	a8		tay				tay
.2ab0	74 40		stz $40,x			stz 	NSMantissa0,x 				; zero the result (already 8 bit constant)
.2ab2					_FI8MLoop:
.2ab2	98		tya				tya 								; shift right shifter right into carry
.2ab3	4a		lsr a				lsr 	a
.2ab4	a8		tay				tay
.2ab5	90 0d		bcc $2ac4			bcc 	_FI8MNoAdd
.2ab7	18		clc				clc
.2ab8	b5 40		lda $40,x			lda 	NSMantissa0,x
.2aba	75 41		adc $41,x			adc 	NSMantissa0+1,x
.2abc	95 40		sta $40,x			sta 	NSMantissa0,x
.2abe	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.2ac0	75 4d		adc $4d,x			adc 	NSMantissa1+1,x
.2ac2	95 4c		sta $4c,x			sta 	NSMantissa1,x
.2ac4					_FI8MNoAdd:
.2ac4	16 41		asl $41,x			asl 	NSMantissa0+1,x 			; shift adder left
.2ac6	36 4d		rol $4d,x			rol 	NSMantissa1+1,x
.2ac8	c0 00		cpy #$00			cpy 	#0
.2aca	d0 e6		bne $2ab2			bne 	_FI8MLoop 					; until right shifter zero.
.2acc	7a		ply				ply
.2acd	60		rts				rts
.2ace					FloatMultiply:
.2ace	ca		dex				dex
.2acf	b5 70		lda $70,x			lda 	NSExponent,x 				; can use optimised ?
.2ad1	15 71		ora $71,x			ora 	NSExponent+1,x
.2ad3	15 64		ora $64,x			ora 	NSMantissa3,x
.2ad5	15 65		ora $65,x			ora 	NSMantissa3+1,x
.2ad7	d0 21		bne $2afa			bne 	_FMUseFloat
.2ad9	b5 34		lda $34,x			lda 	NSStatus,x 					; check if it is 8 bit unsigned
.2adb	15 35		ora $35,x			ora 	NSStatus+1,x
.2add	29 80		and #$80			and 	#$80
.2adf	15 64		ora $64,x			ora 	NSMantissa3,x
.2ae1	15 58		ora $58,x			ora 	NSMantissa2,x
.2ae3	15 4c		ora $4c,x			ora 	NSMantissa1,x
.2ae5	15 65		ora $65,x			ora 	NSMantissa3+1,x
.2ae7	15 59		ora $59,x			ora 	NSMantissa2+1,x
.2ae9	15 4d		ora $4d,x			ora 	NSMantissa1+1,x
.2aeb	d0 04		bne $2af1			bne 	_FMInt32
.2aed	20 ac 2a	jsr $2aac			jsr 	FloatInt8Multiply 			; use fast 8x8 multiply.
.2af0	60		rts				rts
.2af1					_FMInt32:
.2af1	20 1b 2b	jsr $2b1b			jsr 	FloatMultiplyShort			; use the int32 one.
.2af4	18		clc				clc 								; fix it up if gone out of range
.2af5	75 70		adc $70,x			adc 	NSExponent,x
.2af7	95 70		sta $70,x			sta 	NSExponent,x
.2af9	60		rts				rts
.2afa					_FMUseFloat:
.2afa	20 63 2b	jsr $2b63			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.2afd	f0 18		beq $2b17			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.2aff	e8		inx				inx
.2b00	20 63 2b	jsr $2b63			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.2b03	ca		dex				dex
.2b04	c9 00		cmp #$00			cmp 	#0
.2b06	f0 0c		beq $2b14			beq 	_FDSetZero
.2b08	20 1b 2b	jsr $2b1b			jsr 	FloatMultiplyShort 			; calculate the result.
.2b0b	75 70		adc $70,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.2b0d	18		clc				clc
.2b0e	75 71		adc $71,x			adc 	NSExponent+1,x
.2b10	95 70		sta $70,x			sta 	NSExponent,x
.2b12	80 03		bra $2b17			bra 	_FDExit
.2b14					_FDSetZero:
.2b14	20 0e 2e	jsr $2e0e			jsr 	FloatSetZero 				; return 0
.2b17					_FDExit:
.2b17	20 63 2b	jsr $2b63			jsr 	FloatNormalise 				; normalise the result
.2b1a	60		rts				rts
.2b1b					FloatMultiplyShort:
.2b1b	5a		phy				phy 								; save Y
.2b1c	20 f1 2d	jsr $2df1			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.2b1f	20 0a 2e	jsr $2e0a			jsr 	FloatSetZeroMantissaOnly 	; set mantissa S[X] to zero
.2b22	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.2b24					_I32MLoop:
.2b24	b5 42		lda $42,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.2b26	15 4e		ora $4e,x			ora 	NSMantissa1+2,x
.2b28	15 5a		ora $5a,x			ora 	NSMantissa2+2,x
.2b2a	15 66		ora $66,x			ora 	NSMantissa3+2,x
.2b2c	f0 25		beq $2b53			beq 	_I32MExit 					; exit if zero
.2b2e	b5 42		lda $42,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.2b30	29 01		and #$01			and 	#1
.2b32	f0 0d		beq $2b41			beq 	_I32MNoAdd
.2b34	20 9a 2b	jsr $2b9a			jsr 	FloatAddTopTwoStack 		; if so add S[X+1] to S[X+0]
.2b37	b5 64		lda $64,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.2b39	10 06		bpl $2b41			bpl 	_I32MNoAdd
.2b3b					_I32ShiftRight:
.2b3b	20 27 2e	jsr $2e27			jsr 	FloatShiftRight 			; shift S[X] right
.2b3e	c8		iny				iny 								; increment shift count
.2b3f	80 09		bra $2b4a			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.2b41					_I32MNoAdd:
.2b41	34 65		bit $65,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.2b43	70 f6		bvs $2b3b			bvs 	_I32ShiftRight 				; instead.
.2b45	e8		inx				inx
.2b46	20 1d 2e	jsr $2e1d			jsr 	FloatShiftLeft 				; shift additive S[X+1] left
.2b49	ca		dex				dex
.2b4a					_I32MShiftUpper:
.2b4a	e8		inx				inx 								; shift S[X+2] right
.2b4b	e8		inx				inx
.2b4c	20 27 2e	jsr $2e27			jsr 	FloatShiftRight
.2b4f	ca		dex				dex
.2b50	ca		dex				dex
.2b51	80 d1		bra $2b24			bra 	_I32MLoop 					; try again.
.2b53					_I32MExit:
.2b53	20 59 2b	jsr $2b59			jsr 	FloatCalculateSign
.2b56	98		tya				tya 								; shift in A
.2b57	7a		ply				ply 								; restore Y and exit
.2b58	60		rts				rts
.2b59					FloatCalculateSign:
.2b59	b5 34		lda $34,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.2b5b	16 34		asl $34,x			asl 	NSStatus,x 					; shift result left
.2b5d	55 35		eor $35,x			eor 	NSStatus+1,x
.2b5f	0a		asl a				asl 	a 							; shift bit 7 into carry
.2b60	76 34		ror $34,x			ror 	NSStatus,x 					; shift right into status byte.
.2b62	60		rts				rts
.2b63					FloatNormalise:
.2b63	20 30 2e	jsr $2e30			jsr 	FloatIsZero 				; if zero exit
.2b66	d0 07		bne $2b6f			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.2b68	16 34		asl $34,x			asl 	NSStatus,x 					; clear the sign bit.
.2b6a	76 34		ror $34,x			ror 	NSStatus,x 					; (no -0)
.2b6c	a9 00		lda #$00			lda 	#0 							; set Z flag
.2b6e	60		rts				rts
.2b6f					_NSNormaliseOptimise:
.2b6f	b5 64		lda $64,x			lda 	NSMantissa3,x 				; upper byte zero ?
.2b71	d0 19		bne $2b8c			bne 	_NSNormaliseLoop
.2b73	b5 58		lda $58,x			lda 	NSMantissa2,x 				; byte normalise
.2b75	30 15		bmi $2b8c			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.2b77	95 64		sta $64,x			sta 	NSMantissa3,x
.2b79	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.2b7b	95 58		sta $58,x			sta 	NSMantissa2,x
.2b7d	b5 40		lda $40,x			lda 	NSMantissa0,x
.2b7f	95 4c		sta $4c,x			sta 	NSMantissa1,x
.2b81	74 40		stz $40,x			stz 	NSMantissa0,x
.2b83	b5 70		lda $70,x			lda 	NSExponent,x
.2b85	38		sec				sec
.2b86	e9 08		sbc #$08			sbc 	#8
.2b88	95 70		sta $70,x			sta 	NSExponent,x
.2b8a	80 e3		bra $2b6f			bra 	_NSNormaliseOptimise
.2b8c					_NSNormaliseLoop:
.2b8c	34 64		bit $64,x			bit 	NSMantissa3,x 				; bit 30 set ?
.2b8e	70 07		bvs $2b97			bvs 	_NSNExit 					; exit if so with Z flag clear
.2b90	20 1d 2e	jsr $2e1d			jsr 	FloatShiftLeft 				; shift mantissa left
.2b93	d6 70		dec $70,x			dec 	NSExponent,x 				; adjust exponent
.2b95	80 f5		bra $2b8c			bra 	_NSNormaliseLoop
.2b97					_NSNExit:
.2b97	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.2b99	60		rts				rts
.2b9a					FloatAddTopTwoStack:
.2b9a	18		clc				clc
.2b9b	b5 40		lda $40,x			lda		NSMantissa0,x
.2b9d	75 41		adc $41,x			adc 		NSMantissa0+1,x
.2b9f	95 40		sta $40,x			sta 	NSMantissa0,x
.2ba1	b5 4c		lda $4c,x			lda		NSMantissa1,x
.2ba3	75 4d		adc $4d,x			adc 		NSMantissa1+1,x
.2ba5	95 4c		sta $4c,x			sta 	NSMantissa1,x
.2ba7	b5 58		lda $58,x			lda		NSMantissa2,x
.2ba9	75 59		adc $59,x			adc 		NSMantissa2+1,x
.2bab	95 58		sta $58,x			sta 	NSMantissa2,x
.2bad	b5 64		lda $64,x			lda		NSMantissa3,x
.2baf	75 65		adc $65,x			adc 		NSMantissa3+1,x
.2bb1	95 64		sta $64,x			sta 	NSMantissa3,x
.2bb3	60		rts				rts
.2bb4					FloatSubTopTwoStack:
.2bb4	38		sec				sec
.2bb5	b5 40		lda $40,x			lda		NSMantissa0,x
.2bb7	f5 41		sbc $41,x			sbc 		NSMantissa0+1,x
.2bb9	95 40		sta $40,x			sta 	NSMantissa0,x
.2bbb	b5 4c		lda $4c,x			lda		NSMantissa1,x
.2bbd	f5 4d		sbc $4d,x			sbc 		NSMantissa1+1,x
.2bbf	95 4c		sta $4c,x			sta 	NSMantissa1,x
.2bc1	b5 58		lda $58,x			lda		NSMantissa2,x
.2bc3	f5 59		sbc $59,x			sbc 		NSMantissa2+1,x
.2bc5	95 58		sta $58,x			sta 	NSMantissa2,x
.2bc7	b5 64		lda $64,x			lda		NSMantissa3,x
.2bc9	f5 65		sbc $65,x			sbc 		NSMantissa3+1,x
.2bcb	95 64		sta $64,x			sta 	NSMantissa3,x
.2bcd	60		rts				rts
.2bce					FloatInt32Add:
.2bce	b5 34		lda $34,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.2bd0	55 35		eor $35,x			eor 	NSStatus+1,x
.2bd2	30 04		bmi $2bd8			bmi 	_DiffSigns
.2bd4	20 9a 2b	jsr $2b9a			jsr		FloatAddTopTwoStack
.2bd7	60		rts				rts
.2bd8					_DiffSigns:
.2bd8	20 b4 2b	jsr $2bb4			jsr 	FloatSubTopTwoStack 		; do a physical subtraction
.2bdb	34 64		bit $64,x			bit 	NSMantissa3,x 				; result is +ve, okay
.2bdd	10 07		bpl $2be6			bpl 	_AddExit
.2bdf	b5 35		lda $35,x			lda 	NSStatus+1,x 				; sign is that of 11th value
.2be1	95 34		sta $34,x			sta 	NSStatus,x
.2be3	20 d7 2d	jsr $2dd7			jsr 	FloatNegateMantissa 		; negate the mantissa and exit
.2be6					_AddExit:
.2be6	20 30 2e	jsr $2e30			jsr 	FloatIsZero 				; check for -0
.2be9	d0 02		bne $2bed			bne 	_AddNonZero
.2beb	74 34		stz $34,x			stz 	NSStatus,x
.2bed					_AddNonZero:
.2bed	60		rts				rts
=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.2bee					FloatEncodeStart:
.2bee	38		sec				sec
.2bef	80 01		bra $2bf2			bra 	FloatEncodeContinue+1
.2bf1					FloatEncodeContinue:
.2bf1	18		clc				clc
.2bf2					FloatEncode:
.2bf2	08		php				php 								; save reset flag.
.2bf3	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.2bf5	f0 15		beq $2c0c			beq 	_ENIsOkay
.2bf7	c9 30		cmp #$30			cmp 	#"0"
.2bf9	90 04		bcc $2bff			bcc 	_ENBadNumber
.2bfb	c9 3a		cmp #$3a			cmp 	#"9"+1
.2bfd	90 0d		bcc $2c0c			bcc 	_ENIsOkay
.2bff					_ENBadNumber:
.2bff	28		plp				plp 								; throw saved reset
.2c00	ad 8f 05	lda $058f			lda 	encodeState 				; if in decimal mode, construct final number
.2c03	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.2c05	d0 03		bne $2c0a			bne 	_ENFail
.2c07	4c 84 2c	jmp $2c84			jmp 	_ENConstructFinal
.2c0a					_ENFail:
.2c0a	18		clc				clc 								; not allowed
.2c0b	60		rts				rts
.2c0c					_ENIsOkay:
.2c0c	28		plp				plp 								; are we restarting
.2c0d	90 15		bcc $2c24			bcc 	_ENNoRestart
.2c0f					_ENStartEncode:
.2c0f	c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.2c11	f0 0c		beq $2c1f			beq 	_ENFirstDP
.2c13	29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.2c15	20 10 2e	jsr $2e10			jsr 	FloatSetByte 				; in single byte mode.
.2c18	a9 01		lda #$01			lda 	#ESTA_Low
.2c1a					_ENExitChange:
.2c1a	8d 8f 05	sta $058f			sta 	encodeState 				; save new state
.2c1d	38		sec				sec
.2c1e	60		rts				rts
.2c1f					_ENFirstDP:
.2c1f	20 0e 2e	jsr $2e0e			jsr 	FloatSetZero 				; clear integer part
.2c22	80 3c		bra $2c60			bra 	_ESTASwitchFloat			; go straight to float and exi
.2c24					_ENNoRestart:
.2c24	48		pha				pha 								; save digit or DP on stack.
.2c25	ad 8f 05	lda $058f			lda 	encodeState 				; get current state
.2c28	c9 01		cmp #$01			cmp 	#ESTA_Low
.2c2a	f0 09		beq $2c35			beq  	_ESTALowState
.2c2c	c9 02		cmp #$02			cmp 	#ESTA_High
.2c2e	f0 26		beq $2c56			beq 	_ESTAHighState
.2c30	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.2c32	f0 38		beq $2c6c			beq 	_ESTADecimalState
>2c34	db						.byte 	$DB 						; causes a break in the emulator
.2c35					_ESTALowState:
.2c35	68		pla				pla 								; get value back
.2c36	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.2c38	f0 26		beq $2c60			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.2c3a	29 0f		and #$0f			and 	#15 						; make digit
.2c3c	8d 90 05	sta $0590			sta 	digitTemp 					; save it.
.2c3f	b5 40		lda $40,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.2c41	0a		asl a				asl 	a
.2c42	0a		asl a				asl 	a
.2c43	75 40		adc $40,x			adc 	NSMantissa0,x
.2c45	0a		asl a				asl 	a
.2c46	6d 90 05	adc $0590			adc 	digitTemp
.2c49	95 40		sta $40,x			sta 	NSMantissa0,x
.2c4b	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.2c4d	90 05		bcc $2c54			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.2c4f	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.2c51	8d 8f 05	sta $058f			sta 	encodeState
.2c54					_ESTANoSwitch:
.2c54	38		sec				sec
.2c55	60		rts				rts
.2c56					_ESTAHighState:
.2c56	68		pla				pla 								; get value back
.2c57	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.2c59	f0 05		beq $2c60			beq 	_ESTASwitchFloat
.2c5b	20 b6 2c	jsr $2cb6			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.2c5e	38		sec				sec
.2c5f	60		rts				rts
.2c60					_ESTASwitchFloat:
.2c60	9c 91 05	stz $0591			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.2c63	e8		inx				inx 								; zero the decimal additive.
.2c64	20 0e 2e	jsr $2e0e			jsr 	FloatSetZero
.2c67	ca		dex				dex
.2c68	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.2c6a	80 ae		bra $2c1a			bra 	_ENExitChange
.2c6c					_ESTADecimalState:
.2c6c	68		pla				pla 								; digit.
.2c6d	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 11th decimal point.
.2c6f	f0 99		beq $2c0a			beq 	_ENFail
.2c71	e8		inx				inx 								; put digit into fractional part of X+1
.2c72	20 b6 2c	jsr $2cb6			jsr 	ESTAShiftDigitIntoMantissa
.2c75	ca		dex				dex
.2c76	ee 91 05	inc $0591			inc 	decimalCount 				; bump the count of decimals
.2c79	ad 91 05	lda $0591			lda 	decimalCount 				; too many decimal digits.
.2c7c	c9 0b		cmp #$0b			cmp 	#11
.2c7e	f0 02		beq $2c82			beq 	_ESTADSFail
.2c80	38		sec				sec
.2c81	60		rts				rts
.2c82					_ESTADSFail:
.2c82	18		clc				clc
.2c83	60		rts				rts
.2c84					_ENConstructFinal:
.2c84	ad 91 05	lda $0591			lda 	decimalCount 				; get decimal count
.2c87	f0 2b		beq $2cb4			beq 	_ENCFExit 					; no decimals
.2c89	5a		phy				phy
.2c8a	0a		asl a				asl 	a 							; x 4 and CLC
.2c8b	0a		asl a				asl 	a
.2c8c	6d 91 05	adc $0591			adc 	decimalCount
.2c8f	a8		tay				tay
.2c90	b9 1b 29	lda $291b,y			lda 	FloatScalarTable-5,y 		; copy decimal scalar to X+2
.2c93	95 42		sta $42,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.2c95	b9 1c 29	lda $291c,y			lda 	FloatScalarTable-5+1,y
.2c98	95 4e		sta $4e,x			sta 	NSMantissa1+2,x
.2c9a	b9 1d 29	lda $291d,y			lda 	FloatScalarTable-5+2,y
.2c9d	95 5a		sta $5a,x			sta 	NSMantissa2+2,x
.2c9f	b9 1e 29	lda $291e,y			lda 	FloatScalarTable-5+3,y
.2ca2	95 66		sta $66,x			sta 	NSMantissa3+2,x
.2ca4	b9 1f 29	lda $291f,y			lda 	FloatScalarTable-5+4,y
.2ca7	95 72		sta $72,x			sta 	NSExponent+2,x
.2ca9	74 36		stz $36,x			stz 	NSStatus+2,x 				; make +ve
.2cab	e8		inx				inx 								; multiply decimal const by decimal scalar
.2cac	e8		inx				inx
.2cad	20 ce 2a	jsr $2ace			jsr 	FloatMultiply
.2cb0	20 32 28	jsr $2832			jsr 	FloatAdd 					; add to integer part.
.2cb3	7a		ply				ply
.2cb4					_ENCFExit:
.2cb4	18		clc				clc 								; reject the digit.
.2cb5	60		rts				rts
.2cb6					ESTAShiftDigitIntoMantissa:
.2cb6	29 0f		and #$0f			and 	#15 						; save digit
.2cb8	48		pha				pha
.2cb9	b5 64		lda $64,x			lda 	NSMantissa3,x 				; push mantissa on stack
.2cbb	48		pha				pha
.2cbc	b5 58		lda $58,x			lda 	NSMantissa2,x
.2cbe	48		pha				pha
.2cbf	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.2cc1	48		pha				pha
.2cc2	b5 40		lda $40,x			lda 	NSMantissa0,x
.2cc4	48		pha				pha
.2cc5	20 1d 2e	jsr $2e1d			jsr 	FloatShiftLeft 				; x 2
.2cc8	20 1d 2e	jsr $2e1d			jsr 	FloatShiftLeft 				; x 4
.2ccb	18		clc				clc 								; pop mantissa and add
.2ccc	68		pla				pla
.2ccd	75 40		adc $40,x			adc 	NSMantissa0,x
.2ccf	95 40		sta $40,x			sta 	NSMantissa0,x
.2cd1	68		pla				pla
.2cd2	75 4c		adc $4c,x			adc 	NSMantissa1,x
.2cd4	95 4c		sta $4c,x			sta 	NSMantissa1,x
.2cd6	68		pla				pla
.2cd7	75 58		adc $58,x			adc 	NSMantissa2,x
.2cd9	95 58		sta $58,x			sta 	NSMantissa2,x
.2cdb	68		pla				pla
.2cdc	75 64		adc $64,x			adc 	NSMantissa3,x
.2cde	95 64		sta $64,x			sta 	NSMantissa3,x 				; x 5
.2ce0	20 1d 2e	jsr $2e1d			jsr 	FloatShiftLeft 				; x 10
.2ce3	68		pla				pla 								; add digit
.2ce4	18		clc				clc
.2ce5	75 40		adc $40,x			adc 	NSMantissa0,x
.2ce7	95 40		sta $40,x			sta 	NSMantissa0,x
.2ce9	90 0a		bcc $2cf5			bcc 	_ESTASDExit
.2ceb	f6 4c		inc $4c,x			inc 	NSMantissa1,x
.2ced	d0 06		bne $2cf5			bne 	_ESTASDExit
.2cef	f6 58		inc $58,x			inc 	NSMantissa2,x
.2cf1	d0 02		bne $2cf5			bne 	_ESTASDExit
.2cf3	f6 64		inc $64,x			inc 	NSMantissa3,x
.2cf5					_ESTASDExit:
.2cf5	60		rts				rts
.058f					encodeState:
>058f							.fill 	1
.0590					digitTemp:
>0590							.fill 	1
.0591					decimalCount:
>0591							.fill 	1
.2cf6					FloatToString:
.2cf6	da		phx				phx
.2cf7	5a		phy				phy 								; save code position
.2cf8	8d 92 05	sta $0592			sta 	decimalPlaces	 			; save number of DPs.
.2cfb	9c 93 05	stz $0593			stz 	dbOffset 					; offset into decimal buffer = start.
.2cfe	b5 34		lda $34,x			lda 	NSStatus,x  				; is it -ve.
.2d00	10 08		bpl $2d0a			bpl 	_CNTSNotNegative
.2d02	29 7f		and #$7f			and 	#$7F 						; make +ve
.2d04	95 34		sta $34,x			sta 	NSStatus,x
.2d06	a9 2d		lda #$2d			lda 	#"-"
.2d08	80 02		bra $2d0c			bra 	_CNTMain
.2d0a					_CNTSNotNegative:
.2d0a	a9 20		lda #$20			lda 	#" "
.2d0c					_CNTMain:
.2d0c	20 6e 2d	jsr $2d6e			jsr 	WriteDecimalBuffer
.2d0f	b5 70		lda $70,x			lda 	NSExponent,x 				; check if decimal
.2d11	f0 0d		beq $2d20			beq 	_CNTSNotFloat
.2d13	e8		inx				inx 								; round up so we don't get too many 6.999999
.2d14	a9 01		lda #$01			lda 	#1
.2d16	20 10 2e	jsr $2e10			jsr 	FloatSetByte
.2d19	b5 6f		lda $6f,x			lda		NSExponent-1,x
.2d1b	95 70		sta $70,x			sta 	NSExponent,x
.2d1d	20 32 28	jsr $2832			jsr 	FloatAdd
.2d20					_CNTSNotFloat:
.2d20	20 50 2d	jsr $2d50			jsr 	MakePlusTwoString 			; do the integer part.
.2d23	20 ee 29	jsr $29ee			jsr 	FloatFractionalPart 		; get the fractional part
.2d26	20 63 2b	jsr $2b63			jsr 	FloatNormalise					; normalise , exit if zero
.2d29	f0 22		beq $2d4d			beq 	_CNTSExit
.2d2b	a9 2e		lda #$2e			lda 	#"."
.2d2d	20 6e 2d	jsr $2d6e			jsr 	WriteDecimalBuffer 			; write decimal place
.2d30					_CNTSDecimal:
.2d30	ce 92 05	dec $0592			dec 	decimalPlaces 				; done all the decimals
.2d33	30 18		bmi $2d4d			bmi 	_CNTSExit
.2d35	e8		inx				inx 								; x 10.0
.2d36	a9 0a		lda #$0a			lda 	#10
.2d38	20 10 2e	jsr $2e10			jsr 	FloatSetByte
.2d3b	20 ce 2a	jsr $2ace			jsr 	FloatMultiply
.2d3e	20 50 2d	jsr $2d50			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.2d41	20 ee 29	jsr $29ee			jsr 	FloatFractionalPart 		; get the fractional part
.2d44	20 63 2b	jsr $2b63			jsr 	FloatNormalise 				; normalise it.
.2d47	b5 70		lda $70,x			lda 	NSExponent,x 				; gone to zero, exit.
.2d49	c9 d0		cmp #$d0			cmp 	#$D0 						; very small remainder, so don't bother.
.2d4b	b0 e3		bcs $2d30			bcs 	_CNTSDecimal 				; keep going.
.2d4d					_CNTSExit:
.2d4d	7a		ply				ply
.2d4e	fa		plx				plx
.2d4f	60		rts				rts
.2d50					MakePlusTwoString:
.2d50	da		phx				phx
.2d51	20 f1 2d	jsr $2df1			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.2d54	e8		inx				inx 								; access it
.2d55	e8		inx				inx
.2d56	20 49 2a	jsr $2a49			jsr 	FloatIntegerPart 			; make it an integer
.2d59	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.2d5b	20 8d 2d	jsr $2d8d			jsr 	ConvertInt32
.2d5e	a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.2d60					_MPTSCopy:
.2d60	bd 6d 05	lda $056d,x			lda 	numberBuffer,x
.2d63	20 6e 2d	jsr $2d6e			jsr 	WriteDecimalBuffer
.2d66	e8		inx				inx
.2d67	bd 6d 05	lda $056d,x			lda 	numberBuffer,x
.2d6a	d0 f4		bne $2d60			bne 	_MPTSCopy
.2d6c	fa		plx				plx
.2d6d	60		rts				rts
.2d6e					WriteDecimalBuffer:
.2d6e	da		phx				phx
.2d6f	ae 93 05	ldx $0593			ldx 	dbOffset
.2d72	9d 94 05	sta $0594,x			sta 	decimalBuffer,x
.2d75	9e 95 05	stz $0595,x			stz 	decimalBuffer+1,x
.2d78	ee 93 05	inc $0593			inc 	dbOffset
.2d7b	fa		plx				plx
.2d7c	60		rts				rts
.0592					decimalPlaces:
>0592							.fill 	1
.0593					dbOffset:
>0593							.fill 	1
.0594					decimalBuffer:
>0594							.fill 	32
.2d7d					ConvertInt16:
.2d7d	85 40		sta $40				sta 	NSMantissa0 				; set up as 32 bit conversion
.2d7f	86 4c		stx $4c				stx 	NSMantissa1
.2d81	64 58		stz $58				stz 	NSMantissa2
.2d83	64 64		stz $64				stz 	NSMantissa3
.2d85	64 34		stz $34				stz 	NSStatus 					; positive integer
.2d87	a2 00		ldx #$00			ldx 	#0 							; stack level
.2d89	a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.2d8b	80 00		bra $2d8d			bra 	ConvertInt32
.2d8d					ConvertInt32:
.2d8d	5a		phy				phy
.2d8e	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.2d90	24 34		bit $34				bit 	NSStatus 					; output a - if not negative.
.2d92	10 08		bpl $2d9c			bpl 	_CI32NotNeg
.2d94	48		pha				pha
.2d95	a9 2d		lda #$2d			lda 	#'-'
.2d97	99 6d 05	sta $056d,y			sta 	numberBuffer,y
.2d9a	c8		iny				iny
.2d9b	68		pla				pla
.2d9c					_CI32NotNeg:
.2d9c	20 aa 2d	jsr $2daa			jsr 	_CI32DivideConvert 			; recursive conversion
.2d9f	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.2da1	99 6d 05	sta $056d,y			sta 	numberBuffer,y
.2da4	7a		ply				ply
.2da5	a2 05		ldx #$05			ldx 	#numberBuffer >> 8 			; return address in XA
.2da7	a9 6d		lda #$6d			lda 	#numberBuffer & $FF
.2da9	60		rts				rts
.2daa					_CI32DivideConvert:
.2daa	e8		inx				inx 								; write to next slot up
.2dab	20 10 2e	jsr $2e10			jsr 	FloatSetByte 		 		; write the base out.
.2dae	ca		dex				dex
.2daf	20 a4 29	jsr $29a4			jsr 	Int32Divide 				; divide
.2db2	b5 40		lda $40,x			lda 	NSMantissa0,x 				; save remainder
.2db4	48		pha				pha
.2db5	20 93 29	jsr $2993			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.2db8	20 30 2e	jsr $2e30			jsr 	FloatIsZero 				; is it zero ?
.2dbb	f0 05		beq $2dc2			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.2dbd	b5 41		lda $41,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.2dbf	20 aa 2d	jsr $2daa			jsr 	_CI32DivideConvert 			; and recusrively call.
.2dc2					_CI32NoRecurse:
.2dc2	68		pla				pla 								; remainder
.2dc3	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.2dc5	90 02		bcc $2dc9			bcc 	_CI32NotHex
.2dc7	69 26		adc #$26			adc 	#6+32
.2dc9					_CI32NotHex:
.2dc9	69 30		adc #$30			adc 	#48
.2dcb	99 6d 05	sta $056d,y			sta 	numberBuffer,y 				; write out and exit
.2dce	c8		iny				iny
.2dcf	60		rts				rts
.2dd0					FloatNegate:
.2dd0	b5 34		lda $34,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.2dd2	49 80		eor #$80			eor 	#$80  						; toggle the negative flag
.2dd4	95 34		sta $34,x			sta 	NSStatus,x
.2dd6	60		rts				rts
.2dd7					FloatNegateMantissa:
.2dd7	38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.2dd8	a9 00		lda #$00			lda 	#0
.2dda	f5 40		sbc $40,x			sbc 	NSMantissa0,x
.2ddc	95 40		sta $40,x			sta 	NSMantissa0,x
.2dde	a9 00		lda #$00			lda 	#0
.2de0	f5 4c		sbc $4c,x			sbc 	NSMantissa1,x
.2de2	95 4c		sta $4c,x			sta 	NSMantissa1,x
.2de4	a9 00		lda #$00			lda 	#0
.2de6	f5 58		sbc $58,x			sbc 	NSMantissa2,x
.2de8	95 58		sta $58,x			sta 	NSMantissa2,x
.2dea	a9 00		lda #$00			lda 	#0
.2dec	f5 64		sbc $64,x			sbc 	NSMantissa3,x
.2dee	95 64		sta $64,x			sta 	NSMantissa3,x
.2df0	60		rts				rts
.2df1					FloatShiftUpTwo:
.2df1	b5 40		lda $40,x			lda 	NSMantissa0,x
.2df3	95 42		sta $42,x			sta 	NSMantissa0+2,x
.2df5	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.2df7	95 4e		sta $4e,x			sta 	NSMantissa1+2,x
.2df9	b5 58		lda $58,x			lda 	NSMantissa2,x
.2dfb	95 5a		sta $5a,x			sta 	NSMantissa2+2,x
.2dfd	b5 64		lda $64,x			lda 	NSMantissa3,x
.2dff	95 66		sta $66,x			sta 	NSMantissa3+2,x
.2e01	b5 70		lda $70,x			lda 	NSExponent,x
.2e03	95 72		sta $72,x			sta 	NSExponent+2,x
.2e05	b5 34		lda $34,x			lda 	NSStatus,x
.2e07	95 36		sta $36,x			sta 	NSStatus+2,x
.2e09	60		rts				rts
.2e0a					FloatSetZeroMantissaOnly:
.2e0a	74 40		stz $40,x			stz 	NSMantissa0,x
.2e0c	80 08		bra $2e16			bra 	FloatZero13
.2e0e					FloatSetZero:
.2e0e	a9 00		lda #$00			lda 	#0
.2e10					FloatSetByte:
.2e10	74 70		stz $70,x			stz 	NSExponent,x 				; zero exponent, as +ve integer value.
.2e12					FloatSetMantissa:
.2e12	95 40		sta $40,x			sta 	NSMantissa0,x 				; zero mantissa
.2e14	74 34		stz $34,x			stz 	NSStatus,x
.2e16					FloatZero13:
.2e16	74 4c		stz $4c,x			stz 	NSMantissa1,x
.2e18	74 58		stz $58,x			stz 	NSMantissa2,x
.2e1a	74 64		stz $64,x			stz 	NSMantissa3,x
.2e1c	60		rts				rts
.2e1d					FloatShiftLeft:
.2e1d	18		clc				clc
.2e1e					FloatRotateLeft:
.2e1e	36 40		rol $40,x			rol 	NSMantissa0,x
.2e20	36 4c		rol $4c,x			rol		NSMantissa1,x
.2e22	36 58		rol $58,x			rol		NSMantissa2,x
.2e24	36 64		rol $64,x			rol		NSMantissa3,x
.2e26	60		rts				rts
.2e27					FloatShiftRight:
.2e27	56 64		lsr $64,x			lsr 	NSMantissa3,x
.2e29	76 58		ror $58,x			ror		NSMantissa2,x
.2e2b	76 4c		ror $4c,x			ror		NSMantissa1,x
.2e2d	76 40		ror $40,x			ror		NSMantissa0,x
.2e2f	60		rts				rts
.2e30					FloatIsZero:
.2e30	b5 64		lda $64,x			lda 	NSMantissa3,x
.2e32	15 58		ora $58,x			ora		NSMantissa2,x
.2e34	15 4c		ora $4c,x			ora		NSMantissa1,x
.2e36	15 40		ora $40,x			ora		NSMantissa0,x
.2e38	60		rts				rts

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/polynomials.library

.2e39					FloatArcTan:
.2e39	20 63 2b	jsr $2b63			jsr 	FloatNormalise 					; normalise x
.2e3c	b5 34		lda $34,x			lda 	NSStatus,x 						; save sign, make absolute
.2e3e	48		pha				pha
.2e3f	74 34		stz $34,x			stz 	NSStatus,x
.2e41	b5 70		lda $70,x			lda 	NSExponent,x 					; $40000000 ^ $E2 is 1.0
.2e43	c9 e2		cmp #$e2			cmp 	#$E2
.2e45	90 25		bcc $2e6c			bcc 	_UANoFixup
.2e47	8a		txa				txa 									; value in +1
.2e48	a8		tay				tay
.2e49	c8		iny				iny
.2e4a	20 f2 2f	jsr $2ff2			jsr 	CopyFloatXY
.2e4d	a9 01		lda #$01			lda 	#1 								; 1.0 in +0
.2e4f	20 10 2e	jsr $2e10			jsr 	FloatSetByte
.2e52	e8		inx				inx
.2e53	20 57 29	jsr $2957			jsr 	FloatDivide
.2e56	b0 21		bcs $2e79			bcs 	_FATError
.2e58	20 7c 2e	jsr $2e7c			jsr 	CoreAtn 						; calculate the root
.2e5b	20 e7 2f	jsr $2fe7			jsr 	CompletePolynomial
.2e5e	20 d0 2d	jsr $2dd0			jsr 	FloatNegate 					; make -ve
.2e61	a9 05		lda #$05			lda 	#Const_PiDiv2-Const_Base
.2e63	20 3e 30	jsr $303e			jsr 	LoadConstant
.2e66	e8		inx				inx
.2e67	20 32 28	jsr $2832			jsr 	FloatAdd
.2e6a	80 06		bra $2e72			bra 	_UAComplete
.2e6c					_UANoFixup:
.2e6c	20 7c 2e	jsr $2e7c			jsr 	CoreAtn
.2e6f	20 e7 2f	jsr $2fe7			jsr 	CompletePolynomial
.2e72					_UAComplete:
.2e72	68		pla				pla 									; apply the result.
.2e73	55 34		eor $34,x			eor 	NSStatus,x
.2e75	95 34		sta $34,x			sta 	NSStatus,x
.2e77	18		clc				clc
.2e78	60		rts				rts
.2e79					_FATError:
.2e79	68		pla				pla
.2e7a	38		sec				sec
.2e7b	60		rts				rts
.2e7c					CoreAtn:
.2e7c	a9 ea		lda #$ea			lda 	#AtnCoefficients & $FF
.2e7e	a0 2e		ldy #$2e			ldy 	#AtnCoefficients >> 8
.2e80	4c 3b 31	jmp $313b			jmp 	CorePolySquared
.2e83					ExpCoefficients:
>2e83	07					.byte	7
>2e84	2b 1f 2c 5a				.dword	$5a2c1f2b ; 2.1498763701e-05
>2e88	d2					.byte	$d2
>2e89	8e 59 3f 4b				.dword	$4b3f598e ; 0.00014352314037
>2e8d	d5					.byte	$d5
>2e8e	c3 71 f7 57				.dword	$57f771c3 ; 0.0013422634825
>2e92	d8					.byte	$d8
>2e93	15 0e c2 4e				.dword	$4ec20e15 ; 0.0096140170135
>2e97	db					.byte	$db
>2e98	05 ac ac 71				.dword	$71acac05 ; 0.05550512686
>2e9c	dd					.byte	$dd
>2e9d	e3 f3 fe 7a				.dword	$7afef3e3 ; 0.2402263846
>2ea1	df					.byte	$df
>2ea2	08 0c b9 58				.dword	$58b90c08 ; 0.69314718618
>2ea6	e1					.byte	$e1
>2ea7	00 00 00 40				.dword	$40000000 ; 1.0
>2eab	e2					.byte	$e2
.2eac					SinCoefficients:
>2eac	06					.byte	6
>2ead	8d 16 0d f3				.dword	$f30d168d ; -14.381390672
>2eb1	e5					.byte	$e5
>2eb2	fc fd 03 54				.dword	$5403fdfc ; 42.007797122
>2eb6	e7					.byte	$e7
>2eb7	81 44 b4 cc				.dword	$ccb44481 ; -76.704170257
>2ebb	e8					.byte	$e8
>2ebc	f1 ef 9a 51				.dword	$519aeff1 ; 81.605223686
>2ec0	e8					.byte	$e8
>2ec1	94 f3 ae d2				.dword	$d2aef394 ; -41.341702104
>2ec5	e7					.byte	$e7
>2ec6	51 ed 87 64				.dword	$6487ed51 ; 6.2831853069
>2eca	e4					.byte	$e4
>2ecb	00 00 00 00				.dword	$00000000 ; 0.0
>2ecf	00					.byte	$00
.2ed0					LogCoefficients:
>2ed0	04					.byte	4
>2ed1	bd 65 2b 6f				.dword	$6f2b65bd ; 0.43425594189
>2ed5	e0					.byte	$e0
>2ed6	b2 85 cd 49				.dword	$49cd85b2 ; 0.57658454124
>2eda	e1					.byte	$e1
>2edb	8b 49 1c 7b				.dword	$7b1c498b ; 0.96180075919
>2edf	e1					.byte	$e1
>2ee0	90 1d 55 5c				.dword	$5c551d90 ; 2.8853900731
>2ee4	e3					.byte	$e3
>2ee5	00 00 00 c0				.dword	$c0000000 ; -0.5
>2ee9	e1					.byte	$e1
.2eea					AtnCoefficients:
>2eea	0c					.byte	12
>2eeb	ea de c1 d9				.dword	$d9c1deea ; -0.00068479391189
>2eef	d7					.byte	$d7
>2ef0	7a 53 7a 4f				.dword	$4f7a537a ; 0.0048509421558
>2ef4	da					.byte	$da
>2ef5	08 58 fe c1				.dword	$c1fe5808 ; -0.016111701843
>2ef9	dc					.byte	$dc
>2efa	e5 b3 0f 46				.dword	$460fb3e5 ; 0.034209638048
>2efe	dd					.byte	$dd
>2eff	e1 e5 29 ef				.dword	$ef29e5e1 ; -0.054279132761
>2f03	dd					.byte	$dd
>2f04	26 38 32 4a				.dword	$4a323826 ; 0.07245719654
>2f08	de					.byte	$de
>2f09	bd 28 f5 db				.dword	$dbf528bd ; -0.089802395378
>2f0d	de					.byte	$de
>2f0e	3f 44 98 71				.dword	$7198443f ; 0.11093241343
>2f12	de					.byte	$de
>2f13	9d 4c 22 c9				.dword	$c9224c9d ; -0.14283980767
>2f17	df					.byte	$df
>2f18	e3 48 66 66				.dword	$666648e3 ; 0.19999912049
>2f1c	df					.byte	$df
>2f1d	0a 55 55 d5				.dword	$d555550a ; -0.33333331568
>2f21	e0					.byte	$e0
>2f22	00 00 00 40				.dword	$40000000 ; 1.0
>2f26	e2					.byte	$e2
>2f27	00 00 00 00				.dword	$00000000 ; 0.0
>2f2b	00					.byte	$00
.2f2c					Const_Base:
.2f2c					Const_1Div2Pi:
>2f2c	b7 c1 7c 51				.dword	$517cc1b7 ; 0.15915494
>2f30	df					.byte	$df
.2f31					Const_PiDiv2:
>2f31	51 ed 87 64				.dword	$6487ed51 ; 1.57079633
>2f35	e2					.byte	$e2
.2f36					Const_Log2_e:
>2f36	95 1d 55 5c				.dword	$5c551d95 ; 1.44269504
>2f3a	e2					.byte	$e2
.2f3b					Const_sqrt_2:
>2f3b	9a 79 82 5a				.dword	$5a82799a ; 1.41421356
>2f3f	e2					.byte	$e2
.2f40					Const_sqrt_half:
>2f40	9a 79 82 5a				.dword	$5a82799a ; 0.70710678
>2f44	e1					.byte	$e1
.2f45					Const_pi:
>2f45	51 ed 87 64				.dword	$6487ed51 ; 3.14159265
>2f49	e3					.byte	$e3
.2f4a					Const_half:
>2f4a	00 00 00 40				.dword	$40000000 ; 0.50000000
>2f4e	e1					.byte	$e1
.2f4f					Const_ln_e:
>2f4f	fc 0b b9 58				.dword	$58b90bfc ; 0.69314718
>2f53	e1					.byte	$e1
.2f54					FloatCosine:
.2f54	a9 05		lda #$05			lda 	#Const_PiDiv2-Const_Base
.2f56	20 3e 30	jsr $303e			jsr 	LoadConstant
.2f59	e8		inx				inx
.2f5a	20 32 28	jsr $2832			jsr 	FloatAdd
.2f5d	4c f4 30	jmp $30f4			jmp 	FloatSine
.2f60					FloatExponent:
.2f60	a9 0a		lda #$0a			lda 	#Const_Log2_e-Const_Base
.2f62	20 3e 30	jsr $303e			jsr 	LoadConstant
.2f65	e8		inx				inx
.2f66	20 ce 2a	jsr $2ace			jsr 	FloatMultiply
.2f69	20 ab 2f	jsr $2fab			jsr 	_UECopy01 				; copy 0 to 1, get integer part to 1
.2f6c	e8		inx				inx
.2f6d	20 49 2a	jsr $2a49			jsr 	FloatIntegerPart
.2f70	ca		dex				dex
.2f71	b5 4d		lda $4d,x			lda 	NSMantissa1+1,x
.2f73	15 59		ora $59,x			ora 	NSMantissa2+1,x
.2f75	15 65		ora $65,x			ora 	NSMantissa3+1,x
.2f77	d0 38		bne $2fb1			bne 	_UERangeError
.2f79	b5 41		lda $41,x			lda 	NSMantissa0+1,x 		; push integer part on stack.
.2f7b	c9 40		cmp #$40			cmp 	#64
.2f7d	b0 32		bcs $2fb1			bcs 	_UERangeError
.2f7f	48		pha				pha
.2f80	b5 34		lda $34,x			lda 	NSStatus,x 				; push sign
.2f82	48		pha				pha
.2f83	20 ee 29	jsr $29ee			jsr 	FloatFractionalPart		; copy 0 to 1, get fractional part to 0
.2f86	68		pla				pla
.2f87	10 14		bpl $2f9d			bpl 	_UEPositive
.2f89	e8		inx				inx 							; 1-x
.2f8a	a9 01		lda #$01			lda 	#1
.2f8c	20 10 2e	jsr $2e10			jsr 	FloatSetByte
.2f8f	ca		dex				dex
.2f90	20 d0 2d	jsr $2dd0			jsr 	FloatNegate
.2f93	e8		inx				inx
.2f94	20 32 28	jsr $2832			jsr 	FloatAdd
.2f97	68		pla				pla 							; integer part +1 and negated.
.2f98	1a		inc a				inc 	a
.2f99	49 ff		eor #$ff			eor 	#$FF
.2f9b	1a		inc a				inc 	a
.2f9c	48		pha				pha
.2f9d					_UEPositive:
.2f9d	20 b3 2f	jsr $2fb3			jsr 	CoreExponent
.2fa0	20 e7 2f	jsr $2fe7			jsr 	CompletePolynomial
.2fa3	68		pla				pla
.2fa4	18		clc				clc
.2fa5	75 70		adc $70,x			adc 	NSExponent,x
.2fa7	95 70		sta $70,x			sta 	NSExponent,x
.2fa9	18		clc				clc
.2faa	60		rts				rts
.2fab					_UECopy01:
.2fab	8a		txa				txa
.2fac	a8		tay				tay
.2fad	c8		iny				iny
.2fae	4c f2 2f	jmp $2ff2			jmp 	CopyFloatXY
.2fb1					_UERangeError:
.2fb1	38		sec				sec
.2fb2	60		rts				rts
.2fb3					CoreExponent:
.2fb3	a9 83		lda #$83			lda 	#ExpCoefficients & $FF
.2fb5	a0 2e		ldy #$2e			ldy 	#ExpCoefficients >> 8
.2fb7	20 bb 2f	jsr $2fbb			jsr 	CalculateHornerPolynomial
.2fba	60		rts				rts
.2fbb					CalculateHornerPolynomial:
.2fbb	85 28		sta $28				sta 	zTemp0 						; save poly data from YA
.2fbd	84 29		sty $29				sty 	zTemp0+1
.2fbf	9c b4 05	stz $05b4			stz 	coefficientCount 			; zero the count.
.2fc2	8e b5 05	stx $05b5			stx 	xValueSlot 					; save xValue slot.
.2fc5	e8		inx				inx 								; set the count to zero.
.2fc6	20 0e 2e	jsr $2e0e			jsr 	FloatSetZero
.2fc9					_CHPLoop:
.2fc9	8a		txa				txa 								; copy X-1 to X+1
.2fca	a8		tay				tay
.2fcb	ca		dex				dex
.2fcc	c8		iny				iny
.2fcd	20 f2 2f	jsr $2ff2			jsr 	CopyFloatXY 				; e.g. stack is <current> <x>
.2fd0	e8		inx				inx
.2fd1	e8		inx				inx
.2fd2	20 ce 2a	jsr $2ace			jsr 	FloatMultiply 				; times current by X
.2fd5	e8		inx				inx
.2fd6	20 11 30	jsr $3011			jsr 	GetCoefficient 				; coefficient into X+1
.2fd9	20 32 28	jsr $2832			jsr 	FloatAdd 					; and add
.2fdc	ee b4 05	inc $05b4			inc 	coefficientCount
.2fdf	ad b4 05	lda $05b4			lda 	coefficientCount
.2fe2	d2 28		cmp ($28)			cmp 	(zTemp0)
.2fe4	d0 e3		bne $2fc9			bne 	_CHPLoop
.2fe6	60		rts				rts
.2fe7					CompletePolynomial:
.2fe7	20 ce 2a	jsr $2ace			jsr 	FloatMultiply
.2fea	e8		inx				inx 								; get the last value
.2feb	20 11 30	jsr $3011			jsr 	GetCoefficient
.2fee	20 32 28	jsr $2832			jsr 	FloatAdd 					; and add it
.2ff1	60		rts				rts
.2ff2					CopyFloatXY:
.2ff2	b5 70		lda $70,x			lda 	NSExponent,x
.2ff4	99 70 00	sta $0070,y			sta 	NSExponent,y
.2ff7	b5 34		lda $34,x			lda 	NSStatus,x
.2ff9	99 34 00	sta $0034,y			sta 	NSStatus,y
.2ffc	b5 40		lda $40,x			lda 	NSMantissa0,x
.2ffe	99 40 00	sta $0040,y			sta 	NSMantissa0,y
.3001	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.3003	99 4c 00	sta $004c,y			sta 	NSMantissa1,y
.3006	b5 58		lda $58,x			lda 	NSMantissa2,x
.3008	99 58 00	sta $0058,y			sta 	NSMantissa2,y
.300b	b5 64		lda $64,x			lda 	NSMantissa3,x
.300d	99 64 00	sta $0064,y			sta 	NSMantissa3,y
.3010	60		rts				rts
.3011					GetCoefficient:
.3011	5a		phy				phy
.3012	ad b4 05	lda $05b4			lda 	coefficientCount 			; 5 per block
.3015	0a		asl a				asl 	a
.3016	0a		asl a				asl 	a
.3017	38		sec				sec 								; +1 for count
.3018	6d b4 05	adc $05b4			adc 	coefficientCount
.301b	a8		tay				tay
.301c	b1 28		lda ($28),y			lda 	(zTemp0),y 					; copy mantissa
.301e	95 40		sta $40,x			sta 	NSMantissa0,x
.3020	c8		iny				iny
.3021	b1 28		lda ($28),y			lda 	(zTemp0),y
.3023	95 4c		sta $4c,x			sta 	NSMantissa1,x
.3025	c8		iny				iny
.3026	b1 28		lda ($28),y			lda 	(zTemp0),y
.3028	95 58		sta $58,x			sta 	NSMantissa2,x
.302a	c8		iny				iny
.302b	b1 28		lda ($28),y			lda 	(zTemp0),y
.302d	48		pha				pha
.302e	29 7f		and #$7f			and 	#$7F 						; clear sign bit.
.3030	95 64		sta $64,x			sta 	NSMantissa3,x
.3032	c8		iny				iny
.3033	68		pla				pla
.3034	29 80		and #$80			and 	#$80
.3036	95 34		sta $34,x			sta 	NSStatus,x 					; put in status
.3038	b1 28		lda ($28),y			lda 	(zTemp0),y
.303a	95 70		sta $70,x			sta 	NSExponent,x
.303c	7a		ply				ply
.303d	60		rts				rts
.05b4					coefficientCount:
>05b4							.fill 	1
.05b5					xValueSlot:
>05b5							.fill 	1
.303e					LoadConstant:
.303e	5a		phy				phy
.303f	a8		tay				tay
.3040	b9 2c 2f	lda $2f2c,y			lda 	Const_Base+0,y
.3043	95 41		sta $41,x			sta 	NSMantissa0+1,x
.3045	b9 2d 2f	lda $2f2d,y			lda 	Const_Base+1,y
.3048	95 4d		sta $4d,x			sta 	NSMantissa1+1,x
.304a	b9 2e 2f	lda $2f2e,y			lda 	Const_Base+2,y
.304d	95 59		sta $59,x			sta 	NSMantissa2+1,x
.304f	b9 2f 2f	lda $2f2f,y			lda 	Const_Base+3,y
.3052	48		pha				pha
.3053	29 7f		and #$7f			and 	#$7F
.3055	95 65		sta $65,x			sta 	NSMantissa3+1,x
.3057	68		pla				pla
.3058	29 80		and #$80			and 	#$80
.305a	95 35		sta $35,x			sta 	NSStatus+1,x
.305c	b9 30 2f	lda $2f30,y			lda 	Const_Base+4,y
.305f	95 71		sta $71,x			sta 	NSExponent+1,x
.3061	7a		ply				ply
.3062	60		rts				rts
.3063					FloatLogarithm:
.3063	b5 34		lda $34,x			lda 	NSStatus,x 					; check > 0
.3065	30 5f		bmi $30c6			bmi 	_ULRange
.3067	20 30 2e	jsr $2e30			jsr 	FloatIsZero
.306a	f0 5a		beq $30c6			beq 	_ULRange
.306c	20 63 2b	jsr $2b63			jsr 	FloatNormalise 				; put into FP mode.
.306f	b5 70		lda $70,x			lda 	NSExponent,x 				; get power
.3071	48		pha				pha
.3072	a9 e1		lda #$e1			lda 	#(-31) & $FF 				; force into range 0.5 -> 1
.3074	95 70		sta $70,x			sta 	NSExponent,x
.3076	a9 14		lda #$14			lda 	#Const_sqrt_half-Const_Base
.3078	20 3e 30	jsr $303e			jsr 	LoadConstant
.307b	e8		inx				inx
.307c	20 32 28	jsr $2832			jsr 	FloatAdd
.307f	8a		txa				txa 								; divide into sqrt 2.0
.3080	a8		tay				tay
.3081	c8		iny				iny
.3082	20 f2 2f	jsr $2ff2			jsr 	CopyFloatXY
.3085	ca		dex				dex
.3086	a9 0f		lda #$0f			lda 	#Const_sqrt_2-Const_Base
.3088	20 3e 30	jsr $303e			jsr 	LoadConstant
.308b	e8		inx				inx
.308c	e8		inx				inx
.308d	20 57 29	jsr $2957			jsr 	FloatDivide 				; if zero, error.
.3090	b0 33		bcs $30c5			bcs 	_ULRangePla
.3092	20 d0 2d	jsr $2dd0			jsr 	FloatNegate 				; subtract from 1
.3095	e8		inx				inx
.3096	a9 01		lda #$01			lda 	#1
.3098	20 10 2e	jsr $2e10			jsr 	FloatSetByte
.309b	20 32 28	jsr $2832			jsr 	FloatAdd
.309e	20 c8 30	jsr $30c8			jsr 	CoreLog
.30a1	20 e7 2f	jsr $2fe7			jsr 	CompletePolynomial
.30a4	68		pla				pla 								; add exponent
.30a5	18		clc				clc
.30a6	69 1f		adc #$1f			adc 	#31 						; fix up
.30a8	48		pha				pha
.30a9	10 03		bpl $30ae			bpl 	_LogNotNeg
.30ab	49 ff		eor #$ff			eor 	#$FF
.30ad	1a		inc a				inc 	a
.30ae					_LogNotNeg:
.30ae	e8		inx				inx 								; set byte and sign.
.30af	20 10 2e	jsr $2e10			jsr 	FloatSetByte
.30b2	68		pla				pla
.30b3	29 80		and #$80			and 	#$80
.30b5	95 34		sta $34,x			sta 	NSStatus,x
.30b7	20 32 28	jsr $2832			jsr 	FloatAdd
.30ba	a9 23		lda #$23			lda 	#Const_ln_e-Const_Base
.30bc	20 3e 30	jsr $303e			jsr 	LoadConstant
.30bf	e8		inx				inx
.30c0	20 ce 2a	jsr $2ace			jsr 	FloatMultiply
.30c3	18		clc				clc
.30c4	60		rts				rts
.30c5					_ULRangePla:
.30c5	68		pla				pla
.30c6					_ULRange:
.30c6	38		sec				sec
.30c7	60		rts				rts
.30c8					CoreLog:
.30c8	a9 d0		lda #$d0			lda 	#LogCoefficients & $FF
.30ca	a0 2e		ldy #$2e			ldy 	#LogCoefficients >> 8
.30cc	4c 3b 31	jmp $313b			jmp 	CorePolySquared
.30cf					FloatPI:
.30cf	a9 19		lda #$19			lda 	#Const_pi-Const_Base
.30d1	20 3e 30	jsr $303e			jsr 	LoadConstant
.30d4	e8		inx				inx
.30d5	18		clc				clc
.30d6	60		rts				rts
.30d7					FloatPower:
.30d7	ca		dex				dex
.30d8	8a		txa				txa 							; copy 0 to 2, so we can process it
.30d9	a8		tay				tay
.30da	c8		iny				iny
.30db	c8		iny				iny
.30dc	20 f2 2f	jsr $2ff2			jsr 	CopyFloatXY
.30df	e8		inx				inx 							; 2 = Log(0)
.30e0	e8		inx				inx
.30e1	20 63 30	jsr $3063			jsr 	FloatLogarithm
.30e4	b0 0d		bcs $30f3			bcs 	_FPWExit
.30e6	20 ce 2a	jsr $2ace			jsr 	FloatMultiply			; Multiply by original 1, into 1.
.30e9	8a		txa				txa 							; copy to slot 0
.30ea	a8		tay				tay
.30eb	88		dey				dey
.30ec	20 f2 2f	jsr $2ff2			jsr 	CopyFloatXY
.30ef	ca		dex				dex  							; Exponent code.
.30f0	20 60 2f	jsr $2f60			jsr 	FloatExponent
.30f3					_FPWExit:
.30f3	60		rts				rts
.30f4					FloatSine:
.30f4	b5 34		lda $34,x			lda 	NSStatus,x 					; save sign
.30f6	48		pha				pha
.30f7	74 34		stz $34,x			stz 	NSStatus,x 					; make +ve
.30f9	a9 00		lda #$00			lda 	#Const_1Div2Pi-Const_Base
.30fb	20 3e 30	jsr $303e			jsr 	LoadConstant
.30fe	e8		inx				inx
.30ff	20 ce 2a	jsr $2ace			jsr 	FloatMultiply
.3102	20 ee 29	jsr $29ee			jsr 	FloatFractionalPart 		; take the fractional part
.3105	b5 70		lda $70,x			lda 	NSExponent,x 				; check exponent
.3107	c9 e0		cmp #$e0			cmp 	#$E0 						; < $E0 exponent : 0-0.25
.3109	90 1f		bcc $312a			bcc 	_USProcessExit
.310b	f0 06		beq $3113			beq 	_USSubtractFromHalf 		; = $E0 exponent : 0.25-0.5
.310d	b5 64		lda $64,x			lda 	NSMantissa3,x 				; if > 0.75 which is $60000000:$E1
.310f	c9 60		cmp #$60			cmp 	#$60
.3111	b0 0e		bcs $3121			bcs 	_USSubtractOne
.3113					_USSubtractFromHalf:
.3113	a9 1e		lda #$1e			lda 	#Const_half-Const_Base
.3115	20 3e 30	jsr $303e			jsr 	LoadConstant
.3118	e8		inx				inx
.3119	20 2c 28	jsr $282c			jsr 	FloatSubtract
.311c	20 d0 2d	jsr $2dd0			jsr 	FloatNegate 				; then negate it
.311f	80 09		bra $312a			bra 	_USProcessExit 				; and exit
.3121					_USSubtractOne:
.3121	e8		inx				inx
.3122	a9 01		lda #$01			lda 	#1
.3124	20 10 2e	jsr $2e10			jsr 	FloatSetByte
.3127	20 2c 28	jsr $282c			jsr 	FloatSubtract
.312a					_USProcessExit:
.312a	20 37 31	jsr $3137			jsr 	CoreSine
.312d	20 e7 2f	jsr $2fe7			jsr 	CompletePolynomial
.3130	68		pla				pla 								; restore sign and apply
.3131	55 34		eor $34,x			eor 	NSStatus,x
.3133	95 34		sta $34,x			sta 	NSStatus,x
.3135	18		clc				clc
.3136	60		rts				rts
.3137					CoreSine:
.3137	a9 ac		lda #$ac			lda 	#SinCoefficients & $FF
.3139	a0 2e		ldy #$2e			ldy 	#SinCoefficients >> 8
.313b					CorePolySquared:
.313b	48		pha				pha 								; save coefficient table
.313c	5a		phy				phy
.313d	8a		txa				txa 								; copy X to +1, +2
.313e	a8		tay				tay
.313f	c8		iny				iny
.3140	20 f2 2f	jsr $2ff2			jsr 	CopyFloatXY
.3143	c8		iny				iny
.3144	20 f2 2f	jsr $2ff2			jsr 	CopyFloatXY
.3147	e8		inx				inx 								; point to the pair and put x^2 on stack
.3148	e8		inx				inx
.3149	20 ce 2a	jsr $2ace			jsr 	FloatMultiply
.314c	7a		ply				ply 								; coefficient table back.
.314d	68		pla				pla
.314e	20 bb 2f	jsr $2fbb			jsr 	CalculateHornerPolynomial
.3151	8a		txa				txa 								; copy back to slot #1
.3152	a8		tay				tay
.3153	88		dey				dey
.3154	20 f2 2f	jsr $2ff2			jsr	 	CopyFloatXY
.3157	ca		dex				dex 								; point at result
.3158	60		rts				rts
.3159					FloatSquareRoot:
.3159	20 63 30	jsr $3063			jsr 	FloatLogarithm
.315c	b0 06		bcs $3164			bcs 	_FSQExit
.315e	d6 70		dec $70,x			dec 	NSExponent,x
.3160	20 60 2f	jsr $2f60			jsr 	FloatExponent
.3163	18		clc				clc
.3164					_FSQExit:
.3164	60		rts				rts
.3165					FloatTangent:
.3165	da		phx				phx
.3166	8a		txa				txa 								; sin -> +1
.3167	a8		tay				tay
.3168	c8		iny				iny
.3169	20 f2 2f	jsr $2ff2			jsr 	CopyFloatXY
.316c	e8		inx				inx
.316d	20 f4 30	jsr $30f4			jsr 	FloatSine
.3170	ca		dex				dex
.3171	8a		txa				txa 								; cos -> +2
.3172	a8		tay				tay
.3173	c8		iny				iny
.3174	c8		iny				iny
.3175	20 f2 2f	jsr $2ff2			jsr 	CopyFloatXY
.3178	e8		inx				inx
.3179	e8		inx				inx
.317a	20 54 2f	jsr $2f54			jsr 	FloatCosine
.317d	20 57 29	jsr $2957			jsr 	FloatDivide 				; calculate sin/cos
.3180	b0 07		bcs $3189			bcs 	_FTExit 					; divide by zero
.3182	8a		txa				txa 								; copy result down.
.3183	a8		tay				tay
.3184	88		dey				dey
.3185	20 f2 2f	jsr $2ff2			jsr 	CopyFloatXY
.3188	18		clc				clc
.3189					_FTExit:
.3189	fa		plx				plx
.318a	60		rts				rts

;******  Processing input file: testing/testend.asm

=$3200							nextPage = (* + $FF) & $FF00 		; so I can include with that f*****g header.
.31fe					ObjectCodePreHeader:
>31fe	00 40 d4 54 00 a6 22 48				.binary "code/code.bin"
>3206	00 a6 03 c7 a6 cb 93 93 b1 a6 40 00 01 00 ca 81
>3216	58 03 40 00 01 00 ca 81 58 06 40 00 01 00 ca 81
>3226	58 09 a6 40 00 01 00 ca 81 58 0c 40 00 01 00 ca
>3236	81 58 0f a6 00 48 12 24 40 00 01 95 a6 40 12 01
>3246	50 03 8e 01 b4 28 82 ca 84 02 82 01 80 7c a6 40
>3256	12 01 50 06 8e 01 b4 1e 82 ca 84 cc 00 01 82 7c
>3266	a6 40 12 01 50 09 8e 01 b4 0e 82 ca 84 01 80 7c
>3276	a6 40 12 01 50 0c 8e 01 b4 02 82 ca 84 7c a6 a6
>3286	40 12 01 50 0f 8e 01 7c a6 24 a7 a6 a6 00 48 15
>3296	2a 1d 01 95 00 48 18 30 27 01 95 a6 40 15 cc 00
>32a6	01 82 40 18 02 82 80 cc 00 b0 80 48 1b a6 01 40
>32b6	1b cb 51 c8 01 40 1b 01 80 00 c8 a6 30 a7 2a a7
>32c6	a6 01 48 12 24 40 00 01 95 a6 01 cc 00 b0 40 12
>32d6	01 50 06 8e 78 80 40 12 01 50 03 8e 78 80 00 c8
>32e6	a6 40 12 01 50 0c 8e 78 48 1e a6 40 1e 00 a3 88
>32f6	d2 00 07 00 d1 00 5d 00 a6 40 1e 01 a3 88 d2 00
>3306	07 00 d1 00 7a 00 a6 40 12 01 50 0f 8e 78 48 21
>3316	a6 40 21 00 a3 88 d2 00 07 00 d1 00 97 00 a6 40
>3326	21 01 a3 88 d2 00 07 00 d1 00 b6 00 a6 01 cc 00
>3336	b0 40 12 01 50 06 8e 78 80 40 12 01 50 03 8e 78
>3346	80 40 12 01 50 09 8e 78 c8 a6 24 a7 a6 d0 00 72
>3356	ff a6 a6 40 12 01 50 03 8e 78 48 24 a6 40 24 01
>3366	a3 88 d2 00 0c 00 40 12 01 50 0c 8e 01 7c 98 a6
>3376	40 12 01 50 03 8e 40 24 02 81 7c 98 a6 a6 40 12
>3386	01 50 03 8e 78 48 24 a6 40 24 cb 4f a3 88 d2 00
>3396	15 00 40 12 01 50 03 8e cb 4d 7c 40 12 01 50 0c
>33a6	8e 00 7c 98 a6 40 12 01 50 03 8e 40 24 02 80 7c
>33b6	98 a6 a6 40 12 01 50 06 8e 78 48 27 a6 40 27 00
>33c6	a3 88 d2 00 0c 00 40 12 01 50 0f 8e 01 7c 98 a6
>33d6	40 12 01 50 06 8e 40 27 cc 00 01 81 7c 98 a6 a6
>33e6	40 12 01 50 06 8e 78 48 27 a6 40 27 cc 00 1d a3
>33f6	88 d2 00 16 00 40 12 01 50 06 8e cc 00 1c 7c 40
>3406	12 01 50 0f 8e 00 7c 98 a6 40 12 01 50 06 8e 40
>3416	27 cc 00 01 80 7c 98 c4 ff
=12800					ObjectCode = ObjectCodePreHeader+2 			; so the code is at XX00

;******  End of listing
