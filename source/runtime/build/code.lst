
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass -q -c -Wall -o build/code.prg -L build/code.lst -l build/code.lbl testing/testing.asm /home/paulr/Projects/blitz-compiler/documents/../bin/runtime.library /home/paulr/Projects/blitz-compiler/documents/../bin/common.library /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library /home/paulr/Projects/blitz-compiler/documents/../bin/polynomials.library testing/testend.asm
; Thu Oct 12 05:13:54 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: testing/testing.asm

.0801					WrapperBoot:
.0801	a9 2a		lda #$2a			lda 	#ObjectCode >> 8 			; address of object code to run.
.0803	a2 81		ldx #$81			ldx 	#$81 						; first page of allocatable memory
.0805	a0 9f		ldy #$9f			ldy 	#$9F 						; byte after end of last page.
.0807	20 0f 08	jsr $080f			jsr 	StartRuntime 				; try to run it
.080a					_WBStop:
.080a	b0 fe		bcs $080a			bcs 	_WBStop
.080c	4c ff ff	jmp $ffff			jmp 	$FFFF 						; then exit.

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/runtime.library

.0022					zsTemp:
>0022							.fill 	2
.0024					runtimeStackPtr:
>0024							.fill 	2
.0400					stringLowMemory:
>0400							.fill 	2
.0402					stringHighMemory:
>0402							.fill 	2
=$e4					FRAME_GOSUB = $E4 							; Gosub has 4 bytes
=211					FRAME_FOR = $C0+19 							; For has 19 bytes
=$9f20					VRAMLow0 = $9F20
=$9f21					VRAMMed0 = $9F21
=$9f22					VRAMHigh0 = $9F22
=$9f23					VRAMData0 = $9F23
=$c09f					X16A_audio_init=$C09F
=$c08d					X16A_bas_fmchordstring=$C08D
=$c000					X16A_bas_fmfreq=$C000
=$c003					X16A_bas_fmnote=$C003
=$c006					X16A_bas_fmplaystring=$C006
=$c009					X16A_bas_fmvib=$C009
=$c00c					X16A_bas_playstringvoice=$C00C
=$c090					X16A_bas_psgchordstring=$C090
=$c00f					X16A_bas_psgfreq=$C00F
=$c012					X16A_bas_psgnote=$C012
=$c015					X16A_bas_psgwav=$C015
=$c018					X16A_bas_psgplaystring=$C018
=$c01b					X16A_notecon_bas2fm=$C01B
=$c01e					X16A_notecon_bas2midi=$C01E
=$c021					X16A_notecon_bas2psg=$C021
=$c024					X16A_notecon_fm2bas=$C024
=$c027					X16A_notecon_fm2midi=$C027
=$c02a					X16A_notecon_fm2psg=$C02A
=$c02d					X16A_notecon_freq2bas=$C02D
=$c030					X16A_notecon_freq2fm=$C030
=$c033					X16A_notecon_freq2midi=$C033
=$c036					X16A_notecon_freq2psg=$C036
=$c039					X16A_notecon_midi2bas=$C039
=$c03c					X16A_notecon_midi2fm=$C03C
=$c03f					X16A_notecon_midi2psg=$C03F
=$c042					X16A_notecon_psg2bas=$C042
=$c045					X16A_notecon_psg2fm=$C045
=$c048					X16A_notecon_psg2midi=$C048
=$c093					X16A_psg_getatten=$C093
=$c096					X16A_psg_getpan=$C096
=$c04b					X16A_psg_init=$C04B
=$c04e					X16A_psg_playfreq=$C04E
=$c051					X16A_psg_read=$C051
=$c054					X16A_psg_setatten=$C054
=$c057					X16A_psg_setfreq=$C057
=$c05a					X16A_psg_setpan=$C05A
=$c05d					X16A_psg_setvol=$C05D
=$c060					X16A_psg_write=$C060
=$c0a2					X16A_psg_write_fast=$C0A2
=$c099					X16A_ym_getatten=$C099
=$c09c					X16A_ym_getpan=$C09C
=$c063					X16A_ym_init=$C063
=$c066					X16A_ym_loaddefpatches=$C066
=$c069					X16A_ym_loadpatch=$C069
=$c06c					X16A_ym_loadpatchlfn=$C06C
=$c06f					X16A_ym_playdrum=$C06F
=$c072					X16A_ym_playnote=$C072
=$c075					X16A_ym_setatten=$C075
=$c078					X16A_ym_setdrum=$C078
=$c07b					X16A_ym_setnote=$C07B
=$c07e					X16A_ym_setpan=$C07E
=$c081					X16A_ym_read=$C081
=$c084					X16A_ym_release=$C084
=$c087					X16A_ym_trigger=$C087
=$c08a					X16A_ym_write=$C08A
=2					X16_r0 = 2
=4					X16_r1 = 4
=6					X16_r2 = 6
=8					X16_r3 = 8
=10					X16_r4 = 10
=$ffa5					X16_ACPTR=$FFA5
=$ffcf					X16_BASIN=$FFCF
=$feba					X16_BSAVE=$FEBA
=$ffd2					X16_BSOUT=$FFD2
=$ffa8					X16_CIOUT=$FFA8
=$ffe7					X16_CLALL=$FFE7
=$ffc3					X16_CLOSE=$FFC3
=$ffc6					X16_CHKIN=$FFC6
=$ffc9					X16_CHKOUT=$FFC9
=$ff50					X16_clock_get_date_time=$FF50
=$ff4d					X16_clock_set_date_time=$FF4D
=$ffcf					X16_CHRIN=$FFCF
=$ffd2					X16_CHROUT=$FFD2
=$ff4a					X16_CLOSE_ALL=$FF4A
=$ffcc					X16_CLRCHN=$FFCC
=$fedb					X16_console_init=$FEDB
=$fee1					X16_console_get_char=$FEE1
=$fede					X16_console_put_char=$FEDE
=$fed8					X16_console_put_image=$FED8
=$fed5					X16_console_set_paging_message=$FED5
=$ff47					X16_enter_basic=$FF47
=$fecf					X16_entropy_get=$FECF
=$ff74					X16_fetch=$FF74
=$ff02					X16_FB_cursor_next_line=$FF02
=$feff					X16_FB_cursor_position=$FEFF
=$ff17					X16_FB_fill_pixels=$FF17
=$ff1a					X16_FB_filter_pixels=$FF1A
=$fef9					X16_FB_get_info=$FEF9
=$ff05					X16_FB_get_pixel=$FF05
=$ff08					X16_FB_get_pixels=$FF08
=$fef6					X16_FB_init=$FEF6
=$ff1d					X16_FB_move_pixels=$FF1D
=$ff11					X16_FB_set_8_pixels=$FF11
=$ff14					X16_FB_set_8_pixels_opaque=$FF14
=$fefc					X16_FB_set_palette=$FEFC
=$ff0b					X16_FB_set_pixel=$FF0B
=$ff0e					X16_FB_set_pixels=$FF0E
=$ffe4					X16_GETIN=$FFE4
=$ff23					X16_GRAPH_clear=$FF23
=$ff38					X16_GRAPH_draw_image=$FF38
=$ff2c					X16_GRAPH_draw_line=$FF2C
=$ff35					X16_GRAPH_draw_oval=$FF35
=$ff2f					X16_GRAPH_draw_rect=$FF2F
=$ff3e					X16_GRAPH_get_char_size=$FF3E
=$ff20					X16_GRAPH_init=$FF20
=$ff32					X16_GRAPH_move_rect=$FF32
=$ff41					X16_GRAPH_put_char=$FF41
=$ff29					X16_GRAPH_set_colors=$FF29
=$ff3b					X16_GRAPH_set_font=$FF3B
=$ff26					X16_GRAPH_set_window=$FF26
=$fec6					X16_i2c_read_byte=$FEC6
=$fec9					X16_i2c_write_byte=$FEC9
=$fff3					X16_IOBASE=$FFF3
=$ff6e					X16_JSRFAR=$FF6E
=$ff56					X16_joystick_get=$FF56
=$ff53					X16_joystick_scan=$FF53
=$fec0					X16_kbdbuf_get_modifiers=$FEC0
=$febd					X16_kbdbuf_peek=$FEBD
=$fec3					X16_kbdbuf_put=$FEC3
=$fed2					X16_keymap=$FED2
=$ffb1					X16_LISTEN=$FFB1
=$ff59					X16_LKUPLA=$FF59
=$ff5c					X16_LKUPSA=$FF5C
=$ffd5					X16_LOAD=$FFD5
=$ff44					X16_MACPTR=$FF44
=$ff9c					X16_MEMBOT=$FF9C
=$fee7					X16_memory_copy=$FEE7
=$feea					X16_memory_crc=$FEEA
=$feed					X16_memory_decompress=$FEED
=$fee4					X16_memory_fill=$FEE4
=$ff99					X16_MEMTOP=$FF99
=$fecc					X16_monitor=$FECC
=$ff68					X16_mouse_config=$FF68
=$ff6b					X16_mouse_get=$FF6B
=$ff71					X16_mouse_scan=$FF71
=$ffc0					X16_OPEN=$FFC0
=$ff65					X16_PFKEY=$FF65
=$fff0					X16_PLOT=$FFF0
=$ff7d					X16_PRIMM=$FF7D
=$ffde					X16_RDTIM=$FFDE
=$ffb7					X16_READST=$FFB7
=$ffd8					X16_SAVE=$FFD8
=$ffed					X16_SCREEN=$FFED
=$ff5f					X16_screen_mode=$FF5F
=$ff62					X16_screen_set_charset=$FF62
=$ff93					X16_SECOND=$FF93
=$ffba					X16_SETLFS=$FFBA
=$ff90					X16_SETMSG=$FF90
=$ffbd					X16_SETNAM=$FFBD
=$ffdb					X16_SETTIM=$FFDB
=$ffa2					X16_SETTMO=$FFA2
=$fef0					X16_sprite_set_image=$FEF0
=$fef3					X16_sprite_set_position=$FEF3
=$ff77					X16_stash=$FF77
=$ffe1					X16_STOP=$FFE1
=$ffb4					X16_TALK=$FFB4
=$ff96					X16_TKSA=$FF96
=$ffea					X16_UDTIM=$FFEA
=$ffae					X16_UNLSN=$FFAE
=$ffab					X16_UNTLK=$FFAB
=$311					USRRoutineAddress = $311
=$30c					SYS_Reg_A = $30C
=$30d					SYS_Reg_X = $30D
=$30e					SYS_Reg_Y = $30E
=$30f					SYS_Reg_S = $30F
=0					SelectRAMBank = 0
=1					SelectROMBank = 1
=$0a					X16_AudioCodeBank = $0A
.080f					StartRuntime:
.080f	8d 04 04	sta $0404			sta 	runtimeHigh 				; save address of code.
.0812	85 29		sta $29				sta 	codePtr+1 					; set pointer to code.
.0814	64 28		stz $28				stz 	codePtr
.0816	8e 05 04	stx $0405			stx 	storeStartHigh 				; save from-to address.
.0819	8c 06 04	sty $0406			sty 	storeEndHigh
.081c	8e 07 04	stx $0407			stx 	variableStartPage
.081f	ba		tsx				tsx 								; save the stack.
.0820	8e 08 04	stx $0408			stx 	Runtime6502SP
.0823	a0 0c		ldy #$0c			ldy 	#RuntimeErrorHandler >> 8 	; set error handler to runtime one.
.0825	a2 41		ldx #$41			ldx 	#RuntimeErrorHandler & $FF
.0827	20 f2 1e	jsr $1ef2			jsr 	SetErrorHandler
.082a	20 6d 0a	jsr $0a6d			jsr 	ClearMemory 				; clear memory.
.082d	20 71 16	jsr $1671			jsr 	XRuntimeSetup 				; initialise the runtime stuff.
.0830	20 5d 13	jsr $135d		 	jsr		SetDefaultChannel			; set default input/output channel.
.0833	20 a9 15	jsr $15a9			jsr 	RestoreCode 				; which we now call
.0836	a0 00		ldy #$00			ldy 	#0
.0838					NextCommand:
.0838	ad 09 04	lda $0409			lda  	breakCount 					; only check every 16 instructions.
.083b	69 10		adc #$10			adc 	#16
.083d	8d 09 04	sta $0409			sta 	breakCount
.0840	90 07		bcc $0849			bcc 	_NXNoCheck
.0842	da		phx				phx
.0843	5a		phy				phy 								; check Ctrl+C
.0844	20 ad 1b	jsr $1bad			jsr 	XCheckStop
.0847	7a		ply				ply
.0848	fa		plx				plx
.0849					_NXNoCheck:
.0849	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.084b	30 5b		bmi $08a8			bmi 	NXCommand 					; -if -ve command
.084d	c8		iny				iny
.084e	c9 40		cmp #$40			cmp 	#64 						; 64..127 is load and store.
.0850	90 39		bcc $088b			bcc 	PushByteA 					; 0..63 is short constants.
.0852					NXLoadStore:
.0852	c9 78		cmp #$78			cmp		#120 						; is it an indirect read/write
.0854	b0 19		bcs $086f			bcs 	NXIndirectLoadStore
.0856	4a		lsr a				lsr 	a 							; / 4, so $48 => $12,
.0857	4a		lsr a				lsr 	a
.0858	29 0e		and #$0e			and 	#$0E
.085a	da		phx				phx 								; get ready to jump
.085b	aa		tax				tax
.085c	7c 5f 08	jmp ($085f,x)			jmp 	(ReadWriteVectors,x) 		; go via the jump table.
.085f					ReadWriteVectors:
>085f	c9 14						.word 	ReadFloatCommand			; read float
>0861	bc 1a						.word 	WriteFloatCommand 			; write float
>0863	05 15						.word 	ReadIntegerCommand 			; read integer
>0865	f8 1a						.word 	WriteIntegerCommand 		; write integer
>0867	4a 15						.word 	ReadStringCommand 			; read string
>0869	37 1b						.word 	WriteStringCommand 			; write string
>086b	3e 0c						.word 	Unimplemented
>086d	3e 0c						.word 	Unimplemented
.086f					NXIndirectLoadStore:
.086f	29 07		and #$07			and 	#7
.0871	0a		asl a				asl 	a
.0872	da		phx				phx
.0873	aa		tax				tax
.0874	7c 77 08	jmp ($0877,x)			jmp 	(IndirectVectors,x)
.0877					IndirectVectors:
>0877	f5 0e						.word 	IndFloatRead 				; float read
>0879	09 0f						.word 	IndInt16Read 				; int16 read
>087b	1d 0f						.word 	IndStringRead 				; string read
>087d	3e 0c						.word 	Unimplemented
>087f	31 0f						.word 	IndFloatWrite				; float write
>0881	45 0f						.word 	IndInt16Write 				; int16 write
>0883	59 0f						.word 	IndStringWrite 				; string write
>0885	3e 0c						.word 	Unimplemented
.0887					PushByteCommand:
.0887	fa		plx				plx
.0888	b1 28		lda ($28),y			lda 	(codePtr),y 				; get byte to write.
.088a	c8		iny				iny
.088b					PushByteA:
.088b	e8		inx				inx 								; push constant on stack
.088c	95 3e		sta $3e,x			sta 	NSMantissa0,x 				; save byte
.088e	74 4a		stz $4a,x			stz 	NSMantissa1,x 				; clear MSB
.0890					ClearRestWord:
.0890	74 56		stz $56,x			stz 	NSMantissa2,x 				; zero upper bytes, exponent, make iFloat32
.0892	74 62		stz $62,x			stz 	NSMantissa3,x
.0894	74 6e		stz $6e,x			stz 	NSExponent,x
.0896	74 32		stz $32,x			stz 	NSStatus,x
.0898	80 9e		bra $0838			bra 	NextCommand
.089a					PushWordCommand:
.089a	fa		plx				plx
.089b	e8		inx				inx
.089c	b1 28		lda ($28),y			lda 	(codePtr),y 				; word to stack
.089e	c8		iny				iny
.089f	95 3e		sta $3e,x			sta 	NSMantissa0,x
.08a1	b1 28		lda ($28),y			lda 	(codePtr),y
.08a3	c8		iny				iny
.08a4	95 4a		sta $4a,x			sta 	NSMantissa1,x
.08a6	80 e8		bra $0890			bra 	ClearRestWord 				; handle everything else.
.08a8					NXCommand:
.08a8	c8		iny				iny 								; consume command.
.08a9	10 03		bpl $08ae			bpl 	_NXCommandNoFixUp
.08ab	20 b4 08	jsr $08b4			jsr 	FixUpY
.08ae					_NXCommandNoFixUp:
.08ae	0a		asl a				asl 	a 							; shift left
.08af	da		phx				phx 								; save SP on stack
.08b0	aa		tax				tax				 					; and jump indirect
.08b1	7c 9b 19	jmp ($199b,x)			jmp 	(VectorTable,x)
.08b4					FixUpY:
.08b4	48		pha				pha
.08b5	98		tya				tya
.08b6	18		clc				clc
.08b7	65 28		adc $28				adc 	codePtr
.08b9	85 28		sta $28				sta 	codePtr
.08bb	90 02		bcc $08bf			bcc 	_NoCPCarry
.08bd	e6 29		inc $29				inc 	codePtr+1
.08bf					_NoCPCarry:
.08bf	a0 00		ldy #$00			ldy 	#0
.08c1	68		pla				pla
.08c2	60		rts				rts
.0404					runtimeHigh:
>0404							.fill 	1
.0405					storeStartHigh:
>0405							.fill 	1
.0406					storeEndHigh:
>0406							.fill 	1
.0407					variableStartPage:
>0407							.fill 	1
.0408					Runtime6502SP:
>0408							.fill 	1
.0409					breakCount:
>0409							.fill 	1
.08c3					AbsoluteTOS:
.08c3	fa		plx				plx
.08c4	74 32		stz $32,x			stz 	NSStatus,x 					; dereferenced so just clear the status byte.
.08c6	4c 38 08	jmp $0838			jmp 	NextCommand
.08c9					CommandVarSpace:
.08c9	fa		plx				plx
.08ca	b1 28		lda ($28),y			lda 	(codePtr),y					; 3 byte opcode, which is 'free' memory in variable area.
.08cc	85 26		sta $26				sta 	availableMemory
.08ce	c8		iny				iny
.08cf	b1 28		lda ($28),y			lda 	(codePtr),y
.08d1	18		clc				clc
.08d2	6d 07 04	adc $0407			adc 	variableStartPage			; offset to actual address.
.08d5	85 27		sta $27				sta 	availableMemory+1
.08d7	c8		iny				iny
.08d8	4c 38 08	jmp $0838			jmp 	NextCommand
.0026					availableMemory:
>0026							.fill 	2
.08db					BinaryAnd:
.08db	fa		plx				plx
.08dc	38		sec				sec
.08dd	80 02		bra $08e1			bra 	AndOrCommon
.08df					BinaryOr:
.08df	fa		plx				plx
.08e0	18		clc				clc
.08e1					AndOrCommon:
.08e1	08		php				php 								; save AND/OR flag
.08e2	20 30 10	jsr $1030			jsr 	GetInteger16Bit
.08e5	ca		dex				dex
.08e6	20 30 10	jsr $1030			jsr 	GetInteger16Bit
.08e9	28		plp				plp
.08ea	90 0e		bcc $08fa			bcc 	_AOCOrCode
.08ec	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; AND code
.08ee	35 3f		and $3f,x			and		NSMantissa0+1,x
.08f0	95 3e		sta $3e,x			sta 	NSMantissa0,x
.08f2	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.08f4	35 4b		and $4b,x			and		NSMantissa1+1,x
.08f6	95 4a		sta $4a,x			sta 	NSMantissa1,x
.08f8	80 0c		bra $0906			bra 	_AOCComplete
.08fa					_AOCOrCode:
.08fa	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; OR code
.08fc	15 3f		ora $3f,x			ora		NSMantissa0+1,x
.08fe	95 3e		sta $3e,x			sta 	NSMantissa0,x
.0900	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.0902	15 4b		ora $4b,x			ora		NSMantissa1+1,x
.0904	95 4a		sta $4a,x			sta 	NSMantissa1,x
.0906					_AOCComplete:
.0906	74 32		stz $32,x			stz 	NSStatus,x 					; make integer ?
.0908	34 4a		bit $4a,x			bit 	NSMantissa1,x 				; result is -ve
.090a	10 07		bpl $0913			bpl 	_AOCExit
.090c	20 40 10	jsr $1040			jsr 	Negate16Bit 				; 2's complement
.090f	a9 80		lda #$80			lda 	#$80 						; make it -ve
.0911	95 32		sta $32,x			sta 	NSStatus,x
.0913					_AOCExit:
.0913	4c 38 08	jmp $0838			jmp 	NextCommand
.0916					ArrayConvert:
.0916	fa		plx				plx
.0917	5a		phy				phy
.0918	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.091a	85 2e		sta $2e				sta 	zTemp1
.091c	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.091e	18		clc				clc
.091f	6d 07 04	adc $0407			adc 	variableStartPage
.0922	85 2f		sta $2f				sta 	zTemp1+1
.0924	ca		dex				dex 								; count of indices to follow -> zTemp2
.0925	20 2a 10	jsr $102a			jsr 	GetInteger8Bit
.0928	85 30		sta $30				sta 	zTemp2 						; subtract from stack.
.092a	8a		txa				txa
.092b	38		sec				sec
.092c	e5 30		sbc $30				sbc 	zTemp2
.092e	aa		tax				tax
.092f	da		phx				phx 								; stack points at the first index, which will be replaced.
.0930					_ACIndexLoop:
.0930	20 ac 22	jsr $22ac			jsr 	FloatIntegerPart 			; integer array index
.0933	20 30 10	jsr $1030			jsr 	GetInteger16Bit 			; get the index => zTemp0
.0936	a0 01		ldy #$01			ldy 	#1 							; compare against the index count.
.0938	a5 2c		lda $2c				lda 	zTemp0
.093a	d2 2e		cmp ($2e)			cmp 	(zTemp1)
.093c	a5 2d		lda $2d				lda 	zTemp0+1
.093e	f1 2e		sbc ($2e),y			sbc 	(zTemp1),y
.0940	b0 79		bcs $09bb			bcs 	_ACBadIndex 				; index error.
.0942	c6 30		dec $30				dec 	zTemp2 						; decrement count, if zero, then innermost level
.0944	f0 29		beq $096f			beq 	_ACInnerLevel
.0946	a0 02		ldy #$02			ldy 	#2 							; check sub index.
.0948	b1 2e		lda ($2e),y			lda 	(zTemp1),y
.094a	10 6f		bpl $09bb			bpl 	_ACBadIndex
.094c	06 2c		asl $2c				asl 	zTemp0 						; double the index and add it to the base address
.094e	26 2d		rol $2d				rol 	zTemp0+1
.0950	18		clc				clc
.0951	a5 2c		lda $2c				lda		zTemp0
.0953	65 2e		adc $2e				adc 	zTemp1
.0955	85 2c		sta $2c				sta 	zTemp0
.0957	a5 2d		lda $2d				lda		zTemp0+1
.0959	65 2f		adc $2f				adc 	zTemp1+1
.095b	85 2d		sta $2d				sta 	zTemp0+1
.095d	a0 03		ldy #$03			ldy 	#3 							; we offset by 3 because 3 at entry, now get the address
.095f	b1 2c		lda ($2c),y			lda 	(zTemp0),y 					; into zTemp1 as a real address, not offset
.0961	85 2e		sta $2e				sta 	zTemp1
.0963	c8		iny				iny
.0964	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.0966	18		clc				clc
.0967	6d 07 04	adc $0407			adc 	variableStartPage
.096a	85 2f		sta $2f				sta 	zTemp1+1
.096c	e8		inx				inx 								; next index
.096d	80 c1		bra $0930			bra 	_ACIndexLoop
.096f					_ACInnerLevel:
.096f	a0 02		ldy #$02			ldy 	#2
.0971	b1 2e		lda ($2e),y			lda 	(zTemp1),y
.0973	30 46		bmi $09bb			bmi 	_ACBadIndex 				; it has sub arrays, so bad index.
.0975	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16 		; check if it is an iFloat
.0977	c9 00		cmp #$00			cmp 	#NSSIFloat
.0979	d0 13		bne $098e			bne 	_ACNotFloat
.097b	a5 2d		lda $2d				lda 	zTemp0+1 					; double and add zTemp0 (x3)
.097d	48		pha				pha
.097e	a5 2c		lda $2c				lda 	zTemp0
.0980	06 2c		asl $2c				asl 	zTemp0 						; x 2
.0982	26 2d		rol $2d				rol 	zTemp0+1
.0984	18		clc				clc 								; add back x 3
.0985	65 2c		adc $2c				adc 	zTemp0
.0987	85 2c		sta $2c				sta 	zTemp0
.0989	68		pla				pla
.098a	65 2d		adc $2d				adc 	zTemp0+1
.098c	85 2d		sta $2d				sta 	zTemp0+1
.098e					_ACNotFloat:
.098e	06 2c		asl $2c				asl 	zTemp0 						; x 2 or x 6 depending.
.0990	26 2d		rol $2d				rol 	zTemp0+1
.0992	18		clc				clc
.0993	a5 2c		lda $2c				lda 	zTemp0
.0995	69 03		adc #$03			adc 	#3
.0997	85 2c		sta $2c				sta 	zTemp0
.0999	90 02		bcc $099d			bcc 	_ACNoCarry
.099b	e6 2d		inc $2d				inc 	zTemp0+1
.099d					_ACNoCarry:
.099d	fa		plx				plx 								; X points to first slot of array parameters
.099e	18		clc				clc
.099f	a5 2c		lda $2c				lda 	zTemp0
.09a1	65 2e		adc $2e				adc 	zTemp1
.09a3	95 3e		sta $3e,x			sta 	NSMantissa0,x
.09a5	a5 2d		lda $2d				lda 	zTemp0+1
.09a7	65 2f		adc $2f				adc 	zTemp1+1
.09a9	38		sec				sec
.09aa	ed 07 04	sbc $0407			sbc 	variableStartPage
.09ad	95 4a		sta $4a,x			sta 	NSMantissa1,x
.09af	74 56		stz $56,x			stz 	NSMantissa2,x
.09b1	74 62		stz $62,x			stz 	NSMantissa3,x
.09b3	74 32		stz $32,x			stz 	NSStatus,x
.09b5	74 6e		stz $6e,x			stz 	NSExponent,x
.09b7	7a		ply				ply 	 							; restore code pointer
.09b8	4c 38 08	jmp $0838			jmp 	NextCommand
.09bb					_ACBadIndex:
.09bb	4c f4 1f	jmp $1ff4		jmp	ErrorV_index
.09be					UnaryAsc:
.09be	fa		plx				plx
.09bf	5a		phy				phy
.09c0	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; string address.
.09c2	85 2c		sta $2c				sta 	zTemp0
.09c4	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.09c6	85 2d		sta $2d				sta 	zTemp0+1
.09c8	b2 2c		lda ($2c)			lda 	(zTemp0) 					; if empty string return zero
.09ca	f0 06		beq $09d2			beq 	_UAExit
.09cc	5a		phy				phy 								; otherwise first character
.09cd	a0 01		ldy #$01			ldy 	#1
.09cf	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.09d1	7a		ply				ply
.09d2					_UAExit:
.09d2	20 73 26	jsr $2673			jsr 	FloatSetByte
.09d5	7a		ply				ply
.09d6	4c 38 08	jmp $0838			jmp 	NextCommand
.09d9					CommandAssert:
.09d9	fa		plx				plx
.09da	e0 00		cpx #$00			cpx 	#0 							; check only one element on stack
.09dc	d0 09		bne $09e7			bne 	_CAFail
.09de	20 93 26	jsr $2693			jsr 	FloatIsZero 				; is it zero ?
.09e1	f0 04		beq $09e7			beq 	_CAFail
.09e3	ca		dex				dex
.09e4	4c 38 08	jmp $0838			jmp 	NextCommand
.09e7					_CAFail:
.09e7	4c 4d 1f	jmp $1f4d		jmp	ErrorV_assert
.09ea					X16_Audio_Parameters8_16:
.09ea	20 f0 09	jsr $09f0			jsr 	X16_Audio_Parameters8_8
.09ed	a4 4b		ldy $4b				ldy 	NSMantissa1+1
.09ef	60		rts				rts
.09f0					X16_Audio_Parameters8_8:
.09f0	a2 01		ldx #$01			ldx 	#1
.09f2	20 ac 22	jsr $22ac			jsr 	FloatIntegerPart
.09f5	ca		dex				dex
.09f6	20 ac 22	jsr $22ac			jsr 	FloatIntegerPart
.09f9	20 2a 10	jsr $102a			jsr 	GetInteger8Bit
.09fc	a6 3f		ldx $3f				ldx 	NSMantissa0+1
.09fe	a0 00		ldy #$00			ldy 	#0
.0a00	60		rts				rts
.0a01					X16_Audio_Parameters8_String:
.0a01	20 ea 09	jsr $09ea			jsr 	X16_Audio_Parameters8_16 	; get as numbers.
.0a04	da		phx				phx 								; set the voice
.0a05	5a		phy				phy
.0a06	20 6e ff	jsr $ff6e			jsr 	X16_JSRFAR
.0a09	20 0c c0	jsr $c00c			jsr 	X16A_bas_playstringvoice
>0a0c	0a						.byte 	X16_AudioCodeBank
.0a0d	7a		ply				ply
.0a0e	fa		plx				plx
.0a0f	86 2c		stx $2c				stx 	zTemp0
.0a11	84 2d		sty $2d				sty 	zTemp0+1
.0a13	b2 2c		lda ($2c)			lda 	(zTemp0) 					; read length
.0a15	e8		inx				inx 								; point YX to first character.
.0a16	d0 01		bne $0a19			bne 	_X16APSSkip
.0a18	c8		iny				iny
.0a19					_X16APSSkip:
.0a19	60		rts				rts
.0a1a					Unary16Bin:
.0a1a	fa		plx				plx
.0a1b	20 30 10	jsr $1030			jsr 	GetInteger16Bit				; 16 bit int
.0a1e	a9 10		lda #$10			lda 	#16 						; allocate / set 16 bytes.
.0a20	20 1a 17	jsr $171a			jsr 	StringAllocTemp
.0a23	a5 2d		lda $2d				lda 	zTemp0+1
.0a25	f0 03		beq $0a2a			beq 	_UBNoHigh
.0a27	20 32 0a	jsr $0a32			jsr 	_UBWriteBinary
.0a2a					_UBNoHigh:
.0a2a	a5 2c		lda $2c				lda 	zTemp0
.0a2c	20 32 0a	jsr $0a32			jsr 	_UBWriteBinary
.0a2f	4c 38 08	jmp $0838			jmp 	NextCommand
.0a32					_UBWriteBinary:
.0a32	5a		phy				phy
.0a33	a0 08		ldy #$08			ldy 	#8
.0a35					_UBWLoop:
.0a35	0a		asl a				asl 	a
.0a36	48		pha				pha
.0a37	a9 00		lda #$00			lda  	#0
.0a39	69 30		adc #$30			adc 	#48
.0a3b	20 43 17	jsr $1743			jsr 	StringWriteChar
.0a3e	68		pla				pla
.0a3f	88		dey				dey
.0a40	d0 f3		bne $0a35			bne 	_UBWLoop
.0a42	7a		ply				ply
.0a43	60		rts				rts
.0a44					PrintCharacterX:
.0a44	fa		plx				plx
.0a45	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.0a47	ca		dex				dex
.0a48	20 61 13	jsr $1361			jsr 	VectorPrintCharacter
.0a4b	4c 38 08	jmp $0838			jmp 	NextCommand
.0a4e					UnaryChr:
.0a4e	fa		plx				plx
.0a4f	20 2a 10	jsr $102a			jsr 	GetInteger8Bit 				; get integer to convert.
.0a52	48		pha				pha 								; save it and allocate for it
.0a53	a9 01		lda #$01			lda 	#1 							; 1 character
.0a55	20 1a 17	jsr $171a			jsr 	StringAllocTemp
.0a58	a9 01		lda #$01			lda 	#1 							; length 1.
.0a5a	92 22		sta ($22)			sta 	(zsTemp)
.0a5c	68		pla				pla 								; character code makes string.
.0a5d	5a		phy				phy
.0a5e	a0 01		ldy #$01			ldy 	#1
.0a60	91 22		sta ($22),y			sta 	(zsTemp),y
.0a62	7a		ply				ply
.0a63	4c 38 08	jmp $0838			jmp 	NextCommand
.0a66					CommandClr:
.0a66	fa		plx				plx
.0a67	20 6d 0a	jsr $0a6d			jsr 	ClearMemory
.0a6a	4c 38 08	jmp $0838			jmp 	NextCommand
.0a6d					ClearMemory:
.0a6d	ad 05 04	lda $0405			lda 	storeStartHigh 							; erase the work area
.0a70	85 2d		sta $2d				sta 	zTemp0+1
.0a72	64 2c		stz $2c				stz 	zTemp0
.0a74	5a		phy				phy
.0a75	a0 00		ldy #$00			ldy 	#0
.0a77					_ClearLoop1:
.0a77	a9 00		lda #$00			lda 	#0
.0a79	91 2c		sta ($2c),y			sta 	(zTemp0),y
.0a7b	c8		iny				iny
.0a7c	d0 f9		bne $0a77			bne 	_ClearLoop1
.0a7e	e6 2d		inc $2d				inc 	zTemp0+1
.0a80	a5 2d		lda $2d				lda 	zTemp0+1
.0a82	cd 06 04	cmp $0406			cmp 	storeEndHigh
.0a85	d0 f0		bne $0a77			bne 	_ClearLoop1
.0a87	38		sec				sec 											; stack space = number of pages in total / 4
.0a88	ad 06 04	lda $0406			lda 	storeEndHigh
.0a8b	ed 05 04	sbc $0405			sbc		storeStartHigh
.0a8e	4a		lsr a				lsr 	a
.0a8f	4a		lsr a				lsr 	a
.0a90	d0 02		bne $0a94			bne 	_NotEmpty 								; at least 1 !
.0a92	a9 01		lda #$01			lda 	#1
.0a94					_NotEmpty:
.0a94	38		sec				sec 											; subtract from high to give string high memory
.0a95	49 ff		eor #$ff			eor 	#$FF
.0a97	6d 06 04	adc $0406			adc 	storeEndHigh
.0a9a	8d 03 04	sta $0403			sta 	stringHighMemory+1
.0a9d	9c 02 04	stz $0402			stz 	stringHighMemory
.0aa0	9c 6a 05	stz $056a			stz 	stringInitialised 						; string system not initialised
.0aa3	ad 05 04	lda $0405			lda 	storeStartHigh 							; stack at end of start memory.
.0aa6	3a		dec a				dec 	a
.0aa7	85 25		sta $25				sta 	runtimeStackPtr+1
.0aa9	a9 ff		lda #$ff			lda 	#$FF
.0aab	85 24		sta $24				sta 	runtimeStackPtr
.0aad	a9 ff		lda #$ff			lda 	#$FF 									; duff marker in case we try to remove it.
.0aaf	92 24		sta ($24)			sta 	(runtimeStackPtr)
.0ab1	7a		ply				ply
.0ab2	60		rts				rts
.0ab3					CompareStrings:
.0ab3	fa		plx				plx
.0ab4	ca		dex				dex
.0ab5	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; copy strings to zTemp0 and zTemp1
.0ab7	85 2c		sta $2c				sta 	zTemp0
.0ab9	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.0abb	85 2d		sta $2d				sta 	zTemp0+1
.0abd	b5 3f		lda $3f,x			lda 	NSMantissa0+1,x
.0abf	85 2e		sta $2e				sta 	zTemp1
.0ac1	b5 4b		lda $4b,x			lda 	NSMantissa1+1,x
.0ac3	85 2f		sta $2f				sta 	zTemp1+1
.0ac5	da		phx				phx
.0ac6	5a		phy				phy
.0ac7	b2 2c		lda ($2c)			lda 	(zTemp0)					; work out number to compare
.0ac9	d2 2e		cmp ($2e)			cmp 	(zTemp1)
.0acb	90 02		bcc $0acf			bcc 	_CSNIsSmallest 				; as min(len(s1),len(s2))
.0acd	b2 2e		lda ($2e)			lda 	(zTemp1)
.0acf					_CSNIsSmallest:
.0acf	aa		tax				tax 								; count in X
.0ad0	f0 0c		beq $0ade			beq 	_CSNMatches 				; if zero already matches as far as we can go.
.0ad2	a0 00		ldy #$00			ldy 	#0 							; start from offset 1
.0ad4					_CSNCompareString:
.0ad4	c8		iny				iny 								; pre increment
.0ad5	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.0ad7	d1 2e		cmp ($2e),y			cmp 	(zTemp1),y
.0ad9	d0 0a		bne $0ae5			bne 	_CSNDifferent 				; numbers are different.
.0adb	ca		dex				dex
.0adc	d0 f6		bne $0ad4			bne 	_CSNCompareString 			; compare common characters in two strings.
.0ade					_CSNMatches:
.0ade	38		sec				sec
.0adf	b2 2c		lda ($2c)			lda 	(zTemp0)					; compare lengths
.0ae1	f2 2e		sbc ($2e)			sbc 	(zTemp1)
.0ae3	f0 06		beq $0aeb			beq 	_CSNSExit 					; if zero, then strings match and exit.
.0ae5					_CSNDifferent:
.0ae5	a9 ff		lda #$ff			lda 	#$FF
.0ae7	90 02		bcc $0aeb			bcc 	_CSNSExit
.0ae9	a9 01		lda #$01			lda 	#$01
.0aeb					_CSNSExit:
.0aeb	7a		ply				ply
.0aec	fa		plx				plx
.0aed	c9 00		cmp #$00			cmp 	#0 							; set the flags.
.0aef	20 73 26	jsr $2673			jsr 	FloatSetByte 				; output the byte
.0af2	4c 38 08	jmp $0838			jmp 	NextCommand
.0af5					StringConcrete:
.0af5	9c 6a 05	stz $056a			stz 	stringInitialised	 		; initialise next usage
.0af8	84 31		sty $31				sty 	zTemp2+1 					; save pointer to new string
.0afa	85 30		sta $30				sta 	zTemp2
.0afc	b2 30		lda ($30)			lda 	(zTemp2) 					; length required
.0afe	4a		lsr a				lsr 	a 							; allow half as much for expansion.
.0aff	18		clc				clc
.0b00	72 30		adc ($30)			adc 	(zTemp2)
.0b02	90 02		bcc $0b06			bcc 	_SCNoOverflow
.0b04	a9 ff		lda #$ff			lda 	#255
.0b06					_SCNoOverflow:
.0b06	c9 0a		cmp #$0a			cmp 	#10 						; and a minimum of 10
.0b08	b0 02		bcs $0b0c			bcs 	_SCNoMinimum
.0b0a	a9 0a		lda #$0a			lda 	#10
.0b0c					_SCNoMinimum:
.0b0c	85 2e		sta $2e				sta 	zTemp1 						; save max length.
.0b0e	38		sec				sec
.0b0f	ad 02 04	lda $0402			lda		stringHighMemory 			; subtract max length from high memory.
.0b12	e5 2e		sbc $2e				sbc 	zTemp1
.0b14	a8		tay				tay
.0b15	ad 03 04	lda $0403			lda 	stringHighMemory+1
.0b18	e9 00		sbc #$00			sbc 	#0
.0b1a	48		pha				pha
.0b1b	38		sec				sec 								; subtract 3 more
.0b1c	98		tya				tya
.0b1d	e9 03		sbc #$03			sbc 	#3
.0b1f	8d 02 04	sta $0402			sta 	stringHighMemory 			; to string high memory/zsTemp
.0b22	85 22		sta $22				sta 	zsTemp
.0b24	68		pla				pla
.0b25	e9 00		sbc #$00			sbc 	#0
.0b27	8d 03 04	sta $0403			sta 	stringHighMemory+1
.0b2a	85 23		sta $23				sta 	zsTemp+1
.0b2c	a5 2e		lda $2e				lda 	zTemp1 						; set max length.
.0b2e	92 22		sta ($22)			sta 	(zsTemp)
.0b30	a0 01		ldy #$01			ldy 	#1 							; clear control byte.
.0b32	a9 00		lda #$00			lda 	#0
.0b34	91 22		sta ($22),y			sta 	(zsTemp),y
.0b36	a5 22		lda $22				lda 	zsTemp 						; new empty string in YA.
.0b38	a4 23		ldy $23				ldy 	zsTemp+1
.0b3a	60		rts				rts
.0b3b					CommandXData:
.0b3b	fa		plx				plx
.0b3c	98		tya				tya 								; data length +1 added to Y
.0b3d	38		sec				sec
.0b3e	71 28		adc ($28),y			adc 	(codePtr),y 				; next instruction
.0b40	a8		tay				tay
.0b41	4c 38 08	jmp $0838			jmp 	NextCommand
.0b44					CommandXDIM:
.0b44	fa		plx				plx
.0b45	5a		phy				phy
.0b46	20 2a 10	jsr $102a			jsr 	GetInteger8Bit 				; get the type we are building for (bits 6 & 5)
.0b49	8d 0a 04	sta $040a			sta 	dimType
.0b4c	ca		dex				dex 								; this is the number of indices
.0b4d	20 2a 10	jsr $102a			jsr 	GetInteger8Bit
.0b50	85 2e		sta $2e				sta 	zTemp1 						; subtract n from X so X points at the *first*
.0b52	8a		txa				txa 								; dimension.
.0b53	38		sec				sec
.0b54	e5 2e		sbc $2e				sbc 	zTemp1
.0b56	aa		tax				tax
.0b57	a5 2e		lda $2e				lda 	zTemp1 						; number of indices.
.0b59	20 6d 0b	jsr $0b6d			jsr 	DIMCreateOneLevel 			; create one at this level
.0b5c	95 3e		sta $3e,x			sta 	NSMantissa0,x 				; set it as a return address as an integer
.0b5e	98		tya				tya
.0b5f	95 4a		sta $4a,x			sta 	NSMantissa1,x
.0b61	74 56		stz $56,x			stz 	NSMantissa2,x
.0b63	74 62		stz $62,x			stz 	NSMantissa3,x
.0b65	74 32		stz $32,x			stz 	NSStatus,x
.0b67	74 6e		stz $6e,x			stz 	NSExponent,x
.0b69	7a		ply				ply
.0b6a	4c 38 08	jmp $0838			jmp 	NextCommand
.0b6d					DIMCreateOneLevel:
.0b6d	a4 26		ldy $26				ldy 	availableMemory 			; push the start of this block on the stack.
.0b6f	5a		phy				phy
.0b70	a4 27		ldy $27				ldy 	availableMemory+1
.0b72	5a		phy				phy
.0b73	a8		tay				tay 			 					; save current level into Y
.0b74	20 30 10	jsr $1030			jsr		GetInteger16Bit 			; size of dimension to zTemp0
.0b77	e6 2c		inc $2c				inc 	zTemp0 						; bump the size of the dimension as we need one more
.0b79	d0 02		bne $0b7d			bne 	_DCOLNoCarry
.0b7b	e6 2d		inc $2d				inc 	zTemp0+1
.0b7d					_DCOLNoCarry:
.0b7d	a5 2c		lda $2c				lda 	zTemp0 						; write out the +1 size of the dimension
.0b7f	20 20 0c	jsr $0c20			jsr 	DIMWriteByte
.0b82	a5 2d		lda $2d				lda 	zTemp0+1
.0b84	20 20 0c	jsr $0c20			jsr 	DIMWriteByte
.0b87	ad 0a 04	lda $040a			lda 	dimType 					; get type information
.0b8a	29 7f		and #$7f			and 	#$7F
.0b8c	c0 01		cpy #$01			cpy 	#1
.0b8e	f0 02		beq $0b92			beq 	_DCOLNoSubLevel
.0b90	09 80		ora #$80			ora 	#$80 						; set sublevel bit if there is one.
.0b92					_DCOLNoSubLevel:
.0b92	20 20 0c	jsr $0c20			jsr 	DIMWriteByte
.0b95	a5 26		lda $26				lda 	availableMemory
.0b97	85 2e		sta $2e				sta 	zTemp1
.0b99	a5 27		lda $27				lda 	availableMemory+1
.0b9b	85 2f		sta $2f				sta 	zTemp1+1
.0b9d	a5 2c		lda $2c				lda 	zTemp0
.0b9f	85 30		sta $30				sta 	zTemp2
.0ba1	a5 2d		lda $2d				lda 	zTemp0+1
.0ba3	85 31		sta $31				sta 	zTemp2+1
.0ba5					_DCOLFillArray:
.0ba5	20 04 0c	jsr $0c04			jsr 	DIMWriteElement 			; write out an element, could be a sub-level or individual data
.0ba8	a5 2c		lda $2c				lda 	zTemp0 						; decrement one from count.
.0baa	d0 02		bne $0bae			bne 	_DCOLNoBorrow
.0bac	c6 2d		dec $2d				dec 	zTemp0+1
.0bae					_DCOLNoBorrow:
.0bae	c6 2c		dec $2c				dec 	zTemp0
.0bb0	a5 2c		lda $2c				lda 	zTemp0 						; until completed.
.0bb2	05 2d		ora $2d				ora 	zTemp0+1
.0bb4	d0 ef		bne $0ba5			bne 	_DCOLFillArray
.0bb6	c0 01		cpy #$01			cpy 	#1
.0bb8	f0 42		beq $0bfc			beq 	_DCOLExit
.0bba					_DCOLRecursionLoop:
.0bba	da		phx				phx 								; save XY
.0bbb	5a		phy				phy
.0bbc	a5 2e		lda $2e				lda 	zTemp1 						; push zTemp1 (position) zTemp2 (count)
.0bbe	48		pha				pha
.0bbf	a5 2f		lda $2f				lda 	zTemp1+1
.0bc1	48		pha				pha
.0bc2	a5 30		lda $30				lda 	zTemp2
.0bc4	48		pha				pha
.0bc5	a5 31		lda $31				lda 	zTemp2+1
.0bc7	48		pha				pha
.0bc8	88		dey				dey  								; lower level -> A
.0bc9	98		tya				tya
.0bca	e8		inx				inx 								; next index size
.0bcb	20 6d 0b	jsr $0b6d			jsr 	DIMCreateOneLevel 			; create a level, return in YA
.0bce	fa		plx				plx 								; restore zTemp2 (count) and zTemp1 (position)
.0bcf	86 31		stx $31				stx 	zTemp2+1
.0bd1	fa		plx				plx
.0bd2	86 30		stx $30				stx 	zTemp2
.0bd4	fa		plx				plx
.0bd5	86 2f		stx $2f				stx 	zTemp1+1
.0bd7	fa		plx				plx
.0bd8	86 2e		stx $2e				stx 	zTemp1
.0bda	92 2e		sta ($2e)			sta 	(zTemp1) 					; write out position
.0bdc	98		tya				tya
.0bdd	a0 01		ldy #$01			ldy 	#1
.0bdf	91 2e		sta ($2e),y			sta 	(zTemp1),y
.0be1	7a		ply				ply 								; restore XY
.0be2	fa		plx				plx
.0be3	18		clc				clc
.0be4	a5 2e		lda $2e				lda 	zTemp1 						; add 2 to zTemp1
.0be6	69 02		adc #$02			adc 	#2
.0be8	85 2e		sta $2e				sta 	zTemp1
.0bea	90 02		bcc $0bee			bcc 	_DCOLRNoCarry
.0bec	e6 2f		inc $2f				inc 	zTemp1+1
.0bee					_DCOLRNoCarry:
.0bee	a5 30		lda $30				lda 	zTemp2 						; decrement one from count in zTemp2
.0bf0	d0 02		bne $0bf4			bne 	_DCOLRNoBorrow
.0bf2	c6 31		dec $31				dec 	zTemp2+1
.0bf4					_DCOLRNoBorrow:
.0bf4	c6 30		dec $30				dec 	zTemp2
.0bf6	a5 30		lda $30				lda 	zTemp2 						; until completed.
.0bf8	05 31		ora $31				ora 	zTemp2+1
.0bfa	d0 be		bne $0bba			bne 	_DCOLRecursionLoop
.0bfc					_DCOLExit:
.0bfc	68		pla				pla 								; get MSB, make offset again
.0bfd	38		sec				sec
.0bfe	ed 07 04	sbc $0407			sbc 	variableStartPage
.0c01	a8		tay				tay
.0c02	68		pla				pla 								; YA now contains offset address.
.0c03	60		rts				rts
.0c04					DIMWriteElement:
.0c04	da		phx				phx
.0c05	a2 02		ldx #$02			ldx	 	#2 							; work out size is 2 or 6
.0c07	c0 01		cpy #$01			cpy 	#1 							; do we have a sub level, if so 2.
.0c09	d0 0b		bne $0c16			bne 	_DIMWENotFloat
.0c0b	ad 0a 04	lda $040a			lda 	dimType
.0c0e	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16
.0c10	c9 00		cmp #$00			cmp 	#NSSIFloat
.0c12	d0 02		bne $0c16			bne 	_DIMWENotFloat
.0c14	a2 06		ldx #$06			ldx 	#6
.0c16					_DIMWENotFloat:
.0c16	a9 00		lda #$00			lda 	#0
.0c18	20 20 0c	jsr $0c20			jsr 	DIMWriteByte
.0c1b	ca		dex				dex
.0c1c	d0 f8		bne $0c16			bne 	_DIMWENotFloat
.0c1e	fa		plx				plx
.0c1f	60		rts				rts
.0c20					DIMWriteByte:
.0c20	92 26		sta ($26)			sta 	(availableMemory)
.0c22	e6 26		inc $26				inc 	availableMemory
.0c24	d0 0b		bne $0c31			bne 	_DIMWBSkip
.0c26	e6 27		inc $27				inc 	availableMemory+1
.0c28	48		pha				pha
.0c29	a5 27		lda $27				lda 	availableMemory+1 			; check out of memory
.0c2b	cd 03 04	cmp $0403			cmp 	stringHighMemory+1
.0c2e	b0 02		bcs $0c32			bcs 	_DIMWBMemory
.0c30	68		pla				pla
.0c31					_DIMWBSkip:
.0c31	60		rts				rts
.0c32					_DIMWBMemory:
.0c32	4c 07 20	jmp $2007		jmp	ErrorV_memory
.040a					dimType:
>040a							.fill 	1
.0c35					CommandEnd:
.0c35	fa		plx				plx
.0c36	86 2c		stx $2c				stx 	zTemp0
.0c38	18		clc				clc 								; exited okay.
.0c39					EndRuntime:
.0c39	ae 08 04	ldx $0408			ldx 	Runtime6502SP 				; set up the stack pointer
.0c3c	9a		txs				txs
.0c3d	60		rts				rts
.0c3e					Unimplemented:
.0c3e	4c 3a 1f	jmp $1f3a			jmp 	ErrorV_unimplemented
.0c41					RuntimeErrorHandler:
.0c41	98		tya				tya
.0c42	18		clc				clc
.0c43	65 28		adc $28				adc 	codePtr
.0c45	85 28		sta $28				sta 	codePtr
.0c47	90 02		bcc $0c4b			bcc 	_EHNoCarry
.0c49	e6 29		inc $29				inc 	codePtr+1
.0c4b					_EHNoCarry:
.0c4b	68		pla				pla
.0c4c	7a		ply				ply
.0c4d	85 2c		sta $2c				sta 	zTemp0
.0c4f	84 2d		sty $2d				sty 	zTemp0+1
.0c51	a2 00		ldx #$00			ldx 	#0 							; output to channel #0
.0c53	a0 01		ldy #$01			ldy 	#1
.0c55					_EHDisplayMsg:
.0c55	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.0c57	20 9a 1c	jsr $1c9a			jsr 	XPrintCharacterToChannel
.0c5a	c8		iny				iny
.0c5b	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.0c5d	d0 f6		bne $0c55			bne 	_EHDisplayMsg
.0c5f	a9 20		lda #$20			lda 	#32
.0c61	20 9a 1c	jsr $1c9a			jsr 	XPrintCharacterToChannel
.0c64	a9 40		lda #$40			lda 	#64
.0c66	20 9a 1c	jsr $1c9a			jsr 	XPrintCharacterToChannel
.0c69	a9 20		lda #$20			lda 	#32
.0c6b	20 9a 1c	jsr $1c9a			jsr 	XPrintCharacterToChannel
.0c6e	20 75 0c	jsr $0c75			jsr 	EHDisplayCodePtr
.0c71	38		sec				sec 								; report error.
.0c72	4c 39 0c	jmp $0c39			jmp 	EndRuntime
.0c75					EHDisplayCodePtr:
.0c75	a9 24		lda #$24			lda 	#'$'
.0c77	20 9a 1c	jsr $1c9a			jsr 	XPrintCharacterToChannel
.0c7a	38		sec				sec
.0c7b	a5 29		lda $29				lda 	codePtr+1 					; display the p-code address of the error.
.0c7d	ed 04 04	sbc $0404			sbc 	runtimeHigh
.0c80	20 89 0c	jsr $0c89			jsr 	_EHDisplayHex
.0c83	a5 28		lda $28				lda 	codePtr
.0c85	20 89 0c	jsr $0c89			jsr 	_EHDisplayHex
.0c88	60		rts				rts
.0c89					_EHDisplayHex:
.0c89	48		pha				pha
.0c8a	4a		lsr a				lsr 	a
.0c8b	4a		lsr a				lsr 	a
.0c8c	4a		lsr a				lsr 	a
.0c8d	4a		lsr a				lsr 	a
.0c8e	20 92 0c	jsr $0c92			jsr 	_EHDisplayNibble
.0c91	68		pla				pla
.0c92					_EHDisplayNibble:
.0c92	29 0f		and #$0f			and 	#15
.0c94	c9 0a		cmp #$0a			cmp 	#10
.0c96	90 02		bcc $0c9a			bcc 	_EHNotHex
.0c98	69 06		adc #$06			adc 	#6
.0c9a					_EHNotHex:
.0c9a	69 30		adc #$30			adc 	#48
.0c9c	4c 9a 1c	jmp $1c9a			jmp 	XPrintCharacterToChannel
.0c9f					CommandXFor:
.0c9f	fa		plx				plx
.0ca0	a9 d3		lda #$d3			lda 	#FRAME_FOR 					; open frame
.0ca2	20 22 0d	jsr $0d22			jsr 	StackOpenFrame
.0ca5	20 61 11	jsr $1161			jsr 	StackSaveCurrentPosition 	; normalise to Y=0 and save position.
.0ca8	a0 07		ldy #$07			ldy 	#7 							; copy step out
.0caa	20 04 0d	jsr $0d04			jsr 	CopyTOSToOffsetY
.0cad	ca		dex				dex
.0cae	a0 0d		ldy #$0d			ldy 	#13 						; copy terminal value.
.0cb0	20 04 0d	jsr $0d04			jsr 	CopyTOSToOffsetY
.0cb3	ca		dex				dex
.0cb4	b5 4a		lda $4a,x			lda 	NSMantissa1,x 				; bit 15 of reference indicates type int16
.0cb6	29 80		and #$80			and 	#$80
.0cb8	a0 04		ldy #$04			ldy 	#4
.0cba	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.0cbc	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; copy the reference address
.0cbe	a0 05		ldy #$05			ldy 	#5 							; adjusted to be a real address
.0cc0	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.0cc2	85 2c		sta $2c				sta 	zTemp0 						; also to zTemp0
.0cc4	c8		iny				iny
.0cc5	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.0cc7	18		clc				clc
.0cc8	29 7f		and #$7f			and 	#$7F 						; throw the type bit.
.0cca	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.0ccc	6d 07 04	adc $0407			adc 	variableStartPage 			; point to variable page.
.0ccf	85 2d		sta $2d				sta 	zTemp0+1
.0cd1	ca		dex				dex 								; throw reference.
.0cd2	a0 05		ldy #$05			ldy 	#5 							; check the index, step and terminal values
.0cd4	b1 2c		lda ($2c),y			lda 	(zTemp0),y 					; are all +ve integers, sign bits first.
.0cd6	a0 0c		ldy #$0c			ldy 	#12
.0cd8	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.0cda	a0 12		ldy #$12			ldy 	#18
.0cdc	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.0cde	29 80		and #$80			and 	#$80 						; only interested in sign bit.
.0ce0	88		dey				dey 								; now the exponents.
.0ce1	11 2c		ora ($2c),y			ora 	(zTemp0),y
.0ce3	a0 0b		ldy #$0b			ldy 	#11
.0ce5	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.0ce7	a0 11		ldy #$11			ldy 	#17
.0ce9	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.0ceb	a0 08		ldy #$08			ldy 	#8 							; step must be 1 byte.
.0ced	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.0cef	c8		iny				iny
.0cf0	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.0cf2	c8		iny				iny
.0cf3	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.0cf5	d0 08		bne $0cff			bne 	_CFNoOptimise
.0cf7	a0 04		ldy #$04			ldy 	#4 							; set the runtime stack pointer optimisation flag.
.0cf9	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.0cfb	09 40		ora #$40			ora 	#$40
.0cfd	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.0cff					_CFNoOptimise:
.0cff	a0 00		ldy #$00			ldy 	#0
.0d01	4c 38 08	jmp $0838			jmp 	NextCommand
.0d04					CopyTOSToOffsetY:
.0d04	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.0d06	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.0d08	c8		iny				iny
.0d09	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.0d0b	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.0d0d	c8		iny				iny
.0d0e	b5 56		lda $56,x			lda 	NSMantissa2,x
.0d10	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.0d12	c8		iny				iny
.0d13	b5 62		lda $62,x			lda 	NSMantissa3,x
.0d15	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.0d17	c8		iny				iny
.0d18	b5 6e		lda $6e,x			lda 	NSExponent,x
.0d1a	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.0d1c	c8		iny				iny
.0d1d	b5 32		lda $32,x			lda 	NSStatus,x
.0d1f	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.0d21	60		rts				rts
.0d22					StackOpenFrame:
.0d22	48		pha				pha 								; save frame marker
.0d23	29 1f		and #$1f			and 	#$1F 						; bytes required.
.0d25	85 2c		sta $2c				sta 	zTemp0
.0d27	38		sec				sec 								; subtract from runtime stack pointer.
.0d28	a5 24		lda $24				lda		runtimeStackPtr
.0d2a	e5 2c		sbc $2c				sbc 	zTemp0
.0d2c	85 24		sta $24				sta 	runtimeStackPtr
.0d2e	a5 25		lda $25				lda		runtimeStackPtr+1
.0d30	e9 00		sbc #$00			sbc 	#0
.0d32	85 25		sta $25				sta 	runtimeStackPtr+1
.0d34	68		pla				pla 								; put frame marker at +0
.0d35	92 24		sta ($24)			sta 	(runtimeStackPtr)
.0d37	60		rts				rts
.0d38					StackCloseFrame:
.0d38	b2 24		lda ($24)			lda 	(runtimeStackPtr)			; get frame marker
.0d3a	29 1f		and #$1f			and 	#$1F 						; size
.0d3c	18		clc				clc
.0d3d	65 24		adc $24				adc 	runtimeStackPtr
.0d3f	85 24		sta $24				sta 	runtimeStackPtr
.0d41	90 02		bcc $0d45			bcc 	_SCFNoCarry
.0d43	e6 25		inc $25				inc 	runtimeStackPtr+1
.0d45					_SCFNoCarry:
.0d45	60		rts				rts
.0d46					StackFindFrame:
.0d46	8d 0b 04	sta $040b			sta 	requiredFrame
.0d49					_SFFLoop:
.0d49	b2 24		lda ($24)			lda 	(runtimeStackPtr) 			; get TOS
.0d4b	c9 ff		cmp #$ff			cmp 	#$FF 						; if found $FF then this is a fail.
.0d4d	f0 10		beq $0d5f			beq 	SCFFail
.0d4f	cd 0b 04	cmp $040b			cmp 	requiredFrame 				; found this type ?
.0d52	f0 05		beq $0d59			beq 	_SFFFound
.0d54	20 38 0d	jsr $0d38			jsr 	StackCloseFrame 			; close the top frame
.0d57	80 f0		bra $0d49			bra 	_SFFLoop 					; and try te next.
.0d59					_SFFFound:
.0d59	60		rts				rts
.0d5a					StackCheckFrame:
.0d5a	d2 24		cmp ($24)			cmp 	(runtimeStackPtr) 			; matches current frame
.0d5c	d0 01		bne $0d5f			bne 	SCFFail
.0d5e	60		rts				rts
.0d5f					SCFFail:
.0d5f	4c 97 1f	jmp $1f97		jmp	ErrorV_structure
.040b					requiredFrame:
>040b							.fill 	1
.0d62					UnaryFre:
.0d62	fa		plx				plx
.0d63	20 71 26	jsr $2671			jsr 	FloatSetZero 				; zero the result (32 bit integer)
.0d66	38		sec				sec
.0d67	ad 02 04	lda $0402			lda 	stringHighMemory 			; calculate the free memory.
.0d6a	ed 00 04	sbc $0400			sbc 	stringLowMemory
.0d6d	95 3e		sta $3e,x			sta		NSMantissa0,x
.0d6f	ad 03 04	lda $0403			lda 	stringHighMemory+1
.0d72	ed 01 04	sbc $0401			sbc 	stringLowMemory+1
.0d75	95 4a		sta $4a,x			sta		NSMantissa1,x
.0d77	4c 38 08	jmp $0838			jmp 	NextCommand
.0d7a					CommandXGet:
.0d7a	fa		plx				plx
.0d7b	e8		inx				inx
.0d7c	a9 01		lda #$01			lda 	#1 							; 1 character space
.0d7e	20 1a 17	jsr $171a			jsr 	StringAllocTemp
.0d81	20 6a 13	jsr $136a			jsr 	VectorGetCharacter 			; get a character
.0d84	c9 00		cmp #$00			cmp 	#0
.0d86	f0 09		beq $0d91			beq 	_CGNone
.0d88	5a		phy				phy
.0d89	a0 01		ldy #$01			ldy 	#1 							; store char
.0d8b	91 22		sta ($22),y			sta 	(zsTemp),y
.0d8d	98		tya				tya 								; store length.
.0d8e	92 22		sta ($22)			sta 	(zsTemp)
.0d90	7a		ply				ply
.0d91					_CGNone:
.0d91	4c 38 08	jmp $0838			jmp 	NextCommand
.0d94					CommandXGosub:
.0d94	fa		plx				plx
.0d95	a9 e4		lda #$e4			lda 	#FRAME_GOSUB
.0d97	20 22 0d	jsr $0d22			jsr 	StackOpenFrame
.0d9a	20 61 11	jsr $1161			jsr 	StackSaveCurrentPosition
.0d9d	4c b2 0d	jmp $0db2			jmp 	PerformGOTO
.0da0					CommandReturn:
.0da0	fa		plx				plx
.0da1	a9 e4		lda #$e4			lda 	#FRAME_GOSUB
.0da3	20 46 0d	jsr $0d46			jsr 	StackFindFrame
.0da6	20 72 11	jsr $1172			jsr 	StackLoadCurrentPosition
.0da9	c8		iny				iny
.0daa	c8		iny				iny
.0dab	20 38 0d	jsr $0d38			jsr 	StackCloseFrame
.0dae	4c 38 08	jmp $0838			jmp 	NextCommand
.0db1					CommandXGoto:
.0db1	fa		plx				plx
.0db2					PerformGOTO:
.0db2	c8		iny				iny 								; push MSB of offset on stack
.0db3	b1 28		lda ($28),y			lda 	(codePtr),y
.0db5	48		pha				pha
.0db6	88		dey				dey 								; point LSB of offset
.0db7	18		clc				clc 								; add LSB
.0db8	b1 28		lda ($28),y			lda 	(codePtr),y
.0dba	65 28		adc $28				adc 	codePtr
.0dbc	85 28		sta $28				sta 	codePtr
.0dbe	68		pla				pla 								; restore offset MSB and add
.0dbf	65 29		adc $29				adc 	codePtr+1
.0dc1	85 29		sta $29				sta 	codePtr+1
.0dc3	4c 38 08	jmp $0838			jmp 	NextCommand
.0dc6					CommandGotoZ:
.0dc6	fa		plx				plx
.0dc7	20 93 26	jsr $2693			jsr 	FloatIsZero
.0dca	ca		dex				dex
.0dcb	c9 00		cmp #$00			cmp 	#0
.0dcd	f0 e3		beq $0db2			beq 	PerformGOTO
.0dcf	c8		iny				iny
.0dd0	c8		iny				iny
.0dd1	4c 38 08	jmp $0838			jmp 	NextCommand
.0dd4					CommandGotoNZ:
.0dd4	fa		plx				plx
.0dd5	20 93 26	jsr $2693			jsr 	FloatIsZero
.0dd8	ca		dex				dex
.0dd9	c9 00		cmp #$00			cmp 	#0
.0ddb	d0 d5		bne $0db2			bne 	PerformGOTO
.0ddd	c8		iny				iny
.0dde	c8		iny				iny
.0ddf	4c 38 08	jmp $0838			jmp 	NextCommand
.0de2					Command_PSET:
.0de2	fa		plx				plx
.0de3	5a		phy				phy
.0de4	20 2a 10	jsr $102a			jsr 	GetInteger8Bit 				; get the colour
.0de7	48		pha				pha
.0de8	a2 00		ldx #$00			ldx 	#0 							; copy 0/1 to r0,r1
.0dea	a0 02		ldy #$02			ldy 	#X16_r0
.0dec	20 6e 0e	jsr $0e6e			jsr 	GraphicsCopy2
.0def	20 ff fe	jsr $feff			jsr 	X16_FB_cursor_position 		; set position.
.0df2	68		pla				pla 								; set pixel.
.0df3	20 0b ff	jsr $ff0b			jsr 	X16_FB_set_pixel
.0df6	7a		ply				ply
.0df7	a2 ff		ldx #$ff			ldx 	#$FF
.0df9	4c 38 08	jmp $0838			jmp 	NextCommand
.0dfc					Command_LINE:
.0dfc	fa		plx				plx
.0dfd	5a		phy				phy
.0dfe	20 61 0e	jsr $0e61			jsr 	GraphicsColour
.0e01	a2 00		ldx #$00			ldx 	#0 							; copy 0/1/2/3 to r0,1,2,3
.0e03	a0 02		ldy #$02			ldy 	#X16_r0
.0e05	20 6b 0e	jsr $0e6b			jsr 	GraphicsCopy4
.0e08	20 2c ff	jsr $ff2c			jsr 	X16_GRAPH_draw_line
.0e0b	7a		ply				ply
.0e0c	a2 ff		ldx #$ff			ldx 	#$FF
.0e0e	4c 38 08	jmp $0838			jmp 	NextCommand
.0e11					Command_RECT:
.0e11	fa		plx				plx
.0e12	5a		phy				phy
.0e13	20 82 0e	jsr $0e82			jsr 	GraphicsRectCoords
.0e16	38		sec				sec
.0e17	20 2f ff	jsr $ff2f			jsr 	X16_GRAPH_draw_rect
.0e1a	7a		ply				ply
.0e1b	a2 ff		ldx #$ff			ldx 	#$FF
.0e1d	4c 38 08	jmp $0838			jmp 	NextCommand
.0e20					Command_FRAME:
.0e20	fa		plx				plx
.0e21	5a		phy				phy
.0e22	20 82 0e	jsr $0e82			jsr 	GraphicsRectCoords
.0e25	18		clc				clc
.0e26	20 2f ff	jsr $ff2f			jsr 	X16_GRAPH_draw_rect
.0e29	7a		ply				ply
.0e2a	a2 ff		ldx #$ff			ldx 	#$FF
.0e2c	4c 38 08	jmp $0838			jmp 	NextCommand
.0e2f					Command_CHAR:
.0e2f	fa		plx				plx
.0e30	5a		phy				phy
.0e31	ca		dex				dex  								; set the draw colour
.0e32	20 61 0e	jsr $0e61			jsr 	GraphicsColour
.0e35	a2 00		ldx #$00			ldx 	#0 							; copy 0/1 to r0,r1
.0e37	a0 02		ldy #$02			ldy 	#X16_r0
.0e39	20 6e 0e	jsr $0e6e			jsr 	GraphicsCopy2
.0e3c	a5 41		lda $41				lda 	NSMantissa0+3 				; copy string address to zTemp0
.0e3e	85 2c		sta $2c				sta 	zTemp0
.0e40	a5 4d		lda $4d				lda 	NSMantissa1+3
.0e42	85 2d		sta $2d				sta 	zTemp0+1
.0e44	b2 2c		lda ($2c)			lda 	(zTemp0) 					; count of chars to zTemp1
.0e46	85 2e		sta $2e				sta 	zTemp1
.0e48					_CCLoop:
.0e48	a5 2e		lda $2e				lda 	zTemp1 						; done all chars ?
.0e4a	f0 0f		beq $0e5b			beq 	_CCExit
.0e4c	c6 2e		dec $2e				dec 	zTemp1 						; dec counter
.0e4e	e6 2c		inc $2c				inc 	zTemp0 						; pre-bump pointer
.0e50	d0 02		bne $0e54			bne 	_CCNoCarry
.0e52	e6 2d		inc $2d				inc 	zTemp0+1
.0e54					_CCNoCarry:
.0e54	b2 2c		lda ($2c)			lda 	(zTemp0) 					; get character
.0e56	20 41 ff	jsr $ff41			jsr 	X16_GRAPH_put_char 			; write it
.0e59	80 ed		bra $0e48			bra 	_CCLoop						; go round.
.0e5b					_CCExit:
.0e5b	7a		ply				ply
.0e5c	a2 ff		ldx #$ff			ldx 	#$FF
.0e5e	4c 38 08	jmp $0838			jmp 	NextCommand
.0e61					GraphicsColour:
.0e61	20 2a 10	jsr $102a			jsr 	GetInteger8Bit
.0e64	aa		tax				tax
.0e65	a0 00		ldy #$00			ldy 	#0
.0e67	20 29 ff	jsr $ff29			jsr 	X16_GRAPH_set_colors
.0e6a	60		rts				rts
.0e6b					GraphicsCopy4:
.0e6b	20 6e 0e	jsr $0e6e			jsr 	GraphicsCopy2
.0e6e					GraphicsCopy2:
.0e6e	20 71 0e	jsr $0e71			jsr 	GraphicsCopy1
.0e71					GraphicsCopy1:
.0e71	20 ac 22	jsr $22ac			jsr 	FloatIntegerPart
.0e74	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.0e76	99 00 00	sta $0000,y			sta 	0,y
.0e79	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.0e7b	99 01 00	sta $0001,y			sta 	1,y
.0e7e	e8		inx				inx
.0e7f	c8		iny				iny
.0e80	c8		iny				iny
.0e81	60		rts				rts
.0e82					GraphicsRectCoords:
.0e82	20 61 0e	jsr $0e61			jsr 	GraphicsColour 				; set colour
.0e85	a2 00		ldx #$00			ldx 	#0 							; copy in order.
.0e87	a0 02		ldy #$02			ldy 	#X16_r0
.0e89	20 6b 0e	jsr $0e6b			jsr 	GraphicsCopy4
.0e8c	a2 02		ldx #$02			ldx 	#X16_r0 					; sort r0/r2
.0e8e	20 9b 0e	jsr $0e9b			jsr 	_GRCSortSubtract
.0e91	a2 04		ldx #$04			ldx 	#X16_r1 					; sort r1/r3
.0e93	20 9b 0e	jsr $0e9b			jsr 	_GRCSortSubtract
.0e96	74 08		stz $08,x			stz 	8,x 						; zero rounding
.0e98	74 09		stz $09,x			stz 	9,x
.0e9a	60		rts				rts
.0e9b					_GRCSortSubtract:
.0e9b	b5 04		lda $04,x			lda 	4,x 						; calculate r2-r0
.0e9d	d5 00		cmp $00,x			cmp 	0,x
.0e9f	b5 05		lda $05,x			lda 	5,x
.0ea1	f5 01		sbc $01,x			sbc 	1,x
.0ea3	b0 08		bcs $0ead			bcs 	_GRCNoSwap 					; >= swap.
.0ea5	20 bb 0e	jsr $0ebb			jsr 	_GRCSwapByte 				; swap 0/2
.0ea8	e8		inx				inx
.0ea9	20 bb 0e	jsr $0ebb			jsr 	_GRCSwapByte 				; swap 1/3
.0eac	ca		dex				dex
.0ead					_GRCNoSwap:
.0ead	38		sec				sec 								; calculate width/height into 4,5
.0eae	b5 04		lda $04,x			lda 	4,x
.0eb0	f5 00		sbc $00,x			sbc 	0,x
.0eb2	95 04		sta $04,x			sta 	4,x
.0eb4	b5 05		lda $05,x			lda 	5,x
.0eb6	f5 01		sbc $01,x			sbc 	1,x
.0eb8	95 05		sta $05,x			sta 	5,x
.0eba	60		rts				rts
.0ebb					_GRCSwapByte:
.0ebb	b5 04		lda $04,x			lda 	4,x
.0ebd	48		pha				pha
.0ebe	b5 00		lda $00,x			lda 	0,x
.0ec0	95 04		sta $04,x			sta 	4,x
.0ec2	68		pla				pla
.0ec3	95 00		sta $00,x			sta 	0,x
.0ec5	60		rts				rts
.0ec6					Unary16Hex:
.0ec6	fa		plx				plx
.0ec7	20 30 10	jsr $1030			jsr 	GetInteger16Bit
.0eca	a9 04		lda #$04			lda 	#4 							; allocate / set 4 bytes.
.0ecc	20 1a 17	jsr $171a			jsr 	StringAllocTemp
.0ecf	a5 2d		lda $2d				lda 	zTemp0+1
.0ed1	f0 03		beq $0ed6			beq 	_UHNoHigh
.0ed3	20 de 0e	jsr $0ede			jsr 	_UHWriteHex
.0ed6					_UHNoHigh:
.0ed6	a5 2c		lda $2c				lda 	zTemp0
.0ed8	20 de 0e	jsr $0ede			jsr 	_UHWriteHex
.0edb	4c 38 08	jmp $0838			jmp 	NextCommand
.0ede					_UHWriteHex:
.0ede	48		pha				pha
.0edf	4a		lsr a				lsr 	a
.0ee0	4a		lsr a				lsr 	a
.0ee1	4a		lsr a				lsr 	a
.0ee2	4a		lsr a				lsr 	a
.0ee3	20 e7 0e	jsr $0ee7			jsr 	_UHWriteNibl
.0ee6	68		pla				pla
.0ee7					_UHWriteNibl:
.0ee7	29 0f		and #$0f			and 	#15
.0ee9	c9 0a		cmp #$0a			cmp 	#10
.0eeb	90 02		bcc $0eef			bcc 	_UHDigit
.0eed	69 06		adc #$06			adc 	#6
.0eef					_UHDigit:
.0eef	69 30		adc #$30			adc 	#48
.0ef1	20 43 17	jsr $1743			jsr 	StringWriteChar
.0ef4	60		rts				rts
.0ef5					IndFloatRead:
.0ef5	fa		plx				plx
.0ef6	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; copy address
.0ef8	85 2c		sta $2c				sta 	zTemp0
.0efa	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.0efc	18		clc				clc
.0efd	6d 07 04	adc $0407			adc 	variableStartPage
.0f00	85 2d		sta $2d				sta 	zTemp0+1
.0f02	ca		dex				dex 								; throw the address
.0f03	20 e3 14	jsr $14e3			jsr 	ReadFloatZTemp0Sub 							; call read routine
.0f06	4c 38 08	jmp $0838			jmp 	NextCommand
.0f09					IndInt16Read:
.0f09	fa		plx				plx
.0f0a	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; copy address
.0f0c	85 2c		sta $2c				sta 	zTemp0
.0f0e	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.0f10	18		clc				clc
.0f11	6d 07 04	adc $0407			adc 	variableStartPage
.0f14	85 2d		sta $2d				sta 	zTemp0+1
.0f16	ca		dex				dex 								; throw the address
.0f17	20 1f 15	jsr $151f			jsr 	ReadIntegerZTemp0Sub 							; call read routine
.0f1a	4c 38 08	jmp $0838			jmp 	NextCommand
.0f1d					IndStringRead:
.0f1d	fa		plx				plx
.0f1e	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; copy address
.0f20	85 2c		sta $2c				sta 	zTemp0
.0f22	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.0f24	18		clc				clc
.0f25	6d 07 04	adc $0407			adc 	variableStartPage
.0f28	85 2d		sta $2d				sta 	zTemp0+1
.0f2a	ca		dex				dex 								; throw the address
.0f2b	20 64 15	jsr $1564			jsr 	ReadStringZTemp0Sub 							; call read routine
.0f2e	4c 38 08	jmp $0838			jmp 	NextCommand
.0f31					IndFloatWrite:
.0f31	fa		plx				plx
.0f32	b5 3d		lda $3d,x			lda 	NSMantissa0-1,x 			; copy address
.0f34	85 2c		sta $2c				sta 	zTemp0
.0f36	b5 49		lda $49,x			lda 	NSMantissa1-1,x
.0f38	18		clc				clc
.0f39	6d 07 04	adc $0407			adc 	variableStartPage
.0f3c	85 2d		sta $2d				sta 	zTemp0+1
.0f3e	20 d6 1a	jsr $1ad6			jsr 	WriteFloatZTemp0Sub 							; call write routine
.0f41	ca		dex				dex 								; throw the address as well.
.0f42	4c 38 08	jmp $0838			jmp 	NextCommand
.0f45					IndInt16Write:
.0f45	fa		plx				plx
.0f46	b5 3d		lda $3d,x			lda 	NSMantissa0-1,x 			; copy address
.0f48	85 2c		sta $2c				sta 	zTemp0
.0f4a	b5 49		lda $49,x			lda 	NSMantissa1-1,x
.0f4c	18		clc				clc
.0f4d	6d 07 04	adc $0407			adc 	variableStartPage
.0f50	85 2d		sta $2d				sta 	zTemp0+1
.0f52	20 12 1b	jsr $1b12			jsr 	WriteIntegerZTemp0Sub 							; call write routine
.0f55	ca		dex				dex 								; throw the address as well.
.0f56	4c 38 08	jmp $0838			jmp 	NextCommand
.0f59					IndStringWrite:
.0f59	fa		plx				plx
.0f5a	b5 3d		lda $3d,x			lda 	NSMantissa0-1,x 			; copy address
.0f5c	85 2c		sta $2c				sta 	zTemp0
.0f5e	b5 49		lda $49,x			lda 	NSMantissa1-1,x
.0f60	18		clc				clc
.0f61	6d 07 04	adc $0407			adc 	variableStartPage
.0f64	85 2d		sta $2d				sta 	zTemp0+1
.0f66	20 51 1b	jsr $1b51			jsr 	WriteStringZTemp0Sub 							; call write routine
.0f69	ca		dex				dex 								; throw the address as well.
.0f6a	4c 38 08	jmp $0838			jmp 	NextCommand
.0f6d					CommandXInput:
.0f6d	fa		plx				plx
.0f6e	5a		phy				phy 								; save Y
.0f6f	e8		inx				inx									; space on stack
.0f70					_INError:
.0f70	20 a4 0f	jsr $0fa4			jsr 	InputStringToBuffer 		; input from keyboard
.0f73	a9 61		lda #$61			lda 	#((ReadBufferSize) & $FF)
.0f75	85 2c		sta $2c				sta 	0+zTemp0
.0f77	a9 04		lda #$04			lda 	#((ReadBufferSize) >> 8) & $FF
.0f79	85 2d		sta $2d				sta 	1+zTemp0
.0f7b	20 61 19	jsr $1961			jsr 	ValEvaluateZTemp0
.0f7e	b0 f0		bcs $0f70			bcs 	_INError 					; failed, try again.
.0f80	7a		ply				ply 								; restore Y
.0f81	4c 38 08	jmp $0838			jmp 	NextCommand
.0f84					CommandInputString:
.0f84	fa		plx				plx
.0f85	5a		phy				phy 								; save Y
.0f86	20 a4 0f	jsr $0fa4			jsr 	InputStringToBuffer 		; input from keyboard
.0f89	e8		inx				inx 								; make space on stack
.0f8a	20 71 26	jsr $2671			jsr 	FloatSetZero 				; store as string on stack
.0f8d	a9 61		lda #$61			lda 	#ReadBufferSize & $FF
.0f8f	95 3e		sta $3e,x			sta 	NSMantissa0,x
.0f91	a9 04		lda #$04			lda 	#ReadBufferSize >> 8
.0f93	95 4a		sta $4a,x			sta 	NSMantissa1,x
.0f95	a9 40		lda #$40			lda 	#NSSString
.0f97	95 32		sta $32,x			sta 	NSStatus,x
.0f99	7a		ply				ply 								; restore Y
.0f9a	4c 38 08	jmp $0838			jmp 	NextCommand
.0f9d					CommandInputReset:
.0f9d	fa		plx				plx
.0f9e	9c 0c 04	stz $040c			stz 	InputBuffer
.0fa1	4c 38 08	jmp $0838			jmp 	NextCommand
.0fa4					InputStringToBuffer:
.0fa4	a9 de		lda #$de			lda 	#((InputBumpNext) & $FF)
.0fa6	8d 61 05	sta $0561			sta 	0+ReadBumpNextVec
.0fa9	a9 0f		lda #$0f			lda 	#((InputBumpNext) >> 8) & $FF
.0fab	8d 62 05	sta $0562			sta 	1+ReadBumpNextVec
.0fae	a9 bb		lda #$bb			lda 	#((InputLookNext) & $FF)
.0fb0	8d 63 05	sta $0563			sta 	0+ReadLookNextVec
.0fb3	a9 0f		lda #$0f			lda 	#((InputLookNext) >> 8) & $FF
.0fb5	8d 64 05	sta $0564			sta 	1+ReadLookNextVec
.0fb8	4c 40 14	jmp $1440			jmp 	GetStringToBuffer
.0fbb					InputLookNext:
.0fbb	da		phx				phx
.0fbc					_ILNRetry:
.0fbc	ad 0c 04	lda $040c			lda 	InputBuffer 				; do we need to read more (e.g. the buffer is empty)
.0fbf	d0 08		bne $0fc9			bne 	_ILNNotEmpty
.0fc1	20 e2 0f	jsr $0fe2			jsr 	InputGetNewLine 			; get a new line
.0fc4	9c 5d 04	stz $045d			stz 	InputBufferPos 				; reset read position.
.0fc7	80 f3		bra $0fbc			bra 	_ILNRetry
.0fc9					_ILNNotEmpty:
.0fc9	ae 5d 04	ldx $045d			ldx 	InputBufferPos 				; get head available character
.0fcc	bd 0c 04	lda $040c,x			lda 	InputBuffer,x
.0fcf	d0 08		bne $0fd9			bne 	_ILNExit 					; if not EOS return it with CC.
.0fd1					_ILNNextLine:
.0fd1	9c 0c 04	stz $040c			stz 	InputBuffer 				; clear the buffer, indicating new line next time.
.0fd4	38		sec				sec 								; return CS,Zero
.0fd5	fa		plx				plx
.0fd6	a9 0d		lda #$0d			lda 	#13
.0fd8	60		rts				rts
.0fd9					_ILNExit:
.0fd9	fa		plx				plx
.0fda	c9 00		cmp #$00			cmp 	#0 							; return CC, Z Flag set.
.0fdc	18		clc				clc
.0fdd	60		rts				rts
.0fde					InputBumpNext:
.0fde	ee 5d 04	inc $045d			inc 	InputBufferPos
.0fe1	60		rts				rts
.0fe2					InputGetNewLine:
.0fe2	48		pha				pha
.0fe3	da		phx				phx
.0fe4	5a		phy				phy
.0fe5	a9 3f		lda #$3f			lda 	#"?"
.0fe7	20 21 10	jsr $1021			jsr 	IGNLEchoIfScreen
.0fea	a0 00		ldy #$00			ldy 	#0 							; line position.
.0fec					_IGNLLoop:
.0fec	20 6a 13	jsr $136a			jsr 	VectorGetCharacter 			; get a character
.0fef	c9 00		cmp #$00			cmp 	#0
.0ff1	f0 f9		beq $0fec			beq 	_IGNLLoop
.0ff3	c9 14		cmp #$14			cmp 	#$14 						; Backspace ?
.0ff5	f0 11		beq $1008			beq 	_IGNBackspace
.0ff7	c9 0d		cmp #$0d			cmp 	#$0D 						; Return ?
.0ff9	f0 17		beq $1012			beq 	_IGNExit
.0ffb	c0 50		cpy #$50			cpy 	#80 						; buffer full ?
.0ffd	f0 ed		beq $0fec			beq 	_IGNLLoop
.0fff	99 0c 04	sta $040c,y			sta 	InputBuffer,y
.1002	c8		iny				iny
.1003	20 21 10	jsr $1021			jsr 	IGNLEchoIfScreen
.1006	80 e4		bra $0fec			bra 	_IGNLLoop
.1008					_IGNBackspace:
.1008	c0 00		cpy #$00			cpy 	#0
.100a	f0 e0		beq $0fec			beq 	_IGNLLoop
.100c	20 21 10	jsr $1021			jsr 	IGNLEchoIfScreen
.100f	88		dey				dey
.1010	80 da		bra $0fec			bra 	_IGNLLoop
.1012					_IGNExit:
.1012	20 21 10	jsr $1021			jsr 	IGNLEchoIfScreen
.1015	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.1017	99 0c 04	sta $040c,y			sta 	InputBuffer,y
.101a	9c 5d 04	stz $045d			stz 	InputBufferPos 				; reset position to start of input buffer.
.101d	7a		ply				ply
.101e	fa		plx				plx
.101f	68		pla				pla
.1020	60		rts				rts
.1021					IGNLEchoIfScreen:
.1021	ae 5f 04	ldx $045f			ldx 	currentChannel
.1024	d0 03		bne $1029			bne 	_IGNLEExit
.1026	20 61 13	jsr $1361			jsr 	VectorPrintCharacter
.1029					_IGNLEExit:
.1029	60		rts				rts
.040c					InputBuffer:
>040c							.fill 	81
.045d					InputBufferPos:
>045d							.fill 	1
.102a					GetInteger8Bit:
.102a	20 ac 22	jsr $22ac			jsr 	FloatIntegerPart
.102d	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.102f	60		rts				rts
.1030					GetInteger16Bit:
.1030	20 ac 22	jsr $22ac			jsr 	FloatIntegerPart
.1033	34 32		bit $32,x			bit 	NSStatus,x
.1035	30 09		bmi $1040			bmi 	Negate16Bit
.1037	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.1039	85 2c		sta $2c				sta 	zTemp0
.103b	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.103d	85 2d		sta $2d				sta 	zTemp0+1
.103f	60		rts				rts
.1040					Negate16Bit:
.1040	38		sec				sec
.1041	a9 00		lda #$00			lda 	#0
.1043	f5 3e		sbc $3e,x			sbc 	NSMantissa0,x
.1045	95 3e		sta $3e,x			sta 	NSMantissa0,x
.1047	85 2c		sta $2c				sta 	zTemp0
.1049	a9 00		lda #$00			lda 	#0
.104b	f5 4a		sbc $4a,x			sbc 	NSMantissa1,x
.104d	95 4a		sta $4a,x			sta 	NSMantissa1,x
.104f	85 2d		sta $2d				sta 	zTemp0+1
.1051	60		rts				rts
.1052					UnaryJoy:
.1052	fa		plx				plx
.1053	20 2a 10	jsr $102a			jsr 	GetInteger8Bit 				; port #
.1056	48		pha				pha 								; zero the result.
.1057	20 71 26	jsr $2671			jsr 	FloatSetZero
.105a	68		pla				pla
.105b	5a		phy				phy
.105c	da		phx				phx
.105d	20 56 ff	jsr $ff56			jsr 	X16_joystick_get 			; read joystick.
.1060	c0 00		cpy #$00			cpy 	#0 							; check no hardware
.1062	d0 10		bne $1074			bne 	_UJNoHardware
.1064	a8		tay				tay 								; move XA -> AY
.1065	8a		txa				txa
.1066	fa		plx				plx 								; we can update it now.
.1067	49 ff		eor #$ff			eor 	#$FF
.1069	95 4a		sta $4a,x			sta 	NSMantissa1,x
.106b	98		tya				tya
.106c	49 ff		eor #$ff			eor 	#$FF
.106e	95 3e		sta $3e,x			sta 	NSMantissa0,x
.1070	7a		ply				ply 								; restore Y
.1071	4c 38 08	jmp $0838			jmp 	NextCommand
.1074					_UJNoHardware:
.1074	fa		plx				plx
.1075	7a		ply				ply
.1076	a9 01		lda #$01			lda 	#1 							; set result to -1
.1078	20 73 26	jsr $2673			jsr 	FloatSetByte
.107b	20 33 26	jsr $2633			jsr 	FloatNegate
.107e	4c 38 08	jmp $0838			jmp 	NextCommand
.1081					UnaryLen:
.1081	fa		plx				plx
.1082	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; string address.
.1084	85 2c		sta $2c				sta 	zTemp0
.1086	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.1088	85 2d		sta $2d				sta 	zTemp0+1
.108a	b2 2c		lda ($2c)			lda 	(zTemp0) 					; get length
.108c	20 73 26	jsr $2673			jsr 	FloatSetByte
.108f	4c 38 08	jmp $0838			jmp 	NextCommand
.1092					LinkFloatAdd:
.1092	fa		plx				plx
.1093	5a		phy			phy
.1094	20 95 20	jsr $2095		jsr	FloatAdd
.1097	7a		ply			ply
.1098	4c 38 08	jmp $0838			jmp 	NextCommand
.109b					LinkFloatSubtract:
.109b	fa		plx				plx
.109c	5a		phy			phy
.109d	20 8f 20	jsr $208f		jsr	FloatSubtract
.10a0	7a		ply			ply
.10a1	4c 38 08	jmp $0838			jmp 	NextCommand
.10a4					LinkFloatMultiply:
.10a4	fa		plx				plx
.10a5	5a		phy			phy
.10a6	20 31 23	jsr $2331		jsr	FloatMultiply
.10a9	7a		ply			ply
.10aa	4c 38 08	jmp $0838			jmp 	NextCommand
.10ad					LinkFloatDivide:
.10ad	fa		plx				plx
.10ae	5a		phy			phy
.10af	20 ba 21	jsr $21ba		jsr	FloatDivide
.10b2	b0 5c		bcs $1110		bcs	DivZeroError
.10b4	7a		ply			ply
.10b5	4c 38 08	jmp $0838			jmp 	NextCommand
.10b8					LinkFloatPower:
.10b8	fa		plx				plx
.10b9	5a		phy			phy
.10ba	20 3a 29	jsr $293a		jsr	FloatPower
.10bd	b0 4e		bcs $110d		bcs	MapRangeError
.10bf	7a		ply			ply
.10c0	4c 38 08	jmp $0838			jmp 	NextCommand
.10c3					LinkCompareGreater:
.10c3	fa		plx				plx
.10c4	5a		phy			phy
.10c5	20 3e 21	jsr $213e		jsr	CompareGreater
.10c8	7a		ply			ply
.10c9	4c 38 08	jmp $0838			jmp 	NextCommand
.10cc					LinkCompareEqual:
.10cc	fa		plx				plx
.10cd	5a		phy			phy
.10ce	20 20 21	jsr $2120		jsr	CompareEqual
.10d1	7a		ply			ply
.10d2	4c 38 08	jmp $0838			jmp 	NextCommand
.10d5					LinkCompareLess:
.10d5	fa		plx				plx
.10d6	5a		phy			phy
.10d7	20 36 21	jsr $2136		jsr	CompareLess
.10da	7a		ply			ply
.10db	4c 38 08	jmp $0838			jmp 	NextCommand
.10de					LinkCompareGreaterEqual:
.10de	fa		plx				plx
.10df	5a		phy			phy
.10e0	20 4e 21	jsr $214e		jsr	CompareGreaterEqual
.10e3	7a		ply			ply
.10e4	4c 38 08	jmp $0838			jmp 	NextCommand
.10e7					LinkCompareNotEqual:
.10e7	fa		plx				plx
.10e8	5a		phy			phy
.10e9	20 30 21	jsr $2130		jsr	CompareNotEqual
.10ec	7a		ply			ply
.10ed	4c 38 08	jmp $0838			jmp 	NextCommand
.10f0					LinkCompareLessEqual:
.10f0	fa		plx				plx
.10f1	5a		phy			phy
.10f2	20 46 21	jsr $2146		jsr	CompareLessEqual
.10f5	7a		ply			ply
.10f6	4c 38 08	jmp $0838			jmp 	NextCommand
.10f9					LinkFloatIntegerPartDown:
.10f9	fa		plx				plx
.10fa	5a		phy			phy
.10fb	20 d0 22	jsr $22d0		jsr	FloatIntegerPartDown
.10fe	7a		ply			ply
.10ff	4c 38 08	jmp $0838			jmp 	NextCommand
.1102					LinkFloatSquareRoot:
.1102	fa		plx				plx
.1103	5a		phy			phy
.1104	20 bc 29	jsr $29bc		jsr	FloatSquareRoot
.1107	b0 04		bcs $110d		bcs	MapRangeError
.1109	7a		ply			ply
.110a	4c 38 08	jmp $0838			jmp 	NextCommand
.110d					MapRangeError:
.110d	4c fc 1e	jmp $1efc		jmp	ErrorV_range
.1110					DivZeroError:
.1110	4c 85 1f	jmp $1f85		jmp	ErrorV_divzero
.1113					LinkFloatLogarithm:
.1113	fa		plx				plx
.1114	5a		phy			phy
.1115	20 c6 28	jsr $28c6		jsr	FloatLogarithm
.1118	b0 f3		bcs $110d		bcs	MapRangeError
.111a	7a		ply			ply
.111b	4c 38 08	jmp $0838			jmp 	NextCommand
.111e					LinkFloatExponent:
.111e	fa		plx				plx
.111f	5a		phy			phy
.1120	20 c3 27	jsr $27c3		jsr	FloatExponent
.1123	7a		ply			ply
.1124	4c 38 08	jmp $0838			jmp 	NextCommand
.1127					LinkFloatCosine:
.1127	fa		plx				plx
.1128	5a		phy			phy
.1129	20 b7 27	jsr $27b7		jsr	FloatCosine
.112c	7a		ply			ply
.112d	4c 38 08	jmp $0838			jmp 	NextCommand
.1130					LinkFloatSine:
.1130	fa		plx				plx
.1131	5a		phy			phy
.1132	20 57 29	jsr $2957		jsr	FloatSine
.1135	7a		ply			ply
.1136	4c 38 08	jmp $0838			jmp 	NextCommand
.1139					LinkFloatTangent:
.1139	fa		plx				plx
.113a	5a		phy			phy
.113b	20 c8 29	jsr $29c8		jsr	FloatTangent
.113e	7a		ply			ply
.113f	4c 38 08	jmp $0838			jmp 	NextCommand
.1142					LinkFloatArcTan:
.1142	fa		plx				plx
.1143	5a		phy			phy
.1144	20 9c 26	jsr $269c		jsr	FloatArcTan
.1147	b0 c4		bcs $110d		bcs	MapRangeError
.1149	7a		ply			ply
.114a	4c 38 08	jmp $0838			jmp 	NextCommand
.114d					LinkFloatCompare:
.114d	fa		plx				plx
.114e	5a		phy			phy
.114f	20 56 21	jsr $2156		jsr	FloatCompare
.1152	7a		ply			ply
.1153	4c 38 08	jmp $0838			jmp 	NextCommand
.1156					LinkDivideInt32:
.1156	fa		plx				plx
.1157	5a		phy			phy
.1158	20 e4 21	jsr $21e4		jsr	DivideInt32
.115b	b0 b0		bcs $110d		bcs	MapRangeError
.115d	7a		ply			ply
.115e	4c 38 08	jmp $0838			jmp 	NextCommand
.1161					StackSaveCurrentPosition:
.1161	20 b4 08	jsr $08b4			jsr 	FixUpY 						; codePtr,Y is corrected so Y = 0
.1164	5a		phy				phy
.1165	a0 02		ldy #$02			ldy 	#2
.1167	a5 28		lda $28				lda 	codePtr
.1169	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.116b	c8		iny				iny
.116c	a5 29		lda $29				lda 	codePtr+1
.116e	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.1170	7a		ply				ply
.1171	60		rts				rts
.1172					StackLoadCurrentPosition:
.1172	a0 02		ldy #$02			ldy 	#2
.1174	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1176	85 28		sta $28				sta 	codePtr
.1178	c8		iny				iny
.1179	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.117b	85 29		sta $29				sta 	codePtr+1
.117d	a0 00		ldy #$00			ldy 	#0
.117f	60		rts				rts
.1180					XCommandMouse:
.1180	fa		plx				plx
.1181	20 2a 10	jsr $102a			jsr 	GetInteger8Bit 				; mouse control.
.1184	ca		dex				dex
.1185	da		phx				phx
.1186	5a		phy				phy
.1187	48		pha				pha
.1188	38		sec				sec 								; get screen resolution
.1189	20 5f ff	jsr $ff5f			jsr 	X16_screen_mode
.118c	68		pla				pla
.118d	20 68 ff	jsr $ff68			jsr 	X16_mouse_config 			; config the mouse
.1190	7a		ply				ply
.1191	fa		plx				plx
.1192	4c 38 08	jmp $0838			jmp 	NextCommand
.1195					XUnaryMB:
.1195	fa		plx				plx
.1196	20 c4 11	jsr $11c4			jsr 	XUnaryMouseCommon
.1199	a5 30		lda $30				lda 	zTemp2
.119b	e8		inx				inx
.119c	20 73 26	jsr $2673			jsr 	FloatSetByte
.119f	4c 38 08	jmp $0838			jmp 	NextCommand
.11a2					XUnaryMX:
.11a2	fa		plx				plx
.11a3	20 c4 11	jsr $11c4			jsr 	XUnaryMouseCommon
.11a6	a5 2c		lda $2c				lda 	zTemp0
.11a8	e8		inx				inx
.11a9	20 73 26	jsr $2673			jsr 	FloatSetByte
.11ac	a5 2d		lda $2d				lda 	zTemp0+1
.11ae	95 4a		sta $4a,x			sta 	NSMantissa1,x
.11b0	4c 38 08	jmp $0838			jmp 	NextCommand
.11b3					XUnaryMY:
.11b3	fa		plx				plx
.11b4	20 c4 11	jsr $11c4			jsr 	XUnaryMouseCommon
.11b7	a5 2e		lda $2e				lda 	zTemp1
.11b9	e8		inx				inx
.11ba	20 73 26	jsr $2673			jsr 	FloatSetByte
.11bd	a5 2f		lda $2f				lda 	zTemp1+1
.11bf	95 4a		sta $4a,x			sta 	NSMantissa1,x
.11c1	4c 38 08	jmp $0838			jmp 	NextCommand
.11c4					XUnaryMouseCommon:
.11c4	da		phx				phx
.11c5	5a		phy				phy
.11c6	a2 2c		ldx #$2c			ldx 	#zTemp0
.11c8	20 6b ff	jsr $ff6b			jsr 	X16_mouse_get
.11cb	85 30		sta $30				sta 	zTemp2
.11cd	7a		ply				ply
.11ce	fa		plx				plx
.11cf	60		rts				rts
.11d0					NegateTOS:
.11d0	fa		plx				plx
.11d1	20 33 26	jsr $2633			jsr 	FloatNegate
.11d4	4c 38 08	jmp $0838			jmp 	NextCommand
.11d7					CommandNewLine:
.11d7	fa		plx				plx
.11d8	9c 6a 05	stz $056a			stz 	stringInitialised
.11db	a2 ff		ldx #$ff			ldx 	#$FF
.11dd	4c 38 08	jmp $0838			jmp 	NextCommand
.11e0					CommandXNext:
.11e0	fa		plx				plx
.11e1					_CNRetry:
.11e1	a9 d3		lda #$d3			lda 	#FRAME_FOR 					; find the FOR
.11e3	20 46 0d	jsr $0d46			jsr 	StackFindFrame
.11e6	20 b4 08	jsr $08b4			jsr 	FixUpY 						; so we can use Y
.11e9	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; check no index variable, both are $FF
.11eb	35 4a		and $4a,x			and 	NSMantissa1,x
.11ed	c9 ff		cmp #$ff			cmp 	#$FF
.11ef	f0 16		beq $1207			beq 	_CNNoIndexVariable
.11f1	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.11f3	a0 05		ldy #$05			ldy 	#5
.11f5	d1 24		cmp ($24),y			cmp 	(runtimeStackPtr),y
.11f7	d0 07		bne $1200			bne 	_CNNIndexFail
.11f9	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.11fb	c8		iny				iny
.11fc	d1 24		cmp ($24),y			cmp 	(runtimeStackPtr),y
.11fe	f0 07		beq $1207			beq 	_CNNoIndexVariable
.1200					_CNNIndexFail:
.1200	a0 00		ldy #$00			ldy 	#0 							; so we don't fix up Y again !
.1202	20 38 0d	jsr $0d38			jsr 	StackCloseFrame 			; close this frame
.1205	80 da		bra $11e1			bra 	_CNRetry
.1207					_CNNoIndexVariable:
.1207	ca		dex				dex
.1208	a0 04		ldy #$04			ldy 	#4 							; check for optimised NEXT
.120a	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.120c	29 40		and #$40			and 	#$40	 					; bit 6
.120e	d0 55		bne $1265			bne 	_CNOptimisedNext
.1210	a0 05		ldy #$05			ldy 	#5 							; copy address to zTemp0, save for write back
.1212	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1214	48		pha				pha
.1215	85 2c		sta $2c				sta 	zTemp0
.1217	c8		iny				iny
.1218	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.121a	18		clc				clc
.121b	6d 07 04	adc $0407			adc 	variableStartPage 			; point to variable page.
.121e	48		pha				pha
.121f	85 2d		sta $2d				sta 	zTemp0+1
.1221	20 e3 14	jsr $14e3			jsr 	ReadFloatZTemp0Sub 			; read current index onto stack.
.1224	a0 07		ldy #$07			ldy 	#7  						; read step onto stack +1
.1226	e8		inx				inx
.1227	20 a8 12	jsr $12a8			jsr 	CopyOffsetYToTOS
.122a	20 95 20	jsr $2095			jsr 	FloatAdd
.122d	68		pla				pla 								; restore address
.122e	85 2d		sta $2d				sta 	zTemp0+1
.1230	68		pla				pla
.1231	85 2c		sta $2c				sta 	zTemp0
.1233	20 d6 1a	jsr $1ad6			jsr 	WriteFloatZTemp0Sub			; write float.
.1236	e8		inx				inx  								; recover written
.1237	e8		inx				inx 								; load offset
.1238	a0 0d		ldy #$0d			ldy 	#13
.123a	20 a8 12	jsr $12a8			jsr 	CopyOffsetYToTOS
.123d	20 56 21	jsr $2156			jsr 	FloatCompare 				; and compare the floats.
.1240	ca		dex				dex 								; throw result (in NSMantissa0+1)
.1241	a0 0c		ldy #$0c			ldy 	#12 						; get the sign of the step.
.1243	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1245	30 08		bmi $124f			bmi 	_CNDownStep
.1247	b5 3f		lda $3f,x			lda 	NSMantissa0+1,x 			; get comparator
.1249	c9 01		cmp #$01			cmp 	#1 							; gone higher
.124b	f0 10		beq $125d			beq 	_CNExitFor 					; if so exit the loop
.124d	80 06		bra $1255			bra 	_CNLoopBack
.124f					_CNDownStep:
.124f	b5 3f		lda $3f,x			lda 	NSMantissa0+1,x 			; get comparator
.1251	c9 ff		cmp #$ff			cmp 	#255 						; gone lower
.1253	f0 08		beq $125d			beq 	_CNExitFor
.1255					_CNLoopBack:
.1255	20 72 11	jsr $1172			jsr 	StackLoadCurrentPosition 	; loop back
.1258	a0 00		ldy #$00			ldy 	#0
.125a	4c 38 08	jmp $0838			jmp 	NextCommand
.125d					_CNExitFor:
.125d	20 38 0d	jsr $0d38			jsr 	StackCloseFrame 			; remove the frame and exit
.1260	a0 00		ldy #$00			ldy 	#0
.1262	4c 38 08	jmp $0838			jmp 	NextCommand
.1265					_CNOptimisedNext:
.1265	a0 05		ldy #$05			ldy 	#5 							; copy address to zTemp0, save for write back
.1267	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1269	85 2c		sta $2c				sta 	zTemp0
.126b	c8		iny				iny
.126c	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.126e	18		clc				clc
.126f	6d 07 04	adc $0407			adc 	variableStartPage 			; point to variable page.
.1272	85 2d		sta $2d				sta 	zTemp0+1
.1274	a0 07		ldy #$07			ldy 	#7 							; STEP value
.1276	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1278	a0 ff		ldy #$ff			ldy 	#$FF
.127a	18		clc				clc
.127b					_CNOIncrement:
.127b	c8		iny				iny
.127c	71 2c		adc ($2c),y			adc 	(zTemp0),y
.127e	91 2c		sta ($2c),y			sta 	(zTemp0),y
.1280	f0 f9		beq $127b			beq 	_CNOIncrement
.1282	18		clc				clc
.1283	a5 24		lda $24				lda 	runtimeStackPtr
.1285	69 0d		adc #$0d			adc 	#13
.1287	85 2e		sta $2e				sta 	zTemp1
.1289	a5 25		lda $25				lda 	runtimeStackPtr+1
.128b	69 00		adc #$00			adc 	#0
.128d	85 2f		sta $2f				sta 	zTemp1+1
.128f	a0 00		ldy #$00			ldy 	#0
.1291	b1 2e		lda ($2e),y			lda 	(zTemp1),y 					; byte 0
.1293	d1 2c		cmp ($2c),y			cmp 	(zTemp0),y
.1295	c8		iny				iny
.1296	b1 2e		lda ($2e),y			lda 	(zTemp1),y 					; byte 1
.1298	f1 2c		sbc ($2c),y			sbc 	(zTemp0),y
.129a	c8		iny				iny
.129b	b1 2e		lda ($2e),y			lda 	(zTemp1),y 					; byte 2
.129d	f1 2c		sbc ($2c),y			sbc 	(zTemp0),y
.129f	c8		iny				iny
.12a0	b1 2e		lda ($2e),y			lda 	(zTemp1),y 					; byte 3
.12a2	f1 2c		sbc ($2c),y			sbc 	(zTemp0),y
.12a4	90 b7		bcc $125d			bcc	 	_CNExitFor
.12a6	80 ad		bra $1255			bra 	_CNLoopBack
.12a8					CopyOffsetYToTOS:
.12a8	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.12aa	95 3e		sta $3e,x			sta 	NSMantissa0,x
.12ac	c8		iny				iny
.12ad	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.12af	95 4a		sta $4a,x			sta 	NSMantissa1,x
.12b1	c8		iny				iny
.12b2	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.12b4	95 56		sta $56,x			sta 	NSMantissa2,x
.12b6	c8		iny				iny
.12b7	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.12b9	95 62		sta $62,x			sta 	NSMantissa3,x
.12bb	c8		iny				iny
.12bc	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.12be	95 6e		sta $6e,x			sta 	NSExponent,x
.12c0	c8		iny				iny
.12c1	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.12c3	95 32		sta $32,x			sta 	NSStatus,x
.12c5	60		rts				rts
.12c6	4c 38 08	jmp $0838			jmp 	NextCommand
.12c9					NotTOS:
.12c9	fa		plx				plx
.12ca	20 ac 22	jsr $22ac			jsr 	FloatIntegerPart
.12cd	74 56		stz $56,x			stz 	NSMantissa2,x 				; chop down to 16 bit.
.12cf	74 62		stz $62,x			stz 	NSMantissa3,x
.12d1	20 33 26	jsr $2633			jsr 	FloatNegate		 			; negate
.12d4	e8		inx				inx 								; and subtract 1.
.12d5	a9 01		lda #$01			lda 	#1
.12d7	20 73 26	jsr $2673			jsr 	FloatSetByte
.12da	20 8f 20	jsr $208f			jsr 	FloatSubtract
.12dd					_NotTOSSkip:
.12dd	4c 38 08	jmp $0838			jmp 	NextCommand
.12e0					CommandXOn:
.12e0	fa		plx				plx
.12e1	20 2a 10	jsr $102a			jsr 	GetInteger8Bit 				; get the integer part, the ON x GOTO bit
.12e4	8d 5e 04	sta $045e			sta 	onCount 					; save it.
.12e7	20 b4 08	jsr $08b4			jsr 	FixUpY 						; Y = 0
.12ea					_CONFind:
.12ea	ce 5e 04	dec $045e			dec 	onCount 					; reached zero, do this one
.12ed	f0 0b		beq $12fa			beq 	_CONFound
.12ef	c8		iny				iny 								; skip over the token (GOTO or GOSUB page, and line #)
.12f0	c8		iny				iny
.12f1	c8		iny				iny
.12f2	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a moreon after it, if so we can keep going.
.12f4	c8		iny				iny
.12f5	c9 aa		cmp #$aa			cmp 	#PCD_MOREON
.12f7	f0 f1		beq $12ea			beq 	_CONFind
.12f9	88		dey				dey 								; point to character after last GOTO/GOSUB
.12fa					_CONFound:
.12fa	4c 38 08	jmp $0838			jmp 	NextCommand
.12fd					CommandMoreOn:
.12fd	fa		plx				plx
.12fe	c8		iny				iny 								; so it goes to the first non-goto/gosub
.12ff	c8		iny				iny
.1300	c8		iny				iny
.1301	4c 38 08	jmp $0838			jmp 	NextCommand
.045e					onCount:
>045e							.fill 	1
.1304					UnaryPeek:
.1304	fa		plx				plx
.1305	20 30 10	jsr $1030			jsr 	GetInteger16Bit
.1308	da		phx				phx
.1309	5a		phy				phy
.130a	a6 2c		ldx $2c				ldx 	zTemp0
.130c	a4 2d		ldy $2d				ldy 	zTemp0+1
.130e	20 70 1c	jsr $1c70			jsr 	XPeekMemory
.1311	7a		ply				ply
.1312	fa		plx				plx
.1313	20 73 26	jsr $2673			jsr 	FloatSetByte
.1316	4c 38 08	jmp $0838			jmp 	NextCommand
.1319					UnaryPI:
.1319	fa		plx				plx
.131a	a9 19		lda #$19			lda 	#Const_pi-Const_base
.131c	20 a1 28	jsr $28a1			jsr 	LoadConstant
.131f	e8		inx				inx
.1320	4c 38 08	jmp $0838			jmp 	NextCommand
.1323					CommandPOKE:
.1323	fa		plx				plx
.1324	da		phx				phx 								; save XY
.1325	5a		phy				phy
.1326	20 2a 10	jsr $102a			jsr 	GetInteger8Bit 				; get byte to POKE and save it
.1329	48		pha				pha
.132a	b5 49		lda $49,x			lda 	NSMantissa1-1,x 			; YX = address from Mantissa next up
.132c	a8		tay				tay
.132d	b5 3d		lda $3d,x			lda 	NSMantissa0-1,x
.132f	aa		tax				tax
.1330	68		pla				pla
.1331	20 5c 1c	jsr $1c5c			jsr 	XPokeMemory
.1334	7a		ply				ply 								; restore YX and drop 2
.1335	fa		plx				plx
.1336	ca		dex				dex
.1337	ca		dex				dex
.1338	4c 38 08	jmp $0838			jmp 	NextCommand
.133b					UnaryPos:
.133b	fa		plx				plx
.133c	20 ef 1b	jsr $1bef			jsr 	XGetHPos
.133f	20 73 26	jsr $2673			jsr 	FloatSetByte
.1342	4c 38 08	jmp $0838			jmp 	NextCommand
.1345					GetChannel:
.1345	fa		plx				plx
.1346	ad 5f 04	lda $045f			lda 	currentChannel
.1349	e8		inx				inx
.134a	20 73 26	jsr $2673			jsr 	FloatSetByte
.134d	4c 38 08	jmp $0838			jmp 	NextCommand
.1350					SetChannel:
.1350	fa		plx				plx
.1351	20 ac 22	jsr $22ac			jsr 	FloatIntegerPart
.1354	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.1356	8d 5f 04	sta $045f			sta 	currentChannel
.1359	ca		dex				dex
.135a	4c 38 08	jmp $0838			jmp 	NextCommand
.135d					SetDefaultChannel:
.135d	9c 5f 04	stz $045f			stz 	currentChannel
.1360	60		rts				rts
.1361					VectorPrintCharacter:
.1361	da		phx				phx
.1362	ae 5f 04	ldx $045f			ldx 	currentChannel
.1365	20 9a 1c	jsr $1c9a			jsr 	XPrintCharacterToChannel
.1368	fa		plx				plx
.1369	60		rts				rts
.136a					VectorGetCharacter:
.136a	da		phx				phx
.136b	ae 5f 04	ldx $045f			ldx 	currentChannel
.136e	20 d3 1b	jsr $1bd3			jsr 	XGetCharacterFromChannel
.1371	fa		plx				plx
.1372	60		rts				rts
.045f					currentChannel:
>045f							.fill 	1
.1373					PrintNumber:
.1373	fa		plx				plx
.1374	a9 07		lda #$07			lda 	#7
.1376	20 59 25	jsr $2559			jsr 	FloatToString 				; to number in decimal buffer
.1379	ca		dex				dex 								; drop
.137a	da		phx				phx
.137b	a2 00		ldx #$00			ldx 	#0 							; print buffer.
.137d					_PNLoop:
.137d	bd 98 05	lda $0598,x			lda 	decimalBuffer,x
.1380	20 61 13	jsr $1361			jsr 	VectorPrintCharacter
.1383	e8		inx				inx
.1384	bd 98 05	lda $0598,x			lda	 	decimalBuffer,x
.1387	d0 f4		bne $137d			bne 	_PNLoop
.1389	a9 20		lda #$20			lda 	#32 						; trailing space
.138b	20 61 13	jsr $1361			jsr 	VectorPrintCharacter
.138e	fa		plx				plx
.138f	4c 38 08	jmp $0838			jmp 	NextCommand
.1392					PrintString:
.1392	fa		plx				plx
.1393	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; point zTemp0 to string
.1395	85 2c		sta $2c				sta 	zTemp0
.1397	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.1399	85 2d		sta $2d				sta 	zTemp0+1
.139b	ca		dex				dex 								; drop
.139c	da		phx				phx
.139d	5a		phy				phy
.139e	b2 2c		lda ($2c)			lda 	(zTemp0) 					; X = count
.13a0	aa		tax				tax
.13a1	a0 01		ldy #$01			ldy 	#1 							; Y = position
.13a3					_PSLoop:
.13a3	e0 00		cpx #$00			cpx 	#0 							; complete ?
.13a5	f0 09		beq $13b0			beq 	_PSExit
.13a7	ca		dex				dex 								; dec count
.13a8	b1 2c		lda ($2c),y			lda 	(zTemp0),y 					; print char and bump
.13aa	20 61 13	jsr $1361			jsr 	VectorPrintCharacter
.13ad	c8		iny				iny
.13ae	80 f3		bra $13a3			bra 	_PSLoop
.13b0					_PSExit:
.13b0	7a		ply				ply
.13b1	fa		plx				plx
.13b2	4c 38 08	jmp $0838			jmp 	NextCommand
.13b5					CommandPushN:
.13b5	fa		plx				plx
.13b6	e8		inx				inx 								; next slot on stack
.13b7	b1 28		lda ($28),y			lda 	(codePtr),y 				; exponent
.13b9	95 6e		sta $6e,x			sta 	NSExponent,x
.13bb	c8		iny				iny
.13bc	b1 28		lda ($28),y			lda 	(codePtr),y 				; mantissa
.13be	95 3e		sta $3e,x			sta 	NSMantissa0,x
.13c0	c8		iny				iny
.13c1	b1 28		lda ($28),y			lda 	(codePtr),y
.13c3	95 4a		sta $4a,x			sta 	NSMantissa1,x
.13c5	c8		iny				iny
.13c6	b1 28		lda ($28),y			lda 	(codePtr),y
.13c8	95 56		sta $56,x			sta 	NSMantissa2,x
.13ca	c8		iny				iny
.13cb	b1 28		lda ($28),y			lda 	(codePtr),y
.13cd	48		pha				pha
.13ce	29 7f		and #$7f			and 	#$7F
.13d0	95 62		sta $62,x			sta 	NSMantissa3,x
.13d2	68		pla				pla 								; sign in mantissa3:7
.13d3	29 80		and #$80			and 	#$80
.13d5	95 32		sta $32,x			sta 	NSStatus,x
.13d7	c8		iny				iny
.13d8	4c 38 08	jmp $0838			jmp 	NextCommand
.13db					CommandPushS:
.13db	fa		plx				plx
.13dc	e8		inx				inx 								; next slot on stack
.13dd	18		clc				clc
.13de	98		tya				tya
.13df	65 28		adc $28				adc 	codePtr 					; the string is inline
.13e1	95 3e		sta $3e,x			sta 	NSMantissa0,x
.13e3	a5 29		lda $29				lda 	codePtr+1
.13e5	69 00		adc #$00			adc 	#0
.13e7	95 4a		sta $4a,x			sta 	NSMantissa1,x
.13e9	74 56		stz $56,x			stz 	NSMantissa2,x
.13eb	74 62		stz $62,x			stz 	NSMantissa3,x
.13ed	a9 40		lda #$40			lda 	#NSSString
.13ef	95 32		sta $32,x			sta 	NSStatus,x
.13f1	98		tya				tya 								; string length +1 added to Y
.13f2	38		sec				sec
.13f3	71 28		adc ($28),y			adc 	(codePtr),y 				; next instruction
.13f5	a8		tay				tay
.13f6	4c 38 08	jmp $0838			jmp 	NextCommand
.13f9					CommandXRead:
.13f9	fa		plx				plx
.13fa	5a		phy				phy 								; save Y
.13fb	20 2c 14	jsr $142c			jsr 	ReadStringToBuffer 			; read element into buffer
.13fe	e8		inx				inx									; space on stack
.13ff	a9 61		lda #$61			lda 	#((ReadBufferSize) & $FF)
.1401	85 2c		sta $2c				sta 	0+zTemp0
.1403	a9 04		lda #$04			lda 	#((ReadBufferSize) >> 8) & $FF
.1405	85 2d		sta $2d				sta 	1+zTemp0
.1407	20 61 19	jsr $1961			jsr 	ValEvaluateZTemp0
.140a	b0 04		bcs $1410			bcs 	_CRError 					; failed
.140c	7a		ply				ply 								; restore Y
.140d	4c 38 08	jmp $0838			jmp 	NextCommand
.1410					_CRError:
.1410	4c 0c 1f	jmp $1f0c		jmp	ErrorV_value
.1413					CommandReadString:
.1413	fa		plx				plx
.1414	5a		phy				phy 								; save Y
.1415	20 2c 14	jsr $142c			jsr 	ReadStringToBuffer 			; read text
.1418	e8		inx				inx 								; make space on stack
.1419	20 71 26	jsr $2671			jsr 	FloatSetZero 				; store as string on stack
.141c	a9 61		lda #$61			lda 	#ReadBufferSize & $FF
.141e	95 3e		sta $3e,x			sta 	NSMantissa0,x
.1420	a9 04		lda #$04			lda 	#ReadBufferSize >> 8
.1422	95 4a		sta $4a,x			sta 	NSMantissa1,x
.1424	a9 40		lda #$40			lda 	#NSSString
.1426	95 32		sta $32,x			sta 	NSStatus,x
.1428	7a		ply				ply 								; restore Y
.1429	4c 38 08	jmp $0838			jmp 	NextCommand
.142c					ReadStringToBuffer:
.142c	a9 bf		lda #$bf			lda 	#((ReadBumpNext) & $FF)
.142e	8d 61 05	sta $0561			sta 	0+ReadBumpNextVec
.1431	a9 14		lda #$14			lda 	#((ReadBumpNext) >> 8) & $FF
.1433	8d 62 05	sta $0562			sta 	1+ReadBumpNextVec
.1436	a9 92		lda #$92			lda 	#((ReadLookNext) & $FF)
.1438	8d 63 05	sta $0563			sta 	0+ReadLookNextVec
.143b	a9 14		lda #$14			lda 	#((ReadLookNext) >> 8) & $FF
.143d	8d 64 05	sta $0564			sta 	1+ReadLookNextVec
.1440					GetStringToBuffer:
.1440	20 8f 14	jsr $148f			jsr		GetLookNext 				; skip all leading spaces.
.1443	f0 44		beq $1489			beq 	_RBError 					; end of data
.1445	b0 f9		bcs $1440			bcs 	GetStringToBuffer 			; switched to new data line.
.1447	c9 20		cmp #$20			cmp 	#' ' 						; non space got something
.1449	b0 05		bcs $1450			bcs 	_RBNoSpace
.144b	20 8c 14	jsr $148c			jsr 	GetBumpNext 				; consume space and loop round.
.144e	80 f0		bra $1440			bra 	GetStringToBuffer
.1450					_RBNoSpace:
.1450	9c 61 04	stz $0461			stz 	ReadBufferSize 				; empty the buffer.
.1453	c9 22		cmp #$22			cmp 	#'"' 						; is it a '"'
.1455	d0 08		bne $145f			bne 	_RBCommaSep
.1457	8d 60 04	sta $0460			sta 	ReadSep 					; use as a seperator
.145a	20 8c 14	jsr $148c			jsr 	GetBumpNext 				; consume the '"'
.145d	80 05		bra $1464			bra 	_RBGetText
.145f					_RBCommaSep:
.145f	a9 2c		lda #$2c			lda 	#","						; get till comma
.1461	8d 60 04	sta $0460			sta 	ReadSep
.1464					_RBGetText:
.1464	20 8f 14	jsr $148f			jsr 	GetLookNext 				; what follows
.1467	b0 18		bcs $1481			bcs 	_RBEndGet 					; if new DATA line, the end without consumption
.1469	20 8c 14	jsr $148c			jsr 	GetBumpNext 				; consume it whatever
.146c	cd 60 04	cmp $0460			cmp 	ReadSep 					; if found the seperator.
.146f	f0 10		beq $1481			beq 	_RBEndGet 					; exit after consumption
.1471	da		phx				phx
.1472	ae 61 04	ldx $0461			ldx 	ReadBufferSize 				; copy into buffer.
.1475	ee 61 04	inc $0461			inc 	ReadBufferSize
.1478	9d 62 04	sta $0462,x			sta 	ReadBuffer,x
.147b	9e 63 04	stz $0463,x			stz 	ReadBuffer+1,x 				; make ASCIIZ as well.
.147e	fa		plx				plx
.147f	80 e3		bra $1464			bra 	_RBGetText
.1481					_RBEndGet:
.1481	c9 22		cmp #$22			cmp 	#'"'
.1483	d0 03		bne $1488			bne 	_RBNotQuote
.1485	20 8c 14	jsr $148c			jsr 	GetBumpNext
.1488					_RBNotQuote:
.1488	60		rts				rts
.1489					_RBError:
.1489	4c c1 1f	jmp $1fc1		jmp	ErrorV_data
.148c					GetBumpNext:
.148c	6c 61 05	jmp ($0561)			jmp 	(ReadBumpNextVec)
.148f					GetLookNext:
.148f	6c 63 05	jmp ($0563)			jmp 	(ReadLookNextVec)
.1492					ReadLookNext:
.1492	ad 65 05	lda $0565			lda 	dataRemaining 				; any data remaining
.1495	f0 04		beq $149b			beq 	_RLNFindData
.1497	b2 2a		lda ($2a)			lda 	(objPtr) 					; return that object.
.1499	18		clc				clc
.149a	60		rts				rts
.149b					_RLNFindData:
.149b	b2 2a		lda ($2a)			lda 	(objPtr) 					; see where we are
.149d	c9 ff		cmp #$ff			cmp 	#$FF 						; if at $FF then end, error.
.149f	f0 1a		beq $14bb			beq 	_RLNNoData
.14a1	c9 d0		cmp #$d0			cmp 	#PCD_CMD_DATA 				; Found DATA
.14a3	f0 05		beq $14aa			beq 	_RLNHaveData
.14a5					_RLNNext:
.14a5	20 3f 20	jsr $203f			jsr 	MoveObjectForward			; else scan forward.
.14a8	80 f1		bra $149b			bra 	_RLNFindData
.14aa					_RLNHaveData:
.14aa	a0 01		ldy #$01			ldy 	#1 							; get length
.14ac	b1 2a		lda ($2a),y			lda 	(objPtr),y
.14ae	f0 f5		beq $14a5			beq 	_RLNNext 					; skip if DATA alone
.14b0	20 bf 14	jsr $14bf			jsr 	ReadBumpNext 				; advance by two
.14b3	20 bf 14	jsr $14bf			jsr 	ReadBumpNext
.14b6	8d 65 05	sta $0565			sta 	dataRemaining 				; set data left count.
.14b9	38		sec				sec
.14ba	60		rts				rts
.14bb					_RLNNoData:
.14bb	a9 00		lda #$00			lda 	#0
.14bd	38		sec				sec
.14be	60		rts				rts
.14bf					ReadBumpNext:
.14bf	e6 2a		inc $2a				inc 	objPtr
.14c1	d0 02		bne $14c5			bne 	_RBNSkip
.14c3	e6 2b		inc $2b				inc 	objPtr+1
.14c5					_RBNSkip:
.14c5	ce 65 05	dec $0565			dec 	dataRemaining
.14c8	60		rts				rts
.0460					ReadSep:
>0460							.fill 	1
.0461					ReadBufferSize:
>0461							.fill 	1
.0462					ReadBuffer:
>0462							.fill 	255
.0561					ReadBumpNextVec:
>0561							.fill 	2
.0563					ReadLookNextVec:
>0563							.fill 	2
.14c9					ReadFloatCommand:
.14c9	fa		plx				plx
.14ca	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.14cc	85 2c		sta $2c				sta 	zTemp0 						; save in MSB
.14ce	88		dey				dey 								; get the upper 3 bits
.14cf	b1 28		lda ($28),y			lda 	(codePtr),y
.14d1	29 07		and #$07			and 	#7
.14d3	c8		iny				iny
.14d4	c8		iny				iny
.14d5	06 2c		asl $2c				asl 	zTemp0 						; shift zTemp0:A left
.14d7	2a		rol a				rol 	a 							; carry will be clear.
.14d8	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.14db	85 2d		sta $2d				sta 	zTemp0+1
.14dd	20 e3 14	jsr $14e3			jsr 	ReadFloatZTemp0Sub
.14e0	4c 38 08	jmp $0838			jmp 	NextCommand
.14e3					ReadFloatZTemp0Sub:
.14e3	5a		phy				phy 								; start write
.14e4	a0 01		ldy #$01			ldy 	#1
.14e6	e8		inx				inx
.14e7	b2 2c		lda ($2c)			lda 	(zTemp0)
.14e9	95 3e		sta $3e,x			sta 	NSMantissa0,x
.14eb	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.14ed	95 4a		sta $4a,x			sta 	NSMantissa1,x
.14ef	c8		iny				iny
.14f0	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.14f2	95 56		sta $56,x			sta 	NSMantissa2,x
.14f4	c8		iny				iny
.14f5	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.14f7	95 62		sta $62,x			sta 	NSMantissa3,x
.14f9	c8		iny				iny
.14fa	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.14fc	95 6e		sta $6e,x			sta 	NSExponent,x
.14fe	c8		iny				iny
.14ff	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.1501	95 32		sta $32,x			sta 	NSStatus,x
.1503	7a		ply				ply
.1504	60		rts				rts
.1505					ReadIntegerCommand:
.1505	fa		plx				plx
.1506	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.1508	85 2c		sta $2c				sta 	zTemp0 						; save in MSB
.150a	88		dey				dey 								; get the upper 3 bits
.150b	b1 28		lda ($28),y			lda 	(codePtr),y
.150d	29 07		and #$07			and 	#7
.150f	c8		iny				iny
.1510	c8		iny				iny
.1511	06 2c		asl $2c				asl 	zTemp0 						; shift zTemp0:A left
.1513	2a		rol a				rol 	a 							; carry will be clear.
.1514	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.1517	85 2d		sta $2d				sta 	zTemp0+1
.1519	20 1f 15	jsr $151f			jsr 	ReadIntegerZTemp0Sub
.151c	4c 38 08	jmp $0838			jmp 	NextCommand
.151f					ReadIntegerZTemp0Sub:
.151f	5a		phy				phy 								; start write
.1520	a0 01		ldy #$01			ldy 	#1
.1522	e8		inx				inx 								; prepare
.1523	74 56		stz $56,x			stz 	NSMantissa2,x
.1525	74 62		stz $62,x			stz 	NSMantissa3,x
.1527	74 6e		stz $6e,x			stz 	NSExponent,x
.1529	74 32		stz $32,x			stz 	NSStatus,x
.152b	b1 2c		lda ($2c),y			lda 	(zTemp0),y 					; get MSB, do -ve code.
.152d	30 08		bmi $1537			bmi 	_RIZNegative
.152f	95 4a		sta $4a,x			sta 	NSMantissa1,x 				; +ve read
.1531	b2 2c		lda ($2c)			lda 	(zTemp0)
.1533	95 3e		sta $3e,x			sta 	NSMantissa0,x
.1535	7a		ply				ply
.1536	60		rts				rts
.1537					_RIZNegative:
.1537	38		sec				sec 								; -ve read
.1538	a9 00		lda #$00			lda 	#0
.153a	f2 2c		sbc ($2c)			sbc 	(zTemp0)
.153c	95 3e		sta $3e,x			sta 	NSMantissa0,x
.153e	a9 00		lda #$00			lda 	#0
.1540	f1 2c		sbc ($2c),y			sbc 	(zTemp0),y
.1542	95 4a		sta $4a,x			sta 	NSMantissa1,x
.1544	a9 80		lda #$80			lda 	#$80
.1546	95 32		sta $32,x			sta 	NSStatus,x
.1548	7a		ply				ply
.1549	60		rts				rts
.154a					ReadStringCommand:
.154a	fa		plx				plx
.154b	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.154d	85 2c		sta $2c				sta 	zTemp0 						; save in MSB
.154f	88		dey				dey 								; get the upper 3 bits
.1550	b1 28		lda ($28),y			lda 	(codePtr),y
.1552	29 07		and #$07			and 	#7
.1554	c8		iny				iny
.1555	c8		iny				iny
.1556	06 2c		asl $2c				asl 	zTemp0 						; shift zTemp0:A left
.1558	2a		rol a				rol 	a 							; carry will be clear.
.1559	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.155c	85 2d		sta $2d				sta 	zTemp0+1
.155e	20 64 15	jsr $1564			jsr 	ReadStringZTemp0Sub
.1561	4c 38 08	jmp $0838			jmp 	NextCommand
.1564					ReadStringZTemp0Sub:
.1564	5a		phy				phy 								; start write
.1565	e8		inx				inx 								; prepare
.1566	74 56		stz $56,x			stz 	NSMantissa2,x
.1568	74 62		stz $62,x			stz 	NSMantissa3,x
.156a	74 6e		stz $6e,x			stz 	NSExponent,x
.156c	a9 40		lda #$40			lda 	#NSSString
.156e	74 32		stz $32,x			stz 	NSStatus,x
.1570	18		clc				clc
.1571	b2 2c		lda ($2c)			lda 	(zTemp0)					; read address of block add 2.
.1573	69 02		adc #$02			adc 	#2 							; this points to actual data
.1575	95 3e		sta $3e,x			sta 	NSMantissa0,x 				; if address 0 the MSB will still be 0
.1577	a0 01		ldy #$01			ldy 	#1
.1579	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.157b	69 00		adc #$00			adc 	#0
.157d	95 4a		sta $4a,x			sta 	NSMantissa1,x 				; +ve read
.157f	d0 08		bne $1589			bne 	_RSZNoDefault 				; if read $00 use a default value.
.1581	a9 8b		lda #$8b			lda 	#_RSZNull & $FF
.1583	95 3e		sta $3e,x			sta 	NSMantissa0,x
.1585	a9 15		lda #$15			lda 	#_RSZNull >> 8
.1587	95 4a		sta $4a,x			sta 	NSMantissa1,x
.1589					_RSZNoDefault:
.1589	7a		ply				ply
.158a	60		rts				rts
.158b					_RSZNull:
>158b	00						.byte 	0
.158c					CommandRestoreX:
.158c	fa		plx				plx
.158d	20 93 15	jsr $1593			jsr 	RestoreCodeOffset
.1590	4c 38 08	jmp $0838			jmp 	NextCommand
.1593					RestoreCodeOffset:
.1593	20 b4 08	jsr $08b4			jsr 	FixUpY  					; make Y = 0 adjusting code Ptr.
.1596	18		clc				clc 								; add LSB
.1597	b1 28		lda ($28),y			lda 	(codePtr),y
.1599	65 28		adc $28				adc 	codePtr
.159b	85 2a		sta $2a				sta 	objPtr
.159d	c8		iny				iny 								; add MSB
.159e	b1 28		lda ($28),y			lda 	(codePtr),y
.15a0	65 29		adc $29				adc 	codePtr+1
.15a2	85 2b		sta $2b				sta 	objPtr+1
.15a4	c8		iny				iny 								; next command.
.15a5	9c 65 05	stz $0565			stz 	dataRemaining 				; no data remaining.
.15a8	60		rts				rts
.15a9					RestoreCode:
.15a9	ad 04 04	lda $0404			lda 	runtimeHigh 				; reset pointer
.15ac	85 2b		sta $2b				sta 	objPtr+1
.15ae	64 2a		stz $2a				stz 	objPtr
.15b0	9c 65 05	stz $0565			stz 	dataRemaining 				; no data remaining.
.15b3	60		rts				rts
.0565					dataRemaining:
>0565							.fill 	1		 					; 0 if not in data statement
.15b4					UnaryRND:
.15b4	fa		plx				plx
.15b5	34 32		bit $32,x			bit 	NSStatus,x 					; -ve then set seed from operand
.15b7	10 17		bpl $15d0			bpl 	_URNoSeed
.15b9	20 c6 23	jsr $23c6			jsr 	FloatNormalise 				; some float value
.15bc	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; copy to Mantissa
.15be	8d 66 05	sta $0566			sta 	randomSeed+0
.15c1	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.15c3	8d 67 05	sta $0567			sta 	randomSeed+1
.15c6	b5 56		lda $56,x			lda 	NSMantissa2,x
.15c8	8d 68 05	sta $0568			sta 	randomSeed+2
.15cb	b5 62		lda $62,x			lda 	NSMantissa3,x
.15cd	8d 69 05	sta $0569			sta 	randomSeed+3
.15d0					_URNoSeed:
.15d0	20 f2 15	jsr $15f2			jsr 	RandomNumberGenerator 		; create a number and copy to mantissa
.15d3	ad 66 05	lda $0566			lda 	randomSeed+0
.15d6	95 3e		sta $3e,x			sta 	NSMantissa0,x
.15d8	ad 67 05	lda $0567			lda 	randomSeed+1
.15db	95 4a		sta $4a,x			sta 	NSMantissa1,x
.15dd	ad 68 05	lda $0568			lda 	randomSeed+2
.15e0	95 56		sta $56,x			sta 	NSMantissa2,x
.15e2	ad 69 05	lda $0569			lda 	randomSeed+3
.15e5	29 7f		and #$7f			and 	#$7F
.15e7	95 62		sta $62,x			sta 	NSMantissa3,x
.15e9	a9 e1		lda #$e1			lda 	#(-31 & $FF)
.15eb	95 6e		sta $6e,x			sta 	NSExponent,x
.15ed	74 32		stz $32,x			stz 	NSStatus,x
.15ef	4c 38 08	jmp $0838			jmp 	NextCommand
.15f2					RandomNumberGenerator:
.15f2	5a		phy				phy
.15f3	ad 66 05	lda $0566			lda 	randomSeed+0 				; check if zero
.15f6	0d 67 05	ora $0567			ora 	randomSeed+1
.15f9	0d 68 05	ora $0568			ora 	randomSeed+2
.15fc	0d 69 05	ora $0569			ora 	randomSeed+3
.15ff	d0 07		bne $1608			bne 	_RNGNoSeed
.1601	ce 69 05	dec $0569			dec 	randomSeed+3 				; if so tweak and flog
.1604	a0 64		ldy #$64			ldy 	#100
.1606	80 05		bra $160d			bra 	_RNGLoop
.1608					_RNGNoSeed:
.1608	a0 08		ldy #$08			ldy 	#8
.160a	ad 66 05	lda $0566			lda 	randomSeed+0
.160d					_RNGLoop:
.160d	0a		asl a				asl		a
.160e	2e 67 05	rol $0567			rol 	randomSeed+1
.1611	2e 68 05	rol $0568			rol 	randomSeed+2
.1614	2e 69 05	rol $0569			rol 	randomSeed+3
.1617	90 02		bcc $161b			bcc		_RNGSkip
.1619	49 c5		eor #$c5			eor 	#$C5
.161b					_RNGSkip:
.161b	88		dey				dey
.161c	d0 ef		bne $160d			bne		_RNGLoop
.161e	8d 66 05	sta $0566			sta 	randomSeed+0
.1621	7a		ply				ply
.1622	60		rts				rts
.0566					randomSeed:
>0566							.fill 	4
.1623					StringConcatenate:
.1623	fa		plx				plx
.1624	ca		dex				dex
.1625	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; copy strings to zTemp1 and zTemp2
.1627	85 2e		sta $2e				sta 	zTemp1
.1629	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.162b	85 2f		sta $2f				sta 	zTemp1+1
.162d	b5 3f		lda $3f,x			lda 	NSMantissa0+1,x
.162f	85 30		sta $30				sta 	zTemp2
.1631	b5 4b		lda $4b,x			lda 	NSMantissa1+1,x
.1633	85 31		sta $31				sta 	zTemp2+1
.1635	18		clc				clc 								; work out total length
.1636	b2 2e		lda ($2e)			lda 	(zTemp1)
.1638	72 30		adc ($30)			adc 	(zTemp2)
.163a	b0 18		bcs $1654			bcs 	_BCLength 					; more than 255 characters.
.163c	48		pha				pha 								; save total
.163d	20 1a 17	jsr $171a			jsr 	StringAllocTemp 			; space for result.
.1640	68		pla				pla 								; write total as first.
.1641	92 22		sta ($22)			sta 	(zsTemp)
.1643	20 57 16	jsr $1657			jsr 	_BCCopyZTemp1 				; copy zTemp1 to target
.1646	a5 30		lda $30				lda 	zTemp2 						; copy address zTemp2->1
.1648	85 2e		sta $2e				sta 	zTemp1
.164a	a5 31		lda $31				lda 	zTemp2+1
.164c	85 2f		sta $2f				sta 	zTemp1+1
.164e	20 57 16	jsr $1657			jsr 	_BCCopyZTemp1 				; and copy it, e.g. zTemp2
.1651	4c 38 08	jmp $0838			jmp 	NextCommand
.1654					_BCLength:
.1654	4c fc 1e	jmp $1efc		jmp	ErrorV_range
.1657					_BCCopyZTemp1:
.1657	b2 2e		lda ($2e)			lda 	(zTemp1) 					; bytes to copy
.1659	f0 15		beq $1670			beq 	_BCCExit 					; none.
.165b	da		phx				phx 								; save XY
.165c	5a		phy				phy
.165d	aa		tax				tax 								; count in X.
.165e	a0 01		ldy #$01			ldy 	#1
.1660					_BCCLoop:
.1660	e6 22		inc $22				inc 	zsTemp 						; bump pointer, pre-increment
.1662	d0 02		bne $1666			bne 	_BCCNoCarry
.1664	e6 23		inc $23				inc 	zsTemp+1
.1666					_BCCNoCarry:
.1666	b1 2e		lda ($2e),y			lda 	(zTemp1),y				 	; copy bytes
.1668	92 22		sta ($22)			sta 	(zsTemp)
.166a	c8		iny				iny
.166b	ca		dex				dex 								; X times
.166c	d0 f2		bne $1660			bne 	_BCCLoop
.166e	7a		ply				ply 								; restore YX
.166f	fa		plx				plx
.1670					_BCCExit:
.1670	60		rts				rts
.1671					XRuntimeSetup:
.1671	a9 ff		lda #$ff	 		lda 	#$FF 						; default banks to access.
.1673	8d 6d 05	sta $056d	 		sta 	ramBank
.1676	8d 6e 05	sta $056e	 		sta 	romBank
.1679	60		rts				rts
.167a					SignTOS:
.167a	fa		plx				plx
.167b	20 93 26	jsr $2693			jsr 	FloatIsZero 				; if zero
.167e	f0 0f		beq $168f			beq 	_SGZero  					; return Int Zero
.1680	b5 32		lda $32,x			lda 	NSStatus,x 					; get status w/sign
.1682	48		pha				pha
.1683	a9 01		lda #$01			lda 	#1 							; set result to 1
.1685	20 73 26	jsr $2673			jsr 	FloatSetByte
.1688	68		pla				pla
.1689	29 80		and #$80			and		#$80 						; copy the sign byte out
.168b	95 32		sta $32,x			sta 	NSStatus,x  				; so it will be -1 or 1
.168d	80 03		bra $1692			bra 	_SGExit
.168f					_SGZero:
.168f	20 71 26	jsr $2671			jsr 	FloatSetZero
.1692					_SGExit:
.1692	4c 38 08	jmp $0838			jmp 	NextCommand
.1695					CommandShift:
.1695	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted command (X already pushed)
.1697	c8		iny				iny
.1698	0a		asl a				asl 	a 							; double into X
.1699	aa		tax				tax
.169a	7c 49 1a	jmp ($1a49,x)			jmp 	(ShiftVectorTable,x) 		; go there.
.169d					PrintTab:
.169d	fa		plx				plx
.169e	20 ef 1b	jsr $1bef			jsr 	XGetHPos
.16a1					_PTMod10:
.16a1	38		sec				sec
.16a2	e9 0a		sbc #$0a			sbc 	#10
.16a4	b0 fb		bcs $16a1			bcs 	_PTMod10
.16a6	49 ff		eor #$ff			eor 	#255 						; subtract from 10 effectively. negate it
.16a8	1a		inc a				inc 	a 							; if modulus is 0, then this will be -10 => 10
.16a9	80 15		bra $16c0			bra 	PrintSpaceLoop
.16ab					PrintPos:
.16ab	fa		plx				plx
.16ac	20 ef 1b	jsr $1bef			jsr		XGetHPos 					; get current position
.16af	85 2c		sta $2c				sta 	zTemp0
.16b1	38		sec				sec 								; calculate spaces required
.16b2	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.16b4	ca		dex				dex
.16b5	e5 2c		sbc $2c				sbc 	zTemp0
.16b7	b0 07		bcs $16c0			bcs 	PrintSpaceLoop 				; if >= 0 then do that many spaces
.16b9	4c 38 08	jmp $0838			jmp 	NextCommand
.16bc					PrintSpace:
.16bc	fa		plx				plx
.16bd	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.16bf	ca		dex				dex
.16c0					PrintSpaceLoop:
.16c0	c9 00		cmp #$00			cmp 	#0
.16c2	f0 0a		beq $16ce			beq 	_PSExit
.16c4	48		pha				pha
.16c5	a9 20		lda #$20			lda 	#" "
.16c7	20 61 13	jsr $1361			jsr 	VectorPrintCharacter
.16ca	68		pla				pla
.16cb	3a		dec a				dec 	a
.16cc	80 f2		bra $16c0			bra 	PrintSpaceLoop
.16ce					_PSExit:
.16ce	4c 38 08	jmp $0838			jmp 	NextCommand
.16d1					CommandStop:
.16d1	fa		plx				plx
.16d2	4c ae 1f	jmp $1fae		jmp	ErrorV_stop
.16d5					Unary_Str:
.16d5	fa		plx				plx
.16d6	5a		phy				phy
.16d7	a9 08		lda #$08			lda 	#8 							; maximum decimal places.
.16d9	20 59 25	jsr $2559			jsr 	FloatToString 				; do the conversion.
.16dc	a9 21		lda #$21			lda		#33 						; create buffer
.16de	20 1a 17	jsr $171a			jsr 	StringAllocTemp 			; allocate memory
.16e1	a0 01		ldy #$01			ldy 	#1  						; copy the converted string into the buffer.
.16e3					_USCopy:
.16e3	b9 97 05	lda $0597,y			lda 	decimalBuffer-1,y
.16e6	f0 05		beq $16ed			beq 	_USExit
.16e8	91 22		sta ($22),y			sta 	(zsTemp),y
.16ea	c8		iny				iny
.16eb	80 f6		bra $16e3			bra 	_USCopy
.16ed					_USExit:
.16ed	98		tya				tya
.16ee	3a		dec a				dec 	a
.16ef	92 22		sta ($22)			sta 	(zsTemp)
.16f1	7a		ply				ply
.16f2	4c 38 08	jmp $0838			jmp 	NextCommand
.16f5					StringInitialise:
.16f5	48		pha				pha
.16f6	ad 6a 05	lda $056a			lda 	stringInitialised 			; already done
.16f9	d0 11		bne $170c			bne 	_SIExit
.16fb	ad 02 04	lda $0402			lda 	stringHighMemory 			; copy high memory - 512 => stringTempPointer
.16fe	8d 6b 05	sta $056b			sta 	stringTempPointer
.1701	ad 03 04	lda $0403			lda 	stringHighMemory+1
.1704	3a		dec a				dec 	a
.1705	3a		dec a				dec 	a
.1706	8d 6c 05	sta $056c			sta 	stringTempPointer+1
.1709	ce 6a 05	dec $056a			dec 	stringInitialised 			; set the initialised flag.
.170c					_SIExit:
.170c	a5 27		lda $27				lda 	availableMemory+1 			; check out of memory
.170e	1a		inc a				inc 	a
.170f	1a		inc a				inc 	a
.1710	cd 03 04	cmp $0403			cmp 	stringHighMemory+1
.1713	b0 02		bcs $1717			bcs 	_SIMemory
.1715	68		pla				pla
.1716	60		rts				rts
.1717					_SIMemory:
.1717	4c 07 20	jmp $2007		jmp	ErrorV_memory
.171a					StringAllocTemp:
.171a	20 f5 16	jsr $16f5			jsr 	StringInitialise 			; check it is initialised.
.171d	49 ff		eor #$ff			eor 	#$FF 						; subtract A+1 from temp pointer.
.171f	18		clc				clc
.1720	6d 6b 05	adc $056b			adc 	stringTempPointer 			; subtract 32 from temp pointer and
.1723	8d 6b 05	sta $056b			sta 	stringTempPointer 			; save in zsTemp and stackas well.
.1726	85 22		sta $22				sta 	zsTemp
.1728	95 3e		sta $3e,x			sta 	NSMantissa0,x
.172a	ad 6c 05	lda $056c			lda 	stringTempPointer+1
.172d	69 ff		adc #$ff			adc 	#$FF
.172f	8d 6c 05	sta $056c			sta 	stringTempPointer+1
.1732	85 23		sta $23				sta 	zsTemp+1
.1734	95 4a		sta $4a,x			sta 	NSMantissa1,x
.1736	74 56		stz $56,x			stz 	NSMantissa2,x
.1738	74 62		stz $62,x			stz 	NSMantissa3,x
.173a	a9 00		lda #$00			lda 	#0 							; clear string.
.173c	92 22		sta ($22)			sta 	(zsTemp)
.173e	a9 40		lda #$40			lda 	#NSSString 			 		; mark as string
.1740	95 32		sta $32,x			sta 	NSStatus,x
.1742	60		rts				rts
.1743					StringWriteChar:
.1743	5a		phy				phy
.1744	48		pha				pha
.1745	b2 22		lda ($22)			lda 	(zsTemp)
.1747	1a		inc a				inc 	a
.1748	92 22		sta ($22)			sta 	(zsTemp)
.174a	a8		tay				tay
.174b	68		pla				pla
.174c	91 22		sta ($22),y			sta 	(zsTemp),y
.174e	7a		ply				ply
.174f	60		rts				rts
.056a					stringInitialised:
>056a							.fill 	1
.056b					stringTempPointer:
>056b							.fill 	2
.1750					Unary_Left:
.1750	fa		plx				plx
.1751	5a		phy				phy
.1752	18		clc				clc 								; only one parameter
.1753	20 2a 10	jsr $102a			jsr 	GetInteger8Bit 				; push the length of the string.
.1756	48		pha				pha
.1757	ca		dex				dex
.1758	a9 00		lda #$00			lda 	#0 							; push the start position.
.175a	48		pha				pha
.175b	20 93 17	jsr $1793			jsr 	UnarySStringToZTemp0
.175e	80 3c		bra $179c			bra 	SubstringMain 				; stack now points to the string to slice.
.1760					Unary_Right:
.1760	fa		plx				plx
.1761	5a		phy				phy
.1762	a9 ff		lda #$ff			lda 	#255 						; push 255, we want all the string.
.1764	20 2a 10	jsr $102a			jsr 	GetInteger8Bit 				; push the right length of the string.
.1767	48		pha				pha
.1768	ca		dex				dex
.1769	20 93 17	jsr $1793			jsr 	UnarySStringToZTemp0
.176c	68		pla				pla 								; this is the right requirement
.176d	38		sec				sec
.176e	49 ff		eor #$ff			eor 	#$FF
.1770	72 2c		adc ($2c)			adc 	(zTemp0)
.1772	b0 02		bcs $1776			bcs 	_URHaveCount
.1774	a9 00		lda #$00			lda 	#0 							; overflow, start from 0
.1776					_URHaveCount:
.1776	a0 ff		ldy #$ff			ldy 	#255 						; whole string
.1778	5a		phy				phy
.1779	48		pha				pha 								; start position
.177a	80 20		bra $179c			bra 	SubstringMain
.177c					Unary_Mid:
.177c	fa		plx				plx
.177d	5a		phy				phy
.177e	20 2a 10	jsr $102a			jsr 	GetInteger8Bit 				; push the length of the string required.
.1781	48		pha				pha
.1782	ca		dex				dex
.1783	20 2a 10	jsr $102a			jsr 	GetInteger8Bit 				; put the start position.
.1786	f0 08		beq $1790			beq 	_UMError
.1788	3a		dec a				dec 	a
.1789	48		pha				pha
.178a	ca		dex				dex
.178b	20 93 17	jsr $1793			jsr 	UnarySStringToZTemp0
.178e	80 0c		bra $179c			bra 	SubstringMain 				; stack now points to the string to slice.
.1790					_UMError:
.1790	4c fc 1e	jmp $1efc		jmp	ErrorV_range
.1793					UnarySStringToZTemp0:
.1793	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.1795	85 2c		sta $2c				sta 	zTemp0
.1797	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.1799	85 2d		sta $2d				sta 	zTemp0+1
.179b	60		rts				rts
.179c					SubstringMain:
.179c	68		pla				pla 								; get the start offset
.179d	7a		ply				ply 								; get the count to do.
.179e	d2 2c		cmp ($2c)			cmp 	(zTemp0) 					; if start >= length then return NULL.
.17a0	b0 38		bcs $17da			bcs 	_SSReturnNull
.17a2	85 2e		sta $2e				sta 	zTemp1 						; save start position.
.17a4	84 2f		sty $2f				sty 	zTemp1+1 					; save count
.17a6	18		clc				clc
.17a7	65 2f		adc $2f				adc 	zTemp1+1 					; this is the end position.
.17a9	b0 06		bcs $17b1			bcs 	_SMTruncateToEnd 			; if overflow, limit to length-start.
.17ab	d2 2c		cmp ($2c)			cmp 	(zTemp0) 					; ok if limit is <= length.
.17ad	f0 04		beq $17b3			beq 	_SMIsOkay
.17af	90 02		bcc $17b3			bcc 	_SMIsOkay
.17b1					_SMTruncateToEnd:
.17b1	b2 2c		lda ($2c)			lda 	(zTemp0) 					; end position is length.
.17b3					_SMIsOkay:
.17b3	85 2f		sta $2f				sta 	zTemp1+1
.17b5	38		sec				sec		 							; work out size
.17b6	a5 2f		lda $2f				lda 	zTemp1+1
.17b8	e5 2e		sbc $2e				sbc 	zTemp1
.17ba	f0 1e		beq $17da			beq 	_SSReturnNull 				; if size = 0 then return empty string.
.17bc	20 1a 17	jsr $171a			jsr 	StringAllocTemp 			; zsTemp & mantissa = the new string.
.17bf	a4 2e		ldy $2e				ldy 	zTemp1 						; start
.17c1					_SMCopy:
.17c1	c4 2f		cpy $2f				cpy 	zTemp1+1 					; exit if reached end
.17c3	f0 11		beq $17d6			beq 	_SMExit
.17c5	c8		iny				iny 								; bump and
.17c6	b1 2c		lda ($2c),y			lda 	(zTemp0),y 					; get character (prefix)
.17c8	5a		phy				phy
.17c9	48		pha				pha
.17ca	b2 22		lda ($22)			lda 	(zsTemp) 					; bump length => Y
.17cc	1a		inc a				inc 	a
.17cd	a8		tay				tay
.17ce	92 22		sta ($22)			sta 	(zsTemp)
.17d0	68		pla				pla 								; write character out
.17d1	91 22		sta ($22),y			sta 	(zsTemp),y
.17d3	7a		ply				ply 								; restore Y
.17d4	80 eb		bra $17c1			bra 	_SMCopy
.17d6					_SMExit:
.17d6	7a		ply				ply
.17d7	4c 38 08	jmp $0838			jmp 	NextCommand
.17da					_SSReturnNull:
.17da	a9 ec		lda #$ec			lda 	#SSRNull & $FF 				; set up mantissa
.17dc	95 3e		sta $3e,x			sta 	NSMantissa0,x
.17de	a9 17		lda #$17			lda 	#SSRNull >> 8
.17e0	95 4a		sta $4a,x			sta 	NSMantissa1,x
.17e2	74 56		stz $56,x			stz 	NSMantissa2,x
.17e4	74 62		stz $62,x			stz 	NSMantissa3,x
.17e6	a9 40		lda #$40			lda 	#NSSString
.17e8	95 32		sta $32,x			sta 	NSStatus,x
.17ea	80 ea		bra $17d6			bra 	_SMExit
.17ec					SSRNull:
>17ec	00 00						.word 	0
.17ee					CommandSwap:
.17ee	fa		plx				plx
.17ef	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.17f1	48		pha				pha
.17f2	b5 3d		lda $3d,x			lda 	NSMantissa0-1,x
.17f4	95 3e		sta $3e,x			sta 	NSMantissa0,x
.17f6	68		pla				pla
.17f7	95 3d		sta $3d,x			sta 	NSMantissa0-1,x
.17f9	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.17fb	48		pha				pha
.17fc	b5 49		lda $49,x			lda 	NSMantissa1-1,x
.17fe	95 4a		sta $4a,x			sta 	NSMantissa1,x
.1800	68		pla				pla
.1801	95 49		sta $49,x			sta 	NSMantissa1-1,x
.1803	b5 56		lda $56,x			lda 	NSMantissa2,x
.1805	48		pha				pha
.1806	b5 55		lda $55,x			lda 	NSMantissa2-1,x
.1808	95 56		sta $56,x			sta 	NSMantissa2,x
.180a	68		pla				pla
.180b	95 55		sta $55,x			sta 	NSMantissa2-1,x
.180d	b5 62		lda $62,x			lda 	NSMantissa3,x
.180f	48		pha				pha
.1810	b5 61		lda $61,x			lda 	NSMantissa3-1,x
.1812	95 62		sta $62,x			sta 	NSMantissa3,x
.1814	68		pla				pla
.1815	95 61		sta $61,x			sta 	NSMantissa3-1,x
.1817	b5 6e		lda $6e,x			lda 	NSExponent,x
.1819	48		pha				pha
.181a	b5 6d		lda $6d,x			lda 	NSExponent-1,x
.181c	95 6e		sta $6e,x			sta 	NSExponent,x
.181e	68		pla				pla
.181f	95 6d		sta $6d,x			sta 	NSExponent-1,x
.1821	b5 32		lda $32,x			lda 	NSStatus,x
.1823	48		pha				pha
.1824	b5 31		lda $31,x			lda 	NSStatus-1,x
.1826	95 32		sta $32,x			sta 	NSStatus,x
.1828	68		pla				pla
.1829	95 31		sta $31,x			sta 	NSStatus-1,x
.182b	4c 38 08	jmp $0838			jmp 	NextCommand
.182e					CommandSYS:
.182e	fa		plx				plx
.182f	da		phx				phx 								; save XY
.1830	5a		phy				phy
.1831	20 ac 22	jsr $22ac			jsr 	FloatIntegerPart
.1834	b5 4a		lda $4a,x			lda 	NSMantissa1,x 				; get call address => zTemp0
.1836	85 2d		sta $2d				sta 	zTemp0+1
.1838	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.183a	85 2c		sta $2c				sta 	zTemp0
.183c	ae 0d 03	ldx $030d			ldx 	SYS_Reg_X 					; load registers
.183f	ac 0e 03	ldy $030e			ldy 	SYS_Reg_Y
.1842	ad 0f 03	lda $030f			lda 	SYS_Reg_S
.1845	48		pha				pha
.1846	ad 0c 03	lda $030c			lda 	SYS_Reg_A
.1849	28		plp				plp
.184a	20 61 18	jsr $1861			jsr 	_CSZTemp0
.184d	08		php				php
.184e	8e 0d 03	stx $030d			stx 	SYS_Reg_X 					; load registers
.1851	8c 0e 03	sty $030e			sty 	SYS_Reg_Y
.1854	8d 0c 03	sta $030c			sta 	SYS_Reg_A
.1857	68		pla				pla
.1858	8d 0f 03	sta $030f			sta 	SYS_Reg_S
.185b	7a		ply				ply 								; restore YX and drop 2
.185c	fa		plx				plx
.185d	ca		dex				dex
.185e	4c 38 08	jmp $0838			jmp 	NextCommand
.1861					_CSZTemp0:
.1861	6c 2c 00	jmp ($002c)			jmp 	(zTemp0)
.1864					TimeTOS:
.1864	fa		plx				plx
.1865	20 bf 18	jsr $18bf			jsr 	TIPushClock 				; push clock to TOS
.1868	4c 38 08	jmp $0838			jmp 	NextCommand
.186b					TimeString:
.186b	fa		plx				plx
.186c	20 bf 18	jsr $18bf			jsr 	TIPushClock 				; push clock to TOS
.186f	20 94 18	jsr $1894			jsr 	_TSDivMod60 				; result in seconds
.1872	20 94 18	jsr $1894			jsr 	_TSDivMod60 				; seconds
.1875	48		pha				pha
.1876	20 94 18	jsr $1894			jsr 	_TSDivMod60 				; minutes
.1879	48		pha				pha
.187a	a9 18		lda #$18			lda 	#24 						; hours
.187c	20 96 18	jsr $1896			jsr 	_TSDivModA
.187f	48		pha				pha
.1880	a9 06		lda #$06			lda 	#6
.1882	20 1a 17	jsr $171a			jsr 	StringAllocTemp
.1885	68		pla				pla
.1886	20 a6 18	jsr $18a6			jsr 	_TSWriteDecimal
.1889	68		pla				pla
.188a	20 a6 18	jsr $18a6			jsr 	_TSWriteDecimal
.188d	68		pla				pla
.188e	20 a6 18	jsr $18a6			jsr 	_TSWriteDecimal
.1891	4c 38 08	jmp $0838			jmp 	NextCommand
.1894					_TSDivMod60:
.1894	a9 3c		lda #$3c			lda 	#60
.1896					_TSDivModA:
.1896	e8		inx				inx
.1897	20 73 26	jsr $2673			jsr 	FloatSetByte
.189a	ca		dex				dex
.189b	20 07 22	jsr $2207			jsr 	Int32Divide
.189e	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; get modulus
.18a0	48		pha				pha
.18a1	20 f6 21	jsr $21f6			jsr 	NSMCopyPlusTwoToZero
.18a4	68		pla				pla
.18a5	60		rts				rts
.18a6					_TSWriteDecimal:
.18a6	da		phx				phx
.18a7	a2 30		ldx #$30			ldx 	#'0'
.18a9					_TSWDLoop:
.18a9	c9 0a		cmp #$0a			cmp 	#10
.18ab	90 05		bcc $18b2			bcc 	_TSWDEnd
.18ad	e9 0a		sbc #$0a			sbc 	#10
.18af	e8		inx				inx
.18b0	80 f7		bra $18a9			bra 	_TSWDLoop
.18b2					_TSWDEnd:
.18b2	48		pha				pha
.18b3	8a		txa				txa
.18b4	20 43 17	jsr $1743			jsr 	StringWriteChar
.18b7	68		pla				pla
.18b8	09 30		ora #$30			ora 	#'0'
.18ba	20 43 17	jsr $1743			jsr 	StringWriteChar
.18bd	fa		plx				plx
.18be	60		rts				rts
.18bf					TIPushClock:
.18bf	5a		phy				phy
.18c0	e8		inx				inx 								; push 0 on the stack
.18c1	20 71 26	jsr $2671			jsr 	FloatSetZero
.18c4	da		phx				phx
.18c5	20 ba 1c	jsr $1cba			jsr 	XReadClock 					; read time into YXA
.18c8	86 2c		stx $2c				stx 	zTemp0
.18ca	fa		plx				plx
.18cb	95 3e		sta $3e,x			sta 	NSMantissa0,x
.18cd	a5 2c		lda $2c				lda 	zTemp0
.18cf	95 4a		sta $4a,x			sta 	NSMantissa1,x
.18d1	98		tya				tya
.18d2	95 56		sta $56,x			sta 	NSMantissa2,x
.18d4	7a		ply				ply
.18d5	60		rts				rts
.18d6					CommandTIWrite:
.18d6	fa		plx				plx
.18d7	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; copy string address to ZSTemp
.18d9	85 22		sta $22				sta 	zsTemp
.18db	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.18dd	85 23		sta $23				sta 	zsTemp+1
.18df	b2 22		lda ($22)			lda 	(zsTemp) 					; check if it is six
.18e1	c9 06		cmp #$06			cmp 	#6
.18e3	d0 59		bne $193e			bne 	_CTIWError
.18e5	20 71 26	jsr $2671			jsr 	FloatSetZero
.18e8	20 0a 19	jsr $190a			jsr 	_CTIWDigitPair 				; do a digit pair 3 times
.18eb	20 0a 19	jsr $190a			jsr 	_CTIWDigitPair
.18ee	20 0a 19	jsr $190a			jsr 	_CTIWDigitPair
.18f1	a9 3c		lda #$3c			lda 	#60 						; multiply the result by 60.
.18f3	20 35 19	jsr $1935			jsr 	_CTIWMultiply
.18f6	da		phx				phx
.18f7	5a		phy				phy
.18f8	b5 4a		lda $4a,x			lda 	NSMantissa1,x 				; get time into YXA
.18fa	48		pha				pha
.18fb	b5 56		lda $56,x			lda 	NSMantissa2,x
.18fd	a8		tay				tay
.18fe	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.1900	fa		plx				plx
.1901	20 be 1c	jsr $1cbe			jsr 	XWriteClock 				; update the clock.
.1904	7a		ply				ply
.1905	fa		plx				plx
.1906	ca		dex				dex 								; throw result.
.1907	4c 38 08	jmp $0838			jmp 	NextCommand
.190a					_CTIWDigitPair:
.190a	a9 06		lda #$06			lda 	#6 							; x 6
.190c	20 35 19	jsr $1935			jsr 	_CTIWMultiply
.190f	20 1b 19	jsr $191b			jsr 	_CTIWAddDigit 				; add digit
.1912	a9 0a		lda #$0a			lda 	#10 						; x 10
.1914	20 35 19	jsr $1935			jsr 	_CTIWMultiply
.1917	20 1b 19	jsr $191b			jsr 	_CTIWAddDigit 				; add digit
.191a	60		rts				rts
.191b					_CTIWAddDigit:
.191b	e6 22		inc $22				inc 	zsTemp 						; pre-increment
.191d	d0 02		bne $1921			bne 	_CTIWASkip
.191f	e6 23		inc $23				inc 	zsTemp+1
.1921					_CTIWASkip:
.1921	b2 22		lda ($22)			lda 	(zsTemp) 					; read and validate it
.1923	38		sec				sec
.1924	e9 30		sbc #$30			sbc 	#"0"
.1926	90 16		bcc $193e			bcc 	_CTIWError
.1928	c9 0a		cmp #$0a			cmp 	#9+1
.192a	b0 12		bcs $193e			bcs 	_CTIWError
.192c	e8		inx				inx 								; store at +1
.192d	20 73 26	jsr $2673			jsr 	FloatSetByte
.1930	ca		dex				dex
.1931	20 fd 23	jsr $23fd			jsr 	FloatAddTopTwoStack
.1934	60		rts				rts
.1935					_CTIWMultiply:
.1935	e8		inx				inx
.1936	20 73 26	jsr $2673			jsr 	FloatSetByte
.1939	ca		dex				dex
.193a	20 7e 23	jsr $237e			jsr 	FloatMultiplyShort
.193d	60		rts				rts
.193e					_CTIWError:
.193e	4c 0c 1f	jmp $1f0c		jmp	ErrorV_value
.1941					UnaryUsr:
.1941	fa		plx				plx
.1942	5a		phy				phy
.1943	20 4a 19	jsr $194a			jsr 	_UUCallVector
.1946	7a		ply				ply
.1947	4c 38 08	jmp $0838			jmp 	NextCommand
.194a					_UUCallVector:
.194a	6c 11 03	jmp ($0311)			jmp 	(USRRoutineAddress)
.194d					ValUnary:
.194d	fa		plx				plx
.194e	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.1950	85 2c		sta $2c				sta 	zTemp0
.1952	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.1954	85 2d		sta $2d				sta 	zTemp0+1
.1956	20 61 19	jsr $1961			jsr 	ValEvaluateZTemp0
.1959	b0 03		bcs $195e			bcs 	_VUError 					; couldn't convert
.195b	4c 38 08	jmp $0838			jmp 	NextCommand
.195e					_VUError:
.195e	4c 0c 1f	jmp $1f0c		jmp	ErrorV_value
.1961					ValEvaluateZTemp0:
.1961	5a		phy				phy
.1962	b2 2c		lda ($2c)			lda 	(zTemp0) 					; check not empty string
.1964	f0 22		beq $1988			beq 	_VMCFail2
.1966	a0 00		ldy #$00			ldy 	#0 							; start position
.1968					_VMCSpaces:
.1968	c8		iny				iny 								; skip leading spaces
.1969	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.196b	c9 20		cmp #$20			cmp 	#" "
.196d	f0 f9		beq $1968			beq 	_VMCSpaces
.196f	48		pha				pha 								; save first character
.1970	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.1972	d0 01		bne $1975			bne 	_VMCStart
.1974	c8		iny				iny 								; skip over - if so.
.1975					_VMCStart:
.1975	38		sec				sec 								; initialise first time round.
.1976					_VMCNext:
.1976	98		tya				tya 								; reached end of string
.1977	3a		dec a				dec 	a
.1978	52 2c		eor ($2c)			eor 	(zTemp0) 					; compare length preserve carry.
.197a	f0 0f		beq $198b			beq 	_VMCSuccess 				; successful.
.197c	b1 2c		lda ($2c),y			lda 	(zTemp0),y 					; encode a number.
.197e	c8		iny				iny
.197f	20 55 24	jsr $2455			jsr 	FloatEncode 				; send it to the number-builder
.1982	90 03		bcc $1987			bcc 	_VMCFail 					; if failed, give up.
.1984	18		clc				clc 								; next time round, countinue
.1985	80 ef		bra $1976			bra 	_VMCNext
.1987					_VMCFail:
.1987	68		pla				pla
.1988					_VMCFail2:
.1988	7a		ply				ply
.1989	38		sec				sec
.198a	60		rts				rts
.198b					_VMCSuccess:
.198b	a9 00		lda #$00			lda 	#0 							; construct final
.198d	20 55 24	jsr $2455			jsr 	FloatEncode 				; by sending a duff value.
.1990	68		pla				pla 								; if it was -ve
.1991	c9 2d		cmp #$2d			cmp 	#"-"
.1993	d0 03		bne $1998			bne 	_VMCNotNegative
.1995	20 33 26	jsr $2633			jsr		FloatNegate 				; negate it.
.1998					_VMCNotNegative:
.1998	7a		ply				ply
.1999	18		clc				clc
.199a	60		rts				rts
.199b					VectorTable:
>199b	92 10					.word	LinkFloatAdd             ; $80 +
>199d	9b 10					.word	LinkFloatSubtract        ; $81 -
>199f	a4 10					.word	LinkFloatMultiply        ; $82 *
>19a1	ad 10					.word	LinkFloatDivide          ; $83 /
>19a3	b8 10					.word	LinkFloatPower           ; $84 ^
>19a5	db 08					.word	BinaryAnd                ; $85 and
>19a7	df 08					.word	BinaryOr                 ; $86 or
>19a9	c3 10					.word	LinkCompareGreater       ; $87 >
>19ab	cc 10					.word	LinkCompareEqual         ; $88 =
>19ad	d5 10					.word	LinkCompareLess          ; $89 <
>19af	de 10					.word	LinkCompareGreaterEqual  ; $8a >=
>19b1	e7 10					.word	LinkCompareNotEqual      ; $8b <>
>19b3	f0 10					.word	LinkCompareLessEqual     ; $8c <=
>19b5	c3 08					.word	AbsoluteTOS              ; $8d abs
>19b7	16 09					.word	ArrayConvert             ; $8e array
>19b9	be 09					.word	UnaryAsc                 ; $8f asc
>19bb	d9 09					.word	CommandAssert            ; $90 assert
>19bd	1a 0a					.word	Unary16Bin               ; $91 bin$
>19bf	44 0a					.word	PrintCharacterX          ; $92 print.chr
>19c1	4e 0a					.word	UnaryChr                 ; $93 chr$
>19c3	b3 0a					.word	CompareStrings           ; $94 s.cmp
>19c5	9f 0c					.word	CommandXFor              ; $95 for
>19c7	62 0d					.word	UnaryFre                 ; $96 fre
>19c9	7a 0d					.word	CommandXGet              ; $97 get
>19cb	a0 0d					.word	CommandReturn            ; $98 return
>19cd	e2 0d					.word	Command_PSET             ; $99 pset
>19cf	fc 0d					.word	Command_LINE             ; $9a line
>19d1	11 0e					.word	Command_RECT             ; $9b rect
>19d3	20 0e					.word	Command_FRAME            ; $9c frame
>19d5	2f 0e					.word	Command_CHAR             ; $9d char
>19d7	c6 0e					.word	Unary16Hex               ; $9e hex$
>19d9	6d 0f					.word	CommandXInput            ; $9f input
>19db	84 0f					.word	CommandInputString       ; $a0 input$
>19dd	9d 0f					.word	CommandInputReset        ; $a1 input.start
>19df	81 10					.word	UnaryLen                 ; $a2 len
>19e1	4d 11					.word	LinkFloatCompare         ; $a3 f.cmp
>19e3	56 11					.word	LinkDivideInt32          ; $a4 int.div
>19e5	d0 11					.word	NegateTOS                ; $a5 negate
>19e7	d7 11					.word	CommandNewLine           ; $a6 new.line
>19e9	e0 11					.word	CommandXNext             ; $a7 next
>19eb	c9 12					.word	NotTOS                   ; $a8 not
>19ed	e0 12					.word	CommandXOn               ; $a9 on
>19ef	fd 12					.word	CommandMoreOn            ; $aa moreon
>19f1	04 13					.word	UnaryPeek                ; $ab peek
>19f3	19 13					.word	UnaryPI                  ; $ac pi
>19f5	23 13					.word	CommandPOKE              ; $ad poke
>19f7	3b 13					.word	UnaryPos                 ; $ae pos
>19f9	45 13					.word	GetChannel               ; $af getchannel
>19fb	50 13					.word	SetChannel               ; $b0 setchannel
>19fd	73 13					.word	PrintNumber              ; $b1 print.n
>19ff	92 13					.word	PrintString              ; $b2 print.s
>1a01	f9 13					.word	CommandXRead             ; $b3 read
>1a03	13 14					.word	CommandReadString        ; $b4 read$
>1a05	b4 15					.word	UnaryRND                 ; $b5 rnd
>1a07	23 16					.word	StringConcatenate        ; $b6 concat
>1a09	7a 16					.word	SignTOS                  ; $b7 sgn
>1a0b	9d 16					.word	PrintTab                 ; $b8 print.tab
>1a0d	ab 16					.word	PrintPos                 ; $b9 print.pos
>1a0f	bc 16					.word	PrintSpace               ; $ba print.spc
>1a11	d5 16					.word	Unary_Str                ; $bb str$
>1a13	50 17					.word	Unary_Left               ; $bc left$
>1a15	60 17					.word	Unary_Right              ; $bd right$
>1a17	7c 17					.word	Unary_Mid                ; $be mid$
>1a19	ee 17					.word	CommandSwap              ; $bf swap
>1a1b	64 18					.word	TimeTOS                  ; $c0 ti
>1a1d	6b 18					.word	TimeString               ; $c1 ti$
>1a1f	41 19					.word	UnaryUsr                 ; $c2 usr
>1a21	4d 19					.word	ValUnary                 ; $c3 val
>1a23	b6 1b					.word	CommandClose             ; $c4 close
>1a25	c8 1b					.word	CommandExit              ; $c5 exit
>1a27	ce 1b					.word	CommandDebug             ; $c6 debug
>1a29	34 1c					.word	CommandXOpen             ; $c7 open
>1a2b	c8 1c					.word	CommandScreen            ; $c8 screen
>1a2d	ac 1e					.word	CommandVPOKE             ; $c9 vpoke
>1a2f	d1 1e					.word	CommandVPEEK             ; $ca vpeek
>1a31	95 16					.word	CommandShift             ; $cb .shift
>1a33	87 08					.word	PushByteCommand          ; $cc .byte
>1a35	9a 08					.word	PushWordCommand          ; $cd .word
>1a37	b5 13					.word	CommandPushN             ; $ce .float
>1a39	db 13					.word	CommandPushS             ; $cf .string
>1a3b	3b 0b					.word	CommandXData             ; $d0 .data
>1a3d	b1 0d					.word	CommandXGoto             ; $d1 .goto
>1a3f	94 0d					.word	CommandXGosub            ; $d2 .gosub
>1a41	c6 0d					.word	CommandGotoZ             ; $d3 .goto.z
>1a43	d4 0d					.word	CommandGotoNZ            ; $d4 .goto.nz
>1a45	c9 08					.word	CommandVarSpace          ; $d5 .varspace
>1a47	8c 15					.word	CommandRestoreX          ; $d6 .restore
.1a49					ShiftVectorTable:
>1a49	66 0a					.word	CommandClr               ; $cb80 clr
>1a4b	44 0b					.word	CommandXDIM              ; $cb81 dim
>1a4d	35 0c					.word	CommandEnd               ; $cb82 end
>1a4f	52 10					.word	UnaryJoy                 ; $cb83 joy
>1a51	f9 10					.word	LinkFloatIntegerPartDown ; $cb84 int
>1a53	02 11					.word	LinkFloatSquareRoot      ; $cb85 sqr
>1a55	13 11					.word	LinkFloatLogarithm       ; $cb86 log
>1a57	1e 11					.word	LinkFloatExponent        ; $cb87 exp
>1a59	27 11					.word	LinkFloatCosine          ; $cb88 cos
>1a5b	30 11					.word	LinkFloatSine            ; $cb89 sin
>1a5d	39 11					.word	LinkFloatTangent         ; $cb8a tan
>1a5f	42 11					.word	LinkFloatArcTan          ; $cb8b atn
>1a61	80 11					.word	XCommandMouse            ; $cb8c mouse
>1a63	95 11					.word	XUnaryMB                 ; $cb8d mb
>1a65	a2 11					.word	XUnaryMX                 ; $cb8e mx
>1a67	b3 11					.word	XUnaryMY                 ; $cb8f my
>1a69	d1 16					.word	CommandStop              ; $cb90 stop
>1a6b	2e 18					.word	CommandSYS               ; $cb91 sys
>1a6d	d6 18					.word	CommandTIWrite           ; $cb92 ti$.write
>1a6f	a5 1a					.word	CommandXWAIT             ; $cb93 wait
>1a71	f9 1b					.word	X16I2CPoke               ; $cb94 i2cpoke
>1a73	19 1c					.word	X16I2CPeek               ; $cb95 i2cpeek
>1a75	84 1c					.word	CommandBank              ; $cb96 bank
>1a77	d7 1c					.word	XCommandSleep            ; $cb97 sleep
>1a79	fb 1c					.word	X16_Audio_FMINIT         ; $cb98 fminit
>1a7b	09 1d					.word	X16_Audio_FMNOTE         ; $cb99 fmnote
>1a7d	1b 1d					.word	X16_Audio_FMDRUM         ; $cb9a fmdrum
>1a7f	2d 1d					.word	X16_Audio_FMINST         ; $cb9b fminst
>1a81	3f 1d					.word	X16_Audio_FMVIB          ; $cb9c fmvib
>1a83	51 1d					.word	X16_Audio_FMFREQ         ; $cb9d fmfreq
>1a85	62 1d					.word	X16_Audio_FMVOL          ; $cb9e fmvol
>1a87	74 1d					.word	X16_Audio_FMPAN          ; $cb9f fmpan
>1a89	86 1d					.word	X16_Audio_FMPLAY         ; $cba0 fmplay
>1a8b	97 1d					.word	X16_Audio_FMCHORD        ; $cba1 fmchord
>1a8d	a8 1d					.word	X16_Audio_FMPOKE         ; $cba2 fmpoke
>1a8f	ba 1d					.word	X16_Audio_PSGINIT        ; $cba3 psginit
>1a91	c8 1d					.word	X16_Audio_PSGNOTE        ; $cba4 psgnote
>1a93	da 1d					.word	X16_Audio_PSGVOL         ; $cba5 psgvol
>1a95	ec 1d					.word	X16_Audio_PSGWAV         ; $cba6 psgwav
>1a97	fe 1d					.word	X16_Audio_PSGFREQ        ; $cba7 psgfreq
>1a99	0f 1e					.word	X16_Audio_PSGPAN         ; $cba8 psgpan
>1a9b	21 1e					.word	X16_Audio_PSGPLAY        ; $cba9 psgplay
>1a9d	32 1e					.word	X16_Audio_PSGCHORD       ; $cbaa psgchord
>1a9f	43 1e					.word	CommandCls               ; $cbab cls
>1aa1	4c 1e					.word	CommandLocate            ; $cbac locate
>1aa3	73 1e					.word	CommandColor             ; $cbad color
.1aa5					CommandXWAIT:
.1aa5	fa		plx				plx
.1aa6	b5 3c		lda $3c,x			lda 	NSMantissa0-2,x 			; get wait address
.1aa8	85 2c		sta $2c				sta 	zTemp0
.1aaa	b5 48		lda $48,x			lda 	NSMantissa1-2,x
.1aac	85 2d		sta $2d				sta 	zTemp0+1
.1aae					_WaitLoop:
.1aae	b2 2c		lda ($2c)			lda 	(zTemp0) 					; read it
.1ab0	35 3d		and $3d,x			and 	NSMantissa0-1,x		 		; and with mask
.1ab2	55 3e		eor $3e,x			eor 	NSMantissa0-0,x 			; toggle
.1ab4	f0 f8		beq $1aae			beq 	_WaitLoop 					; keep going if zero
.1ab6	ca		dex				dex 								; drop 3.
.1ab7	ca		dex				dex
.1ab8	ca		dex				dex
.1ab9	4c 38 08	jmp $0838			jmp 	NextCommand
.1abc					WriteFloatCommand:
.1abc	fa		plx				plx
.1abd	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.1abf	85 2c		sta $2c				sta 	zTemp0 						; save in MSB
.1ac1	88		dey				dey 								; get the upper 3 bits
.1ac2	b1 28		lda ($28),y			lda 	(codePtr),y
.1ac4	29 07		and #$07			and 	#7
.1ac6	c8		iny				iny
.1ac7	c8		iny				iny
.1ac8	06 2c		asl $2c				asl 	zTemp0 						; shift zTemp0:A left
.1aca	2a		rol a				rol 	a 							; carry will be clear.
.1acb	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.1ace	85 2d		sta $2d				sta 	zTemp0+1
.1ad0	20 d6 1a	jsr $1ad6			jsr 	WriteFloatZTemp0Sub
.1ad3	4c 38 08	jmp $0838			jmp 	NextCommand
.1ad6					WriteFloatZTemp0Sub:
.1ad6	5a		phy				phy 								; ldart write
.1ad7	a0 01		ldy #$01			ldy 	#1
.1ad9	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.1adb	92 2c		sta ($2c)			sta 	(zTemp0)
.1add	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.1adf	91 2c		sta ($2c),y			sta 	(zTemp0),y
.1ae1	c8		iny				iny
.1ae2	b5 56		lda $56,x			lda 	NSMantissa2,x
.1ae4	91 2c		sta ($2c),y			sta 	(zTemp0),y
.1ae6	c8		iny				iny
.1ae7	b5 62		lda $62,x			lda 	NSMantissa3,x
.1ae9	91 2c		sta ($2c),y			sta 	(zTemp0),y
.1aeb	c8		iny				iny
.1aec	b5 6e		lda $6e,x			lda 	NSExponent,x
.1aee	91 2c		sta ($2c),y			sta 	(zTemp0),y
.1af0	c8		iny				iny
.1af1	b5 32		lda $32,x			lda 	NSStatus,x
.1af3	91 2c		sta ($2c),y			sta 	(zTemp0),y
.1af5	ca		dex				dex
.1af6	7a		ply				ply
.1af7	60		rts				rts
.1af8					WriteIntegerCommand:
.1af8	fa		plx				plx
.1af9	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.1afb	85 2c		sta $2c				sta 	zTemp0 						; save in MSB
.1afd	88		dey				dey 								; get the upper 3 bits
.1afe	b1 28		lda ($28),y			lda 	(codePtr),y
.1b00	29 07		and #$07			and 	#7
.1b02	c8		iny				iny
.1b03	c8		iny				iny
.1b04	06 2c		asl $2c				asl 	zTemp0 						; shift zTemp0:A left
.1b06	2a		rol a				rol 	a 							; carry will be clear.
.1b07	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.1b0a	85 2d		sta $2d				sta 	zTemp0+1
.1b0c	20 12 1b	jsr $1b12			jsr 	WriteIntegerZTemp0Sub
.1b0f	4c 38 08	jmp $0838			jmp 	NextCommand
.1b12					WriteIntegerZTemp0Sub:
.1b12	20 ac 22	jsr $22ac			jsr 	FloatIntegerPart
.1b15	5a		phy				phy 								; start write
.1b16	a0 01		ldy #$01			ldy 	#1
.1b18	b5 32		lda $32,x			lda 	NSStatus,x 					; negate 2's comp if -ve
.1b1a	30 0b		bmi $1b27			bmi 	_WIZNegative
.1b1c	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; +ve write
.1b1e	92 2c		sta ($2c)			sta 	(zTemp0)
.1b20	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.1b22	91 2c		sta ($2c),y			sta 	(zTemp0),y
.1b24	7a		ply				ply
.1b25	ca		dex				dex
.1b26	60		rts				rts
.1b27					_WIZNegative:
.1b27	38		sec				sec 								; -ve read
.1b28	a9 00		lda #$00			lda 	#0
.1b2a	f5 3e		sbc $3e,x			sbc 	NSMantissa0,x
.1b2c	92 2c		sta ($2c)			sta 	(zTemp0)
.1b2e	a9 00		lda #$00			lda 	#0
.1b30	f5 4a		sbc $4a,x			sbc 	NSMantissa1,x
.1b32	91 2c		sta ($2c),y			sta 	(zTemp0),y
.1b34	7a		ply				ply
.1b35	ca		dex				dex
.1b36	60		rts				rts
.1b37					WriteStringCommand:
.1b37	fa		plx				plx
.1b38	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.1b3a	85 2c		sta $2c				sta 	zTemp0 						; save in MSB
.1b3c	88		dey				dey 								; get the upper 3 bits
.1b3d	b1 28		lda ($28),y			lda 	(codePtr),y
.1b3f	29 07		and #$07			and 	#7
.1b41	c8		iny				iny
.1b42	c8		iny				iny
.1b43	06 2c		asl $2c				asl 	zTemp0 						; shift zTemp0:A left
.1b45	2a		rol a				rol 	a 							; carry will be clear.
.1b46	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.1b49	85 2d		sta $2d				sta 	zTemp0+1
.1b4b	20 51 1b	jsr $1b51			jsr 	WriteStringZTemp0Sub
.1b4e	4c 38 08	jmp $0838			jmp 	NextCommand
.1b51					WriteStringZTemp0Sub:
.1b51	5a		phy				phy
.1b52	a0 01		ldy #$01			ldy 	#1 							; if it is zero we must concrete whatever.
.1b54	b2 2c		lda ($2c)			lda 	(zTemp0)
.1b56	11 2c		ora ($2c),y			ora 	(zTemp0),y
.1b58	f0 1e		beq $1b78			beq 	_WSConcrete
.1b5a	b2 2c		lda ($2c)			lda 	(zTemp0) 					; put address of actual string in zTemp1
.1b5c	85 2e		sta $2e				sta 	zTemp1
.1b5e	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.1b60	85 2f		sta $2f				sta 	zTemp1+1
.1b62	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; copy source to zTemp2
.1b64	85 30		sta $30				sta 	zTemp2
.1b66	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.1b68	85 31		sta $31				sta 	zTemp2+1
.1b6a	b2 2e		lda ($2e)			lda 	(zTemp1) 					; space available
.1b6c	d2 30		cmp ($30)			cmp 	(zTemp2) 					; if >= required length then copy
.1b6e	b0 17		bcs $1b87			bcs 	_WSCopy
.1b70	a0 01		ldy #$01			ldy 	#1 							; set the 'available for reclaim' flag
.1b72	b1 2e		lda ($2e),y			lda 	(zTemp1),y
.1b74	09 80		ora #$80			ora 	#$80
.1b76	91 2e		sta ($2e),y			sta 	(zTemp1),y
.1b78					_WSConcrete:
.1b78	b5 4a		lda $4a,x			lda 	NSMantissa1,x 				; string in YA
.1b7a	a8		tay				tay
.1b7b	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.1b7d	20 f5 0a	jsr $0af5			jsr 	StringConcrete
.1b80	92 2c		sta ($2c)			sta 	(zTemp0) 					; save returned address
.1b82	98		tya				tya
.1b83	a0 01		ldy #$01			ldy 	#1
.1b85	91 2c		sta ($2c),y			sta 	(zTemp0),y
.1b87					_WSCopy
.1b87	18		clc				clc  								; copy target+2 to zTemp2
.1b88	b2 2c		lda ($2c)			lda 	(zTemp0)
.1b8a	69 02		adc #$02			adc 	#2
.1b8c	85 30		sta $30				sta 	zTemp2
.1b8e	a0 01		ldy #$01			ldy 	#1
.1b90	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.1b92	69 00		adc #$00			adc 	#0
.1b94	85 31		sta $31				sta 	zTemp2+1
.1b96	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; copy source to zTemp1
.1b98	85 2e		sta $2e				sta 	zTemp1
.1b9a	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.1b9c	85 2f		sta $2f				sta 	zTemp1+1
.1b9e	b2 2e		lda ($2e)			lda 	(zTemp1) 					; length of string .. 0 inclusive
.1ba0	a8		tay				tay
.1ba1					_WSCopyLoop:
.1ba1	b1 2e		lda ($2e),y			lda 	(zTemp1),y
.1ba3	91 30		sta ($30),y			sta 	(zTemp2),y
.1ba5	88		dey				dey
.1ba6	c0 ff		cpy #$ff			cpy 	#$FF
.1ba8	d0 f7		bne $1ba1			bne 	_WSCopyLoop
.1baa	ca		dex				dex
.1bab	7a		ply				ply
.1bac	60		rts				rts
.1bad					XCheckStop:
.1bad	20 e1 ff	jsr $ffe1			jsr 	$FFE1 						; check stop
.1bb0	f0 01		beq $1bb3			beq 	_XCSStop
.1bb2	60		rts				rts
.1bb3					_XCSStop:
.1bb3	4c 2e 20	jmp $202e		jmp	ErrorV_break
.1bb6					CommandClose:
.1bb6	fa		plx				plx
.1bb7	20 2a 10	jsr $102a			jsr 	GetInteger8Bit 				; channel to close
.1bba	cd 5f 04	cmp $045f			cmp 	currentChannel 				; is it the current channel
.1bbd	d0 03		bne $1bc2			bne 	_CCNotCurrent
.1bbf	9c 5f 04	stz $045f			stz 	currentChannel 				; effectively disables CMD
.1bc2					_CCNotCurrent:
.1bc2	20 c3 ff	jsr $ffc3			jsr 	X16_CLOSE 					; close the file
.1bc5	4c 38 08	jmp $0838			jmp 	NextCommand
.1bc8					CommandExit:
.1bc8	fa		plx				plx
.1bc9	86 2c		stx $2c				stx 	zTemp0 						; stack position.
.1bcb	4c ff ff	jmp $ffff			jmp 	$FFFF 						; exits the emulator.
.1bce					CommandDebug:
.1bce	fa		plx				plx
>1bcf	db						.byte 	$DB 						; causes a break in the emulator
.1bd0	4c 38 08	jmp $0838			jmp 	NextCommand
.1bd3					XGetCharacterFromChannel:
.1bd3	da		phx				phx
.1bd4	5a		phy				phy
.1bd5	e0 00		cpx #$00			cpx 	#0 							; is it default
.1bd7	d0 05		bne $1bde			bne 	_XGetChannel
.1bd9	20 cc ff	jsr $ffcc			jsr 	X16_CLRCHN 					; set default channel
.1bdc	80 08		bra $1be6			bra 	_XGetChar
.1bde					_XGetChannel:
.1bde	20 c6 ff	jsr $ffc6			jsr 	X16_CHKIN					; CHKIN set channel
.1be1	20 b7 ff	jsr $ffb7			jsr 	X16_READST 					; check okay
.1be4	d0 06		bne $1bec			bne 	_XGCError
.1be6					_XGetChar:
.1be6	20 e4 ff	jsr $ffe4			jsr 	X16_GETIN
.1be9	7a		ply				ply
.1bea	fa		plx				plx
.1beb	60		rts				rts
.1bec					_XGCError:
.1bec	4c 18 20	jmp $2018		jmp	ErrorV_channel
.1bef					XGetHPos:
.1bef	da		phx				phx
.1bf0	5a		phy				phy
.1bf1	38		sec				sec
.1bf2	20 f0 ff	jsr $fff0			jsr 	X16_PLOT
.1bf5	98		tya				tya
.1bf6	7a		ply				ply
.1bf7	fa		plx				plx
.1bf8	60		rts				rts
.1bf9					X16I2CPoke:
.1bf9	fa		plx				plx
.1bfa	5a		phy				phy
.1bfb	20 2a 10	jsr $102a			jsr 	GetInteger8Bit 				; value
.1bfe	48		pha				pha
.1bff	ca		dex				dex
.1c00	20 2a 10	jsr $102a			jsr 	GetInteger8Bit 				; register
.1c03	48		pha				pha
.1c04	ca		dex				dex
.1c05	20 2a 10	jsr $102a			jsr 	GetInteger8Bit 				; device
.1c08	aa		tax				tax
.1c09	7a		ply				ply
.1c0a	68		pla				pla
.1c0b	20 c9 fe	jsr $fec9			jsr 	X16_i2c_write_byte 			; write the byte out.
.1c0e	b0 06		bcs $1c16			bcs 	X16I2CError
.1c10	7a		ply				ply
.1c11	a2 ff		ldx #$ff			ldx 	#$FF
.1c13	4c 38 08	jmp $0838			jmp 	NextCommand
.1c16					X16I2CError:
.1c16	4c 18 20	jmp $2018		jmp	ErrorV_channel
.1c19					X16I2CPeek:
.1c19	fa		plx				plx
.1c1a	da		phx				phx
.1c1b	5a		phy				phy
.1c1c	20 2a 10	jsr $102a			jsr 	GetInteger8Bit 				; register
.1c1f	48		pha				pha
.1c20	ca		dex				dex
.1c21	20 2a 10	jsr $102a			jsr 	GetInteger8Bit 				; device
.1c24	aa		tax				tax 								; X device
.1c25	7a		ply				ply 								; Y register
.1c26	20 c6 fe	jsr $fec6			jsr 	X16_i2c_read_byte 			; read I2C
.1c29	b0 eb		bcs $1c16			bcs 	X16I2CError
.1c2b	7a		ply				ply 								; restore Y/X
.1c2c	fa		plx				plx
.1c2d	ca		dex				dex 								; drop TOS (register)
.1c2e	20 73 26	jsr $2673			jsr 	FloatSetByte 				; write read value to TOS.
.1c31	4c 38 08	jmp $0838			jmp 	NextCommand
.1c34					CommandXOpen:
.1c34	fa		plx				plx
.1c35	a5 41		lda $41				lda 	NSMantissa0+3  				; point zTemp0 to string head, also in XY
.1c37	85 2c		sta $2c				sta 	zTemp0
.1c39	aa		tax				tax
.1c3a	a5 4d		lda $4d				lda 	NSMantissa1+3
.1c3c	85 2d		sta $2d				sta 	zTemp0+1
.1c3e	a8		tay				tay
.1c3f	e8		inx				inx 								; XY points to first character
.1c40	d0 01		bne $1c43			bne 	_CONoCarry
.1c42	c8		iny				iny
.1c43					_CONoCarry:
.1c43	b2 2c		lda ($2c)			lda 	(zTemp0) 					; get length of filename
.1c45	20 bd ff	jsr $ffbd			jsr 	X16_SETNAM
.1c48	a5 3e		lda $3e				lda 	NSMantissa0+0
.1c4a	a6 3f		ldx $3f				ldx 	NSMantissa0+1
.1c4c	a4 40		ldy $40				ldy 	NSMantissa0+2
.1c4e	20 ba ff	jsr $ffba			jsr 	X16_SETLFS
.1c51	20 c0 ff	jsr $ffc0			jsr 	X16_OPEN
.1c54	b0 03		bcs $1c59			bcs 	_COError
.1c56	4c 38 08	jmp $0838			jmp 	NextCommand
.1c59					_COError:
.1c59	4c 18 20	jmp $2018		jmp	ErrorV_channel
.1c5c					XPokeMemory:
.1c5c	86 2c		stx $2c				stx 	zTemp0
.1c5e	84 2d		sty $2d				sty 	zTemp0+1
.1c60	a4 00		ldy $00				ldy 	SelectRAMBank 				; old RAM bank in Y
.1c62	ae 6d 05	ldx $056d			ldx 	ramBank 					; switch to BANKed RAMBank if not $FF
.1c65	e0 ff		cpx #$ff			cpx 	#$FF
.1c67	f0 02		beq $1c6b			beq 	_XPMNoSwitch
.1c69	86 00		stx $00				stx 	SelectRAMBank
.1c6b					_XPMNoSwitch:
.1c6b	92 2c		sta ($2c)			sta 	(zTemp0) 					; do the POKE
.1c6d	84 00		sty $00				sty 	SelectRAMBank 				; reselect previous RAM Bank.
.1c6f					_XPMExit:
.1c6f	60		rts				rts
.1c70					XPeekMemory:
.1c70	86 2c		stx $2c				stx 	zTemp0
.1c72	84 2d		sty $2d				sty 	zTemp0+1
.1c74	a4 00		ldy $00				ldy 	SelectRAMBank 				; old RAM bank in Y
.1c76	ae 6d 05	ldx $056d			ldx 	ramBank 					; switch to BANKed RAMBank if not $FF
.1c79	e0 ff		cpx #$ff			cpx 	#$FF
.1c7b	f0 02		beq $1c7f			beq 	_XPMNoSwitch
.1c7d	86 00		stx $00				stx 	SelectRAMBank
.1c7f					_XPMNoSwitch:
.1c7f	b2 2c		lda ($2c)			lda 	(zTemp0) 					; do the PEEK
.1c81	84 00		sty $00				sty 	SelectRAMBank 				; reselect previous RAM bank.
.1c83	60		rts				rts
.1c84					CommandBank:
.1c84	fa		plx				plx
.1c85	a5 3e		lda $3e				lda 	NSMantissa0 				; RAM bank
.1c87	8d 6d 05	sta $056d			sta 	ramBank 					; store & make current
.1c8a	85 00		sta $00				sta 	SelectRAMBank
.1c8c	a5 3f		lda $3f				lda 	NSMantissa0+1 		 		; ROM specified
.1c8e	c9 ff		cmp #$ff			cmp 	#$FF
.1c90	f0 03		beq $1c95			beq 	_CBNoUpdate
.1c92	8d 6e 05	sta $056e			sta 	romBank 					; this doesn't set the hardware page.
.1c95					_CBNoUpdate:
.1c95	a2 ff		ldx #$ff			ldx 	#$FF
.1c97	4c 38 08	jmp $0838			jmp 	NextCommand
.056d					ramBank:
>056d							.fill 	1
.056e					romBank:
>056e							.fill 	1
.1c9a					XPrintCharacterToChannel:
.1c9a	48		pha				pha
.1c9b	da		phx				phx
.1c9c	5a		phy				phy
.1c9d	48		pha				pha  								; save char
.1c9e	e0 00		cpx #$00			cpx 	#0 							; check default (0)
.1ca0	d0 05		bne $1ca7			bne 	_XPCNotDefault
.1ca2	20 cc ff	jsr $ffcc			jsr 	X16_CLRCHN					; set default channel
.1ca5	80 08		bra $1caf			bra 	_XPCSend
.1ca7					_XPCNotDefault:
.1ca7	20 c9 ff	jsr $ffc9			jsr 	X16_CHKOUT 					; CHKOUT set channel
.1caa	20 b7 ff	jsr $ffb7			jsr 	X16_READST 					; check okay
.1cad	d0 08		bne $1cb7			bne 	_XPCError
.1caf					_XPCSend:
.1caf	68		pla				pla 								; restore character
.1cb0	20 d2 ff	jsr $ffd2			jsr 	X16_BSOUT 					; print
.1cb3	7a		ply				ply
.1cb4	fa		plx				plx
.1cb5	68		pla				pla
.1cb6	60		rts				rts
.1cb7					_XPCError:
.1cb7	4c 18 20	jmp $2018		jmp	ErrorV_channel
.1cba					XReadClock:
.1cba	20 de ff	jsr $ffde			jsr 	X16_RDTIM
.1cbd	60		rts				rts
.1cbe					XWriteClock:
.1cbe	48		pha				pha
.1cbf	da		phx				phx
.1cc0	5a		phy				phy
.1cc1	20 db ff	jsr $ffdb			jsr 	X16_SETTIM
.1cc4	7a		ply				ply
.1cc5	fa		plx				plx
.1cc6	68		pla				pla
.1cc7	60		rts				rts
.1cc8					CommandScreen:
.1cc8	fa		plx				plx
.1cc9	da		phx				phx
.1cca	5a		phy				phy
.1ccb	20 2a 10	jsr $102a			jsr 	GetInteger8Bit
.1cce	18		clc				clc
.1ccf	20 5f ff	jsr $ff5f			jsr 	X16_screen_mode
.1cd2	7a		ply				ply
.1cd3	fa		plx				plx
.1cd4	4c 38 08	jmp $0838			jmp 	NextCommand
.1cd7					XCommandSleep:
.1cd7	fa		plx				plx
.1cd8	5a		phy				phy
.1cd9	20 ac 22	jsr $22ac			jsr 	FloatIntegerPart
.1cdc	ca		dex				dex
.1cdd	20 ba 1c	jsr $1cba			jsr 	XReadClock 					; read clock to YXA
.1ce0	18		clc				clc 								; calculate end time in zTemp0
.1ce1	65 3e		adc $3e				adc 	NSMantissa0
.1ce3	85 2c		sta $2c				sta 	zTemp0
.1ce5	8a		txa				txa
.1ce6	65 4a		adc $4a				adc 	NSMantissa1
.1ce8	85 2d		sta $2d				sta 	zTemp0+1
.1cea					_XCWait:
.1cea	20 ba 1c	jsr $1cba			jsr 	XReadClock 					; and wait for it.
.1ced	c5 2c		cmp $2c				cmp 	zTemp0
.1cef	d0 f9		bne $1cea			bne 	_XCWait
.1cf1	e4 2d		cpx $2d				cpx 	zTemp0+1
.1cf3	d0 f5		bne $1cea			bne 	_XCWait
.1cf5	a2 ff		ldx #$ff			ldx 	#$FF
.1cf7	7a		ply				ply
.1cf8	4c 38 08	jmp $0838			jmp 	NextCommand
.1cfb					X16_Audio_FMINIT:
.1cfb	fa		plx				plx
.1cfc	5a		phy			phy
.1cfd	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1d00	63 c0					.word	X16A_ym_init
>1d02	0a					.byte	X16_AudioCodeBank
.1d03	a2 ff		ldx #$ff		ldx	#$FF
.1d05	7a		ply			ply
.1d06	4c 38 08	jmp $0838			jmp 	NextCommand
.1d09					X16_Audio_FMNOTE:
.1d09	fa		plx				plx
.1d0a	5a		phy			phy
.1d0b	20 f0 09	jsr $09f0		jsr		X16_Audio_Parameters8_8
.1d0e	18		clc			clc
.1d0f	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1d12	03 c0					.word	X16A_bas_fmnote
>1d14	0a					.byte	X16_AudioCodeBank
.1d15	a2 ff		ldx #$ff		ldx	#$FF
.1d17	7a		ply			ply
.1d18	4c 38 08	jmp $0838			jmp 	NextCommand
.1d1b					X16_Audio_FMDRUM:
.1d1b	fa		plx				plx
.1d1c	5a		phy			phy
.1d1d	20 f0 09	jsr $09f0		jsr		X16_Audio_Parameters8_8
.1d20	18		clc			clc
.1d21	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1d24	6f c0					.word	X16A_ym_playdrum
>1d26	0a					.byte	X16_AudioCodeBank
.1d27	a2 ff		ldx #$ff		ldx	#$FF
.1d29	7a		ply			ply
.1d2a	4c 38 08	jmp $0838			jmp 	NextCommand
.1d2d					X16_Audio_FMINST:
.1d2d	fa		plx				plx
.1d2e	5a		phy			phy
.1d2f	20 f0 09	jsr $09f0		jsr		X16_Audio_Parameters8_8
.1d32	38		sec			sec
.1d33	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1d36	69 c0					.word	X16A_ym_loadpatch
>1d38	0a					.byte	X16_AudioCodeBank
.1d39	a2 ff		ldx #$ff		ldx	#$FF
.1d3b	7a		ply			ply
.1d3c	4c 38 08	jmp $0838			jmp 	NextCommand
.1d3f					X16_Audio_FMVIB:
.1d3f	fa		plx				plx
.1d40	5a		phy			phy
.1d41	20 f0 09	jsr $09f0		jsr		X16_Audio_Parameters8_8
.1d44	18		clc			clc
.1d45	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1d48	09 c0					.word	X16A_bas_fmvib
>1d4a	0a					.byte	X16_AudioCodeBank
.1d4b	a2 ff		ldx #$ff		ldx	#$FF
.1d4d	7a		ply			ply
.1d4e	4c 38 08	jmp $0838			jmp 	NextCommand
.1d51					X16_Audio_FMFREQ:
.1d51	fa		plx				plx
.1d52	5a		phy			phy
.1d53	20 ea 09	jsr $09ea		jsr		X16_Audio_Parameters8_16
.1d56	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1d59	00 c0					.word	X16A_bas_fmfreq
>1d5b	0a					.byte	X16_AudioCodeBank
.1d5c	a2 ff		ldx #$ff		ldx	#$FF
.1d5e	7a		ply			ply
.1d5f	4c 38 08	jmp $0838			jmp 	NextCommand
.1d62					X16_Audio_FMVOL:
.1d62	fa		plx				plx
.1d63	5a		phy			phy
.1d64	20 f0 09	jsr $09f0		jsr		X16_Audio_Parameters8_8
.1d67	18		clc			clc
.1d68	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1d6b	75 c0					.word	X16A_ym_setatten
>1d6d	0a					.byte	X16_AudioCodeBank
.1d6e	a2 ff		ldx #$ff		ldx	#$FF
.1d70	7a		ply			ply
.1d71	4c 38 08	jmp $0838			jmp 	NextCommand
.1d74					X16_Audio_FMPAN:
.1d74	fa		plx				plx
.1d75	5a		phy			phy
.1d76	20 f0 09	jsr $09f0		jsr		X16_Audio_Parameters8_8
.1d79	18		clc			clc
.1d7a	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1d7d	7e c0					.word	X16A_ym_setpan
>1d7f	0a					.byte	X16_AudioCodeBank
.1d80	a2 ff		ldx #$ff		ldx	#$FF
.1d82	7a		ply			ply
.1d83	4c 38 08	jmp $0838			jmp 	NextCommand
.1d86					X16_Audio_FMPLAY:
.1d86	fa		plx				plx
.1d87	5a		phy			phy
.1d88	20 01 0a	jsr $0a01		jsr		X16_Audio_Parameters8_String
.1d8b	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1d8e	06 c0					.word	X16A_bas_fmplaystring
>1d90	0a					.byte	X16_AudioCodeBank
.1d91	a2 ff		ldx #$ff		ldx	#$FF
.1d93	7a		ply			ply
.1d94	4c 38 08	jmp $0838			jmp 	NextCommand
.1d97					X16_Audio_FMCHORD:
.1d97	fa		plx				plx
.1d98	5a		phy			phy
.1d99	20 01 0a	jsr $0a01		jsr		X16_Audio_Parameters8_String
.1d9c	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1d9f	8d c0					.word	X16A_bas_fmchordstring
>1da1	0a					.byte	X16_AudioCodeBank
.1da2	a2 ff		ldx #$ff		ldx	#$FF
.1da4	7a		ply			ply
.1da5	4c 38 08	jmp $0838			jmp 	NextCommand
.1da8					X16_Audio_FMPOKE:
.1da8	fa		plx				plx
.1da9	5a		phy			phy
.1daa	20 f0 09	jsr $09f0		jsr		X16_Audio_Parameters8_8
.1dad	18		clc			clc
.1dae	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1db1	8a c0					.word	X16A_ym_write
>1db3	0a					.byte	X16_AudioCodeBank
.1db4	a2 ff		ldx #$ff		ldx	#$FF
.1db6	7a		ply			ply
.1db7	4c 38 08	jmp $0838			jmp 	NextCommand
.1dba					X16_Audio_PSGINIT:
.1dba	fa		plx				plx
.1dbb	5a		phy			phy
.1dbc	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1dbf	4b c0					.word	X16A_psg_init
>1dc1	0a					.byte	X16_AudioCodeBank
.1dc2	a2 ff		ldx #$ff		ldx	#$FF
.1dc4	7a		ply			ply
.1dc5	4c 38 08	jmp $0838			jmp 	NextCommand
.1dc8					X16_Audio_PSGNOTE:
.1dc8	fa		plx				plx
.1dc9	5a		phy			phy
.1dca	20 f0 09	jsr $09f0		jsr		X16_Audio_Parameters8_8
.1dcd	18		clc			clc
.1dce	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1dd1	12 c0					.word	X16A_bas_psgnote
>1dd3	0a					.byte	X16_AudioCodeBank
.1dd4	a2 ff		ldx #$ff		ldx	#$FF
.1dd6	7a		ply			ply
.1dd7	4c 38 08	jmp $0838			jmp 	NextCommand
.1dda					X16_Audio_PSGVOL:
.1dda	fa		plx				plx
.1ddb	5a		phy			phy
.1ddc	20 f0 09	jsr $09f0		jsr		X16_Audio_Parameters8_8
.1ddf	18		clc			clc
.1de0	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1de3	54 c0					.word	X16A_psg_setatten
>1de5	0a					.byte	X16_AudioCodeBank
.1de6	a2 ff		ldx #$ff		ldx	#$FF
.1de8	7a		ply			ply
.1de9	4c 38 08	jmp $0838			jmp 	NextCommand
.1dec					X16_Audio_PSGWAV:
.1dec	fa		plx				plx
.1ded	5a		phy			phy
.1dee	20 f0 09	jsr $09f0		jsr		X16_Audio_Parameters8_8
.1df1	18		clc			clc
.1df2	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1df5	15 c0					.word	X16A_bas_psgwav
>1df7	0a					.byte	X16_AudioCodeBank
.1df8	a2 ff		ldx #$ff		ldx	#$FF
.1dfa	7a		ply			ply
.1dfb	4c 38 08	jmp $0838			jmp 	NextCommand
.1dfe					X16_Audio_PSGFREQ:
.1dfe	fa		plx				plx
.1dff	5a		phy			phy
.1e00	20 ea 09	jsr $09ea		jsr		X16_Audio_Parameters8_16
.1e03	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1e06	0f c0					.word	X16A_bas_psgfreq
>1e08	0a					.byte	X16_AudioCodeBank
.1e09	a2 ff		ldx #$ff		ldx	#$FF
.1e0b	7a		ply			ply
.1e0c	4c 38 08	jmp $0838			jmp 	NextCommand
.1e0f					X16_Audio_PSGPAN:
.1e0f	fa		plx				plx
.1e10	5a		phy			phy
.1e11	20 f0 09	jsr $09f0		jsr		X16_Audio_Parameters8_8
.1e14	18		clc			clc
.1e15	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1e18	5a c0					.word	X16A_psg_setpan
>1e1a	0a					.byte	X16_AudioCodeBank
.1e1b	a2 ff		ldx #$ff		ldx	#$FF
.1e1d	7a		ply			ply
.1e1e	4c 38 08	jmp $0838			jmp 	NextCommand
.1e21					X16_Audio_PSGPLAY:
.1e21	fa		plx				plx
.1e22	5a		phy			phy
.1e23	20 01 0a	jsr $0a01		jsr		X16_Audio_Parameters8_String
.1e26	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1e29	18 c0					.word	X16A_bas_psgplaystring
>1e2b	0a					.byte	X16_AudioCodeBank
.1e2c	a2 ff		ldx #$ff		ldx	#$FF
.1e2e	7a		ply			ply
.1e2f	4c 38 08	jmp $0838			jmp 	NextCommand
.1e32					X16_Audio_PSGCHORD:
.1e32	fa		plx				plx
.1e33	5a		phy			phy
.1e34	20 01 0a	jsr $0a01		jsr		X16_Audio_Parameters8_String
.1e37	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>1e3a	90 c0					.word	X16A_bas_psgchordstring
>1e3c	0a					.byte	X16_AudioCodeBank
.1e3d	a2 ff		ldx #$ff		ldx	#$FF
.1e3f	7a		ply			ply
.1e40	4c 38 08	jmp $0838			jmp 	NextCommand
.1e43					CommandCls:
.1e43	fa		plx				plx
.1e44	a9 93		lda #$93			lda 	#147
.1e46	20 9a 1c	jsr $1c9a			jsr 	XPrintCharacterToChannel
.1e49	4c 38 08	jmp $0838			jmp 	NextCommand
.1e4c					CommandLocate:
.1e4c	fa		plx				plx
.1e4d	20 ac 22	jsr $22ac			jsr 	FloatIntegerPart
.1e50	ca		dex				dex
.1e51	20 ac 22	jsr $22ac			jsr 	FloatIntegerPart
.1e54	ca		dex				dex
.1e55	48		pha				pha 								; save registers
.1e56	da		phx				phx
.1e57	5a		phy				phy
.1e58	18		clc				clc
.1e59	a4 3f		ldy $3f				ldy 	NSMantissa0+1 				; get coords
.1e5b	a6 3e		ldx $3e				ldx 	NSMantissa0
.1e5d	88		dey				dey 								; fix up
.1e5e	ca		dex				dex
.1e5f	20 f0 ff	jsr $fff0			jsr 	$FFF0 						; PLOT
.1e62	7a		ply				ply 								; restore registers
.1e63	fa		plx				plx
.1e64	68		pla				pla
.1e65	4c 38 08	jmp $0838			jmp 	NextCommand
.1e68					_CLOutputXA:
.1e68	ca		dex				dex
.1e69	f0 07		beq $1e72			beq 	_CLOExit
.1e6b	30 05		bmi $1e72			bmi 	_CLOExit
.1e6d	20 9a 1c	jsr $1c9a			jsr 	XPrintCharacterToChannel
.1e70	80 f6		bra $1e68			bra 	_CLOutputXA
.1e72					_CLOExit:
.1e72	60		rts				rts
.1e73					CommandColor:
.1e73	fa		plx				plx
.1e74	20 ac 22	jsr $22ac			jsr 	FloatIntegerPart
.1e77	ca		dex				dex
.1e78	20 ac 22	jsr $22ac			jsr 	FloatIntegerPart
.1e7b	ca		dex				dex
.1e7c	a5 3f		lda $3f				lda 	NSMantissa0+1 				; bgr specified
.1e7e	c9 ff		cmp #$ff			cmp 	#$FF
.1e80	f0 08		beq $1e8a			beq 	_CCNoBGR 					; if so, change background
.1e82	20 92 1e	jsr $1e92			jsr 	_CCSetColour
.1e85	a9 01		lda #$01			lda 	#$01 						; swap FGR/BGR
.1e87	20 9a 1c	jsr $1c9a			jsr 	XPrintCharacterToChannel
.1e8a					_CCNoBGR:
.1e8a	a5 3e		lda $3e				lda 	NSMantissa0
.1e8c	20 92 1e	jsr $1e92			jsr 	_CCSetColour
.1e8f	4c 38 08	jmp $0838			jmp 	NextCommand
.1e92					_CCSetColour:
.1e92	29 0f		and #$0f			and 	#15 						; look up in control codes table.
.1e94	aa		tax				tax
.1e95	bd 9c 1e	lda $1e9c,x			lda 	_CCCommandTable,x
.1e98	20 9a 1c	jsr $1c9a			jsr 	XPrintCharacterToChannel
.1e9b	60		rts				rts
.1e9c					_CCCommandTable:
>1e9c	90 05 1c 9f 9c 1e 1f 9e				.byte	 $90,$05,$1c,$9f,$9c,$1e,$1f,$9e
>1ea4	81 95 96 97 98 99 9a 9b				.byte	 $81,$95,$96,$97,$98,$99,$9a,$9b
.1eac					CommandVPOKE:
.1eac	fa		plx				plx
.1ead	20 2a 10	jsr $102a			jsr 	GetInteger8Bit 				; poke value
.1eb0	48		pha				pha
.1eb1	ca		dex				dex
.1eb2	20 ac 22	jsr $22ac			jsr 	FloatIntegerPart
.1eb5	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.1eb7	8d 20 9f	sta $9f20			sta 	VRAMLow0
.1eba	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.1ebc	8d 21 9f	sta $9f21			sta 	VRAMMed0
.1ebf	ca		dex				dex
.1ec0	20 ac 22	jsr $22ac			jsr 	FloatIntegerPart
.1ec3	20 2a 10	jsr $102a			jsr 	GetInteger8Bit
.1ec6	8d 22 9f	sta $9f22			sta 	VRAMHigh0
.1ec9	ca		dex				dex
.1eca	68		pla				pla 								; poke value back
.1ecb	8d 23 9f	sta $9f23			sta 	VRAMData0					; and write it out.
.1ece	4c 38 08	jmp $0838			jmp 	NextCommand
.1ed1					CommandVPEEK:
.1ed1	fa		plx				plx
.1ed2	20 ac 22	jsr $22ac			jsr 	FloatIntegerPart
.1ed5	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.1ed7	8d 20 9f	sta $9f20			sta 	VRAMLow0
.1eda	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.1edc	8d 21 9f	sta $9f21			sta 	VRAMMed0
.1edf	ca		dex				dex
.1ee0	20 ac 22	jsr $22ac			jsr 	FloatIntegerPart
.1ee3	20 2a 10	jsr $102a			jsr 	GetInteger8Bit
.1ee6	8d 22 9f	sta $9f22			sta 	VRAMHigh0
.1ee9	ad 23 9f	lda $9f23			lda 	VRAMData0					; read data
.1eec	20 73 26	jsr $2673			jsr 	FloatSetByte 				; return as byte
.1eef	4c 38 08	jmp $0838			jmp 	NextCommand

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/common.library

=$80					C64_END                  = $80 ; $80 end
=$81					C64_FOR                  = $81 ; $81 for
=$82					C64_NEXT                 = $82 ; $82 next
=$83					C64_DATA                 = $83 ; $83 data
=$84					C64_INPUTHASH            = $84 ; $84 input#
=$85					C64_INPUT                = $85 ; $85 input
=$86					C64_DIM                  = $86 ; $86 dim
=$87					C64_READ                 = $87 ; $87 read
=$88					C64_LET                  = $88 ; $88 let
=$89					C64_GOTO                 = $89 ; $89 goto
=$8a					C64_RUN                  = $8a ; $8a run
=$8b					C64_IF                   = $8b ; $8b if
=$8c					C64_RESTORE              = $8c ; $8c restore
=$8d					C64_GOSUB                = $8d ; $8d gosub
=$8e					C64_RETURN               = $8e ; $8e return
=$8f					C64_REM                  = $8f ; $8f rem
=$90					C64_STOP                 = $90 ; $90 stop
=$91					C64_ON                   = $91 ; $91 on
=$92					C64_WAIT                 = $92 ; $92 wait
=$93					C64_LOAD                 = $93 ; $93 load
=$94					C64_SAVE                 = $94 ; $94 save
=$95					C64_VERIFY               = $95 ; $95 verify
=$96					C64_DEF                  = $96 ; $96 def
=$97					C64_POKE                 = $97 ; $97 poke
=$98					C64_PRINTHASH            = $98 ; $98 print#
=$99					C64_PRINT                = $99 ; $99 print
=$9a					C64_CONT                 = $9a ; $9a cont
=$9b					C64_LIST                 = $9b ; $9b list
=$9c					C64_CLR                  = $9c ; $9c clr
=$9d					C64_CMD                  = $9d ; $9d cmd
=$9e					C64_SYS                  = $9e ; $9e sys
=$9f					C64_OPEN                 = $9f ; $9f open
=$a0					C64_CLOSE                = $a0 ; $a0 close
=$a1					C64_GET                  = $a1 ; $a1 get
=$a2					C64_NEW                  = $a2 ; $a2 new
=$a3					C64_TABLB                = $a3 ; $a3 tab(
=$a4					C64_TO                   = $a4 ; $a4 to
=$a5					C64_FN                   = $a5 ; $a5 fn
=$a6					C64_SPCLB                = $a6 ; $a6 spc(
=$a7					C64_THEN                 = $a7 ; $a7 then
=$a8					C64_NOT                  = $a8 ; $a8 not
=$a9					C64_STEP                 = $a9 ; $a9 step
=$aa					C64_PLUS                 = $aa ; $aa +
=$ab					C64_MINUS                = $ab ; $ab -
=$ac					C64_TIMES                = $ac ; $ac *
=$ad					C64_DIVIDE               = $ad ; $ad /
=$ae					C64_POWER                = $ae ; $ae ^
=$af					C64_AND                  = $af ; $af and
=$b0					C64_OR                   = $b0 ; $b0 or
=$b1					C64_GREATER              = $b1 ; $b1 >
=$b2					C64_EQUAL                = $b2 ; $b2 =
=$b3					C64_LESS                 = $b3 ; $b3 <
=$b4					C64_SGN                  = $b4 ; $b4 sgn
=$b5					C64_INT                  = $b5 ; $b5 int
=$b6					C64_ABS                  = $b6 ; $b6 abs
=$b7					C64_USR                  = $b7 ; $b7 usr
=$b8					C64_FRE                  = $b8 ; $b8 fre
=$b9					C64_POS                  = $b9 ; $b9 pos
=$ba					C64_SQR                  = $ba ; $ba sqr
=$bb					C64_RND                  = $bb ; $bb rnd
=$bc					C64_LOG                  = $bc ; $bc log
=$bd					C64_EXP                  = $bd ; $bd exp
=$be					C64_COS                  = $be ; $be cos
=$bf					C64_SIN                  = $bf ; $bf sin
=$c0					C64_TAN                  = $c0 ; $c0 tan
=$c1					C64_ATN                  = $c1 ; $c1 atn
=$c2					C64_PEEK                 = $c2 ; $c2 peek
=$c3					C64_LEN                  = $c3 ; $c3 len
=$c4					C64_STRDOLLAR            = $c4 ; $c4 str$
=$c5					C64_VAL                  = $c5 ; $c5 val
=$c6					C64_ASC                  = $c6 ; $c6 asc
=$c7					C64_CHRDOLLAR            = $c7 ; $c7 chr$
=$c8					C64_LEFTDOLLAR           = $c8 ; $c8 left$
=$c9					C64_RIGHTDOLLAR          = $c9 ; $c9 right$
=$ca					C64_MIDDOLLAR            = $ca ; $ca mid$
=$cb					C64_GO                   = $cb ; $cb go
=$ff					C64_PI                   = $ff ; $ff pi
=$ce80					C64_MON                  = $ce80 ; $ce80 mon
=$ce81					C64_DOS                  = $ce81 ; $ce81 dos
=$ce82					C64_OLD                  = $ce82 ; $ce82 old
=$ce83					C64_GEOS                 = $ce83 ; $ce83 geos
=$ce84					C64_VPOKE                = $ce84 ; $ce84 vpoke
=$ce85					C64_VLOAD                = $ce85 ; $ce85 vload
=$ce86					C64_SCREEN               = $ce86 ; $ce86 screen
=$ce87					C64_PSET                 = $ce87 ; $ce87 pset
=$ce88					C64_LINE                 = $ce88 ; $ce88 line
=$ce89					C64_FRAME                = $ce89 ; $ce89 frame
=$ce8a					C64_RECT                 = $ce8a ; $ce8a rect
=$ce8b					C64_CHAR                 = $ce8b ; $ce8b char
=$ce8c					C64_MOUSE                = $ce8c ; $ce8c mouse
=$ce8d					C64_COLOR                = $ce8d ; $ce8d color
=$ce8e					C64_TEST                 = $ce8e ; $ce8e test
=$ce8f					C64_RESET                = $ce8f ; $ce8f reset
=$ce90					C64_CLS                  = $ce90 ; $ce90 cls
=$ce91					C64_CODEX                = $ce91 ; $ce91 codex
=$ce92					C64_LOCATE               = $ce92 ; $ce92 locate
=$ce93					C64_BOOT                 = $ce93 ; $ce93 boot
=$ce94					C64_KEYMAP               = $ce94 ; $ce94 keymap
=$ce95					C64_BLOAD                = $ce95 ; $ce95 bload
=$ce96					C64_BVLOAD               = $ce96 ; $ce96 bvload
=$ce97					C64_BVERIFY              = $ce97 ; $ce97 bverify
=$ce98					C64_BANK                 = $ce98 ; $ce98 bank
=$ce99					C64_FMINIT               = $ce99 ; $ce99 fminit
=$ce9a					C64_FMNOTE               = $ce9a ; $ce9a fmnote
=$ce9b					C64_FMDRUM               = $ce9b ; $ce9b fmdrum
=$ce9c					C64_FMINST               = $ce9c ; $ce9c fminst
=$ce9d					C64_FMVIB                = $ce9d ; $ce9d fmvib
=$ce9e					C64_FMFREQ               = $ce9e ; $ce9e fmfreq
=$ce9f					C64_FMVOL                = $ce9f ; $ce9f fmvol
=$cea0					C64_FMPAN                = $cea0 ; $cea0 fmpan
=$cea1					C64_FMPLAY               = $cea1 ; $cea1 fmplay
=$cea2					C64_FMCHORD              = $cea2 ; $cea2 fmchord
=$cea3					C64_FMPOKE               = $cea3 ; $cea3 fmpoke
=$cea4					C64_PSGINIT              = $cea4 ; $cea4 psginit
=$cea5					C64_PSGNOTE              = $cea5 ; $cea5 psgnote
=$cea6					C64_PSGVOL               = $cea6 ; $cea6 psgvol
=$cea7					C64_PSGWAV               = $cea7 ; $cea7 psgwav
=$cea8					C64_PSGFREQ              = $cea8 ; $cea8 psgfreq
=$cea9					C64_PSGPAN               = $cea9 ; $cea9 psgpan
=$ceaa					C64_PSGPLAY              = $ceaa ; $ceaa psgplay
=$ceab					C64_PSGCHORD             = $ceab ; $ceab psgchord
=$ceac					C64_REBOOT               = $ceac ; $ceac reboot
=$cead					C64_POWEROFF             = $cead ; $cead poweroff
=$ceae					C64_I2CPOKE              = $ceae ; $ceae i2cpoke
=$ceaf					C64_SLEEP                = $ceaf ; $ceaf sleep
=$ceb0					C64_BSAVE                = $ceb0 ; $ceb0 bsave
=$ceb1					C64_MENU                 = $ceb1 ; $ceb1 menu
=$ceb2					C64_REN                  = $ceb2 ; $ceb2 ren
=$ceb3					C64_LINPUT               = $ceb3 ; $ceb3 linput
=$ceb4					C64_LINPUTHASH           = $ceb4 ; $ceb4 linput#
=$ceb5					C64_BINPUTHASH           = $ceb5 ; $ceb5 binput#
=$ceb6					C64_HELP                 = $ceb6 ; $ceb6 help
=$ceb7					C64_BANNER               = $ceb7 ; $ceb7 banner
=$ceb8					C64_EXEC                 = $ceb8 ; $ceb8 exec
=$ceb9					C64_TILE                 = $ceb9 ; $ceb9 tile
=$ceba					C64_EDIT                 = $ceba ; $ceba edit
=$ced0					C64_VPEEK                = $ced0 ; $ced0 vpeek
=$ced1					C64_MX                   = $ced1 ; $ced1 mx
=$ced2					C64_MY                   = $ced2 ; $ced2 my
=$ced3					C64_MB                   = $ced3 ; $ced3 mb
=$ced4					C64_JOY                  = $ced4 ; $ced4 joy
=$ced5					C64_HEXDOLLAR            = $ced5 ; $ced5 hex$
=$ced6					C64_BINDOLLAR            = $ced6 ; $ced6 bin$
=$ced7					C64_I2CPEEK              = $ced7 ; $ced7 i2cpeek
=$ced8					C64_POINTER              = $ced8 ; $ced8 pointer
=$ced9					C64_STRPTR               = $ced9 ; $ced9 strptr
=$ceda					C64_RPTDOLLAR            = $ceda ; $ceda rpt$
=$cedb					C64_MWHEEL               = $cedb ; $cedb mwheel
=$801					CodeStart = $801
=$22					ZeroPageMandatory = $22
=$400					MemoryStorage = $400
.0028					codePtr:
>0028							.fill 	2
.002a					objPtr:
>002a							.fill 	2
.002c					zTemp0:
>002c							.fill 	2
.002e					zTemp1:
>002e							.fill 	2
.0030					zTemp2:
>0030							.fill 	2
=$80					PCD_STARTBINARY = $80
=$8d					PCD_ENDBINARY = $8d
=$8d					PCD_STARTCOMMAND = $8d
=$cb					PCD_ENDCOMMAND = $cb
=$cb					PCD_STARTSYSTEM = $cb
=$d7					PCD_ENDSYSTEM = $d7
=$80					PCD_PLUS             = $80 ; +
=$81					PCD_MINUS            = $81 ; -
=$82					PCD_TIMES            = $82 ; *
=$83					PCD_DIVIDE           = $83 ; /
=$84					PCD_POWER            = $84 ; ^
=$85					PCD_AND              = $85 ; and
=$86					PCD_OR               = $86 ; or
=$87					PCD_GREATER          = $87 ; >
=$88					PCD_EQUAL            = $88 ; =
=$89					PCD_LESS             = $89 ; <
=$8a					PCD_GREATEREQUAL     = $8a ; >=
=$8b					PCD_LESSGREATER      = $8b ; <>
=$8c					PCD_LESSEQUAL        = $8c ; <=
=$8d					PCD_ABS              = $8d ; abs
=$8e					PCD_ARRAY            = $8e ; array
=$8f					PCD_ASC              = $8f ; asc
=$90					PCD_ASSERT           = $90 ; assert
=$91					PCD_BINDOLLAR        = $91 ; bin$
=$92					PCD_PRINTCMD_CHR     = $92 ; print.chr
=$93					PCD_CHRDOLLAR        = $93 ; chr$
=$94					PCD_SCMD_CMP         = $94 ; s.cmp
=$95					PCD_FOR              = $95 ; for
=$96					PCD_FRE              = $96 ; fre
=$97					PCD_GET              = $97 ; get
=$98					PCD_RETURN           = $98 ; return
=$99					PCD_PSET             = $99 ; pset
=$9a					PCD_LINE             = $9a ; line
=$9b					PCD_RECT             = $9b ; rect
=$9c					PCD_FRAME            = $9c ; frame
=$9d					PCD_CHAR             = $9d ; char
=$9e					PCD_HEXDOLLAR        = $9e ; hex$
=$9f					PCD_INPUT            = $9f ; input
=$a0					PCD_INPUTDOLLAR      = $a0 ; input$
=$a1					PCD_INPUTCMD_START   = $a1 ; input.start
=$a2					PCD_LEN              = $a2 ; len
=$a3					PCD_FCMD_CMP         = $a3 ; f.cmp
=$a4					PCD_INTCMD_DIV       = $a4 ; int.div
=$a5					PCD_NEGATE           = $a5 ; negate
=$a6					PCD_NEWCMD_LINE      = $a6 ; new.line
=$a7					PCD_NEXT             = $a7 ; next
=$a8					PCD_NOT              = $a8 ; not
=$a9					PCD_ON               = $a9 ; on
=$aa					PCD_MOREON           = $aa ; moreon
=$ab					PCD_PEEK             = $ab ; peek
=$ac					PCD_PI               = $ac ; pi
=$ad					PCD_POKE             = $ad ; poke
=$ae					PCD_POS              = $ae ; pos
=$af					PCD_GETCHANNEL       = $af ; getchannel
=$b0					PCD_SETCHANNEL       = $b0 ; setchannel
=$b1					PCD_PRINTCMD_N       = $b1 ; print.n
=$b2					PCD_PRINTCMD_S       = $b2 ; print.s
=$b3					PCD_READ             = $b3 ; read
=$b4					PCD_READDOLLAR       = $b4 ; read$
=$b5					PCD_RND              = $b5 ; rnd
=$b6					PCD_CONCAT           = $b6 ; concat
=$b7					PCD_SGN              = $b7 ; sgn
=$b8					PCD_PRINTCMD_TAB     = $b8 ; print.tab
=$b9					PCD_PRINTCMD_POS     = $b9 ; print.pos
=$ba					PCD_PRINTCMD_SPC     = $ba ; print.spc
=$bb					PCD_STRDOLLAR        = $bb ; str$
=$bc					PCD_LEFTDOLLAR       = $bc ; left$
=$bd					PCD_RIGHTDOLLAR      = $bd ; right$
=$be					PCD_MIDDOLLAR        = $be ; mid$
=$bf					PCD_SWAP             = $bf ; swap
=$c0					PCD_TI               = $c0 ; ti
=$c1					PCD_TIDOLLAR         = $c1 ; ti$
=$c2					PCD_USR              = $c2 ; usr
=$c3					PCD_VAL              = $c3 ; val
=$c4					PCD_CLOSE            = $c4 ; close
=$c5					PCD_EXIT             = $c5 ; exit
=$c6					PCD_DEBUG            = $c6 ; debug
=$c7					PCD_OPEN             = $c7 ; open
=$c8					PCD_SCREEN           = $c8 ; screen
=$c9					PCD_VPOKE            = $c9 ; vpoke
=$ca					PCD_VPEEK            = $ca ; vpeek
=$cb					PCD_CMD_SHIFT        = $cb ; .shift
=$cc					PCD_CMD_BYTE         = $cc ; .byte
=$cd					PCD_CMD_WORD         = $cd ; .word
=$ce					PCD_CMD_FLOAT        = $ce ; .float
=$cf					PCD_CMD_STRING       = $cf ; .string
=$d0					PCD_CMD_DATA         = $d0 ; .data
=$d1					PCD_CMD_GOTO         = $d1 ; .goto
=$d2					PCD_CMD_GOSUB        = $d2 ; .gosub
=$d3					PCD_CMD_GOTOCMD_Z    = $d3 ; .goto.z
=$d4					PCD_CMD_GOTOCMD_NZ   = $d4 ; .goto.nz
=$d5					PCD_CMD_VARSPACE     = $d5 ; .varspace
=$d6					PCD_CMD_RESTORE      = $d6 ; .restore
=$cb80					PCD_CLR              = $cb80 ; clr
=$cb81					PCD_DIM              = $cb81 ; dim
=$cb82					PCD_END              = $cb82 ; end
=$cb83					PCD_JOY              = $cb83 ; joy
=$cb84					PCD_INT              = $cb84 ; int
=$cb85					PCD_SQR              = $cb85 ; sqr
=$cb86					PCD_LOG              = $cb86 ; log
=$cb87					PCD_EXP              = $cb87 ; exp
=$cb88					PCD_COS              = $cb88 ; cos
=$cb89					PCD_SIN              = $cb89 ; sin
=$cb8a					PCD_TAN              = $cb8a ; tan
=$cb8b					PCD_ATN              = $cb8b ; atn
=$cb8c					PCD_MOUSE            = $cb8c ; mouse
=$cb8d					PCD_MB               = $cb8d ; mb
=$cb8e					PCD_MX               = $cb8e ; mx
=$cb8f					PCD_MY               = $cb8f ; my
=$cb90					PCD_STOP             = $cb90 ; stop
=$cb91					PCD_SYS              = $cb91 ; sys
=$cb92					PCD_TIDOLLARCMD_WRITE = $cb92 ; ti$.write
=$cb93					PCD_WAIT             = $cb93 ; wait
=$cb94					PCD_I2CPOKE          = $cb94 ; i2cpoke
=$cb95					PCD_I2CPEEK          = $cb95 ; i2cpeek
=$cb96					PCD_BANK             = $cb96 ; bank
=$cb97					PCD_SLEEP            = $cb97 ; sleep
=$cb98					PCD_FMINIT           = $cb98 ; fminit
=$cb99					PCD_FMNOTE           = $cb99 ; fmnote
=$cb9a					PCD_FMDRUM           = $cb9a ; fmdrum
=$cb9b					PCD_FMINST           = $cb9b ; fminst
=$cb9c					PCD_FMVIB            = $cb9c ; fmvib
=$cb9d					PCD_FMFREQ           = $cb9d ; fmfreq
=$cb9e					PCD_FMVOL            = $cb9e ; fmvol
=$cb9f					PCD_FMPAN            = $cb9f ; fmpan
=$cba0					PCD_FMPLAY           = $cba0 ; fmplay
=$cba1					PCD_FMCHORD          = $cba1 ; fmchord
=$cba2					PCD_FMPOKE           = $cba2 ; fmpoke
=$cba3					PCD_PSGINIT          = $cba3 ; psginit
=$cba4					PCD_PSGNOTE          = $cba4 ; psgnote
=$cba5					PCD_PSGVOL           = $cba5 ; psgvol
=$cba6					PCD_PSGWAV           = $cba6 ; psgwav
=$cba7					PCD_PSGFREQ          = $cba7 ; psgfreq
=$cba8					PCD_PSGPAN           = $cba8 ; psgpan
=$cba9					PCD_PSGPLAY          = $cba9 ; psgplay
=$cbaa					PCD_PSGCHORD         = $cbaa ; psgchord
=$cbab					PCD_CLS              = $cbab ; cls
=$cbac					PCD_LOCATE           = $cbac ; locate
=$cbad					PCD_COLOR            = $cbad ; color
.1ef2					SetErrorHandler:
.1ef2	8c 70 05	sty $0570			sty 	ErrorHandlerVector+1
.1ef5	8e 6f 05	stx $056f			stx 	ErrorHandlerVector
.1ef8	60		rts				rts
.1ef9					CallErrorHandler:
.1ef9	6c 6f 05	jmp ($056f)			jmp 	(ErrorHandlerVector)
.056f					ErrorHandlerVector:
>056f							.fill 	2
.1efc					ErrorV_range:
.1efc	20 f9 1e	jsr $1ef9		jsr	CallErrorHandler
>1eff	4f 55 54 20 4f 46 20 52			.text	"OUT OF RANGE",0
>1f07	41 4e 47 45 00
.1f0c					ErrorV_value:
.1f0c	20 f9 1e	jsr $1ef9		jsr	CallErrorHandler
>1f0f	42 41 44 20 56 41 4c 55			.text	"BAD VALUE",0
>1f17	45 00
.1f19					ErrorV_syntax:
.1f19	20 f9 1e	jsr $1ef9		jsr	CallErrorHandler
>1f1c	53 59 4e 54 41 58 20 45			.text	"SYNTAX ERROR",0
>1f24	52 52 4f 52 00
.1f29					ErrorV_type:
.1f29	20 f9 1e	jsr $1ef9		jsr	CallErrorHandler
>1f2c	54 59 50 45 20 4d 49 53			.text	"TYPE MISMATCH",0
>1f34	4d 41 54 43 48 00
.1f3a					ErrorV_unimplemented:
.1f3a	20 f9 1e	jsr $1ef9		jsr	CallErrorHandler
>1f3d	4e 4f 54 20 49 4d 50 4c			.text	"NOT IMPLEMENTED",0
>1f45	45 4d 45 4e 54 45 44 00
.1f4d					ErrorV_assert:
.1f4d	20 f9 1e	jsr $1ef9		jsr	CallErrorHandler
>1f50	41 53 53 45 52 54 20 46			.text	"ASSERT FAIL",0
>1f58	41 49 4c 00
.1f5c					ErrorV_line:
.1f5c	20 f9 1e	jsr $1ef9		jsr	CallErrorHandler
>1f5f	55 4e 4b 4e 4f 57 4e 20			.text	"UNKNOWN LINE NUMBER",0
>1f67	4c 49 4e 45 20 4e 55 4d 42 45 52 00
.1f73					ErrorV_internal:
.1f73	20 f9 1e	jsr $1ef9		jsr	CallErrorHandler
>1f76	49 4e 54 45 52 4e 41 4c			.text	"INTERNAL ERROR",0
>1f7e	20 45 52 52 4f 52 00
.1f85					ErrorV_divzero:
.1f85	20 f9 1e	jsr $1ef9		jsr	CallErrorHandler
>1f88	44 49 56 49 44 45 20 42			.text	"DIVIDE BY ZERO",0
>1f90	59 20 5a 45 52 4f 00
.1f97					ErrorV_structure:
.1f97	20 f9 1e	jsr $1ef9		jsr	CallErrorHandler
>1f9a	53 54 52 55 43 54 55 52			.text	"STRUCTURE IMBALANCE",0
>1fa2	45 20 49 4d 42 41 4c 41 4e 43 45 00
.1fae					ErrorV_stop:
.1fae	20 f9 1e	jsr $1ef9		jsr	CallErrorHandler
>1fb1	50 52 4f 47 52 41 4d 20			.text	"PROGRAM STOPPED",0
>1fb9	53 54 4f 50 50 45 44 00
.1fc1					ErrorV_data:
.1fc1	20 f9 1e	jsr $1ef9		jsr	CallErrorHandler
>1fc4	4f 55 54 20 4f 46 20 44			.text	"OUT OF DATA",0
>1fcc	41 54 41 00
.1fd0					ErrorV_undeclared:
.1fd0	20 f9 1e	jsr $1ef9		jsr	CallErrorHandler
>1fd3	55 4e 4b 4e 4f 57 4e 20			.text	"UNKNOWN ARRAY",0
>1fdb	41 52 52 41 59 00
.1fe1					ErrorV_redefine:
.1fe1	20 f9 1e	jsr $1ef9		jsr	CallErrorHandler
>1fe4	41 52 52 41 59 20 52 45			.text	"ARRAY REDEFINED",0
>1fec	44 45 46 49 4e 45 44 00
.1ff4					ErrorV_index:
.1ff4	20 f9 1e	jsr $1ef9		jsr	CallErrorHandler
>1ff7	42 41 44 20 41 52 52 41			.text	"BAD ARRAY INDEX",0
>1fff	59 20 49 4e 44 45 58 00
.2007					ErrorV_memory:
.2007	20 f9 1e	jsr $1ef9		jsr	CallErrorHandler
>200a	4f 55 54 20 4f 46 20 4d			.text	"OUT OF MEMORY",0
>2012	45 4d 4f 52 59 00
.2018					ErrorV_channel:
.2018	20 f9 1e	jsr $1ef9		jsr	CallErrorHandler
>201b	49 4e 50 55 54 2f 4f 55			.text	"INPUT/OUTPUT ERROR",0
>2023	54 50 55 54 20 45 52 52 4f 52 00
.202e					ErrorV_break:
.202e	20 f9 1e	jsr $1ef9		jsr	CallErrorHandler
>2031	42 52 45 41 4b 20 50 52			.text	"BREAK PRESSED",0
>2039	45 53 53 45 44 00
.203f					MoveObjectForward:
.203f	b2 2a		lda ($2a)			lda 	(objPtr) 					; get next
.2041	c9 ff		cmp #$ff			cmp 	#$FF
.2043	f0 36		beq $207b			beq 	_MOFEnd
.2045	c9 40		cmp #$40			cmp 	#$40 						; 00-3F
.2047	90 24		bcc $206d			bcc 	_MOFAdvance1 				; forward 1
.2049	a0 02		ldy #$02			ldy 	#2 							; 40-6F
.204b	c9 70		cmp #$70			cmp 	#$70 						; forward 2
.204d	90 20		bcc $206f			bcc 	_MOFAdvanceY
.204f	c9 cb		cmp #$cb			cmp 	#PCD_STARTSYSTEM 			; 70 - System tokens.
.2051	90 1a		bcc $206d			bcc 	_MOFAdvance1 				; forward 1
.2053	a8		tay				tay 								; read the size.
.2054	b9 b8 1f	lda $1fb8,y			lda 	MOFSizeTable-PCD_STARTSYSTEM,y
.2057	a8		tay				tay
.2058	c8		iny				iny 								; add 1 for the system token.
.2059	d0 14		bne $206f			bne 	_MOFAdvanceY 				; if 0, was $FF thus a string/data skip.
.205b	a0 01		ldy #$01			ldy 	#1 							; get length byte
.205d	b1 2a		lda ($2a),y			lda 	(objPtr),y
.205f	a8		tay				tay 								; into Y.
.2060	18		clc				clc
.2061	a5 2a		lda $2a				lda 	objPtr						; add 2 to the object pointer
.2063	69 02		adc #$02			adc 	#2
.2065	85 2a		sta $2a				sta 	objPtr
.2067	90 02		bcc $206b			bcc 	_MOFNoCarry1
.2069	e6 2b		inc $2b				inc 	objPtr+1
.206b					_MOFNoCarry1:
.206b	80 02		bra $206f			bra 	_MOFAdvanceY
.206d					_MOFAdvance1:
.206d	a0 01		ldy #$01			ldy 	#1
.206f					_MOFAdvanceY:
.206f	98		tya				tya 								; add Y to objPtr
.2070	18		clc				clc
.2071	65 2a		adc $2a				adc 	objPtr
.2073	85 2a		sta $2a				sta 	objPtr
.2075	90 02		bcc $2079			bcc 	_MOFNoCarry2
.2077	e6 2b		inc $2b				inc 	objPtr+1
.2079					_MOFNoCarry2:
.2079	18		clc				clc 								; not completed.
.207a	60		rts				rts
.207b					_MOFEnd:
.207b	e6 2a		inc $2a				inc 	objPtr
.207d	d0 02		bne $2081			bne 	_MOFENoCarry
.207f	e6 2b		inc $2b				inc 	objPtr+1
.2081					_MOFENoCarry:
.2081	38		sec				sec
.2082	60		rts				rts
.2083					MOFSizeTable:
>2083	01					.byte	1         	; $cb .shift
>2084	01					.byte	1         	; $cc .byte
>2085	02					.byte	2         	; $cd .word
>2086	05					.byte	5         	; $ce .float
>2087	ff					.byte	255       	; $cf .string
>2088	ff					.byte	255       	; $d0 .data
>2089	02					.byte	2         	; $d1 .goto
>208a	02					.byte	2         	; $d2 .gosub
>208b	02					.byte	2         	; $d3 .goto.z
>208c	02					.byte	2         	; $d4 .goto.nz
>208d	02					.byte	2         	; $d5 .varspace
>208e	02					.byte	2         	; $d6 .restore

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library

=12					MathStackSize = 12
=$40					NSSString = $40 							; string vs typemask
=$00					NSSIFloat = $00 							; ifloat vs typemask
=$20					NSSIInt16 = $20								; when set, a reference is a 16 bit reference (e.g. a%)
=$40					NSSTypeMask = $40
=$80					NSSArray = $80  							; array (in variable code)
.0032					NSStatus:
>0032							.fill 	MathStackSize
.003e					NSMantissa0:
>003e							.fill 	MathStackSize 				; (this is my integer mantissa system)
.004a					NSMantissa1:
>004a							.fill 	MathStackSize
.0056					NSMantissa2:
>0056							.fill 	MathStackSize
.0062					NSMantissa3:
>0062							.fill 	MathStackSize
.006e					NSExponent:
>006e							.fill 	MathStackSize
.0571					numberBuffer:
>0571							.fill 	34
.208f					FloatSubtract:
.208f	b5 32		lda $32,x			lda 	NSStatus,x 					; negate top of stack
.2091	49 80		eor #$80			eor 	#$80
.2093	95 32		sta $32,x			sta 	NSStatus,x					; and fall through.
.2095					FloatAdd:
.2095	ca		dex				dex
.2096	b5 6e		lda $6e,x			lda 	NSExponent,x 				; can use optimised.
.2098	15 6f		ora $6f,x			ora 	NSExponent+1,x
.209a	15 62		ora $62,x			ora 	NSMantissa3,x
.209c	15 63		ora $63,x			ora 	NSMantissa3+1,x
.209e	d0 04		bne $20a4			bne 	_FAUseFloat
.20a0	20 31 24	jsr $2431			jsr 	FloatInt32Add 				; use the int32 one.
.20a3	60		rts				rts
.20a4					_FAUseFloat:
.20a4	20 c6 23	jsr $23c6			jsr 	FloatNormalise 				; normalise S[X]
.20a7	f0 51		beq $20fa			beq 	_FAReturn1
.20a9	e8		inx				inx 								; normalise S[X+1]
.20aa	20 c6 23	jsr $23c6			jsr 	FloatNormalise
.20ad	ca		dex				dex
.20ae	c9 00		cmp #$00			cmp 	#0
.20b0	f0 60		beq $2112			beq 	_FAExit 					; if so, just return A
.20b2	b5 6e		lda $6e,x			lda 	NSExponent,x 				; are the exponents the same ?
.20b4	d5 6f		cmp $6f,x			cmp 	NSExponent+1,x
.20b6	f0 18		beq $20d0			beq 	_FAExponentsEqual
.20b8	b5 6e		lda $6e,x			lda 	NSExponent,x 				; work out the larger exponent
.20ba	a8		tay				tay
.20bb	38		sec				sec 								; do a signed comparison of the exponents.
.20bc	f5 6f		sbc $6f,x			sbc 	NSExponent+1,x
.20be	50 02		bvc $20c2			bvc 	_FANoSignedChange
.20c0	49 80		eor #$80			eor 	#$80
.20c2					_FANoSignedChange:
.20c2	29 80		and #$80			and 	#$80
.20c4	10 02		bpl $20c8			bpl 	_FAHaveMax
.20c6	b4 6f		ldy $6f,x			ldy 	NSExponent+1,x
.20c8					_FAHaveMax:
.20c8	20 13 21	jsr $2113			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.20cb	e8		inx				inx
.20cc	20 13 21	jsr $2113			jsr 	_FAShiftToExponent
.20cf	ca		dex				dex
.20d0					_FAExponentsEqual:
.20d0	b5 32		lda $32,x			lda 	NSStatus,x 					; are the signs the same
.20d2	55 33		eor $33,x			eor 	NSStatus+1,x
.20d4	30 0e		bmi $20e4			bmi 	_FADifferentSigns
.20d6	20 fd 23	jsr $23fd			jsr 	FloatAddTopTwoStack 		; do the add of the mantissae
.20d9	b5 62		lda $62,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.20db	10 35		bpl $2112			bpl 	_FAExit 					; if no, we are done.
.20dd	20 8a 26	jsr $268a			jsr 	FloatShiftRight 				; shift A right, renormalising it.
.20e0	f6 6e		inc $6e,x			inc 	NSExponent,x 				; bump the exponent and exit
.20e2	80 2e		bra $2112			bra 	_FAExit
.20e4					_FADifferentSigns:
.20e4	20 17 24	jsr $2417			jsr 	FloatSubTopTwoStack 		; subtract mantissa B from A
.20e7	b5 62		lda $62,x			lda 	NSMantissa3,x 				; is the result negative ?
.20e9	10 06		bpl $20f1			bpl 	_FACheckZero 				; if no, check for -0
.20eb	20 33 26	jsr $2633			jsr 	FloatNegate 					; netate result
.20ee	20 3a 26	jsr $263a			jsr 	FloatNegateMantissa 			; negate (2'c) the mantissa
.20f1					_FACheckZero:
.20f1	20 93 26	jsr $2693			jsr 	FloatIsZero	 				; check for -0
.20f4	d0 1c		bne $2112			bne 	_FAExit
.20f6	74 32		stz $32,x			stz 	NSStatus,x
.20f8	80 18		bra $2112			bra 	_FAExit
.20fa					_FAReturn1:
.20fa	b5 3f		lda $3f,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.20fc	95 3e		sta $3e,x			sta 	NSMantissa0,x
.20fe	b5 4b		lda $4b,x			lda 	NSMantissa1+1,x
.2100	95 4a		sta $4a,x			sta 	NSMantissa1,x
.2102	b5 57		lda $57,x			lda 	NSMantissa2+1,x
.2104	95 56		sta $56,x			sta 	NSMantissa2,x
.2106	b5 63		lda $63,x			lda 	NSMantissa3+1,x
.2108	95 62		sta $62,x			sta 	NSMantissa3,x
.210a	b5 6f		lda $6f,x			lda 	NSExponent+1,x
.210c	95 6e		sta $6e,x			sta 	NSExponent,x
.210e	b5 33		lda $33,x			lda 	NSStatus+1,x
.2110	95 32		sta $32,x			sta 	NSStatus,x
.2112					_FAExit:
.2112	60		rts				rts
.2113					_FAShiftToExponent:
.2113					_FAShiftToExponent2:
.2113	98		tya				tya 								; compare Y to exponent
.2114	d5 6e		cmp $6e,x			cmp 	NSExponent,x 				; reached the exponent required ?
.2116	f0 07		beq $211f			beq 	_FASEExit 					; exit if so.
.2118	20 8a 26	jsr $268a			jsr 	FloatShiftRight	 			; shift the mantissa right
.211b	f6 6e		inc $6e,x			inc 	NSExponent,x 				; increment exponent
.211d	80 f4		bra $2113			bra 	_FAShiftToExponent2
.211f					_FASEExit:
.211f	60		rts				rts
.2120					CompareEqual:
.2120	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.2122	d0 09		bne $212d			bne 	ReturnFalse
.2124					ReturnTrue:
.2124	a9 01		lda #$01			lda 	#1
.2126	95 3e		sta $3e,x			sta 	NSMantissa0,x
.2128	a9 80		lda #$80			lda 	#$80
.212a	95 32		sta $32,x			sta 	NSStatus,x
.212c	60		rts				rts
.212d					ReturnFalse:
.212d	74 3e		stz $3e,x			stz 	NSMantissa0,x
.212f	60		rts				rts
.2130					CompareNotEqual:
.2130	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.2132	d0 f0		bne $2124			bne 	ReturnTrue
.2134	80 f7		bra $212d			bra 	ReturnFalse
.2136					CompareLess:
.2136	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.2138	c9 ff		cmp #$ff			cmp 	#$FF
.213a	f0 e8		beq $2124			beq 	ReturnTrue
.213c	80 ef		bra $212d			bra 	ReturnFalse
.213e					CompareGreater:
.213e	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.2140	c9 01		cmp #$01			cmp 	#$01
.2142	f0 e0		beq $2124			beq 	ReturnTrue
.2144	80 e7		bra $212d			bra 	ReturnFalse
.2146					CompareLessEqual:
.2146	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.2148	c9 01		cmp #$01			cmp 	#$01
.214a	d0 d8		bne $2124			bne 	ReturnTrue
.214c	80 df		bra $212d			bra 	ReturnFalse
.214e					CompareGreaterEqual:
.214e	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.2150	c9 ff		cmp #$ff			cmp 	#$FF
.2152	d0 d0		bne $2124			bne 	ReturnTrue
.2154	80 d7		bra $212d			bra 	ReturnFalse
.2156					FloatCompare:
.2156	b5 6e		lda $6e,x			lda 	NSExponent,x 				; float comparison.
.2158	15 6d		ora $6d,x			ora 	NSExponent-1,x 				; integer if both integer.
.215a	48		pha				pha
.215b	20 8f 20	jsr $208f			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.215e	68		pla				pla
.215f	d0 0c		bne $216d			bne 	_FCCompareFloat
.2161	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.2163	15 4a		ora $4a,x			ora 	NSMantissa1,x
.2165	15 56		ora $56,x			ora 	NSMantissa2,x
.2167	15 62		ora $62,x			ora 	NSMantissa3,x
.2169	f0 14		beq $217f			beq 	_FCExit 					; if zero, return zero
.216b	80 0a		bra $2177			bra 	_FCSign
.216d					_FCCompareFloat:
.216d	b5 4a		lda $4a,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.216f	29 f0		and #$f0			and 	#$F0
.2171	15 56		ora $56,x			ora 	NSMantissa2,x
.2173	15 62		ora $62,x			ora 	NSMantissa3,x
.2175	f0 08		beq $217f			beq 	_FCExit 					; zero, so approximately identical
.2177					_FCSign:
.2177	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.2179	34 32		bit $32,x			bit 	NSStatus,x
.217b	10 02		bpl $217f			bpl 	_FCExit
.217d					_FCNegative:
.217d	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.217f					_FCExit:
.217f	20 73 26	jsr $2673			jsr 	FloatSetByte 				; set the result 255,0,1
.2182	60		rts				rts
.2183					FloatScalarTable:
>2183	66 66 66 66				.dword $66666666 ; 0.1
>2187	de					.byte $de
>2188	1f 85 eb 51				.dword $51eb851f ; 0.01
>218c	db					.byte $db
>218d	4c 37 89 41				.dword $4189374c ; 0.001
>2191	d8					.byte $d8
>2192	ac 8b db 68				.dword $68db8bac ; 0.0001
>2196	d4					.byte $d4
>2197	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>219b	d1					.byte $d1
>219c	83 de 1b 43				.dword $431bde83 ; 1e-06
>21a0	ce					.byte $ce
>21a1	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>21a5	ca					.byte $ca
>21a6	89 3b e6 55				.dword $55e63b89 ; 1e-08
>21aa	c7					.byte $c7
>21ab	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>21af	c4					.byte $c4
>21b0	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>21b4	c0					.byte $c0
>21b5	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>21b9	bd					.byte $bd
.21ba					FloatDivide:
.21ba	48		pha				pha
.21bb	20 c6 23	jsr $23c6			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.21be	ca		dex				dex
.21bf	c9 00		cmp #$00			cmp 	#0
.21c1	f0 1e		beq $21e1			beq 	_FDZero
.21c3	20 c6 23	jsr $23c6			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.21c6	f0 16		beq $21de			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.21c8	20 29 22	jsr $2229			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.21cb	20 f6 21	jsr $21f6			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.21ce	20 c6 23	jsr $23c6			jsr		FloatNormalise 				; renormalise
.21d1	20 bc 23	jsr $23bc			jsr 	FloatCalculateSign 			; calculate result sign
.21d4	b5 6e		lda $6e,x			lda 	NSExponent,x 				; calculate exponent
.21d6	38		sec				sec
.21d7	f5 6f		sbc $6f,x			sbc 	NSExponent+1,x
.21d9	38		sec				sec
.21da	e9 1e		sbc #$1e			sbc 	#30
.21dc	95 6e		sta $6e,x			sta 	NSExponent,x
.21de					_FDExit:
.21de	68		pla				pla
.21df	18		clc				clc
.21e0	60		rts				rts
.21e1					_FDZero:
.21e1	68		pla				pla
.21e2	38		sec				sec
.21e3	60		rts				rts
.21e4					DivideInt32:
.21e4	20 ac 22	jsr $22ac			jsr 	FloatIntegerPart 			; make both integers
.21e7	ca		dex				dex
.21e8	20 ac 22	jsr $22ac			jsr 	FloatIntegerPart
.21eb	20 07 22	jsr $2207			jsr 	Int32Divide 				; divide
.21ee	20 f6 21	jsr $21f6			jsr 	NSMCopyPlusTwoToZero 		; copy result
.21f1	20 bc 23	jsr $23bc			jsr 	FloatCalculateSign 			; calculate result sign
.21f4	18		clc				clc
.21f5	60		rts				rts
.21f6					NSMCopyPlusTwoToZero:
.21f6	b5 40		lda $40,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.21f8	95 3e		sta $3e,x			sta 	NSMantissa0,x
.21fa	b5 4c		lda $4c,x			lda 	NSMantissa1+2,x
.21fc	95 4a		sta $4a,x			sta 	NSMantissa1,x
.21fe	b5 58		lda $58,x			lda 	NSMantissa2+2,x
.2200	95 56		sta $56,x			sta 	NSMantissa2,x
.2202	b5 64		lda $64,x			lda 	NSMantissa3+2,x
.2204	95 62		sta $62,x			sta 	NSMantissa3,x
.2206	60		rts				rts
.2207					Int32Divide:
.2207	48		pha				pha 								; save AXY
.2208	5a		phy				phy
.2209	20 54 26	jsr $2654			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.220c	20 6d 26	jsr $266d			jsr 	FloatSetZeroMantissaOnly 	; set S[X] to zero
.220f	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.2211					_I32DivideLoop:
.2211	e8		inx				inx
.2212	e8		inx				inx
.2213	20 80 26	jsr $2680			jsr 	FloatShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.2216	ca		dex				dex
.2217	ca		dex				dex
.2218	20 81 26	jsr $2681			jsr 	FloatRotateLeft
.221b	20 47 22	jsr $2247			jsr 	FloatDivideCheck 			; check if subtract possible
.221e	90 02		bcc $2222			bcc 	_I32DivideNoCarryIn
.2220	f6 40		inc $40,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.2222					_I32DivideNoCarryIn:
.2222	88		dey				dey 								; loop round till division completed.
.2223	d0 ec		bne $2211			bne 	_I32DivideLoop
.2225	7a		ply				ply 								; restore AXY and exit
.2226	68		pla				pla
.2227	18		clc				clc
.2228	60		rts				rts
.2229					Int32ShiftDivide:
.2229	48		pha				pha 								; save AY
.222a	5a		phy				phy
.222b	e8		inx				inx 								; clear S[X+2]
.222c	e8		inx				inx
.222d	20 71 26	jsr $2671			jsr 	FloatSetZero
.2230	ca		dex				dex
.2231	ca		dex				dex
.2232	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.2234					_I32SDLoop:
.2234	20 47 22	jsr $2247			jsr 	FloatDivideCheck 			; check if subtract possible
.2237	e8		inx				inx
.2238	e8		inx				inx
.2239	20 81 26	jsr $2681			jsr 	FloatRotateLeft				; shift 64 bit FPA left, rotating carry in
.223c	ca		dex				dex
.223d	ca		dex				dex
.223e	20 81 26	jsr $2681			jsr 	FloatRotateLeft
.2241	88		dey				dey 	 							; do 31 times
.2242	d0 f0		bne $2234			bne 	_I32SDLoop
.2244	7a		ply				ply 								; restore AY and exit
.2245	68		pla				pla
.2246	60		rts				rts
.2247					FloatDivideCheck:
.2247	20 17 24	jsr $2417			jsr 	FloatSubTopTwoStack 		; subtract Stack[X+1] from Stack[X+0]
.224a	b0 04		bcs $2250			bcs 	_DCSExit 					; if carry set, then could do, exit
.224c	20 fd 23	jsr $23fd			jsr 	FloatAddTopTwoStack 		; add it back in
.224f	18		clc				clc 								; and return False
.2250					_DCSExit:
.2250	60		rts				rts
.2251					FloatFractionalPart:
.2251	5a		phy				phy
.2252	b5 32		lda $32,x			lda 	NSStatus,x 					; take absolute value
.2254	29 7f		and #$7f			and 	#$7F
.2256	95 32		sta $32,x			sta 	NSStatus,x
.2258	20 c6 23	jsr $23c6			jsr 	FloatNormalise
.225b	b5 6e		lda $6e,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.225d	38		sec				sec
.225e	e9 e0		sbc #$e0			sbc 	#$E0
.2260	90 29		bcc $228b			bcc 	_FFPExit 					; already fractional
.2262	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.2264	b0 22		bcs $2288			bcs 	_FFPZero
.2266	a8		tay				tay 								; put count to do in Y
.2267	b5 62		lda $62,x			lda 	NSMantissa3,x 				; do each in turn.
.2269	20 90 22	jsr $2290			jsr 	_FFPPartial
.226c	95 62		sta $62,x			sta 	NSMantissa3,x
.226e	b5 56		lda $56,x			lda 	NSMantissa2,x
.2270	20 90 22	jsr $2290			jsr 	_FFPPartial
.2273	95 56		sta $56,x			sta 	NSMantissa2,x
.2275	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.2277	20 90 22	jsr $2290			jsr 	_FFPPartial
.227a	95 4a		sta $4a,x			sta 	NSMantissa1,x
.227c	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.227e	20 90 22	jsr $2290			jsr 	_FFPPartial
.2281	95 3e		sta $3e,x			sta 	NSMantissa0,x
.2283	20 93 26	jsr $2693			jsr 	FloatIsZero 					; zeroed check.
.2286	d0 03		bne $228b			bne 	_FFPExit
.2288					_FFPZero:
.2288	20 71 26	jsr $2671			jsr 	FloatSetZero
.228b					_FFPExit:
.228b	20 c6 23	jsr $23c6			jsr 	FloatNormalise
.228e	7a		ply				ply
.228f	60		rts				rts
.2290					_FFPPartial:
.2290	c0 00		cpy #$00			cpy 	#0 							; no more to do
.2292	f0 17		beq $22ab			beq 	_FFFPPExit
.2294	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.2296	b0 0c		bcs $22a4			bcs 	_FFFPPWholeByte
.2298	5a		phy				phy
.2299					_FFFPPLeft:
.2299	0a		asl a				asl 	a
.229a	88		dey				dey
.229b	d0 fc		bne $2299			bne 	_FFFPPLeft
.229d	7a		ply				ply
.229e					_FFFPPRight:
.229e	4a		lsr a				lsr 	a
.229f	88		dey				dey
.22a0	d0 fc		bne $229e			bne 	_FFFPPRight
.22a2	80 07		bra $22ab			bra 	_FFFPPExit
.22a4					_FFFPPWholeByte:
.22a4	98		tya				tya 								; subtract 8 from count
.22a5	38		sec				sec
.22a6	e9 08		sbc #$08			sbc 	#8
.22a8	a8		tay				tay
.22a9	a9 00		lda #$00			lda 	#0 							; and clear all
.22ab					_FFFPPExit:
.22ab	60		rts				rts
.22ac					FloatIntegerPart:
.22ac	48		pha				pha
.22ad	b5 6e		lda $6e,x			lda 	NSExponent,x 				; is it integer already ?
.22af	f0 1d		beq $22ce			beq 	_FIPExit 					; if so do nothing
.22b1	20 93 26	jsr $2693			jsr 	FloatIsZero 				; is it zero ?
.22b4	f0 15		beq $22cb			beq 	_FIPZero 					; if so return zero.
.22b6	20 c6 23	jsr $23c6			jsr 	FloatNormalise 				; normalise
.22b9	f0 10		beq $22cb			beq 	_FIPZero 					; normalised to zero, exit zero
.22bb					_FIPShift:
.22bb	b5 6e		lda $6e,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.22bd	10 07		bpl $22c6			bpl 	_FIPCheckZero
.22bf	20 8a 26	jsr $268a			jsr 	FloatShiftRight 			; shift mantissa right
.22c2	f6 6e		inc $6e,x			inc 	NSExponent,x 				; bump exponent
.22c4	80 f5		bra $22bb			bra 	_FIPShift
.22c6					_FIPCheckZero:
.22c6	20 93 26	jsr $2693			jsr 	FloatIsZero 				; avoid -0 problem
.22c9	d0 03		bne $22ce			bne 	_FIPExit 					; set to zero if mantissa zero.
.22cb					_FIPZero:
.22cb	20 71 26	jsr $2671			jsr 	FloatSetZero
.22ce					_FIPExit:
.22ce	68		pla				pla
.22cf	60		rts				rts
.22d0					FloatIntegerPartDown:
.22d0	48		pha				pha
.22d1	5a		phy				phy
.22d2	b5 6e		lda $6e,x			lda 	NSExponent,x 				; is it integer already ?
.22d4	f0 36		beq $230c			beq 	_FIPExit 					; if so do nothing
.22d6	20 93 26	jsr $2693			jsr 	FloatIsZero 				; is it zero ?
.22d9	f0 2e		beq $2309			beq 	_FIPZero 					; if so return zero.
.22db	20 c6 23	jsr $23c6			jsr 	FloatNormalise 				; normalise
.22de	f0 29		beq $2309			beq 	_FIPZero 					; normalised to zero, exit zero
.22e0	a0 00		ldy #$00			ldy 	#0 							; reset the count of bits.
.22e2					_FIPShift:
.22e2	b5 6e		lda $6e,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.22e4	10 0a		bpl $22f0			bpl 	_FIPCheckDown
.22e6	20 8a 26	jsr $268a			jsr 	FloatShiftRight 			; shift mantissa right
.22e9	90 01		bcc $22ec			bcc 	_FIPNoFrac 					; shifted a zero out ?
.22eb	c8		iny				iny
.22ec					_FIPNoFrac:
.22ec	f6 6e		inc $6e,x			inc 	NSExponent,x 				; bump exponent
.22ee	80 f2		bra $22e2			bra 	_FIPShift
.22f0					_FIPCheckDown:
.22f0	c0 00		cpy #$00			cpy 	#0 							; were there any fractional bits.
.22f2	f0 10		beq $2304			beq 	_FIPCheckZero
.22f4	34 32		bit $32,x			bit 	NSStatus,x 					; +ve
.22f6	10 0c		bpl $2304			bpl 	_FIPCheckZero
.22f8	e8		inx				inx 								; -ve so round *down*.
.22f9	a9 01		lda #$01			lda 	#1
.22fb	20 73 26	jsr $2673			jsr 	FloatSetByte
.22fe	20 33 26	jsr $2633			jsr 	FloatNegate
.2301	20 95 20	jsr $2095			jsr 	FloatAdd
.2304					_FIPCheckZero:
.2304	20 93 26	jsr $2693			jsr 	FloatIsZero 				; avoid -0 problem
.2307	d0 03		bne $230c			bne 	_FIPExit 					; set to zero if mantissa zero.
.2309					_FIPZero:
.2309	20 71 26	jsr $2671			jsr 	FloatSetZero
.230c					_FIPExit:
.230c	7a		ply				ply
.230d	68		pla				pla
.230e	60		rts				rts
.230f					FloatInt8Multiply:
.230f	5a		phy				phy
.2310	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; right shifted multiplier in Y
.2312	a8		tay				tay
.2313	74 3e		stz $3e,x			stz 	NSMantissa0,x 				; zero the result (already 8 bit constant)
.2315					_FI8MLoop:
.2315	98		tya				tya 								; shift right shifter right into carry
.2316	4a		lsr a				lsr 	a
.2317	a8		tay				tay
.2318	90 0d		bcc $2327			bcc 	_FI8MNoAdd
.231a	18		clc				clc
.231b	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.231d	75 3f		adc $3f,x			adc 	NSMantissa0+1,x
.231f	95 3e		sta $3e,x			sta 	NSMantissa0,x
.2321	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.2323	75 4b		adc $4b,x			adc 	NSMantissa1+1,x
.2325	95 4a		sta $4a,x			sta 	NSMantissa1,x
.2327					_FI8MNoAdd:
.2327	16 3f		asl $3f,x			asl 	NSMantissa0+1,x 			; shift adder left
.2329	36 4b		rol $4b,x			rol 	NSMantissa1+1,x
.232b	c0 00		cpy #$00			cpy 	#0
.232d	d0 e6		bne $2315			bne 	_FI8MLoop 					; until right shifter zero.
.232f	7a		ply				ply
.2330	60		rts				rts
.2331					FloatMultiply:
.2331	ca		dex				dex
.2332	b5 6e		lda $6e,x			lda 	NSExponent,x 				; can use optimised ?
.2334	15 6f		ora $6f,x			ora 	NSExponent+1,x
.2336	15 62		ora $62,x			ora 	NSMantissa3,x
.2338	15 63		ora $63,x			ora 	NSMantissa3+1,x
.233a	d0 21		bne $235d			bne 	_FMUseFloat
.233c	b5 32		lda $32,x			lda 	NSStatus,x 					; check if it is 8 bit unsigned
.233e	15 33		ora $33,x			ora 	NSStatus+1,x
.2340	29 80		and #$80			and 	#$80
.2342	15 62		ora $62,x			ora 	NSMantissa3,x
.2344	15 56		ora $56,x			ora 	NSMantissa2,x
.2346	15 4a		ora $4a,x			ora 	NSMantissa1,x
.2348	15 63		ora $63,x			ora 	NSMantissa3+1,x
.234a	15 57		ora $57,x			ora 	NSMantissa2+1,x
.234c	15 4b		ora $4b,x			ora 	NSMantissa1+1,x
.234e	d0 04		bne $2354			bne 	_FMInt32
.2350	20 0f 23	jsr $230f			jsr 	FloatInt8Multiply 			; use fast 8x8 multiply.
.2353	60		rts				rts
.2354					_FMInt32:
.2354	20 7e 23	jsr $237e			jsr 	FloatMultiplyShort			; use the int32 one.
.2357	18		clc				clc 								; fix it up if gone out of range
.2358	75 6e		adc $6e,x			adc 	NSExponent,x
.235a	95 6e		sta $6e,x			sta 	NSExponent,x
.235c	60		rts				rts
.235d					_FMUseFloat:
.235d	20 c6 23	jsr $23c6			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.2360	f0 18		beq $237a			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.2362	e8		inx				inx
.2363	20 c6 23	jsr $23c6			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.2366	ca		dex				dex
.2367	c9 00		cmp #$00			cmp 	#0
.2369	f0 0c		beq $2377			beq 	_FDSetZero
.236b	20 7e 23	jsr $237e			jsr 	FloatMultiplyShort 			; calculate the result.
.236e	75 6e		adc $6e,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.2370	18		clc				clc
.2371	75 6f		adc $6f,x			adc 	NSExponent+1,x
.2373	95 6e		sta $6e,x			sta 	NSExponent,x
.2375	80 03		bra $237a			bra 	_FDExit
.2377					_FDSetZero:
.2377	20 71 26	jsr $2671			jsr 	FloatSetZero 				; return 0
.237a					_FDExit:
.237a	20 c6 23	jsr $23c6			jsr 	FloatNormalise 				; normalise the result
.237d	60		rts				rts
.237e					FloatMultiplyShort:
.237e	5a		phy				phy 								; save Y
.237f	20 54 26	jsr $2654			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.2382	20 6d 26	jsr $266d			jsr 	FloatSetZeroMantissaOnly 	; set mantissa S[X] to zero
.2385	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.2387					_I32MLoop:
.2387	b5 40		lda $40,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.2389	15 4c		ora $4c,x			ora 	NSMantissa1+2,x
.238b	15 58		ora $58,x			ora 	NSMantissa2+2,x
.238d	15 64		ora $64,x			ora 	NSMantissa3+2,x
.238f	f0 25		beq $23b6			beq 	_I32MExit 					; exit if zero
.2391	b5 40		lda $40,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.2393	29 01		and #$01			and 	#1
.2395	f0 0d		beq $23a4			beq 	_I32MNoAdd
.2397	20 fd 23	jsr $23fd			jsr 	FloatAddTopTwoStack 		; if so add S[X+1] to S[X+0]
.239a	b5 62		lda $62,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.239c	10 06		bpl $23a4			bpl 	_I32MNoAdd
.239e					_I32ShiftRight:
.239e	20 8a 26	jsr $268a			jsr 	FloatShiftRight 			; shift S[X] right
.23a1	c8		iny				iny 								; increment shift count
.23a2	80 09		bra $23ad			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.23a4					_I32MNoAdd:
.23a4	34 63		bit $63,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.23a6	70 f6		bvs $239e			bvs 	_I32ShiftRight 				; instead.
.23a8	e8		inx				inx
.23a9	20 80 26	jsr $2680			jsr 	FloatShiftLeft 				; shift additive S[X+1] left
.23ac	ca		dex				dex
.23ad					_I32MShiftUpper:
.23ad	e8		inx				inx 								; shift S[X+2] right
.23ae	e8		inx				inx
.23af	20 8a 26	jsr $268a			jsr 	FloatShiftRight
.23b2	ca		dex				dex
.23b3	ca		dex				dex
.23b4	80 d1		bra $2387			bra 	_I32MLoop 					; try again.
.23b6					_I32MExit:
.23b6	20 bc 23	jsr $23bc			jsr 	FloatCalculateSign
.23b9	98		tya				tya 								; shift in A
.23ba	7a		ply				ply 								; restore Y and exit
.23bb	60		rts				rts
.23bc					FloatCalculateSign:
.23bc	b5 32		lda $32,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.23be	16 32		asl $32,x			asl 	NSStatus,x 					; shift result left
.23c0	55 33		eor $33,x			eor 	NSStatus+1,x
.23c2	0a		asl a				asl 	a 							; shift bit 7 into carry
.23c3	76 32		ror $32,x			ror 	NSStatus,x 					; shift right into status byte.
.23c5	60		rts				rts
.23c6					FloatNormalise:
.23c6	20 93 26	jsr $2693			jsr 	FloatIsZero 				; if zero exit
.23c9	d0 07		bne $23d2			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.23cb	16 32		asl $32,x			asl 	NSStatus,x 					; clear the sign bit.
.23cd	76 32		ror $32,x			ror 	NSStatus,x 					; (no -0)
.23cf	a9 00		lda #$00			lda 	#0 							; set Z flag
.23d1	60		rts				rts
.23d2					_NSNormaliseOptimise:
.23d2	b5 62		lda $62,x			lda 	NSMantissa3,x 				; upper byte zero ?
.23d4	d0 19		bne $23ef			bne 	_NSNormaliseLoop
.23d6	b5 56		lda $56,x			lda 	NSMantissa2,x 				; byte normalise
.23d8	30 15		bmi $23ef			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.23da	95 62		sta $62,x			sta 	NSMantissa3,x
.23dc	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.23de	95 56		sta $56,x			sta 	NSMantissa2,x
.23e0	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.23e2	95 4a		sta $4a,x			sta 	NSMantissa1,x
.23e4	74 3e		stz $3e,x			stz 	NSMantissa0,x
.23e6	b5 6e		lda $6e,x			lda 	NSExponent,x
.23e8	38		sec				sec
.23e9	e9 08		sbc #$08			sbc 	#8
.23eb	95 6e		sta $6e,x			sta 	NSExponent,x
.23ed	80 e3		bra $23d2			bra 	_NSNormaliseOptimise
.23ef					_NSNormaliseLoop:
.23ef	34 62		bit $62,x			bit 	NSMantissa3,x 				; bit 30 set ?
.23f1	70 07		bvs $23fa			bvs 	_NSNExit 					; exit if so with Z flag clear
.23f3	20 80 26	jsr $2680			jsr 	FloatShiftLeft 				; shift mantissa left
.23f6	d6 6e		dec $6e,x			dec 	NSExponent,x 				; adjust exponent
.23f8	80 f5		bra $23ef			bra 	_NSNormaliseLoop
.23fa					_NSNExit:
.23fa	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.23fc	60		rts				rts
.23fd					FloatAddTopTwoStack:
.23fd	18		clc				clc
.23fe	b5 3e		lda $3e,x			lda		NSMantissa0,x
.2400	75 3f		adc $3f,x			adc 		NSMantissa0+1,x
.2402	95 3e		sta $3e,x			sta 	NSMantissa0,x
.2404	b5 4a		lda $4a,x			lda		NSMantissa1,x
.2406	75 4b		adc $4b,x			adc 		NSMantissa1+1,x
.2408	95 4a		sta $4a,x			sta 	NSMantissa1,x
.240a	b5 56		lda $56,x			lda		NSMantissa2,x
.240c	75 57		adc $57,x			adc 		NSMantissa2+1,x
.240e	95 56		sta $56,x			sta 	NSMantissa2,x
.2410	b5 62		lda $62,x			lda		NSMantissa3,x
.2412	75 63		adc $63,x			adc 		NSMantissa3+1,x
.2414	95 62		sta $62,x			sta 	NSMantissa3,x
.2416	60		rts				rts
.2417					FloatSubTopTwoStack:
.2417	38		sec				sec
.2418	b5 3e		lda $3e,x			lda		NSMantissa0,x
.241a	f5 3f		sbc $3f,x			sbc 		NSMantissa0+1,x
.241c	95 3e		sta $3e,x			sta 	NSMantissa0,x
.241e	b5 4a		lda $4a,x			lda		NSMantissa1,x
.2420	f5 4b		sbc $4b,x			sbc 		NSMantissa1+1,x
.2422	95 4a		sta $4a,x			sta 	NSMantissa1,x
.2424	b5 56		lda $56,x			lda		NSMantissa2,x
.2426	f5 57		sbc $57,x			sbc 		NSMantissa2+1,x
.2428	95 56		sta $56,x			sta 	NSMantissa2,x
.242a	b5 62		lda $62,x			lda		NSMantissa3,x
.242c	f5 63		sbc $63,x			sbc 		NSMantissa3+1,x
.242e	95 62		sta $62,x			sta 	NSMantissa3,x
.2430	60		rts				rts
.2431					FloatInt32Add:
.2431	b5 32		lda $32,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.2433	55 33		eor $33,x			eor 	NSStatus+1,x
.2435	30 04		bmi $243b			bmi 	_DiffSigns
.2437	20 fd 23	jsr $23fd			jsr		FloatAddTopTwoStack
.243a	60		rts				rts
.243b					_DiffSigns:
.243b	20 17 24	jsr $2417			jsr 	FloatSubTopTwoStack 		; do a physical subtraction
.243e	34 62		bit $62,x			bit 	NSMantissa3,x 				; result is +ve, okay
.2440	10 07		bpl $2449			bpl 	_AddExit
.2442	b5 33		lda $33,x			lda 	NSStatus+1,x 				; sign is that of 11th value
.2444	95 32		sta $32,x			sta 	NSStatus,x
.2446	20 3a 26	jsr $263a			jsr 	FloatNegateMantissa 		; negate the mantissa and exit
.2449					_AddExit:
.2449	20 93 26	jsr $2693			jsr 	FloatIsZero 				; check for -0
.244c	d0 02		bne $2450			bne 	_AddNonZero
.244e	74 32		stz $32,x			stz 	NSStatus,x
.2450					_AddNonZero:
.2450	60		rts				rts
=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.2451					FloatEncodeStart:
.2451	38		sec				sec
.2452	80 01		bra $2455			bra 	FloatEncodeContinue+1
.2454					FloatEncodeContinue:
.2454	18		clc				clc
.2455					FloatEncode:
.2455	08		php				php 								; save reset flag.
.2456	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.2458	f0 15		beq $246f			beq 	_ENIsOkay
.245a	c9 30		cmp #$30			cmp 	#"0"
.245c	90 04		bcc $2462			bcc 	_ENBadNumber
.245e	c9 3a		cmp #$3a			cmp 	#"9"+1
.2460	90 0d		bcc $246f			bcc 	_ENIsOkay
.2462					_ENBadNumber:
.2462	28		plp				plp 								; throw saved reset
.2463	ad 93 05	lda $0593			lda 	encodeState 				; if in decimal mode, construct final number
.2466	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.2468	d0 03		bne $246d			bne 	_ENFail
.246a	4c e7 24	jmp $24e7			jmp 	_ENConstructFinal
.246d					_ENFail:
.246d	18		clc				clc 								; not allowed
.246e	60		rts				rts
.246f					_ENIsOkay:
.246f	28		plp				plp 								; are we restarting
.2470	90 15		bcc $2487			bcc 	_ENNoRestart
.2472					_ENStartEncode:
.2472	c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.2474	f0 0c		beq $2482			beq 	_ENFirstDP
.2476	29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.2478	20 73 26	jsr $2673			jsr 	FloatSetByte 				; in single byte mode.
.247b	a9 01		lda #$01			lda 	#ESTA_Low
.247d					_ENExitChange:
.247d	8d 93 05	sta $0593			sta 	encodeState 				; save new state
.2480	38		sec				sec
.2481	60		rts				rts
.2482					_ENFirstDP:
.2482	20 71 26	jsr $2671			jsr 	FloatSetZero 				; clear integer part
.2485	80 3c		bra $24c3			bra 	_ESTASwitchFloat			; go straight to float and exi
.2487					_ENNoRestart:
.2487	48		pha				pha 								; save digit or DP on stack.
.2488	ad 93 05	lda $0593			lda 	encodeState 				; get current state
.248b	c9 01		cmp #$01			cmp 	#ESTA_Low
.248d	f0 09		beq $2498			beq  	_ESTALowState
.248f	c9 02		cmp #$02			cmp 	#ESTA_High
.2491	f0 26		beq $24b9			beq 	_ESTAHighState
.2493	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.2495	f0 38		beq $24cf			beq 	_ESTADecimalState
>2497	db						.byte 	$DB 						; causes a break in the emulator
.2498					_ESTALowState:
.2498	68		pla				pla 								; get value back
.2499	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.249b	f0 26		beq $24c3			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.249d	29 0f		and #$0f			and 	#15 						; make digit
.249f	8d 94 05	sta $0594			sta 	digitTemp 					; save it.
.24a2	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.24a4	0a		asl a				asl 	a
.24a5	0a		asl a				asl 	a
.24a6	75 3e		adc $3e,x			adc 	NSMantissa0,x
.24a8	0a		asl a				asl 	a
.24a9	6d 94 05	adc $0594			adc 	digitTemp
.24ac	95 3e		sta $3e,x			sta 	NSMantissa0,x
.24ae	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.24b0	90 05		bcc $24b7			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.24b2	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.24b4	8d 93 05	sta $0593			sta 	encodeState
.24b7					_ESTANoSwitch:
.24b7	38		sec				sec
.24b8	60		rts				rts
.24b9					_ESTAHighState:
.24b9	68		pla				pla 								; get value back
.24ba	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.24bc	f0 05		beq $24c3			beq 	_ESTASwitchFloat
.24be	20 19 25	jsr $2519			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.24c1	38		sec				sec
.24c2	60		rts				rts
.24c3					_ESTASwitchFloat:
.24c3	9c 95 05	stz $0595			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.24c6	e8		inx				inx 								; zero the decimal additive.
.24c7	20 71 26	jsr $2671			jsr 	FloatSetZero
.24ca	ca		dex				dex
.24cb	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.24cd	80 ae		bra $247d			bra 	_ENExitChange
.24cf					_ESTADecimalState:
.24cf	68		pla				pla 								; digit.
.24d0	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 11th decimal point.
.24d2	f0 99		beq $246d			beq 	_ENFail
.24d4	e8		inx				inx 								; put digit into fractional part of X+1
.24d5	20 19 25	jsr $2519			jsr 	ESTAShiftDigitIntoMantissa
.24d8	ca		dex				dex
.24d9	ee 95 05	inc $0595			inc 	decimalCount 				; bump the count of decimals
.24dc	ad 95 05	lda $0595			lda 	decimalCount 				; too many decimal digits.
.24df	c9 0b		cmp #$0b			cmp 	#11
.24e1	f0 02		beq $24e5			beq 	_ESTADSFail
.24e3	38		sec				sec
.24e4	60		rts				rts
.24e5					_ESTADSFail:
.24e5	18		clc				clc
.24e6	60		rts				rts
.24e7					_ENConstructFinal:
.24e7	ad 95 05	lda $0595			lda 	decimalCount 				; get decimal count
.24ea	f0 2b		beq $2517			beq 	_ENCFExit 					; no decimals
.24ec	5a		phy				phy
.24ed	0a		asl a				asl 	a 							; x 4 and CLC
.24ee	0a		asl a				asl 	a
.24ef	6d 95 05	adc $0595			adc 	decimalCount
.24f2	a8		tay				tay
.24f3	b9 7e 21	lda $217e,y			lda 	FloatScalarTable-5,y 		; copy decimal scalar to X+2
.24f6	95 40		sta $40,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.24f8	b9 7f 21	lda $217f,y			lda 	FloatScalarTable-5+1,y
.24fb	95 4c		sta $4c,x			sta 	NSMantissa1+2,x
.24fd	b9 80 21	lda $2180,y			lda 	FloatScalarTable-5+2,y
.2500	95 58		sta $58,x			sta 	NSMantissa2+2,x
.2502	b9 81 21	lda $2181,y			lda 	FloatScalarTable-5+3,y
.2505	95 64		sta $64,x			sta 	NSMantissa3+2,x
.2507	b9 82 21	lda $2182,y			lda 	FloatScalarTable-5+4,y
.250a	95 70		sta $70,x			sta 	NSExponent+2,x
.250c	74 34		stz $34,x			stz 	NSStatus+2,x 				; make +ve
.250e	e8		inx				inx 								; multiply decimal const by decimal scalar
.250f	e8		inx				inx
.2510	20 31 23	jsr $2331			jsr 	FloatMultiply
.2513	20 95 20	jsr $2095			jsr 	FloatAdd 					; add to integer part.
.2516	7a		ply				ply
.2517					_ENCFExit:
.2517	18		clc				clc 								; reject the digit.
.2518	60		rts				rts
.2519					ESTAShiftDigitIntoMantissa:
.2519	29 0f		and #$0f			and 	#15 						; save digit
.251b	48		pha				pha
.251c	b5 62		lda $62,x			lda 	NSMantissa3,x 				; push mantissa on stack
.251e	48		pha				pha
.251f	b5 56		lda $56,x			lda 	NSMantissa2,x
.2521	48		pha				pha
.2522	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.2524	48		pha				pha
.2525	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.2527	48		pha				pha
.2528	20 80 26	jsr $2680			jsr 	FloatShiftLeft 				; x 2
.252b	20 80 26	jsr $2680			jsr 	FloatShiftLeft 				; x 4
.252e	18		clc				clc 								; pop mantissa and add
.252f	68		pla				pla
.2530	75 3e		adc $3e,x			adc 	NSMantissa0,x
.2532	95 3e		sta $3e,x			sta 	NSMantissa0,x
.2534	68		pla				pla
.2535	75 4a		adc $4a,x			adc 	NSMantissa1,x
.2537	95 4a		sta $4a,x			sta 	NSMantissa1,x
.2539	68		pla				pla
.253a	75 56		adc $56,x			adc 	NSMantissa2,x
.253c	95 56		sta $56,x			sta 	NSMantissa2,x
.253e	68		pla				pla
.253f	75 62		adc $62,x			adc 	NSMantissa3,x
.2541	95 62		sta $62,x			sta 	NSMantissa3,x 				; x 5
.2543	20 80 26	jsr $2680			jsr 	FloatShiftLeft 				; x 10
.2546	68		pla				pla 								; add digit
.2547	18		clc				clc
.2548	75 3e		adc $3e,x			adc 	NSMantissa0,x
.254a	95 3e		sta $3e,x			sta 	NSMantissa0,x
.254c	90 0a		bcc $2558			bcc 	_ESTASDExit
.254e	f6 4a		inc $4a,x			inc 	NSMantissa1,x
.2550	d0 06		bne $2558			bne 	_ESTASDExit
.2552	f6 56		inc $56,x			inc 	NSMantissa2,x
.2554	d0 02		bne $2558			bne 	_ESTASDExit
.2556	f6 62		inc $62,x			inc 	NSMantissa3,x
.2558					_ESTASDExit:
.2558	60		rts				rts
.0593					encodeState:
>0593							.fill 	1
.0594					digitTemp:
>0594							.fill 	1
.0595					decimalCount:
>0595							.fill 	1
.2559					FloatToString:
.2559	da		phx				phx
.255a	5a		phy				phy 								; save code position
.255b	8d 96 05	sta $0596			sta 	decimalPlaces	 			; save number of DPs.
.255e	9c 97 05	stz $0597			stz 	dbOffset 					; offset into decimal buffer = start.
.2561	b5 32		lda $32,x			lda 	NSStatus,x  				; is it -ve.
.2563	10 08		bpl $256d			bpl 	_CNTSNotNegative
.2565	29 7f		and #$7f			and 	#$7F 						; make +ve
.2567	95 32		sta $32,x			sta 	NSStatus,x
.2569	a9 2d		lda #$2d			lda 	#"-"
.256b	80 02		bra $256f			bra 	_CNTMain
.256d					_CNTSNotNegative:
.256d	a9 20		lda #$20			lda 	#" "
.256f					_CNTMain:
.256f	20 d1 25	jsr $25d1			jsr 	WriteDecimalBuffer
.2572	b5 6e		lda $6e,x			lda 	NSExponent,x 				; check if decimal
.2574	f0 0d		beq $2583			beq 	_CNTSNotFloat
.2576	e8		inx				inx 								; round up so we don't get too many 6.999999
.2577	a9 01		lda #$01			lda 	#1
.2579	20 73 26	jsr $2673			jsr 	FloatSetByte
.257c	b5 6d		lda $6d,x			lda		NSExponent-1,x
.257e	95 6e		sta $6e,x			sta 	NSExponent,x
.2580	20 95 20	jsr $2095			jsr 	FloatAdd
.2583					_CNTSNotFloat:
.2583	20 b3 25	jsr $25b3			jsr 	MakePlusTwoString 			; do the integer part.
.2586	20 51 22	jsr $2251			jsr 	FloatFractionalPart 		; get the fractional part
.2589	20 c6 23	jsr $23c6			jsr 	FloatNormalise					; normalise , exit if zero
.258c	f0 22		beq $25b0			beq 	_CNTSExit
.258e	a9 2e		lda #$2e			lda 	#"."
.2590	20 d1 25	jsr $25d1			jsr 	WriteDecimalBuffer 			; write decimal place
.2593					_CNTSDecimal:
.2593	ce 96 05	dec $0596			dec 	decimalPlaces 				; done all the decimals
.2596	30 18		bmi $25b0			bmi 	_CNTSExit
.2598	e8		inx				inx 								; x 10.0
.2599	a9 0a		lda #$0a			lda 	#10
.259b	20 73 26	jsr $2673			jsr 	FloatSetByte
.259e	20 31 23	jsr $2331			jsr 	FloatMultiply
.25a1	20 b3 25	jsr $25b3			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.25a4	20 51 22	jsr $2251			jsr 	FloatFractionalPart 		; get the fractional part
.25a7	20 c6 23	jsr $23c6			jsr 	FloatNormalise 				; normalise it.
.25aa	b5 6e		lda $6e,x			lda 	NSExponent,x 				; gone to zero, exit.
.25ac	c9 d0		cmp #$d0			cmp 	#$D0 						; very small remainder, so don't bother.
.25ae	b0 e3		bcs $2593			bcs 	_CNTSDecimal 				; keep going.
.25b0					_CNTSExit:
.25b0	7a		ply				ply
.25b1	fa		plx				plx
.25b2	60		rts				rts
.25b3					MakePlusTwoString:
.25b3	da		phx				phx
.25b4	20 54 26	jsr $2654			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.25b7	e8		inx				inx 								; access it
.25b8	e8		inx				inx
.25b9	20 ac 22	jsr $22ac			jsr 	FloatIntegerPart 			; make it an integer
.25bc	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.25be	20 f0 25	jsr $25f0			jsr 	ConvertInt32
.25c1	a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.25c3					_MPTSCopy:
.25c3	bd 71 05	lda $0571,x			lda 	numberBuffer,x
.25c6	20 d1 25	jsr $25d1			jsr 	WriteDecimalBuffer
.25c9	e8		inx				inx
.25ca	bd 71 05	lda $0571,x			lda 	numberBuffer,x
.25cd	d0 f4		bne $25c3			bne 	_MPTSCopy
.25cf	fa		plx				plx
.25d0	60		rts				rts
.25d1					WriteDecimalBuffer:
.25d1	da		phx				phx
.25d2	ae 97 05	ldx $0597			ldx 	dbOffset
.25d5	9d 98 05	sta $0598,x			sta 	decimalBuffer,x
.25d8	9e 99 05	stz $0599,x			stz 	decimalBuffer+1,x
.25db	ee 97 05	inc $0597			inc 	dbOffset
.25de	fa		plx				plx
.25df	60		rts				rts
.0596					decimalPlaces:
>0596							.fill 	1
.0597					dbOffset:
>0597							.fill 	1
.0598					decimalBuffer:
>0598							.fill 	32
.25e0					ConvertInt16:
.25e0	85 3e		sta $3e				sta 	NSMantissa0 				; set up as 32 bit conversion
.25e2	86 4a		stx $4a				stx 	NSMantissa1
.25e4	64 56		stz $56				stz 	NSMantissa2
.25e6	64 62		stz $62				stz 	NSMantissa3
.25e8	64 32		stz $32				stz 	NSStatus 					; positive integer
.25ea	a2 00		ldx #$00			ldx 	#0 							; stack level
.25ec	a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.25ee	80 00		bra $25f0			bra 	ConvertInt32
.25f0					ConvertInt32:
.25f0	5a		phy				phy
.25f1	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.25f3	24 32		bit $32				bit 	NSStatus 					; output a - if not negative.
.25f5	10 08		bpl $25ff			bpl 	_CI32NotNeg
.25f7	48		pha				pha
.25f8	a9 2d		lda #$2d			lda 	#'-'
.25fa	99 71 05	sta $0571,y			sta 	numberBuffer,y
.25fd	c8		iny				iny
.25fe	68		pla				pla
.25ff					_CI32NotNeg:
.25ff	20 0d 26	jsr $260d			jsr 	_CI32DivideConvert 			; recursive conversion
.2602	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.2604	99 71 05	sta $0571,y			sta 	numberBuffer,y
.2607	7a		ply				ply
.2608	a2 05		ldx #$05			ldx 	#numberBuffer >> 8 			; return address in XA
.260a	a9 71		lda #$71			lda 	#numberBuffer & $FF
.260c	60		rts				rts
.260d					_CI32DivideConvert:
.260d	e8		inx				inx 								; write to next slot up
.260e	20 73 26	jsr $2673			jsr 	FloatSetByte 		 		; write the base out.
.2611	ca		dex				dex
.2612	20 07 22	jsr $2207			jsr 	Int32Divide 				; divide
.2615	b5 3e		lda $3e,x			lda 	NSMantissa0,x 				; save remainder
.2617	48		pha				pha
.2618	20 f6 21	jsr $21f6			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.261b	20 93 26	jsr $2693			jsr 	FloatIsZero 				; is it zero ?
.261e	f0 05		beq $2625			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.2620	b5 3f		lda $3f,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.2622	20 0d 26	jsr $260d			jsr 	_CI32DivideConvert 			; and recusrively call.
.2625					_CI32NoRecurse:
.2625	68		pla				pla 								; remainder
.2626	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.2628	90 02		bcc $262c			bcc 	_CI32NotHex
.262a	69 26		adc #$26			adc 	#6+32
.262c					_CI32NotHex:
.262c	69 30		adc #$30			adc 	#48
.262e	99 71 05	sta $0571,y			sta 	numberBuffer,y 				; write out and exit
.2631	c8		iny				iny
.2632	60		rts				rts
.2633					FloatNegate:
.2633	b5 32		lda $32,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.2635	49 80		eor #$80			eor 	#$80  						; toggle the negative flag
.2637	95 32		sta $32,x			sta 	NSStatus,x
.2639	60		rts				rts
.263a					FloatNegateMantissa:
.263a	38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.263b	a9 00		lda #$00			lda 	#0
.263d	f5 3e		sbc $3e,x			sbc 	NSMantissa0,x
.263f	95 3e		sta $3e,x			sta 	NSMantissa0,x
.2641	a9 00		lda #$00			lda 	#0
.2643	f5 4a		sbc $4a,x			sbc 	NSMantissa1,x
.2645	95 4a		sta $4a,x			sta 	NSMantissa1,x
.2647	a9 00		lda #$00			lda 	#0
.2649	f5 56		sbc $56,x			sbc 	NSMantissa2,x
.264b	95 56		sta $56,x			sta 	NSMantissa2,x
.264d	a9 00		lda #$00			lda 	#0
.264f	f5 62		sbc $62,x			sbc 	NSMantissa3,x
.2651	95 62		sta $62,x			sta 	NSMantissa3,x
.2653	60		rts				rts
.2654					FloatShiftUpTwo:
.2654	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.2656	95 40		sta $40,x			sta 	NSMantissa0+2,x
.2658	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.265a	95 4c		sta $4c,x			sta 	NSMantissa1+2,x
.265c	b5 56		lda $56,x			lda 	NSMantissa2,x
.265e	95 58		sta $58,x			sta 	NSMantissa2+2,x
.2660	b5 62		lda $62,x			lda 	NSMantissa3,x
.2662	95 64		sta $64,x			sta 	NSMantissa3+2,x
.2664	b5 6e		lda $6e,x			lda 	NSExponent,x
.2666	95 70		sta $70,x			sta 	NSExponent+2,x
.2668	b5 32		lda $32,x			lda 	NSStatus,x
.266a	95 34		sta $34,x			sta 	NSStatus+2,x
.266c	60		rts				rts
.266d					FloatSetZeroMantissaOnly:
.266d	74 3e		stz $3e,x			stz 	NSMantissa0,x
.266f	80 08		bra $2679			bra 	FloatZero13
.2671					FloatSetZero:
.2671	a9 00		lda #$00			lda 	#0
.2673					FloatSetByte:
.2673	74 6e		stz $6e,x			stz 	NSExponent,x 				; zero exponent, as +ve integer value.
.2675					FloatSetMantissa:
.2675	95 3e		sta $3e,x			sta 	NSMantissa0,x 				; zero mantissa
.2677	74 32		stz $32,x			stz 	NSStatus,x
.2679					FloatZero13:
.2679	74 4a		stz $4a,x			stz 	NSMantissa1,x
.267b	74 56		stz $56,x			stz 	NSMantissa2,x
.267d	74 62		stz $62,x			stz 	NSMantissa3,x
.267f	60		rts				rts
.2680					FloatShiftLeft:
.2680	18		clc				clc
.2681					FloatRotateLeft:
.2681	36 3e		rol $3e,x			rol 	NSMantissa0,x
.2683	36 4a		rol $4a,x			rol		NSMantissa1,x
.2685	36 56		rol $56,x			rol		NSMantissa2,x
.2687	36 62		rol $62,x			rol		NSMantissa3,x
.2689	60		rts				rts
.268a					FloatShiftRight:
.268a	56 62		lsr $62,x			lsr 	NSMantissa3,x
.268c	76 56		ror $56,x			ror		NSMantissa2,x
.268e	76 4a		ror $4a,x			ror		NSMantissa1,x
.2690	76 3e		ror $3e,x			ror		NSMantissa0,x
.2692	60		rts				rts
.2693					FloatIsZero:
.2693	b5 62		lda $62,x			lda 	NSMantissa3,x
.2695	15 56		ora $56,x			ora		NSMantissa2,x
.2697	15 4a		ora $4a,x			ora		NSMantissa1,x
.2699	15 3e		ora $3e,x			ora		NSMantissa0,x
.269b	60		rts				rts

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/polynomials.library

.269c					FloatArcTan:
.269c	20 c6 23	jsr $23c6			jsr 	FloatNormalise 					; normalise x
.269f	b5 32		lda $32,x			lda 	NSStatus,x 						; save sign, make absolute
.26a1	48		pha				pha
.26a2	74 32		stz $32,x			stz 	NSStatus,x
.26a4	b5 6e		lda $6e,x			lda 	NSExponent,x 					; $40000000 ^ $E2 is 1.0
.26a6	c9 e2		cmp #$e2			cmp 	#$E2
.26a8	90 25		bcc $26cf			bcc 	_UANoFixup
.26aa	8a		txa				txa 									; value in +1
.26ab	a8		tay				tay
.26ac	c8		iny				iny
.26ad	20 55 28	jsr $2855			jsr 	CopyFloatXY
.26b0	a9 01		lda #$01			lda 	#1 								; 1.0 in +0
.26b2	20 73 26	jsr $2673			jsr 	FloatSetByte
.26b5	e8		inx				inx
.26b6	20 ba 21	jsr $21ba			jsr 	FloatDivide
.26b9	b0 21		bcs $26dc			bcs 	_FATError
.26bb	20 df 26	jsr $26df			jsr 	CoreAtn 						; calculate the root
.26be	20 4a 28	jsr $284a			jsr 	CompletePolynomial
.26c1	20 33 26	jsr $2633			jsr 	FloatNegate 					; make -ve
.26c4	a9 05		lda #$05			lda 	#Const_PiDiv2-Const_Base
.26c6	20 a1 28	jsr $28a1			jsr 	LoadConstant
.26c9	e8		inx				inx
.26ca	20 95 20	jsr $2095			jsr 	FloatAdd
.26cd	80 06		bra $26d5			bra 	_UAComplete
.26cf					_UANoFixup:
.26cf	20 df 26	jsr $26df			jsr 	CoreAtn
.26d2	20 4a 28	jsr $284a			jsr 	CompletePolynomial
.26d5					_UAComplete:
.26d5	68		pla				pla 									; apply the result.
.26d6	55 32		eor $32,x			eor 	NSStatus,x
.26d8	95 32		sta $32,x			sta 	NSStatus,x
.26da	18		clc				clc
.26db	60		rts				rts
.26dc					_FATError:
.26dc	68		pla				pla
.26dd	38		sec				sec
.26de	60		rts				rts
.26df					CoreAtn:
.26df	a9 4d		lda #$4d			lda 	#AtnCoefficients & $FF
.26e1	a0 27		ldy #$27			ldy 	#AtnCoefficients >> 8
.26e3	4c 9e 29	jmp $299e			jmp 	CorePolySquared
.26e6					ExpCoefficients:
>26e6	07					.byte	7
>26e7	2b 1f 2c 5a				.dword	$5a2c1f2b ; 2.1498763701e-05
>26eb	d2					.byte	$d2
>26ec	8e 59 3f 4b				.dword	$4b3f598e ; 0.00014352314037
>26f0	d5					.byte	$d5
>26f1	c3 71 f7 57				.dword	$57f771c3 ; 0.0013422634825
>26f5	d8					.byte	$d8
>26f6	15 0e c2 4e				.dword	$4ec20e15 ; 0.0096140170135
>26fa	db					.byte	$db
>26fb	05 ac ac 71				.dword	$71acac05 ; 0.05550512686
>26ff	dd					.byte	$dd
>2700	e3 f3 fe 7a				.dword	$7afef3e3 ; 0.2402263846
>2704	df					.byte	$df
>2705	08 0c b9 58				.dword	$58b90c08 ; 0.69314718618
>2709	e1					.byte	$e1
>270a	00 00 00 40				.dword	$40000000 ; 1.0
>270e	e2					.byte	$e2
.270f					SinCoefficients:
>270f	06					.byte	6
>2710	8d 16 0d f3				.dword	$f30d168d ; -14.381390672
>2714	e5					.byte	$e5
>2715	fc fd 03 54				.dword	$5403fdfc ; 42.007797122
>2719	e7					.byte	$e7
>271a	81 44 b4 cc				.dword	$ccb44481 ; -76.704170257
>271e	e8					.byte	$e8
>271f	f1 ef 9a 51				.dword	$519aeff1 ; 81.605223686
>2723	e8					.byte	$e8
>2724	94 f3 ae d2				.dword	$d2aef394 ; -41.341702104
>2728	e7					.byte	$e7
>2729	51 ed 87 64				.dword	$6487ed51 ; 6.2831853069
>272d	e4					.byte	$e4
>272e	00 00 00 00				.dword	$00000000 ; 0.0
>2732	00					.byte	$00
.2733					LogCoefficients:
>2733	04					.byte	4
>2734	bd 65 2b 6f				.dword	$6f2b65bd ; 0.43425594189
>2738	e0					.byte	$e0
>2739	b2 85 cd 49				.dword	$49cd85b2 ; 0.57658454124
>273d	e1					.byte	$e1
>273e	8b 49 1c 7b				.dword	$7b1c498b ; 0.96180075919
>2742	e1					.byte	$e1
>2743	90 1d 55 5c				.dword	$5c551d90 ; 2.8853900731
>2747	e3					.byte	$e3
>2748	00 00 00 c0				.dword	$c0000000 ; -0.5
>274c	e1					.byte	$e1
.274d					AtnCoefficients:
>274d	0c					.byte	12
>274e	ea de c1 d9				.dword	$d9c1deea ; -0.00068479391189
>2752	d7					.byte	$d7
>2753	7a 53 7a 4f				.dword	$4f7a537a ; 0.0048509421558
>2757	da					.byte	$da
>2758	08 58 fe c1				.dword	$c1fe5808 ; -0.016111701843
>275c	dc					.byte	$dc
>275d	e5 b3 0f 46				.dword	$460fb3e5 ; 0.034209638048
>2761	dd					.byte	$dd
>2762	e1 e5 29 ef				.dword	$ef29e5e1 ; -0.054279132761
>2766	dd					.byte	$dd
>2767	26 38 32 4a				.dword	$4a323826 ; 0.07245719654
>276b	de					.byte	$de
>276c	bd 28 f5 db				.dword	$dbf528bd ; -0.089802395378
>2770	de					.byte	$de
>2771	3f 44 98 71				.dword	$7198443f ; 0.11093241343
>2775	de					.byte	$de
>2776	9d 4c 22 c9				.dword	$c9224c9d ; -0.14283980767
>277a	df					.byte	$df
>277b	e3 48 66 66				.dword	$666648e3 ; 0.19999912049
>277f	df					.byte	$df
>2780	0a 55 55 d5				.dword	$d555550a ; -0.33333331568
>2784	e0					.byte	$e0
>2785	00 00 00 40				.dword	$40000000 ; 1.0
>2789	e2					.byte	$e2
>278a	00 00 00 00				.dword	$00000000 ; 0.0
>278e	00					.byte	$00
.278f					Const_Base:
.278f					Const_1Div2Pi:
>278f	b7 c1 7c 51				.dword	$517cc1b7 ; 0.15915494
>2793	df					.byte	$df
.2794					Const_PiDiv2:
>2794	51 ed 87 64				.dword	$6487ed51 ; 1.57079633
>2798	e2					.byte	$e2
.2799					Const_Log2_e:
>2799	95 1d 55 5c				.dword	$5c551d95 ; 1.44269504
>279d	e2					.byte	$e2
.279e					Const_sqrt_2:
>279e	9a 79 82 5a				.dword	$5a82799a ; 1.41421356
>27a2	e2					.byte	$e2
.27a3					Const_sqrt_half:
>27a3	9a 79 82 5a				.dword	$5a82799a ; 0.70710678
>27a7	e1					.byte	$e1
.27a8					Const_pi:
>27a8	51 ed 87 64				.dword	$6487ed51 ; 3.14159265
>27ac	e3					.byte	$e3
.27ad					Const_half:
>27ad	00 00 00 40				.dword	$40000000 ; 0.50000000
>27b1	e1					.byte	$e1
.27b2					Const_ln_e:
>27b2	fc 0b b9 58				.dword	$58b90bfc ; 0.69314718
>27b6	e1					.byte	$e1
.27b7					FloatCosine:
.27b7	a9 05		lda #$05			lda 	#Const_PiDiv2-Const_Base
.27b9	20 a1 28	jsr $28a1			jsr 	LoadConstant
.27bc	e8		inx				inx
.27bd	20 95 20	jsr $2095			jsr 	FloatAdd
.27c0	4c 57 29	jmp $2957			jmp 	FloatSine
.27c3					FloatExponent:
.27c3	a9 0a		lda #$0a			lda 	#Const_Log2_e-Const_Base
.27c5	20 a1 28	jsr $28a1			jsr 	LoadConstant
.27c8	e8		inx				inx
.27c9	20 31 23	jsr $2331			jsr 	FloatMultiply
.27cc	20 0e 28	jsr $280e			jsr 	_UECopy01 				; copy 0 to 1, get integer part to 1
.27cf	e8		inx				inx
.27d0	20 ac 22	jsr $22ac			jsr 	FloatIntegerPart
.27d3	ca		dex				dex
.27d4	b5 4b		lda $4b,x			lda 	NSMantissa1+1,x
.27d6	15 57		ora $57,x			ora 	NSMantissa2+1,x
.27d8	15 63		ora $63,x			ora 	NSMantissa3+1,x
.27da	d0 38		bne $2814			bne 	_UERangeError
.27dc	b5 3f		lda $3f,x			lda 	NSMantissa0+1,x 		; push integer part on stack.
.27de	c9 40		cmp #$40			cmp 	#64
.27e0	b0 32		bcs $2814			bcs 	_UERangeError
.27e2	48		pha				pha
.27e3	b5 32		lda $32,x			lda 	NSStatus,x 				; push sign
.27e5	48		pha				pha
.27e6	20 51 22	jsr $2251			jsr 	FloatFractionalPart		; copy 0 to 1, get fractional part to 0
.27e9	68		pla				pla
.27ea	10 14		bpl $2800			bpl 	_UEPositive
.27ec	e8		inx				inx 							; 1-x
.27ed	a9 01		lda #$01			lda 	#1
.27ef	20 73 26	jsr $2673			jsr 	FloatSetByte
.27f2	ca		dex				dex
.27f3	20 33 26	jsr $2633			jsr 	FloatNegate
.27f6	e8		inx				inx
.27f7	20 95 20	jsr $2095			jsr 	FloatAdd
.27fa	68		pla				pla 							; integer part +1 and negated.
.27fb	1a		inc a				inc 	a
.27fc	49 ff		eor #$ff			eor 	#$FF
.27fe	1a		inc a				inc 	a
.27ff	48		pha				pha
.2800					_UEPositive:
.2800	20 16 28	jsr $2816			jsr 	CoreExponent
.2803	20 4a 28	jsr $284a			jsr 	CompletePolynomial
.2806	68		pla				pla
.2807	18		clc				clc
.2808	75 6e		adc $6e,x			adc 	NSExponent,x
.280a	95 6e		sta $6e,x			sta 	NSExponent,x
.280c	18		clc				clc
.280d	60		rts				rts
.280e					_UECopy01:
.280e	8a		txa				txa
.280f	a8		tay				tay
.2810	c8		iny				iny
.2811	4c 55 28	jmp $2855			jmp 	CopyFloatXY
.2814					_UERangeError:
.2814	38		sec				sec
.2815	60		rts				rts
.2816					CoreExponent:
.2816	a9 e6		lda #$e6			lda 	#ExpCoefficients & $FF
.2818	a0 26		ldy #$26			ldy 	#ExpCoefficients >> 8
.281a	20 1e 28	jsr $281e			jsr 	CalculateHornerPolynomial
.281d	60		rts				rts
.281e					CalculateHornerPolynomial:
.281e	85 2c		sta $2c				sta 	zTemp0 						; save poly data from YA
.2820	84 2d		sty $2d				sty 	zTemp0+1
.2822	9c b8 05	stz $05b8			stz 	coefficientCount 			; zero the count.
.2825	8e b9 05	stx $05b9			stx 	xValueSlot 					; save xValue slot.
.2828	e8		inx				inx 								; set the count to zero.
.2829	20 71 26	jsr $2671			jsr 	FloatSetZero
.282c					_CHPLoop:
.282c	8a		txa				txa 								; copy X-1 to X+1
.282d	a8		tay				tay
.282e	ca		dex				dex
.282f	c8		iny				iny
.2830	20 55 28	jsr $2855			jsr 	CopyFloatXY 				; e.g. stack is <current> <x>
.2833	e8		inx				inx
.2834	e8		inx				inx
.2835	20 31 23	jsr $2331			jsr 	FloatMultiply 				; times current by X
.2838	e8		inx				inx
.2839	20 74 28	jsr $2874			jsr 	GetCoefficient 				; coefficient into X+1
.283c	20 95 20	jsr $2095			jsr 	FloatAdd 					; and add
.283f	ee b8 05	inc $05b8			inc 	coefficientCount
.2842	ad b8 05	lda $05b8			lda 	coefficientCount
.2845	d2 2c		cmp ($2c)			cmp 	(zTemp0)
.2847	d0 e3		bne $282c			bne 	_CHPLoop
.2849	60		rts				rts
.284a					CompletePolynomial:
.284a	20 31 23	jsr $2331			jsr 	FloatMultiply
.284d	e8		inx				inx 								; get the last value
.284e	20 74 28	jsr $2874			jsr 	GetCoefficient
.2851	20 95 20	jsr $2095			jsr 	FloatAdd 					; and add it
.2854	60		rts				rts
.2855					CopyFloatXY:
.2855	b5 6e		lda $6e,x			lda 	NSExponent,x
.2857	99 6e 00	sta $006e,y			sta 	NSExponent,y
.285a	b5 32		lda $32,x			lda 	NSStatus,x
.285c	99 32 00	sta $0032,y			sta 	NSStatus,y
.285f	b5 3e		lda $3e,x			lda 	NSMantissa0,x
.2861	99 3e 00	sta $003e,y			sta 	NSMantissa0,y
.2864	b5 4a		lda $4a,x			lda 	NSMantissa1,x
.2866	99 4a 00	sta $004a,y			sta 	NSMantissa1,y
.2869	b5 56		lda $56,x			lda 	NSMantissa2,x
.286b	99 56 00	sta $0056,y			sta 	NSMantissa2,y
.286e	b5 62		lda $62,x			lda 	NSMantissa3,x
.2870	99 62 00	sta $0062,y			sta 	NSMantissa3,y
.2873	60		rts				rts
.2874					GetCoefficient:
.2874	5a		phy				phy
.2875	ad b8 05	lda $05b8			lda 	coefficientCount 			; 5 per block
.2878	0a		asl a				asl 	a
.2879	0a		asl a				asl 	a
.287a	38		sec				sec 								; +1 for count
.287b	6d b8 05	adc $05b8			adc 	coefficientCount
.287e	a8		tay				tay
.287f	b1 2c		lda ($2c),y			lda 	(zTemp0),y 					; copy mantissa
.2881	95 3e		sta $3e,x			sta 	NSMantissa0,x
.2883	c8		iny				iny
.2884	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.2886	95 4a		sta $4a,x			sta 	NSMantissa1,x
.2888	c8		iny				iny
.2889	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.288b	95 56		sta $56,x			sta 	NSMantissa2,x
.288d	c8		iny				iny
.288e	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.2890	48		pha				pha
.2891	29 7f		and #$7f			and 	#$7F 						; clear sign bit.
.2893	95 62		sta $62,x			sta 	NSMantissa3,x
.2895	c8		iny				iny
.2896	68		pla				pla
.2897	29 80		and #$80			and 	#$80
.2899	95 32		sta $32,x			sta 	NSStatus,x 					; put in status
.289b	b1 2c		lda ($2c),y			lda 	(zTemp0),y
.289d	95 6e		sta $6e,x			sta 	NSExponent,x
.289f	7a		ply				ply
.28a0	60		rts				rts
.05b8					coefficientCount:
>05b8							.fill 	1
.05b9					xValueSlot:
>05b9							.fill 	1
.28a1					LoadConstant:
.28a1	5a		phy				phy
.28a2	a8		tay				tay
.28a3	b9 8f 27	lda $278f,y			lda 	Const_Base+0,y
.28a6	95 3f		sta $3f,x			sta 	NSMantissa0+1,x
.28a8	b9 90 27	lda $2790,y			lda 	Const_Base+1,y
.28ab	95 4b		sta $4b,x			sta 	NSMantissa1+1,x
.28ad	b9 91 27	lda $2791,y			lda 	Const_Base+2,y
.28b0	95 57		sta $57,x			sta 	NSMantissa2+1,x
.28b2	b9 92 27	lda $2792,y			lda 	Const_Base+3,y
.28b5	48		pha				pha
.28b6	29 7f		and #$7f			and 	#$7F
.28b8	95 63		sta $63,x			sta 	NSMantissa3+1,x
.28ba	68		pla				pla
.28bb	29 80		and #$80			and 	#$80
.28bd	95 33		sta $33,x			sta 	NSStatus+1,x
.28bf	b9 93 27	lda $2793,y			lda 	Const_Base+4,y
.28c2	95 6f		sta $6f,x			sta 	NSExponent+1,x
.28c4	7a		ply				ply
.28c5	60		rts				rts
.28c6					FloatLogarithm:
.28c6	b5 32		lda $32,x			lda 	NSStatus,x 					; check > 0
.28c8	30 5f		bmi $2929			bmi 	_ULRange
.28ca	20 93 26	jsr $2693			jsr 	FloatIsZero
.28cd	f0 5a		beq $2929			beq 	_ULRange
.28cf	20 c6 23	jsr $23c6			jsr 	FloatNormalise 				; put into FP mode.
.28d2	b5 6e		lda $6e,x			lda 	NSExponent,x 				; get power
.28d4	48		pha				pha
.28d5	a9 e1		lda #$e1			lda 	#(-31) & $FF 				; force into range 0.5 -> 1
.28d7	95 6e		sta $6e,x			sta 	NSExponent,x
.28d9	a9 14		lda #$14			lda 	#Const_sqrt_half-Const_Base
.28db	20 a1 28	jsr $28a1			jsr 	LoadConstant
.28de	e8		inx				inx
.28df	20 95 20	jsr $2095			jsr 	FloatAdd
.28e2	8a		txa				txa 								; divide into sqrt 2.0
.28e3	a8		tay				tay
.28e4	c8		iny				iny
.28e5	20 55 28	jsr $2855			jsr 	CopyFloatXY
.28e8	ca		dex				dex
.28e9	a9 0f		lda #$0f			lda 	#Const_sqrt_2-Const_Base
.28eb	20 a1 28	jsr $28a1			jsr 	LoadConstant
.28ee	e8		inx				inx
.28ef	e8		inx				inx
.28f0	20 ba 21	jsr $21ba			jsr 	FloatDivide 				; if zero, error.
.28f3	b0 33		bcs $2928			bcs 	_ULRangePla
.28f5	20 33 26	jsr $2633			jsr 	FloatNegate 				; subtract from 1
.28f8	e8		inx				inx
.28f9	a9 01		lda #$01			lda 	#1
.28fb	20 73 26	jsr $2673			jsr 	FloatSetByte
.28fe	20 95 20	jsr $2095			jsr 	FloatAdd
.2901	20 2b 29	jsr $292b			jsr 	CoreLog
.2904	20 4a 28	jsr $284a			jsr 	CompletePolynomial
.2907	68		pla				pla 								; add exponent
.2908	18		clc				clc
.2909	69 1f		adc #$1f			adc 	#31 						; fix up
.290b	48		pha				pha
.290c	10 03		bpl $2911			bpl 	_LogNotNeg
.290e	49 ff		eor #$ff			eor 	#$FF
.2910	1a		inc a				inc 	a
.2911					_LogNotNeg:
.2911	e8		inx				inx 								; set byte and sign.
.2912	20 73 26	jsr $2673			jsr 	FloatSetByte
.2915	68		pla				pla
.2916	29 80		and #$80			and 	#$80
.2918	95 32		sta $32,x			sta 	NSStatus,x
.291a	20 95 20	jsr $2095			jsr 	FloatAdd
.291d	a9 23		lda #$23			lda 	#Const_ln_e-Const_Base
.291f	20 a1 28	jsr $28a1			jsr 	LoadConstant
.2922	e8		inx				inx
.2923	20 31 23	jsr $2331			jsr 	FloatMultiply
.2926	18		clc				clc
.2927	60		rts				rts
.2928					_ULRangePla:
.2928	68		pla				pla
.2929					_ULRange:
.2929	38		sec				sec
.292a	60		rts				rts
.292b					CoreLog:
.292b	a9 33		lda #$33			lda 	#LogCoefficients & $FF
.292d	a0 27		ldy #$27			ldy 	#LogCoefficients >> 8
.292f	4c 9e 29	jmp $299e			jmp 	CorePolySquared
.2932					FloatPI:
.2932	a9 19		lda #$19			lda 	#Const_pi-Const_Base
.2934	20 a1 28	jsr $28a1			jsr 	LoadConstant
.2937	e8		inx				inx
.2938	18		clc				clc
.2939	60		rts				rts
.293a					FloatPower:
.293a	ca		dex				dex
.293b	8a		txa				txa 							; copy 0 to 2, so we can process it
.293c	a8		tay				tay
.293d	c8		iny				iny
.293e	c8		iny				iny
.293f	20 55 28	jsr $2855			jsr 	CopyFloatXY
.2942	e8		inx				inx 							; 2 = Log(0)
.2943	e8		inx				inx
.2944	20 c6 28	jsr $28c6			jsr 	FloatLogarithm
.2947	b0 0d		bcs $2956			bcs 	_FPWExit
.2949	20 31 23	jsr $2331			jsr 	FloatMultiply			; Multiply by original 1, into 1.
.294c	8a		txa				txa 							; copy to slot 0
.294d	a8		tay				tay
.294e	88		dey				dey
.294f	20 55 28	jsr $2855			jsr 	CopyFloatXY
.2952	ca		dex				dex  							; Exponent code.
.2953	20 c3 27	jsr $27c3			jsr 	FloatExponent
.2956					_FPWExit:
.2956	60		rts				rts
.2957					FloatSine:
.2957	b5 32		lda $32,x			lda 	NSStatus,x 					; save sign
.2959	48		pha				pha
.295a	74 32		stz $32,x			stz 	NSStatus,x 					; make +ve
.295c	a9 00		lda #$00			lda 	#Const_1Div2Pi-Const_Base
.295e	20 a1 28	jsr $28a1			jsr 	LoadConstant
.2961	e8		inx				inx
.2962	20 31 23	jsr $2331			jsr 	FloatMultiply
.2965	20 51 22	jsr $2251			jsr 	FloatFractionalPart 		; take the fractional part
.2968	b5 6e		lda $6e,x			lda 	NSExponent,x 				; check exponent
.296a	c9 e0		cmp #$e0			cmp 	#$E0 						; < $E0 exponent : 0-0.25
.296c	90 1f		bcc $298d			bcc 	_USProcessExit
.296e	f0 06		beq $2976			beq 	_USSubtractFromHalf 		; = $E0 exponent : 0.25-0.5
.2970	b5 62		lda $62,x			lda 	NSMantissa3,x 				; if > 0.75 which is $60000000:$E1
.2972	c9 60		cmp #$60			cmp 	#$60
.2974	b0 0e		bcs $2984			bcs 	_USSubtractOne
.2976					_USSubtractFromHalf:
.2976	a9 1e		lda #$1e			lda 	#Const_half-Const_Base
.2978	20 a1 28	jsr $28a1			jsr 	LoadConstant
.297b	e8		inx				inx
.297c	20 8f 20	jsr $208f			jsr 	FloatSubtract
.297f	20 33 26	jsr $2633			jsr 	FloatNegate 				; then negate it
.2982	80 09		bra $298d			bra 	_USProcessExit 				; and exit
.2984					_USSubtractOne:
.2984	e8		inx				inx
.2985	a9 01		lda #$01			lda 	#1
.2987	20 73 26	jsr $2673			jsr 	FloatSetByte
.298a	20 8f 20	jsr $208f			jsr 	FloatSubtract
.298d					_USProcessExit:
.298d	20 9a 29	jsr $299a			jsr 	CoreSine
.2990	20 4a 28	jsr $284a			jsr 	CompletePolynomial
.2993	68		pla				pla 								; restore sign and apply
.2994	55 32		eor $32,x			eor 	NSStatus,x
.2996	95 32		sta $32,x			sta 	NSStatus,x
.2998	18		clc				clc
.2999	60		rts				rts
.299a					CoreSine:
.299a	a9 0f		lda #$0f			lda 	#SinCoefficients & $FF
.299c	a0 27		ldy #$27			ldy 	#SinCoefficients >> 8
.299e					CorePolySquared:
.299e	48		pha				pha 								; save coefficient table
.299f	5a		phy				phy
.29a0	8a		txa				txa 								; copy X to +1, +2
.29a1	a8		tay				tay
.29a2	c8		iny				iny
.29a3	20 55 28	jsr $2855			jsr 	CopyFloatXY
.29a6	c8		iny				iny
.29a7	20 55 28	jsr $2855			jsr 	CopyFloatXY
.29aa	e8		inx				inx 								; point to the pair and put x^2 on stack
.29ab	e8		inx				inx
.29ac	20 31 23	jsr $2331			jsr 	FloatMultiply
.29af	7a		ply				ply 								; coefficient table back.
.29b0	68		pla				pla
.29b1	20 1e 28	jsr $281e			jsr 	CalculateHornerPolynomial
.29b4	8a		txa				txa 								; copy back to slot #1
.29b5	a8		tay				tay
.29b6	88		dey				dey
.29b7	20 55 28	jsr $2855			jsr	 	CopyFloatXY
.29ba	ca		dex				dex 								; point at result
.29bb	60		rts				rts
.29bc					FloatSquareRoot:
.29bc	20 c6 28	jsr $28c6			jsr 	FloatLogarithm
.29bf	b0 06		bcs $29c7			bcs 	_FSQExit
.29c1	d6 6e		dec $6e,x			dec 	NSExponent,x
.29c3	20 c3 27	jsr $27c3			jsr 	FloatExponent
.29c6	18		clc				clc
.29c7					_FSQExit:
.29c7	60		rts				rts
.29c8					FloatTangent:
.29c8	da		phx				phx
.29c9	8a		txa				txa 								; sin -> +1
.29ca	a8		tay				tay
.29cb	c8		iny				iny
.29cc	20 55 28	jsr $2855			jsr 	CopyFloatXY
.29cf	e8		inx				inx
.29d0	20 57 29	jsr $2957			jsr 	FloatSine
.29d3	ca		dex				dex
.29d4	8a		txa				txa 								; cos -> +2
.29d5	a8		tay				tay
.29d6	c8		iny				iny
.29d7	c8		iny				iny
.29d8	20 55 28	jsr $2855			jsr 	CopyFloatXY
.29db	e8		inx				inx
.29dc	e8		inx				inx
.29dd	20 b7 27	jsr $27b7			jsr 	FloatCosine
.29e0	20 ba 21	jsr $21ba			jsr 	FloatDivide 				; calculate sin/cos
.29e3	b0 07		bcs $29ec			bcs 	_FTExit 					; divide by zero
.29e5	8a		txa				txa 								; copy result down.
.29e6	a8		tay				tay
.29e7	88		dey				dey
.29e8	20 55 28	jsr $2855			jsr 	CopyFloatXY
.29eb	18		clc				clc
.29ec					_FTExit:
.29ec	fa		plx				plx
.29ed	60		rts				rts

;******  Processing input file: testing/testend.asm

=$2a00							nextPage = (* + $FF) & $FF00 		; so I can include with that f*****g header.
.29fe					ObjectCodePreHeader:
>29fe	00 a0 d5 12 00 a6 b3 48				.binary "code/code.bin"
>2a06	00 b3 48 03 b3 48 06 40 00 b1 b8 40 03 b1 b8 40
>2a16	06 b1 0d 92 a6 d6 e7 ff a6 b3 48 00 b3 48 03 b3
>2a26	48 06 40 00 b1 b8 40 03 b1 b8 40 06 b1 0d 92 a6
>2a36	d6 20 00 a6 b3 48 00 b3 48 03 b3 48 06 40 00 b1
>2a46	b8 40 03 b1 b8 40 06 b1 0d 92 a6 a6 d0 03 31 2c
>2a56	32 a6 d0 05 35 2c 36 2c 37 a6 cb 90 a6 d1 fe ff
>2a66	c5 ff
=10752					ObjectCode = ObjectCodePreHeader+2 			; so the code is at XX00

;******  End of listing
