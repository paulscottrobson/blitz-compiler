
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass -c -Wall -o build/code.prg -L build/code.lst -l build/code.lbl /home/paulr/Projects/blitz-compiler/documents/../source/common-source/wrapper.asm testing/testing.asm /home/paulr/Projects/blitz-compiler/documents/../bin/runtime.library /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library /home/paulr/Projects/blitz-compiler/documents/../bin/polynomials.library testing/testend.asm
; Fri Oct  6 02:39:33 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../source/common-source/wrapper.asm

=$1000					CodeStart = $1000
=$22					ZeroPageMandatory = $22
=$400					MemoryStorage = $400
.1000	a2 ff		ldx #$ff			ldx 	#$FF
.1002	9a		txs				txs
.1003	4c 06 10	jmp $1006			jmp 	WrapperBoot
.0022					codePtr:
>0022							.fill 	2
.0024					codePage:
>0024							.fill 	1
.0025					objPtr:
>0025							.fill 	2
.0027					objPage:
>0027							.fill 	1
.0028					zTemp0:
>0028							.fill 	2
.002a					zTemp1:
>002a							.fill 	2
.002c					zTemp2:
>002c							.fill 	2

;******  Processing input file: testing/testing.asm

.1006					WrapperBoot:
.1006	a9 32		lda #$32			lda 	#ObjectCode >> 8 			; address of object code to run.
.1008	a2 81		ldx #$81			ldx 	#$81 						; first page of allocatable memory
.100a	a0 9f		ldy #$9f			ldy 	#$9F 						; byte after end of last page.
.100c	4c 0f 10	jmp $100f			jmp 	StartRuntime

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/runtime.library

=$80					C64_END                  = $80 ; $80 end
=$81					C64_FOR                  = $81 ; $81 for
=$82					C64_NEXT                 = $82 ; $82 next
=$83					C64_DATA                 = $83 ; $83 data
=$84					C64_INPUTHASH            = $84 ; $84 input#
=$85					C64_INPUT                = $85 ; $85 input
=$86					C64_DIM                  = $86 ; $86 dim
=$87					C64_READ                 = $87 ; $87 read
=$88					C64_LET                  = $88 ; $88 let
=$89					C64_GOTO                 = $89 ; $89 goto
=$8a					C64_RUN                  = $8a ; $8a run
=$8b					C64_IF                   = $8b ; $8b if
=$8c					C64_RESTORE              = $8c ; $8c restore
=$8d					C64_GOSUB                = $8d ; $8d gosub
=$8e					C64_RETURN               = $8e ; $8e return
=$8f					C64_REM                  = $8f ; $8f rem
=$90					C64_STOP                 = $90 ; $90 stop
=$91					C64_ON                   = $91 ; $91 on
=$92					C64_WAIT                 = $92 ; $92 wait
=$93					C64_LOAD                 = $93 ; $93 load
=$94					C64_SAVE                 = $94 ; $94 save
=$95					C64_VERIFY               = $95 ; $95 verify
=$96					C64_DEF                  = $96 ; $96 def
=$97					C64_POKE                 = $97 ; $97 poke
=$98					C64_PRINTHASH            = $98 ; $98 print#
=$99					C64_PRINT                = $99 ; $99 print
=$9a					C64_CONT                 = $9a ; $9a cont
=$9b					C64_LIST                 = $9b ; $9b list
=$9c					C64_CLR                  = $9c ; $9c clr
=$9d					C64_CMD                  = $9d ; $9d cmd
=$9e					C64_SYS                  = $9e ; $9e sys
=$9f					C64_OPEN                 = $9f ; $9f open
=$a0					C64_CLOSE                = $a0 ; $a0 close
=$a1					C64_GET                  = $a1 ; $a1 get
=$a2					C64_NEW                  = $a2 ; $a2 new
=$a3					C64_TABLB                = $a3 ; $a3 tab(
=$a4					C64_TO                   = $a4 ; $a4 to
=$a5					C64_FN                   = $a5 ; $a5 fn
=$a6					C64_SPCLB                = $a6 ; $a6 spc(
=$a7					C64_THEN                 = $a7 ; $a7 then
=$a8					C64_NOT                  = $a8 ; $a8 not
=$a9					C64_STEP                 = $a9 ; $a9 step
=$aa					C64_PLUS                 = $aa ; $aa +
=$ab					C64_MINUS                = $ab ; $ab -
=$ac					C64_TIMES                = $ac ; $ac *
=$ad					C64_DIVIDE               = $ad ; $ad /
=$ae					C64_POWER                = $ae ; $ae ^
=$af					C64_AND                  = $af ; $af and
=$b0					C64_OR                   = $b0 ; $b0 or
=$b1					C64_GREATER              = $b1 ; $b1 >
=$b2					C64_EQUAL                = $b2 ; $b2 =
=$b3					C64_LESS                 = $b3 ; $b3 <
=$b4					C64_SGN                  = $b4 ; $b4 sgn
=$b5					C64_INT                  = $b5 ; $b5 int
=$b6					C64_ABS                  = $b6 ; $b6 abs
=$b7					C64_USR                  = $b7 ; $b7 usr
=$b8					C64_FRE                  = $b8 ; $b8 fre
=$b9					C64_POS                  = $b9 ; $b9 pos
=$ba					C64_SQR                  = $ba ; $ba sqr
=$bb					C64_RND                  = $bb ; $bb rnd
=$bc					C64_LOG                  = $bc ; $bc log
=$bd					C64_EXP                  = $bd ; $bd exp
=$be					C64_COS                  = $be ; $be cos
=$bf					C64_SIN                  = $bf ; $bf sin
=$c0					C64_TAN                  = $c0 ; $c0 tan
=$c1					C64_ATN                  = $c1 ; $c1 atn
=$c2					C64_PEEK                 = $c2 ; $c2 peek
=$c3					C64_LEN                  = $c3 ; $c3 len
=$c4					C64_STRDOLLAR            = $c4 ; $c4 str$
=$c5					C64_VAL                  = $c5 ; $c5 val
=$c6					C64_ASC                  = $c6 ; $c6 asc
=$c7					C64_CHRDOLLAR            = $c7 ; $c7 chr$
=$c8					C64_LEFTDOLLAR           = $c8 ; $c8 left$
=$c9					C64_RIGHTDOLLAR          = $c9 ; $c9 right$
=$ca					C64_MIDDOLLAR            = $ca ; $ca mid$
=$cb					C64_GO                   = $cb ; $cb go
=$ce80					C64_MON                  = $ce80 ; $ce80 mon
=$ce81					C64_DOS                  = $ce81 ; $ce81 dos
=$ce82					C64_OLD                  = $ce82 ; $ce82 old
=$ce83					C64_GEOS                 = $ce83 ; $ce83 geos
=$ce84					C64_VPOKE                = $ce84 ; $ce84 vpoke
=$ce85					C64_VLOAD                = $ce85 ; $ce85 vload
=$ce86					C64_SCREEN               = $ce86 ; $ce86 screen
=$ce87					C64_PSET                 = $ce87 ; $ce87 pset
=$ce88					C64_LINE                 = $ce88 ; $ce88 line
=$ce89					C64_FRAME                = $ce89 ; $ce89 frame
=$ce8a					C64_RECT                 = $ce8a ; $ce8a rect
=$ce8b					C64_CHAR                 = $ce8b ; $ce8b char
=$ce8c					C64_MOUSE                = $ce8c ; $ce8c mouse
=$ce8d					C64_COLOR                = $ce8d ; $ce8d color
=$ce8e					C64_TEST                 = $ce8e ; $ce8e test
=$ce8f					C64_RESET                = $ce8f ; $ce8f reset
=$ce90					C64_CLS                  = $ce90 ; $ce90 cls
=$ce91					C64_CODEX                = $ce91 ; $ce91 codex
=$ce92					C64_LOCATE               = $ce92 ; $ce92 locate
=$ce93					C64_BOOT                 = $ce93 ; $ce93 boot
=$ce94					C64_KEYMAP               = $ce94 ; $ce94 keymap
=$ce95					C64_BLOAD                = $ce95 ; $ce95 bload
=$ce96					C64_BVLOAD               = $ce96 ; $ce96 bvload
=$ce97					C64_BVERIFY              = $ce97 ; $ce97 bverify
=$ce98					C64_BANK                 = $ce98 ; $ce98 bank
=$ce99					C64_FMINIT               = $ce99 ; $ce99 fminit
=$ce9a					C64_FMNOTE               = $ce9a ; $ce9a fmnote
=$ce9b					C64_FMDRUM               = $ce9b ; $ce9b fmdrum
=$ce9c					C64_FMINST               = $ce9c ; $ce9c fminst
=$ce9d					C64_FMVIB                = $ce9d ; $ce9d fmvib
=$ce9e					C64_FMFREQ               = $ce9e ; $ce9e fmfreq
=$ce9f					C64_FMVOL                = $ce9f ; $ce9f fmvol
=$cea0					C64_FMPAN                = $cea0 ; $cea0 fmpan
=$cea1					C64_FMPLAY               = $cea1 ; $cea1 fmplay
=$cea2					C64_FMCHORD              = $cea2 ; $cea2 fmchord
=$cea3					C64_FMPOKE               = $cea3 ; $cea3 fmpoke
=$cea4					C64_PSGINIT              = $cea4 ; $cea4 psginit
=$cea5					C64_PSGNOTE              = $cea5 ; $cea5 psgnote
=$cea6					C64_PSGVOL               = $cea6 ; $cea6 psgvol
=$cea7					C64_PSGWAV               = $cea7 ; $cea7 psgwav
=$cea8					C64_PSGFREQ              = $cea8 ; $cea8 psgfreq
=$cea9					C64_PSGPAN               = $cea9 ; $cea9 psgpan
=$ceaa					C64_PSGPLAY              = $ceaa ; $ceaa psgplay
=$ceab					C64_PSGCHORD             = $ceab ; $ceab psgchord
=$ceac					C64_REBOOT               = $ceac ; $ceac reboot
=$cead					C64_POWEROFF             = $cead ; $cead poweroff
=$ceae					C64_I2CPOKE              = $ceae ; $ceae i2cpoke
=$ceaf					C64_SLEEP                = $ceaf ; $ceaf sleep
=$ceb0					C64_BSAVE                = $ceb0 ; $ceb0 bsave
=$ceb1					C64_MENU                 = $ceb1 ; $ceb1 menu
=$ceb2					C64_REN                  = $ceb2 ; $ceb2 ren
=$ceb3					C64_LINPUT               = $ceb3 ; $ceb3 linput
=$ceb4					C64_LINPUTHASH           = $ceb4 ; $ceb4 linput#
=$ceb5					C64_BINPUTHASH           = $ceb5 ; $ceb5 binput#
=$ceb6					C64_HELP                 = $ceb6 ; $ceb6 help
=$ced0					C64_VPEEK                = $ced0 ; $ced0 vpeek
=$ced1					C64_MX                   = $ced1 ; $ced1 mx
=$ced2					C64_MY                   = $ced2 ; $ced2 my
=$ced3					C64_MB                   = $ced3 ; $ced3 mb
=$ced4					C64_JOY                  = $ced4 ; $ced4 joy
=$ced5					C64_HEXDOLLAR            = $ced5 ; $ced5 hex$
=$ced6					C64_BINDOLLAR            = $ced6 ; $ced6 bin$
=$ced7					C64_I2CPEEK              = $ced7 ; $ced7 i2cpeek
=$ced8					C64_POINTER              = $ced8 ; $ced8 pointer
=$ced9					C64_STRPTR               = $ced9 ; $ced9 strptr
=$ceda					C64_RPTDOLLAR            = $ceda ; $ceda rpt$
.002e					zsTemp:
>002e							.fill 	2
.0030					runtimeStackPtr:
>0030							.fill 	2
.0400					stringLowMemory:
>0400							.fill 	2
.0402					stringHighMemory:
>0402							.fill 	2
=$e4					FRAME_GOSUB = $E4 							; Gosub has 4 bytes
=211					FRAME_FOR = $C0+19 							; For has 19 bytes
=$80					PCD_STARTBINARY = $80
=$8d					PCD_ENDBINARY = $8d
=$8d					PCD_STARTCOMMAND = $8d
=$ca					PCD_ENDCOMMAND = $ca
=$ca					PCD_STARTSYSTEM = $ca
=$d5					PCD_ENDSYSTEM = $d5
=$80					PCD_PLUS             = $80 ; +
=$81					PCD_MINUS            = $81 ; -
=$82					PCD_TIMES            = $82 ; *
=$83					PCD_DIVIDE           = $83 ; /
=$84					PCD_POWER            = $84 ; ^
=$85					PCD_AND              = $85 ; and
=$86					PCD_OR               = $86 ; or
=$87					PCD_GREATER          = $87 ; >
=$88					PCD_EQUAL            = $88 ; =
=$89					PCD_LESS             = $89 ; <
=$8a					PCD_GREATEREQUAL     = $8a ; >=
=$8b					PCD_LESSGREATER      = $8b ; <>
=$8c					PCD_LESSEQUAL        = $8c ; <=
=$8d					PCD_ABS              = $8d ; abs
=$8e					PCD_ARRAY            = $8e ; array
=$8f					PCD_ASC              = $8f ; asc
=$90					PCD_ASSERT           = $90 ; assert
=$91					PCD_BINDOLLAR        = $91 ; bin$
=$92					PCD_PRINTCMD_CHR     = $92 ; print.chr
=$93					PCD_CHRDOLLAR        = $93 ; chr$
=$94					PCD_SCMD_CMP         = $94 ; s.cmp
=$95					PCD_FOR              = $95 ; for
=$96					PCD_FRE              = $96 ; fre
=$97					PCD_GET              = $97 ; get
=$98					PCD_RETURN           = $98 ; return
=$99					PCD_PSET             = $99 ; pset
=$9a					PCD_LINE             = $9a ; line
=$9b					PCD_RECT             = $9b ; rect
=$9c					PCD_FRAME            = $9c ; frame
=$9d					PCD_CHAR             = $9d ; char
=$9e					PCD_HEXDOLLAR        = $9e ; hex$
=$9f					PCD_INPUT            = $9f ; input
=$a0					PCD_INPUTDOLLAR      = $a0 ; input$
=$a1					PCD_INPUTCMD_START   = $a1 ; input.start
=$a2					PCD_LEN              = $a2 ; len
=$a3					PCD_FCMD_CMP         = $a3 ; f.cmp
=$a4					PCD_INTCMD_DIV       = $a4 ; int.div
=$a5					PCD_NEGATE           = $a5 ; negate
=$a6					PCD_NEWCMD_LINE      = $a6 ; new.line
=$a7					PCD_NEXT             = $a7 ; next
=$a8					PCD_NOT              = $a8 ; not
=$a9					PCD_ON               = $a9 ; on
=$aa					PCD_MOREON           = $aa ; moreon
=$ab					PCD_PEEK             = $ab ; peek
=$ac					PCD_POKE             = $ac ; poke
=$ad					PCD_POS              = $ad ; pos
=$ae					PCD_GETCHANNEL       = $ae ; getchannel
=$af					PCD_SETCHANNEL       = $af ; setchannel
=$b0					PCD_PRINTCMD_N       = $b0 ; print.n
=$b1					PCD_PRINTCMD_S       = $b1 ; print.s
=$b2					PCD_READ             = $b2 ; read
=$b3					PCD_READDOLLAR       = $b3 ; read$
=$b4					PCD_RND              = $b4 ; rnd
=$b5					PCD_CONCAT           = $b5 ; concat
=$b6					PCD_SGN              = $b6 ; sgn
=$b7					PCD_PRINTCMD_TAB     = $b7 ; print.tab
=$b8					PCD_PRINTCMD_POS     = $b8 ; print.pos
=$b9					PCD_PRINTCMD_SPC     = $b9 ; print.spc
=$ba					PCD_STRDOLLAR        = $ba ; str$
=$bb					PCD_LEFTDOLLAR       = $bb ; left$
=$bc					PCD_RIGHTDOLLAR      = $bc ; right$
=$bd					PCD_MIDDOLLAR        = $bd ; mid$
=$be					PCD_SWAP             = $be ; swap
=$bf					PCD_TI               = $bf ; ti
=$c0					PCD_TIDOLLAR         = $c0 ; ti$
=$c1					PCD_USR              = $c1 ; usr
=$c2					PCD_VAL              = $c2 ; val
=$c3					PCD_CLOSE            = $c3 ; close
=$c4					PCD_EXIT             = $c4 ; exit
=$c5					PCD_DEBUG            = $c5 ; debug
=$c6					PCD_OPEN             = $c6 ; open
=$c7					PCD_SCREEN           = $c7 ; screen
=$c8					PCD_VPOKE            = $c8 ; vpoke
=$c9					PCD_VPEEK            = $c9 ; vpeek
=$ca					PCD_CMD_SHIFT        = $ca ; .shift
=$cb					PCD_CMD_BYTE         = $cb ; .byte
=$cc					PCD_CMD_WORD         = $cc ; .word
=$cd					PCD_CMD_FLOAT        = $cd ; .float
=$ce					PCD_CMD_STRING       = $ce ; .string
=$cf					PCD_CMD_DATA         = $cf ; .data
=$d0					PCD_CMD_GOTO         = $d0 ; .goto
=$d1					PCD_CMD_GOSUB        = $d1 ; .gosub
=$d2					PCD_CMD_GOTOCMD_Z    = $d2 ; .goto.z
=$d3					PCD_CMD_GOTOCMD_NZ   = $d3 ; .goto.nz
=$d4					PCD_CMD_VARSPACE     = $d4 ; .varspace
=$ca80					PCD_CLR              = $ca80 ; clr
=$ca81					PCD_DIM              = $ca81 ; dim
=$ca82					PCD_END              = $ca82 ; end
=$ca83					PCD_JOY              = $ca83 ; joy
=$ca84					PCD_INT              = $ca84 ; int
=$ca85					PCD_SQR              = $ca85 ; sqr
=$ca86					PCD_LOG              = $ca86 ; log
=$ca87					PCD_EXP              = $ca87 ; exp
=$ca88					PCD_COS              = $ca88 ; cos
=$ca89					PCD_SIN              = $ca89 ; sin
=$ca8a					PCD_TAN              = $ca8a ; tan
=$ca8b					PCD_ATN              = $ca8b ; atn
=$ca8c					PCD_MOUSE            = $ca8c ; mouse
=$ca8d					PCD_MB               = $ca8d ; mb
=$ca8e					PCD_MX               = $ca8e ; mx
=$ca8f					PCD_MY               = $ca8f ; my
=$ca90					PCD_RESTORE          = $ca90 ; restore
=$ca91					PCD_STOP             = $ca91 ; stop
=$ca92					PCD_SYS              = $ca92 ; sys
=$ca93					PCD_TIDOLLARCMD_WRITE = $ca93 ; ti$.write
=$ca94					PCD_WAIT             = $ca94 ; wait
=$ca95					PCD_I2CPOKE          = $ca95 ; i2cpoke
=$ca96					PCD_I2CPEEK          = $ca96 ; i2cpeek
=$ca97					PCD_BANK             = $ca97 ; bank
=$ca98					PCD_SLEEP            = $ca98 ; sleep
=$ca99					PCD_FMINIT           = $ca99 ; fminit
=$ca9a					PCD_FMNOTE           = $ca9a ; fmnote
=$ca9b					PCD_FMDRUM           = $ca9b ; fmdrum
=$ca9c					PCD_FMINST           = $ca9c ; fminst
=$ca9d					PCD_FMVIB            = $ca9d ; fmvib
=$ca9e					PCD_FMFREQ           = $ca9e ; fmfreq
=$ca9f					PCD_FMVOL            = $ca9f ; fmvol
=$caa0					PCD_FMPAN            = $caa0 ; fmpan
=$caa1					PCD_FMPLAY           = $caa1 ; fmplay
=$caa2					PCD_FMCHORD          = $caa2 ; fmchord
=$caa3					PCD_FMPOKE           = $caa3 ; fmpoke
=$caa4					PCD_PSGINIT          = $caa4 ; psginit
=$caa5					PCD_PSGNOTE          = $caa5 ; psgnote
=$caa6					PCD_PSGVOL           = $caa6 ; psgvol
=$caa7					PCD_PSGWAV           = $caa7 ; psgwav
=$caa8					PCD_PSGFREQ          = $caa8 ; psgfreq
=$caa9					PCD_PSGPAN           = $caa9 ; psgpan
=$caaa					PCD_PSGPLAY          = $caaa ; psgplay
=$caab					PCD_PSGCHORD         = $caab ; psgchord
=$caac					PCD_CLS              = $caac ; cls
=$caad					PCD_LOCATE           = $caad ; locate
=$caae					PCD_COLOR            = $caae ; color
=$9f20					VRAMLow0 = $9F20
=$9f21					VRAMMed0 = $9F21
=$9f22					VRAMHigh0 = $9F22
=$9f23					VRAMData0 = $9F23
=$c09f					X16A_audio_init=$C09F
=$c08d					X16A_bas_fmchordstring=$C08D
=$c000					X16A_bas_fmfreq=$C000
=$c003					X16A_bas_fmnote=$C003
=$c006					X16A_bas_fmplaystring=$C006
=$c009					X16A_bas_fmvib=$C009
=$c00c					X16A_bas_playstringvoice=$C00C
=$c090					X16A_bas_psgchordstring=$C090
=$c00f					X16A_bas_psgfreq=$C00F
=$c012					X16A_bas_psgnote=$C012
=$c015					X16A_bas_psgwav=$C015
=$c018					X16A_bas_psgplaystring=$C018
=$c01b					X16A_notecon_bas2fm=$C01B
=$c01e					X16A_notecon_bas2midi=$C01E
=$c021					X16A_notecon_bas2psg=$C021
=$c024					X16A_notecon_fm2bas=$C024
=$c027					X16A_notecon_fm2midi=$C027
=$c02a					X16A_notecon_fm2psg=$C02A
=$c02d					X16A_notecon_freq2bas=$C02D
=$c030					X16A_notecon_freq2fm=$C030
=$c033					X16A_notecon_freq2midi=$C033
=$c036					X16A_notecon_freq2psg=$C036
=$c039					X16A_notecon_midi2bas=$C039
=$c03c					X16A_notecon_midi2fm=$C03C
=$c03f					X16A_notecon_midi2psg=$C03F
=$c042					X16A_notecon_psg2bas=$C042
=$c045					X16A_notecon_psg2fm=$C045
=$c048					X16A_notecon_psg2midi=$C048
=$c093					X16A_psg_getatten=$C093
=$c096					X16A_psg_getpan=$C096
=$c04b					X16A_psg_init=$C04B
=$c04e					X16A_psg_playfreq=$C04E
=$c051					X16A_psg_read=$C051
=$c054					X16A_psg_setatten=$C054
=$c057					X16A_psg_setfreq=$C057
=$c05a					X16A_psg_setpan=$C05A
=$c05d					X16A_psg_setvol=$C05D
=$c060					X16A_psg_write=$C060
=$c0a2					X16A_psg_write_fast=$C0A2
=$c099					X16A_ym_getatten=$C099
=$c09c					X16A_ym_getpan=$C09C
=$c063					X16A_ym_init=$C063
=$c066					X16A_ym_loaddefpatches=$C066
=$c069					X16A_ym_loadpatch=$C069
=$c06c					X16A_ym_loadpatchlfn=$C06C
=$c06f					X16A_ym_playdrum=$C06F
=$c072					X16A_ym_playnote=$C072
=$c075					X16A_ym_setatten=$C075
=$c078					X16A_ym_setdrum=$C078
=$c07b					X16A_ym_setnote=$C07B
=$c07e					X16A_ym_setpan=$C07E
=$c081					X16A_ym_read=$C081
=$c084					X16A_ym_release=$C084
=$c087					X16A_ym_trigger=$C087
=$c08a					X16A_ym_write=$C08A
=2					X16_r0 = 2
=4					X16_r1 = 4
=6					X16_r2 = 6
=8					X16_r3 = 8
=10					X16_r4 = 10
=$ffa5					X16_ACPTR=$FFA5
=$ffcf					X16_BASIN=$FFCF
=$feba					X16_BSAVE=$FEBA
=$ffd2					X16_BSOUT=$FFD2
=$ffa8					X16_CIOUT=$FFA8
=$ffe7					X16_CLALL=$FFE7
=$ffc3					X16_CLOSE=$FFC3
=$ffc6					X16_CHKIN=$FFC6
=$ffc9					X16_CHKOUT=$FFC9
=$ff50					X16_clock_get_date_time=$FF50
=$ff4d					X16_clock_set_date_time=$FF4D
=$ffcf					X16_CHRIN=$FFCF
=$ffd2					X16_CHROUT=$FFD2
=$ff4a					X16_CLOSE_ALL=$FF4A
=$ffcc					X16_CLRCHN=$FFCC
=$fedb					X16_console_init=$FEDB
=$fee1					X16_console_get_char=$FEE1
=$fede					X16_console_put_char=$FEDE
=$fed8					X16_console_put_image=$FED8
=$fed5					X16_console_set_paging_message=$FED5
=$ff47					X16_enter_basic=$FF47
=$fecf					X16_entropy_get=$FECF
=$ff74					X16_fetch=$FF74
=$ff02					X16_FB_cursor_next_line=$FF02
=$feff					X16_FB_cursor_position=$FEFF
=$ff17					X16_FB_fill_pixels=$FF17
=$ff1a					X16_FB_filter_pixels=$FF1A
=$fef9					X16_FB_get_info=$FEF9
=$ff05					X16_FB_get_pixel=$FF05
=$ff08					X16_FB_get_pixels=$FF08
=$fef6					X16_FB_init=$FEF6
=$ff1d					X16_FB_move_pixels=$FF1D
=$ff11					X16_FB_set_8_pixels=$FF11
=$ff14					X16_FB_set_8_pixels_opaque=$FF14
=$fefc					X16_FB_set_palette=$FEFC
=$ff0b					X16_FB_set_pixel=$FF0B
=$ff0e					X16_FB_set_pixels=$FF0E
=$ffe4					X16_GETIN=$FFE4
=$ff23					X16_GRAPH_clear=$FF23
=$ff38					X16_GRAPH_draw_image=$FF38
=$ff2c					X16_GRAPH_draw_line=$FF2C
=$ff35					X16_GRAPH_draw_oval=$FF35
=$ff2f					X16_GRAPH_draw_rect=$FF2F
=$ff3e					X16_GRAPH_get_char_size=$FF3E
=$ff20					X16_GRAPH_init=$FF20
=$ff32					X16_GRAPH_move_rect=$FF32
=$ff41					X16_GRAPH_put_char=$FF41
=$ff29					X16_GRAPH_set_colors=$FF29
=$ff3b					X16_GRAPH_set_font=$FF3B
=$ff26					X16_GRAPH_set_window=$FF26
=$fec6					X16_i2c_read_byte=$FEC6
=$fec9					X16_i2c_write_byte=$FEC9
=$fff3					X16_IOBASE=$FFF3
=$ff6e					X16_JSRFAR=$FF6E
=$ff56					X16_joystick_get=$FF56
=$ff53					X16_joystick_scan=$FF53
=$fec0					X16_kbdbuf_get_modifiers=$FEC0
=$febd					X16_kbdbuf_peek=$FEBD
=$fec3					X16_kbdbuf_put=$FEC3
=$fed2					X16_keymap=$FED2
=$ffb1					X16_LISTEN=$FFB1
=$ff59					X16_LKUPLA=$FF59
=$ff5c					X16_LKUPSA=$FF5C
=$ffd5					X16_LOAD=$FFD5
=$ff44					X16_MACPTR=$FF44
=$ff9c					X16_MEMBOT=$FF9C
=$fee7					X16_memory_copy=$FEE7
=$feea					X16_memory_crc=$FEEA
=$feed					X16_memory_decompress=$FEED
=$fee4					X16_memory_fill=$FEE4
=$ff99					X16_MEMTOP=$FF99
=$fecc					X16_monitor=$FECC
=$ff68					X16_mouse_config=$FF68
=$ff6b					X16_mouse_get=$FF6B
=$ff71					X16_mouse_scan=$FF71
=$ffc0					X16_OPEN=$FFC0
=$ff65					X16_PFKEY=$FF65
=$fff0					X16_PLOT=$FFF0
=$ff7d					X16_PRIMM=$FF7D
=$ffde					X16_RDTIM=$FFDE
=$ffb7					X16_READST=$FFB7
=$ffd8					X16_SAVE=$FFD8
=$ffed					X16_SCREEN=$FFED
=$ff5f					X16_screen_mode=$FF5F
=$ff62					X16_screen_set_charset=$FF62
=$ff93					X16_SECOND=$FF93
=$ffba					X16_SETLFS=$FFBA
=$ff90					X16_SETMSG=$FF90
=$ffbd					X16_SETNAM=$FFBD
=$ffdb					X16_SETTIM=$FFDB
=$ffa2					X16_SETTMO=$FFA2
=$fef0					X16_sprite_set_image=$FEF0
=$fef3					X16_sprite_set_position=$FEF3
=$ff77					X16_stash=$FF77
=$ffe1					X16_STOP=$FFE1
=$ffb4					X16_TALK=$FFB4
=$ff96					X16_TKSA=$FF96
=$ffea					X16_UDTIM=$FFEA
=$ffae					X16_UNLSN=$FFAE
=$ffab					X16_UNTLK=$FFAB
=$311					USRRoutineAddress = $311
=$30c					SYS_Reg_A = $30C
=$30d					SYS_Reg_X = $30D
=$30e					SYS_Reg_Y = $30E
=$30f					SYS_Reg_S = $30F
=0					SelectRAMBank = 0
=1					SelectROMBank = 1
=$0a					X16_AudioCodeBank = $0A
.100f					StartRuntime:
.100f	8d 04 04	sta $0404			sta 	runtimeHigh 				; save address of code.
.1012	85 23		sta $23				sta 	codePtr+1 					; set pointer to code.
.1014	64 22		stz $22				stz 	codePtr
.1016	64 24		stz $24				stz 	codePage 					; zero current page.
.1018	8e 05 04	stx $0405			stx 	storeStartHigh 				; save from-to address.
.101b	8c 06 04	sty $0406			sty 	storeEndHigh
.101e	8e 07 04	stx $0407			stx 	variableStartPage
.1021	20 53 12	jsr $1253			jsr 	ClearMemory 				; clear memory.
.1024	20 c4 1f	jsr $1fc4			jsr 	XRuntimeSetup 				; initialise the runtime stuff.
.1027	20 c6 1c	jsr $1cc6		 	jsr		SetDefaultChannel			; set default input/output channel.
.102a	20 fc 1e	jsr $1efc			jsr 	RestoreCode 				; which we now call
.102d	a0 00		ldy #$00			ldy 	#0
.102f					NextCommand:
.102f	b1 22		lda ($22),y			lda 	(codePtr),y 				; get next
.1031	30 5b		bmi $108e			bmi 	NXCommand 					; -if -ve command
.1033	c8		iny				iny
.1034	c9 40		cmp #$40			cmp 	#64 						; 64..127 is load and store.
.1036	90 39		bcc $1071			bcc 	PushByteA 					; 0..63 is short constants.
.1038					NXLoadStore:
.1038	c9 78		cmp #$78			cmp		#120 						; is it an indirect read/write
.103a	b0 19		bcs $1055			bcs 	NXIndirectLoadStore
.103c	4a		lsr a				lsr 	a 							; / 4, so $48 => $12,
.103d	4a		lsr a				lsr 	a
.103e	29 0e		and #$0e			and 	#$0E
.1040	da		phx				phx 								; get ready to jump
.1041	aa		tax				tax
.1042	7c 45 10	jmp ($1045,x)			jmp 	(ReadWriteVectors,x) 		; go via the jump table.
.1045					ReadWriteVectors:
>1045	32 1e						.word 	ReadFloatCommand			; read float
>1047	0d 24						.word 	WriteFloatCommand 			; write float
>1049	6e 1e						.word 	ReadIntegerCommand 			; read integer
>104b	49 24						.word 	WriteIntegerCommand 		; write integer
>104d	b3 1e						.word 	ReadStringCommand 			; read string
>104f	88 24						.word 	WriteStringCommand 			; write string
>1051	21 14						.word 	Unimplemented
>1053	21 14						.word 	Unimplemented
.1055					NXIndirectLoadStore:
.1055	29 07		and #$07			and 	#7
.1057	0a		asl a				asl 	a
.1058	da		phx				phx
.1059	aa		tax				tax
.105a	7c 5d 10	jmp ($105d,x)			jmp 	(IndirectVectors,x)
.105d					IndirectVectors:
>105d	51 18						.word 	IndFloatRead 				; float read
>105f	65 18						.word 	IndInt16Read 				; int16 read
>1061	79 18						.word 	IndStringRead 				; string read
>1063	21 14						.word 	Unimplemented
>1065	8d 18						.word 	IndFloatWrite				; float write
>1067	a1 18						.word 	IndInt16Write 				; int16 write
>1069	b5 18						.word 	IndStringWrite 				; string write
>106b	21 14						.word 	Unimplemented
.106d					PushByteCommand:
.106d	fa		plx				plx
.106e	b1 22		lda ($22),y			lda 	(codePtr),y 				; get byte to write.
.1070	c8		iny				iny
.1071					PushByteA:
.1071	e8		inx				inx 								; push constant on stack
.1072	95 40		sta $40,x			sta 	NSMantissa0,x 				; save byte
.1074	74 4c		stz $4c,x			stz 	NSMantissa1,x 				; clear MSB
.1076					ClearRestWord:
.1076	74 58		stz $58,x			stz 	NSMantissa2,x 				; zero upper bytes, exponent, make iFloat32
.1078	74 64		stz $64,x			stz 	NSMantissa3,x
.107a	74 70		stz $70,x			stz 	NSExponent,x
.107c	74 34		stz $34,x			stz 	NSStatus,x
.107e	80 af		bra $102f			bra 	NextCommand
.1080					PushWordCommand:
.1080	fa		plx				plx
.1081	e8		inx				inx
.1082	b1 22		lda ($22),y			lda 	(codePtr),y 				; word to stack
.1084	c8		iny				iny
.1085	95 40		sta $40,x			sta 	NSMantissa0,x
.1087	b1 22		lda ($22),y			lda 	(codePtr),y
.1089	c8		iny				iny
.108a	95 4c		sta $4c,x			sta 	NSMantissa1,x
.108c	80 e8		bra $1076			bra 	ClearRestWord 				; handle everything else.
.108e					NXCommand:
.108e	c8		iny				iny 								; consume command.
.108f	10 03		bpl $1094			bpl 	_NXCommandNoFixUp
.1091	20 9a 10	jsr $109a			jsr 	FixUpY
.1094					_NXCommandNoFixUp:
.1094	0a		asl a				asl 	a 							; shift left
.1095	da		phx				phx 								; save SP on stack
.1096	aa		tax				tax				 					; and jump indirect
.1097	7c ee 22	jmp ($22ee,x)			jmp 	(VectorTable,x)
.109a					FixUpY:
.109a	48		pha				pha
.109b	98		tya				tya
.109c	18		clc				clc
.109d	65 22		adc $22				adc 	codePtr
.109f	85 22		sta $22				sta 	codePtr
.10a1	90 02		bcc $10a5			bcc 	_NoCPCarry
.10a3	e6 23		inc $23				inc 	codePtr+1
.10a5					_NoCPCarry:
.10a5	a0 00		ldy #$00			ldy 	#0
.10a7	68		pla				pla
.10a8	60		rts				rts
.0404					runtimeHigh:
>0404							.fill 	1
.0405					storeStartHigh:
>0405							.fill 	1
.0406					storeEndHigh:
>0406							.fill 	1
.0407					variableStartPage:
>0407							.fill 	1
.10a9					AbsoluteTOS:
.10a9	fa		plx				plx
.10aa	74 34		stz $34,x			stz 	NSStatus,x 					; dereferenced so just clear the status byte.
.10ac	4c 2f 10	jmp $102f			jmp 	NextCommand
.10af					CommandVarSpace:
.10af	fa		plx				plx
.10b0	b1 22		lda ($22),y			lda 	(codePtr),y					; 3 byte opcode, which is 'free' memory in variable area.
.10b2	85 32		sta $32				sta 	availableMemory
.10b4	c8		iny				iny
.10b5	b1 22		lda ($22),y			lda 	(codePtr),y
.10b7	18		clc				clc
.10b8	6d 07 04	adc $0407			adc 	variableStartPage			; offset to actual address.
.10bb	85 33		sta $33				sta 	availableMemory+1
.10bd	c8		iny				iny
.10be	4c 2f 10	jmp $102f			jmp 	NextCommand
.0032					availableMemory:
>0032							.fill 	2
.10c1					BinaryAnd:
.10c1	fa		plx				plx
.10c2	38		sec				sec
.10c3	80 02		bra $10c7			bra 	AndOrCommon
.10c5					BinaryOr:
.10c5	fa		plx				plx
.10c6	18		clc				clc
.10c7					AndOrCommon:
.10c7	08		php				php 								; save AND/OR flag
.10c8	20 8c 19	jsr $198c			jsr 	GetInteger16Bit
.10cb	ca		dex				dex
.10cc	20 8c 19	jsr $198c			jsr 	GetInteger16Bit
.10cf	28		plp				plp
.10d0	90 0e		bcc $10e0			bcc 	_AOCOrCode
.10d2	b5 40		lda $40,x			lda 	NSMantissa0,x 				; AND code
.10d4	35 41		and $41,x			and		NSMantissa0+1,x
.10d6	95 40		sta $40,x			sta 	NSMantissa0,x
.10d8	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.10da	35 4d		and $4d,x			and		NSMantissa1+1,x
.10dc	95 4c		sta $4c,x			sta 	NSMantissa1,x
.10de	80 0c		bra $10ec			bra 	_AOCComplete
.10e0					_AOCOrCode:
.10e0	b5 40		lda $40,x			lda 	NSMantissa0,x 				; OR code
.10e2	15 41		ora $41,x			ora		NSMantissa0+1,x
.10e4	95 40		sta $40,x			sta 	NSMantissa0,x
.10e6	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.10e8	15 4d		ora $4d,x			ora		NSMantissa1+1,x
.10ea	95 4c		sta $4c,x			sta 	NSMantissa1,x
.10ec					_AOCComplete:
.10ec	74 34		stz $34,x			stz 	NSStatus,x 					; make integer ?
.10ee	34 4c		bit $4c,x			bit 	NSMantissa1,x 				; result is -ve
.10f0	10 07		bpl $10f9			bpl 	_AOCExit
.10f2	20 9c 19	jsr $199c			jsr 	Negate16Bit 				; 2's complement
.10f5	a9 80		lda #$80			lda 	#$80 						; make it -ve
.10f7	95 34		sta $34,x			sta 	NSStatus,x
.10f9					_AOCExit:
.10f9	4c 2f 10	jmp $102f			jmp 	NextCommand
.10fc					ArrayConvert:
.10fc	fa		plx				plx
.10fd	5a		phy				phy
.10fe	b5 40		lda $40,x			lda 	NSMantissa0,x
.1100	85 2a		sta $2a				sta 	zTemp1
.1102	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.1104	18		clc				clc
.1105	6d 07 04	adc $0407			adc 	variableStartPage
.1108	85 2b		sta $2b				sta 	zTemp1+1
.110a	ca		dex				dex 								; count of indices to follow -> zTemp2
.110b	20 86 19	jsr $1986			jsr 	GetInteger8Bit
.110e	85 2c		sta $2c				sta 	zTemp2 						; subtract from stack.
.1110	8a		txa				txa
.1111	38		sec				sec
.1112	e5 2c		sbc $2c				sbc 	zTemp2
.1114	aa		tax				tax
.1115	da		phx				phx 								; stack points at the first index, which will be replaced.
.1116					_ACIndexLoop:
.1116	20 5a 2a	jsr $2a5a			jsr 	FloatIntegerPart 			; integer array index
.1119	20 8c 19	jsr $198c			jsr 	GetInteger16Bit 			; get the index => zTemp0
.111c	a0 01		ldy #$01			ldy 	#1 							; compare against the index count.
.111e	a5 28		lda $28				lda 	zTemp0
.1120	d2 2a		cmp ($2a)			cmp 	(zTemp1)
.1122	a5 29		lda $29				lda 	zTemp0+1
.1124	f1 2a		sbc ($2a),y			sbc 	(zTemp1),y
.1126	b0 79		bcs $11a1			bcs 	_ACBadIndex 				; index error.
.1128	c6 2c		dec $2c				dec 	zTemp2 						; decrement count, if zero, then innermost level
.112a	f0 29		beq $1155			beq 	_ACInnerLevel
.112c	a0 02		ldy #$02			ldy 	#2 							; check sub index.
.112e	b1 2a		lda ($2a),y			lda 	(zTemp1),y
.1130	10 6f		bpl $11a1			bpl 	_ACBadIndex
.1132	06 28		asl $28				asl 	zTemp0 						; double the index and add it to the base address
.1134	26 29		rol $29				rol 	zTemp0+1
.1136	18		clc				clc
.1137	a5 28		lda $28				lda		zTemp0
.1139	65 2a		adc $2a				adc 	zTemp1
.113b	85 28		sta $28				sta 	zTemp0
.113d	a5 29		lda $29				lda		zTemp0+1
.113f	65 2b		adc $2b				adc 	zTemp1+1
.1141	85 29		sta $29				sta 	zTemp0+1
.1143	a0 03		ldy #$03			ldy 	#3 							; we offset by 3 because 3 at entry, now get the address
.1145	b1 28		lda ($28),y			lda 	(zTemp0),y 					; into zTemp1 as a real address, not offset
.1147	85 2a		sta $2a				sta 	zTemp1
.1149	c8		iny				iny
.114a	b1 28		lda ($28),y			lda 	(zTemp0),y
.114c	18		clc				clc
.114d	6d 07 04	adc $0407			adc 	variableStartPage
.1150	85 2b		sta $2b				sta 	zTemp1+1
.1152	e8		inx				inx 								; next index
.1153	80 c1		bra $1116			bra 	_ACIndexLoop
.1155					_ACInnerLevel:
.1155	a0 02		ldy #$02			ldy 	#2
.1157	b1 2a		lda ($2a),y			lda 	(zTemp1),y
.1159	30 46		bmi $11a1			bmi 	_ACBadIndex 				; it has sub arrays, so bad index.
.115b	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16 		; check if it is an iFloat
.115d	c9 00		cmp #$00			cmp 	#NSSIFloat
.115f	d0 13		bne $1174			bne 	_ACNotFloat
.1161	a5 29		lda $29				lda 	zTemp0+1 					; double and add zTemp0 (x3)
.1163	48		pha				pha
.1164	a5 28		lda $28				lda 	zTemp0
.1166	06 28		asl $28				asl 	zTemp0 						; x 2
.1168	26 29		rol $29				rol 	zTemp0+1
.116a	18		clc				clc 								; add back x 3
.116b	65 28		adc $28				adc 	zTemp0
.116d	85 28		sta $28				sta 	zTemp0
.116f	68		pla				pla
.1170	65 29		adc $29				adc 	zTemp0+1
.1172	85 29		sta $29				sta 	zTemp0+1
.1174					_ACNotFloat:
.1174	06 28		asl $28				asl 	zTemp0 						; x 2 or x 6 depending.
.1176	26 29		rol $29				rol 	zTemp0+1
.1178	18		clc				clc
.1179	a5 28		lda $28				lda 	zTemp0
.117b	69 03		adc #$03			adc 	#3
.117d	85 28		sta $28				sta 	zTemp0
.117f	90 02		bcc $1183			bcc 	_ACNoCarry
.1181	e6 29		inc $29				inc 	zTemp0+1
.1183					_ACNoCarry:
.1183	fa		plx				plx 								; X points to first slot of array parameters
.1184	18		clc				clc
.1185	a5 28		lda $28				lda 	zTemp0
.1187	65 2a		adc $2a				adc 	zTemp1
.1189	95 40		sta $40,x			sta 	NSMantissa0,x
.118b	a5 29		lda $29				lda 	zTemp0+1
.118d	65 2b		adc $2b				adc 	zTemp1+1
.118f	38		sec				sec
.1190	ed 07 04	sbc $0407			sbc 	variableStartPage
.1193	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1195	74 58		stz $58,x			stz 	NSMantissa2,x
.1197	74 64		stz $64,x			stz 	NSMantissa3,x
.1199	74 34		stz $34,x			stz 	NSStatus,x
.119b	74 70		stz $70,x			stz 	NSExponent,x
.119d	7a		ply				ply 	 							; restore code pointer
.119e	4c 2f 10	jmp $102f			jmp 	NextCommand
.11a1					_ACBadIndex:
.11a1	4c 78 15	jmp $1578		jmp	ErrorV_index
.11a4					UnaryAsc:
.11a4	fa		plx				plx
.11a5	5a		phy				phy
.11a6	b5 40		lda $40,x			lda 	NSMantissa0,x 				; string address.
.11a8	85 28		sta $28				sta 	zTemp0
.11aa	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.11ac	85 29		sta $29				sta 	zTemp0+1
.11ae	b2 28		lda ($28)			lda 	(zTemp0) 					; if empty string return zero
.11b0	f0 06		beq $11b8			beq 	_UAExit
.11b2	5a		phy				phy 								; otherwise first character
.11b3	a0 01		ldy #$01			ldy 	#1
.11b5	b1 28		lda ($28),y			lda 	(zTemp0),y
.11b7	7a		ply				ply
.11b8					_UAExit:
.11b8	20 21 2e	jsr $2e21			jsr 	FloatSetByte
.11bb	7a		ply				ply
.11bc	4c 2f 10	jmp $102f			jmp 	NextCommand
.11bf					CommandAssert:
.11bf	fa		plx				plx
.11c0	e0 00		cpx #$00			cpx 	#0 							; check only one element on stack
.11c2	d0 09		bne $11cd			bne 	_CAFail
.11c4	20 41 2e	jsr $2e41			jsr 	FloatIsZero 				; is it zero ?
.11c7	f0 04		beq $11cd			beq 	_CAFail
.11c9	ca		dex				dex
.11ca	4c 2f 10	jmp $102f			jmp 	NextCommand
.11cd					_CAFail:
.11cd	4c d1 14	jmp $14d1		jmp	ErrorV_assert
.11d0					X16_Audio_Parameters8_16:
.11d0	20 d6 11	jsr $11d6			jsr 	X16_Audio_Parameters8_8
.11d3	a4 4d		ldy $4d				ldy 	NSMantissa1+1
.11d5	60		rts				rts
.11d6					X16_Audio_Parameters8_8:
.11d6	a2 01		ldx #$01			ldx 	#1
.11d8	20 5a 2a	jsr $2a5a			jsr 	FloatIntegerPart
.11db	ca		dex				dex
.11dc	20 5a 2a	jsr $2a5a			jsr 	FloatIntegerPart
.11df	20 86 19	jsr $1986			jsr 	GetInteger8Bit
.11e2	a6 41		ldx $41				ldx 	NSMantissa0+1
.11e4	a0 00		ldy #$00			ldy 	#0
.11e6	60		rts				rts
.11e7					X16_Audio_Parameters8_String:
.11e7	20 d0 11	jsr $11d0			jsr 	X16_Audio_Parameters8_16 	; get as numbers.
.11ea	da		phx				phx 								; set the voice
.11eb	5a		phy				phy
.11ec	20 6e ff	jsr $ff6e			jsr 	X16_JSRFAR
.11ef	20 0c c0	jsr $c00c			jsr 	X16A_bas_playstringvoice
>11f2	0a						.byte 	X16_AudioCodeBank
.11f3	7a		ply				ply
.11f4	fa		plx				plx
.11f5	86 28		stx $28				stx 	zTemp0
.11f7	84 29		sty $29				sty 	zTemp0+1
.11f9	b2 28		lda ($28)			lda 	(zTemp0) 					; read length
.11fb	e8		inx				inx 								; point YX to first character.
.11fc	d0 01		bne $11ff			bne 	_X16APSSkip
.11fe	c8		iny				iny
.11ff					_X16APSSkip:
.11ff	60		rts				rts
.1200					Unary16Bin:
.1200	fa		plx				plx
.1201	20 8c 19	jsr $198c			jsr 	GetInteger16Bit				; 16 bit int
.1204	a9 10		lda #$10			lda 	#16 						; allocate / set 16 bytes.
.1206	20 6d 20	jsr $206d			jsr 	StringAllocTemp
.1209	a5 29		lda $29				lda 	zTemp0+1
.120b	f0 03		beq $1210			beq 	_UBNoHigh
.120d	20 18 12	jsr $1218			jsr 	_UBWriteBinary
.1210					_UBNoHigh:
.1210	a5 28		lda $28				lda 	zTemp0
.1212	20 18 12	jsr $1218			jsr 	_UBWriteBinary
.1215	4c 2f 10	jmp $102f			jmp 	NextCommand
.1218					_UBWriteBinary:
.1218	5a		phy				phy
.1219	a0 08		ldy #$08			ldy 	#8
.121b					_UBWLoop:
.121b	0a		asl a				asl 	a
.121c	48		pha				pha
.121d	a9 00		lda #$00			lda  	#0
.121f	69 30		adc #$30			adc 	#48
.1221	20 96 20	jsr $2096			jsr 	StringWriteChar
.1224	68		pla				pla
.1225	88		dey				dey
.1226	d0 f3		bne $121b			bne 	_UBWLoop
.1228	7a		ply				ply
.1229	60		rts				rts
.122a					PrintCharacter:
.122a	fa		plx				plx
.122b	b5 40		lda $40,x			lda 	NSMantissa0,x
.122d	ca		dex				dex
.122e	20 ca 1c	jsr $1cca			jsr 	VectorPrintCharacter
.1231	4c 2f 10	jmp $102f			jmp 	NextCommand
.1234					UnaryChr:
.1234	fa		plx				plx
.1235	20 86 19	jsr $1986			jsr 	GetInteger8Bit 				; get integer to convert.
.1238	48		pha				pha 								; save it and allocate for it
.1239	a9 01		lda #$01			lda 	#1 							; 1 character
.123b	20 6d 20	jsr $206d			jsr 	StringAllocTemp
.123e	a9 01		lda #$01			lda 	#1 							; length 1.
.1240	92 2e		sta ($2e)			sta 	(zsTemp)
.1242	68		pla				pla 								; character code makes string.
.1243	5a		phy				phy
.1244	a0 01		ldy #$01			ldy 	#1
.1246	91 2e		sta ($2e),y			sta 	(zsTemp),y
.1248	7a		ply				ply
.1249	4c 2f 10	jmp $102f			jmp 	NextCommand
.124c					CommandClr:
.124c	fa		plx				plx
.124d	20 53 12	jsr $1253			jsr 	ClearMemory
.1250	4c 2f 10	jmp $102f			jmp 	NextCommand
.1253					ClearMemory:
.1253	ad 05 04	lda $0405			lda 	storeStartHigh 							; erase the work area
.1256	85 29		sta $29				sta 	zTemp0+1
.1258	64 28		stz $28				stz 	zTemp0
.125a	5a		phy				phy
.125b	a0 00		ldy #$00			ldy 	#0
.125d					_ClearLoop1:
.125d	a9 00		lda #$00			lda 	#0
.125f	91 28		sta ($28),y			sta 	(zTemp0),y
.1261	c8		iny				iny
.1262	d0 f9		bne $125d			bne 	_ClearLoop1
.1264	e6 29		inc $29				inc 	zTemp0+1
.1266	a5 29		lda $29				lda 	zTemp0+1
.1268	cd 06 04	cmp $0406			cmp 	storeEndHigh
.126b	d0 f0		bne $125d			bne 	_ClearLoop1
.126d	38		sec				sec 											; stack space = number of pages in total / 4
.126e	ad 06 04	lda $0406			lda 	storeEndHigh
.1271	ed 05 04	sbc $0405			sbc		storeStartHigh
.1274	4a		lsr a				lsr 	a
.1275	4a		lsr a				lsr 	a
.1276	d0 02		bne $127a			bne 	_NotEmpty 								; at least 1 !
.1278	a9 01		lda #$01			lda 	#1
.127a					_NotEmpty:
.127a	38		sec				sec 											; subtract from high to give string high memory
.127b	49 ff		eor #$ff			eor 	#$FF
.127d	6d 06 04	adc $0406			adc 	storeEndHigh
.1280	8d 03 04	sta $0403			sta 	stringHighMemory+1
.1283	9c 02 04	stz $0402			stz 	stringHighMemory
.1286	9c 68 05	stz $0568			stz 	stringInitialised 						; string system not initialised
.1289	ad 05 04	lda $0405			lda 	storeStartHigh 							; stack at end of start memory.
.128c	3a		dec a				dec 	a
.128d	85 31		sta $31				sta 	runtimeStackPtr+1
.128f	a9 ff		lda #$ff			lda 	#$FF
.1291	85 30		sta $30				sta 	runtimeStackPtr
.1293	a9 ff		lda #$ff			lda 	#$FF 									; duff marker in case we try to remove it.
.1295	92 30		sta ($30)			sta 	(runtimeStackPtr)
.1297	7a		ply				ply
.1298	60		rts				rts
.1299					CompareStrings:
.1299	fa		plx				plx
.129a	ca		dex				dex
.129b	b5 40		lda $40,x			lda 	NSMantissa0,x 				; copy strings to zTemp0 and zTemp1
.129d	85 28		sta $28				sta 	zTemp0
.129f	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.12a1	85 29		sta $29				sta 	zTemp0+1
.12a3	b5 41		lda $41,x			lda 	NSMantissa0+1,x
.12a5	85 2a		sta $2a				sta 	zTemp1
.12a7	b5 4d		lda $4d,x			lda 	NSMantissa1+1,x
.12a9	85 2b		sta $2b				sta 	zTemp1+1
.12ab	da		phx				phx
.12ac	5a		phy				phy
.12ad	b2 28		lda ($28)			lda 	(zTemp0)					; work out number to compare
.12af	d2 2a		cmp ($2a)			cmp 	(zTemp1)
.12b1	90 02		bcc $12b5			bcc 	_CSNIsSmallest 				; as min(len(s1),len(s2))
.12b3	b2 2a		lda ($2a)			lda 	(zTemp1)
.12b5					_CSNIsSmallest:
.12b5	aa		tax				tax 								; count in X
.12b6	f0 0c		beq $12c4			beq 	_CSNMatches 				; if zero already matches as far as we can go.
.12b8	a0 00		ldy #$00			ldy 	#0 							; start from offset 1
.12ba					_CSNCompareString:
.12ba	c8		iny				iny 								; pre increment
.12bb	b1 28		lda ($28),y			lda 	(zTemp0),y
.12bd	d1 2a		cmp ($2a),y			cmp 	(zTemp1),y
.12bf	d0 0a		bne $12cb			bne 	_CSNDifferent 				; numbers are different.
.12c1	ca		dex				dex
.12c2	d0 f6		bne $12ba			bne 	_CSNCompareString 			; compare common characters in two strings.
.12c4					_CSNMatches:
.12c4	38		sec				sec
.12c5	b2 28		lda ($28)			lda 	(zTemp0)					; compare lengths
.12c7	f2 2a		sbc ($2a)			sbc 	(zTemp1)
.12c9	f0 06		beq $12d1			beq 	_CSNSExit 					; if zero, then strings match and exit.
.12cb					_CSNDifferent:
.12cb	a9 ff		lda #$ff			lda 	#$FF
.12cd	90 02		bcc $12d1			bcc 	_CSNSExit
.12cf	a9 01		lda #$01			lda 	#$01
.12d1					_CSNSExit:
.12d1	7a		ply				ply
.12d2	fa		plx				plx
.12d3	c9 00		cmp #$00			cmp 	#0 							; set the flags.
.12d5	20 21 2e	jsr $2e21			jsr 	FloatSetByte 				; output the byte
.12d8	4c 2f 10	jmp $102f			jmp 	NextCommand
.12db					StringConcrete:
.12db	9c 68 05	stz $0568			stz 	stringInitialised	 		; initialise next usage
.12de	84 2d		sty $2d				sty 	zTemp2+1 					; save pointer to new string
.12e0	85 2c		sta $2c				sta 	zTemp2
.12e2	b2 2c		lda ($2c)			lda 	(zTemp2) 					; length required
.12e4	4a		lsr a				lsr 	a 							; allow half as much for expansion.
.12e5	18		clc				clc
.12e6	72 2c		adc ($2c)			adc 	(zTemp2)
.12e8	90 02		bcc $12ec			bcc 	_SCNoOverflow
.12ea	a9 ff		lda #$ff			lda 	#255
.12ec					_SCNoOverflow:
.12ec	c9 0a		cmp #$0a			cmp 	#10 						; and a minimum of 10
.12ee	b0 02		bcs $12f2			bcs 	_SCNoMinimum
.12f0	a9 0a		lda #$0a			lda 	#10
.12f2					_SCNoMinimum:
.12f2	85 2a		sta $2a				sta 	zTemp1 						; save max length.
.12f4	38		sec				sec
.12f5	ad 02 04	lda $0402			lda		stringHighMemory 			; subtract max length from high memory.
.12f8	e5 2a		sbc $2a				sbc 	zTemp1
.12fa	a8		tay				tay
.12fb	ad 03 04	lda $0403			lda 	stringHighMemory+1
.12fe	e9 00		sbc #$00			sbc 	#0
.1300	48		pha				pha
.1301	38		sec				sec 								; subtract 3 more
.1302	98		tya				tya
.1303	e9 03		sbc #$03			sbc 	#3
.1305	8d 02 04	sta $0402			sta 	stringHighMemory 			; to string high memory/zsTemp
.1308	85 2e		sta $2e				sta 	zsTemp
.130a	68		pla				pla
.130b	e9 00		sbc #$00			sbc 	#0
.130d	8d 03 04	sta $0403			sta 	stringHighMemory+1
.1310	85 2f		sta $2f				sta 	zsTemp+1
.1312	a5 2a		lda $2a				lda 	zTemp1 						; set max length.
.1314	92 2e		sta ($2e)			sta 	(zsTemp)
.1316	a0 01		ldy #$01			ldy 	#1 							; clear control byte.
.1318	a9 00		lda #$00			lda 	#0
.131a	91 2e		sta ($2e),y			sta 	(zsTemp),y
.131c	a5 2e		lda $2e				lda 	zsTemp 						; new empty string in YA.
.131e	a4 2f		ldy $2f				ldy 	zsTemp+1
.1320	60		rts				rts
.1321					CommandData:
.1321	fa		plx				plx
.1322	98		tya				tya 								; data length +1 added to Y
.1323	38		sec				sec
.1324	71 22		adc ($22),y			adc 	(codePtr),y 				; next instruction
.1326	a8		tay				tay
.1327	4c 2f 10	jmp $102f			jmp 	NextCommand
.132a					CommandDIM:
.132a	fa		plx				plx
.132b	5a		phy				phy
.132c	20 86 19	jsr $1986			jsr 	GetInteger8Bit 				; get the type we are building for (bits 6 & 5)
.132f	8d 08 04	sta $0408			sta 	dimType
.1332	ca		dex				dex 								; this is the number of indices
.1333	20 86 19	jsr $1986			jsr 	GetInteger8Bit
.1336	85 2a		sta $2a				sta 	zTemp1 						; subtract n from X so X points at the *first*
.1338	8a		txa				txa 								; dimension.
.1339	38		sec				sec
.133a	e5 2a		sbc $2a				sbc 	zTemp1
.133c	aa		tax				tax
.133d	a5 2a		lda $2a				lda 	zTemp1 						; number of indices.
.133f	20 53 13	jsr $1353			jsr 	DIMCreateOneLevel 			; create one at this level
.1342	95 40		sta $40,x			sta 	NSMantissa0,x 				; set it as a return address as an integer
.1344	98		tya				tya
.1345	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1347	74 58		stz $58,x			stz 	NSMantissa2,x
.1349	74 64		stz $64,x			stz 	NSMantissa3,x
.134b	74 34		stz $34,x			stz 	NSStatus,x
.134d	74 70		stz $70,x			stz 	NSExponent,x
.134f	7a		ply				ply
.1350	4c 2f 10	jmp $102f			jmp 	NextCommand
.1353					DIMCreateOneLevel:
.1353	a4 32		ldy $32				ldy 	availableMemory 			; push the start of this block on the stack.
.1355	5a		phy				phy
.1356	a4 33		ldy $33				ldy 	availableMemory+1
.1358	5a		phy				phy
.1359	a8		tay				tay 			 					; save current level into Y
.135a	20 8c 19	jsr $198c			jsr		GetInteger16Bit 			; size of dimension to zTemp0
.135d	e6 28		inc $28				inc 	zTemp0 						; bump the size of the dimension as we need one more
.135f	d0 02		bne $1363			bne 	_DCOLNoCarry
.1361	e6 29		inc $29				inc 	zTemp0+1
.1363					_DCOLNoCarry:
.1363	a5 28		lda $28				lda 	zTemp0 						; write out the +1 size of the dimension
.1365	20 06 14	jsr $1406			jsr 	DIMWriteByte
.1368	a5 29		lda $29				lda 	zTemp0+1
.136a	20 06 14	jsr $1406			jsr 	DIMWriteByte
.136d	ad 08 04	lda $0408			lda 	dimType 					; get type information
.1370	29 7f		and #$7f			and 	#$7F
.1372	c0 01		cpy #$01			cpy 	#1
.1374	f0 02		beq $1378			beq 	_DCOLNoSubLevel
.1376	09 80		ora #$80			ora 	#$80 						; set sublevel bit if there is one.
.1378					_DCOLNoSubLevel:
.1378	20 06 14	jsr $1406			jsr 	DIMWriteByte
.137b	a5 32		lda $32				lda 	availableMemory
.137d	85 2a		sta $2a				sta 	zTemp1
.137f	a5 33		lda $33				lda 	availableMemory+1
.1381	85 2b		sta $2b				sta 	zTemp1+1
.1383	a5 28		lda $28				lda 	zTemp0
.1385	85 2c		sta $2c				sta 	zTemp2
.1387	a5 29		lda $29				lda 	zTemp0+1
.1389	85 2d		sta $2d				sta 	zTemp2+1
.138b					_DCOLFillArray:
.138b	20 ea 13	jsr $13ea			jsr 	DIMWriteElement 			; write out an element, could be a sub-level or individual data
.138e	a5 28		lda $28				lda 	zTemp0 						; decrement one from count.
.1390	d0 02		bne $1394			bne 	_DCOLNoBorrow
.1392	c6 29		dec $29				dec 	zTemp0+1
.1394					_DCOLNoBorrow:
.1394	c6 28		dec $28				dec 	zTemp0
.1396	a5 28		lda $28				lda 	zTemp0 						; until completed.
.1398	05 29		ora $29				ora 	zTemp0+1
.139a	d0 ef		bne $138b			bne 	_DCOLFillArray
.139c	c0 01		cpy #$01			cpy 	#1
.139e	f0 42		beq $13e2			beq 	_DCOLExit
.13a0					_DCOLRecursionLoop:
.13a0	da		phx				phx 								; save XY
.13a1	5a		phy				phy
.13a2	a5 2a		lda $2a				lda 	zTemp1 						; push zTemp1 (position) zTemp2 (count)
.13a4	48		pha				pha
.13a5	a5 2b		lda $2b				lda 	zTemp1+1
.13a7	48		pha				pha
.13a8	a5 2c		lda $2c				lda 	zTemp2
.13aa	48		pha				pha
.13ab	a5 2d		lda $2d				lda 	zTemp2+1
.13ad	48		pha				pha
.13ae	88		dey				dey  								; lower level -> A
.13af	98		tya				tya
.13b0	e8		inx				inx 								; next index size
.13b1	20 53 13	jsr $1353			jsr 	DIMCreateOneLevel 			; create a level, return in YA
.13b4	fa		plx				plx 								; restore zTemp2 (count) and zTemp1 (position)
.13b5	86 2d		stx $2d				stx 	zTemp2+1
.13b7	fa		plx				plx
.13b8	86 2c		stx $2c				stx 	zTemp2
.13ba	fa		plx				plx
.13bb	86 2b		stx $2b				stx 	zTemp1+1
.13bd	fa		plx				plx
.13be	86 2a		stx $2a				stx 	zTemp1
.13c0	92 2a		sta ($2a)			sta 	(zTemp1) 					; write out position
.13c2	98		tya				tya
.13c3	a0 01		ldy #$01			ldy 	#1
.13c5	91 2a		sta ($2a),y			sta 	(zTemp1),y
.13c7	7a		ply				ply 								; restore XY
.13c8	fa		plx				plx
.13c9	18		clc				clc
.13ca	a5 2a		lda $2a				lda 	zTemp1 						; add 2 to zTemp1
.13cc	69 02		adc #$02			adc 	#2
.13ce	85 2a		sta $2a				sta 	zTemp1
.13d0	90 02		bcc $13d4			bcc 	_DCOLRNoCarry
.13d2	e6 2b		inc $2b				inc 	zTemp1+1
.13d4					_DCOLRNoCarry:
.13d4	a5 2c		lda $2c				lda 	zTemp2 						; decrement one from count in zTemp2
.13d6	d0 02		bne $13da			bne 	_DCOLRNoBorrow
.13d8	c6 2d		dec $2d				dec 	zTemp2+1
.13da					_DCOLRNoBorrow:
.13da	c6 2c		dec $2c				dec 	zTemp2
.13dc	a5 2c		lda $2c				lda 	zTemp2 						; until completed.
.13de	05 2d		ora $2d				ora 	zTemp2+1
.13e0	d0 be		bne $13a0			bne 	_DCOLRecursionLoop
.13e2					_DCOLExit:
.13e2	68		pla				pla 								; get MSB, make offset again
.13e3	38		sec				sec
.13e4	ed 07 04	sbc $0407			sbc 	variableStartPage
.13e7	a8		tay				tay
.13e8	68		pla				pla 								; YA now contains offset address.
.13e9	60		rts				rts
.13ea					DIMWriteElement:
.13ea	da		phx				phx
.13eb	a2 02		ldx #$02			ldx	 	#2 							; work out size is 2 or 6
.13ed	c0 01		cpy #$01			cpy 	#1 							; do we have a sub level, if so 2.
.13ef	d0 0b		bne $13fc			bne 	_DIMWENotFloat
.13f1	ad 08 04	lda $0408			lda 	dimType
.13f4	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16
.13f6	c9 00		cmp #$00			cmp 	#NSSIFloat
.13f8	d0 02		bne $13fc			bne 	_DIMWENotFloat
.13fa	a2 06		ldx #$06			ldx 	#6
.13fc					_DIMWENotFloat:
.13fc	a9 00		lda #$00			lda 	#0
.13fe	20 06 14	jsr $1406			jsr 	DIMWriteByte
.1401	ca		dex				dex
.1402	d0 f8		bne $13fc			bne 	_DIMWENotFloat
.1404	fa		plx				plx
.1405	60		rts				rts
.1406					DIMWriteByte:
.1406	92 32		sta ($32)			sta 	(availableMemory)
.1408	e6 32		inc $32				inc 	availableMemory
.140a	d0 0b		bne $1417			bne 	_DIMWBSkip
.140c	e6 33		inc $33				inc 	availableMemory+1
.140e	48		pha				pha
.140f	a5 33		lda $33				lda 	availableMemory+1 			; check out of memory
.1411	cd 03 04	cmp $0403			cmp 	stringHighMemory+1
.1414	b0 02		bcs $1418			bcs 	_DIMWBMemory
.1416	68		pla				pla
.1417					_DIMWBSkip:
.1417	60		rts				rts
.1418					_DIMWBMemory:
.1418	4c 8b 15	jmp $158b		jmp	ErrorV_memory
.0408					dimType:
>0408							.fill 	1
.141b					CommandEnd:
.141b	fa		plx				plx
.141c	86 28		stx $28				stx 	zTemp0
.141e	4c ff ff	jmp $ffff			jmp 	$FFFF
.1421					Unimplemented:
.1421	4c be 14	jmp $14be			jmp 	ErrorV_unimplemented
.1424					ErrorHandler:
.1424	98		tya				tya
.1425	18		clc				clc
.1426	65 22		adc $22				adc 	codePtr
.1428	85 22		sta $22				sta 	codePtr
.142a	90 02		bcc $142e			bcc 	_EHNoCarry
.142c	e6 23		inc $23				inc 	codePtr+1
.142e					_EHNoCarry:
.142e	68		pla				pla
.142f	7a		ply				ply
.1430	85 28		sta $28				sta 	zTemp0
.1432	84 29		sty $29				sty 	zTemp0+1
.1434	a2 00		ldx #$00			ldx 	#0 							; output to channel #0
.1436	a0 01		ldy #$01			ldy 	#1
.1438					_EHDisplayMsg:
.1438	b1 28		lda ($28),y			lda 	(zTemp0),y
.143a	20 e2 25	jsr $25e2			jsr 	XPrintCharacterToChannel
.143d	c8		iny				iny
.143e	b1 28		lda ($28),y			lda 	(zTemp0),y
.1440	d0 f6		bne $1438			bne 	_EHDisplayMsg
.1442	a9 20		lda #$20			lda 	#32
.1444	20 e2 25	jsr $25e2			jsr 	XPrintCharacterToChannel
.1447	a9 40		lda #$40			lda 	#64
.1449	20 e2 25	jsr $25e2			jsr 	XPrintCharacterToChannel
.144c	a9 20		lda #$20			lda 	#32
.144e	20 e2 25	jsr $25e2			jsr 	XPrintCharacterToChannel
.1451	20 56 14	jsr $1456			jsr 	EHDisplayCodePtr
.1454	80 fe		bra $1454	_EHStop:bra 	_EHStop
.1456					EHDisplayCodePtr:
.1456	a9 20		lda #$20			lda 	#32
.1458	20 e2 25	jsr $25e2			jsr 	XPrintCharacterToChannel
.145b	38		sec				sec
.145c	a5 23		lda $23				lda 	codePtr+1 					; display the p-code address of the error.
.145e	ed 04 04	sbc $0404			sbc 	runtimeHigh
.1461	20 6a 14	jsr $146a			jsr 	_EHDisplayHex
.1464	a5 22		lda $22				lda 	codePtr
.1466	20 6a 14	jsr $146a			jsr 	_EHDisplayHex
.1469	60		rts				rts
.146a					_EHDisplayHex:
.146a	48		pha				pha
.146b	4a		lsr a				lsr 	a
.146c	4a		lsr a				lsr 	a
.146d	4a		lsr a				lsr 	a
.146e	4a		lsr a				lsr 	a
.146f	20 73 14	jsr $1473			jsr 	_EHDisplayNibble
.1472	68		pla				pla
.1473					_EHDisplayNibble:
.1473	29 0f		and #$0f			and 	#15
.1475	c9 0a		cmp #$0a			cmp 	#10
.1477	90 02		bcc $147b			bcc 	_EHNotHex
.1479	69 06		adc #$06			adc 	#6
.147b					_EHNotHex:
.147b	69 30		adc #$30			adc 	#48
.147d	4c e2 25	jmp $25e2			jmp 	XPrintCharacterToChannel
.1480					ErrorV_range:
.1480	20 24 14	jsr $1424		jsr	ErrorHandler
>1483	4f 55 54 20 4f 46 20 52			.text	"OUT OF RANGE",0
>148b	41 4e 47 45 00
.1490					ErrorV_value:
.1490	20 24 14	jsr $1424		jsr	ErrorHandler
>1493	42 41 44 20 56 41 4c 55			.text	"BAD VALUE",0
>149b	45 00
.149d					ErrorV_syntax:
.149d	20 24 14	jsr $1424		jsr	ErrorHandler
>14a0	53 59 4e 54 41 58 20 45			.text	"SYNTAX ERROR",0
>14a8	52 52 4f 52 00
.14ad					ErrorV_type:
.14ad	20 24 14	jsr $1424		jsr	ErrorHandler
>14b0	54 59 50 45 20 4d 49 53			.text	"TYPE MISMATCH",0
>14b8	4d 41 54 43 48 00
.14be					ErrorV_unimplemented:
.14be	20 24 14	jsr $1424		jsr	ErrorHandler
>14c1	4e 4f 54 20 49 4d 50 4c			.text	"NOT IMPLEMENTED",0
>14c9	45 4d 45 4e 54 45 44 00
.14d1					ErrorV_assert:
.14d1	20 24 14	jsr $1424		jsr	ErrorHandler
>14d4	41 53 53 45 52 54 20 46			.text	"ASSERT FAIL",0
>14dc	41 49 4c 00
.14e0					ErrorV_line:
.14e0	20 24 14	jsr $1424		jsr	ErrorHandler
>14e3	55 4e 4b 4e 4f 57 4e 20			.text	"UNKNOWN LINE NUMBER",0
>14eb	4c 49 4e 45 20 4e 55 4d 42 45 52 00
.14f7					ErrorV_internal:
.14f7	20 24 14	jsr $1424		jsr	ErrorHandler
>14fa	49 4e 54 45 52 4e 41 4c			.text	"INTERNAL ERROR",0
>1502	20 45 52 52 4f 52 00
.1509					ErrorV_divzero:
.1509	20 24 14	jsr $1424		jsr	ErrorHandler
>150c	44 49 56 49 44 45 20 42			.text	"DIVIDE BY ZERO",0
>1514	59 20 5a 45 52 4f 00
.151b					ErrorV_structure:
.151b	20 24 14	jsr $1424		jsr	ErrorHandler
>151e	53 54 52 55 43 54 55 52			.text	"STRUCTURE IMBALANCE",0
>1526	45 20 49 4d 42 41 4c 41 4e 43 45 00
.1532					ErrorV_stop:
.1532	20 24 14	jsr $1424		jsr	ErrorHandler
>1535	50 52 4f 47 52 41 4d 20			.text	"PROGRAM STOPPED",0
>153d	53 54 4f 50 50 45 44 00
.1545					ErrorV_data:
.1545	20 24 14	jsr $1424		jsr	ErrorHandler
>1548	4f 55 54 20 4f 46 20 44			.text	"OUT OF DATA",0
>1550	41 54 41 00
.1554					ErrorV_undeclared:
.1554	20 24 14	jsr $1424		jsr	ErrorHandler
>1557	55 4e 4b 4e 4f 57 4e 20			.text	"UNKNOWN ARRAY",0
>155f	41 52 52 41 59 00
.1565					ErrorV_redefine:
.1565	20 24 14	jsr $1424		jsr	ErrorHandler
>1568	41 52 52 41 59 20 52 45			.text	"ARRAY REDEFINED",0
>1570	44 45 46 49 4e 45 44 00
.1578					ErrorV_index:
.1578	20 24 14	jsr $1424		jsr	ErrorHandler
>157b	42 41 44 20 41 52 52 41			.text	"BAD ARRAY INDEX",0
>1583	59 20 49 4e 44 45 58 00
.158b					ErrorV_memory:
.158b	20 24 14	jsr $1424		jsr	ErrorHandler
>158e	4f 55 54 20 4f 46 20 4d			.text	"OUT OF MEMORY",0
>1596	45 4d 4f 52 59 00
.159c					ErrorV_channel:
.159c	20 24 14	jsr $1424		jsr	ErrorHandler
>159f	49 4e 50 55 54 2f 4f 55			.text	"INPUT/OUTPUT ERROR",0
>15a7	54 50 55 54 20 45 52 52 4f 52 00
.15b2					CommandFor:
.15b2	fa		plx				plx
.15b3	a9 d3		lda #$d3			lda 	#FRAME_FOR 					; open frame
.15b5	20 79 16	jsr $1679			jsr 	StackOpenFrame
.15b8	20 bd 1a	jsr $1abd			jsr 	StackSaveCurrentPosition 	; normalise to Y=0 and save position.
.15bb	a0 07		ldy #$07			ldy 	#7 							; copy step out
.15bd	20 17 16	jsr $1617			jsr 	CopyTOSToOffsetY
.15c0	ca		dex				dex
.15c1	a0 0d		ldy #$0d			ldy 	#13 						; copy terminal value.
.15c3	20 17 16	jsr $1617			jsr 	CopyTOSToOffsetY
.15c6	ca		dex				dex
.15c7	b5 4c		lda $4c,x			lda 	NSMantissa1,x 				; bit 15 of reference indicates type int16
.15c9	29 80		and #$80			and 	#$80
.15cb	a0 04		ldy #$04			ldy 	#4
.15cd	91 30		sta ($30),y			sta 	(runtimeStackPtr),y
.15cf	b5 40		lda $40,x			lda 	NSMantissa0,x 				; copy the reference address
.15d1	a0 05		ldy #$05			ldy 	#5 							; adjusted to be a real address
.15d3	91 30		sta ($30),y			sta 	(runtimeStackPtr),y
.15d5	85 28		sta $28				sta 	zTemp0 						; also to zTemp0
.15d7	c8		iny				iny
.15d8	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.15da	18		clc				clc
.15db	29 7f		and #$7f			and 	#$7F 						; throw the type bit.
.15dd	91 30		sta ($30),y			sta 	(runtimeStackPtr),y
.15df	6d 07 04	adc $0407			adc 	variableStartPage 			; point to variable page.
.15e2	85 29		sta $29				sta 	zTemp0+1
.15e4	ca		dex				dex 								; throw reference.
.15e5	a0 05		ldy #$05			ldy 	#5 							; check the index, step and terminal values
.15e7	b1 28		lda ($28),y			lda 	(zTemp0),y 					; are all +ve integers, sign bits first.
.15e9	a0 0c		ldy #$0c			ldy 	#12
.15eb	11 30		ora ($30),y			ora 	(runtimeStackPtr),y
.15ed	a0 12		ldy #$12			ldy 	#18
.15ef	11 30		ora ($30),y			ora 	(runtimeStackPtr),y
.15f1	29 80		and #$80			and 	#$80 						; only interested in sign bit.
.15f3	88		dey				dey 								; now the exponents.
.15f4	11 28		ora ($28),y			ora 	(zTemp0),y
.15f6	a0 0b		ldy #$0b			ldy 	#11
.15f8	11 30		ora ($30),y			ora 	(runtimeStackPtr),y
.15fa	a0 11		ldy #$11			ldy 	#17
.15fc	11 30		ora ($30),y			ora 	(runtimeStackPtr),y
.15fe	a0 08		ldy #$08			ldy 	#8 							; step must be 1 byte.
.1600	11 30		ora ($30),y			ora 	(runtimeStackPtr),y
.1602	c8		iny				iny
.1603	11 30		ora ($30),y			ora 	(runtimeStackPtr),y
.1605	c8		iny				iny
.1606	11 30		ora ($30),y			ora 	(runtimeStackPtr),y
.1608	d0 08		bne $1612			bne 	_CFNoOptimise
.160a	a0 04		ldy #$04			ldy 	#4 							; set the runtime stack pointer optimisation flag.
.160c	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.160e	09 40		ora #$40			ora 	#$40
.1610	91 30		sta ($30),y			sta 	(runtimeStackPtr),y
.1612					_CFNoOptimise:
.1612	a0 00		ldy #$00			ldy 	#0
.1614	4c 2f 10	jmp $102f			jmp 	NextCommand
.1617					CopyTOSToOffsetY:
.1617	b5 40		lda $40,x			lda 	NSMantissa0,x
.1619	91 30		sta ($30),y			sta 	(runtimeStackPtr),y
.161b	c8		iny				iny
.161c	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.161e	91 30		sta ($30),y			sta 	(runtimeStackPtr),y
.1620	c8		iny				iny
.1621	b5 58		lda $58,x			lda 	NSMantissa2,x
.1623	91 30		sta ($30),y			sta 	(runtimeStackPtr),y
.1625	c8		iny				iny
.1626	b5 64		lda $64,x			lda 	NSMantissa3,x
.1628	91 30		sta ($30),y			sta 	(runtimeStackPtr),y
.162a	c8		iny				iny
.162b	b5 70		lda $70,x			lda 	NSExponent,x
.162d	91 30		sta ($30),y			sta 	(runtimeStackPtr),y
.162f	c8		iny				iny
.1630	b5 34		lda $34,x			lda 	NSStatus,x
.1632	91 30		sta ($30),y			sta 	(runtimeStackPtr),y
.1634	60		rts				rts
.1635					MoveObjectForward:
.1635	b2 25		lda ($25)			lda 	(objPtr) 					; get next
.1637	c9 ff		cmp #$ff			cmp 	#$FF
.1639	f0 36		beq $1671			beq 	_MOFEnd
.163b	c9 40		cmp #$40			cmp 	#$40 						; 00-3F
.163d	90 24		bcc $1663			bcc 	_MOFAdvance1 				; forward 1
.163f	a0 02		ldy #$02			ldy 	#2 							; 40-6F
.1641	c9 70		cmp #$70			cmp 	#$70 						; forward 2
.1643	90 20		bcc $1665			bcc 	_MOFAdvanceY
.1645	c9 ca		cmp #$ca			cmp 	#PCD_STARTSYSTEM 			; 70 - System tokens.
.1647	90 1a		bcc $1663			bcc 	_MOFAdvance1 				; forward 1
.1649	a8		tay				tay 								; read the size.
.164a	b9 a2 1b	lda $1ba2,y			lda 	MOFSizeTable-PCD_STARTSYSTEM,y
.164d	a8		tay				tay
.164e	c8		iny				iny 								; add 1 for the system token.
.164f	d0 14		bne $1665			bne 	_MOFAdvanceY 				; if 0, was $FF thus a string/data skip.
.1651	a0 01		ldy #$01			ldy 	#1 							; get length byte
.1653	b1 25		lda ($25),y			lda 	(objPtr),y
.1655	a8		tay				tay 								; into Y.
.1656	18		clc				clc
.1657	a5 25		lda $25				lda 	objPtr						; add 2 to the object pointer
.1659	69 02		adc #$02			adc 	#2
.165b	85 25		sta $25				sta 	objPtr
.165d	90 02		bcc $1661			bcc 	_MOFNoCarry1
.165f	e6 26		inc $26				inc 	objPtr+1
.1661					_MOFNoCarry1:
.1661	80 02		bra $1665			bra 	_MOFAdvanceY
.1663					_MOFAdvance1:
.1663	a0 01		ldy #$01			ldy 	#1
.1665					_MOFAdvanceY:
.1665	98		tya				tya 								; add X to objPtr
.1666	18		clc				clc
.1667	65 25		adc $25				adc 	objPtr
.1669	85 25		sta $25				sta 	objPtr
.166b	90 02		bcc $166f			bcc 	_MOFNoCarry2
.166d	e6 26		inc $26				inc 	objPtr+1
.166f					_MOFNoCarry2:
.166f	18		clc				clc 								; not completed.
.1670	60		rts				rts
.1671					_MOFEnd:
.1671	e6 25		inc $25				inc 	objPtr
.1673	d0 02		bne $1677			bne 	_MOFENoCarry
.1675	e6 26		inc $26				inc 	objPtr+1
.1677					_MOFENoCarry:
.1677	38		sec				sec
.1678	60		rts				rts
.1679					StackOpenFrame:
.1679	48		pha				pha 								; save frame marker
.167a	29 1f		and #$1f			and 	#$1F 						; bytes required.
.167c	85 28		sta $28				sta 	zTemp0
.167e	38		sec				sec 								; subtract from runtime stack pointer.
.167f	a5 30		lda $30				lda		runtimeStackPtr
.1681	e5 28		sbc $28				sbc 	zTemp0
.1683	85 30		sta $30				sta 	runtimeStackPtr
.1685	a5 31		lda $31				lda		runtimeStackPtr+1
.1687	e9 00		sbc #$00			sbc 	#0
.1689	85 31		sta $31				sta 	runtimeStackPtr+1
.168b	68		pla				pla 								; put frame marker at +0
.168c	92 30		sta ($30)			sta 	(runtimeStackPtr)
.168e	60		rts				rts
.168f					StackCloseFrame:
.168f	b2 30		lda ($30)			lda 	(runtimeStackPtr)			; get frame marker
.1691	29 1f		and #$1f			and 	#$1F 						; size
.1693	18		clc				clc
.1694	65 30		adc $30				adc 	runtimeStackPtr
.1696	85 30		sta $30				sta 	runtimeStackPtr
.1698	90 02		bcc $169c			bcc 	_SCFNoCarry
.169a	e6 31		inc $31				inc 	runtimeStackPtr+1
.169c					_SCFNoCarry:
.169c	60		rts				rts
.169d					StackFindFrame:
.169d	8d 09 04	sta $0409			sta 	requiredFrame
.16a0					_SFFLoop:
.16a0	b2 30		lda ($30)			lda 	(runtimeStackPtr) 			; get TOS
.16a2	c9 ff		cmp #$ff			cmp 	#$FF 						; if found $FF then this is a fail.
.16a4	f0 10		beq $16b6			beq 	SCFFail
.16a6	cd 09 04	cmp $0409			cmp 	requiredFrame 				; found this type ?
.16a9	f0 05		beq $16b0			beq 	_SFFFound
.16ab	20 8f 16	jsr $168f			jsr 	StackCloseFrame 			; close the top frame
.16ae	80 f0		bra $16a0			bra 	_SFFLoop 					; and try te next.
.16b0					_SFFFound:
.16b0	60		rts				rts
.16b1					StackCheckFrame:
.16b1	d2 30		cmp ($30)			cmp 	(runtimeStackPtr) 			; matches current frame
.16b3	d0 01		bne $16b6			bne 	SCFFail
.16b5	60		rts				rts
.16b6					SCFFail:
.16b6	4c 1b 15	jmp $151b		jmp	ErrorV_structure
.0409					requiredFrame:
>0409							.fill 	1
.16b9					UnaryFre:
.16b9	fa		plx				plx
.16ba	20 1f 2e	jsr $2e1f			jsr 	FloatSetZero 				; zero the result (32 bit integer)
.16bd	38		sec				sec
.16be	ad 02 04	lda $0402			lda 	stringHighMemory 			; calculate the free memory.
.16c1	ed 00 04	sbc $0400			sbc 	stringLowMemory
.16c4	95 40		sta $40,x			sta		NSMantissa0,x
.16c6	ad 03 04	lda $0403			lda 	stringHighMemory+1
.16c9	ed 01 04	sbc $0401			sbc 	stringLowMemory+1
.16cc	95 4c		sta $4c,x			sta		NSMantissa1,x
.16ce	4c 2f 10	jmp $102f			jmp 	NextCommand
.16d1					CommandGet:
.16d1	fa		plx				plx
.16d2	e8		inx				inx
.16d3	a9 01		lda #$01			lda 	#1 							; 1 character space
.16d5	20 6d 20	jsr $206d			jsr 	StringAllocTemp
.16d8	20 d3 1c	jsr $1cd3			jsr 	VectorGetCharacter 			; get a character
.16db	c9 00		cmp #$00			cmp 	#0
.16dd	f0 09		beq $16e8			beq 	_CGNone
.16df	5a		phy				phy
.16e0	a0 01		ldy #$01			ldy 	#1 							; store char
.16e2	91 2e		sta ($2e),y			sta 	(zsTemp),y
.16e4	98		tya				tya 								; store length.
.16e5	92 2e		sta ($2e)			sta 	(zsTemp)
.16e7	7a		ply				ply
.16e8					_CGNone:
.16e8	4c 2f 10	jmp $102f			jmp 	NextCommand
.16eb					CommandGosub:
.16eb	fa		plx				plx
.16ec	a9 e4		lda #$e4			lda 	#FRAME_GOSUB
.16ee	20 79 16	jsr $1679			jsr 	StackOpenFrame
.16f1	20 bd 1a	jsr $1abd			jsr 	StackSaveCurrentPosition
.16f4	4c 0a 17	jmp $170a			jmp 	PerformGOTO
.16f7					CommandReturn:
.16f7	fa		plx				plx
.16f8	a9 e4		lda #$e4			lda 	#FRAME_GOSUB
.16fa	20 9d 16	jsr $169d			jsr 	StackFindFrame
.16fd	20 d3 1a	jsr $1ad3			jsr 	StackLoadCurrentPosition
.1700	c8		iny				iny
.1701	c8		iny				iny
.1702	c8		iny				iny
.1703	20 8f 16	jsr $168f			jsr 	StackCloseFrame
.1706	4c 2f 10	jmp $102f			jmp 	NextCommand
.1709					CommandGoto:
.1709	fa		plx				plx
.170a					PerformGOTO:
.170a	c8		iny				iny
.170b	c8		iny				iny 								; push MSB of offset on stack
.170c	b1 22		lda ($22),y			lda 	(codePtr),y
.170e	48		pha				pha
.170f	88		dey				dey 								; point LSB of offset
.1710	18		clc				clc 								; add LSB
.1711	b1 22		lda ($22),y			lda 	(codePtr),y
.1713	65 22		adc $22				adc 	codePtr
.1715	85 22		sta $22				sta 	codePtr
.1717	68		pla				pla 								; restore offset MSB and add
.1718	65 23		adc $23				adc 	codePtr+1
.171a	85 23		sta $23				sta 	codePtr+1
.171c	88		dey				dey 								; fix up.
.171d	4c 2f 10	jmp $102f			jmp 	NextCommand
.1720					CommandGotoZ:
.1720	fa		plx				plx
.1721	20 41 2e	jsr $2e41			jsr 	FloatIsZero
.1724	ca		dex				dex
.1725	c9 00		cmp #$00			cmp 	#0
.1727	f0 e1		beq $170a			beq 	PerformGOTO
.1729	c8		iny				iny
.172a	c8		iny				iny
.172b	c8		iny				iny
.172c	4c 2f 10	jmp $102f			jmp 	NextCommand
.172f					CommandGotoNZ:
.172f	fa		plx				plx
.1730	20 41 2e	jsr $2e41			jsr 	FloatIsZero
.1733	ca		dex				dex
.1734	c9 00		cmp #$00			cmp 	#0
.1736	d0 d2		bne $170a			bne 	PerformGOTO
.1738	c8		iny				iny
.1739	c8		iny				iny
.173a	c8		iny				iny
.173b	4c 2f 10	jmp $102f			jmp 	NextCommand
.173e					Command_PSET:
.173e	fa		plx				plx
.173f	5a		phy				phy
.1740	20 86 19	jsr $1986			jsr 	GetInteger8Bit 				; get the colour
.1743	48		pha				pha
.1744	a2 00		ldx #$00			ldx 	#0 							; copy 0/1 to r0,r1
.1746	a0 02		ldy #$02			ldy 	#X16_r0
.1748	20 ca 17	jsr $17ca			jsr 	GraphicsCopy2
.174b	20 ff fe	jsr $feff			jsr 	X16_FB_cursor_position 		; set position.
.174e	68		pla				pla 								; set pixel.
.174f	20 0b ff	jsr $ff0b			jsr 	X16_FB_set_pixel
.1752	7a		ply				ply
.1753	a2 ff		ldx #$ff			ldx 	#$FF
.1755	4c 2f 10	jmp $102f			jmp 	NextCommand
.1758					Command_LINE:
.1758	fa		plx				plx
.1759	5a		phy				phy
.175a	20 bd 17	jsr $17bd			jsr 	GraphicsColour
.175d	a2 00		ldx #$00			ldx 	#0 							; copy 0/1/2/3 to r0,1,2,3
.175f	a0 02		ldy #$02			ldy 	#X16_r0
.1761	20 c7 17	jsr $17c7			jsr 	GraphicsCopy4
.1764	20 2c ff	jsr $ff2c			jsr 	X16_GRAPH_draw_line
.1767	7a		ply				ply
.1768	a2 ff		ldx #$ff			ldx 	#$FF
.176a	4c 2f 10	jmp $102f			jmp 	NextCommand
.176d					Command_RECT:
.176d	fa		plx				plx
.176e	5a		phy				phy
.176f	20 de 17	jsr $17de			jsr 	GraphicsRectCoords
.1772	38		sec				sec
.1773	20 2f ff	jsr $ff2f			jsr 	X16_GRAPH_draw_rect
.1776	7a		ply				ply
.1777	a2 ff		ldx #$ff			ldx 	#$FF
.1779	4c 2f 10	jmp $102f			jmp 	NextCommand
.177c					Command_FRAME:
.177c	fa		plx				plx
.177d	5a		phy				phy
.177e	20 de 17	jsr $17de			jsr 	GraphicsRectCoords
.1781	18		clc				clc
.1782	20 2f ff	jsr $ff2f			jsr 	X16_GRAPH_draw_rect
.1785	7a		ply				ply
.1786	a2 ff		ldx #$ff			ldx 	#$FF
.1788	4c 2f 10	jmp $102f			jmp 	NextCommand
.178b					Command_CHAR:
.178b	fa		plx				plx
.178c	5a		phy				phy
.178d	ca		dex				dex  								; set the draw colour
.178e	20 bd 17	jsr $17bd			jsr 	GraphicsColour
.1791	a2 00		ldx #$00			ldx 	#0 							; copy 0/1 to r0,r1
.1793	a0 02		ldy #$02			ldy 	#X16_r0
.1795	20 ca 17	jsr $17ca			jsr 	GraphicsCopy2
.1798	a5 43		lda $43				lda 	NSMantissa0+3 				; copy string address to zTemp0
.179a	85 28		sta $28				sta 	zTemp0
.179c	a5 4f		lda $4f				lda 	NSMantissa1+3
.179e	85 29		sta $29				sta 	zTemp0+1
.17a0	b2 28		lda ($28)			lda 	(zTemp0) 					; count of chars to zTemp1
.17a2	85 2a		sta $2a				sta 	zTemp1
.17a4					_CCLoop:
.17a4	a5 2a		lda $2a				lda 	zTemp1 						; done all chars ?
.17a6	f0 0f		beq $17b7			beq 	_CCExit
.17a8	c6 2a		dec $2a				dec 	zTemp1 						; dec counter
.17aa	e6 28		inc $28				inc 	zTemp0 						; pre-bump pointer
.17ac	d0 02		bne $17b0			bne 	_CCNoCarry
.17ae	e6 29		inc $29				inc 	zTemp0+1
.17b0					_CCNoCarry:
.17b0	b2 28		lda ($28)			lda 	(zTemp0) 					; get character
.17b2	20 41 ff	jsr $ff41			jsr 	X16_GRAPH_put_char 			; write it
.17b5	80 ed		bra $17a4			bra 	_CCLoop						; go round.
.17b7					_CCExit:
.17b7	7a		ply				ply
.17b8	a2 ff		ldx #$ff			ldx 	#$FF
.17ba	4c 2f 10	jmp $102f			jmp 	NextCommand
.17bd					GraphicsColour:
.17bd	20 86 19	jsr $1986			jsr 	GetInteger8Bit
.17c0	aa		tax				tax
.17c1	a0 00		ldy #$00			ldy 	#0
.17c3	20 29 ff	jsr $ff29			jsr 	X16_GRAPH_set_colors
.17c6	60		rts				rts
.17c7					GraphicsCopy4:
.17c7	20 ca 17	jsr $17ca			jsr 	GraphicsCopy2
.17ca					GraphicsCopy2:
.17ca	20 cd 17	jsr $17cd			jsr 	GraphicsCopy1
.17cd					GraphicsCopy1:
.17cd	20 5a 2a	jsr $2a5a			jsr 	FloatIntegerPart
.17d0	b5 40		lda $40,x			lda 	NSMantissa0,x
.17d2	99 00 00	sta $0000,y			sta 	0,y
.17d5	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.17d7	99 01 00	sta $0001,y			sta 	1,y
.17da	e8		inx				inx
.17db	c8		iny				iny
.17dc	c8		iny				iny
.17dd	60		rts				rts
.17de					GraphicsRectCoords:
.17de	20 bd 17	jsr $17bd			jsr 	GraphicsColour 				; set colour
.17e1	a2 00		ldx #$00			ldx 	#0 							; copy in order.
.17e3	a0 02		ldy #$02			ldy 	#X16_r0
.17e5	20 c7 17	jsr $17c7			jsr 	GraphicsCopy4
.17e8	a2 02		ldx #$02			ldx 	#X16_r0 					; sort r0/r2
.17ea	20 f7 17	jsr $17f7			jsr 	_GRCSortSubtract
.17ed	a2 04		ldx #$04			ldx 	#X16_r1 					; sort r1/r3
.17ef	20 f7 17	jsr $17f7			jsr 	_GRCSortSubtract
.17f2	74 08		stz $08,x			stz 	8,x 						; zero rounding
.17f4	74 09		stz $09,x			stz 	9,x
.17f6	60		rts				rts
.17f7					_GRCSortSubtract:
.17f7	b5 04		lda $04,x			lda 	4,x 						; calculate r2-r0
.17f9	d5 00		cmp $00,x			cmp 	0,x
.17fb	b5 05		lda $05,x			lda 	5,x
.17fd	f5 01		sbc $01,x			sbc 	1,x
.17ff	b0 08		bcs $1809			bcs 	_GRCNoSwap 					; >= swap.
.1801	20 17 18	jsr $1817			jsr 	_GRCSwapByte 				; swap 0/2
.1804	e8		inx				inx
.1805	20 17 18	jsr $1817			jsr 	_GRCSwapByte 				; swap 1/3
.1808	ca		dex				dex
.1809					_GRCNoSwap:
.1809	38		sec				sec 								; calculate width/height into 4,5
.180a	b5 04		lda $04,x			lda 	4,x
.180c	f5 00		sbc $00,x			sbc 	0,x
.180e	95 04		sta $04,x			sta 	4,x
.1810	b5 05		lda $05,x			lda 	5,x
.1812	f5 01		sbc $01,x			sbc 	1,x
.1814	95 05		sta $05,x			sta 	5,x
.1816	60		rts				rts
.1817					_GRCSwapByte:
.1817	b5 04		lda $04,x			lda 	4,x
.1819	48		pha				pha
.181a	b5 00		lda $00,x			lda 	0,x
.181c	95 04		sta $04,x			sta 	4,x
.181e	68		pla				pla
.181f	95 00		sta $00,x			sta 	0,x
.1821	60		rts				rts
.1822					Unary16Hex:
.1822	fa		plx				plx
.1823	20 8c 19	jsr $198c			jsr 	GetInteger16Bit
.1826	a9 04		lda #$04			lda 	#4 							; allocate / set 4 bytes.
.1828	20 6d 20	jsr $206d			jsr 	StringAllocTemp
.182b	a5 29		lda $29				lda 	zTemp0+1
.182d	f0 03		beq $1832			beq 	_UHNoHigh
.182f	20 3a 18	jsr $183a			jsr 	_UHWriteHex
.1832					_UHNoHigh:
.1832	a5 28		lda $28				lda 	zTemp0
.1834	20 3a 18	jsr $183a			jsr 	_UHWriteHex
.1837	4c 2f 10	jmp $102f			jmp 	NextCommand
.183a					_UHWriteHex:
.183a	48		pha				pha
.183b	4a		lsr a				lsr 	a
.183c	4a		lsr a				lsr 	a
.183d	4a		lsr a				lsr 	a
.183e	4a		lsr a				lsr 	a
.183f	20 43 18	jsr $1843			jsr 	_UHWriteNibl
.1842	68		pla				pla
.1843					_UHWriteNibl:
.1843	29 0f		and #$0f			and 	#15
.1845	c9 0a		cmp #$0a			cmp 	#10
.1847	90 02		bcc $184b			bcc 	_UHDigit
.1849	69 06		adc #$06			adc 	#6
.184b					_UHDigit:
.184b	69 30		adc #$30			adc 	#48
.184d	20 96 20	jsr $2096			jsr 	StringWriteChar
.1850	60		rts				rts
.1851					IndFloatRead:
.1851	fa		plx				plx
.1852	b5 40		lda $40,x			lda 	NSMantissa0,x 				; copy address
.1854	85 28		sta $28				sta 	zTemp0
.1856	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.1858	18		clc				clc
.1859	6d 07 04	adc $0407			adc 	variableStartPage
.185c	85 29		sta $29				sta 	zTemp0+1
.185e	ca		dex				dex 								; throw the address
.185f	20 4c 1e	jsr $1e4c			jsr 	ReadFloatZTemp0Sub 							; call read routine
.1862	4c 2f 10	jmp $102f			jmp 	NextCommand
.1865					IndInt16Read:
.1865	fa		plx				plx
.1866	b5 40		lda $40,x			lda 	NSMantissa0,x 				; copy address
.1868	85 28		sta $28				sta 	zTemp0
.186a	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.186c	18		clc				clc
.186d	6d 07 04	adc $0407			adc 	variableStartPage
.1870	85 29		sta $29				sta 	zTemp0+1
.1872	ca		dex				dex 								; throw the address
.1873	20 88 1e	jsr $1e88			jsr 	ReadIntegerZTemp0Sub 							; call read routine
.1876	4c 2f 10	jmp $102f			jmp 	NextCommand
.1879					IndStringRead:
.1879	fa		plx				plx
.187a	b5 40		lda $40,x			lda 	NSMantissa0,x 				; copy address
.187c	85 28		sta $28				sta 	zTemp0
.187e	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.1880	18		clc				clc
.1881	6d 07 04	adc $0407			adc 	variableStartPage
.1884	85 29		sta $29				sta 	zTemp0+1
.1886	ca		dex				dex 								; throw the address
.1887	20 cd 1e	jsr $1ecd			jsr 	ReadStringZTemp0Sub 							; call read routine
.188a	4c 2f 10	jmp $102f			jmp 	NextCommand
.188d					IndFloatWrite:
.188d	fa		plx				plx
.188e	b5 3f		lda $3f,x			lda 	NSMantissa0-1,x 			; copy address
.1890	85 28		sta $28				sta 	zTemp0
.1892	b5 4b		lda $4b,x			lda 	NSMantissa1-1,x
.1894	18		clc				clc
.1895	6d 07 04	adc $0407			adc 	variableStartPage
.1898	85 29		sta $29				sta 	zTemp0+1
.189a	20 27 24	jsr $2427			jsr 	WriteFloatZTemp0Sub 							; call write routine
.189d	ca		dex				dex 								; throw the address as well.
.189e	4c 2f 10	jmp $102f			jmp 	NextCommand
.18a1					IndInt16Write:
.18a1	fa		plx				plx
.18a2	b5 3f		lda $3f,x			lda 	NSMantissa0-1,x 			; copy address
.18a4	85 28		sta $28				sta 	zTemp0
.18a6	b5 4b		lda $4b,x			lda 	NSMantissa1-1,x
.18a8	18		clc				clc
.18a9	6d 07 04	adc $0407			adc 	variableStartPage
.18ac	85 29		sta $29				sta 	zTemp0+1
.18ae	20 63 24	jsr $2463			jsr 	WriteIntegerZTemp0Sub 							; call write routine
.18b1	ca		dex				dex 								; throw the address as well.
.18b2	4c 2f 10	jmp $102f			jmp 	NextCommand
.18b5					IndStringWrite:
.18b5	fa		plx				plx
.18b6	b5 3f		lda $3f,x			lda 	NSMantissa0-1,x 			; copy address
.18b8	85 28		sta $28				sta 	zTemp0
.18ba	b5 4b		lda $4b,x			lda 	NSMantissa1-1,x
.18bc	18		clc				clc
.18bd	6d 07 04	adc $0407			adc 	variableStartPage
.18c0	85 29		sta $29				sta 	zTemp0+1
.18c2	20 a2 24	jsr $24a2			jsr 	WriteStringZTemp0Sub 							; call write routine
.18c5	ca		dex				dex 								; throw the address as well.
.18c6	4c 2f 10	jmp $102f			jmp 	NextCommand
.18c9					CommandInput:
.18c9	fa		plx				plx
.18ca	5a		phy				phy 								; save Y
.18cb	e8		inx				inx									; space on stack
.18cc					_INError:
.18cc	20 00 19	jsr $1900			jsr 	InputStringToBuffer 		; input from keyboard
.18cf	a9 5f		lda #$5f			lda 	#((ReadBufferSize) & $FF)
.18d1	85 28		sta $28				sta 	0+zTemp0
.18d3	a9 04		lda #$04			lda 	#((ReadBufferSize) >> 8) & $FF
.18d5	85 29		sta $29				sta 	1+zTemp0
.18d7	20 b4 22	jsr $22b4			jsr 	ValEvaluateZTemp0
.18da	b0 f0		bcs $18cc			bcs 	_INError 					; failed, try again.
.18dc	7a		ply				ply 								; restore Y
.18dd	4c 2f 10	jmp $102f			jmp 	NextCommand
.18e0					CommandInputString:
.18e0	fa		plx				plx
.18e1	5a		phy				phy 								; save Y
.18e2	20 00 19	jsr $1900			jsr 	InputStringToBuffer 		; input from keyboard
.18e5	e8		inx				inx 								; make space on stack
.18e6	20 1f 2e	jsr $2e1f			jsr 	FloatSetZero 				; store as string on stack
.18e9	a9 5f		lda #$5f			lda 	#ReadBufferSize & $FF
.18eb	95 40		sta $40,x			sta 	NSMantissa0,x
.18ed	a9 04		lda #$04			lda 	#ReadBufferSize >> 8
.18ef	95 4c		sta $4c,x			sta 	NSMantissa1,x
.18f1	a9 40		lda #$40			lda 	#NSSString
.18f3	95 34		sta $34,x			sta 	NSStatus,x
.18f5	7a		ply				ply 								; restore Y
.18f6	4c 2f 10	jmp $102f			jmp 	NextCommand
.18f9					CommandInputReset:
.18f9	fa		plx				plx
.18fa	9c 0a 04	stz $040a			stz 	InputBuffer
.18fd	4c 2f 10	jmp $102f			jmp 	NextCommand
.1900					InputStringToBuffer:
.1900	a9 3a		lda #$3a			lda 	#((InputBumpNext) & $FF)
.1902	8d 5f 05	sta $055f			sta 	0+ReadBumpNextVec
.1905	a9 19		lda #$19			lda 	#((InputBumpNext) >> 8) & $FF
.1907	8d 60 05	sta $0560			sta 	1+ReadBumpNextVec
.190a	a9 17		lda #$17			lda 	#((InputLookNext) & $FF)
.190c	8d 61 05	sta $0561			sta 	0+ReadLookNextVec
.190f	a9 19		lda #$19			lda 	#((InputLookNext) >> 8) & $FF
.1911	8d 62 05	sta $0562			sta 	1+ReadLookNextVec
.1914	4c a9 1d	jmp $1da9			jmp 	GetStringToBuffer
.1917					InputLookNext:
.1917	da		phx				phx
.1918					_ILNRetry:
.1918	ad 0a 04	lda $040a			lda 	InputBuffer 				; do we need to read more (e.g. the buffer is empty)
.191b	d0 08		bne $1925			bne 	_ILNNotEmpty
.191d	20 3e 19	jsr $193e			jsr 	InputGetNewLine 			; get a new line
.1920	9c 5b 04	stz $045b			stz 	InputBufferPos 				; reset read position.
.1923	80 f3		bra $1918			bra 	_ILNRetry
.1925					_ILNNotEmpty:
.1925	ae 5b 04	ldx $045b			ldx 	InputBufferPos 				; get head available character
.1928	bd 0a 04	lda $040a,x			lda 	InputBuffer,x
.192b	d0 08		bne $1935			bne 	_ILNExit 					; if not EOS return it with CC.
.192d					_ILNNextLine:
.192d	9c 0a 04	stz $040a			stz 	InputBuffer 				; clear the buffer, indicating new line next time.
.1930	38		sec				sec 								; return CS,Zero
.1931	fa		plx				plx
.1932	a9 0d		lda #$0d			lda 	#13
.1934	60		rts				rts
.1935					_ILNExit:
.1935	fa		plx				plx
.1936	c9 00		cmp #$00			cmp 	#0 							; return CC, Z Flag set.
.1938	18		clc				clc
.1939	60		rts				rts
.193a					InputBumpNext:
.193a	ee 5b 04	inc $045b			inc 	InputBufferPos
.193d	60		rts				rts
.193e					InputGetNewLine:
.193e	48		pha				pha
.193f	da		phx				phx
.1940	5a		phy				phy
.1941	a9 3f		lda #$3f			lda 	#"?"
.1943	20 7d 19	jsr $197d			jsr 	IGNLEchoIfScreen
.1946	a0 00		ldy #$00			ldy 	#0 							; line position.
.1948					_IGNLLoop:
.1948	20 d3 1c	jsr $1cd3			jsr 	VectorGetCharacter 			; get a character
.194b	c9 00		cmp #$00			cmp 	#0
.194d	f0 f9		beq $1948			beq 	_IGNLLoop
.194f	c9 14		cmp #$14			cmp 	#$14 						; Backspace ?
.1951	f0 11		beq $1964			beq 	_IGNBackspace
.1953	c9 0d		cmp #$0d			cmp 	#$0D 						; Return ?
.1955	f0 17		beq $196e			beq 	_IGNExit
.1957	c0 50		cpy #$50			cpy 	#80 						; buffer full ?
.1959	f0 ed		beq $1948			beq 	_IGNLLoop
.195b	99 0a 04	sta $040a,y			sta 	InputBuffer,y
.195e	c8		iny				iny
.195f	20 7d 19	jsr $197d			jsr 	IGNLEchoIfScreen
.1962	80 e4		bra $1948			bra 	_IGNLLoop
.1964					_IGNBackspace:
.1964	c0 00		cpy #$00			cpy 	#0
.1966	f0 e0		beq $1948			beq 	_IGNLLoop
.1968	20 7d 19	jsr $197d			jsr 	IGNLEchoIfScreen
.196b	88		dey				dey
.196c	80 da		bra $1948			bra 	_IGNLLoop
.196e					_IGNExit:
.196e	20 7d 19	jsr $197d			jsr 	IGNLEchoIfScreen
.1971	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.1973	99 0a 04	sta $040a,y			sta 	InputBuffer,y
.1976	9c 5b 04	stz $045b			stz 	InputBufferPos 				; reset position to start of input buffer.
.1979	7a		ply				ply
.197a	fa		plx				plx
.197b	68		pla				pla
.197c	60		rts				rts
.197d					IGNLEchoIfScreen:
.197d	ae 5d 04	ldx $045d			ldx 	currentChannel
.1980	d0 03		bne $1985			bne 	_IGNLEExit
.1982	20 ca 1c	jsr $1cca			jsr 	VectorPrintCharacter
.1985					_IGNLEExit:
.1985	60		rts				rts
.040a					InputBuffer:
>040a							.fill 	81
.045b					InputBufferPos:
>045b							.fill 	1
.1986					GetInteger8Bit:
.1986	20 5a 2a	jsr $2a5a			jsr 	FloatIntegerPart
.1989	b5 40		lda $40,x			lda 	NSMantissa0,x
.198b	60		rts				rts
.198c					GetInteger16Bit:
.198c	20 5a 2a	jsr $2a5a			jsr 	FloatIntegerPart
.198f	34 34		bit $34,x			bit 	NSStatus,x
.1991	30 09		bmi $199c			bmi 	Negate16Bit
.1993	b5 40		lda $40,x			lda 	NSMantissa0,x
.1995	85 28		sta $28				sta 	zTemp0
.1997	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.1999	85 29		sta $29				sta 	zTemp0+1
.199b	60		rts				rts
.199c					Negate16Bit:
.199c	38		sec				sec
.199d	a9 00		lda #$00			lda 	#0
.199f	f5 40		sbc $40,x			sbc 	NSMantissa0,x
.19a1	95 40		sta $40,x			sta 	NSMantissa0,x
.19a3	85 28		sta $28				sta 	zTemp0
.19a5	a9 00		lda #$00			lda 	#0
.19a7	f5 4c		sbc $4c,x			sbc 	NSMantissa1,x
.19a9	95 4c		sta $4c,x			sta 	NSMantissa1,x
.19ab	85 29		sta $29				sta 	zTemp0+1
.19ad	60		rts				rts
.19ae					UnaryJoy:
.19ae	fa		plx				plx
.19af	20 86 19	jsr $1986			jsr 	GetInteger8Bit 				; port #
.19b2	48		pha				pha 								; zero the result.
.19b3	20 1f 2e	jsr $2e1f			jsr 	FloatSetZero
.19b6	68		pla				pla
.19b7	5a		phy				phy
.19b8	da		phx				phx
.19b9	20 56 ff	jsr $ff56			jsr 	X16_joystick_get 			; read joystick.
.19bc	c0 00		cpy #$00			cpy 	#0 							; check no hardware
.19be	d0 10		bne $19d0			bne 	_UJNoHardware
.19c0	a8		tay				tay 								; move XA -> AY
.19c1	8a		txa				txa
.19c2	fa		plx				plx 								; we can update it now.
.19c3	49 ff		eor #$ff			eor 	#$FF
.19c5	95 4c		sta $4c,x			sta 	NSMantissa1,x
.19c7	98		tya				tya
.19c8	49 ff		eor #$ff			eor 	#$FF
.19ca	95 40		sta $40,x			sta 	NSMantissa0,x
.19cc	7a		ply				ply 								; restore Y
.19cd	4c 2f 10	jmp $102f			jmp 	NextCommand
.19d0					_UJNoHardware:
.19d0	fa		plx				plx
.19d1	7a		ply				ply
.19d2	a9 01		lda #$01			lda 	#1 							; set result to -1
.19d4	20 21 2e	jsr $2e21			jsr 	FloatSetByte
.19d7	20 e1 2d	jsr $2de1			jsr 	FloatNegate
.19da	4c 2f 10	jmp $102f			jmp 	NextCommand
.19dd					UnaryLen:
.19dd	fa		plx				plx
.19de	b5 40		lda $40,x			lda 	NSMantissa0,x 				; string address.
.19e0	85 28		sta $28				sta 	zTemp0
.19e2	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.19e4	85 29		sta $29				sta 	zTemp0+1
.19e6	b2 28		lda ($28)			lda 	(zTemp0) 					; get length
.19e8	20 21 2e	jsr $2e21			jsr 	FloatSetByte
.19eb	4c 2f 10	jmp $102f			jmp 	NextCommand
.19ee					LinkFloatAdd:
.19ee	fa		plx				plx
.19ef	5a		phy			phy
.19f0	20 43 28	jsr $2843		jsr	FloatAdd
.19f3	7a		ply			ply
.19f4	4c 2f 10	jmp $102f			jmp 	NextCommand
.19f7					LinkFloatSubtract:
.19f7	fa		plx				plx
.19f8	5a		phy			phy
.19f9	20 3d 28	jsr $283d		jsr	FloatSubtract
.19fc	7a		ply			ply
.19fd	4c 2f 10	jmp $102f			jmp 	NextCommand
.1a00					LinkFloatMultiply:
.1a00	fa		plx				plx
.1a01	5a		phy			phy
.1a02	20 df 2a	jsr $2adf		jsr	FloatMultiply
.1a05	7a		ply			ply
.1a06	4c 2f 10	jmp $102f			jmp 	NextCommand
.1a09					LinkFloatDivide:
.1a09	fa		plx				plx
.1a0a	5a		phy			phy
.1a0b	20 68 29	jsr $2968		jsr	FloatDivide
.1a0e	b0 5c		bcs $1a6c		bcs	DivZeroError
.1a10	7a		ply			ply
.1a11	4c 2f 10	jmp $102f			jmp 	NextCommand
.1a14					LinkFloatPower:
.1a14	fa		plx				plx
.1a15	5a		phy			phy
.1a16	20 e8 30	jsr $30e8		jsr	FloatPower
.1a19	b0 4e		bcs $1a69		bcs	MapRangeError
.1a1b	7a		ply			ply
.1a1c	4c 2f 10	jmp $102f			jmp 	NextCommand
.1a1f					LinkCompareGreater:
.1a1f	fa		plx				plx
.1a20	5a		phy			phy
.1a21	20 ec 28	jsr $28ec		jsr	CompareGreater
.1a24	7a		ply			ply
.1a25	4c 2f 10	jmp $102f			jmp 	NextCommand
.1a28					LinkCompareEqual:
.1a28	fa		plx				plx
.1a29	5a		phy			phy
.1a2a	20 ce 28	jsr $28ce		jsr	CompareEqual
.1a2d	7a		ply			ply
.1a2e	4c 2f 10	jmp $102f			jmp 	NextCommand
.1a31					LinkCompareLess:
.1a31	fa		plx				plx
.1a32	5a		phy			phy
.1a33	20 e4 28	jsr $28e4		jsr	CompareLess
.1a36	7a		ply			ply
.1a37	4c 2f 10	jmp $102f			jmp 	NextCommand
.1a3a					LinkCompareGreaterEqual:
.1a3a	fa		plx				plx
.1a3b	5a		phy			phy
.1a3c	20 fc 28	jsr $28fc		jsr	CompareGreaterEqual
.1a3f	7a		ply			ply
.1a40	4c 2f 10	jmp $102f			jmp 	NextCommand
.1a43					LinkCompareNotEqual:
.1a43	fa		plx				plx
.1a44	5a		phy			phy
.1a45	20 de 28	jsr $28de		jsr	CompareNotEqual
.1a48	7a		ply			ply
.1a49	4c 2f 10	jmp $102f			jmp 	NextCommand
.1a4c					LinkCompareLessEqual:
.1a4c	fa		plx				plx
.1a4d	5a		phy			phy
.1a4e	20 f4 28	jsr $28f4		jsr	CompareLessEqual
.1a51	7a		ply			ply
.1a52	4c 2f 10	jmp $102f			jmp 	NextCommand
.1a55					LinkFloatIntegerPartDown:
.1a55	fa		plx				plx
.1a56	5a		phy			phy
.1a57	20 7e 2a	jsr $2a7e		jsr	FloatIntegerPartDown
.1a5a	7a		ply			ply
.1a5b	4c 2f 10	jmp $102f			jmp 	NextCommand
.1a5e					LinkFloatSquareRoot:
.1a5e	fa		plx				plx
.1a5f	5a		phy			phy
.1a60	20 6a 31	jsr $316a		jsr	FloatSquareRoot
.1a63	b0 04		bcs $1a69		bcs	MapRangeError
.1a65	7a		ply			ply
.1a66	4c 2f 10	jmp $102f			jmp 	NextCommand
.1a69					MapRangeError:
.1a69	4c 80 14	jmp $1480		jmp	ErrorV_range
.1a6c					DivZeroError:
.1a6c	4c 09 15	jmp $1509		jmp	ErrorV_divzero
.1a6f					LinkFloatLogarithm:
.1a6f	fa		plx				plx
.1a70	5a		phy			phy
.1a71	20 74 30	jsr $3074		jsr	FloatLogarithm
.1a74	b0 f3		bcs $1a69		bcs	MapRangeError
.1a76	7a		ply			ply
.1a77	4c 2f 10	jmp $102f			jmp 	NextCommand
.1a7a					LinkFloatExponent:
.1a7a	fa		plx				plx
.1a7b	5a		phy			phy
.1a7c	20 71 2f	jsr $2f71		jsr	FloatExponent
.1a7f	7a		ply			ply
.1a80	4c 2f 10	jmp $102f			jmp 	NextCommand
.1a83					LinkFloatCosine:
.1a83	fa		plx				plx
.1a84	5a		phy			phy
.1a85	20 65 2f	jsr $2f65		jsr	FloatCosine
.1a88	7a		ply			ply
.1a89	4c 2f 10	jmp $102f			jmp 	NextCommand
.1a8c					LinkFloatSine:
.1a8c	fa		plx				plx
.1a8d	5a		phy			phy
.1a8e	20 05 31	jsr $3105		jsr	FloatSine
.1a91	7a		ply			ply
.1a92	4c 2f 10	jmp $102f			jmp 	NextCommand
.1a95					LinkFloatTangent:
.1a95	fa		plx				plx
.1a96	5a		phy			phy
.1a97	20 76 31	jsr $3176		jsr	FloatTangent
.1a9a	7a		ply			ply
.1a9b	4c 2f 10	jmp $102f			jmp 	NextCommand
.1a9e					LinkFloatArcTan:
.1a9e	fa		plx				plx
.1a9f	5a		phy			phy
.1aa0	20 4a 2e	jsr $2e4a		jsr	FloatArcTan
.1aa3	b0 c4		bcs $1a69		bcs	MapRangeError
.1aa5	7a		ply			ply
.1aa6	4c 2f 10	jmp $102f			jmp 	NextCommand
.1aa9					LinkFloatCompare:
.1aa9	fa		plx				plx
.1aaa	5a		phy			phy
.1aab	20 04 29	jsr $2904		jsr	FloatCompare
.1aae	7a		ply			ply
.1aaf	4c 2f 10	jmp $102f			jmp 	NextCommand
.1ab2					LinkDivideInt32:
.1ab2	fa		plx				plx
.1ab3	5a		phy			phy
.1ab4	20 92 29	jsr $2992		jsr	DivideInt32
.1ab7	b0 b0		bcs $1a69		bcs	MapRangeError
.1ab9	7a		ply			ply
.1aba	4c 2f 10	jmp $102f			jmp 	NextCommand
.1abd					StackSaveCurrentPosition:
.1abd	20 9a 10	jsr $109a			jsr 	FixUpY 						; codePtr,Y is corrected so Y = 0
.1ac0	5a		phy				phy
.1ac1	a0 01		ldy #$01			ldy 	#1
.1ac3	a5 24		lda $24				lda 	codePage
.1ac5	91 30		sta ($30),y			sta 	(runtimeStackPtr),y
.1ac7	c8		iny				iny
.1ac8	a5 22		lda $22				lda 	codePtr
.1aca	91 30		sta ($30),y			sta 	(runtimeStackPtr),y
.1acc	c8		iny				iny
.1acd	a5 23		lda $23				lda 	codePtr+1
.1acf	91 30		sta ($30),y			sta 	(runtimeStackPtr),y
.1ad1	7a		ply				ply
.1ad2	60		rts				rts
.1ad3					StackLoadCurrentPosition:
.1ad3	a0 01		ldy #$01			ldy 	#1
.1ad5	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1ad7	85 24		sta $24				sta 	codePage
.1ad9	c8		iny				iny
.1ada	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1adc	85 22		sta $22				sta 	codePtr
.1ade	c8		iny				iny
.1adf	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1ae1	85 23		sta $23				sta 	codePtr+1
.1ae3	a0 00		ldy #$00			ldy 	#0
.1ae5	60		rts				rts
.1ae6					XCommandMouse:
.1ae6	fa		plx				plx
.1ae7	20 86 19	jsr $1986			jsr 	GetInteger8Bit 				; mouse control.
.1aea	ca		dex				dex
.1aeb	da		phx				phx
.1aec	5a		phy				phy
.1aed	48		pha				pha
.1aee	38		sec				sec 								; get screen resolution
.1aef	20 5f ff	jsr $ff5f			jsr 	X16_screen_mode
.1af2	68		pla				pla
.1af3	20 68 ff	jsr $ff68			jsr 	X16_mouse_config 			; config the mouse
.1af6	7a		ply				ply
.1af7	fa		plx				plx
.1af8	4c 2f 10	jmp $102f			jmp 	NextCommand
.1afb					XUnaryMB:
.1afb	fa		plx				plx
.1afc	20 2a 1b	jsr $1b2a			jsr 	XUnaryMouseCommon
.1aff	a5 2c		lda $2c				lda 	zTemp2
.1b01	e8		inx				inx
.1b02	20 21 2e	jsr $2e21			jsr 	FloatSetByte
.1b05	4c 2f 10	jmp $102f			jmp 	NextCommand
.1b08					XUnaryMX:
.1b08	fa		plx				plx
.1b09	20 2a 1b	jsr $1b2a			jsr 	XUnaryMouseCommon
.1b0c	a5 28		lda $28				lda 	zTemp0
.1b0e	e8		inx				inx
.1b0f	20 21 2e	jsr $2e21			jsr 	FloatSetByte
.1b12	a5 29		lda $29				lda 	zTemp0+1
.1b14	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1b16	4c 2f 10	jmp $102f			jmp 	NextCommand
.1b19					XUnaryMY:
.1b19	fa		plx				plx
.1b1a	20 2a 1b	jsr $1b2a			jsr 	XUnaryMouseCommon
.1b1d	a5 2a		lda $2a				lda 	zTemp1
.1b1f	e8		inx				inx
.1b20	20 21 2e	jsr $2e21			jsr 	FloatSetByte
.1b23	a5 2b		lda $2b				lda 	zTemp1+1
.1b25	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1b27	4c 2f 10	jmp $102f			jmp 	NextCommand
.1b2a					XUnaryMouseCommon:
.1b2a	da		phx				phx
.1b2b	5a		phy				phy
.1b2c	a2 28		ldx #$28			ldx 	#zTemp0
.1b2e	20 6b ff	jsr $ff6b			jsr 	X16_mouse_get
.1b31	85 2c		sta $2c				sta 	zTemp2
.1b33	7a		ply				ply
.1b34	fa		plx				plx
.1b35	60		rts				rts
.1b36					NegateTOS:
.1b36	fa		plx				plx
.1b37	20 e1 2d	jsr $2de1			jsr 	FloatNegate
.1b3a	4c 2f 10	jmp $102f			jmp 	NextCommand
.1b3d					CommandNewLine:
.1b3d	fa		plx				plx
.1b3e	9c 68 05	stz $0568			stz 	stringInitialised
.1b41	a2 ff		ldx #$ff			ldx 	#$FF
.1b43	4c 2f 10	jmp $102f			jmp 	NextCommand
.1b46					CommandNext:
.1b46	fa		plx				plx
.1b47					_CNRetry:
.1b47	a9 d3		lda #$d3			lda 	#FRAME_FOR 					; find the FOR
.1b49	20 9d 16	jsr $169d			jsr 	StackFindFrame
.1b4c	20 9a 10	jsr $109a			jsr 	FixUpY 						; so we can use Y
.1b4f	b5 40		lda $40,x			lda 	NSMantissa0,x 				; check no index variable, both are $FF
.1b51	35 4c		and $4c,x			and 	NSMantissa1,x
.1b53	c9 ff		cmp #$ff			cmp 	#$FF
.1b55	f0 16		beq $1b6d			beq 	_CNNoIndexVariable
.1b57	b5 40		lda $40,x			lda 	NSMantissa0,x
.1b59	a0 05		ldy #$05			ldy 	#5
.1b5b	d1 30		cmp ($30),y			cmp 	(runtimeStackPtr),y
.1b5d	d0 07		bne $1b66			bne 	_CNNIndexFail
.1b5f	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.1b61	c8		iny				iny
.1b62	d1 30		cmp ($30),y			cmp 	(runtimeStackPtr),y
.1b64	f0 07		beq $1b6d			beq 	_CNNoIndexVariable
.1b66					_CNNIndexFail:
.1b66	a0 00		ldy #$00			ldy 	#0 							; so we don't fix up Y again !
.1b68	20 8f 16	jsr $168f			jsr 	StackCloseFrame 			; close this frame
.1b6b	80 da		bra $1b47			bra 	_CNRetry
.1b6d					_CNNoIndexVariable:
.1b6d	ca		dex				dex
.1b6e	a0 04		ldy #$04			ldy 	#4 							; check for optimised NEXT
.1b70	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1b72	29 40		and #$40			and 	#$40	 					; bit 6
.1b74	d0 55		bne $1bcb			bne 	_CNOptimisedNext
.1b76	a0 05		ldy #$05			ldy 	#5 							; copy address to zTemp0, save for write back
.1b78	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1b7a	48		pha				pha
.1b7b	85 28		sta $28				sta 	zTemp0
.1b7d	c8		iny				iny
.1b7e	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1b80	18		clc				clc
.1b81	6d 07 04	adc $0407			adc 	variableStartPage 			; point to variable page.
.1b84	48		pha				pha
.1b85	85 29		sta $29				sta 	zTemp0+1
.1b87	20 4c 1e	jsr $1e4c			jsr 	ReadFloatZTemp0Sub 			; read current index onto stack.
.1b8a	a0 07		ldy #$07			ldy 	#7  						; read step onto stack +1
.1b8c	e8		inx				inx
.1b8d	20 0e 1c	jsr $1c0e			jsr 	CopyOffsetYToTOS
.1b90	20 43 28	jsr $2843			jsr 	FloatAdd
.1b93	68		pla				pla 								; restore address
.1b94	85 29		sta $29				sta 	zTemp0+1
.1b96	68		pla				pla
.1b97	85 28		sta $28				sta 	zTemp0
.1b99	20 27 24	jsr $2427			jsr 	WriteFloatZTemp0Sub			; write float.
.1b9c	e8		inx				inx  								; recover written
.1b9d	e8		inx				inx 								; load offset
.1b9e	a0 0d		ldy #$0d			ldy 	#13
.1ba0	20 0e 1c	jsr $1c0e			jsr 	CopyOffsetYToTOS
.1ba3	20 04 29	jsr $2904			jsr 	FloatCompare 				; and compare the floats.
.1ba6	ca		dex				dex 								; throw result (in NSMantissa0+1)
.1ba7	a0 0c		ldy #$0c			ldy 	#12 						; get the sign of the step.
.1ba9	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1bab	30 08		bmi $1bb5			bmi 	_CNDownStep
.1bad	b5 41		lda $41,x			lda 	NSMantissa0+1,x 			; get comparator
.1baf	c9 01		cmp #$01			cmp 	#1 							; gone higher
.1bb1	f0 10		beq $1bc3			beq 	_CNExitFor 					; if so exit the loop
.1bb3	80 06		bra $1bbb			bra 	_CNLoopBack
.1bb5					_CNDownStep:
.1bb5	b5 41		lda $41,x			lda 	NSMantissa0+1,x 			; get comparator
.1bb7	c9 ff		cmp #$ff			cmp 	#255 						; gone lower
.1bb9	f0 08		beq $1bc3			beq 	_CNExitFor
.1bbb					_CNLoopBack:
.1bbb	20 d3 1a	jsr $1ad3			jsr 	StackLoadCurrentPosition 	; loop back
.1bbe	a0 00		ldy #$00			ldy 	#0
.1bc0	4c 2f 10	jmp $102f			jmp 	NextCommand
.1bc3					_CNExitFor:
.1bc3	20 8f 16	jsr $168f			jsr 	StackCloseFrame 			; remove the frame and exit
.1bc6	a0 00		ldy #$00			ldy 	#0
.1bc8	4c 2f 10	jmp $102f			jmp 	NextCommand
.1bcb					_CNOptimisedNext:
.1bcb	a0 05		ldy #$05			ldy 	#5 							; copy address to zTemp0, save for write back
.1bcd	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1bcf	85 28		sta $28				sta 	zTemp0
.1bd1	c8		iny				iny
.1bd2	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1bd4	18		clc				clc
.1bd5	6d 07 04	adc $0407			adc 	variableStartPage 			; point to variable page.
.1bd8	85 29		sta $29				sta 	zTemp0+1
.1bda	a0 07		ldy #$07			ldy 	#7 							; STEP value
.1bdc	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1bde	a0 ff		ldy #$ff			ldy 	#$FF
.1be0	18		clc				clc
.1be1					_CNOIncrement:
.1be1	c8		iny				iny
.1be2	71 28		adc ($28),y			adc 	(zTemp0),y
.1be4	91 28		sta ($28),y			sta 	(zTemp0),y
.1be6	f0 f9		beq $1be1			beq 	_CNOIncrement
.1be8	18		clc				clc
.1be9	a5 30		lda $30				lda 	runtimeStackPtr
.1beb	69 0d		adc #$0d			adc 	#13
.1bed	85 2a		sta $2a				sta 	zTemp1
.1bef	a5 31		lda $31				lda 	runtimeStackPtr+1
.1bf1	69 00		adc #$00			adc 	#0
.1bf3	85 2b		sta $2b				sta 	zTemp1+1
.1bf5	a0 00		ldy #$00			ldy 	#0
.1bf7	b1 2a		lda ($2a),y			lda 	(zTemp1),y 					; byte 0
.1bf9	d1 28		cmp ($28),y			cmp 	(zTemp0),y
.1bfb	c8		iny				iny
.1bfc	b1 2a		lda ($2a),y			lda 	(zTemp1),y 					; byte 1
.1bfe	f1 28		sbc ($28),y			sbc 	(zTemp0),y
.1c00	c8		iny				iny
.1c01	b1 2a		lda ($2a),y			lda 	(zTemp1),y 					; byte 2
.1c03	f1 28		sbc ($28),y			sbc 	(zTemp0),y
.1c05	c8		iny				iny
.1c06	b1 2a		lda ($2a),y			lda 	(zTemp1),y 					; byte 3
.1c08	f1 28		sbc ($28),y			sbc 	(zTemp0),y
.1c0a	90 b7		bcc $1bc3			bcc	 	_CNExitFor
.1c0c	80 ad		bra $1bbb			bra 	_CNLoopBack
.1c0e					CopyOffsetYToTOS:
.1c0e	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1c10	95 40		sta $40,x			sta 	NSMantissa0,x
.1c12	c8		iny				iny
.1c13	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1c15	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1c17	c8		iny				iny
.1c18	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1c1a	95 58		sta $58,x			sta 	NSMantissa2,x
.1c1c	c8		iny				iny
.1c1d	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1c1f	95 64		sta $64,x			sta 	NSMantissa3,x
.1c21	c8		iny				iny
.1c22	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1c24	95 70		sta $70,x			sta 	NSExponent,x
.1c26	c8		iny				iny
.1c27	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1c29	95 34		sta $34,x			sta 	NSStatus,x
.1c2b	60		rts				rts
.1c2c	4c 2f 10	jmp $102f			jmp 	NextCommand
.1c2f					NotTOS:
.1c2f	fa		plx				plx
.1c30	20 5a 2a	jsr $2a5a			jsr 	FloatIntegerPart
.1c33	74 58		stz $58,x			stz 	NSMantissa2,x 				; chop down to 16 bit.
.1c35	74 64		stz $64,x			stz 	NSMantissa3,x
.1c37	20 e1 2d	jsr $2de1			jsr 	FloatNegate		 			; negate
.1c3a	e8		inx				inx 								; and subtract 1.
.1c3b	a9 01		lda #$01			lda 	#1
.1c3d	20 21 2e	jsr $2e21			jsr 	FloatSetByte
.1c40	20 3d 28	jsr $283d			jsr 	FloatSubtract
.1c43					_NotTOSSkip:
.1c43	4c 2f 10	jmp $102f			jmp 	NextCommand
.1c46					CommandOn:
.1c46	fa		plx				plx
.1c47	20 86 19	jsr $1986			jsr 	GetInteger8Bit 				; get the integer part, the ON x GOTO bit
.1c4a	8d 5c 04	sta $045c			sta 	onCount 					; save it.
.1c4d	20 9a 10	jsr $109a			jsr 	FixUpY 						; Y = 0
.1c50					_CONFind:
.1c50	ce 5c 04	dec $045c			dec 	onCount 					; reached zero, do this one
.1c53	f0 0c		beq $1c61			beq 	_CONFound
.1c55	c8		iny				iny 								; skip over the token (GOTO or GOSUB page, and line #)
.1c56	c8		iny				iny
.1c57	c8		iny				iny
.1c58	c8		iny				iny
.1c59	b1 22		lda ($22),y			lda 	(codePtr),y 				; is there a moreon after it, if so we can keep going.
.1c5b	c8		iny				iny
.1c5c	c9 aa		cmp #$aa			cmp 	#PCD_MOREON
.1c5e	f0 f0		beq $1c50			beq 	_CONFind
.1c60	88		dey				dey 								; point to character after last GOTO/GOSUB
.1c61					_CONFound:
.1c61	4c 2f 10	jmp $102f			jmp 	NextCommand
.1c64					CommandMoreOn:
.1c64	fa		plx				plx
.1c65	c8		iny				iny 								; so it goes to the first non-goto/gosub
.1c66	c8		iny				iny
.1c67	c8		iny				iny
.1c68	c8		iny				iny
.1c69	4c 2f 10	jmp $102f			jmp 	NextCommand
.045c					onCount:
>045c							.fill 	1
.1c6c					MOFSizeTable:
>1c6c	01					.byte	1         	; $ca .shift
>1c6d	01					.byte	1         	; $cb .byte
>1c6e	02					.byte	2         	; $cc .word
>1c6f	05					.byte	5         	; $cd .float
>1c70	ff					.byte	255       	; $ce .string
>1c71	ff					.byte	255       	; $cf .data
>1c72	03					.byte	3         	; $d0 .goto
>1c73	03					.byte	3         	; $d1 .gosub
>1c74	03					.byte	3         	; $d2 .goto.z
>1c75	03					.byte	3         	; $d3 .goto.nz
>1c76	02					.byte	2         	; $d4 .varspace
.1c77					UnaryPeek:
.1c77	fa		plx				plx
.1c78	20 8c 19	jsr $198c			jsr 	GetInteger16Bit
.1c7b	da		phx				phx
.1c7c	5a		phy				phy
.1c7d	a6 28		ldx $28				ldx 	zTemp0
.1c7f	a4 29		ldy $29				ldy 	zTemp0+1
.1c81	20 b8 25	jsr $25b8			jsr 	XPeekMemory
.1c84	7a		ply				ply
.1c85	fa		plx				plx
.1c86	20 21 2e	jsr $2e21			jsr 	FloatSetByte
.1c89	4c 2f 10	jmp $102f			jmp 	NextCommand
.1c8c					CommandPOKE:
.1c8c	fa		plx				plx
.1c8d	da		phx				phx 								; save XY
.1c8e	5a		phy				phy
.1c8f	20 86 19	jsr $1986			jsr 	GetInteger8Bit 				; get byte to POKE and save it
.1c92	48		pha				pha
.1c93	b5 4b		lda $4b,x			lda 	NSMantissa1-1,x 			; YX = address from Mantissa next up
.1c95	a8		tay				tay
.1c96	b5 3f		lda $3f,x			lda 	NSMantissa0-1,x
.1c98	aa		tax				tax
.1c99	68		pla				pla
.1c9a	20 a4 25	jsr $25a4			jsr 	XPokeMemory
.1c9d	7a		ply				ply 								; restore YX and drop 2
.1c9e	fa		plx				plx
.1c9f	ca		dex				dex
.1ca0	ca		dex				dex
.1ca1	4c 2f 10	jmp $102f			jmp 	NextCommand
.1ca4					UnaryPos:
.1ca4	fa		plx				plx
.1ca5	20 37 25	jsr $2537			jsr 	XGetHPos
.1ca8	20 21 2e	jsr $2e21			jsr 	FloatSetByte
.1cab	4c 2f 10	jmp $102f			jmp 	NextCommand
.1cae					GetChannel:
.1cae	fa		plx				plx
.1caf	ad 5d 04	lda $045d			lda 	currentChannel
.1cb2	e8		inx				inx
.1cb3	20 21 2e	jsr $2e21			jsr 	FloatSetByte
.1cb6	4c 2f 10	jmp $102f			jmp 	NextCommand
.1cb9					SetChannel:
.1cb9	fa		plx				plx
.1cba	20 5a 2a	jsr $2a5a			jsr 	FloatIntegerPart
.1cbd	b5 40		lda $40,x			lda 	NSMantissa0,x
.1cbf	8d 5d 04	sta $045d			sta 	currentChannel
.1cc2	ca		dex				dex
.1cc3	4c 2f 10	jmp $102f			jmp 	NextCommand
.1cc6					SetDefaultChannel:
.1cc6	9c 5d 04	stz $045d			stz 	currentChannel
.1cc9	60		rts				rts
.1cca					VectorPrintCharacter:
.1cca	da		phx				phx
.1ccb	ae 5d 04	ldx $045d			ldx 	currentChannel
.1cce	20 e2 25	jsr $25e2			jsr 	XPrintCharacterToChannel
.1cd1	fa		plx				plx
.1cd2	60		rts				rts
.1cd3					VectorGetCharacter:
.1cd3	da		phx				phx
.1cd4	ae 5d 04	ldx $045d			ldx 	currentChannel
.1cd7	20 1b 25	jsr $251b			jsr 	XGetCharacterFromChannel
.1cda	fa		plx				plx
.1cdb	60		rts				rts
.045d					currentChannel:
>045d							.fill 	1
.1cdc					PrintNumber:
.1cdc	fa		plx				plx
.1cdd	a9 07		lda #$07			lda 	#7
.1cdf	20 07 2d	jsr $2d07			jsr 	FloatToString 				; to number in decimal buffer
.1ce2	ca		dex				dex 								; drop
.1ce3	da		phx				phx
.1ce4	a2 00		ldx #$00			ldx 	#0 							; print buffer.
.1ce6					_PNLoop:
.1ce6	bd 94 05	lda $0594,x			lda 	decimalBuffer,x
.1ce9	20 ca 1c	jsr $1cca			jsr 	VectorPrintCharacter
.1cec	e8		inx				inx
.1ced	bd 94 05	lda $0594,x			lda	 	decimalBuffer,x
.1cf0	d0 f4		bne $1ce6			bne 	_PNLoop
.1cf2	a9 20		lda #$20			lda 	#32 						; trailing space
.1cf4	20 ca 1c	jsr $1cca			jsr 	VectorPrintCharacter
.1cf7	fa		plx				plx
.1cf8	4c 2f 10	jmp $102f			jmp 	NextCommand
.1cfb					PrintString:
.1cfb	fa		plx				plx
.1cfc	b5 40		lda $40,x			lda 	NSMantissa0,x 				; point zTemp0 to string
.1cfe	85 28		sta $28				sta 	zTemp0
.1d00	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.1d02	85 29		sta $29				sta 	zTemp0+1
.1d04	ca		dex				dex 								; drop
.1d05	da		phx				phx
.1d06	5a		phy				phy
.1d07	b2 28		lda ($28)			lda 	(zTemp0) 					; X = count
.1d09	aa		tax				tax
.1d0a	a0 01		ldy #$01			ldy 	#1 							; Y = position
.1d0c					_PSLoop:
.1d0c	e0 00		cpx #$00			cpx 	#0 							; complete ?
.1d0e	f0 09		beq $1d19			beq 	_PSExit
.1d10	ca		dex				dex 								; dec count
.1d11	b1 28		lda ($28),y			lda 	(zTemp0),y 					; print char and bump
.1d13	20 ca 1c	jsr $1cca			jsr 	VectorPrintCharacter
.1d16	c8		iny				iny
.1d17	80 f3		bra $1d0c			bra 	_PSLoop
.1d19					_PSExit:
.1d19	7a		ply				ply
.1d1a	fa		plx				plx
.1d1b	4c 2f 10	jmp $102f			jmp 	NextCommand
.1d1e					CommandPushN:
.1d1e	fa		plx				plx
.1d1f	e8		inx				inx 								; next slot on stack
.1d20	b1 22		lda ($22),y			lda 	(codePtr),y 				; exponent
.1d22	95 70		sta $70,x			sta 	NSExponent,x
.1d24	c8		iny				iny
.1d25	b1 22		lda ($22),y			lda 	(codePtr),y 				; mantissa
.1d27	95 40		sta $40,x			sta 	NSMantissa0,x
.1d29	c8		iny				iny
.1d2a	b1 22		lda ($22),y			lda 	(codePtr),y
.1d2c	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1d2e	c8		iny				iny
.1d2f	b1 22		lda ($22),y			lda 	(codePtr),y
.1d31	95 58		sta $58,x			sta 	NSMantissa2,x
.1d33	c8		iny				iny
.1d34	b1 22		lda ($22),y			lda 	(codePtr),y
.1d36	48		pha				pha
.1d37	29 7f		and #$7f			and 	#$7F
.1d39	95 64		sta $64,x			sta 	NSMantissa3,x
.1d3b	68		pla				pla 								; sign in mantissa3:7
.1d3c	29 80		and #$80			and 	#$80
.1d3e	95 34		sta $34,x			sta 	NSStatus,x
.1d40	c8		iny				iny
.1d41	4c 2f 10	jmp $102f			jmp 	NextCommand
.1d44					CommandPushS:
.1d44	fa		plx				plx
.1d45	e8		inx				inx 								; next slot on stack
.1d46	18		clc				clc
.1d47	98		tya				tya
.1d48	65 22		adc $22				adc 	codePtr 					; the string is inline
.1d4a	95 40		sta $40,x			sta 	NSMantissa0,x
.1d4c	a5 23		lda $23				lda 	codePtr+1
.1d4e	69 00		adc #$00			adc 	#0
.1d50	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1d52	74 58		stz $58,x			stz 	NSMantissa2,x
.1d54	74 64		stz $64,x			stz 	NSMantissa3,x
.1d56	a9 40		lda #$40			lda 	#NSSString
.1d58	95 34		sta $34,x			sta 	NSStatus,x
.1d5a	98		tya				tya 								; string length +1 added to Y
.1d5b	38		sec				sec
.1d5c	71 22		adc ($22),y			adc 	(codePtr),y 				; next instruction
.1d5e	a8		tay				tay
.1d5f	4c 2f 10	jmp $102f			jmp 	NextCommand
.1d62					CommandRead:
.1d62	fa		plx				plx
.1d63	5a		phy				phy 								; save Y
.1d64	20 95 1d	jsr $1d95			jsr 	ReadStringToBuffer 			; read element into buffer
.1d67	e8		inx				inx									; space on stack
.1d68	a9 5f		lda #$5f			lda 	#((ReadBufferSize) & $FF)
.1d6a	85 28		sta $28				sta 	0+zTemp0
.1d6c	a9 04		lda #$04			lda 	#((ReadBufferSize) >> 8) & $FF
.1d6e	85 29		sta $29				sta 	1+zTemp0
.1d70	20 b4 22	jsr $22b4			jsr 	ValEvaluateZTemp0
.1d73	b0 04		bcs $1d79			bcs 	_CRError 					; failed
.1d75	7a		ply				ply 								; restore Y
.1d76	4c 2f 10	jmp $102f			jmp 	NextCommand
.1d79					_CRError:
.1d79	4c 90 14	jmp $1490		jmp	ErrorV_value
.1d7c					CommandReadString:
.1d7c	fa		plx				plx
.1d7d	5a		phy				phy 								; save Y
.1d7e	20 95 1d	jsr $1d95			jsr 	ReadStringToBuffer 			; read text
.1d81	e8		inx				inx 								; make space on stack
.1d82	20 1f 2e	jsr $2e1f			jsr 	FloatSetZero 				; store as string on stack
.1d85	a9 5f		lda #$5f			lda 	#ReadBufferSize & $FF
.1d87	95 40		sta $40,x			sta 	NSMantissa0,x
.1d89	a9 04		lda #$04			lda 	#ReadBufferSize >> 8
.1d8b	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1d8d	a9 40		lda #$40			lda 	#NSSString
.1d8f	95 34		sta $34,x			sta 	NSStatus,x
.1d91	7a		ply				ply 								; restore Y
.1d92	4c 2f 10	jmp $102f			jmp 	NextCommand
.1d95					ReadStringToBuffer:
.1d95	a9 28		lda #$28			lda 	#((ReadBumpNext) & $FF)
.1d97	8d 5f 05	sta $055f			sta 	0+ReadBumpNextVec
.1d9a	a9 1e		lda #$1e			lda 	#((ReadBumpNext) >> 8) & $FF
.1d9c	8d 60 05	sta $0560			sta 	1+ReadBumpNextVec
.1d9f	a9 fb		lda #$fb			lda 	#((ReadLookNext) & $FF)
.1da1	8d 61 05	sta $0561			sta 	0+ReadLookNextVec
.1da4	a9 1d		lda #$1d			lda 	#((ReadLookNext) >> 8) & $FF
.1da6	8d 62 05	sta $0562			sta 	1+ReadLookNextVec
.1da9					GetStringToBuffer:
.1da9	20 f8 1d	jsr $1df8			jsr		GetLookNext 				; skip all leading spaces.
.1dac	f0 44		beq $1df2			beq 	_RBError 					; end of data
.1dae	b0 f9		bcs $1da9			bcs 	GetStringToBuffer 			; switched to new data line.
.1db0	c9 20		cmp #$20			cmp 	#' ' 						; non space got something
.1db2	b0 05		bcs $1db9			bcs 	_RBNoSpace
.1db4	20 f5 1d	jsr $1df5			jsr 	GetBumpNext 				; consume space and loop round.
.1db7	80 f0		bra $1da9			bra 	GetStringToBuffer
.1db9					_RBNoSpace:
.1db9	9c 5f 04	stz $045f			stz 	ReadBufferSize 				; empty the buffer.
.1dbc	c9 22		cmp #$22			cmp 	#'"' 						; is it a '"'
.1dbe	d0 08		bne $1dc8			bne 	_RBCommaSep
.1dc0	8d 5e 04	sta $045e			sta 	ReadSep 					; use as a seperator
.1dc3	20 f5 1d	jsr $1df5			jsr 	GetBumpNext 				; consume the '"'
.1dc6	80 05		bra $1dcd			bra 	_RBGetText
.1dc8					_RBCommaSep:
.1dc8	a9 2c		lda #$2c			lda 	#","						; get till comma
.1dca	8d 5e 04	sta $045e			sta 	ReadSep
.1dcd					_RBGetText:
.1dcd	20 f8 1d	jsr $1df8			jsr 	GetLookNext 				; what follows
.1dd0	b0 18		bcs $1dea			bcs 	_RBEndGet 					; if new DATA line, the end without consumption
.1dd2	20 f5 1d	jsr $1df5			jsr 	GetBumpNext 				; consume it whatever
.1dd5	cd 5e 04	cmp $045e			cmp 	ReadSep 					; if found the seperator.
.1dd8	f0 10		beq $1dea			beq 	_RBEndGet 					; exit after consumption
.1dda	da		phx				phx
.1ddb	ae 5f 04	ldx $045f			ldx 	ReadBufferSize 				; copy into buffer.
.1dde	ee 5f 04	inc $045f			inc 	ReadBufferSize
.1de1	9d 60 04	sta $0460,x			sta 	ReadBuffer,x
.1de4	9e 61 04	stz $0461,x			stz 	ReadBuffer+1,x 				; make ASCIIZ as well.
.1de7	fa		plx				plx
.1de8	80 e3		bra $1dcd			bra 	_RBGetText
.1dea					_RBEndGet:
.1dea	c9 22		cmp #$22			cmp 	#'"'
.1dec	d0 03		bne $1df1			bne 	_RBNotQuote
.1dee	20 f5 1d	jsr $1df5			jsr 	GetBumpNext
.1df1					_RBNotQuote:
.1df1	60		rts				rts
.1df2					_RBError:
.1df2	4c 45 15	jmp $1545		jmp	ErrorV_data
.1df5					GetBumpNext:
.1df5	6c 5f 05	jmp ($055f)			jmp 	(ReadBumpNextVec)
.1df8					GetLookNext:
.1df8	6c 61 05	jmp ($0561)			jmp 	(ReadLookNextVec)
.1dfb					ReadLookNext:
.1dfb	ad 63 05	lda $0563			lda 	dataRemaining 				; any data remaining
.1dfe	f0 04		beq $1e04			beq 	_RLNFindData
.1e00	b2 25		lda ($25)			lda 	(objPtr) 					; return that object.
.1e02	18		clc				clc
.1e03	60		rts				rts
.1e04					_RLNFindData:
.1e04	b2 25		lda ($25)			lda 	(objPtr) 					; see where we are
.1e06	c9 ff		cmp #$ff			cmp 	#$FF 						; if at $FF then end, error.
.1e08	f0 1a		beq $1e24			beq 	_RLNNoData
.1e0a	c9 cf		cmp #$cf			cmp 	#PCD_CMD_DATA 				; Found DATA
.1e0c	f0 05		beq $1e13			beq 	_RLNHaveData
.1e0e					_RLNNext:
.1e0e	20 35 16	jsr $1635			jsr 	MoveObjectForward			; else scan forward.
.1e11	80 f1		bra $1e04			bra 	_RLNFindData
.1e13					_RLNHaveData:
.1e13	a0 01		ldy #$01			ldy 	#1 							; get length
.1e15	b1 25		lda ($25),y			lda 	(objPtr),y
.1e17	f0 f5		beq $1e0e			beq 	_RLNNext 					; skip if DATA alone
.1e19	20 28 1e	jsr $1e28			jsr 	ReadBumpNext 				; advance by two
.1e1c	20 28 1e	jsr $1e28			jsr 	ReadBumpNext
.1e1f	8d 63 05	sta $0563			sta 	dataRemaining 				; set data left count.
.1e22	38		sec				sec
.1e23	60		rts				rts
.1e24					_RLNNoData:
.1e24	a9 00		lda #$00			lda 	#0
.1e26	38		sec				sec
.1e27	60		rts				rts
.1e28					ReadBumpNext:
.1e28	e6 25		inc $25				inc 	objPtr
.1e2a	d0 02		bne $1e2e			bne 	_RBNSkip
.1e2c	e6 26		inc $26				inc 	objPtr+1
.1e2e					_RBNSkip:
.1e2e	ce 63 05	dec $0563			dec 	dataRemaining
.1e31	60		rts				rts
.045e					ReadSep:
>045e							.fill 	1
.045f					ReadBufferSize:
>045f							.fill 	1
.0460					ReadBuffer:
>0460							.fill 	255
.055f					ReadBumpNextVec:
>055f							.fill 	2
.0561					ReadLookNextVec:
>0561							.fill 	2
.1e32					ReadFloatCommand:
.1e32	fa		plx				plx
.1e33	b1 22		lda ($22),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.1e35	85 28		sta $28				sta 	zTemp0 						; save in MSB
.1e37	88		dey				dey 								; get the upper 3 bits
.1e38	b1 22		lda ($22),y			lda 	(codePtr),y
.1e3a	29 07		and #$07			and 	#7
.1e3c	c8		iny				iny
.1e3d	c8		iny				iny
.1e3e	06 28		asl $28				asl 	zTemp0 						; shift zTemp0:A left
.1e40	2a		rol a				rol 	a 							; carry will be clear.
.1e41	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.1e44	85 29		sta $29				sta 	zTemp0+1
.1e46	20 4c 1e	jsr $1e4c			jsr 	ReadFloatZTemp0Sub
.1e49	4c 2f 10	jmp $102f			jmp 	NextCommand
.1e4c					ReadFloatZTemp0Sub:
.1e4c	5a		phy				phy 								; start write
.1e4d	a0 01		ldy #$01			ldy 	#1
.1e4f	e8		inx				inx
.1e50	b2 28		lda ($28)			lda 	(zTemp0)
.1e52	95 40		sta $40,x			sta 	NSMantissa0,x
.1e54	b1 28		lda ($28),y			lda 	(zTemp0),y
.1e56	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1e58	c8		iny				iny
.1e59	b1 28		lda ($28),y			lda 	(zTemp0),y
.1e5b	95 58		sta $58,x			sta 	NSMantissa2,x
.1e5d	c8		iny				iny
.1e5e	b1 28		lda ($28),y			lda 	(zTemp0),y
.1e60	95 64		sta $64,x			sta 	NSMantissa3,x
.1e62	c8		iny				iny
.1e63	b1 28		lda ($28),y			lda 	(zTemp0),y
.1e65	95 70		sta $70,x			sta 	NSExponent,x
.1e67	c8		iny				iny
.1e68	b1 28		lda ($28),y			lda 	(zTemp0),y
.1e6a	95 34		sta $34,x			sta 	NSStatus,x
.1e6c	7a		ply				ply
.1e6d	60		rts				rts
.1e6e					ReadIntegerCommand:
.1e6e	fa		plx				plx
.1e6f	b1 22		lda ($22),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.1e71	85 28		sta $28				sta 	zTemp0 						; save in MSB
.1e73	88		dey				dey 								; get the upper 3 bits
.1e74	b1 22		lda ($22),y			lda 	(codePtr),y
.1e76	29 07		and #$07			and 	#7
.1e78	c8		iny				iny
.1e79	c8		iny				iny
.1e7a	06 28		asl $28				asl 	zTemp0 						; shift zTemp0:A left
.1e7c	2a		rol a				rol 	a 							; carry will be clear.
.1e7d	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.1e80	85 29		sta $29				sta 	zTemp0+1
.1e82	20 88 1e	jsr $1e88			jsr 	ReadIntegerZTemp0Sub
.1e85	4c 2f 10	jmp $102f			jmp 	NextCommand
.1e88					ReadIntegerZTemp0Sub:
.1e88	5a		phy				phy 								; start write
.1e89	a0 01		ldy #$01			ldy 	#1
.1e8b	e8		inx				inx 								; prepare
.1e8c	74 58		stz $58,x			stz 	NSMantissa2,x
.1e8e	74 64		stz $64,x			stz 	NSMantissa3,x
.1e90	74 70		stz $70,x			stz 	NSExponent,x
.1e92	74 34		stz $34,x			stz 	NSStatus,x
.1e94	b1 28		lda ($28),y			lda 	(zTemp0),y 					; get MSB, do -ve code.
.1e96	30 08		bmi $1ea0			bmi 	_RIZNegative
.1e98	95 4c		sta $4c,x			sta 	NSMantissa1,x 				; +ve read
.1e9a	b2 28		lda ($28)			lda 	(zTemp0)
.1e9c	95 40		sta $40,x			sta 	NSMantissa0,x
.1e9e	7a		ply				ply
.1e9f	60		rts				rts
.1ea0					_RIZNegative:
.1ea0	38		sec				sec 								; -ve read
.1ea1	a9 00		lda #$00			lda 	#0
.1ea3	f2 28		sbc ($28)			sbc 	(zTemp0)
.1ea5	95 40		sta $40,x			sta 	NSMantissa0,x
.1ea7	a9 00		lda #$00			lda 	#0
.1ea9	f1 28		sbc ($28),y			sbc 	(zTemp0),y
.1eab	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1ead	a9 80		lda #$80			lda 	#$80
.1eaf	95 34		sta $34,x			sta 	NSStatus,x
.1eb1	7a		ply				ply
.1eb2	60		rts				rts
.1eb3					ReadStringCommand:
.1eb3	fa		plx				plx
.1eb4	b1 22		lda ($22),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.1eb6	85 28		sta $28				sta 	zTemp0 						; save in MSB
.1eb8	88		dey				dey 								; get the upper 3 bits
.1eb9	b1 22		lda ($22),y			lda 	(codePtr),y
.1ebb	29 07		and #$07			and 	#7
.1ebd	c8		iny				iny
.1ebe	c8		iny				iny
.1ebf	06 28		asl $28				asl 	zTemp0 						; shift zTemp0:A left
.1ec1	2a		rol a				rol 	a 							; carry will be clear.
.1ec2	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.1ec5	85 29		sta $29				sta 	zTemp0+1
.1ec7	20 cd 1e	jsr $1ecd			jsr 	ReadStringZTemp0Sub
.1eca	4c 2f 10	jmp $102f			jmp 	NextCommand
.1ecd					ReadStringZTemp0Sub:
.1ecd	5a		phy				phy 								; start write
.1ece	e8		inx				inx 								; prepare
.1ecf	74 58		stz $58,x			stz 	NSMantissa2,x
.1ed1	74 64		stz $64,x			stz 	NSMantissa3,x
.1ed3	74 70		stz $70,x			stz 	NSExponent,x
.1ed5	a9 40		lda #$40			lda 	#NSSString
.1ed7	74 34		stz $34,x			stz 	NSStatus,x
.1ed9	18		clc				clc
.1eda	b2 28		lda ($28)			lda 	(zTemp0)					; read address of block add 2.
.1edc	69 02		adc #$02			adc 	#2 							; this points to actual data
.1ede	95 40		sta $40,x			sta 	NSMantissa0,x 				; if address 0 the MSB will still be 0
.1ee0	a0 01		ldy #$01			ldy 	#1
.1ee2	b1 28		lda ($28),y			lda 	(zTemp0),y
.1ee4	69 00		adc #$00			adc 	#0
.1ee6	95 4c		sta $4c,x			sta 	NSMantissa1,x 				; +ve read
.1ee8	d0 08		bne $1ef2			bne 	_RSZNoDefault 				; if read $00 use a default value.
.1eea	a9 f4		lda #$f4			lda 	#_RSZNull & $FF
.1eec	95 40		sta $40,x			sta 	NSMantissa0,x
.1eee	a9 1e		lda #$1e			lda 	#_RSZNull >> 8
.1ef0	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1ef2					_RSZNoDefault:
.1ef2	7a		ply				ply
.1ef3	60		rts				rts
.1ef4					_RSZNull:
>1ef4	00						.byte 	0
.1ef5					CommandRestore:
.1ef5	fa		plx				plx
.1ef6	20 fc 1e	jsr $1efc			jsr 	RestoreCode
.1ef9	4c 2f 10	jmp $102f			jmp 	NextCommand
.1efc					RestoreCode:
.1efc	ad 04 04	lda $0404			lda 	runtimeHigh 				; reset pointer and page
.1eff	85 28		sta $28				sta 	objPage+1
.1f01	64 27		stz $27				stz  	objPage
.1f03	9c 63 05	stz $0563			stz 	dataRemaining 				; no data remaining.
.1f06	60		rts				rts
.0563					dataRemaining:
>0563							.fill 	1		 					; 0 if not in data statement
.1f07					UnaryRND:
.1f07	fa		plx				plx
.1f08	34 34		bit $34,x			bit 	NSStatus,x 					; -ve then set seed from operand
.1f0a	10 17		bpl $1f23			bpl 	_URNoSeed
.1f0c	20 74 2b	jsr $2b74			jsr 	FloatNormalise 				; some float value
.1f0f	b5 40		lda $40,x			lda 	NSMantissa0,x 				; copy to Mantissa
.1f11	8d 64 05	sta $0564			sta 	randomSeed+0
.1f14	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.1f16	8d 65 05	sta $0565			sta 	randomSeed+1
.1f19	b5 58		lda $58,x			lda 	NSMantissa2,x
.1f1b	8d 66 05	sta $0566			sta 	randomSeed+2
.1f1e	b5 64		lda $64,x			lda 	NSMantissa3,x
.1f20	8d 67 05	sta $0567			sta 	randomSeed+3
.1f23					_URNoSeed:
.1f23	20 45 1f	jsr $1f45			jsr 	RandomNumberGenerator 		; create a number and copy to mantissa
.1f26	ad 64 05	lda $0564			lda 	randomSeed+0
.1f29	95 40		sta $40,x			sta 	NSMantissa0,x
.1f2b	ad 65 05	lda $0565			lda 	randomSeed+1
.1f2e	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1f30	ad 66 05	lda $0566			lda 	randomSeed+2
.1f33	95 58		sta $58,x			sta 	NSMantissa2,x
.1f35	ad 67 05	lda $0567			lda 	randomSeed+3
.1f38	29 7f		and #$7f			and 	#$7F
.1f3a	95 64		sta $64,x			sta 	NSMantissa3,x
.1f3c	a9 e1		lda #$e1			lda 	#(-31 & $FF)
.1f3e	95 70		sta $70,x			sta 	NSExponent,x
.1f40	74 34		stz $34,x			stz 	NSStatus,x
.1f42	4c 2f 10	jmp $102f			jmp 	NextCommand
.1f45					RandomNumberGenerator:
.1f45	5a		phy				phy
.1f46	ad 64 05	lda $0564			lda 	randomSeed+0 				; check if zero
.1f49	0d 65 05	ora $0565			ora 	randomSeed+1
.1f4c	0d 66 05	ora $0566			ora 	randomSeed+2
.1f4f	0d 67 05	ora $0567			ora 	randomSeed+3
.1f52	d0 07		bne $1f5b			bne 	_RNGNoSeed
.1f54	ce 67 05	dec $0567			dec 	randomSeed+3 				; if so tweak and flog
.1f57	a0 64		ldy #$64			ldy 	#100
.1f59	80 05		bra $1f60			bra 	_RNGLoop
.1f5b					_RNGNoSeed:
.1f5b	a0 08		ldy #$08			ldy 	#8
.1f5d	ad 64 05	lda $0564			lda 	randomSeed+0
.1f60					_RNGLoop:
.1f60	0a		asl a				asl		a
.1f61	2e 65 05	rol $0565			rol 	randomSeed+1
.1f64	2e 66 05	rol $0566			rol 	randomSeed+2
.1f67	2e 67 05	rol $0567			rol 	randomSeed+3
.1f6a	90 02		bcc $1f6e			bcc		_RNGSkip
.1f6c	49 c5		eor #$c5			eor 	#$C5
.1f6e					_RNGSkip:
.1f6e	88		dey				dey
.1f6f	d0 ef		bne $1f60			bne		_RNGLoop
.1f71	8d 64 05	sta $0564			sta 	randomSeed+0
.1f74	7a		ply				ply
.1f75	60		rts				rts
.0564					randomSeed:
>0564							.fill 	4
.1f76					StringConcatenate:
.1f76	fa		plx				plx
.1f77	ca		dex				dex
.1f78	b5 40		lda $40,x			lda 	NSMantissa0,x 				; copy strings to zTemp1 and zTemp2
.1f7a	85 2a		sta $2a				sta 	zTemp1
.1f7c	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.1f7e	85 2b		sta $2b				sta 	zTemp1+1
.1f80	b5 41		lda $41,x			lda 	NSMantissa0+1,x
.1f82	85 2c		sta $2c				sta 	zTemp2
.1f84	b5 4d		lda $4d,x			lda 	NSMantissa1+1,x
.1f86	85 2d		sta $2d				sta 	zTemp2+1
.1f88	18		clc				clc 								; work out total length
.1f89	b2 2a		lda ($2a)			lda 	(zTemp1)
.1f8b	72 2c		adc ($2c)			adc 	(zTemp2)
.1f8d	b0 18		bcs $1fa7			bcs 	_BCLength 					; more than 255 characters.
.1f8f	48		pha				pha 								; save total
.1f90	20 6d 20	jsr $206d			jsr 	StringAllocTemp 			; space for result.
.1f93	68		pla				pla 								; write total as first.
.1f94	92 2e		sta ($2e)			sta 	(zsTemp)
.1f96	20 aa 1f	jsr $1faa			jsr 	_BCCopyZTemp1 				; copy zTemp1 to target
.1f99	a5 2c		lda $2c				lda 	zTemp2 						; copy address zTemp2->1
.1f9b	85 2a		sta $2a				sta 	zTemp1
.1f9d	a5 2d		lda $2d				lda 	zTemp2+1
.1f9f	85 2b		sta $2b				sta 	zTemp1+1
.1fa1	20 aa 1f	jsr $1faa			jsr 	_BCCopyZTemp1 				; and copy it, e.g. zTemp2
.1fa4	4c 2f 10	jmp $102f			jmp 	NextCommand
.1fa7					_BCLength:
.1fa7	4c 80 14	jmp $1480		jmp	ErrorV_range
.1faa					_BCCopyZTemp1:
.1faa	b2 2a		lda ($2a)			lda 	(zTemp1) 					; bytes to copy
.1fac	f0 15		beq $1fc3			beq 	_BCCExit 					; none.
.1fae	da		phx				phx 								; save XY
.1faf	5a		phy				phy
.1fb0	aa		tax				tax 								; count in X.
.1fb1	a0 01		ldy #$01			ldy 	#1
.1fb3					_BCCLoop:
.1fb3	e6 2e		inc $2e				inc 	zsTemp 						; bump pointer, pre-increment
.1fb5	d0 02		bne $1fb9			bne 	_BCCNoCarry
.1fb7	e6 2f		inc $2f				inc 	zsTemp+1
.1fb9					_BCCNoCarry:
.1fb9	b1 2a		lda ($2a),y			lda 	(zTemp1),y				 	; copy bytes
.1fbb	92 2e		sta ($2e)			sta 	(zsTemp)
.1fbd	c8		iny				iny
.1fbe	ca		dex				dex 								; X times
.1fbf	d0 f2		bne $1fb3			bne 	_BCCLoop
.1fc1	7a		ply				ply 								; restore YX
.1fc2	fa		plx				plx
.1fc3					_BCCExit:
.1fc3	60		rts				rts
.1fc4					XRuntimeSetup:
.1fc4	a9 ff		lda #$ff	 		lda 	#$FF 						; default banks to access.
.1fc6	8d 6b 05	sta $056b	 		sta 	ramBank
.1fc9	8d 6c 05	sta $056c	 		sta 	romBank
.1fcc	60		rts				rts
.1fcd					SignTOS:
.1fcd	fa		plx				plx
.1fce	20 41 2e	jsr $2e41			jsr 	FloatIsZero 				; if zero
.1fd1	f0 0f		beq $1fe2			beq 	_SGZero  					; return Int Zero
.1fd3	b5 34		lda $34,x			lda 	NSStatus,x 					; get status w/sign
.1fd5	48		pha				pha
.1fd6	a9 01		lda #$01			lda 	#1 							; set result to 1
.1fd8	20 21 2e	jsr $2e21			jsr 	FloatSetByte
.1fdb	68		pla				pla
.1fdc	29 80		and #$80			and		#$80 						; copy the sign byte out
.1fde	95 34		sta $34,x			sta 	NSStatus,x  				; so it will be -1 or 1
.1fe0	80 03		bra $1fe5			bra 	_SGExit
.1fe2					_SGZero:
.1fe2	20 1f 2e	jsr $2e1f			jsr 	FloatSetZero
.1fe5					_SGExit:
.1fe5	4c 2f 10	jmp $102f			jmp 	NextCommand
.1fe8					CommandShift:
.1fe8	b1 22		lda ($22),y			lda 	(codePtr),y 				; get shifted command (X already pushed)
.1fea	c8		iny				iny
.1feb	0a		asl a				asl 	a 							; double into X
.1fec	aa		tax				tax
.1fed	7c 98 23	jmp ($2398,x)			jmp 	(ShiftVectorTable,x) 		; go there.
.1ff0					PrintTab:
.1ff0	fa		plx				plx
.1ff1	20 37 25	jsr $2537			jsr 	XGetHPos
.1ff4					_PTMod10:
.1ff4	38		sec				sec
.1ff5	e9 0a		sbc #$0a			sbc 	#10
.1ff7	b0 fb		bcs $1ff4			bcs 	_PTMod10
.1ff9	49 ff		eor #$ff			eor 	#255 						; subtract from 10 effectively. negate it
.1ffb	1a		inc a				inc 	a 							; if modulus is 0, then this will be -10 => 10
.1ffc	80 15		bra $2013			bra 	PrintSpaceLoop
.1ffe					PrintPos:
.1ffe	fa		plx				plx
.1fff	20 37 25	jsr $2537			jsr		XGetHPos 					; get current position
.2002	85 28		sta $28				sta 	zTemp0
.2004	38		sec				sec 								; calculate spaces required
.2005	b5 40		lda $40,x			lda 	NSMantissa0,x
.2007	ca		dex				dex
.2008	e5 28		sbc $28				sbc 	zTemp0
.200a	b0 07		bcs $2013			bcs 	PrintSpaceLoop 				; if >= 0 then do that many spaces
.200c	4c 2f 10	jmp $102f			jmp 	NextCommand
.200f					PrintSpace:
.200f	fa		plx				plx
.2010	b5 40		lda $40,x			lda 	NSMantissa0,x
.2012	ca		dex				dex
.2013					PrintSpaceLoop:
.2013	c9 00		cmp #$00			cmp 	#0
.2015	f0 0a		beq $2021			beq 	_PSExit
.2017	48		pha				pha
.2018	a9 20		lda #$20			lda 	#" "
.201a	20 ca 1c	jsr $1cca			jsr 	VectorPrintCharacter
.201d	68		pla				pla
.201e	3a		dec a				dec 	a
.201f	80 f2		bra $2013			bra 	PrintSpaceLoop
.2021					_PSExit:
.2021	4c 2f 10	jmp $102f			jmp 	NextCommand
.2024					CommandStop:
.2024	fa		plx				plx
.2025	4c 32 15	jmp $1532		jmp	ErrorV_stop
.2028					Unary_Str:
.2028	fa		plx				plx
.2029	5a		phy				phy
.202a	a9 08		lda #$08			lda 	#8 							; maximum decimal places.
.202c	20 07 2d	jsr $2d07			jsr 	FloatToString 				; do the conversion.
.202f	a9 21		lda #$21			lda		#33 						; create buffer
.2031	20 6d 20	jsr $206d			jsr 	StringAllocTemp 			; allocate memory
.2034	a0 01		ldy #$01			ldy 	#1  						; copy the converted string into the buffer.
.2036					_USCopy:
.2036	b9 93 05	lda $0593,y			lda 	decimalBuffer-1,y
.2039	f0 05		beq $2040			beq 	_USExit
.203b	91 2e		sta ($2e),y			sta 	(zsTemp),y
.203d	c8		iny				iny
.203e	80 f6		bra $2036			bra 	_USCopy
.2040					_USExit:
.2040	98		tya				tya
.2041	3a		dec a				dec 	a
.2042	92 2e		sta ($2e)			sta 	(zsTemp)
.2044	7a		ply				ply
.2045	4c 2f 10	jmp $102f			jmp 	NextCommand
.2048					StringInitialise:
.2048	48		pha				pha
.2049	ad 68 05	lda $0568			lda 	stringInitialised 			; already done
.204c	d0 11		bne $205f			bne 	_SIExit
.204e	ad 02 04	lda $0402			lda 	stringHighMemory 			; copy high memory - 512 => stringTempPointer
.2051	8d 69 05	sta $0569			sta 	stringTempPointer
.2054	ad 03 04	lda $0403			lda 	stringHighMemory+1
.2057	3a		dec a				dec 	a
.2058	3a		dec a				dec 	a
.2059	8d 6a 05	sta $056a			sta 	stringTempPointer+1
.205c	ce 68 05	dec $0568			dec 	stringInitialised 			; set the initialised flag.
.205f					_SIExit:
.205f	a5 33		lda $33				lda 	availableMemory+1 			; check out of memory
.2061	1a		inc a				inc 	a
.2062	1a		inc a				inc 	a
.2063	cd 03 04	cmp $0403			cmp 	stringHighMemory+1
.2066	b0 02		bcs $206a			bcs 	_SIMemory
.2068	68		pla				pla
.2069	60		rts				rts
.206a					_SIMemory:
.206a	4c 8b 15	jmp $158b		jmp	ErrorV_memory
.206d					StringAllocTemp:
.206d	20 48 20	jsr $2048			jsr 	StringInitialise 			; check it is initialised.
.2070	49 ff		eor #$ff			eor 	#$FF 						; subtract A+1 from temp pointer.
.2072	18		clc				clc
.2073	6d 69 05	adc $0569			adc 	stringTempPointer 			; subtract 32 from temp pointer and
.2076	8d 69 05	sta $0569			sta 	stringTempPointer 			; save in zsTemp and stackas well.
.2079	85 2e		sta $2e				sta 	zsTemp
.207b	95 40		sta $40,x			sta 	NSMantissa0,x
.207d	ad 6a 05	lda $056a			lda 	stringTempPointer+1
.2080	69 ff		adc #$ff			adc 	#$FF
.2082	8d 6a 05	sta $056a			sta 	stringTempPointer+1
.2085	85 2f		sta $2f				sta 	zsTemp+1
.2087	95 4c		sta $4c,x			sta 	NSMantissa1,x
.2089	74 58		stz $58,x			stz 	NSMantissa2,x
.208b	74 64		stz $64,x			stz 	NSMantissa3,x
.208d	a9 00		lda #$00			lda 	#0 							; clear string.
.208f	92 2e		sta ($2e)			sta 	(zsTemp)
.2091	a9 40		lda #$40			lda 	#NSSString 			 		; mark as string
.2093	95 34		sta $34,x			sta 	NSStatus,x
.2095	60		rts				rts
.2096					StringWriteChar:
.2096	5a		phy				phy
.2097	48		pha				pha
.2098	b2 2e		lda ($2e)			lda 	(zsTemp)
.209a	1a		inc a				inc 	a
.209b	92 2e		sta ($2e)			sta 	(zsTemp)
.209d	a8		tay				tay
.209e	68		pla				pla
.209f	91 2e		sta ($2e),y			sta 	(zsTemp),y
.20a1	7a		ply				ply
.20a2	60		rts				rts
.0568					stringInitialised:
>0568							.fill 	1
.0569					stringTempPointer:
>0569							.fill 	2
.20a3					Unary_Left:
.20a3	fa		plx				plx
.20a4	5a		phy				phy
.20a5	18		clc				clc 								; only one parameter
.20a6	20 86 19	jsr $1986			jsr 	GetInteger8Bit 				; push the length of the string.
.20a9	48		pha				pha
.20aa	ca		dex				dex
.20ab	a9 00		lda #$00			lda 	#0 							; push the start position.
.20ad	48		pha				pha
.20ae	20 e6 20	jsr $20e6			jsr 	UnarySStringToZTemp0
.20b1	80 3c		bra $20ef			bra 	SubstringMain 				; stack now points to the string to slice.
.20b3					Unary_Right:
.20b3	fa		plx				plx
.20b4	5a		phy				phy
.20b5	a9 ff		lda #$ff			lda 	#255 						; push 255, we want all the string.
.20b7	20 86 19	jsr $1986			jsr 	GetInteger8Bit 				; push the right length of the string.
.20ba	48		pha				pha
.20bb	ca		dex				dex
.20bc	20 e6 20	jsr $20e6			jsr 	UnarySStringToZTemp0
.20bf	68		pla				pla 								; this is the right requirement
.20c0	38		sec				sec
.20c1	49 ff		eor #$ff			eor 	#$FF
.20c3	72 28		adc ($28)			adc 	(zTemp0)
.20c5	b0 02		bcs $20c9			bcs 	_URHaveCount
.20c7	a9 00		lda #$00			lda 	#0 							; overflow, start from 0
.20c9					_URHaveCount:
.20c9	a0 ff		ldy #$ff			ldy 	#255 						; whole string
.20cb	5a		phy				phy
.20cc	48		pha				pha 								; start position
.20cd	80 20		bra $20ef			bra 	SubstringMain
.20cf					Unary_Mid:
.20cf	fa		plx				plx
.20d0	5a		phy				phy
.20d1	20 86 19	jsr $1986			jsr 	GetInteger8Bit 				; push the length of the string required.
.20d4	48		pha				pha
.20d5	ca		dex				dex
.20d6	20 86 19	jsr $1986			jsr 	GetInteger8Bit 				; put the start position.
.20d9	f0 08		beq $20e3			beq 	_UMError
.20db	3a		dec a				dec 	a
.20dc	48		pha				pha
.20dd	ca		dex				dex
.20de	20 e6 20	jsr $20e6			jsr 	UnarySStringToZTemp0
.20e1	80 0c		bra $20ef			bra 	SubstringMain 				; stack now points to the string to slice.
.20e3					_UMError:
.20e3	4c 80 14	jmp $1480		jmp	ErrorV_range
.20e6					UnarySStringToZTemp0:
.20e6	b5 40		lda $40,x			lda 	NSMantissa0,x
.20e8	85 28		sta $28				sta 	zTemp0
.20ea	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.20ec	85 29		sta $29				sta 	zTemp0+1
.20ee	60		rts				rts
.20ef					SubstringMain:
.20ef	68		pla				pla 								; get the start offset
.20f0	7a		ply				ply 								; get the count to do.
.20f1	d2 28		cmp ($28)			cmp 	(zTemp0) 					; if start >= length then return NULL.
.20f3	b0 38		bcs $212d			bcs 	_SSReturnNull
.20f5	85 2a		sta $2a				sta 	zTemp1 						; save start position.
.20f7	84 2b		sty $2b				sty 	zTemp1+1 					; save count
.20f9	18		clc				clc
.20fa	65 2b		adc $2b				adc 	zTemp1+1 					; this is the end position.
.20fc	b0 06		bcs $2104			bcs 	_SMTruncateToEnd 			; if overflow, limit to length-start.
.20fe	d2 28		cmp ($28)			cmp 	(zTemp0) 					; ok if limit is <= length.
.2100	f0 04		beq $2106			beq 	_SMIsOkay
.2102	90 02		bcc $2106			bcc 	_SMIsOkay
.2104					_SMTruncateToEnd:
.2104	b2 28		lda ($28)			lda 	(zTemp0) 					; end position is length.
.2106					_SMIsOkay:
.2106	85 2b		sta $2b				sta 	zTemp1+1
.2108	38		sec				sec		 							; work out size
.2109	a5 2b		lda $2b				lda 	zTemp1+1
.210b	e5 2a		sbc $2a				sbc 	zTemp1
.210d	f0 1e		beq $212d			beq 	_SSReturnNull 				; if size = 0 then return empty string.
.210f	20 6d 20	jsr $206d			jsr 	StringAllocTemp 			; zsTemp & mantissa = the new string.
.2112	a4 2a		ldy $2a				ldy 	zTemp1 						; start
.2114					_SMCopy:
.2114	c4 2b		cpy $2b				cpy 	zTemp1+1 					; exit if reached end
.2116	f0 11		beq $2129			beq 	_SMExit
.2118	c8		iny				iny 								; bump and
.2119	b1 28		lda ($28),y			lda 	(zTemp0),y 					; get character (prefix)
.211b	5a		phy				phy
.211c	48		pha				pha
.211d	b2 2e		lda ($2e)			lda 	(zsTemp) 					; bump length => Y
.211f	1a		inc a				inc 	a
.2120	a8		tay				tay
.2121	92 2e		sta ($2e)			sta 	(zsTemp)
.2123	68		pla				pla 								; write character out
.2124	91 2e		sta ($2e),y			sta 	(zsTemp),y
.2126	7a		ply				ply 								; restore Y
.2127	80 eb		bra $2114			bra 	_SMCopy
.2129					_SMExit:
.2129	7a		ply				ply
.212a	4c 2f 10	jmp $102f			jmp 	NextCommand
.212d					_SSReturnNull:
.212d	a9 3f		lda #$3f			lda 	#SSRNull & $FF 				; set up mantissa
.212f	95 40		sta $40,x			sta 	NSMantissa0,x
.2131	a9 21		lda #$21			lda 	#SSRNull >> 8
.2133	95 4c		sta $4c,x			sta 	NSMantissa1,x
.2135	74 58		stz $58,x			stz 	NSMantissa2,x
.2137	74 64		stz $64,x			stz 	NSMantissa3,x
.2139	a9 40		lda #$40			lda 	#NSSString
.213b	95 34		sta $34,x			sta 	NSStatus,x
.213d	80 ea		bra $2129			bra 	_SMExit
.213f					SSRNull:
>213f	00 00						.word 	0
.2141					CommandSwap:
.2141	fa		plx				plx
.2142	b5 40		lda $40,x			lda 	NSMantissa0,x
.2144	48		pha				pha
.2145	b5 3f		lda $3f,x			lda 	NSMantissa0-1,x
.2147	95 40		sta $40,x			sta 	NSMantissa0,x
.2149	68		pla				pla
.214a	95 3f		sta $3f,x			sta 	NSMantissa0-1,x
.214c	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.214e	48		pha				pha
.214f	b5 4b		lda $4b,x			lda 	NSMantissa1-1,x
.2151	95 4c		sta $4c,x			sta 	NSMantissa1,x
.2153	68		pla				pla
.2154	95 4b		sta $4b,x			sta 	NSMantissa1-1,x
.2156	b5 58		lda $58,x			lda 	NSMantissa2,x
.2158	48		pha				pha
.2159	b5 57		lda $57,x			lda 	NSMantissa2-1,x
.215b	95 58		sta $58,x			sta 	NSMantissa2,x
.215d	68		pla				pla
.215e	95 57		sta $57,x			sta 	NSMantissa2-1,x
.2160	b5 64		lda $64,x			lda 	NSMantissa3,x
.2162	48		pha				pha
.2163	b5 63		lda $63,x			lda 	NSMantissa3-1,x
.2165	95 64		sta $64,x			sta 	NSMantissa3,x
.2167	68		pla				pla
.2168	95 63		sta $63,x			sta 	NSMantissa3-1,x
.216a	b5 70		lda $70,x			lda 	NSExponent,x
.216c	48		pha				pha
.216d	b5 6f		lda $6f,x			lda 	NSExponent-1,x
.216f	95 70		sta $70,x			sta 	NSExponent,x
.2171	68		pla				pla
.2172	95 6f		sta $6f,x			sta 	NSExponent-1,x
.2174	b5 34		lda $34,x			lda 	NSStatus,x
.2176	48		pha				pha
.2177	b5 33		lda $33,x			lda 	NSStatus-1,x
.2179	95 34		sta $34,x			sta 	NSStatus,x
.217b	68		pla				pla
.217c	95 33		sta $33,x			sta 	NSStatus-1,x
.217e	4c 2f 10	jmp $102f			jmp 	NextCommand
.2181					CommandSYS:
.2181	fa		plx				plx
.2182	da		phx				phx 								; save XY
.2183	5a		phy				phy
.2184	20 5a 2a	jsr $2a5a			jsr 	FloatIntegerPart
.2187	b5 4c		lda $4c,x			lda 	NSMantissa1,x 				; get call address => zTemp0
.2189	85 29		sta $29				sta 	zTemp0+1
.218b	b5 40		lda $40,x			lda 	NSMantissa0,x
.218d	85 28		sta $28				sta 	zTemp0
.218f	ae 0d 03	ldx $030d			ldx 	SYS_Reg_X 					; load registers
.2192	ac 0e 03	ldy $030e			ldy 	SYS_Reg_Y
.2195	ad 0f 03	lda $030f			lda 	SYS_Reg_S
.2198	48		pha				pha
.2199	ad 0c 03	lda $030c			lda 	SYS_Reg_A
.219c	28		plp				plp
.219d	20 b4 21	jsr $21b4			jsr 	_CSZTemp0
.21a0	08		php				php
.21a1	8e 0d 03	stx $030d			stx 	SYS_Reg_X 					; load registers
.21a4	8c 0e 03	sty $030e			sty 	SYS_Reg_Y
.21a7	8d 0c 03	sta $030c			sta 	SYS_Reg_A
.21aa	68		pla				pla
.21ab	8d 0f 03	sta $030f			sta 	SYS_Reg_S
.21ae	7a		ply				ply 								; restore YX and drop 2
.21af	fa		plx				plx
.21b0	ca		dex				dex
.21b1	4c 2f 10	jmp $102f			jmp 	NextCommand
.21b4					_CSZTemp0:
.21b4	6c 28 00	jmp ($0028)			jmp 	(zTemp0)
.21b7					TimeTOS:
.21b7	fa		plx				plx
.21b8	20 12 22	jsr $2212			jsr 	TIPushClock 				; push clock to TOS
.21bb	4c 2f 10	jmp $102f			jmp 	NextCommand
.21be					TimeString:
.21be	fa		plx				plx
.21bf	20 12 22	jsr $2212			jsr 	TIPushClock 				; push clock to TOS
.21c2	20 e7 21	jsr $21e7			jsr 	_TSDivMod60 				; result in seconds
.21c5	20 e7 21	jsr $21e7			jsr 	_TSDivMod60 				; seconds
.21c8	48		pha				pha
.21c9	20 e7 21	jsr $21e7			jsr 	_TSDivMod60 				; minutes
.21cc	48		pha				pha
.21cd	a9 18		lda #$18			lda 	#24 						; hours
.21cf	20 e9 21	jsr $21e9			jsr 	_TSDivModA
.21d2	48		pha				pha
.21d3	a9 06		lda #$06			lda 	#6
.21d5	20 6d 20	jsr $206d			jsr 	StringAllocTemp
.21d8	68		pla				pla
.21d9	20 f9 21	jsr $21f9			jsr 	_TSWriteDecimal
.21dc	68		pla				pla
.21dd	20 f9 21	jsr $21f9			jsr 	_TSWriteDecimal
.21e0	68		pla				pla
.21e1	20 f9 21	jsr $21f9			jsr 	_TSWriteDecimal
.21e4	4c 2f 10	jmp $102f			jmp 	NextCommand
.21e7					_TSDivMod60:
.21e7	a9 3c		lda #$3c			lda 	#60
.21e9					_TSDivModA:
.21e9	e8		inx				inx
.21ea	20 21 2e	jsr $2e21			jsr 	FloatSetByte
.21ed	ca		dex				dex
.21ee	20 b5 29	jsr $29b5			jsr 	Int32Divide
.21f1	b5 40		lda $40,x			lda 	NSMantissa0,x 				; get modulus
.21f3	48		pha				pha
.21f4	20 a4 29	jsr $29a4			jsr 	NSMCopyPlusTwoToZero
.21f7	68		pla				pla
.21f8	60		rts				rts
.21f9					_TSWriteDecimal:
.21f9	da		phx				phx
.21fa	a2 30		ldx #$30			ldx 	#'0'
.21fc					_TSWDLoop:
.21fc	c9 0a		cmp #$0a			cmp 	#10
.21fe	90 05		bcc $2205			bcc 	_TSWDEnd
.2200	e9 0a		sbc #$0a			sbc 	#10
.2202	e8		inx				inx
.2203	80 f7		bra $21fc			bra 	_TSWDLoop
.2205					_TSWDEnd:
.2205	48		pha				pha
.2206	8a		txa				txa
.2207	20 96 20	jsr $2096			jsr 	StringWriteChar
.220a	68		pla				pla
.220b	09 30		ora #$30			ora 	#'0'
.220d	20 96 20	jsr $2096			jsr 	StringWriteChar
.2210	fa		plx				plx
.2211	60		rts				rts
.2212					TIPushClock:
.2212	5a		phy				phy
.2213	e8		inx				inx 								; push 0 on the stack
.2214	20 1f 2e	jsr $2e1f			jsr 	FloatSetZero
.2217	da		phx				phx
.2218	20 02 26	jsr $2602			jsr 	XReadClock 					; read time into YXA
.221b	86 28		stx $28				stx 	zTemp0
.221d	fa		plx				plx
.221e	95 40		sta $40,x			sta 	NSMantissa0,x
.2220	a5 28		lda $28				lda 	zTemp0
.2222	95 4c		sta $4c,x			sta 	NSMantissa1,x
.2224	98		tya				tya
.2225	95 58		sta $58,x			sta 	NSMantissa2,x
.2227	7a		ply				ply
.2228	60		rts				rts
.2229					CommandTIWrite:
.2229	fa		plx				plx
.222a	b5 40		lda $40,x			lda 	NSMantissa0,x 				; copy string address to ZSTemp
.222c	85 2e		sta $2e				sta 	zsTemp
.222e	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.2230	85 2f		sta $2f				sta 	zsTemp+1
.2232	b2 2e		lda ($2e)			lda 	(zsTemp) 					; check if it is six
.2234	c9 06		cmp #$06			cmp 	#6
.2236	d0 59		bne $2291			bne 	_CTIWError
.2238	20 1f 2e	jsr $2e1f			jsr 	FloatSetZero
.223b	20 5d 22	jsr $225d			jsr 	_CTIWDigitPair 				; do a digit pair 3 times
.223e	20 5d 22	jsr $225d			jsr 	_CTIWDigitPair
.2241	20 5d 22	jsr $225d			jsr 	_CTIWDigitPair
.2244	a9 3c		lda #$3c			lda 	#60 						; multiply the result by 60.
.2246	20 88 22	jsr $2288			jsr 	_CTIWMultiply
.2249	da		phx				phx
.224a	5a		phy				phy
.224b	b5 4c		lda $4c,x			lda 	NSMantissa1,x 				; get time into YXA
.224d	48		pha				pha
.224e	b5 58		lda $58,x			lda 	NSMantissa2,x
.2250	a8		tay				tay
.2251	b5 40		lda $40,x			lda 	NSMantissa0,x
.2253	fa		plx				plx
.2254	20 06 26	jsr $2606			jsr 	XWriteClock 				; update the clock.
.2257	7a		ply				ply
.2258	fa		plx				plx
.2259	ca		dex				dex 								; throw result.
.225a	4c 2f 10	jmp $102f			jmp 	NextCommand
.225d					_CTIWDigitPair:
.225d	a9 06		lda #$06			lda 	#6 							; x 6
.225f	20 88 22	jsr $2288			jsr 	_CTIWMultiply
.2262	20 6e 22	jsr $226e			jsr 	_CTIWAddDigit 				; add digit
.2265	a9 0a		lda #$0a			lda 	#10 						; x 10
.2267	20 88 22	jsr $2288			jsr 	_CTIWMultiply
.226a	20 6e 22	jsr $226e			jsr 	_CTIWAddDigit 				; add digit
.226d	60		rts				rts
.226e					_CTIWAddDigit:
.226e	e6 2e		inc $2e				inc 	zsTemp 						; pre-increment
.2270	d0 02		bne $2274			bne 	_CTIWASkip
.2272	e6 2f		inc $2f				inc 	zsTemp+1
.2274					_CTIWASkip:
.2274	b2 2e		lda ($2e)			lda 	(zsTemp) 					; read and validate it
.2276	38		sec				sec
.2277	e9 30		sbc #$30			sbc 	#"0"
.2279	90 16		bcc $2291			bcc 	_CTIWError
.227b	c9 0a		cmp #$0a			cmp 	#9+1
.227d	b0 12		bcs $2291			bcs 	_CTIWError
.227f	e8		inx				inx 								; store at +1
.2280	20 21 2e	jsr $2e21			jsr 	FloatSetByte
.2283	ca		dex				dex
.2284	20 ab 2b	jsr $2bab			jsr 	FloatAddTopTwoStack
.2287	60		rts				rts
.2288					_CTIWMultiply:
.2288	e8		inx				inx
.2289	20 21 2e	jsr $2e21			jsr 	FloatSetByte
.228c	ca		dex				dex
.228d	20 2c 2b	jsr $2b2c			jsr 	FloatMultiplyShort
.2290	60		rts				rts
.2291					_CTIWError:
.2291	4c 90 14	jmp $1490		jmp	ErrorV_value
.2294					UnaryUsr:
.2294	fa		plx				plx
.2295	5a		phy				phy
.2296	20 9d 22	jsr $229d			jsr 	_UUCallVector
.2299	7a		ply				ply
.229a	4c 2f 10	jmp $102f			jmp 	NextCommand
.229d					_UUCallVector:
.229d	6c 11 03	jmp ($0311)			jmp 	(USRRoutineAddress)
.22a0					ValUnary:
.22a0	fa		plx				plx
.22a1	b5 40		lda $40,x			lda 	NSMantissa0,x
.22a3	85 28		sta $28				sta 	zTemp0
.22a5	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.22a7	85 29		sta $29				sta 	zTemp0+1
.22a9	20 b4 22	jsr $22b4			jsr 	ValEvaluateZTemp0
.22ac	b0 03		bcs $22b1			bcs 	_VUError 					; couldn't convert
.22ae	4c 2f 10	jmp $102f			jmp 	NextCommand
.22b1					_VUError:
.22b1	4c 90 14	jmp $1490		jmp	ErrorV_value
.22b4					ValEvaluateZTemp0:
.22b4	5a		phy				phy
.22b5	b2 28		lda ($28)			lda 	(zTemp0) 					; check not empty string
.22b7	f0 22		beq $22db			beq 	_VMCFail2
.22b9	a0 00		ldy #$00			ldy 	#0 							; start position
.22bb					_VMCSpaces:
.22bb	c8		iny				iny 								; skip leading spaces
.22bc	b1 28		lda ($28),y			lda 	(zTemp0),y
.22be	c9 20		cmp #$20			cmp 	#" "
.22c0	f0 f9		beq $22bb			beq 	_VMCSpaces
.22c2	48		pha				pha 								; save first character
.22c3	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.22c5	d0 01		bne $22c8			bne 	_VMCStart
.22c7	c8		iny				iny 								; skip over - if so.
.22c8					_VMCStart:
.22c8	38		sec				sec 								; initialise first time round.
.22c9					_VMCNext:
.22c9	98		tya				tya 								; reached end of string
.22ca	3a		dec a				dec 	a
.22cb	52 28		eor ($28)			eor 	(zTemp0) 					; compare length preserve carry.
.22cd	f0 0f		beq $22de			beq 	_VMCSuccess 				; successful.
.22cf	b1 28		lda ($28),y			lda 	(zTemp0),y 					; encode a number.
.22d1	c8		iny				iny
.22d2	20 03 2c	jsr $2c03			jsr 	FloatEncode 				; send it to the number-builder
.22d5	90 03		bcc $22da			bcc 	_VMCFail 					; if failed, give up.
.22d7	18		clc				clc 								; next time round, countinue
.22d8	80 ef		bra $22c9			bra 	_VMCNext
.22da					_VMCFail:
.22da	68		pla				pla
.22db					_VMCFail2:
.22db	7a		ply				ply
.22dc	38		sec				sec
.22dd	60		rts				rts
.22de					_VMCSuccess:
.22de	a9 00		lda #$00			lda 	#0 							; construct final
.22e0	20 03 2c	jsr $2c03			jsr 	FloatEncode 				; by sending a duff value.
.22e3	68		pla				pla 								; if it was -ve
.22e4	c9 2d		cmp #$2d			cmp 	#"-"
.22e6	d0 03		bne $22eb			bne 	_VMCNotNegative
.22e8	20 e1 2d	jsr $2de1			jsr		FloatNegate 				; negate it.
.22eb					_VMCNotNegative:
.22eb	7a		ply				ply
.22ec	18		clc				clc
.22ed	60		rts				rts
.22ee					VectorTable:
>22ee	ee 19					.word	LinkFloatAdd             ; $80 +
>22f0	f7 19					.word	LinkFloatSubtract        ; $81 -
>22f2	00 1a					.word	LinkFloatMultiply        ; $82 *
>22f4	09 1a					.word	LinkFloatDivide          ; $83 /
>22f6	14 1a					.word	LinkFloatPower           ; $84 ^
>22f8	c1 10					.word	BinaryAnd                ; $85 and
>22fa	c5 10					.word	BinaryOr                 ; $86 or
>22fc	1f 1a					.word	LinkCompareGreater       ; $87 >
>22fe	28 1a					.word	LinkCompareEqual         ; $88 =
>2300	31 1a					.word	LinkCompareLess          ; $89 <
>2302	3a 1a					.word	LinkCompareGreaterEqual  ; $8a >=
>2304	43 1a					.word	LinkCompareNotEqual      ; $8b <>
>2306	4c 1a					.word	LinkCompareLessEqual     ; $8c <=
>2308	a9 10					.word	AbsoluteTOS              ; $8d abs
>230a	fc 10					.word	ArrayConvert             ; $8e array
>230c	a4 11					.word	UnaryAsc                 ; $8f asc
>230e	bf 11					.word	CommandAssert            ; $90 assert
>2310	00 12					.word	Unary16Bin               ; $91 bin$
>2312	2a 12					.word	PrintCharacter           ; $92 print.chr
>2314	34 12					.word	UnaryChr                 ; $93 chr$
>2316	99 12					.word	CompareStrings           ; $94 s.cmp
>2318	b2 15					.word	CommandFor               ; $95 for
>231a	b9 16					.word	UnaryFre                 ; $96 fre
>231c	d1 16					.word	CommandGet               ; $97 get
>231e	f7 16					.word	CommandReturn            ; $98 return
>2320	3e 17					.word	Command_PSET             ; $99 pset
>2322	58 17					.word	Command_LINE             ; $9a line
>2324	6d 17					.word	Command_RECT             ; $9b rect
>2326	7c 17					.word	Command_FRAME            ; $9c frame
>2328	8b 17					.word	Command_CHAR             ; $9d char
>232a	22 18					.word	Unary16Hex               ; $9e hex$
>232c	c9 18					.word	CommandInput             ; $9f input
>232e	e0 18					.word	CommandInputString       ; $a0 input$
>2330	f9 18					.word	CommandInputReset        ; $a1 input.start
>2332	dd 19					.word	UnaryLen                 ; $a2 len
>2334	a9 1a					.word	LinkFloatCompare         ; $a3 f.cmp
>2336	b2 1a					.word	LinkDivideInt32          ; $a4 int.div
>2338	36 1b					.word	NegateTOS                ; $a5 negate
>233a	3d 1b					.word	CommandNewLine           ; $a6 new.line
>233c	46 1b					.word	CommandNext              ; $a7 next
>233e	2f 1c					.word	NotTOS                   ; $a8 not
>2340	46 1c					.word	CommandOn                ; $a9 on
>2342	64 1c					.word	CommandMoreOn            ; $aa moreon
>2344	77 1c					.word	UnaryPeek                ; $ab peek
>2346	8c 1c					.word	CommandPOKE              ; $ac poke
>2348	a4 1c					.word	UnaryPos                 ; $ad pos
>234a	ae 1c					.word	GetChannel               ; $ae getchannel
>234c	b9 1c					.word	SetChannel               ; $af setchannel
>234e	dc 1c					.word	PrintNumber              ; $b0 print.n
>2350	fb 1c					.word	PrintString              ; $b1 print.s
>2352	62 1d					.word	CommandRead              ; $b2 read
>2354	7c 1d					.word	CommandReadString        ; $b3 read$
>2356	07 1f					.word	UnaryRND                 ; $b4 rnd
>2358	76 1f					.word	StringConcatenate        ; $b5 concat
>235a	cd 1f					.word	SignTOS                  ; $b6 sgn
>235c	f0 1f					.word	PrintTab                 ; $b7 print.tab
>235e	fe 1f					.word	PrintPos                 ; $b8 print.pos
>2360	0f 20					.word	PrintSpace               ; $b9 print.spc
>2362	28 20					.word	Unary_Str                ; $ba str$
>2364	a3 20					.word	Unary_Left               ; $bb left$
>2366	b3 20					.word	Unary_Right              ; $bc right$
>2368	cf 20					.word	Unary_Mid                ; $bd mid$
>236a	41 21					.word	CommandSwap              ; $be swap
>236c	b7 21					.word	TimeTOS                  ; $bf ti
>236e	be 21					.word	TimeString               ; $c0 ti$
>2370	94 22					.word	UnaryUsr                 ; $c1 usr
>2372	a0 22					.word	ValUnary                 ; $c2 val
>2374	fe 24					.word	CommandClose             ; $c3 close
>2376	10 25					.word	CommandExit              ; $c4 exit
>2378	16 25					.word	CommandDebug             ; $c5 debug
>237a	7c 25					.word	CommandOpen              ; $c6 open
>237c	10 26					.word	CommandScreen            ; $c7 screen
>237e	f7 27					.word	CommandVPOKE             ; $c8 vpoke
>2380	1c 28					.word	CommandVPEEK             ; $c9 vpeek
>2382	e8 1f					.word	CommandShift             ; $ca .shift
>2384	6d 10					.word	PushByteCommand          ; $cb .byte
>2386	80 10					.word	PushWordCommand          ; $cc .word
>2388	1e 1d					.word	CommandPushN             ; $cd .float
>238a	44 1d					.word	CommandPushS             ; $ce .string
>238c	21 13					.word	CommandData              ; $cf .data
>238e	09 17					.word	CommandGoto              ; $d0 .goto
>2390	eb 16					.word	CommandGosub             ; $d1 .gosub
>2392	20 17					.word	CommandGotoZ             ; $d2 .goto.z
>2394	2f 17					.word	CommandGotoNZ            ; $d3 .goto.nz
>2396	af 10					.word	CommandVarSpace          ; $d4 .varspace
.2398					ShiftVectorTable:
>2398	4c 12					.word	CommandClr               ; $ca80 clr
>239a	2a 13					.word	CommandDIM               ; $ca81 dim
>239c	1b 14					.word	CommandEnd               ; $ca82 end
>239e	ae 19					.word	UnaryJoy                 ; $ca83 joy
>23a0	55 1a					.word	LinkFloatIntegerPartDown ; $ca84 int
>23a2	5e 1a					.word	LinkFloatSquareRoot      ; $ca85 sqr
>23a4	6f 1a					.word	LinkFloatLogarithm       ; $ca86 log
>23a6	7a 1a					.word	LinkFloatExponent        ; $ca87 exp
>23a8	83 1a					.word	LinkFloatCosine          ; $ca88 cos
>23aa	8c 1a					.word	LinkFloatSine            ; $ca89 sin
>23ac	95 1a					.word	LinkFloatTangent         ; $ca8a tan
>23ae	9e 1a					.word	LinkFloatArcTan          ; $ca8b atn
>23b0	e6 1a					.word	XCommandMouse            ; $ca8c mouse
>23b2	fb 1a					.word	XUnaryMB                 ; $ca8d mb
>23b4	08 1b					.word	XUnaryMX                 ; $ca8e mx
>23b6	19 1b					.word	XUnaryMY                 ; $ca8f my
>23b8	f5 1e					.word	CommandRestore           ; $ca90 restore
>23ba	24 20					.word	CommandStop              ; $ca91 stop
>23bc	81 21					.word	CommandSYS               ; $ca92 sys
>23be	29 22					.word	CommandTIWrite           ; $ca93 ti$.write
>23c0	f6 23					.word	CommandWAIT              ; $ca94 wait
>23c2	41 25					.word	X16I2CPoke               ; $ca95 i2cpoke
>23c4	61 25					.word	X16I2CPeek               ; $ca96 i2cpeek
>23c6	cc 25					.word	CommandBank              ; $ca97 bank
>23c8	1f 26					.word	XCommandSleep            ; $ca98 sleep
>23ca	43 26					.word	X16_Audio_FMINIT         ; $ca99 fminit
>23cc	51 26					.word	X16_Audio_FMNOTE         ; $ca9a fmnote
>23ce	63 26					.word	X16_Audio_FMDRUM         ; $ca9b fmdrum
>23d0	75 26					.word	X16_Audio_FMINST         ; $ca9c fminst
>23d2	87 26					.word	X16_Audio_FMVIB          ; $ca9d fmvib
>23d4	99 26					.word	X16_Audio_FMFREQ         ; $ca9e fmfreq
>23d6	aa 26					.word	X16_Audio_FMVOL          ; $ca9f fmvol
>23d8	bc 26					.word	X16_Audio_FMPAN          ; $caa0 fmpan
>23da	ce 26					.word	X16_Audio_FMPLAY         ; $caa1 fmplay
>23dc	df 26					.word	X16_Audio_FMCHORD        ; $caa2 fmchord
>23de	f0 26					.word	X16_Audio_FMPOKE         ; $caa3 fmpoke
>23e0	02 27					.word	X16_Audio_PSGINIT        ; $caa4 psginit
>23e2	10 27					.word	X16_Audio_PSGNOTE        ; $caa5 psgnote
>23e4	22 27					.word	X16_Audio_PSGVOL         ; $caa6 psgvol
>23e6	34 27					.word	X16_Audio_PSGWAV         ; $caa7 psgwav
>23e8	46 27					.word	X16_Audio_PSGFREQ        ; $caa8 psgfreq
>23ea	57 27					.word	X16_Audio_PSGPAN         ; $caa9 psgpan
>23ec	69 27					.word	X16_Audio_PSGPLAY        ; $caaa psgplay
>23ee	7a 27					.word	X16_Audio_PSGCHORD       ; $caab psgchord
>23f0	8b 27					.word	CommandCls               ; $caac cls
>23f2	94 27					.word	CommandLocate            ; $caad locate
>23f4	be 27					.word	CommandColor             ; $caae color
.23f6					CommandWAIT:
.23f6	fa		plx				plx
.23f7	b5 3e		lda $3e,x			lda 	NSMantissa0-2,x 			; get wait address
.23f9	85 28		sta $28				sta 	zTemp0
.23fb	b5 4a		lda $4a,x			lda 	NSMantissa1-2,x
.23fd	85 29		sta $29				sta 	zTemp0+1
.23ff					_WaitLoop:
.23ff	b2 28		lda ($28)			lda 	(zTemp0) 					; read it
.2401	35 3f		and $3f,x			and 	NSMantissa0-1,x		 		; and with mask
.2403	55 40		eor $40,x			eor 	NSMantissa0-0,x 			; toggle
.2405	f0 f8		beq $23ff			beq 	_WaitLoop 					; keep going if zero
.2407	ca		dex				dex 								; drop 3.
.2408	ca		dex				dex
.2409	ca		dex				dex
.240a	4c 2f 10	jmp $102f			jmp 	NextCommand
.240d					WriteFloatCommand:
.240d	fa		plx				plx
.240e	b1 22		lda ($22),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.2410	85 28		sta $28				sta 	zTemp0 						; save in MSB
.2412	88		dey				dey 								; get the upper 3 bits
.2413	b1 22		lda ($22),y			lda 	(codePtr),y
.2415	29 07		and #$07			and 	#7
.2417	c8		iny				iny
.2418	c8		iny				iny
.2419	06 28		asl $28				asl 	zTemp0 						; shift zTemp0:A left
.241b	2a		rol a				rol 	a 							; carry will be clear.
.241c	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.241f	85 29		sta $29				sta 	zTemp0+1
.2421	20 27 24	jsr $2427			jsr 	WriteFloatZTemp0Sub
.2424	4c 2f 10	jmp $102f			jmp 	NextCommand
.2427					WriteFloatZTemp0Sub:
.2427	5a		phy				phy 								; ldart write
.2428	a0 01		ldy #$01			ldy 	#1
.242a	b5 40		lda $40,x			lda 	NSMantissa0,x
.242c	92 28		sta ($28)			sta 	(zTemp0)
.242e	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.2430	91 28		sta ($28),y			sta 	(zTemp0),y
.2432	c8		iny				iny
.2433	b5 58		lda $58,x			lda 	NSMantissa2,x
.2435	91 28		sta ($28),y			sta 	(zTemp0),y
.2437	c8		iny				iny
.2438	b5 64		lda $64,x			lda 	NSMantissa3,x
.243a	91 28		sta ($28),y			sta 	(zTemp0),y
.243c	c8		iny				iny
.243d	b5 70		lda $70,x			lda 	NSExponent,x
.243f	91 28		sta ($28),y			sta 	(zTemp0),y
.2441	c8		iny				iny
.2442	b5 34		lda $34,x			lda 	NSStatus,x
.2444	91 28		sta ($28),y			sta 	(zTemp0),y
.2446	ca		dex				dex
.2447	7a		ply				ply
.2448	60		rts				rts
.2449					WriteIntegerCommand:
.2449	fa		plx				plx
.244a	b1 22		lda ($22),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.244c	85 28		sta $28				sta 	zTemp0 						; save in MSB
.244e	88		dey				dey 								; get the upper 3 bits
.244f	b1 22		lda ($22),y			lda 	(codePtr),y
.2451	29 07		and #$07			and 	#7
.2453	c8		iny				iny
.2454	c8		iny				iny
.2455	06 28		asl $28				asl 	zTemp0 						; shift zTemp0:A left
.2457	2a		rol a				rol 	a 							; carry will be clear.
.2458	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.245b	85 29		sta $29				sta 	zTemp0+1
.245d	20 63 24	jsr $2463			jsr 	WriteIntegerZTemp0Sub
.2460	4c 2f 10	jmp $102f			jmp 	NextCommand
.2463					WriteIntegerZTemp0Sub:
.2463	20 5a 2a	jsr $2a5a			jsr 	FloatIntegerPart
.2466	5a		phy				phy 								; start write
.2467	a0 01		ldy #$01			ldy 	#1
.2469	b5 34		lda $34,x			lda 	NSStatus,x 					; negate 2's comp if -ve
.246b	30 0b		bmi $2478			bmi 	_WIZNegative
.246d	b5 40		lda $40,x			lda 	NSMantissa0,x 				; +ve write
.246f	92 28		sta ($28)			sta 	(zTemp0)
.2471	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.2473	91 28		sta ($28),y			sta 	(zTemp0),y
.2475	7a		ply				ply
.2476	ca		dex				dex
.2477	60		rts				rts
.2478					_WIZNegative:
.2478	38		sec				sec 								; -ve read
.2479	a9 00		lda #$00			lda 	#0
.247b	f5 40		sbc $40,x			sbc 	NSMantissa0,x
.247d	92 28		sta ($28)			sta 	(zTemp0)
.247f	a9 00		lda #$00			lda 	#0
.2481	f5 4c		sbc $4c,x			sbc 	NSMantissa1,x
.2483	91 28		sta ($28),y			sta 	(zTemp0),y
.2485	7a		ply				ply
.2486	ca		dex				dex
.2487	60		rts				rts
.2488					WriteStringCommand:
.2488	fa		plx				plx
.2489	b1 22		lda ($22),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.248b	85 28		sta $28				sta 	zTemp0 						; save in MSB
.248d	88		dey				dey 								; get the upper 3 bits
.248e	b1 22		lda ($22),y			lda 	(codePtr),y
.2490	29 07		and #$07			and 	#7
.2492	c8		iny				iny
.2493	c8		iny				iny
.2494	06 28		asl $28				asl 	zTemp0 						; shift zTemp0:A left
.2496	2a		rol a				rol 	a 							; carry will be clear.
.2497	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.249a	85 29		sta $29				sta 	zTemp0+1
.249c	20 a2 24	jsr $24a2			jsr 	WriteStringZTemp0Sub
.249f	4c 2f 10	jmp $102f			jmp 	NextCommand
.24a2					WriteStringZTemp0Sub:
.24a2	5a		phy				phy
.24a3	a0 01		ldy #$01			ldy 	#1 							; if it is zero we must concrete whatever.
.24a5	b2 28		lda ($28)			lda 	(zTemp0)
.24a7	11 28		ora ($28),y			ora 	(zTemp0),y
.24a9	f0 1e		beq $24c9			beq 	_WSConcrete
.24ab	b2 28		lda ($28)			lda 	(zTemp0) 					; put address of actual string in zTemp1
.24ad	85 2a		sta $2a				sta 	zTemp1
.24af	b1 28		lda ($28),y			lda 	(zTemp0),y
.24b1	85 2b		sta $2b				sta 	zTemp1+1
.24b3	b5 40		lda $40,x			lda 	NSMantissa0,x 				; copy source to zTemp2
.24b5	85 2c		sta $2c				sta 	zTemp2
.24b7	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.24b9	85 2d		sta $2d				sta 	zTemp2+1
.24bb	b2 2a		lda ($2a)			lda 	(zTemp1) 					; space available
.24bd	d2 2c		cmp ($2c)			cmp 	(zTemp2) 					; if >= required length then copy
.24bf	b0 17		bcs $24d8			bcs 	_WSCopy
.24c1	a0 01		ldy #$01			ldy 	#1 							; set the 'available for reclaim' flag
.24c3	b1 2a		lda ($2a),y			lda 	(zTemp1),y
.24c5	09 80		ora #$80			ora 	#$80
.24c7	91 2a		sta ($2a),y			sta 	(zTemp1),y
.24c9					_WSConcrete:
.24c9	b5 4c		lda $4c,x			lda 	NSMantissa1,x 				; string in YA
.24cb	a8		tay				tay
.24cc	b5 40		lda $40,x			lda 	NSMantissa0,x
.24ce	20 db 12	jsr $12db			jsr 	StringConcrete
.24d1	92 28		sta ($28)			sta 	(zTemp0) 					; save returned address
.24d3	98		tya				tya
.24d4	a0 01		ldy #$01			ldy 	#1
.24d6	91 28		sta ($28),y			sta 	(zTemp0),y
.24d8					_WSCopy
.24d8	18		clc				clc  								; copy target+2 to zTemp2
.24d9	b2 28		lda ($28)			lda 	(zTemp0)
.24db	69 02		adc #$02			adc 	#2
.24dd	85 2c		sta $2c				sta 	zTemp2
.24df	a0 01		ldy #$01			ldy 	#1
.24e1	b1 28		lda ($28),y			lda 	(zTemp0),y
.24e3	69 00		adc #$00			adc 	#0
.24e5	85 2d		sta $2d				sta 	zTemp2+1
.24e7	b5 40		lda $40,x			lda 	NSMantissa0,x 				; copy source to zTemp1
.24e9	85 2a		sta $2a				sta 	zTemp1
.24eb	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.24ed	85 2b		sta $2b				sta 	zTemp1+1
.24ef	b2 2a		lda ($2a)			lda 	(zTemp1) 					; length of string .. 0 inclusive
.24f1	a8		tay				tay
.24f2					_WSCopyLoop:
.24f2	b1 2a		lda ($2a),y			lda 	(zTemp1),y
.24f4	91 2c		sta ($2c),y			sta 	(zTemp2),y
.24f6	88		dey				dey
.24f7	c0 ff		cpy #$ff			cpy 	#$FF
.24f9	d0 f7		bne $24f2			bne 	_WSCopyLoop
.24fb	ca		dex				dex
.24fc	7a		ply				ply
.24fd	60		rts				rts
.24fe					CommandClose:
.24fe	fa		plx				plx
.24ff	20 86 19	jsr $1986			jsr 	GetInteger8Bit 				; channel to close
.2502	cd 5d 04	cmp $045d			cmp 	currentChannel 				; is it the current channel
.2505	d0 03		bne $250a			bne 	_CCNotCurrent
.2507	9c 5d 04	stz $045d			stz 	currentChannel 				; effectively disables CMD
.250a					_CCNotCurrent:
.250a	20 c3 ff	jsr $ffc3			jsr 	X16_CLOSE 					; close the file
.250d	4c 2f 10	jmp $102f			jmp 	NextCommand
.2510					CommandExit:
.2510	fa		plx				plx
.2511	86 28		stx $28				stx 	zTemp0 						; stack position.
.2513	4c ff ff	jmp $ffff			jmp 	$FFFF 						; exits the emulator.
.2516					CommandDebug:
.2516	fa		plx				plx
>2517	db						.byte 	$DB 						; causes a break in the emulator
.2518	4c 2f 10	jmp $102f			jmp 	NextCommand
.251b					XGetCharacterFromChannel:
.251b	da		phx				phx
.251c	5a		phy				phy
.251d	e0 00		cpx #$00			cpx 	#0 							; is it default
.251f	d0 05		bne $2526			bne 	_XGetChannel
.2521	20 cc ff	jsr $ffcc			jsr 	X16_CLRCHN 					; set default channel
.2524	80 08		bra $252e			bra 	_XGetChar
.2526					_XGetChannel:
.2526	20 c6 ff	jsr $ffc6			jsr 	X16_CHKIN					; CHKIN set channel
.2529	20 b7 ff	jsr $ffb7			jsr 	X16_READST 					; check okay
.252c	d0 06		bne $2534			bne 	_XGCError
.252e					_XGetChar:
.252e	20 e4 ff	jsr $ffe4			jsr 	X16_GETIN
.2531	7a		ply				ply
.2532	fa		plx				plx
.2533	60		rts				rts
.2534					_XGCError:
.2534	4c 9c 15	jmp $159c		jmp	ErrorV_channel
.2537					XGetHPos:
.2537	da		phx				phx
.2538	5a		phy				phy
.2539	38		sec				sec
.253a	20 f0 ff	jsr $fff0			jsr 	X16_PLOT
.253d	98		tya				tya
.253e	7a		ply				ply
.253f	fa		plx				plx
.2540	60		rts				rts
.2541					X16I2CPoke:
.2541	fa		plx				plx
.2542	5a		phy				phy
.2543	20 86 19	jsr $1986			jsr 	GetInteger8Bit 				; value
.2546	48		pha				pha
.2547	ca		dex				dex
.2548	20 86 19	jsr $1986			jsr 	GetInteger8Bit 				; register
.254b	48		pha				pha
.254c	ca		dex				dex
.254d	20 86 19	jsr $1986			jsr 	GetInteger8Bit 				; device
.2550	aa		tax				tax
.2551	7a		ply				ply
.2552	68		pla				pla
.2553	20 c9 fe	jsr $fec9			jsr 	X16_i2c_write_byte 			; write the byte out.
.2556	b0 06		bcs $255e			bcs 	X16I2CError
.2558	7a		ply				ply
.2559	a2 ff		ldx #$ff			ldx 	#$FF
.255b	4c 2f 10	jmp $102f			jmp 	NextCommand
.255e					X16I2CError:
.255e	4c 9c 15	jmp $159c		jmp	ErrorV_channel
.2561					X16I2CPeek:
.2561	fa		plx				plx
.2562	da		phx				phx
.2563	5a		phy				phy
.2564	20 86 19	jsr $1986			jsr 	GetInteger8Bit 				; register
.2567	48		pha				pha
.2568	ca		dex				dex
.2569	20 86 19	jsr $1986			jsr 	GetInteger8Bit 				; device
.256c	aa		tax				tax 								; X device
.256d	7a		ply				ply 								; Y register
.256e	20 c6 fe	jsr $fec6			jsr 	X16_i2c_read_byte 			; read I2C
.2571	b0 eb		bcs $255e			bcs 	X16I2CError
.2573	7a		ply				ply 								; restore Y/X
.2574	fa		plx				plx
.2575	ca		dex				dex 								; drop TOS (register)
.2576	20 21 2e	jsr $2e21			jsr 	FloatSetByte 				; write read value to TOS.
.2579	4c 2f 10	jmp $102f			jmp 	NextCommand
.257c					CommandOpen:
.257c	fa		plx				plx
.257d	a5 43		lda $43				lda 	NSMantissa0+3  				; point zTemp0 to string head, also in XY
.257f	85 28		sta $28				sta 	zTemp0
.2581	aa		tax				tax
.2582	a5 4f		lda $4f				lda 	NSMantissa1+3
.2584	85 29		sta $29				sta 	zTemp0+1
.2586	a8		tay				tay
.2587	e8		inx				inx 								; XY points to first character
.2588	d0 01		bne $258b			bne 	_CONoCarry
.258a	c8		iny				iny
.258b					_CONoCarry:
.258b	b2 28		lda ($28)			lda 	(zTemp0) 					; get length of filename
.258d	20 bd ff	jsr $ffbd			jsr 	X16_SETNAM
.2590	a5 40		lda $40				lda 	NSMantissa0+0
.2592	a6 41		ldx $41				ldx 	NSMantissa0+1
.2594	a4 42		ldy $42				ldy 	NSMantissa0+2
.2596	20 ba ff	jsr $ffba			jsr 	X16_SETLFS
.2599	20 c0 ff	jsr $ffc0			jsr 	X16_OPEN
.259c	b0 03		bcs $25a1			bcs 	_COError
.259e	4c 2f 10	jmp $102f			jmp 	NextCommand
.25a1					_COError:
.25a1	4c 9c 15	jmp $159c		jmp	ErrorV_channel
.25a4					XPokeMemory:
.25a4	86 28		stx $28				stx 	zTemp0
.25a6	84 29		sty $29				sty 	zTemp0+1
.25a8	a4 00		ldy $00				ldy 	SelectRAMBank 				; old RAM bank in Y
.25aa	ae 6b 05	ldx $056b			ldx 	ramBank 					; switch to BANKed RAMBank if not $FF
.25ad	e0 ff		cpx #$ff			cpx 	#$FF
.25af	f0 02		beq $25b3			beq 	_XPMNoSwitch
.25b1	86 00		stx $00				stx 	SelectRAMBank
.25b3					_XPMNoSwitch:
.25b3	92 28		sta ($28)			sta 	(zTemp0) 					; do the POKE
.25b5	84 00		sty $00				sty 	SelectRAMBank 				; reselect previous RAM Bank.
.25b7					_XPMExit:
.25b7	60		rts				rts
.25b8					XPeekMemory:
.25b8	86 28		stx $28				stx 	zTemp0
.25ba	84 29		sty $29				sty 	zTemp0+1
.25bc	a4 00		ldy $00				ldy 	SelectRAMBank 				; old RAM bank in Y
.25be	ae 6b 05	ldx $056b			ldx 	ramBank 					; switch to BANKed RAMBank if not $FF
.25c1	e0 ff		cpx #$ff			cpx 	#$FF
.25c3	f0 02		beq $25c7			beq 	_XPMNoSwitch
.25c5	86 00		stx $00				stx 	SelectRAMBank
.25c7					_XPMNoSwitch:
.25c7	b2 28		lda ($28)			lda 	(zTemp0) 					; do the PEEK
.25c9	84 00		sty $00				sty 	SelectRAMBank 				; reselect previous RAM bank.
.25cb	60		rts				rts
.25cc					CommandBank:
.25cc	fa		plx				plx
.25cd	a5 40		lda $40				lda 	NSMantissa0 				; RAM bank
.25cf	8d 6b 05	sta $056b			sta 	ramBank 					; store & make current
.25d2	85 00		sta $00				sta 	SelectRAMBank
.25d4	a5 41		lda $41				lda 	NSMantissa0+1 		 		; ROM specified
.25d6	c9 ff		cmp #$ff			cmp 	#$FF
.25d8	f0 03		beq $25dd			beq 	_CBNoUpdate
.25da	8d 6c 05	sta $056c			sta 	romBank 					; this doesn't set the hardware page.
.25dd					_CBNoUpdate:
.25dd	a2 ff		ldx #$ff			ldx 	#$FF
.25df	4c 2f 10	jmp $102f			jmp 	NextCommand
.056b					ramBank:
>056b							.fill 	1
.056c					romBank:
>056c							.fill 	1
.25e2					XPrintCharacterToChannel:
.25e2	48		pha				pha
.25e3	da		phx				phx
.25e4	5a		phy				phy
.25e5	48		pha				pha  								; save char
.25e6	e0 00		cpx #$00			cpx 	#0 							; check default (0)
.25e8	d0 05		bne $25ef			bne 	_XPCNotDefault
.25ea	20 cc ff	jsr $ffcc			jsr 	X16_CLRCHN					; set default channel
.25ed	80 08		bra $25f7			bra 	_XPCSend
.25ef					_XPCNotDefault:
.25ef	20 c9 ff	jsr $ffc9			jsr 	X16_CHKOUT 					; CHKOUT set channel
.25f2	20 b7 ff	jsr $ffb7			jsr 	X16_READST 					; check okay
.25f5	d0 08		bne $25ff			bne 	_XPCError
.25f7					_XPCSend:
.25f7	68		pla				pla 								; restore character
.25f8	20 d2 ff	jsr $ffd2			jsr 	X16_BSOUT 					; print
.25fb	7a		ply				ply
.25fc	fa		plx				plx
.25fd	68		pla				pla
.25fe	60		rts				rts
.25ff					_XPCError:
.25ff	4c 9c 15	jmp $159c		jmp	ErrorV_channel
.2602					XReadClock:
.2602	20 de ff	jsr $ffde			jsr 	X16_RDTIM
.2605	60		rts				rts
.2606					XWriteClock:
.2606	48		pha				pha
.2607	da		phx				phx
.2608	5a		phy				phy
.2609	20 db ff	jsr $ffdb			jsr 	X16_SETTIM
.260c	7a		ply				ply
.260d	fa		plx				plx
.260e	68		pla				pla
.260f	60		rts				rts
.2610					CommandScreen:
.2610	fa		plx				plx
.2611	da		phx				phx
.2612	5a		phy				phy
.2613	20 86 19	jsr $1986			jsr 	GetInteger8Bit
.2616	18		clc				clc
.2617	20 5f ff	jsr $ff5f			jsr 	X16_screen_mode
.261a	7a		ply				ply
.261b	fa		plx				plx
.261c	4c 2f 10	jmp $102f			jmp 	NextCommand
.261f					XCommandSleep:
.261f	fa		plx				plx
.2620	5a		phy				phy
.2621	20 5a 2a	jsr $2a5a			jsr 	FloatIntegerPart
.2624	ca		dex				dex
.2625	20 02 26	jsr $2602			jsr 	XReadClock 					; read clock to YXA
.2628	18		clc				clc 								; calculate end time in zTemp0
.2629	65 40		adc $40				adc 	NSMantissa0
.262b	85 28		sta $28				sta 	zTemp0
.262d	8a		txa				txa
.262e	65 4c		adc $4c				adc 	NSMantissa1
.2630	85 29		sta $29				sta 	zTemp0+1
.2632					_XCWait:
.2632	20 02 26	jsr $2602			jsr 	XReadClock 					; and wait for it.
.2635	c5 28		cmp $28				cmp 	zTemp0
.2637	d0 f9		bne $2632			bne 	_XCWait
.2639	e4 29		cpx $29				cpx 	zTemp0+1
.263b	d0 f5		bne $2632			bne 	_XCWait
.263d	a2 ff		ldx #$ff			ldx 	#$FF
.263f	7a		ply				ply
.2640	4c 2f 10	jmp $102f			jmp 	NextCommand
.2643					X16_Audio_FMINIT:
.2643	fa		plx				plx
.2644	5a		phy			phy
.2645	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>2648	63 c0					.word	X16A_ym_init
>264a	0a					.byte	X16_AudioCodeBank
.264b	a2 ff		ldx #$ff		ldx	#$FF
.264d	7a		ply			ply
.264e	4c 2f 10	jmp $102f			jmp 	NextCommand
.2651					X16_Audio_FMNOTE:
.2651	fa		plx				plx
.2652	5a		phy			phy
.2653	20 d6 11	jsr $11d6		jsr		X16_Audio_Parameters8_8
.2656	18		clc			clc
.2657	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>265a	03 c0					.word	X16A_bas_fmnote
>265c	0a					.byte	X16_AudioCodeBank
.265d	a2 ff		ldx #$ff		ldx	#$FF
.265f	7a		ply			ply
.2660	4c 2f 10	jmp $102f			jmp 	NextCommand
.2663					X16_Audio_FMDRUM:
.2663	fa		plx				plx
.2664	5a		phy			phy
.2665	20 d6 11	jsr $11d6		jsr		X16_Audio_Parameters8_8
.2668	18		clc			clc
.2669	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>266c	6f c0					.word	X16A_ym_playdrum
>266e	0a					.byte	X16_AudioCodeBank
.266f	a2 ff		ldx #$ff		ldx	#$FF
.2671	7a		ply			ply
.2672	4c 2f 10	jmp $102f			jmp 	NextCommand
.2675					X16_Audio_FMINST:
.2675	fa		plx				plx
.2676	5a		phy			phy
.2677	20 d6 11	jsr $11d6		jsr		X16_Audio_Parameters8_8
.267a	38		sec			sec
.267b	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>267e	69 c0					.word	X16A_ym_loadpatch
>2680	0a					.byte	X16_AudioCodeBank
.2681	a2 ff		ldx #$ff		ldx	#$FF
.2683	7a		ply			ply
.2684	4c 2f 10	jmp $102f			jmp 	NextCommand
.2687					X16_Audio_FMVIB:
.2687	fa		plx				plx
.2688	5a		phy			phy
.2689	20 d6 11	jsr $11d6		jsr		X16_Audio_Parameters8_8
.268c	18		clc			clc
.268d	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>2690	09 c0					.word	X16A_bas_fmvib
>2692	0a					.byte	X16_AudioCodeBank
.2693	a2 ff		ldx #$ff		ldx	#$FF
.2695	7a		ply			ply
.2696	4c 2f 10	jmp $102f			jmp 	NextCommand
.2699					X16_Audio_FMFREQ:
.2699	fa		plx				plx
.269a	5a		phy			phy
.269b	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_16
.269e	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>26a1	00 c0					.word	X16A_bas_fmfreq
>26a3	0a					.byte	X16_AudioCodeBank
.26a4	a2 ff		ldx #$ff		ldx	#$FF
.26a6	7a		ply			ply
.26a7	4c 2f 10	jmp $102f			jmp 	NextCommand
.26aa					X16_Audio_FMVOL:
.26aa	fa		plx				plx
.26ab	5a		phy			phy
.26ac	20 d6 11	jsr $11d6		jsr		X16_Audio_Parameters8_8
.26af	18		clc			clc
.26b0	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>26b3	75 c0					.word	X16A_ym_setatten
>26b5	0a					.byte	X16_AudioCodeBank
.26b6	a2 ff		ldx #$ff		ldx	#$FF
.26b8	7a		ply			ply
.26b9	4c 2f 10	jmp $102f			jmp 	NextCommand
.26bc					X16_Audio_FMPAN:
.26bc	fa		plx				plx
.26bd	5a		phy			phy
.26be	20 d6 11	jsr $11d6		jsr		X16_Audio_Parameters8_8
.26c1	18		clc			clc
.26c2	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>26c5	7e c0					.word	X16A_ym_setpan
>26c7	0a					.byte	X16_AudioCodeBank
.26c8	a2 ff		ldx #$ff		ldx	#$FF
.26ca	7a		ply			ply
.26cb	4c 2f 10	jmp $102f			jmp 	NextCommand
.26ce					X16_Audio_FMPLAY:
.26ce	fa		plx				plx
.26cf	5a		phy			phy
.26d0	20 e7 11	jsr $11e7		jsr		X16_Audio_Parameters8_String
.26d3	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>26d6	06 c0					.word	X16A_bas_fmplaystring
>26d8	0a					.byte	X16_AudioCodeBank
.26d9	a2 ff		ldx #$ff		ldx	#$FF
.26db	7a		ply			ply
.26dc	4c 2f 10	jmp $102f			jmp 	NextCommand
.26df					X16_Audio_FMCHORD:
.26df	fa		plx				plx
.26e0	5a		phy			phy
.26e1	20 e7 11	jsr $11e7		jsr		X16_Audio_Parameters8_String
.26e4	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>26e7	8d c0					.word	X16A_bas_fmchordstring
>26e9	0a					.byte	X16_AudioCodeBank
.26ea	a2 ff		ldx #$ff		ldx	#$FF
.26ec	7a		ply			ply
.26ed	4c 2f 10	jmp $102f			jmp 	NextCommand
.26f0					X16_Audio_FMPOKE:
.26f0	fa		plx				plx
.26f1	5a		phy			phy
.26f2	20 d6 11	jsr $11d6		jsr		X16_Audio_Parameters8_8
.26f5	18		clc			clc
.26f6	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>26f9	8a c0					.word	X16A_ym_write
>26fb	0a					.byte	X16_AudioCodeBank
.26fc	a2 ff		ldx #$ff		ldx	#$FF
.26fe	7a		ply			ply
.26ff	4c 2f 10	jmp $102f			jmp 	NextCommand
.2702					X16_Audio_PSGINIT:
.2702	fa		plx				plx
.2703	5a		phy			phy
.2704	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>2707	4b c0					.word	X16A_psg_init
>2709	0a					.byte	X16_AudioCodeBank
.270a	a2 ff		ldx #$ff		ldx	#$FF
.270c	7a		ply			ply
.270d	4c 2f 10	jmp $102f			jmp 	NextCommand
.2710					X16_Audio_PSGNOTE:
.2710	fa		plx				plx
.2711	5a		phy			phy
.2712	20 d6 11	jsr $11d6		jsr		X16_Audio_Parameters8_8
.2715	18		clc			clc
.2716	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>2719	12 c0					.word	X16A_bas_psgnote
>271b	0a					.byte	X16_AudioCodeBank
.271c	a2 ff		ldx #$ff		ldx	#$FF
.271e	7a		ply			ply
.271f	4c 2f 10	jmp $102f			jmp 	NextCommand
.2722					X16_Audio_PSGVOL:
.2722	fa		plx				plx
.2723	5a		phy			phy
.2724	20 d6 11	jsr $11d6		jsr		X16_Audio_Parameters8_8
.2727	18		clc			clc
.2728	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>272b	54 c0					.word	X16A_psg_setatten
>272d	0a					.byte	X16_AudioCodeBank
.272e	a2 ff		ldx #$ff		ldx	#$FF
.2730	7a		ply			ply
.2731	4c 2f 10	jmp $102f			jmp 	NextCommand
.2734					X16_Audio_PSGWAV:
.2734	fa		plx				plx
.2735	5a		phy			phy
.2736	20 d6 11	jsr $11d6		jsr		X16_Audio_Parameters8_8
.2739	18		clc			clc
.273a	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>273d	15 c0					.word	X16A_bas_psgwav
>273f	0a					.byte	X16_AudioCodeBank
.2740	a2 ff		ldx #$ff		ldx	#$FF
.2742	7a		ply			ply
.2743	4c 2f 10	jmp $102f			jmp 	NextCommand
.2746					X16_Audio_PSGFREQ:
.2746	fa		plx				plx
.2747	5a		phy			phy
.2748	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_16
.274b	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>274e	0f c0					.word	X16A_bas_psgfreq
>2750	0a					.byte	X16_AudioCodeBank
.2751	a2 ff		ldx #$ff		ldx	#$FF
.2753	7a		ply			ply
.2754	4c 2f 10	jmp $102f			jmp 	NextCommand
.2757					X16_Audio_PSGPAN:
.2757	fa		plx				plx
.2758	5a		phy			phy
.2759	20 d6 11	jsr $11d6		jsr		X16_Audio_Parameters8_8
.275c	18		clc			clc
.275d	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>2760	5a c0					.word	X16A_psg_setpan
>2762	0a					.byte	X16_AudioCodeBank
.2763	a2 ff		ldx #$ff		ldx	#$FF
.2765	7a		ply			ply
.2766	4c 2f 10	jmp $102f			jmp 	NextCommand
.2769					X16_Audio_PSGPLAY:
.2769	fa		plx				plx
.276a	5a		phy			phy
.276b	20 e7 11	jsr $11e7		jsr		X16_Audio_Parameters8_String
.276e	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>2771	18 c0					.word	X16A_bas_psgplaystring
>2773	0a					.byte	X16_AudioCodeBank
.2774	a2 ff		ldx #$ff		ldx	#$FF
.2776	7a		ply			ply
.2777	4c 2f 10	jmp $102f			jmp 	NextCommand
.277a					X16_Audio_PSGCHORD:
.277a	fa		plx				plx
.277b	5a		phy			phy
.277c	20 e7 11	jsr $11e7		jsr		X16_Audio_Parameters8_String
.277f	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>2782	90 c0					.word	X16A_bas_psgchordstring
>2784	0a					.byte	X16_AudioCodeBank
.2785	a2 ff		ldx #$ff		ldx	#$FF
.2787	7a		ply			ply
.2788	4c 2f 10	jmp $102f			jmp 	NextCommand
.278b					CommandCls:
.278b	fa		plx				plx
.278c	a9 93		lda #$93			lda 	#147
.278e	20 e2 25	jsr $25e2			jsr 	XPrintCharacterToChannel
.2791	4c 2f 10	jmp $102f			jmp 	NextCommand
.2794					CommandLocate:
.2794	fa		plx				plx
.2795	20 5a 2a	jsr $2a5a			jsr 	FloatIntegerPart
.2798	ca		dex				dex
.2799	20 5a 2a	jsr $2a5a			jsr 	FloatIntegerPart
.279c	ca		dex				dex
.279d	a9 13		lda #$13			lda 	#$13 						; home.
.279f	20 e2 25	jsr $25e2			jsr 	XPrintCharacterToChannel
.27a2	a9 1d		lda #$1d			lda 	#$1D 						; do cursor rights
.27a4	a6 40		ldx $40				ldx 	NSMantissa0
.27a6	20 b3 27	jsr $27b3			jsr 	_CLOutputXA
.27a9	a9 11		lda #$11			lda 	#$11 						; do cursor downs.
.27ab	a6 41		ldx $41				ldx 	NSMantissa0+1
.27ad	20 b3 27	jsr $27b3			jsr 	_CLOutputXA
.27b0	4c 2f 10	jmp $102f			jmp 	NextCommand
.27b3					_CLOutputXA:
.27b3	ca		dex				dex
.27b4	f0 07		beq $27bd			beq 	_CLOExit
.27b6	30 05		bmi $27bd			bmi 	_CLOExit
.27b8	20 e2 25	jsr $25e2			jsr 	XPrintCharacterToChannel
.27bb	80 f6		bra $27b3			bra 	_CLOutputXA
.27bd					_CLOExit:
.27bd	60		rts				rts
.27be					CommandColor:
.27be	fa		plx				plx
.27bf	20 5a 2a	jsr $2a5a			jsr 	FloatIntegerPart
.27c2	ca		dex				dex
.27c3	20 5a 2a	jsr $2a5a			jsr 	FloatIntegerPart
.27c6	ca		dex				dex
.27c7	a5 41		lda $41				lda 	NSMantissa0+1 				; bgr specified
.27c9	c9 ff		cmp #$ff			cmp 	#$FF
.27cb	f0 08		beq $27d5			beq 	_CCNoBGR 					; if so, change background
.27cd	20 dd 27	jsr $27dd			jsr 	_CCSetColour
.27d0	a9 01		lda #$01			lda 	#$01 						; swap FGR/BGR
.27d2	20 e2 25	jsr $25e2			jsr 	XPrintCharacterToChannel
.27d5					_CCNoBGR:
.27d5	a5 40		lda $40				lda 	NSMantissa0
.27d7	20 dd 27	jsr $27dd			jsr 	_CCSetColour
.27da	4c 2f 10	jmp $102f			jmp 	NextCommand
.27dd					_CCSetColour:
.27dd	29 0f		and #$0f			and 	#15 						; look up in control codes table.
.27df	aa		tax				tax
.27e0	bd e7 27	lda $27e7,x			lda 	_CCCommandTable,x
.27e3	20 e2 25	jsr $25e2			jsr 	XPrintCharacterToChannel
.27e6	60		rts				rts
.27e7					_CCCommandTable:
>27e7	90 05 1c 9f 9c 1e 1f 9e				.byte	 $90,$05,$1c,$9f,$9c,$1e,$1f,$9e
>27ef	81 95 96 97 98 99 9a 9b				.byte	 $81,$95,$96,$97,$98,$99,$9a,$9b
.27f7					CommandVPOKE:
.27f7	fa		plx				plx
.27f8	20 86 19	jsr $1986			jsr 	GetInteger8Bit 				; poke value
.27fb	48		pha				pha
.27fc	ca		dex				dex
.27fd	20 5a 2a	jsr $2a5a			jsr 	FloatIntegerPart
.2800	b5 40		lda $40,x			lda 	NSMantissa0,x
.2802	8d 20 9f	sta $9f20			sta 	VRAMLow0
.2805	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.2807	8d 21 9f	sta $9f21			sta 	VRAMMed0
.280a	ca		dex				dex
.280b	20 5a 2a	jsr $2a5a			jsr 	FloatIntegerPart
.280e	20 86 19	jsr $1986			jsr 	GetInteger8Bit
.2811	8d 22 9f	sta $9f22			sta 	VRAMHigh0
.2814	ca		dex				dex
.2815	68		pla				pla 								; poke value back
.2816	8d 23 9f	sta $9f23			sta 	VRAMData0					; and write it out.
.2819	4c 2f 10	jmp $102f			jmp 	NextCommand
.281c					CommandVPEEK:
.281c	fa		plx				plx
.281d	20 5a 2a	jsr $2a5a			jsr 	FloatIntegerPart
.2820	b5 40		lda $40,x			lda 	NSMantissa0,x
.2822	8d 20 9f	sta $9f20			sta 	VRAMLow0
.2825	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.2827	8d 21 9f	sta $9f21			sta 	VRAMMed0
.282a	ca		dex				dex
.282b	20 5a 2a	jsr $2a5a			jsr 	FloatIntegerPart
.282e	20 86 19	jsr $1986			jsr 	GetInteger8Bit
.2831	8d 22 9f	sta $9f22			sta 	VRAMHigh0
.2834	ad 23 9f	lda $9f23			lda 	VRAMData0					; read data
.2837	20 21 2e	jsr $2e21			jsr 	FloatSetByte 				; return as byte
.283a	4c 2f 10	jmp $102f			jmp 	NextCommand

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library

=12					MathStackSize = 12
=$40					NSSString = $40 							; string vs typemask
=$00					NSSIFloat = $00 							; ifloat vs typemask
=$20					NSSIInt16 = $20								; when set, a reference is a 16 bit reference (e.g. a%)
=$40					NSSTypeMask = $40
=$80					NSSArray = $80  							; array (in variable code)
.0034					NSStatus:
>0034							.fill 	MathStackSize
.0040					NSMantissa0:
>0040							.fill 	MathStackSize 				; (this is my integer mantissa system)
.004c					NSMantissa1:
>004c							.fill 	MathStackSize
.0058					NSMantissa2:
>0058							.fill 	MathStackSize
.0064					NSMantissa3:
>0064							.fill 	MathStackSize
.0070					NSExponent:
>0070							.fill 	MathStackSize
.056d					numberBuffer:
>056d							.fill 	34
.283d					FloatSubtract:
.283d	b5 34		lda $34,x			lda 	NSStatus,x 					; negate top of stack
.283f	49 80		eor #$80			eor 	#$80
.2841	95 34		sta $34,x			sta 	NSStatus,x					; and fall through.
.2843					FloatAdd:
.2843	ca		dex				dex
.2844	b5 70		lda $70,x			lda 	NSExponent,x 				; can use optimised.
.2846	15 71		ora $71,x			ora 	NSExponent+1,x
.2848	15 64		ora $64,x			ora 	NSMantissa3,x
.284a	15 65		ora $65,x			ora 	NSMantissa3+1,x
.284c	d0 04		bne $2852			bne 	_FAUseFloat
.284e	20 df 2b	jsr $2bdf			jsr 	FloatInt32Add 				; use the int32 one.
.2851	60		rts				rts
.2852					_FAUseFloat:
.2852	20 74 2b	jsr $2b74			jsr 	FloatNormalise 				; normalise S[X]
.2855	f0 51		beq $28a8			beq 	_FAReturn1
.2857	e8		inx				inx 								; normalise S[X+1]
.2858	20 74 2b	jsr $2b74			jsr 	FloatNormalise
.285b	ca		dex				dex
.285c	c9 00		cmp #$00			cmp 	#0
.285e	f0 60		beq $28c0			beq 	_FAExit 					; if so, just return A
.2860	b5 70		lda $70,x			lda 	NSExponent,x 				; are the exponents the same ?
.2862	d5 71		cmp $71,x			cmp 	NSExponent+1,x
.2864	f0 18		beq $287e			beq 	_FAExponentsEqual
.2866	b5 70		lda $70,x			lda 	NSExponent,x 				; work out the larger exponent
.2868	a8		tay				tay
.2869	38		sec				sec 								; do a signed comparison of the exponents.
.286a	f5 71		sbc $71,x			sbc 	NSExponent+1,x
.286c	50 02		bvc $2870			bvc 	_FANoSignedChange
.286e	49 80		eor #$80			eor 	#$80
.2870					_FANoSignedChange:
.2870	29 80		and #$80			and 	#$80
.2872	10 02		bpl $2876			bpl 	_FAHaveMax
.2874	b4 71		ldy $71,x			ldy 	NSExponent+1,x
.2876					_FAHaveMax:
.2876	20 c1 28	jsr $28c1			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.2879	e8		inx				inx
.287a	20 c1 28	jsr $28c1			jsr 	_FAShiftToExponent
.287d	ca		dex				dex
.287e					_FAExponentsEqual:
.287e	b5 34		lda $34,x			lda 	NSStatus,x 					; are the signs the same
.2880	55 35		eor $35,x			eor 	NSStatus+1,x
.2882	30 0e		bmi $2892			bmi 	_FADifferentSigns
.2884	20 ab 2b	jsr $2bab			jsr 	FloatAddTopTwoStack 		; do the add of the mantissae
.2887	b5 64		lda $64,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.2889	10 35		bpl $28c0			bpl 	_FAExit 					; if no, we are done.
.288b	20 38 2e	jsr $2e38			jsr 	FloatShiftRight 				; shift A right, renormalising it.
.288e	f6 70		inc $70,x			inc 	NSExponent,x 				; bump the exponent and exit
.2890	80 2e		bra $28c0			bra 	_FAExit
.2892					_FADifferentSigns:
.2892	20 c5 2b	jsr $2bc5			jsr 	FloatSubTopTwoStack 		; subtract mantissa B from A
.2895	b5 64		lda $64,x			lda 	NSMantissa3,x 				; is the result negative ?
.2897	10 06		bpl $289f			bpl 	_FACheckZero 				; if no, check for -0
.2899	20 e1 2d	jsr $2de1			jsr 	FloatNegate 					; netate result
.289c	20 e8 2d	jsr $2de8			jsr 	FloatNegateMantissa 			; negate (2'c) the mantissa
.289f					_FACheckZero:
.289f	20 41 2e	jsr $2e41			jsr 	FloatIsZero	 				; check for -0
.28a2	d0 1c		bne $28c0			bne 	_FAExit
.28a4	74 34		stz $34,x			stz 	NSStatus,x
.28a6	80 18		bra $28c0			bra 	_FAExit
.28a8					_FAReturn1:
.28a8	b5 41		lda $41,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.28aa	95 40		sta $40,x			sta 	NSMantissa0,x
.28ac	b5 4d		lda $4d,x			lda 	NSMantissa1+1,x
.28ae	95 4c		sta $4c,x			sta 	NSMantissa1,x
.28b0	b5 59		lda $59,x			lda 	NSMantissa2+1,x
.28b2	95 58		sta $58,x			sta 	NSMantissa2,x
.28b4	b5 65		lda $65,x			lda 	NSMantissa3+1,x
.28b6	95 64		sta $64,x			sta 	NSMantissa3,x
.28b8	b5 71		lda $71,x			lda 	NSExponent+1,x
.28ba	95 70		sta $70,x			sta 	NSExponent,x
.28bc	b5 35		lda $35,x			lda 	NSStatus+1,x
.28be	95 34		sta $34,x			sta 	NSStatus,x
.28c0					_FAExit:
.28c0	60		rts				rts
.28c1					_FAShiftToExponent:
.28c1					_FAShiftToExponent2:
.28c1	98		tya				tya 								; compare Y to exponent
.28c2	d5 70		cmp $70,x			cmp 	NSExponent,x 				; reached the exponent required ?
.28c4	f0 07		beq $28cd			beq 	_FASEExit 					; exit if so.
.28c6	20 38 2e	jsr $2e38			jsr 	FloatShiftRight	 			; shift the mantissa right
.28c9	f6 70		inc $70,x			inc 	NSExponent,x 				; increment exponent
.28cb	80 f4		bra $28c1			bra 	_FAShiftToExponent2
.28cd					_FASEExit:
.28cd	60		rts				rts
.28ce					CompareEqual:
.28ce	b5 40		lda $40,x			lda 	NSMantissa0,x
.28d0	d0 09		bne $28db			bne 	ReturnFalse
.28d2					ReturnTrue:
.28d2	a9 01		lda #$01			lda 	#1
.28d4	95 40		sta $40,x			sta 	NSMantissa0,x
.28d6	a9 80		lda #$80			lda 	#$80
.28d8	95 34		sta $34,x			sta 	NSStatus,x
.28da	60		rts				rts
.28db					ReturnFalse:
.28db	74 40		stz $40,x			stz 	NSMantissa0,x
.28dd	60		rts				rts
.28de					CompareNotEqual:
.28de	b5 40		lda $40,x			lda 	NSMantissa0,x
.28e0	d0 f0		bne $28d2			bne 	ReturnTrue
.28e2	80 f7		bra $28db			bra 	ReturnFalse
.28e4					CompareLess:
.28e4	b5 40		lda $40,x			lda 	NSMantissa0,x
.28e6	c9 ff		cmp #$ff			cmp 	#$FF
.28e8	f0 e8		beq $28d2			beq 	ReturnTrue
.28ea	80 ef		bra $28db			bra 	ReturnFalse
.28ec					CompareGreater:
.28ec	b5 40		lda $40,x			lda 	NSMantissa0,x
.28ee	c9 01		cmp #$01			cmp 	#$01
.28f0	f0 e0		beq $28d2			beq 	ReturnTrue
.28f2	80 e7		bra $28db			bra 	ReturnFalse
.28f4					CompareLessEqual:
.28f4	b5 40		lda $40,x			lda 	NSMantissa0,x
.28f6	c9 01		cmp #$01			cmp 	#$01
.28f8	d0 d8		bne $28d2			bne 	ReturnTrue
.28fa	80 df		bra $28db			bra 	ReturnFalse
.28fc					CompareGreaterEqual:
.28fc	b5 40		lda $40,x			lda 	NSMantissa0,x
.28fe	c9 ff		cmp #$ff			cmp 	#$FF
.2900	d0 d0		bne $28d2			bne 	ReturnTrue
.2902	80 d7		bra $28db			bra 	ReturnFalse
.2904					FloatCompare:
.2904	b5 70		lda $70,x			lda 	NSExponent,x 				; float comparison.
.2906	15 6f		ora $6f,x			ora 	NSExponent-1,x 				; integer if both integer.
.2908	48		pha				pha
.2909	20 3d 28	jsr $283d			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.290c	68		pla				pla
.290d	d0 0c		bne $291b			bne 	_FCCompareFloat
.290f	b5 40		lda $40,x			lda 	NSMantissa0,x
.2911	15 4c		ora $4c,x			ora 	NSMantissa1,x
.2913	15 58		ora $58,x			ora 	NSMantissa2,x
.2915	15 64		ora $64,x			ora 	NSMantissa3,x
.2917	f0 14		beq $292d			beq 	_FCExit 					; if zero, return zero
.2919	80 0a		bra $2925			bra 	_FCSign
.291b					_FCCompareFloat:
.291b	b5 4c		lda $4c,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.291d	29 f0		and #$f0			and 	#$F0
.291f	15 58		ora $58,x			ora 	NSMantissa2,x
.2921	15 64		ora $64,x			ora 	NSMantissa3,x
.2923	f0 08		beq $292d			beq 	_FCExit 					; zero, so approximately identical
.2925					_FCSign:
.2925	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.2927	34 34		bit $34,x			bit 	NSStatus,x
.2929	10 02		bpl $292d			bpl 	_FCExit
.292b					_FCNegative:
.292b	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.292d					_FCExit:
.292d	20 21 2e	jsr $2e21			jsr 	FloatSetByte 				; set the result 255,0,1
.2930	60		rts				rts
.2931					FloatScalarTable:
>2931	66 66 66 66				.dword $66666666 ; 0.1
>2935	de					.byte $de
>2936	1f 85 eb 51				.dword $51eb851f ; 0.01
>293a	db					.byte $db
>293b	4c 37 89 41				.dword $4189374c ; 0.001
>293f	d8					.byte $d8
>2940	ac 8b db 68				.dword $68db8bac ; 0.0001
>2944	d4					.byte $d4
>2945	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>2949	d1					.byte $d1
>294a	83 de 1b 43				.dword $431bde83 ; 1e-06
>294e	ce					.byte $ce
>294f	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>2953	ca					.byte $ca
>2954	89 3b e6 55				.dword $55e63b89 ; 1e-08
>2958	c7					.byte $c7
>2959	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>295d	c4					.byte $c4
>295e	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>2962	c0					.byte $c0
>2963	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>2967	bd					.byte $bd
.2968					FloatDivide:
.2968	48		pha				pha
.2969	20 74 2b	jsr $2b74			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.296c	ca		dex				dex
.296d	c9 00		cmp #$00			cmp 	#0
.296f	f0 1e		beq $298f			beq 	_FDZero
.2971	20 74 2b	jsr $2b74			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.2974	f0 16		beq $298c			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.2976	20 d7 29	jsr $29d7			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.2979	20 a4 29	jsr $29a4			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.297c	20 74 2b	jsr $2b74			jsr		FloatNormalise 				; renormalise
.297f	20 6a 2b	jsr $2b6a			jsr 	FloatCalculateSign 			; calculate result sign
.2982	b5 70		lda $70,x			lda 	NSExponent,x 				; calculate exponent
.2984	38		sec				sec
.2985	f5 71		sbc $71,x			sbc 	NSExponent+1,x
.2987	38		sec				sec
.2988	e9 1e		sbc #$1e			sbc 	#30
.298a	95 70		sta $70,x			sta 	NSExponent,x
.298c					_FDExit:
.298c	68		pla				pla
.298d	18		clc				clc
.298e	60		rts				rts
.298f					_FDZero:
.298f	68		pla				pla
.2990	38		sec				sec
.2991	60		rts				rts
.2992					DivideInt32:
.2992	20 5a 2a	jsr $2a5a			jsr 	FloatIntegerPart 			; make both integers
.2995	ca		dex				dex
.2996	20 5a 2a	jsr $2a5a			jsr 	FloatIntegerPart
.2999	20 b5 29	jsr $29b5			jsr 	Int32Divide 				; divide
.299c	20 a4 29	jsr $29a4			jsr 	NSMCopyPlusTwoToZero 		; copy result
.299f	20 6a 2b	jsr $2b6a			jsr 	FloatCalculateSign 			; calculate result sign
.29a2	18		clc				clc
.29a3	60		rts				rts
.29a4					NSMCopyPlusTwoToZero:
.29a4	b5 42		lda $42,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.29a6	95 40		sta $40,x			sta 	NSMantissa0,x
.29a8	b5 4e		lda $4e,x			lda 	NSMantissa1+2,x
.29aa	95 4c		sta $4c,x			sta 	NSMantissa1,x
.29ac	b5 5a		lda $5a,x			lda 	NSMantissa2+2,x
.29ae	95 58		sta $58,x			sta 	NSMantissa2,x
.29b0	b5 66		lda $66,x			lda 	NSMantissa3+2,x
.29b2	95 64		sta $64,x			sta 	NSMantissa3,x
.29b4	60		rts				rts
.29b5					Int32Divide:
.29b5	48		pha				pha 								; save AXY
.29b6	5a		phy				phy
.29b7	20 02 2e	jsr $2e02			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.29ba	20 1b 2e	jsr $2e1b			jsr 	FloatSetZeroMantissaOnly 	; set S[X] to zero
.29bd	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.29bf					_I32DivideLoop:
.29bf	e8		inx				inx
.29c0	e8		inx				inx
.29c1	20 2e 2e	jsr $2e2e			jsr 	FloatShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.29c4	ca		dex				dex
.29c5	ca		dex				dex
.29c6	20 2f 2e	jsr $2e2f			jsr 	FloatRotateLeft
.29c9	20 f5 29	jsr $29f5			jsr 	FloatDivideCheck 			; check if subtract possible
.29cc	90 02		bcc $29d0			bcc 	_I32DivideNoCarryIn
.29ce	f6 42		inc $42,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.29d0					_I32DivideNoCarryIn:
.29d0	88		dey				dey 								; loop round till division completed.
.29d1	d0 ec		bne $29bf			bne 	_I32DivideLoop
.29d3	7a		ply				ply 								; restore AXY and exit
.29d4	68		pla				pla
.29d5	18		clc				clc
.29d6	60		rts				rts
.29d7					Int32ShiftDivide:
.29d7	48		pha				pha 								; save AY
.29d8	5a		phy				phy
.29d9	e8		inx				inx 								; clear S[X+2]
.29da	e8		inx				inx
.29db	20 1f 2e	jsr $2e1f			jsr 	FloatSetZero
.29de	ca		dex				dex
.29df	ca		dex				dex
.29e0	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.29e2					_I32SDLoop:
.29e2	20 f5 29	jsr $29f5			jsr 	FloatDivideCheck 			; check if subtract possible
.29e5	e8		inx				inx
.29e6	e8		inx				inx
.29e7	20 2f 2e	jsr $2e2f			jsr 	FloatRotateLeft				; shift 64 bit FPA left, rotating carry in
.29ea	ca		dex				dex
.29eb	ca		dex				dex
.29ec	20 2f 2e	jsr $2e2f			jsr 	FloatRotateLeft
.29ef	88		dey				dey 	 							; do 31 times
.29f0	d0 f0		bne $29e2			bne 	_I32SDLoop
.29f2	7a		ply				ply 								; restore AY and exit
.29f3	68		pla				pla
.29f4	60		rts				rts
.29f5					FloatDivideCheck:
.29f5	20 c5 2b	jsr $2bc5			jsr 	FloatSubTopTwoStack 		; subtract Stack[X+1] from Stack[X+0]
.29f8	b0 04		bcs $29fe			bcs 	_DCSExit 					; if carry set, then could do, exit
.29fa	20 ab 2b	jsr $2bab			jsr 	FloatAddTopTwoStack 		; add it back in
.29fd	18		clc				clc 								; and return False
.29fe					_DCSExit:
.29fe	60		rts				rts
.29ff					FloatFractionalPart:
.29ff	5a		phy				phy
.2a00	b5 34		lda $34,x			lda 	NSStatus,x 					; take absolute value
.2a02	29 7f		and #$7f			and 	#$7F
.2a04	95 34		sta $34,x			sta 	NSStatus,x
.2a06	20 74 2b	jsr $2b74			jsr 	FloatNormalise
.2a09	b5 70		lda $70,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.2a0b	38		sec				sec
.2a0c	e9 e0		sbc #$e0			sbc 	#$E0
.2a0e	90 29		bcc $2a39			bcc 	_FFPExit 					; already fractional
.2a10	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.2a12	b0 22		bcs $2a36			bcs 	_FFPZero
.2a14	a8		tay				tay 								; put count to do in Y
.2a15	b5 64		lda $64,x			lda 	NSMantissa3,x 				; do each in turn.
.2a17	20 3e 2a	jsr $2a3e			jsr 	_FFPPartial
.2a1a	95 64		sta $64,x			sta 	NSMantissa3,x
.2a1c	b5 58		lda $58,x			lda 	NSMantissa2,x
.2a1e	20 3e 2a	jsr $2a3e			jsr 	_FFPPartial
.2a21	95 58		sta $58,x			sta 	NSMantissa2,x
.2a23	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.2a25	20 3e 2a	jsr $2a3e			jsr 	_FFPPartial
.2a28	95 4c		sta $4c,x			sta 	NSMantissa1,x
.2a2a	b5 40		lda $40,x			lda 	NSMantissa0,x
.2a2c	20 3e 2a	jsr $2a3e			jsr 	_FFPPartial
.2a2f	95 40		sta $40,x			sta 	NSMantissa0,x
.2a31	20 41 2e	jsr $2e41			jsr 	FloatIsZero 					; zeroed check.
.2a34	d0 03		bne $2a39			bne 	_FFPExit
.2a36					_FFPZero:
.2a36	20 1f 2e	jsr $2e1f			jsr 	FloatSetZero
.2a39					_FFPExit:
.2a39	20 74 2b	jsr $2b74			jsr 	FloatNormalise
.2a3c	7a		ply				ply
.2a3d	60		rts				rts
.2a3e					_FFPPartial:
.2a3e	c0 00		cpy #$00			cpy 	#0 							; no more to do
.2a40	f0 17		beq $2a59			beq 	_FFFPPExit
.2a42	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.2a44	b0 0c		bcs $2a52			bcs 	_FFFPPWholeByte
.2a46	5a		phy				phy
.2a47					_FFFPPLeft:
.2a47	0a		asl a				asl 	a
.2a48	88		dey				dey
.2a49	d0 fc		bne $2a47			bne 	_FFFPPLeft
.2a4b	7a		ply				ply
.2a4c					_FFFPPRight:
.2a4c	4a		lsr a				lsr 	a
.2a4d	88		dey				dey
.2a4e	d0 fc		bne $2a4c			bne 	_FFFPPRight
.2a50	80 07		bra $2a59			bra 	_FFFPPExit
.2a52					_FFFPPWholeByte:
.2a52	98		tya				tya 								; subtract 8 from count
.2a53	38		sec				sec
.2a54	e9 08		sbc #$08			sbc 	#8
.2a56	a8		tay				tay
.2a57	a9 00		lda #$00			lda 	#0 							; and clear all
.2a59					_FFFPPExit:
.2a59	60		rts				rts
.2a5a					FloatIntegerPart:
.2a5a	48		pha				pha
.2a5b	b5 70		lda $70,x			lda 	NSExponent,x 				; is it integer already ?
.2a5d	f0 1d		beq $2a7c			beq 	_FIPExit 					; if so do nothing
.2a5f	20 41 2e	jsr $2e41			jsr 	FloatIsZero 				; is it zero ?
.2a62	f0 15		beq $2a79			beq 	_FIPZero 					; if so return zero.
.2a64	20 74 2b	jsr $2b74			jsr 	FloatNormalise 				; normalise
.2a67	f0 10		beq $2a79			beq 	_FIPZero 					; normalised to zero, exit zero
.2a69					_FIPShift:
.2a69	b5 70		lda $70,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.2a6b	10 07		bpl $2a74			bpl 	_FIPCheckZero
.2a6d	20 38 2e	jsr $2e38			jsr 	FloatShiftRight 			; shift mantissa right
.2a70	f6 70		inc $70,x			inc 	NSExponent,x 				; bump exponent
.2a72	80 f5		bra $2a69			bra 	_FIPShift
.2a74					_FIPCheckZero:
.2a74	20 41 2e	jsr $2e41			jsr 	FloatIsZero 				; avoid -0 problem
.2a77	d0 03		bne $2a7c			bne 	_FIPExit 					; set to zero if mantissa zero.
.2a79					_FIPZero:
.2a79	20 1f 2e	jsr $2e1f			jsr 	FloatSetZero
.2a7c					_FIPExit:
.2a7c	68		pla				pla
.2a7d	60		rts				rts
.2a7e					FloatIntegerPartDown:
.2a7e	48		pha				pha
.2a7f	5a		phy				phy
.2a80	b5 70		lda $70,x			lda 	NSExponent,x 				; is it integer already ?
.2a82	f0 36		beq $2aba			beq 	_FIPExit 					; if so do nothing
.2a84	20 41 2e	jsr $2e41			jsr 	FloatIsZero 				; is it zero ?
.2a87	f0 2e		beq $2ab7			beq 	_FIPZero 					; if so return zero.
.2a89	20 74 2b	jsr $2b74			jsr 	FloatNormalise 				; normalise
.2a8c	f0 29		beq $2ab7			beq 	_FIPZero 					; normalised to zero, exit zero
.2a8e	a0 00		ldy #$00			ldy 	#0 							; reset the count of bits.
.2a90					_FIPShift:
.2a90	b5 70		lda $70,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.2a92	10 0a		bpl $2a9e			bpl 	_FIPCheckDown
.2a94	20 38 2e	jsr $2e38			jsr 	FloatShiftRight 			; shift mantissa right
.2a97	90 01		bcc $2a9a			bcc 	_FIPNoFrac 					; shifted a zero out ?
.2a99	c8		iny				iny
.2a9a					_FIPNoFrac:
.2a9a	f6 70		inc $70,x			inc 	NSExponent,x 				; bump exponent
.2a9c	80 f2		bra $2a90			bra 	_FIPShift
.2a9e					_FIPCheckDown:
.2a9e	c0 00		cpy #$00			cpy 	#0 							; were there any fractional bits.
.2aa0	f0 10		beq $2ab2			beq 	_FIPCheckZero
.2aa2	34 34		bit $34,x			bit 	NSStatus,x 					; +ve
.2aa4	10 0c		bpl $2ab2			bpl 	_FIPCheckZero
.2aa6	e8		inx				inx 								; -ve so round *down*.
.2aa7	a9 01		lda #$01			lda 	#1
.2aa9	20 21 2e	jsr $2e21			jsr 	FloatSetByte
.2aac	20 e1 2d	jsr $2de1			jsr 	FloatNegate
.2aaf	20 43 28	jsr $2843			jsr 	FloatAdd
.2ab2					_FIPCheckZero:
.2ab2	20 41 2e	jsr $2e41			jsr 	FloatIsZero 				; avoid -0 problem
.2ab5	d0 03		bne $2aba			bne 	_FIPExit 					; set to zero if mantissa zero.
.2ab7					_FIPZero:
.2ab7	20 1f 2e	jsr $2e1f			jsr 	FloatSetZero
.2aba					_FIPExit:
.2aba	7a		ply				ply
.2abb	68		pla				pla
.2abc	60		rts				rts
.2abd					FloatInt8Multiply:
.2abd	5a		phy				phy
.2abe	b5 40		lda $40,x			lda 	NSMantissa0,x 				; right shifted multiplier in Y
.2ac0	a8		tay				tay
.2ac1	74 40		stz $40,x			stz 	NSMantissa0,x 				; zero the result (already 8 bit constant)
.2ac3					_FI8MLoop:
.2ac3	98		tya				tya 								; shift right shifter right into carry
.2ac4	4a		lsr a				lsr 	a
.2ac5	a8		tay				tay
.2ac6	90 0d		bcc $2ad5			bcc 	_FI8MNoAdd
.2ac8	18		clc				clc
.2ac9	b5 40		lda $40,x			lda 	NSMantissa0,x
.2acb	75 41		adc $41,x			adc 	NSMantissa0+1,x
.2acd	95 40		sta $40,x			sta 	NSMantissa0,x
.2acf	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.2ad1	75 4d		adc $4d,x			adc 	NSMantissa1+1,x
.2ad3	95 4c		sta $4c,x			sta 	NSMantissa1,x
.2ad5					_FI8MNoAdd:
.2ad5	16 41		asl $41,x			asl 	NSMantissa0+1,x 			; shift adder left
.2ad7	36 4d		rol $4d,x			rol 	NSMantissa1+1,x
.2ad9	c0 00		cpy #$00			cpy 	#0
.2adb	d0 e6		bne $2ac3			bne 	_FI8MLoop 					; until right shifter zero.
.2add	7a		ply				ply
.2ade	60		rts				rts
.2adf					FloatMultiply:
.2adf	ca		dex				dex
.2ae0	b5 70		lda $70,x			lda 	NSExponent,x 				; can use optimised ?
.2ae2	15 71		ora $71,x			ora 	NSExponent+1,x
.2ae4	15 64		ora $64,x			ora 	NSMantissa3,x
.2ae6	15 65		ora $65,x			ora 	NSMantissa3+1,x
.2ae8	d0 21		bne $2b0b			bne 	_FMUseFloat
.2aea	b5 34		lda $34,x			lda 	NSStatus,x 					; check if it is 8 bit unsigned
.2aec	15 35		ora $35,x			ora 	NSStatus+1,x
.2aee	29 80		and #$80			and 	#$80
.2af0	15 64		ora $64,x			ora 	NSMantissa3,x
.2af2	15 58		ora $58,x			ora 	NSMantissa2,x
.2af4	15 4c		ora $4c,x			ora 	NSMantissa1,x
.2af6	15 65		ora $65,x			ora 	NSMantissa3+1,x
.2af8	15 59		ora $59,x			ora 	NSMantissa2+1,x
.2afa	15 4d		ora $4d,x			ora 	NSMantissa1+1,x
.2afc	d0 04		bne $2b02			bne 	_FMInt32
.2afe	20 bd 2a	jsr $2abd			jsr 	FloatInt8Multiply 			; use fast 8x8 multiply.
.2b01	60		rts				rts
.2b02					_FMInt32:
.2b02	20 2c 2b	jsr $2b2c			jsr 	FloatMultiplyShort			; use the int32 one.
.2b05	18		clc				clc 								; fix it up if gone out of range
.2b06	75 70		adc $70,x			adc 	NSExponent,x
.2b08	95 70		sta $70,x			sta 	NSExponent,x
.2b0a	60		rts				rts
.2b0b					_FMUseFloat:
.2b0b	20 74 2b	jsr $2b74			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.2b0e	f0 18		beq $2b28			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.2b10	e8		inx				inx
.2b11	20 74 2b	jsr $2b74			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.2b14	ca		dex				dex
.2b15	c9 00		cmp #$00			cmp 	#0
.2b17	f0 0c		beq $2b25			beq 	_FDSetZero
.2b19	20 2c 2b	jsr $2b2c			jsr 	FloatMultiplyShort 			; calculate the result.
.2b1c	75 70		adc $70,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.2b1e	18		clc				clc
.2b1f	75 71		adc $71,x			adc 	NSExponent+1,x
.2b21	95 70		sta $70,x			sta 	NSExponent,x
.2b23	80 03		bra $2b28			bra 	_FDExit
.2b25					_FDSetZero:
.2b25	20 1f 2e	jsr $2e1f			jsr 	FloatSetZero 				; return 0
.2b28					_FDExit:
.2b28	20 74 2b	jsr $2b74			jsr 	FloatNormalise 				; normalise the result
.2b2b	60		rts				rts
.2b2c					FloatMultiplyShort:
.2b2c	5a		phy				phy 								; save Y
.2b2d	20 02 2e	jsr $2e02			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.2b30	20 1b 2e	jsr $2e1b			jsr 	FloatSetZeroMantissaOnly 	; set mantissa S[X] to zero
.2b33	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.2b35					_I32MLoop:
.2b35	b5 42		lda $42,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.2b37	15 4e		ora $4e,x			ora 	NSMantissa1+2,x
.2b39	15 5a		ora $5a,x			ora 	NSMantissa2+2,x
.2b3b	15 66		ora $66,x			ora 	NSMantissa3+2,x
.2b3d	f0 25		beq $2b64			beq 	_I32MExit 					; exit if zero
.2b3f	b5 42		lda $42,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.2b41	29 01		and #$01			and 	#1
.2b43	f0 0d		beq $2b52			beq 	_I32MNoAdd
.2b45	20 ab 2b	jsr $2bab			jsr 	FloatAddTopTwoStack 		; if so add S[X+1] to S[X+0]
.2b48	b5 64		lda $64,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.2b4a	10 06		bpl $2b52			bpl 	_I32MNoAdd
.2b4c					_I32ShiftRight:
.2b4c	20 38 2e	jsr $2e38			jsr 	FloatShiftRight 			; shift S[X] right
.2b4f	c8		iny				iny 								; increment shift count
.2b50	80 09		bra $2b5b			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.2b52					_I32MNoAdd:
.2b52	34 65		bit $65,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.2b54	70 f6		bvs $2b4c			bvs 	_I32ShiftRight 				; instead.
.2b56	e8		inx				inx
.2b57	20 2e 2e	jsr $2e2e			jsr 	FloatShiftLeft 				; shift additive S[X+1] left
.2b5a	ca		dex				dex
.2b5b					_I32MShiftUpper:
.2b5b	e8		inx				inx 								; shift S[X+2] right
.2b5c	e8		inx				inx
.2b5d	20 38 2e	jsr $2e38			jsr 	FloatShiftRight
.2b60	ca		dex				dex
.2b61	ca		dex				dex
.2b62	80 d1		bra $2b35			bra 	_I32MLoop 					; try again.
.2b64					_I32MExit:
.2b64	20 6a 2b	jsr $2b6a			jsr 	FloatCalculateSign
.2b67	98		tya				tya 								; shift in A
.2b68	7a		ply				ply 								; restore Y and exit
.2b69	60		rts				rts
.2b6a					FloatCalculateSign:
.2b6a	b5 34		lda $34,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.2b6c	16 34		asl $34,x			asl 	NSStatus,x 					; shift result left
.2b6e	55 35		eor $35,x			eor 	NSStatus+1,x
.2b70	0a		asl a				asl 	a 							; shift bit 7 into carry
.2b71	76 34		ror $34,x			ror 	NSStatus,x 					; shift right into status byte.
.2b73	60		rts				rts
.2b74					FloatNormalise:
.2b74	20 41 2e	jsr $2e41			jsr 	FloatIsZero 				; if zero exit
.2b77	d0 07		bne $2b80			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.2b79	16 34		asl $34,x			asl 	NSStatus,x 					; clear the sign bit.
.2b7b	76 34		ror $34,x			ror 	NSStatus,x 					; (no -0)
.2b7d	a9 00		lda #$00			lda 	#0 							; set Z flag
.2b7f	60		rts				rts
.2b80					_NSNormaliseOptimise:
.2b80	b5 64		lda $64,x			lda 	NSMantissa3,x 				; upper byte zero ?
.2b82	d0 19		bne $2b9d			bne 	_NSNormaliseLoop
.2b84	b5 58		lda $58,x			lda 	NSMantissa2,x 				; byte normalise
.2b86	30 15		bmi $2b9d			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.2b88	95 64		sta $64,x			sta 	NSMantissa3,x
.2b8a	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.2b8c	95 58		sta $58,x			sta 	NSMantissa2,x
.2b8e	b5 40		lda $40,x			lda 	NSMantissa0,x
.2b90	95 4c		sta $4c,x			sta 	NSMantissa1,x
.2b92	74 40		stz $40,x			stz 	NSMantissa0,x
.2b94	b5 70		lda $70,x			lda 	NSExponent,x
.2b96	38		sec				sec
.2b97	e9 08		sbc #$08			sbc 	#8
.2b99	95 70		sta $70,x			sta 	NSExponent,x
.2b9b	80 e3		bra $2b80			bra 	_NSNormaliseOptimise
.2b9d					_NSNormaliseLoop:
.2b9d	34 64		bit $64,x			bit 	NSMantissa3,x 				; bit 30 set ?
.2b9f	70 07		bvs $2ba8			bvs 	_NSNExit 					; exit if so with Z flag clear
.2ba1	20 2e 2e	jsr $2e2e			jsr 	FloatShiftLeft 				; shift mantissa left
.2ba4	d6 70		dec $70,x			dec 	NSExponent,x 				; adjust exponent
.2ba6	80 f5		bra $2b9d			bra 	_NSNormaliseLoop
.2ba8					_NSNExit:
.2ba8	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.2baa	60		rts				rts
.2bab					FloatAddTopTwoStack:
.2bab	18		clc				clc
.2bac	b5 40		lda $40,x			lda		NSMantissa0,x
.2bae	75 41		adc $41,x			adc 		NSMantissa0+1,x
.2bb0	95 40		sta $40,x			sta 	NSMantissa0,x
.2bb2	b5 4c		lda $4c,x			lda		NSMantissa1,x
.2bb4	75 4d		adc $4d,x			adc 		NSMantissa1+1,x
.2bb6	95 4c		sta $4c,x			sta 	NSMantissa1,x
.2bb8	b5 58		lda $58,x			lda		NSMantissa2,x
.2bba	75 59		adc $59,x			adc 		NSMantissa2+1,x
.2bbc	95 58		sta $58,x			sta 	NSMantissa2,x
.2bbe	b5 64		lda $64,x			lda		NSMantissa3,x
.2bc0	75 65		adc $65,x			adc 		NSMantissa3+1,x
.2bc2	95 64		sta $64,x			sta 	NSMantissa3,x
.2bc4	60		rts				rts
.2bc5					FloatSubTopTwoStack:
.2bc5	38		sec				sec
.2bc6	b5 40		lda $40,x			lda		NSMantissa0,x
.2bc8	f5 41		sbc $41,x			sbc 		NSMantissa0+1,x
.2bca	95 40		sta $40,x			sta 	NSMantissa0,x
.2bcc	b5 4c		lda $4c,x			lda		NSMantissa1,x
.2bce	f5 4d		sbc $4d,x			sbc 		NSMantissa1+1,x
.2bd0	95 4c		sta $4c,x			sta 	NSMantissa1,x
.2bd2	b5 58		lda $58,x			lda		NSMantissa2,x
.2bd4	f5 59		sbc $59,x			sbc 		NSMantissa2+1,x
.2bd6	95 58		sta $58,x			sta 	NSMantissa2,x
.2bd8	b5 64		lda $64,x			lda		NSMantissa3,x
.2bda	f5 65		sbc $65,x			sbc 		NSMantissa3+1,x
.2bdc	95 64		sta $64,x			sta 	NSMantissa3,x
.2bde	60		rts				rts
.2bdf					FloatInt32Add:
.2bdf	b5 34		lda $34,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.2be1	55 35		eor $35,x			eor 	NSStatus+1,x
.2be3	30 04		bmi $2be9			bmi 	_DiffSigns
.2be5	20 ab 2b	jsr $2bab			jsr		FloatAddTopTwoStack
.2be8	60		rts				rts
.2be9					_DiffSigns:
.2be9	20 c5 2b	jsr $2bc5			jsr 	FloatSubTopTwoStack 		; do a physical subtraction
.2bec	34 64		bit $64,x			bit 	NSMantissa3,x 				; result is +ve, okay
.2bee	10 07		bpl $2bf7			bpl 	_AddExit
.2bf0	b5 35		lda $35,x			lda 	NSStatus+1,x 				; sign is that of 11th value
.2bf2	95 34		sta $34,x			sta 	NSStatus,x
.2bf4	20 e8 2d	jsr $2de8			jsr 	FloatNegateMantissa 		; negate the mantissa and exit
.2bf7					_AddExit:
.2bf7	20 41 2e	jsr $2e41			jsr 	FloatIsZero 				; check for -0
.2bfa	d0 02		bne $2bfe			bne 	_AddNonZero
.2bfc	74 34		stz $34,x			stz 	NSStatus,x
.2bfe					_AddNonZero:
.2bfe	60		rts				rts
=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.2bff					FloatEncodeStart:
.2bff	38		sec				sec
.2c00	80 01		bra $2c03			bra 	FloatEncodeContinue+1
.2c02					FloatEncodeContinue:
.2c02	18		clc				clc
.2c03					FloatEncode:
.2c03	08		php				php 								; save reset flag.
.2c04	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.2c06	f0 15		beq $2c1d			beq 	_ENIsOkay
.2c08	c9 30		cmp #$30			cmp 	#"0"
.2c0a	90 04		bcc $2c10			bcc 	_ENBadNumber
.2c0c	c9 3a		cmp #$3a			cmp 	#"9"+1
.2c0e	90 0d		bcc $2c1d			bcc 	_ENIsOkay
.2c10					_ENBadNumber:
.2c10	28		plp				plp 								; throw saved reset
.2c11	ad 8f 05	lda $058f			lda 	encodeState 				; if in decimal mode, construct final number
.2c14	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.2c16	d0 03		bne $2c1b			bne 	_ENFail
.2c18	4c 95 2c	jmp $2c95			jmp 	_ENConstructFinal
.2c1b					_ENFail:
.2c1b	18		clc				clc 								; not allowed
.2c1c	60		rts				rts
.2c1d					_ENIsOkay:
.2c1d	28		plp				plp 								; are we restarting
.2c1e	90 15		bcc $2c35			bcc 	_ENNoRestart
.2c20					_ENStartEncode:
.2c20	c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.2c22	f0 0c		beq $2c30			beq 	_ENFirstDP
.2c24	29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.2c26	20 21 2e	jsr $2e21			jsr 	FloatSetByte 				; in single byte mode.
.2c29	a9 01		lda #$01			lda 	#ESTA_Low
.2c2b					_ENExitChange:
.2c2b	8d 8f 05	sta $058f			sta 	encodeState 				; save new state
.2c2e	38		sec				sec
.2c2f	60		rts				rts
.2c30					_ENFirstDP:
.2c30	20 1f 2e	jsr $2e1f			jsr 	FloatSetZero 				; clear integer part
.2c33	80 3c		bra $2c71			bra 	_ESTASwitchFloat			; go straight to float and exi
.2c35					_ENNoRestart:
.2c35	48		pha				pha 								; save digit or DP on stack.
.2c36	ad 8f 05	lda $058f			lda 	encodeState 				; get current state
.2c39	c9 01		cmp #$01			cmp 	#ESTA_Low
.2c3b	f0 09		beq $2c46			beq  	_ESTALowState
.2c3d	c9 02		cmp #$02			cmp 	#ESTA_High
.2c3f	f0 26		beq $2c67			beq 	_ESTAHighState
.2c41	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.2c43	f0 38		beq $2c7d			beq 	_ESTADecimalState
>2c45	db						.byte 	$DB 						; causes a break in the emulator
.2c46					_ESTALowState:
.2c46	68		pla				pla 								; get value back
.2c47	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.2c49	f0 26		beq $2c71			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.2c4b	29 0f		and #$0f			and 	#15 						; make digit
.2c4d	8d 90 05	sta $0590			sta 	digitTemp 					; save it.
.2c50	b5 40		lda $40,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.2c52	0a		asl a				asl 	a
.2c53	0a		asl a				asl 	a
.2c54	75 40		adc $40,x			adc 	NSMantissa0,x
.2c56	0a		asl a				asl 	a
.2c57	6d 90 05	adc $0590			adc 	digitTemp
.2c5a	95 40		sta $40,x			sta 	NSMantissa0,x
.2c5c	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.2c5e	90 05		bcc $2c65			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.2c60	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.2c62	8d 8f 05	sta $058f			sta 	encodeState
.2c65					_ESTANoSwitch:
.2c65	38		sec				sec
.2c66	60		rts				rts
.2c67					_ESTAHighState:
.2c67	68		pla				pla 								; get value back
.2c68	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.2c6a	f0 05		beq $2c71			beq 	_ESTASwitchFloat
.2c6c	20 c7 2c	jsr $2cc7			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.2c6f	38		sec				sec
.2c70	60		rts				rts
.2c71					_ESTASwitchFloat:
.2c71	9c 91 05	stz $0591			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.2c74	e8		inx				inx 								; zero the decimal additive.
.2c75	20 1f 2e	jsr $2e1f			jsr 	FloatSetZero
.2c78	ca		dex				dex
.2c79	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.2c7b	80 ae		bra $2c2b			bra 	_ENExitChange
.2c7d					_ESTADecimalState:
.2c7d	68		pla				pla 								; digit.
.2c7e	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 11th decimal point.
.2c80	f0 99		beq $2c1b			beq 	_ENFail
.2c82	e8		inx				inx 								; put digit into fractional part of X+1
.2c83	20 c7 2c	jsr $2cc7			jsr 	ESTAShiftDigitIntoMantissa
.2c86	ca		dex				dex
.2c87	ee 91 05	inc $0591			inc 	decimalCount 				; bump the count of decimals
.2c8a	ad 91 05	lda $0591			lda 	decimalCount 				; too many decimal digits.
.2c8d	c9 0b		cmp #$0b			cmp 	#11
.2c8f	f0 02		beq $2c93			beq 	_ESTADSFail
.2c91	38		sec				sec
.2c92	60		rts				rts
.2c93					_ESTADSFail:
.2c93	18		clc				clc
.2c94	60		rts				rts
.2c95					_ENConstructFinal:
.2c95	ad 91 05	lda $0591			lda 	decimalCount 				; get decimal count
.2c98	f0 2b		beq $2cc5			beq 	_ENCFExit 					; no decimals
.2c9a	5a		phy				phy
.2c9b	0a		asl a				asl 	a 							; x 4 and CLC
.2c9c	0a		asl a				asl 	a
.2c9d	6d 91 05	adc $0591			adc 	decimalCount
.2ca0	a8		tay				tay
.2ca1	b9 2c 29	lda $292c,y			lda 	FloatScalarTable-5,y 		; copy decimal scalar to X+2
.2ca4	95 42		sta $42,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.2ca6	b9 2d 29	lda $292d,y			lda 	FloatScalarTable-5+1,y
.2ca9	95 4e		sta $4e,x			sta 	NSMantissa1+2,x
.2cab	b9 2e 29	lda $292e,y			lda 	FloatScalarTable-5+2,y
.2cae	95 5a		sta $5a,x			sta 	NSMantissa2+2,x
.2cb0	b9 2f 29	lda $292f,y			lda 	FloatScalarTable-5+3,y
.2cb3	95 66		sta $66,x			sta 	NSMantissa3+2,x
.2cb5	b9 30 29	lda $2930,y			lda 	FloatScalarTable-5+4,y
.2cb8	95 72		sta $72,x			sta 	NSExponent+2,x
.2cba	74 36		stz $36,x			stz 	NSStatus+2,x 				; make +ve
.2cbc	e8		inx				inx 								; multiply decimal const by decimal scalar
.2cbd	e8		inx				inx
.2cbe	20 df 2a	jsr $2adf			jsr 	FloatMultiply
.2cc1	20 43 28	jsr $2843			jsr 	FloatAdd 					; add to integer part.
.2cc4	7a		ply				ply
.2cc5					_ENCFExit:
.2cc5	18		clc				clc 								; reject the digit.
.2cc6	60		rts				rts
.2cc7					ESTAShiftDigitIntoMantissa:
.2cc7	29 0f		and #$0f			and 	#15 						; save digit
.2cc9	48		pha				pha
.2cca	b5 64		lda $64,x			lda 	NSMantissa3,x 				; push mantissa on stack
.2ccc	48		pha				pha
.2ccd	b5 58		lda $58,x			lda 	NSMantissa2,x
.2ccf	48		pha				pha
.2cd0	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.2cd2	48		pha				pha
.2cd3	b5 40		lda $40,x			lda 	NSMantissa0,x
.2cd5	48		pha				pha
.2cd6	20 2e 2e	jsr $2e2e			jsr 	FloatShiftLeft 				; x 2
.2cd9	20 2e 2e	jsr $2e2e			jsr 	FloatShiftLeft 				; x 4
.2cdc	18		clc				clc 								; pop mantissa and add
.2cdd	68		pla				pla
.2cde	75 40		adc $40,x			adc 	NSMantissa0,x
.2ce0	95 40		sta $40,x			sta 	NSMantissa0,x
.2ce2	68		pla				pla
.2ce3	75 4c		adc $4c,x			adc 	NSMantissa1,x
.2ce5	95 4c		sta $4c,x			sta 	NSMantissa1,x
.2ce7	68		pla				pla
.2ce8	75 58		adc $58,x			adc 	NSMantissa2,x
.2cea	95 58		sta $58,x			sta 	NSMantissa2,x
.2cec	68		pla				pla
.2ced	75 64		adc $64,x			adc 	NSMantissa3,x
.2cef	95 64		sta $64,x			sta 	NSMantissa3,x 				; x 5
.2cf1	20 2e 2e	jsr $2e2e			jsr 	FloatShiftLeft 				; x 10
.2cf4	68		pla				pla 								; add digit
.2cf5	18		clc				clc
.2cf6	75 40		adc $40,x			adc 	NSMantissa0,x
.2cf8	95 40		sta $40,x			sta 	NSMantissa0,x
.2cfa	90 0a		bcc $2d06			bcc 	_ESTASDExit
.2cfc	f6 4c		inc $4c,x			inc 	NSMantissa1,x
.2cfe	d0 06		bne $2d06			bne 	_ESTASDExit
.2d00	f6 58		inc $58,x			inc 	NSMantissa2,x
.2d02	d0 02		bne $2d06			bne 	_ESTASDExit
.2d04	f6 64		inc $64,x			inc 	NSMantissa3,x
.2d06					_ESTASDExit:
.2d06	60		rts				rts
.058f					encodeState:
>058f							.fill 	1
.0590					digitTemp:
>0590							.fill 	1
.0591					decimalCount:
>0591							.fill 	1
.2d07					FloatToString:
.2d07	da		phx				phx
.2d08	5a		phy				phy 								; save code position
.2d09	8d 92 05	sta $0592			sta 	decimalPlaces	 			; save number of DPs.
.2d0c	9c 93 05	stz $0593			stz 	dbOffset 					; offset into decimal buffer = start.
.2d0f	b5 34		lda $34,x			lda 	NSStatus,x  				; is it -ve.
.2d11	10 08		bpl $2d1b			bpl 	_CNTSNotNegative
.2d13	29 7f		and #$7f			and 	#$7F 						; make +ve
.2d15	95 34		sta $34,x			sta 	NSStatus,x
.2d17	a9 2d		lda #$2d			lda 	#"-"
.2d19	80 02		bra $2d1d			bra 	_CNTMain
.2d1b					_CNTSNotNegative:
.2d1b	a9 20		lda #$20			lda 	#" "
.2d1d					_CNTMain:
.2d1d	20 7f 2d	jsr $2d7f			jsr 	WriteDecimalBuffer
.2d20	b5 70		lda $70,x			lda 	NSExponent,x 				; check if decimal
.2d22	f0 0d		beq $2d31			beq 	_CNTSNotFloat
.2d24	e8		inx				inx 								; round up so we don't get too many 6.999999
.2d25	a9 01		lda #$01			lda 	#1
.2d27	20 21 2e	jsr $2e21			jsr 	FloatSetByte
.2d2a	b5 6f		lda $6f,x			lda		NSExponent-1,x
.2d2c	95 70		sta $70,x			sta 	NSExponent,x
.2d2e	20 43 28	jsr $2843			jsr 	FloatAdd
.2d31					_CNTSNotFloat:
.2d31	20 61 2d	jsr $2d61			jsr 	MakePlusTwoString 			; do the integer part.
.2d34	20 ff 29	jsr $29ff			jsr 	FloatFractionalPart 		; get the fractional part
.2d37	20 74 2b	jsr $2b74			jsr 	FloatNormalise					; normalise , exit if zero
.2d3a	f0 22		beq $2d5e			beq 	_CNTSExit
.2d3c	a9 2e		lda #$2e			lda 	#"."
.2d3e	20 7f 2d	jsr $2d7f			jsr 	WriteDecimalBuffer 			; write decimal place
.2d41					_CNTSDecimal:
.2d41	ce 92 05	dec $0592			dec 	decimalPlaces 				; done all the decimals
.2d44	30 18		bmi $2d5e			bmi 	_CNTSExit
.2d46	e8		inx				inx 								; x 10.0
.2d47	a9 0a		lda #$0a			lda 	#10
.2d49	20 21 2e	jsr $2e21			jsr 	FloatSetByte
.2d4c	20 df 2a	jsr $2adf			jsr 	FloatMultiply
.2d4f	20 61 2d	jsr $2d61			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.2d52	20 ff 29	jsr $29ff			jsr 	FloatFractionalPart 		; get the fractional part
.2d55	20 74 2b	jsr $2b74			jsr 	FloatNormalise 				; normalise it.
.2d58	b5 70		lda $70,x			lda 	NSExponent,x 				; gone to zero, exit.
.2d5a	c9 d0		cmp #$d0			cmp 	#$D0 						; very small remainder, so don't bother.
.2d5c	b0 e3		bcs $2d41			bcs 	_CNTSDecimal 				; keep going.
.2d5e					_CNTSExit:
.2d5e	7a		ply				ply
.2d5f	fa		plx				plx
.2d60	60		rts				rts
.2d61					MakePlusTwoString:
.2d61	da		phx				phx
.2d62	20 02 2e	jsr $2e02			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.2d65	e8		inx				inx 								; access it
.2d66	e8		inx				inx
.2d67	20 5a 2a	jsr $2a5a			jsr 	FloatIntegerPart 			; make it an integer
.2d6a	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.2d6c	20 9e 2d	jsr $2d9e			jsr 	ConvertInt32
.2d6f	a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.2d71					_MPTSCopy:
.2d71	bd 6d 05	lda $056d,x			lda 	numberBuffer,x
.2d74	20 7f 2d	jsr $2d7f			jsr 	WriteDecimalBuffer
.2d77	e8		inx				inx
.2d78	bd 6d 05	lda $056d,x			lda 	numberBuffer,x
.2d7b	d0 f4		bne $2d71			bne 	_MPTSCopy
.2d7d	fa		plx				plx
.2d7e	60		rts				rts
.2d7f					WriteDecimalBuffer:
.2d7f	da		phx				phx
.2d80	ae 93 05	ldx $0593			ldx 	dbOffset
.2d83	9d 94 05	sta $0594,x			sta 	decimalBuffer,x
.2d86	9e 95 05	stz $0595,x			stz 	decimalBuffer+1,x
.2d89	ee 93 05	inc $0593			inc 	dbOffset
.2d8c	fa		plx				plx
.2d8d	60		rts				rts
.0592					decimalPlaces:
>0592							.fill 	1
.0593					dbOffset:
>0593							.fill 	1
.0594					decimalBuffer:
>0594							.fill 	32
.2d8e					ConvertInt16:
.2d8e	85 40		sta $40				sta 	NSMantissa0 				; set up as 32 bit conversion
.2d90	86 4c		stx $4c				stx 	NSMantissa1
.2d92	64 58		stz $58				stz 	NSMantissa2
.2d94	64 64		stz $64				stz 	NSMantissa3
.2d96	64 34		stz $34				stz 	NSStatus 					; positive integer
.2d98	a2 00		ldx #$00			ldx 	#0 							; stack level
.2d9a	a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.2d9c	80 00		bra $2d9e			bra 	ConvertInt32
.2d9e					ConvertInt32:
.2d9e	5a		phy				phy
.2d9f	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.2da1	24 34		bit $34				bit 	NSStatus 					; output a - if not negative.
.2da3	10 08		bpl $2dad			bpl 	_CI32NotNeg
.2da5	48		pha				pha
.2da6	a9 2d		lda #$2d			lda 	#'-'
.2da8	99 6d 05	sta $056d,y			sta 	numberBuffer,y
.2dab	c8		iny				iny
.2dac	68		pla				pla
.2dad					_CI32NotNeg:
.2dad	20 bb 2d	jsr $2dbb			jsr 	_CI32DivideConvert 			; recursive conversion
.2db0	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.2db2	99 6d 05	sta $056d,y			sta 	numberBuffer,y
.2db5	7a		ply				ply
.2db6	a2 05		ldx #$05			ldx 	#numberBuffer >> 8 			; return address in XA
.2db8	a9 6d		lda #$6d			lda 	#numberBuffer & $FF
.2dba	60		rts				rts
.2dbb					_CI32DivideConvert:
.2dbb	e8		inx				inx 								; write to next slot up
.2dbc	20 21 2e	jsr $2e21			jsr 	FloatSetByte 		 		; write the base out.
.2dbf	ca		dex				dex
.2dc0	20 b5 29	jsr $29b5			jsr 	Int32Divide 				; divide
.2dc3	b5 40		lda $40,x			lda 	NSMantissa0,x 				; save remainder
.2dc5	48		pha				pha
.2dc6	20 a4 29	jsr $29a4			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.2dc9	20 41 2e	jsr $2e41			jsr 	FloatIsZero 				; is it zero ?
.2dcc	f0 05		beq $2dd3			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.2dce	b5 41		lda $41,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.2dd0	20 bb 2d	jsr $2dbb			jsr 	_CI32DivideConvert 			; and recusrively call.
.2dd3					_CI32NoRecurse:
.2dd3	68		pla				pla 								; remainder
.2dd4	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.2dd6	90 02		bcc $2dda			bcc 	_CI32NotHex
.2dd8	69 26		adc #$26			adc 	#6+32
.2dda					_CI32NotHex:
.2dda	69 30		adc #$30			adc 	#48
.2ddc	99 6d 05	sta $056d,y			sta 	numberBuffer,y 				; write out and exit
.2ddf	c8		iny				iny
.2de0	60		rts				rts
.2de1					FloatNegate:
.2de1	b5 34		lda $34,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.2de3	49 80		eor #$80			eor 	#$80  						; toggle the negative flag
.2de5	95 34		sta $34,x			sta 	NSStatus,x
.2de7	60		rts				rts
.2de8					FloatNegateMantissa:
.2de8	38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.2de9	a9 00		lda #$00			lda 	#0
.2deb	f5 40		sbc $40,x			sbc 	NSMantissa0,x
.2ded	95 40		sta $40,x			sta 	NSMantissa0,x
.2def	a9 00		lda #$00			lda 	#0
.2df1	f5 4c		sbc $4c,x			sbc 	NSMantissa1,x
.2df3	95 4c		sta $4c,x			sta 	NSMantissa1,x
.2df5	a9 00		lda #$00			lda 	#0
.2df7	f5 58		sbc $58,x			sbc 	NSMantissa2,x
.2df9	95 58		sta $58,x			sta 	NSMantissa2,x
.2dfb	a9 00		lda #$00			lda 	#0
.2dfd	f5 64		sbc $64,x			sbc 	NSMantissa3,x
.2dff	95 64		sta $64,x			sta 	NSMantissa3,x
.2e01	60		rts				rts
.2e02					FloatShiftUpTwo:
.2e02	b5 40		lda $40,x			lda 	NSMantissa0,x
.2e04	95 42		sta $42,x			sta 	NSMantissa0+2,x
.2e06	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.2e08	95 4e		sta $4e,x			sta 	NSMantissa1+2,x
.2e0a	b5 58		lda $58,x			lda 	NSMantissa2,x
.2e0c	95 5a		sta $5a,x			sta 	NSMantissa2+2,x
.2e0e	b5 64		lda $64,x			lda 	NSMantissa3,x
.2e10	95 66		sta $66,x			sta 	NSMantissa3+2,x
.2e12	b5 70		lda $70,x			lda 	NSExponent,x
.2e14	95 72		sta $72,x			sta 	NSExponent+2,x
.2e16	b5 34		lda $34,x			lda 	NSStatus,x
.2e18	95 36		sta $36,x			sta 	NSStatus+2,x
.2e1a	60		rts				rts
.2e1b					FloatSetZeroMantissaOnly:
.2e1b	74 40		stz $40,x			stz 	NSMantissa0,x
.2e1d	80 08		bra $2e27			bra 	FloatZero13
.2e1f					FloatSetZero:
.2e1f	a9 00		lda #$00			lda 	#0
.2e21					FloatSetByte:
.2e21	74 70		stz $70,x			stz 	NSExponent,x 				; zero exponent, as +ve integer value.
.2e23					FloatSetMantissa:
.2e23	95 40		sta $40,x			sta 	NSMantissa0,x 				; zero mantissa
.2e25	74 34		stz $34,x			stz 	NSStatus,x
.2e27					FloatZero13:
.2e27	74 4c		stz $4c,x			stz 	NSMantissa1,x
.2e29	74 58		stz $58,x			stz 	NSMantissa2,x
.2e2b	74 64		stz $64,x			stz 	NSMantissa3,x
.2e2d	60		rts				rts
.2e2e					FloatShiftLeft:
.2e2e	18		clc				clc
.2e2f					FloatRotateLeft:
.2e2f	36 40		rol $40,x			rol 	NSMantissa0,x
.2e31	36 4c		rol $4c,x			rol		NSMantissa1,x
.2e33	36 58		rol $58,x			rol		NSMantissa2,x
.2e35	36 64		rol $64,x			rol		NSMantissa3,x
.2e37	60		rts				rts
.2e38					FloatShiftRight:
.2e38	56 64		lsr $64,x			lsr 	NSMantissa3,x
.2e3a	76 58		ror $58,x			ror		NSMantissa2,x
.2e3c	76 4c		ror $4c,x			ror		NSMantissa1,x
.2e3e	76 40		ror $40,x			ror		NSMantissa0,x
.2e40	60		rts				rts
.2e41					FloatIsZero:
.2e41	b5 64		lda $64,x			lda 	NSMantissa3,x
.2e43	15 58		ora $58,x			ora		NSMantissa2,x
.2e45	15 4c		ora $4c,x			ora		NSMantissa1,x
.2e47	15 40		ora $40,x			ora		NSMantissa0,x
.2e49	60		rts				rts

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/polynomials.library

.2e4a					FloatArcTan:
.2e4a	20 74 2b	jsr $2b74			jsr 	FloatNormalise 					; normalise x
.2e4d	b5 34		lda $34,x			lda 	NSStatus,x 						; save sign, make absolute
.2e4f	48		pha				pha
.2e50	74 34		stz $34,x			stz 	NSStatus,x
.2e52	b5 70		lda $70,x			lda 	NSExponent,x 					; $40000000 ^ $E2 is 1.0
.2e54	c9 e2		cmp #$e2			cmp 	#$E2
.2e56	90 25		bcc $2e7d			bcc 	_UANoFixup
.2e58	8a		txa				txa 									; value in +1
.2e59	a8		tay				tay
.2e5a	c8		iny				iny
.2e5b	20 03 30	jsr $3003			jsr 	CopyFloatXY
.2e5e	a9 01		lda #$01			lda 	#1 								; 1.0 in +0
.2e60	20 21 2e	jsr $2e21			jsr 	FloatSetByte
.2e63	e8		inx				inx
.2e64	20 68 29	jsr $2968			jsr 	FloatDivide
.2e67	b0 21		bcs $2e8a			bcs 	_FATError
.2e69	20 8d 2e	jsr $2e8d			jsr 	CoreAtn 						; calculate the root
.2e6c	20 f8 2f	jsr $2ff8			jsr 	CompletePolynomial
.2e6f	20 e1 2d	jsr $2de1			jsr 	FloatNegate 					; make -ve
.2e72	a9 05		lda #$05			lda 	#Const_PiDiv2-Const_Base
.2e74	20 4f 30	jsr $304f			jsr 	LoadConstant
.2e77	e8		inx				inx
.2e78	20 43 28	jsr $2843			jsr 	FloatAdd
.2e7b	80 06		bra $2e83			bra 	_UAComplete
.2e7d					_UANoFixup:
.2e7d	20 8d 2e	jsr $2e8d			jsr 	CoreAtn
.2e80	20 f8 2f	jsr $2ff8			jsr 	CompletePolynomial
.2e83					_UAComplete:
.2e83	68		pla				pla 									; apply the result.
.2e84	55 34		eor $34,x			eor 	NSStatus,x
.2e86	95 34		sta $34,x			sta 	NSStatus,x
.2e88	18		clc				clc
.2e89	60		rts				rts
.2e8a					_FATError:
.2e8a	68		pla				pla
.2e8b	38		sec				sec
.2e8c	60		rts				rts
.2e8d					CoreAtn:
.2e8d	a9 fb		lda #$fb			lda 	#AtnCoefficients & $FF
.2e8f	a0 2e		ldy #$2e			ldy 	#AtnCoefficients >> 8
.2e91	4c 4c 31	jmp $314c			jmp 	CorePolySquared
.2e94					ExpCoefficients:
>2e94	07					.byte	7
>2e95	2b 1f 2c 5a				.dword	$5a2c1f2b ; 2.1498763701e-05
>2e99	d2					.byte	$d2
>2e9a	8e 59 3f 4b				.dword	$4b3f598e ; 0.00014352314037
>2e9e	d5					.byte	$d5
>2e9f	c3 71 f7 57				.dword	$57f771c3 ; 0.0013422634825
>2ea3	d8					.byte	$d8
>2ea4	15 0e c2 4e				.dword	$4ec20e15 ; 0.0096140170135
>2ea8	db					.byte	$db
>2ea9	05 ac ac 71				.dword	$71acac05 ; 0.05550512686
>2ead	dd					.byte	$dd
>2eae	e3 f3 fe 7a				.dword	$7afef3e3 ; 0.2402263846
>2eb2	df					.byte	$df
>2eb3	08 0c b9 58				.dword	$58b90c08 ; 0.69314718618
>2eb7	e1					.byte	$e1
>2eb8	00 00 00 40				.dword	$40000000 ; 1.0
>2ebc	e2					.byte	$e2
.2ebd					SinCoefficients:
>2ebd	06					.byte	6
>2ebe	8d 16 0d f3				.dword	$f30d168d ; -14.381390672
>2ec2	e5					.byte	$e5
>2ec3	fc fd 03 54				.dword	$5403fdfc ; 42.007797122
>2ec7	e7					.byte	$e7
>2ec8	81 44 b4 cc				.dword	$ccb44481 ; -76.704170257
>2ecc	e8					.byte	$e8
>2ecd	f1 ef 9a 51				.dword	$519aeff1 ; 81.605223686
>2ed1	e8					.byte	$e8
>2ed2	94 f3 ae d2				.dword	$d2aef394 ; -41.341702104
>2ed6	e7					.byte	$e7
>2ed7	51 ed 87 64				.dword	$6487ed51 ; 6.2831853069
>2edb	e4					.byte	$e4
>2edc	00 00 00 00				.dword	$00000000 ; 0.0
>2ee0	00					.byte	$00
.2ee1					LogCoefficients:
>2ee1	04					.byte	4
>2ee2	bd 65 2b 6f				.dword	$6f2b65bd ; 0.43425594189
>2ee6	e0					.byte	$e0
>2ee7	b2 85 cd 49				.dword	$49cd85b2 ; 0.57658454124
>2eeb	e1					.byte	$e1
>2eec	8b 49 1c 7b				.dword	$7b1c498b ; 0.96180075919
>2ef0	e1					.byte	$e1
>2ef1	90 1d 55 5c				.dword	$5c551d90 ; 2.8853900731
>2ef5	e3					.byte	$e3
>2ef6	00 00 00 c0				.dword	$c0000000 ; -0.5
>2efa	e1					.byte	$e1
.2efb					AtnCoefficients:
>2efb	0c					.byte	12
>2efc	ea de c1 d9				.dword	$d9c1deea ; -0.00068479391189
>2f00	d7					.byte	$d7
>2f01	7a 53 7a 4f				.dword	$4f7a537a ; 0.0048509421558
>2f05	da					.byte	$da
>2f06	08 58 fe c1				.dword	$c1fe5808 ; -0.016111701843
>2f0a	dc					.byte	$dc
>2f0b	e5 b3 0f 46				.dword	$460fb3e5 ; 0.034209638048
>2f0f	dd					.byte	$dd
>2f10	e1 e5 29 ef				.dword	$ef29e5e1 ; -0.054279132761
>2f14	dd					.byte	$dd
>2f15	26 38 32 4a				.dword	$4a323826 ; 0.07245719654
>2f19	de					.byte	$de
>2f1a	bd 28 f5 db				.dword	$dbf528bd ; -0.089802395378
>2f1e	de					.byte	$de
>2f1f	3f 44 98 71				.dword	$7198443f ; 0.11093241343
>2f23	de					.byte	$de
>2f24	9d 4c 22 c9				.dword	$c9224c9d ; -0.14283980767
>2f28	df					.byte	$df
>2f29	e3 48 66 66				.dword	$666648e3 ; 0.19999912049
>2f2d	df					.byte	$df
>2f2e	0a 55 55 d5				.dword	$d555550a ; -0.33333331568
>2f32	e0					.byte	$e0
>2f33	00 00 00 40				.dword	$40000000 ; 1.0
>2f37	e2					.byte	$e2
>2f38	00 00 00 00				.dword	$00000000 ; 0.0
>2f3c	00					.byte	$00
.2f3d					Const_Base:
.2f3d					Const_1Div2Pi:
>2f3d	b7 c1 7c 51				.dword	$517cc1b7 ; 0.15915494
>2f41	df					.byte	$df
.2f42					Const_PiDiv2:
>2f42	51 ed 87 64				.dword	$6487ed51 ; 1.57079633
>2f46	e2					.byte	$e2
.2f47					Const_Log2_e:
>2f47	95 1d 55 5c				.dword	$5c551d95 ; 1.44269504
>2f4b	e2					.byte	$e2
.2f4c					Const_sqrt_2:
>2f4c	9a 79 82 5a				.dword	$5a82799a ; 1.41421356
>2f50	e2					.byte	$e2
.2f51					Const_sqrt_half:
>2f51	9a 79 82 5a				.dword	$5a82799a ; 0.70710678
>2f55	e1					.byte	$e1
.2f56					Const_pi:
>2f56	51 ed 87 64				.dword	$6487ed51 ; 3.14159265
>2f5a	e3					.byte	$e3
.2f5b					Const_half:
>2f5b	00 00 00 40				.dword	$40000000 ; 0.50000000
>2f5f	e1					.byte	$e1
.2f60					Const_ln_e:
>2f60	fc 0b b9 58				.dword	$58b90bfc ; 0.69314718
>2f64	e1					.byte	$e1
.2f65					FloatCosine:
.2f65	a9 05		lda #$05			lda 	#Const_PiDiv2-Const_Base
.2f67	20 4f 30	jsr $304f			jsr 	LoadConstant
.2f6a	e8		inx				inx
.2f6b	20 43 28	jsr $2843			jsr 	FloatAdd
.2f6e	4c 05 31	jmp $3105			jmp 	FloatSine
.2f71					FloatExponent:
.2f71	a9 0a		lda #$0a			lda 	#Const_Log2_e-Const_Base
.2f73	20 4f 30	jsr $304f			jsr 	LoadConstant
.2f76	e8		inx				inx
.2f77	20 df 2a	jsr $2adf			jsr 	FloatMultiply
.2f7a	20 bc 2f	jsr $2fbc			jsr 	_UECopy01 				; copy 0 to 1, get integer part to 1
.2f7d	e8		inx				inx
.2f7e	20 5a 2a	jsr $2a5a			jsr 	FloatIntegerPart
.2f81	ca		dex				dex
.2f82	b5 4d		lda $4d,x			lda 	NSMantissa1+1,x
.2f84	15 59		ora $59,x			ora 	NSMantissa2+1,x
.2f86	15 65		ora $65,x			ora 	NSMantissa3+1,x
.2f88	d0 38		bne $2fc2			bne 	_UERangeError
.2f8a	b5 41		lda $41,x			lda 	NSMantissa0+1,x 		; push integer part on stack.
.2f8c	c9 40		cmp #$40			cmp 	#64
.2f8e	b0 32		bcs $2fc2			bcs 	_UERangeError
.2f90	48		pha				pha
.2f91	b5 34		lda $34,x			lda 	NSStatus,x 				; push sign
.2f93	48		pha				pha
.2f94	20 ff 29	jsr $29ff			jsr 	FloatFractionalPart		; copy 0 to 1, get fractional part to 0
.2f97	68		pla				pla
.2f98	10 14		bpl $2fae			bpl 	_UEPositive
.2f9a	e8		inx				inx 							; 1-x
.2f9b	a9 01		lda #$01			lda 	#1
.2f9d	20 21 2e	jsr $2e21			jsr 	FloatSetByte
.2fa0	ca		dex				dex
.2fa1	20 e1 2d	jsr $2de1			jsr 	FloatNegate
.2fa4	e8		inx				inx
.2fa5	20 43 28	jsr $2843			jsr 	FloatAdd
.2fa8	68		pla				pla 							; integer part +1 and negated.
.2fa9	1a		inc a				inc 	a
.2faa	49 ff		eor #$ff			eor 	#$FF
.2fac	1a		inc a				inc 	a
.2fad	48		pha				pha
.2fae					_UEPositive:
.2fae	20 c4 2f	jsr $2fc4			jsr 	CoreExponent
.2fb1	20 f8 2f	jsr $2ff8			jsr 	CompletePolynomial
.2fb4	68		pla				pla
.2fb5	18		clc				clc
.2fb6	75 70		adc $70,x			adc 	NSExponent,x
.2fb8	95 70		sta $70,x			sta 	NSExponent,x
.2fba	18		clc				clc
.2fbb	60		rts				rts
.2fbc					_UECopy01:
.2fbc	8a		txa				txa
.2fbd	a8		tay				tay
.2fbe	c8		iny				iny
.2fbf	4c 03 30	jmp $3003			jmp 	CopyFloatXY
.2fc2					_UERangeError:
.2fc2	38		sec				sec
.2fc3	60		rts				rts
.2fc4					CoreExponent:
.2fc4	a9 94		lda #$94			lda 	#ExpCoefficients & $FF
.2fc6	a0 2e		ldy #$2e			ldy 	#ExpCoefficients >> 8
.2fc8	20 cc 2f	jsr $2fcc			jsr 	CalculateHornerPolynomial
.2fcb	60		rts				rts
.2fcc					CalculateHornerPolynomial:
.2fcc	85 28		sta $28				sta 	zTemp0 						; save poly data from YA
.2fce	84 29		sty $29				sty 	zTemp0+1
.2fd0	9c b4 05	stz $05b4			stz 	coefficientCount 			; zero the count.
.2fd3	8e b5 05	stx $05b5			stx 	xValueSlot 					; save xValue slot.
.2fd6	e8		inx				inx 								; set the count to zero.
.2fd7	20 1f 2e	jsr $2e1f			jsr 	FloatSetZero
.2fda					_CHPLoop:
.2fda	8a		txa				txa 								; copy X-1 to X+1
.2fdb	a8		tay				tay
.2fdc	ca		dex				dex
.2fdd	c8		iny				iny
.2fde	20 03 30	jsr $3003			jsr 	CopyFloatXY 				; e.g. stack is <current> <x>
.2fe1	e8		inx				inx
.2fe2	e8		inx				inx
.2fe3	20 df 2a	jsr $2adf			jsr 	FloatMultiply 				; times current by X
.2fe6	e8		inx				inx
.2fe7	20 22 30	jsr $3022			jsr 	GetCoefficient 				; coefficient into X+1
.2fea	20 43 28	jsr $2843			jsr 	FloatAdd 					; and add
.2fed	ee b4 05	inc $05b4			inc 	coefficientCount
.2ff0	ad b4 05	lda $05b4			lda 	coefficientCount
.2ff3	d2 28		cmp ($28)			cmp 	(zTemp0)
.2ff5	d0 e3		bne $2fda			bne 	_CHPLoop
.2ff7	60		rts				rts
.2ff8					CompletePolynomial:
.2ff8	20 df 2a	jsr $2adf			jsr 	FloatMultiply
.2ffb	e8		inx				inx 								; get the last value
.2ffc	20 22 30	jsr $3022			jsr 	GetCoefficient
.2fff	20 43 28	jsr $2843			jsr 	FloatAdd 					; and add it
.3002	60		rts				rts
.3003					CopyFloatXY:
.3003	b5 70		lda $70,x			lda 	NSExponent,x
.3005	99 70 00	sta $0070,y			sta 	NSExponent,y
.3008	b5 34		lda $34,x			lda 	NSStatus,x
.300a	99 34 00	sta $0034,y			sta 	NSStatus,y
.300d	b5 40		lda $40,x			lda 	NSMantissa0,x
.300f	99 40 00	sta $0040,y			sta 	NSMantissa0,y
.3012	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.3014	99 4c 00	sta $004c,y			sta 	NSMantissa1,y
.3017	b5 58		lda $58,x			lda 	NSMantissa2,x
.3019	99 58 00	sta $0058,y			sta 	NSMantissa2,y
.301c	b5 64		lda $64,x			lda 	NSMantissa3,x
.301e	99 64 00	sta $0064,y			sta 	NSMantissa3,y
.3021	60		rts				rts
.3022					GetCoefficient:
.3022	5a		phy				phy
.3023	ad b4 05	lda $05b4			lda 	coefficientCount 			; 5 per block
.3026	0a		asl a				asl 	a
.3027	0a		asl a				asl 	a
.3028	38		sec				sec 								; +1 for count
.3029	6d b4 05	adc $05b4			adc 	coefficientCount
.302c	a8		tay				tay
.302d	b1 28		lda ($28),y			lda 	(zTemp0),y 					; copy mantissa
.302f	95 40		sta $40,x			sta 	NSMantissa0,x
.3031	c8		iny				iny
.3032	b1 28		lda ($28),y			lda 	(zTemp0),y
.3034	95 4c		sta $4c,x			sta 	NSMantissa1,x
.3036	c8		iny				iny
.3037	b1 28		lda ($28),y			lda 	(zTemp0),y
.3039	95 58		sta $58,x			sta 	NSMantissa2,x
.303b	c8		iny				iny
.303c	b1 28		lda ($28),y			lda 	(zTemp0),y
.303e	48		pha				pha
.303f	29 7f		and #$7f			and 	#$7F 						; clear sign bit.
.3041	95 64		sta $64,x			sta 	NSMantissa3,x
.3043	c8		iny				iny
.3044	68		pla				pla
.3045	29 80		and #$80			and 	#$80
.3047	95 34		sta $34,x			sta 	NSStatus,x 					; put in status
.3049	b1 28		lda ($28),y			lda 	(zTemp0),y
.304b	95 70		sta $70,x			sta 	NSExponent,x
.304d	7a		ply				ply
.304e	60		rts				rts
.05b4					coefficientCount:
>05b4							.fill 	1
.05b5					xValueSlot:
>05b5							.fill 	1
.304f					LoadConstant:
.304f	5a		phy				phy
.3050	a8		tay				tay
.3051	b9 3d 2f	lda $2f3d,y			lda 	Const_Base+0,y
.3054	95 41		sta $41,x			sta 	NSMantissa0+1,x
.3056	b9 3e 2f	lda $2f3e,y			lda 	Const_Base+1,y
.3059	95 4d		sta $4d,x			sta 	NSMantissa1+1,x
.305b	b9 3f 2f	lda $2f3f,y			lda 	Const_Base+2,y
.305e	95 59		sta $59,x			sta 	NSMantissa2+1,x
.3060	b9 40 2f	lda $2f40,y			lda 	Const_Base+3,y
.3063	48		pha				pha
.3064	29 7f		and #$7f			and 	#$7F
.3066	95 65		sta $65,x			sta 	NSMantissa3+1,x
.3068	68		pla				pla
.3069	29 80		and #$80			and 	#$80
.306b	95 35		sta $35,x			sta 	NSStatus+1,x
.306d	b9 41 2f	lda $2f41,y			lda 	Const_Base+4,y
.3070	95 71		sta $71,x			sta 	NSExponent+1,x
.3072	7a		ply				ply
.3073	60		rts				rts
.3074					FloatLogarithm:
.3074	b5 34		lda $34,x			lda 	NSStatus,x 					; check > 0
.3076	30 5f		bmi $30d7			bmi 	_ULRange
.3078	20 41 2e	jsr $2e41			jsr 	FloatIsZero
.307b	f0 5a		beq $30d7			beq 	_ULRange
.307d	20 74 2b	jsr $2b74			jsr 	FloatNormalise 				; put into FP mode.
.3080	b5 70		lda $70,x			lda 	NSExponent,x 				; get power
.3082	48		pha				pha
.3083	a9 e1		lda #$e1			lda 	#(-31) & $FF 				; force into range 0.5 -> 1
.3085	95 70		sta $70,x			sta 	NSExponent,x
.3087	a9 14		lda #$14			lda 	#Const_sqrt_half-Const_Base
.3089	20 4f 30	jsr $304f			jsr 	LoadConstant
.308c	e8		inx				inx
.308d	20 43 28	jsr $2843			jsr 	FloatAdd
.3090	8a		txa				txa 								; divide into sqrt 2.0
.3091	a8		tay				tay
.3092	c8		iny				iny
.3093	20 03 30	jsr $3003			jsr 	CopyFloatXY
.3096	ca		dex				dex
.3097	a9 0f		lda #$0f			lda 	#Const_sqrt_2-Const_Base
.3099	20 4f 30	jsr $304f			jsr 	LoadConstant
.309c	e8		inx				inx
.309d	e8		inx				inx
.309e	20 68 29	jsr $2968			jsr 	FloatDivide 				; if zero, error.
.30a1	b0 33		bcs $30d6			bcs 	_ULRangePla
.30a3	20 e1 2d	jsr $2de1			jsr 	FloatNegate 				; subtract from 1
.30a6	e8		inx				inx
.30a7	a9 01		lda #$01			lda 	#1
.30a9	20 21 2e	jsr $2e21			jsr 	FloatSetByte
.30ac	20 43 28	jsr $2843			jsr 	FloatAdd
.30af	20 d9 30	jsr $30d9			jsr 	CoreLog
.30b2	20 f8 2f	jsr $2ff8			jsr 	CompletePolynomial
.30b5	68		pla				pla 								; add exponent
.30b6	18		clc				clc
.30b7	69 1f		adc #$1f			adc 	#31 						; fix up
.30b9	48		pha				pha
.30ba	10 03		bpl $30bf			bpl 	_LogNotNeg
.30bc	49 ff		eor #$ff			eor 	#$FF
.30be	1a		inc a				inc 	a
.30bf					_LogNotNeg:
.30bf	e8		inx				inx 								; set byte and sign.
.30c0	20 21 2e	jsr $2e21			jsr 	FloatSetByte
.30c3	68		pla				pla
.30c4	29 80		and #$80			and 	#$80
.30c6	95 34		sta $34,x			sta 	NSStatus,x
.30c8	20 43 28	jsr $2843			jsr 	FloatAdd
.30cb	a9 23		lda #$23			lda 	#Const_ln_e-Const_Base
.30cd	20 4f 30	jsr $304f			jsr 	LoadConstant
.30d0	e8		inx				inx
.30d1	20 df 2a	jsr $2adf			jsr 	FloatMultiply
.30d4	18		clc				clc
.30d5	60		rts				rts
.30d6					_ULRangePla:
.30d6	68		pla				pla
.30d7					_ULRange:
.30d7	38		sec				sec
.30d8	60		rts				rts
.30d9					CoreLog:
.30d9	a9 e1		lda #$e1			lda 	#LogCoefficients & $FF
.30db	a0 2e		ldy #$2e			ldy 	#LogCoefficients >> 8
.30dd	4c 4c 31	jmp $314c			jmp 	CorePolySquared
.30e0					FloatPI:
.30e0	a9 19		lda #$19			lda 	#Const_pi-Const_Base
.30e2	20 4f 30	jsr $304f			jsr 	LoadConstant
.30e5	e8		inx				inx
.30e6	18		clc				clc
.30e7	60		rts				rts
.30e8					FloatPower:
.30e8	ca		dex				dex
.30e9	8a		txa				txa 							; copy 0 to 2, so we can process it
.30ea	a8		tay				tay
.30eb	c8		iny				iny
.30ec	c8		iny				iny
.30ed	20 03 30	jsr $3003			jsr 	CopyFloatXY
.30f0	e8		inx				inx 							; 2 = Log(0)
.30f1	e8		inx				inx
.30f2	20 74 30	jsr $3074			jsr 	FloatLogarithm
.30f5	b0 0d		bcs $3104			bcs 	_FPWExit
.30f7	20 df 2a	jsr $2adf			jsr 	FloatMultiply			; Multiply by original 1, into 1.
.30fa	8a		txa				txa 							; copy to slot 0
.30fb	a8		tay				tay
.30fc	88		dey				dey
.30fd	20 03 30	jsr $3003			jsr 	CopyFloatXY
.3100	ca		dex				dex  							; Exponent code.
.3101	20 71 2f	jsr $2f71			jsr 	FloatExponent
.3104					_FPWExit:
.3104	60		rts				rts
.3105					FloatSine:
.3105	b5 34		lda $34,x			lda 	NSStatus,x 					; save sign
.3107	48		pha				pha
.3108	74 34		stz $34,x			stz 	NSStatus,x 					; make +ve
.310a	a9 00		lda #$00			lda 	#Const_1Div2Pi-Const_Base
.310c	20 4f 30	jsr $304f			jsr 	LoadConstant
.310f	e8		inx				inx
.3110	20 df 2a	jsr $2adf			jsr 	FloatMultiply
.3113	20 ff 29	jsr $29ff			jsr 	FloatFractionalPart 		; take the fractional part
.3116	b5 70		lda $70,x			lda 	NSExponent,x 				; check exponent
.3118	c9 e0		cmp #$e0			cmp 	#$E0 						; < $E0 exponent : 0-0.25
.311a	90 1f		bcc $313b			bcc 	_USProcessExit
.311c	f0 06		beq $3124			beq 	_USSubtractFromHalf 		; = $E0 exponent : 0.25-0.5
.311e	b5 64		lda $64,x			lda 	NSMantissa3,x 				; if > 0.75 which is $60000000:$E1
.3120	c9 60		cmp #$60			cmp 	#$60
.3122	b0 0e		bcs $3132			bcs 	_USSubtractOne
.3124					_USSubtractFromHalf:
.3124	a9 1e		lda #$1e			lda 	#Const_half-Const_Base
.3126	20 4f 30	jsr $304f			jsr 	LoadConstant
.3129	e8		inx				inx
.312a	20 3d 28	jsr $283d			jsr 	FloatSubtract
.312d	20 e1 2d	jsr $2de1			jsr 	FloatNegate 				; then negate it
.3130	80 09		bra $313b			bra 	_USProcessExit 				; and exit
.3132					_USSubtractOne:
.3132	e8		inx				inx
.3133	a9 01		lda #$01			lda 	#1
.3135	20 21 2e	jsr $2e21			jsr 	FloatSetByte
.3138	20 3d 28	jsr $283d			jsr 	FloatSubtract
.313b					_USProcessExit:
.313b	20 48 31	jsr $3148			jsr 	CoreSine
.313e	20 f8 2f	jsr $2ff8			jsr 	CompletePolynomial
.3141	68		pla				pla 								; restore sign and apply
.3142	55 34		eor $34,x			eor 	NSStatus,x
.3144	95 34		sta $34,x			sta 	NSStatus,x
.3146	18		clc				clc
.3147	60		rts				rts
.3148					CoreSine:
.3148	a9 bd		lda #$bd			lda 	#SinCoefficients & $FF
.314a	a0 2e		ldy #$2e			ldy 	#SinCoefficients >> 8
.314c					CorePolySquared:
.314c	48		pha				pha 								; save coefficient table
.314d	5a		phy				phy
.314e	8a		txa				txa 								; copy X to +1, +2
.314f	a8		tay				tay
.3150	c8		iny				iny
.3151	20 03 30	jsr $3003			jsr 	CopyFloatXY
.3154	c8		iny				iny
.3155	20 03 30	jsr $3003			jsr 	CopyFloatXY
.3158	e8		inx				inx 								; point to the pair and put x^2 on stack
.3159	e8		inx				inx
.315a	20 df 2a	jsr $2adf			jsr 	FloatMultiply
.315d	7a		ply				ply 								; coefficient table back.
.315e	68		pla				pla
.315f	20 cc 2f	jsr $2fcc			jsr 	CalculateHornerPolynomial
.3162	8a		txa				txa 								; copy back to slot #1
.3163	a8		tay				tay
.3164	88		dey				dey
.3165	20 03 30	jsr $3003			jsr	 	CopyFloatXY
.3168	ca		dex				dex 								; point at result
.3169	60		rts				rts
.316a					FloatSquareRoot:
.316a	20 74 30	jsr $3074			jsr 	FloatLogarithm
.316d	b0 06		bcs $3175			bcs 	_FSQExit
.316f	d6 70		dec $70,x			dec 	NSExponent,x
.3171	20 71 2f	jsr $2f71			jsr 	FloatExponent
.3174	18		clc				clc
.3175					_FSQExit:
.3175	60		rts				rts
.3176					FloatTangent:
.3176	da		phx				phx
.3177	8a		txa				txa 								; sin -> +1
.3178	a8		tay				tay
.3179	c8		iny				iny
.317a	20 03 30	jsr $3003			jsr 	CopyFloatXY
.317d	e8		inx				inx
.317e	20 05 31	jsr $3105			jsr 	FloatSine
.3181	ca		dex				dex
.3182	8a		txa				txa 								; cos -> +2
.3183	a8		tay				tay
.3184	c8		iny				iny
.3185	c8		iny				iny
.3186	20 03 30	jsr $3003			jsr 	CopyFloatXY
.3189	e8		inx				inx
.318a	e8		inx				inx
.318b	20 65 2f	jsr $2f65			jsr 	FloatCosine
.318e	20 68 29	jsr $2968			jsr 	FloatDivide 				; calculate sin/cos
.3191	b0 07		bcs $319a			bcs 	_FTExit 					; divide by zero
.3193	8a		txa				txa 								; copy result down.
.3194	a8		tay				tay
.3195	88		dey				dey
.3196	20 03 30	jsr $3003			jsr 	CopyFloatXY
.3199	18		clc				clc
.319a					_FTExit:
.319a	fa		plx				plx
.319b	60		rts				rts

;******  Processing input file: testing/testend.asm

=$3200							nextPage = (* + $FF) & $FF00 		; so I can include with that f*****g header.
.31fe					ObjectCodePreHeader:
>31fe	00 40 d4 54 00 a6 0e 48				.binary "code/code.bin"
>3206	00 a6 03 c7 a6 cb 93 93 b1 ce 0d 48 45 4c 4c 4f
>3216	20 57 4f 52 4c 44 20 21 b1 0d 92 a6 40 00 01 00
>3226	ca 81 58 03 40 00 01 00 ca 81 58 06 40 00 01 00
>3236	ca 81 58 09 a6 40 00 01 00 ca 81 58 0c 40 00 01
>3246	00 ca 81 58 0f a6 00 48 12 24 40 00 01 95 a6 40
>3256	12 01 50 03 8e 01 b4 28 82 ca 84 02 82 01 80 7c
>3266	a6 40 12 01 50 06 8e 01 b4 1e 82 ca 84 cc 00 01
>3276	82 7c a6 40 12 01 50 09 8e 01 b4 0e 82 ca 84 01
>3286	80 7c a6 40 12 01 50 0c 8e 01 b4 02 82 ca 84 7c
>3296	a6 a6 40 12 01 50 0f 8e 01 7c a6 24 a7 a6 a6 00
>32a6	48 15 2a 1d 01 95 00 48 18 30 27 01 95 a6 40 15
>32b6	cc 00 01 82 40 18 02 82 80 cc 00 b0 80 48 1b a6
>32c6	01 40 1b cb 51 c8 01 40 1b 01 80 00 c8 a6 30 a7
>32d6	2a a7 a6 01 48 12 24 40 00 01 95 a6 01 cc 00 b0
>32e6	40 12 01 50 06 8e 78 80 40 12 01 50 03 8e 78 80
>32f6	00 c8 a6 40 12 01 50 0c 8e 78 48 1e a6 40 1e 00
>3306	a3 88 d2 00 07 00 d1 00 5d 00 a6 40 1e 01 a3 88
>3316	d2 00 07 00 d1 00 7a 00 a6 40 12 01 50 0f 8e 78
>3326	48 21 a6 40 21 00 a3 88 d2 00 07 00 d1 00 97 00
>3336	a6 40 21 01 a3 88 d2 00 07 00 d1 00 b6 00 a6 01
>3346	cc 00 b0 40 12 01 50 06 8e 78 80 40 12 01 50 03
>3356	8e 78 80 40 12 01 50 09 8e 78 c8 a6 24 a7 a6 d0
>3366	00 72 ff a6 a6 40 12 01 50 03 8e 78 48 24 a6 40
>3376	24 01 a3 88 d2 00 0c 00 40 12 01 50 0c 8e 01 7c
>3386	98 a6 40 12 01 50 03 8e 40 24 02 81 7c 98 a6 a6
>3396	40 12 01 50 03 8e 78 48 24 a6 40 24 cb 4f a3 88
>33a6	d2 00 15 00 40 12 01 50 03 8e cb 4d 7c 40 12 01
>33b6	50 0c 8e 00 7c 98 a6 40 12 01 50 03 8e 40 24 02
>33c6	80 7c 98 a6 a6 40 12 01 50 06 8e 78 48 27 a6 40
>33d6	27 00 a3 88 d2 00 0c 00 40 12 01 50 0f 8e 01 7c
>33e6	98 a6 40 12 01 50 06 8e 40 27 cc 00 01 81 7c 98
>33f6	a6 a6 40 12 01 50 06 8e 78 48 27 a6 40 27 cc 00
>3406	1d a3 88 d2 00 16 00 40 12 01 50 06 8e cc 00 1c
>3416	7c 40 12 01 50 0f 8e 00 7c 98 a6 40 12 01 50 06
>3426	8e 40 27 cc 00 01 80 7c 98 c4 ff
=12800					ObjectCode = ObjectCodePreHeader+2 			; so the code is at XX00

;******  End of listing
