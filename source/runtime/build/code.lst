
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass -c -Wall -o build/code.prg -L build/code.lst -l build/code.lbl /home/paulr/Projects/blitz-compiler/documents/../source/common-source/wrapper.asm testing/testing.asm /home/paulr/Projects/blitz-compiler/documents/../bin/runtime.library /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library /home/paulr/Projects/blitz-compiler/documents/../bin/polynomials.library testing/testend.asm
; Fri Oct  6 18:10:55 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../source/common-source/wrapper.asm

=$1000					CodeStart = $1000
=$22					ZeroPageMandatory = $22
=$400					MemoryStorage = $400
.1000	4c 03 10	jmp $1003			jmp 	WrapperBoot
.0022					codePtr:
>0022							.fill 	2
.0024					codePage:
>0024							.fill 	1
.0025					objPtr:
>0025							.fill 	2
.0027					objPage:
>0027							.fill 	1
.0028					zTemp0:
>0028							.fill 	2
.002a					zTemp1:
>002a							.fill 	2
.002c					zTemp2:
>002c							.fill 	2

;******  Processing input file: testing/testing.asm

.1003					WrapperBoot:
.1003	a9 32		lda #$32			lda 	#ObjectCode >> 8 			; address of object code to run.
.1005	a2 81		ldx #$81			ldx 	#$81 						; first page of allocatable memory
.1007	a0 9f		ldy #$9f			ldy 	#$9F 						; byte after end of last page.
.1009	4c 0c 10	jmp $100c			jmp 	StartRuntime

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/runtime.library

=$80					C64_END                  = $80 ; $80 end
=$81					C64_FOR                  = $81 ; $81 for
=$82					C64_NEXT                 = $82 ; $82 next
=$83					C64_DATA                 = $83 ; $83 data
=$84					C64_INPUTHASH            = $84 ; $84 input#
=$85					C64_INPUT                = $85 ; $85 input
=$86					C64_DIM                  = $86 ; $86 dim
=$87					C64_READ                 = $87 ; $87 read
=$88					C64_LET                  = $88 ; $88 let
=$89					C64_GOTO                 = $89 ; $89 goto
=$8a					C64_RUN                  = $8a ; $8a run
=$8b					C64_IF                   = $8b ; $8b if
=$8c					C64_RESTORE              = $8c ; $8c restore
=$8d					C64_GOSUB                = $8d ; $8d gosub
=$8e					C64_RETURN               = $8e ; $8e return
=$8f					C64_REM                  = $8f ; $8f rem
=$90					C64_STOP                 = $90 ; $90 stop
=$91					C64_ON                   = $91 ; $91 on
=$92					C64_WAIT                 = $92 ; $92 wait
=$93					C64_LOAD                 = $93 ; $93 load
=$94					C64_SAVE                 = $94 ; $94 save
=$95					C64_VERIFY               = $95 ; $95 verify
=$96					C64_DEF                  = $96 ; $96 def
=$97					C64_POKE                 = $97 ; $97 poke
=$98					C64_PRINTHASH            = $98 ; $98 print#
=$99					C64_PRINT                = $99 ; $99 print
=$9a					C64_CONT                 = $9a ; $9a cont
=$9b					C64_LIST                 = $9b ; $9b list
=$9c					C64_CLR                  = $9c ; $9c clr
=$9d					C64_CMD                  = $9d ; $9d cmd
=$9e					C64_SYS                  = $9e ; $9e sys
=$9f					C64_OPEN                 = $9f ; $9f open
=$a0					C64_CLOSE                = $a0 ; $a0 close
=$a1					C64_GET                  = $a1 ; $a1 get
=$a2					C64_NEW                  = $a2 ; $a2 new
=$a3					C64_TABLB                = $a3 ; $a3 tab(
=$a4					C64_TO                   = $a4 ; $a4 to
=$a5					C64_FN                   = $a5 ; $a5 fn
=$a6					C64_SPCLB                = $a6 ; $a6 spc(
=$a7					C64_THEN                 = $a7 ; $a7 then
=$a8					C64_NOT                  = $a8 ; $a8 not
=$a9					C64_STEP                 = $a9 ; $a9 step
=$aa					C64_PLUS                 = $aa ; $aa +
=$ab					C64_MINUS                = $ab ; $ab -
=$ac					C64_TIMES                = $ac ; $ac *
=$ad					C64_DIVIDE               = $ad ; $ad /
=$ae					C64_POWER                = $ae ; $ae ^
=$af					C64_AND                  = $af ; $af and
=$b0					C64_OR                   = $b0 ; $b0 or
=$b1					C64_GREATER              = $b1 ; $b1 >
=$b2					C64_EQUAL                = $b2 ; $b2 =
=$b3					C64_LESS                 = $b3 ; $b3 <
=$b4					C64_SGN                  = $b4 ; $b4 sgn
=$b5					C64_INT                  = $b5 ; $b5 int
=$b6					C64_ABS                  = $b6 ; $b6 abs
=$b7					C64_USR                  = $b7 ; $b7 usr
=$b8					C64_FRE                  = $b8 ; $b8 fre
=$b9					C64_POS                  = $b9 ; $b9 pos
=$ba					C64_SQR                  = $ba ; $ba sqr
=$bb					C64_RND                  = $bb ; $bb rnd
=$bc					C64_LOG                  = $bc ; $bc log
=$bd					C64_EXP                  = $bd ; $bd exp
=$be					C64_COS                  = $be ; $be cos
=$bf					C64_SIN                  = $bf ; $bf sin
=$c0					C64_TAN                  = $c0 ; $c0 tan
=$c1					C64_ATN                  = $c1 ; $c1 atn
=$c2					C64_PEEK                 = $c2 ; $c2 peek
=$c3					C64_LEN                  = $c3 ; $c3 len
=$c4					C64_STRDOLLAR            = $c4 ; $c4 str$
=$c5					C64_VAL                  = $c5 ; $c5 val
=$c6					C64_ASC                  = $c6 ; $c6 asc
=$c7					C64_CHRDOLLAR            = $c7 ; $c7 chr$
=$c8					C64_LEFTDOLLAR           = $c8 ; $c8 left$
=$c9					C64_RIGHTDOLLAR          = $c9 ; $c9 right$
=$ca					C64_MIDDOLLAR            = $ca ; $ca mid$
=$cb					C64_GO                   = $cb ; $cb go
=$ce80					C64_MON                  = $ce80 ; $ce80 mon
=$ce81					C64_DOS                  = $ce81 ; $ce81 dos
=$ce82					C64_OLD                  = $ce82 ; $ce82 old
=$ce83					C64_GEOS                 = $ce83 ; $ce83 geos
=$ce84					C64_VPOKE                = $ce84 ; $ce84 vpoke
=$ce85					C64_VLOAD                = $ce85 ; $ce85 vload
=$ce86					C64_SCREEN               = $ce86 ; $ce86 screen
=$ce87					C64_PSET                 = $ce87 ; $ce87 pset
=$ce88					C64_LINE                 = $ce88 ; $ce88 line
=$ce89					C64_FRAME                = $ce89 ; $ce89 frame
=$ce8a					C64_RECT                 = $ce8a ; $ce8a rect
=$ce8b					C64_CHAR                 = $ce8b ; $ce8b char
=$ce8c					C64_MOUSE                = $ce8c ; $ce8c mouse
=$ce8d					C64_COLOR                = $ce8d ; $ce8d color
=$ce8e					C64_TEST                 = $ce8e ; $ce8e test
=$ce8f					C64_RESET                = $ce8f ; $ce8f reset
=$ce90					C64_CLS                  = $ce90 ; $ce90 cls
=$ce91					C64_CODEX                = $ce91 ; $ce91 codex
=$ce92					C64_LOCATE               = $ce92 ; $ce92 locate
=$ce93					C64_BOOT                 = $ce93 ; $ce93 boot
=$ce94					C64_KEYMAP               = $ce94 ; $ce94 keymap
=$ce95					C64_BLOAD                = $ce95 ; $ce95 bload
=$ce96					C64_BVLOAD               = $ce96 ; $ce96 bvload
=$ce97					C64_BVERIFY              = $ce97 ; $ce97 bverify
=$ce98					C64_BANK                 = $ce98 ; $ce98 bank
=$ce99					C64_FMINIT               = $ce99 ; $ce99 fminit
=$ce9a					C64_FMNOTE               = $ce9a ; $ce9a fmnote
=$ce9b					C64_FMDRUM               = $ce9b ; $ce9b fmdrum
=$ce9c					C64_FMINST               = $ce9c ; $ce9c fminst
=$ce9d					C64_FMVIB                = $ce9d ; $ce9d fmvib
=$ce9e					C64_FMFREQ               = $ce9e ; $ce9e fmfreq
=$ce9f					C64_FMVOL                = $ce9f ; $ce9f fmvol
=$cea0					C64_FMPAN                = $cea0 ; $cea0 fmpan
=$cea1					C64_FMPLAY               = $cea1 ; $cea1 fmplay
=$cea2					C64_FMCHORD              = $cea2 ; $cea2 fmchord
=$cea3					C64_FMPOKE               = $cea3 ; $cea3 fmpoke
=$cea4					C64_PSGINIT              = $cea4 ; $cea4 psginit
=$cea5					C64_PSGNOTE              = $cea5 ; $cea5 psgnote
=$cea6					C64_PSGVOL               = $cea6 ; $cea6 psgvol
=$cea7					C64_PSGWAV               = $cea7 ; $cea7 psgwav
=$cea8					C64_PSGFREQ              = $cea8 ; $cea8 psgfreq
=$cea9					C64_PSGPAN               = $cea9 ; $cea9 psgpan
=$ceaa					C64_PSGPLAY              = $ceaa ; $ceaa psgplay
=$ceab					C64_PSGCHORD             = $ceab ; $ceab psgchord
=$ceac					C64_REBOOT               = $ceac ; $ceac reboot
=$cead					C64_POWEROFF             = $cead ; $cead poweroff
=$ceae					C64_I2CPOKE              = $ceae ; $ceae i2cpoke
=$ceaf					C64_SLEEP                = $ceaf ; $ceaf sleep
=$ceb0					C64_BSAVE                = $ceb0 ; $ceb0 bsave
=$ceb1					C64_MENU                 = $ceb1 ; $ceb1 menu
=$ceb2					C64_REN                  = $ceb2 ; $ceb2 ren
=$ceb3					C64_LINPUT               = $ceb3 ; $ceb3 linput
=$ceb4					C64_LINPUTHASH           = $ceb4 ; $ceb4 linput#
=$ceb5					C64_BINPUTHASH           = $ceb5 ; $ceb5 binput#
=$ceb6					C64_HELP                 = $ceb6 ; $ceb6 help
=$ced0					C64_VPEEK                = $ced0 ; $ced0 vpeek
=$ced1					C64_MX                   = $ced1 ; $ced1 mx
=$ced2					C64_MY                   = $ced2 ; $ced2 my
=$ced3					C64_MB                   = $ced3 ; $ced3 mb
=$ced4					C64_JOY                  = $ced4 ; $ced4 joy
=$ced5					C64_HEXDOLLAR            = $ced5 ; $ced5 hex$
=$ced6					C64_BINDOLLAR            = $ced6 ; $ced6 bin$
=$ced7					C64_I2CPEEK              = $ced7 ; $ced7 i2cpeek
=$ced8					C64_POINTER              = $ced8 ; $ced8 pointer
=$ced9					C64_STRPTR               = $ced9 ; $ced9 strptr
=$ceda					C64_RPTDOLLAR            = $ceda ; $ceda rpt$
.002e					zsTemp:
>002e							.fill 	2
.0030					runtimeStackPtr:
>0030							.fill 	2
.0400					stringLowMemory:
>0400							.fill 	2
.0402					stringHighMemory:
>0402							.fill 	2
=$e4					FRAME_GOSUB = $E4 							; Gosub has 4 bytes
=211					FRAME_FOR = $C0+19 							; For has 19 bytes
=$80					PCD_STARTBINARY = $80
=$8d					PCD_ENDBINARY = $8d
=$8d					PCD_STARTCOMMAND = $8d
=$ca					PCD_ENDCOMMAND = $ca
=$ca					PCD_STARTSYSTEM = $ca
=$d5					PCD_ENDSYSTEM = $d5
=$80					PCD_PLUS             = $80 ; +
=$81					PCD_MINUS            = $81 ; -
=$82					PCD_TIMES            = $82 ; *
=$83					PCD_DIVIDE           = $83 ; /
=$84					PCD_POWER            = $84 ; ^
=$85					PCD_AND              = $85 ; and
=$86					PCD_OR               = $86 ; or
=$87					PCD_GREATER          = $87 ; >
=$88					PCD_EQUAL            = $88 ; =
=$89					PCD_LESS             = $89 ; <
=$8a					PCD_GREATEREQUAL     = $8a ; >=
=$8b					PCD_LESSGREATER      = $8b ; <>
=$8c					PCD_LESSEQUAL        = $8c ; <=
=$8d					PCD_ABS              = $8d ; abs
=$8e					PCD_ARRAY            = $8e ; array
=$8f					PCD_ASC              = $8f ; asc
=$90					PCD_ASSERT           = $90 ; assert
=$91					PCD_BINDOLLAR        = $91 ; bin$
=$92					PCD_PRINTCMD_CHR     = $92 ; print.chr
=$93					PCD_CHRDOLLAR        = $93 ; chr$
=$94					PCD_SCMD_CMP         = $94 ; s.cmp
=$95					PCD_FOR              = $95 ; for
=$96					PCD_FRE              = $96 ; fre
=$97					PCD_GET              = $97 ; get
=$98					PCD_RETURN           = $98 ; return
=$99					PCD_PSET             = $99 ; pset
=$9a					PCD_LINE             = $9a ; line
=$9b					PCD_RECT             = $9b ; rect
=$9c					PCD_FRAME            = $9c ; frame
=$9d					PCD_CHAR             = $9d ; char
=$9e					PCD_HEXDOLLAR        = $9e ; hex$
=$9f					PCD_INPUT            = $9f ; input
=$a0					PCD_INPUTDOLLAR      = $a0 ; input$
=$a1					PCD_INPUTCMD_START   = $a1 ; input.start
=$a2					PCD_LEN              = $a2 ; len
=$a3					PCD_FCMD_CMP         = $a3 ; f.cmp
=$a4					PCD_INTCMD_DIV       = $a4 ; int.div
=$a5					PCD_NEGATE           = $a5 ; negate
=$a6					PCD_NEWCMD_LINE      = $a6 ; new.line
=$a7					PCD_NEXT             = $a7 ; next
=$a8					PCD_NOT              = $a8 ; not
=$a9					PCD_ON               = $a9 ; on
=$aa					PCD_MOREON           = $aa ; moreon
=$ab					PCD_PEEK             = $ab ; peek
=$ac					PCD_POKE             = $ac ; poke
=$ad					PCD_POS              = $ad ; pos
=$ae					PCD_GETCHANNEL       = $ae ; getchannel
=$af					PCD_SETCHANNEL       = $af ; setchannel
=$b0					PCD_PRINTCMD_N       = $b0 ; print.n
=$b1					PCD_PRINTCMD_S       = $b1 ; print.s
=$b2					PCD_READ             = $b2 ; read
=$b3					PCD_READDOLLAR       = $b3 ; read$
=$b4					PCD_RND              = $b4 ; rnd
=$b5					PCD_CONCAT           = $b5 ; concat
=$b6					PCD_SGN              = $b6 ; sgn
=$b7					PCD_PRINTCMD_TAB     = $b7 ; print.tab
=$b8					PCD_PRINTCMD_POS     = $b8 ; print.pos
=$b9					PCD_PRINTCMD_SPC     = $b9 ; print.spc
=$ba					PCD_STRDOLLAR        = $ba ; str$
=$bb					PCD_LEFTDOLLAR       = $bb ; left$
=$bc					PCD_RIGHTDOLLAR      = $bc ; right$
=$bd					PCD_MIDDOLLAR        = $bd ; mid$
=$be					PCD_SWAP             = $be ; swap
=$bf					PCD_TI               = $bf ; ti
=$c0					PCD_TIDOLLAR         = $c0 ; ti$
=$c1					PCD_USR              = $c1 ; usr
=$c2					PCD_VAL              = $c2 ; val
=$c3					PCD_CLOSE            = $c3 ; close
=$c4					PCD_EXIT             = $c4 ; exit
=$c5					PCD_DEBUG            = $c5 ; debug
=$c6					PCD_OPEN             = $c6 ; open
=$c7					PCD_SCREEN           = $c7 ; screen
=$c8					PCD_VPOKE            = $c8 ; vpoke
=$c9					PCD_VPEEK            = $c9 ; vpeek
=$ca					PCD_CMD_SHIFT        = $ca ; .shift
=$cb					PCD_CMD_BYTE         = $cb ; .byte
=$cc					PCD_CMD_WORD         = $cc ; .word
=$cd					PCD_CMD_FLOAT        = $cd ; .float
=$ce					PCD_CMD_STRING       = $ce ; .string
=$cf					PCD_CMD_DATA         = $cf ; .data
=$d0					PCD_CMD_GOTO         = $d0 ; .goto
=$d1					PCD_CMD_GOSUB        = $d1 ; .gosub
=$d2					PCD_CMD_GOTOCMD_Z    = $d2 ; .goto.z
=$d3					PCD_CMD_GOTOCMD_NZ   = $d3 ; .goto.nz
=$d4					PCD_CMD_VARSPACE     = $d4 ; .varspace
=$ca80					PCD_CLR              = $ca80 ; clr
=$ca81					PCD_DIM              = $ca81 ; dim
=$ca82					PCD_END              = $ca82 ; end
=$ca83					PCD_JOY              = $ca83 ; joy
=$ca84					PCD_INT              = $ca84 ; int
=$ca85					PCD_SQR              = $ca85 ; sqr
=$ca86					PCD_LOG              = $ca86 ; log
=$ca87					PCD_EXP              = $ca87 ; exp
=$ca88					PCD_COS              = $ca88 ; cos
=$ca89					PCD_SIN              = $ca89 ; sin
=$ca8a					PCD_TAN              = $ca8a ; tan
=$ca8b					PCD_ATN              = $ca8b ; atn
=$ca8c					PCD_MOUSE            = $ca8c ; mouse
=$ca8d					PCD_MB               = $ca8d ; mb
=$ca8e					PCD_MX               = $ca8e ; mx
=$ca8f					PCD_MY               = $ca8f ; my
=$ca90					PCD_RESTORE          = $ca90 ; restore
=$ca91					PCD_STOP             = $ca91 ; stop
=$ca92					PCD_SYS              = $ca92 ; sys
=$ca93					PCD_TIDOLLARCMD_WRITE = $ca93 ; ti$.write
=$ca94					PCD_WAIT             = $ca94 ; wait
=$ca95					PCD_I2CPOKE          = $ca95 ; i2cpoke
=$ca96					PCD_I2CPEEK          = $ca96 ; i2cpeek
=$ca97					PCD_BANK             = $ca97 ; bank
=$ca98					PCD_SLEEP            = $ca98 ; sleep
=$ca99					PCD_FMINIT           = $ca99 ; fminit
=$ca9a					PCD_FMNOTE           = $ca9a ; fmnote
=$ca9b					PCD_FMDRUM           = $ca9b ; fmdrum
=$ca9c					PCD_FMINST           = $ca9c ; fminst
=$ca9d					PCD_FMVIB            = $ca9d ; fmvib
=$ca9e					PCD_FMFREQ           = $ca9e ; fmfreq
=$ca9f					PCD_FMVOL            = $ca9f ; fmvol
=$caa0					PCD_FMPAN            = $caa0 ; fmpan
=$caa1					PCD_FMPLAY           = $caa1 ; fmplay
=$caa2					PCD_FMCHORD          = $caa2 ; fmchord
=$caa3					PCD_FMPOKE           = $caa3 ; fmpoke
=$caa4					PCD_PSGINIT          = $caa4 ; psginit
=$caa5					PCD_PSGNOTE          = $caa5 ; psgnote
=$caa6					PCD_PSGVOL           = $caa6 ; psgvol
=$caa7					PCD_PSGWAV           = $caa7 ; psgwav
=$caa8					PCD_PSGFREQ          = $caa8 ; psgfreq
=$caa9					PCD_PSGPAN           = $caa9 ; psgpan
=$caaa					PCD_PSGPLAY          = $caaa ; psgplay
=$caab					PCD_PSGCHORD         = $caab ; psgchord
=$caac					PCD_CLS              = $caac ; cls
=$caad					PCD_LOCATE           = $caad ; locate
=$caae					PCD_COLOR            = $caae ; color
=$9f20					VRAMLow0 = $9F20
=$9f21					VRAMMed0 = $9F21
=$9f22					VRAMHigh0 = $9F22
=$9f23					VRAMData0 = $9F23
=$c09f					X16A_audio_init=$C09F
=$c08d					X16A_bas_fmchordstring=$C08D
=$c000					X16A_bas_fmfreq=$C000
=$c003					X16A_bas_fmnote=$C003
=$c006					X16A_bas_fmplaystring=$C006
=$c009					X16A_bas_fmvib=$C009
=$c00c					X16A_bas_playstringvoice=$C00C
=$c090					X16A_bas_psgchordstring=$C090
=$c00f					X16A_bas_psgfreq=$C00F
=$c012					X16A_bas_psgnote=$C012
=$c015					X16A_bas_psgwav=$C015
=$c018					X16A_bas_psgplaystring=$C018
=$c01b					X16A_notecon_bas2fm=$C01B
=$c01e					X16A_notecon_bas2midi=$C01E
=$c021					X16A_notecon_bas2psg=$C021
=$c024					X16A_notecon_fm2bas=$C024
=$c027					X16A_notecon_fm2midi=$C027
=$c02a					X16A_notecon_fm2psg=$C02A
=$c02d					X16A_notecon_freq2bas=$C02D
=$c030					X16A_notecon_freq2fm=$C030
=$c033					X16A_notecon_freq2midi=$C033
=$c036					X16A_notecon_freq2psg=$C036
=$c039					X16A_notecon_midi2bas=$C039
=$c03c					X16A_notecon_midi2fm=$C03C
=$c03f					X16A_notecon_midi2psg=$C03F
=$c042					X16A_notecon_psg2bas=$C042
=$c045					X16A_notecon_psg2fm=$C045
=$c048					X16A_notecon_psg2midi=$C048
=$c093					X16A_psg_getatten=$C093
=$c096					X16A_psg_getpan=$C096
=$c04b					X16A_psg_init=$C04B
=$c04e					X16A_psg_playfreq=$C04E
=$c051					X16A_psg_read=$C051
=$c054					X16A_psg_setatten=$C054
=$c057					X16A_psg_setfreq=$C057
=$c05a					X16A_psg_setpan=$C05A
=$c05d					X16A_psg_setvol=$C05D
=$c060					X16A_psg_write=$C060
=$c0a2					X16A_psg_write_fast=$C0A2
=$c099					X16A_ym_getatten=$C099
=$c09c					X16A_ym_getpan=$C09C
=$c063					X16A_ym_init=$C063
=$c066					X16A_ym_loaddefpatches=$C066
=$c069					X16A_ym_loadpatch=$C069
=$c06c					X16A_ym_loadpatchlfn=$C06C
=$c06f					X16A_ym_playdrum=$C06F
=$c072					X16A_ym_playnote=$C072
=$c075					X16A_ym_setatten=$C075
=$c078					X16A_ym_setdrum=$C078
=$c07b					X16A_ym_setnote=$C07B
=$c07e					X16A_ym_setpan=$C07E
=$c081					X16A_ym_read=$C081
=$c084					X16A_ym_release=$C084
=$c087					X16A_ym_trigger=$C087
=$c08a					X16A_ym_write=$C08A
=2					X16_r0 = 2
=4					X16_r1 = 4
=6					X16_r2 = 6
=8					X16_r3 = 8
=10					X16_r4 = 10
=$ffa5					X16_ACPTR=$FFA5
=$ffcf					X16_BASIN=$FFCF
=$feba					X16_BSAVE=$FEBA
=$ffd2					X16_BSOUT=$FFD2
=$ffa8					X16_CIOUT=$FFA8
=$ffe7					X16_CLALL=$FFE7
=$ffc3					X16_CLOSE=$FFC3
=$ffc6					X16_CHKIN=$FFC6
=$ffc9					X16_CHKOUT=$FFC9
=$ff50					X16_clock_get_date_time=$FF50
=$ff4d					X16_clock_set_date_time=$FF4D
=$ffcf					X16_CHRIN=$FFCF
=$ffd2					X16_CHROUT=$FFD2
=$ff4a					X16_CLOSE_ALL=$FF4A
=$ffcc					X16_CLRCHN=$FFCC
=$fedb					X16_console_init=$FEDB
=$fee1					X16_console_get_char=$FEE1
=$fede					X16_console_put_char=$FEDE
=$fed8					X16_console_put_image=$FED8
=$fed5					X16_console_set_paging_message=$FED5
=$ff47					X16_enter_basic=$FF47
=$fecf					X16_entropy_get=$FECF
=$ff74					X16_fetch=$FF74
=$ff02					X16_FB_cursor_next_line=$FF02
=$feff					X16_FB_cursor_position=$FEFF
=$ff17					X16_FB_fill_pixels=$FF17
=$ff1a					X16_FB_filter_pixels=$FF1A
=$fef9					X16_FB_get_info=$FEF9
=$ff05					X16_FB_get_pixel=$FF05
=$ff08					X16_FB_get_pixels=$FF08
=$fef6					X16_FB_init=$FEF6
=$ff1d					X16_FB_move_pixels=$FF1D
=$ff11					X16_FB_set_8_pixels=$FF11
=$ff14					X16_FB_set_8_pixels_opaque=$FF14
=$fefc					X16_FB_set_palette=$FEFC
=$ff0b					X16_FB_set_pixel=$FF0B
=$ff0e					X16_FB_set_pixels=$FF0E
=$ffe4					X16_GETIN=$FFE4
=$ff23					X16_GRAPH_clear=$FF23
=$ff38					X16_GRAPH_draw_image=$FF38
=$ff2c					X16_GRAPH_draw_line=$FF2C
=$ff35					X16_GRAPH_draw_oval=$FF35
=$ff2f					X16_GRAPH_draw_rect=$FF2F
=$ff3e					X16_GRAPH_get_char_size=$FF3E
=$ff20					X16_GRAPH_init=$FF20
=$ff32					X16_GRAPH_move_rect=$FF32
=$ff41					X16_GRAPH_put_char=$FF41
=$ff29					X16_GRAPH_set_colors=$FF29
=$ff3b					X16_GRAPH_set_font=$FF3B
=$ff26					X16_GRAPH_set_window=$FF26
=$fec6					X16_i2c_read_byte=$FEC6
=$fec9					X16_i2c_write_byte=$FEC9
=$fff3					X16_IOBASE=$FFF3
=$ff6e					X16_JSRFAR=$FF6E
=$ff56					X16_joystick_get=$FF56
=$ff53					X16_joystick_scan=$FF53
=$fec0					X16_kbdbuf_get_modifiers=$FEC0
=$febd					X16_kbdbuf_peek=$FEBD
=$fec3					X16_kbdbuf_put=$FEC3
=$fed2					X16_keymap=$FED2
=$ffb1					X16_LISTEN=$FFB1
=$ff59					X16_LKUPLA=$FF59
=$ff5c					X16_LKUPSA=$FF5C
=$ffd5					X16_LOAD=$FFD5
=$ff44					X16_MACPTR=$FF44
=$ff9c					X16_MEMBOT=$FF9C
=$fee7					X16_memory_copy=$FEE7
=$feea					X16_memory_crc=$FEEA
=$feed					X16_memory_decompress=$FEED
=$fee4					X16_memory_fill=$FEE4
=$ff99					X16_MEMTOP=$FF99
=$fecc					X16_monitor=$FECC
=$ff68					X16_mouse_config=$FF68
=$ff6b					X16_mouse_get=$FF6B
=$ff71					X16_mouse_scan=$FF71
=$ffc0					X16_OPEN=$FFC0
=$ff65					X16_PFKEY=$FF65
=$fff0					X16_PLOT=$FFF0
=$ff7d					X16_PRIMM=$FF7D
=$ffde					X16_RDTIM=$FFDE
=$ffb7					X16_READST=$FFB7
=$ffd8					X16_SAVE=$FFD8
=$ffed					X16_SCREEN=$FFED
=$ff5f					X16_screen_mode=$FF5F
=$ff62					X16_screen_set_charset=$FF62
=$ff93					X16_SECOND=$FF93
=$ffba					X16_SETLFS=$FFBA
=$ff90					X16_SETMSG=$FF90
=$ffbd					X16_SETNAM=$FFBD
=$ffdb					X16_SETTIM=$FFDB
=$ffa2					X16_SETTMO=$FFA2
=$fef0					X16_sprite_set_image=$FEF0
=$fef3					X16_sprite_set_position=$FEF3
=$ff77					X16_stash=$FF77
=$ffe1					X16_STOP=$FFE1
=$ffb4					X16_TALK=$FFB4
=$ff96					X16_TKSA=$FF96
=$ffea					X16_UDTIM=$FFEA
=$ffae					X16_UNLSN=$FFAE
=$ffab					X16_UNTLK=$FFAB
=$311					USRRoutineAddress = $311
=$30c					SYS_Reg_A = $30C
=$30d					SYS_Reg_X = $30D
=$30e					SYS_Reg_Y = $30E
=$30f					SYS_Reg_S = $30F
=0					SelectRAMBank = 0
=1					SelectROMBank = 1
=$0a					X16_AudioCodeBank = $0A
.100c					StartRuntime:
.100c	8d 04 04	sta $0404			sta 	runtimeHigh 				; save address of code.
.100f	85 23		sta $23				sta 	codePtr+1 					; set pointer to code.
.1011	64 22		stz $22				stz 	codePtr
.1013	64 24		stz $24				stz 	codePage 					; zero current page.
.1015	8e 05 04	stx $0405			stx 	storeStartHigh 				; save from-to address.
.1018	8c 06 04	sty $0406			sty 	storeEndHigh
.101b	8e 07 04	stx $0407			stx 	variableStartPage
.101e	20 50 12	jsr $1250			jsr 	ClearMemory 				; clear memory.
.1021	20 c1 1f	jsr $1fc1			jsr 	XRuntimeSetup 				; initialise the runtime stuff.
.1024	20 c3 1c	jsr $1cc3		 	jsr		SetDefaultChannel			; set default input/output channel.
.1027	20 f9 1e	jsr $1ef9			jsr 	RestoreCode 				; which we now call
.102a	a0 00		ldy #$00			ldy 	#0
.102c					NextCommand:
.102c	b1 22		lda ($22),y			lda 	(codePtr),y 				; get next
.102e	30 5b		bmi $108b			bmi 	NXCommand 					; -if -ve command
.1030	c8		iny				iny
.1031	c9 40		cmp #$40			cmp 	#64 						; 64..127 is load and store.
.1033	90 39		bcc $106e			bcc 	PushByteA 					; 0..63 is short constants.
.1035					NXLoadStore:
.1035	c9 78		cmp #$78			cmp		#120 						; is it an indirect read/write
.1037	b0 19		bcs $1052			bcs 	NXIndirectLoadStore
.1039	4a		lsr a				lsr 	a 							; / 4, so $48 => $12,
.103a	4a		lsr a				lsr 	a
.103b	29 0e		and #$0e			and 	#$0E
.103d	da		phx				phx 								; get ready to jump
.103e	aa		tax				tax
.103f	7c 42 10	jmp ($1042,x)			jmp 	(ReadWriteVectors,x) 		; go via the jump table.
.1042					ReadWriteVectors:
>1042	2f 1e						.word 	ReadFloatCommand			; read float
>1044	0a 24						.word 	WriteFloatCommand 			; write float
>1046	6b 1e						.word 	ReadIntegerCommand 			; read integer
>1048	46 24						.word 	WriteIntegerCommand 		; write integer
>104a	b0 1e						.word 	ReadStringCommand 			; read string
>104c	85 24						.word 	WriteStringCommand 			; write string
>104e	1e 14						.word 	Unimplemented
>1050	1e 14						.word 	Unimplemented
.1052					NXIndirectLoadStore:
.1052	29 07		and #$07			and 	#7
.1054	0a		asl a				asl 	a
.1055	da		phx				phx
.1056	aa		tax				tax
.1057	7c 5a 10	jmp ($105a,x)			jmp 	(IndirectVectors,x)
.105a					IndirectVectors:
>105a	4e 18						.word 	IndFloatRead 				; float read
>105c	62 18						.word 	IndInt16Read 				; int16 read
>105e	76 18						.word 	IndStringRead 				; string read
>1060	1e 14						.word 	Unimplemented
>1062	8a 18						.word 	IndFloatWrite				; float write
>1064	9e 18						.word 	IndInt16Write 				; int16 write
>1066	b2 18						.word 	IndStringWrite 				; string write
>1068	1e 14						.word 	Unimplemented
.106a					PushByteCommand:
.106a	fa		plx				plx
.106b	b1 22		lda ($22),y			lda 	(codePtr),y 				; get byte to write.
.106d	c8		iny				iny
.106e					PushByteA:
.106e	e8		inx				inx 								; push constant on stack
.106f	95 40		sta $40,x			sta 	NSMantissa0,x 				; save byte
.1071	74 4c		stz $4c,x			stz 	NSMantissa1,x 				; clear MSB
.1073					ClearRestWord:
.1073	74 58		stz $58,x			stz 	NSMantissa2,x 				; zero upper bytes, exponent, make iFloat32
.1075	74 64		stz $64,x			stz 	NSMantissa3,x
.1077	74 70		stz $70,x			stz 	NSExponent,x
.1079	74 34		stz $34,x			stz 	NSStatus,x
.107b	80 af		bra $102c			bra 	NextCommand
.107d					PushWordCommand:
.107d	fa		plx				plx
.107e	e8		inx				inx
.107f	b1 22		lda ($22),y			lda 	(codePtr),y 				; word to stack
.1081	c8		iny				iny
.1082	95 40		sta $40,x			sta 	NSMantissa0,x
.1084	b1 22		lda ($22),y			lda 	(codePtr),y
.1086	c8		iny				iny
.1087	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1089	80 e8		bra $1073			bra 	ClearRestWord 				; handle everything else.
.108b					NXCommand:
.108b	c8		iny				iny 								; consume command.
.108c	10 03		bpl $1091			bpl 	_NXCommandNoFixUp
.108e	20 97 10	jsr $1097			jsr 	FixUpY
.1091					_NXCommandNoFixUp:
.1091	0a		asl a				asl 	a 							; shift left
.1092	da		phx				phx 								; save SP on stack
.1093	aa		tax				tax				 					; and jump indirect
.1094	7c eb 22	jmp ($22eb,x)			jmp 	(VectorTable,x)
.1097					FixUpY:
.1097	48		pha				pha
.1098	98		tya				tya
.1099	18		clc				clc
.109a	65 22		adc $22				adc 	codePtr
.109c	85 22		sta $22				sta 	codePtr
.109e	90 02		bcc $10a2			bcc 	_NoCPCarry
.10a0	e6 23		inc $23				inc 	codePtr+1
.10a2					_NoCPCarry:
.10a2	a0 00		ldy #$00			ldy 	#0
.10a4	68		pla				pla
.10a5	60		rts				rts
.0404					runtimeHigh:
>0404							.fill 	1
.0405					storeStartHigh:
>0405							.fill 	1
.0406					storeEndHigh:
>0406							.fill 	1
.0407					variableStartPage:
>0407							.fill 	1
.10a6					AbsoluteTOS:
.10a6	fa		plx				plx
.10a7	74 34		stz $34,x			stz 	NSStatus,x 					; dereferenced so just clear the status byte.
.10a9	4c 2c 10	jmp $102c			jmp 	NextCommand
.10ac					CommandVarSpace:
.10ac	fa		plx				plx
.10ad	b1 22		lda ($22),y			lda 	(codePtr),y					; 3 byte opcode, which is 'free' memory in variable area.
.10af	85 32		sta $32				sta 	availableMemory
.10b1	c8		iny				iny
.10b2	b1 22		lda ($22),y			lda 	(codePtr),y
.10b4	18		clc				clc
.10b5	6d 07 04	adc $0407			adc 	variableStartPage			; offset to actual address.
.10b8	85 33		sta $33				sta 	availableMemory+1
.10ba	c8		iny				iny
.10bb	4c 2c 10	jmp $102c			jmp 	NextCommand
.0032					availableMemory:
>0032							.fill 	2
.10be					BinaryAnd:
.10be	fa		plx				plx
.10bf	38		sec				sec
.10c0	80 02		bra $10c4			bra 	AndOrCommon
.10c2					BinaryOr:
.10c2	fa		plx				plx
.10c3	18		clc				clc
.10c4					AndOrCommon:
.10c4	08		php				php 								; save AND/OR flag
.10c5	20 89 19	jsr $1989			jsr 	GetInteger16Bit
.10c8	ca		dex				dex
.10c9	20 89 19	jsr $1989			jsr 	GetInteger16Bit
.10cc	28		plp				plp
.10cd	90 0e		bcc $10dd			bcc 	_AOCOrCode
.10cf	b5 40		lda $40,x			lda 	NSMantissa0,x 				; AND code
.10d1	35 41		and $41,x			and		NSMantissa0+1,x
.10d3	95 40		sta $40,x			sta 	NSMantissa0,x
.10d5	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.10d7	35 4d		and $4d,x			and		NSMantissa1+1,x
.10d9	95 4c		sta $4c,x			sta 	NSMantissa1,x
.10db	80 0c		bra $10e9			bra 	_AOCComplete
.10dd					_AOCOrCode:
.10dd	b5 40		lda $40,x			lda 	NSMantissa0,x 				; OR code
.10df	15 41		ora $41,x			ora		NSMantissa0+1,x
.10e1	95 40		sta $40,x			sta 	NSMantissa0,x
.10e3	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.10e5	15 4d		ora $4d,x			ora		NSMantissa1+1,x
.10e7	95 4c		sta $4c,x			sta 	NSMantissa1,x
.10e9					_AOCComplete:
.10e9	74 34		stz $34,x			stz 	NSStatus,x 					; make integer ?
.10eb	34 4c		bit $4c,x			bit 	NSMantissa1,x 				; result is -ve
.10ed	10 07		bpl $10f6			bpl 	_AOCExit
.10ef	20 99 19	jsr $1999			jsr 	Negate16Bit 				; 2's complement
.10f2	a9 80		lda #$80			lda 	#$80 						; make it -ve
.10f4	95 34		sta $34,x			sta 	NSStatus,x
.10f6					_AOCExit:
.10f6	4c 2c 10	jmp $102c			jmp 	NextCommand
.10f9					ArrayConvert:
.10f9	fa		plx				plx
.10fa	5a		phy				phy
.10fb	b5 40		lda $40,x			lda 	NSMantissa0,x
.10fd	85 2a		sta $2a				sta 	zTemp1
.10ff	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.1101	18		clc				clc
.1102	6d 07 04	adc $0407			adc 	variableStartPage
.1105	85 2b		sta $2b				sta 	zTemp1+1
.1107	ca		dex				dex 								; count of indices to follow -> zTemp2
.1108	20 83 19	jsr $1983			jsr 	GetInteger8Bit
.110b	85 2c		sta $2c				sta 	zTemp2 						; subtract from stack.
.110d	8a		txa				txa
.110e	38		sec				sec
.110f	e5 2c		sbc $2c				sbc 	zTemp2
.1111	aa		tax				tax
.1112	da		phx				phx 								; stack points at the first index, which will be replaced.
.1113					_ACIndexLoop:
.1113	20 57 2a	jsr $2a57			jsr 	FloatIntegerPart 			; integer array index
.1116	20 89 19	jsr $1989			jsr 	GetInteger16Bit 			; get the index => zTemp0
.1119	a0 01		ldy #$01			ldy 	#1 							; compare against the index count.
.111b	a5 28		lda $28				lda 	zTemp0
.111d	d2 2a		cmp ($2a)			cmp 	(zTemp1)
.111f	a5 29		lda $29				lda 	zTemp0+1
.1121	f1 2a		sbc ($2a),y			sbc 	(zTemp1),y
.1123	b0 79		bcs $119e			bcs 	_ACBadIndex 				; index error.
.1125	c6 2c		dec $2c				dec 	zTemp2 						; decrement count, if zero, then innermost level
.1127	f0 29		beq $1152			beq 	_ACInnerLevel
.1129	a0 02		ldy #$02			ldy 	#2 							; check sub index.
.112b	b1 2a		lda ($2a),y			lda 	(zTemp1),y
.112d	10 6f		bpl $119e			bpl 	_ACBadIndex
.112f	06 28		asl $28				asl 	zTemp0 						; double the index and add it to the base address
.1131	26 29		rol $29				rol 	zTemp0+1
.1133	18		clc				clc
.1134	a5 28		lda $28				lda		zTemp0
.1136	65 2a		adc $2a				adc 	zTemp1
.1138	85 28		sta $28				sta 	zTemp0
.113a	a5 29		lda $29				lda		zTemp0+1
.113c	65 2b		adc $2b				adc 	zTemp1+1
.113e	85 29		sta $29				sta 	zTemp0+1
.1140	a0 03		ldy #$03			ldy 	#3 							; we offset by 3 because 3 at entry, now get the address
.1142	b1 28		lda ($28),y			lda 	(zTemp0),y 					; into zTemp1 as a real address, not offset
.1144	85 2a		sta $2a				sta 	zTemp1
.1146	c8		iny				iny
.1147	b1 28		lda ($28),y			lda 	(zTemp0),y
.1149	18		clc				clc
.114a	6d 07 04	adc $0407			adc 	variableStartPage
.114d	85 2b		sta $2b				sta 	zTemp1+1
.114f	e8		inx				inx 								; next index
.1150	80 c1		bra $1113			bra 	_ACIndexLoop
.1152					_ACInnerLevel:
.1152	a0 02		ldy #$02			ldy 	#2
.1154	b1 2a		lda ($2a),y			lda 	(zTemp1),y
.1156	30 46		bmi $119e			bmi 	_ACBadIndex 				; it has sub arrays, so bad index.
.1158	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16 		; check if it is an iFloat
.115a	c9 00		cmp #$00			cmp 	#NSSIFloat
.115c	d0 13		bne $1171			bne 	_ACNotFloat
.115e	a5 29		lda $29				lda 	zTemp0+1 					; double and add zTemp0 (x3)
.1160	48		pha				pha
.1161	a5 28		lda $28				lda 	zTemp0
.1163	06 28		asl $28				asl 	zTemp0 						; x 2
.1165	26 29		rol $29				rol 	zTemp0+1
.1167	18		clc				clc 								; add back x 3
.1168	65 28		adc $28				adc 	zTemp0
.116a	85 28		sta $28				sta 	zTemp0
.116c	68		pla				pla
.116d	65 29		adc $29				adc 	zTemp0+1
.116f	85 29		sta $29				sta 	zTemp0+1
.1171					_ACNotFloat:
.1171	06 28		asl $28				asl 	zTemp0 						; x 2 or x 6 depending.
.1173	26 29		rol $29				rol 	zTemp0+1
.1175	18		clc				clc
.1176	a5 28		lda $28				lda 	zTemp0
.1178	69 03		adc #$03			adc 	#3
.117a	85 28		sta $28				sta 	zTemp0
.117c	90 02		bcc $1180			bcc 	_ACNoCarry
.117e	e6 29		inc $29				inc 	zTemp0+1
.1180					_ACNoCarry:
.1180	fa		plx				plx 								; X points to first slot of array parameters
.1181	18		clc				clc
.1182	a5 28		lda $28				lda 	zTemp0
.1184	65 2a		adc $2a				adc 	zTemp1
.1186	95 40		sta $40,x			sta 	NSMantissa0,x
.1188	a5 29		lda $29				lda 	zTemp0+1
.118a	65 2b		adc $2b				adc 	zTemp1+1
.118c	38		sec				sec
.118d	ed 07 04	sbc $0407			sbc 	variableStartPage
.1190	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1192	74 58		stz $58,x			stz 	NSMantissa2,x
.1194	74 64		stz $64,x			stz 	NSMantissa3,x
.1196	74 34		stz $34,x			stz 	NSStatus,x
.1198	74 70		stz $70,x			stz 	NSExponent,x
.119a	7a		ply				ply 	 							; restore code pointer
.119b	4c 2c 10	jmp $102c			jmp 	NextCommand
.119e					_ACBadIndex:
.119e	4c 75 15	jmp $1575		jmp	ErrorV_index
.11a1					UnaryAsc:
.11a1	fa		plx				plx
.11a2	5a		phy				phy
.11a3	b5 40		lda $40,x			lda 	NSMantissa0,x 				; string address.
.11a5	85 28		sta $28				sta 	zTemp0
.11a7	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.11a9	85 29		sta $29				sta 	zTemp0+1
.11ab	b2 28		lda ($28)			lda 	(zTemp0) 					; if empty string return zero
.11ad	f0 06		beq $11b5			beq 	_UAExit
.11af	5a		phy				phy 								; otherwise first character
.11b0	a0 01		ldy #$01			ldy 	#1
.11b2	b1 28		lda ($28),y			lda 	(zTemp0),y
.11b4	7a		ply				ply
.11b5					_UAExit:
.11b5	20 1e 2e	jsr $2e1e			jsr 	FloatSetByte
.11b8	7a		ply				ply
.11b9	4c 2c 10	jmp $102c			jmp 	NextCommand
.11bc					CommandAssert:
.11bc	fa		plx				plx
.11bd	e0 00		cpx #$00			cpx 	#0 							; check only one element on stack
.11bf	d0 09		bne $11ca			bne 	_CAFail
.11c1	20 3e 2e	jsr $2e3e			jsr 	FloatIsZero 				; is it zero ?
.11c4	f0 04		beq $11ca			beq 	_CAFail
.11c6	ca		dex				dex
.11c7	4c 2c 10	jmp $102c			jmp 	NextCommand
.11ca					_CAFail:
.11ca	4c ce 14	jmp $14ce		jmp	ErrorV_assert
.11cd					X16_Audio_Parameters8_16:
.11cd	20 d3 11	jsr $11d3			jsr 	X16_Audio_Parameters8_8
.11d0	a4 4d		ldy $4d				ldy 	NSMantissa1+1
.11d2	60		rts				rts
.11d3					X16_Audio_Parameters8_8:
.11d3	a2 01		ldx #$01			ldx 	#1
.11d5	20 57 2a	jsr $2a57			jsr 	FloatIntegerPart
.11d8	ca		dex				dex
.11d9	20 57 2a	jsr $2a57			jsr 	FloatIntegerPart
.11dc	20 83 19	jsr $1983			jsr 	GetInteger8Bit
.11df	a6 41		ldx $41				ldx 	NSMantissa0+1
.11e1	a0 00		ldy #$00			ldy 	#0
.11e3	60		rts				rts
.11e4					X16_Audio_Parameters8_String:
.11e4	20 cd 11	jsr $11cd			jsr 	X16_Audio_Parameters8_16 	; get as numbers.
.11e7	da		phx				phx 								; set the voice
.11e8	5a		phy				phy
.11e9	20 6e ff	jsr $ff6e			jsr 	X16_JSRFAR
.11ec	20 0c c0	jsr $c00c			jsr 	X16A_bas_playstringvoice
>11ef	0a						.byte 	X16_AudioCodeBank
.11f0	7a		ply				ply
.11f1	fa		plx				plx
.11f2	86 28		stx $28				stx 	zTemp0
.11f4	84 29		sty $29				sty 	zTemp0+1
.11f6	b2 28		lda ($28)			lda 	(zTemp0) 					; read length
.11f8	e8		inx				inx 								; point YX to first character.
.11f9	d0 01		bne $11fc			bne 	_X16APSSkip
.11fb	c8		iny				iny
.11fc					_X16APSSkip:
.11fc	60		rts				rts
.11fd					Unary16Bin:
.11fd	fa		plx				plx
.11fe	20 89 19	jsr $1989			jsr 	GetInteger16Bit				; 16 bit int
.1201	a9 10		lda #$10			lda 	#16 						; allocate / set 16 bytes.
.1203	20 6a 20	jsr $206a			jsr 	StringAllocTemp
.1206	a5 29		lda $29				lda 	zTemp0+1
.1208	f0 03		beq $120d			beq 	_UBNoHigh
.120a	20 15 12	jsr $1215			jsr 	_UBWriteBinary
.120d					_UBNoHigh:
.120d	a5 28		lda $28				lda 	zTemp0
.120f	20 15 12	jsr $1215			jsr 	_UBWriteBinary
.1212	4c 2c 10	jmp $102c			jmp 	NextCommand
.1215					_UBWriteBinary:
.1215	5a		phy				phy
.1216	a0 08		ldy #$08			ldy 	#8
.1218					_UBWLoop:
.1218	0a		asl a				asl 	a
.1219	48		pha				pha
.121a	a9 00		lda #$00			lda  	#0
.121c	69 30		adc #$30			adc 	#48
.121e	20 93 20	jsr $2093			jsr 	StringWriteChar
.1221	68		pla				pla
.1222	88		dey				dey
.1223	d0 f3		bne $1218			bne 	_UBWLoop
.1225	7a		ply				ply
.1226	60		rts				rts
.1227					PrintCharacter:
.1227	fa		plx				plx
.1228	b5 40		lda $40,x			lda 	NSMantissa0,x
.122a	ca		dex				dex
.122b	20 c7 1c	jsr $1cc7			jsr 	VectorPrintCharacter
.122e	4c 2c 10	jmp $102c			jmp 	NextCommand
.1231					UnaryChr:
.1231	fa		plx				plx
.1232	20 83 19	jsr $1983			jsr 	GetInteger8Bit 				; get integer to convert.
.1235	48		pha				pha 								; save it and allocate for it
.1236	a9 01		lda #$01			lda 	#1 							; 1 character
.1238	20 6a 20	jsr $206a			jsr 	StringAllocTemp
.123b	a9 01		lda #$01			lda 	#1 							; length 1.
.123d	92 2e		sta ($2e)			sta 	(zsTemp)
.123f	68		pla				pla 								; character code makes string.
.1240	5a		phy				phy
.1241	a0 01		ldy #$01			ldy 	#1
.1243	91 2e		sta ($2e),y			sta 	(zsTemp),y
.1245	7a		ply				ply
.1246	4c 2c 10	jmp $102c			jmp 	NextCommand
.1249					CommandClr:
.1249	fa		plx				plx
.124a	20 50 12	jsr $1250			jsr 	ClearMemory
.124d	4c 2c 10	jmp $102c			jmp 	NextCommand
.1250					ClearMemory:
.1250	ad 05 04	lda $0405			lda 	storeStartHigh 							; erase the work area
.1253	85 29		sta $29				sta 	zTemp0+1
.1255	64 28		stz $28				stz 	zTemp0
.1257	5a		phy				phy
.1258	a0 00		ldy #$00			ldy 	#0
.125a					_ClearLoop1:
.125a	a9 00		lda #$00			lda 	#0
.125c	91 28		sta ($28),y			sta 	(zTemp0),y
.125e	c8		iny				iny
.125f	d0 f9		bne $125a			bne 	_ClearLoop1
.1261	e6 29		inc $29				inc 	zTemp0+1
.1263	a5 29		lda $29				lda 	zTemp0+1
.1265	cd 06 04	cmp $0406			cmp 	storeEndHigh
.1268	d0 f0		bne $125a			bne 	_ClearLoop1
.126a	38		sec				sec 											; stack space = number of pages in total / 4
.126b	ad 06 04	lda $0406			lda 	storeEndHigh
.126e	ed 05 04	sbc $0405			sbc		storeStartHigh
.1271	4a		lsr a				lsr 	a
.1272	4a		lsr a				lsr 	a
.1273	d0 02		bne $1277			bne 	_NotEmpty 								; at least 1 !
.1275	a9 01		lda #$01			lda 	#1
.1277					_NotEmpty:
.1277	38		sec				sec 											; subtract from high to give string high memory
.1278	49 ff		eor #$ff			eor 	#$FF
.127a	6d 06 04	adc $0406			adc 	storeEndHigh
.127d	8d 03 04	sta $0403			sta 	stringHighMemory+1
.1280	9c 02 04	stz $0402			stz 	stringHighMemory
.1283	9c 68 05	stz $0568			stz 	stringInitialised 						; string system not initialised
.1286	ad 05 04	lda $0405			lda 	storeStartHigh 							; stack at end of start memory.
.1289	3a		dec a				dec 	a
.128a	85 31		sta $31				sta 	runtimeStackPtr+1
.128c	a9 ff		lda #$ff			lda 	#$FF
.128e	85 30		sta $30				sta 	runtimeStackPtr
.1290	a9 ff		lda #$ff			lda 	#$FF 									; duff marker in case we try to remove it.
.1292	92 30		sta ($30)			sta 	(runtimeStackPtr)
.1294	7a		ply				ply
.1295	60		rts				rts
.1296					CompareStrings:
.1296	fa		plx				plx
.1297	ca		dex				dex
.1298	b5 40		lda $40,x			lda 	NSMantissa0,x 				; copy strings to zTemp0 and zTemp1
.129a	85 28		sta $28				sta 	zTemp0
.129c	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.129e	85 29		sta $29				sta 	zTemp0+1
.12a0	b5 41		lda $41,x			lda 	NSMantissa0+1,x
.12a2	85 2a		sta $2a				sta 	zTemp1
.12a4	b5 4d		lda $4d,x			lda 	NSMantissa1+1,x
.12a6	85 2b		sta $2b				sta 	zTemp1+1
.12a8	da		phx				phx
.12a9	5a		phy				phy
.12aa	b2 28		lda ($28)			lda 	(zTemp0)					; work out number to compare
.12ac	d2 2a		cmp ($2a)			cmp 	(zTemp1)
.12ae	90 02		bcc $12b2			bcc 	_CSNIsSmallest 				; as min(len(s1),len(s2))
.12b0	b2 2a		lda ($2a)			lda 	(zTemp1)
.12b2					_CSNIsSmallest:
.12b2	aa		tax				tax 								; count in X
.12b3	f0 0c		beq $12c1			beq 	_CSNMatches 				; if zero already matches as far as we can go.
.12b5	a0 00		ldy #$00			ldy 	#0 							; start from offset 1
.12b7					_CSNCompareString:
.12b7	c8		iny				iny 								; pre increment
.12b8	b1 28		lda ($28),y			lda 	(zTemp0),y
.12ba	d1 2a		cmp ($2a),y			cmp 	(zTemp1),y
.12bc	d0 0a		bne $12c8			bne 	_CSNDifferent 				; numbers are different.
.12be	ca		dex				dex
.12bf	d0 f6		bne $12b7			bne 	_CSNCompareString 			; compare common characters in two strings.
.12c1					_CSNMatches:
.12c1	38		sec				sec
.12c2	b2 28		lda ($28)			lda 	(zTemp0)					; compare lengths
.12c4	f2 2a		sbc ($2a)			sbc 	(zTemp1)
.12c6	f0 06		beq $12ce			beq 	_CSNSExit 					; if zero, then strings match and exit.
.12c8					_CSNDifferent:
.12c8	a9 ff		lda #$ff			lda 	#$FF
.12ca	90 02		bcc $12ce			bcc 	_CSNSExit
.12cc	a9 01		lda #$01			lda 	#$01
.12ce					_CSNSExit:
.12ce	7a		ply				ply
.12cf	fa		plx				plx
.12d0	c9 00		cmp #$00			cmp 	#0 							; set the flags.
.12d2	20 1e 2e	jsr $2e1e			jsr 	FloatSetByte 				; output the byte
.12d5	4c 2c 10	jmp $102c			jmp 	NextCommand
.12d8					StringConcrete:
.12d8	9c 68 05	stz $0568			stz 	stringInitialised	 		; initialise next usage
.12db	84 2d		sty $2d				sty 	zTemp2+1 					; save pointer to new string
.12dd	85 2c		sta $2c				sta 	zTemp2
.12df	b2 2c		lda ($2c)			lda 	(zTemp2) 					; length required
.12e1	4a		lsr a				lsr 	a 							; allow half as much for expansion.
.12e2	18		clc				clc
.12e3	72 2c		adc ($2c)			adc 	(zTemp2)
.12e5	90 02		bcc $12e9			bcc 	_SCNoOverflow
.12e7	a9 ff		lda #$ff			lda 	#255
.12e9					_SCNoOverflow:
.12e9	c9 0a		cmp #$0a			cmp 	#10 						; and a minimum of 10
.12eb	b0 02		bcs $12ef			bcs 	_SCNoMinimum
.12ed	a9 0a		lda #$0a			lda 	#10
.12ef					_SCNoMinimum:
.12ef	85 2a		sta $2a				sta 	zTemp1 						; save max length.
.12f1	38		sec				sec
.12f2	ad 02 04	lda $0402			lda		stringHighMemory 			; subtract max length from high memory.
.12f5	e5 2a		sbc $2a				sbc 	zTemp1
.12f7	a8		tay				tay
.12f8	ad 03 04	lda $0403			lda 	stringHighMemory+1
.12fb	e9 00		sbc #$00			sbc 	#0
.12fd	48		pha				pha
.12fe	38		sec				sec 								; subtract 3 more
.12ff	98		tya				tya
.1300	e9 03		sbc #$03			sbc 	#3
.1302	8d 02 04	sta $0402			sta 	stringHighMemory 			; to string high memory/zsTemp
.1305	85 2e		sta $2e				sta 	zsTemp
.1307	68		pla				pla
.1308	e9 00		sbc #$00			sbc 	#0
.130a	8d 03 04	sta $0403			sta 	stringHighMemory+1
.130d	85 2f		sta $2f				sta 	zsTemp+1
.130f	a5 2a		lda $2a				lda 	zTemp1 						; set max length.
.1311	92 2e		sta ($2e)			sta 	(zsTemp)
.1313	a0 01		ldy #$01			ldy 	#1 							; clear control byte.
.1315	a9 00		lda #$00			lda 	#0
.1317	91 2e		sta ($2e),y			sta 	(zsTemp),y
.1319	a5 2e		lda $2e				lda 	zsTemp 						; new empty string in YA.
.131b	a4 2f		ldy $2f				ldy 	zsTemp+1
.131d	60		rts				rts
.131e					CommandData:
.131e	fa		plx				plx
.131f	98		tya				tya 								; data length +1 added to Y
.1320	38		sec				sec
.1321	71 22		adc ($22),y			adc 	(codePtr),y 				; next instruction
.1323	a8		tay				tay
.1324	4c 2c 10	jmp $102c			jmp 	NextCommand
.1327					CommandDIM:
.1327	fa		plx				plx
.1328	5a		phy				phy
.1329	20 83 19	jsr $1983			jsr 	GetInteger8Bit 				; get the type we are building for (bits 6 & 5)
.132c	8d 08 04	sta $0408			sta 	dimType
.132f	ca		dex				dex 								; this is the number of indices
.1330	20 83 19	jsr $1983			jsr 	GetInteger8Bit
.1333	85 2a		sta $2a				sta 	zTemp1 						; subtract n from X so X points at the *first*
.1335	8a		txa				txa 								; dimension.
.1336	38		sec				sec
.1337	e5 2a		sbc $2a				sbc 	zTemp1
.1339	aa		tax				tax
.133a	a5 2a		lda $2a				lda 	zTemp1 						; number of indices.
.133c	20 50 13	jsr $1350			jsr 	DIMCreateOneLevel 			; create one at this level
.133f	95 40		sta $40,x			sta 	NSMantissa0,x 				; set it as a return address as an integer
.1341	98		tya				tya
.1342	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1344	74 58		stz $58,x			stz 	NSMantissa2,x
.1346	74 64		stz $64,x			stz 	NSMantissa3,x
.1348	74 34		stz $34,x			stz 	NSStatus,x
.134a	74 70		stz $70,x			stz 	NSExponent,x
.134c	7a		ply				ply
.134d	4c 2c 10	jmp $102c			jmp 	NextCommand
.1350					DIMCreateOneLevel:
.1350	a4 32		ldy $32				ldy 	availableMemory 			; push the start of this block on the stack.
.1352	5a		phy				phy
.1353	a4 33		ldy $33				ldy 	availableMemory+1
.1355	5a		phy				phy
.1356	a8		tay				tay 			 					; save current level into Y
.1357	20 89 19	jsr $1989			jsr		GetInteger16Bit 			; size of dimension to zTemp0
.135a	e6 28		inc $28				inc 	zTemp0 						; bump the size of the dimension as we need one more
.135c	d0 02		bne $1360			bne 	_DCOLNoCarry
.135e	e6 29		inc $29				inc 	zTemp0+1
.1360					_DCOLNoCarry:
.1360	a5 28		lda $28				lda 	zTemp0 						; write out the +1 size of the dimension
.1362	20 03 14	jsr $1403			jsr 	DIMWriteByte
.1365	a5 29		lda $29				lda 	zTemp0+1
.1367	20 03 14	jsr $1403			jsr 	DIMWriteByte
.136a	ad 08 04	lda $0408			lda 	dimType 					; get type information
.136d	29 7f		and #$7f			and 	#$7F
.136f	c0 01		cpy #$01			cpy 	#1
.1371	f0 02		beq $1375			beq 	_DCOLNoSubLevel
.1373	09 80		ora #$80			ora 	#$80 						; set sublevel bit if there is one.
.1375					_DCOLNoSubLevel:
.1375	20 03 14	jsr $1403			jsr 	DIMWriteByte
.1378	a5 32		lda $32				lda 	availableMemory
.137a	85 2a		sta $2a				sta 	zTemp1
.137c	a5 33		lda $33				lda 	availableMemory+1
.137e	85 2b		sta $2b				sta 	zTemp1+1
.1380	a5 28		lda $28				lda 	zTemp0
.1382	85 2c		sta $2c				sta 	zTemp2
.1384	a5 29		lda $29				lda 	zTemp0+1
.1386	85 2d		sta $2d				sta 	zTemp2+1
.1388					_DCOLFillArray:
.1388	20 e7 13	jsr $13e7			jsr 	DIMWriteElement 			; write out an element, could be a sub-level or individual data
.138b	a5 28		lda $28				lda 	zTemp0 						; decrement one from count.
.138d	d0 02		bne $1391			bne 	_DCOLNoBorrow
.138f	c6 29		dec $29				dec 	zTemp0+1
.1391					_DCOLNoBorrow:
.1391	c6 28		dec $28				dec 	zTemp0
.1393	a5 28		lda $28				lda 	zTemp0 						; until completed.
.1395	05 29		ora $29				ora 	zTemp0+1
.1397	d0 ef		bne $1388			bne 	_DCOLFillArray
.1399	c0 01		cpy #$01			cpy 	#1
.139b	f0 42		beq $13df			beq 	_DCOLExit
.139d					_DCOLRecursionLoop:
.139d	da		phx				phx 								; save XY
.139e	5a		phy				phy
.139f	a5 2a		lda $2a				lda 	zTemp1 						; push zTemp1 (position) zTemp2 (count)
.13a1	48		pha				pha
.13a2	a5 2b		lda $2b				lda 	zTemp1+1
.13a4	48		pha				pha
.13a5	a5 2c		lda $2c				lda 	zTemp2
.13a7	48		pha				pha
.13a8	a5 2d		lda $2d				lda 	zTemp2+1
.13aa	48		pha				pha
.13ab	88		dey				dey  								; lower level -> A
.13ac	98		tya				tya
.13ad	e8		inx				inx 								; next index size
.13ae	20 50 13	jsr $1350			jsr 	DIMCreateOneLevel 			; create a level, return in YA
.13b1	fa		plx				plx 								; restore zTemp2 (count) and zTemp1 (position)
.13b2	86 2d		stx $2d				stx 	zTemp2+1
.13b4	fa		plx				plx
.13b5	86 2c		stx $2c				stx 	zTemp2
.13b7	fa		plx				plx
.13b8	86 2b		stx $2b				stx 	zTemp1+1
.13ba	fa		plx				plx
.13bb	86 2a		stx $2a				stx 	zTemp1
.13bd	92 2a		sta ($2a)			sta 	(zTemp1) 					; write out position
.13bf	98		tya				tya
.13c0	a0 01		ldy #$01			ldy 	#1
.13c2	91 2a		sta ($2a),y			sta 	(zTemp1),y
.13c4	7a		ply				ply 								; restore XY
.13c5	fa		plx				plx
.13c6	18		clc				clc
.13c7	a5 2a		lda $2a				lda 	zTemp1 						; add 2 to zTemp1
.13c9	69 02		adc #$02			adc 	#2
.13cb	85 2a		sta $2a				sta 	zTemp1
.13cd	90 02		bcc $13d1			bcc 	_DCOLRNoCarry
.13cf	e6 2b		inc $2b				inc 	zTemp1+1
.13d1					_DCOLRNoCarry:
.13d1	a5 2c		lda $2c				lda 	zTemp2 						; decrement one from count in zTemp2
.13d3	d0 02		bne $13d7			bne 	_DCOLRNoBorrow
.13d5	c6 2d		dec $2d				dec 	zTemp2+1
.13d7					_DCOLRNoBorrow:
.13d7	c6 2c		dec $2c				dec 	zTemp2
.13d9	a5 2c		lda $2c				lda 	zTemp2 						; until completed.
.13db	05 2d		ora $2d				ora 	zTemp2+1
.13dd	d0 be		bne $139d			bne 	_DCOLRecursionLoop
.13df					_DCOLExit:
.13df	68		pla				pla 								; get MSB, make offset again
.13e0	38		sec				sec
.13e1	ed 07 04	sbc $0407			sbc 	variableStartPage
.13e4	a8		tay				tay
.13e5	68		pla				pla 								; YA now contains offset address.
.13e6	60		rts				rts
.13e7					DIMWriteElement:
.13e7	da		phx				phx
.13e8	a2 02		ldx #$02			ldx	 	#2 							; work out size is 2 or 6
.13ea	c0 01		cpy #$01			cpy 	#1 							; do we have a sub level, if so 2.
.13ec	d0 0b		bne $13f9			bne 	_DIMWENotFloat
.13ee	ad 08 04	lda $0408			lda 	dimType
.13f1	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16
.13f3	c9 00		cmp #$00			cmp 	#NSSIFloat
.13f5	d0 02		bne $13f9			bne 	_DIMWENotFloat
.13f7	a2 06		ldx #$06			ldx 	#6
.13f9					_DIMWENotFloat:
.13f9	a9 00		lda #$00			lda 	#0
.13fb	20 03 14	jsr $1403			jsr 	DIMWriteByte
.13fe	ca		dex				dex
.13ff	d0 f8		bne $13f9			bne 	_DIMWENotFloat
.1401	fa		plx				plx
.1402	60		rts				rts
.1403					DIMWriteByte:
.1403	92 32		sta ($32)			sta 	(availableMemory)
.1405	e6 32		inc $32				inc 	availableMemory
.1407	d0 0b		bne $1414			bne 	_DIMWBSkip
.1409	e6 33		inc $33				inc 	availableMemory+1
.140b	48		pha				pha
.140c	a5 33		lda $33				lda 	availableMemory+1 			; check out of memory
.140e	cd 03 04	cmp $0403			cmp 	stringHighMemory+1
.1411	b0 02		bcs $1415			bcs 	_DIMWBMemory
.1413	68		pla				pla
.1414					_DIMWBSkip:
.1414	60		rts				rts
.1415					_DIMWBMemory:
.1415	4c 88 15	jmp $1588		jmp	ErrorV_memory
.0408					dimType:
>0408							.fill 	1
.1418					CommandEnd:
.1418	fa		plx				plx
.1419	86 28		stx $28				stx 	zTemp0
.141b	4c ff ff	jmp $ffff			jmp 	$FFFF
.141e					Unimplemented:
.141e	4c bb 14	jmp $14bb			jmp 	ErrorV_unimplemented
.1421					ErrorHandler:
.1421	98		tya				tya
.1422	18		clc				clc
.1423	65 22		adc $22				adc 	codePtr
.1425	85 22		sta $22				sta 	codePtr
.1427	90 02		bcc $142b			bcc 	_EHNoCarry
.1429	e6 23		inc $23				inc 	codePtr+1
.142b					_EHNoCarry:
.142b	68		pla				pla
.142c	7a		ply				ply
.142d	85 28		sta $28				sta 	zTemp0
.142f	84 29		sty $29				sty 	zTemp0+1
.1431	a2 00		ldx #$00			ldx 	#0 							; output to channel #0
.1433	a0 01		ldy #$01			ldy 	#1
.1435					_EHDisplayMsg:
.1435	b1 28		lda ($28),y			lda 	(zTemp0),y
.1437	20 df 25	jsr $25df			jsr 	XPrintCharacterToChannel
.143a	c8		iny				iny
.143b	b1 28		lda ($28),y			lda 	(zTemp0),y
.143d	d0 f6		bne $1435			bne 	_EHDisplayMsg
.143f	a9 20		lda #$20			lda 	#32
.1441	20 df 25	jsr $25df			jsr 	XPrintCharacterToChannel
.1444	a9 40		lda #$40			lda 	#64
.1446	20 df 25	jsr $25df			jsr 	XPrintCharacterToChannel
.1449	a9 20		lda #$20			lda 	#32
.144b	20 df 25	jsr $25df			jsr 	XPrintCharacterToChannel
.144e	20 53 14	jsr $1453			jsr 	EHDisplayCodePtr
.1451	80 fe		bra $1451	_EHStop:bra 	_EHStop
.1453					EHDisplayCodePtr:
.1453	a9 20		lda #$20			lda 	#32
.1455	20 df 25	jsr $25df			jsr 	XPrintCharacterToChannel
.1458	38		sec				sec
.1459	a5 23		lda $23				lda 	codePtr+1 					; display the p-code address of the error.
.145b	ed 04 04	sbc $0404			sbc 	runtimeHigh
.145e	20 67 14	jsr $1467			jsr 	_EHDisplayHex
.1461	a5 22		lda $22				lda 	codePtr
.1463	20 67 14	jsr $1467			jsr 	_EHDisplayHex
.1466	60		rts				rts
.1467					_EHDisplayHex:
.1467	48		pha				pha
.1468	4a		lsr a				lsr 	a
.1469	4a		lsr a				lsr 	a
.146a	4a		lsr a				lsr 	a
.146b	4a		lsr a				lsr 	a
.146c	20 70 14	jsr $1470			jsr 	_EHDisplayNibble
.146f	68		pla				pla
.1470					_EHDisplayNibble:
.1470	29 0f		and #$0f			and 	#15
.1472	c9 0a		cmp #$0a			cmp 	#10
.1474	90 02		bcc $1478			bcc 	_EHNotHex
.1476	69 06		adc #$06			adc 	#6
.1478					_EHNotHex:
.1478	69 30		adc #$30			adc 	#48
.147a	4c df 25	jmp $25df			jmp 	XPrintCharacterToChannel
.147d					ErrorV_range:
.147d	20 21 14	jsr $1421		jsr	ErrorHandler
>1480	4f 55 54 20 4f 46 20 52			.text	"OUT OF RANGE",0
>1488	41 4e 47 45 00
.148d					ErrorV_value:
.148d	20 21 14	jsr $1421		jsr	ErrorHandler
>1490	42 41 44 20 56 41 4c 55			.text	"BAD VALUE",0
>1498	45 00
.149a					ErrorV_syntax:
.149a	20 21 14	jsr $1421		jsr	ErrorHandler
>149d	53 59 4e 54 41 58 20 45			.text	"SYNTAX ERROR",0
>14a5	52 52 4f 52 00
.14aa					ErrorV_type:
.14aa	20 21 14	jsr $1421		jsr	ErrorHandler
>14ad	54 59 50 45 20 4d 49 53			.text	"TYPE MISMATCH",0
>14b5	4d 41 54 43 48 00
.14bb					ErrorV_unimplemented:
.14bb	20 21 14	jsr $1421		jsr	ErrorHandler
>14be	4e 4f 54 20 49 4d 50 4c			.text	"NOT IMPLEMENTED",0
>14c6	45 4d 45 4e 54 45 44 00
.14ce					ErrorV_assert:
.14ce	20 21 14	jsr $1421		jsr	ErrorHandler
>14d1	41 53 53 45 52 54 20 46			.text	"ASSERT FAIL",0
>14d9	41 49 4c 00
.14dd					ErrorV_line:
.14dd	20 21 14	jsr $1421		jsr	ErrorHandler
>14e0	55 4e 4b 4e 4f 57 4e 20			.text	"UNKNOWN LINE NUMBER",0
>14e8	4c 49 4e 45 20 4e 55 4d 42 45 52 00
.14f4					ErrorV_internal:
.14f4	20 21 14	jsr $1421		jsr	ErrorHandler
>14f7	49 4e 54 45 52 4e 41 4c			.text	"INTERNAL ERROR",0
>14ff	20 45 52 52 4f 52 00
.1506					ErrorV_divzero:
.1506	20 21 14	jsr $1421		jsr	ErrorHandler
>1509	44 49 56 49 44 45 20 42			.text	"DIVIDE BY ZERO",0
>1511	59 20 5a 45 52 4f 00
.1518					ErrorV_structure:
.1518	20 21 14	jsr $1421		jsr	ErrorHandler
>151b	53 54 52 55 43 54 55 52			.text	"STRUCTURE IMBALANCE",0
>1523	45 20 49 4d 42 41 4c 41 4e 43 45 00
.152f					ErrorV_stop:
.152f	20 21 14	jsr $1421		jsr	ErrorHandler
>1532	50 52 4f 47 52 41 4d 20			.text	"PROGRAM STOPPED",0
>153a	53 54 4f 50 50 45 44 00
.1542					ErrorV_data:
.1542	20 21 14	jsr $1421		jsr	ErrorHandler
>1545	4f 55 54 20 4f 46 20 44			.text	"OUT OF DATA",0
>154d	41 54 41 00
.1551					ErrorV_undeclared:
.1551	20 21 14	jsr $1421		jsr	ErrorHandler
>1554	55 4e 4b 4e 4f 57 4e 20			.text	"UNKNOWN ARRAY",0
>155c	41 52 52 41 59 00
.1562					ErrorV_redefine:
.1562	20 21 14	jsr $1421		jsr	ErrorHandler
>1565	41 52 52 41 59 20 52 45			.text	"ARRAY REDEFINED",0
>156d	44 45 46 49 4e 45 44 00
.1575					ErrorV_index:
.1575	20 21 14	jsr $1421		jsr	ErrorHandler
>1578	42 41 44 20 41 52 52 41			.text	"BAD ARRAY INDEX",0
>1580	59 20 49 4e 44 45 58 00
.1588					ErrorV_memory:
.1588	20 21 14	jsr $1421		jsr	ErrorHandler
>158b	4f 55 54 20 4f 46 20 4d			.text	"OUT OF MEMORY",0
>1593	45 4d 4f 52 59 00
.1599					ErrorV_channel:
.1599	20 21 14	jsr $1421		jsr	ErrorHandler
>159c	49 4e 50 55 54 2f 4f 55			.text	"INPUT/OUTPUT ERROR",0
>15a4	54 50 55 54 20 45 52 52 4f 52 00
.15af					CommandFor:
.15af	fa		plx				plx
.15b0	a9 d3		lda #$d3			lda 	#FRAME_FOR 					; open frame
.15b2	20 76 16	jsr $1676			jsr 	StackOpenFrame
.15b5	20 ba 1a	jsr $1aba			jsr 	StackSaveCurrentPosition 	; normalise to Y=0 and save position.
.15b8	a0 07		ldy #$07			ldy 	#7 							; copy step out
.15ba	20 14 16	jsr $1614			jsr 	CopyTOSToOffsetY
.15bd	ca		dex				dex
.15be	a0 0d		ldy #$0d			ldy 	#13 						; copy terminal value.
.15c0	20 14 16	jsr $1614			jsr 	CopyTOSToOffsetY
.15c3	ca		dex				dex
.15c4	b5 4c		lda $4c,x			lda 	NSMantissa1,x 				; bit 15 of reference indicates type int16
.15c6	29 80		and #$80			and 	#$80
.15c8	a0 04		ldy #$04			ldy 	#4
.15ca	91 30		sta ($30),y			sta 	(runtimeStackPtr),y
.15cc	b5 40		lda $40,x			lda 	NSMantissa0,x 				; copy the reference address
.15ce	a0 05		ldy #$05			ldy 	#5 							; adjusted to be a real address
.15d0	91 30		sta ($30),y			sta 	(runtimeStackPtr),y
.15d2	85 28		sta $28				sta 	zTemp0 						; also to zTemp0
.15d4	c8		iny				iny
.15d5	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.15d7	18		clc				clc
.15d8	29 7f		and #$7f			and 	#$7F 						; throw the type bit.
.15da	91 30		sta ($30),y			sta 	(runtimeStackPtr),y
.15dc	6d 07 04	adc $0407			adc 	variableStartPage 			; point to variable page.
.15df	85 29		sta $29				sta 	zTemp0+1
.15e1	ca		dex				dex 								; throw reference.
.15e2	a0 05		ldy #$05			ldy 	#5 							; check the index, step and terminal values
.15e4	b1 28		lda ($28),y			lda 	(zTemp0),y 					; are all +ve integers, sign bits first.
.15e6	a0 0c		ldy #$0c			ldy 	#12
.15e8	11 30		ora ($30),y			ora 	(runtimeStackPtr),y
.15ea	a0 12		ldy #$12			ldy 	#18
.15ec	11 30		ora ($30),y			ora 	(runtimeStackPtr),y
.15ee	29 80		and #$80			and 	#$80 						; only interested in sign bit.
.15f0	88		dey				dey 								; now the exponents.
.15f1	11 28		ora ($28),y			ora 	(zTemp0),y
.15f3	a0 0b		ldy #$0b			ldy 	#11
.15f5	11 30		ora ($30),y			ora 	(runtimeStackPtr),y
.15f7	a0 11		ldy #$11			ldy 	#17
.15f9	11 30		ora ($30),y			ora 	(runtimeStackPtr),y
.15fb	a0 08		ldy #$08			ldy 	#8 							; step must be 1 byte.
.15fd	11 30		ora ($30),y			ora 	(runtimeStackPtr),y
.15ff	c8		iny				iny
.1600	11 30		ora ($30),y			ora 	(runtimeStackPtr),y
.1602	c8		iny				iny
.1603	11 30		ora ($30),y			ora 	(runtimeStackPtr),y
.1605	d0 08		bne $160f			bne 	_CFNoOptimise
.1607	a0 04		ldy #$04			ldy 	#4 							; set the runtime stack pointer optimisation flag.
.1609	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.160b	09 40		ora #$40			ora 	#$40
.160d	91 30		sta ($30),y			sta 	(runtimeStackPtr),y
.160f					_CFNoOptimise:
.160f	a0 00		ldy #$00			ldy 	#0
.1611	4c 2c 10	jmp $102c			jmp 	NextCommand
.1614					CopyTOSToOffsetY:
.1614	b5 40		lda $40,x			lda 	NSMantissa0,x
.1616	91 30		sta ($30),y			sta 	(runtimeStackPtr),y
.1618	c8		iny				iny
.1619	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.161b	91 30		sta ($30),y			sta 	(runtimeStackPtr),y
.161d	c8		iny				iny
.161e	b5 58		lda $58,x			lda 	NSMantissa2,x
.1620	91 30		sta ($30),y			sta 	(runtimeStackPtr),y
.1622	c8		iny				iny
.1623	b5 64		lda $64,x			lda 	NSMantissa3,x
.1625	91 30		sta ($30),y			sta 	(runtimeStackPtr),y
.1627	c8		iny				iny
.1628	b5 70		lda $70,x			lda 	NSExponent,x
.162a	91 30		sta ($30),y			sta 	(runtimeStackPtr),y
.162c	c8		iny				iny
.162d	b5 34		lda $34,x			lda 	NSStatus,x
.162f	91 30		sta ($30),y			sta 	(runtimeStackPtr),y
.1631	60		rts				rts
.1632					MoveObjectForward:
.1632	b2 25		lda ($25)			lda 	(objPtr) 					; get next
.1634	c9 ff		cmp #$ff			cmp 	#$FF
.1636	f0 36		beq $166e			beq 	_MOFEnd
.1638	c9 40		cmp #$40			cmp 	#$40 						; 00-3F
.163a	90 24		bcc $1660			bcc 	_MOFAdvance1 				; forward 1
.163c	a0 02		ldy #$02			ldy 	#2 							; 40-6F
.163e	c9 70		cmp #$70			cmp 	#$70 						; forward 2
.1640	90 20		bcc $1662			bcc 	_MOFAdvanceY
.1642	c9 ca		cmp #$ca			cmp 	#PCD_STARTSYSTEM 			; 70 - System tokens.
.1644	90 1a		bcc $1660			bcc 	_MOFAdvance1 				; forward 1
.1646	a8		tay				tay 								; read the size.
.1647	b9 9f 1b	lda $1b9f,y			lda 	MOFSizeTable-PCD_STARTSYSTEM,y
.164a	a8		tay				tay
.164b	c8		iny				iny 								; add 1 for the system token.
.164c	d0 14		bne $1662			bne 	_MOFAdvanceY 				; if 0, was $FF thus a string/data skip.
.164e	a0 01		ldy #$01			ldy 	#1 							; get length byte
.1650	b1 25		lda ($25),y			lda 	(objPtr),y
.1652	a8		tay				tay 								; into Y.
.1653	18		clc				clc
.1654	a5 25		lda $25				lda 	objPtr						; add 2 to the object pointer
.1656	69 02		adc #$02			adc 	#2
.1658	85 25		sta $25				sta 	objPtr
.165a	90 02		bcc $165e			bcc 	_MOFNoCarry1
.165c	e6 26		inc $26				inc 	objPtr+1
.165e					_MOFNoCarry1:
.165e	80 02		bra $1662			bra 	_MOFAdvanceY
.1660					_MOFAdvance1:
.1660	a0 01		ldy #$01			ldy 	#1
.1662					_MOFAdvanceY:
.1662	98		tya				tya 								; add X to objPtr
.1663	18		clc				clc
.1664	65 25		adc $25				adc 	objPtr
.1666	85 25		sta $25				sta 	objPtr
.1668	90 02		bcc $166c			bcc 	_MOFNoCarry2
.166a	e6 26		inc $26				inc 	objPtr+1
.166c					_MOFNoCarry2:
.166c	18		clc				clc 								; not completed.
.166d	60		rts				rts
.166e					_MOFEnd:
.166e	e6 25		inc $25				inc 	objPtr
.1670	d0 02		bne $1674			bne 	_MOFENoCarry
.1672	e6 26		inc $26				inc 	objPtr+1
.1674					_MOFENoCarry:
.1674	38		sec				sec
.1675	60		rts				rts
.1676					StackOpenFrame:
.1676	48		pha				pha 								; save frame marker
.1677	29 1f		and #$1f			and 	#$1F 						; bytes required.
.1679	85 28		sta $28				sta 	zTemp0
.167b	38		sec				sec 								; subtract from runtime stack pointer.
.167c	a5 30		lda $30				lda		runtimeStackPtr
.167e	e5 28		sbc $28				sbc 	zTemp0
.1680	85 30		sta $30				sta 	runtimeStackPtr
.1682	a5 31		lda $31				lda		runtimeStackPtr+1
.1684	e9 00		sbc #$00			sbc 	#0
.1686	85 31		sta $31				sta 	runtimeStackPtr+1
.1688	68		pla				pla 								; put frame marker at +0
.1689	92 30		sta ($30)			sta 	(runtimeStackPtr)
.168b	60		rts				rts
.168c					StackCloseFrame:
.168c	b2 30		lda ($30)			lda 	(runtimeStackPtr)			; get frame marker
.168e	29 1f		and #$1f			and 	#$1F 						; size
.1690	18		clc				clc
.1691	65 30		adc $30				adc 	runtimeStackPtr
.1693	85 30		sta $30				sta 	runtimeStackPtr
.1695	90 02		bcc $1699			bcc 	_SCFNoCarry
.1697	e6 31		inc $31				inc 	runtimeStackPtr+1
.1699					_SCFNoCarry:
.1699	60		rts				rts
.169a					StackFindFrame:
.169a	8d 09 04	sta $0409			sta 	requiredFrame
.169d					_SFFLoop:
.169d	b2 30		lda ($30)			lda 	(runtimeStackPtr) 			; get TOS
.169f	c9 ff		cmp #$ff			cmp 	#$FF 						; if found $FF then this is a fail.
.16a1	f0 10		beq $16b3			beq 	SCFFail
.16a3	cd 09 04	cmp $0409			cmp 	requiredFrame 				; found this type ?
.16a6	f0 05		beq $16ad			beq 	_SFFFound
.16a8	20 8c 16	jsr $168c			jsr 	StackCloseFrame 			; close the top frame
.16ab	80 f0		bra $169d			bra 	_SFFLoop 					; and try te next.
.16ad					_SFFFound:
.16ad	60		rts				rts
.16ae					StackCheckFrame:
.16ae	d2 30		cmp ($30)			cmp 	(runtimeStackPtr) 			; matches current frame
.16b0	d0 01		bne $16b3			bne 	SCFFail
.16b2	60		rts				rts
.16b3					SCFFail:
.16b3	4c 18 15	jmp $1518		jmp	ErrorV_structure
.0409					requiredFrame:
>0409							.fill 	1
.16b6					UnaryFre:
.16b6	fa		plx				plx
.16b7	20 1c 2e	jsr $2e1c			jsr 	FloatSetZero 				; zero the result (32 bit integer)
.16ba	38		sec				sec
.16bb	ad 02 04	lda $0402			lda 	stringHighMemory 			; calculate the free memory.
.16be	ed 00 04	sbc $0400			sbc 	stringLowMemory
.16c1	95 40		sta $40,x			sta		NSMantissa0,x
.16c3	ad 03 04	lda $0403			lda 	stringHighMemory+1
.16c6	ed 01 04	sbc $0401			sbc 	stringLowMemory+1
.16c9	95 4c		sta $4c,x			sta		NSMantissa1,x
.16cb	4c 2c 10	jmp $102c			jmp 	NextCommand
.16ce					CommandGet:
.16ce	fa		plx				plx
.16cf	e8		inx				inx
.16d0	a9 01		lda #$01			lda 	#1 							; 1 character space
.16d2	20 6a 20	jsr $206a			jsr 	StringAllocTemp
.16d5	20 d0 1c	jsr $1cd0			jsr 	VectorGetCharacter 			; get a character
.16d8	c9 00		cmp #$00			cmp 	#0
.16da	f0 09		beq $16e5			beq 	_CGNone
.16dc	5a		phy				phy
.16dd	a0 01		ldy #$01			ldy 	#1 							; store char
.16df	91 2e		sta ($2e),y			sta 	(zsTemp),y
.16e1	98		tya				tya 								; store length.
.16e2	92 2e		sta ($2e)			sta 	(zsTemp)
.16e4	7a		ply				ply
.16e5					_CGNone:
.16e5	4c 2c 10	jmp $102c			jmp 	NextCommand
.16e8					CommandGosub:
.16e8	fa		plx				plx
.16e9	a9 e4		lda #$e4			lda 	#FRAME_GOSUB
.16eb	20 76 16	jsr $1676			jsr 	StackOpenFrame
.16ee	20 ba 1a	jsr $1aba			jsr 	StackSaveCurrentPosition
.16f1	4c 07 17	jmp $1707			jmp 	PerformGOTO
.16f4					CommandReturn:
.16f4	fa		plx				plx
.16f5	a9 e4		lda #$e4			lda 	#FRAME_GOSUB
.16f7	20 9a 16	jsr $169a			jsr 	StackFindFrame
.16fa	20 d0 1a	jsr $1ad0			jsr 	StackLoadCurrentPosition
.16fd	c8		iny				iny
.16fe	c8		iny				iny
.16ff	c8		iny				iny
.1700	20 8c 16	jsr $168c			jsr 	StackCloseFrame
.1703	4c 2c 10	jmp $102c			jmp 	NextCommand
.1706					CommandGoto:
.1706	fa		plx				plx
.1707					PerformGOTO:
.1707	c8		iny				iny
.1708	c8		iny				iny 								; push MSB of offset on stack
.1709	b1 22		lda ($22),y			lda 	(codePtr),y
.170b	48		pha				pha
.170c	88		dey				dey 								; point LSB of offset
.170d	18		clc				clc 								; add LSB
.170e	b1 22		lda ($22),y			lda 	(codePtr),y
.1710	65 22		adc $22				adc 	codePtr
.1712	85 22		sta $22				sta 	codePtr
.1714	68		pla				pla 								; restore offset MSB and add
.1715	65 23		adc $23				adc 	codePtr+1
.1717	85 23		sta $23				sta 	codePtr+1
.1719	88		dey				dey 								; fix up.
.171a	4c 2c 10	jmp $102c			jmp 	NextCommand
.171d					CommandGotoZ:
.171d	fa		plx				plx
.171e	20 3e 2e	jsr $2e3e			jsr 	FloatIsZero
.1721	ca		dex				dex
.1722	c9 00		cmp #$00			cmp 	#0
.1724	f0 e1		beq $1707			beq 	PerformGOTO
.1726	c8		iny				iny
.1727	c8		iny				iny
.1728	c8		iny				iny
.1729	4c 2c 10	jmp $102c			jmp 	NextCommand
.172c					CommandGotoNZ:
.172c	fa		plx				plx
.172d	20 3e 2e	jsr $2e3e			jsr 	FloatIsZero
.1730	ca		dex				dex
.1731	c9 00		cmp #$00			cmp 	#0
.1733	d0 d2		bne $1707			bne 	PerformGOTO
.1735	c8		iny				iny
.1736	c8		iny				iny
.1737	c8		iny				iny
.1738	4c 2c 10	jmp $102c			jmp 	NextCommand
.173b					Command_PSET:
.173b	fa		plx				plx
.173c	5a		phy				phy
.173d	20 83 19	jsr $1983			jsr 	GetInteger8Bit 				; get the colour
.1740	48		pha				pha
.1741	a2 00		ldx #$00			ldx 	#0 							; copy 0/1 to r0,r1
.1743	a0 02		ldy #$02			ldy 	#X16_r0
.1745	20 c7 17	jsr $17c7			jsr 	GraphicsCopy2
.1748	20 ff fe	jsr $feff			jsr 	X16_FB_cursor_position 		; set position.
.174b	68		pla				pla 								; set pixel.
.174c	20 0b ff	jsr $ff0b			jsr 	X16_FB_set_pixel
.174f	7a		ply				ply
.1750	a2 ff		ldx #$ff			ldx 	#$FF
.1752	4c 2c 10	jmp $102c			jmp 	NextCommand
.1755					Command_LINE:
.1755	fa		plx				plx
.1756	5a		phy				phy
.1757	20 ba 17	jsr $17ba			jsr 	GraphicsColour
.175a	a2 00		ldx #$00			ldx 	#0 							; copy 0/1/2/3 to r0,1,2,3
.175c	a0 02		ldy #$02			ldy 	#X16_r0
.175e	20 c4 17	jsr $17c4			jsr 	GraphicsCopy4
.1761	20 2c ff	jsr $ff2c			jsr 	X16_GRAPH_draw_line
.1764	7a		ply				ply
.1765	a2 ff		ldx #$ff			ldx 	#$FF
.1767	4c 2c 10	jmp $102c			jmp 	NextCommand
.176a					Command_RECT:
.176a	fa		plx				plx
.176b	5a		phy				phy
.176c	20 db 17	jsr $17db			jsr 	GraphicsRectCoords
.176f	38		sec				sec
.1770	20 2f ff	jsr $ff2f			jsr 	X16_GRAPH_draw_rect
.1773	7a		ply				ply
.1774	a2 ff		ldx #$ff			ldx 	#$FF
.1776	4c 2c 10	jmp $102c			jmp 	NextCommand
.1779					Command_FRAME:
.1779	fa		plx				plx
.177a	5a		phy				phy
.177b	20 db 17	jsr $17db			jsr 	GraphicsRectCoords
.177e	18		clc				clc
.177f	20 2f ff	jsr $ff2f			jsr 	X16_GRAPH_draw_rect
.1782	7a		ply				ply
.1783	a2 ff		ldx #$ff			ldx 	#$FF
.1785	4c 2c 10	jmp $102c			jmp 	NextCommand
.1788					Command_CHAR:
.1788	fa		plx				plx
.1789	5a		phy				phy
.178a	ca		dex				dex  								; set the draw colour
.178b	20 ba 17	jsr $17ba			jsr 	GraphicsColour
.178e	a2 00		ldx #$00			ldx 	#0 							; copy 0/1 to r0,r1
.1790	a0 02		ldy #$02			ldy 	#X16_r0
.1792	20 c7 17	jsr $17c7			jsr 	GraphicsCopy2
.1795	a5 43		lda $43				lda 	NSMantissa0+3 				; copy string address to zTemp0
.1797	85 28		sta $28				sta 	zTemp0
.1799	a5 4f		lda $4f				lda 	NSMantissa1+3
.179b	85 29		sta $29				sta 	zTemp0+1
.179d	b2 28		lda ($28)			lda 	(zTemp0) 					; count of chars to zTemp1
.179f	85 2a		sta $2a				sta 	zTemp1
.17a1					_CCLoop:
.17a1	a5 2a		lda $2a				lda 	zTemp1 						; done all chars ?
.17a3	f0 0f		beq $17b4			beq 	_CCExit
.17a5	c6 2a		dec $2a				dec 	zTemp1 						; dec counter
.17a7	e6 28		inc $28				inc 	zTemp0 						; pre-bump pointer
.17a9	d0 02		bne $17ad			bne 	_CCNoCarry
.17ab	e6 29		inc $29				inc 	zTemp0+1
.17ad					_CCNoCarry:
.17ad	b2 28		lda ($28)			lda 	(zTemp0) 					; get character
.17af	20 41 ff	jsr $ff41			jsr 	X16_GRAPH_put_char 			; write it
.17b2	80 ed		bra $17a1			bra 	_CCLoop						; go round.
.17b4					_CCExit:
.17b4	7a		ply				ply
.17b5	a2 ff		ldx #$ff			ldx 	#$FF
.17b7	4c 2c 10	jmp $102c			jmp 	NextCommand
.17ba					GraphicsColour:
.17ba	20 83 19	jsr $1983			jsr 	GetInteger8Bit
.17bd	aa		tax				tax
.17be	a0 00		ldy #$00			ldy 	#0
.17c0	20 29 ff	jsr $ff29			jsr 	X16_GRAPH_set_colors
.17c3	60		rts				rts
.17c4					GraphicsCopy4:
.17c4	20 c7 17	jsr $17c7			jsr 	GraphicsCopy2
.17c7					GraphicsCopy2:
.17c7	20 ca 17	jsr $17ca			jsr 	GraphicsCopy1
.17ca					GraphicsCopy1:
.17ca	20 57 2a	jsr $2a57			jsr 	FloatIntegerPart
.17cd	b5 40		lda $40,x			lda 	NSMantissa0,x
.17cf	99 00 00	sta $0000,y			sta 	0,y
.17d2	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.17d4	99 01 00	sta $0001,y			sta 	1,y
.17d7	e8		inx				inx
.17d8	c8		iny				iny
.17d9	c8		iny				iny
.17da	60		rts				rts
.17db					GraphicsRectCoords:
.17db	20 ba 17	jsr $17ba			jsr 	GraphicsColour 				; set colour
.17de	a2 00		ldx #$00			ldx 	#0 							; copy in order.
.17e0	a0 02		ldy #$02			ldy 	#X16_r0
.17e2	20 c4 17	jsr $17c4			jsr 	GraphicsCopy4
.17e5	a2 02		ldx #$02			ldx 	#X16_r0 					; sort r0/r2
.17e7	20 f4 17	jsr $17f4			jsr 	_GRCSortSubtract
.17ea	a2 04		ldx #$04			ldx 	#X16_r1 					; sort r1/r3
.17ec	20 f4 17	jsr $17f4			jsr 	_GRCSortSubtract
.17ef	74 08		stz $08,x			stz 	8,x 						; zero rounding
.17f1	74 09		stz $09,x			stz 	9,x
.17f3	60		rts				rts
.17f4					_GRCSortSubtract:
.17f4	b5 04		lda $04,x			lda 	4,x 						; calculate r2-r0
.17f6	d5 00		cmp $00,x			cmp 	0,x
.17f8	b5 05		lda $05,x			lda 	5,x
.17fa	f5 01		sbc $01,x			sbc 	1,x
.17fc	b0 08		bcs $1806			bcs 	_GRCNoSwap 					; >= swap.
.17fe	20 14 18	jsr $1814			jsr 	_GRCSwapByte 				; swap 0/2
.1801	e8		inx				inx
.1802	20 14 18	jsr $1814			jsr 	_GRCSwapByte 				; swap 1/3
.1805	ca		dex				dex
.1806					_GRCNoSwap:
.1806	38		sec				sec 								; calculate width/height into 4,5
.1807	b5 04		lda $04,x			lda 	4,x
.1809	f5 00		sbc $00,x			sbc 	0,x
.180b	95 04		sta $04,x			sta 	4,x
.180d	b5 05		lda $05,x			lda 	5,x
.180f	f5 01		sbc $01,x			sbc 	1,x
.1811	95 05		sta $05,x			sta 	5,x
.1813	60		rts				rts
.1814					_GRCSwapByte:
.1814	b5 04		lda $04,x			lda 	4,x
.1816	48		pha				pha
.1817	b5 00		lda $00,x			lda 	0,x
.1819	95 04		sta $04,x			sta 	4,x
.181b	68		pla				pla
.181c	95 00		sta $00,x			sta 	0,x
.181e	60		rts				rts
.181f					Unary16Hex:
.181f	fa		plx				plx
.1820	20 89 19	jsr $1989			jsr 	GetInteger16Bit
.1823	a9 04		lda #$04			lda 	#4 							; allocate / set 4 bytes.
.1825	20 6a 20	jsr $206a			jsr 	StringAllocTemp
.1828	a5 29		lda $29				lda 	zTemp0+1
.182a	f0 03		beq $182f			beq 	_UHNoHigh
.182c	20 37 18	jsr $1837			jsr 	_UHWriteHex
.182f					_UHNoHigh:
.182f	a5 28		lda $28				lda 	zTemp0
.1831	20 37 18	jsr $1837			jsr 	_UHWriteHex
.1834	4c 2c 10	jmp $102c			jmp 	NextCommand
.1837					_UHWriteHex:
.1837	48		pha				pha
.1838	4a		lsr a				lsr 	a
.1839	4a		lsr a				lsr 	a
.183a	4a		lsr a				lsr 	a
.183b	4a		lsr a				lsr 	a
.183c	20 40 18	jsr $1840			jsr 	_UHWriteNibl
.183f	68		pla				pla
.1840					_UHWriteNibl:
.1840	29 0f		and #$0f			and 	#15
.1842	c9 0a		cmp #$0a			cmp 	#10
.1844	90 02		bcc $1848			bcc 	_UHDigit
.1846	69 06		adc #$06			adc 	#6
.1848					_UHDigit:
.1848	69 30		adc #$30			adc 	#48
.184a	20 93 20	jsr $2093			jsr 	StringWriteChar
.184d	60		rts				rts
.184e					IndFloatRead:
.184e	fa		plx				plx
.184f	b5 40		lda $40,x			lda 	NSMantissa0,x 				; copy address
.1851	85 28		sta $28				sta 	zTemp0
.1853	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.1855	18		clc				clc
.1856	6d 07 04	adc $0407			adc 	variableStartPage
.1859	85 29		sta $29				sta 	zTemp0+1
.185b	ca		dex				dex 								; throw the address
.185c	20 49 1e	jsr $1e49			jsr 	ReadFloatZTemp0Sub 							; call read routine
.185f	4c 2c 10	jmp $102c			jmp 	NextCommand
.1862					IndInt16Read:
.1862	fa		plx				plx
.1863	b5 40		lda $40,x			lda 	NSMantissa0,x 				; copy address
.1865	85 28		sta $28				sta 	zTemp0
.1867	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.1869	18		clc				clc
.186a	6d 07 04	adc $0407			adc 	variableStartPage
.186d	85 29		sta $29				sta 	zTemp0+1
.186f	ca		dex				dex 								; throw the address
.1870	20 85 1e	jsr $1e85			jsr 	ReadIntegerZTemp0Sub 							; call read routine
.1873	4c 2c 10	jmp $102c			jmp 	NextCommand
.1876					IndStringRead:
.1876	fa		plx				plx
.1877	b5 40		lda $40,x			lda 	NSMantissa0,x 				; copy address
.1879	85 28		sta $28				sta 	zTemp0
.187b	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.187d	18		clc				clc
.187e	6d 07 04	adc $0407			adc 	variableStartPage
.1881	85 29		sta $29				sta 	zTemp0+1
.1883	ca		dex				dex 								; throw the address
.1884	20 ca 1e	jsr $1eca			jsr 	ReadStringZTemp0Sub 							; call read routine
.1887	4c 2c 10	jmp $102c			jmp 	NextCommand
.188a					IndFloatWrite:
.188a	fa		plx				plx
.188b	b5 3f		lda $3f,x			lda 	NSMantissa0-1,x 			; copy address
.188d	85 28		sta $28				sta 	zTemp0
.188f	b5 4b		lda $4b,x			lda 	NSMantissa1-1,x
.1891	18		clc				clc
.1892	6d 07 04	adc $0407			adc 	variableStartPage
.1895	85 29		sta $29				sta 	zTemp0+1
.1897	20 24 24	jsr $2424			jsr 	WriteFloatZTemp0Sub 							; call write routine
.189a	ca		dex				dex 								; throw the address as well.
.189b	4c 2c 10	jmp $102c			jmp 	NextCommand
.189e					IndInt16Write:
.189e	fa		plx				plx
.189f	b5 3f		lda $3f,x			lda 	NSMantissa0-1,x 			; copy address
.18a1	85 28		sta $28				sta 	zTemp0
.18a3	b5 4b		lda $4b,x			lda 	NSMantissa1-1,x
.18a5	18		clc				clc
.18a6	6d 07 04	adc $0407			adc 	variableStartPage
.18a9	85 29		sta $29				sta 	zTemp0+1
.18ab	20 60 24	jsr $2460			jsr 	WriteIntegerZTemp0Sub 							; call write routine
.18ae	ca		dex				dex 								; throw the address as well.
.18af	4c 2c 10	jmp $102c			jmp 	NextCommand
.18b2					IndStringWrite:
.18b2	fa		plx				plx
.18b3	b5 3f		lda $3f,x			lda 	NSMantissa0-1,x 			; copy address
.18b5	85 28		sta $28				sta 	zTemp0
.18b7	b5 4b		lda $4b,x			lda 	NSMantissa1-1,x
.18b9	18		clc				clc
.18ba	6d 07 04	adc $0407			adc 	variableStartPage
.18bd	85 29		sta $29				sta 	zTemp0+1
.18bf	20 9f 24	jsr $249f			jsr 	WriteStringZTemp0Sub 							; call write routine
.18c2	ca		dex				dex 								; throw the address as well.
.18c3	4c 2c 10	jmp $102c			jmp 	NextCommand
.18c6					CommandInput:
.18c6	fa		plx				plx
.18c7	5a		phy				phy 								; save Y
.18c8	e8		inx				inx									; space on stack
.18c9					_INError:
.18c9	20 fd 18	jsr $18fd			jsr 	InputStringToBuffer 		; input from keyboard
.18cc	a9 5f		lda #$5f			lda 	#((ReadBufferSize) & $FF)
.18ce	85 28		sta $28				sta 	0+zTemp0
.18d0	a9 04		lda #$04			lda 	#((ReadBufferSize) >> 8) & $FF
.18d2	85 29		sta $29				sta 	1+zTemp0
.18d4	20 b1 22	jsr $22b1			jsr 	ValEvaluateZTemp0
.18d7	b0 f0		bcs $18c9			bcs 	_INError 					; failed, try again.
.18d9	7a		ply				ply 								; restore Y
.18da	4c 2c 10	jmp $102c			jmp 	NextCommand
.18dd					CommandInputString:
.18dd	fa		plx				plx
.18de	5a		phy				phy 								; save Y
.18df	20 fd 18	jsr $18fd			jsr 	InputStringToBuffer 		; input from keyboard
.18e2	e8		inx				inx 								; make space on stack
.18e3	20 1c 2e	jsr $2e1c			jsr 	FloatSetZero 				; store as string on stack
.18e6	a9 5f		lda #$5f			lda 	#ReadBufferSize & $FF
.18e8	95 40		sta $40,x			sta 	NSMantissa0,x
.18ea	a9 04		lda #$04			lda 	#ReadBufferSize >> 8
.18ec	95 4c		sta $4c,x			sta 	NSMantissa1,x
.18ee	a9 40		lda #$40			lda 	#NSSString
.18f0	95 34		sta $34,x			sta 	NSStatus,x
.18f2	7a		ply				ply 								; restore Y
.18f3	4c 2c 10	jmp $102c			jmp 	NextCommand
.18f6					CommandInputReset:
.18f6	fa		plx				plx
.18f7	9c 0a 04	stz $040a			stz 	InputBuffer
.18fa	4c 2c 10	jmp $102c			jmp 	NextCommand
.18fd					InputStringToBuffer:
.18fd	a9 37		lda #$37			lda 	#((InputBumpNext) & $FF)
.18ff	8d 5f 05	sta $055f			sta 	0+ReadBumpNextVec
.1902	a9 19		lda #$19			lda 	#((InputBumpNext) >> 8) & $FF
.1904	8d 60 05	sta $0560			sta 	1+ReadBumpNextVec
.1907	a9 14		lda #$14			lda 	#((InputLookNext) & $FF)
.1909	8d 61 05	sta $0561			sta 	0+ReadLookNextVec
.190c	a9 19		lda #$19			lda 	#((InputLookNext) >> 8) & $FF
.190e	8d 62 05	sta $0562			sta 	1+ReadLookNextVec
.1911	4c a6 1d	jmp $1da6			jmp 	GetStringToBuffer
.1914					InputLookNext:
.1914	da		phx				phx
.1915					_ILNRetry:
.1915	ad 0a 04	lda $040a			lda 	InputBuffer 				; do we need to read more (e.g. the buffer is empty)
.1918	d0 08		bne $1922			bne 	_ILNNotEmpty
.191a	20 3b 19	jsr $193b			jsr 	InputGetNewLine 			; get a new line
.191d	9c 5b 04	stz $045b			stz 	InputBufferPos 				; reset read position.
.1920	80 f3		bra $1915			bra 	_ILNRetry
.1922					_ILNNotEmpty:
.1922	ae 5b 04	ldx $045b			ldx 	InputBufferPos 				; get head available character
.1925	bd 0a 04	lda $040a,x			lda 	InputBuffer,x
.1928	d0 08		bne $1932			bne 	_ILNExit 					; if not EOS return it with CC.
.192a					_ILNNextLine:
.192a	9c 0a 04	stz $040a			stz 	InputBuffer 				; clear the buffer, indicating new line next time.
.192d	38		sec				sec 								; return CS,Zero
.192e	fa		plx				plx
.192f	a9 0d		lda #$0d			lda 	#13
.1931	60		rts				rts
.1932					_ILNExit:
.1932	fa		plx				plx
.1933	c9 00		cmp #$00			cmp 	#0 							; return CC, Z Flag set.
.1935	18		clc				clc
.1936	60		rts				rts
.1937					InputBumpNext:
.1937	ee 5b 04	inc $045b			inc 	InputBufferPos
.193a	60		rts				rts
.193b					InputGetNewLine:
.193b	48		pha				pha
.193c	da		phx				phx
.193d	5a		phy				phy
.193e	a9 3f		lda #$3f			lda 	#"?"
.1940	20 7a 19	jsr $197a			jsr 	IGNLEchoIfScreen
.1943	a0 00		ldy #$00			ldy 	#0 							; line position.
.1945					_IGNLLoop:
.1945	20 d0 1c	jsr $1cd0			jsr 	VectorGetCharacter 			; get a character
.1948	c9 00		cmp #$00			cmp 	#0
.194a	f0 f9		beq $1945			beq 	_IGNLLoop
.194c	c9 14		cmp #$14			cmp 	#$14 						; Backspace ?
.194e	f0 11		beq $1961			beq 	_IGNBackspace
.1950	c9 0d		cmp #$0d			cmp 	#$0D 						; Return ?
.1952	f0 17		beq $196b			beq 	_IGNExit
.1954	c0 50		cpy #$50			cpy 	#80 						; buffer full ?
.1956	f0 ed		beq $1945			beq 	_IGNLLoop
.1958	99 0a 04	sta $040a,y			sta 	InputBuffer,y
.195b	c8		iny				iny
.195c	20 7a 19	jsr $197a			jsr 	IGNLEchoIfScreen
.195f	80 e4		bra $1945			bra 	_IGNLLoop
.1961					_IGNBackspace:
.1961	c0 00		cpy #$00			cpy 	#0
.1963	f0 e0		beq $1945			beq 	_IGNLLoop
.1965	20 7a 19	jsr $197a			jsr 	IGNLEchoIfScreen
.1968	88		dey				dey
.1969	80 da		bra $1945			bra 	_IGNLLoop
.196b					_IGNExit:
.196b	20 7a 19	jsr $197a			jsr 	IGNLEchoIfScreen
.196e	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.1970	99 0a 04	sta $040a,y			sta 	InputBuffer,y
.1973	9c 5b 04	stz $045b			stz 	InputBufferPos 				; reset position to start of input buffer.
.1976	7a		ply				ply
.1977	fa		plx				plx
.1978	68		pla				pla
.1979	60		rts				rts
.197a					IGNLEchoIfScreen:
.197a	ae 5d 04	ldx $045d			ldx 	currentChannel
.197d	d0 03		bne $1982			bne 	_IGNLEExit
.197f	20 c7 1c	jsr $1cc7			jsr 	VectorPrintCharacter
.1982					_IGNLEExit:
.1982	60		rts				rts
.040a					InputBuffer:
>040a							.fill 	81
.045b					InputBufferPos:
>045b							.fill 	1
.1983					GetInteger8Bit:
.1983	20 57 2a	jsr $2a57			jsr 	FloatIntegerPart
.1986	b5 40		lda $40,x			lda 	NSMantissa0,x
.1988	60		rts				rts
.1989					GetInteger16Bit:
.1989	20 57 2a	jsr $2a57			jsr 	FloatIntegerPart
.198c	34 34		bit $34,x			bit 	NSStatus,x
.198e	30 09		bmi $1999			bmi 	Negate16Bit
.1990	b5 40		lda $40,x			lda 	NSMantissa0,x
.1992	85 28		sta $28				sta 	zTemp0
.1994	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.1996	85 29		sta $29				sta 	zTemp0+1
.1998	60		rts				rts
.1999					Negate16Bit:
.1999	38		sec				sec
.199a	a9 00		lda #$00			lda 	#0
.199c	f5 40		sbc $40,x			sbc 	NSMantissa0,x
.199e	95 40		sta $40,x			sta 	NSMantissa0,x
.19a0	85 28		sta $28				sta 	zTemp0
.19a2	a9 00		lda #$00			lda 	#0
.19a4	f5 4c		sbc $4c,x			sbc 	NSMantissa1,x
.19a6	95 4c		sta $4c,x			sta 	NSMantissa1,x
.19a8	85 29		sta $29				sta 	zTemp0+1
.19aa	60		rts				rts
.19ab					UnaryJoy:
.19ab	fa		plx				plx
.19ac	20 83 19	jsr $1983			jsr 	GetInteger8Bit 				; port #
.19af	48		pha				pha 								; zero the result.
.19b0	20 1c 2e	jsr $2e1c			jsr 	FloatSetZero
.19b3	68		pla				pla
.19b4	5a		phy				phy
.19b5	da		phx				phx
.19b6	20 56 ff	jsr $ff56			jsr 	X16_joystick_get 			; read joystick.
.19b9	c0 00		cpy #$00			cpy 	#0 							; check no hardware
.19bb	d0 10		bne $19cd			bne 	_UJNoHardware
.19bd	a8		tay				tay 								; move XA -> AY
.19be	8a		txa				txa
.19bf	fa		plx				plx 								; we can update it now.
.19c0	49 ff		eor #$ff			eor 	#$FF
.19c2	95 4c		sta $4c,x			sta 	NSMantissa1,x
.19c4	98		tya				tya
.19c5	49 ff		eor #$ff			eor 	#$FF
.19c7	95 40		sta $40,x			sta 	NSMantissa0,x
.19c9	7a		ply				ply 								; restore Y
.19ca	4c 2c 10	jmp $102c			jmp 	NextCommand
.19cd					_UJNoHardware:
.19cd	fa		plx				plx
.19ce	7a		ply				ply
.19cf	a9 01		lda #$01			lda 	#1 							; set result to -1
.19d1	20 1e 2e	jsr $2e1e			jsr 	FloatSetByte
.19d4	20 de 2d	jsr $2dde			jsr 	FloatNegate
.19d7	4c 2c 10	jmp $102c			jmp 	NextCommand
.19da					UnaryLen:
.19da	fa		plx				plx
.19db	b5 40		lda $40,x			lda 	NSMantissa0,x 				; string address.
.19dd	85 28		sta $28				sta 	zTemp0
.19df	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.19e1	85 29		sta $29				sta 	zTemp0+1
.19e3	b2 28		lda ($28)			lda 	(zTemp0) 					; get length
.19e5	20 1e 2e	jsr $2e1e			jsr 	FloatSetByte
.19e8	4c 2c 10	jmp $102c			jmp 	NextCommand
.19eb					LinkFloatAdd:
.19eb	fa		plx				plx
.19ec	5a		phy			phy
.19ed	20 40 28	jsr $2840		jsr	FloatAdd
.19f0	7a		ply			ply
.19f1	4c 2c 10	jmp $102c			jmp 	NextCommand
.19f4					LinkFloatSubtract:
.19f4	fa		plx				plx
.19f5	5a		phy			phy
.19f6	20 3a 28	jsr $283a		jsr	FloatSubtract
.19f9	7a		ply			ply
.19fa	4c 2c 10	jmp $102c			jmp 	NextCommand
.19fd					LinkFloatMultiply:
.19fd	fa		plx				plx
.19fe	5a		phy			phy
.19ff	20 dc 2a	jsr $2adc		jsr	FloatMultiply
.1a02	7a		ply			ply
.1a03	4c 2c 10	jmp $102c			jmp 	NextCommand
.1a06					LinkFloatDivide:
.1a06	fa		plx				plx
.1a07	5a		phy			phy
.1a08	20 65 29	jsr $2965		jsr	FloatDivide
.1a0b	b0 5c		bcs $1a69		bcs	DivZeroError
.1a0d	7a		ply			ply
.1a0e	4c 2c 10	jmp $102c			jmp 	NextCommand
.1a11					LinkFloatPower:
.1a11	fa		plx				plx
.1a12	5a		phy			phy
.1a13	20 e5 30	jsr $30e5		jsr	FloatPower
.1a16	b0 4e		bcs $1a66		bcs	MapRangeError
.1a18	7a		ply			ply
.1a19	4c 2c 10	jmp $102c			jmp 	NextCommand
.1a1c					LinkCompareGreater:
.1a1c	fa		plx				plx
.1a1d	5a		phy			phy
.1a1e	20 e9 28	jsr $28e9		jsr	CompareGreater
.1a21	7a		ply			ply
.1a22	4c 2c 10	jmp $102c			jmp 	NextCommand
.1a25					LinkCompareEqual:
.1a25	fa		plx				plx
.1a26	5a		phy			phy
.1a27	20 cb 28	jsr $28cb		jsr	CompareEqual
.1a2a	7a		ply			ply
.1a2b	4c 2c 10	jmp $102c			jmp 	NextCommand
.1a2e					LinkCompareLess:
.1a2e	fa		plx				plx
.1a2f	5a		phy			phy
.1a30	20 e1 28	jsr $28e1		jsr	CompareLess
.1a33	7a		ply			ply
.1a34	4c 2c 10	jmp $102c			jmp 	NextCommand
.1a37					LinkCompareGreaterEqual:
.1a37	fa		plx				plx
.1a38	5a		phy			phy
.1a39	20 f9 28	jsr $28f9		jsr	CompareGreaterEqual
.1a3c	7a		ply			ply
.1a3d	4c 2c 10	jmp $102c			jmp 	NextCommand
.1a40					LinkCompareNotEqual:
.1a40	fa		plx				plx
.1a41	5a		phy			phy
.1a42	20 db 28	jsr $28db		jsr	CompareNotEqual
.1a45	7a		ply			ply
.1a46	4c 2c 10	jmp $102c			jmp 	NextCommand
.1a49					LinkCompareLessEqual:
.1a49	fa		plx				plx
.1a4a	5a		phy			phy
.1a4b	20 f1 28	jsr $28f1		jsr	CompareLessEqual
.1a4e	7a		ply			ply
.1a4f	4c 2c 10	jmp $102c			jmp 	NextCommand
.1a52					LinkFloatIntegerPartDown:
.1a52	fa		plx				plx
.1a53	5a		phy			phy
.1a54	20 7b 2a	jsr $2a7b		jsr	FloatIntegerPartDown
.1a57	7a		ply			ply
.1a58	4c 2c 10	jmp $102c			jmp 	NextCommand
.1a5b					LinkFloatSquareRoot:
.1a5b	fa		plx				plx
.1a5c	5a		phy			phy
.1a5d	20 67 31	jsr $3167		jsr	FloatSquareRoot
.1a60	b0 04		bcs $1a66		bcs	MapRangeError
.1a62	7a		ply			ply
.1a63	4c 2c 10	jmp $102c			jmp 	NextCommand
.1a66					MapRangeError:
.1a66	4c 7d 14	jmp $147d		jmp	ErrorV_range
.1a69					DivZeroError:
.1a69	4c 06 15	jmp $1506		jmp	ErrorV_divzero
.1a6c					LinkFloatLogarithm:
.1a6c	fa		plx				plx
.1a6d	5a		phy			phy
.1a6e	20 71 30	jsr $3071		jsr	FloatLogarithm
.1a71	b0 f3		bcs $1a66		bcs	MapRangeError
.1a73	7a		ply			ply
.1a74	4c 2c 10	jmp $102c			jmp 	NextCommand
.1a77					LinkFloatExponent:
.1a77	fa		plx				plx
.1a78	5a		phy			phy
.1a79	20 6e 2f	jsr $2f6e		jsr	FloatExponent
.1a7c	7a		ply			ply
.1a7d	4c 2c 10	jmp $102c			jmp 	NextCommand
.1a80					LinkFloatCosine:
.1a80	fa		plx				plx
.1a81	5a		phy			phy
.1a82	20 62 2f	jsr $2f62		jsr	FloatCosine
.1a85	7a		ply			ply
.1a86	4c 2c 10	jmp $102c			jmp 	NextCommand
.1a89					LinkFloatSine:
.1a89	fa		plx				plx
.1a8a	5a		phy			phy
.1a8b	20 02 31	jsr $3102		jsr	FloatSine
.1a8e	7a		ply			ply
.1a8f	4c 2c 10	jmp $102c			jmp 	NextCommand
.1a92					LinkFloatTangent:
.1a92	fa		plx				plx
.1a93	5a		phy			phy
.1a94	20 73 31	jsr $3173		jsr	FloatTangent
.1a97	7a		ply			ply
.1a98	4c 2c 10	jmp $102c			jmp 	NextCommand
.1a9b					LinkFloatArcTan:
.1a9b	fa		plx				plx
.1a9c	5a		phy			phy
.1a9d	20 47 2e	jsr $2e47		jsr	FloatArcTan
.1aa0	b0 c4		bcs $1a66		bcs	MapRangeError
.1aa2	7a		ply			ply
.1aa3	4c 2c 10	jmp $102c			jmp 	NextCommand
.1aa6					LinkFloatCompare:
.1aa6	fa		plx				plx
.1aa7	5a		phy			phy
.1aa8	20 01 29	jsr $2901		jsr	FloatCompare
.1aab	7a		ply			ply
.1aac	4c 2c 10	jmp $102c			jmp 	NextCommand
.1aaf					LinkDivideInt32:
.1aaf	fa		plx				plx
.1ab0	5a		phy			phy
.1ab1	20 8f 29	jsr $298f		jsr	DivideInt32
.1ab4	b0 b0		bcs $1a66		bcs	MapRangeError
.1ab6	7a		ply			ply
.1ab7	4c 2c 10	jmp $102c			jmp 	NextCommand
.1aba					StackSaveCurrentPosition:
.1aba	20 97 10	jsr $1097			jsr 	FixUpY 						; codePtr,Y is corrected so Y = 0
.1abd	5a		phy				phy
.1abe	a0 01		ldy #$01			ldy 	#1
.1ac0	a5 24		lda $24				lda 	codePage
.1ac2	91 30		sta ($30),y			sta 	(runtimeStackPtr),y
.1ac4	c8		iny				iny
.1ac5	a5 22		lda $22				lda 	codePtr
.1ac7	91 30		sta ($30),y			sta 	(runtimeStackPtr),y
.1ac9	c8		iny				iny
.1aca	a5 23		lda $23				lda 	codePtr+1
.1acc	91 30		sta ($30),y			sta 	(runtimeStackPtr),y
.1ace	7a		ply				ply
.1acf	60		rts				rts
.1ad0					StackLoadCurrentPosition:
.1ad0	a0 01		ldy #$01			ldy 	#1
.1ad2	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1ad4	85 24		sta $24				sta 	codePage
.1ad6	c8		iny				iny
.1ad7	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1ad9	85 22		sta $22				sta 	codePtr
.1adb	c8		iny				iny
.1adc	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1ade	85 23		sta $23				sta 	codePtr+1
.1ae0	a0 00		ldy #$00			ldy 	#0
.1ae2	60		rts				rts
.1ae3					XCommandMouse:
.1ae3	fa		plx				plx
.1ae4	20 83 19	jsr $1983			jsr 	GetInteger8Bit 				; mouse control.
.1ae7	ca		dex				dex
.1ae8	da		phx				phx
.1ae9	5a		phy				phy
.1aea	48		pha				pha
.1aeb	38		sec				sec 								; get screen resolution
.1aec	20 5f ff	jsr $ff5f			jsr 	X16_screen_mode
.1aef	68		pla				pla
.1af0	20 68 ff	jsr $ff68			jsr 	X16_mouse_config 			; config the mouse
.1af3	7a		ply				ply
.1af4	fa		plx				plx
.1af5	4c 2c 10	jmp $102c			jmp 	NextCommand
.1af8					XUnaryMB:
.1af8	fa		plx				plx
.1af9	20 27 1b	jsr $1b27			jsr 	XUnaryMouseCommon
.1afc	a5 2c		lda $2c				lda 	zTemp2
.1afe	e8		inx				inx
.1aff	20 1e 2e	jsr $2e1e			jsr 	FloatSetByte
.1b02	4c 2c 10	jmp $102c			jmp 	NextCommand
.1b05					XUnaryMX:
.1b05	fa		plx				plx
.1b06	20 27 1b	jsr $1b27			jsr 	XUnaryMouseCommon
.1b09	a5 28		lda $28				lda 	zTemp0
.1b0b	e8		inx				inx
.1b0c	20 1e 2e	jsr $2e1e			jsr 	FloatSetByte
.1b0f	a5 29		lda $29				lda 	zTemp0+1
.1b11	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1b13	4c 2c 10	jmp $102c			jmp 	NextCommand
.1b16					XUnaryMY:
.1b16	fa		plx				plx
.1b17	20 27 1b	jsr $1b27			jsr 	XUnaryMouseCommon
.1b1a	a5 2a		lda $2a				lda 	zTemp1
.1b1c	e8		inx				inx
.1b1d	20 1e 2e	jsr $2e1e			jsr 	FloatSetByte
.1b20	a5 2b		lda $2b				lda 	zTemp1+1
.1b22	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1b24	4c 2c 10	jmp $102c			jmp 	NextCommand
.1b27					XUnaryMouseCommon:
.1b27	da		phx				phx
.1b28	5a		phy				phy
.1b29	a2 28		ldx #$28			ldx 	#zTemp0
.1b2b	20 6b ff	jsr $ff6b			jsr 	X16_mouse_get
.1b2e	85 2c		sta $2c				sta 	zTemp2
.1b30	7a		ply				ply
.1b31	fa		plx				plx
.1b32	60		rts				rts
.1b33					NegateTOS:
.1b33	fa		plx				plx
.1b34	20 de 2d	jsr $2dde			jsr 	FloatNegate
.1b37	4c 2c 10	jmp $102c			jmp 	NextCommand
.1b3a					CommandNewLine:
.1b3a	fa		plx				plx
.1b3b	9c 68 05	stz $0568			stz 	stringInitialised
.1b3e	a2 ff		ldx #$ff			ldx 	#$FF
.1b40	4c 2c 10	jmp $102c			jmp 	NextCommand
.1b43					CommandNext:
.1b43	fa		plx				plx
.1b44					_CNRetry:
.1b44	a9 d3		lda #$d3			lda 	#FRAME_FOR 					; find the FOR
.1b46	20 9a 16	jsr $169a			jsr 	StackFindFrame
.1b49	20 97 10	jsr $1097			jsr 	FixUpY 						; so we can use Y
.1b4c	b5 40		lda $40,x			lda 	NSMantissa0,x 				; check no index variable, both are $FF
.1b4e	35 4c		and $4c,x			and 	NSMantissa1,x
.1b50	c9 ff		cmp #$ff			cmp 	#$FF
.1b52	f0 16		beq $1b6a			beq 	_CNNoIndexVariable
.1b54	b5 40		lda $40,x			lda 	NSMantissa0,x
.1b56	a0 05		ldy #$05			ldy 	#5
.1b58	d1 30		cmp ($30),y			cmp 	(runtimeStackPtr),y
.1b5a	d0 07		bne $1b63			bne 	_CNNIndexFail
.1b5c	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.1b5e	c8		iny				iny
.1b5f	d1 30		cmp ($30),y			cmp 	(runtimeStackPtr),y
.1b61	f0 07		beq $1b6a			beq 	_CNNoIndexVariable
.1b63					_CNNIndexFail:
.1b63	a0 00		ldy #$00			ldy 	#0 							; so we don't fix up Y again !
.1b65	20 8c 16	jsr $168c			jsr 	StackCloseFrame 			; close this frame
.1b68	80 da		bra $1b44			bra 	_CNRetry
.1b6a					_CNNoIndexVariable:
.1b6a	ca		dex				dex
.1b6b	a0 04		ldy #$04			ldy 	#4 							; check for optimised NEXT
.1b6d	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1b6f	29 40		and #$40			and 	#$40	 					; bit 6
.1b71	d0 55		bne $1bc8			bne 	_CNOptimisedNext
.1b73	a0 05		ldy #$05			ldy 	#5 							; copy address to zTemp0, save for write back
.1b75	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1b77	48		pha				pha
.1b78	85 28		sta $28				sta 	zTemp0
.1b7a	c8		iny				iny
.1b7b	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1b7d	18		clc				clc
.1b7e	6d 07 04	adc $0407			adc 	variableStartPage 			; point to variable page.
.1b81	48		pha				pha
.1b82	85 29		sta $29				sta 	zTemp0+1
.1b84	20 49 1e	jsr $1e49			jsr 	ReadFloatZTemp0Sub 			; read current index onto stack.
.1b87	a0 07		ldy #$07			ldy 	#7  						; read step onto stack +1
.1b89	e8		inx				inx
.1b8a	20 0b 1c	jsr $1c0b			jsr 	CopyOffsetYToTOS
.1b8d	20 40 28	jsr $2840			jsr 	FloatAdd
.1b90	68		pla				pla 								; restore address
.1b91	85 29		sta $29				sta 	zTemp0+1
.1b93	68		pla				pla
.1b94	85 28		sta $28				sta 	zTemp0
.1b96	20 24 24	jsr $2424			jsr 	WriteFloatZTemp0Sub			; write float.
.1b99	e8		inx				inx  								; recover written
.1b9a	e8		inx				inx 								; load offset
.1b9b	a0 0d		ldy #$0d			ldy 	#13
.1b9d	20 0b 1c	jsr $1c0b			jsr 	CopyOffsetYToTOS
.1ba0	20 01 29	jsr $2901			jsr 	FloatCompare 				; and compare the floats.
.1ba3	ca		dex				dex 								; throw result (in NSMantissa0+1)
.1ba4	a0 0c		ldy #$0c			ldy 	#12 						; get the sign of the step.
.1ba6	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1ba8	30 08		bmi $1bb2			bmi 	_CNDownStep
.1baa	b5 41		lda $41,x			lda 	NSMantissa0+1,x 			; get comparator
.1bac	c9 01		cmp #$01			cmp 	#1 							; gone higher
.1bae	f0 10		beq $1bc0			beq 	_CNExitFor 					; if so exit the loop
.1bb0	80 06		bra $1bb8			bra 	_CNLoopBack
.1bb2					_CNDownStep:
.1bb2	b5 41		lda $41,x			lda 	NSMantissa0+1,x 			; get comparator
.1bb4	c9 ff		cmp #$ff			cmp 	#255 						; gone lower
.1bb6	f0 08		beq $1bc0			beq 	_CNExitFor
.1bb8					_CNLoopBack:
.1bb8	20 d0 1a	jsr $1ad0			jsr 	StackLoadCurrentPosition 	; loop back
.1bbb	a0 00		ldy #$00			ldy 	#0
.1bbd	4c 2c 10	jmp $102c			jmp 	NextCommand
.1bc0					_CNExitFor:
.1bc0	20 8c 16	jsr $168c			jsr 	StackCloseFrame 			; remove the frame and exit
.1bc3	a0 00		ldy #$00			ldy 	#0
.1bc5	4c 2c 10	jmp $102c			jmp 	NextCommand
.1bc8					_CNOptimisedNext:
.1bc8	a0 05		ldy #$05			ldy 	#5 							; copy address to zTemp0, save for write back
.1bca	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1bcc	85 28		sta $28				sta 	zTemp0
.1bce	c8		iny				iny
.1bcf	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1bd1	18		clc				clc
.1bd2	6d 07 04	adc $0407			adc 	variableStartPage 			; point to variable page.
.1bd5	85 29		sta $29				sta 	zTemp0+1
.1bd7	a0 07		ldy #$07			ldy 	#7 							; STEP value
.1bd9	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1bdb	a0 ff		ldy #$ff			ldy 	#$FF
.1bdd	18		clc				clc
.1bde					_CNOIncrement:
.1bde	c8		iny				iny
.1bdf	71 28		adc ($28),y			adc 	(zTemp0),y
.1be1	91 28		sta ($28),y			sta 	(zTemp0),y
.1be3	f0 f9		beq $1bde			beq 	_CNOIncrement
.1be5	18		clc				clc
.1be6	a5 30		lda $30				lda 	runtimeStackPtr
.1be8	69 0d		adc #$0d			adc 	#13
.1bea	85 2a		sta $2a				sta 	zTemp1
.1bec	a5 31		lda $31				lda 	runtimeStackPtr+1
.1bee	69 00		adc #$00			adc 	#0
.1bf0	85 2b		sta $2b				sta 	zTemp1+1
.1bf2	a0 00		ldy #$00			ldy 	#0
.1bf4	b1 2a		lda ($2a),y			lda 	(zTemp1),y 					; byte 0
.1bf6	d1 28		cmp ($28),y			cmp 	(zTemp0),y
.1bf8	c8		iny				iny
.1bf9	b1 2a		lda ($2a),y			lda 	(zTemp1),y 					; byte 1
.1bfb	f1 28		sbc ($28),y			sbc 	(zTemp0),y
.1bfd	c8		iny				iny
.1bfe	b1 2a		lda ($2a),y			lda 	(zTemp1),y 					; byte 2
.1c00	f1 28		sbc ($28),y			sbc 	(zTemp0),y
.1c02	c8		iny				iny
.1c03	b1 2a		lda ($2a),y			lda 	(zTemp1),y 					; byte 3
.1c05	f1 28		sbc ($28),y			sbc 	(zTemp0),y
.1c07	90 b7		bcc $1bc0			bcc	 	_CNExitFor
.1c09	80 ad		bra $1bb8			bra 	_CNLoopBack
.1c0b					CopyOffsetYToTOS:
.1c0b	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1c0d	95 40		sta $40,x			sta 	NSMantissa0,x
.1c0f	c8		iny				iny
.1c10	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1c12	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1c14	c8		iny				iny
.1c15	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1c17	95 58		sta $58,x			sta 	NSMantissa2,x
.1c19	c8		iny				iny
.1c1a	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1c1c	95 64		sta $64,x			sta 	NSMantissa3,x
.1c1e	c8		iny				iny
.1c1f	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1c21	95 70		sta $70,x			sta 	NSExponent,x
.1c23	c8		iny				iny
.1c24	b1 30		lda ($30),y			lda 	(runtimeStackPtr),y
.1c26	95 34		sta $34,x			sta 	NSStatus,x
.1c28	60		rts				rts
.1c29	4c 2c 10	jmp $102c			jmp 	NextCommand
.1c2c					NotTOS:
.1c2c	fa		plx				plx
.1c2d	20 57 2a	jsr $2a57			jsr 	FloatIntegerPart
.1c30	74 58		stz $58,x			stz 	NSMantissa2,x 				; chop down to 16 bit.
.1c32	74 64		stz $64,x			stz 	NSMantissa3,x
.1c34	20 de 2d	jsr $2dde			jsr 	FloatNegate		 			; negate
.1c37	e8		inx				inx 								; and subtract 1.
.1c38	a9 01		lda #$01			lda 	#1
.1c3a	20 1e 2e	jsr $2e1e			jsr 	FloatSetByte
.1c3d	20 3a 28	jsr $283a			jsr 	FloatSubtract
.1c40					_NotTOSSkip:
.1c40	4c 2c 10	jmp $102c			jmp 	NextCommand
.1c43					CommandOn:
.1c43	fa		plx				plx
.1c44	20 83 19	jsr $1983			jsr 	GetInteger8Bit 				; get the integer part, the ON x GOTO bit
.1c47	8d 5c 04	sta $045c			sta 	onCount 					; save it.
.1c4a	20 97 10	jsr $1097			jsr 	FixUpY 						; Y = 0
.1c4d					_CONFind:
.1c4d	ce 5c 04	dec $045c			dec 	onCount 					; reached zero, do this one
.1c50	f0 0c		beq $1c5e			beq 	_CONFound
.1c52	c8		iny				iny 								; skip over the token (GOTO or GOSUB page, and line #)
.1c53	c8		iny				iny
.1c54	c8		iny				iny
.1c55	c8		iny				iny
.1c56	b1 22		lda ($22),y			lda 	(codePtr),y 				; is there a moreon after it, if so we can keep going.
.1c58	c8		iny				iny
.1c59	c9 aa		cmp #$aa			cmp 	#PCD_MOREON
.1c5b	f0 f0		beq $1c4d			beq 	_CONFind
.1c5d	88		dey				dey 								; point to character after last GOTO/GOSUB
.1c5e					_CONFound:
.1c5e	4c 2c 10	jmp $102c			jmp 	NextCommand
.1c61					CommandMoreOn:
.1c61	fa		plx				plx
.1c62	c8		iny				iny 								; so it goes to the first non-goto/gosub
.1c63	c8		iny				iny
.1c64	c8		iny				iny
.1c65	c8		iny				iny
.1c66	4c 2c 10	jmp $102c			jmp 	NextCommand
.045c					onCount:
>045c							.fill 	1
.1c69					MOFSizeTable:
>1c69	01					.byte	1         	; $ca .shift
>1c6a	01					.byte	1         	; $cb .byte
>1c6b	02					.byte	2         	; $cc .word
>1c6c	05					.byte	5         	; $cd .float
>1c6d	ff					.byte	255       	; $ce .string
>1c6e	ff					.byte	255       	; $cf .data
>1c6f	03					.byte	3         	; $d0 .goto
>1c70	03					.byte	3         	; $d1 .gosub
>1c71	03					.byte	3         	; $d2 .goto.z
>1c72	03					.byte	3         	; $d3 .goto.nz
>1c73	02					.byte	2         	; $d4 .varspace
.1c74					UnaryPeek:
.1c74	fa		plx				plx
.1c75	20 89 19	jsr $1989			jsr 	GetInteger16Bit
.1c78	da		phx				phx
.1c79	5a		phy				phy
.1c7a	a6 28		ldx $28				ldx 	zTemp0
.1c7c	a4 29		ldy $29				ldy 	zTemp0+1
.1c7e	20 b5 25	jsr $25b5			jsr 	XPeekMemory
.1c81	7a		ply				ply
.1c82	fa		plx				plx
.1c83	20 1e 2e	jsr $2e1e			jsr 	FloatSetByte
.1c86	4c 2c 10	jmp $102c			jmp 	NextCommand
.1c89					CommandPOKE:
.1c89	fa		plx				plx
.1c8a	da		phx				phx 								; save XY
.1c8b	5a		phy				phy
.1c8c	20 83 19	jsr $1983			jsr 	GetInteger8Bit 				; get byte to POKE and save it
.1c8f	48		pha				pha
.1c90	b5 4b		lda $4b,x			lda 	NSMantissa1-1,x 			; YX = address from Mantissa next up
.1c92	a8		tay				tay
.1c93	b5 3f		lda $3f,x			lda 	NSMantissa0-1,x
.1c95	aa		tax				tax
.1c96	68		pla				pla
.1c97	20 a1 25	jsr $25a1			jsr 	XPokeMemory
.1c9a	7a		ply				ply 								; restore YX and drop 2
.1c9b	fa		plx				plx
.1c9c	ca		dex				dex
.1c9d	ca		dex				dex
.1c9e	4c 2c 10	jmp $102c			jmp 	NextCommand
.1ca1					UnaryPos:
.1ca1	fa		plx				plx
.1ca2	20 34 25	jsr $2534			jsr 	XGetHPos
.1ca5	20 1e 2e	jsr $2e1e			jsr 	FloatSetByte
.1ca8	4c 2c 10	jmp $102c			jmp 	NextCommand
.1cab					GetChannel:
.1cab	fa		plx				plx
.1cac	ad 5d 04	lda $045d			lda 	currentChannel
.1caf	e8		inx				inx
.1cb0	20 1e 2e	jsr $2e1e			jsr 	FloatSetByte
.1cb3	4c 2c 10	jmp $102c			jmp 	NextCommand
.1cb6					SetChannel:
.1cb6	fa		plx				plx
.1cb7	20 57 2a	jsr $2a57			jsr 	FloatIntegerPart
.1cba	b5 40		lda $40,x			lda 	NSMantissa0,x
.1cbc	8d 5d 04	sta $045d			sta 	currentChannel
.1cbf	ca		dex				dex
.1cc0	4c 2c 10	jmp $102c			jmp 	NextCommand
.1cc3					SetDefaultChannel:
.1cc3	9c 5d 04	stz $045d			stz 	currentChannel
.1cc6	60		rts				rts
.1cc7					VectorPrintCharacter:
.1cc7	da		phx				phx
.1cc8	ae 5d 04	ldx $045d			ldx 	currentChannel
.1ccb	20 df 25	jsr $25df			jsr 	XPrintCharacterToChannel
.1cce	fa		plx				plx
.1ccf	60		rts				rts
.1cd0					VectorGetCharacter:
.1cd0	da		phx				phx
.1cd1	ae 5d 04	ldx $045d			ldx 	currentChannel
.1cd4	20 18 25	jsr $2518			jsr 	XGetCharacterFromChannel
.1cd7	fa		plx				plx
.1cd8	60		rts				rts
.045d					currentChannel:
>045d							.fill 	1
.1cd9					PrintNumber:
.1cd9	fa		plx				plx
.1cda	a9 07		lda #$07			lda 	#7
.1cdc	20 04 2d	jsr $2d04			jsr 	FloatToString 				; to number in decimal buffer
.1cdf	ca		dex				dex 								; drop
.1ce0	da		phx				phx
.1ce1	a2 00		ldx #$00			ldx 	#0 							; print buffer.
.1ce3					_PNLoop:
.1ce3	bd 94 05	lda $0594,x			lda 	decimalBuffer,x
.1ce6	20 c7 1c	jsr $1cc7			jsr 	VectorPrintCharacter
.1ce9	e8		inx				inx
.1cea	bd 94 05	lda $0594,x			lda	 	decimalBuffer,x
.1ced	d0 f4		bne $1ce3			bne 	_PNLoop
.1cef	a9 20		lda #$20			lda 	#32 						; trailing space
.1cf1	20 c7 1c	jsr $1cc7			jsr 	VectorPrintCharacter
.1cf4	fa		plx				plx
.1cf5	4c 2c 10	jmp $102c			jmp 	NextCommand
.1cf8					PrintString:
.1cf8	fa		plx				plx
.1cf9	b5 40		lda $40,x			lda 	NSMantissa0,x 				; point zTemp0 to string
.1cfb	85 28		sta $28				sta 	zTemp0
.1cfd	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.1cff	85 29		sta $29				sta 	zTemp0+1
.1d01	ca		dex				dex 								; drop
.1d02	da		phx				phx
.1d03	5a		phy				phy
.1d04	b2 28		lda ($28)			lda 	(zTemp0) 					; X = count
.1d06	aa		tax				tax
.1d07	a0 01		ldy #$01			ldy 	#1 							; Y = position
.1d09					_PSLoop:
.1d09	e0 00		cpx #$00			cpx 	#0 							; complete ?
.1d0b	f0 09		beq $1d16			beq 	_PSExit
.1d0d	ca		dex				dex 								; dec count
.1d0e	b1 28		lda ($28),y			lda 	(zTemp0),y 					; print char and bump
.1d10	20 c7 1c	jsr $1cc7			jsr 	VectorPrintCharacter
.1d13	c8		iny				iny
.1d14	80 f3		bra $1d09			bra 	_PSLoop
.1d16					_PSExit:
.1d16	7a		ply				ply
.1d17	fa		plx				plx
.1d18	4c 2c 10	jmp $102c			jmp 	NextCommand
.1d1b					CommandPushN:
.1d1b	fa		plx				plx
.1d1c	e8		inx				inx 								; next slot on stack
.1d1d	b1 22		lda ($22),y			lda 	(codePtr),y 				; exponent
.1d1f	95 70		sta $70,x			sta 	NSExponent,x
.1d21	c8		iny				iny
.1d22	b1 22		lda ($22),y			lda 	(codePtr),y 				; mantissa
.1d24	95 40		sta $40,x			sta 	NSMantissa0,x
.1d26	c8		iny				iny
.1d27	b1 22		lda ($22),y			lda 	(codePtr),y
.1d29	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1d2b	c8		iny				iny
.1d2c	b1 22		lda ($22),y			lda 	(codePtr),y
.1d2e	95 58		sta $58,x			sta 	NSMantissa2,x
.1d30	c8		iny				iny
.1d31	b1 22		lda ($22),y			lda 	(codePtr),y
.1d33	48		pha				pha
.1d34	29 7f		and #$7f			and 	#$7F
.1d36	95 64		sta $64,x			sta 	NSMantissa3,x
.1d38	68		pla				pla 								; sign in mantissa3:7
.1d39	29 80		and #$80			and 	#$80
.1d3b	95 34		sta $34,x			sta 	NSStatus,x
.1d3d	c8		iny				iny
.1d3e	4c 2c 10	jmp $102c			jmp 	NextCommand
.1d41					CommandPushS:
.1d41	fa		plx				plx
.1d42	e8		inx				inx 								; next slot on stack
.1d43	18		clc				clc
.1d44	98		tya				tya
.1d45	65 22		adc $22				adc 	codePtr 					; the string is inline
.1d47	95 40		sta $40,x			sta 	NSMantissa0,x
.1d49	a5 23		lda $23				lda 	codePtr+1
.1d4b	69 00		adc #$00			adc 	#0
.1d4d	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1d4f	74 58		stz $58,x			stz 	NSMantissa2,x
.1d51	74 64		stz $64,x			stz 	NSMantissa3,x
.1d53	a9 40		lda #$40			lda 	#NSSString
.1d55	95 34		sta $34,x			sta 	NSStatus,x
.1d57	98		tya				tya 								; string length +1 added to Y
.1d58	38		sec				sec
.1d59	71 22		adc ($22),y			adc 	(codePtr),y 				; next instruction
.1d5b	a8		tay				tay
.1d5c	4c 2c 10	jmp $102c			jmp 	NextCommand
.1d5f					CommandRead:
.1d5f	fa		plx				plx
.1d60	5a		phy				phy 								; save Y
.1d61	20 92 1d	jsr $1d92			jsr 	ReadStringToBuffer 			; read element into buffer
.1d64	e8		inx				inx									; space on stack
.1d65	a9 5f		lda #$5f			lda 	#((ReadBufferSize) & $FF)
.1d67	85 28		sta $28				sta 	0+zTemp0
.1d69	a9 04		lda #$04			lda 	#((ReadBufferSize) >> 8) & $FF
.1d6b	85 29		sta $29				sta 	1+zTemp0
.1d6d	20 b1 22	jsr $22b1			jsr 	ValEvaluateZTemp0
.1d70	b0 04		bcs $1d76			bcs 	_CRError 					; failed
.1d72	7a		ply				ply 								; restore Y
.1d73	4c 2c 10	jmp $102c			jmp 	NextCommand
.1d76					_CRError:
.1d76	4c 8d 14	jmp $148d		jmp	ErrorV_value
.1d79					CommandReadString:
.1d79	fa		plx				plx
.1d7a	5a		phy				phy 								; save Y
.1d7b	20 92 1d	jsr $1d92			jsr 	ReadStringToBuffer 			; read text
.1d7e	e8		inx				inx 								; make space on stack
.1d7f	20 1c 2e	jsr $2e1c			jsr 	FloatSetZero 				; store as string on stack
.1d82	a9 5f		lda #$5f			lda 	#ReadBufferSize & $FF
.1d84	95 40		sta $40,x			sta 	NSMantissa0,x
.1d86	a9 04		lda #$04			lda 	#ReadBufferSize >> 8
.1d88	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1d8a	a9 40		lda #$40			lda 	#NSSString
.1d8c	95 34		sta $34,x			sta 	NSStatus,x
.1d8e	7a		ply				ply 								; restore Y
.1d8f	4c 2c 10	jmp $102c			jmp 	NextCommand
.1d92					ReadStringToBuffer:
.1d92	a9 25		lda #$25			lda 	#((ReadBumpNext) & $FF)
.1d94	8d 5f 05	sta $055f			sta 	0+ReadBumpNextVec
.1d97	a9 1e		lda #$1e			lda 	#((ReadBumpNext) >> 8) & $FF
.1d99	8d 60 05	sta $0560			sta 	1+ReadBumpNextVec
.1d9c	a9 f8		lda #$f8			lda 	#((ReadLookNext) & $FF)
.1d9e	8d 61 05	sta $0561			sta 	0+ReadLookNextVec
.1da1	a9 1d		lda #$1d			lda 	#((ReadLookNext) >> 8) & $FF
.1da3	8d 62 05	sta $0562			sta 	1+ReadLookNextVec
.1da6					GetStringToBuffer:
.1da6	20 f5 1d	jsr $1df5			jsr		GetLookNext 				; skip all leading spaces.
.1da9	f0 44		beq $1def			beq 	_RBError 					; end of data
.1dab	b0 f9		bcs $1da6			bcs 	GetStringToBuffer 			; switched to new data line.
.1dad	c9 20		cmp #$20			cmp 	#' ' 						; non space got something
.1daf	b0 05		bcs $1db6			bcs 	_RBNoSpace
.1db1	20 f2 1d	jsr $1df2			jsr 	GetBumpNext 				; consume space and loop round.
.1db4	80 f0		bra $1da6			bra 	GetStringToBuffer
.1db6					_RBNoSpace:
.1db6	9c 5f 04	stz $045f			stz 	ReadBufferSize 				; empty the buffer.
.1db9	c9 22		cmp #$22			cmp 	#'"' 						; is it a '"'
.1dbb	d0 08		bne $1dc5			bne 	_RBCommaSep
.1dbd	8d 5e 04	sta $045e			sta 	ReadSep 					; use as a seperator
.1dc0	20 f2 1d	jsr $1df2			jsr 	GetBumpNext 				; consume the '"'
.1dc3	80 05		bra $1dca			bra 	_RBGetText
.1dc5					_RBCommaSep:
.1dc5	a9 2c		lda #$2c			lda 	#","						; get till comma
.1dc7	8d 5e 04	sta $045e			sta 	ReadSep
.1dca					_RBGetText:
.1dca	20 f5 1d	jsr $1df5			jsr 	GetLookNext 				; what follows
.1dcd	b0 18		bcs $1de7			bcs 	_RBEndGet 					; if new DATA line, the end without consumption
.1dcf	20 f2 1d	jsr $1df2			jsr 	GetBumpNext 				; consume it whatever
.1dd2	cd 5e 04	cmp $045e			cmp 	ReadSep 					; if found the seperator.
.1dd5	f0 10		beq $1de7			beq 	_RBEndGet 					; exit after consumption
.1dd7	da		phx				phx
.1dd8	ae 5f 04	ldx $045f			ldx 	ReadBufferSize 				; copy into buffer.
.1ddb	ee 5f 04	inc $045f			inc 	ReadBufferSize
.1dde	9d 60 04	sta $0460,x			sta 	ReadBuffer,x
.1de1	9e 61 04	stz $0461,x			stz 	ReadBuffer+1,x 				; make ASCIIZ as well.
.1de4	fa		plx				plx
.1de5	80 e3		bra $1dca			bra 	_RBGetText
.1de7					_RBEndGet:
.1de7	c9 22		cmp #$22			cmp 	#'"'
.1de9	d0 03		bne $1dee			bne 	_RBNotQuote
.1deb	20 f2 1d	jsr $1df2			jsr 	GetBumpNext
.1dee					_RBNotQuote:
.1dee	60		rts				rts
.1def					_RBError:
.1def	4c 42 15	jmp $1542		jmp	ErrorV_data
.1df2					GetBumpNext:
.1df2	6c 5f 05	jmp ($055f)			jmp 	(ReadBumpNextVec)
.1df5					GetLookNext:
.1df5	6c 61 05	jmp ($0561)			jmp 	(ReadLookNextVec)
.1df8					ReadLookNext:
.1df8	ad 63 05	lda $0563			lda 	dataRemaining 				; any data remaining
.1dfb	f0 04		beq $1e01			beq 	_RLNFindData
.1dfd	b2 25		lda ($25)			lda 	(objPtr) 					; return that object.
.1dff	18		clc				clc
.1e00	60		rts				rts
.1e01					_RLNFindData:
.1e01	b2 25		lda ($25)			lda 	(objPtr) 					; see where we are
.1e03	c9 ff		cmp #$ff			cmp 	#$FF 						; if at $FF then end, error.
.1e05	f0 1a		beq $1e21			beq 	_RLNNoData
.1e07	c9 cf		cmp #$cf			cmp 	#PCD_CMD_DATA 				; Found DATA
.1e09	f0 05		beq $1e10			beq 	_RLNHaveData
.1e0b					_RLNNext:
.1e0b	20 32 16	jsr $1632			jsr 	MoveObjectForward			; else scan forward.
.1e0e	80 f1		bra $1e01			bra 	_RLNFindData
.1e10					_RLNHaveData:
.1e10	a0 01		ldy #$01			ldy 	#1 							; get length
.1e12	b1 25		lda ($25),y			lda 	(objPtr),y
.1e14	f0 f5		beq $1e0b			beq 	_RLNNext 					; skip if DATA alone
.1e16	20 25 1e	jsr $1e25			jsr 	ReadBumpNext 				; advance by two
.1e19	20 25 1e	jsr $1e25			jsr 	ReadBumpNext
.1e1c	8d 63 05	sta $0563			sta 	dataRemaining 				; set data left count.
.1e1f	38		sec				sec
.1e20	60		rts				rts
.1e21					_RLNNoData:
.1e21	a9 00		lda #$00			lda 	#0
.1e23	38		sec				sec
.1e24	60		rts				rts
.1e25					ReadBumpNext:
.1e25	e6 25		inc $25				inc 	objPtr
.1e27	d0 02		bne $1e2b			bne 	_RBNSkip
.1e29	e6 26		inc $26				inc 	objPtr+1
.1e2b					_RBNSkip:
.1e2b	ce 63 05	dec $0563			dec 	dataRemaining
.1e2e	60		rts				rts
.045e					ReadSep:
>045e							.fill 	1
.045f					ReadBufferSize:
>045f							.fill 	1
.0460					ReadBuffer:
>0460							.fill 	255
.055f					ReadBumpNextVec:
>055f							.fill 	2
.0561					ReadLookNextVec:
>0561							.fill 	2
.1e2f					ReadFloatCommand:
.1e2f	fa		plx				plx
.1e30	b1 22		lda ($22),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.1e32	85 28		sta $28				sta 	zTemp0 						; save in MSB
.1e34	88		dey				dey 								; get the upper 3 bits
.1e35	b1 22		lda ($22),y			lda 	(codePtr),y
.1e37	29 07		and #$07			and 	#7
.1e39	c8		iny				iny
.1e3a	c8		iny				iny
.1e3b	06 28		asl $28				asl 	zTemp0 						; shift zTemp0:A left
.1e3d	2a		rol a				rol 	a 							; carry will be clear.
.1e3e	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.1e41	85 29		sta $29				sta 	zTemp0+1
.1e43	20 49 1e	jsr $1e49			jsr 	ReadFloatZTemp0Sub
.1e46	4c 2c 10	jmp $102c			jmp 	NextCommand
.1e49					ReadFloatZTemp0Sub:
.1e49	5a		phy				phy 								; start write
.1e4a	a0 01		ldy #$01			ldy 	#1
.1e4c	e8		inx				inx
.1e4d	b2 28		lda ($28)			lda 	(zTemp0)
.1e4f	95 40		sta $40,x			sta 	NSMantissa0,x
.1e51	b1 28		lda ($28),y			lda 	(zTemp0),y
.1e53	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1e55	c8		iny				iny
.1e56	b1 28		lda ($28),y			lda 	(zTemp0),y
.1e58	95 58		sta $58,x			sta 	NSMantissa2,x
.1e5a	c8		iny				iny
.1e5b	b1 28		lda ($28),y			lda 	(zTemp0),y
.1e5d	95 64		sta $64,x			sta 	NSMantissa3,x
.1e5f	c8		iny				iny
.1e60	b1 28		lda ($28),y			lda 	(zTemp0),y
.1e62	95 70		sta $70,x			sta 	NSExponent,x
.1e64	c8		iny				iny
.1e65	b1 28		lda ($28),y			lda 	(zTemp0),y
.1e67	95 34		sta $34,x			sta 	NSStatus,x
.1e69	7a		ply				ply
.1e6a	60		rts				rts
.1e6b					ReadIntegerCommand:
.1e6b	fa		plx				plx
.1e6c	b1 22		lda ($22),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.1e6e	85 28		sta $28				sta 	zTemp0 						; save in MSB
.1e70	88		dey				dey 								; get the upper 3 bits
.1e71	b1 22		lda ($22),y			lda 	(codePtr),y
.1e73	29 07		and #$07			and 	#7
.1e75	c8		iny				iny
.1e76	c8		iny				iny
.1e77	06 28		asl $28				asl 	zTemp0 						; shift zTemp0:A left
.1e79	2a		rol a				rol 	a 							; carry will be clear.
.1e7a	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.1e7d	85 29		sta $29				sta 	zTemp0+1
.1e7f	20 85 1e	jsr $1e85			jsr 	ReadIntegerZTemp0Sub
.1e82	4c 2c 10	jmp $102c			jmp 	NextCommand
.1e85					ReadIntegerZTemp0Sub:
.1e85	5a		phy				phy 								; start write
.1e86	a0 01		ldy #$01			ldy 	#1
.1e88	e8		inx				inx 								; prepare
.1e89	74 58		stz $58,x			stz 	NSMantissa2,x
.1e8b	74 64		stz $64,x			stz 	NSMantissa3,x
.1e8d	74 70		stz $70,x			stz 	NSExponent,x
.1e8f	74 34		stz $34,x			stz 	NSStatus,x
.1e91	b1 28		lda ($28),y			lda 	(zTemp0),y 					; get MSB, do -ve code.
.1e93	30 08		bmi $1e9d			bmi 	_RIZNegative
.1e95	95 4c		sta $4c,x			sta 	NSMantissa1,x 				; +ve read
.1e97	b2 28		lda ($28)			lda 	(zTemp0)
.1e99	95 40		sta $40,x			sta 	NSMantissa0,x
.1e9b	7a		ply				ply
.1e9c	60		rts				rts
.1e9d					_RIZNegative:
.1e9d	38		sec				sec 								; -ve read
.1e9e	a9 00		lda #$00			lda 	#0
.1ea0	f2 28		sbc ($28)			sbc 	(zTemp0)
.1ea2	95 40		sta $40,x			sta 	NSMantissa0,x
.1ea4	a9 00		lda #$00			lda 	#0
.1ea6	f1 28		sbc ($28),y			sbc 	(zTemp0),y
.1ea8	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1eaa	a9 80		lda #$80			lda 	#$80
.1eac	95 34		sta $34,x			sta 	NSStatus,x
.1eae	7a		ply				ply
.1eaf	60		rts				rts
.1eb0					ReadStringCommand:
.1eb0	fa		plx				plx
.1eb1	b1 22		lda ($22),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.1eb3	85 28		sta $28				sta 	zTemp0 						; save in MSB
.1eb5	88		dey				dey 								; get the upper 3 bits
.1eb6	b1 22		lda ($22),y			lda 	(codePtr),y
.1eb8	29 07		and #$07			and 	#7
.1eba	c8		iny				iny
.1ebb	c8		iny				iny
.1ebc	06 28		asl $28				asl 	zTemp0 						; shift zTemp0:A left
.1ebe	2a		rol a				rol 	a 							; carry will be clear.
.1ebf	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.1ec2	85 29		sta $29				sta 	zTemp0+1
.1ec4	20 ca 1e	jsr $1eca			jsr 	ReadStringZTemp0Sub
.1ec7	4c 2c 10	jmp $102c			jmp 	NextCommand
.1eca					ReadStringZTemp0Sub:
.1eca	5a		phy				phy 								; start write
.1ecb	e8		inx				inx 								; prepare
.1ecc	74 58		stz $58,x			stz 	NSMantissa2,x
.1ece	74 64		stz $64,x			stz 	NSMantissa3,x
.1ed0	74 70		stz $70,x			stz 	NSExponent,x
.1ed2	a9 40		lda #$40			lda 	#NSSString
.1ed4	74 34		stz $34,x			stz 	NSStatus,x
.1ed6	18		clc				clc
.1ed7	b2 28		lda ($28)			lda 	(zTemp0)					; read address of block add 2.
.1ed9	69 02		adc #$02			adc 	#2 							; this points to actual data
.1edb	95 40		sta $40,x			sta 	NSMantissa0,x 				; if address 0 the MSB will still be 0
.1edd	a0 01		ldy #$01			ldy 	#1
.1edf	b1 28		lda ($28),y			lda 	(zTemp0),y
.1ee1	69 00		adc #$00			adc 	#0
.1ee3	95 4c		sta $4c,x			sta 	NSMantissa1,x 				; +ve read
.1ee5	d0 08		bne $1eef			bne 	_RSZNoDefault 				; if read $00 use a default value.
.1ee7	a9 f1		lda #$f1			lda 	#_RSZNull & $FF
.1ee9	95 40		sta $40,x			sta 	NSMantissa0,x
.1eeb	a9 1e		lda #$1e			lda 	#_RSZNull >> 8
.1eed	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1eef					_RSZNoDefault:
.1eef	7a		ply				ply
.1ef0	60		rts				rts
.1ef1					_RSZNull:
>1ef1	00						.byte 	0
.1ef2					CommandRestore:
.1ef2	fa		plx				plx
.1ef3	20 f9 1e	jsr $1ef9			jsr 	RestoreCode
.1ef6	4c 2c 10	jmp $102c			jmp 	NextCommand
.1ef9					RestoreCode:
.1ef9	ad 04 04	lda $0404			lda 	runtimeHigh 				; reset pointer and page
.1efc	85 28		sta $28				sta 	objPage+1
.1efe	64 27		stz $27				stz  	objPage
.1f00	9c 63 05	stz $0563			stz 	dataRemaining 				; no data remaining.
.1f03	60		rts				rts
.0563					dataRemaining:
>0563							.fill 	1		 					; 0 if not in data statement
.1f04					UnaryRND:
.1f04	fa		plx				plx
.1f05	34 34		bit $34,x			bit 	NSStatus,x 					; -ve then set seed from operand
.1f07	10 17		bpl $1f20			bpl 	_URNoSeed
.1f09	20 71 2b	jsr $2b71			jsr 	FloatNormalise 				; some float value
.1f0c	b5 40		lda $40,x			lda 	NSMantissa0,x 				; copy to Mantissa
.1f0e	8d 64 05	sta $0564			sta 	randomSeed+0
.1f11	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.1f13	8d 65 05	sta $0565			sta 	randomSeed+1
.1f16	b5 58		lda $58,x			lda 	NSMantissa2,x
.1f18	8d 66 05	sta $0566			sta 	randomSeed+2
.1f1b	b5 64		lda $64,x			lda 	NSMantissa3,x
.1f1d	8d 67 05	sta $0567			sta 	randomSeed+3
.1f20					_URNoSeed:
.1f20	20 42 1f	jsr $1f42			jsr 	RandomNumberGenerator 		; create a number and copy to mantissa
.1f23	ad 64 05	lda $0564			lda 	randomSeed+0
.1f26	95 40		sta $40,x			sta 	NSMantissa0,x
.1f28	ad 65 05	lda $0565			lda 	randomSeed+1
.1f2b	95 4c		sta $4c,x			sta 	NSMantissa1,x
.1f2d	ad 66 05	lda $0566			lda 	randomSeed+2
.1f30	95 58		sta $58,x			sta 	NSMantissa2,x
.1f32	ad 67 05	lda $0567			lda 	randomSeed+3
.1f35	29 7f		and #$7f			and 	#$7F
.1f37	95 64		sta $64,x			sta 	NSMantissa3,x
.1f39	a9 e1		lda #$e1			lda 	#(-31 & $FF)
.1f3b	95 70		sta $70,x			sta 	NSExponent,x
.1f3d	74 34		stz $34,x			stz 	NSStatus,x
.1f3f	4c 2c 10	jmp $102c			jmp 	NextCommand
.1f42					RandomNumberGenerator:
.1f42	5a		phy				phy
.1f43	ad 64 05	lda $0564			lda 	randomSeed+0 				; check if zero
.1f46	0d 65 05	ora $0565			ora 	randomSeed+1
.1f49	0d 66 05	ora $0566			ora 	randomSeed+2
.1f4c	0d 67 05	ora $0567			ora 	randomSeed+3
.1f4f	d0 07		bne $1f58			bne 	_RNGNoSeed
.1f51	ce 67 05	dec $0567			dec 	randomSeed+3 				; if so tweak and flog
.1f54	a0 64		ldy #$64			ldy 	#100
.1f56	80 05		bra $1f5d			bra 	_RNGLoop
.1f58					_RNGNoSeed:
.1f58	a0 08		ldy #$08			ldy 	#8
.1f5a	ad 64 05	lda $0564			lda 	randomSeed+0
.1f5d					_RNGLoop:
.1f5d	0a		asl a				asl		a
.1f5e	2e 65 05	rol $0565			rol 	randomSeed+1
.1f61	2e 66 05	rol $0566			rol 	randomSeed+2
.1f64	2e 67 05	rol $0567			rol 	randomSeed+3
.1f67	90 02		bcc $1f6b			bcc		_RNGSkip
.1f69	49 c5		eor #$c5			eor 	#$C5
.1f6b					_RNGSkip:
.1f6b	88		dey				dey
.1f6c	d0 ef		bne $1f5d			bne		_RNGLoop
.1f6e	8d 64 05	sta $0564			sta 	randomSeed+0
.1f71	7a		ply				ply
.1f72	60		rts				rts
.0564					randomSeed:
>0564							.fill 	4
.1f73					StringConcatenate:
.1f73	fa		plx				plx
.1f74	ca		dex				dex
.1f75	b5 40		lda $40,x			lda 	NSMantissa0,x 				; copy strings to zTemp1 and zTemp2
.1f77	85 2a		sta $2a				sta 	zTemp1
.1f79	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.1f7b	85 2b		sta $2b				sta 	zTemp1+1
.1f7d	b5 41		lda $41,x			lda 	NSMantissa0+1,x
.1f7f	85 2c		sta $2c				sta 	zTemp2
.1f81	b5 4d		lda $4d,x			lda 	NSMantissa1+1,x
.1f83	85 2d		sta $2d				sta 	zTemp2+1
.1f85	18		clc				clc 								; work out total length
.1f86	b2 2a		lda ($2a)			lda 	(zTemp1)
.1f88	72 2c		adc ($2c)			adc 	(zTemp2)
.1f8a	b0 18		bcs $1fa4			bcs 	_BCLength 					; more than 255 characters.
.1f8c	48		pha				pha 								; save total
.1f8d	20 6a 20	jsr $206a			jsr 	StringAllocTemp 			; space for result.
.1f90	68		pla				pla 								; write total as first.
.1f91	92 2e		sta ($2e)			sta 	(zsTemp)
.1f93	20 a7 1f	jsr $1fa7			jsr 	_BCCopyZTemp1 				; copy zTemp1 to target
.1f96	a5 2c		lda $2c				lda 	zTemp2 						; copy address zTemp2->1
.1f98	85 2a		sta $2a				sta 	zTemp1
.1f9a	a5 2d		lda $2d				lda 	zTemp2+1
.1f9c	85 2b		sta $2b				sta 	zTemp1+1
.1f9e	20 a7 1f	jsr $1fa7			jsr 	_BCCopyZTemp1 				; and copy it, e.g. zTemp2
.1fa1	4c 2c 10	jmp $102c			jmp 	NextCommand
.1fa4					_BCLength:
.1fa4	4c 7d 14	jmp $147d		jmp	ErrorV_range
.1fa7					_BCCopyZTemp1:
.1fa7	b2 2a		lda ($2a)			lda 	(zTemp1) 					; bytes to copy
.1fa9	f0 15		beq $1fc0			beq 	_BCCExit 					; none.
.1fab	da		phx				phx 								; save XY
.1fac	5a		phy				phy
.1fad	aa		tax				tax 								; count in X.
.1fae	a0 01		ldy #$01			ldy 	#1
.1fb0					_BCCLoop:
.1fb0	e6 2e		inc $2e				inc 	zsTemp 						; bump pointer, pre-increment
.1fb2	d0 02		bne $1fb6			bne 	_BCCNoCarry
.1fb4	e6 2f		inc $2f				inc 	zsTemp+1
.1fb6					_BCCNoCarry:
.1fb6	b1 2a		lda ($2a),y			lda 	(zTemp1),y				 	; copy bytes
.1fb8	92 2e		sta ($2e)			sta 	(zsTemp)
.1fba	c8		iny				iny
.1fbb	ca		dex				dex 								; X times
.1fbc	d0 f2		bne $1fb0			bne 	_BCCLoop
.1fbe	7a		ply				ply 								; restore YX
.1fbf	fa		plx				plx
.1fc0					_BCCExit:
.1fc0	60		rts				rts
.1fc1					XRuntimeSetup:
.1fc1	a9 ff		lda #$ff	 		lda 	#$FF 						; default banks to access.
.1fc3	8d 6b 05	sta $056b	 		sta 	ramBank
.1fc6	8d 6c 05	sta $056c	 		sta 	romBank
.1fc9	60		rts				rts
.1fca					SignTOS:
.1fca	fa		plx				plx
.1fcb	20 3e 2e	jsr $2e3e			jsr 	FloatIsZero 				; if zero
.1fce	f0 0f		beq $1fdf			beq 	_SGZero  					; return Int Zero
.1fd0	b5 34		lda $34,x			lda 	NSStatus,x 					; get status w/sign
.1fd2	48		pha				pha
.1fd3	a9 01		lda #$01			lda 	#1 							; set result to 1
.1fd5	20 1e 2e	jsr $2e1e			jsr 	FloatSetByte
.1fd8	68		pla				pla
.1fd9	29 80		and #$80			and		#$80 						; copy the sign byte out
.1fdb	95 34		sta $34,x			sta 	NSStatus,x  				; so it will be -1 or 1
.1fdd	80 03		bra $1fe2			bra 	_SGExit
.1fdf					_SGZero:
.1fdf	20 1c 2e	jsr $2e1c			jsr 	FloatSetZero
.1fe2					_SGExit:
.1fe2	4c 2c 10	jmp $102c			jmp 	NextCommand
.1fe5					CommandShift:
.1fe5	b1 22		lda ($22),y			lda 	(codePtr),y 				; get shifted command (X already pushed)
.1fe7	c8		iny				iny
.1fe8	0a		asl a				asl 	a 							; double into X
.1fe9	aa		tax				tax
.1fea	7c 95 23	jmp ($2395,x)			jmp 	(ShiftVectorTable,x) 		; go there.
.1fed					PrintTab:
.1fed	fa		plx				plx
.1fee	20 34 25	jsr $2534			jsr 	XGetHPos
.1ff1					_PTMod10:
.1ff1	38		sec				sec
.1ff2	e9 0a		sbc #$0a			sbc 	#10
.1ff4	b0 fb		bcs $1ff1			bcs 	_PTMod10
.1ff6	49 ff		eor #$ff			eor 	#255 						; subtract from 10 effectively. negate it
.1ff8	1a		inc a				inc 	a 							; if modulus is 0, then this will be -10 => 10
.1ff9	80 15		bra $2010			bra 	PrintSpaceLoop
.1ffb					PrintPos:
.1ffb	fa		plx				plx
.1ffc	20 34 25	jsr $2534			jsr		XGetHPos 					; get current position
.1fff	85 28		sta $28				sta 	zTemp0
.2001	38		sec				sec 								; calculate spaces required
.2002	b5 40		lda $40,x			lda 	NSMantissa0,x
.2004	ca		dex				dex
.2005	e5 28		sbc $28				sbc 	zTemp0
.2007	b0 07		bcs $2010			bcs 	PrintSpaceLoop 				; if >= 0 then do that many spaces
.2009	4c 2c 10	jmp $102c			jmp 	NextCommand
.200c					PrintSpace:
.200c	fa		plx				plx
.200d	b5 40		lda $40,x			lda 	NSMantissa0,x
.200f	ca		dex				dex
.2010					PrintSpaceLoop:
.2010	c9 00		cmp #$00			cmp 	#0
.2012	f0 0a		beq $201e			beq 	_PSExit
.2014	48		pha				pha
.2015	a9 20		lda #$20			lda 	#" "
.2017	20 c7 1c	jsr $1cc7			jsr 	VectorPrintCharacter
.201a	68		pla				pla
.201b	3a		dec a				dec 	a
.201c	80 f2		bra $2010			bra 	PrintSpaceLoop
.201e					_PSExit:
.201e	4c 2c 10	jmp $102c			jmp 	NextCommand
.2021					CommandStop:
.2021	fa		plx				plx
.2022	4c 2f 15	jmp $152f		jmp	ErrorV_stop
.2025					Unary_Str:
.2025	fa		plx				plx
.2026	5a		phy				phy
.2027	a9 08		lda #$08			lda 	#8 							; maximum decimal places.
.2029	20 04 2d	jsr $2d04			jsr 	FloatToString 				; do the conversion.
.202c	a9 21		lda #$21			lda		#33 						; create buffer
.202e	20 6a 20	jsr $206a			jsr 	StringAllocTemp 			; allocate memory
.2031	a0 01		ldy #$01			ldy 	#1  						; copy the converted string into the buffer.
.2033					_USCopy:
.2033	b9 93 05	lda $0593,y			lda 	decimalBuffer-1,y
.2036	f0 05		beq $203d			beq 	_USExit
.2038	91 2e		sta ($2e),y			sta 	(zsTemp),y
.203a	c8		iny				iny
.203b	80 f6		bra $2033			bra 	_USCopy
.203d					_USExit:
.203d	98		tya				tya
.203e	3a		dec a				dec 	a
.203f	92 2e		sta ($2e)			sta 	(zsTemp)
.2041	7a		ply				ply
.2042	4c 2c 10	jmp $102c			jmp 	NextCommand
.2045					StringInitialise:
.2045	48		pha				pha
.2046	ad 68 05	lda $0568			lda 	stringInitialised 			; already done
.2049	d0 11		bne $205c			bne 	_SIExit
.204b	ad 02 04	lda $0402			lda 	stringHighMemory 			; copy high memory - 512 => stringTempPointer
.204e	8d 69 05	sta $0569			sta 	stringTempPointer
.2051	ad 03 04	lda $0403			lda 	stringHighMemory+1
.2054	3a		dec a				dec 	a
.2055	3a		dec a				dec 	a
.2056	8d 6a 05	sta $056a			sta 	stringTempPointer+1
.2059	ce 68 05	dec $0568			dec 	stringInitialised 			; set the initialised flag.
.205c					_SIExit:
.205c	a5 33		lda $33				lda 	availableMemory+1 			; check out of memory
.205e	1a		inc a				inc 	a
.205f	1a		inc a				inc 	a
.2060	cd 03 04	cmp $0403			cmp 	stringHighMemory+1
.2063	b0 02		bcs $2067			bcs 	_SIMemory
.2065	68		pla				pla
.2066	60		rts				rts
.2067					_SIMemory:
.2067	4c 88 15	jmp $1588		jmp	ErrorV_memory
.206a					StringAllocTemp:
.206a	20 45 20	jsr $2045			jsr 	StringInitialise 			; check it is initialised.
.206d	49 ff		eor #$ff			eor 	#$FF 						; subtract A+1 from temp pointer.
.206f	18		clc				clc
.2070	6d 69 05	adc $0569			adc 	stringTempPointer 			; subtract 32 from temp pointer and
.2073	8d 69 05	sta $0569			sta 	stringTempPointer 			; save in zsTemp and stackas well.
.2076	85 2e		sta $2e				sta 	zsTemp
.2078	95 40		sta $40,x			sta 	NSMantissa0,x
.207a	ad 6a 05	lda $056a			lda 	stringTempPointer+1
.207d	69 ff		adc #$ff			adc 	#$FF
.207f	8d 6a 05	sta $056a			sta 	stringTempPointer+1
.2082	85 2f		sta $2f				sta 	zsTemp+1
.2084	95 4c		sta $4c,x			sta 	NSMantissa1,x
.2086	74 58		stz $58,x			stz 	NSMantissa2,x
.2088	74 64		stz $64,x			stz 	NSMantissa3,x
.208a	a9 00		lda #$00			lda 	#0 							; clear string.
.208c	92 2e		sta ($2e)			sta 	(zsTemp)
.208e	a9 40		lda #$40			lda 	#NSSString 			 		; mark as string
.2090	95 34		sta $34,x			sta 	NSStatus,x
.2092	60		rts				rts
.2093					StringWriteChar:
.2093	5a		phy				phy
.2094	48		pha				pha
.2095	b2 2e		lda ($2e)			lda 	(zsTemp)
.2097	1a		inc a				inc 	a
.2098	92 2e		sta ($2e)			sta 	(zsTemp)
.209a	a8		tay				tay
.209b	68		pla				pla
.209c	91 2e		sta ($2e),y			sta 	(zsTemp),y
.209e	7a		ply				ply
.209f	60		rts				rts
.0568					stringInitialised:
>0568							.fill 	1
.0569					stringTempPointer:
>0569							.fill 	2
.20a0					Unary_Left:
.20a0	fa		plx				plx
.20a1	5a		phy				phy
.20a2	18		clc				clc 								; only one parameter
.20a3	20 83 19	jsr $1983			jsr 	GetInteger8Bit 				; push the length of the string.
.20a6	48		pha				pha
.20a7	ca		dex				dex
.20a8	a9 00		lda #$00			lda 	#0 							; push the start position.
.20aa	48		pha				pha
.20ab	20 e3 20	jsr $20e3			jsr 	UnarySStringToZTemp0
.20ae	80 3c		bra $20ec			bra 	SubstringMain 				; stack now points to the string to slice.
.20b0					Unary_Right:
.20b0	fa		plx				plx
.20b1	5a		phy				phy
.20b2	a9 ff		lda #$ff			lda 	#255 						; push 255, we want all the string.
.20b4	20 83 19	jsr $1983			jsr 	GetInteger8Bit 				; push the right length of the string.
.20b7	48		pha				pha
.20b8	ca		dex				dex
.20b9	20 e3 20	jsr $20e3			jsr 	UnarySStringToZTemp0
.20bc	68		pla				pla 								; this is the right requirement
.20bd	38		sec				sec
.20be	49 ff		eor #$ff			eor 	#$FF
.20c0	72 28		adc ($28)			adc 	(zTemp0)
.20c2	b0 02		bcs $20c6			bcs 	_URHaveCount
.20c4	a9 00		lda #$00			lda 	#0 							; overflow, start from 0
.20c6					_URHaveCount:
.20c6	a0 ff		ldy #$ff			ldy 	#255 						; whole string
.20c8	5a		phy				phy
.20c9	48		pha				pha 								; start position
.20ca	80 20		bra $20ec			bra 	SubstringMain
.20cc					Unary_Mid:
.20cc	fa		plx				plx
.20cd	5a		phy				phy
.20ce	20 83 19	jsr $1983			jsr 	GetInteger8Bit 				; push the length of the string required.
.20d1	48		pha				pha
.20d2	ca		dex				dex
.20d3	20 83 19	jsr $1983			jsr 	GetInteger8Bit 				; put the start position.
.20d6	f0 08		beq $20e0			beq 	_UMError
.20d8	3a		dec a				dec 	a
.20d9	48		pha				pha
.20da	ca		dex				dex
.20db	20 e3 20	jsr $20e3			jsr 	UnarySStringToZTemp0
.20de	80 0c		bra $20ec			bra 	SubstringMain 				; stack now points to the string to slice.
.20e0					_UMError:
.20e0	4c 7d 14	jmp $147d		jmp	ErrorV_range
.20e3					UnarySStringToZTemp0:
.20e3	b5 40		lda $40,x			lda 	NSMantissa0,x
.20e5	85 28		sta $28				sta 	zTemp0
.20e7	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.20e9	85 29		sta $29				sta 	zTemp0+1
.20eb	60		rts				rts
.20ec					SubstringMain:
.20ec	68		pla				pla 								; get the start offset
.20ed	7a		ply				ply 								; get the count to do.
.20ee	d2 28		cmp ($28)			cmp 	(zTemp0) 					; if start >= length then return NULL.
.20f0	b0 38		bcs $212a			bcs 	_SSReturnNull
.20f2	85 2a		sta $2a				sta 	zTemp1 						; save start position.
.20f4	84 2b		sty $2b				sty 	zTemp1+1 					; save count
.20f6	18		clc				clc
.20f7	65 2b		adc $2b				adc 	zTemp1+1 					; this is the end position.
.20f9	b0 06		bcs $2101			bcs 	_SMTruncateToEnd 			; if overflow, limit to length-start.
.20fb	d2 28		cmp ($28)			cmp 	(zTemp0) 					; ok if limit is <= length.
.20fd	f0 04		beq $2103			beq 	_SMIsOkay
.20ff	90 02		bcc $2103			bcc 	_SMIsOkay
.2101					_SMTruncateToEnd:
.2101	b2 28		lda ($28)			lda 	(zTemp0) 					; end position is length.
.2103					_SMIsOkay:
.2103	85 2b		sta $2b				sta 	zTemp1+1
.2105	38		sec				sec		 							; work out size
.2106	a5 2b		lda $2b				lda 	zTemp1+1
.2108	e5 2a		sbc $2a				sbc 	zTemp1
.210a	f0 1e		beq $212a			beq 	_SSReturnNull 				; if size = 0 then return empty string.
.210c	20 6a 20	jsr $206a			jsr 	StringAllocTemp 			; zsTemp & mantissa = the new string.
.210f	a4 2a		ldy $2a				ldy 	zTemp1 						; start
.2111					_SMCopy:
.2111	c4 2b		cpy $2b				cpy 	zTemp1+1 					; exit if reached end
.2113	f0 11		beq $2126			beq 	_SMExit
.2115	c8		iny				iny 								; bump and
.2116	b1 28		lda ($28),y			lda 	(zTemp0),y 					; get character (prefix)
.2118	5a		phy				phy
.2119	48		pha				pha
.211a	b2 2e		lda ($2e)			lda 	(zsTemp) 					; bump length => Y
.211c	1a		inc a				inc 	a
.211d	a8		tay				tay
.211e	92 2e		sta ($2e)			sta 	(zsTemp)
.2120	68		pla				pla 								; write character out
.2121	91 2e		sta ($2e),y			sta 	(zsTemp),y
.2123	7a		ply				ply 								; restore Y
.2124	80 eb		bra $2111			bra 	_SMCopy
.2126					_SMExit:
.2126	7a		ply				ply
.2127	4c 2c 10	jmp $102c			jmp 	NextCommand
.212a					_SSReturnNull:
.212a	a9 3c		lda #$3c			lda 	#SSRNull & $FF 				; set up mantissa
.212c	95 40		sta $40,x			sta 	NSMantissa0,x
.212e	a9 21		lda #$21			lda 	#SSRNull >> 8
.2130	95 4c		sta $4c,x			sta 	NSMantissa1,x
.2132	74 58		stz $58,x			stz 	NSMantissa2,x
.2134	74 64		stz $64,x			stz 	NSMantissa3,x
.2136	a9 40		lda #$40			lda 	#NSSString
.2138	95 34		sta $34,x			sta 	NSStatus,x
.213a	80 ea		bra $2126			bra 	_SMExit
.213c					SSRNull:
>213c	00 00						.word 	0
.213e					CommandSwap:
.213e	fa		plx				plx
.213f	b5 40		lda $40,x			lda 	NSMantissa0,x
.2141	48		pha				pha
.2142	b5 3f		lda $3f,x			lda 	NSMantissa0-1,x
.2144	95 40		sta $40,x			sta 	NSMantissa0,x
.2146	68		pla				pla
.2147	95 3f		sta $3f,x			sta 	NSMantissa0-1,x
.2149	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.214b	48		pha				pha
.214c	b5 4b		lda $4b,x			lda 	NSMantissa1-1,x
.214e	95 4c		sta $4c,x			sta 	NSMantissa1,x
.2150	68		pla				pla
.2151	95 4b		sta $4b,x			sta 	NSMantissa1-1,x
.2153	b5 58		lda $58,x			lda 	NSMantissa2,x
.2155	48		pha				pha
.2156	b5 57		lda $57,x			lda 	NSMantissa2-1,x
.2158	95 58		sta $58,x			sta 	NSMantissa2,x
.215a	68		pla				pla
.215b	95 57		sta $57,x			sta 	NSMantissa2-1,x
.215d	b5 64		lda $64,x			lda 	NSMantissa3,x
.215f	48		pha				pha
.2160	b5 63		lda $63,x			lda 	NSMantissa3-1,x
.2162	95 64		sta $64,x			sta 	NSMantissa3,x
.2164	68		pla				pla
.2165	95 63		sta $63,x			sta 	NSMantissa3-1,x
.2167	b5 70		lda $70,x			lda 	NSExponent,x
.2169	48		pha				pha
.216a	b5 6f		lda $6f,x			lda 	NSExponent-1,x
.216c	95 70		sta $70,x			sta 	NSExponent,x
.216e	68		pla				pla
.216f	95 6f		sta $6f,x			sta 	NSExponent-1,x
.2171	b5 34		lda $34,x			lda 	NSStatus,x
.2173	48		pha				pha
.2174	b5 33		lda $33,x			lda 	NSStatus-1,x
.2176	95 34		sta $34,x			sta 	NSStatus,x
.2178	68		pla				pla
.2179	95 33		sta $33,x			sta 	NSStatus-1,x
.217b	4c 2c 10	jmp $102c			jmp 	NextCommand
.217e					CommandSYS:
.217e	fa		plx				plx
.217f	da		phx				phx 								; save XY
.2180	5a		phy				phy
.2181	20 57 2a	jsr $2a57			jsr 	FloatIntegerPart
.2184	b5 4c		lda $4c,x			lda 	NSMantissa1,x 				; get call address => zTemp0
.2186	85 29		sta $29				sta 	zTemp0+1
.2188	b5 40		lda $40,x			lda 	NSMantissa0,x
.218a	85 28		sta $28				sta 	zTemp0
.218c	ae 0d 03	ldx $030d			ldx 	SYS_Reg_X 					; load registers
.218f	ac 0e 03	ldy $030e			ldy 	SYS_Reg_Y
.2192	ad 0f 03	lda $030f			lda 	SYS_Reg_S
.2195	48		pha				pha
.2196	ad 0c 03	lda $030c			lda 	SYS_Reg_A
.2199	28		plp				plp
.219a	20 b1 21	jsr $21b1			jsr 	_CSZTemp0
.219d	08		php				php
.219e	8e 0d 03	stx $030d			stx 	SYS_Reg_X 					; load registers
.21a1	8c 0e 03	sty $030e			sty 	SYS_Reg_Y
.21a4	8d 0c 03	sta $030c			sta 	SYS_Reg_A
.21a7	68		pla				pla
.21a8	8d 0f 03	sta $030f			sta 	SYS_Reg_S
.21ab	7a		ply				ply 								; restore YX and drop 2
.21ac	fa		plx				plx
.21ad	ca		dex				dex
.21ae	4c 2c 10	jmp $102c			jmp 	NextCommand
.21b1					_CSZTemp0:
.21b1	6c 28 00	jmp ($0028)			jmp 	(zTemp0)
.21b4					TimeTOS:
.21b4	fa		plx				plx
.21b5	20 0f 22	jsr $220f			jsr 	TIPushClock 				; push clock to TOS
.21b8	4c 2c 10	jmp $102c			jmp 	NextCommand
.21bb					TimeString:
.21bb	fa		plx				plx
.21bc	20 0f 22	jsr $220f			jsr 	TIPushClock 				; push clock to TOS
.21bf	20 e4 21	jsr $21e4			jsr 	_TSDivMod60 				; result in seconds
.21c2	20 e4 21	jsr $21e4			jsr 	_TSDivMod60 				; seconds
.21c5	48		pha				pha
.21c6	20 e4 21	jsr $21e4			jsr 	_TSDivMod60 				; minutes
.21c9	48		pha				pha
.21ca	a9 18		lda #$18			lda 	#24 						; hours
.21cc	20 e6 21	jsr $21e6			jsr 	_TSDivModA
.21cf	48		pha				pha
.21d0	a9 06		lda #$06			lda 	#6
.21d2	20 6a 20	jsr $206a			jsr 	StringAllocTemp
.21d5	68		pla				pla
.21d6	20 f6 21	jsr $21f6			jsr 	_TSWriteDecimal
.21d9	68		pla				pla
.21da	20 f6 21	jsr $21f6			jsr 	_TSWriteDecimal
.21dd	68		pla				pla
.21de	20 f6 21	jsr $21f6			jsr 	_TSWriteDecimal
.21e1	4c 2c 10	jmp $102c			jmp 	NextCommand
.21e4					_TSDivMod60:
.21e4	a9 3c		lda #$3c			lda 	#60
.21e6					_TSDivModA:
.21e6	e8		inx				inx
.21e7	20 1e 2e	jsr $2e1e			jsr 	FloatSetByte
.21ea	ca		dex				dex
.21eb	20 b2 29	jsr $29b2			jsr 	Int32Divide
.21ee	b5 40		lda $40,x			lda 	NSMantissa0,x 				; get modulus
.21f0	48		pha				pha
.21f1	20 a1 29	jsr $29a1			jsr 	NSMCopyPlusTwoToZero
.21f4	68		pla				pla
.21f5	60		rts				rts
.21f6					_TSWriteDecimal:
.21f6	da		phx				phx
.21f7	a2 30		ldx #$30			ldx 	#'0'
.21f9					_TSWDLoop:
.21f9	c9 0a		cmp #$0a			cmp 	#10
.21fb	90 05		bcc $2202			bcc 	_TSWDEnd
.21fd	e9 0a		sbc #$0a			sbc 	#10
.21ff	e8		inx				inx
.2200	80 f7		bra $21f9			bra 	_TSWDLoop
.2202					_TSWDEnd:
.2202	48		pha				pha
.2203	8a		txa				txa
.2204	20 93 20	jsr $2093			jsr 	StringWriteChar
.2207	68		pla				pla
.2208	09 30		ora #$30			ora 	#'0'
.220a	20 93 20	jsr $2093			jsr 	StringWriteChar
.220d	fa		plx				plx
.220e	60		rts				rts
.220f					TIPushClock:
.220f	5a		phy				phy
.2210	e8		inx				inx 								; push 0 on the stack
.2211	20 1c 2e	jsr $2e1c			jsr 	FloatSetZero
.2214	da		phx				phx
.2215	20 ff 25	jsr $25ff			jsr 	XReadClock 					; read time into YXA
.2218	86 28		stx $28				stx 	zTemp0
.221a	fa		plx				plx
.221b	95 40		sta $40,x			sta 	NSMantissa0,x
.221d	a5 28		lda $28				lda 	zTemp0
.221f	95 4c		sta $4c,x			sta 	NSMantissa1,x
.2221	98		tya				tya
.2222	95 58		sta $58,x			sta 	NSMantissa2,x
.2224	7a		ply				ply
.2225	60		rts				rts
.2226					CommandTIWrite:
.2226	fa		plx				plx
.2227	b5 40		lda $40,x			lda 	NSMantissa0,x 				; copy string address to ZSTemp
.2229	85 2e		sta $2e				sta 	zsTemp
.222b	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.222d	85 2f		sta $2f				sta 	zsTemp+1
.222f	b2 2e		lda ($2e)			lda 	(zsTemp) 					; check if it is six
.2231	c9 06		cmp #$06			cmp 	#6
.2233	d0 59		bne $228e			bne 	_CTIWError
.2235	20 1c 2e	jsr $2e1c			jsr 	FloatSetZero
.2238	20 5a 22	jsr $225a			jsr 	_CTIWDigitPair 				; do a digit pair 3 times
.223b	20 5a 22	jsr $225a			jsr 	_CTIWDigitPair
.223e	20 5a 22	jsr $225a			jsr 	_CTIWDigitPair
.2241	a9 3c		lda #$3c			lda 	#60 						; multiply the result by 60.
.2243	20 85 22	jsr $2285			jsr 	_CTIWMultiply
.2246	da		phx				phx
.2247	5a		phy				phy
.2248	b5 4c		lda $4c,x			lda 	NSMantissa1,x 				; get time into YXA
.224a	48		pha				pha
.224b	b5 58		lda $58,x			lda 	NSMantissa2,x
.224d	a8		tay				tay
.224e	b5 40		lda $40,x			lda 	NSMantissa0,x
.2250	fa		plx				plx
.2251	20 03 26	jsr $2603			jsr 	XWriteClock 				; update the clock.
.2254	7a		ply				ply
.2255	fa		plx				plx
.2256	ca		dex				dex 								; throw result.
.2257	4c 2c 10	jmp $102c			jmp 	NextCommand
.225a					_CTIWDigitPair:
.225a	a9 06		lda #$06			lda 	#6 							; x 6
.225c	20 85 22	jsr $2285			jsr 	_CTIWMultiply
.225f	20 6b 22	jsr $226b			jsr 	_CTIWAddDigit 				; add digit
.2262	a9 0a		lda #$0a			lda 	#10 						; x 10
.2264	20 85 22	jsr $2285			jsr 	_CTIWMultiply
.2267	20 6b 22	jsr $226b			jsr 	_CTIWAddDigit 				; add digit
.226a	60		rts				rts
.226b					_CTIWAddDigit:
.226b	e6 2e		inc $2e				inc 	zsTemp 						; pre-increment
.226d	d0 02		bne $2271			bne 	_CTIWASkip
.226f	e6 2f		inc $2f				inc 	zsTemp+1
.2271					_CTIWASkip:
.2271	b2 2e		lda ($2e)			lda 	(zsTemp) 					; read and validate it
.2273	38		sec				sec
.2274	e9 30		sbc #$30			sbc 	#"0"
.2276	90 16		bcc $228e			bcc 	_CTIWError
.2278	c9 0a		cmp #$0a			cmp 	#9+1
.227a	b0 12		bcs $228e			bcs 	_CTIWError
.227c	e8		inx				inx 								; store at +1
.227d	20 1e 2e	jsr $2e1e			jsr 	FloatSetByte
.2280	ca		dex				dex
.2281	20 a8 2b	jsr $2ba8			jsr 	FloatAddTopTwoStack
.2284	60		rts				rts
.2285					_CTIWMultiply:
.2285	e8		inx				inx
.2286	20 1e 2e	jsr $2e1e			jsr 	FloatSetByte
.2289	ca		dex				dex
.228a	20 29 2b	jsr $2b29			jsr 	FloatMultiplyShort
.228d	60		rts				rts
.228e					_CTIWError:
.228e	4c 8d 14	jmp $148d		jmp	ErrorV_value
.2291					UnaryUsr:
.2291	fa		plx				plx
.2292	5a		phy				phy
.2293	20 9a 22	jsr $229a			jsr 	_UUCallVector
.2296	7a		ply				ply
.2297	4c 2c 10	jmp $102c			jmp 	NextCommand
.229a					_UUCallVector:
.229a	6c 11 03	jmp ($0311)			jmp 	(USRRoutineAddress)
.229d					ValUnary:
.229d	fa		plx				plx
.229e	b5 40		lda $40,x			lda 	NSMantissa0,x
.22a0	85 28		sta $28				sta 	zTemp0
.22a2	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.22a4	85 29		sta $29				sta 	zTemp0+1
.22a6	20 b1 22	jsr $22b1			jsr 	ValEvaluateZTemp0
.22a9	b0 03		bcs $22ae			bcs 	_VUError 					; couldn't convert
.22ab	4c 2c 10	jmp $102c			jmp 	NextCommand
.22ae					_VUError:
.22ae	4c 8d 14	jmp $148d		jmp	ErrorV_value
.22b1					ValEvaluateZTemp0:
.22b1	5a		phy				phy
.22b2	b2 28		lda ($28)			lda 	(zTemp0) 					; check not empty string
.22b4	f0 22		beq $22d8			beq 	_VMCFail2
.22b6	a0 00		ldy #$00			ldy 	#0 							; start position
.22b8					_VMCSpaces:
.22b8	c8		iny				iny 								; skip leading spaces
.22b9	b1 28		lda ($28),y			lda 	(zTemp0),y
.22bb	c9 20		cmp #$20			cmp 	#" "
.22bd	f0 f9		beq $22b8			beq 	_VMCSpaces
.22bf	48		pha				pha 								; save first character
.22c0	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.22c2	d0 01		bne $22c5			bne 	_VMCStart
.22c4	c8		iny				iny 								; skip over - if so.
.22c5					_VMCStart:
.22c5	38		sec				sec 								; initialise first time round.
.22c6					_VMCNext:
.22c6	98		tya				tya 								; reached end of string
.22c7	3a		dec a				dec 	a
.22c8	52 28		eor ($28)			eor 	(zTemp0) 					; compare length preserve carry.
.22ca	f0 0f		beq $22db			beq 	_VMCSuccess 				; successful.
.22cc	b1 28		lda ($28),y			lda 	(zTemp0),y 					; encode a number.
.22ce	c8		iny				iny
.22cf	20 00 2c	jsr $2c00			jsr 	FloatEncode 				; send it to the number-builder
.22d2	90 03		bcc $22d7			bcc 	_VMCFail 					; if failed, give up.
.22d4	18		clc				clc 								; next time round, countinue
.22d5	80 ef		bra $22c6			bra 	_VMCNext
.22d7					_VMCFail:
.22d7	68		pla				pla
.22d8					_VMCFail2:
.22d8	7a		ply				ply
.22d9	38		sec				sec
.22da	60		rts				rts
.22db					_VMCSuccess:
.22db	a9 00		lda #$00			lda 	#0 							; construct final
.22dd	20 00 2c	jsr $2c00			jsr 	FloatEncode 				; by sending a duff value.
.22e0	68		pla				pla 								; if it was -ve
.22e1	c9 2d		cmp #$2d			cmp 	#"-"
.22e3	d0 03		bne $22e8			bne 	_VMCNotNegative
.22e5	20 de 2d	jsr $2dde			jsr		FloatNegate 				; negate it.
.22e8					_VMCNotNegative:
.22e8	7a		ply				ply
.22e9	18		clc				clc
.22ea	60		rts				rts
.22eb					VectorTable:
>22eb	eb 19					.word	LinkFloatAdd             ; $80 +
>22ed	f4 19					.word	LinkFloatSubtract        ; $81 -
>22ef	fd 19					.word	LinkFloatMultiply        ; $82 *
>22f1	06 1a					.word	LinkFloatDivide          ; $83 /
>22f3	11 1a					.word	LinkFloatPower           ; $84 ^
>22f5	be 10					.word	BinaryAnd                ; $85 and
>22f7	c2 10					.word	BinaryOr                 ; $86 or
>22f9	1c 1a					.word	LinkCompareGreater       ; $87 >
>22fb	25 1a					.word	LinkCompareEqual         ; $88 =
>22fd	2e 1a					.word	LinkCompareLess          ; $89 <
>22ff	37 1a					.word	LinkCompareGreaterEqual  ; $8a >=
>2301	40 1a					.word	LinkCompareNotEqual      ; $8b <>
>2303	49 1a					.word	LinkCompareLessEqual     ; $8c <=
>2305	a6 10					.word	AbsoluteTOS              ; $8d abs
>2307	f9 10					.word	ArrayConvert             ; $8e array
>2309	a1 11					.word	UnaryAsc                 ; $8f asc
>230b	bc 11					.word	CommandAssert            ; $90 assert
>230d	fd 11					.word	Unary16Bin               ; $91 bin$
>230f	27 12					.word	PrintCharacter           ; $92 print.chr
>2311	31 12					.word	UnaryChr                 ; $93 chr$
>2313	96 12					.word	CompareStrings           ; $94 s.cmp
>2315	af 15					.word	CommandFor               ; $95 for
>2317	b6 16					.word	UnaryFre                 ; $96 fre
>2319	ce 16					.word	CommandGet               ; $97 get
>231b	f4 16					.word	CommandReturn            ; $98 return
>231d	3b 17					.word	Command_PSET             ; $99 pset
>231f	55 17					.word	Command_LINE             ; $9a line
>2321	6a 17					.word	Command_RECT             ; $9b rect
>2323	79 17					.word	Command_FRAME            ; $9c frame
>2325	88 17					.word	Command_CHAR             ; $9d char
>2327	1f 18					.word	Unary16Hex               ; $9e hex$
>2329	c6 18					.word	CommandInput             ; $9f input
>232b	dd 18					.word	CommandInputString       ; $a0 input$
>232d	f6 18					.word	CommandInputReset        ; $a1 input.start
>232f	da 19					.word	UnaryLen                 ; $a2 len
>2331	a6 1a					.word	LinkFloatCompare         ; $a3 f.cmp
>2333	af 1a					.word	LinkDivideInt32          ; $a4 int.div
>2335	33 1b					.word	NegateTOS                ; $a5 negate
>2337	3a 1b					.word	CommandNewLine           ; $a6 new.line
>2339	43 1b					.word	CommandNext              ; $a7 next
>233b	2c 1c					.word	NotTOS                   ; $a8 not
>233d	43 1c					.word	CommandOn                ; $a9 on
>233f	61 1c					.word	CommandMoreOn            ; $aa moreon
>2341	74 1c					.word	UnaryPeek                ; $ab peek
>2343	89 1c					.word	CommandPOKE              ; $ac poke
>2345	a1 1c					.word	UnaryPos                 ; $ad pos
>2347	ab 1c					.word	GetChannel               ; $ae getchannel
>2349	b6 1c					.word	SetChannel               ; $af setchannel
>234b	d9 1c					.word	PrintNumber              ; $b0 print.n
>234d	f8 1c					.word	PrintString              ; $b1 print.s
>234f	5f 1d					.word	CommandRead              ; $b2 read
>2351	79 1d					.word	CommandReadString        ; $b3 read$
>2353	04 1f					.word	UnaryRND                 ; $b4 rnd
>2355	73 1f					.word	StringConcatenate        ; $b5 concat
>2357	ca 1f					.word	SignTOS                  ; $b6 sgn
>2359	ed 1f					.word	PrintTab                 ; $b7 print.tab
>235b	fb 1f					.word	PrintPos                 ; $b8 print.pos
>235d	0c 20					.word	PrintSpace               ; $b9 print.spc
>235f	25 20					.word	Unary_Str                ; $ba str$
>2361	a0 20					.word	Unary_Left               ; $bb left$
>2363	b0 20					.word	Unary_Right              ; $bc right$
>2365	cc 20					.word	Unary_Mid                ; $bd mid$
>2367	3e 21					.word	CommandSwap              ; $be swap
>2369	b4 21					.word	TimeTOS                  ; $bf ti
>236b	bb 21					.word	TimeString               ; $c0 ti$
>236d	91 22					.word	UnaryUsr                 ; $c1 usr
>236f	9d 22					.word	ValUnary                 ; $c2 val
>2371	fb 24					.word	CommandClose             ; $c3 close
>2373	0d 25					.word	CommandExit              ; $c4 exit
>2375	13 25					.word	CommandDebug             ; $c5 debug
>2377	79 25					.word	CommandOpen              ; $c6 open
>2379	0d 26					.word	CommandScreen            ; $c7 screen
>237b	f4 27					.word	CommandVPOKE             ; $c8 vpoke
>237d	19 28					.word	CommandVPEEK             ; $c9 vpeek
>237f	e5 1f					.word	CommandShift             ; $ca .shift
>2381	6a 10					.word	PushByteCommand          ; $cb .byte
>2383	7d 10					.word	PushWordCommand          ; $cc .word
>2385	1b 1d					.word	CommandPushN             ; $cd .float
>2387	41 1d					.word	CommandPushS             ; $ce .string
>2389	1e 13					.word	CommandData              ; $cf .data
>238b	06 17					.word	CommandGoto              ; $d0 .goto
>238d	e8 16					.word	CommandGosub             ; $d1 .gosub
>238f	1d 17					.word	CommandGotoZ             ; $d2 .goto.z
>2391	2c 17					.word	CommandGotoNZ            ; $d3 .goto.nz
>2393	ac 10					.word	CommandVarSpace          ; $d4 .varspace
.2395					ShiftVectorTable:
>2395	49 12					.word	CommandClr               ; $ca80 clr
>2397	27 13					.word	CommandDIM               ; $ca81 dim
>2399	18 14					.word	CommandEnd               ; $ca82 end
>239b	ab 19					.word	UnaryJoy                 ; $ca83 joy
>239d	52 1a					.word	LinkFloatIntegerPartDown ; $ca84 int
>239f	5b 1a					.word	LinkFloatSquareRoot      ; $ca85 sqr
>23a1	6c 1a					.word	LinkFloatLogarithm       ; $ca86 log
>23a3	77 1a					.word	LinkFloatExponent        ; $ca87 exp
>23a5	80 1a					.word	LinkFloatCosine          ; $ca88 cos
>23a7	89 1a					.word	LinkFloatSine            ; $ca89 sin
>23a9	92 1a					.word	LinkFloatTangent         ; $ca8a tan
>23ab	9b 1a					.word	LinkFloatArcTan          ; $ca8b atn
>23ad	e3 1a					.word	XCommandMouse            ; $ca8c mouse
>23af	f8 1a					.word	XUnaryMB                 ; $ca8d mb
>23b1	05 1b					.word	XUnaryMX                 ; $ca8e mx
>23b3	16 1b					.word	XUnaryMY                 ; $ca8f my
>23b5	f2 1e					.word	CommandRestore           ; $ca90 restore
>23b7	21 20					.word	CommandStop              ; $ca91 stop
>23b9	7e 21					.word	CommandSYS               ; $ca92 sys
>23bb	26 22					.word	CommandTIWrite           ; $ca93 ti$.write
>23bd	f3 23					.word	CommandWAIT              ; $ca94 wait
>23bf	3e 25					.word	X16I2CPoke               ; $ca95 i2cpoke
>23c1	5e 25					.word	X16I2CPeek               ; $ca96 i2cpeek
>23c3	c9 25					.word	CommandBank              ; $ca97 bank
>23c5	1c 26					.word	XCommandSleep            ; $ca98 sleep
>23c7	40 26					.word	X16_Audio_FMINIT         ; $ca99 fminit
>23c9	4e 26					.word	X16_Audio_FMNOTE         ; $ca9a fmnote
>23cb	60 26					.word	X16_Audio_FMDRUM         ; $ca9b fmdrum
>23cd	72 26					.word	X16_Audio_FMINST         ; $ca9c fminst
>23cf	84 26					.word	X16_Audio_FMVIB          ; $ca9d fmvib
>23d1	96 26					.word	X16_Audio_FMFREQ         ; $ca9e fmfreq
>23d3	a7 26					.word	X16_Audio_FMVOL          ; $ca9f fmvol
>23d5	b9 26					.word	X16_Audio_FMPAN          ; $caa0 fmpan
>23d7	cb 26					.word	X16_Audio_FMPLAY         ; $caa1 fmplay
>23d9	dc 26					.word	X16_Audio_FMCHORD        ; $caa2 fmchord
>23db	ed 26					.word	X16_Audio_FMPOKE         ; $caa3 fmpoke
>23dd	ff 26					.word	X16_Audio_PSGINIT        ; $caa4 psginit
>23df	0d 27					.word	X16_Audio_PSGNOTE        ; $caa5 psgnote
>23e1	1f 27					.word	X16_Audio_PSGVOL         ; $caa6 psgvol
>23e3	31 27					.word	X16_Audio_PSGWAV         ; $caa7 psgwav
>23e5	43 27					.word	X16_Audio_PSGFREQ        ; $caa8 psgfreq
>23e7	54 27					.word	X16_Audio_PSGPAN         ; $caa9 psgpan
>23e9	66 27					.word	X16_Audio_PSGPLAY        ; $caaa psgplay
>23eb	77 27					.word	X16_Audio_PSGCHORD       ; $caab psgchord
>23ed	88 27					.word	CommandCls               ; $caac cls
>23ef	91 27					.word	CommandLocate            ; $caad locate
>23f1	bb 27					.word	CommandColor             ; $caae color
.23f3					CommandWAIT:
.23f3	fa		plx				plx
.23f4	b5 3e		lda $3e,x			lda 	NSMantissa0-2,x 			; get wait address
.23f6	85 28		sta $28				sta 	zTemp0
.23f8	b5 4a		lda $4a,x			lda 	NSMantissa1-2,x
.23fa	85 29		sta $29				sta 	zTemp0+1
.23fc					_WaitLoop:
.23fc	b2 28		lda ($28)			lda 	(zTemp0) 					; read it
.23fe	35 3f		and $3f,x			and 	NSMantissa0-1,x		 		; and with mask
.2400	55 40		eor $40,x			eor 	NSMantissa0-0,x 			; toggle
.2402	f0 f8		beq $23fc			beq 	_WaitLoop 					; keep going if zero
.2404	ca		dex				dex 								; drop 3.
.2405	ca		dex				dex
.2406	ca		dex				dex
.2407	4c 2c 10	jmp $102c			jmp 	NextCommand
.240a					WriteFloatCommand:
.240a	fa		plx				plx
.240b	b1 22		lda ($22),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.240d	85 28		sta $28				sta 	zTemp0 						; save in MSB
.240f	88		dey				dey 								; get the upper 3 bits
.2410	b1 22		lda ($22),y			lda 	(codePtr),y
.2412	29 07		and #$07			and 	#7
.2414	c8		iny				iny
.2415	c8		iny				iny
.2416	06 28		asl $28				asl 	zTemp0 						; shift zTemp0:A left
.2418	2a		rol a				rol 	a 							; carry will be clear.
.2419	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.241c	85 29		sta $29				sta 	zTemp0+1
.241e	20 24 24	jsr $2424			jsr 	WriteFloatZTemp0Sub
.2421	4c 2c 10	jmp $102c			jmp 	NextCommand
.2424					WriteFloatZTemp0Sub:
.2424	5a		phy				phy 								; ldart write
.2425	a0 01		ldy #$01			ldy 	#1
.2427	b5 40		lda $40,x			lda 	NSMantissa0,x
.2429	92 28		sta ($28)			sta 	(zTemp0)
.242b	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.242d	91 28		sta ($28),y			sta 	(zTemp0),y
.242f	c8		iny				iny
.2430	b5 58		lda $58,x			lda 	NSMantissa2,x
.2432	91 28		sta ($28),y			sta 	(zTemp0),y
.2434	c8		iny				iny
.2435	b5 64		lda $64,x			lda 	NSMantissa3,x
.2437	91 28		sta ($28),y			sta 	(zTemp0),y
.2439	c8		iny				iny
.243a	b5 70		lda $70,x			lda 	NSExponent,x
.243c	91 28		sta ($28),y			sta 	(zTemp0),y
.243e	c8		iny				iny
.243f	b5 34		lda $34,x			lda 	NSStatus,x
.2441	91 28		sta ($28),y			sta 	(zTemp0),y
.2443	ca		dex				dex
.2444	7a		ply				ply
.2445	60		rts				rts
.2446					WriteIntegerCommand:
.2446	fa		plx				plx
.2447	b1 22		lda ($22),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.2449	85 28		sta $28				sta 	zTemp0 						; save in MSB
.244b	88		dey				dey 								; get the upper 3 bits
.244c	b1 22		lda ($22),y			lda 	(codePtr),y
.244e	29 07		and #$07			and 	#7
.2450	c8		iny				iny
.2451	c8		iny				iny
.2452	06 28		asl $28				asl 	zTemp0 						; shift zTemp0:A left
.2454	2a		rol a				rol 	a 							; carry will be clear.
.2455	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.2458	85 29		sta $29				sta 	zTemp0+1
.245a	20 60 24	jsr $2460			jsr 	WriteIntegerZTemp0Sub
.245d	4c 2c 10	jmp $102c			jmp 	NextCommand
.2460					WriteIntegerZTemp0Sub:
.2460	20 57 2a	jsr $2a57			jsr 	FloatIntegerPart
.2463	5a		phy				phy 								; start write
.2464	a0 01		ldy #$01			ldy 	#1
.2466	b5 34		lda $34,x			lda 	NSStatus,x 					; negate 2's comp if -ve
.2468	30 0b		bmi $2475			bmi 	_WIZNegative
.246a	b5 40		lda $40,x			lda 	NSMantissa0,x 				; +ve write
.246c	92 28		sta ($28)			sta 	(zTemp0)
.246e	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.2470	91 28		sta ($28),y			sta 	(zTemp0),y
.2472	7a		ply				ply
.2473	ca		dex				dex
.2474	60		rts				rts
.2475					_WIZNegative:
.2475	38		sec				sec 								; -ve read
.2476	a9 00		lda #$00			lda 	#0
.2478	f5 40		sbc $40,x			sbc 	NSMantissa0,x
.247a	92 28		sta ($28)			sta 	(zTemp0)
.247c	a9 00		lda #$00			lda 	#0
.247e	f5 4c		sbc $4c,x			sbc 	NSMantissa1,x
.2480	91 28		sta ($28),y			sta 	(zTemp0),y
.2482	7a		ply				ply
.2483	ca		dex				dex
.2484	60		rts				rts
.2485					WriteStringCommand:
.2485	fa		plx				plx
.2486	b1 22		lda ($22),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.2488	85 28		sta $28				sta 	zTemp0 						; save in MSB
.248a	88		dey				dey 								; get the upper 3 bits
.248b	b1 22		lda ($22),y			lda 	(codePtr),y
.248d	29 07		and #$07			and 	#7
.248f	c8		iny				iny
.2490	c8		iny				iny
.2491	06 28		asl $28				asl 	zTemp0 						; shift zTemp0:A left
.2493	2a		rol a				rol 	a 							; carry will be clear.
.2494	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.2497	85 29		sta $29				sta 	zTemp0+1
.2499	20 9f 24	jsr $249f			jsr 	WriteStringZTemp0Sub
.249c	4c 2c 10	jmp $102c			jmp 	NextCommand
.249f					WriteStringZTemp0Sub:
.249f	5a		phy				phy
.24a0	a0 01		ldy #$01			ldy 	#1 							; if it is zero we must concrete whatever.
.24a2	b2 28		lda ($28)			lda 	(zTemp0)
.24a4	11 28		ora ($28),y			ora 	(zTemp0),y
.24a6	f0 1e		beq $24c6			beq 	_WSConcrete
.24a8	b2 28		lda ($28)			lda 	(zTemp0) 					; put address of actual string in zTemp1
.24aa	85 2a		sta $2a				sta 	zTemp1
.24ac	b1 28		lda ($28),y			lda 	(zTemp0),y
.24ae	85 2b		sta $2b				sta 	zTemp1+1
.24b0	b5 40		lda $40,x			lda 	NSMantissa0,x 				; copy source to zTemp2
.24b2	85 2c		sta $2c				sta 	zTemp2
.24b4	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.24b6	85 2d		sta $2d				sta 	zTemp2+1
.24b8	b2 2a		lda ($2a)			lda 	(zTemp1) 					; space available
.24ba	d2 2c		cmp ($2c)			cmp 	(zTemp2) 					; if >= required length then copy
.24bc	b0 17		bcs $24d5			bcs 	_WSCopy
.24be	a0 01		ldy #$01			ldy 	#1 							; set the 'available for reclaim' flag
.24c0	b1 2a		lda ($2a),y			lda 	(zTemp1),y
.24c2	09 80		ora #$80			ora 	#$80
.24c4	91 2a		sta ($2a),y			sta 	(zTemp1),y
.24c6					_WSConcrete:
.24c6	b5 4c		lda $4c,x			lda 	NSMantissa1,x 				; string in YA
.24c8	a8		tay				tay
.24c9	b5 40		lda $40,x			lda 	NSMantissa0,x
.24cb	20 d8 12	jsr $12d8			jsr 	StringConcrete
.24ce	92 28		sta ($28)			sta 	(zTemp0) 					; save returned address
.24d0	98		tya				tya
.24d1	a0 01		ldy #$01			ldy 	#1
.24d3	91 28		sta ($28),y			sta 	(zTemp0),y
.24d5					_WSCopy
.24d5	18		clc				clc  								; copy target+2 to zTemp2
.24d6	b2 28		lda ($28)			lda 	(zTemp0)
.24d8	69 02		adc #$02			adc 	#2
.24da	85 2c		sta $2c				sta 	zTemp2
.24dc	a0 01		ldy #$01			ldy 	#1
.24de	b1 28		lda ($28),y			lda 	(zTemp0),y
.24e0	69 00		adc #$00			adc 	#0
.24e2	85 2d		sta $2d				sta 	zTemp2+1
.24e4	b5 40		lda $40,x			lda 	NSMantissa0,x 				; copy source to zTemp1
.24e6	85 2a		sta $2a				sta 	zTemp1
.24e8	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.24ea	85 2b		sta $2b				sta 	zTemp1+1
.24ec	b2 2a		lda ($2a)			lda 	(zTemp1) 					; length of string .. 0 inclusive
.24ee	a8		tay				tay
.24ef					_WSCopyLoop:
.24ef	b1 2a		lda ($2a),y			lda 	(zTemp1),y
.24f1	91 2c		sta ($2c),y			sta 	(zTemp2),y
.24f3	88		dey				dey
.24f4	c0 ff		cpy #$ff			cpy 	#$FF
.24f6	d0 f7		bne $24ef			bne 	_WSCopyLoop
.24f8	ca		dex				dex
.24f9	7a		ply				ply
.24fa	60		rts				rts
.24fb					CommandClose:
.24fb	fa		plx				plx
.24fc	20 83 19	jsr $1983			jsr 	GetInteger8Bit 				; channel to close
.24ff	cd 5d 04	cmp $045d			cmp 	currentChannel 				; is it the current channel
.2502	d0 03		bne $2507			bne 	_CCNotCurrent
.2504	9c 5d 04	stz $045d			stz 	currentChannel 				; effectively disables CMD
.2507					_CCNotCurrent:
.2507	20 c3 ff	jsr $ffc3			jsr 	X16_CLOSE 					; close the file
.250a	4c 2c 10	jmp $102c			jmp 	NextCommand
.250d					CommandExit:
.250d	fa		plx				plx
.250e	86 28		stx $28				stx 	zTemp0 						; stack position.
.2510	4c ff ff	jmp $ffff			jmp 	$FFFF 						; exits the emulator.
.2513					CommandDebug:
.2513	fa		plx				plx
>2514	db						.byte 	$DB 						; causes a break in the emulator
.2515	4c 2c 10	jmp $102c			jmp 	NextCommand
.2518					XGetCharacterFromChannel:
.2518	da		phx				phx
.2519	5a		phy				phy
.251a	e0 00		cpx #$00			cpx 	#0 							; is it default
.251c	d0 05		bne $2523			bne 	_XGetChannel
.251e	20 cc ff	jsr $ffcc			jsr 	X16_CLRCHN 					; set default channel
.2521	80 08		bra $252b			bra 	_XGetChar
.2523					_XGetChannel:
.2523	20 c6 ff	jsr $ffc6			jsr 	X16_CHKIN					; CHKIN set channel
.2526	20 b7 ff	jsr $ffb7			jsr 	X16_READST 					; check okay
.2529	d0 06		bne $2531			bne 	_XGCError
.252b					_XGetChar:
.252b	20 e4 ff	jsr $ffe4			jsr 	X16_GETIN
.252e	7a		ply				ply
.252f	fa		plx				plx
.2530	60		rts				rts
.2531					_XGCError:
.2531	4c 99 15	jmp $1599		jmp	ErrorV_channel
.2534					XGetHPos:
.2534	da		phx				phx
.2535	5a		phy				phy
.2536	38		sec				sec
.2537	20 f0 ff	jsr $fff0			jsr 	X16_PLOT
.253a	98		tya				tya
.253b	7a		ply				ply
.253c	fa		plx				plx
.253d	60		rts				rts
.253e					X16I2CPoke:
.253e	fa		plx				plx
.253f	5a		phy				phy
.2540	20 83 19	jsr $1983			jsr 	GetInteger8Bit 				; value
.2543	48		pha				pha
.2544	ca		dex				dex
.2545	20 83 19	jsr $1983			jsr 	GetInteger8Bit 				; register
.2548	48		pha				pha
.2549	ca		dex				dex
.254a	20 83 19	jsr $1983			jsr 	GetInteger8Bit 				; device
.254d	aa		tax				tax
.254e	7a		ply				ply
.254f	68		pla				pla
.2550	20 c9 fe	jsr $fec9			jsr 	X16_i2c_write_byte 			; write the byte out.
.2553	b0 06		bcs $255b			bcs 	X16I2CError
.2555	7a		ply				ply
.2556	a2 ff		ldx #$ff			ldx 	#$FF
.2558	4c 2c 10	jmp $102c			jmp 	NextCommand
.255b					X16I2CError:
.255b	4c 99 15	jmp $1599		jmp	ErrorV_channel
.255e					X16I2CPeek:
.255e	fa		plx				plx
.255f	da		phx				phx
.2560	5a		phy				phy
.2561	20 83 19	jsr $1983			jsr 	GetInteger8Bit 				; register
.2564	48		pha				pha
.2565	ca		dex				dex
.2566	20 83 19	jsr $1983			jsr 	GetInteger8Bit 				; device
.2569	aa		tax				tax 								; X device
.256a	7a		ply				ply 								; Y register
.256b	20 c6 fe	jsr $fec6			jsr 	X16_i2c_read_byte 			; read I2C
.256e	b0 eb		bcs $255b			bcs 	X16I2CError
.2570	7a		ply				ply 								; restore Y/X
.2571	fa		plx				plx
.2572	ca		dex				dex 								; drop TOS (register)
.2573	20 1e 2e	jsr $2e1e			jsr 	FloatSetByte 				; write read value to TOS.
.2576	4c 2c 10	jmp $102c			jmp 	NextCommand
.2579					CommandOpen:
.2579	fa		plx				plx
.257a	a5 43		lda $43				lda 	NSMantissa0+3  				; point zTemp0 to string head, also in XY
.257c	85 28		sta $28				sta 	zTemp0
.257e	aa		tax				tax
.257f	a5 4f		lda $4f				lda 	NSMantissa1+3
.2581	85 29		sta $29				sta 	zTemp0+1
.2583	a8		tay				tay
.2584	e8		inx				inx 								; XY points to first character
.2585	d0 01		bne $2588			bne 	_CONoCarry
.2587	c8		iny				iny
.2588					_CONoCarry:
.2588	b2 28		lda ($28)			lda 	(zTemp0) 					; get length of filename
.258a	20 bd ff	jsr $ffbd			jsr 	X16_SETNAM
.258d	a5 40		lda $40				lda 	NSMantissa0+0
.258f	a6 41		ldx $41				ldx 	NSMantissa0+1
.2591	a4 42		ldy $42				ldy 	NSMantissa0+2
.2593	20 ba ff	jsr $ffba			jsr 	X16_SETLFS
.2596	20 c0 ff	jsr $ffc0			jsr 	X16_OPEN
.2599	b0 03		bcs $259e			bcs 	_COError
.259b	4c 2c 10	jmp $102c			jmp 	NextCommand
.259e					_COError:
.259e	4c 99 15	jmp $1599		jmp	ErrorV_channel
.25a1					XPokeMemory:
.25a1	86 28		stx $28				stx 	zTemp0
.25a3	84 29		sty $29				sty 	zTemp0+1
.25a5	a4 00		ldy $00				ldy 	SelectRAMBank 				; old RAM bank in Y
.25a7	ae 6b 05	ldx $056b			ldx 	ramBank 					; switch to BANKed RAMBank if not $FF
.25aa	e0 ff		cpx #$ff			cpx 	#$FF
.25ac	f0 02		beq $25b0			beq 	_XPMNoSwitch
.25ae	86 00		stx $00				stx 	SelectRAMBank
.25b0					_XPMNoSwitch:
.25b0	92 28		sta ($28)			sta 	(zTemp0) 					; do the POKE
.25b2	84 00		sty $00				sty 	SelectRAMBank 				; reselect previous RAM Bank.
.25b4					_XPMExit:
.25b4	60		rts				rts
.25b5					XPeekMemory:
.25b5	86 28		stx $28				stx 	zTemp0
.25b7	84 29		sty $29				sty 	zTemp0+1
.25b9	a4 00		ldy $00				ldy 	SelectRAMBank 				; old RAM bank in Y
.25bb	ae 6b 05	ldx $056b			ldx 	ramBank 					; switch to BANKed RAMBank if not $FF
.25be	e0 ff		cpx #$ff			cpx 	#$FF
.25c0	f0 02		beq $25c4			beq 	_XPMNoSwitch
.25c2	86 00		stx $00				stx 	SelectRAMBank
.25c4					_XPMNoSwitch:
.25c4	b2 28		lda ($28)			lda 	(zTemp0) 					; do the PEEK
.25c6	84 00		sty $00				sty 	SelectRAMBank 				; reselect previous RAM bank.
.25c8	60		rts				rts
.25c9					CommandBank:
.25c9	fa		plx				plx
.25ca	a5 40		lda $40				lda 	NSMantissa0 				; RAM bank
.25cc	8d 6b 05	sta $056b			sta 	ramBank 					; store & make current
.25cf	85 00		sta $00				sta 	SelectRAMBank
.25d1	a5 41		lda $41				lda 	NSMantissa0+1 		 		; ROM specified
.25d3	c9 ff		cmp #$ff			cmp 	#$FF
.25d5	f0 03		beq $25da			beq 	_CBNoUpdate
.25d7	8d 6c 05	sta $056c			sta 	romBank 					; this doesn't set the hardware page.
.25da					_CBNoUpdate:
.25da	a2 ff		ldx #$ff			ldx 	#$FF
.25dc	4c 2c 10	jmp $102c			jmp 	NextCommand
.056b					ramBank:
>056b							.fill 	1
.056c					romBank:
>056c							.fill 	1
.25df					XPrintCharacterToChannel:
.25df	48		pha				pha
.25e0	da		phx				phx
.25e1	5a		phy				phy
.25e2	48		pha				pha  								; save char
.25e3	e0 00		cpx #$00			cpx 	#0 							; check default (0)
.25e5	d0 05		bne $25ec			bne 	_XPCNotDefault
.25e7	20 cc ff	jsr $ffcc			jsr 	X16_CLRCHN					; set default channel
.25ea	80 08		bra $25f4			bra 	_XPCSend
.25ec					_XPCNotDefault:
.25ec	20 c9 ff	jsr $ffc9			jsr 	X16_CHKOUT 					; CHKOUT set channel
.25ef	20 b7 ff	jsr $ffb7			jsr 	X16_READST 					; check okay
.25f2	d0 08		bne $25fc			bne 	_XPCError
.25f4					_XPCSend:
.25f4	68		pla				pla 								; restore character
.25f5	20 d2 ff	jsr $ffd2			jsr 	X16_BSOUT 					; print
.25f8	7a		ply				ply
.25f9	fa		plx				plx
.25fa	68		pla				pla
.25fb	60		rts				rts
.25fc					_XPCError:
.25fc	4c 99 15	jmp $1599		jmp	ErrorV_channel
.25ff					XReadClock:
.25ff	20 de ff	jsr $ffde			jsr 	X16_RDTIM
.2602	60		rts				rts
.2603					XWriteClock:
.2603	48		pha				pha
.2604	da		phx				phx
.2605	5a		phy				phy
.2606	20 db ff	jsr $ffdb			jsr 	X16_SETTIM
.2609	7a		ply				ply
.260a	fa		plx				plx
.260b	68		pla				pla
.260c	60		rts				rts
.260d					CommandScreen:
.260d	fa		plx				plx
.260e	da		phx				phx
.260f	5a		phy				phy
.2610	20 83 19	jsr $1983			jsr 	GetInteger8Bit
.2613	18		clc				clc
.2614	20 5f ff	jsr $ff5f			jsr 	X16_screen_mode
.2617	7a		ply				ply
.2618	fa		plx				plx
.2619	4c 2c 10	jmp $102c			jmp 	NextCommand
.261c					XCommandSleep:
.261c	fa		plx				plx
.261d	5a		phy				phy
.261e	20 57 2a	jsr $2a57			jsr 	FloatIntegerPart
.2621	ca		dex				dex
.2622	20 ff 25	jsr $25ff			jsr 	XReadClock 					; read clock to YXA
.2625	18		clc				clc 								; calculate end time in zTemp0
.2626	65 40		adc $40				adc 	NSMantissa0
.2628	85 28		sta $28				sta 	zTemp0
.262a	8a		txa				txa
.262b	65 4c		adc $4c				adc 	NSMantissa1
.262d	85 29		sta $29				sta 	zTemp0+1
.262f					_XCWait:
.262f	20 ff 25	jsr $25ff			jsr 	XReadClock 					; and wait for it.
.2632	c5 28		cmp $28				cmp 	zTemp0
.2634	d0 f9		bne $262f			bne 	_XCWait
.2636	e4 29		cpx $29				cpx 	zTemp0+1
.2638	d0 f5		bne $262f			bne 	_XCWait
.263a	a2 ff		ldx #$ff			ldx 	#$FF
.263c	7a		ply				ply
.263d	4c 2c 10	jmp $102c			jmp 	NextCommand
.2640					X16_Audio_FMINIT:
.2640	fa		plx				plx
.2641	5a		phy			phy
.2642	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>2645	63 c0					.word	X16A_ym_init
>2647	0a					.byte	X16_AudioCodeBank
.2648	a2 ff		ldx #$ff		ldx	#$FF
.264a	7a		ply			ply
.264b	4c 2c 10	jmp $102c			jmp 	NextCommand
.264e					X16_Audio_FMNOTE:
.264e	fa		plx				plx
.264f	5a		phy			phy
.2650	20 d3 11	jsr $11d3		jsr		X16_Audio_Parameters8_8
.2653	18		clc			clc
.2654	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>2657	03 c0					.word	X16A_bas_fmnote
>2659	0a					.byte	X16_AudioCodeBank
.265a	a2 ff		ldx #$ff		ldx	#$FF
.265c	7a		ply			ply
.265d	4c 2c 10	jmp $102c			jmp 	NextCommand
.2660					X16_Audio_FMDRUM:
.2660	fa		plx				plx
.2661	5a		phy			phy
.2662	20 d3 11	jsr $11d3		jsr		X16_Audio_Parameters8_8
.2665	18		clc			clc
.2666	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>2669	6f c0					.word	X16A_ym_playdrum
>266b	0a					.byte	X16_AudioCodeBank
.266c	a2 ff		ldx #$ff		ldx	#$FF
.266e	7a		ply			ply
.266f	4c 2c 10	jmp $102c			jmp 	NextCommand
.2672					X16_Audio_FMINST:
.2672	fa		plx				plx
.2673	5a		phy			phy
.2674	20 d3 11	jsr $11d3		jsr		X16_Audio_Parameters8_8
.2677	38		sec			sec
.2678	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>267b	69 c0					.word	X16A_ym_loadpatch
>267d	0a					.byte	X16_AudioCodeBank
.267e	a2 ff		ldx #$ff		ldx	#$FF
.2680	7a		ply			ply
.2681	4c 2c 10	jmp $102c			jmp 	NextCommand
.2684					X16_Audio_FMVIB:
.2684	fa		plx				plx
.2685	5a		phy			phy
.2686	20 d3 11	jsr $11d3		jsr		X16_Audio_Parameters8_8
.2689	18		clc			clc
.268a	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>268d	09 c0					.word	X16A_bas_fmvib
>268f	0a					.byte	X16_AudioCodeBank
.2690	a2 ff		ldx #$ff		ldx	#$FF
.2692	7a		ply			ply
.2693	4c 2c 10	jmp $102c			jmp 	NextCommand
.2696					X16_Audio_FMFREQ:
.2696	fa		plx				plx
.2697	5a		phy			phy
.2698	20 cd 11	jsr $11cd		jsr		X16_Audio_Parameters8_16
.269b	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>269e	00 c0					.word	X16A_bas_fmfreq
>26a0	0a					.byte	X16_AudioCodeBank
.26a1	a2 ff		ldx #$ff		ldx	#$FF
.26a3	7a		ply			ply
.26a4	4c 2c 10	jmp $102c			jmp 	NextCommand
.26a7					X16_Audio_FMVOL:
.26a7	fa		plx				plx
.26a8	5a		phy			phy
.26a9	20 d3 11	jsr $11d3		jsr		X16_Audio_Parameters8_8
.26ac	18		clc			clc
.26ad	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>26b0	75 c0					.word	X16A_ym_setatten
>26b2	0a					.byte	X16_AudioCodeBank
.26b3	a2 ff		ldx #$ff		ldx	#$FF
.26b5	7a		ply			ply
.26b6	4c 2c 10	jmp $102c			jmp 	NextCommand
.26b9					X16_Audio_FMPAN:
.26b9	fa		plx				plx
.26ba	5a		phy			phy
.26bb	20 d3 11	jsr $11d3		jsr		X16_Audio_Parameters8_8
.26be	18		clc			clc
.26bf	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>26c2	7e c0					.word	X16A_ym_setpan
>26c4	0a					.byte	X16_AudioCodeBank
.26c5	a2 ff		ldx #$ff		ldx	#$FF
.26c7	7a		ply			ply
.26c8	4c 2c 10	jmp $102c			jmp 	NextCommand
.26cb					X16_Audio_FMPLAY:
.26cb	fa		plx				plx
.26cc	5a		phy			phy
.26cd	20 e4 11	jsr $11e4		jsr		X16_Audio_Parameters8_String
.26d0	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>26d3	06 c0					.word	X16A_bas_fmplaystring
>26d5	0a					.byte	X16_AudioCodeBank
.26d6	a2 ff		ldx #$ff		ldx	#$FF
.26d8	7a		ply			ply
.26d9	4c 2c 10	jmp $102c			jmp 	NextCommand
.26dc					X16_Audio_FMCHORD:
.26dc	fa		plx				plx
.26dd	5a		phy			phy
.26de	20 e4 11	jsr $11e4		jsr		X16_Audio_Parameters8_String
.26e1	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>26e4	8d c0					.word	X16A_bas_fmchordstring
>26e6	0a					.byte	X16_AudioCodeBank
.26e7	a2 ff		ldx #$ff		ldx	#$FF
.26e9	7a		ply			ply
.26ea	4c 2c 10	jmp $102c			jmp 	NextCommand
.26ed					X16_Audio_FMPOKE:
.26ed	fa		plx				plx
.26ee	5a		phy			phy
.26ef	20 d3 11	jsr $11d3		jsr		X16_Audio_Parameters8_8
.26f2	18		clc			clc
.26f3	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>26f6	8a c0					.word	X16A_ym_write
>26f8	0a					.byte	X16_AudioCodeBank
.26f9	a2 ff		ldx #$ff		ldx	#$FF
.26fb	7a		ply			ply
.26fc	4c 2c 10	jmp $102c			jmp 	NextCommand
.26ff					X16_Audio_PSGINIT:
.26ff	fa		plx				plx
.2700	5a		phy			phy
.2701	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>2704	4b c0					.word	X16A_psg_init
>2706	0a					.byte	X16_AudioCodeBank
.2707	a2 ff		ldx #$ff		ldx	#$FF
.2709	7a		ply			ply
.270a	4c 2c 10	jmp $102c			jmp 	NextCommand
.270d					X16_Audio_PSGNOTE:
.270d	fa		plx				plx
.270e	5a		phy			phy
.270f	20 d3 11	jsr $11d3		jsr		X16_Audio_Parameters8_8
.2712	18		clc			clc
.2713	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>2716	12 c0					.word	X16A_bas_psgnote
>2718	0a					.byte	X16_AudioCodeBank
.2719	a2 ff		ldx #$ff		ldx	#$FF
.271b	7a		ply			ply
.271c	4c 2c 10	jmp $102c			jmp 	NextCommand
.271f					X16_Audio_PSGVOL:
.271f	fa		plx				plx
.2720	5a		phy			phy
.2721	20 d3 11	jsr $11d3		jsr		X16_Audio_Parameters8_8
.2724	18		clc			clc
.2725	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>2728	54 c0					.word	X16A_psg_setatten
>272a	0a					.byte	X16_AudioCodeBank
.272b	a2 ff		ldx #$ff		ldx	#$FF
.272d	7a		ply			ply
.272e	4c 2c 10	jmp $102c			jmp 	NextCommand
.2731					X16_Audio_PSGWAV:
.2731	fa		plx				plx
.2732	5a		phy			phy
.2733	20 d3 11	jsr $11d3		jsr		X16_Audio_Parameters8_8
.2736	18		clc			clc
.2737	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>273a	15 c0					.word	X16A_bas_psgwav
>273c	0a					.byte	X16_AudioCodeBank
.273d	a2 ff		ldx #$ff		ldx	#$FF
.273f	7a		ply			ply
.2740	4c 2c 10	jmp $102c			jmp 	NextCommand
.2743					X16_Audio_PSGFREQ:
.2743	fa		plx				plx
.2744	5a		phy			phy
.2745	20 cd 11	jsr $11cd		jsr		X16_Audio_Parameters8_16
.2748	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>274b	0f c0					.word	X16A_bas_psgfreq
>274d	0a					.byte	X16_AudioCodeBank
.274e	a2 ff		ldx #$ff		ldx	#$FF
.2750	7a		ply			ply
.2751	4c 2c 10	jmp $102c			jmp 	NextCommand
.2754					X16_Audio_PSGPAN:
.2754	fa		plx				plx
.2755	5a		phy			phy
.2756	20 d3 11	jsr $11d3		jsr		X16_Audio_Parameters8_8
.2759	18		clc			clc
.275a	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>275d	5a c0					.word	X16A_psg_setpan
>275f	0a					.byte	X16_AudioCodeBank
.2760	a2 ff		ldx #$ff		ldx	#$FF
.2762	7a		ply			ply
.2763	4c 2c 10	jmp $102c			jmp 	NextCommand
.2766					X16_Audio_PSGPLAY:
.2766	fa		plx				plx
.2767	5a		phy			phy
.2768	20 e4 11	jsr $11e4		jsr		X16_Audio_Parameters8_String
.276b	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>276e	18 c0					.word	X16A_bas_psgplaystring
>2770	0a					.byte	X16_AudioCodeBank
.2771	a2 ff		ldx #$ff		ldx	#$FF
.2773	7a		ply			ply
.2774	4c 2c 10	jmp $102c			jmp 	NextCommand
.2777					X16_Audio_PSGCHORD:
.2777	fa		plx				plx
.2778	5a		phy			phy
.2779	20 e4 11	jsr $11e4		jsr		X16_Audio_Parameters8_String
.277c	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>277f	90 c0					.word	X16A_bas_psgchordstring
>2781	0a					.byte	X16_AudioCodeBank
.2782	a2 ff		ldx #$ff		ldx	#$FF
.2784	7a		ply			ply
.2785	4c 2c 10	jmp $102c			jmp 	NextCommand
.2788					CommandCls:
.2788	fa		plx				plx
.2789	a9 93		lda #$93			lda 	#147
.278b	20 df 25	jsr $25df			jsr 	XPrintCharacterToChannel
.278e	4c 2c 10	jmp $102c			jmp 	NextCommand
.2791					CommandLocate:
.2791	fa		plx				plx
.2792	20 57 2a	jsr $2a57			jsr 	FloatIntegerPart
.2795	ca		dex				dex
.2796	20 57 2a	jsr $2a57			jsr 	FloatIntegerPart
.2799	ca		dex				dex
.279a	a9 13		lda #$13			lda 	#$13 						; home.
.279c	20 df 25	jsr $25df			jsr 	XPrintCharacterToChannel
.279f	a9 1d		lda #$1d			lda 	#$1D 						; do cursor rights
.27a1	a6 40		ldx $40				ldx 	NSMantissa0
.27a3	20 b0 27	jsr $27b0			jsr 	_CLOutputXA
.27a6	a9 11		lda #$11			lda 	#$11 						; do cursor downs.
.27a8	a6 41		ldx $41				ldx 	NSMantissa0+1
.27aa	20 b0 27	jsr $27b0			jsr 	_CLOutputXA
.27ad	4c 2c 10	jmp $102c			jmp 	NextCommand
.27b0					_CLOutputXA:
.27b0	ca		dex				dex
.27b1	f0 07		beq $27ba			beq 	_CLOExit
.27b3	30 05		bmi $27ba			bmi 	_CLOExit
.27b5	20 df 25	jsr $25df			jsr 	XPrintCharacterToChannel
.27b8	80 f6		bra $27b0			bra 	_CLOutputXA
.27ba					_CLOExit:
.27ba	60		rts				rts
.27bb					CommandColor:
.27bb	fa		plx				plx
.27bc	20 57 2a	jsr $2a57			jsr 	FloatIntegerPart
.27bf	ca		dex				dex
.27c0	20 57 2a	jsr $2a57			jsr 	FloatIntegerPart
.27c3	ca		dex				dex
.27c4	a5 41		lda $41				lda 	NSMantissa0+1 				; bgr specified
.27c6	c9 ff		cmp #$ff			cmp 	#$FF
.27c8	f0 08		beq $27d2			beq 	_CCNoBGR 					; if so, change background
.27ca	20 da 27	jsr $27da			jsr 	_CCSetColour
.27cd	a9 01		lda #$01			lda 	#$01 						; swap FGR/BGR
.27cf	20 df 25	jsr $25df			jsr 	XPrintCharacterToChannel
.27d2					_CCNoBGR:
.27d2	a5 40		lda $40				lda 	NSMantissa0
.27d4	20 da 27	jsr $27da			jsr 	_CCSetColour
.27d7	4c 2c 10	jmp $102c			jmp 	NextCommand
.27da					_CCSetColour:
.27da	29 0f		and #$0f			and 	#15 						; look up in control codes table.
.27dc	aa		tax				tax
.27dd	bd e4 27	lda $27e4,x			lda 	_CCCommandTable,x
.27e0	20 df 25	jsr $25df			jsr 	XPrintCharacterToChannel
.27e3	60		rts				rts
.27e4					_CCCommandTable:
>27e4	90 05 1c 9f 9c 1e 1f 9e				.byte	 $90,$05,$1c,$9f,$9c,$1e,$1f,$9e
>27ec	81 95 96 97 98 99 9a 9b				.byte	 $81,$95,$96,$97,$98,$99,$9a,$9b
.27f4					CommandVPOKE:
.27f4	fa		plx				plx
.27f5	20 83 19	jsr $1983			jsr 	GetInteger8Bit 				; poke value
.27f8	48		pha				pha
.27f9	ca		dex				dex
.27fa	20 57 2a	jsr $2a57			jsr 	FloatIntegerPart
.27fd	b5 40		lda $40,x			lda 	NSMantissa0,x
.27ff	8d 20 9f	sta $9f20			sta 	VRAMLow0
.2802	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.2804	8d 21 9f	sta $9f21			sta 	VRAMMed0
.2807	ca		dex				dex
.2808	20 57 2a	jsr $2a57			jsr 	FloatIntegerPart
.280b	20 83 19	jsr $1983			jsr 	GetInteger8Bit
.280e	8d 22 9f	sta $9f22			sta 	VRAMHigh0
.2811	ca		dex				dex
.2812	68		pla				pla 								; poke value back
.2813	8d 23 9f	sta $9f23			sta 	VRAMData0					; and write it out.
.2816	4c 2c 10	jmp $102c			jmp 	NextCommand
.2819					CommandVPEEK:
.2819	fa		plx				plx
.281a	20 57 2a	jsr $2a57			jsr 	FloatIntegerPart
.281d	b5 40		lda $40,x			lda 	NSMantissa0,x
.281f	8d 20 9f	sta $9f20			sta 	VRAMLow0
.2822	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.2824	8d 21 9f	sta $9f21			sta 	VRAMMed0
.2827	ca		dex				dex
.2828	20 57 2a	jsr $2a57			jsr 	FloatIntegerPart
.282b	20 83 19	jsr $1983			jsr 	GetInteger8Bit
.282e	8d 22 9f	sta $9f22			sta 	VRAMHigh0
.2831	ad 23 9f	lda $9f23			lda 	VRAMData0					; read data
.2834	20 1e 2e	jsr $2e1e			jsr 	FloatSetByte 				; return as byte
.2837	4c 2c 10	jmp $102c			jmp 	NextCommand

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library

=12					MathStackSize = 12
=$40					NSSString = $40 							; string vs typemask
=$00					NSSIFloat = $00 							; ifloat vs typemask
=$20					NSSIInt16 = $20								; when set, a reference is a 16 bit reference (e.g. a%)
=$40					NSSTypeMask = $40
=$80					NSSArray = $80  							; array (in variable code)
.0034					NSStatus:
>0034							.fill 	MathStackSize
.0040					NSMantissa0:
>0040							.fill 	MathStackSize 				; (this is my integer mantissa system)
.004c					NSMantissa1:
>004c							.fill 	MathStackSize
.0058					NSMantissa2:
>0058							.fill 	MathStackSize
.0064					NSMantissa3:
>0064							.fill 	MathStackSize
.0070					NSExponent:
>0070							.fill 	MathStackSize
.056d					numberBuffer:
>056d							.fill 	34
.283a					FloatSubtract:
.283a	b5 34		lda $34,x			lda 	NSStatus,x 					; negate top of stack
.283c	49 80		eor #$80			eor 	#$80
.283e	95 34		sta $34,x			sta 	NSStatus,x					; and fall through.
.2840					FloatAdd:
.2840	ca		dex				dex
.2841	b5 70		lda $70,x			lda 	NSExponent,x 				; can use optimised.
.2843	15 71		ora $71,x			ora 	NSExponent+1,x
.2845	15 64		ora $64,x			ora 	NSMantissa3,x
.2847	15 65		ora $65,x			ora 	NSMantissa3+1,x
.2849	d0 04		bne $284f			bne 	_FAUseFloat
.284b	20 dc 2b	jsr $2bdc			jsr 	FloatInt32Add 				; use the int32 one.
.284e	60		rts				rts
.284f					_FAUseFloat:
.284f	20 71 2b	jsr $2b71			jsr 	FloatNormalise 				; normalise S[X]
.2852	f0 51		beq $28a5			beq 	_FAReturn1
.2854	e8		inx				inx 								; normalise S[X+1]
.2855	20 71 2b	jsr $2b71			jsr 	FloatNormalise
.2858	ca		dex				dex
.2859	c9 00		cmp #$00			cmp 	#0
.285b	f0 60		beq $28bd			beq 	_FAExit 					; if so, just return A
.285d	b5 70		lda $70,x			lda 	NSExponent,x 				; are the exponents the same ?
.285f	d5 71		cmp $71,x			cmp 	NSExponent+1,x
.2861	f0 18		beq $287b			beq 	_FAExponentsEqual
.2863	b5 70		lda $70,x			lda 	NSExponent,x 				; work out the larger exponent
.2865	a8		tay				tay
.2866	38		sec				sec 								; do a signed comparison of the exponents.
.2867	f5 71		sbc $71,x			sbc 	NSExponent+1,x
.2869	50 02		bvc $286d			bvc 	_FANoSignedChange
.286b	49 80		eor #$80			eor 	#$80
.286d					_FANoSignedChange:
.286d	29 80		and #$80			and 	#$80
.286f	10 02		bpl $2873			bpl 	_FAHaveMax
.2871	b4 71		ldy $71,x			ldy 	NSExponent+1,x
.2873					_FAHaveMax:
.2873	20 be 28	jsr $28be			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.2876	e8		inx				inx
.2877	20 be 28	jsr $28be			jsr 	_FAShiftToExponent
.287a	ca		dex				dex
.287b					_FAExponentsEqual:
.287b	b5 34		lda $34,x			lda 	NSStatus,x 					; are the signs the same
.287d	55 35		eor $35,x			eor 	NSStatus+1,x
.287f	30 0e		bmi $288f			bmi 	_FADifferentSigns
.2881	20 a8 2b	jsr $2ba8			jsr 	FloatAddTopTwoStack 		; do the add of the mantissae
.2884	b5 64		lda $64,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.2886	10 35		bpl $28bd			bpl 	_FAExit 					; if no, we are done.
.2888	20 35 2e	jsr $2e35			jsr 	FloatShiftRight 				; shift A right, renormalising it.
.288b	f6 70		inc $70,x			inc 	NSExponent,x 				; bump the exponent and exit
.288d	80 2e		bra $28bd			bra 	_FAExit
.288f					_FADifferentSigns:
.288f	20 c2 2b	jsr $2bc2			jsr 	FloatSubTopTwoStack 		; subtract mantissa B from A
.2892	b5 64		lda $64,x			lda 	NSMantissa3,x 				; is the result negative ?
.2894	10 06		bpl $289c			bpl 	_FACheckZero 				; if no, check for -0
.2896	20 de 2d	jsr $2dde			jsr 	FloatNegate 					; netate result
.2899	20 e5 2d	jsr $2de5			jsr 	FloatNegateMantissa 			; negate (2'c) the mantissa
.289c					_FACheckZero:
.289c	20 3e 2e	jsr $2e3e			jsr 	FloatIsZero	 				; check for -0
.289f	d0 1c		bne $28bd			bne 	_FAExit
.28a1	74 34		stz $34,x			stz 	NSStatus,x
.28a3	80 18		bra $28bd			bra 	_FAExit
.28a5					_FAReturn1:
.28a5	b5 41		lda $41,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.28a7	95 40		sta $40,x			sta 	NSMantissa0,x
.28a9	b5 4d		lda $4d,x			lda 	NSMantissa1+1,x
.28ab	95 4c		sta $4c,x			sta 	NSMantissa1,x
.28ad	b5 59		lda $59,x			lda 	NSMantissa2+1,x
.28af	95 58		sta $58,x			sta 	NSMantissa2,x
.28b1	b5 65		lda $65,x			lda 	NSMantissa3+1,x
.28b3	95 64		sta $64,x			sta 	NSMantissa3,x
.28b5	b5 71		lda $71,x			lda 	NSExponent+1,x
.28b7	95 70		sta $70,x			sta 	NSExponent,x
.28b9	b5 35		lda $35,x			lda 	NSStatus+1,x
.28bb	95 34		sta $34,x			sta 	NSStatus,x
.28bd					_FAExit:
.28bd	60		rts				rts
.28be					_FAShiftToExponent:
.28be					_FAShiftToExponent2:
.28be	98		tya				tya 								; compare Y to exponent
.28bf	d5 70		cmp $70,x			cmp 	NSExponent,x 				; reached the exponent required ?
.28c1	f0 07		beq $28ca			beq 	_FASEExit 					; exit if so.
.28c3	20 35 2e	jsr $2e35			jsr 	FloatShiftRight	 			; shift the mantissa right
.28c6	f6 70		inc $70,x			inc 	NSExponent,x 				; increment exponent
.28c8	80 f4		bra $28be			bra 	_FAShiftToExponent2
.28ca					_FASEExit:
.28ca	60		rts				rts
.28cb					CompareEqual:
.28cb	b5 40		lda $40,x			lda 	NSMantissa0,x
.28cd	d0 09		bne $28d8			bne 	ReturnFalse
.28cf					ReturnTrue:
.28cf	a9 01		lda #$01			lda 	#1
.28d1	95 40		sta $40,x			sta 	NSMantissa0,x
.28d3	a9 80		lda #$80			lda 	#$80
.28d5	95 34		sta $34,x			sta 	NSStatus,x
.28d7	60		rts				rts
.28d8					ReturnFalse:
.28d8	74 40		stz $40,x			stz 	NSMantissa0,x
.28da	60		rts				rts
.28db					CompareNotEqual:
.28db	b5 40		lda $40,x			lda 	NSMantissa0,x
.28dd	d0 f0		bne $28cf			bne 	ReturnTrue
.28df	80 f7		bra $28d8			bra 	ReturnFalse
.28e1					CompareLess:
.28e1	b5 40		lda $40,x			lda 	NSMantissa0,x
.28e3	c9 ff		cmp #$ff			cmp 	#$FF
.28e5	f0 e8		beq $28cf			beq 	ReturnTrue
.28e7	80 ef		bra $28d8			bra 	ReturnFalse
.28e9					CompareGreater:
.28e9	b5 40		lda $40,x			lda 	NSMantissa0,x
.28eb	c9 01		cmp #$01			cmp 	#$01
.28ed	f0 e0		beq $28cf			beq 	ReturnTrue
.28ef	80 e7		bra $28d8			bra 	ReturnFalse
.28f1					CompareLessEqual:
.28f1	b5 40		lda $40,x			lda 	NSMantissa0,x
.28f3	c9 01		cmp #$01			cmp 	#$01
.28f5	d0 d8		bne $28cf			bne 	ReturnTrue
.28f7	80 df		bra $28d8			bra 	ReturnFalse
.28f9					CompareGreaterEqual:
.28f9	b5 40		lda $40,x			lda 	NSMantissa0,x
.28fb	c9 ff		cmp #$ff			cmp 	#$FF
.28fd	d0 d0		bne $28cf			bne 	ReturnTrue
.28ff	80 d7		bra $28d8			bra 	ReturnFalse
.2901					FloatCompare:
.2901	b5 70		lda $70,x			lda 	NSExponent,x 				; float comparison.
.2903	15 6f		ora $6f,x			ora 	NSExponent-1,x 				; integer if both integer.
.2905	48		pha				pha
.2906	20 3a 28	jsr $283a			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.2909	68		pla				pla
.290a	d0 0c		bne $2918			bne 	_FCCompareFloat
.290c	b5 40		lda $40,x			lda 	NSMantissa0,x
.290e	15 4c		ora $4c,x			ora 	NSMantissa1,x
.2910	15 58		ora $58,x			ora 	NSMantissa2,x
.2912	15 64		ora $64,x			ora 	NSMantissa3,x
.2914	f0 14		beq $292a			beq 	_FCExit 					; if zero, return zero
.2916	80 0a		bra $2922			bra 	_FCSign
.2918					_FCCompareFloat:
.2918	b5 4c		lda $4c,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.291a	29 f0		and #$f0			and 	#$F0
.291c	15 58		ora $58,x			ora 	NSMantissa2,x
.291e	15 64		ora $64,x			ora 	NSMantissa3,x
.2920	f0 08		beq $292a			beq 	_FCExit 					; zero, so approximately identical
.2922					_FCSign:
.2922	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.2924	34 34		bit $34,x			bit 	NSStatus,x
.2926	10 02		bpl $292a			bpl 	_FCExit
.2928					_FCNegative:
.2928	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.292a					_FCExit:
.292a	20 1e 2e	jsr $2e1e			jsr 	FloatSetByte 				; set the result 255,0,1
.292d	60		rts				rts
.292e					FloatScalarTable:
>292e	66 66 66 66				.dword $66666666 ; 0.1
>2932	de					.byte $de
>2933	1f 85 eb 51				.dword $51eb851f ; 0.01
>2937	db					.byte $db
>2938	4c 37 89 41				.dword $4189374c ; 0.001
>293c	d8					.byte $d8
>293d	ac 8b db 68				.dword $68db8bac ; 0.0001
>2941	d4					.byte $d4
>2942	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>2946	d1					.byte $d1
>2947	83 de 1b 43				.dword $431bde83 ; 1e-06
>294b	ce					.byte $ce
>294c	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>2950	ca					.byte $ca
>2951	89 3b e6 55				.dword $55e63b89 ; 1e-08
>2955	c7					.byte $c7
>2956	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>295a	c4					.byte $c4
>295b	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>295f	c0					.byte $c0
>2960	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>2964	bd					.byte $bd
.2965					FloatDivide:
.2965	48		pha				pha
.2966	20 71 2b	jsr $2b71			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.2969	ca		dex				dex
.296a	c9 00		cmp #$00			cmp 	#0
.296c	f0 1e		beq $298c			beq 	_FDZero
.296e	20 71 2b	jsr $2b71			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.2971	f0 16		beq $2989			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.2973	20 d4 29	jsr $29d4			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.2976	20 a1 29	jsr $29a1			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.2979	20 71 2b	jsr $2b71			jsr		FloatNormalise 				; renormalise
.297c	20 67 2b	jsr $2b67			jsr 	FloatCalculateSign 			; calculate result sign
.297f	b5 70		lda $70,x			lda 	NSExponent,x 				; calculate exponent
.2981	38		sec				sec
.2982	f5 71		sbc $71,x			sbc 	NSExponent+1,x
.2984	38		sec				sec
.2985	e9 1e		sbc #$1e			sbc 	#30
.2987	95 70		sta $70,x			sta 	NSExponent,x
.2989					_FDExit:
.2989	68		pla				pla
.298a	18		clc				clc
.298b	60		rts				rts
.298c					_FDZero:
.298c	68		pla				pla
.298d	38		sec				sec
.298e	60		rts				rts
.298f					DivideInt32:
.298f	20 57 2a	jsr $2a57			jsr 	FloatIntegerPart 			; make both integers
.2992	ca		dex				dex
.2993	20 57 2a	jsr $2a57			jsr 	FloatIntegerPart
.2996	20 b2 29	jsr $29b2			jsr 	Int32Divide 				; divide
.2999	20 a1 29	jsr $29a1			jsr 	NSMCopyPlusTwoToZero 		; copy result
.299c	20 67 2b	jsr $2b67			jsr 	FloatCalculateSign 			; calculate result sign
.299f	18		clc				clc
.29a0	60		rts				rts
.29a1					NSMCopyPlusTwoToZero:
.29a1	b5 42		lda $42,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.29a3	95 40		sta $40,x			sta 	NSMantissa0,x
.29a5	b5 4e		lda $4e,x			lda 	NSMantissa1+2,x
.29a7	95 4c		sta $4c,x			sta 	NSMantissa1,x
.29a9	b5 5a		lda $5a,x			lda 	NSMantissa2+2,x
.29ab	95 58		sta $58,x			sta 	NSMantissa2,x
.29ad	b5 66		lda $66,x			lda 	NSMantissa3+2,x
.29af	95 64		sta $64,x			sta 	NSMantissa3,x
.29b1	60		rts				rts
.29b2					Int32Divide:
.29b2	48		pha				pha 								; save AXY
.29b3	5a		phy				phy
.29b4	20 ff 2d	jsr $2dff			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.29b7	20 18 2e	jsr $2e18			jsr 	FloatSetZeroMantissaOnly 	; set S[X] to zero
.29ba	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.29bc					_I32DivideLoop:
.29bc	e8		inx				inx
.29bd	e8		inx				inx
.29be	20 2b 2e	jsr $2e2b			jsr 	FloatShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.29c1	ca		dex				dex
.29c2	ca		dex				dex
.29c3	20 2c 2e	jsr $2e2c			jsr 	FloatRotateLeft
.29c6	20 f2 29	jsr $29f2			jsr 	FloatDivideCheck 			; check if subtract possible
.29c9	90 02		bcc $29cd			bcc 	_I32DivideNoCarryIn
.29cb	f6 42		inc $42,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.29cd					_I32DivideNoCarryIn:
.29cd	88		dey				dey 								; loop round till division completed.
.29ce	d0 ec		bne $29bc			bne 	_I32DivideLoop
.29d0	7a		ply				ply 								; restore AXY and exit
.29d1	68		pla				pla
.29d2	18		clc				clc
.29d3	60		rts				rts
.29d4					Int32ShiftDivide:
.29d4	48		pha				pha 								; save AY
.29d5	5a		phy				phy
.29d6	e8		inx				inx 								; clear S[X+2]
.29d7	e8		inx				inx
.29d8	20 1c 2e	jsr $2e1c			jsr 	FloatSetZero
.29db	ca		dex				dex
.29dc	ca		dex				dex
.29dd	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.29df					_I32SDLoop:
.29df	20 f2 29	jsr $29f2			jsr 	FloatDivideCheck 			; check if subtract possible
.29e2	e8		inx				inx
.29e3	e8		inx				inx
.29e4	20 2c 2e	jsr $2e2c			jsr 	FloatRotateLeft				; shift 64 bit FPA left, rotating carry in
.29e7	ca		dex				dex
.29e8	ca		dex				dex
.29e9	20 2c 2e	jsr $2e2c			jsr 	FloatRotateLeft
.29ec	88		dey				dey 	 							; do 31 times
.29ed	d0 f0		bne $29df			bne 	_I32SDLoop
.29ef	7a		ply				ply 								; restore AY and exit
.29f0	68		pla				pla
.29f1	60		rts				rts
.29f2					FloatDivideCheck:
.29f2	20 c2 2b	jsr $2bc2			jsr 	FloatSubTopTwoStack 		; subtract Stack[X+1] from Stack[X+0]
.29f5	b0 04		bcs $29fb			bcs 	_DCSExit 					; if carry set, then could do, exit
.29f7	20 a8 2b	jsr $2ba8			jsr 	FloatAddTopTwoStack 		; add it back in
.29fa	18		clc				clc 								; and return False
.29fb					_DCSExit:
.29fb	60		rts				rts
.29fc					FloatFractionalPart:
.29fc	5a		phy				phy
.29fd	b5 34		lda $34,x			lda 	NSStatus,x 					; take absolute value
.29ff	29 7f		and #$7f			and 	#$7F
.2a01	95 34		sta $34,x			sta 	NSStatus,x
.2a03	20 71 2b	jsr $2b71			jsr 	FloatNormalise
.2a06	b5 70		lda $70,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.2a08	38		sec				sec
.2a09	e9 e0		sbc #$e0			sbc 	#$E0
.2a0b	90 29		bcc $2a36			bcc 	_FFPExit 					; already fractional
.2a0d	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.2a0f	b0 22		bcs $2a33			bcs 	_FFPZero
.2a11	a8		tay				tay 								; put count to do in Y
.2a12	b5 64		lda $64,x			lda 	NSMantissa3,x 				; do each in turn.
.2a14	20 3b 2a	jsr $2a3b			jsr 	_FFPPartial
.2a17	95 64		sta $64,x			sta 	NSMantissa3,x
.2a19	b5 58		lda $58,x			lda 	NSMantissa2,x
.2a1b	20 3b 2a	jsr $2a3b			jsr 	_FFPPartial
.2a1e	95 58		sta $58,x			sta 	NSMantissa2,x
.2a20	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.2a22	20 3b 2a	jsr $2a3b			jsr 	_FFPPartial
.2a25	95 4c		sta $4c,x			sta 	NSMantissa1,x
.2a27	b5 40		lda $40,x			lda 	NSMantissa0,x
.2a29	20 3b 2a	jsr $2a3b			jsr 	_FFPPartial
.2a2c	95 40		sta $40,x			sta 	NSMantissa0,x
.2a2e	20 3e 2e	jsr $2e3e			jsr 	FloatIsZero 					; zeroed check.
.2a31	d0 03		bne $2a36			bne 	_FFPExit
.2a33					_FFPZero:
.2a33	20 1c 2e	jsr $2e1c			jsr 	FloatSetZero
.2a36					_FFPExit:
.2a36	20 71 2b	jsr $2b71			jsr 	FloatNormalise
.2a39	7a		ply				ply
.2a3a	60		rts				rts
.2a3b					_FFPPartial:
.2a3b	c0 00		cpy #$00			cpy 	#0 							; no more to do
.2a3d	f0 17		beq $2a56			beq 	_FFFPPExit
.2a3f	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.2a41	b0 0c		bcs $2a4f			bcs 	_FFFPPWholeByte
.2a43	5a		phy				phy
.2a44					_FFFPPLeft:
.2a44	0a		asl a				asl 	a
.2a45	88		dey				dey
.2a46	d0 fc		bne $2a44			bne 	_FFFPPLeft
.2a48	7a		ply				ply
.2a49					_FFFPPRight:
.2a49	4a		lsr a				lsr 	a
.2a4a	88		dey				dey
.2a4b	d0 fc		bne $2a49			bne 	_FFFPPRight
.2a4d	80 07		bra $2a56			bra 	_FFFPPExit
.2a4f					_FFFPPWholeByte:
.2a4f	98		tya				tya 								; subtract 8 from count
.2a50	38		sec				sec
.2a51	e9 08		sbc #$08			sbc 	#8
.2a53	a8		tay				tay
.2a54	a9 00		lda #$00			lda 	#0 							; and clear all
.2a56					_FFFPPExit:
.2a56	60		rts				rts
.2a57					FloatIntegerPart:
.2a57	48		pha				pha
.2a58	b5 70		lda $70,x			lda 	NSExponent,x 				; is it integer already ?
.2a5a	f0 1d		beq $2a79			beq 	_FIPExit 					; if so do nothing
.2a5c	20 3e 2e	jsr $2e3e			jsr 	FloatIsZero 				; is it zero ?
.2a5f	f0 15		beq $2a76			beq 	_FIPZero 					; if so return zero.
.2a61	20 71 2b	jsr $2b71			jsr 	FloatNormalise 				; normalise
.2a64	f0 10		beq $2a76			beq 	_FIPZero 					; normalised to zero, exit zero
.2a66					_FIPShift:
.2a66	b5 70		lda $70,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.2a68	10 07		bpl $2a71			bpl 	_FIPCheckZero
.2a6a	20 35 2e	jsr $2e35			jsr 	FloatShiftRight 			; shift mantissa right
.2a6d	f6 70		inc $70,x			inc 	NSExponent,x 				; bump exponent
.2a6f	80 f5		bra $2a66			bra 	_FIPShift
.2a71					_FIPCheckZero:
.2a71	20 3e 2e	jsr $2e3e			jsr 	FloatIsZero 				; avoid -0 problem
.2a74	d0 03		bne $2a79			bne 	_FIPExit 					; set to zero if mantissa zero.
.2a76					_FIPZero:
.2a76	20 1c 2e	jsr $2e1c			jsr 	FloatSetZero
.2a79					_FIPExit:
.2a79	68		pla				pla
.2a7a	60		rts				rts
.2a7b					FloatIntegerPartDown:
.2a7b	48		pha				pha
.2a7c	5a		phy				phy
.2a7d	b5 70		lda $70,x			lda 	NSExponent,x 				; is it integer already ?
.2a7f	f0 36		beq $2ab7			beq 	_FIPExit 					; if so do nothing
.2a81	20 3e 2e	jsr $2e3e			jsr 	FloatIsZero 				; is it zero ?
.2a84	f0 2e		beq $2ab4			beq 	_FIPZero 					; if so return zero.
.2a86	20 71 2b	jsr $2b71			jsr 	FloatNormalise 				; normalise
.2a89	f0 29		beq $2ab4			beq 	_FIPZero 					; normalised to zero, exit zero
.2a8b	a0 00		ldy #$00			ldy 	#0 							; reset the count of bits.
.2a8d					_FIPShift:
.2a8d	b5 70		lda $70,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.2a8f	10 0a		bpl $2a9b			bpl 	_FIPCheckDown
.2a91	20 35 2e	jsr $2e35			jsr 	FloatShiftRight 			; shift mantissa right
.2a94	90 01		bcc $2a97			bcc 	_FIPNoFrac 					; shifted a zero out ?
.2a96	c8		iny				iny
.2a97					_FIPNoFrac:
.2a97	f6 70		inc $70,x			inc 	NSExponent,x 				; bump exponent
.2a99	80 f2		bra $2a8d			bra 	_FIPShift
.2a9b					_FIPCheckDown:
.2a9b	c0 00		cpy #$00			cpy 	#0 							; were there any fractional bits.
.2a9d	f0 10		beq $2aaf			beq 	_FIPCheckZero
.2a9f	34 34		bit $34,x			bit 	NSStatus,x 					; +ve
.2aa1	10 0c		bpl $2aaf			bpl 	_FIPCheckZero
.2aa3	e8		inx				inx 								; -ve so round *down*.
.2aa4	a9 01		lda #$01			lda 	#1
.2aa6	20 1e 2e	jsr $2e1e			jsr 	FloatSetByte
.2aa9	20 de 2d	jsr $2dde			jsr 	FloatNegate
.2aac	20 40 28	jsr $2840			jsr 	FloatAdd
.2aaf					_FIPCheckZero:
.2aaf	20 3e 2e	jsr $2e3e			jsr 	FloatIsZero 				; avoid -0 problem
.2ab2	d0 03		bne $2ab7			bne 	_FIPExit 					; set to zero if mantissa zero.
.2ab4					_FIPZero:
.2ab4	20 1c 2e	jsr $2e1c			jsr 	FloatSetZero
.2ab7					_FIPExit:
.2ab7	7a		ply				ply
.2ab8	68		pla				pla
.2ab9	60		rts				rts
.2aba					FloatInt8Multiply:
.2aba	5a		phy				phy
.2abb	b5 40		lda $40,x			lda 	NSMantissa0,x 				; right shifted multiplier in Y
.2abd	a8		tay				tay
.2abe	74 40		stz $40,x			stz 	NSMantissa0,x 				; zero the result (already 8 bit constant)
.2ac0					_FI8MLoop:
.2ac0	98		tya				tya 								; shift right shifter right into carry
.2ac1	4a		lsr a				lsr 	a
.2ac2	a8		tay				tay
.2ac3	90 0d		bcc $2ad2			bcc 	_FI8MNoAdd
.2ac5	18		clc				clc
.2ac6	b5 40		lda $40,x			lda 	NSMantissa0,x
.2ac8	75 41		adc $41,x			adc 	NSMantissa0+1,x
.2aca	95 40		sta $40,x			sta 	NSMantissa0,x
.2acc	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.2ace	75 4d		adc $4d,x			adc 	NSMantissa1+1,x
.2ad0	95 4c		sta $4c,x			sta 	NSMantissa1,x
.2ad2					_FI8MNoAdd:
.2ad2	16 41		asl $41,x			asl 	NSMantissa0+1,x 			; shift adder left
.2ad4	36 4d		rol $4d,x			rol 	NSMantissa1+1,x
.2ad6	c0 00		cpy #$00			cpy 	#0
.2ad8	d0 e6		bne $2ac0			bne 	_FI8MLoop 					; until right shifter zero.
.2ada	7a		ply				ply
.2adb	60		rts				rts
.2adc					FloatMultiply:
.2adc	ca		dex				dex
.2add	b5 70		lda $70,x			lda 	NSExponent,x 				; can use optimised ?
.2adf	15 71		ora $71,x			ora 	NSExponent+1,x
.2ae1	15 64		ora $64,x			ora 	NSMantissa3,x
.2ae3	15 65		ora $65,x			ora 	NSMantissa3+1,x
.2ae5	d0 21		bne $2b08			bne 	_FMUseFloat
.2ae7	b5 34		lda $34,x			lda 	NSStatus,x 					; check if it is 8 bit unsigned
.2ae9	15 35		ora $35,x			ora 	NSStatus+1,x
.2aeb	29 80		and #$80			and 	#$80
.2aed	15 64		ora $64,x			ora 	NSMantissa3,x
.2aef	15 58		ora $58,x			ora 	NSMantissa2,x
.2af1	15 4c		ora $4c,x			ora 	NSMantissa1,x
.2af3	15 65		ora $65,x			ora 	NSMantissa3+1,x
.2af5	15 59		ora $59,x			ora 	NSMantissa2+1,x
.2af7	15 4d		ora $4d,x			ora 	NSMantissa1+1,x
.2af9	d0 04		bne $2aff			bne 	_FMInt32
.2afb	20 ba 2a	jsr $2aba			jsr 	FloatInt8Multiply 			; use fast 8x8 multiply.
.2afe	60		rts				rts
.2aff					_FMInt32:
.2aff	20 29 2b	jsr $2b29			jsr 	FloatMultiplyShort			; use the int32 one.
.2b02	18		clc				clc 								; fix it up if gone out of range
.2b03	75 70		adc $70,x			adc 	NSExponent,x
.2b05	95 70		sta $70,x			sta 	NSExponent,x
.2b07	60		rts				rts
.2b08					_FMUseFloat:
.2b08	20 71 2b	jsr $2b71			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.2b0b	f0 18		beq $2b25			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.2b0d	e8		inx				inx
.2b0e	20 71 2b	jsr $2b71			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.2b11	ca		dex				dex
.2b12	c9 00		cmp #$00			cmp 	#0
.2b14	f0 0c		beq $2b22			beq 	_FDSetZero
.2b16	20 29 2b	jsr $2b29			jsr 	FloatMultiplyShort 			; calculate the result.
.2b19	75 70		adc $70,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.2b1b	18		clc				clc
.2b1c	75 71		adc $71,x			adc 	NSExponent+1,x
.2b1e	95 70		sta $70,x			sta 	NSExponent,x
.2b20	80 03		bra $2b25			bra 	_FDExit
.2b22					_FDSetZero:
.2b22	20 1c 2e	jsr $2e1c			jsr 	FloatSetZero 				; return 0
.2b25					_FDExit:
.2b25	20 71 2b	jsr $2b71			jsr 	FloatNormalise 				; normalise the result
.2b28	60		rts				rts
.2b29					FloatMultiplyShort:
.2b29	5a		phy				phy 								; save Y
.2b2a	20 ff 2d	jsr $2dff			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.2b2d	20 18 2e	jsr $2e18			jsr 	FloatSetZeroMantissaOnly 	; set mantissa S[X] to zero
.2b30	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.2b32					_I32MLoop:
.2b32	b5 42		lda $42,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.2b34	15 4e		ora $4e,x			ora 	NSMantissa1+2,x
.2b36	15 5a		ora $5a,x			ora 	NSMantissa2+2,x
.2b38	15 66		ora $66,x			ora 	NSMantissa3+2,x
.2b3a	f0 25		beq $2b61			beq 	_I32MExit 					; exit if zero
.2b3c	b5 42		lda $42,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.2b3e	29 01		and #$01			and 	#1
.2b40	f0 0d		beq $2b4f			beq 	_I32MNoAdd
.2b42	20 a8 2b	jsr $2ba8			jsr 	FloatAddTopTwoStack 		; if so add S[X+1] to S[X+0]
.2b45	b5 64		lda $64,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.2b47	10 06		bpl $2b4f			bpl 	_I32MNoAdd
.2b49					_I32ShiftRight:
.2b49	20 35 2e	jsr $2e35			jsr 	FloatShiftRight 			; shift S[X] right
.2b4c	c8		iny				iny 								; increment shift count
.2b4d	80 09		bra $2b58			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.2b4f					_I32MNoAdd:
.2b4f	34 65		bit $65,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.2b51	70 f6		bvs $2b49			bvs 	_I32ShiftRight 				; instead.
.2b53	e8		inx				inx
.2b54	20 2b 2e	jsr $2e2b			jsr 	FloatShiftLeft 				; shift additive S[X+1] left
.2b57	ca		dex				dex
.2b58					_I32MShiftUpper:
.2b58	e8		inx				inx 								; shift S[X+2] right
.2b59	e8		inx				inx
.2b5a	20 35 2e	jsr $2e35			jsr 	FloatShiftRight
.2b5d	ca		dex				dex
.2b5e	ca		dex				dex
.2b5f	80 d1		bra $2b32			bra 	_I32MLoop 					; try again.
.2b61					_I32MExit:
.2b61	20 67 2b	jsr $2b67			jsr 	FloatCalculateSign
.2b64	98		tya				tya 								; shift in A
.2b65	7a		ply				ply 								; restore Y and exit
.2b66	60		rts				rts
.2b67					FloatCalculateSign:
.2b67	b5 34		lda $34,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.2b69	16 34		asl $34,x			asl 	NSStatus,x 					; shift result left
.2b6b	55 35		eor $35,x			eor 	NSStatus+1,x
.2b6d	0a		asl a				asl 	a 							; shift bit 7 into carry
.2b6e	76 34		ror $34,x			ror 	NSStatus,x 					; shift right into status byte.
.2b70	60		rts				rts
.2b71					FloatNormalise:
.2b71	20 3e 2e	jsr $2e3e			jsr 	FloatIsZero 				; if zero exit
.2b74	d0 07		bne $2b7d			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.2b76	16 34		asl $34,x			asl 	NSStatus,x 					; clear the sign bit.
.2b78	76 34		ror $34,x			ror 	NSStatus,x 					; (no -0)
.2b7a	a9 00		lda #$00			lda 	#0 							; set Z flag
.2b7c	60		rts				rts
.2b7d					_NSNormaliseOptimise:
.2b7d	b5 64		lda $64,x			lda 	NSMantissa3,x 				; upper byte zero ?
.2b7f	d0 19		bne $2b9a			bne 	_NSNormaliseLoop
.2b81	b5 58		lda $58,x			lda 	NSMantissa2,x 				; byte normalise
.2b83	30 15		bmi $2b9a			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.2b85	95 64		sta $64,x			sta 	NSMantissa3,x
.2b87	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.2b89	95 58		sta $58,x			sta 	NSMantissa2,x
.2b8b	b5 40		lda $40,x			lda 	NSMantissa0,x
.2b8d	95 4c		sta $4c,x			sta 	NSMantissa1,x
.2b8f	74 40		stz $40,x			stz 	NSMantissa0,x
.2b91	b5 70		lda $70,x			lda 	NSExponent,x
.2b93	38		sec				sec
.2b94	e9 08		sbc #$08			sbc 	#8
.2b96	95 70		sta $70,x			sta 	NSExponent,x
.2b98	80 e3		bra $2b7d			bra 	_NSNormaliseOptimise
.2b9a					_NSNormaliseLoop:
.2b9a	34 64		bit $64,x			bit 	NSMantissa3,x 				; bit 30 set ?
.2b9c	70 07		bvs $2ba5			bvs 	_NSNExit 					; exit if so with Z flag clear
.2b9e	20 2b 2e	jsr $2e2b			jsr 	FloatShiftLeft 				; shift mantissa left
.2ba1	d6 70		dec $70,x			dec 	NSExponent,x 				; adjust exponent
.2ba3	80 f5		bra $2b9a			bra 	_NSNormaliseLoop
.2ba5					_NSNExit:
.2ba5	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.2ba7	60		rts				rts
.2ba8					FloatAddTopTwoStack:
.2ba8	18		clc				clc
.2ba9	b5 40		lda $40,x			lda		NSMantissa0,x
.2bab	75 41		adc $41,x			adc 		NSMantissa0+1,x
.2bad	95 40		sta $40,x			sta 	NSMantissa0,x
.2baf	b5 4c		lda $4c,x			lda		NSMantissa1,x
.2bb1	75 4d		adc $4d,x			adc 		NSMantissa1+1,x
.2bb3	95 4c		sta $4c,x			sta 	NSMantissa1,x
.2bb5	b5 58		lda $58,x			lda		NSMantissa2,x
.2bb7	75 59		adc $59,x			adc 		NSMantissa2+1,x
.2bb9	95 58		sta $58,x			sta 	NSMantissa2,x
.2bbb	b5 64		lda $64,x			lda		NSMantissa3,x
.2bbd	75 65		adc $65,x			adc 		NSMantissa3+1,x
.2bbf	95 64		sta $64,x			sta 	NSMantissa3,x
.2bc1	60		rts				rts
.2bc2					FloatSubTopTwoStack:
.2bc2	38		sec				sec
.2bc3	b5 40		lda $40,x			lda		NSMantissa0,x
.2bc5	f5 41		sbc $41,x			sbc 		NSMantissa0+1,x
.2bc7	95 40		sta $40,x			sta 	NSMantissa0,x
.2bc9	b5 4c		lda $4c,x			lda		NSMantissa1,x
.2bcb	f5 4d		sbc $4d,x			sbc 		NSMantissa1+1,x
.2bcd	95 4c		sta $4c,x			sta 	NSMantissa1,x
.2bcf	b5 58		lda $58,x			lda		NSMantissa2,x
.2bd1	f5 59		sbc $59,x			sbc 		NSMantissa2+1,x
.2bd3	95 58		sta $58,x			sta 	NSMantissa2,x
.2bd5	b5 64		lda $64,x			lda		NSMantissa3,x
.2bd7	f5 65		sbc $65,x			sbc 		NSMantissa3+1,x
.2bd9	95 64		sta $64,x			sta 	NSMantissa3,x
.2bdb	60		rts				rts
.2bdc					FloatInt32Add:
.2bdc	b5 34		lda $34,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.2bde	55 35		eor $35,x			eor 	NSStatus+1,x
.2be0	30 04		bmi $2be6			bmi 	_DiffSigns
.2be2	20 a8 2b	jsr $2ba8			jsr		FloatAddTopTwoStack
.2be5	60		rts				rts
.2be6					_DiffSigns:
.2be6	20 c2 2b	jsr $2bc2			jsr 	FloatSubTopTwoStack 		; do a physical subtraction
.2be9	34 64		bit $64,x			bit 	NSMantissa3,x 				; result is +ve, okay
.2beb	10 07		bpl $2bf4			bpl 	_AddExit
.2bed	b5 35		lda $35,x			lda 	NSStatus+1,x 				; sign is that of 11th value
.2bef	95 34		sta $34,x			sta 	NSStatus,x
.2bf1	20 e5 2d	jsr $2de5			jsr 	FloatNegateMantissa 		; negate the mantissa and exit
.2bf4					_AddExit:
.2bf4	20 3e 2e	jsr $2e3e			jsr 	FloatIsZero 				; check for -0
.2bf7	d0 02		bne $2bfb			bne 	_AddNonZero
.2bf9	74 34		stz $34,x			stz 	NSStatus,x
.2bfb					_AddNonZero:
.2bfb	60		rts				rts
=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.2bfc					FloatEncodeStart:
.2bfc	38		sec				sec
.2bfd	80 01		bra $2c00			bra 	FloatEncodeContinue+1
.2bff					FloatEncodeContinue:
.2bff	18		clc				clc
.2c00					FloatEncode:
.2c00	08		php				php 								; save reset flag.
.2c01	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.2c03	f0 15		beq $2c1a			beq 	_ENIsOkay
.2c05	c9 30		cmp #$30			cmp 	#"0"
.2c07	90 04		bcc $2c0d			bcc 	_ENBadNumber
.2c09	c9 3a		cmp #$3a			cmp 	#"9"+1
.2c0b	90 0d		bcc $2c1a			bcc 	_ENIsOkay
.2c0d					_ENBadNumber:
.2c0d	28		plp				plp 								; throw saved reset
.2c0e	ad 8f 05	lda $058f			lda 	encodeState 				; if in decimal mode, construct final number
.2c11	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.2c13	d0 03		bne $2c18			bne 	_ENFail
.2c15	4c 92 2c	jmp $2c92			jmp 	_ENConstructFinal
.2c18					_ENFail:
.2c18	18		clc				clc 								; not allowed
.2c19	60		rts				rts
.2c1a					_ENIsOkay:
.2c1a	28		plp				plp 								; are we restarting
.2c1b	90 15		bcc $2c32			bcc 	_ENNoRestart
.2c1d					_ENStartEncode:
.2c1d	c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.2c1f	f0 0c		beq $2c2d			beq 	_ENFirstDP
.2c21	29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.2c23	20 1e 2e	jsr $2e1e			jsr 	FloatSetByte 				; in single byte mode.
.2c26	a9 01		lda #$01			lda 	#ESTA_Low
.2c28					_ENExitChange:
.2c28	8d 8f 05	sta $058f			sta 	encodeState 				; save new state
.2c2b	38		sec				sec
.2c2c	60		rts				rts
.2c2d					_ENFirstDP:
.2c2d	20 1c 2e	jsr $2e1c			jsr 	FloatSetZero 				; clear integer part
.2c30	80 3c		bra $2c6e			bra 	_ESTASwitchFloat			; go straight to float and exi
.2c32					_ENNoRestart:
.2c32	48		pha				pha 								; save digit or DP on stack.
.2c33	ad 8f 05	lda $058f			lda 	encodeState 				; get current state
.2c36	c9 01		cmp #$01			cmp 	#ESTA_Low
.2c38	f0 09		beq $2c43			beq  	_ESTALowState
.2c3a	c9 02		cmp #$02			cmp 	#ESTA_High
.2c3c	f0 26		beq $2c64			beq 	_ESTAHighState
.2c3e	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.2c40	f0 38		beq $2c7a			beq 	_ESTADecimalState
>2c42	db						.byte 	$DB 						; causes a break in the emulator
.2c43					_ESTALowState:
.2c43	68		pla				pla 								; get value back
.2c44	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.2c46	f0 26		beq $2c6e			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.2c48	29 0f		and #$0f			and 	#15 						; make digit
.2c4a	8d 90 05	sta $0590			sta 	digitTemp 					; save it.
.2c4d	b5 40		lda $40,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.2c4f	0a		asl a				asl 	a
.2c50	0a		asl a				asl 	a
.2c51	75 40		adc $40,x			adc 	NSMantissa0,x
.2c53	0a		asl a				asl 	a
.2c54	6d 90 05	adc $0590			adc 	digitTemp
.2c57	95 40		sta $40,x			sta 	NSMantissa0,x
.2c59	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.2c5b	90 05		bcc $2c62			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.2c5d	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.2c5f	8d 8f 05	sta $058f			sta 	encodeState
.2c62					_ESTANoSwitch:
.2c62	38		sec				sec
.2c63	60		rts				rts
.2c64					_ESTAHighState:
.2c64	68		pla				pla 								; get value back
.2c65	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.2c67	f0 05		beq $2c6e			beq 	_ESTASwitchFloat
.2c69	20 c4 2c	jsr $2cc4			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.2c6c	38		sec				sec
.2c6d	60		rts				rts
.2c6e					_ESTASwitchFloat:
.2c6e	9c 91 05	stz $0591			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.2c71	e8		inx				inx 								; zero the decimal additive.
.2c72	20 1c 2e	jsr $2e1c			jsr 	FloatSetZero
.2c75	ca		dex				dex
.2c76	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.2c78	80 ae		bra $2c28			bra 	_ENExitChange
.2c7a					_ESTADecimalState:
.2c7a	68		pla				pla 								; digit.
.2c7b	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 11th decimal point.
.2c7d	f0 99		beq $2c18			beq 	_ENFail
.2c7f	e8		inx				inx 								; put digit into fractional part of X+1
.2c80	20 c4 2c	jsr $2cc4			jsr 	ESTAShiftDigitIntoMantissa
.2c83	ca		dex				dex
.2c84	ee 91 05	inc $0591			inc 	decimalCount 				; bump the count of decimals
.2c87	ad 91 05	lda $0591			lda 	decimalCount 				; too many decimal digits.
.2c8a	c9 0b		cmp #$0b			cmp 	#11
.2c8c	f0 02		beq $2c90			beq 	_ESTADSFail
.2c8e	38		sec				sec
.2c8f	60		rts				rts
.2c90					_ESTADSFail:
.2c90	18		clc				clc
.2c91	60		rts				rts
.2c92					_ENConstructFinal:
.2c92	ad 91 05	lda $0591			lda 	decimalCount 				; get decimal count
.2c95	f0 2b		beq $2cc2			beq 	_ENCFExit 					; no decimals
.2c97	5a		phy				phy
.2c98	0a		asl a				asl 	a 							; x 4 and CLC
.2c99	0a		asl a				asl 	a
.2c9a	6d 91 05	adc $0591			adc 	decimalCount
.2c9d	a8		tay				tay
.2c9e	b9 29 29	lda $2929,y			lda 	FloatScalarTable-5,y 		; copy decimal scalar to X+2
.2ca1	95 42		sta $42,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.2ca3	b9 2a 29	lda $292a,y			lda 	FloatScalarTable-5+1,y
.2ca6	95 4e		sta $4e,x			sta 	NSMantissa1+2,x
.2ca8	b9 2b 29	lda $292b,y			lda 	FloatScalarTable-5+2,y
.2cab	95 5a		sta $5a,x			sta 	NSMantissa2+2,x
.2cad	b9 2c 29	lda $292c,y			lda 	FloatScalarTable-5+3,y
.2cb0	95 66		sta $66,x			sta 	NSMantissa3+2,x
.2cb2	b9 2d 29	lda $292d,y			lda 	FloatScalarTable-5+4,y
.2cb5	95 72		sta $72,x			sta 	NSExponent+2,x
.2cb7	74 36		stz $36,x			stz 	NSStatus+2,x 				; make +ve
.2cb9	e8		inx				inx 								; multiply decimal const by decimal scalar
.2cba	e8		inx				inx
.2cbb	20 dc 2a	jsr $2adc			jsr 	FloatMultiply
.2cbe	20 40 28	jsr $2840			jsr 	FloatAdd 					; add to integer part.
.2cc1	7a		ply				ply
.2cc2					_ENCFExit:
.2cc2	18		clc				clc 								; reject the digit.
.2cc3	60		rts				rts
.2cc4					ESTAShiftDigitIntoMantissa:
.2cc4	29 0f		and #$0f			and 	#15 						; save digit
.2cc6	48		pha				pha
.2cc7	b5 64		lda $64,x			lda 	NSMantissa3,x 				; push mantissa on stack
.2cc9	48		pha				pha
.2cca	b5 58		lda $58,x			lda 	NSMantissa2,x
.2ccc	48		pha				pha
.2ccd	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.2ccf	48		pha				pha
.2cd0	b5 40		lda $40,x			lda 	NSMantissa0,x
.2cd2	48		pha				pha
.2cd3	20 2b 2e	jsr $2e2b			jsr 	FloatShiftLeft 				; x 2
.2cd6	20 2b 2e	jsr $2e2b			jsr 	FloatShiftLeft 				; x 4
.2cd9	18		clc				clc 								; pop mantissa and add
.2cda	68		pla				pla
.2cdb	75 40		adc $40,x			adc 	NSMantissa0,x
.2cdd	95 40		sta $40,x			sta 	NSMantissa0,x
.2cdf	68		pla				pla
.2ce0	75 4c		adc $4c,x			adc 	NSMantissa1,x
.2ce2	95 4c		sta $4c,x			sta 	NSMantissa1,x
.2ce4	68		pla				pla
.2ce5	75 58		adc $58,x			adc 	NSMantissa2,x
.2ce7	95 58		sta $58,x			sta 	NSMantissa2,x
.2ce9	68		pla				pla
.2cea	75 64		adc $64,x			adc 	NSMantissa3,x
.2cec	95 64		sta $64,x			sta 	NSMantissa3,x 				; x 5
.2cee	20 2b 2e	jsr $2e2b			jsr 	FloatShiftLeft 				; x 10
.2cf1	68		pla				pla 								; add digit
.2cf2	18		clc				clc
.2cf3	75 40		adc $40,x			adc 	NSMantissa0,x
.2cf5	95 40		sta $40,x			sta 	NSMantissa0,x
.2cf7	90 0a		bcc $2d03			bcc 	_ESTASDExit
.2cf9	f6 4c		inc $4c,x			inc 	NSMantissa1,x
.2cfb	d0 06		bne $2d03			bne 	_ESTASDExit
.2cfd	f6 58		inc $58,x			inc 	NSMantissa2,x
.2cff	d0 02		bne $2d03			bne 	_ESTASDExit
.2d01	f6 64		inc $64,x			inc 	NSMantissa3,x
.2d03					_ESTASDExit:
.2d03	60		rts				rts
.058f					encodeState:
>058f							.fill 	1
.0590					digitTemp:
>0590							.fill 	1
.0591					decimalCount:
>0591							.fill 	1
.2d04					FloatToString:
.2d04	da		phx				phx
.2d05	5a		phy				phy 								; save code position
.2d06	8d 92 05	sta $0592			sta 	decimalPlaces	 			; save number of DPs.
.2d09	9c 93 05	stz $0593			stz 	dbOffset 					; offset into decimal buffer = start.
.2d0c	b5 34		lda $34,x			lda 	NSStatus,x  				; is it -ve.
.2d0e	10 08		bpl $2d18			bpl 	_CNTSNotNegative
.2d10	29 7f		and #$7f			and 	#$7F 						; make +ve
.2d12	95 34		sta $34,x			sta 	NSStatus,x
.2d14	a9 2d		lda #$2d			lda 	#"-"
.2d16	80 02		bra $2d1a			bra 	_CNTMain
.2d18					_CNTSNotNegative:
.2d18	a9 20		lda #$20			lda 	#" "
.2d1a					_CNTMain:
.2d1a	20 7c 2d	jsr $2d7c			jsr 	WriteDecimalBuffer
.2d1d	b5 70		lda $70,x			lda 	NSExponent,x 				; check if decimal
.2d1f	f0 0d		beq $2d2e			beq 	_CNTSNotFloat
.2d21	e8		inx				inx 								; round up so we don't get too many 6.999999
.2d22	a9 01		lda #$01			lda 	#1
.2d24	20 1e 2e	jsr $2e1e			jsr 	FloatSetByte
.2d27	b5 6f		lda $6f,x			lda		NSExponent-1,x
.2d29	95 70		sta $70,x			sta 	NSExponent,x
.2d2b	20 40 28	jsr $2840			jsr 	FloatAdd
.2d2e					_CNTSNotFloat:
.2d2e	20 5e 2d	jsr $2d5e			jsr 	MakePlusTwoString 			; do the integer part.
.2d31	20 fc 29	jsr $29fc			jsr 	FloatFractionalPart 		; get the fractional part
.2d34	20 71 2b	jsr $2b71			jsr 	FloatNormalise					; normalise , exit if zero
.2d37	f0 22		beq $2d5b			beq 	_CNTSExit
.2d39	a9 2e		lda #$2e			lda 	#"."
.2d3b	20 7c 2d	jsr $2d7c			jsr 	WriteDecimalBuffer 			; write decimal place
.2d3e					_CNTSDecimal:
.2d3e	ce 92 05	dec $0592			dec 	decimalPlaces 				; done all the decimals
.2d41	30 18		bmi $2d5b			bmi 	_CNTSExit
.2d43	e8		inx				inx 								; x 10.0
.2d44	a9 0a		lda #$0a			lda 	#10
.2d46	20 1e 2e	jsr $2e1e			jsr 	FloatSetByte
.2d49	20 dc 2a	jsr $2adc			jsr 	FloatMultiply
.2d4c	20 5e 2d	jsr $2d5e			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.2d4f	20 fc 29	jsr $29fc			jsr 	FloatFractionalPart 		; get the fractional part
.2d52	20 71 2b	jsr $2b71			jsr 	FloatNormalise 				; normalise it.
.2d55	b5 70		lda $70,x			lda 	NSExponent,x 				; gone to zero, exit.
.2d57	c9 d0		cmp #$d0			cmp 	#$D0 						; very small remainder, so don't bother.
.2d59	b0 e3		bcs $2d3e			bcs 	_CNTSDecimal 				; keep going.
.2d5b					_CNTSExit:
.2d5b	7a		ply				ply
.2d5c	fa		plx				plx
.2d5d	60		rts				rts
.2d5e					MakePlusTwoString:
.2d5e	da		phx				phx
.2d5f	20 ff 2d	jsr $2dff			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.2d62	e8		inx				inx 								; access it
.2d63	e8		inx				inx
.2d64	20 57 2a	jsr $2a57			jsr 	FloatIntegerPart 			; make it an integer
.2d67	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.2d69	20 9b 2d	jsr $2d9b			jsr 	ConvertInt32
.2d6c	a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.2d6e					_MPTSCopy:
.2d6e	bd 6d 05	lda $056d,x			lda 	numberBuffer,x
.2d71	20 7c 2d	jsr $2d7c			jsr 	WriteDecimalBuffer
.2d74	e8		inx				inx
.2d75	bd 6d 05	lda $056d,x			lda 	numberBuffer,x
.2d78	d0 f4		bne $2d6e			bne 	_MPTSCopy
.2d7a	fa		plx				plx
.2d7b	60		rts				rts
.2d7c					WriteDecimalBuffer:
.2d7c	da		phx				phx
.2d7d	ae 93 05	ldx $0593			ldx 	dbOffset
.2d80	9d 94 05	sta $0594,x			sta 	decimalBuffer,x
.2d83	9e 95 05	stz $0595,x			stz 	decimalBuffer+1,x
.2d86	ee 93 05	inc $0593			inc 	dbOffset
.2d89	fa		plx				plx
.2d8a	60		rts				rts
.0592					decimalPlaces:
>0592							.fill 	1
.0593					dbOffset:
>0593							.fill 	1
.0594					decimalBuffer:
>0594							.fill 	32
.2d8b					ConvertInt16:
.2d8b	85 40		sta $40				sta 	NSMantissa0 				; set up as 32 bit conversion
.2d8d	86 4c		stx $4c				stx 	NSMantissa1
.2d8f	64 58		stz $58				stz 	NSMantissa2
.2d91	64 64		stz $64				stz 	NSMantissa3
.2d93	64 34		stz $34				stz 	NSStatus 					; positive integer
.2d95	a2 00		ldx #$00			ldx 	#0 							; stack level
.2d97	a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.2d99	80 00		bra $2d9b			bra 	ConvertInt32
.2d9b					ConvertInt32:
.2d9b	5a		phy				phy
.2d9c	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.2d9e	24 34		bit $34				bit 	NSStatus 					; output a - if not negative.
.2da0	10 08		bpl $2daa			bpl 	_CI32NotNeg
.2da2	48		pha				pha
.2da3	a9 2d		lda #$2d			lda 	#'-'
.2da5	99 6d 05	sta $056d,y			sta 	numberBuffer,y
.2da8	c8		iny				iny
.2da9	68		pla				pla
.2daa					_CI32NotNeg:
.2daa	20 b8 2d	jsr $2db8			jsr 	_CI32DivideConvert 			; recursive conversion
.2dad	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.2daf	99 6d 05	sta $056d,y			sta 	numberBuffer,y
.2db2	7a		ply				ply
.2db3	a2 05		ldx #$05			ldx 	#numberBuffer >> 8 			; return address in XA
.2db5	a9 6d		lda #$6d			lda 	#numberBuffer & $FF
.2db7	60		rts				rts
.2db8					_CI32DivideConvert:
.2db8	e8		inx				inx 								; write to next slot up
.2db9	20 1e 2e	jsr $2e1e			jsr 	FloatSetByte 		 		; write the base out.
.2dbc	ca		dex				dex
.2dbd	20 b2 29	jsr $29b2			jsr 	Int32Divide 				; divide
.2dc0	b5 40		lda $40,x			lda 	NSMantissa0,x 				; save remainder
.2dc2	48		pha				pha
.2dc3	20 a1 29	jsr $29a1			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.2dc6	20 3e 2e	jsr $2e3e			jsr 	FloatIsZero 				; is it zero ?
.2dc9	f0 05		beq $2dd0			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.2dcb	b5 41		lda $41,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.2dcd	20 b8 2d	jsr $2db8			jsr 	_CI32DivideConvert 			; and recusrively call.
.2dd0					_CI32NoRecurse:
.2dd0	68		pla				pla 								; remainder
.2dd1	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.2dd3	90 02		bcc $2dd7			bcc 	_CI32NotHex
.2dd5	69 26		adc #$26			adc 	#6+32
.2dd7					_CI32NotHex:
.2dd7	69 30		adc #$30			adc 	#48
.2dd9	99 6d 05	sta $056d,y			sta 	numberBuffer,y 				; write out and exit
.2ddc	c8		iny				iny
.2ddd	60		rts				rts
.2dde					FloatNegate:
.2dde	b5 34		lda $34,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.2de0	49 80		eor #$80			eor 	#$80  						; toggle the negative flag
.2de2	95 34		sta $34,x			sta 	NSStatus,x
.2de4	60		rts				rts
.2de5					FloatNegateMantissa:
.2de5	38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.2de6	a9 00		lda #$00			lda 	#0
.2de8	f5 40		sbc $40,x			sbc 	NSMantissa0,x
.2dea	95 40		sta $40,x			sta 	NSMantissa0,x
.2dec	a9 00		lda #$00			lda 	#0
.2dee	f5 4c		sbc $4c,x			sbc 	NSMantissa1,x
.2df0	95 4c		sta $4c,x			sta 	NSMantissa1,x
.2df2	a9 00		lda #$00			lda 	#0
.2df4	f5 58		sbc $58,x			sbc 	NSMantissa2,x
.2df6	95 58		sta $58,x			sta 	NSMantissa2,x
.2df8	a9 00		lda #$00			lda 	#0
.2dfa	f5 64		sbc $64,x			sbc 	NSMantissa3,x
.2dfc	95 64		sta $64,x			sta 	NSMantissa3,x
.2dfe	60		rts				rts
.2dff					FloatShiftUpTwo:
.2dff	b5 40		lda $40,x			lda 	NSMantissa0,x
.2e01	95 42		sta $42,x			sta 	NSMantissa0+2,x
.2e03	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.2e05	95 4e		sta $4e,x			sta 	NSMantissa1+2,x
.2e07	b5 58		lda $58,x			lda 	NSMantissa2,x
.2e09	95 5a		sta $5a,x			sta 	NSMantissa2+2,x
.2e0b	b5 64		lda $64,x			lda 	NSMantissa3,x
.2e0d	95 66		sta $66,x			sta 	NSMantissa3+2,x
.2e0f	b5 70		lda $70,x			lda 	NSExponent,x
.2e11	95 72		sta $72,x			sta 	NSExponent+2,x
.2e13	b5 34		lda $34,x			lda 	NSStatus,x
.2e15	95 36		sta $36,x			sta 	NSStatus+2,x
.2e17	60		rts				rts
.2e18					FloatSetZeroMantissaOnly:
.2e18	74 40		stz $40,x			stz 	NSMantissa0,x
.2e1a	80 08		bra $2e24			bra 	FloatZero13
.2e1c					FloatSetZero:
.2e1c	a9 00		lda #$00			lda 	#0
.2e1e					FloatSetByte:
.2e1e	74 70		stz $70,x			stz 	NSExponent,x 				; zero exponent, as +ve integer value.
.2e20					FloatSetMantissa:
.2e20	95 40		sta $40,x			sta 	NSMantissa0,x 				; zero mantissa
.2e22	74 34		stz $34,x			stz 	NSStatus,x
.2e24					FloatZero13:
.2e24	74 4c		stz $4c,x			stz 	NSMantissa1,x
.2e26	74 58		stz $58,x			stz 	NSMantissa2,x
.2e28	74 64		stz $64,x			stz 	NSMantissa3,x
.2e2a	60		rts				rts
.2e2b					FloatShiftLeft:
.2e2b	18		clc				clc
.2e2c					FloatRotateLeft:
.2e2c	36 40		rol $40,x			rol 	NSMantissa0,x
.2e2e	36 4c		rol $4c,x			rol		NSMantissa1,x
.2e30	36 58		rol $58,x			rol		NSMantissa2,x
.2e32	36 64		rol $64,x			rol		NSMantissa3,x
.2e34	60		rts				rts
.2e35					FloatShiftRight:
.2e35	56 64		lsr $64,x			lsr 	NSMantissa3,x
.2e37	76 58		ror $58,x			ror		NSMantissa2,x
.2e39	76 4c		ror $4c,x			ror		NSMantissa1,x
.2e3b	76 40		ror $40,x			ror		NSMantissa0,x
.2e3d	60		rts				rts
.2e3e					FloatIsZero:
.2e3e	b5 64		lda $64,x			lda 	NSMantissa3,x
.2e40	15 58		ora $58,x			ora		NSMantissa2,x
.2e42	15 4c		ora $4c,x			ora		NSMantissa1,x
.2e44	15 40		ora $40,x			ora		NSMantissa0,x
.2e46	60		rts				rts

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/polynomials.library

.2e47					FloatArcTan:
.2e47	20 71 2b	jsr $2b71			jsr 	FloatNormalise 					; normalise x
.2e4a	b5 34		lda $34,x			lda 	NSStatus,x 						; save sign, make absolute
.2e4c	48		pha				pha
.2e4d	74 34		stz $34,x			stz 	NSStatus,x
.2e4f	b5 70		lda $70,x			lda 	NSExponent,x 					; $40000000 ^ $E2 is 1.0
.2e51	c9 e2		cmp #$e2			cmp 	#$E2
.2e53	90 25		bcc $2e7a			bcc 	_UANoFixup
.2e55	8a		txa				txa 									; value in +1
.2e56	a8		tay				tay
.2e57	c8		iny				iny
.2e58	20 00 30	jsr $3000			jsr 	CopyFloatXY
.2e5b	a9 01		lda #$01			lda 	#1 								; 1.0 in +0
.2e5d	20 1e 2e	jsr $2e1e			jsr 	FloatSetByte
.2e60	e8		inx				inx
.2e61	20 65 29	jsr $2965			jsr 	FloatDivide
.2e64	b0 21		bcs $2e87			bcs 	_FATError
.2e66	20 8a 2e	jsr $2e8a			jsr 	CoreAtn 						; calculate the root
.2e69	20 f5 2f	jsr $2ff5			jsr 	CompletePolynomial
.2e6c	20 de 2d	jsr $2dde			jsr 	FloatNegate 					; make -ve
.2e6f	a9 05		lda #$05			lda 	#Const_PiDiv2-Const_Base
.2e71	20 4c 30	jsr $304c			jsr 	LoadConstant
.2e74	e8		inx				inx
.2e75	20 40 28	jsr $2840			jsr 	FloatAdd
.2e78	80 06		bra $2e80			bra 	_UAComplete
.2e7a					_UANoFixup:
.2e7a	20 8a 2e	jsr $2e8a			jsr 	CoreAtn
.2e7d	20 f5 2f	jsr $2ff5			jsr 	CompletePolynomial
.2e80					_UAComplete:
.2e80	68		pla				pla 									; apply the result.
.2e81	55 34		eor $34,x			eor 	NSStatus,x
.2e83	95 34		sta $34,x			sta 	NSStatus,x
.2e85	18		clc				clc
.2e86	60		rts				rts
.2e87					_FATError:
.2e87	68		pla				pla
.2e88	38		sec				sec
.2e89	60		rts				rts
.2e8a					CoreAtn:
.2e8a	a9 f8		lda #$f8			lda 	#AtnCoefficients & $FF
.2e8c	a0 2e		ldy #$2e			ldy 	#AtnCoefficients >> 8
.2e8e	4c 49 31	jmp $3149			jmp 	CorePolySquared
.2e91					ExpCoefficients:
>2e91	07					.byte	7
>2e92	2b 1f 2c 5a				.dword	$5a2c1f2b ; 2.1498763701e-05
>2e96	d2					.byte	$d2
>2e97	8e 59 3f 4b				.dword	$4b3f598e ; 0.00014352314037
>2e9b	d5					.byte	$d5
>2e9c	c3 71 f7 57				.dword	$57f771c3 ; 0.0013422634825
>2ea0	d8					.byte	$d8
>2ea1	15 0e c2 4e				.dword	$4ec20e15 ; 0.0096140170135
>2ea5	db					.byte	$db
>2ea6	05 ac ac 71				.dword	$71acac05 ; 0.05550512686
>2eaa	dd					.byte	$dd
>2eab	e3 f3 fe 7a				.dword	$7afef3e3 ; 0.2402263846
>2eaf	df					.byte	$df
>2eb0	08 0c b9 58				.dword	$58b90c08 ; 0.69314718618
>2eb4	e1					.byte	$e1
>2eb5	00 00 00 40				.dword	$40000000 ; 1.0
>2eb9	e2					.byte	$e2
.2eba					SinCoefficients:
>2eba	06					.byte	6
>2ebb	8d 16 0d f3				.dword	$f30d168d ; -14.381390672
>2ebf	e5					.byte	$e5
>2ec0	fc fd 03 54				.dword	$5403fdfc ; 42.007797122
>2ec4	e7					.byte	$e7
>2ec5	81 44 b4 cc				.dword	$ccb44481 ; -76.704170257
>2ec9	e8					.byte	$e8
>2eca	f1 ef 9a 51				.dword	$519aeff1 ; 81.605223686
>2ece	e8					.byte	$e8
>2ecf	94 f3 ae d2				.dword	$d2aef394 ; -41.341702104
>2ed3	e7					.byte	$e7
>2ed4	51 ed 87 64				.dword	$6487ed51 ; 6.2831853069
>2ed8	e4					.byte	$e4
>2ed9	00 00 00 00				.dword	$00000000 ; 0.0
>2edd	00					.byte	$00
.2ede					LogCoefficients:
>2ede	04					.byte	4
>2edf	bd 65 2b 6f				.dword	$6f2b65bd ; 0.43425594189
>2ee3	e0					.byte	$e0
>2ee4	b2 85 cd 49				.dword	$49cd85b2 ; 0.57658454124
>2ee8	e1					.byte	$e1
>2ee9	8b 49 1c 7b				.dword	$7b1c498b ; 0.96180075919
>2eed	e1					.byte	$e1
>2eee	90 1d 55 5c				.dword	$5c551d90 ; 2.8853900731
>2ef2	e3					.byte	$e3
>2ef3	00 00 00 c0				.dword	$c0000000 ; -0.5
>2ef7	e1					.byte	$e1
.2ef8					AtnCoefficients:
>2ef8	0c					.byte	12
>2ef9	ea de c1 d9				.dword	$d9c1deea ; -0.00068479391189
>2efd	d7					.byte	$d7
>2efe	7a 53 7a 4f				.dword	$4f7a537a ; 0.0048509421558
>2f02	da					.byte	$da
>2f03	08 58 fe c1				.dword	$c1fe5808 ; -0.016111701843
>2f07	dc					.byte	$dc
>2f08	e5 b3 0f 46				.dword	$460fb3e5 ; 0.034209638048
>2f0c	dd					.byte	$dd
>2f0d	e1 e5 29 ef				.dword	$ef29e5e1 ; -0.054279132761
>2f11	dd					.byte	$dd
>2f12	26 38 32 4a				.dword	$4a323826 ; 0.07245719654
>2f16	de					.byte	$de
>2f17	bd 28 f5 db				.dword	$dbf528bd ; -0.089802395378
>2f1b	de					.byte	$de
>2f1c	3f 44 98 71				.dword	$7198443f ; 0.11093241343
>2f20	de					.byte	$de
>2f21	9d 4c 22 c9				.dword	$c9224c9d ; -0.14283980767
>2f25	df					.byte	$df
>2f26	e3 48 66 66				.dword	$666648e3 ; 0.19999912049
>2f2a	df					.byte	$df
>2f2b	0a 55 55 d5				.dword	$d555550a ; -0.33333331568
>2f2f	e0					.byte	$e0
>2f30	00 00 00 40				.dword	$40000000 ; 1.0
>2f34	e2					.byte	$e2
>2f35	00 00 00 00				.dword	$00000000 ; 0.0
>2f39	00					.byte	$00
.2f3a					Const_Base:
.2f3a					Const_1Div2Pi:
>2f3a	b7 c1 7c 51				.dword	$517cc1b7 ; 0.15915494
>2f3e	df					.byte	$df
.2f3f					Const_PiDiv2:
>2f3f	51 ed 87 64				.dword	$6487ed51 ; 1.57079633
>2f43	e2					.byte	$e2
.2f44					Const_Log2_e:
>2f44	95 1d 55 5c				.dword	$5c551d95 ; 1.44269504
>2f48	e2					.byte	$e2
.2f49					Const_sqrt_2:
>2f49	9a 79 82 5a				.dword	$5a82799a ; 1.41421356
>2f4d	e2					.byte	$e2
.2f4e					Const_sqrt_half:
>2f4e	9a 79 82 5a				.dword	$5a82799a ; 0.70710678
>2f52	e1					.byte	$e1
.2f53					Const_pi:
>2f53	51 ed 87 64				.dword	$6487ed51 ; 3.14159265
>2f57	e3					.byte	$e3
.2f58					Const_half:
>2f58	00 00 00 40				.dword	$40000000 ; 0.50000000
>2f5c	e1					.byte	$e1
.2f5d					Const_ln_e:
>2f5d	fc 0b b9 58				.dword	$58b90bfc ; 0.69314718
>2f61	e1					.byte	$e1
.2f62					FloatCosine:
.2f62	a9 05		lda #$05			lda 	#Const_PiDiv2-Const_Base
.2f64	20 4c 30	jsr $304c			jsr 	LoadConstant
.2f67	e8		inx				inx
.2f68	20 40 28	jsr $2840			jsr 	FloatAdd
.2f6b	4c 02 31	jmp $3102			jmp 	FloatSine
.2f6e					FloatExponent:
.2f6e	a9 0a		lda #$0a			lda 	#Const_Log2_e-Const_Base
.2f70	20 4c 30	jsr $304c			jsr 	LoadConstant
.2f73	e8		inx				inx
.2f74	20 dc 2a	jsr $2adc			jsr 	FloatMultiply
.2f77	20 b9 2f	jsr $2fb9			jsr 	_UECopy01 				; copy 0 to 1, get integer part to 1
.2f7a	e8		inx				inx
.2f7b	20 57 2a	jsr $2a57			jsr 	FloatIntegerPart
.2f7e	ca		dex				dex
.2f7f	b5 4d		lda $4d,x			lda 	NSMantissa1+1,x
.2f81	15 59		ora $59,x			ora 	NSMantissa2+1,x
.2f83	15 65		ora $65,x			ora 	NSMantissa3+1,x
.2f85	d0 38		bne $2fbf			bne 	_UERangeError
.2f87	b5 41		lda $41,x			lda 	NSMantissa0+1,x 		; push integer part on stack.
.2f89	c9 40		cmp #$40			cmp 	#64
.2f8b	b0 32		bcs $2fbf			bcs 	_UERangeError
.2f8d	48		pha				pha
.2f8e	b5 34		lda $34,x			lda 	NSStatus,x 				; push sign
.2f90	48		pha				pha
.2f91	20 fc 29	jsr $29fc			jsr 	FloatFractionalPart		; copy 0 to 1, get fractional part to 0
.2f94	68		pla				pla
.2f95	10 14		bpl $2fab			bpl 	_UEPositive
.2f97	e8		inx				inx 							; 1-x
.2f98	a9 01		lda #$01			lda 	#1
.2f9a	20 1e 2e	jsr $2e1e			jsr 	FloatSetByte
.2f9d	ca		dex				dex
.2f9e	20 de 2d	jsr $2dde			jsr 	FloatNegate
.2fa1	e8		inx				inx
.2fa2	20 40 28	jsr $2840			jsr 	FloatAdd
.2fa5	68		pla				pla 							; integer part +1 and negated.
.2fa6	1a		inc a				inc 	a
.2fa7	49 ff		eor #$ff			eor 	#$FF
.2fa9	1a		inc a				inc 	a
.2faa	48		pha				pha
.2fab					_UEPositive:
.2fab	20 c1 2f	jsr $2fc1			jsr 	CoreExponent
.2fae	20 f5 2f	jsr $2ff5			jsr 	CompletePolynomial
.2fb1	68		pla				pla
.2fb2	18		clc				clc
.2fb3	75 70		adc $70,x			adc 	NSExponent,x
.2fb5	95 70		sta $70,x			sta 	NSExponent,x
.2fb7	18		clc				clc
.2fb8	60		rts				rts
.2fb9					_UECopy01:
.2fb9	8a		txa				txa
.2fba	a8		tay				tay
.2fbb	c8		iny				iny
.2fbc	4c 00 30	jmp $3000			jmp 	CopyFloatXY
.2fbf					_UERangeError:
.2fbf	38		sec				sec
.2fc0	60		rts				rts
.2fc1					CoreExponent:
.2fc1	a9 91		lda #$91			lda 	#ExpCoefficients & $FF
.2fc3	a0 2e		ldy #$2e			ldy 	#ExpCoefficients >> 8
.2fc5	20 c9 2f	jsr $2fc9			jsr 	CalculateHornerPolynomial
.2fc8	60		rts				rts
.2fc9					CalculateHornerPolynomial:
.2fc9	85 28		sta $28				sta 	zTemp0 						; save poly data from YA
.2fcb	84 29		sty $29				sty 	zTemp0+1
.2fcd	9c b4 05	stz $05b4			stz 	coefficientCount 			; zero the count.
.2fd0	8e b5 05	stx $05b5			stx 	xValueSlot 					; save xValue slot.
.2fd3	e8		inx				inx 								; set the count to zero.
.2fd4	20 1c 2e	jsr $2e1c			jsr 	FloatSetZero
.2fd7					_CHPLoop:
.2fd7	8a		txa				txa 								; copy X-1 to X+1
.2fd8	a8		tay				tay
.2fd9	ca		dex				dex
.2fda	c8		iny				iny
.2fdb	20 00 30	jsr $3000			jsr 	CopyFloatXY 				; e.g. stack is <current> <x>
.2fde	e8		inx				inx
.2fdf	e8		inx				inx
.2fe0	20 dc 2a	jsr $2adc			jsr 	FloatMultiply 				; times current by X
.2fe3	e8		inx				inx
.2fe4	20 1f 30	jsr $301f			jsr 	GetCoefficient 				; coefficient into X+1
.2fe7	20 40 28	jsr $2840			jsr 	FloatAdd 					; and add
.2fea	ee b4 05	inc $05b4			inc 	coefficientCount
.2fed	ad b4 05	lda $05b4			lda 	coefficientCount
.2ff0	d2 28		cmp ($28)			cmp 	(zTemp0)
.2ff2	d0 e3		bne $2fd7			bne 	_CHPLoop
.2ff4	60		rts				rts
.2ff5					CompletePolynomial:
.2ff5	20 dc 2a	jsr $2adc			jsr 	FloatMultiply
.2ff8	e8		inx				inx 								; get the last value
.2ff9	20 1f 30	jsr $301f			jsr 	GetCoefficient
.2ffc	20 40 28	jsr $2840			jsr 	FloatAdd 					; and add it
.2fff	60		rts				rts
.3000					CopyFloatXY:
.3000	b5 70		lda $70,x			lda 	NSExponent,x
.3002	99 70 00	sta $0070,y			sta 	NSExponent,y
.3005	b5 34		lda $34,x			lda 	NSStatus,x
.3007	99 34 00	sta $0034,y			sta 	NSStatus,y
.300a	b5 40		lda $40,x			lda 	NSMantissa0,x
.300c	99 40 00	sta $0040,y			sta 	NSMantissa0,y
.300f	b5 4c		lda $4c,x			lda 	NSMantissa1,x
.3011	99 4c 00	sta $004c,y			sta 	NSMantissa1,y
.3014	b5 58		lda $58,x			lda 	NSMantissa2,x
.3016	99 58 00	sta $0058,y			sta 	NSMantissa2,y
.3019	b5 64		lda $64,x			lda 	NSMantissa3,x
.301b	99 64 00	sta $0064,y			sta 	NSMantissa3,y
.301e	60		rts				rts
.301f					GetCoefficient:
.301f	5a		phy				phy
.3020	ad b4 05	lda $05b4			lda 	coefficientCount 			; 5 per block
.3023	0a		asl a				asl 	a
.3024	0a		asl a				asl 	a
.3025	38		sec				sec 								; +1 for count
.3026	6d b4 05	adc $05b4			adc 	coefficientCount
.3029	a8		tay				tay
.302a	b1 28		lda ($28),y			lda 	(zTemp0),y 					; copy mantissa
.302c	95 40		sta $40,x			sta 	NSMantissa0,x
.302e	c8		iny				iny
.302f	b1 28		lda ($28),y			lda 	(zTemp0),y
.3031	95 4c		sta $4c,x			sta 	NSMantissa1,x
.3033	c8		iny				iny
.3034	b1 28		lda ($28),y			lda 	(zTemp0),y
.3036	95 58		sta $58,x			sta 	NSMantissa2,x
.3038	c8		iny				iny
.3039	b1 28		lda ($28),y			lda 	(zTemp0),y
.303b	48		pha				pha
.303c	29 7f		and #$7f			and 	#$7F 						; clear sign bit.
.303e	95 64		sta $64,x			sta 	NSMantissa3,x
.3040	c8		iny				iny
.3041	68		pla				pla
.3042	29 80		and #$80			and 	#$80
.3044	95 34		sta $34,x			sta 	NSStatus,x 					; put in status
.3046	b1 28		lda ($28),y			lda 	(zTemp0),y
.3048	95 70		sta $70,x			sta 	NSExponent,x
.304a	7a		ply				ply
.304b	60		rts				rts
.05b4					coefficientCount:
>05b4							.fill 	1
.05b5					xValueSlot:
>05b5							.fill 	1
.304c					LoadConstant:
.304c	5a		phy				phy
.304d	a8		tay				tay
.304e	b9 3a 2f	lda $2f3a,y			lda 	Const_Base+0,y
.3051	95 41		sta $41,x			sta 	NSMantissa0+1,x
.3053	b9 3b 2f	lda $2f3b,y			lda 	Const_Base+1,y
.3056	95 4d		sta $4d,x			sta 	NSMantissa1+1,x
.3058	b9 3c 2f	lda $2f3c,y			lda 	Const_Base+2,y
.305b	95 59		sta $59,x			sta 	NSMantissa2+1,x
.305d	b9 3d 2f	lda $2f3d,y			lda 	Const_Base+3,y
.3060	48		pha				pha
.3061	29 7f		and #$7f			and 	#$7F
.3063	95 65		sta $65,x			sta 	NSMantissa3+1,x
.3065	68		pla				pla
.3066	29 80		and #$80			and 	#$80
.3068	95 35		sta $35,x			sta 	NSStatus+1,x
.306a	b9 3e 2f	lda $2f3e,y			lda 	Const_Base+4,y
.306d	95 71		sta $71,x			sta 	NSExponent+1,x
.306f	7a		ply				ply
.3070	60		rts				rts
.3071					FloatLogarithm:
.3071	b5 34		lda $34,x			lda 	NSStatus,x 					; check > 0
.3073	30 5f		bmi $30d4			bmi 	_ULRange
.3075	20 3e 2e	jsr $2e3e			jsr 	FloatIsZero
.3078	f0 5a		beq $30d4			beq 	_ULRange
.307a	20 71 2b	jsr $2b71			jsr 	FloatNormalise 				; put into FP mode.
.307d	b5 70		lda $70,x			lda 	NSExponent,x 				; get power
.307f	48		pha				pha
.3080	a9 e1		lda #$e1			lda 	#(-31) & $FF 				; force into range 0.5 -> 1
.3082	95 70		sta $70,x			sta 	NSExponent,x
.3084	a9 14		lda #$14			lda 	#Const_sqrt_half-Const_Base
.3086	20 4c 30	jsr $304c			jsr 	LoadConstant
.3089	e8		inx				inx
.308a	20 40 28	jsr $2840			jsr 	FloatAdd
.308d	8a		txa				txa 								; divide into sqrt 2.0
.308e	a8		tay				tay
.308f	c8		iny				iny
.3090	20 00 30	jsr $3000			jsr 	CopyFloatXY
.3093	ca		dex				dex
.3094	a9 0f		lda #$0f			lda 	#Const_sqrt_2-Const_Base
.3096	20 4c 30	jsr $304c			jsr 	LoadConstant
.3099	e8		inx				inx
.309a	e8		inx				inx
.309b	20 65 29	jsr $2965			jsr 	FloatDivide 				; if zero, error.
.309e	b0 33		bcs $30d3			bcs 	_ULRangePla
.30a0	20 de 2d	jsr $2dde			jsr 	FloatNegate 				; subtract from 1
.30a3	e8		inx				inx
.30a4	a9 01		lda #$01			lda 	#1
.30a6	20 1e 2e	jsr $2e1e			jsr 	FloatSetByte
.30a9	20 40 28	jsr $2840			jsr 	FloatAdd
.30ac	20 d6 30	jsr $30d6			jsr 	CoreLog
.30af	20 f5 2f	jsr $2ff5			jsr 	CompletePolynomial
.30b2	68		pla				pla 								; add exponent
.30b3	18		clc				clc
.30b4	69 1f		adc #$1f			adc 	#31 						; fix up
.30b6	48		pha				pha
.30b7	10 03		bpl $30bc			bpl 	_LogNotNeg
.30b9	49 ff		eor #$ff			eor 	#$FF
.30bb	1a		inc a				inc 	a
.30bc					_LogNotNeg:
.30bc	e8		inx				inx 								; set byte and sign.
.30bd	20 1e 2e	jsr $2e1e			jsr 	FloatSetByte
.30c0	68		pla				pla
.30c1	29 80		and #$80			and 	#$80
.30c3	95 34		sta $34,x			sta 	NSStatus,x
.30c5	20 40 28	jsr $2840			jsr 	FloatAdd
.30c8	a9 23		lda #$23			lda 	#Const_ln_e-Const_Base
.30ca	20 4c 30	jsr $304c			jsr 	LoadConstant
.30cd	e8		inx				inx
.30ce	20 dc 2a	jsr $2adc			jsr 	FloatMultiply
.30d1	18		clc				clc
.30d2	60		rts				rts
.30d3					_ULRangePla:
.30d3	68		pla				pla
.30d4					_ULRange:
.30d4	38		sec				sec
.30d5	60		rts				rts
.30d6					CoreLog:
.30d6	a9 de		lda #$de			lda 	#LogCoefficients & $FF
.30d8	a0 2e		ldy #$2e			ldy 	#LogCoefficients >> 8
.30da	4c 49 31	jmp $3149			jmp 	CorePolySquared
.30dd					FloatPI:
.30dd	a9 19		lda #$19			lda 	#Const_pi-Const_Base
.30df	20 4c 30	jsr $304c			jsr 	LoadConstant
.30e2	e8		inx				inx
.30e3	18		clc				clc
.30e4	60		rts				rts
.30e5					FloatPower:
.30e5	ca		dex				dex
.30e6	8a		txa				txa 							; copy 0 to 2, so we can process it
.30e7	a8		tay				tay
.30e8	c8		iny				iny
.30e9	c8		iny				iny
.30ea	20 00 30	jsr $3000			jsr 	CopyFloatXY
.30ed	e8		inx				inx 							; 2 = Log(0)
.30ee	e8		inx				inx
.30ef	20 71 30	jsr $3071			jsr 	FloatLogarithm
.30f2	b0 0d		bcs $3101			bcs 	_FPWExit
.30f4	20 dc 2a	jsr $2adc			jsr 	FloatMultiply			; Multiply by original 1, into 1.
.30f7	8a		txa				txa 							; copy to slot 0
.30f8	a8		tay				tay
.30f9	88		dey				dey
.30fa	20 00 30	jsr $3000			jsr 	CopyFloatXY
.30fd	ca		dex				dex  							; Exponent code.
.30fe	20 6e 2f	jsr $2f6e			jsr 	FloatExponent
.3101					_FPWExit:
.3101	60		rts				rts
.3102					FloatSine:
.3102	b5 34		lda $34,x			lda 	NSStatus,x 					; save sign
.3104	48		pha				pha
.3105	74 34		stz $34,x			stz 	NSStatus,x 					; make +ve
.3107	a9 00		lda #$00			lda 	#Const_1Div2Pi-Const_Base
.3109	20 4c 30	jsr $304c			jsr 	LoadConstant
.310c	e8		inx				inx
.310d	20 dc 2a	jsr $2adc			jsr 	FloatMultiply
.3110	20 fc 29	jsr $29fc			jsr 	FloatFractionalPart 		; take the fractional part
.3113	b5 70		lda $70,x			lda 	NSExponent,x 				; check exponent
.3115	c9 e0		cmp #$e0			cmp 	#$E0 						; < $E0 exponent : 0-0.25
.3117	90 1f		bcc $3138			bcc 	_USProcessExit
.3119	f0 06		beq $3121			beq 	_USSubtractFromHalf 		; = $E0 exponent : 0.25-0.5
.311b	b5 64		lda $64,x			lda 	NSMantissa3,x 				; if > 0.75 which is $60000000:$E1
.311d	c9 60		cmp #$60			cmp 	#$60
.311f	b0 0e		bcs $312f			bcs 	_USSubtractOne
.3121					_USSubtractFromHalf:
.3121	a9 1e		lda #$1e			lda 	#Const_half-Const_Base
.3123	20 4c 30	jsr $304c			jsr 	LoadConstant
.3126	e8		inx				inx
.3127	20 3a 28	jsr $283a			jsr 	FloatSubtract
.312a	20 de 2d	jsr $2dde			jsr 	FloatNegate 				; then negate it
.312d	80 09		bra $3138			bra 	_USProcessExit 				; and exit
.312f					_USSubtractOne:
.312f	e8		inx				inx
.3130	a9 01		lda #$01			lda 	#1
.3132	20 1e 2e	jsr $2e1e			jsr 	FloatSetByte
.3135	20 3a 28	jsr $283a			jsr 	FloatSubtract
.3138					_USProcessExit:
.3138	20 45 31	jsr $3145			jsr 	CoreSine
.313b	20 f5 2f	jsr $2ff5			jsr 	CompletePolynomial
.313e	68		pla				pla 								; restore sign and apply
.313f	55 34		eor $34,x			eor 	NSStatus,x
.3141	95 34		sta $34,x			sta 	NSStatus,x
.3143	18		clc				clc
.3144	60		rts				rts
.3145					CoreSine:
.3145	a9 ba		lda #$ba			lda 	#SinCoefficients & $FF
.3147	a0 2e		ldy #$2e			ldy 	#SinCoefficients >> 8
.3149					CorePolySquared:
.3149	48		pha				pha 								; save coefficient table
.314a	5a		phy				phy
.314b	8a		txa				txa 								; copy X to +1, +2
.314c	a8		tay				tay
.314d	c8		iny				iny
.314e	20 00 30	jsr $3000			jsr 	CopyFloatXY
.3151	c8		iny				iny
.3152	20 00 30	jsr $3000			jsr 	CopyFloatXY
.3155	e8		inx				inx 								; point to the pair and put x^2 on stack
.3156	e8		inx				inx
.3157	20 dc 2a	jsr $2adc			jsr 	FloatMultiply
.315a	7a		ply				ply 								; coefficient table back.
.315b	68		pla				pla
.315c	20 c9 2f	jsr $2fc9			jsr 	CalculateHornerPolynomial
.315f	8a		txa				txa 								; copy back to slot #1
.3160	a8		tay				tay
.3161	88		dey				dey
.3162	20 00 30	jsr $3000			jsr	 	CopyFloatXY
.3165	ca		dex				dex 								; point at result
.3166	60		rts				rts
.3167					FloatSquareRoot:
.3167	20 71 30	jsr $3071			jsr 	FloatLogarithm
.316a	b0 06		bcs $3172			bcs 	_FSQExit
.316c	d6 70		dec $70,x			dec 	NSExponent,x
.316e	20 6e 2f	jsr $2f6e			jsr 	FloatExponent
.3171	18		clc				clc
.3172					_FSQExit:
.3172	60		rts				rts
.3173					FloatTangent:
.3173	da		phx				phx
.3174	8a		txa				txa 								; sin -> +1
.3175	a8		tay				tay
.3176	c8		iny				iny
.3177	20 00 30	jsr $3000			jsr 	CopyFloatXY
.317a	e8		inx				inx
.317b	20 02 31	jsr $3102			jsr 	FloatSine
.317e	ca		dex				dex
.317f	8a		txa				txa 								; cos -> +2
.3180	a8		tay				tay
.3181	c8		iny				iny
.3182	c8		iny				iny
.3183	20 00 30	jsr $3000			jsr 	CopyFloatXY
.3186	e8		inx				inx
.3187	e8		inx				inx
.3188	20 62 2f	jsr $2f62			jsr 	FloatCosine
.318b	20 65 29	jsr $2965			jsr 	FloatDivide 				; calculate sin/cos
.318e	b0 07		bcs $3197			bcs 	_FTExit 					; divide by zero
.3190	8a		txa				txa 								; copy result down.
.3191	a8		tay				tay
.3192	88		dey				dey
.3193	20 00 30	jsr $3000			jsr 	CopyFloatXY
.3196	18		clc				clc
.3197					_FTExit:
.3197	fa		plx				plx
.3198	60		rts				rts

;******  Processing input file: testing/testend.asm

=$3200							nextPage = (* + $FF) & $FF00 		; so I can include with that f*****g header.
.31fe					ObjectCodePreHeader:
>31fe	00 40 d4 54 00 a6 0e 48				.binary "code/code.bin"
>3206	00 a6 03 c7 a6 cb 93 93 b1 ce 0d 48 45 4c 4c 4f
>3216	20 57 4f 52 4c 44 20 21 b1 0d 92 a6 40 00 01 00
>3226	ca 81 58 03 40 00 01 00 ca 81 58 06 40 00 01 00
>3236	ca 81 58 09 a6 40 00 01 00 ca 81 58 0c 40 00 01
>3246	00 ca 81 58 0f a6 00 48 12 24 40 00 01 95 a6 40
>3256	12 01 50 03 8e 01 b4 28 82 ca 84 02 82 01 80 7c
>3266	a6 40 12 01 50 06 8e 01 b4 1e 82 ca 84 cc 00 01
>3276	82 7c a6 40 12 01 50 09 8e 01 b4 0e 82 ca 84 01
>3286	80 7c a6 40 12 01 50 0c 8e 01 b4 02 82 ca 84 7c
>3296	a6 a6 40 12 01 50 0f 8e 01 7c a6 24 a7 a6 a6 00
>32a6	48 15 2a 1d 01 95 00 48 18 30 27 01 95 a6 40 15
>32b6	cc 00 01 82 40 18 02 82 80 cc 00 b0 80 48 1b a6
>32c6	01 40 1b cb 51 c8 01 40 1b 01 80 00 c8 a6 30 a7
>32d6	2a a7 a6 01 48 12 24 40 00 01 95 a6 01 cc 00 b0
>32e6	40 12 01 50 06 8e 78 80 40 12 01 50 03 8e 78 80
>32f6	00 c8 a6 40 12 01 50 0c 8e 78 48 1e a6 40 1e 00
>3306	a3 88 d2 00 07 00 d1 00 5d 00 a6 40 1e 01 a3 88
>3316	d2 00 07 00 d1 00 7a 00 a6 40 12 01 50 0f 8e 78
>3326	48 21 a6 40 21 00 a3 88 d2 00 07 00 d1 00 97 00
>3336	a6 40 21 01 a3 88 d2 00 07 00 d1 00 b6 00 a6 01
>3346	cc 00 b0 40 12 01 50 06 8e 78 80 40 12 01 50 03
>3356	8e 78 80 40 12 01 50 09 8e 78 c8 a6 24 a7 a6 d0
>3366	00 72 ff a6 a6 40 12 01 50 03 8e 78 48 24 a6 40
>3376	24 01 a3 88 d2 00 0c 00 40 12 01 50 0c 8e 01 7c
>3386	98 a6 40 12 01 50 03 8e 40 24 02 81 7c 98 a6 a6
>3396	40 12 01 50 03 8e 78 48 24 a6 40 24 cb 4f a3 88
>33a6	d2 00 15 00 40 12 01 50 03 8e cb 4d 7c 40 12 01
>33b6	50 0c 8e 00 7c 98 a6 40 12 01 50 03 8e 40 24 02
>33c6	80 7c 98 a6 a6 40 12 01 50 06 8e 78 48 27 a6 40
>33d6	27 00 a3 88 d2 00 0c 00 40 12 01 50 0f 8e 01 7c
>33e6	98 a6 40 12 01 50 06 8e 40 27 cc 00 01 81 7c 98
>33f6	a6 a6 40 12 01 50 06 8e 78 48 27 a6 40 27 cc 00
>3406	1d a3 88 d2 00 16 00 40 12 01 50 06 8e cc 00 1c
>3416	7c 40 12 01 50 0f 8e 00 7c 98 a6 40 12 01 50 06
>3426	8e 40 27 cc 00 01 80 7c 98 c4 ff
=12800					ObjectCode = ObjectCodePreHeader+2 			; so the code is at XX00

;******  End of listing
