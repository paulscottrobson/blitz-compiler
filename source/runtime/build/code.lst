
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass -c -Wall -o build/code.prg -L build/code.lst -l build/code.lbl testing/testing.asm /home/paulr/Projects/blitz-compiler/documents/../bin/runtime.library /home/paulr/Projects/blitz-compiler/documents/../bin/common.library /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library /home/paulr/Projects/blitz-compiler/documents/../bin/polynomials.library testing/testend.asm
; Sat Oct  7 12:31:43 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: testing/testing.asm

.1000					WrapperBoot:
.1000	a9 32		lda #$32			lda 	#ObjectCode >> 8 			; address of object code to run.
.1002	a2 81		ldx #$81			ldx 	#$81 						; first page of allocatable memory
.1004	a0 9f		ldy #$9f			ldy 	#$9F 						; byte after end of last page.
.1006	4c 09 10	jmp $1009			jmp 	StartRuntime

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/runtime.library

.0022					zsTemp:
>0022							.fill 	2
.0024					runtimeStackPtr:
>0024							.fill 	2
.0400					stringLowMemory:
>0400							.fill 	2
.0402					stringHighMemory:
>0402							.fill 	2
=$e4					FRAME_GOSUB = $E4 							; Gosub has 4 bytes
=211					FRAME_FOR = $C0+19 							; For has 19 bytes
=$9f20					VRAMLow0 = $9F20
=$9f21					VRAMMed0 = $9F21
=$9f22					VRAMHigh0 = $9F22
=$9f23					VRAMData0 = $9F23
=$c09f					X16A_audio_init=$C09F
=$c08d					X16A_bas_fmchordstring=$C08D
=$c000					X16A_bas_fmfreq=$C000
=$c003					X16A_bas_fmnote=$C003
=$c006					X16A_bas_fmplaystring=$C006
=$c009					X16A_bas_fmvib=$C009
=$c00c					X16A_bas_playstringvoice=$C00C
=$c090					X16A_bas_psgchordstring=$C090
=$c00f					X16A_bas_psgfreq=$C00F
=$c012					X16A_bas_psgnote=$C012
=$c015					X16A_bas_psgwav=$C015
=$c018					X16A_bas_psgplaystring=$C018
=$c01b					X16A_notecon_bas2fm=$C01B
=$c01e					X16A_notecon_bas2midi=$C01E
=$c021					X16A_notecon_bas2psg=$C021
=$c024					X16A_notecon_fm2bas=$C024
=$c027					X16A_notecon_fm2midi=$C027
=$c02a					X16A_notecon_fm2psg=$C02A
=$c02d					X16A_notecon_freq2bas=$C02D
=$c030					X16A_notecon_freq2fm=$C030
=$c033					X16A_notecon_freq2midi=$C033
=$c036					X16A_notecon_freq2psg=$C036
=$c039					X16A_notecon_midi2bas=$C039
=$c03c					X16A_notecon_midi2fm=$C03C
=$c03f					X16A_notecon_midi2psg=$C03F
=$c042					X16A_notecon_psg2bas=$C042
=$c045					X16A_notecon_psg2fm=$C045
=$c048					X16A_notecon_psg2midi=$C048
=$c093					X16A_psg_getatten=$C093
=$c096					X16A_psg_getpan=$C096
=$c04b					X16A_psg_init=$C04B
=$c04e					X16A_psg_playfreq=$C04E
=$c051					X16A_psg_read=$C051
=$c054					X16A_psg_setatten=$C054
=$c057					X16A_psg_setfreq=$C057
=$c05a					X16A_psg_setpan=$C05A
=$c05d					X16A_psg_setvol=$C05D
=$c060					X16A_psg_write=$C060
=$c0a2					X16A_psg_write_fast=$C0A2
=$c099					X16A_ym_getatten=$C099
=$c09c					X16A_ym_getpan=$C09C
=$c063					X16A_ym_init=$C063
=$c066					X16A_ym_loaddefpatches=$C066
=$c069					X16A_ym_loadpatch=$C069
=$c06c					X16A_ym_loadpatchlfn=$C06C
=$c06f					X16A_ym_playdrum=$C06F
=$c072					X16A_ym_playnote=$C072
=$c075					X16A_ym_setatten=$C075
=$c078					X16A_ym_setdrum=$C078
=$c07b					X16A_ym_setnote=$C07B
=$c07e					X16A_ym_setpan=$C07E
=$c081					X16A_ym_read=$C081
=$c084					X16A_ym_release=$C084
=$c087					X16A_ym_trigger=$C087
=$c08a					X16A_ym_write=$C08A
=2					X16_r0 = 2
=4					X16_r1 = 4
=6					X16_r2 = 6
=8					X16_r3 = 8
=10					X16_r4 = 10
=$ffa5					X16_ACPTR=$FFA5
=$ffcf					X16_BASIN=$FFCF
=$feba					X16_BSAVE=$FEBA
=$ffd2					X16_BSOUT=$FFD2
=$ffa8					X16_CIOUT=$FFA8
=$ffe7					X16_CLALL=$FFE7
=$ffc3					X16_CLOSE=$FFC3
=$ffc6					X16_CHKIN=$FFC6
=$ffc9					X16_CHKOUT=$FFC9
=$ff50					X16_clock_get_date_time=$FF50
=$ff4d					X16_clock_set_date_time=$FF4D
=$ffcf					X16_CHRIN=$FFCF
=$ffd2					X16_CHROUT=$FFD2
=$ff4a					X16_CLOSE_ALL=$FF4A
=$ffcc					X16_CLRCHN=$FFCC
=$fedb					X16_console_init=$FEDB
=$fee1					X16_console_get_char=$FEE1
=$fede					X16_console_put_char=$FEDE
=$fed8					X16_console_put_image=$FED8
=$fed5					X16_console_set_paging_message=$FED5
=$ff47					X16_enter_basic=$FF47
=$fecf					X16_entropy_get=$FECF
=$ff74					X16_fetch=$FF74
=$ff02					X16_FB_cursor_next_line=$FF02
=$feff					X16_FB_cursor_position=$FEFF
=$ff17					X16_FB_fill_pixels=$FF17
=$ff1a					X16_FB_filter_pixels=$FF1A
=$fef9					X16_FB_get_info=$FEF9
=$ff05					X16_FB_get_pixel=$FF05
=$ff08					X16_FB_get_pixels=$FF08
=$fef6					X16_FB_init=$FEF6
=$ff1d					X16_FB_move_pixels=$FF1D
=$ff11					X16_FB_set_8_pixels=$FF11
=$ff14					X16_FB_set_8_pixels_opaque=$FF14
=$fefc					X16_FB_set_palette=$FEFC
=$ff0b					X16_FB_set_pixel=$FF0B
=$ff0e					X16_FB_set_pixels=$FF0E
=$ffe4					X16_GETIN=$FFE4
=$ff23					X16_GRAPH_clear=$FF23
=$ff38					X16_GRAPH_draw_image=$FF38
=$ff2c					X16_GRAPH_draw_line=$FF2C
=$ff35					X16_GRAPH_draw_oval=$FF35
=$ff2f					X16_GRAPH_draw_rect=$FF2F
=$ff3e					X16_GRAPH_get_char_size=$FF3E
=$ff20					X16_GRAPH_init=$FF20
=$ff32					X16_GRAPH_move_rect=$FF32
=$ff41					X16_GRAPH_put_char=$FF41
=$ff29					X16_GRAPH_set_colors=$FF29
=$ff3b					X16_GRAPH_set_font=$FF3B
=$ff26					X16_GRAPH_set_window=$FF26
=$fec6					X16_i2c_read_byte=$FEC6
=$fec9					X16_i2c_write_byte=$FEC9
=$fff3					X16_IOBASE=$FFF3
=$ff6e					X16_JSRFAR=$FF6E
=$ff56					X16_joystick_get=$FF56
=$ff53					X16_joystick_scan=$FF53
=$fec0					X16_kbdbuf_get_modifiers=$FEC0
=$febd					X16_kbdbuf_peek=$FEBD
=$fec3					X16_kbdbuf_put=$FEC3
=$fed2					X16_keymap=$FED2
=$ffb1					X16_LISTEN=$FFB1
=$ff59					X16_LKUPLA=$FF59
=$ff5c					X16_LKUPSA=$FF5C
=$ffd5					X16_LOAD=$FFD5
=$ff44					X16_MACPTR=$FF44
=$ff9c					X16_MEMBOT=$FF9C
=$fee7					X16_memory_copy=$FEE7
=$feea					X16_memory_crc=$FEEA
=$feed					X16_memory_decompress=$FEED
=$fee4					X16_memory_fill=$FEE4
=$ff99					X16_MEMTOP=$FF99
=$fecc					X16_monitor=$FECC
=$ff68					X16_mouse_config=$FF68
=$ff6b					X16_mouse_get=$FF6B
=$ff71					X16_mouse_scan=$FF71
=$ffc0					X16_OPEN=$FFC0
=$ff65					X16_PFKEY=$FF65
=$fff0					X16_PLOT=$FFF0
=$ff7d					X16_PRIMM=$FF7D
=$ffde					X16_RDTIM=$FFDE
=$ffb7					X16_READST=$FFB7
=$ffd8					X16_SAVE=$FFD8
=$ffed					X16_SCREEN=$FFED
=$ff5f					X16_screen_mode=$FF5F
=$ff62					X16_screen_set_charset=$FF62
=$ff93					X16_SECOND=$FF93
=$ffba					X16_SETLFS=$FFBA
=$ff90					X16_SETMSG=$FF90
=$ffbd					X16_SETNAM=$FFBD
=$ffdb					X16_SETTIM=$FFDB
=$ffa2					X16_SETTMO=$FFA2
=$fef0					X16_sprite_set_image=$FEF0
=$fef3					X16_sprite_set_position=$FEF3
=$ff77					X16_stash=$FF77
=$ffe1					X16_STOP=$FFE1
=$ffb4					X16_TALK=$FFB4
=$ff96					X16_TKSA=$FF96
=$ffea					X16_UDTIM=$FFEA
=$ffae					X16_UNLSN=$FFAE
=$ffab					X16_UNTLK=$FFAB
=$311					USRRoutineAddress = $311
=$30c					SYS_Reg_A = $30C
=$30d					SYS_Reg_X = $30D
=$30e					SYS_Reg_Y = $30E
=$30f					SYS_Reg_S = $30F
=0					SelectRAMBank = 0
=1					SelectROMBank = 1
=$0a					X16_AudioCodeBank = $0A
.1009					StartRuntime:
.1009	8d 04 04	sta $0404			sta 	runtimeHigh 				; save address of code.
.100c	85 29		sta $29				sta 	codePtr+1 					; set pointer to code.
.100e	64 28		stz $28				stz 	codePtr
.1010	64 2a		stz $2a				stz 	codePage 					; zero current page.
.1012	8e 05 04	stx $0405			stx 	storeStartHigh 				; save from-to address.
.1015	8c 06 04	sty $0406			sty 	storeEndHigh
.1018	8e 07 04	stx $0407			stx 	variableStartPage
.101b	20 4d 12	jsr $124d			jsr 	ClearMemory 				; clear memory.
.101e	20 2e 1e	jsr $1e2e			jsr 	XRuntimeSetup 				; initialise the runtime stuff.
.1021	20 30 1b	jsr $1b30		 	jsr		SetDefaultChannel			; set default input/output channel.
.1024	20 66 1d	jsr $1d66			jsr 	RestoreCode 				; which we now call
.1027	a0 00		ldy #$00			ldy 	#0
.1029					NextCommand:
.1029	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.102b	30 5b		bmi $1088			bmi 	NXCommand 					; -if -ve command
.102d	c8		iny				iny
.102e	c9 40		cmp #$40			cmp 	#64 						; 64..127 is load and store.
.1030	90 39		bcc $106b			bcc 	PushByteA 					; 0..63 is short constants.
.1032					NXLoadStore:
.1032	c9 78		cmp #$78			cmp		#120 						; is it an indirect read/write
.1034	b0 19		bcs $104f			bcs 	NXIndirectLoadStore
.1036	4a		lsr a				lsr 	a 							; / 4, so $48 => $12,
.1037	4a		lsr a				lsr 	a
.1038	29 0e		and #$0e			and 	#$0E
.103a	da		phx				phx 								; get ready to jump
.103b	aa		tax				tax
.103c	7c 3f 10	jmp ($103f,x)			jmp 	(ReadWriteVectors,x) 		; go via the jump table.
.103f					ReadWriteVectors:
>103f	9c 1c						.word 	ReadFloatCommand			; read float
>1041	77 22						.word 	WriteFloatCommand 			; write float
>1043	d8 1c						.word 	ReadIntegerCommand 			; read integer
>1045	b3 22						.word 	WriteIntegerCommand 		; write integer
>1047	1d 1d						.word 	ReadStringCommand 			; read string
>1049	f2 22						.word 	WriteStringCommand 			; write string
>104b	1b 14						.word 	Unimplemented
>104d	1b 14						.word 	Unimplemented
.104f					NXIndirectLoadStore:
.104f	29 07		and #$07			and 	#7
.1051	0a		asl a				asl 	a
.1052	da		phx				phx
.1053	aa		tax				tax
.1054	7c 57 10	jmp ($1057,x)			jmp 	(IndirectVectors,x)
.1057					IndirectVectors:
>1057	d1 16						.word 	IndFloatRead 				; float read
>1059	e5 16						.word 	IndInt16Read 				; int16 read
>105b	f9 16						.word 	IndStringRead 				; string read
>105d	1b 14						.word 	Unimplemented
>105f	0d 17						.word 	IndFloatWrite				; float write
>1061	21 17						.word 	IndInt16Write 				; int16 write
>1063	35 17						.word 	IndStringWrite 				; string write
>1065	1b 14						.word 	Unimplemented
.1067					PushByteCommand:
.1067	fa		plx				plx
.1068	b1 28		lda ($28),y			lda 	(codePtr),y 				; get byte to write.
.106a	c8		iny				iny
.106b					PushByteA:
.106b	e8		inx				inx 								; push constant on stack
.106c	95 41		sta $41,x			sta 	NSMantissa0,x 				; save byte
.106e	74 4d		stz $4d,x			stz 	NSMantissa1,x 				; clear MSB
.1070					ClearRestWord:
.1070	74 59		stz $59,x			stz 	NSMantissa2,x 				; zero upper bytes, exponent, make iFloat32
.1072	74 65		stz $65,x			stz 	NSMantissa3,x
.1074	74 71		stz $71,x			stz 	NSExponent,x
.1076	74 35		stz $35,x			stz 	NSStatus,x
.1078	80 af		bra $1029			bra 	NextCommand
.107a					PushWordCommand:
.107a	fa		plx				plx
.107b	e8		inx				inx
.107c	b1 28		lda ($28),y			lda 	(codePtr),y 				; word to stack
.107e	c8		iny				iny
.107f	95 41		sta $41,x			sta 	NSMantissa0,x
.1081	b1 28		lda ($28),y			lda 	(codePtr),y
.1083	c8		iny				iny
.1084	95 4d		sta $4d,x			sta 	NSMantissa1,x
.1086	80 e8		bra $1070			bra 	ClearRestWord 				; handle everything else.
.1088					NXCommand:
.1088	c8		iny				iny 								; consume command.
.1089	10 03		bpl $108e			bpl 	_NXCommandNoFixUp
.108b	20 94 10	jsr $1094			jsr 	FixUpY
.108e					_NXCommandNoFixUp:
.108e	0a		asl a				asl 	a 							; shift left
.108f	da		phx				phx 								; save SP on stack
.1090	aa		tax				tax				 					; and jump indirect
.1091	7c 58 21	jmp ($2158,x)			jmp 	(VectorTable,x)
.1094					FixUpY:
.1094	48		pha				pha
.1095	98		tya				tya
.1096	18		clc				clc
.1097	65 28		adc $28				adc 	codePtr
.1099	85 28		sta $28				sta 	codePtr
.109b	90 02		bcc $109f			bcc 	_NoCPCarry
.109d	e6 29		inc $29				inc 	codePtr+1
.109f					_NoCPCarry:
.109f	a0 00		ldy #$00			ldy 	#0
.10a1	68		pla				pla
.10a2	60		rts				rts
.0404					runtimeHigh:
>0404							.fill 	1
.0405					storeStartHigh:
>0405							.fill 	1
.0406					storeEndHigh:
>0406							.fill 	1
.0407					variableStartPage:
>0407							.fill 	1
.10a3					AbsoluteTOS:
.10a3	fa		plx				plx
.10a4	74 35		stz $35,x			stz 	NSStatus,x 					; dereferenced so just clear the status byte.
.10a6	4c 29 10	jmp $1029			jmp 	NextCommand
.10a9					CommandVarSpace:
.10a9	fa		plx				plx
.10aa	b1 28		lda ($28),y			lda 	(codePtr),y					; 3 byte opcode, which is 'free' memory in variable area.
.10ac	85 26		sta $26				sta 	availableMemory
.10ae	c8		iny				iny
.10af	b1 28		lda ($28),y			lda 	(codePtr),y
.10b1	18		clc				clc
.10b2	6d 07 04	adc $0407			adc 	variableStartPage			; offset to actual address.
.10b5	85 27		sta $27				sta 	availableMemory+1
.10b7	c8		iny				iny
.10b8	4c 29 10	jmp $1029			jmp 	NextCommand
.0026					availableMemory:
>0026							.fill 	2
.10bb					BinaryAnd:
.10bb	fa		plx				plx
.10bc	38		sec				sec
.10bd	80 02		bra $10c1			bra 	AndOrCommon
.10bf					BinaryOr:
.10bf	fa		plx				plx
.10c0	18		clc				clc
.10c1					AndOrCommon:
.10c1	08		php				php 								; save AND/OR flag
.10c2	20 0c 18	jsr $180c			jsr 	GetInteger16Bit
.10c5	ca		dex				dex
.10c6	20 0c 18	jsr $180c			jsr 	GetInteger16Bit
.10c9	28		plp				plp
.10ca	90 0e		bcc $10da			bcc 	_AOCOrCode
.10cc	b5 41		lda $41,x			lda 	NSMantissa0,x 				; AND code
.10ce	35 42		and $42,x			and		NSMantissa0+1,x
.10d0	95 41		sta $41,x			sta 	NSMantissa0,x
.10d2	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.10d4	35 4e		and $4e,x			and		NSMantissa1+1,x
.10d6	95 4d		sta $4d,x			sta 	NSMantissa1,x
.10d8	80 0c		bra $10e6			bra 	_AOCComplete
.10da					_AOCOrCode:
.10da	b5 41		lda $41,x			lda 	NSMantissa0,x 				; OR code
.10dc	15 42		ora $42,x			ora		NSMantissa0+1,x
.10de	95 41		sta $41,x			sta 	NSMantissa0,x
.10e0	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.10e2	15 4e		ora $4e,x			ora		NSMantissa1+1,x
.10e4	95 4d		sta $4d,x			sta 	NSMantissa1,x
.10e6					_AOCComplete:
.10e6	74 35		stz $35,x			stz 	NSStatus,x 					; make integer ?
.10e8	34 4d		bit $4d,x			bit 	NSMantissa1,x 				; result is -ve
.10ea	10 07		bpl $10f3			bpl 	_AOCExit
.10ec	20 1c 18	jsr $181c			jsr 	Negate16Bit 				; 2's complement
.10ef	a9 80		lda #$80			lda 	#$80 						; make it -ve
.10f1	95 35		sta $35,x			sta 	NSStatus,x
.10f3					_AOCExit:
.10f3	4c 29 10	jmp $1029			jmp 	NextCommand
.10f6					ArrayConvert:
.10f6	fa		plx				plx
.10f7	5a		phy				phy
.10f8	b5 41		lda $41,x			lda 	NSMantissa0,x
.10fa	85 31		sta $31				sta 	zTemp1
.10fc	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.10fe	18		clc				clc
.10ff	6d 07 04	adc $0407			adc 	variableStartPage
.1102	85 32		sta $32				sta 	zTemp1+1
.1104	ca		dex				dex 								; count of indices to follow -> zTemp2
.1105	20 06 18	jsr $1806			jsr 	GetInteger8Bit
.1108	85 33		sta $33				sta 	zTemp2 						; subtract from stack.
.110a	8a		txa				txa
.110b	38		sec				sec
.110c	e5 33		sbc $33				sbc 	zTemp2
.110e	aa		tax				tax
.110f	da		phx				phx 								; stack points at the first index, which will be replaced.
.1110					_ACIndexLoop:
.1110	20 45 2a	jsr $2a45			jsr 	FloatIntegerPart 			; integer array index
.1113	20 0c 18	jsr $180c			jsr 	GetInteger16Bit 			; get the index => zTemp0
.1116	a0 01		ldy #$01			ldy 	#1 							; compare against the index count.
.1118	a5 2f		lda $2f				lda 	zTemp0
.111a	d2 31		cmp ($31)			cmp 	(zTemp1)
.111c	a5 30		lda $30				lda 	zTemp0+1
.111e	f1 31		sbc ($31),y			sbc 	(zTemp1),y
.1120	b0 79		bcs $119b			bcs 	_ACBadIndex 				; index error.
.1122	c6 33		dec $33				dec 	zTemp2 						; decrement count, if zero, then innermost level
.1124	f0 29		beq $114f			beq 	_ACInnerLevel
.1126	a0 02		ldy #$02			ldy 	#2 							; check sub index.
.1128	b1 31		lda ($31),y			lda 	(zTemp1),y
.112a	10 6f		bpl $119b			bpl 	_ACBadIndex
.112c	06 2f		asl $2f				asl 	zTemp0 						; double the index and add it to the base address
.112e	26 30		rol $30				rol 	zTemp0+1
.1130	18		clc				clc
.1131	a5 2f		lda $2f				lda		zTemp0
.1133	65 31		adc $31				adc 	zTemp1
.1135	85 2f		sta $2f				sta 	zTemp0
.1137	a5 30		lda $30				lda		zTemp0+1
.1139	65 32		adc $32				adc 	zTemp1+1
.113b	85 30		sta $30				sta 	zTemp0+1
.113d	a0 03		ldy #$03			ldy 	#3 							; we offset by 3 because 3 at entry, now get the address
.113f	b1 2f		lda ($2f),y			lda 	(zTemp0),y 					; into zTemp1 as a real address, not offset
.1141	85 31		sta $31				sta 	zTemp1
.1143	c8		iny				iny
.1144	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.1146	18		clc				clc
.1147	6d 07 04	adc $0407			adc 	variableStartPage
.114a	85 32		sta $32				sta 	zTemp1+1
.114c	e8		inx				inx 								; next index
.114d	80 c1		bra $1110			bra 	_ACIndexLoop
.114f					_ACInnerLevel:
.114f	a0 02		ldy #$02			ldy 	#2
.1151	b1 31		lda ($31),y			lda 	(zTemp1),y
.1153	30 46		bmi $119b			bmi 	_ACBadIndex 				; it has sub arrays, so bad index.
.1155	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16 		; check if it is an iFloat
.1157	c9 00		cmp #$00			cmp 	#NSSIFloat
.1159	d0 13		bne $116e			bne 	_ACNotFloat
.115b	a5 30		lda $30				lda 	zTemp0+1 					; double and add zTemp0 (x3)
.115d	48		pha				pha
.115e	a5 2f		lda $2f				lda 	zTemp0
.1160	06 2f		asl $2f				asl 	zTemp0 						; x 2
.1162	26 30		rol $30				rol 	zTemp0+1
.1164	18		clc				clc 								; add back x 3
.1165	65 2f		adc $2f				adc 	zTemp0
.1167	85 2f		sta $2f				sta 	zTemp0
.1169	68		pla				pla
.116a	65 30		adc $30				adc 	zTemp0+1
.116c	85 30		sta $30				sta 	zTemp0+1
.116e					_ACNotFloat:
.116e	06 2f		asl $2f				asl 	zTemp0 						; x 2 or x 6 depending.
.1170	26 30		rol $30				rol 	zTemp0+1
.1172	18		clc				clc
.1173	a5 2f		lda $2f				lda 	zTemp0
.1175	69 03		adc #$03			adc 	#3
.1177	85 2f		sta $2f				sta 	zTemp0
.1179	90 02		bcc $117d			bcc 	_ACNoCarry
.117b	e6 30		inc $30				inc 	zTemp0+1
.117d					_ACNoCarry:
.117d	fa		plx				plx 								; X points to first slot of array parameters
.117e	18		clc				clc
.117f	a5 2f		lda $2f				lda 	zTemp0
.1181	65 31		adc $31				adc 	zTemp1
.1183	95 41		sta $41,x			sta 	NSMantissa0,x
.1185	a5 30		lda $30				lda 	zTemp0+1
.1187	65 32		adc $32				adc 	zTemp1+1
.1189	38		sec				sec
.118a	ed 07 04	sbc $0407			sbc 	variableStartPage
.118d	95 4d		sta $4d,x			sta 	NSMantissa1,x
.118f	74 59		stz $59,x			stz 	NSMantissa2,x
.1191	74 65		stz $65,x			stz 	NSMantissa3,x
.1193	74 35		stz $35,x			stz 	NSStatus,x
.1195	74 71		stz $71,x			stz 	NSExponent,x
.1197	7a		ply				ply 	 							; restore code pointer
.1198	4c 29 10	jmp $1029			jmp 	NextCommand
.119b					_ACBadIndex:
.119b	4c 9f 27	jmp $279f		jmp	ErrorV_index
.119e					UnaryAsc:
.119e	fa		plx				plx
.119f	5a		phy				phy
.11a0	b5 41		lda $41,x			lda 	NSMantissa0,x 				; string address.
.11a2	85 2f		sta $2f				sta 	zTemp0
.11a4	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.11a6	85 30		sta $30				sta 	zTemp0+1
.11a8	b2 2f		lda ($2f)			lda 	(zTemp0) 					; if empty string return zero
.11aa	f0 06		beq $11b2			beq 	_UAExit
.11ac	5a		phy				phy 								; otherwise first character
.11ad	a0 01		ldy #$01			ldy 	#1
.11af	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.11b1	7a		ply				ply
.11b2					_UAExit:
.11b2	20 0c 2e	jsr $2e0c			jsr 	FloatSetByte
.11b5	7a		ply				ply
.11b6	4c 29 10	jmp $1029			jmp 	NextCommand
.11b9					CommandAssert:
.11b9	fa		plx				plx
.11ba	e0 00		cpx #$00			cpx 	#0 							; check only one element on stack
.11bc	d0 09		bne $11c7			bne 	_CAFail
.11be	20 2c 2e	jsr $2e2c			jsr 	FloatIsZero 				; is it zero ?
.11c1	f0 04		beq $11c7			beq 	_CAFail
.11c3	ca		dex				dex
.11c4	4c 29 10	jmp $1029			jmp 	NextCommand
.11c7					_CAFail:
.11c7	4c f8 26	jmp $26f8		jmp	ErrorV_assert
.11ca					X16_Audio_Parameters8_16:
.11ca	20 d0 11	jsr $11d0			jsr 	X16_Audio_Parameters8_8
.11cd	a4 4e		ldy $4e				ldy 	NSMantissa1+1
.11cf	60		rts				rts
.11d0					X16_Audio_Parameters8_8:
.11d0	a2 01		ldx #$01			ldx 	#1
.11d2	20 45 2a	jsr $2a45			jsr 	FloatIntegerPart
.11d5	ca		dex				dex
.11d6	20 45 2a	jsr $2a45			jsr 	FloatIntegerPart
.11d9	20 06 18	jsr $1806			jsr 	GetInteger8Bit
.11dc	a6 42		ldx $42				ldx 	NSMantissa0+1
.11de	a0 00		ldy #$00			ldy 	#0
.11e0	60		rts				rts
.11e1					X16_Audio_Parameters8_String:
.11e1	20 ca 11	jsr $11ca			jsr 	X16_Audio_Parameters8_16 	; get as numbers.
.11e4	da		phx				phx 								; set the voice
.11e5	5a		phy				phy
.11e6	20 6e ff	jsr $ff6e			jsr 	X16_JSRFAR
.11e9	20 0c c0	jsr $c00c			jsr 	X16A_bas_playstringvoice
>11ec	0a						.byte 	X16_AudioCodeBank
.11ed	7a		ply				ply
.11ee	fa		plx				plx
.11ef	86 2f		stx $2f				stx 	zTemp0
.11f1	84 30		sty $30				sty 	zTemp0+1
.11f3	b2 2f		lda ($2f)			lda 	(zTemp0) 					; read length
.11f5	e8		inx				inx 								; point YX to first character.
.11f6	d0 01		bne $11f9			bne 	_X16APSSkip
.11f8	c8		iny				iny
.11f9					_X16APSSkip:
.11f9	60		rts				rts
.11fa					Unary16Bin:
.11fa	fa		plx				plx
.11fb	20 0c 18	jsr $180c			jsr 	GetInteger16Bit				; 16 bit int
.11fe	a9 10		lda #$10			lda 	#16 						; allocate / set 16 bytes.
.1200	20 d7 1e	jsr $1ed7			jsr 	StringAllocTemp
.1203	a5 30		lda $30				lda 	zTemp0+1
.1205	f0 03		beq $120a			beq 	_UBNoHigh
.1207	20 12 12	jsr $1212			jsr 	_UBWriteBinary
.120a					_UBNoHigh:
.120a	a5 2f		lda $2f				lda 	zTemp0
.120c	20 12 12	jsr $1212			jsr 	_UBWriteBinary
.120f	4c 29 10	jmp $1029			jmp 	NextCommand
.1212					_UBWriteBinary:
.1212	5a		phy				phy
.1213	a0 08		ldy #$08			ldy 	#8
.1215					_UBWLoop:
.1215	0a		asl a				asl 	a
.1216	48		pha				pha
.1217	a9 00		lda #$00			lda  	#0
.1219	69 30		adc #$30			adc 	#48
.121b	20 00 1f	jsr $1f00			jsr 	StringWriteChar
.121e	68		pla				pla
.121f	88		dey				dey
.1220	d0 f3		bne $1215			bne 	_UBWLoop
.1222	7a		ply				ply
.1223	60		rts				rts
.1224					PrintCharacter:
.1224	fa		plx				plx
.1225	b5 41		lda $41,x			lda 	NSMantissa0,x
.1227	ca		dex				dex
.1228	20 34 1b	jsr $1b34			jsr 	VectorPrintCharacter
.122b	4c 29 10	jmp $1029			jmp 	NextCommand
.122e					UnaryChr:
.122e	fa		plx				plx
.122f	20 06 18	jsr $1806			jsr 	GetInteger8Bit 				; get integer to convert.
.1232	48		pha				pha 								; save it and allocate for it
.1233	a9 01		lda #$01			lda 	#1 							; 1 character
.1235	20 d7 1e	jsr $1ed7			jsr 	StringAllocTemp
.1238	a9 01		lda #$01			lda 	#1 							; length 1.
.123a	92 22		sta ($22)			sta 	(zsTemp)
.123c	68		pla				pla 								; character code makes string.
.123d	5a		phy				phy
.123e	a0 01		ldy #$01			ldy 	#1
.1240	91 22		sta ($22),y			sta 	(zsTemp),y
.1242	7a		ply				ply
.1243	4c 29 10	jmp $1029			jmp 	NextCommand
.1246					CommandClr:
.1246	fa		plx				plx
.1247	20 4d 12	jsr $124d			jsr 	ClearMemory
.124a	4c 29 10	jmp $1029			jmp 	NextCommand
.124d					ClearMemory:
.124d	ad 05 04	lda $0405			lda 	storeStartHigh 							; erase the work area
.1250	85 30		sta $30				sta 	zTemp0+1
.1252	64 2f		stz $2f				stz 	zTemp0
.1254	5a		phy				phy
.1255	a0 00		ldy #$00			ldy 	#0
.1257					_ClearLoop1:
.1257	a9 00		lda #$00			lda 	#0
.1259	91 2f		sta ($2f),y			sta 	(zTemp0),y
.125b	c8		iny				iny
.125c	d0 f9		bne $1257			bne 	_ClearLoop1
.125e	e6 30		inc $30				inc 	zTemp0+1
.1260	a5 30		lda $30				lda 	zTemp0+1
.1262	cd 06 04	cmp $0406			cmp 	storeEndHigh
.1265	d0 f0		bne $1257			bne 	_ClearLoop1
.1267	38		sec				sec 											; stack space = number of pages in total / 4
.1268	ad 06 04	lda $0406			lda 	storeEndHigh
.126b	ed 05 04	sbc $0405			sbc		storeStartHigh
.126e	4a		lsr a				lsr 	a
.126f	4a		lsr a				lsr 	a
.1270	d0 02		bne $1274			bne 	_NotEmpty 								; at least 1 !
.1272	a9 01		lda #$01			lda 	#1
.1274					_NotEmpty:
.1274	38		sec				sec 											; subtract from high to give string high memory
.1275	49 ff		eor #$ff			eor 	#$FF
.1277	6d 06 04	adc $0406			adc 	storeEndHigh
.127a	8d 03 04	sta $0403			sta 	stringHighMemory+1
.127d	9c 02 04	stz $0402			stz 	stringHighMemory
.1280	9c 68 05	stz $0568			stz 	stringInitialised 						; string system not initialised
.1283	ad 05 04	lda $0405			lda 	storeStartHigh 							; stack at end of start memory.
.1286	3a		dec a				dec 	a
.1287	85 25		sta $25				sta 	runtimeStackPtr+1
.1289	a9 ff		lda #$ff			lda 	#$FF
.128b	85 24		sta $24				sta 	runtimeStackPtr
.128d	a9 ff		lda #$ff			lda 	#$FF 									; duff marker in case we try to remove it.
.128f	92 24		sta ($24)			sta 	(runtimeStackPtr)
.1291	7a		ply				ply
.1292	60		rts				rts
.1293					CompareStrings:
.1293	fa		plx				plx
.1294	ca		dex				dex
.1295	b5 41		lda $41,x			lda 	NSMantissa0,x 				; copy strings to zTemp0 and zTemp1
.1297	85 2f		sta $2f				sta 	zTemp0
.1299	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.129b	85 30		sta $30				sta 	zTemp0+1
.129d	b5 42		lda $42,x			lda 	NSMantissa0+1,x
.129f	85 31		sta $31				sta 	zTemp1
.12a1	b5 4e		lda $4e,x			lda 	NSMantissa1+1,x
.12a3	85 32		sta $32				sta 	zTemp1+1
.12a5	da		phx				phx
.12a6	5a		phy				phy
.12a7	b2 2f		lda ($2f)			lda 	(zTemp0)					; work out number to compare
.12a9	d2 31		cmp ($31)			cmp 	(zTemp1)
.12ab	90 02		bcc $12af			bcc 	_CSNIsSmallest 				; as min(len(s1),len(s2))
.12ad	b2 31		lda ($31)			lda 	(zTemp1)
.12af					_CSNIsSmallest:
.12af	aa		tax				tax 								; count in X
.12b0	f0 0c		beq $12be			beq 	_CSNMatches 				; if zero already matches as far as we can go.
.12b2	a0 00		ldy #$00			ldy 	#0 							; start from offset 1
.12b4					_CSNCompareString:
.12b4	c8		iny				iny 								; pre increment
.12b5	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.12b7	d1 31		cmp ($31),y			cmp 	(zTemp1),y
.12b9	d0 0a		bne $12c5			bne 	_CSNDifferent 				; numbers are different.
.12bb	ca		dex				dex
.12bc	d0 f6		bne $12b4			bne 	_CSNCompareString 			; compare common characters in two strings.
.12be					_CSNMatches:
.12be	38		sec				sec
.12bf	b2 2f		lda ($2f)			lda 	(zTemp0)					; compare lengths
.12c1	f2 31		sbc ($31)			sbc 	(zTemp1)
.12c3	f0 06		beq $12cb			beq 	_CSNSExit 					; if zero, then strings match and exit.
.12c5					_CSNDifferent:
.12c5	a9 ff		lda #$ff			lda 	#$FF
.12c7	90 02		bcc $12cb			bcc 	_CSNSExit
.12c9	a9 01		lda #$01			lda 	#$01
.12cb					_CSNSExit:
.12cb	7a		ply				ply
.12cc	fa		plx				plx
.12cd	c9 00		cmp #$00			cmp 	#0 							; set the flags.
.12cf	20 0c 2e	jsr $2e0c			jsr 	FloatSetByte 				; output the byte
.12d2	4c 29 10	jmp $1029			jmp 	NextCommand
.12d5					StringConcrete:
.12d5	9c 68 05	stz $0568			stz 	stringInitialised	 		; initialise next usage
.12d8	84 34		sty $34				sty 	zTemp2+1 					; save pointer to new string
.12da	85 33		sta $33				sta 	zTemp2
.12dc	b2 33		lda ($33)			lda 	(zTemp2) 					; length required
.12de	4a		lsr a				lsr 	a 							; allow half as much for expansion.
.12df	18		clc				clc
.12e0	72 33		adc ($33)			adc 	(zTemp2)
.12e2	90 02		bcc $12e6			bcc 	_SCNoOverflow
.12e4	a9 ff		lda #$ff			lda 	#255
.12e6					_SCNoOverflow:
.12e6	c9 0a		cmp #$0a			cmp 	#10 						; and a minimum of 10
.12e8	b0 02		bcs $12ec			bcs 	_SCNoMinimum
.12ea	a9 0a		lda #$0a			lda 	#10
.12ec					_SCNoMinimum:
.12ec	85 31		sta $31				sta 	zTemp1 						; save max length.
.12ee	38		sec				sec
.12ef	ad 02 04	lda $0402			lda		stringHighMemory 			; subtract max length from high memory.
.12f2	e5 31		sbc $31				sbc 	zTemp1
.12f4	a8		tay				tay
.12f5	ad 03 04	lda $0403			lda 	stringHighMemory+1
.12f8	e9 00		sbc #$00			sbc 	#0
.12fa	48		pha				pha
.12fb	38		sec				sec 								; subtract 3 more
.12fc	98		tya				tya
.12fd	e9 03		sbc #$03			sbc 	#3
.12ff	8d 02 04	sta $0402			sta 	stringHighMemory 			; to string high memory/zsTemp
.1302	85 22		sta $22				sta 	zsTemp
.1304	68		pla				pla
.1305	e9 00		sbc #$00			sbc 	#0
.1307	8d 03 04	sta $0403			sta 	stringHighMemory+1
.130a	85 23		sta $23				sta 	zsTemp+1
.130c	a5 31		lda $31				lda 	zTemp1 						; set max length.
.130e	92 22		sta ($22)			sta 	(zsTemp)
.1310	a0 01		ldy #$01			ldy 	#1 							; clear control byte.
.1312	a9 00		lda #$00			lda 	#0
.1314	91 22		sta ($22),y			sta 	(zsTemp),y
.1316	a5 22		lda $22				lda 	zsTemp 						; new empty string in YA.
.1318	a4 23		ldy $23				ldy 	zsTemp+1
.131a	60		rts				rts
.131b					CommandData:
.131b	fa		plx				plx
.131c	98		tya				tya 								; data length +1 added to Y
.131d	38		sec				sec
.131e	71 28		adc ($28),y			adc 	(codePtr),y 				; next instruction
.1320	a8		tay				tay
.1321	4c 29 10	jmp $1029			jmp 	NextCommand
.1324					CommandDIM:
.1324	fa		plx				plx
.1325	5a		phy				phy
.1326	20 06 18	jsr $1806			jsr 	GetInteger8Bit 				; get the type we are building for (bits 6 & 5)
.1329	8d 08 04	sta $0408			sta 	dimType
.132c	ca		dex				dex 								; this is the number of indices
.132d	20 06 18	jsr $1806			jsr 	GetInteger8Bit
.1330	85 31		sta $31				sta 	zTemp1 						; subtract n from X so X points at the *first*
.1332	8a		txa				txa 								; dimension.
.1333	38		sec				sec
.1334	e5 31		sbc $31				sbc 	zTemp1
.1336	aa		tax				tax
.1337	a5 31		lda $31				lda 	zTemp1 						; number of indices.
.1339	20 4d 13	jsr $134d			jsr 	DIMCreateOneLevel 			; create one at this level
.133c	95 41		sta $41,x			sta 	NSMantissa0,x 				; set it as a return address as an integer
.133e	98		tya				tya
.133f	95 4d		sta $4d,x			sta 	NSMantissa1,x
.1341	74 59		stz $59,x			stz 	NSMantissa2,x
.1343	74 65		stz $65,x			stz 	NSMantissa3,x
.1345	74 35		stz $35,x			stz 	NSStatus,x
.1347	74 71		stz $71,x			stz 	NSExponent,x
.1349	7a		ply				ply
.134a	4c 29 10	jmp $1029			jmp 	NextCommand
.134d					DIMCreateOneLevel:
.134d	a4 26		ldy $26				ldy 	availableMemory 			; push the start of this block on the stack.
.134f	5a		phy				phy
.1350	a4 27		ldy $27				ldy 	availableMemory+1
.1352	5a		phy				phy
.1353	a8		tay				tay 			 					; save current level into Y
.1354	20 0c 18	jsr $180c			jsr		GetInteger16Bit 			; size of dimension to zTemp0
.1357	e6 2f		inc $2f				inc 	zTemp0 						; bump the size of the dimension as we need one more
.1359	d0 02		bne $135d			bne 	_DCOLNoCarry
.135b	e6 30		inc $30				inc 	zTemp0+1
.135d					_DCOLNoCarry:
.135d	a5 2f		lda $2f				lda 	zTemp0 						; write out the +1 size of the dimension
.135f	20 00 14	jsr $1400			jsr 	DIMWriteByte
.1362	a5 30		lda $30				lda 	zTemp0+1
.1364	20 00 14	jsr $1400			jsr 	DIMWriteByte
.1367	ad 08 04	lda $0408			lda 	dimType 					; get type information
.136a	29 7f		and #$7f			and 	#$7F
.136c	c0 01		cpy #$01			cpy 	#1
.136e	f0 02		beq $1372			beq 	_DCOLNoSubLevel
.1370	09 80		ora #$80			ora 	#$80 						; set sublevel bit if there is one.
.1372					_DCOLNoSubLevel:
.1372	20 00 14	jsr $1400			jsr 	DIMWriteByte
.1375	a5 26		lda $26				lda 	availableMemory
.1377	85 31		sta $31				sta 	zTemp1
.1379	a5 27		lda $27				lda 	availableMemory+1
.137b	85 32		sta $32				sta 	zTemp1+1
.137d	a5 2f		lda $2f				lda 	zTemp0
.137f	85 33		sta $33				sta 	zTemp2
.1381	a5 30		lda $30				lda 	zTemp0+1
.1383	85 34		sta $34				sta 	zTemp2+1
.1385					_DCOLFillArray:
.1385	20 e4 13	jsr $13e4			jsr 	DIMWriteElement 			; write out an element, could be a sub-level or individual data
.1388	a5 2f		lda $2f				lda 	zTemp0 						; decrement one from count.
.138a	d0 02		bne $138e			bne 	_DCOLNoBorrow
.138c	c6 30		dec $30				dec 	zTemp0+1
.138e					_DCOLNoBorrow:
.138e	c6 2f		dec $2f				dec 	zTemp0
.1390	a5 2f		lda $2f				lda 	zTemp0 						; until completed.
.1392	05 30		ora $30				ora 	zTemp0+1
.1394	d0 ef		bne $1385			bne 	_DCOLFillArray
.1396	c0 01		cpy #$01			cpy 	#1
.1398	f0 42		beq $13dc			beq 	_DCOLExit
.139a					_DCOLRecursionLoop:
.139a	da		phx				phx 								; save XY
.139b	5a		phy				phy
.139c	a5 31		lda $31				lda 	zTemp1 						; push zTemp1 (position) zTemp2 (count)
.139e	48		pha				pha
.139f	a5 32		lda $32				lda 	zTemp1+1
.13a1	48		pha				pha
.13a2	a5 33		lda $33				lda 	zTemp2
.13a4	48		pha				pha
.13a5	a5 34		lda $34				lda 	zTemp2+1
.13a7	48		pha				pha
.13a8	88		dey				dey  								; lower level -> A
.13a9	98		tya				tya
.13aa	e8		inx				inx 								; next index size
.13ab	20 4d 13	jsr $134d			jsr 	DIMCreateOneLevel 			; create a level, return in YA
.13ae	fa		plx				plx 								; restore zTemp2 (count) and zTemp1 (position)
.13af	86 34		stx $34				stx 	zTemp2+1
.13b1	fa		plx				plx
.13b2	86 33		stx $33				stx 	zTemp2
.13b4	fa		plx				plx
.13b5	86 32		stx $32				stx 	zTemp1+1
.13b7	fa		plx				plx
.13b8	86 31		stx $31				stx 	zTemp1
.13ba	92 31		sta ($31)			sta 	(zTemp1) 					; write out position
.13bc	98		tya				tya
.13bd	a0 01		ldy #$01			ldy 	#1
.13bf	91 31		sta ($31),y			sta 	(zTemp1),y
.13c1	7a		ply				ply 								; restore XY
.13c2	fa		plx				plx
.13c3	18		clc				clc
.13c4	a5 31		lda $31				lda 	zTemp1 						; add 2 to zTemp1
.13c6	69 02		adc #$02			adc 	#2
.13c8	85 31		sta $31				sta 	zTemp1
.13ca	90 02		bcc $13ce			bcc 	_DCOLRNoCarry
.13cc	e6 32		inc $32				inc 	zTemp1+1
.13ce					_DCOLRNoCarry:
.13ce	a5 33		lda $33				lda 	zTemp2 						; decrement one from count in zTemp2
.13d0	d0 02		bne $13d4			bne 	_DCOLRNoBorrow
.13d2	c6 34		dec $34				dec 	zTemp2+1
.13d4					_DCOLRNoBorrow:
.13d4	c6 33		dec $33				dec 	zTemp2
.13d6	a5 33		lda $33				lda 	zTemp2 						; until completed.
.13d8	05 34		ora $34				ora 	zTemp2+1
.13da	d0 be		bne $139a			bne 	_DCOLRecursionLoop
.13dc					_DCOLExit:
.13dc	68		pla				pla 								; get MSB, make offset again
.13dd	38		sec				sec
.13de	ed 07 04	sbc $0407			sbc 	variableStartPage
.13e1	a8		tay				tay
.13e2	68		pla				pla 								; YA now contains offset address.
.13e3	60		rts				rts
.13e4					DIMWriteElement:
.13e4	da		phx				phx
.13e5	a2 02		ldx #$02			ldx	 	#2 							; work out size is 2 or 6
.13e7	c0 01		cpy #$01			cpy 	#1 							; do we have a sub level, if so 2.
.13e9	d0 0b		bne $13f6			bne 	_DIMWENotFloat
.13eb	ad 08 04	lda $0408			lda 	dimType
.13ee	29 60		and #$60			and 	#NSSTypeMask+NSSIInt16
.13f0	c9 00		cmp #$00			cmp 	#NSSIFloat
.13f2	d0 02		bne $13f6			bne 	_DIMWENotFloat
.13f4	a2 06		ldx #$06			ldx 	#6
.13f6					_DIMWENotFloat:
.13f6	a9 00		lda #$00			lda 	#0
.13f8	20 00 14	jsr $1400			jsr 	DIMWriteByte
.13fb	ca		dex				dex
.13fc	d0 f8		bne $13f6			bne 	_DIMWENotFloat
.13fe	fa		plx				plx
.13ff	60		rts				rts
.1400					DIMWriteByte:
.1400	92 26		sta ($26)			sta 	(availableMemory)
.1402	e6 26		inc $26				inc 	availableMemory
.1404	d0 0b		bne $1411			bne 	_DIMWBSkip
.1406	e6 27		inc $27				inc 	availableMemory+1
.1408	48		pha				pha
.1409	a5 27		lda $27				lda 	availableMemory+1 			; check out of memory
.140b	cd 03 04	cmp $0403			cmp 	stringHighMemory+1
.140e	b0 02		bcs $1412			bcs 	_DIMWBMemory
.1410	68		pla				pla
.1411					_DIMWBSkip:
.1411	60		rts				rts
.1412					_DIMWBMemory:
.1412	4c b2 27	jmp $27b2		jmp	ErrorV_memory
.0408					dimType:
>0408							.fill 	1
.1415					CommandEnd:
.1415	fa		plx				plx
.1416	86 2f		stx $2f				stx 	zTemp0
.1418	4c ff ff	jmp $ffff			jmp 	$FFFF
.141b					Unimplemented:
.141b	4c e5 26	jmp $26e5			jmp 	ErrorV_unimplemented
.141e					ErrorHandler:
.141e	98		tya				tya
.141f	18		clc				clc
.1420	65 28		adc $28				adc 	codePtr
.1422	85 28		sta $28				sta 	codePtr
.1424	90 02		bcc $1428			bcc 	_EHNoCarry
.1426	e6 29		inc $29				inc 	codePtr+1
.1428					_EHNoCarry:
.1428	68		pla				pla
.1429	7a		ply				ply
.142a	85 2f		sta $2f				sta 	zTemp0
.142c	84 30		sty $30				sty 	zTemp0+1
.142e	a2 00		ldx #$00			ldx 	#0 							; output to channel #0
.1430	a0 01		ldy #$01			ldy 	#1
.1432					_EHDisplayMsg:
.1432	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.1434	20 4c 24	jsr $244c			jsr 	XPrintCharacterToChannel
.1437	c8		iny				iny
.1438	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.143a	d0 f6		bne $1432			bne 	_EHDisplayMsg
.143c	a9 20		lda #$20			lda 	#32
.143e	20 4c 24	jsr $244c			jsr 	XPrintCharacterToChannel
.1441	a9 40		lda #$40			lda 	#64
.1443	20 4c 24	jsr $244c			jsr 	XPrintCharacterToChannel
.1446	a9 20		lda #$20			lda 	#32
.1448	20 4c 24	jsr $244c			jsr 	XPrintCharacterToChannel
.144b	20 50 14	jsr $1450			jsr 	EHDisplayCodePtr
.144e	80 fe		bra $144e	_EHStop:bra 	_EHStop
.1450					EHDisplayCodePtr:
.1450	a9 20		lda #$20			lda 	#32
.1452	20 4c 24	jsr $244c			jsr 	XPrintCharacterToChannel
.1455	38		sec				sec
.1456	a5 29		lda $29				lda 	codePtr+1 					; display the p-code address of the error.
.1458	ed 04 04	sbc $0404			sbc 	runtimeHigh
.145b	20 64 14	jsr $1464			jsr 	_EHDisplayHex
.145e	a5 28		lda $28				lda 	codePtr
.1460	20 64 14	jsr $1464			jsr 	_EHDisplayHex
.1463	60		rts				rts
.1464					_EHDisplayHex:
.1464	48		pha				pha
.1465	4a		lsr a				lsr 	a
.1466	4a		lsr a				lsr 	a
.1467	4a		lsr a				lsr 	a
.1468	4a		lsr a				lsr 	a
.1469	20 6d 14	jsr $146d			jsr 	_EHDisplayNibble
.146c	68		pla				pla
.146d					_EHDisplayNibble:
.146d	29 0f		and #$0f			and 	#15
.146f	c9 0a		cmp #$0a			cmp 	#10
.1471	90 02		bcc $1475			bcc 	_EHNotHex
.1473	69 06		adc #$06			adc 	#6
.1475					_EHNotHex:
.1475	69 30		adc #$30			adc 	#48
.1477	4c 4c 24	jmp $244c			jmp 	XPrintCharacterToChannel
.147a					CommandFor:
.147a	fa		plx				plx
.147b	a9 d3		lda #$d3			lda 	#FRAME_FOR 					; open frame
.147d	20 fd 14	jsr $14fd			jsr 	StackOpenFrame
.1480	20 3d 19	jsr $193d			jsr 	StackSaveCurrentPosition 	; normalise to Y=0 and save position.
.1483	a0 07		ldy #$07			ldy 	#7 							; copy step out
.1485	20 df 14	jsr $14df			jsr 	CopyTOSToOffsetY
.1488	ca		dex				dex
.1489	a0 0d		ldy #$0d			ldy 	#13 						; copy terminal value.
.148b	20 df 14	jsr $14df			jsr 	CopyTOSToOffsetY
.148e	ca		dex				dex
.148f	b5 4d		lda $4d,x			lda 	NSMantissa1,x 				; bit 15 of reference indicates type int16
.1491	29 80		and #$80			and 	#$80
.1493	a0 04		ldy #$04			ldy 	#4
.1495	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.1497	b5 41		lda $41,x			lda 	NSMantissa0,x 				; copy the reference address
.1499	a0 05		ldy #$05			ldy 	#5 							; adjusted to be a real address
.149b	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.149d	85 2f		sta $2f				sta 	zTemp0 						; also to zTemp0
.149f	c8		iny				iny
.14a0	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.14a2	18		clc				clc
.14a3	29 7f		and #$7f			and 	#$7F 						; throw the type bit.
.14a5	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.14a7	6d 07 04	adc $0407			adc 	variableStartPage 			; point to variable page.
.14aa	85 30		sta $30				sta 	zTemp0+1
.14ac	ca		dex				dex 								; throw reference.
.14ad	a0 05		ldy #$05			ldy 	#5 							; check the index, step and terminal values
.14af	b1 2f		lda ($2f),y			lda 	(zTemp0),y 					; are all +ve integers, sign bits first.
.14b1	a0 0c		ldy #$0c			ldy 	#12
.14b3	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.14b5	a0 12		ldy #$12			ldy 	#18
.14b7	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.14b9	29 80		and #$80			and 	#$80 						; only interested in sign bit.
.14bb	88		dey				dey 								; now the exponents.
.14bc	11 2f		ora ($2f),y			ora 	(zTemp0),y
.14be	a0 0b		ldy #$0b			ldy 	#11
.14c0	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.14c2	a0 11		ldy #$11			ldy 	#17
.14c4	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.14c6	a0 08		ldy #$08			ldy 	#8 							; step must be 1 byte.
.14c8	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.14ca	c8		iny				iny
.14cb	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.14cd	c8		iny				iny
.14ce	11 24		ora ($24),y			ora 	(runtimeStackPtr),y
.14d0	d0 08		bne $14da			bne 	_CFNoOptimise
.14d2	a0 04		ldy #$04			ldy 	#4 							; set the runtime stack pointer optimisation flag.
.14d4	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.14d6	09 40		ora #$40			ora 	#$40
.14d8	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.14da					_CFNoOptimise:
.14da	a0 00		ldy #$00			ldy 	#0
.14dc	4c 29 10	jmp $1029			jmp 	NextCommand
.14df					CopyTOSToOffsetY:
.14df	b5 41		lda $41,x			lda 	NSMantissa0,x
.14e1	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.14e3	c8		iny				iny
.14e4	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.14e6	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.14e8	c8		iny				iny
.14e9	b5 59		lda $59,x			lda 	NSMantissa2,x
.14eb	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.14ed	c8		iny				iny
.14ee	b5 65		lda $65,x			lda 	NSMantissa3,x
.14f0	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.14f2	c8		iny				iny
.14f3	b5 71		lda $71,x			lda 	NSExponent,x
.14f5	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.14f7	c8		iny				iny
.14f8	b5 35		lda $35,x			lda 	NSStatus,x
.14fa	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.14fc	60		rts				rts
.14fd					StackOpenFrame:
.14fd	48		pha				pha 								; save frame marker
.14fe	29 1f		and #$1f			and 	#$1F 						; bytes required.
.1500	85 2f		sta $2f				sta 	zTemp0
.1502	38		sec				sec 								; subtract from runtime stack pointer.
.1503	a5 24		lda $24				lda		runtimeStackPtr
.1505	e5 2f		sbc $2f				sbc 	zTemp0
.1507	85 24		sta $24				sta 	runtimeStackPtr
.1509	a5 25		lda $25				lda		runtimeStackPtr+1
.150b	e9 00		sbc #$00			sbc 	#0
.150d	85 25		sta $25				sta 	runtimeStackPtr+1
.150f	68		pla				pla 								; put frame marker at +0
.1510	92 24		sta ($24)			sta 	(runtimeStackPtr)
.1512	60		rts				rts
.1513					StackCloseFrame:
.1513	b2 24		lda ($24)			lda 	(runtimeStackPtr)			; get frame marker
.1515	29 1f		and #$1f			and 	#$1F 						; size
.1517	18		clc				clc
.1518	65 24		adc $24				adc 	runtimeStackPtr
.151a	85 24		sta $24				sta 	runtimeStackPtr
.151c	90 02		bcc $1520			bcc 	_SCFNoCarry
.151e	e6 25		inc $25				inc 	runtimeStackPtr+1
.1520					_SCFNoCarry:
.1520	60		rts				rts
.1521					StackFindFrame:
.1521	8d 09 04	sta $0409			sta 	requiredFrame
.1524					_SFFLoop:
.1524	b2 24		lda ($24)			lda 	(runtimeStackPtr) 			; get TOS
.1526	c9 ff		cmp #$ff			cmp 	#$FF 						; if found $FF then this is a fail.
.1528	f0 10		beq $153a			beq 	SCFFail
.152a	cd 09 04	cmp $0409			cmp 	requiredFrame 				; found this type ?
.152d	f0 05		beq $1534			beq 	_SFFFound
.152f	20 13 15	jsr $1513			jsr 	StackCloseFrame 			; close the top frame
.1532	80 f0		bra $1524			bra 	_SFFLoop 					; and try te next.
.1534					_SFFFound:
.1534	60		rts				rts
.1535					StackCheckFrame:
.1535	d2 24		cmp ($24)			cmp 	(runtimeStackPtr) 			; matches current frame
.1537	d0 01		bne $153a			bne 	SCFFail
.1539	60		rts				rts
.153a					SCFFail:
.153a	4c 42 27	jmp $2742		jmp	ErrorV_structure
.0409					requiredFrame:
>0409							.fill 	1
.153d					UnaryFre:
.153d	fa		plx				plx
.153e	20 0a 2e	jsr $2e0a			jsr 	FloatSetZero 				; zero the result (32 bit integer)
.1541	38		sec				sec
.1542	ad 02 04	lda $0402			lda 	stringHighMemory 			; calculate the free memory.
.1545	ed 00 04	sbc $0400			sbc 	stringLowMemory
.1548	95 41		sta $41,x			sta		NSMantissa0,x
.154a	ad 03 04	lda $0403			lda 	stringHighMemory+1
.154d	ed 01 04	sbc $0401			sbc 	stringLowMemory+1
.1550	95 4d		sta $4d,x			sta		NSMantissa1,x
.1552	4c 29 10	jmp $1029			jmp 	NextCommand
.1555					CommandGet:
.1555	fa		plx				plx
.1556	e8		inx				inx
.1557	a9 01		lda #$01			lda 	#1 							; 1 character space
.1559	20 d7 1e	jsr $1ed7			jsr 	StringAllocTemp
.155c	20 3d 1b	jsr $1b3d			jsr 	VectorGetCharacter 			; get a character
.155f	c9 00		cmp #$00			cmp 	#0
.1561	f0 09		beq $156c			beq 	_CGNone
.1563	5a		phy				phy
.1564	a0 01		ldy #$01			ldy 	#1 							; store char
.1566	91 22		sta ($22),y			sta 	(zsTemp),y
.1568	98		tya				tya 								; store length.
.1569	92 22		sta ($22)			sta 	(zsTemp)
.156b	7a		ply				ply
.156c					_CGNone:
.156c	4c 29 10	jmp $1029			jmp 	NextCommand
.156f					CommandGosub:
.156f	fa		plx				plx
.1570	a9 e4		lda #$e4			lda 	#FRAME_GOSUB
.1572	20 fd 14	jsr $14fd			jsr 	StackOpenFrame
.1575	20 3d 19	jsr $193d			jsr 	StackSaveCurrentPosition
.1578	4c 8e 15	jmp $158e			jmp 	PerformGOTO
.157b					CommandReturn:
.157b	fa		plx				plx
.157c	a9 e4		lda #$e4			lda 	#FRAME_GOSUB
.157e	20 21 15	jsr $1521			jsr 	StackFindFrame
.1581	20 4e 19	jsr $194e			jsr 	StackLoadCurrentPosition
.1584	c8		iny				iny
.1585	c8		iny				iny
.1586	c8		iny				iny
.1587	20 13 15	jsr $1513			jsr 	StackCloseFrame
.158a	4c 29 10	jmp $1029			jmp 	NextCommand
.158d					CommandGoto:
.158d	fa		plx				plx
.158e					PerformGOTO:
.158e	c8		iny				iny 								; push MSB of offset on stack
.158f	b1 28		lda ($28),y			lda 	(codePtr),y
.1591	48		pha				pha
.1592	88		dey				dey 								; point LSB of offset
.1593	18		clc				clc 								; add LSB
.1594	b1 28		lda ($28),y			lda 	(codePtr),y
.1596	65 28		adc $28				adc 	codePtr
.1598	85 28		sta $28				sta 	codePtr
.159a	68		pla				pla 								; restore offset MSB and add
.159b	65 29		adc $29				adc 	codePtr+1
.159d	85 29		sta $29				sta 	codePtr+1
.159f	4c 29 10	jmp $1029			jmp 	NextCommand
.15a2					CommandGotoZ:
.15a2	fa		plx				plx
.15a3	20 2c 2e	jsr $2e2c			jsr 	FloatIsZero
.15a6	ca		dex				dex
.15a7	c9 00		cmp #$00			cmp 	#0
.15a9	f0 e3		beq $158e			beq 	PerformGOTO
.15ab	c8		iny				iny
.15ac	c8		iny				iny
.15ad	4c 29 10	jmp $1029			jmp 	NextCommand
.15b0					CommandGotoNZ:
.15b0	fa		plx				plx
.15b1	20 2c 2e	jsr $2e2c			jsr 	FloatIsZero
.15b4	ca		dex				dex
.15b5	c9 00		cmp #$00			cmp 	#0
.15b7	d0 d5		bne $158e			bne 	PerformGOTO
.15b9	c8		iny				iny
.15ba	c8		iny				iny
.15bb	4c 29 10	jmp $1029			jmp 	NextCommand
.15be					Command_PSET:
.15be	fa		plx				plx
.15bf	5a		phy				phy
.15c0	20 06 18	jsr $1806			jsr 	GetInteger8Bit 				; get the colour
.15c3	48		pha				pha
.15c4	a2 00		ldx #$00			ldx 	#0 							; copy 0/1 to r0,r1
.15c6	a0 02		ldy #$02			ldy 	#X16_r0
.15c8	20 4a 16	jsr $164a			jsr 	GraphicsCopy2
.15cb	20 ff fe	jsr $feff			jsr 	X16_FB_cursor_position 		; set position.
.15ce	68		pla				pla 								; set pixel.
.15cf	20 0b ff	jsr $ff0b			jsr 	X16_FB_set_pixel
.15d2	7a		ply				ply
.15d3	a2 ff		ldx #$ff			ldx 	#$FF
.15d5	4c 29 10	jmp $1029			jmp 	NextCommand
.15d8					Command_LINE:
.15d8	fa		plx				plx
.15d9	5a		phy				phy
.15da	20 3d 16	jsr $163d			jsr 	GraphicsColour
.15dd	a2 00		ldx #$00			ldx 	#0 							; copy 0/1/2/3 to r0,1,2,3
.15df	a0 02		ldy #$02			ldy 	#X16_r0
.15e1	20 47 16	jsr $1647			jsr 	GraphicsCopy4
.15e4	20 2c ff	jsr $ff2c			jsr 	X16_GRAPH_draw_line
.15e7	7a		ply				ply
.15e8	a2 ff		ldx #$ff			ldx 	#$FF
.15ea	4c 29 10	jmp $1029			jmp 	NextCommand
.15ed					Command_RECT:
.15ed	fa		plx				plx
.15ee	5a		phy				phy
.15ef	20 5e 16	jsr $165e			jsr 	GraphicsRectCoords
.15f2	38		sec				sec
.15f3	20 2f ff	jsr $ff2f			jsr 	X16_GRAPH_draw_rect
.15f6	7a		ply				ply
.15f7	a2 ff		ldx #$ff			ldx 	#$FF
.15f9	4c 29 10	jmp $1029			jmp 	NextCommand
.15fc					Command_FRAME:
.15fc	fa		plx				plx
.15fd	5a		phy				phy
.15fe	20 5e 16	jsr $165e			jsr 	GraphicsRectCoords
.1601	18		clc				clc
.1602	20 2f ff	jsr $ff2f			jsr 	X16_GRAPH_draw_rect
.1605	7a		ply				ply
.1606	a2 ff		ldx #$ff			ldx 	#$FF
.1608	4c 29 10	jmp $1029			jmp 	NextCommand
.160b					Command_CHAR:
.160b	fa		plx				plx
.160c	5a		phy				phy
.160d	ca		dex				dex  								; set the draw colour
.160e	20 3d 16	jsr $163d			jsr 	GraphicsColour
.1611	a2 00		ldx #$00			ldx 	#0 							; copy 0/1 to r0,r1
.1613	a0 02		ldy #$02			ldy 	#X16_r0
.1615	20 4a 16	jsr $164a			jsr 	GraphicsCopy2
.1618	a5 44		lda $44				lda 	NSMantissa0+3 				; copy string address to zTemp0
.161a	85 2f		sta $2f				sta 	zTemp0
.161c	a5 50		lda $50				lda 	NSMantissa1+3
.161e	85 30		sta $30				sta 	zTemp0+1
.1620	b2 2f		lda ($2f)			lda 	(zTemp0) 					; count of chars to zTemp1
.1622	85 31		sta $31				sta 	zTemp1
.1624					_CCLoop:
.1624	a5 31		lda $31				lda 	zTemp1 						; done all chars ?
.1626	f0 0f		beq $1637			beq 	_CCExit
.1628	c6 31		dec $31				dec 	zTemp1 						; dec counter
.162a	e6 2f		inc $2f				inc 	zTemp0 						; pre-bump pointer
.162c	d0 02		bne $1630			bne 	_CCNoCarry
.162e	e6 30		inc $30				inc 	zTemp0+1
.1630					_CCNoCarry:
.1630	b2 2f		lda ($2f)			lda 	(zTemp0) 					; get character
.1632	20 41 ff	jsr $ff41			jsr 	X16_GRAPH_put_char 			; write it
.1635	80 ed		bra $1624			bra 	_CCLoop						; go round.
.1637					_CCExit:
.1637	7a		ply				ply
.1638	a2 ff		ldx #$ff			ldx 	#$FF
.163a	4c 29 10	jmp $1029			jmp 	NextCommand
.163d					GraphicsColour:
.163d	20 06 18	jsr $1806			jsr 	GetInteger8Bit
.1640	aa		tax				tax
.1641	a0 00		ldy #$00			ldy 	#0
.1643	20 29 ff	jsr $ff29			jsr 	X16_GRAPH_set_colors
.1646	60		rts				rts
.1647					GraphicsCopy4:
.1647	20 4a 16	jsr $164a			jsr 	GraphicsCopy2
.164a					GraphicsCopy2:
.164a	20 4d 16	jsr $164d			jsr 	GraphicsCopy1
.164d					GraphicsCopy1:
.164d	20 45 2a	jsr $2a45			jsr 	FloatIntegerPart
.1650	b5 41		lda $41,x			lda 	NSMantissa0,x
.1652	99 00 00	sta $0000,y			sta 	0,y
.1655	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.1657	99 01 00	sta $0001,y			sta 	1,y
.165a	e8		inx				inx
.165b	c8		iny				iny
.165c	c8		iny				iny
.165d	60		rts				rts
.165e					GraphicsRectCoords:
.165e	20 3d 16	jsr $163d			jsr 	GraphicsColour 				; set colour
.1661	a2 00		ldx #$00			ldx 	#0 							; copy in order.
.1663	a0 02		ldy #$02			ldy 	#X16_r0
.1665	20 47 16	jsr $1647			jsr 	GraphicsCopy4
.1668	a2 02		ldx #$02			ldx 	#X16_r0 					; sort r0/r2
.166a	20 77 16	jsr $1677			jsr 	_GRCSortSubtract
.166d	a2 04		ldx #$04			ldx 	#X16_r1 					; sort r1/r3
.166f	20 77 16	jsr $1677			jsr 	_GRCSortSubtract
.1672	74 08		stz $08,x			stz 	8,x 						; zero rounding
.1674	74 09		stz $09,x			stz 	9,x
.1676	60		rts				rts
.1677					_GRCSortSubtract:
.1677	b5 04		lda $04,x			lda 	4,x 						; calculate r2-r0
.1679	d5 00		cmp $00,x			cmp 	0,x
.167b	b5 05		lda $05,x			lda 	5,x
.167d	f5 01		sbc $01,x			sbc 	1,x
.167f	b0 08		bcs $1689			bcs 	_GRCNoSwap 					; >= swap.
.1681	20 97 16	jsr $1697			jsr 	_GRCSwapByte 				; swap 0/2
.1684	e8		inx				inx
.1685	20 97 16	jsr $1697			jsr 	_GRCSwapByte 				; swap 1/3
.1688	ca		dex				dex
.1689					_GRCNoSwap:
.1689	38		sec				sec 								; calculate width/height into 4,5
.168a	b5 04		lda $04,x			lda 	4,x
.168c	f5 00		sbc $00,x			sbc 	0,x
.168e	95 04		sta $04,x			sta 	4,x
.1690	b5 05		lda $05,x			lda 	5,x
.1692	f5 01		sbc $01,x			sbc 	1,x
.1694	95 05		sta $05,x			sta 	5,x
.1696	60		rts				rts
.1697					_GRCSwapByte:
.1697	b5 04		lda $04,x			lda 	4,x
.1699	48		pha				pha
.169a	b5 00		lda $00,x			lda 	0,x
.169c	95 04		sta $04,x			sta 	4,x
.169e	68		pla				pla
.169f	95 00		sta $00,x			sta 	0,x
.16a1	60		rts				rts
.16a2					Unary16Hex:
.16a2	fa		plx				plx
.16a3	20 0c 18	jsr $180c			jsr 	GetInteger16Bit
.16a6	a9 04		lda #$04			lda 	#4 							; allocate / set 4 bytes.
.16a8	20 d7 1e	jsr $1ed7			jsr 	StringAllocTemp
.16ab	a5 30		lda $30				lda 	zTemp0+1
.16ad	f0 03		beq $16b2			beq 	_UHNoHigh
.16af	20 ba 16	jsr $16ba			jsr 	_UHWriteHex
.16b2					_UHNoHigh:
.16b2	a5 2f		lda $2f				lda 	zTemp0
.16b4	20 ba 16	jsr $16ba			jsr 	_UHWriteHex
.16b7	4c 29 10	jmp $1029			jmp 	NextCommand
.16ba					_UHWriteHex:
.16ba	48		pha				pha
.16bb	4a		lsr a				lsr 	a
.16bc	4a		lsr a				lsr 	a
.16bd	4a		lsr a				lsr 	a
.16be	4a		lsr a				lsr 	a
.16bf	20 c3 16	jsr $16c3			jsr 	_UHWriteNibl
.16c2	68		pla				pla
.16c3					_UHWriteNibl:
.16c3	29 0f		and #$0f			and 	#15
.16c5	c9 0a		cmp #$0a			cmp 	#10
.16c7	90 02		bcc $16cb			bcc 	_UHDigit
.16c9	69 06		adc #$06			adc 	#6
.16cb					_UHDigit:
.16cb	69 30		adc #$30			adc 	#48
.16cd	20 00 1f	jsr $1f00			jsr 	StringWriteChar
.16d0	60		rts				rts
.16d1					IndFloatRead:
.16d1	fa		plx				plx
.16d2	b5 41		lda $41,x			lda 	NSMantissa0,x 				; copy address
.16d4	85 2f		sta $2f				sta 	zTemp0
.16d6	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.16d8	18		clc				clc
.16d9	6d 07 04	adc $0407			adc 	variableStartPage
.16dc	85 30		sta $30				sta 	zTemp0+1
.16de	ca		dex				dex 								; throw the address
.16df	20 b6 1c	jsr $1cb6			jsr 	ReadFloatZTemp0Sub 							; call read routine
.16e2	4c 29 10	jmp $1029			jmp 	NextCommand
.16e5					IndInt16Read:
.16e5	fa		plx				plx
.16e6	b5 41		lda $41,x			lda 	NSMantissa0,x 				; copy address
.16e8	85 2f		sta $2f				sta 	zTemp0
.16ea	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.16ec	18		clc				clc
.16ed	6d 07 04	adc $0407			adc 	variableStartPage
.16f0	85 30		sta $30				sta 	zTemp0+1
.16f2	ca		dex				dex 								; throw the address
.16f3	20 f2 1c	jsr $1cf2			jsr 	ReadIntegerZTemp0Sub 							; call read routine
.16f6	4c 29 10	jmp $1029			jmp 	NextCommand
.16f9					IndStringRead:
.16f9	fa		plx				plx
.16fa	b5 41		lda $41,x			lda 	NSMantissa0,x 				; copy address
.16fc	85 2f		sta $2f				sta 	zTemp0
.16fe	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.1700	18		clc				clc
.1701	6d 07 04	adc $0407			adc 	variableStartPage
.1704	85 30		sta $30				sta 	zTemp0+1
.1706	ca		dex				dex 								; throw the address
.1707	20 37 1d	jsr $1d37			jsr 	ReadStringZTemp0Sub 							; call read routine
.170a	4c 29 10	jmp $1029			jmp 	NextCommand
.170d					IndFloatWrite:
.170d	fa		plx				plx
.170e	b5 40		lda $40,x			lda 	NSMantissa0-1,x 			; copy address
.1710	85 2f		sta $2f				sta 	zTemp0
.1712	b5 4c		lda $4c,x			lda 	NSMantissa1-1,x
.1714	18		clc				clc
.1715	6d 07 04	adc $0407			adc 	variableStartPage
.1718	85 30		sta $30				sta 	zTemp0+1
.171a	20 91 22	jsr $2291			jsr 	WriteFloatZTemp0Sub 							; call write routine
.171d	ca		dex				dex 								; throw the address as well.
.171e	4c 29 10	jmp $1029			jmp 	NextCommand
.1721					IndInt16Write:
.1721	fa		plx				plx
.1722	b5 40		lda $40,x			lda 	NSMantissa0-1,x 			; copy address
.1724	85 2f		sta $2f				sta 	zTemp0
.1726	b5 4c		lda $4c,x			lda 	NSMantissa1-1,x
.1728	18		clc				clc
.1729	6d 07 04	adc $0407			adc 	variableStartPage
.172c	85 30		sta $30				sta 	zTemp0+1
.172e	20 cd 22	jsr $22cd			jsr 	WriteIntegerZTemp0Sub 							; call write routine
.1731	ca		dex				dex 								; throw the address as well.
.1732	4c 29 10	jmp $1029			jmp 	NextCommand
.1735					IndStringWrite:
.1735	fa		plx				plx
.1736	b5 40		lda $40,x			lda 	NSMantissa0-1,x 			; copy address
.1738	85 2f		sta $2f				sta 	zTemp0
.173a	b5 4c		lda $4c,x			lda 	NSMantissa1-1,x
.173c	18		clc				clc
.173d	6d 07 04	adc $0407			adc 	variableStartPage
.1740	85 30		sta $30				sta 	zTemp0+1
.1742	20 0c 23	jsr $230c			jsr 	WriteStringZTemp0Sub 							; call write routine
.1745	ca		dex				dex 								; throw the address as well.
.1746	4c 29 10	jmp $1029			jmp 	NextCommand
.1749					CommandInput:
.1749	fa		plx				plx
.174a	5a		phy				phy 								; save Y
.174b	e8		inx				inx									; space on stack
.174c					_INError:
.174c	20 80 17	jsr $1780			jsr 	InputStringToBuffer 		; input from keyboard
.174f	a9 5f		lda #$5f			lda 	#((ReadBufferSize) & $FF)
.1751	85 2f		sta $2f				sta 	0+zTemp0
.1753	a9 04		lda #$04			lda 	#((ReadBufferSize) >> 8) & $FF
.1755	85 30		sta $30				sta 	1+zTemp0
.1757	20 1e 21	jsr $211e			jsr 	ValEvaluateZTemp0
.175a	b0 f0		bcs $174c			bcs 	_INError 					; failed, try again.
.175c	7a		ply				ply 								; restore Y
.175d	4c 29 10	jmp $1029			jmp 	NextCommand
.1760					CommandInputString:
.1760	fa		plx				plx
.1761	5a		phy				phy 								; save Y
.1762	20 80 17	jsr $1780			jsr 	InputStringToBuffer 		; input from keyboard
.1765	e8		inx				inx 								; make space on stack
.1766	20 0a 2e	jsr $2e0a			jsr 	FloatSetZero 				; store as string on stack
.1769	a9 5f		lda #$5f			lda 	#ReadBufferSize & $FF
.176b	95 41		sta $41,x			sta 	NSMantissa0,x
.176d	a9 04		lda #$04			lda 	#ReadBufferSize >> 8
.176f	95 4d		sta $4d,x			sta 	NSMantissa1,x
.1771	a9 40		lda #$40			lda 	#NSSString
.1773	95 35		sta $35,x			sta 	NSStatus,x
.1775	7a		ply				ply 								; restore Y
.1776	4c 29 10	jmp $1029			jmp 	NextCommand
.1779					CommandInputReset:
.1779	fa		plx				plx
.177a	9c 0a 04	stz $040a			stz 	InputBuffer
.177d	4c 29 10	jmp $1029			jmp 	NextCommand
.1780					InputStringToBuffer:
.1780	a9 ba		lda #$ba			lda 	#((InputBumpNext) & $FF)
.1782	8d 5f 05	sta $055f			sta 	0+ReadBumpNextVec
.1785	a9 17		lda #$17			lda 	#((InputBumpNext) >> 8) & $FF
.1787	8d 60 05	sta $0560			sta 	1+ReadBumpNextVec
.178a	a9 97		lda #$97			lda 	#((InputLookNext) & $FF)
.178c	8d 61 05	sta $0561			sta 	0+ReadLookNextVec
.178f	a9 17		lda #$17			lda 	#((InputLookNext) >> 8) & $FF
.1791	8d 62 05	sta $0562			sta 	1+ReadLookNextVec
.1794	4c 13 1c	jmp $1c13			jmp 	GetStringToBuffer
.1797					InputLookNext:
.1797	da		phx				phx
.1798					_ILNRetry:
.1798	ad 0a 04	lda $040a			lda 	InputBuffer 				; do we need to read more (e.g. the buffer is empty)
.179b	d0 08		bne $17a5			bne 	_ILNNotEmpty
.179d	20 be 17	jsr $17be			jsr 	InputGetNewLine 			; get a new line
.17a0	9c 5b 04	stz $045b			stz 	InputBufferPos 				; reset read position.
.17a3	80 f3		bra $1798			bra 	_ILNRetry
.17a5					_ILNNotEmpty:
.17a5	ae 5b 04	ldx $045b			ldx 	InputBufferPos 				; get head available character
.17a8	bd 0a 04	lda $040a,x			lda 	InputBuffer,x
.17ab	d0 08		bne $17b5			bne 	_ILNExit 					; if not EOS return it with CC.
.17ad					_ILNNextLine:
.17ad	9c 0a 04	stz $040a			stz 	InputBuffer 				; clear the buffer, indicating new line next time.
.17b0	38		sec				sec 								; return CS,Zero
.17b1	fa		plx				plx
.17b2	a9 0d		lda #$0d			lda 	#13
.17b4	60		rts				rts
.17b5					_ILNExit:
.17b5	fa		plx				plx
.17b6	c9 00		cmp #$00			cmp 	#0 							; return CC, Z Flag set.
.17b8	18		clc				clc
.17b9	60		rts				rts
.17ba					InputBumpNext:
.17ba	ee 5b 04	inc $045b			inc 	InputBufferPos
.17bd	60		rts				rts
.17be					InputGetNewLine:
.17be	48		pha				pha
.17bf	da		phx				phx
.17c0	5a		phy				phy
.17c1	a9 3f		lda #$3f			lda 	#"?"
.17c3	20 fd 17	jsr $17fd			jsr 	IGNLEchoIfScreen
.17c6	a0 00		ldy #$00			ldy 	#0 							; line position.
.17c8					_IGNLLoop:
.17c8	20 3d 1b	jsr $1b3d			jsr 	VectorGetCharacter 			; get a character
.17cb	c9 00		cmp #$00			cmp 	#0
.17cd	f0 f9		beq $17c8			beq 	_IGNLLoop
.17cf	c9 14		cmp #$14			cmp 	#$14 						; Backspace ?
.17d1	f0 11		beq $17e4			beq 	_IGNBackspace
.17d3	c9 0d		cmp #$0d			cmp 	#$0D 						; Return ?
.17d5	f0 17		beq $17ee			beq 	_IGNExit
.17d7	c0 50		cpy #$50			cpy 	#80 						; buffer full ?
.17d9	f0 ed		beq $17c8			beq 	_IGNLLoop
.17db	99 0a 04	sta $040a,y			sta 	InputBuffer,y
.17de	c8		iny				iny
.17df	20 fd 17	jsr $17fd			jsr 	IGNLEchoIfScreen
.17e2	80 e4		bra $17c8			bra 	_IGNLLoop
.17e4					_IGNBackspace:
.17e4	c0 00		cpy #$00			cpy 	#0
.17e6	f0 e0		beq $17c8			beq 	_IGNLLoop
.17e8	20 fd 17	jsr $17fd			jsr 	IGNLEchoIfScreen
.17eb	88		dey				dey
.17ec	80 da		bra $17c8			bra 	_IGNLLoop
.17ee					_IGNExit:
.17ee	20 fd 17	jsr $17fd			jsr 	IGNLEchoIfScreen
.17f1	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.17f3	99 0a 04	sta $040a,y			sta 	InputBuffer,y
.17f6	9c 5b 04	stz $045b			stz 	InputBufferPos 				; reset position to start of input buffer.
.17f9	7a		ply				ply
.17fa	fa		plx				plx
.17fb	68		pla				pla
.17fc	60		rts				rts
.17fd					IGNLEchoIfScreen:
.17fd	ae 5d 04	ldx $045d			ldx 	currentChannel
.1800	d0 03		bne $1805			bne 	_IGNLEExit
.1802	20 34 1b	jsr $1b34			jsr 	VectorPrintCharacter
.1805					_IGNLEExit:
.1805	60		rts				rts
.040a					InputBuffer:
>040a							.fill 	81
.045b					InputBufferPos:
>045b							.fill 	1
.1806					GetInteger8Bit:
.1806	20 45 2a	jsr $2a45			jsr 	FloatIntegerPart
.1809	b5 41		lda $41,x			lda 	NSMantissa0,x
.180b	60		rts				rts
.180c					GetInteger16Bit:
.180c	20 45 2a	jsr $2a45			jsr 	FloatIntegerPart
.180f	34 35		bit $35,x			bit 	NSStatus,x
.1811	30 09		bmi $181c			bmi 	Negate16Bit
.1813	b5 41		lda $41,x			lda 	NSMantissa0,x
.1815	85 2f		sta $2f				sta 	zTemp0
.1817	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.1819	85 30		sta $30				sta 	zTemp0+1
.181b	60		rts				rts
.181c					Negate16Bit:
.181c	38		sec				sec
.181d	a9 00		lda #$00			lda 	#0
.181f	f5 41		sbc $41,x			sbc 	NSMantissa0,x
.1821	95 41		sta $41,x			sta 	NSMantissa0,x
.1823	85 2f		sta $2f				sta 	zTemp0
.1825	a9 00		lda #$00			lda 	#0
.1827	f5 4d		sbc $4d,x			sbc 	NSMantissa1,x
.1829	95 4d		sta $4d,x			sta 	NSMantissa1,x
.182b	85 30		sta $30				sta 	zTemp0+1
.182d	60		rts				rts
.182e					UnaryJoy:
.182e	fa		plx				plx
.182f	20 06 18	jsr $1806			jsr 	GetInteger8Bit 				; port #
.1832	48		pha				pha 								; zero the result.
.1833	20 0a 2e	jsr $2e0a			jsr 	FloatSetZero
.1836	68		pla				pla
.1837	5a		phy				phy
.1838	da		phx				phx
.1839	20 56 ff	jsr $ff56			jsr 	X16_joystick_get 			; read joystick.
.183c	c0 00		cpy #$00			cpy 	#0 							; check no hardware
.183e	d0 10		bne $1850			bne 	_UJNoHardware
.1840	a8		tay				tay 								; move XA -> AY
.1841	8a		txa				txa
.1842	fa		plx				plx 								; we can update it now.
.1843	49 ff		eor #$ff			eor 	#$FF
.1845	95 4d		sta $4d,x			sta 	NSMantissa1,x
.1847	98		tya				tya
.1848	49 ff		eor #$ff			eor 	#$FF
.184a	95 41		sta $41,x			sta 	NSMantissa0,x
.184c	7a		ply				ply 								; restore Y
.184d	4c 29 10	jmp $1029			jmp 	NextCommand
.1850					_UJNoHardware:
.1850	fa		plx				plx
.1851	7a		ply				ply
.1852	a9 01		lda #$01			lda 	#1 							; set result to -1
.1854	20 0c 2e	jsr $2e0c			jsr 	FloatSetByte
.1857	20 cc 2d	jsr $2dcc			jsr 	FloatNegate
.185a	4c 29 10	jmp $1029			jmp 	NextCommand
.185d					UnaryLen:
.185d	fa		plx				plx
.185e	b5 41		lda $41,x			lda 	NSMantissa0,x 				; string address.
.1860	85 2f		sta $2f				sta 	zTemp0
.1862	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.1864	85 30		sta $30				sta 	zTemp0+1
.1866	b2 2f		lda ($2f)			lda 	(zTemp0) 					; get length
.1868	20 0c 2e	jsr $2e0c			jsr 	FloatSetByte
.186b	4c 29 10	jmp $1029			jmp 	NextCommand
.186e					LinkFloatAdd:
.186e	fa		plx				plx
.186f	5a		phy			phy
.1870	20 2e 28	jsr $282e		jsr	FloatAdd
.1873	7a		ply			ply
.1874	4c 29 10	jmp $1029			jmp 	NextCommand
.1877					LinkFloatSubtract:
.1877	fa		plx				plx
.1878	5a		phy			phy
.1879	20 28 28	jsr $2828		jsr	FloatSubtract
.187c	7a		ply			ply
.187d	4c 29 10	jmp $1029			jmp 	NextCommand
.1880					LinkFloatMultiply:
.1880	fa		plx				plx
.1881	5a		phy			phy
.1882	20 ca 2a	jsr $2aca		jsr	FloatMultiply
.1885	7a		ply			ply
.1886	4c 29 10	jmp $1029			jmp 	NextCommand
.1889					LinkFloatDivide:
.1889	fa		plx				plx
.188a	5a		phy			phy
.188b	20 53 29	jsr $2953		jsr	FloatDivide
.188e	b0 5c		bcs $18ec		bcs	DivZeroError
.1890	7a		ply			ply
.1891	4c 29 10	jmp $1029			jmp 	NextCommand
.1894					LinkFloatPower:
.1894	fa		plx				plx
.1895	5a		phy			phy
.1896	20 d3 30	jsr $30d3		jsr	FloatPower
.1899	b0 4e		bcs $18e9		bcs	MapRangeError
.189b	7a		ply			ply
.189c	4c 29 10	jmp $1029			jmp 	NextCommand
.189f					LinkCompareGreater:
.189f	fa		plx				plx
.18a0	5a		phy			phy
.18a1	20 d7 28	jsr $28d7		jsr	CompareGreater
.18a4	7a		ply			ply
.18a5	4c 29 10	jmp $1029			jmp 	NextCommand
.18a8					LinkCompareEqual:
.18a8	fa		plx				plx
.18a9	5a		phy			phy
.18aa	20 b9 28	jsr $28b9		jsr	CompareEqual
.18ad	7a		ply			ply
.18ae	4c 29 10	jmp $1029			jmp 	NextCommand
.18b1					LinkCompareLess:
.18b1	fa		plx				plx
.18b2	5a		phy			phy
.18b3	20 cf 28	jsr $28cf		jsr	CompareLess
.18b6	7a		ply			ply
.18b7	4c 29 10	jmp $1029			jmp 	NextCommand
.18ba					LinkCompareGreaterEqual:
.18ba	fa		plx				plx
.18bb	5a		phy			phy
.18bc	20 e7 28	jsr $28e7		jsr	CompareGreaterEqual
.18bf	7a		ply			ply
.18c0	4c 29 10	jmp $1029			jmp 	NextCommand
.18c3					LinkCompareNotEqual:
.18c3	fa		plx				plx
.18c4	5a		phy			phy
.18c5	20 c9 28	jsr $28c9		jsr	CompareNotEqual
.18c8	7a		ply			ply
.18c9	4c 29 10	jmp $1029			jmp 	NextCommand
.18cc					LinkCompareLessEqual:
.18cc	fa		plx				plx
.18cd	5a		phy			phy
.18ce	20 df 28	jsr $28df		jsr	CompareLessEqual
.18d1	7a		ply			ply
.18d2	4c 29 10	jmp $1029			jmp 	NextCommand
.18d5					LinkFloatIntegerPartDown:
.18d5	fa		plx				plx
.18d6	5a		phy			phy
.18d7	20 69 2a	jsr $2a69		jsr	FloatIntegerPartDown
.18da	7a		ply			ply
.18db	4c 29 10	jmp $1029			jmp 	NextCommand
.18de					LinkFloatSquareRoot:
.18de	fa		plx				plx
.18df	5a		phy			phy
.18e0	20 55 31	jsr $3155		jsr	FloatSquareRoot
.18e3	b0 04		bcs $18e9		bcs	MapRangeError
.18e5	7a		ply			ply
.18e6	4c 29 10	jmp $1029			jmp 	NextCommand
.18e9					MapRangeError:
.18e9	4c a7 26	jmp $26a7		jmp	ErrorV_range
.18ec					DivZeroError:
.18ec	4c 30 27	jmp $2730		jmp	ErrorV_divzero
.18ef					LinkFloatLogarithm:
.18ef	fa		plx				plx
.18f0	5a		phy			phy
.18f1	20 5f 30	jsr $305f		jsr	FloatLogarithm
.18f4	b0 f3		bcs $18e9		bcs	MapRangeError
.18f6	7a		ply			ply
.18f7	4c 29 10	jmp $1029			jmp 	NextCommand
.18fa					LinkFloatExponent:
.18fa	fa		plx				plx
.18fb	5a		phy			phy
.18fc	20 5c 2f	jsr $2f5c		jsr	FloatExponent
.18ff	7a		ply			ply
.1900	4c 29 10	jmp $1029			jmp 	NextCommand
.1903					LinkFloatCosine:
.1903	fa		plx				plx
.1904	5a		phy			phy
.1905	20 50 2f	jsr $2f50		jsr	FloatCosine
.1908	7a		ply			ply
.1909	4c 29 10	jmp $1029			jmp 	NextCommand
.190c					LinkFloatSine:
.190c	fa		plx				plx
.190d	5a		phy			phy
.190e	20 f0 30	jsr $30f0		jsr	FloatSine
.1911	7a		ply			ply
.1912	4c 29 10	jmp $1029			jmp 	NextCommand
.1915					LinkFloatTangent:
.1915	fa		plx				plx
.1916	5a		phy			phy
.1917	20 61 31	jsr $3161		jsr	FloatTangent
.191a	7a		ply			ply
.191b	4c 29 10	jmp $1029			jmp 	NextCommand
.191e					LinkFloatArcTan:
.191e	fa		plx				plx
.191f	5a		phy			phy
.1920	20 35 2e	jsr $2e35		jsr	FloatArcTan
.1923	b0 c4		bcs $18e9		bcs	MapRangeError
.1925	7a		ply			ply
.1926	4c 29 10	jmp $1029			jmp 	NextCommand
.1929					LinkFloatCompare:
.1929	fa		plx				plx
.192a	5a		phy			phy
.192b	20 ef 28	jsr $28ef		jsr	FloatCompare
.192e	7a		ply			ply
.192f	4c 29 10	jmp $1029			jmp 	NextCommand
.1932					LinkDivideInt32:
.1932	fa		plx				plx
.1933	5a		phy			phy
.1934	20 7d 29	jsr $297d		jsr	DivideInt32
.1937	b0 b0		bcs $18e9		bcs	MapRangeError
.1939	7a		ply			ply
.193a	4c 29 10	jmp $1029			jmp 	NextCommand
.193d					StackSaveCurrentPosition:
.193d	20 94 10	jsr $1094			jsr 	FixUpY 						; codePtr,Y is corrected so Y = 0
.1940	5a		phy				phy
.1941	a0 02		ldy #$02			ldy 	#2
.1943	a5 28		lda $28				lda 	codePtr
.1945	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.1947	c8		iny				iny
.1948	a5 29		lda $29				lda 	codePtr+1
.194a	91 24		sta ($24),y			sta 	(runtimeStackPtr),y
.194c	7a		ply				ply
.194d	60		rts				rts
.194e					StackLoadCurrentPosition:
.194e	a0 02		ldy #$02			ldy 	#2
.1950	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1952	85 28		sta $28				sta 	codePtr
.1954	c8		iny				iny
.1955	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1957	85 29		sta $29				sta 	codePtr+1
.1959	a0 00		ldy #$00			ldy 	#0
.195b	60		rts				rts
.195c					XCommandMouse:
.195c	fa		plx				plx
.195d	20 06 18	jsr $1806			jsr 	GetInteger8Bit 				; mouse control.
.1960	ca		dex				dex
.1961	da		phx				phx
.1962	5a		phy				phy
.1963	48		pha				pha
.1964	38		sec				sec 								; get screen resolution
.1965	20 5f ff	jsr $ff5f			jsr 	X16_screen_mode
.1968	68		pla				pla
.1969	20 68 ff	jsr $ff68			jsr 	X16_mouse_config 			; config the mouse
.196c	7a		ply				ply
.196d	fa		plx				plx
.196e	4c 29 10	jmp $1029			jmp 	NextCommand
.1971					XUnaryMB:
.1971	fa		plx				plx
.1972	20 a0 19	jsr $19a0			jsr 	XUnaryMouseCommon
.1975	a5 33		lda $33				lda 	zTemp2
.1977	e8		inx				inx
.1978	20 0c 2e	jsr $2e0c			jsr 	FloatSetByte
.197b	4c 29 10	jmp $1029			jmp 	NextCommand
.197e					XUnaryMX:
.197e	fa		plx				plx
.197f	20 a0 19	jsr $19a0			jsr 	XUnaryMouseCommon
.1982	a5 2f		lda $2f				lda 	zTemp0
.1984	e8		inx				inx
.1985	20 0c 2e	jsr $2e0c			jsr 	FloatSetByte
.1988	a5 30		lda $30				lda 	zTemp0+1
.198a	95 4d		sta $4d,x			sta 	NSMantissa1,x
.198c	4c 29 10	jmp $1029			jmp 	NextCommand
.198f					XUnaryMY:
.198f	fa		plx				plx
.1990	20 a0 19	jsr $19a0			jsr 	XUnaryMouseCommon
.1993	a5 31		lda $31				lda 	zTemp1
.1995	e8		inx				inx
.1996	20 0c 2e	jsr $2e0c			jsr 	FloatSetByte
.1999	a5 32		lda $32				lda 	zTemp1+1
.199b	95 4d		sta $4d,x			sta 	NSMantissa1,x
.199d	4c 29 10	jmp $1029			jmp 	NextCommand
.19a0					XUnaryMouseCommon:
.19a0	da		phx				phx
.19a1	5a		phy				phy
.19a2	a2 2f		ldx #$2f			ldx 	#zTemp0
.19a4	20 6b ff	jsr $ff6b			jsr 	X16_mouse_get
.19a7	85 33		sta $33				sta 	zTemp2
.19a9	7a		ply				ply
.19aa	fa		plx				plx
.19ab	60		rts				rts
.19ac					NegateTOS:
.19ac	fa		plx				plx
.19ad	20 cc 2d	jsr $2dcc			jsr 	FloatNegate
.19b0	4c 29 10	jmp $1029			jmp 	NextCommand
.19b3					CommandNewLine:
.19b3	fa		plx				plx
.19b4	9c 68 05	stz $0568			stz 	stringInitialised
.19b7	a2 ff		ldx #$ff			ldx 	#$FF
.19b9	4c 29 10	jmp $1029			jmp 	NextCommand
.19bc					CommandNext:
.19bc	fa		plx				plx
.19bd					_CNRetry:
.19bd	a9 d3		lda #$d3			lda 	#FRAME_FOR 					; find the FOR
.19bf	20 21 15	jsr $1521			jsr 	StackFindFrame
.19c2	20 94 10	jsr $1094			jsr 	FixUpY 						; so we can use Y
.19c5	b5 41		lda $41,x			lda 	NSMantissa0,x 				; check no index variable, both are $FF
.19c7	35 4d		and $4d,x			and 	NSMantissa1,x
.19c9	c9 ff		cmp #$ff			cmp 	#$FF
.19cb	f0 16		beq $19e3			beq 	_CNNoIndexVariable
.19cd	b5 41		lda $41,x			lda 	NSMantissa0,x
.19cf	a0 05		ldy #$05			ldy 	#5
.19d1	d1 24		cmp ($24),y			cmp 	(runtimeStackPtr),y
.19d3	d0 07		bne $19dc			bne 	_CNNIndexFail
.19d5	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.19d7	c8		iny				iny
.19d8	d1 24		cmp ($24),y			cmp 	(runtimeStackPtr),y
.19da	f0 07		beq $19e3			beq 	_CNNoIndexVariable
.19dc					_CNNIndexFail:
.19dc	a0 00		ldy #$00			ldy 	#0 							; so we don't fix up Y again !
.19de	20 13 15	jsr $1513			jsr 	StackCloseFrame 			; close this frame
.19e1	80 da		bra $19bd			bra 	_CNRetry
.19e3					_CNNoIndexVariable:
.19e3	ca		dex				dex
.19e4	a0 04		ldy #$04			ldy 	#4 							; check for optimised NEXT
.19e6	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.19e8	29 40		and #$40			and 	#$40	 					; bit 6
.19ea	d0 55		bne $1a41			bne 	_CNOptimisedNext
.19ec	a0 05		ldy #$05			ldy 	#5 							; copy address to zTemp0, save for write back
.19ee	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.19f0	48		pha				pha
.19f1	85 2f		sta $2f				sta 	zTemp0
.19f3	c8		iny				iny
.19f4	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.19f6	18		clc				clc
.19f7	6d 07 04	adc $0407			adc 	variableStartPage 			; point to variable page.
.19fa	48		pha				pha
.19fb	85 30		sta $30				sta 	zTemp0+1
.19fd	20 b6 1c	jsr $1cb6			jsr 	ReadFloatZTemp0Sub 			; read current index onto stack.
.1a00	a0 07		ldy #$07			ldy 	#7  						; read step onto stack +1
.1a02	e8		inx				inx
.1a03	20 84 1a	jsr $1a84			jsr 	CopyOffsetYToTOS
.1a06	20 2e 28	jsr $282e			jsr 	FloatAdd
.1a09	68		pla				pla 								; restore address
.1a0a	85 30		sta $30				sta 	zTemp0+1
.1a0c	68		pla				pla
.1a0d	85 2f		sta $2f				sta 	zTemp0
.1a0f	20 91 22	jsr $2291			jsr 	WriteFloatZTemp0Sub			; write float.
.1a12	e8		inx				inx  								; recover written
.1a13	e8		inx				inx 								; load offset
.1a14	a0 0d		ldy #$0d			ldy 	#13
.1a16	20 84 1a	jsr $1a84			jsr 	CopyOffsetYToTOS
.1a19	20 ef 28	jsr $28ef			jsr 	FloatCompare 				; and compare the floats.
.1a1c	ca		dex				dex 								; throw result (in NSMantissa0+1)
.1a1d	a0 0c		ldy #$0c			ldy 	#12 						; get the sign of the step.
.1a1f	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1a21	30 08		bmi $1a2b			bmi 	_CNDownStep
.1a23	b5 42		lda $42,x			lda 	NSMantissa0+1,x 			; get comparator
.1a25	c9 01		cmp #$01			cmp 	#1 							; gone higher
.1a27	f0 10		beq $1a39			beq 	_CNExitFor 					; if so exit the loop
.1a29	80 06		bra $1a31			bra 	_CNLoopBack
.1a2b					_CNDownStep:
.1a2b	b5 42		lda $42,x			lda 	NSMantissa0+1,x 			; get comparator
.1a2d	c9 ff		cmp #$ff			cmp 	#255 						; gone lower
.1a2f	f0 08		beq $1a39			beq 	_CNExitFor
.1a31					_CNLoopBack:
.1a31	20 4e 19	jsr $194e			jsr 	StackLoadCurrentPosition 	; loop back
.1a34	a0 00		ldy #$00			ldy 	#0
.1a36	4c 29 10	jmp $1029			jmp 	NextCommand
.1a39					_CNExitFor:
.1a39	20 13 15	jsr $1513			jsr 	StackCloseFrame 			; remove the frame and exit
.1a3c	a0 00		ldy #$00			ldy 	#0
.1a3e	4c 29 10	jmp $1029			jmp 	NextCommand
.1a41					_CNOptimisedNext:
.1a41	a0 05		ldy #$05			ldy 	#5 							; copy address to zTemp0, save for write back
.1a43	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1a45	85 2f		sta $2f				sta 	zTemp0
.1a47	c8		iny				iny
.1a48	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1a4a	18		clc				clc
.1a4b	6d 07 04	adc $0407			adc 	variableStartPage 			; point to variable page.
.1a4e	85 30		sta $30				sta 	zTemp0+1
.1a50	a0 07		ldy #$07			ldy 	#7 							; STEP value
.1a52	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1a54	a0 ff		ldy #$ff			ldy 	#$FF
.1a56	18		clc				clc
.1a57					_CNOIncrement:
.1a57	c8		iny				iny
.1a58	71 2f		adc ($2f),y			adc 	(zTemp0),y
.1a5a	91 2f		sta ($2f),y			sta 	(zTemp0),y
.1a5c	f0 f9		beq $1a57			beq 	_CNOIncrement
.1a5e	18		clc				clc
.1a5f	a5 24		lda $24				lda 	runtimeStackPtr
.1a61	69 0d		adc #$0d			adc 	#13
.1a63	85 31		sta $31				sta 	zTemp1
.1a65	a5 25		lda $25				lda 	runtimeStackPtr+1
.1a67	69 00		adc #$00			adc 	#0
.1a69	85 32		sta $32				sta 	zTemp1+1
.1a6b	a0 00		ldy #$00			ldy 	#0
.1a6d	b1 31		lda ($31),y			lda 	(zTemp1),y 					; byte 0
.1a6f	d1 2f		cmp ($2f),y			cmp 	(zTemp0),y
.1a71	c8		iny				iny
.1a72	b1 31		lda ($31),y			lda 	(zTemp1),y 					; byte 1
.1a74	f1 2f		sbc ($2f),y			sbc 	(zTemp0),y
.1a76	c8		iny				iny
.1a77	b1 31		lda ($31),y			lda 	(zTemp1),y 					; byte 2
.1a79	f1 2f		sbc ($2f),y			sbc 	(zTemp0),y
.1a7b	c8		iny				iny
.1a7c	b1 31		lda ($31),y			lda 	(zTemp1),y 					; byte 3
.1a7e	f1 2f		sbc ($2f),y			sbc 	(zTemp0),y
.1a80	90 b7		bcc $1a39			bcc	 	_CNExitFor
.1a82	80 ad		bra $1a31			bra 	_CNLoopBack
.1a84					CopyOffsetYToTOS:
.1a84	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1a86	95 41		sta $41,x			sta 	NSMantissa0,x
.1a88	c8		iny				iny
.1a89	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1a8b	95 4d		sta $4d,x			sta 	NSMantissa1,x
.1a8d	c8		iny				iny
.1a8e	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1a90	95 59		sta $59,x			sta 	NSMantissa2,x
.1a92	c8		iny				iny
.1a93	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1a95	95 65		sta $65,x			sta 	NSMantissa3,x
.1a97	c8		iny				iny
.1a98	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1a9a	95 71		sta $71,x			sta 	NSExponent,x
.1a9c	c8		iny				iny
.1a9d	b1 24		lda ($24),y			lda 	(runtimeStackPtr),y
.1a9f	95 35		sta $35,x			sta 	NSStatus,x
.1aa1	60		rts				rts
.1aa2	4c 29 10	jmp $1029			jmp 	NextCommand
.1aa5					NotTOS:
.1aa5	fa		plx				plx
.1aa6	20 45 2a	jsr $2a45			jsr 	FloatIntegerPart
.1aa9	74 59		stz $59,x			stz 	NSMantissa2,x 				; chop down to 16 bit.
.1aab	74 65		stz $65,x			stz 	NSMantissa3,x
.1aad	20 cc 2d	jsr $2dcc			jsr 	FloatNegate		 			; negate
.1ab0	e8		inx				inx 								; and subtract 1.
.1ab1	a9 01		lda #$01			lda 	#1
.1ab3	20 0c 2e	jsr $2e0c			jsr 	FloatSetByte
.1ab6	20 28 28	jsr $2828			jsr 	FloatSubtract
.1ab9					_NotTOSSkip:
.1ab9	4c 29 10	jmp $1029			jmp 	NextCommand
.1abc					CommandOn:
.1abc	fa		plx				plx
.1abd	20 06 18	jsr $1806			jsr 	GetInteger8Bit 				; get the integer part, the ON x GOTO bit
.1ac0	8d 5c 04	sta $045c			sta 	onCount 					; save it.
.1ac3	20 94 10	jsr $1094			jsr 	FixUpY 						; Y = 0
.1ac6					_CONFind:
.1ac6	ce 5c 04	dec $045c			dec 	onCount 					; reached zero, do this one
.1ac9	f0 0c		beq $1ad7			beq 	_CONFound
.1acb	c8		iny				iny 								; skip over the token (GOTO or GOSUB page, and line #)
.1acc	c8		iny				iny
.1acd	c8		iny				iny
.1ace	c8		iny				iny
.1acf	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a moreon after it, if so we can keep going.
.1ad1	c8		iny				iny
.1ad2	c9 aa		cmp #$aa			cmp 	#PCD_MOREON
.1ad4	f0 f0		beq $1ac6			beq 	_CONFind
.1ad6	88		dey				dey 								; point to character after last GOTO/GOSUB
.1ad7					_CONFound:
.1ad7	4c 29 10	jmp $1029			jmp 	NextCommand
.1ada					CommandMoreOn:
.1ada	fa		plx				plx
.1adb	c8		iny				iny 								; so it goes to the first non-goto/gosub
.1adc	c8		iny				iny
.1add	c8		iny				iny
.1ade	4c 29 10	jmp $1029			jmp 	NextCommand
.045c					onCount:
>045c							.fill 	1
.1ae1					UnaryPeek:
.1ae1	fa		plx				plx
.1ae2	20 0c 18	jsr $180c			jsr 	GetInteger16Bit
.1ae5	da		phx				phx
.1ae6	5a		phy				phy
.1ae7	a6 2f		ldx $2f				ldx 	zTemp0
.1ae9	a4 30		ldy $30				ldy 	zTemp0+1
.1aeb	20 22 24	jsr $2422			jsr 	XPeekMemory
.1aee	7a		ply				ply
.1aef	fa		plx				plx
.1af0	20 0c 2e	jsr $2e0c			jsr 	FloatSetByte
.1af3	4c 29 10	jmp $1029			jmp 	NextCommand
.1af6					CommandPOKE:
.1af6	fa		plx				plx
.1af7	da		phx				phx 								; save XY
.1af8	5a		phy				phy
.1af9	20 06 18	jsr $1806			jsr 	GetInteger8Bit 				; get byte to POKE and save it
.1afc	48		pha				pha
.1afd	b5 4c		lda $4c,x			lda 	NSMantissa1-1,x 			; YX = address from Mantissa next up
.1aff	a8		tay				tay
.1b00	b5 40		lda $40,x			lda 	NSMantissa0-1,x
.1b02	aa		tax				tax
.1b03	68		pla				pla
.1b04	20 0e 24	jsr $240e			jsr 	XPokeMemory
.1b07	7a		ply				ply 								; restore YX and drop 2
.1b08	fa		plx				plx
.1b09	ca		dex				dex
.1b0a	ca		dex				dex
.1b0b	4c 29 10	jmp $1029			jmp 	NextCommand
.1b0e					UnaryPos:
.1b0e	fa		plx				plx
.1b0f	20 a1 23	jsr $23a1			jsr 	XGetHPos
.1b12	20 0c 2e	jsr $2e0c			jsr 	FloatSetByte
.1b15	4c 29 10	jmp $1029			jmp 	NextCommand
.1b18					GetChannel:
.1b18	fa		plx				plx
.1b19	ad 5d 04	lda $045d			lda 	currentChannel
.1b1c	e8		inx				inx
.1b1d	20 0c 2e	jsr $2e0c			jsr 	FloatSetByte
.1b20	4c 29 10	jmp $1029			jmp 	NextCommand
.1b23					SetChannel:
.1b23	fa		plx				plx
.1b24	20 45 2a	jsr $2a45			jsr 	FloatIntegerPart
.1b27	b5 41		lda $41,x			lda 	NSMantissa0,x
.1b29	8d 5d 04	sta $045d			sta 	currentChannel
.1b2c	ca		dex				dex
.1b2d	4c 29 10	jmp $1029			jmp 	NextCommand
.1b30					SetDefaultChannel:
.1b30	9c 5d 04	stz $045d			stz 	currentChannel
.1b33	60		rts				rts
.1b34					VectorPrintCharacter:
.1b34	da		phx				phx
.1b35	ae 5d 04	ldx $045d			ldx 	currentChannel
.1b38	20 4c 24	jsr $244c			jsr 	XPrintCharacterToChannel
.1b3b	fa		plx				plx
.1b3c	60		rts				rts
.1b3d					VectorGetCharacter:
.1b3d	da		phx				phx
.1b3e	ae 5d 04	ldx $045d			ldx 	currentChannel
.1b41	20 85 23	jsr $2385			jsr 	XGetCharacterFromChannel
.1b44	fa		plx				plx
.1b45	60		rts				rts
.045d					currentChannel:
>045d							.fill 	1
.1b46					PrintNumber:
.1b46	fa		plx				plx
.1b47	a9 07		lda #$07			lda 	#7
.1b49	20 f2 2c	jsr $2cf2			jsr 	FloatToString 				; to number in decimal buffer
.1b4c	ca		dex				dex 								; drop
.1b4d	da		phx				phx
.1b4e	a2 00		ldx #$00			ldx 	#0 							; print buffer.
.1b50					_PNLoop:
.1b50	bd 94 05	lda $0594,x			lda 	decimalBuffer,x
.1b53	20 34 1b	jsr $1b34			jsr 	VectorPrintCharacter
.1b56	e8		inx				inx
.1b57	bd 94 05	lda $0594,x			lda	 	decimalBuffer,x
.1b5a	d0 f4		bne $1b50			bne 	_PNLoop
.1b5c	a9 20		lda #$20			lda 	#32 						; trailing space
.1b5e	20 34 1b	jsr $1b34			jsr 	VectorPrintCharacter
.1b61	fa		plx				plx
.1b62	4c 29 10	jmp $1029			jmp 	NextCommand
.1b65					PrintString:
.1b65	fa		plx				plx
.1b66	b5 41		lda $41,x			lda 	NSMantissa0,x 				; point zTemp0 to string
.1b68	85 2f		sta $2f				sta 	zTemp0
.1b6a	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.1b6c	85 30		sta $30				sta 	zTemp0+1
.1b6e	ca		dex				dex 								; drop
.1b6f	da		phx				phx
.1b70	5a		phy				phy
.1b71	b2 2f		lda ($2f)			lda 	(zTemp0) 					; X = count
.1b73	aa		tax				tax
.1b74	a0 01		ldy #$01			ldy 	#1 							; Y = position
.1b76					_PSLoop:
.1b76	e0 00		cpx #$00			cpx 	#0 							; complete ?
.1b78	f0 09		beq $1b83			beq 	_PSExit
.1b7a	ca		dex				dex 								; dec count
.1b7b	b1 2f		lda ($2f),y			lda 	(zTemp0),y 					; print char and bump
.1b7d	20 34 1b	jsr $1b34			jsr 	VectorPrintCharacter
.1b80	c8		iny				iny
.1b81	80 f3		bra $1b76			bra 	_PSLoop
.1b83					_PSExit:
.1b83	7a		ply				ply
.1b84	fa		plx				plx
.1b85	4c 29 10	jmp $1029			jmp 	NextCommand
.1b88					CommandPushN:
.1b88	fa		plx				plx
.1b89	e8		inx				inx 								; next slot on stack
.1b8a	b1 28		lda ($28),y			lda 	(codePtr),y 				; exponent
.1b8c	95 71		sta $71,x			sta 	NSExponent,x
.1b8e	c8		iny				iny
.1b8f	b1 28		lda ($28),y			lda 	(codePtr),y 				; mantissa
.1b91	95 41		sta $41,x			sta 	NSMantissa0,x
.1b93	c8		iny				iny
.1b94	b1 28		lda ($28),y			lda 	(codePtr),y
.1b96	95 4d		sta $4d,x			sta 	NSMantissa1,x
.1b98	c8		iny				iny
.1b99	b1 28		lda ($28),y			lda 	(codePtr),y
.1b9b	95 59		sta $59,x			sta 	NSMantissa2,x
.1b9d	c8		iny				iny
.1b9e	b1 28		lda ($28),y			lda 	(codePtr),y
.1ba0	48		pha				pha
.1ba1	29 7f		and #$7f			and 	#$7F
.1ba3	95 65		sta $65,x			sta 	NSMantissa3,x
.1ba5	68		pla				pla 								; sign in mantissa3:7
.1ba6	29 80		and #$80			and 	#$80
.1ba8	95 35		sta $35,x			sta 	NSStatus,x
.1baa	c8		iny				iny
.1bab	4c 29 10	jmp $1029			jmp 	NextCommand
.1bae					CommandPushS:
.1bae	fa		plx				plx
.1baf	e8		inx				inx 								; next slot on stack
.1bb0	18		clc				clc
.1bb1	98		tya				tya
.1bb2	65 28		adc $28				adc 	codePtr 					; the string is inline
.1bb4	95 41		sta $41,x			sta 	NSMantissa0,x
.1bb6	a5 29		lda $29				lda 	codePtr+1
.1bb8	69 00		adc #$00			adc 	#0
.1bba	95 4d		sta $4d,x			sta 	NSMantissa1,x
.1bbc	74 59		stz $59,x			stz 	NSMantissa2,x
.1bbe	74 65		stz $65,x			stz 	NSMantissa3,x
.1bc0	a9 40		lda #$40			lda 	#NSSString
.1bc2	95 35		sta $35,x			sta 	NSStatus,x
.1bc4	98		tya				tya 								; string length +1 added to Y
.1bc5	38		sec				sec
.1bc6	71 28		adc ($28),y			adc 	(codePtr),y 				; next instruction
.1bc8	a8		tay				tay
.1bc9	4c 29 10	jmp $1029			jmp 	NextCommand
.1bcc					CommandRead:
.1bcc	fa		plx				plx
.1bcd	5a		phy				phy 								; save Y
.1bce	20 ff 1b	jsr $1bff			jsr 	ReadStringToBuffer 			; read element into buffer
.1bd1	e8		inx				inx									; space on stack
.1bd2	a9 5f		lda #$5f			lda 	#((ReadBufferSize) & $FF)
.1bd4	85 2f		sta $2f				sta 	0+zTemp0
.1bd6	a9 04		lda #$04			lda 	#((ReadBufferSize) >> 8) & $FF
.1bd8	85 30		sta $30				sta 	1+zTemp0
.1bda	20 1e 21	jsr $211e			jsr 	ValEvaluateZTemp0
.1bdd	b0 04		bcs $1be3			bcs 	_CRError 					; failed
.1bdf	7a		ply				ply 								; restore Y
.1be0	4c 29 10	jmp $1029			jmp 	NextCommand
.1be3					_CRError:
.1be3	4c b7 26	jmp $26b7		jmp	ErrorV_value
.1be6					CommandReadString:
.1be6	fa		plx				plx
.1be7	5a		phy				phy 								; save Y
.1be8	20 ff 1b	jsr $1bff			jsr 	ReadStringToBuffer 			; read text
.1beb	e8		inx				inx 								; make space on stack
.1bec	20 0a 2e	jsr $2e0a			jsr 	FloatSetZero 				; store as string on stack
.1bef	a9 5f		lda #$5f			lda 	#ReadBufferSize & $FF
.1bf1	95 41		sta $41,x			sta 	NSMantissa0,x
.1bf3	a9 04		lda #$04			lda 	#ReadBufferSize >> 8
.1bf5	95 4d		sta $4d,x			sta 	NSMantissa1,x
.1bf7	a9 40		lda #$40			lda 	#NSSString
.1bf9	95 35		sta $35,x			sta 	NSStatus,x
.1bfb	7a		ply				ply 								; restore Y
.1bfc	4c 29 10	jmp $1029			jmp 	NextCommand
.1bff					ReadStringToBuffer:
.1bff	a9 92		lda #$92			lda 	#((ReadBumpNext) & $FF)
.1c01	8d 5f 05	sta $055f			sta 	0+ReadBumpNextVec
.1c04	a9 1c		lda #$1c			lda 	#((ReadBumpNext) >> 8) & $FF
.1c06	8d 60 05	sta $0560			sta 	1+ReadBumpNextVec
.1c09	a9 65		lda #$65			lda 	#((ReadLookNext) & $FF)
.1c0b	8d 61 05	sta $0561			sta 	0+ReadLookNextVec
.1c0e	a9 1c		lda #$1c			lda 	#((ReadLookNext) >> 8) & $FF
.1c10	8d 62 05	sta $0562			sta 	1+ReadLookNextVec
.1c13					GetStringToBuffer:
.1c13	20 62 1c	jsr $1c62			jsr		GetLookNext 				; skip all leading spaces.
.1c16	f0 44		beq $1c5c			beq 	_RBError 					; end of data
.1c18	b0 f9		bcs $1c13			bcs 	GetStringToBuffer 			; switched to new data line.
.1c1a	c9 20		cmp #$20			cmp 	#' ' 						; non space got something
.1c1c	b0 05		bcs $1c23			bcs 	_RBNoSpace
.1c1e	20 5f 1c	jsr $1c5f			jsr 	GetBumpNext 				; consume space and loop round.
.1c21	80 f0		bra $1c13			bra 	GetStringToBuffer
.1c23					_RBNoSpace:
.1c23	9c 5f 04	stz $045f			stz 	ReadBufferSize 				; empty the buffer.
.1c26	c9 22		cmp #$22			cmp 	#'"' 						; is it a '"'
.1c28	d0 08		bne $1c32			bne 	_RBCommaSep
.1c2a	8d 5e 04	sta $045e			sta 	ReadSep 					; use as a seperator
.1c2d	20 5f 1c	jsr $1c5f			jsr 	GetBumpNext 				; consume the '"'
.1c30	80 05		bra $1c37			bra 	_RBGetText
.1c32					_RBCommaSep:
.1c32	a9 2c		lda #$2c			lda 	#","						; get till comma
.1c34	8d 5e 04	sta $045e			sta 	ReadSep
.1c37					_RBGetText:
.1c37	20 62 1c	jsr $1c62			jsr 	GetLookNext 				; what follows
.1c3a	b0 18		bcs $1c54			bcs 	_RBEndGet 					; if new DATA line, the end without consumption
.1c3c	20 5f 1c	jsr $1c5f			jsr 	GetBumpNext 				; consume it whatever
.1c3f	cd 5e 04	cmp $045e			cmp 	ReadSep 					; if found the seperator.
.1c42	f0 10		beq $1c54			beq 	_RBEndGet 					; exit after consumption
.1c44	da		phx				phx
.1c45	ae 5f 04	ldx $045f			ldx 	ReadBufferSize 				; copy into buffer.
.1c48	ee 5f 04	inc $045f			inc 	ReadBufferSize
.1c4b	9d 60 04	sta $0460,x			sta 	ReadBuffer,x
.1c4e	9e 61 04	stz $0461,x			stz 	ReadBuffer+1,x 				; make ASCIIZ as well.
.1c51	fa		plx				plx
.1c52	80 e3		bra $1c37			bra 	_RBGetText
.1c54					_RBEndGet:
.1c54	c9 22		cmp #$22			cmp 	#'"'
.1c56	d0 03		bne $1c5b			bne 	_RBNotQuote
.1c58	20 5f 1c	jsr $1c5f			jsr 	GetBumpNext
.1c5b					_RBNotQuote:
.1c5b	60		rts				rts
.1c5c					_RBError:
.1c5c	4c 6c 27	jmp $276c		jmp	ErrorV_data
.1c5f					GetBumpNext:
.1c5f	6c 5f 05	jmp ($055f)			jmp 	(ReadBumpNextVec)
.1c62					GetLookNext:
.1c62	6c 61 05	jmp ($0561)			jmp 	(ReadLookNextVec)
.1c65					ReadLookNext:
.1c65	ad 63 05	lda $0563			lda 	dataRemaining 				; any data remaining
.1c68	f0 04		beq $1c6e			beq 	_RLNFindData
.1c6a	b2 2b		lda ($2b)			lda 	(objPtr) 					; return that object.
.1c6c	18		clc				clc
.1c6d	60		rts				rts
.1c6e					_RLNFindData:
.1c6e	b2 2b		lda ($2b)			lda 	(objPtr) 					; see where we are
.1c70	c9 ff		cmp #$ff			cmp 	#$FF 						; if at $FF then end, error.
.1c72	f0 1a		beq $1c8e			beq 	_RLNNoData
.1c74	c9 cf		cmp #$cf			cmp 	#PCD_CMD_DATA 				; Found DATA
.1c76	f0 05		beq $1c7d			beq 	_RLNHaveData
.1c78					_RLNNext:
.1c78	20 d9 27	jsr $27d9			jsr 	MoveObjectForward			; else scan forward.
.1c7b	80 f1		bra $1c6e			bra 	_RLNFindData
.1c7d					_RLNHaveData:
.1c7d	a0 01		ldy #$01			ldy 	#1 							; get length
.1c7f	b1 2b		lda ($2b),y			lda 	(objPtr),y
.1c81	f0 f5		beq $1c78			beq 	_RLNNext 					; skip if DATA alone
.1c83	20 92 1c	jsr $1c92			jsr 	ReadBumpNext 				; advance by two
.1c86	20 92 1c	jsr $1c92			jsr 	ReadBumpNext
.1c89	8d 63 05	sta $0563			sta 	dataRemaining 				; set data left count.
.1c8c	38		sec				sec
.1c8d	60		rts				rts
.1c8e					_RLNNoData:
.1c8e	a9 00		lda #$00			lda 	#0
.1c90	38		sec				sec
.1c91	60		rts				rts
.1c92					ReadBumpNext:
.1c92	e6 2b		inc $2b				inc 	objPtr
.1c94	d0 02		bne $1c98			bne 	_RBNSkip
.1c96	e6 2c		inc $2c				inc 	objPtr+1
.1c98					_RBNSkip:
.1c98	ce 63 05	dec $0563			dec 	dataRemaining
.1c9b	60		rts				rts
.045e					ReadSep:
>045e							.fill 	1
.045f					ReadBufferSize:
>045f							.fill 	1
.0460					ReadBuffer:
>0460							.fill 	255
.055f					ReadBumpNextVec:
>055f							.fill 	2
.0561					ReadLookNextVec:
>0561							.fill 	2
.1c9c					ReadFloatCommand:
.1c9c	fa		plx				plx
.1c9d	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.1c9f	85 2f		sta $2f				sta 	zTemp0 						; save in MSB
.1ca1	88		dey				dey 								; get the upper 3 bits
.1ca2	b1 28		lda ($28),y			lda 	(codePtr),y
.1ca4	29 07		and #$07			and 	#7
.1ca6	c8		iny				iny
.1ca7	c8		iny				iny
.1ca8	06 2f		asl $2f				asl 	zTemp0 						; shift zTemp0:A left
.1caa	2a		rol a				rol 	a 							; carry will be clear.
.1cab	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.1cae	85 30		sta $30				sta 	zTemp0+1
.1cb0	20 b6 1c	jsr $1cb6			jsr 	ReadFloatZTemp0Sub
.1cb3	4c 29 10	jmp $1029			jmp 	NextCommand
.1cb6					ReadFloatZTemp0Sub:
.1cb6	5a		phy				phy 								; start write
.1cb7	a0 01		ldy #$01			ldy 	#1
.1cb9	e8		inx				inx
.1cba	b2 2f		lda ($2f)			lda 	(zTemp0)
.1cbc	95 41		sta $41,x			sta 	NSMantissa0,x
.1cbe	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.1cc0	95 4d		sta $4d,x			sta 	NSMantissa1,x
.1cc2	c8		iny				iny
.1cc3	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.1cc5	95 59		sta $59,x			sta 	NSMantissa2,x
.1cc7	c8		iny				iny
.1cc8	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.1cca	95 65		sta $65,x			sta 	NSMantissa3,x
.1ccc	c8		iny				iny
.1ccd	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.1ccf	95 71		sta $71,x			sta 	NSExponent,x
.1cd1	c8		iny				iny
.1cd2	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.1cd4	95 35		sta $35,x			sta 	NSStatus,x
.1cd6	7a		ply				ply
.1cd7	60		rts				rts
.1cd8					ReadIntegerCommand:
.1cd8	fa		plx				plx
.1cd9	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.1cdb	85 2f		sta $2f				sta 	zTemp0 						; save in MSB
.1cdd	88		dey				dey 								; get the upper 3 bits
.1cde	b1 28		lda ($28),y			lda 	(codePtr),y
.1ce0	29 07		and #$07			and 	#7
.1ce2	c8		iny				iny
.1ce3	c8		iny				iny
.1ce4	06 2f		asl $2f				asl 	zTemp0 						; shift zTemp0:A left
.1ce6	2a		rol a				rol 	a 							; carry will be clear.
.1ce7	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.1cea	85 30		sta $30				sta 	zTemp0+1
.1cec	20 f2 1c	jsr $1cf2			jsr 	ReadIntegerZTemp0Sub
.1cef	4c 29 10	jmp $1029			jmp 	NextCommand
.1cf2					ReadIntegerZTemp0Sub:
.1cf2	5a		phy				phy 								; start write
.1cf3	a0 01		ldy #$01			ldy 	#1
.1cf5	e8		inx				inx 								; prepare
.1cf6	74 59		stz $59,x			stz 	NSMantissa2,x
.1cf8	74 65		stz $65,x			stz 	NSMantissa3,x
.1cfa	74 71		stz $71,x			stz 	NSExponent,x
.1cfc	74 35		stz $35,x			stz 	NSStatus,x
.1cfe	b1 2f		lda ($2f),y			lda 	(zTemp0),y 					; get MSB, do -ve code.
.1d00	30 08		bmi $1d0a			bmi 	_RIZNegative
.1d02	95 4d		sta $4d,x			sta 	NSMantissa1,x 				; +ve read
.1d04	b2 2f		lda ($2f)			lda 	(zTemp0)
.1d06	95 41		sta $41,x			sta 	NSMantissa0,x
.1d08	7a		ply				ply
.1d09	60		rts				rts
.1d0a					_RIZNegative:
.1d0a	38		sec				sec 								; -ve read
.1d0b	a9 00		lda #$00			lda 	#0
.1d0d	f2 2f		sbc ($2f)			sbc 	(zTemp0)
.1d0f	95 41		sta $41,x			sta 	NSMantissa0,x
.1d11	a9 00		lda #$00			lda 	#0
.1d13	f1 2f		sbc ($2f),y			sbc 	(zTemp0),y
.1d15	95 4d		sta $4d,x			sta 	NSMantissa1,x
.1d17	a9 80		lda #$80			lda 	#$80
.1d19	95 35		sta $35,x			sta 	NSStatus,x
.1d1b	7a		ply				ply
.1d1c	60		rts				rts
.1d1d					ReadStringCommand:
.1d1d	fa		plx				plx
.1d1e	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.1d20	85 2f		sta $2f				sta 	zTemp0 						; save in MSB
.1d22	88		dey				dey 								; get the upper 3 bits
.1d23	b1 28		lda ($28),y			lda 	(codePtr),y
.1d25	29 07		and #$07			and 	#7
.1d27	c8		iny				iny
.1d28	c8		iny				iny
.1d29	06 2f		asl $2f				asl 	zTemp0 						; shift zTemp0:A left
.1d2b	2a		rol a				rol 	a 							; carry will be clear.
.1d2c	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.1d2f	85 30		sta $30				sta 	zTemp0+1
.1d31	20 37 1d	jsr $1d37			jsr 	ReadStringZTemp0Sub
.1d34	4c 29 10	jmp $1029			jmp 	NextCommand
.1d37					ReadStringZTemp0Sub:
.1d37	5a		phy				phy 								; start write
.1d38	e8		inx				inx 								; prepare
.1d39	74 59		stz $59,x			stz 	NSMantissa2,x
.1d3b	74 65		stz $65,x			stz 	NSMantissa3,x
.1d3d	74 71		stz $71,x			stz 	NSExponent,x
.1d3f	a9 40		lda #$40			lda 	#NSSString
.1d41	74 35		stz $35,x			stz 	NSStatus,x
.1d43	18		clc				clc
.1d44	b2 2f		lda ($2f)			lda 	(zTemp0)					; read address of block add 2.
.1d46	69 02		adc #$02			adc 	#2 							; this points to actual data
.1d48	95 41		sta $41,x			sta 	NSMantissa0,x 				; if address 0 the MSB will still be 0
.1d4a	a0 01		ldy #$01			ldy 	#1
.1d4c	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.1d4e	69 00		adc #$00			adc 	#0
.1d50	95 4d		sta $4d,x			sta 	NSMantissa1,x 				; +ve read
.1d52	d0 08		bne $1d5c			bne 	_RSZNoDefault 				; if read $00 use a default value.
.1d54	a9 5e		lda #$5e			lda 	#_RSZNull & $FF
.1d56	95 41		sta $41,x			sta 	NSMantissa0,x
.1d58	a9 1d		lda #$1d			lda 	#_RSZNull >> 8
.1d5a	95 4d		sta $4d,x			sta 	NSMantissa1,x
.1d5c					_RSZNoDefault:
.1d5c	7a		ply				ply
.1d5d	60		rts				rts
.1d5e					_RSZNull:
>1d5e	00						.byte 	0
.1d5f					CommandRestore:
.1d5f	fa		plx				plx
.1d60	20 66 1d	jsr $1d66			jsr 	RestoreCode
.1d63	4c 29 10	jmp $1029			jmp 	NextCommand
.1d66					RestoreCode:
.1d66	ad 04 04	lda $0404			lda 	runtimeHigh 				; reset pointer and page
.1d69	85 2e		sta $2e				sta 	objPage+1
.1d6b	64 2d		stz $2d				stz  	objPage
.1d6d	9c 63 05	stz $0563			stz 	dataRemaining 				; no data remaining.
.1d70	60		rts				rts
.0563					dataRemaining:
>0563							.fill 	1		 					; 0 if not in data statement
.1d71					UnaryRND:
.1d71	fa		plx				plx
.1d72	34 35		bit $35,x			bit 	NSStatus,x 					; -ve then set seed from operand
.1d74	10 17		bpl $1d8d			bpl 	_URNoSeed
.1d76	20 5f 2b	jsr $2b5f			jsr 	FloatNormalise 				; some float value
.1d79	b5 41		lda $41,x			lda 	NSMantissa0,x 				; copy to Mantissa
.1d7b	8d 64 05	sta $0564			sta 	randomSeed+0
.1d7e	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.1d80	8d 65 05	sta $0565			sta 	randomSeed+1
.1d83	b5 59		lda $59,x			lda 	NSMantissa2,x
.1d85	8d 66 05	sta $0566			sta 	randomSeed+2
.1d88	b5 65		lda $65,x			lda 	NSMantissa3,x
.1d8a	8d 67 05	sta $0567			sta 	randomSeed+3
.1d8d					_URNoSeed:
.1d8d	20 af 1d	jsr $1daf			jsr 	RandomNumberGenerator 		; create a number and copy to mantissa
.1d90	ad 64 05	lda $0564			lda 	randomSeed+0
.1d93	95 41		sta $41,x			sta 	NSMantissa0,x
.1d95	ad 65 05	lda $0565			lda 	randomSeed+1
.1d98	95 4d		sta $4d,x			sta 	NSMantissa1,x
.1d9a	ad 66 05	lda $0566			lda 	randomSeed+2
.1d9d	95 59		sta $59,x			sta 	NSMantissa2,x
.1d9f	ad 67 05	lda $0567			lda 	randomSeed+3
.1da2	29 7f		and #$7f			and 	#$7F
.1da4	95 65		sta $65,x			sta 	NSMantissa3,x
.1da6	a9 e1		lda #$e1			lda 	#(-31 & $FF)
.1da8	95 71		sta $71,x			sta 	NSExponent,x
.1daa	74 35		stz $35,x			stz 	NSStatus,x
.1dac	4c 29 10	jmp $1029			jmp 	NextCommand
.1daf					RandomNumberGenerator:
.1daf	5a		phy				phy
.1db0	ad 64 05	lda $0564			lda 	randomSeed+0 				; check if zero
.1db3	0d 65 05	ora $0565			ora 	randomSeed+1
.1db6	0d 66 05	ora $0566			ora 	randomSeed+2
.1db9	0d 67 05	ora $0567			ora 	randomSeed+3
.1dbc	d0 07		bne $1dc5			bne 	_RNGNoSeed
.1dbe	ce 67 05	dec $0567			dec 	randomSeed+3 				; if so tweak and flog
.1dc1	a0 64		ldy #$64			ldy 	#100
.1dc3	80 05		bra $1dca			bra 	_RNGLoop
.1dc5					_RNGNoSeed:
.1dc5	a0 08		ldy #$08			ldy 	#8
.1dc7	ad 64 05	lda $0564			lda 	randomSeed+0
.1dca					_RNGLoop:
.1dca	0a		asl a				asl		a
.1dcb	2e 65 05	rol $0565			rol 	randomSeed+1
.1dce	2e 66 05	rol $0566			rol 	randomSeed+2
.1dd1	2e 67 05	rol $0567			rol 	randomSeed+3
.1dd4	90 02		bcc $1dd8			bcc		_RNGSkip
.1dd6	49 c5		eor #$c5			eor 	#$C5
.1dd8					_RNGSkip:
.1dd8	88		dey				dey
.1dd9	d0 ef		bne $1dca			bne		_RNGLoop
.1ddb	8d 64 05	sta $0564			sta 	randomSeed+0
.1dde	7a		ply				ply
.1ddf	60		rts				rts
.0564					randomSeed:
>0564							.fill 	4
.1de0					StringConcatenate:
.1de0	fa		plx				plx
.1de1	ca		dex				dex
.1de2	b5 41		lda $41,x			lda 	NSMantissa0,x 				; copy strings to zTemp1 and zTemp2
.1de4	85 31		sta $31				sta 	zTemp1
.1de6	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.1de8	85 32		sta $32				sta 	zTemp1+1
.1dea	b5 42		lda $42,x			lda 	NSMantissa0+1,x
.1dec	85 33		sta $33				sta 	zTemp2
.1dee	b5 4e		lda $4e,x			lda 	NSMantissa1+1,x
.1df0	85 34		sta $34				sta 	zTemp2+1
.1df2	18		clc				clc 								; work out total length
.1df3	b2 31		lda ($31)			lda 	(zTemp1)
.1df5	72 33		adc ($33)			adc 	(zTemp2)
.1df7	b0 18		bcs $1e11			bcs 	_BCLength 					; more than 255 characters.
.1df9	48		pha				pha 								; save total
.1dfa	20 d7 1e	jsr $1ed7			jsr 	StringAllocTemp 			; space for result.
.1dfd	68		pla				pla 								; write total as first.
.1dfe	92 22		sta ($22)			sta 	(zsTemp)
.1e00	20 14 1e	jsr $1e14			jsr 	_BCCopyZTemp1 				; copy zTemp1 to target
.1e03	a5 33		lda $33				lda 	zTemp2 						; copy address zTemp2->1
.1e05	85 31		sta $31				sta 	zTemp1
.1e07	a5 34		lda $34				lda 	zTemp2+1
.1e09	85 32		sta $32				sta 	zTemp1+1
.1e0b	20 14 1e	jsr $1e14			jsr 	_BCCopyZTemp1 				; and copy it, e.g. zTemp2
.1e0e	4c 29 10	jmp $1029			jmp 	NextCommand
.1e11					_BCLength:
.1e11	4c a7 26	jmp $26a7		jmp	ErrorV_range
.1e14					_BCCopyZTemp1:
.1e14	b2 31		lda ($31)			lda 	(zTemp1) 					; bytes to copy
.1e16	f0 15		beq $1e2d			beq 	_BCCExit 					; none.
.1e18	da		phx				phx 								; save XY
.1e19	5a		phy				phy
.1e1a	aa		tax				tax 								; count in X.
.1e1b	a0 01		ldy #$01			ldy 	#1
.1e1d					_BCCLoop:
.1e1d	e6 22		inc $22				inc 	zsTemp 						; bump pointer, pre-increment
.1e1f	d0 02		bne $1e23			bne 	_BCCNoCarry
.1e21	e6 23		inc $23				inc 	zsTemp+1
.1e23					_BCCNoCarry:
.1e23	b1 31		lda ($31),y			lda 	(zTemp1),y				 	; copy bytes
.1e25	92 22		sta ($22)			sta 	(zsTemp)
.1e27	c8		iny				iny
.1e28	ca		dex				dex 								; X times
.1e29	d0 f2		bne $1e1d			bne 	_BCCLoop
.1e2b	7a		ply				ply 								; restore YX
.1e2c	fa		plx				plx
.1e2d					_BCCExit:
.1e2d	60		rts				rts
.1e2e					XRuntimeSetup:
.1e2e	a9 ff		lda #$ff	 		lda 	#$FF 						; default banks to access.
.1e30	8d 6b 05	sta $056b	 		sta 	ramBank
.1e33	8d 6c 05	sta $056c	 		sta 	romBank
.1e36	60		rts				rts
.1e37					SignTOS:
.1e37	fa		plx				plx
.1e38	20 2c 2e	jsr $2e2c			jsr 	FloatIsZero 				; if zero
.1e3b	f0 0f		beq $1e4c			beq 	_SGZero  					; return Int Zero
.1e3d	b5 35		lda $35,x			lda 	NSStatus,x 					; get status w/sign
.1e3f	48		pha				pha
.1e40	a9 01		lda #$01			lda 	#1 							; set result to 1
.1e42	20 0c 2e	jsr $2e0c			jsr 	FloatSetByte
.1e45	68		pla				pla
.1e46	29 80		and #$80			and		#$80 						; copy the sign byte out
.1e48	95 35		sta $35,x			sta 	NSStatus,x  				; so it will be -1 or 1
.1e4a	80 03		bra $1e4f			bra 	_SGExit
.1e4c					_SGZero:
.1e4c	20 0a 2e	jsr $2e0a			jsr 	FloatSetZero
.1e4f					_SGExit:
.1e4f	4c 29 10	jmp $1029			jmp 	NextCommand
.1e52					CommandShift:
.1e52	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted command (X already pushed)
.1e54	c8		iny				iny
.1e55	0a		asl a				asl 	a 							; double into X
.1e56	aa		tax				tax
.1e57	7c 02 22	jmp ($2202,x)			jmp 	(ShiftVectorTable,x) 		; go there.
.1e5a					PrintTab:
.1e5a	fa		plx				plx
.1e5b	20 a1 23	jsr $23a1			jsr 	XGetHPos
.1e5e					_PTMod10:
.1e5e	38		sec				sec
.1e5f	e9 0a		sbc #$0a			sbc 	#10
.1e61	b0 fb		bcs $1e5e			bcs 	_PTMod10
.1e63	49 ff		eor #$ff			eor 	#255 						; subtract from 10 effectively. negate it
.1e65	1a		inc a				inc 	a 							; if modulus is 0, then this will be -10 => 10
.1e66	80 15		bra $1e7d			bra 	PrintSpaceLoop
.1e68					PrintPos:
.1e68	fa		plx				plx
.1e69	20 a1 23	jsr $23a1			jsr		XGetHPos 					; get current position
.1e6c	85 2f		sta $2f				sta 	zTemp0
.1e6e	38		sec				sec 								; calculate spaces required
.1e6f	b5 41		lda $41,x			lda 	NSMantissa0,x
.1e71	ca		dex				dex
.1e72	e5 2f		sbc $2f				sbc 	zTemp0
.1e74	b0 07		bcs $1e7d			bcs 	PrintSpaceLoop 				; if >= 0 then do that many spaces
.1e76	4c 29 10	jmp $1029			jmp 	NextCommand
.1e79					PrintSpace:
.1e79	fa		plx				plx
.1e7a	b5 41		lda $41,x			lda 	NSMantissa0,x
.1e7c	ca		dex				dex
.1e7d					PrintSpaceLoop:
.1e7d	c9 00		cmp #$00			cmp 	#0
.1e7f	f0 0a		beq $1e8b			beq 	_PSExit
.1e81	48		pha				pha
.1e82	a9 20		lda #$20			lda 	#" "
.1e84	20 34 1b	jsr $1b34			jsr 	VectorPrintCharacter
.1e87	68		pla				pla
.1e88	3a		dec a				dec 	a
.1e89	80 f2		bra $1e7d			bra 	PrintSpaceLoop
.1e8b					_PSExit:
.1e8b	4c 29 10	jmp $1029			jmp 	NextCommand
.1e8e					CommandStop:
.1e8e	fa		plx				plx
.1e8f	4c 59 27	jmp $2759		jmp	ErrorV_stop
.1e92					Unary_Str:
.1e92	fa		plx				plx
.1e93	5a		phy				phy
.1e94	a9 08		lda #$08			lda 	#8 							; maximum decimal places.
.1e96	20 f2 2c	jsr $2cf2			jsr 	FloatToString 				; do the conversion.
.1e99	a9 21		lda #$21			lda		#33 						; create buffer
.1e9b	20 d7 1e	jsr $1ed7			jsr 	StringAllocTemp 			; allocate memory
.1e9e	a0 01		ldy #$01			ldy 	#1  						; copy the converted string into the buffer.
.1ea0					_USCopy:
.1ea0	b9 93 05	lda $0593,y			lda 	decimalBuffer-1,y
.1ea3	f0 05		beq $1eaa			beq 	_USExit
.1ea5	91 22		sta ($22),y			sta 	(zsTemp),y
.1ea7	c8		iny				iny
.1ea8	80 f6		bra $1ea0			bra 	_USCopy
.1eaa					_USExit:
.1eaa	98		tya				tya
.1eab	3a		dec a				dec 	a
.1eac	92 22		sta ($22)			sta 	(zsTemp)
.1eae	7a		ply				ply
.1eaf	4c 29 10	jmp $1029			jmp 	NextCommand
.1eb2					StringInitialise:
.1eb2	48		pha				pha
.1eb3	ad 68 05	lda $0568			lda 	stringInitialised 			; already done
.1eb6	d0 11		bne $1ec9			bne 	_SIExit
.1eb8	ad 02 04	lda $0402			lda 	stringHighMemory 			; copy high memory - 512 => stringTempPointer
.1ebb	8d 69 05	sta $0569			sta 	stringTempPointer
.1ebe	ad 03 04	lda $0403			lda 	stringHighMemory+1
.1ec1	3a		dec a				dec 	a
.1ec2	3a		dec a				dec 	a
.1ec3	8d 6a 05	sta $056a			sta 	stringTempPointer+1
.1ec6	ce 68 05	dec $0568			dec 	stringInitialised 			; set the initialised flag.
.1ec9					_SIExit:
.1ec9	a5 27		lda $27				lda 	availableMemory+1 			; check out of memory
.1ecb	1a		inc a				inc 	a
.1ecc	1a		inc a				inc 	a
.1ecd	cd 03 04	cmp $0403			cmp 	stringHighMemory+1
.1ed0	b0 02		bcs $1ed4			bcs 	_SIMemory
.1ed2	68		pla				pla
.1ed3	60		rts				rts
.1ed4					_SIMemory:
.1ed4	4c b2 27	jmp $27b2		jmp	ErrorV_memory
.1ed7					StringAllocTemp:
.1ed7	20 b2 1e	jsr $1eb2			jsr 	StringInitialise 			; check it is initialised.
.1eda	49 ff		eor #$ff			eor 	#$FF 						; subtract A+1 from temp pointer.
.1edc	18		clc				clc
.1edd	6d 69 05	adc $0569			adc 	stringTempPointer 			; subtract 32 from temp pointer and
.1ee0	8d 69 05	sta $0569			sta 	stringTempPointer 			; save in zsTemp and stackas well.
.1ee3	85 22		sta $22				sta 	zsTemp
.1ee5	95 41		sta $41,x			sta 	NSMantissa0,x
.1ee7	ad 6a 05	lda $056a			lda 	stringTempPointer+1
.1eea	69 ff		adc #$ff			adc 	#$FF
.1eec	8d 6a 05	sta $056a			sta 	stringTempPointer+1
.1eef	85 23		sta $23				sta 	zsTemp+1
.1ef1	95 4d		sta $4d,x			sta 	NSMantissa1,x
.1ef3	74 59		stz $59,x			stz 	NSMantissa2,x
.1ef5	74 65		stz $65,x			stz 	NSMantissa3,x
.1ef7	a9 00		lda #$00			lda 	#0 							; clear string.
.1ef9	92 22		sta ($22)			sta 	(zsTemp)
.1efb	a9 40		lda #$40			lda 	#NSSString 			 		; mark as string
.1efd	95 35		sta $35,x			sta 	NSStatus,x
.1eff	60		rts				rts
.1f00					StringWriteChar:
.1f00	5a		phy				phy
.1f01	48		pha				pha
.1f02	b2 22		lda ($22)			lda 	(zsTemp)
.1f04	1a		inc a				inc 	a
.1f05	92 22		sta ($22)			sta 	(zsTemp)
.1f07	a8		tay				tay
.1f08	68		pla				pla
.1f09	91 22		sta ($22),y			sta 	(zsTemp),y
.1f0b	7a		ply				ply
.1f0c	60		rts				rts
.0568					stringInitialised:
>0568							.fill 	1
.0569					stringTempPointer:
>0569							.fill 	2
.1f0d					Unary_Left:
.1f0d	fa		plx				plx
.1f0e	5a		phy				phy
.1f0f	18		clc				clc 								; only one parameter
.1f10	20 06 18	jsr $1806			jsr 	GetInteger8Bit 				; push the length of the string.
.1f13	48		pha				pha
.1f14	ca		dex				dex
.1f15	a9 00		lda #$00			lda 	#0 							; push the start position.
.1f17	48		pha				pha
.1f18	20 50 1f	jsr $1f50			jsr 	UnarySStringToZTemp0
.1f1b	80 3c		bra $1f59			bra 	SubstringMain 				; stack now points to the string to slice.
.1f1d					Unary_Right:
.1f1d	fa		plx				plx
.1f1e	5a		phy				phy
.1f1f	a9 ff		lda #$ff			lda 	#255 						; push 255, we want all the string.
.1f21	20 06 18	jsr $1806			jsr 	GetInteger8Bit 				; push the right length of the string.
.1f24	48		pha				pha
.1f25	ca		dex				dex
.1f26	20 50 1f	jsr $1f50			jsr 	UnarySStringToZTemp0
.1f29	68		pla				pla 								; this is the right requirement
.1f2a	38		sec				sec
.1f2b	49 ff		eor #$ff			eor 	#$FF
.1f2d	72 2f		adc ($2f)			adc 	(zTemp0)
.1f2f	b0 02		bcs $1f33			bcs 	_URHaveCount
.1f31	a9 00		lda #$00			lda 	#0 							; overflow, start from 0
.1f33					_URHaveCount:
.1f33	a0 ff		ldy #$ff			ldy 	#255 						; whole string
.1f35	5a		phy				phy
.1f36	48		pha				pha 								; start position
.1f37	80 20		bra $1f59			bra 	SubstringMain
.1f39					Unary_Mid:
.1f39	fa		plx				plx
.1f3a	5a		phy				phy
.1f3b	20 06 18	jsr $1806			jsr 	GetInteger8Bit 				; push the length of the string required.
.1f3e	48		pha				pha
.1f3f	ca		dex				dex
.1f40	20 06 18	jsr $1806			jsr 	GetInteger8Bit 				; put the start position.
.1f43	f0 08		beq $1f4d			beq 	_UMError
.1f45	3a		dec a				dec 	a
.1f46	48		pha				pha
.1f47	ca		dex				dex
.1f48	20 50 1f	jsr $1f50			jsr 	UnarySStringToZTemp0
.1f4b	80 0c		bra $1f59			bra 	SubstringMain 				; stack now points to the string to slice.
.1f4d					_UMError:
.1f4d	4c a7 26	jmp $26a7		jmp	ErrorV_range
.1f50					UnarySStringToZTemp0:
.1f50	b5 41		lda $41,x			lda 	NSMantissa0,x
.1f52	85 2f		sta $2f				sta 	zTemp0
.1f54	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.1f56	85 30		sta $30				sta 	zTemp0+1
.1f58	60		rts				rts
.1f59					SubstringMain:
.1f59	68		pla				pla 								; get the start offset
.1f5a	7a		ply				ply 								; get the count to do.
.1f5b	d2 2f		cmp ($2f)			cmp 	(zTemp0) 					; if start >= length then return NULL.
.1f5d	b0 38		bcs $1f97			bcs 	_SSReturnNull
.1f5f	85 31		sta $31				sta 	zTemp1 						; save start position.
.1f61	84 32		sty $32				sty 	zTemp1+1 					; save count
.1f63	18		clc				clc
.1f64	65 32		adc $32				adc 	zTemp1+1 					; this is the end position.
.1f66	b0 06		bcs $1f6e			bcs 	_SMTruncateToEnd 			; if overflow, limit to length-start.
.1f68	d2 2f		cmp ($2f)			cmp 	(zTemp0) 					; ok if limit is <= length.
.1f6a	f0 04		beq $1f70			beq 	_SMIsOkay
.1f6c	90 02		bcc $1f70			bcc 	_SMIsOkay
.1f6e					_SMTruncateToEnd:
.1f6e	b2 2f		lda ($2f)			lda 	(zTemp0) 					; end position is length.
.1f70					_SMIsOkay:
.1f70	85 32		sta $32				sta 	zTemp1+1
.1f72	38		sec				sec		 							; work out size
.1f73	a5 32		lda $32				lda 	zTemp1+1
.1f75	e5 31		sbc $31				sbc 	zTemp1
.1f77	f0 1e		beq $1f97			beq 	_SSReturnNull 				; if size = 0 then return empty string.
.1f79	20 d7 1e	jsr $1ed7			jsr 	StringAllocTemp 			; zsTemp & mantissa = the new string.
.1f7c	a4 31		ldy $31				ldy 	zTemp1 						; start
.1f7e					_SMCopy:
.1f7e	c4 32		cpy $32				cpy 	zTemp1+1 					; exit if reached end
.1f80	f0 11		beq $1f93			beq 	_SMExit
.1f82	c8		iny				iny 								; bump and
.1f83	b1 2f		lda ($2f),y			lda 	(zTemp0),y 					; get character (prefix)
.1f85	5a		phy				phy
.1f86	48		pha				pha
.1f87	b2 22		lda ($22)			lda 	(zsTemp) 					; bump length => Y
.1f89	1a		inc a				inc 	a
.1f8a	a8		tay				tay
.1f8b	92 22		sta ($22)			sta 	(zsTemp)
.1f8d	68		pla				pla 								; write character out
.1f8e	91 22		sta ($22),y			sta 	(zsTemp),y
.1f90	7a		ply				ply 								; restore Y
.1f91	80 eb		bra $1f7e			bra 	_SMCopy
.1f93					_SMExit:
.1f93	7a		ply				ply
.1f94	4c 29 10	jmp $1029			jmp 	NextCommand
.1f97					_SSReturnNull:
.1f97	a9 a9		lda #$a9			lda 	#SSRNull & $FF 				; set up mantissa
.1f99	95 41		sta $41,x			sta 	NSMantissa0,x
.1f9b	a9 1f		lda #$1f			lda 	#SSRNull >> 8
.1f9d	95 4d		sta $4d,x			sta 	NSMantissa1,x
.1f9f	74 59		stz $59,x			stz 	NSMantissa2,x
.1fa1	74 65		stz $65,x			stz 	NSMantissa3,x
.1fa3	a9 40		lda #$40			lda 	#NSSString
.1fa5	95 35		sta $35,x			sta 	NSStatus,x
.1fa7	80 ea		bra $1f93			bra 	_SMExit
.1fa9					SSRNull:
>1fa9	00 00						.word 	0
.1fab					CommandSwap:
.1fab	fa		plx				plx
.1fac	b5 41		lda $41,x			lda 	NSMantissa0,x
.1fae	48		pha				pha
.1faf	b5 40		lda $40,x			lda 	NSMantissa0-1,x
.1fb1	95 41		sta $41,x			sta 	NSMantissa0,x
.1fb3	68		pla				pla
.1fb4	95 40		sta $40,x			sta 	NSMantissa0-1,x
.1fb6	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.1fb8	48		pha				pha
.1fb9	b5 4c		lda $4c,x			lda 	NSMantissa1-1,x
.1fbb	95 4d		sta $4d,x			sta 	NSMantissa1,x
.1fbd	68		pla				pla
.1fbe	95 4c		sta $4c,x			sta 	NSMantissa1-1,x
.1fc0	b5 59		lda $59,x			lda 	NSMantissa2,x
.1fc2	48		pha				pha
.1fc3	b5 58		lda $58,x			lda 	NSMantissa2-1,x
.1fc5	95 59		sta $59,x			sta 	NSMantissa2,x
.1fc7	68		pla				pla
.1fc8	95 58		sta $58,x			sta 	NSMantissa2-1,x
.1fca	b5 65		lda $65,x			lda 	NSMantissa3,x
.1fcc	48		pha				pha
.1fcd	b5 64		lda $64,x			lda 	NSMantissa3-1,x
.1fcf	95 65		sta $65,x			sta 	NSMantissa3,x
.1fd1	68		pla				pla
.1fd2	95 64		sta $64,x			sta 	NSMantissa3-1,x
.1fd4	b5 71		lda $71,x			lda 	NSExponent,x
.1fd6	48		pha				pha
.1fd7	b5 70		lda $70,x			lda 	NSExponent-1,x
.1fd9	95 71		sta $71,x			sta 	NSExponent,x
.1fdb	68		pla				pla
.1fdc	95 70		sta $70,x			sta 	NSExponent-1,x
.1fde	b5 35		lda $35,x			lda 	NSStatus,x
.1fe0	48		pha				pha
.1fe1	b5 34		lda $34,x			lda 	NSStatus-1,x
.1fe3	95 35		sta $35,x			sta 	NSStatus,x
.1fe5	68		pla				pla
.1fe6	95 34		sta $34,x			sta 	NSStatus-1,x
.1fe8	4c 29 10	jmp $1029			jmp 	NextCommand
.1feb					CommandSYS:
.1feb	fa		plx				plx
.1fec	da		phx				phx 								; save XY
.1fed	5a		phy				phy
.1fee	20 45 2a	jsr $2a45			jsr 	FloatIntegerPart
.1ff1	b5 4d		lda $4d,x			lda 	NSMantissa1,x 				; get call address => zTemp0
.1ff3	85 30		sta $30				sta 	zTemp0+1
.1ff5	b5 41		lda $41,x			lda 	NSMantissa0,x
.1ff7	85 2f		sta $2f				sta 	zTemp0
.1ff9	ae 0d 03	ldx $030d			ldx 	SYS_Reg_X 					; load registers
.1ffc	ac 0e 03	ldy $030e			ldy 	SYS_Reg_Y
.1fff	ad 0f 03	lda $030f			lda 	SYS_Reg_S
.2002	48		pha				pha
.2003	ad 0c 03	lda $030c			lda 	SYS_Reg_A
.2006	28		plp				plp
.2007	20 1e 20	jsr $201e			jsr 	_CSZTemp0
.200a	08		php				php
.200b	8e 0d 03	stx $030d			stx 	SYS_Reg_X 					; load registers
.200e	8c 0e 03	sty $030e			sty 	SYS_Reg_Y
.2011	8d 0c 03	sta $030c			sta 	SYS_Reg_A
.2014	68		pla				pla
.2015	8d 0f 03	sta $030f			sta 	SYS_Reg_S
.2018	7a		ply				ply 								; restore YX and drop 2
.2019	fa		plx				plx
.201a	ca		dex				dex
.201b	4c 29 10	jmp $1029			jmp 	NextCommand
.201e					_CSZTemp0:
.201e	6c 2f 00	jmp ($002f)			jmp 	(zTemp0)
.2021					TimeTOS:
.2021	fa		plx				plx
.2022	20 7c 20	jsr $207c			jsr 	TIPushClock 				; push clock to TOS
.2025	4c 29 10	jmp $1029			jmp 	NextCommand
.2028					TimeString:
.2028	fa		plx				plx
.2029	20 7c 20	jsr $207c			jsr 	TIPushClock 				; push clock to TOS
.202c	20 51 20	jsr $2051			jsr 	_TSDivMod60 				; result in seconds
.202f	20 51 20	jsr $2051			jsr 	_TSDivMod60 				; seconds
.2032	48		pha				pha
.2033	20 51 20	jsr $2051			jsr 	_TSDivMod60 				; minutes
.2036	48		pha				pha
.2037	a9 18		lda #$18			lda 	#24 						; hours
.2039	20 53 20	jsr $2053			jsr 	_TSDivModA
.203c	48		pha				pha
.203d	a9 06		lda #$06			lda 	#6
.203f	20 d7 1e	jsr $1ed7			jsr 	StringAllocTemp
.2042	68		pla				pla
.2043	20 63 20	jsr $2063			jsr 	_TSWriteDecimal
.2046	68		pla				pla
.2047	20 63 20	jsr $2063			jsr 	_TSWriteDecimal
.204a	68		pla				pla
.204b	20 63 20	jsr $2063			jsr 	_TSWriteDecimal
.204e	4c 29 10	jmp $1029			jmp 	NextCommand
.2051					_TSDivMod60:
.2051	a9 3c		lda #$3c			lda 	#60
.2053					_TSDivModA:
.2053	e8		inx				inx
.2054	20 0c 2e	jsr $2e0c			jsr 	FloatSetByte
.2057	ca		dex				dex
.2058	20 a0 29	jsr $29a0			jsr 	Int32Divide
.205b	b5 41		lda $41,x			lda 	NSMantissa0,x 				; get modulus
.205d	48		pha				pha
.205e	20 8f 29	jsr $298f			jsr 	NSMCopyPlusTwoToZero
.2061	68		pla				pla
.2062	60		rts				rts
.2063					_TSWriteDecimal:
.2063	da		phx				phx
.2064	a2 30		ldx #$30			ldx 	#'0'
.2066					_TSWDLoop:
.2066	c9 0a		cmp #$0a			cmp 	#10
.2068	90 05		bcc $206f			bcc 	_TSWDEnd
.206a	e9 0a		sbc #$0a			sbc 	#10
.206c	e8		inx				inx
.206d	80 f7		bra $2066			bra 	_TSWDLoop
.206f					_TSWDEnd:
.206f	48		pha				pha
.2070	8a		txa				txa
.2071	20 00 1f	jsr $1f00			jsr 	StringWriteChar
.2074	68		pla				pla
.2075	09 30		ora #$30			ora 	#'0'
.2077	20 00 1f	jsr $1f00			jsr 	StringWriteChar
.207a	fa		plx				plx
.207b	60		rts				rts
.207c					TIPushClock:
.207c	5a		phy				phy
.207d	e8		inx				inx 								; push 0 on the stack
.207e	20 0a 2e	jsr $2e0a			jsr 	FloatSetZero
.2081	da		phx				phx
.2082	20 6c 24	jsr $246c			jsr 	XReadClock 					; read time into YXA
.2085	86 2f		stx $2f				stx 	zTemp0
.2087	fa		plx				plx
.2088	95 41		sta $41,x			sta 	NSMantissa0,x
.208a	a5 2f		lda $2f				lda 	zTemp0
.208c	95 4d		sta $4d,x			sta 	NSMantissa1,x
.208e	98		tya				tya
.208f	95 59		sta $59,x			sta 	NSMantissa2,x
.2091	7a		ply				ply
.2092	60		rts				rts
.2093					CommandTIWrite:
.2093	fa		plx				plx
.2094	b5 41		lda $41,x			lda 	NSMantissa0,x 				; copy string address to ZSTemp
.2096	85 22		sta $22				sta 	zsTemp
.2098	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.209a	85 23		sta $23				sta 	zsTemp+1
.209c	b2 22		lda ($22)			lda 	(zsTemp) 					; check if it is six
.209e	c9 06		cmp #$06			cmp 	#6
.20a0	d0 59		bne $20fb			bne 	_CTIWError
.20a2	20 0a 2e	jsr $2e0a			jsr 	FloatSetZero
.20a5	20 c7 20	jsr $20c7			jsr 	_CTIWDigitPair 				; do a digit pair 3 times
.20a8	20 c7 20	jsr $20c7			jsr 	_CTIWDigitPair
.20ab	20 c7 20	jsr $20c7			jsr 	_CTIWDigitPair
.20ae	a9 3c		lda #$3c			lda 	#60 						; multiply the result by 60.
.20b0	20 f2 20	jsr $20f2			jsr 	_CTIWMultiply
.20b3	da		phx				phx
.20b4	5a		phy				phy
.20b5	b5 4d		lda $4d,x			lda 	NSMantissa1,x 				; get time into YXA
.20b7	48		pha				pha
.20b8	b5 59		lda $59,x			lda 	NSMantissa2,x
.20ba	a8		tay				tay
.20bb	b5 41		lda $41,x			lda 	NSMantissa0,x
.20bd	fa		plx				plx
.20be	20 70 24	jsr $2470			jsr 	XWriteClock 				; update the clock.
.20c1	7a		ply				ply
.20c2	fa		plx				plx
.20c3	ca		dex				dex 								; throw result.
.20c4	4c 29 10	jmp $1029			jmp 	NextCommand
.20c7					_CTIWDigitPair:
.20c7	a9 06		lda #$06			lda 	#6 							; x 6
.20c9	20 f2 20	jsr $20f2			jsr 	_CTIWMultiply
.20cc	20 d8 20	jsr $20d8			jsr 	_CTIWAddDigit 				; add digit
.20cf	a9 0a		lda #$0a			lda 	#10 						; x 10
.20d1	20 f2 20	jsr $20f2			jsr 	_CTIWMultiply
.20d4	20 d8 20	jsr $20d8			jsr 	_CTIWAddDigit 				; add digit
.20d7	60		rts				rts
.20d8					_CTIWAddDigit:
.20d8	e6 22		inc $22				inc 	zsTemp 						; pre-increment
.20da	d0 02		bne $20de			bne 	_CTIWASkip
.20dc	e6 23		inc $23				inc 	zsTemp+1
.20de					_CTIWASkip:
.20de	b2 22		lda ($22)			lda 	(zsTemp) 					; read and validate it
.20e0	38		sec				sec
.20e1	e9 30		sbc #$30			sbc 	#"0"
.20e3	90 16		bcc $20fb			bcc 	_CTIWError
.20e5	c9 0a		cmp #$0a			cmp 	#9+1
.20e7	b0 12		bcs $20fb			bcs 	_CTIWError
.20e9	e8		inx				inx 								; store at +1
.20ea	20 0c 2e	jsr $2e0c			jsr 	FloatSetByte
.20ed	ca		dex				dex
.20ee	20 96 2b	jsr $2b96			jsr 	FloatAddTopTwoStack
.20f1	60		rts				rts
.20f2					_CTIWMultiply:
.20f2	e8		inx				inx
.20f3	20 0c 2e	jsr $2e0c			jsr 	FloatSetByte
.20f6	ca		dex				dex
.20f7	20 17 2b	jsr $2b17			jsr 	FloatMultiplyShort
.20fa	60		rts				rts
.20fb					_CTIWError:
.20fb	4c b7 26	jmp $26b7		jmp	ErrorV_value
.20fe					UnaryUsr:
.20fe	fa		plx				plx
.20ff	5a		phy				phy
.2100	20 07 21	jsr $2107			jsr 	_UUCallVector
.2103	7a		ply				ply
.2104	4c 29 10	jmp $1029			jmp 	NextCommand
.2107					_UUCallVector:
.2107	6c 11 03	jmp ($0311)			jmp 	(USRRoutineAddress)
.210a					ValUnary:
.210a	fa		plx				plx
.210b	b5 41		lda $41,x			lda 	NSMantissa0,x
.210d	85 2f		sta $2f				sta 	zTemp0
.210f	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.2111	85 30		sta $30				sta 	zTemp0+1
.2113	20 1e 21	jsr $211e			jsr 	ValEvaluateZTemp0
.2116	b0 03		bcs $211b			bcs 	_VUError 					; couldn't convert
.2118	4c 29 10	jmp $1029			jmp 	NextCommand
.211b					_VUError:
.211b	4c b7 26	jmp $26b7		jmp	ErrorV_value
.211e					ValEvaluateZTemp0:
.211e	5a		phy				phy
.211f	b2 2f		lda ($2f)			lda 	(zTemp0) 					; check not empty string
.2121	f0 22		beq $2145			beq 	_VMCFail2
.2123	a0 00		ldy #$00			ldy 	#0 							; start position
.2125					_VMCSpaces:
.2125	c8		iny				iny 								; skip leading spaces
.2126	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.2128	c9 20		cmp #$20			cmp 	#" "
.212a	f0 f9		beq $2125			beq 	_VMCSpaces
.212c	48		pha				pha 								; save first character
.212d	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.212f	d0 01		bne $2132			bne 	_VMCStart
.2131	c8		iny				iny 								; skip over - if so.
.2132					_VMCStart:
.2132	38		sec				sec 								; initialise first time round.
.2133					_VMCNext:
.2133	98		tya				tya 								; reached end of string
.2134	3a		dec a				dec 	a
.2135	52 2f		eor ($2f)			eor 	(zTemp0) 					; compare length preserve carry.
.2137	f0 0f		beq $2148			beq 	_VMCSuccess 				; successful.
.2139	b1 2f		lda ($2f),y			lda 	(zTemp0),y 					; encode a number.
.213b	c8		iny				iny
.213c	20 ee 2b	jsr $2bee			jsr 	FloatEncode 				; send it to the number-builder
.213f	90 03		bcc $2144			bcc 	_VMCFail 					; if failed, give up.
.2141	18		clc				clc 								; next time round, countinue
.2142	80 ef		bra $2133			bra 	_VMCNext
.2144					_VMCFail:
.2144	68		pla				pla
.2145					_VMCFail2:
.2145	7a		ply				ply
.2146	38		sec				sec
.2147	60		rts				rts
.2148					_VMCSuccess:
.2148	a9 00		lda #$00			lda 	#0 							; construct final
.214a	20 ee 2b	jsr $2bee			jsr 	FloatEncode 				; by sending a duff value.
.214d	68		pla				pla 								; if it was -ve
.214e	c9 2d		cmp #$2d			cmp 	#"-"
.2150	d0 03		bne $2155			bne 	_VMCNotNegative
.2152	20 cc 2d	jsr $2dcc			jsr		FloatNegate 				; negate it.
.2155					_VMCNotNegative:
.2155	7a		ply				ply
.2156	18		clc				clc
.2157	60		rts				rts
.2158					VectorTable:
>2158	6e 18					.word	LinkFloatAdd             ; $80 +
>215a	77 18					.word	LinkFloatSubtract        ; $81 -
>215c	80 18					.word	LinkFloatMultiply        ; $82 *
>215e	89 18					.word	LinkFloatDivide          ; $83 /
>2160	94 18					.word	LinkFloatPower           ; $84 ^
>2162	bb 10					.word	BinaryAnd                ; $85 and
>2164	bf 10					.word	BinaryOr                 ; $86 or
>2166	9f 18					.word	LinkCompareGreater       ; $87 >
>2168	a8 18					.word	LinkCompareEqual         ; $88 =
>216a	b1 18					.word	LinkCompareLess          ; $89 <
>216c	ba 18					.word	LinkCompareGreaterEqual  ; $8a >=
>216e	c3 18					.word	LinkCompareNotEqual      ; $8b <>
>2170	cc 18					.word	LinkCompareLessEqual     ; $8c <=
>2172	a3 10					.word	AbsoluteTOS              ; $8d abs
>2174	f6 10					.word	ArrayConvert             ; $8e array
>2176	9e 11					.word	UnaryAsc                 ; $8f asc
>2178	b9 11					.word	CommandAssert            ; $90 assert
>217a	fa 11					.word	Unary16Bin               ; $91 bin$
>217c	24 12					.word	PrintCharacter           ; $92 print.chr
>217e	2e 12					.word	UnaryChr                 ; $93 chr$
>2180	93 12					.word	CompareStrings           ; $94 s.cmp
>2182	7a 14					.word	CommandFor               ; $95 for
>2184	3d 15					.word	UnaryFre                 ; $96 fre
>2186	55 15					.word	CommandGet               ; $97 get
>2188	7b 15					.word	CommandReturn            ; $98 return
>218a	be 15					.word	Command_PSET             ; $99 pset
>218c	d8 15					.word	Command_LINE             ; $9a line
>218e	ed 15					.word	Command_RECT             ; $9b rect
>2190	fc 15					.word	Command_FRAME            ; $9c frame
>2192	0b 16					.word	Command_CHAR             ; $9d char
>2194	a2 16					.word	Unary16Hex               ; $9e hex$
>2196	49 17					.word	CommandInput             ; $9f input
>2198	60 17					.word	CommandInputString       ; $a0 input$
>219a	79 17					.word	CommandInputReset        ; $a1 input.start
>219c	5d 18					.word	UnaryLen                 ; $a2 len
>219e	29 19					.word	LinkFloatCompare         ; $a3 f.cmp
>21a0	32 19					.word	LinkDivideInt32          ; $a4 int.div
>21a2	ac 19					.word	NegateTOS                ; $a5 negate
>21a4	b3 19					.word	CommandNewLine           ; $a6 new.line
>21a6	bc 19					.word	CommandNext              ; $a7 next
>21a8	a5 1a					.word	NotTOS                   ; $a8 not
>21aa	bc 1a					.word	CommandOn                ; $a9 on
>21ac	da 1a					.word	CommandMoreOn            ; $aa moreon
>21ae	e1 1a					.word	UnaryPeek                ; $ab peek
>21b0	f6 1a					.word	CommandPOKE              ; $ac poke
>21b2	0e 1b					.word	UnaryPos                 ; $ad pos
>21b4	18 1b					.word	GetChannel               ; $ae getchannel
>21b6	23 1b					.word	SetChannel               ; $af setchannel
>21b8	46 1b					.word	PrintNumber              ; $b0 print.n
>21ba	65 1b					.word	PrintString              ; $b1 print.s
>21bc	cc 1b					.word	CommandRead              ; $b2 read
>21be	e6 1b					.word	CommandReadString        ; $b3 read$
>21c0	71 1d					.word	UnaryRND                 ; $b4 rnd
>21c2	e0 1d					.word	StringConcatenate        ; $b5 concat
>21c4	37 1e					.word	SignTOS                  ; $b6 sgn
>21c6	5a 1e					.word	PrintTab                 ; $b7 print.tab
>21c8	68 1e					.word	PrintPos                 ; $b8 print.pos
>21ca	79 1e					.word	PrintSpace               ; $b9 print.spc
>21cc	92 1e					.word	Unary_Str                ; $ba str$
>21ce	0d 1f					.word	Unary_Left               ; $bb left$
>21d0	1d 1f					.word	Unary_Right              ; $bc right$
>21d2	39 1f					.word	Unary_Mid                ; $bd mid$
>21d4	ab 1f					.word	CommandSwap              ; $be swap
>21d6	21 20					.word	TimeTOS                  ; $bf ti
>21d8	28 20					.word	TimeString               ; $c0 ti$
>21da	fe 20					.word	UnaryUsr                 ; $c1 usr
>21dc	0a 21					.word	ValUnary                 ; $c2 val
>21de	68 23					.word	CommandClose             ; $c3 close
>21e0	7a 23					.word	CommandExit              ; $c4 exit
>21e2	80 23					.word	CommandDebug             ; $c5 debug
>21e4	e6 23					.word	CommandOpen              ; $c6 open
>21e6	7a 24					.word	CommandScreen            ; $c7 screen
>21e8	61 26					.word	CommandVPOKE             ; $c8 vpoke
>21ea	86 26					.word	CommandVPEEK             ; $c9 vpeek
>21ec	52 1e					.word	CommandShift             ; $ca .shift
>21ee	67 10					.word	PushByteCommand          ; $cb .byte
>21f0	7a 10					.word	PushWordCommand          ; $cc .word
>21f2	88 1b					.word	CommandPushN             ; $cd .float
>21f4	ae 1b					.word	CommandPushS             ; $ce .string
>21f6	1b 13					.word	CommandData              ; $cf .data
>21f8	8d 15					.word	CommandGoto              ; $d0 .goto
>21fa	6f 15					.word	CommandGosub             ; $d1 .gosub
>21fc	a2 15					.word	CommandGotoZ             ; $d2 .goto.z
>21fe	b0 15					.word	CommandGotoNZ            ; $d3 .goto.nz
>2200	a9 10					.word	CommandVarSpace          ; $d4 .varspace
.2202					ShiftVectorTable:
>2202	46 12					.word	CommandClr               ; $ca80 clr
>2204	24 13					.word	CommandDIM               ; $ca81 dim
>2206	15 14					.word	CommandEnd               ; $ca82 end
>2208	2e 18					.word	UnaryJoy                 ; $ca83 joy
>220a	d5 18					.word	LinkFloatIntegerPartDown ; $ca84 int
>220c	de 18					.word	LinkFloatSquareRoot      ; $ca85 sqr
>220e	ef 18					.word	LinkFloatLogarithm       ; $ca86 log
>2210	fa 18					.word	LinkFloatExponent        ; $ca87 exp
>2212	03 19					.word	LinkFloatCosine          ; $ca88 cos
>2214	0c 19					.word	LinkFloatSine            ; $ca89 sin
>2216	15 19					.word	LinkFloatTangent         ; $ca8a tan
>2218	1e 19					.word	LinkFloatArcTan          ; $ca8b atn
>221a	5c 19					.word	XCommandMouse            ; $ca8c mouse
>221c	71 19					.word	XUnaryMB                 ; $ca8d mb
>221e	7e 19					.word	XUnaryMX                 ; $ca8e mx
>2220	8f 19					.word	XUnaryMY                 ; $ca8f my
>2222	5f 1d					.word	CommandRestore           ; $ca90 restore
>2224	8e 1e					.word	CommandStop              ; $ca91 stop
>2226	eb 1f					.word	CommandSYS               ; $ca92 sys
>2228	93 20					.word	CommandTIWrite           ; $ca93 ti$.write
>222a	60 22					.word	CommandWAIT              ; $ca94 wait
>222c	ab 23					.word	X16I2CPoke               ; $ca95 i2cpoke
>222e	cb 23					.word	X16I2CPeek               ; $ca96 i2cpeek
>2230	36 24					.word	CommandBank              ; $ca97 bank
>2232	89 24					.word	XCommandSleep            ; $ca98 sleep
>2234	ad 24					.word	X16_Audio_FMINIT         ; $ca99 fminit
>2236	bb 24					.word	X16_Audio_FMNOTE         ; $ca9a fmnote
>2238	cd 24					.word	X16_Audio_FMDRUM         ; $ca9b fmdrum
>223a	df 24					.word	X16_Audio_FMINST         ; $ca9c fminst
>223c	f1 24					.word	X16_Audio_FMVIB          ; $ca9d fmvib
>223e	03 25					.word	X16_Audio_FMFREQ         ; $ca9e fmfreq
>2240	14 25					.word	X16_Audio_FMVOL          ; $ca9f fmvol
>2242	26 25					.word	X16_Audio_FMPAN          ; $caa0 fmpan
>2244	38 25					.word	X16_Audio_FMPLAY         ; $caa1 fmplay
>2246	49 25					.word	X16_Audio_FMCHORD        ; $caa2 fmchord
>2248	5a 25					.word	X16_Audio_FMPOKE         ; $caa3 fmpoke
>224a	6c 25					.word	X16_Audio_PSGINIT        ; $caa4 psginit
>224c	7a 25					.word	X16_Audio_PSGNOTE        ; $caa5 psgnote
>224e	8c 25					.word	X16_Audio_PSGVOL         ; $caa6 psgvol
>2250	9e 25					.word	X16_Audio_PSGWAV         ; $caa7 psgwav
>2252	b0 25					.word	X16_Audio_PSGFREQ        ; $caa8 psgfreq
>2254	c1 25					.word	X16_Audio_PSGPAN         ; $caa9 psgpan
>2256	d3 25					.word	X16_Audio_PSGPLAY        ; $caaa psgplay
>2258	e4 25					.word	X16_Audio_PSGCHORD       ; $caab psgchord
>225a	f5 25					.word	CommandCls               ; $caac cls
>225c	fe 25					.word	CommandLocate            ; $caad locate
>225e	28 26					.word	CommandColor             ; $caae color
.2260					CommandWAIT:
.2260	fa		plx				plx
.2261	b5 3f		lda $3f,x			lda 	NSMantissa0-2,x 			; get wait address
.2263	85 2f		sta $2f				sta 	zTemp0
.2265	b5 4b		lda $4b,x			lda 	NSMantissa1-2,x
.2267	85 30		sta $30				sta 	zTemp0+1
.2269					_WaitLoop:
.2269	b2 2f		lda ($2f)			lda 	(zTemp0) 					; read it
.226b	35 40		and $40,x			and 	NSMantissa0-1,x		 		; and with mask
.226d	55 41		eor $41,x			eor 	NSMantissa0-0,x 			; toggle
.226f	f0 f8		beq $2269			beq 	_WaitLoop 					; keep going if zero
.2271	ca		dex				dex 								; drop 3.
.2272	ca		dex				dex
.2273	ca		dex				dex
.2274	4c 29 10	jmp $1029			jmp 	NextCommand
.2277					WriteFloatCommand:
.2277	fa		plx				plx
.2278	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.227a	85 2f		sta $2f				sta 	zTemp0 						; save in MSB
.227c	88		dey				dey 								; get the upper 3 bits
.227d	b1 28		lda ($28),y			lda 	(codePtr),y
.227f	29 07		and #$07			and 	#7
.2281	c8		iny				iny
.2282	c8		iny				iny
.2283	06 2f		asl $2f				asl 	zTemp0 						; shift zTemp0:A left
.2285	2a		rol a				rol 	a 							; carry will be clear.
.2286	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.2289	85 30		sta $30				sta 	zTemp0+1
.228b	20 91 22	jsr $2291			jsr 	WriteFloatZTemp0Sub
.228e	4c 29 10	jmp $1029			jmp 	NextCommand
.2291					WriteFloatZTemp0Sub:
.2291	5a		phy				phy 								; ldart write
.2292	a0 01		ldy #$01			ldy 	#1
.2294	b5 41		lda $41,x			lda 	NSMantissa0,x
.2296	92 2f		sta ($2f)			sta 	(zTemp0)
.2298	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.229a	91 2f		sta ($2f),y			sta 	(zTemp0),y
.229c	c8		iny				iny
.229d	b5 59		lda $59,x			lda 	NSMantissa2,x
.229f	91 2f		sta ($2f),y			sta 	(zTemp0),y
.22a1	c8		iny				iny
.22a2	b5 65		lda $65,x			lda 	NSMantissa3,x
.22a4	91 2f		sta ($2f),y			sta 	(zTemp0),y
.22a6	c8		iny				iny
.22a7	b5 71		lda $71,x			lda 	NSExponent,x
.22a9	91 2f		sta ($2f),y			sta 	(zTemp0),y
.22ab	c8		iny				iny
.22ac	b5 35		lda $35,x			lda 	NSStatus,x
.22ae	91 2f		sta ($2f),y			sta 	(zTemp0),y
.22b0	ca		dex				dex
.22b1	7a		ply				ply
.22b2	60		rts				rts
.22b3					WriteIntegerCommand:
.22b3	fa		plx				plx
.22b4	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.22b6	85 2f		sta $2f				sta 	zTemp0 						; save in MSB
.22b8	88		dey				dey 								; get the upper 3 bits
.22b9	b1 28		lda ($28),y			lda 	(codePtr),y
.22bb	29 07		and #$07			and 	#7
.22bd	c8		iny				iny
.22be	c8		iny				iny
.22bf	06 2f		asl $2f				asl 	zTemp0 						; shift zTemp0:A left
.22c1	2a		rol a				rol 	a 							; carry will be clear.
.22c2	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.22c5	85 30		sta $30				sta 	zTemp0+1
.22c7	20 cd 22	jsr $22cd			jsr 	WriteIntegerZTemp0Sub
.22ca	4c 29 10	jmp $1029			jmp 	NextCommand
.22cd					WriteIntegerZTemp0Sub:
.22cd	20 45 2a	jsr $2a45			jsr 	FloatIntegerPart
.22d0	5a		phy				phy 								; start write
.22d1	a0 01		ldy #$01			ldy 	#1
.22d3	b5 35		lda $35,x			lda 	NSStatus,x 					; negate 2's comp if -ve
.22d5	30 0b		bmi $22e2			bmi 	_WIZNegative
.22d7	b5 41		lda $41,x			lda 	NSMantissa0,x 				; +ve write
.22d9	92 2f		sta ($2f)			sta 	(zTemp0)
.22db	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.22dd	91 2f		sta ($2f),y			sta 	(zTemp0),y
.22df	7a		ply				ply
.22e0	ca		dex				dex
.22e1	60		rts				rts
.22e2					_WIZNegative:
.22e2	38		sec				sec 								; -ve read
.22e3	a9 00		lda #$00			lda 	#0
.22e5	f5 41		sbc $41,x			sbc 	NSMantissa0,x
.22e7	92 2f		sta ($2f)			sta 	(zTemp0)
.22e9	a9 00		lda #$00			lda 	#0
.22eb	f5 4d		sbc $4d,x			sbc 	NSMantissa1,x
.22ed	91 2f		sta ($2f),y			sta 	(zTemp0),y
.22ef	7a		ply				ply
.22f0	ca		dex				dex
.22f1	60		rts				rts
.22f2					WriteStringCommand:
.22f2	fa		plx				plx
.22f3	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the LSB of the halved offset.
.22f5	85 2f		sta $2f				sta 	zTemp0 						; save in MSB
.22f7	88		dey				dey 								; get the upper 3 bits
.22f8	b1 28		lda ($28),y			lda 	(codePtr),y
.22fa	29 07		and #$07			and 	#7
.22fc	c8		iny				iny
.22fd	c8		iny				iny
.22fe	06 2f		asl $2f				asl 	zTemp0 						; shift zTemp0:A left
.2300	2a		rol a				rol 	a 							; carry will be clear.
.2301	6d 07 04	adc $0407			adc 	variableStartPage			; make it point to variable page.
.2304	85 30		sta $30				sta 	zTemp0+1
.2306	20 0c 23	jsr $230c			jsr 	WriteStringZTemp0Sub
.2309	4c 29 10	jmp $1029			jmp 	NextCommand
.230c					WriteStringZTemp0Sub:
.230c	5a		phy				phy
.230d	a0 01		ldy #$01			ldy 	#1 							; if it is zero we must concrete whatever.
.230f	b2 2f		lda ($2f)			lda 	(zTemp0)
.2311	11 2f		ora ($2f),y			ora 	(zTemp0),y
.2313	f0 1e		beq $2333			beq 	_WSConcrete
.2315	b2 2f		lda ($2f)			lda 	(zTemp0) 					; put address of actual string in zTemp1
.2317	85 31		sta $31				sta 	zTemp1
.2319	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.231b	85 32		sta $32				sta 	zTemp1+1
.231d	b5 41		lda $41,x			lda 	NSMantissa0,x 				; copy source to zTemp2
.231f	85 33		sta $33				sta 	zTemp2
.2321	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.2323	85 34		sta $34				sta 	zTemp2+1
.2325	b2 31		lda ($31)			lda 	(zTemp1) 					; space available
.2327	d2 33		cmp ($33)			cmp 	(zTemp2) 					; if >= required length then copy
.2329	b0 17		bcs $2342			bcs 	_WSCopy
.232b	a0 01		ldy #$01			ldy 	#1 							; set the 'available for reclaim' flag
.232d	b1 31		lda ($31),y			lda 	(zTemp1),y
.232f	09 80		ora #$80			ora 	#$80
.2331	91 31		sta ($31),y			sta 	(zTemp1),y
.2333					_WSConcrete:
.2333	b5 4d		lda $4d,x			lda 	NSMantissa1,x 				; string in YA
.2335	a8		tay				tay
.2336	b5 41		lda $41,x			lda 	NSMantissa0,x
.2338	20 d5 12	jsr $12d5			jsr 	StringConcrete
.233b	92 2f		sta ($2f)			sta 	(zTemp0) 					; save returned address
.233d	98		tya				tya
.233e	a0 01		ldy #$01			ldy 	#1
.2340	91 2f		sta ($2f),y			sta 	(zTemp0),y
.2342					_WSCopy
.2342	18		clc				clc  								; copy target+2 to zTemp2
.2343	b2 2f		lda ($2f)			lda 	(zTemp0)
.2345	69 02		adc #$02			adc 	#2
.2347	85 33		sta $33				sta 	zTemp2
.2349	a0 01		ldy #$01			ldy 	#1
.234b	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.234d	69 00		adc #$00			adc 	#0
.234f	85 34		sta $34				sta 	zTemp2+1
.2351	b5 41		lda $41,x			lda 	NSMantissa0,x 				; copy source to zTemp1
.2353	85 31		sta $31				sta 	zTemp1
.2355	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.2357	85 32		sta $32				sta 	zTemp1+1
.2359	b2 31		lda ($31)			lda 	(zTemp1) 					; length of string .. 0 inclusive
.235b	a8		tay				tay
.235c					_WSCopyLoop:
.235c	b1 31		lda ($31),y			lda 	(zTemp1),y
.235e	91 33		sta ($33),y			sta 	(zTemp2),y
.2360	88		dey				dey
.2361	c0 ff		cpy #$ff			cpy 	#$FF
.2363	d0 f7		bne $235c			bne 	_WSCopyLoop
.2365	ca		dex				dex
.2366	7a		ply				ply
.2367	60		rts				rts
.2368					CommandClose:
.2368	fa		plx				plx
.2369	20 06 18	jsr $1806			jsr 	GetInteger8Bit 				; channel to close
.236c	cd 5d 04	cmp $045d			cmp 	currentChannel 				; is it the current channel
.236f	d0 03		bne $2374			bne 	_CCNotCurrent
.2371	9c 5d 04	stz $045d			stz 	currentChannel 				; effectively disables CMD
.2374					_CCNotCurrent:
.2374	20 c3 ff	jsr $ffc3			jsr 	X16_CLOSE 					; close the file
.2377	4c 29 10	jmp $1029			jmp 	NextCommand
.237a					CommandExit:
.237a	fa		plx				plx
.237b	86 2f		stx $2f				stx 	zTemp0 						; stack position.
.237d	4c ff ff	jmp $ffff			jmp 	$FFFF 						; exits the emulator.
.2380					CommandDebug:
.2380	fa		plx				plx
>2381	db						.byte 	$DB 						; causes a break in the emulator
.2382	4c 29 10	jmp $1029			jmp 	NextCommand
.2385					XGetCharacterFromChannel:
.2385	da		phx				phx
.2386	5a		phy				phy
.2387	e0 00		cpx #$00			cpx 	#0 							; is it default
.2389	d0 05		bne $2390			bne 	_XGetChannel
.238b	20 cc ff	jsr $ffcc			jsr 	X16_CLRCHN 					; set default channel
.238e	80 08		bra $2398			bra 	_XGetChar
.2390					_XGetChannel:
.2390	20 c6 ff	jsr $ffc6			jsr 	X16_CHKIN					; CHKIN set channel
.2393	20 b7 ff	jsr $ffb7			jsr 	X16_READST 					; check okay
.2396	d0 06		bne $239e			bne 	_XGCError
.2398					_XGetChar:
.2398	20 e4 ff	jsr $ffe4			jsr 	X16_GETIN
.239b	7a		ply				ply
.239c	fa		plx				plx
.239d	60		rts				rts
.239e					_XGCError:
.239e	4c c3 27	jmp $27c3		jmp	ErrorV_channel
.23a1					XGetHPos:
.23a1	da		phx				phx
.23a2	5a		phy				phy
.23a3	38		sec				sec
.23a4	20 f0 ff	jsr $fff0			jsr 	X16_PLOT
.23a7	98		tya				tya
.23a8	7a		ply				ply
.23a9	fa		plx				plx
.23aa	60		rts				rts
.23ab					X16I2CPoke:
.23ab	fa		plx				plx
.23ac	5a		phy				phy
.23ad	20 06 18	jsr $1806			jsr 	GetInteger8Bit 				; value
.23b0	48		pha				pha
.23b1	ca		dex				dex
.23b2	20 06 18	jsr $1806			jsr 	GetInteger8Bit 				; register
.23b5	48		pha				pha
.23b6	ca		dex				dex
.23b7	20 06 18	jsr $1806			jsr 	GetInteger8Bit 				; device
.23ba	aa		tax				tax
.23bb	7a		ply				ply
.23bc	68		pla				pla
.23bd	20 c9 fe	jsr $fec9			jsr 	X16_i2c_write_byte 			; write the byte out.
.23c0	b0 06		bcs $23c8			bcs 	X16I2CError
.23c2	7a		ply				ply
.23c3	a2 ff		ldx #$ff			ldx 	#$FF
.23c5	4c 29 10	jmp $1029			jmp 	NextCommand
.23c8					X16I2CError:
.23c8	4c c3 27	jmp $27c3		jmp	ErrorV_channel
.23cb					X16I2CPeek:
.23cb	fa		plx				plx
.23cc	da		phx				phx
.23cd	5a		phy				phy
.23ce	20 06 18	jsr $1806			jsr 	GetInteger8Bit 				; register
.23d1	48		pha				pha
.23d2	ca		dex				dex
.23d3	20 06 18	jsr $1806			jsr 	GetInteger8Bit 				; device
.23d6	aa		tax				tax 								; X device
.23d7	7a		ply				ply 								; Y register
.23d8	20 c6 fe	jsr $fec6			jsr 	X16_i2c_read_byte 			; read I2C
.23db	b0 eb		bcs $23c8			bcs 	X16I2CError
.23dd	7a		ply				ply 								; restore Y/X
.23de	fa		plx				plx
.23df	ca		dex				dex 								; drop TOS (register)
.23e0	20 0c 2e	jsr $2e0c			jsr 	FloatSetByte 				; write read value to TOS.
.23e3	4c 29 10	jmp $1029			jmp 	NextCommand
.23e6					CommandOpen:
.23e6	fa		plx				plx
.23e7	a5 44		lda $44				lda 	NSMantissa0+3  				; point zTemp0 to string head, also in XY
.23e9	85 2f		sta $2f				sta 	zTemp0
.23eb	aa		tax				tax
.23ec	a5 50		lda $50				lda 	NSMantissa1+3
.23ee	85 30		sta $30				sta 	zTemp0+1
.23f0	a8		tay				tay
.23f1	e8		inx				inx 								; XY points to first character
.23f2	d0 01		bne $23f5			bne 	_CONoCarry
.23f4	c8		iny				iny
.23f5					_CONoCarry:
.23f5	b2 2f		lda ($2f)			lda 	(zTemp0) 					; get length of filename
.23f7	20 bd ff	jsr $ffbd			jsr 	X16_SETNAM
.23fa	a5 41		lda $41				lda 	NSMantissa0+0
.23fc	a6 42		ldx $42				ldx 	NSMantissa0+1
.23fe	a4 43		ldy $43				ldy 	NSMantissa0+2
.2400	20 ba ff	jsr $ffba			jsr 	X16_SETLFS
.2403	20 c0 ff	jsr $ffc0			jsr 	X16_OPEN
.2406	b0 03		bcs $240b			bcs 	_COError
.2408	4c 29 10	jmp $1029			jmp 	NextCommand
.240b					_COError:
.240b	4c c3 27	jmp $27c3		jmp	ErrorV_channel
.240e					XPokeMemory:
.240e	86 2f		stx $2f				stx 	zTemp0
.2410	84 30		sty $30				sty 	zTemp0+1
.2412	a4 00		ldy $00				ldy 	SelectRAMBank 				; old RAM bank in Y
.2414	ae 6b 05	ldx $056b			ldx 	ramBank 					; switch to BANKed RAMBank if not $FF
.2417	e0 ff		cpx #$ff			cpx 	#$FF
.2419	f0 02		beq $241d			beq 	_XPMNoSwitch
.241b	86 00		stx $00				stx 	SelectRAMBank
.241d					_XPMNoSwitch:
.241d	92 2f		sta ($2f)			sta 	(zTemp0) 					; do the POKE
.241f	84 00		sty $00				sty 	SelectRAMBank 				; reselect previous RAM Bank.
.2421					_XPMExit:
.2421	60		rts				rts
.2422					XPeekMemory:
.2422	86 2f		stx $2f				stx 	zTemp0
.2424	84 30		sty $30				sty 	zTemp0+1
.2426	a4 00		ldy $00				ldy 	SelectRAMBank 				; old RAM bank in Y
.2428	ae 6b 05	ldx $056b			ldx 	ramBank 					; switch to BANKed RAMBank if not $FF
.242b	e0 ff		cpx #$ff			cpx 	#$FF
.242d	f0 02		beq $2431			beq 	_XPMNoSwitch
.242f	86 00		stx $00				stx 	SelectRAMBank
.2431					_XPMNoSwitch:
.2431	b2 2f		lda ($2f)			lda 	(zTemp0) 					; do the PEEK
.2433	84 00		sty $00				sty 	SelectRAMBank 				; reselect previous RAM bank.
.2435	60		rts				rts
.2436					CommandBank:
.2436	fa		plx				plx
.2437	a5 41		lda $41				lda 	NSMantissa0 				; RAM bank
.2439	8d 6b 05	sta $056b			sta 	ramBank 					; store & make current
.243c	85 00		sta $00				sta 	SelectRAMBank
.243e	a5 42		lda $42				lda 	NSMantissa0+1 		 		; ROM specified
.2440	c9 ff		cmp #$ff			cmp 	#$FF
.2442	f0 03		beq $2447			beq 	_CBNoUpdate
.2444	8d 6c 05	sta $056c			sta 	romBank 					; this doesn't set the hardware page.
.2447					_CBNoUpdate:
.2447	a2 ff		ldx #$ff			ldx 	#$FF
.2449	4c 29 10	jmp $1029			jmp 	NextCommand
.056b					ramBank:
>056b							.fill 	1
.056c					romBank:
>056c							.fill 	1
.244c					XPrintCharacterToChannel:
.244c	48		pha				pha
.244d	da		phx				phx
.244e	5a		phy				phy
.244f	48		pha				pha  								; save char
.2450	e0 00		cpx #$00			cpx 	#0 							; check default (0)
.2452	d0 05		bne $2459			bne 	_XPCNotDefault
.2454	20 cc ff	jsr $ffcc			jsr 	X16_CLRCHN					; set default channel
.2457	80 08		bra $2461			bra 	_XPCSend
.2459					_XPCNotDefault:
.2459	20 c9 ff	jsr $ffc9			jsr 	X16_CHKOUT 					; CHKOUT set channel
.245c	20 b7 ff	jsr $ffb7			jsr 	X16_READST 					; check okay
.245f	d0 08		bne $2469			bne 	_XPCError
.2461					_XPCSend:
.2461	68		pla				pla 								; restore character
.2462	20 d2 ff	jsr $ffd2			jsr 	X16_BSOUT 					; print
.2465	7a		ply				ply
.2466	fa		plx				plx
.2467	68		pla				pla
.2468	60		rts				rts
.2469					_XPCError:
.2469	4c c3 27	jmp $27c3		jmp	ErrorV_channel
.246c					XReadClock:
.246c	20 de ff	jsr $ffde			jsr 	X16_RDTIM
.246f	60		rts				rts
.2470					XWriteClock:
.2470	48		pha				pha
.2471	da		phx				phx
.2472	5a		phy				phy
.2473	20 db ff	jsr $ffdb			jsr 	X16_SETTIM
.2476	7a		ply				ply
.2477	fa		plx				plx
.2478	68		pla				pla
.2479	60		rts				rts
.247a					CommandScreen:
.247a	fa		plx				plx
.247b	da		phx				phx
.247c	5a		phy				phy
.247d	20 06 18	jsr $1806			jsr 	GetInteger8Bit
.2480	18		clc				clc
.2481	20 5f ff	jsr $ff5f			jsr 	X16_screen_mode
.2484	7a		ply				ply
.2485	fa		plx				plx
.2486	4c 29 10	jmp $1029			jmp 	NextCommand
.2489					XCommandSleep:
.2489	fa		plx				plx
.248a	5a		phy				phy
.248b	20 45 2a	jsr $2a45			jsr 	FloatIntegerPart
.248e	ca		dex				dex
.248f	20 6c 24	jsr $246c			jsr 	XReadClock 					; read clock to YXA
.2492	18		clc				clc 								; calculate end time in zTemp0
.2493	65 41		adc $41				adc 	NSMantissa0
.2495	85 2f		sta $2f				sta 	zTemp0
.2497	8a		txa				txa
.2498	65 4d		adc $4d				adc 	NSMantissa1
.249a	85 30		sta $30				sta 	zTemp0+1
.249c					_XCWait:
.249c	20 6c 24	jsr $246c			jsr 	XReadClock 					; and wait for it.
.249f	c5 2f		cmp $2f				cmp 	zTemp0
.24a1	d0 f9		bne $249c			bne 	_XCWait
.24a3	e4 30		cpx $30				cpx 	zTemp0+1
.24a5	d0 f5		bne $249c			bne 	_XCWait
.24a7	a2 ff		ldx #$ff			ldx 	#$FF
.24a9	7a		ply				ply
.24aa	4c 29 10	jmp $1029			jmp 	NextCommand
.24ad					X16_Audio_FMINIT:
.24ad	fa		plx				plx
.24ae	5a		phy			phy
.24af	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>24b2	63 c0					.word	X16A_ym_init
>24b4	0a					.byte	X16_AudioCodeBank
.24b5	a2 ff		ldx #$ff		ldx	#$FF
.24b7	7a		ply			ply
.24b8	4c 29 10	jmp $1029			jmp 	NextCommand
.24bb					X16_Audio_FMNOTE:
.24bb	fa		plx				plx
.24bc	5a		phy			phy
.24bd	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_8
.24c0	18		clc			clc
.24c1	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>24c4	03 c0					.word	X16A_bas_fmnote
>24c6	0a					.byte	X16_AudioCodeBank
.24c7	a2 ff		ldx #$ff		ldx	#$FF
.24c9	7a		ply			ply
.24ca	4c 29 10	jmp $1029			jmp 	NextCommand
.24cd					X16_Audio_FMDRUM:
.24cd	fa		plx				plx
.24ce	5a		phy			phy
.24cf	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_8
.24d2	18		clc			clc
.24d3	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>24d6	6f c0					.word	X16A_ym_playdrum
>24d8	0a					.byte	X16_AudioCodeBank
.24d9	a2 ff		ldx #$ff		ldx	#$FF
.24db	7a		ply			ply
.24dc	4c 29 10	jmp $1029			jmp 	NextCommand
.24df					X16_Audio_FMINST:
.24df	fa		plx				plx
.24e0	5a		phy			phy
.24e1	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_8
.24e4	38		sec			sec
.24e5	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>24e8	69 c0					.word	X16A_ym_loadpatch
>24ea	0a					.byte	X16_AudioCodeBank
.24eb	a2 ff		ldx #$ff		ldx	#$FF
.24ed	7a		ply			ply
.24ee	4c 29 10	jmp $1029			jmp 	NextCommand
.24f1					X16_Audio_FMVIB:
.24f1	fa		plx				plx
.24f2	5a		phy			phy
.24f3	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_8
.24f6	18		clc			clc
.24f7	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>24fa	09 c0					.word	X16A_bas_fmvib
>24fc	0a					.byte	X16_AudioCodeBank
.24fd	a2 ff		ldx #$ff		ldx	#$FF
.24ff	7a		ply			ply
.2500	4c 29 10	jmp $1029			jmp 	NextCommand
.2503					X16_Audio_FMFREQ:
.2503	fa		plx				plx
.2504	5a		phy			phy
.2505	20 ca 11	jsr $11ca		jsr		X16_Audio_Parameters8_16
.2508	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>250b	00 c0					.word	X16A_bas_fmfreq
>250d	0a					.byte	X16_AudioCodeBank
.250e	a2 ff		ldx #$ff		ldx	#$FF
.2510	7a		ply			ply
.2511	4c 29 10	jmp $1029			jmp 	NextCommand
.2514					X16_Audio_FMVOL:
.2514	fa		plx				plx
.2515	5a		phy			phy
.2516	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_8
.2519	18		clc			clc
.251a	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>251d	75 c0					.word	X16A_ym_setatten
>251f	0a					.byte	X16_AudioCodeBank
.2520	a2 ff		ldx #$ff		ldx	#$FF
.2522	7a		ply			ply
.2523	4c 29 10	jmp $1029			jmp 	NextCommand
.2526					X16_Audio_FMPAN:
.2526	fa		plx				plx
.2527	5a		phy			phy
.2528	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_8
.252b	18		clc			clc
.252c	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>252f	7e c0					.word	X16A_ym_setpan
>2531	0a					.byte	X16_AudioCodeBank
.2532	a2 ff		ldx #$ff		ldx	#$FF
.2534	7a		ply			ply
.2535	4c 29 10	jmp $1029			jmp 	NextCommand
.2538					X16_Audio_FMPLAY:
.2538	fa		plx				plx
.2539	5a		phy			phy
.253a	20 e1 11	jsr $11e1		jsr		X16_Audio_Parameters8_String
.253d	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>2540	06 c0					.word	X16A_bas_fmplaystring
>2542	0a					.byte	X16_AudioCodeBank
.2543	a2 ff		ldx #$ff		ldx	#$FF
.2545	7a		ply			ply
.2546	4c 29 10	jmp $1029			jmp 	NextCommand
.2549					X16_Audio_FMCHORD:
.2549	fa		plx				plx
.254a	5a		phy			phy
.254b	20 e1 11	jsr $11e1		jsr		X16_Audio_Parameters8_String
.254e	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>2551	8d c0					.word	X16A_bas_fmchordstring
>2553	0a					.byte	X16_AudioCodeBank
.2554	a2 ff		ldx #$ff		ldx	#$FF
.2556	7a		ply			ply
.2557	4c 29 10	jmp $1029			jmp 	NextCommand
.255a					X16_Audio_FMPOKE:
.255a	fa		plx				plx
.255b	5a		phy			phy
.255c	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_8
.255f	18		clc			clc
.2560	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>2563	8a c0					.word	X16A_ym_write
>2565	0a					.byte	X16_AudioCodeBank
.2566	a2 ff		ldx #$ff		ldx	#$FF
.2568	7a		ply			ply
.2569	4c 29 10	jmp $1029			jmp 	NextCommand
.256c					X16_Audio_PSGINIT:
.256c	fa		plx				plx
.256d	5a		phy			phy
.256e	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>2571	4b c0					.word	X16A_psg_init
>2573	0a					.byte	X16_AudioCodeBank
.2574	a2 ff		ldx #$ff		ldx	#$FF
.2576	7a		ply			ply
.2577	4c 29 10	jmp $1029			jmp 	NextCommand
.257a					X16_Audio_PSGNOTE:
.257a	fa		plx				plx
.257b	5a		phy			phy
.257c	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_8
.257f	18		clc			clc
.2580	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>2583	12 c0					.word	X16A_bas_psgnote
>2585	0a					.byte	X16_AudioCodeBank
.2586	a2 ff		ldx #$ff		ldx	#$FF
.2588	7a		ply			ply
.2589	4c 29 10	jmp $1029			jmp 	NextCommand
.258c					X16_Audio_PSGVOL:
.258c	fa		plx				plx
.258d	5a		phy			phy
.258e	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_8
.2591	18		clc			clc
.2592	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>2595	54 c0					.word	X16A_psg_setatten
>2597	0a					.byte	X16_AudioCodeBank
.2598	a2 ff		ldx #$ff		ldx	#$FF
.259a	7a		ply			ply
.259b	4c 29 10	jmp $1029			jmp 	NextCommand
.259e					X16_Audio_PSGWAV:
.259e	fa		plx				plx
.259f	5a		phy			phy
.25a0	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_8
.25a3	18		clc			clc
.25a4	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>25a7	15 c0					.word	X16A_bas_psgwav
>25a9	0a					.byte	X16_AudioCodeBank
.25aa	a2 ff		ldx #$ff		ldx	#$FF
.25ac	7a		ply			ply
.25ad	4c 29 10	jmp $1029			jmp 	NextCommand
.25b0					X16_Audio_PSGFREQ:
.25b0	fa		plx				plx
.25b1	5a		phy			phy
.25b2	20 ca 11	jsr $11ca		jsr		X16_Audio_Parameters8_16
.25b5	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>25b8	0f c0					.word	X16A_bas_psgfreq
>25ba	0a					.byte	X16_AudioCodeBank
.25bb	a2 ff		ldx #$ff		ldx	#$FF
.25bd	7a		ply			ply
.25be	4c 29 10	jmp $1029			jmp 	NextCommand
.25c1					X16_Audio_PSGPAN:
.25c1	fa		plx				plx
.25c2	5a		phy			phy
.25c3	20 d0 11	jsr $11d0		jsr		X16_Audio_Parameters8_8
.25c6	18		clc			clc
.25c7	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>25ca	5a c0					.word	X16A_psg_setpan
>25cc	0a					.byte	X16_AudioCodeBank
.25cd	a2 ff		ldx #$ff		ldx	#$FF
.25cf	7a		ply			ply
.25d0	4c 29 10	jmp $1029			jmp 	NextCommand
.25d3					X16_Audio_PSGPLAY:
.25d3	fa		plx				plx
.25d4	5a		phy			phy
.25d5	20 e1 11	jsr $11e1		jsr		X16_Audio_Parameters8_String
.25d8	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>25db	18 c0					.word	X16A_bas_psgplaystring
>25dd	0a					.byte	X16_AudioCodeBank
.25de	a2 ff		ldx #$ff		ldx	#$FF
.25e0	7a		ply			ply
.25e1	4c 29 10	jmp $1029			jmp 	NextCommand
.25e4					X16_Audio_PSGCHORD:
.25e4	fa		plx				plx
.25e5	5a		phy			phy
.25e6	20 e1 11	jsr $11e1		jsr		X16_Audio_Parameters8_String
.25e9	20 6e ff	jsr $ff6e		jsr		X16_JSRFAR
>25ec	90 c0					.word	X16A_bas_psgchordstring
>25ee	0a					.byte	X16_AudioCodeBank
.25ef	a2 ff		ldx #$ff		ldx	#$FF
.25f1	7a		ply			ply
.25f2	4c 29 10	jmp $1029			jmp 	NextCommand
.25f5					CommandCls:
.25f5	fa		plx				plx
.25f6	a9 93		lda #$93			lda 	#147
.25f8	20 4c 24	jsr $244c			jsr 	XPrintCharacterToChannel
.25fb	4c 29 10	jmp $1029			jmp 	NextCommand
.25fe					CommandLocate:
.25fe	fa		plx				plx
.25ff	20 45 2a	jsr $2a45			jsr 	FloatIntegerPart
.2602	ca		dex				dex
.2603	20 45 2a	jsr $2a45			jsr 	FloatIntegerPart
.2606	ca		dex				dex
.2607	a9 13		lda #$13			lda 	#$13 						; home.
.2609	20 4c 24	jsr $244c			jsr 	XPrintCharacterToChannel
.260c	a9 1d		lda #$1d			lda 	#$1D 						; do cursor rights
.260e	a6 41		ldx $41				ldx 	NSMantissa0
.2610	20 1d 26	jsr $261d			jsr 	_CLOutputXA
.2613	a9 11		lda #$11			lda 	#$11 						; do cursor downs.
.2615	a6 42		ldx $42				ldx 	NSMantissa0+1
.2617	20 1d 26	jsr $261d			jsr 	_CLOutputXA
.261a	4c 29 10	jmp $1029			jmp 	NextCommand
.261d					_CLOutputXA:
.261d	ca		dex				dex
.261e	f0 07		beq $2627			beq 	_CLOExit
.2620	30 05		bmi $2627			bmi 	_CLOExit
.2622	20 4c 24	jsr $244c			jsr 	XPrintCharacterToChannel
.2625	80 f6		bra $261d			bra 	_CLOutputXA
.2627					_CLOExit:
.2627	60		rts				rts
.2628					CommandColor:
.2628	fa		plx				plx
.2629	20 45 2a	jsr $2a45			jsr 	FloatIntegerPart
.262c	ca		dex				dex
.262d	20 45 2a	jsr $2a45			jsr 	FloatIntegerPart
.2630	ca		dex				dex
.2631	a5 42		lda $42				lda 	NSMantissa0+1 				; bgr specified
.2633	c9 ff		cmp #$ff			cmp 	#$FF
.2635	f0 08		beq $263f			beq 	_CCNoBGR 					; if so, change background
.2637	20 47 26	jsr $2647			jsr 	_CCSetColour
.263a	a9 01		lda #$01			lda 	#$01 						; swap FGR/BGR
.263c	20 4c 24	jsr $244c			jsr 	XPrintCharacterToChannel
.263f					_CCNoBGR:
.263f	a5 41		lda $41				lda 	NSMantissa0
.2641	20 47 26	jsr $2647			jsr 	_CCSetColour
.2644	4c 29 10	jmp $1029			jmp 	NextCommand
.2647					_CCSetColour:
.2647	29 0f		and #$0f			and 	#15 						; look up in control codes table.
.2649	aa		tax				tax
.264a	bd 51 26	lda $2651,x			lda 	_CCCommandTable,x
.264d	20 4c 24	jsr $244c			jsr 	XPrintCharacterToChannel
.2650	60		rts				rts
.2651					_CCCommandTable:
>2651	90 05 1c 9f 9c 1e 1f 9e				.byte	 $90,$05,$1c,$9f,$9c,$1e,$1f,$9e
>2659	81 95 96 97 98 99 9a 9b				.byte	 $81,$95,$96,$97,$98,$99,$9a,$9b
.2661					CommandVPOKE:
.2661	fa		plx				plx
.2662	20 06 18	jsr $1806			jsr 	GetInteger8Bit 				; poke value
.2665	48		pha				pha
.2666	ca		dex				dex
.2667	20 45 2a	jsr $2a45			jsr 	FloatIntegerPart
.266a	b5 41		lda $41,x			lda 	NSMantissa0,x
.266c	8d 20 9f	sta $9f20			sta 	VRAMLow0
.266f	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.2671	8d 21 9f	sta $9f21			sta 	VRAMMed0
.2674	ca		dex				dex
.2675	20 45 2a	jsr $2a45			jsr 	FloatIntegerPart
.2678	20 06 18	jsr $1806			jsr 	GetInteger8Bit
.267b	8d 22 9f	sta $9f22			sta 	VRAMHigh0
.267e	ca		dex				dex
.267f	68		pla				pla 								; poke value back
.2680	8d 23 9f	sta $9f23			sta 	VRAMData0					; and write it out.
.2683	4c 29 10	jmp $1029			jmp 	NextCommand
.2686					CommandVPEEK:
.2686	fa		plx				plx
.2687	20 45 2a	jsr $2a45			jsr 	FloatIntegerPart
.268a	b5 41		lda $41,x			lda 	NSMantissa0,x
.268c	8d 20 9f	sta $9f20			sta 	VRAMLow0
.268f	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.2691	8d 21 9f	sta $9f21			sta 	VRAMMed0
.2694	ca		dex				dex
.2695	20 45 2a	jsr $2a45			jsr 	FloatIntegerPart
.2698	20 06 18	jsr $1806			jsr 	GetInteger8Bit
.269b	8d 22 9f	sta $9f22			sta 	VRAMHigh0
.269e	ad 23 9f	lda $9f23			lda 	VRAMData0					; read data
.26a1	20 0c 2e	jsr $2e0c			jsr 	FloatSetByte 				; return as byte
.26a4	4c 29 10	jmp $1029			jmp 	NextCommand

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/common.library

=$80					C64_END                  = $80 ; $80 end
=$81					C64_FOR                  = $81 ; $81 for
=$82					C64_NEXT                 = $82 ; $82 next
=$83					C64_DATA                 = $83 ; $83 data
=$84					C64_INPUTHASH            = $84 ; $84 input#
=$85					C64_INPUT                = $85 ; $85 input
=$86					C64_DIM                  = $86 ; $86 dim
=$87					C64_READ                 = $87 ; $87 read
=$88					C64_LET                  = $88 ; $88 let
=$89					C64_GOTO                 = $89 ; $89 goto
=$8a					C64_RUN                  = $8a ; $8a run
=$8b					C64_IF                   = $8b ; $8b if
=$8c					C64_RESTORE              = $8c ; $8c restore
=$8d					C64_GOSUB                = $8d ; $8d gosub
=$8e					C64_RETURN               = $8e ; $8e return
=$8f					C64_REM                  = $8f ; $8f rem
=$90					C64_STOP                 = $90 ; $90 stop
=$91					C64_ON                   = $91 ; $91 on
=$92					C64_WAIT                 = $92 ; $92 wait
=$93					C64_LOAD                 = $93 ; $93 load
=$94					C64_SAVE                 = $94 ; $94 save
=$95					C64_VERIFY               = $95 ; $95 verify
=$96					C64_DEF                  = $96 ; $96 def
=$97					C64_POKE                 = $97 ; $97 poke
=$98					C64_PRINTHASH            = $98 ; $98 print#
=$99					C64_PRINT                = $99 ; $99 print
=$9a					C64_CONT                 = $9a ; $9a cont
=$9b					C64_LIST                 = $9b ; $9b list
=$9c					C64_CLR                  = $9c ; $9c clr
=$9d					C64_CMD                  = $9d ; $9d cmd
=$9e					C64_SYS                  = $9e ; $9e sys
=$9f					C64_OPEN                 = $9f ; $9f open
=$a0					C64_CLOSE                = $a0 ; $a0 close
=$a1					C64_GET                  = $a1 ; $a1 get
=$a2					C64_NEW                  = $a2 ; $a2 new
=$a3					C64_TABLB                = $a3 ; $a3 tab(
=$a4					C64_TO                   = $a4 ; $a4 to
=$a5					C64_FN                   = $a5 ; $a5 fn
=$a6					C64_SPCLB                = $a6 ; $a6 spc(
=$a7					C64_THEN                 = $a7 ; $a7 then
=$a8					C64_NOT                  = $a8 ; $a8 not
=$a9					C64_STEP                 = $a9 ; $a9 step
=$aa					C64_PLUS                 = $aa ; $aa +
=$ab					C64_MINUS                = $ab ; $ab -
=$ac					C64_TIMES                = $ac ; $ac *
=$ad					C64_DIVIDE               = $ad ; $ad /
=$ae					C64_POWER                = $ae ; $ae ^
=$af					C64_AND                  = $af ; $af and
=$b0					C64_OR                   = $b0 ; $b0 or
=$b1					C64_GREATER              = $b1 ; $b1 >
=$b2					C64_EQUAL                = $b2 ; $b2 =
=$b3					C64_LESS                 = $b3 ; $b3 <
=$b4					C64_SGN                  = $b4 ; $b4 sgn
=$b5					C64_INT                  = $b5 ; $b5 int
=$b6					C64_ABS                  = $b6 ; $b6 abs
=$b7					C64_USR                  = $b7 ; $b7 usr
=$b8					C64_FRE                  = $b8 ; $b8 fre
=$b9					C64_POS                  = $b9 ; $b9 pos
=$ba					C64_SQR                  = $ba ; $ba sqr
=$bb					C64_RND                  = $bb ; $bb rnd
=$bc					C64_LOG                  = $bc ; $bc log
=$bd					C64_EXP                  = $bd ; $bd exp
=$be					C64_COS                  = $be ; $be cos
=$bf					C64_SIN                  = $bf ; $bf sin
=$c0					C64_TAN                  = $c0 ; $c0 tan
=$c1					C64_ATN                  = $c1 ; $c1 atn
=$c2					C64_PEEK                 = $c2 ; $c2 peek
=$c3					C64_LEN                  = $c3 ; $c3 len
=$c4					C64_STRDOLLAR            = $c4 ; $c4 str$
=$c5					C64_VAL                  = $c5 ; $c5 val
=$c6					C64_ASC                  = $c6 ; $c6 asc
=$c7					C64_CHRDOLLAR            = $c7 ; $c7 chr$
=$c8					C64_LEFTDOLLAR           = $c8 ; $c8 left$
=$c9					C64_RIGHTDOLLAR          = $c9 ; $c9 right$
=$ca					C64_MIDDOLLAR            = $ca ; $ca mid$
=$cb					C64_GO                   = $cb ; $cb go
=$ce80					C64_MON                  = $ce80 ; $ce80 mon
=$ce81					C64_DOS                  = $ce81 ; $ce81 dos
=$ce82					C64_OLD                  = $ce82 ; $ce82 old
=$ce83					C64_GEOS                 = $ce83 ; $ce83 geos
=$ce84					C64_VPOKE                = $ce84 ; $ce84 vpoke
=$ce85					C64_VLOAD                = $ce85 ; $ce85 vload
=$ce86					C64_SCREEN               = $ce86 ; $ce86 screen
=$ce87					C64_PSET                 = $ce87 ; $ce87 pset
=$ce88					C64_LINE                 = $ce88 ; $ce88 line
=$ce89					C64_FRAME                = $ce89 ; $ce89 frame
=$ce8a					C64_RECT                 = $ce8a ; $ce8a rect
=$ce8b					C64_CHAR                 = $ce8b ; $ce8b char
=$ce8c					C64_MOUSE                = $ce8c ; $ce8c mouse
=$ce8d					C64_COLOR                = $ce8d ; $ce8d color
=$ce8e					C64_TEST                 = $ce8e ; $ce8e test
=$ce8f					C64_RESET                = $ce8f ; $ce8f reset
=$ce90					C64_CLS                  = $ce90 ; $ce90 cls
=$ce91					C64_CODEX                = $ce91 ; $ce91 codex
=$ce92					C64_LOCATE               = $ce92 ; $ce92 locate
=$ce93					C64_BOOT                 = $ce93 ; $ce93 boot
=$ce94					C64_KEYMAP               = $ce94 ; $ce94 keymap
=$ce95					C64_BLOAD                = $ce95 ; $ce95 bload
=$ce96					C64_BVLOAD               = $ce96 ; $ce96 bvload
=$ce97					C64_BVERIFY              = $ce97 ; $ce97 bverify
=$ce98					C64_BANK                 = $ce98 ; $ce98 bank
=$ce99					C64_FMINIT               = $ce99 ; $ce99 fminit
=$ce9a					C64_FMNOTE               = $ce9a ; $ce9a fmnote
=$ce9b					C64_FMDRUM               = $ce9b ; $ce9b fmdrum
=$ce9c					C64_FMINST               = $ce9c ; $ce9c fminst
=$ce9d					C64_FMVIB                = $ce9d ; $ce9d fmvib
=$ce9e					C64_FMFREQ               = $ce9e ; $ce9e fmfreq
=$ce9f					C64_FMVOL                = $ce9f ; $ce9f fmvol
=$cea0					C64_FMPAN                = $cea0 ; $cea0 fmpan
=$cea1					C64_FMPLAY               = $cea1 ; $cea1 fmplay
=$cea2					C64_FMCHORD              = $cea2 ; $cea2 fmchord
=$cea3					C64_FMPOKE               = $cea3 ; $cea3 fmpoke
=$cea4					C64_PSGINIT              = $cea4 ; $cea4 psginit
=$cea5					C64_PSGNOTE              = $cea5 ; $cea5 psgnote
=$cea6					C64_PSGVOL               = $cea6 ; $cea6 psgvol
=$cea7					C64_PSGWAV               = $cea7 ; $cea7 psgwav
=$cea8					C64_PSGFREQ              = $cea8 ; $cea8 psgfreq
=$cea9					C64_PSGPAN               = $cea9 ; $cea9 psgpan
=$ceaa					C64_PSGPLAY              = $ceaa ; $ceaa psgplay
=$ceab					C64_PSGCHORD             = $ceab ; $ceab psgchord
=$ceac					C64_REBOOT               = $ceac ; $ceac reboot
=$cead					C64_POWEROFF             = $cead ; $cead poweroff
=$ceae					C64_I2CPOKE              = $ceae ; $ceae i2cpoke
=$ceaf					C64_SLEEP                = $ceaf ; $ceaf sleep
=$ceb0					C64_BSAVE                = $ceb0 ; $ceb0 bsave
=$ceb1					C64_MENU                 = $ceb1 ; $ceb1 menu
=$ceb2					C64_REN                  = $ceb2 ; $ceb2 ren
=$ceb3					C64_LINPUT               = $ceb3 ; $ceb3 linput
=$ceb4					C64_LINPUTHASH           = $ceb4 ; $ceb4 linput#
=$ceb5					C64_BINPUTHASH           = $ceb5 ; $ceb5 binput#
=$ceb6					C64_HELP                 = $ceb6 ; $ceb6 help
=$ced0					C64_VPEEK                = $ced0 ; $ced0 vpeek
=$ced1					C64_MX                   = $ced1 ; $ced1 mx
=$ced2					C64_MY                   = $ced2 ; $ced2 my
=$ced3					C64_MB                   = $ced3 ; $ced3 mb
=$ced4					C64_JOY                  = $ced4 ; $ced4 joy
=$ced5					C64_HEXDOLLAR            = $ced5 ; $ced5 hex$
=$ced6					C64_BINDOLLAR            = $ced6 ; $ced6 bin$
=$ced7					C64_I2CPEEK              = $ced7 ; $ced7 i2cpeek
=$ced8					C64_POINTER              = $ced8 ; $ced8 pointer
=$ced9					C64_STRPTR               = $ced9 ; $ced9 strptr
=$ceda					C64_RPTDOLLAR            = $ceda ; $ceda rpt$
=$1000					CodeStart = $1000
=$22					ZeroPageMandatory = $22
=$400					MemoryStorage = $400
.0028					codePtr:
>0028							.fill 	2
.002a					codePage:
>002a							.fill 	1
.002b					objPtr:
>002b							.fill 	2 							; bytes must not change (it could expand) as the
.002d					objPage:
>002d							.fill 	1
.002e					objIncrement:
>002e							.fill 	1
.002f					zTemp0:
>002f							.fill 	2
.0031					zTemp1:
>0031							.fill 	2
.0033					zTemp2:
>0033							.fill 	2
=$80					PCD_STARTBINARY = $80
=$8d					PCD_ENDBINARY = $8d
=$8d					PCD_STARTCOMMAND = $8d
=$ca					PCD_ENDCOMMAND = $ca
=$ca					PCD_STARTSYSTEM = $ca
=$d5					PCD_ENDSYSTEM = $d5
=$80					PCD_PLUS             = $80 ; +
=$81					PCD_MINUS            = $81 ; -
=$82					PCD_TIMES            = $82 ; *
=$83					PCD_DIVIDE           = $83 ; /
=$84					PCD_POWER            = $84 ; ^
=$85					PCD_AND              = $85 ; and
=$86					PCD_OR               = $86 ; or
=$87					PCD_GREATER          = $87 ; >
=$88					PCD_EQUAL            = $88 ; =
=$89					PCD_LESS             = $89 ; <
=$8a					PCD_GREATEREQUAL     = $8a ; >=
=$8b					PCD_LESSGREATER      = $8b ; <>
=$8c					PCD_LESSEQUAL        = $8c ; <=
=$8d					PCD_ABS              = $8d ; abs
=$8e					PCD_ARRAY            = $8e ; array
=$8f					PCD_ASC              = $8f ; asc
=$90					PCD_ASSERT           = $90 ; assert
=$91					PCD_BINDOLLAR        = $91 ; bin$
=$92					PCD_PRINTCMD_CHR     = $92 ; print.chr
=$93					PCD_CHRDOLLAR        = $93 ; chr$
=$94					PCD_SCMD_CMP         = $94 ; s.cmp
=$95					PCD_FOR              = $95 ; for
=$96					PCD_FRE              = $96 ; fre
=$97					PCD_GET              = $97 ; get
=$98					PCD_RETURN           = $98 ; return
=$99					PCD_PSET             = $99 ; pset
=$9a					PCD_LINE             = $9a ; line
=$9b					PCD_RECT             = $9b ; rect
=$9c					PCD_FRAME            = $9c ; frame
=$9d					PCD_CHAR             = $9d ; char
=$9e					PCD_HEXDOLLAR        = $9e ; hex$
=$9f					PCD_INPUT            = $9f ; input
=$a0					PCD_INPUTDOLLAR      = $a0 ; input$
=$a1					PCD_INPUTCMD_START   = $a1 ; input.start
=$a2					PCD_LEN              = $a2 ; len
=$a3					PCD_FCMD_CMP         = $a3 ; f.cmp
=$a4					PCD_INTCMD_DIV       = $a4 ; int.div
=$a5					PCD_NEGATE           = $a5 ; negate
=$a6					PCD_NEWCMD_LINE      = $a6 ; new.line
=$a7					PCD_NEXT             = $a7 ; next
=$a8					PCD_NOT              = $a8 ; not
=$a9					PCD_ON               = $a9 ; on
=$aa					PCD_MOREON           = $aa ; moreon
=$ab					PCD_PEEK             = $ab ; peek
=$ac					PCD_POKE             = $ac ; poke
=$ad					PCD_POS              = $ad ; pos
=$ae					PCD_GETCHANNEL       = $ae ; getchannel
=$af					PCD_SETCHANNEL       = $af ; setchannel
=$b0					PCD_PRINTCMD_N       = $b0 ; print.n
=$b1					PCD_PRINTCMD_S       = $b1 ; print.s
=$b2					PCD_READ             = $b2 ; read
=$b3					PCD_READDOLLAR       = $b3 ; read$
=$b4					PCD_RND              = $b4 ; rnd
=$b5					PCD_CONCAT           = $b5 ; concat
=$b6					PCD_SGN              = $b6 ; sgn
=$b7					PCD_PRINTCMD_TAB     = $b7 ; print.tab
=$b8					PCD_PRINTCMD_POS     = $b8 ; print.pos
=$b9					PCD_PRINTCMD_SPC     = $b9 ; print.spc
=$ba					PCD_STRDOLLAR        = $ba ; str$
=$bb					PCD_LEFTDOLLAR       = $bb ; left$
=$bc					PCD_RIGHTDOLLAR      = $bc ; right$
=$bd					PCD_MIDDOLLAR        = $bd ; mid$
=$be					PCD_SWAP             = $be ; swap
=$bf					PCD_TI               = $bf ; ti
=$c0					PCD_TIDOLLAR         = $c0 ; ti$
=$c1					PCD_USR              = $c1 ; usr
=$c2					PCD_VAL              = $c2 ; val
=$c3					PCD_CLOSE            = $c3 ; close
=$c4					PCD_EXIT             = $c4 ; exit
=$c5					PCD_DEBUG            = $c5 ; debug
=$c6					PCD_OPEN             = $c6 ; open
=$c7					PCD_SCREEN           = $c7 ; screen
=$c8					PCD_VPOKE            = $c8 ; vpoke
=$c9					PCD_VPEEK            = $c9 ; vpeek
=$ca					PCD_CMD_SHIFT        = $ca ; .shift
=$cb					PCD_CMD_BYTE         = $cb ; .byte
=$cc					PCD_CMD_WORD         = $cc ; .word
=$cd					PCD_CMD_FLOAT        = $cd ; .float
=$ce					PCD_CMD_STRING       = $ce ; .string
=$cf					PCD_CMD_DATA         = $cf ; .data
=$d0					PCD_CMD_GOTO         = $d0 ; .goto
=$d1					PCD_CMD_GOSUB        = $d1 ; .gosub
=$d2					PCD_CMD_GOTOCMD_Z    = $d2 ; .goto.z
=$d3					PCD_CMD_GOTOCMD_NZ   = $d3 ; .goto.nz
=$d4					PCD_CMD_VARSPACE     = $d4 ; .varspace
=$ca80					PCD_CLR              = $ca80 ; clr
=$ca81					PCD_DIM              = $ca81 ; dim
=$ca82					PCD_END              = $ca82 ; end
=$ca83					PCD_JOY              = $ca83 ; joy
=$ca84					PCD_INT              = $ca84 ; int
=$ca85					PCD_SQR              = $ca85 ; sqr
=$ca86					PCD_LOG              = $ca86 ; log
=$ca87					PCD_EXP              = $ca87 ; exp
=$ca88					PCD_COS              = $ca88 ; cos
=$ca89					PCD_SIN              = $ca89 ; sin
=$ca8a					PCD_TAN              = $ca8a ; tan
=$ca8b					PCD_ATN              = $ca8b ; atn
=$ca8c					PCD_MOUSE            = $ca8c ; mouse
=$ca8d					PCD_MB               = $ca8d ; mb
=$ca8e					PCD_MX               = $ca8e ; mx
=$ca8f					PCD_MY               = $ca8f ; my
=$ca90					PCD_RESTORE          = $ca90 ; restore
=$ca91					PCD_STOP             = $ca91 ; stop
=$ca92					PCD_SYS              = $ca92 ; sys
=$ca93					PCD_TIDOLLARCMD_WRITE = $ca93 ; ti$.write
=$ca94					PCD_WAIT             = $ca94 ; wait
=$ca95					PCD_I2CPOKE          = $ca95 ; i2cpoke
=$ca96					PCD_I2CPEEK          = $ca96 ; i2cpeek
=$ca97					PCD_BANK             = $ca97 ; bank
=$ca98					PCD_SLEEP            = $ca98 ; sleep
=$ca99					PCD_FMINIT           = $ca99 ; fminit
=$ca9a					PCD_FMNOTE           = $ca9a ; fmnote
=$ca9b					PCD_FMDRUM           = $ca9b ; fmdrum
=$ca9c					PCD_FMINST           = $ca9c ; fminst
=$ca9d					PCD_FMVIB            = $ca9d ; fmvib
=$ca9e					PCD_FMFREQ           = $ca9e ; fmfreq
=$ca9f					PCD_FMVOL            = $ca9f ; fmvol
=$caa0					PCD_FMPAN            = $caa0 ; fmpan
=$caa1					PCD_FMPLAY           = $caa1 ; fmplay
=$caa2					PCD_FMCHORD          = $caa2 ; fmchord
=$caa3					PCD_FMPOKE           = $caa3 ; fmpoke
=$caa4					PCD_PSGINIT          = $caa4 ; psginit
=$caa5					PCD_PSGNOTE          = $caa5 ; psgnote
=$caa6					PCD_PSGVOL           = $caa6 ; psgvol
=$caa7					PCD_PSGWAV           = $caa7 ; psgwav
=$caa8					PCD_PSGFREQ          = $caa8 ; psgfreq
=$caa9					PCD_PSGPAN           = $caa9 ; psgpan
=$caaa					PCD_PSGPLAY          = $caaa ; psgplay
=$caab					PCD_PSGCHORD         = $caab ; psgchord
=$caac					PCD_CLS              = $caac ; cls
=$caad					PCD_LOCATE           = $caad ; locate
=$caae					PCD_COLOR            = $caae ; color
.26a7					ErrorV_range:
.26a7	20 1e 14	jsr $141e		jsr	ErrorHandler
>26aa	4f 55 54 20 4f 46 20 52			.text	"OUT OF RANGE",0
>26b2	41 4e 47 45 00
.26b7					ErrorV_value:
.26b7	20 1e 14	jsr $141e		jsr	ErrorHandler
>26ba	42 41 44 20 56 41 4c 55			.text	"BAD VALUE",0
>26c2	45 00
.26c4					ErrorV_syntax:
.26c4	20 1e 14	jsr $141e		jsr	ErrorHandler
>26c7	53 59 4e 54 41 58 20 45			.text	"SYNTAX ERROR",0
>26cf	52 52 4f 52 00
.26d4					ErrorV_type:
.26d4	20 1e 14	jsr $141e		jsr	ErrorHandler
>26d7	54 59 50 45 20 4d 49 53			.text	"TYPE MISMATCH",0
>26df	4d 41 54 43 48 00
.26e5					ErrorV_unimplemented:
.26e5	20 1e 14	jsr $141e		jsr	ErrorHandler
>26e8	4e 4f 54 20 49 4d 50 4c			.text	"NOT IMPLEMENTED",0
>26f0	45 4d 45 4e 54 45 44 00
.26f8					ErrorV_assert:
.26f8	20 1e 14	jsr $141e		jsr	ErrorHandler
>26fb	41 53 53 45 52 54 20 46			.text	"ASSERT FAIL",0
>2703	41 49 4c 00
.2707					ErrorV_line:
.2707	20 1e 14	jsr $141e		jsr	ErrorHandler
>270a	55 4e 4b 4e 4f 57 4e 20			.text	"UNKNOWN LINE NUMBER",0
>2712	4c 49 4e 45 20 4e 55 4d 42 45 52 00
.271e					ErrorV_internal:
.271e	20 1e 14	jsr $141e		jsr	ErrorHandler
>2721	49 4e 54 45 52 4e 41 4c			.text	"INTERNAL ERROR",0
>2729	20 45 52 52 4f 52 00
.2730					ErrorV_divzero:
.2730	20 1e 14	jsr $141e		jsr	ErrorHandler
>2733	44 49 56 49 44 45 20 42			.text	"DIVIDE BY ZERO",0
>273b	59 20 5a 45 52 4f 00
.2742					ErrorV_structure:
.2742	20 1e 14	jsr $141e		jsr	ErrorHandler
>2745	53 54 52 55 43 54 55 52			.text	"STRUCTURE IMBALANCE",0
>274d	45 20 49 4d 42 41 4c 41 4e 43 45 00
.2759					ErrorV_stop:
.2759	20 1e 14	jsr $141e		jsr	ErrorHandler
>275c	50 52 4f 47 52 41 4d 20			.text	"PROGRAM STOPPED",0
>2764	53 54 4f 50 50 45 44 00
.276c					ErrorV_data:
.276c	20 1e 14	jsr $141e		jsr	ErrorHandler
>276f	4f 55 54 20 4f 46 20 44			.text	"OUT OF DATA",0
>2777	41 54 41 00
.277b					ErrorV_undeclared:
.277b	20 1e 14	jsr $141e		jsr	ErrorHandler
>277e	55 4e 4b 4e 4f 57 4e 20			.text	"UNKNOWN ARRAY",0
>2786	41 52 52 41 59 00
.278c					ErrorV_redefine:
.278c	20 1e 14	jsr $141e		jsr	ErrorHandler
>278f	41 52 52 41 59 20 52 45			.text	"ARRAY REDEFINED",0
>2797	44 45 46 49 4e 45 44 00
.279f					ErrorV_index:
.279f	20 1e 14	jsr $141e		jsr	ErrorHandler
>27a2	42 41 44 20 41 52 52 41			.text	"BAD ARRAY INDEX",0
>27aa	59 20 49 4e 44 45 58 00
.27b2					ErrorV_memory:
.27b2	20 1e 14	jsr $141e		jsr	ErrorHandler
>27b5	4f 55 54 20 4f 46 20 4d			.text	"OUT OF MEMORY",0
>27bd	45 4d 4f 52 59 00
.27c3					ErrorV_channel:
.27c3	20 1e 14	jsr $141e		jsr	ErrorHandler
>27c6	49 4e 50 55 54 2f 4f 55			.text	"INPUT/OUTPUT ERROR",0
>27ce	54 50 55 54 20 45 52 52 4f 52 00
.27d9					MoveObjectForward:
.27d9	b2 2b		lda ($2b)			lda 	(objPtr) 					; get next
.27db	c9 ff		cmp #$ff			cmp 	#$FF
.27dd	f0 36		beq $2815			beq 	_MOFEnd
.27df	c9 40		cmp #$40			cmp 	#$40 						; 00-3F
.27e1	90 24		bcc $2807			bcc 	_MOFAdvance1 				; forward 1
.27e3	a0 02		ldy #$02			ldy 	#2 							; 40-6F
.27e5	c9 70		cmp #$70			cmp 	#$70 						; forward 2
.27e7	90 20		bcc $2809			bcc 	_MOFAdvanceY
.27e9	c9 ca		cmp #$ca			cmp 	#PCD_STARTSYSTEM 			; 70 - System tokens.
.27eb	90 1a		bcc $2807			bcc 	_MOFAdvance1 				; forward 1
.27ed	a8		tay				tay 								; read the size.
.27ee	b9 53 27	lda $2753,y			lda 	MOFSizeTable-PCD_STARTSYSTEM,y
.27f1	a8		tay				tay
.27f2	c8		iny				iny 								; add 1 for the system token.
.27f3	d0 14		bne $2809			bne 	_MOFAdvanceY 				; if 0, was $FF thus a string/data skip.
.27f5	a0 01		ldy #$01			ldy 	#1 							; get length byte
.27f7	b1 2b		lda ($2b),y			lda 	(objPtr),y
.27f9	a8		tay				tay 								; into Y.
.27fa	18		clc				clc
.27fb	a5 2b		lda $2b				lda 	objPtr						; add 2 to the object pointer
.27fd	69 02		adc #$02			adc 	#2
.27ff	85 2b		sta $2b				sta 	objPtr
.2801	90 02		bcc $2805			bcc 	_MOFNoCarry1
.2803	e6 2c		inc $2c				inc 	objPtr+1
.2805					_MOFNoCarry1:
.2805	80 02		bra $2809			bra 	_MOFAdvanceY
.2807					_MOFAdvance1:
.2807	a0 01		ldy #$01			ldy 	#1
.2809					_MOFAdvanceY:
.2809	98		tya				tya 								; add Y to objPtr
.280a	18		clc				clc
.280b	65 2b		adc $2b				adc 	objPtr
.280d	85 2b		sta $2b				sta 	objPtr
.280f	90 02		bcc $2813			bcc 	_MOFNoCarry2
.2811	e6 2c		inc $2c				inc 	objPtr+1
.2813					_MOFNoCarry2:
.2813	18		clc				clc 								; not completed.
.2814	60		rts				rts
.2815					_MOFEnd:
.2815	e6 2b		inc $2b				inc 	objPtr
.2817	d0 02		bne $281b			bne 	_MOFENoCarry
.2819	e6 2c		inc $2c				inc 	objPtr+1
.281b					_MOFENoCarry:
.281b	38		sec				sec
.281c	60		rts				rts
.281d					MOFSizeTable:
>281d	01					.byte	1         	; $ca .shift
>281e	01					.byte	1         	; $cb .byte
>281f	02					.byte	2         	; $cc .word
>2820	05					.byte	5         	; $cd .float
>2821	ff					.byte	255       	; $ce .string
>2822	ff					.byte	255       	; $cf .data
>2823	02					.byte	2         	; $d0 .goto
>2824	02					.byte	2         	; $d1 .gosub
>2825	02					.byte	2         	; $d2 .goto.z
>2826	02					.byte	2         	; $d3 .goto.nz
>2827	02					.byte	2         	; $d4 .varspace

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/ifloat32.library

=12					MathStackSize = 12
=$40					NSSString = $40 							; string vs typemask
=$00					NSSIFloat = $00 							; ifloat vs typemask
=$20					NSSIInt16 = $20								; when set, a reference is a 16 bit reference (e.g. a%)
=$40					NSSTypeMask = $40
=$80					NSSArray = $80  							; array (in variable code)
.0035					NSStatus:
>0035							.fill 	MathStackSize
.0041					NSMantissa0:
>0041							.fill 	MathStackSize 				; (this is my integer mantissa system)
.004d					NSMantissa1:
>004d							.fill 	MathStackSize
.0059					NSMantissa2:
>0059							.fill 	MathStackSize
.0065					NSMantissa3:
>0065							.fill 	MathStackSize
.0071					NSExponent:
>0071							.fill 	MathStackSize
.056d					numberBuffer:
>056d							.fill 	34
.2828					FloatSubtract:
.2828	b5 35		lda $35,x			lda 	NSStatus,x 					; negate top of stack
.282a	49 80		eor #$80			eor 	#$80
.282c	95 35		sta $35,x			sta 	NSStatus,x					; and fall through.
.282e					FloatAdd:
.282e	ca		dex				dex
.282f	b5 71		lda $71,x			lda 	NSExponent,x 				; can use optimised.
.2831	15 72		ora $72,x			ora 	NSExponent+1,x
.2833	15 65		ora $65,x			ora 	NSMantissa3,x
.2835	15 66		ora $66,x			ora 	NSMantissa3+1,x
.2837	d0 04		bne $283d			bne 	_FAUseFloat
.2839	20 ca 2b	jsr $2bca			jsr 	FloatInt32Add 				; use the int32 one.
.283c	60		rts				rts
.283d					_FAUseFloat:
.283d	20 5f 2b	jsr $2b5f			jsr 	FloatNormalise 				; normalise S[X]
.2840	f0 51		beq $2893			beq 	_FAReturn1
.2842	e8		inx				inx 								; normalise S[X+1]
.2843	20 5f 2b	jsr $2b5f			jsr 	FloatNormalise
.2846	ca		dex				dex
.2847	c9 00		cmp #$00			cmp 	#0
.2849	f0 60		beq $28ab			beq 	_FAExit 					; if so, just return A
.284b	b5 71		lda $71,x			lda 	NSExponent,x 				; are the exponents the same ?
.284d	d5 72		cmp $72,x			cmp 	NSExponent+1,x
.284f	f0 18		beq $2869			beq 	_FAExponentsEqual
.2851	b5 71		lda $71,x			lda 	NSExponent,x 				; work out the larger exponent
.2853	a8		tay				tay
.2854	38		sec				sec 								; do a signed comparison of the exponents.
.2855	f5 72		sbc $72,x			sbc 	NSExponent+1,x
.2857	50 02		bvc $285b			bvc 	_FANoSignedChange
.2859	49 80		eor #$80			eor 	#$80
.285b					_FANoSignedChange:
.285b	29 80		and #$80			and 	#$80
.285d	10 02		bpl $2861			bpl 	_FAHaveMax
.285f	b4 72		ldy $72,x			ldy 	NSExponent+1,x
.2861					_FAHaveMax:
.2861	20 ac 28	jsr $28ac			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.2864	e8		inx				inx
.2865	20 ac 28	jsr $28ac			jsr 	_FAShiftToExponent
.2868	ca		dex				dex
.2869					_FAExponentsEqual:
.2869	b5 35		lda $35,x			lda 	NSStatus,x 					; are the signs the same
.286b	55 36		eor $36,x			eor 	NSStatus+1,x
.286d	30 0e		bmi $287d			bmi 	_FADifferentSigns
.286f	20 96 2b	jsr $2b96			jsr 	FloatAddTopTwoStack 		; do the add of the mantissae
.2872	b5 65		lda $65,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.2874	10 35		bpl $28ab			bpl 	_FAExit 					; if no, we are done.
.2876	20 23 2e	jsr $2e23			jsr 	FloatShiftRight 				; shift A right, renormalising it.
.2879	f6 71		inc $71,x			inc 	NSExponent,x 				; bump the exponent and exit
.287b	80 2e		bra $28ab			bra 	_FAExit
.287d					_FADifferentSigns:
.287d	20 b0 2b	jsr $2bb0			jsr 	FloatSubTopTwoStack 		; subtract mantissa B from A
.2880	b5 65		lda $65,x			lda 	NSMantissa3,x 				; is the result negative ?
.2882	10 06		bpl $288a			bpl 	_FACheckZero 				; if no, check for -0
.2884	20 cc 2d	jsr $2dcc			jsr 	FloatNegate 					; netate result
.2887	20 d3 2d	jsr $2dd3			jsr 	FloatNegateMantissa 			; negate (2'c) the mantissa
.288a					_FACheckZero:
.288a	20 2c 2e	jsr $2e2c			jsr 	FloatIsZero	 				; check for -0
.288d	d0 1c		bne $28ab			bne 	_FAExit
.288f	74 35		stz $35,x			stz 	NSStatus,x
.2891	80 18		bra $28ab			bra 	_FAExit
.2893					_FAReturn1:
.2893	b5 42		lda $42,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.2895	95 41		sta $41,x			sta 	NSMantissa0,x
.2897	b5 4e		lda $4e,x			lda 	NSMantissa1+1,x
.2899	95 4d		sta $4d,x			sta 	NSMantissa1,x
.289b	b5 5a		lda $5a,x			lda 	NSMantissa2+1,x
.289d	95 59		sta $59,x			sta 	NSMantissa2,x
.289f	b5 66		lda $66,x			lda 	NSMantissa3+1,x
.28a1	95 65		sta $65,x			sta 	NSMantissa3,x
.28a3	b5 72		lda $72,x			lda 	NSExponent+1,x
.28a5	95 71		sta $71,x			sta 	NSExponent,x
.28a7	b5 36		lda $36,x			lda 	NSStatus+1,x
.28a9	95 35		sta $35,x			sta 	NSStatus,x
.28ab					_FAExit:
.28ab	60		rts				rts
.28ac					_FAShiftToExponent:
.28ac					_FAShiftToExponent2:
.28ac	98		tya				tya 								; compare Y to exponent
.28ad	d5 71		cmp $71,x			cmp 	NSExponent,x 				; reached the exponent required ?
.28af	f0 07		beq $28b8			beq 	_FASEExit 					; exit if so.
.28b1	20 23 2e	jsr $2e23			jsr 	FloatShiftRight	 			; shift the mantissa right
.28b4	f6 71		inc $71,x			inc 	NSExponent,x 				; increment exponent
.28b6	80 f4		bra $28ac			bra 	_FAShiftToExponent2
.28b8					_FASEExit:
.28b8	60		rts				rts
.28b9					CompareEqual:
.28b9	b5 41		lda $41,x			lda 	NSMantissa0,x
.28bb	d0 09		bne $28c6			bne 	ReturnFalse
.28bd					ReturnTrue:
.28bd	a9 01		lda #$01			lda 	#1
.28bf	95 41		sta $41,x			sta 	NSMantissa0,x
.28c1	a9 80		lda #$80			lda 	#$80
.28c3	95 35		sta $35,x			sta 	NSStatus,x
.28c5	60		rts				rts
.28c6					ReturnFalse:
.28c6	74 41		stz $41,x			stz 	NSMantissa0,x
.28c8	60		rts				rts
.28c9					CompareNotEqual:
.28c9	b5 41		lda $41,x			lda 	NSMantissa0,x
.28cb	d0 f0		bne $28bd			bne 	ReturnTrue
.28cd	80 f7		bra $28c6			bra 	ReturnFalse
.28cf					CompareLess:
.28cf	b5 41		lda $41,x			lda 	NSMantissa0,x
.28d1	c9 ff		cmp #$ff			cmp 	#$FF
.28d3	f0 e8		beq $28bd			beq 	ReturnTrue
.28d5	80 ef		bra $28c6			bra 	ReturnFalse
.28d7					CompareGreater:
.28d7	b5 41		lda $41,x			lda 	NSMantissa0,x
.28d9	c9 01		cmp #$01			cmp 	#$01
.28db	f0 e0		beq $28bd			beq 	ReturnTrue
.28dd	80 e7		bra $28c6			bra 	ReturnFalse
.28df					CompareLessEqual:
.28df	b5 41		lda $41,x			lda 	NSMantissa0,x
.28e1	c9 01		cmp #$01			cmp 	#$01
.28e3	d0 d8		bne $28bd			bne 	ReturnTrue
.28e5	80 df		bra $28c6			bra 	ReturnFalse
.28e7					CompareGreaterEqual:
.28e7	b5 41		lda $41,x			lda 	NSMantissa0,x
.28e9	c9 ff		cmp #$ff			cmp 	#$FF
.28eb	d0 d0		bne $28bd			bne 	ReturnTrue
.28ed	80 d7		bra $28c6			bra 	ReturnFalse
.28ef					FloatCompare:
.28ef	b5 71		lda $71,x			lda 	NSExponent,x 				; float comparison.
.28f1	15 70		ora $70,x			ora 	NSExponent-1,x 				; integer if both integer.
.28f3	48		pha				pha
.28f4	20 28 28	jsr $2828			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.28f7	68		pla				pla
.28f8	d0 0c		bne $2906			bne 	_FCCompareFloat
.28fa	b5 41		lda $41,x			lda 	NSMantissa0,x
.28fc	15 4d		ora $4d,x			ora 	NSMantissa1,x
.28fe	15 59		ora $59,x			ora 	NSMantissa2,x
.2900	15 65		ora $65,x			ora 	NSMantissa3,x
.2902	f0 14		beq $2918			beq 	_FCExit 					; if zero, return zero
.2904	80 0a		bra $2910			bra 	_FCSign
.2906					_FCCompareFloat:
.2906	b5 4d		lda $4d,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.2908	29 f0		and #$f0			and 	#$F0
.290a	15 59		ora $59,x			ora 	NSMantissa2,x
.290c	15 65		ora $65,x			ora 	NSMantissa3,x
.290e	f0 08		beq $2918			beq 	_FCExit 					; zero, so approximately identical
.2910					_FCSign:
.2910	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.2912	34 35		bit $35,x			bit 	NSStatus,x
.2914	10 02		bpl $2918			bpl 	_FCExit
.2916					_FCNegative:
.2916	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.2918					_FCExit:
.2918	20 0c 2e	jsr $2e0c			jsr 	FloatSetByte 				; set the result 255,0,1
.291b	60		rts				rts
.291c					FloatScalarTable:
>291c	66 66 66 66				.dword $66666666 ; 0.1
>2920	de					.byte $de
>2921	1f 85 eb 51				.dword $51eb851f ; 0.01
>2925	db					.byte $db
>2926	4c 37 89 41				.dword $4189374c ; 0.001
>292a	d8					.byte $d8
>292b	ac 8b db 68				.dword $68db8bac ; 0.0001
>292f	d4					.byte $d4
>2930	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>2934	d1					.byte $d1
>2935	83 de 1b 43				.dword $431bde83 ; 1e-06
>2939	ce					.byte $ce
>293a	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>293e	ca					.byte $ca
>293f	89 3b e6 55				.dword $55e63b89 ; 1e-08
>2943	c7					.byte $c7
>2944	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>2948	c4					.byte $c4
>2949	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>294d	c0					.byte $c0
>294e	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>2952	bd					.byte $bd
.2953					FloatDivide:
.2953	48		pha				pha
.2954	20 5f 2b	jsr $2b5f			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.2957	ca		dex				dex
.2958	c9 00		cmp #$00			cmp 	#0
.295a	f0 1e		beq $297a			beq 	_FDZero
.295c	20 5f 2b	jsr $2b5f			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.295f	f0 16		beq $2977			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.2961	20 c2 29	jsr $29c2			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.2964	20 8f 29	jsr $298f			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.2967	20 5f 2b	jsr $2b5f			jsr		FloatNormalise 				; renormalise
.296a	20 55 2b	jsr $2b55			jsr 	FloatCalculateSign 			; calculate result sign
.296d	b5 71		lda $71,x			lda 	NSExponent,x 				; calculate exponent
.296f	38		sec				sec
.2970	f5 72		sbc $72,x			sbc 	NSExponent+1,x
.2972	38		sec				sec
.2973	e9 1e		sbc #$1e			sbc 	#30
.2975	95 71		sta $71,x			sta 	NSExponent,x
.2977					_FDExit:
.2977	68		pla				pla
.2978	18		clc				clc
.2979	60		rts				rts
.297a					_FDZero:
.297a	68		pla				pla
.297b	38		sec				sec
.297c	60		rts				rts
.297d					DivideInt32:
.297d	20 45 2a	jsr $2a45			jsr 	FloatIntegerPart 			; make both integers
.2980	ca		dex				dex
.2981	20 45 2a	jsr $2a45			jsr 	FloatIntegerPart
.2984	20 a0 29	jsr $29a0			jsr 	Int32Divide 				; divide
.2987	20 8f 29	jsr $298f			jsr 	NSMCopyPlusTwoToZero 		; copy result
.298a	20 55 2b	jsr $2b55			jsr 	FloatCalculateSign 			; calculate result sign
.298d	18		clc				clc
.298e	60		rts				rts
.298f					NSMCopyPlusTwoToZero:
.298f	b5 43		lda $43,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.2991	95 41		sta $41,x			sta 	NSMantissa0,x
.2993	b5 4f		lda $4f,x			lda 	NSMantissa1+2,x
.2995	95 4d		sta $4d,x			sta 	NSMantissa1,x
.2997	b5 5b		lda $5b,x			lda 	NSMantissa2+2,x
.2999	95 59		sta $59,x			sta 	NSMantissa2,x
.299b	b5 67		lda $67,x			lda 	NSMantissa3+2,x
.299d	95 65		sta $65,x			sta 	NSMantissa3,x
.299f	60		rts				rts
.29a0					Int32Divide:
.29a0	48		pha				pha 								; save AXY
.29a1	5a		phy				phy
.29a2	20 ed 2d	jsr $2ded			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.29a5	20 06 2e	jsr $2e06			jsr 	FloatSetZeroMantissaOnly 	; set S[X] to zero
.29a8	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.29aa					_I32DivideLoop:
.29aa	e8		inx				inx
.29ab	e8		inx				inx
.29ac	20 19 2e	jsr $2e19			jsr 	FloatShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.29af	ca		dex				dex
.29b0	ca		dex				dex
.29b1	20 1a 2e	jsr $2e1a			jsr 	FloatRotateLeft
.29b4	20 e0 29	jsr $29e0			jsr 	FloatDivideCheck 			; check if subtract possible
.29b7	90 02		bcc $29bb			bcc 	_I32DivideNoCarryIn
.29b9	f6 43		inc $43,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.29bb					_I32DivideNoCarryIn:
.29bb	88		dey				dey 								; loop round till division completed.
.29bc	d0 ec		bne $29aa			bne 	_I32DivideLoop
.29be	7a		ply				ply 								; restore AXY and exit
.29bf	68		pla				pla
.29c0	18		clc				clc
.29c1	60		rts				rts
.29c2					Int32ShiftDivide:
.29c2	48		pha				pha 								; save AY
.29c3	5a		phy				phy
.29c4	e8		inx				inx 								; clear S[X+2]
.29c5	e8		inx				inx
.29c6	20 0a 2e	jsr $2e0a			jsr 	FloatSetZero
.29c9	ca		dex				dex
.29ca	ca		dex				dex
.29cb	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.29cd					_I32SDLoop:
.29cd	20 e0 29	jsr $29e0			jsr 	FloatDivideCheck 			; check if subtract possible
.29d0	e8		inx				inx
.29d1	e8		inx				inx
.29d2	20 1a 2e	jsr $2e1a			jsr 	FloatRotateLeft				; shift 64 bit FPA left, rotating carry in
.29d5	ca		dex				dex
.29d6	ca		dex				dex
.29d7	20 1a 2e	jsr $2e1a			jsr 	FloatRotateLeft
.29da	88		dey				dey 	 							; do 31 times
.29db	d0 f0		bne $29cd			bne 	_I32SDLoop
.29dd	7a		ply				ply 								; restore AY and exit
.29de	68		pla				pla
.29df	60		rts				rts
.29e0					FloatDivideCheck:
.29e0	20 b0 2b	jsr $2bb0			jsr 	FloatSubTopTwoStack 		; subtract Stack[X+1] from Stack[X+0]
.29e3	b0 04		bcs $29e9			bcs 	_DCSExit 					; if carry set, then could do, exit
.29e5	20 96 2b	jsr $2b96			jsr 	FloatAddTopTwoStack 		; add it back in
.29e8	18		clc				clc 								; and return False
.29e9					_DCSExit:
.29e9	60		rts				rts
.29ea					FloatFractionalPart:
.29ea	5a		phy				phy
.29eb	b5 35		lda $35,x			lda 	NSStatus,x 					; take absolute value
.29ed	29 7f		and #$7f			and 	#$7F
.29ef	95 35		sta $35,x			sta 	NSStatus,x
.29f1	20 5f 2b	jsr $2b5f			jsr 	FloatNormalise
.29f4	b5 71		lda $71,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.29f6	38		sec				sec
.29f7	e9 e0		sbc #$e0			sbc 	#$E0
.29f9	90 29		bcc $2a24			bcc 	_FFPExit 					; already fractional
.29fb	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.29fd	b0 22		bcs $2a21			bcs 	_FFPZero
.29ff	a8		tay				tay 								; put count to do in Y
.2a00	b5 65		lda $65,x			lda 	NSMantissa3,x 				; do each in turn.
.2a02	20 29 2a	jsr $2a29			jsr 	_FFPPartial
.2a05	95 65		sta $65,x			sta 	NSMantissa3,x
.2a07	b5 59		lda $59,x			lda 	NSMantissa2,x
.2a09	20 29 2a	jsr $2a29			jsr 	_FFPPartial
.2a0c	95 59		sta $59,x			sta 	NSMantissa2,x
.2a0e	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.2a10	20 29 2a	jsr $2a29			jsr 	_FFPPartial
.2a13	95 4d		sta $4d,x			sta 	NSMantissa1,x
.2a15	b5 41		lda $41,x			lda 	NSMantissa0,x
.2a17	20 29 2a	jsr $2a29			jsr 	_FFPPartial
.2a1a	95 41		sta $41,x			sta 	NSMantissa0,x
.2a1c	20 2c 2e	jsr $2e2c			jsr 	FloatIsZero 					; zeroed check.
.2a1f	d0 03		bne $2a24			bne 	_FFPExit
.2a21					_FFPZero:
.2a21	20 0a 2e	jsr $2e0a			jsr 	FloatSetZero
.2a24					_FFPExit:
.2a24	20 5f 2b	jsr $2b5f			jsr 	FloatNormalise
.2a27	7a		ply				ply
.2a28	60		rts				rts
.2a29					_FFPPartial:
.2a29	c0 00		cpy #$00			cpy 	#0 							; no more to do
.2a2b	f0 17		beq $2a44			beq 	_FFFPPExit
.2a2d	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.2a2f	b0 0c		bcs $2a3d			bcs 	_FFFPPWholeByte
.2a31	5a		phy				phy
.2a32					_FFFPPLeft:
.2a32	0a		asl a				asl 	a
.2a33	88		dey				dey
.2a34	d0 fc		bne $2a32			bne 	_FFFPPLeft
.2a36	7a		ply				ply
.2a37					_FFFPPRight:
.2a37	4a		lsr a				lsr 	a
.2a38	88		dey				dey
.2a39	d0 fc		bne $2a37			bne 	_FFFPPRight
.2a3b	80 07		bra $2a44			bra 	_FFFPPExit
.2a3d					_FFFPPWholeByte:
.2a3d	98		tya				tya 								; subtract 8 from count
.2a3e	38		sec				sec
.2a3f	e9 08		sbc #$08			sbc 	#8
.2a41	a8		tay				tay
.2a42	a9 00		lda #$00			lda 	#0 							; and clear all
.2a44					_FFFPPExit:
.2a44	60		rts				rts
.2a45					FloatIntegerPart:
.2a45	48		pha				pha
.2a46	b5 71		lda $71,x			lda 	NSExponent,x 				; is it integer already ?
.2a48	f0 1d		beq $2a67			beq 	_FIPExit 					; if so do nothing
.2a4a	20 2c 2e	jsr $2e2c			jsr 	FloatIsZero 				; is it zero ?
.2a4d	f0 15		beq $2a64			beq 	_FIPZero 					; if so return zero.
.2a4f	20 5f 2b	jsr $2b5f			jsr 	FloatNormalise 				; normalise
.2a52	f0 10		beq $2a64			beq 	_FIPZero 					; normalised to zero, exit zero
.2a54					_FIPShift:
.2a54	b5 71		lda $71,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.2a56	10 07		bpl $2a5f			bpl 	_FIPCheckZero
.2a58	20 23 2e	jsr $2e23			jsr 	FloatShiftRight 			; shift mantissa right
.2a5b	f6 71		inc $71,x			inc 	NSExponent,x 				; bump exponent
.2a5d	80 f5		bra $2a54			bra 	_FIPShift
.2a5f					_FIPCheckZero:
.2a5f	20 2c 2e	jsr $2e2c			jsr 	FloatIsZero 				; avoid -0 problem
.2a62	d0 03		bne $2a67			bne 	_FIPExit 					; set to zero if mantissa zero.
.2a64					_FIPZero:
.2a64	20 0a 2e	jsr $2e0a			jsr 	FloatSetZero
.2a67					_FIPExit:
.2a67	68		pla				pla
.2a68	60		rts				rts
.2a69					FloatIntegerPartDown:
.2a69	48		pha				pha
.2a6a	5a		phy				phy
.2a6b	b5 71		lda $71,x			lda 	NSExponent,x 				; is it integer already ?
.2a6d	f0 36		beq $2aa5			beq 	_FIPExit 					; if so do nothing
.2a6f	20 2c 2e	jsr $2e2c			jsr 	FloatIsZero 				; is it zero ?
.2a72	f0 2e		beq $2aa2			beq 	_FIPZero 					; if so return zero.
.2a74	20 5f 2b	jsr $2b5f			jsr 	FloatNormalise 				; normalise
.2a77	f0 29		beq $2aa2			beq 	_FIPZero 					; normalised to zero, exit zero
.2a79	a0 00		ldy #$00			ldy 	#0 							; reset the count of bits.
.2a7b					_FIPShift:
.2a7b	b5 71		lda $71,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.2a7d	10 0a		bpl $2a89			bpl 	_FIPCheckDown
.2a7f	20 23 2e	jsr $2e23			jsr 	FloatShiftRight 			; shift mantissa right
.2a82	90 01		bcc $2a85			bcc 	_FIPNoFrac 					; shifted a zero out ?
.2a84	c8		iny				iny
.2a85					_FIPNoFrac:
.2a85	f6 71		inc $71,x			inc 	NSExponent,x 				; bump exponent
.2a87	80 f2		bra $2a7b			bra 	_FIPShift
.2a89					_FIPCheckDown:
.2a89	c0 00		cpy #$00			cpy 	#0 							; were there any fractional bits.
.2a8b	f0 10		beq $2a9d			beq 	_FIPCheckZero
.2a8d	34 35		bit $35,x			bit 	NSStatus,x 					; +ve
.2a8f	10 0c		bpl $2a9d			bpl 	_FIPCheckZero
.2a91	e8		inx				inx 								; -ve so round *down*.
.2a92	a9 01		lda #$01			lda 	#1
.2a94	20 0c 2e	jsr $2e0c			jsr 	FloatSetByte
.2a97	20 cc 2d	jsr $2dcc			jsr 	FloatNegate
.2a9a	20 2e 28	jsr $282e			jsr 	FloatAdd
.2a9d					_FIPCheckZero:
.2a9d	20 2c 2e	jsr $2e2c			jsr 	FloatIsZero 				; avoid -0 problem
.2aa0	d0 03		bne $2aa5			bne 	_FIPExit 					; set to zero if mantissa zero.
.2aa2					_FIPZero:
.2aa2	20 0a 2e	jsr $2e0a			jsr 	FloatSetZero
.2aa5					_FIPExit:
.2aa5	7a		ply				ply
.2aa6	68		pla				pla
.2aa7	60		rts				rts
.2aa8					FloatInt8Multiply:
.2aa8	5a		phy				phy
.2aa9	b5 41		lda $41,x			lda 	NSMantissa0,x 				; right shifted multiplier in Y
.2aab	a8		tay				tay
.2aac	74 41		stz $41,x			stz 	NSMantissa0,x 				; zero the result (already 8 bit constant)
.2aae					_FI8MLoop:
.2aae	98		tya				tya 								; shift right shifter right into carry
.2aaf	4a		lsr a				lsr 	a
.2ab0	a8		tay				tay
.2ab1	90 0d		bcc $2ac0			bcc 	_FI8MNoAdd
.2ab3	18		clc				clc
.2ab4	b5 41		lda $41,x			lda 	NSMantissa0,x
.2ab6	75 42		adc $42,x			adc 	NSMantissa0+1,x
.2ab8	95 41		sta $41,x			sta 	NSMantissa0,x
.2aba	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.2abc	75 4e		adc $4e,x			adc 	NSMantissa1+1,x
.2abe	95 4d		sta $4d,x			sta 	NSMantissa1,x
.2ac0					_FI8MNoAdd:
.2ac0	16 42		asl $42,x			asl 	NSMantissa0+1,x 			; shift adder left
.2ac2	36 4e		rol $4e,x			rol 	NSMantissa1+1,x
.2ac4	c0 00		cpy #$00			cpy 	#0
.2ac6	d0 e6		bne $2aae			bne 	_FI8MLoop 					; until right shifter zero.
.2ac8	7a		ply				ply
.2ac9	60		rts				rts
.2aca					FloatMultiply:
.2aca	ca		dex				dex
.2acb	b5 71		lda $71,x			lda 	NSExponent,x 				; can use optimised ?
.2acd	15 72		ora $72,x			ora 	NSExponent+1,x
.2acf	15 65		ora $65,x			ora 	NSMantissa3,x
.2ad1	15 66		ora $66,x			ora 	NSMantissa3+1,x
.2ad3	d0 21		bne $2af6			bne 	_FMUseFloat
.2ad5	b5 35		lda $35,x			lda 	NSStatus,x 					; check if it is 8 bit unsigned
.2ad7	15 36		ora $36,x			ora 	NSStatus+1,x
.2ad9	29 80		and #$80			and 	#$80
.2adb	15 65		ora $65,x			ora 	NSMantissa3,x
.2add	15 59		ora $59,x			ora 	NSMantissa2,x
.2adf	15 4d		ora $4d,x			ora 	NSMantissa1,x
.2ae1	15 66		ora $66,x			ora 	NSMantissa3+1,x
.2ae3	15 5a		ora $5a,x			ora 	NSMantissa2+1,x
.2ae5	15 4e		ora $4e,x			ora 	NSMantissa1+1,x
.2ae7	d0 04		bne $2aed			bne 	_FMInt32
.2ae9	20 a8 2a	jsr $2aa8			jsr 	FloatInt8Multiply 			; use fast 8x8 multiply.
.2aec	60		rts				rts
.2aed					_FMInt32:
.2aed	20 17 2b	jsr $2b17			jsr 	FloatMultiplyShort			; use the int32 one.
.2af0	18		clc				clc 								; fix it up if gone out of range
.2af1	75 71		adc $71,x			adc 	NSExponent,x
.2af3	95 71		sta $71,x			sta 	NSExponent,x
.2af5	60		rts				rts
.2af6					_FMUseFloat:
.2af6	20 5f 2b	jsr $2b5f			jsr 	FloatNormalise		 		; normalise S[X] and exit if zero
.2af9	f0 18		beq $2b13			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.2afb	e8		inx				inx
.2afc	20 5f 2b	jsr $2b5f			jsr 	FloatNormalise		 		; normalise S[x+1] and error if zero.
.2aff	ca		dex				dex
.2b00	c9 00		cmp #$00			cmp 	#0
.2b02	f0 0c		beq $2b10			beq 	_FDSetZero
.2b04	20 17 2b	jsr $2b17			jsr 	FloatMultiplyShort 			; calculate the result.
.2b07	75 71		adc $71,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.2b09	18		clc				clc
.2b0a	75 72		adc $72,x			adc 	NSExponent+1,x
.2b0c	95 71		sta $71,x			sta 	NSExponent,x
.2b0e	80 03		bra $2b13			bra 	_FDExit
.2b10					_FDSetZero:
.2b10	20 0a 2e	jsr $2e0a			jsr 	FloatSetZero 				; return 0
.2b13					_FDExit:
.2b13	20 5f 2b	jsr $2b5f			jsr 	FloatNormalise 				; normalise the result
.2b16	60		rts				rts
.2b17					FloatMultiplyShort:
.2b17	5a		phy				phy 								; save Y
.2b18	20 ed 2d	jsr $2ded			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2]
.2b1b	20 06 2e	jsr $2e06			jsr 	FloatSetZeroMantissaOnly 	; set mantissa S[X] to zero
.2b1e	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.2b20					_I32MLoop:
.2b20	b5 43		lda $43,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.2b22	15 4f		ora $4f,x			ora 	NSMantissa1+2,x
.2b24	15 5b		ora $5b,x			ora 	NSMantissa2+2,x
.2b26	15 67		ora $67,x			ora 	NSMantissa3+2,x
.2b28	f0 25		beq $2b4f			beq 	_I32MExit 					; exit if zero
.2b2a	b5 43		lda $43,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.2b2c	29 01		and #$01			and 	#1
.2b2e	f0 0d		beq $2b3d			beq 	_I32MNoAdd
.2b30	20 96 2b	jsr $2b96			jsr 	FloatAddTopTwoStack 		; if so add S[X+1] to S[X+0]
.2b33	b5 65		lda $65,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.2b35	10 06		bpl $2b3d			bpl 	_I32MNoAdd
.2b37					_I32ShiftRight:
.2b37	20 23 2e	jsr $2e23			jsr 	FloatShiftRight 			; shift S[X] right
.2b3a	c8		iny				iny 								; increment shift count
.2b3b	80 09		bra $2b46			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.2b3d					_I32MNoAdd:
.2b3d	34 66		bit $66,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.2b3f	70 f6		bvs $2b37			bvs 	_I32ShiftRight 				; instead.
.2b41	e8		inx				inx
.2b42	20 19 2e	jsr $2e19			jsr 	FloatShiftLeft 				; shift additive S[X+1] left
.2b45	ca		dex				dex
.2b46					_I32MShiftUpper:
.2b46	e8		inx				inx 								; shift S[X+2] right
.2b47	e8		inx				inx
.2b48	20 23 2e	jsr $2e23			jsr 	FloatShiftRight
.2b4b	ca		dex				dex
.2b4c	ca		dex				dex
.2b4d	80 d1		bra $2b20			bra 	_I32MLoop 					; try again.
.2b4f					_I32MExit:
.2b4f	20 55 2b	jsr $2b55			jsr 	FloatCalculateSign
.2b52	98		tya				tya 								; shift in A
.2b53	7a		ply				ply 								; restore Y and exit
.2b54	60		rts				rts
.2b55					FloatCalculateSign:
.2b55	b5 35		lda $35,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.2b57	16 35		asl $35,x			asl 	NSStatus,x 					; shift result left
.2b59	55 36		eor $36,x			eor 	NSStatus+1,x
.2b5b	0a		asl a				asl 	a 							; shift bit 7 into carry
.2b5c	76 35		ror $35,x			ror 	NSStatus,x 					; shift right into status byte.
.2b5e	60		rts				rts
.2b5f					FloatNormalise:
.2b5f	20 2c 2e	jsr $2e2c			jsr 	FloatIsZero 				; if zero exit
.2b62	d0 07		bne $2b6b			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.2b64	16 35		asl $35,x			asl 	NSStatus,x 					; clear the sign bit.
.2b66	76 35		ror $35,x			ror 	NSStatus,x 					; (no -0)
.2b68	a9 00		lda #$00			lda 	#0 							; set Z flag
.2b6a	60		rts				rts
.2b6b					_NSNormaliseOptimise:
.2b6b	b5 65		lda $65,x			lda 	NSMantissa3,x 				; upper byte zero ?
.2b6d	d0 19		bne $2b88			bne 	_NSNormaliseLoop
.2b6f	b5 59		lda $59,x			lda 	NSMantissa2,x 				; byte normalise
.2b71	30 15		bmi $2b88			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.2b73	95 65		sta $65,x			sta 	NSMantissa3,x
.2b75	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.2b77	95 59		sta $59,x			sta 	NSMantissa2,x
.2b79	b5 41		lda $41,x			lda 	NSMantissa0,x
.2b7b	95 4d		sta $4d,x			sta 	NSMantissa1,x
.2b7d	74 41		stz $41,x			stz 	NSMantissa0,x
.2b7f	b5 71		lda $71,x			lda 	NSExponent,x
.2b81	38		sec				sec
.2b82	e9 08		sbc #$08			sbc 	#8
.2b84	95 71		sta $71,x			sta 	NSExponent,x
.2b86	80 e3		bra $2b6b			bra 	_NSNormaliseOptimise
.2b88					_NSNormaliseLoop:
.2b88	34 65		bit $65,x			bit 	NSMantissa3,x 				; bit 30 set ?
.2b8a	70 07		bvs $2b93			bvs 	_NSNExit 					; exit if so with Z flag clear
.2b8c	20 19 2e	jsr $2e19			jsr 	FloatShiftLeft 				; shift mantissa left
.2b8f	d6 71		dec $71,x			dec 	NSExponent,x 				; adjust exponent
.2b91	80 f5		bra $2b88			bra 	_NSNormaliseLoop
.2b93					_NSNExit:
.2b93	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.2b95	60		rts				rts
.2b96					FloatAddTopTwoStack:
.2b96	18		clc				clc
.2b97	b5 41		lda $41,x			lda		NSMantissa0,x
.2b99	75 42		adc $42,x			adc 		NSMantissa0+1,x
.2b9b	95 41		sta $41,x			sta 	NSMantissa0,x
.2b9d	b5 4d		lda $4d,x			lda		NSMantissa1,x
.2b9f	75 4e		adc $4e,x			adc 		NSMantissa1+1,x
.2ba1	95 4d		sta $4d,x			sta 	NSMantissa1,x
.2ba3	b5 59		lda $59,x			lda		NSMantissa2,x
.2ba5	75 5a		adc $5a,x			adc 		NSMantissa2+1,x
.2ba7	95 59		sta $59,x			sta 	NSMantissa2,x
.2ba9	b5 65		lda $65,x			lda		NSMantissa3,x
.2bab	75 66		adc $66,x			adc 		NSMantissa3+1,x
.2bad	95 65		sta $65,x			sta 	NSMantissa3,x
.2baf	60		rts				rts
.2bb0					FloatSubTopTwoStack:
.2bb0	38		sec				sec
.2bb1	b5 41		lda $41,x			lda		NSMantissa0,x
.2bb3	f5 42		sbc $42,x			sbc 		NSMantissa0+1,x
.2bb5	95 41		sta $41,x			sta 	NSMantissa0,x
.2bb7	b5 4d		lda $4d,x			lda		NSMantissa1,x
.2bb9	f5 4e		sbc $4e,x			sbc 		NSMantissa1+1,x
.2bbb	95 4d		sta $4d,x			sta 	NSMantissa1,x
.2bbd	b5 59		lda $59,x			lda		NSMantissa2,x
.2bbf	f5 5a		sbc $5a,x			sbc 		NSMantissa2+1,x
.2bc1	95 59		sta $59,x			sta 	NSMantissa2,x
.2bc3	b5 65		lda $65,x			lda		NSMantissa3,x
.2bc5	f5 66		sbc $66,x			sbc 		NSMantissa3+1,x
.2bc7	95 65		sta $65,x			sta 	NSMantissa3,x
.2bc9	60		rts				rts
.2bca					FloatInt32Add:
.2bca	b5 35		lda $35,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.2bcc	55 36		eor $36,x			eor 	NSStatus+1,x
.2bce	30 04		bmi $2bd4			bmi 	_DiffSigns
.2bd0	20 96 2b	jsr $2b96			jsr		FloatAddTopTwoStack
.2bd3	60		rts				rts
.2bd4					_DiffSigns:
.2bd4	20 b0 2b	jsr $2bb0			jsr 	FloatSubTopTwoStack 		; do a physical subtraction
.2bd7	34 65		bit $65,x			bit 	NSMantissa3,x 				; result is +ve, okay
.2bd9	10 07		bpl $2be2			bpl 	_AddExit
.2bdb	b5 36		lda $36,x			lda 	NSStatus+1,x 				; sign is that of 11th value
.2bdd	95 35		sta $35,x			sta 	NSStatus,x
.2bdf	20 d3 2d	jsr $2dd3			jsr 	FloatNegateMantissa 		; negate the mantissa and exit
.2be2					_AddExit:
.2be2	20 2c 2e	jsr $2e2c			jsr 	FloatIsZero 				; check for -0
.2be5	d0 02		bne $2be9			bne 	_AddNonZero
.2be7	74 35		stz $35,x			stz 	NSStatus,x
.2be9					_AddNonZero:
.2be9	60		rts				rts
=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.2bea					FloatEncodeStart:
.2bea	38		sec				sec
.2beb	80 01		bra $2bee			bra 	FloatEncodeContinue+1
.2bed					FloatEncodeContinue:
.2bed	18		clc				clc
.2bee					FloatEncode:
.2bee	08		php				php 								; save reset flag.
.2bef	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.2bf1	f0 15		beq $2c08			beq 	_ENIsOkay
.2bf3	c9 30		cmp #$30			cmp 	#"0"
.2bf5	90 04		bcc $2bfb			bcc 	_ENBadNumber
.2bf7	c9 3a		cmp #$3a			cmp 	#"9"+1
.2bf9	90 0d		bcc $2c08			bcc 	_ENIsOkay
.2bfb					_ENBadNumber:
.2bfb	28		plp				plp 								; throw saved reset
.2bfc	ad 8f 05	lda $058f			lda 	encodeState 				; if in decimal mode, construct final number
.2bff	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.2c01	d0 03		bne $2c06			bne 	_ENFail
.2c03	4c 80 2c	jmp $2c80			jmp 	_ENConstructFinal
.2c06					_ENFail:
.2c06	18		clc				clc 								; not allowed
.2c07	60		rts				rts
.2c08					_ENIsOkay:
.2c08	28		plp				plp 								; are we restarting
.2c09	90 15		bcc $2c20			bcc 	_ENNoRestart
.2c0b					_ENStartEncode:
.2c0b	c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.2c0d	f0 0c		beq $2c1b			beq 	_ENFirstDP
.2c0f	29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.2c11	20 0c 2e	jsr $2e0c			jsr 	FloatSetByte 				; in single byte mode.
.2c14	a9 01		lda #$01			lda 	#ESTA_Low
.2c16					_ENExitChange:
.2c16	8d 8f 05	sta $058f			sta 	encodeState 				; save new state
.2c19	38		sec				sec
.2c1a	60		rts				rts
.2c1b					_ENFirstDP:
.2c1b	20 0a 2e	jsr $2e0a			jsr 	FloatSetZero 				; clear integer part
.2c1e	80 3c		bra $2c5c			bra 	_ESTASwitchFloat			; go straight to float and exi
.2c20					_ENNoRestart:
.2c20	48		pha				pha 								; save digit or DP on stack.
.2c21	ad 8f 05	lda $058f			lda 	encodeState 				; get current state
.2c24	c9 01		cmp #$01			cmp 	#ESTA_Low
.2c26	f0 09		beq $2c31			beq  	_ESTALowState
.2c28	c9 02		cmp #$02			cmp 	#ESTA_High
.2c2a	f0 26		beq $2c52			beq 	_ESTAHighState
.2c2c	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.2c2e	f0 38		beq $2c68			beq 	_ESTADecimalState
>2c30	db						.byte 	$DB 						; causes a break in the emulator
.2c31					_ESTALowState:
.2c31	68		pla				pla 								; get value back
.2c32	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.2c34	f0 26		beq $2c5c			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.2c36	29 0f		and #$0f			and 	#15 						; make digit
.2c38	8d 90 05	sta $0590			sta 	digitTemp 					; save it.
.2c3b	b5 41		lda $41,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.2c3d	0a		asl a				asl 	a
.2c3e	0a		asl a				asl 	a
.2c3f	75 41		adc $41,x			adc 	NSMantissa0,x
.2c41	0a		asl a				asl 	a
.2c42	6d 90 05	adc $0590			adc 	digitTemp
.2c45	95 41		sta $41,x			sta 	NSMantissa0,x
.2c47	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.2c49	90 05		bcc $2c50			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.2c4b	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.2c4d	8d 8f 05	sta $058f			sta 	encodeState
.2c50					_ESTANoSwitch:
.2c50	38		sec				sec
.2c51	60		rts				rts
.2c52					_ESTAHighState:
.2c52	68		pla				pla 								; get value back
.2c53	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.2c55	f0 05		beq $2c5c			beq 	_ESTASwitchFloat
.2c57	20 b2 2c	jsr $2cb2			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.2c5a	38		sec				sec
.2c5b	60		rts				rts
.2c5c					_ESTASwitchFloat:
.2c5c	9c 91 05	stz $0591			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.2c5f	e8		inx				inx 								; zero the decimal additive.
.2c60	20 0a 2e	jsr $2e0a			jsr 	FloatSetZero
.2c63	ca		dex				dex
.2c64	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.2c66	80 ae		bra $2c16			bra 	_ENExitChange
.2c68					_ESTADecimalState:
.2c68	68		pla				pla 								; digit.
.2c69	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 11th decimal point.
.2c6b	f0 99		beq $2c06			beq 	_ENFail
.2c6d	e8		inx				inx 								; put digit into fractional part of X+1
.2c6e	20 b2 2c	jsr $2cb2			jsr 	ESTAShiftDigitIntoMantissa
.2c71	ca		dex				dex
.2c72	ee 91 05	inc $0591			inc 	decimalCount 				; bump the count of decimals
.2c75	ad 91 05	lda $0591			lda 	decimalCount 				; too many decimal digits.
.2c78	c9 0b		cmp #$0b			cmp 	#11
.2c7a	f0 02		beq $2c7e			beq 	_ESTADSFail
.2c7c	38		sec				sec
.2c7d	60		rts				rts
.2c7e					_ESTADSFail:
.2c7e	18		clc				clc
.2c7f	60		rts				rts
.2c80					_ENConstructFinal:
.2c80	ad 91 05	lda $0591			lda 	decimalCount 				; get decimal count
.2c83	f0 2b		beq $2cb0			beq 	_ENCFExit 					; no decimals
.2c85	5a		phy				phy
.2c86	0a		asl a				asl 	a 							; x 4 and CLC
.2c87	0a		asl a				asl 	a
.2c88	6d 91 05	adc $0591			adc 	decimalCount
.2c8b	a8		tay				tay
.2c8c	b9 17 29	lda $2917,y			lda 	FloatScalarTable-5,y 		; copy decimal scalar to X+2
.2c8f	95 43		sta $43,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.2c91	b9 18 29	lda $2918,y			lda 	FloatScalarTable-5+1,y
.2c94	95 4f		sta $4f,x			sta 	NSMantissa1+2,x
.2c96	b9 19 29	lda $2919,y			lda 	FloatScalarTable-5+2,y
.2c99	95 5b		sta $5b,x			sta 	NSMantissa2+2,x
.2c9b	b9 1a 29	lda $291a,y			lda 	FloatScalarTable-5+3,y
.2c9e	95 67		sta $67,x			sta 	NSMantissa3+2,x
.2ca0	b9 1b 29	lda $291b,y			lda 	FloatScalarTable-5+4,y
.2ca3	95 73		sta $73,x			sta 	NSExponent+2,x
.2ca5	74 37		stz $37,x			stz 	NSStatus+2,x 				; make +ve
.2ca7	e8		inx				inx 								; multiply decimal const by decimal scalar
.2ca8	e8		inx				inx
.2ca9	20 ca 2a	jsr $2aca			jsr 	FloatMultiply
.2cac	20 2e 28	jsr $282e			jsr 	FloatAdd 					; add to integer part.
.2caf	7a		ply				ply
.2cb0					_ENCFExit:
.2cb0	18		clc				clc 								; reject the digit.
.2cb1	60		rts				rts
.2cb2					ESTAShiftDigitIntoMantissa:
.2cb2	29 0f		and #$0f			and 	#15 						; save digit
.2cb4	48		pha				pha
.2cb5	b5 65		lda $65,x			lda 	NSMantissa3,x 				; push mantissa on stack
.2cb7	48		pha				pha
.2cb8	b5 59		lda $59,x			lda 	NSMantissa2,x
.2cba	48		pha				pha
.2cbb	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.2cbd	48		pha				pha
.2cbe	b5 41		lda $41,x			lda 	NSMantissa0,x
.2cc0	48		pha				pha
.2cc1	20 19 2e	jsr $2e19			jsr 	FloatShiftLeft 				; x 2
.2cc4	20 19 2e	jsr $2e19			jsr 	FloatShiftLeft 				; x 4
.2cc7	18		clc				clc 								; pop mantissa and add
.2cc8	68		pla				pla
.2cc9	75 41		adc $41,x			adc 	NSMantissa0,x
.2ccb	95 41		sta $41,x			sta 	NSMantissa0,x
.2ccd	68		pla				pla
.2cce	75 4d		adc $4d,x			adc 	NSMantissa1,x
.2cd0	95 4d		sta $4d,x			sta 	NSMantissa1,x
.2cd2	68		pla				pla
.2cd3	75 59		adc $59,x			adc 	NSMantissa2,x
.2cd5	95 59		sta $59,x			sta 	NSMantissa2,x
.2cd7	68		pla				pla
.2cd8	75 65		adc $65,x			adc 	NSMantissa3,x
.2cda	95 65		sta $65,x			sta 	NSMantissa3,x 				; x 5
.2cdc	20 19 2e	jsr $2e19			jsr 	FloatShiftLeft 				; x 10
.2cdf	68		pla				pla 								; add digit
.2ce0	18		clc				clc
.2ce1	75 41		adc $41,x			adc 	NSMantissa0,x
.2ce3	95 41		sta $41,x			sta 	NSMantissa0,x
.2ce5	90 0a		bcc $2cf1			bcc 	_ESTASDExit
.2ce7	f6 4d		inc $4d,x			inc 	NSMantissa1,x
.2ce9	d0 06		bne $2cf1			bne 	_ESTASDExit
.2ceb	f6 59		inc $59,x			inc 	NSMantissa2,x
.2ced	d0 02		bne $2cf1			bne 	_ESTASDExit
.2cef	f6 65		inc $65,x			inc 	NSMantissa3,x
.2cf1					_ESTASDExit:
.2cf1	60		rts				rts
.058f					encodeState:
>058f							.fill 	1
.0590					digitTemp:
>0590							.fill 	1
.0591					decimalCount:
>0591							.fill 	1
.2cf2					FloatToString:
.2cf2	da		phx				phx
.2cf3	5a		phy				phy 								; save code position
.2cf4	8d 92 05	sta $0592			sta 	decimalPlaces	 			; save number of DPs.
.2cf7	9c 93 05	stz $0593			stz 	dbOffset 					; offset into decimal buffer = start.
.2cfa	b5 35		lda $35,x			lda 	NSStatus,x  				; is it -ve.
.2cfc	10 08		bpl $2d06			bpl 	_CNTSNotNegative
.2cfe	29 7f		and #$7f			and 	#$7F 						; make +ve
.2d00	95 35		sta $35,x			sta 	NSStatus,x
.2d02	a9 2d		lda #$2d			lda 	#"-"
.2d04	80 02		bra $2d08			bra 	_CNTMain
.2d06					_CNTSNotNegative:
.2d06	a9 20		lda #$20			lda 	#" "
.2d08					_CNTMain:
.2d08	20 6a 2d	jsr $2d6a			jsr 	WriteDecimalBuffer
.2d0b	b5 71		lda $71,x			lda 	NSExponent,x 				; check if decimal
.2d0d	f0 0d		beq $2d1c			beq 	_CNTSNotFloat
.2d0f	e8		inx				inx 								; round up so we don't get too many 6.999999
.2d10	a9 01		lda #$01			lda 	#1
.2d12	20 0c 2e	jsr $2e0c			jsr 	FloatSetByte
.2d15	b5 70		lda $70,x			lda		NSExponent-1,x
.2d17	95 71		sta $71,x			sta 	NSExponent,x
.2d19	20 2e 28	jsr $282e			jsr 	FloatAdd
.2d1c					_CNTSNotFloat:
.2d1c	20 4c 2d	jsr $2d4c			jsr 	MakePlusTwoString 			; do the integer part.
.2d1f	20 ea 29	jsr $29ea			jsr 	FloatFractionalPart 		; get the fractional part
.2d22	20 5f 2b	jsr $2b5f			jsr 	FloatNormalise					; normalise , exit if zero
.2d25	f0 22		beq $2d49			beq 	_CNTSExit
.2d27	a9 2e		lda #$2e			lda 	#"."
.2d29	20 6a 2d	jsr $2d6a			jsr 	WriteDecimalBuffer 			; write decimal place
.2d2c					_CNTSDecimal:
.2d2c	ce 92 05	dec $0592			dec 	decimalPlaces 				; done all the decimals
.2d2f	30 18		bmi $2d49			bmi 	_CNTSExit
.2d31	e8		inx				inx 								; x 10.0
.2d32	a9 0a		lda #$0a			lda 	#10
.2d34	20 0c 2e	jsr $2e0c			jsr 	FloatSetByte
.2d37	20 ca 2a	jsr $2aca			jsr 	FloatMultiply
.2d3a	20 4c 2d	jsr $2d4c			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.2d3d	20 ea 29	jsr $29ea			jsr 	FloatFractionalPart 		; get the fractional part
.2d40	20 5f 2b	jsr $2b5f			jsr 	FloatNormalise 				; normalise it.
.2d43	b5 71		lda $71,x			lda 	NSExponent,x 				; gone to zero, exit.
.2d45	c9 d0		cmp #$d0			cmp 	#$D0 						; very small remainder, so don't bother.
.2d47	b0 e3		bcs $2d2c			bcs 	_CNTSDecimal 				; keep going.
.2d49					_CNTSExit:
.2d49	7a		ply				ply
.2d4a	fa		plx				plx
.2d4b	60		rts				rts
.2d4c					MakePlusTwoString:
.2d4c	da		phx				phx
.2d4d	20 ed 2d	jsr $2ded			jsr 	FloatShiftUpTwo 			; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.2d50	e8		inx				inx 								; access it
.2d51	e8		inx				inx
.2d52	20 45 2a	jsr $2a45			jsr 	FloatIntegerPart 			; make it an integer
.2d55	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.2d57	20 89 2d	jsr $2d89			jsr 	ConvertInt32
.2d5a	a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.2d5c					_MPTSCopy:
.2d5c	bd 6d 05	lda $056d,x			lda 	numberBuffer,x
.2d5f	20 6a 2d	jsr $2d6a			jsr 	WriteDecimalBuffer
.2d62	e8		inx				inx
.2d63	bd 6d 05	lda $056d,x			lda 	numberBuffer,x
.2d66	d0 f4		bne $2d5c			bne 	_MPTSCopy
.2d68	fa		plx				plx
.2d69	60		rts				rts
.2d6a					WriteDecimalBuffer:
.2d6a	da		phx				phx
.2d6b	ae 93 05	ldx $0593			ldx 	dbOffset
.2d6e	9d 94 05	sta $0594,x			sta 	decimalBuffer,x
.2d71	9e 95 05	stz $0595,x			stz 	decimalBuffer+1,x
.2d74	ee 93 05	inc $0593			inc 	dbOffset
.2d77	fa		plx				plx
.2d78	60		rts				rts
.0592					decimalPlaces:
>0592							.fill 	1
.0593					dbOffset:
>0593							.fill 	1
.0594					decimalBuffer:
>0594							.fill 	32
.2d79					ConvertInt16:
.2d79	85 41		sta $41				sta 	NSMantissa0 				; set up as 32 bit conversion
.2d7b	86 4d		stx $4d				stx 	NSMantissa1
.2d7d	64 59		stz $59				stz 	NSMantissa2
.2d7f	64 65		stz $65				stz 	NSMantissa3
.2d81	64 35		stz $35				stz 	NSStatus 					; positive integer
.2d83	a2 00		ldx #$00			ldx 	#0 							; stack level
.2d85	a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.2d87	80 00		bra $2d89			bra 	ConvertInt32
.2d89					ConvertInt32:
.2d89	5a		phy				phy
.2d8a	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.2d8c	24 35		bit $35				bit 	NSStatus 					; output a - if not negative.
.2d8e	10 08		bpl $2d98			bpl 	_CI32NotNeg
.2d90	48		pha				pha
.2d91	a9 2d		lda #$2d			lda 	#'-'
.2d93	99 6d 05	sta $056d,y			sta 	numberBuffer,y
.2d96	c8		iny				iny
.2d97	68		pla				pla
.2d98					_CI32NotNeg:
.2d98	20 a6 2d	jsr $2da6			jsr 	_CI32DivideConvert 			; recursive conversion
.2d9b	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.2d9d	99 6d 05	sta $056d,y			sta 	numberBuffer,y
.2da0	7a		ply				ply
.2da1	a2 05		ldx #$05			ldx 	#numberBuffer >> 8 			; return address in XA
.2da3	a9 6d		lda #$6d			lda 	#numberBuffer & $FF
.2da5	60		rts				rts
.2da6					_CI32DivideConvert:
.2da6	e8		inx				inx 								; write to next slot up
.2da7	20 0c 2e	jsr $2e0c			jsr 	FloatSetByte 		 		; write the base out.
.2daa	ca		dex				dex
.2dab	20 a0 29	jsr $29a0			jsr 	Int32Divide 				; divide
.2dae	b5 41		lda $41,x			lda 	NSMantissa0,x 				; save remainder
.2db0	48		pha				pha
.2db1	20 8f 29	jsr $298f			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.2db4	20 2c 2e	jsr $2e2c			jsr 	FloatIsZero 				; is it zero ?
.2db7	f0 05		beq $2dbe			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.2db9	b5 42		lda $42,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.2dbb	20 a6 2d	jsr $2da6			jsr 	_CI32DivideConvert 			; and recusrively call.
.2dbe					_CI32NoRecurse:
.2dbe	68		pla				pla 								; remainder
.2dbf	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.2dc1	90 02		bcc $2dc5			bcc 	_CI32NotHex
.2dc3	69 26		adc #$26			adc 	#6+32
.2dc5					_CI32NotHex:
.2dc5	69 30		adc #$30			adc 	#48
.2dc7	99 6d 05	sta $056d,y			sta 	numberBuffer,y 				; write out and exit
.2dca	c8		iny				iny
.2dcb	60		rts				rts
.2dcc					FloatNegate:
.2dcc	b5 35		lda $35,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.2dce	49 80		eor #$80			eor 	#$80  						; toggle the negative flag
.2dd0	95 35		sta $35,x			sta 	NSStatus,x
.2dd2	60		rts				rts
.2dd3					FloatNegateMantissa:
.2dd3	38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.2dd4	a9 00		lda #$00			lda 	#0
.2dd6	f5 41		sbc $41,x			sbc 	NSMantissa0,x
.2dd8	95 41		sta $41,x			sta 	NSMantissa0,x
.2dda	a9 00		lda #$00			lda 	#0
.2ddc	f5 4d		sbc $4d,x			sbc 	NSMantissa1,x
.2dde	95 4d		sta $4d,x			sta 	NSMantissa1,x
.2de0	a9 00		lda #$00			lda 	#0
.2de2	f5 59		sbc $59,x			sbc 	NSMantissa2,x
.2de4	95 59		sta $59,x			sta 	NSMantissa2,x
.2de6	a9 00		lda #$00			lda 	#0
.2de8	f5 65		sbc $65,x			sbc 	NSMantissa3,x
.2dea	95 65		sta $65,x			sta 	NSMantissa3,x
.2dec	60		rts				rts
.2ded					FloatShiftUpTwo:
.2ded	b5 41		lda $41,x			lda 	NSMantissa0,x
.2def	95 43		sta $43,x			sta 	NSMantissa0+2,x
.2df1	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.2df3	95 4f		sta $4f,x			sta 	NSMantissa1+2,x
.2df5	b5 59		lda $59,x			lda 	NSMantissa2,x
.2df7	95 5b		sta $5b,x			sta 	NSMantissa2+2,x
.2df9	b5 65		lda $65,x			lda 	NSMantissa3,x
.2dfb	95 67		sta $67,x			sta 	NSMantissa3+2,x
.2dfd	b5 71		lda $71,x			lda 	NSExponent,x
.2dff	95 73		sta $73,x			sta 	NSExponent+2,x
.2e01	b5 35		lda $35,x			lda 	NSStatus,x
.2e03	95 37		sta $37,x			sta 	NSStatus+2,x
.2e05	60		rts				rts
.2e06					FloatSetZeroMantissaOnly:
.2e06	74 41		stz $41,x			stz 	NSMantissa0,x
.2e08	80 08		bra $2e12			bra 	FloatZero13
.2e0a					FloatSetZero:
.2e0a	a9 00		lda #$00			lda 	#0
.2e0c					FloatSetByte:
.2e0c	74 71		stz $71,x			stz 	NSExponent,x 				; zero exponent, as +ve integer value.
.2e0e					FloatSetMantissa:
.2e0e	95 41		sta $41,x			sta 	NSMantissa0,x 				; zero mantissa
.2e10	74 35		stz $35,x			stz 	NSStatus,x
.2e12					FloatZero13:
.2e12	74 4d		stz $4d,x			stz 	NSMantissa1,x
.2e14	74 59		stz $59,x			stz 	NSMantissa2,x
.2e16	74 65		stz $65,x			stz 	NSMantissa3,x
.2e18	60		rts				rts
.2e19					FloatShiftLeft:
.2e19	18		clc				clc
.2e1a					FloatRotateLeft:
.2e1a	36 41		rol $41,x			rol 	NSMantissa0,x
.2e1c	36 4d		rol $4d,x			rol		NSMantissa1,x
.2e1e	36 59		rol $59,x			rol		NSMantissa2,x
.2e20	36 65		rol $65,x			rol		NSMantissa3,x
.2e22	60		rts				rts
.2e23					FloatShiftRight:
.2e23	56 65		lsr $65,x			lsr 	NSMantissa3,x
.2e25	76 59		ror $59,x			ror		NSMantissa2,x
.2e27	76 4d		ror $4d,x			ror		NSMantissa1,x
.2e29	76 41		ror $41,x			ror		NSMantissa0,x
.2e2b	60		rts				rts
.2e2c					FloatIsZero:
.2e2c	b5 65		lda $65,x			lda 	NSMantissa3,x
.2e2e	15 59		ora $59,x			ora		NSMantissa2,x
.2e30	15 4d		ora $4d,x			ora		NSMantissa1,x
.2e32	15 41		ora $41,x			ora		NSMantissa0,x
.2e34	60		rts				rts

;******  Processing input file: /home/paulr/Projects/blitz-compiler/documents/../bin/polynomials.library

.2e35					FloatArcTan:
.2e35	20 5f 2b	jsr $2b5f			jsr 	FloatNormalise 					; normalise x
.2e38	b5 35		lda $35,x			lda 	NSStatus,x 						; save sign, make absolute
.2e3a	48		pha				pha
.2e3b	74 35		stz $35,x			stz 	NSStatus,x
.2e3d	b5 71		lda $71,x			lda 	NSExponent,x 					; $40000000 ^ $E2 is 1.0
.2e3f	c9 e2		cmp #$e2			cmp 	#$E2
.2e41	90 25		bcc $2e68			bcc 	_UANoFixup
.2e43	8a		txa				txa 									; value in +1
.2e44	a8		tay				tay
.2e45	c8		iny				iny
.2e46	20 ee 2f	jsr $2fee			jsr 	CopyFloatXY
.2e49	a9 01		lda #$01			lda 	#1 								; 1.0 in +0
.2e4b	20 0c 2e	jsr $2e0c			jsr 	FloatSetByte
.2e4e	e8		inx				inx
.2e4f	20 53 29	jsr $2953			jsr 	FloatDivide
.2e52	b0 21		bcs $2e75			bcs 	_FATError
.2e54	20 78 2e	jsr $2e78			jsr 	CoreAtn 						; calculate the root
.2e57	20 e3 2f	jsr $2fe3			jsr 	CompletePolynomial
.2e5a	20 cc 2d	jsr $2dcc			jsr 	FloatNegate 					; make -ve
.2e5d	a9 05		lda #$05			lda 	#Const_PiDiv2-Const_Base
.2e5f	20 3a 30	jsr $303a			jsr 	LoadConstant
.2e62	e8		inx				inx
.2e63	20 2e 28	jsr $282e			jsr 	FloatAdd
.2e66	80 06		bra $2e6e			bra 	_UAComplete
.2e68					_UANoFixup:
.2e68	20 78 2e	jsr $2e78			jsr 	CoreAtn
.2e6b	20 e3 2f	jsr $2fe3			jsr 	CompletePolynomial
.2e6e					_UAComplete:
.2e6e	68		pla				pla 									; apply the result.
.2e6f	55 35		eor $35,x			eor 	NSStatus,x
.2e71	95 35		sta $35,x			sta 	NSStatus,x
.2e73	18		clc				clc
.2e74	60		rts				rts
.2e75					_FATError:
.2e75	68		pla				pla
.2e76	38		sec				sec
.2e77	60		rts				rts
.2e78					CoreAtn:
.2e78	a9 e6		lda #$e6			lda 	#AtnCoefficients & $FF
.2e7a	a0 2e		ldy #$2e			ldy 	#AtnCoefficients >> 8
.2e7c	4c 37 31	jmp $3137			jmp 	CorePolySquared
.2e7f					ExpCoefficients:
>2e7f	07					.byte	7
>2e80	2b 1f 2c 5a				.dword	$5a2c1f2b ; 2.1498763701e-05
>2e84	d2					.byte	$d2
>2e85	8e 59 3f 4b				.dword	$4b3f598e ; 0.00014352314037
>2e89	d5					.byte	$d5
>2e8a	c3 71 f7 57				.dword	$57f771c3 ; 0.0013422634825
>2e8e	d8					.byte	$d8
>2e8f	15 0e c2 4e				.dword	$4ec20e15 ; 0.0096140170135
>2e93	db					.byte	$db
>2e94	05 ac ac 71				.dword	$71acac05 ; 0.05550512686
>2e98	dd					.byte	$dd
>2e99	e3 f3 fe 7a				.dword	$7afef3e3 ; 0.2402263846
>2e9d	df					.byte	$df
>2e9e	08 0c b9 58				.dword	$58b90c08 ; 0.69314718618
>2ea2	e1					.byte	$e1
>2ea3	00 00 00 40				.dword	$40000000 ; 1.0
>2ea7	e2					.byte	$e2
.2ea8					SinCoefficients:
>2ea8	06					.byte	6
>2ea9	8d 16 0d f3				.dword	$f30d168d ; -14.381390672
>2ead	e5					.byte	$e5
>2eae	fc fd 03 54				.dword	$5403fdfc ; 42.007797122
>2eb2	e7					.byte	$e7
>2eb3	81 44 b4 cc				.dword	$ccb44481 ; -76.704170257
>2eb7	e8					.byte	$e8
>2eb8	f1 ef 9a 51				.dword	$519aeff1 ; 81.605223686
>2ebc	e8					.byte	$e8
>2ebd	94 f3 ae d2				.dword	$d2aef394 ; -41.341702104
>2ec1	e7					.byte	$e7
>2ec2	51 ed 87 64				.dword	$6487ed51 ; 6.2831853069
>2ec6	e4					.byte	$e4
>2ec7	00 00 00 00				.dword	$00000000 ; 0.0
>2ecb	00					.byte	$00
.2ecc					LogCoefficients:
>2ecc	04					.byte	4
>2ecd	bd 65 2b 6f				.dword	$6f2b65bd ; 0.43425594189
>2ed1	e0					.byte	$e0
>2ed2	b2 85 cd 49				.dword	$49cd85b2 ; 0.57658454124
>2ed6	e1					.byte	$e1
>2ed7	8b 49 1c 7b				.dword	$7b1c498b ; 0.96180075919
>2edb	e1					.byte	$e1
>2edc	90 1d 55 5c				.dword	$5c551d90 ; 2.8853900731
>2ee0	e3					.byte	$e3
>2ee1	00 00 00 c0				.dword	$c0000000 ; -0.5
>2ee5	e1					.byte	$e1
.2ee6					AtnCoefficients:
>2ee6	0c					.byte	12
>2ee7	ea de c1 d9				.dword	$d9c1deea ; -0.00068479391189
>2eeb	d7					.byte	$d7
>2eec	7a 53 7a 4f				.dword	$4f7a537a ; 0.0048509421558
>2ef0	da					.byte	$da
>2ef1	08 58 fe c1				.dword	$c1fe5808 ; -0.016111701843
>2ef5	dc					.byte	$dc
>2ef6	e5 b3 0f 46				.dword	$460fb3e5 ; 0.034209638048
>2efa	dd					.byte	$dd
>2efb	e1 e5 29 ef				.dword	$ef29e5e1 ; -0.054279132761
>2eff	dd					.byte	$dd
>2f00	26 38 32 4a				.dword	$4a323826 ; 0.07245719654
>2f04	de					.byte	$de
>2f05	bd 28 f5 db				.dword	$dbf528bd ; -0.089802395378
>2f09	de					.byte	$de
>2f0a	3f 44 98 71				.dword	$7198443f ; 0.11093241343
>2f0e	de					.byte	$de
>2f0f	9d 4c 22 c9				.dword	$c9224c9d ; -0.14283980767
>2f13	df					.byte	$df
>2f14	e3 48 66 66				.dword	$666648e3 ; 0.19999912049
>2f18	df					.byte	$df
>2f19	0a 55 55 d5				.dword	$d555550a ; -0.33333331568
>2f1d	e0					.byte	$e0
>2f1e	00 00 00 40				.dword	$40000000 ; 1.0
>2f22	e2					.byte	$e2
>2f23	00 00 00 00				.dword	$00000000 ; 0.0
>2f27	00					.byte	$00
.2f28					Const_Base:
.2f28					Const_1Div2Pi:
>2f28	b7 c1 7c 51				.dword	$517cc1b7 ; 0.15915494
>2f2c	df					.byte	$df
.2f2d					Const_PiDiv2:
>2f2d	51 ed 87 64				.dword	$6487ed51 ; 1.57079633
>2f31	e2					.byte	$e2
.2f32					Const_Log2_e:
>2f32	95 1d 55 5c				.dword	$5c551d95 ; 1.44269504
>2f36	e2					.byte	$e2
.2f37					Const_sqrt_2:
>2f37	9a 79 82 5a				.dword	$5a82799a ; 1.41421356
>2f3b	e2					.byte	$e2
.2f3c					Const_sqrt_half:
>2f3c	9a 79 82 5a				.dword	$5a82799a ; 0.70710678
>2f40	e1					.byte	$e1
.2f41					Const_pi:
>2f41	51 ed 87 64				.dword	$6487ed51 ; 3.14159265
>2f45	e3					.byte	$e3
.2f46					Const_half:
>2f46	00 00 00 40				.dword	$40000000 ; 0.50000000
>2f4a	e1					.byte	$e1
.2f4b					Const_ln_e:
>2f4b	fc 0b b9 58				.dword	$58b90bfc ; 0.69314718
>2f4f	e1					.byte	$e1
.2f50					FloatCosine:
.2f50	a9 05		lda #$05			lda 	#Const_PiDiv2-Const_Base
.2f52	20 3a 30	jsr $303a			jsr 	LoadConstant
.2f55	e8		inx				inx
.2f56	20 2e 28	jsr $282e			jsr 	FloatAdd
.2f59	4c f0 30	jmp $30f0			jmp 	FloatSine
.2f5c					FloatExponent:
.2f5c	a9 0a		lda #$0a			lda 	#Const_Log2_e-Const_Base
.2f5e	20 3a 30	jsr $303a			jsr 	LoadConstant
.2f61	e8		inx				inx
.2f62	20 ca 2a	jsr $2aca			jsr 	FloatMultiply
.2f65	20 a7 2f	jsr $2fa7			jsr 	_UECopy01 				; copy 0 to 1, get integer part to 1
.2f68	e8		inx				inx
.2f69	20 45 2a	jsr $2a45			jsr 	FloatIntegerPart
.2f6c	ca		dex				dex
.2f6d	b5 4e		lda $4e,x			lda 	NSMantissa1+1,x
.2f6f	15 5a		ora $5a,x			ora 	NSMantissa2+1,x
.2f71	15 66		ora $66,x			ora 	NSMantissa3+1,x
.2f73	d0 38		bne $2fad			bne 	_UERangeError
.2f75	b5 42		lda $42,x			lda 	NSMantissa0+1,x 		; push integer part on stack.
.2f77	c9 40		cmp #$40			cmp 	#64
.2f79	b0 32		bcs $2fad			bcs 	_UERangeError
.2f7b	48		pha				pha
.2f7c	b5 35		lda $35,x			lda 	NSStatus,x 				; push sign
.2f7e	48		pha				pha
.2f7f	20 ea 29	jsr $29ea			jsr 	FloatFractionalPart		; copy 0 to 1, get fractional part to 0
.2f82	68		pla				pla
.2f83	10 14		bpl $2f99			bpl 	_UEPositive
.2f85	e8		inx				inx 							; 1-x
.2f86	a9 01		lda #$01			lda 	#1
.2f88	20 0c 2e	jsr $2e0c			jsr 	FloatSetByte
.2f8b	ca		dex				dex
.2f8c	20 cc 2d	jsr $2dcc			jsr 	FloatNegate
.2f8f	e8		inx				inx
.2f90	20 2e 28	jsr $282e			jsr 	FloatAdd
.2f93	68		pla				pla 							; integer part +1 and negated.
.2f94	1a		inc a				inc 	a
.2f95	49 ff		eor #$ff			eor 	#$FF
.2f97	1a		inc a				inc 	a
.2f98	48		pha				pha
.2f99					_UEPositive:
.2f99	20 af 2f	jsr $2faf			jsr 	CoreExponent
.2f9c	20 e3 2f	jsr $2fe3			jsr 	CompletePolynomial
.2f9f	68		pla				pla
.2fa0	18		clc				clc
.2fa1	75 71		adc $71,x			adc 	NSExponent,x
.2fa3	95 71		sta $71,x			sta 	NSExponent,x
.2fa5	18		clc				clc
.2fa6	60		rts				rts
.2fa7					_UECopy01:
.2fa7	8a		txa				txa
.2fa8	a8		tay				tay
.2fa9	c8		iny				iny
.2faa	4c ee 2f	jmp $2fee			jmp 	CopyFloatXY
.2fad					_UERangeError:
.2fad	38		sec				sec
.2fae	60		rts				rts
.2faf					CoreExponent:
.2faf	a9 7f		lda #$7f			lda 	#ExpCoefficients & $FF
.2fb1	a0 2e		ldy #$2e			ldy 	#ExpCoefficients >> 8
.2fb3	20 b7 2f	jsr $2fb7			jsr 	CalculateHornerPolynomial
.2fb6	60		rts				rts
.2fb7					CalculateHornerPolynomial:
.2fb7	85 2f		sta $2f				sta 	zTemp0 						; save poly data from YA
.2fb9	84 30		sty $30				sty 	zTemp0+1
.2fbb	9c b4 05	stz $05b4			stz 	coefficientCount 			; zero the count.
.2fbe	8e b5 05	stx $05b5			stx 	xValueSlot 					; save xValue slot.
.2fc1	e8		inx				inx 								; set the count to zero.
.2fc2	20 0a 2e	jsr $2e0a			jsr 	FloatSetZero
.2fc5					_CHPLoop:
.2fc5	8a		txa				txa 								; copy X-1 to X+1
.2fc6	a8		tay				tay
.2fc7	ca		dex				dex
.2fc8	c8		iny				iny
.2fc9	20 ee 2f	jsr $2fee			jsr 	CopyFloatXY 				; e.g. stack is <current> <x>
.2fcc	e8		inx				inx
.2fcd	e8		inx				inx
.2fce	20 ca 2a	jsr $2aca			jsr 	FloatMultiply 				; times current by X
.2fd1	e8		inx				inx
.2fd2	20 0d 30	jsr $300d			jsr 	GetCoefficient 				; coefficient into X+1
.2fd5	20 2e 28	jsr $282e			jsr 	FloatAdd 					; and add
.2fd8	ee b4 05	inc $05b4			inc 	coefficientCount
.2fdb	ad b4 05	lda $05b4			lda 	coefficientCount
.2fde	d2 2f		cmp ($2f)			cmp 	(zTemp0)
.2fe0	d0 e3		bne $2fc5			bne 	_CHPLoop
.2fe2	60		rts				rts
.2fe3					CompletePolynomial:
.2fe3	20 ca 2a	jsr $2aca			jsr 	FloatMultiply
.2fe6	e8		inx				inx 								; get the last value
.2fe7	20 0d 30	jsr $300d			jsr 	GetCoefficient
.2fea	20 2e 28	jsr $282e			jsr 	FloatAdd 					; and add it
.2fed	60		rts				rts
.2fee					CopyFloatXY:
.2fee	b5 71		lda $71,x			lda 	NSExponent,x
.2ff0	99 71 00	sta $0071,y			sta 	NSExponent,y
.2ff3	b5 35		lda $35,x			lda 	NSStatus,x
.2ff5	99 35 00	sta $0035,y			sta 	NSStatus,y
.2ff8	b5 41		lda $41,x			lda 	NSMantissa0,x
.2ffa	99 41 00	sta $0041,y			sta 	NSMantissa0,y
.2ffd	b5 4d		lda $4d,x			lda 	NSMantissa1,x
.2fff	99 4d 00	sta $004d,y			sta 	NSMantissa1,y
.3002	b5 59		lda $59,x			lda 	NSMantissa2,x
.3004	99 59 00	sta $0059,y			sta 	NSMantissa2,y
.3007	b5 65		lda $65,x			lda 	NSMantissa3,x
.3009	99 65 00	sta $0065,y			sta 	NSMantissa3,y
.300c	60		rts				rts
.300d					GetCoefficient:
.300d	5a		phy				phy
.300e	ad b4 05	lda $05b4			lda 	coefficientCount 			; 5 per block
.3011	0a		asl a				asl 	a
.3012	0a		asl a				asl 	a
.3013	38		sec				sec 								; +1 for count
.3014	6d b4 05	adc $05b4			adc 	coefficientCount
.3017	a8		tay				tay
.3018	b1 2f		lda ($2f),y			lda 	(zTemp0),y 					; copy mantissa
.301a	95 41		sta $41,x			sta 	NSMantissa0,x
.301c	c8		iny				iny
.301d	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.301f	95 4d		sta $4d,x			sta 	NSMantissa1,x
.3021	c8		iny				iny
.3022	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.3024	95 59		sta $59,x			sta 	NSMantissa2,x
.3026	c8		iny				iny
.3027	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.3029	48		pha				pha
.302a	29 7f		and #$7f			and 	#$7F 						; clear sign bit.
.302c	95 65		sta $65,x			sta 	NSMantissa3,x
.302e	c8		iny				iny
.302f	68		pla				pla
.3030	29 80		and #$80			and 	#$80
.3032	95 35		sta $35,x			sta 	NSStatus,x 					; put in status
.3034	b1 2f		lda ($2f),y			lda 	(zTemp0),y
.3036	95 71		sta $71,x			sta 	NSExponent,x
.3038	7a		ply				ply
.3039	60		rts				rts
.05b4					coefficientCount:
>05b4							.fill 	1
.05b5					xValueSlot:
>05b5							.fill 	1
.303a					LoadConstant:
.303a	5a		phy				phy
.303b	a8		tay				tay
.303c	b9 28 2f	lda $2f28,y			lda 	Const_Base+0,y
.303f	95 42		sta $42,x			sta 	NSMantissa0+1,x
.3041	b9 29 2f	lda $2f29,y			lda 	Const_Base+1,y
.3044	95 4e		sta $4e,x			sta 	NSMantissa1+1,x
.3046	b9 2a 2f	lda $2f2a,y			lda 	Const_Base+2,y
.3049	95 5a		sta $5a,x			sta 	NSMantissa2+1,x
.304b	b9 2b 2f	lda $2f2b,y			lda 	Const_Base+3,y
.304e	48		pha				pha
.304f	29 7f		and #$7f			and 	#$7F
.3051	95 66		sta $66,x			sta 	NSMantissa3+1,x
.3053	68		pla				pla
.3054	29 80		and #$80			and 	#$80
.3056	95 36		sta $36,x			sta 	NSStatus+1,x
.3058	b9 2c 2f	lda $2f2c,y			lda 	Const_Base+4,y
.305b	95 72		sta $72,x			sta 	NSExponent+1,x
.305d	7a		ply				ply
.305e	60		rts				rts
.305f					FloatLogarithm:
.305f	b5 35		lda $35,x			lda 	NSStatus,x 					; check > 0
.3061	30 5f		bmi $30c2			bmi 	_ULRange
.3063	20 2c 2e	jsr $2e2c			jsr 	FloatIsZero
.3066	f0 5a		beq $30c2			beq 	_ULRange
.3068	20 5f 2b	jsr $2b5f			jsr 	FloatNormalise 				; put into FP mode.
.306b	b5 71		lda $71,x			lda 	NSExponent,x 				; get power
.306d	48		pha				pha
.306e	a9 e1		lda #$e1			lda 	#(-31) & $FF 				; force into range 0.5 -> 1
.3070	95 71		sta $71,x			sta 	NSExponent,x
.3072	a9 14		lda #$14			lda 	#Const_sqrt_half-Const_Base
.3074	20 3a 30	jsr $303a			jsr 	LoadConstant
.3077	e8		inx				inx
.3078	20 2e 28	jsr $282e			jsr 	FloatAdd
.307b	8a		txa				txa 								; divide into sqrt 2.0
.307c	a8		tay				tay
.307d	c8		iny				iny
.307e	20 ee 2f	jsr $2fee			jsr 	CopyFloatXY
.3081	ca		dex				dex
.3082	a9 0f		lda #$0f			lda 	#Const_sqrt_2-Const_Base
.3084	20 3a 30	jsr $303a			jsr 	LoadConstant
.3087	e8		inx				inx
.3088	e8		inx				inx
.3089	20 53 29	jsr $2953			jsr 	FloatDivide 				; if zero, error.
.308c	b0 33		bcs $30c1			bcs 	_ULRangePla
.308e	20 cc 2d	jsr $2dcc			jsr 	FloatNegate 				; subtract from 1
.3091	e8		inx				inx
.3092	a9 01		lda #$01			lda 	#1
.3094	20 0c 2e	jsr $2e0c			jsr 	FloatSetByte
.3097	20 2e 28	jsr $282e			jsr 	FloatAdd
.309a	20 c4 30	jsr $30c4			jsr 	CoreLog
.309d	20 e3 2f	jsr $2fe3			jsr 	CompletePolynomial
.30a0	68		pla				pla 								; add exponent
.30a1	18		clc				clc
.30a2	69 1f		adc #$1f			adc 	#31 						; fix up
.30a4	48		pha				pha
.30a5	10 03		bpl $30aa			bpl 	_LogNotNeg
.30a7	49 ff		eor #$ff			eor 	#$FF
.30a9	1a		inc a				inc 	a
.30aa					_LogNotNeg:
.30aa	e8		inx				inx 								; set byte and sign.
.30ab	20 0c 2e	jsr $2e0c			jsr 	FloatSetByte
.30ae	68		pla				pla
.30af	29 80		and #$80			and 	#$80
.30b1	95 35		sta $35,x			sta 	NSStatus,x
.30b3	20 2e 28	jsr $282e			jsr 	FloatAdd
.30b6	a9 23		lda #$23			lda 	#Const_ln_e-Const_Base
.30b8	20 3a 30	jsr $303a			jsr 	LoadConstant
.30bb	e8		inx				inx
.30bc	20 ca 2a	jsr $2aca			jsr 	FloatMultiply
.30bf	18		clc				clc
.30c0	60		rts				rts
.30c1					_ULRangePla:
.30c1	68		pla				pla
.30c2					_ULRange:
.30c2	38		sec				sec
.30c3	60		rts				rts
.30c4					CoreLog:
.30c4	a9 cc		lda #$cc			lda 	#LogCoefficients & $FF
.30c6	a0 2e		ldy #$2e			ldy 	#LogCoefficients >> 8
.30c8	4c 37 31	jmp $3137			jmp 	CorePolySquared
.30cb					FloatPI:
.30cb	a9 19		lda #$19			lda 	#Const_pi-Const_Base
.30cd	20 3a 30	jsr $303a			jsr 	LoadConstant
.30d0	e8		inx				inx
.30d1	18		clc				clc
.30d2	60		rts				rts
.30d3					FloatPower:
.30d3	ca		dex				dex
.30d4	8a		txa				txa 							; copy 0 to 2, so we can process it
.30d5	a8		tay				tay
.30d6	c8		iny				iny
.30d7	c8		iny				iny
.30d8	20 ee 2f	jsr $2fee			jsr 	CopyFloatXY
.30db	e8		inx				inx 							; 2 = Log(0)
.30dc	e8		inx				inx
.30dd	20 5f 30	jsr $305f			jsr 	FloatLogarithm
.30e0	b0 0d		bcs $30ef			bcs 	_FPWExit
.30e2	20 ca 2a	jsr $2aca			jsr 	FloatMultiply			; Multiply by original 1, into 1.
.30e5	8a		txa				txa 							; copy to slot 0
.30e6	a8		tay				tay
.30e7	88		dey				dey
.30e8	20 ee 2f	jsr $2fee			jsr 	CopyFloatXY
.30eb	ca		dex				dex  							; Exponent code.
.30ec	20 5c 2f	jsr $2f5c			jsr 	FloatExponent
.30ef					_FPWExit:
.30ef	60		rts				rts
.30f0					FloatSine:
.30f0	b5 35		lda $35,x			lda 	NSStatus,x 					; save sign
.30f2	48		pha				pha
.30f3	74 35		stz $35,x			stz 	NSStatus,x 					; make +ve
.30f5	a9 00		lda #$00			lda 	#Const_1Div2Pi-Const_Base
.30f7	20 3a 30	jsr $303a			jsr 	LoadConstant
.30fa	e8		inx				inx
.30fb	20 ca 2a	jsr $2aca			jsr 	FloatMultiply
.30fe	20 ea 29	jsr $29ea			jsr 	FloatFractionalPart 		; take the fractional part
.3101	b5 71		lda $71,x			lda 	NSExponent,x 				; check exponent
.3103	c9 e0		cmp #$e0			cmp 	#$E0 						; < $E0 exponent : 0-0.25
.3105	90 1f		bcc $3126			bcc 	_USProcessExit
.3107	f0 06		beq $310f			beq 	_USSubtractFromHalf 		; = $E0 exponent : 0.25-0.5
.3109	b5 65		lda $65,x			lda 	NSMantissa3,x 				; if > 0.75 which is $60000000:$E1
.310b	c9 60		cmp #$60			cmp 	#$60
.310d	b0 0e		bcs $311d			bcs 	_USSubtractOne
.310f					_USSubtractFromHalf:
.310f	a9 1e		lda #$1e			lda 	#Const_half-Const_Base
.3111	20 3a 30	jsr $303a			jsr 	LoadConstant
.3114	e8		inx				inx
.3115	20 28 28	jsr $2828			jsr 	FloatSubtract
.3118	20 cc 2d	jsr $2dcc			jsr 	FloatNegate 				; then negate it
.311b	80 09		bra $3126			bra 	_USProcessExit 				; and exit
.311d					_USSubtractOne:
.311d	e8		inx				inx
.311e	a9 01		lda #$01			lda 	#1
.3120	20 0c 2e	jsr $2e0c			jsr 	FloatSetByte
.3123	20 28 28	jsr $2828			jsr 	FloatSubtract
.3126					_USProcessExit:
.3126	20 33 31	jsr $3133			jsr 	CoreSine
.3129	20 e3 2f	jsr $2fe3			jsr 	CompletePolynomial
.312c	68		pla				pla 								; restore sign and apply
.312d	55 35		eor $35,x			eor 	NSStatus,x
.312f	95 35		sta $35,x			sta 	NSStatus,x
.3131	18		clc				clc
.3132	60		rts				rts
.3133					CoreSine:
.3133	a9 a8		lda #$a8			lda 	#SinCoefficients & $FF
.3135	a0 2e		ldy #$2e			ldy 	#SinCoefficients >> 8
.3137					CorePolySquared:
.3137	48		pha				pha 								; save coefficient table
.3138	5a		phy				phy
.3139	8a		txa				txa 								; copy X to +1, +2
.313a	a8		tay				tay
.313b	c8		iny				iny
.313c	20 ee 2f	jsr $2fee			jsr 	CopyFloatXY
.313f	c8		iny				iny
.3140	20 ee 2f	jsr $2fee			jsr 	CopyFloatXY
.3143	e8		inx				inx 								; point to the pair and put x^2 on stack
.3144	e8		inx				inx
.3145	20 ca 2a	jsr $2aca			jsr 	FloatMultiply
.3148	7a		ply				ply 								; coefficient table back.
.3149	68		pla				pla
.314a	20 b7 2f	jsr $2fb7			jsr 	CalculateHornerPolynomial
.314d	8a		txa				txa 								; copy back to slot #1
.314e	a8		tay				tay
.314f	88		dey				dey
.3150	20 ee 2f	jsr $2fee			jsr	 	CopyFloatXY
.3153	ca		dex				dex 								; point at result
.3154	60		rts				rts
.3155					FloatSquareRoot:
.3155	20 5f 30	jsr $305f			jsr 	FloatLogarithm
.3158	b0 06		bcs $3160			bcs 	_FSQExit
.315a	d6 71		dec $71,x			dec 	NSExponent,x
.315c	20 5c 2f	jsr $2f5c			jsr 	FloatExponent
.315f	18		clc				clc
.3160					_FSQExit:
.3160	60		rts				rts
.3161					FloatTangent:
.3161	da		phx				phx
.3162	8a		txa				txa 								; sin -> +1
.3163	a8		tay				tay
.3164	c8		iny				iny
.3165	20 ee 2f	jsr $2fee			jsr 	CopyFloatXY
.3168	e8		inx				inx
.3169	20 f0 30	jsr $30f0			jsr 	FloatSine
.316c	ca		dex				dex
.316d	8a		txa				txa 								; cos -> +2
.316e	a8		tay				tay
.316f	c8		iny				iny
.3170	c8		iny				iny
.3171	20 ee 2f	jsr $2fee			jsr 	CopyFloatXY
.3174	e8		inx				inx
.3175	e8		inx				inx
.3176	20 50 2f	jsr $2f50			jsr 	FloatCosine
.3179	20 53 29	jsr $2953			jsr 	FloatDivide 				; calculate sin/cos
.317c	b0 07		bcs $3185			bcs 	_FTExit 					; divide by zero
.317e	8a		txa				txa 								; copy result down.
.317f	a8		tay				tay
.3180	88		dey				dey
.3181	20 ee 2f	jsr $2fee			jsr 	CopyFloatXY
.3184	18		clc				clc
.3185					_FTExit:
.3185	fa		plx				plx
.3186	60		rts				rts

;******  Processing input file: testing/testend.asm

=$3200							nextPage = (* + $FF) & $FF00 		; so I can include with that f*****g header.
.31fe					ObjectCodePreHeader:
>31fe	00 40 d4 54 00 a6 0e 48				.binary "code/code.bin"
>3206	00 a6 03 c7 a6 cb 93 93 b1 ce 0d 48 45 4c 4c 4f
>3216	20 57 4f 52 4c 44 20 21 b1 0d 92 a6 40 00 01 00
>3226	ca 81 58 03 40 00 01 00 ca 81 58 06 40 00 01 00
>3236	ca 81 58 09 a6 40 00 01 00 ca 81 58 0c 40 00 01
>3246	00 ca 81 58 0f a6 00 48 12 24 40 00 01 95 a6 40
>3256	12 01 50 03 8e 01 b4 28 82 ca 84 02 82 01 80 7c
>3266	a6 40 12 01 50 06 8e 01 b4 1e 82 ca 84 cc 00 01
>3276	82 7c a6 40 12 01 50 09 8e 01 b4 0e 82 ca 84 01
>3286	80 7c a6 40 12 01 50 0c 8e 01 b4 02 82 ca 84 7c
>3296	a6 a6 40 12 01 50 0f 8e 01 7c a6 24 a7 a6 a6 00
>32a6	48 15 2a 1d 01 95 00 48 18 30 27 01 95 a6 40 15
>32b6	cc 00 01 82 40 18 02 82 80 cc 00 b0 80 48 1b a6
>32c6	01 40 1b cb 51 c8 01 40 1b 01 80 00 c8 a6 30 a7
>32d6	2a a7 a6 01 48 12 24 40 00 01 95 a6 01 cc 00 b0
>32e6	40 12 01 50 06 8e 78 80 40 12 01 50 03 8e 78 80
>32f6	00 c8 a6 40 12 01 50 0c 8e 78 48 1e a6 40 1e 00
>3306	a3 88 d2 05 00 d1 55 00 a6 40 1e 01 a3 88 d2 05
>3316	00 d1 73 00 a6 40 12 01 50 0f 8e 78 48 21 a6 40
>3326	21 00 a3 88 d2 05 00 d1 91 00 a6 40 21 01 a3 88
>3336	d2 05 00 d1 b1 00 a6 01 cc 00 b0 40 12 01 50 06
>3346	8e 78 80 40 12 01 50 03 8e 78 80 40 12 01 50 09
>3356	8e 78 c8 a6 24 a7 a6 d0 7a ff a6 a6 40 12 01 50
>3366	03 8e 78 48 24 a6 40 24 01 a3 88 d2 0b 00 40 12
>3376	01 50 0c 8e 01 7c 98 a6 40 12 01 50 03 8e 40 24
>3386	02 81 7c 98 a6 a6 40 12 01 50 03 8e 78 48 24 a6
>3396	40 24 cb 4f a3 88 d2 14 00 40 12 01 50 03 8e cb
>33a6	4d 7c 40 12 01 50 0c 8e 00 7c 98 a6 40 12 01 50
>33b6	03 8e 40 24 02 80 7c 98 a6 a6 40 12 01 50 06 8e
>33c6	78 48 27 a6 40 27 00 a3 88 d2 0b 00 40 12 01 50
>33d6	0f 8e 01 7c 98 a6 40 12 01 50 06 8e 40 27 cc 00
>33e6	01 81 7c 98 a6 a6 40 12 01 50 06 8e 78 48 27 a6
>33f6	40 27 cc 00 1d a3 88 d2 15 00 40 12 01 50 06 8e
>3406	cc 00 1c 7c 40 12 01 50 0f 8e 00 7c 98 a6 40 12
>3416	01 50 06 8e 40 27 cc 00 01 80 7c 98 c4 ff
=12800					ObjectCode = ObjectCodePreHeader+2 			; so the code is at XX00

;******  End of listing
