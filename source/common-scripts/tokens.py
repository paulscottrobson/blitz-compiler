# *******************************************************************************************
# *******************************************************************************************
#
#		Name : 		tokens.py
#		Purpose :	Create tokens files / tokens class.
#		Date :		11th April 2023
#		Author : 	Paul Robson (paul@robsons.org.uk)
#
# *******************************************************************************************
# *******************************************************************************************

import os,re,sys

# *******************************************************************************************
#
#										C64 token class
#
# *******************************************************************************************

class TokenStore(object):

	def __init__(self):
		self.idToToken = {}
		self.tokenToID = {}
		self.append(self.get())
		self.append(self.getX16())

	def append(self,src):
		src = src.replace(" ","").replace("\t","").replace("\n","")
		for s in src.split("|"):
			m = s.upper().split(":")
			self.idToToken[int(m[0])] = m[1]
			self.tokenToID[m[1]] = int(m[0])

	def dump(self):
		ids = [x for x in self.idToToken.keys()]
		ids.sort()
		for i in ids:
			print("{0}_{1:20} = ${2:x} ; ${2:0x} {3}".format(self.getHeader(),self.tidy(self.idToToken[i]),i,self.idToToken[i].lower()))

	def tidy(self,s):
		s = s.replace("+","PLUS").replace("-","MINUS").replace("*","TIMES").replace("/","DIVIDE").replace("^","POWER")
		s = s.replace("(","LB").replace(">","GREATER").replace("<","LESS").replace("=","EQUAL").replace("$","DOLLAR")
		s = s.replace("#","HASH").replace("","").replace("","").replace("","").replace("","")
		#s = s.replace("","").replace("","").replace("","").replace("","").replace("","")
		return s 

	def getHeader(self):
		return "C64"

	def getAllTokens(self):
		return [x for x in self.tokenToID.keys()]
		
	def getToken(self,i):
		return self.idToToken[i] if i in self.idToToken else None

	def getID(self,t):
		t = t.strip().upper()
		return self.tokenToID[t] if t in self.tokenToID else None

	def getBinary(self):
		return ",".join([self.getToken(i) for i in range(self.getID("+"),self.getID("<")+1)])

	def get(self):
		return """
				128:END|129:FOR|130:NEXT|131:DATA|132:INPUT#|133:INPUT|134:DIM|135:READ|136:LET|137:GOTO|138:RUN|139:IF|
				140:RESTORE|141:GOSUB|142:RETURN|143:REM|144:STOP|145:ON|146:WAIT|147:LOAD|148:SAVE|149:VERIFY|150:DEF|151:POKE|152:PRINT#
				|153:PRINT|154:CONT|155:LIST|156:CLR|157:CMD|158:SYS|159:OPEN|160:CLOSE|161:GET|162:NEW|163:TAB(|164:TO|165:FN|166:SPC(
				|167:THEN|168:NOT|169:STEP|170:+|171:-|172:*|173:/|174:^|175:AND|176:OR|177:>|178:=|179:<|180:SGN|181:INT|182:ABS|183:USR
				|184:FRE|185:POS|186:SQR|187:RND|188:LOG|189:EXP|190:COS|191:SIN|192:TAN|193:ATN|194:PEEK|195:LEN|196:STR$|197:VAL|198:ASC
				|199:CHR$|200:LEFT$|201:RIGHT$|202:MID$|203:GO"""

	#
	#		X16 keywords sequential from $CE80
	#
	def getX16(self):
		s = """
				MON|DOS|OLD|GEOS|VPOKE|VLOAD|SCREEN|PSET|LINE|FRAME|RECT|CHAR|MOUSE|COLOR|TEST|RESET|CLS|CODEX|LOCATE|BOOT|KEYMAP|BLOAD|BVLOAD
				|BVERIFY|BANK|FMINIT|FMNOTE|FMDRUM|FMINST|FMVIB|FMFREQ|FMVOL|FMPAN|FMPLAY|FMCHORD|FMPOKE|PSGINIT|PSGNOTE|PSGVOL|PSGWAV|PSGFREQ
				|PSGPAN|PSGPLAY|PSGCHORD|REBOOT|POWEROFF|I2CPOKE|SLEEP|BSAVE|MENU|REN|LINPUT|LINPUT#|BINPUT#|HELP|BANNER|EXEC|TILE|EDIT
				|VPEEK|MX|MY|MB|JOY|HEX$|BIN$|I2CPEEK|POINTER|STRPTR|RPT$|MWHEEL"""

		s = s.replace("\n","").replace(" ","").replace("\t","").split("|")
		vpeek = s.index("VPEEK")
		return "|".join(["{0}:{1}".format(i+0xCE80+(0 if i < vpeek else 0x50-vpeek),s[i]) for i in range(0,len(s))])


if __name__ == "__main__":
	print(";\n;\tThis file is automatically generated.\n;")
	c64 = TokenStore()
	c64.dump()
	#print(c64.getBinary())
	#print(c64.getX16())
